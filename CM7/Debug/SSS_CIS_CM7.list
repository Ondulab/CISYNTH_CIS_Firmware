
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003528  0801edc0  0801edc0  0002edc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080222e8  080222e8  00040604  2**0
                  CONTENTS
  4 .ARM          00000008  080222e8  080222e8  000322e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080222f0  080222f0  00040604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080222f0  080222f0  000322f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080222f4  080222f4  000322f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000604  24000000  080222f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000386c  24000604  080228fc  00040604  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24003e70  080228fc  00043e70  2**0
                  ALLOC
 11 .lwip_sec     000019d0  30040000  080228fc  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00040604  2**0
                  CONTENTS, READONLY
 13 .debug_info   000694ee  00000000  00000000  00040632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ac8b  00000000  00000000  000a9b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a88  00000000  00000000  000b47b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002860  00000000  00000000  000b7238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ea1  00000000  00000000  000b9a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000498ab  00000000  00000000  000cf939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001bdd51  00000000  00000000  001191e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d1  00000000  00000000  002d6f35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c4e8  00000000  00000000  002d7008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000604 	.word	0x24000604
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801eda8 	.word	0x0801eda8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000608 	.word	0x24000608
 80002dc:	0801eda8 	.word	0x0801eda8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <SystemInit+0x104>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <SystemInit+0x104>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <SystemInit+0x104>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <SystemInit+0x104>)
 8000a8a:	f043 0310 	orr.w	r3, r3, #16
 8000a8e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <SystemInit+0x108>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	2b06      	cmp	r3, #6
 8000a9a:	d807      	bhi.n	8000aac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <SystemInit+0x108>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 030f 	bic.w	r3, r3, #15
 8000aa4:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <SystemInit+0x108>)
 8000aa6:	f043 0307 	orr.w	r3, r3, #7
 8000aaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aac:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <SystemInit+0x10c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a32      	ldr	r2, [pc, #200]	; (8000b7c <SystemInit+0x10c>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <SystemInit+0x10c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <SystemInit+0x10c>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <SystemInit+0x10c>)
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <SystemInit+0x110>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <SystemInit+0x108>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <SystemInit+0x108>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f023 030f 	bic.w	r3, r3, #15
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <SystemInit+0x108>)
 8000ae0:	f043 0307 	orr.w	r3, r3, #7
 8000ae4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <SystemInit+0x10c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SystemInit+0x10c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <SystemInit+0x10c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemInit+0x10c>)
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <SystemInit+0x114>)
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <SystemInit+0x10c>)
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemInit+0x118>)
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <SystemInit+0x10c>)
 8000b06:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <SystemInit+0x11c>)
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <SystemInit+0x10c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <SystemInit+0x10c>)
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <SystemInit+0x11c>)
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <SystemInit+0x10c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <SystemInit+0x10c>)
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <SystemInit+0x11c>)
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <SystemInit+0x10c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <SystemInit+0x10c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <SystemInit+0x10c>)
 8000b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <SystemInit+0x10c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <SystemInit+0x120>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <SystemInit+0x120>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <SystemInit+0x124>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <SystemInit+0x128>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b52:	d202      	bcs.n	8000b5a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <SystemInit+0x12c>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <SystemInit+0x130>)
 8000b5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SystemInit+0x104>)
 8000b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b68:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	52002000 	.word	0x52002000
 8000b7c:	58024400 	.word	0x58024400
 8000b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b84:	02020200 	.word	0x02020200
 8000b88:	01ff0000 	.word	0x01ff0000
 8000b8c:	01010280 	.word	0x01010280
 8000b90:	580000c0 	.word	0x580000c0
 8000b94:	5c001000 	.word	0x5c001000
 8000b98:	ffff0000 	.word	0xffff0000
 8000b9c:	51008108 	.word	0x51008108
 8000ba0:	52004000 	.word	0x52004000

08000ba4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bca:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c26:	f002 fa1b 	bl	8003060 <HAL_ADC_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c30:	f000 fe6e 	bl	8001910 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c40:	f003 f82e 	bl	8003ca0 <HAL_ADCEx_MultiModeConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c4a:	f000 fe61 	bl	8001910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c52:	2306      	movs	r3, #6
 8000c54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c5a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c5e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c60:	2304      	movs	r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_ADC1_Init+0xe4>)
 8000c72:	f002 fb95 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000c7c:	f000 fe48 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000814 	.word	0x24000814
 8000c8c:	40022000 	.word	0x40022000

08000c90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000caa:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <MX_ADC2_Init+0xc4>)
 8000cac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cba:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000d06:	f002 f9ab 	bl	8003060 <HAL_ADC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000d10:	f000 fdfe 	bl	8001910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_ADC2_Init+0xc8>)
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2304      	movs	r3, #4
 8000d28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_ADC2_Init+0xc0>)
 8000d38:	f002 fb32 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000d42:	f000 fde5 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	240007b0 	.word	0x240007b0
 8000d54:	40022100 	.word	0x40022100
 8000d58:	04300002 	.word	0x04300002

08000d5c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d76:	4a2a      	ldr	r2, [pc, #168]	; (8000e20 <MX_ADC3_Init+0xc4>)
 8000d78:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000d80:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d86:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dd0:	4812      	ldr	r0, [pc, #72]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000dd2:	f002 f945 	bl	8003060 <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000ddc:	f000 fd98 	bl	8001910 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_ADC3_Init+0xc8>)
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de4:	2306      	movs	r3, #6
 8000de6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000df0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000df2:	2304      	movs	r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_ADC3_Init+0xc0>)
 8000e04:	f002 facc 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000e0e:	f000 fd7f 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24000878 	.word	0x24000878
 8000e20:	58026000 	.word	0x58026000
 8000e24:	04300002 	.word	0x04300002

08000e28 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a48      	ldr	r2, [pc, #288]	; (8000f58 <HAL_ADC_MspInit+0x130>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12d      	bne.n	8000e96 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e3a:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e44:	4b45      	ldr	r3, [pc, #276]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10e      	bne.n	8000e6a <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e4c:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e52:	4a43      	ldr	r2, [pc, #268]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e54:	f043 0320 	orr.w	r3, r3, #32
 8000e58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e5c:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000e88:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000e8c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e90:	f001 ff30 	bl	8002cf4 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000e94:	e05b      	b.n	8000f4e <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC2)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a32      	ldr	r2, [pc, #200]	; (8000f64 <HAL_ADC_MspInit+0x13c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d12d      	bne.n	8000efc <HAL_ADC_MspInit+0xd4>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000ea8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <HAL_ADC_MspInit+0x134>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10e      	bne.n	8000ed0 <HAL_ADC_MspInit+0xa8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb8:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000eba:	f043 0320 	orr.w	r3, r3, #32
 8000ebe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000eee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000ef2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000ef6:	f001 fefd 	bl	8002cf4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000efa:	e028      	b.n	8000f4e <HAL_ADC_MspInit+0x126>
  else if(adcHandle->Instance==ADC3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_ADC_MspInit+0x140>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d123      	bne.n	8000f4e <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_ADC_MspInit+0x138>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000f42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000f46:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000f4a:	f001 fed3 	bl	8002cf4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000
 8000f5c:	24000624 	.word	0x24000624
 8000f60:	58024400 	.word	0x58024400
 8000f64:	40022100 	.word	0x40022100
 8000f68:	58026000 	.word	0x58026000

08000f6c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <MX_CRC_Init+0x40>)
 8000f74:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_CRC_Init+0x3c>)
 8000f96:	f003 f901 	bl	800419c <HAL_CRC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fa0:	f000 fcb6 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	240008dc 	.word	0x240008dc
 8000fac:	58024c00 	.word	0x58024c00

08000fb0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_CRC_MspInit+0x3c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10e      	bne.n	8000fe0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	58024c00 	.word	0x58024c00
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <MX_DMA_Init+0x3c>)
 8000ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x3c>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x3c>)
 800100c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	200b      	movs	r0, #11
 800101e:	f002 fff8 	bl	8004012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001022:	200b      	movs	r0, #11
 8001024:	f003 f80f 	bl	8004046 <HAL_NVIC_EnableIRQ>

}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400

08001034 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800104e:	463b      	mov	r3, r7
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <MX_FMC_Init+0xf8>)
 8001062:	4a33      	ldr	r2, [pc, #204]	; (8001130 <MX_FMC_Init+0xfc>)
 8001064:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <MX_FMC_Init+0xf8>)
 8001068:	4a32      	ldr	r2, [pc, #200]	; (8001134 <MX_FMC_Init+0x100>)
 800106a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <MX_FMC_Init+0xf8>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <MX_FMC_Init+0xf8>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <MX_FMC_Init+0xf8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_FMC_Init+0xf8>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <MX_FMC_Init+0xf8>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_FMC_Init+0xf8>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <MX_FMC_Init+0xf8>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_FMC_Init+0xf8>)
 8001098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <MX_FMC_Init+0xf8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <MX_FMC_Init+0xf8>)
 80010a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_FMC_Init+0xf8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_FMC_Init+0xf8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_FMC_Init+0xf8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_FMC_Init+0xf8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_FMC_Init+0xf8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 80010ca:	2308      	movs	r3, #8
 80010cc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010ce:	230f      	movs	r3, #15
 80010d0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 80010d2:	230a      	movs	r3, #10
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 80010d6:	2305      	movs	r3, #5
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010da:	2310      	movs	r3, #16
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010de:	2311      	movs	r3, #17
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80010e6:	2308      	movs	r3, #8
 80010e8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80010ea:	230f      	movs	r3, #15
 80010ec:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 80010ee:	230a      	movs	r3, #10
 80010f0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 80010f2:	2305      	movs	r3, #5
 80010f4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80010f6:	2310      	movs	r3, #16
 80010f8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80010fa:	2311      	movs	r3, #17
 80010fc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001102:	463a      	mov	r2, r7
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <MX_FMC_Init+0xf8>)
 800110c:	f00b f950 	bl	800c3b0 <HAL_SRAM_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 8001116:	f000 fbfb 	bl	8001910 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800111a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800111e:	f001 fdff 	bl	8002d20 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE END FMC_Init 2 */
}
 8001122:	bf00      	nop
 8001124:	3738      	adds	r7, #56	; 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000900 	.word	0x24000900
 8001130:	52004000 	.word	0x52004000
 8001134:	52004104 	.word	0x52004104

08001138 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	b0b6      	sub	sp, #216	; 0xd8
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800114e:	4b39      	ldr	r3, [pc, #228]	; (8001234 <HAL_FMC_MspInit+0xfc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d169      	bne.n	800122a <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_FMC_MspInit+0xfc>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	22bc      	movs	r2, #188	; 0xbc
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f019 f8d3 	bl	801a310 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800116a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001170:	2300      	movs	r3, #0
 8001172:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4618      	mov	r0, r3
 800117a:	f008 f825 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8001184:	f000 fbc4 	bl	8001910 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_FMC_MspInit+0x100>)
 800118a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800118e:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <HAL_FMC_MspInit+0x100>)
 8001190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001194:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <HAL_FMC_MspInit+0x100>)
 800119a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800119e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 80011a6:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 80011aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c0:	230c      	movs	r3, #12
 80011c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011ca:	4619      	mov	r1, r3
 80011cc:	481b      	ldr	r0, [pc, #108]	; (800123c <HAL_FMC_MspInit+0x104>)
 80011ce:	f006 fdf3 	bl	8007db8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ea:	230c      	movs	r3, #12
 80011ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <HAL_FMC_MspInit+0x108>)
 80011f8:	f006 fdde 	bl	8007db8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 80011fc:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001216:	230c      	movs	r3, #12
 8001218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001220:	4619      	mov	r1, r3
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <HAL_FMC_MspInit+0x10c>)
 8001224:	f006 fdc8 	bl	8007db8 <HAL_GPIO_Init>
 8001228:	e000      	b.n	800122c <HAL_FMC_MspInit+0xf4>
    return;
 800122a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800122c:	37d8      	adds	r7, #216	; 0xd8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24000628 	.word	0x24000628
 8001238:	58024400 	.word	0x58024400
 800123c:	58020c00 	.word	0x58020c00
 8001240:	58021400 	.word	0x58021400
 8001244:	58021000 	.word	0x58021000

08001248 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001250:	f7ff ff72 	bl	8001138 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b8d      	ldr	r3, [pc, #564]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	4a8b      	ldr	r2, [pc, #556]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	623b      	str	r3, [r7, #32]
 800128e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001290:	4b85      	ldr	r3, [pc, #532]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001296:	4a84      	ldr	r2, [pc, #528]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a0:	4b81      	ldr	r3, [pc, #516]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b7e      	ldr	r3, [pc, #504]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b4:	4a7c      	ldr	r2, [pc, #496]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d2:	4a75      	ldr	r2, [pc, #468]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012dc:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	4a6d      	ldr	r2, [pc, #436]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fa:	4b6b      	ldr	r3, [pc, #428]	; (80014a8 <MX_GPIO_Init+0x24c>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001318:	4b63      	ldr	r3, [pc, #396]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	4a5e      	ldr	r2, [pc, #376]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800132e:	f043 0320 	orr.w	r3, r3, #32
 8001332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <MX_GPIO_Init+0x24c>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001354:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <MX_GPIO_Init+0x24c>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RESET_Pin|MEMS_CS_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001368:	4850      	ldr	r0, [pc, #320]	; (80014ac <MX_GPIO_Init+0x250>)
 800136a:	f006 fed5 	bl	8008118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001374:	484e      	ldr	r0, [pc, #312]	; (80014b0 <MX_GPIO_Init+0x254>)
 8001376:	f006 fecf 	bl	8008118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f242 0104 	movw	r1, #8196	; 0x2004
 8001380:	484c      	ldr	r0, [pc, #304]	; (80014b4 <MX_GPIO_Init+0x258>)
 8001382:	f006 fec9 	bl	8008118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2124      	movs	r1, #36	; 0x24
 800138a:	484b      	ldr	r0, [pc, #300]	; (80014b8 <MX_GPIO_Init+0x25c>)
 800138c:	f006 fec4 	bl	8008118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2140      	movs	r1, #64	; 0x40
 8001394:	4849      	ldr	r0, [pc, #292]	; (80014bc <MX_GPIO_Init+0x260>)
 8001396:	f006 febf 	bl	8008118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2148      	movs	r1, #72	; 0x48
 800139e:	4848      	ldr	r0, [pc, #288]	; (80014c0 <MX_GPIO_Init+0x264>)
 80013a0:	f006 feba 	bl	8008118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|MEMS_CS_Pin;
 80013a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	483b      	ldr	r0, [pc, #236]	; (80014ac <MX_GPIO_Init+0x250>)
 80013be:	f006 fcfb 	bl	8007db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_FSYNC_Pin;
 80013c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4836      	ldr	r0, [pc, #216]	; (80014b0 <MX_GPIO_Init+0x254>)
 80013d8:	f006 fcee 	bl	8007db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_RS_Pin;
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_RS_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	482e      	ldr	r0, [pc, #184]	; (80014b0 <MX_GPIO_Init+0x254>)
 80013f6:	f006 fcdf 	bl	8007db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 80013fa:	f242 0304 	movw	r3, #8196	; 0x2004
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4619      	mov	r1, r3
 8001412:	4828      	ldr	r0, [pc, #160]	; (80014b4 <MX_GPIO_Init+0x258>)
 8001414:	f006 fcd0 	bl	8007db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 8001418:	2324      	movs	r3, #36	; 0x24
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	4619      	mov	r1, r3
 800142e:	4822      	ldr	r0, [pc, #136]	; (80014b8 <MX_GPIO_Init+0x25c>)
 8001430:	f006 fcc2 	bl	8007db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <MX_GPIO_Init+0x260>)
 800144c:	f006 fcb4 	bl	8007db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 8001450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_GPIO_Init+0x268>)
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4818      	ldr	r0, [pc, #96]	; (80014c8 <MX_GPIO_Init+0x26c>)
 8001466:	f006 fca7 	bl	8007db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 800146a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_GPIO_Init+0x268>)
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4813      	ldr	r0, [pc, #76]	; (80014cc <MX_GPIO_Init+0x270>)
 8001480:	f006 fc9a 	bl	8007db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LED_Pin|DAC_DEMP_Pin;
 8001484:	2348      	movs	r3, #72	; 0x48
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4809      	ldr	r0, [pc, #36]	; (80014c0 <MX_GPIO_Init+0x264>)
 800149c:	f006 fc8c 	bl	8007db8 <HAL_GPIO_Init>

}
 80014a0:	bf00      	nop
 80014a2:	3738      	adds	r7, #56	; 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020400 	.word	0x58020400
 80014b0:	58020000 	.word	0x58020000
 80014b4:	58020800 	.word	0x58020800
 80014b8:	58021800 	.word	0x58021800
 80014bc:	58021400 	.word	0x58021400
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	11110000 	.word	0x11110000
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021000 	.word	0x58021000

080014d0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
 80014d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80014d8:	f000 f9da 	bl	8001890 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <main+0x24c>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d11b      	bne.n	8001520 <main+0x50>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e8:	f3bf 8f4f 	dsb	sy
}
 80014ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ee:	f3bf 8f6f 	isb	sy
}
 80014f2:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014f4:	4b89      	ldr	r3, [pc, #548]	; (800171c <main+0x24c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014fc:	f3bf 8f4f 	dsb	sy
}
 8001500:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001502:	f3bf 8f6f 	isb	sy
}
 8001506:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001508:	4b84      	ldr	r3, [pc, #528]	; (800171c <main+0x24c>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	4a83      	ldr	r2, [pc, #524]	; (800171c <main+0x24c>)
 800150e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001512:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001514:	f3bf 8f4f 	dsb	sy
}
 8001518:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800151a:	f3bf 8f6f 	isb	sy
}
 800151e:	e000      	b.n	8001522 <main+0x52>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001520:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001522:	4b7e      	ldr	r3, [pc, #504]	; (800171c <main+0x24c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d143      	bne.n	80015b6 <main+0xe6>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800152e:	4b7b      	ldr	r3, [pc, #492]	; (800171c <main+0x24c>)
 8001530:	2200      	movs	r2, #0
 8001532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001536:	f3bf 8f4f 	dsb	sy
}
 800153a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800153c:	4b77      	ldr	r3, [pc, #476]	; (800171c <main+0x24c>)
 800153e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001542:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001546:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001550:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001554:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001562:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800156c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800156e:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8001572:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001574:	4969      	ldr	r1, [pc, #420]	; (800171c <main+0x24c>)
 8001576:	4313      	orrs	r3, r2
 8001578:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800157c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8001580:	1e5a      	subs	r2, r3, #1
 8001582:	f8c7 246c 	str.w	r2, [r7, #1132]	; 0x46c
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1eb      	bne.n	8001562 <main+0x92>
    } while(sets-- != 0U);
 800158a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	f8c7 2470 	str.w	r2, [r7, #1136]	; 0x470
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1dd      	bne.n	8001554 <main+0x84>
  __ASM volatile ("dsb 0xF":::"memory");
 8001598:	f3bf 8f4f 	dsb	sy
}
 800159c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800159e:	4b5f      	ldr	r3, [pc, #380]	; (800171c <main+0x24c>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a5e      	ldr	r2, [pc, #376]	; (800171c <main+0x24c>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015aa:	f3bf 8f4f 	dsb	sy
}
 80015ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b0:	f3bf 8f6f 	isb	sy
}
 80015b4:	e000      	b.n	80015b8 <main+0xe8>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015b6:	bf00      	nop
	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80015b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015bc:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80015c0:	bf00      	nop
 80015c2:	4b57      	ldr	r3, [pc, #348]	; (8001720 <main+0x250>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <main+0x10c>
 80015ce:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80015d2:	1e5a      	subs	r2, r3, #1
 80015d4:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 80015d8:	2b00      	cmp	r3, #0
 80015da:	dcf2      	bgt.n	80015c2 <main+0xf2>
	if ( timeout < 0 )
 80015dc:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da01      	bge.n	80015e8 <main+0x118>
	{
		Error_Handler();
 80015e4:	f000 f994 	bl	8001910 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015e8:	f001 faae 	bl	8002b48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015ec:	f000 f89e 	bl	800172c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80015f0:	f000 f922 	bl	8001838 <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80015f4:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <main+0x250>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	4a49      	ldr	r2, [pc, #292]	; (8001720 <main+0x250>)
 80015fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <main+0x250>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800160e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001618:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800161a:	2000      	movs	r0, #0
 800161c:	f006 fdb0 	bl	8008180 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001620:	2100      	movs	r1, #0
 8001622:	2000      	movs	r0, #0
 8001624:	f006 fdc6 	bl	80081b4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162c:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001630:	bf00      	nop
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <main+0x250>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <main+0x17c>
 800163e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001642:	1e5a      	subs	r2, r3, #1
 8001644:	f8c7 247c 	str.w	r2, [r7, #1148]	; 0x47c
 8001648:	2b00      	cmp	r3, #0
 800164a:	dcf2      	bgt.n	8001632 <main+0x162>
	if ( timeout < 0 )
 800164c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001650:	2b00      	cmp	r3, #0
 8001652:	da01      	bge.n	8001658 <main+0x188>
	{
		Error_Handler();
 8001654:	f000 f95c 	bl	8001910 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001658:	f7ff fe00 	bl	800125c <MX_GPIO_Init>
	MX_DMA_Init();
 800165c:	f7ff fcca 	bl	8000ff4 <MX_DMA_Init>
	MX_ADC1_Init();
 8001660:	f7ff faa0 	bl	8000ba4 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001664:	f7ff fb14 	bl	8000c90 <MX_ADC2_Init>
	MX_ADC3_Init();
 8001668:	f7ff fb78 	bl	8000d5c <MX_ADC3_Init>
	MX_FMC_Init();
 800166c:	f7ff fce2 	bl	8001034 <MX_FMC_Init>
	MX_SAI1_Init();
 8001670:	f000 f9a2 	bl	80019b8 <MX_SAI1_Init>
	MX_SPI2_Init();
 8001674:	f000 fa8c 	bl	8001b90 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 8001678:	f001 f82c 	bl	80026d4 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 800167c:	f000 fc9e 	bl	8001fbc <MX_TIM1_Init>
	MX_TIM3_Init();
 8001680:	f000 fd2c 	bl	80020dc <MX_TIM3_Init>
	MX_TIM4_Init();
 8001684:	f000 fd84 	bl	8002190 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001688:	f000 fddc 	bl	8002244 <MX_TIM5_Init>
	MX_TIM8_Init();
 800168c:	f000 fe34 	bl	80022f8 <MX_TIM8_Init>
	MX_RNG_Init();
 8001690:	f000 f944 	bl	800191c <MX_RNG_Init>
	MX_CRC_Init();
 8001694:	f7ff fc6a 	bl	8000f6c <MX_CRC_Init>
	MX_LWIP_Init();
 8001698:	f00c fd4e 	bl	800e138 <MX_LWIP_Init>
	MX_PDM2PCM_Init();
 800169c:	f016 feac 	bl	80183f8 <MX_PDM2PCM_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2120      	movs	r1, #32
 80016a4:	481f      	ldr	r0, [pc, #124]	; (8001724 <main+0x254>)
 80016a6:	f006 fd37 	bl	8008118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2104      	movs	r1, #4
 80016ae:	481d      	ldr	r0, [pc, #116]	; (8001724 <main+0x254>)
 80016b0:	f006 fd32 	bl	8008118 <HAL_GPIO_WritePin>

	//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
	//  uint32_t framecount = 0;

	pcm5102_Init();
 80016b4:	f016 feca 	bl	801844c <pcm5102_Init>
	uint32_t aRandom32bit = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
	uint8_t buff[1000];

	for (uint32_t i = 0; i < 1000; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80016c4:	e019      	b.n	80016fa <main+0x22a>
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 80016c6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80016ca:	4619      	mov	r1, r3
 80016cc:	4816      	ldr	r0, [pc, #88]	; (8001728 <main+0x258>)
 80016ce:	f009 ff5c 	bl	800b58a <HAL_RNG_GenerateRandomNumber>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <main+0x20c>
		{
			/* Random number generation error */
			Error_Handler();
 80016d8:	f000 f91a 	bl	8001910 <Error_Handler>
		}
		buff[i] = aRandom32bit;
 80016dc:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 80016e0:	b2d9      	uxtb	r1, r3
 80016e2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80016e6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80016ea:	4413      	add	r3, r2
 80016ec:	460a      	mov	r2, r1
 80016ee:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1000; i++)
 80016f0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80016f4:	3301      	adds	r3, #1
 80016f6:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80016fa:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80016fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001702:	d3e0      	bcc.n	80016c6 <main+0x1f6>
	}
	while(1)
	{
		Audio_Player_Play(buff, 1000);
 8001704:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800170c:	4618      	mov	r0, r3
 800170e:	f016 febd 	bl	801848c <Audio_Player_Play>
		HAL_Delay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f001 faaa 	bl	8002c6c <HAL_Delay>
		Audio_Player_Play(buff, 1000);
 8001718:	e7f4      	b.n	8001704 <main+0x234>
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00
 8001720:	58024400 	.word	0x58024400
 8001724:	58021800 	.word	0x58021800
 8001728:	2400094c 	.word	0x2400094c

0800172c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b09c      	sub	sp, #112	; 0x70
 8001730:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001736:	224c      	movs	r2, #76	; 0x4c
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f018 fde8 	bl	801a310 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2220      	movs	r2, #32
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f018 fde2 	bl	801a310 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800174c:	2004      	movs	r0, #4
 800174e:	f006 fd45 	bl	80081dc <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b35      	ldr	r3, [pc, #212]	; (800182c <SystemClock_Config+0x100>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a34      	ldr	r2, [pc, #208]	; (800182c <SystemClock_Config+0x100>)
 800175c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <SystemClock_Config+0x100>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <SystemClock_Config+0x104>)
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	4a2f      	ldr	r2, [pc, #188]	; (8001830 <SystemClock_Config+0x104>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <SystemClock_Config+0x104>)
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001784:	bf00      	nop
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <SystemClock_Config+0x100>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001792:	d1f8      	bne.n	8001786 <SystemClock_Config+0x5a>
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <SystemClock_Config+0x108>)
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f023 0303 	bic.w	r3, r3, #3
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <SystemClock_Config+0x108>)
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80017a4:	2321      	movs	r3, #33	; 0x21
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017ae:	2301      	movs	r3, #1
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b2:	2302      	movs	r3, #2
 80017b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b6:	2302      	movs	r3, #2
 80017b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80017ba:	2305      	movs	r3, #5
 80017bc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 192;
 80017be:	23c0      	movs	r3, #192	; 0xc0
 80017c0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80017c2:	2302      	movs	r3, #2
 80017c4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80017c6:	2308      	movs	r3, #8
 80017c8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 8;
 80017ca:	2308      	movs	r3, #8
 80017cc:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80017ce:	2308      	movs	r3, #8
 80017d0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 fd56 	bl	8008290 <HAL_RCC_OscConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80017ea:	f000 f891 	bl	8001910 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ee:	233f      	movs	r3, #63	; 0x3f
 80017f0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f2:	2303      	movs	r3, #3
 80017f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017fa:	2308      	movs	r3, #8
 80017fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017fe:	2340      	movs	r3, #64	; 0x40
 8001800:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800180c:	2340      	movs	r3, #64	; 0x40
 800180e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2104      	movs	r1, #4
 8001814:	4618      	mov	r0, r3
 8001816:	f007 f94b 	bl	8008ab0 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0xf8>
	{
		Error_Handler();
 8001820:	f000 f876 	bl	8001910 <Error_Handler>
	}
}
 8001824:	bf00      	nop
 8001826:	3770      	adds	r7, #112	; 0x70
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024800 	.word	0x58024800
 8001830:	58000400 	.word	0x58000400
 8001834:	58024400 	.word	0x58024400

08001838 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0b0      	sub	sp, #192	; 0xc0
 800183c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	22bc      	movs	r2, #188	; 0xbc
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f018 fd63 	bl	801a310 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800184a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800184e:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2M = 6;
 8001850:	2306      	movs	r3, #6
 8001852:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001854:	23c0      	movs	r3, #192	; 0xc0
 8001856:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 10;
 8001858:	230a      	movs	r3, #10
 800185a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800185c:	230a      	movs	r3, #10
 800185e:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 10;
 8001860:	230a      	movs	r3, #10
 8001862:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4618      	mov	r0, r3
 800187a:	f007 fca5 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <PeriphCommonClock_Config+0x50>
	{
		Error_Handler();
 8001884:	f000 f844 	bl	8001910 <Error_Handler>
	}
}
 8001888:	bf00      	nop
 800188a:	37c0      	adds	r7, #192	; 0xc0
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80018a2:	f002 fbeb 	bl	800407c <HAL_MPU_Disable>
	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80018a6:	2301      	movs	r3, #1
 80018a8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x30040000;
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <MPU_Config+0x78>)
 80018b0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80018b2:	2307      	movs	r3, #7
 80018b4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80018be:	2303      	movs	r3, #3
 80018c0:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018d2:	463b      	mov	r3, r7
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fc09 	bl	80040ec <HAL_MPU_ConfigRegion>
	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80018da:	2301      	movs	r3, #1
 80018dc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x30044000;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MPU_Config+0x7c>)
 80018e0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80018e2:	230d      	movs	r3, #13
 80018e4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018f2:	463b      	mov	r3, r7
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fbf9 	bl	80040ec <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80018fa:	2004      	movs	r0, #4
 80018fc:	f002 fbd6 	bl	80040ac <HAL_MPU_Enable>

}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	30040000 	.word	0x30040000
 800190c:	30044000 	.word	0x30044000

08001910 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001918:	e7fe      	b.n	8001918 <Error_Handler+0x8>
	...

0800191c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <MX_RNG_Init+0x24>)
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <MX_RNG_Init+0x28>)
 8001924:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_RNG_Init+0x24>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <MX_RNG_Init+0x24>)
 800192e:	f009 fdd1 	bl	800b4d4 <HAL_RNG_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001938:	f7ff ffea 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2400094c 	.word	0x2400094c
 8001944:	48021800 	.word	0x48021800

08001948 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0b2      	sub	sp, #200	; 0xc8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	22bc      	movs	r2, #188	; 0xbc
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f018 fcd9 	bl	801a310 <memset>
  if(rngHandle->Instance==RNG)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <HAL_RNG_MspInit+0x68>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d11e      	bne.n	80019a6 <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	4618      	mov	r0, r3
 800197a:	f007 fc25 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001984:	f7ff ffc4 	bl	8001910 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_RNG_MspInit+0x6c>)
 800198a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <HAL_RNG_MspInit+0x6c>)
 8001990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001994:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_RNG_MspInit+0x6c>)
 800199a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80019a6:	bf00      	nop
 80019a8:	37c8      	adds	r7, #200	; 0xc8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	48021800 	.word	0x48021800
 80019b4:	58024400 	.word	0x58024400

080019b8 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <MX_SAI1_Init+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019e2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80019e6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_SAI1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001a00:	2302      	movs	r3, #2
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_SAI1_Init+0x64>)
 8001a08:	f009 fe0e 	bl	800b628 <HAL_SAI_InitProtocol>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8001a12:	f7ff ff7d 	bl	8001910 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	240009d8 	.word	0x240009d8
 8001a20:	40015804 	.word	0x40015804

08001a24 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0b8      	sub	sp, #224	; 0xe0
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	22bc      	movs	r2, #188	; 0xbc
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f018 fc6b 	bl	801a310 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a4d      	ldr	r2, [pc, #308]	; (8001b74 <HAL_SAI_MspInit+0x150>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	f040 8093 	bne.w	8001b6c <HAL_SAI_MspInit+0x148>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4618      	mov	r0, r3
 8001a56:	f007 fbb7 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_SAI_MspInit+0x40>
    {
      Error_Handler();
 8001a60:	f7ff ff56 	bl	8001910 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001a64:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <HAL_SAI_MspInit+0x154>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10e      	bne.n	8001a8a <HAL_SAI_MspInit+0x66>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_SAI_MspInit+0x158>)
 8001a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a72:	4a42      	ldr	r2, [pc, #264]	; (8001b7c <HAL_SAI_MspInit+0x158>)
 8001a74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a7c:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <HAL_SAI_MspInit+0x158>)
 8001a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_SAI_MspInit+0x154>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <HAL_SAI_MspInit+0x154>)
 8001a92:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8001a94:	2334      	movs	r3, #52	; 0x34
 8001a96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001aac:	2306      	movs	r3, #6
 8001aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4831      	ldr	r0, [pc, #196]	; (8001b80 <HAL_SAI_MspInit+0x15c>)
 8001aba:	f006 f97d 	bl	8007db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001abe:	2340      	movs	r3, #64	; 0x40
 8001ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001adc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4828      	ldr	r0, [pc, #160]	; (8001b84 <HAL_SAI_MspInit+0x160>)
 8001ae4:	f006 f968 	bl	8007db8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001aea:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_SAI_MspInit+0x168>)
 8001aec:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001af0:	2257      	movs	r2, #87	; 0x57
 8001af2:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b06:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b16:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b26:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b30:	2203      	movs	r2, #3
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001b40:	4811      	ldr	r0, [pc, #68]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b42:	f002 fc15 	bl	8004370 <HAL_DMA_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_SAI_MspInit+0x12c>
    {
      Error_Handler();
 8001b4c:	f7ff fee0 	bl	8001910 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001b66:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <HAL_SAI_MspInit+0x164>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001b6c:	bf00      	nop
 8001b6e:	37e0      	adds	r7, #224	; 0xe0
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40015804 	.word	0x40015804
 8001b78:	2400062c 	.word	0x2400062c
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	58021000 	.word	0x58021000
 8001b84:	58020c00 	.word	0x58020c00
 8001b88:	24000960 	.word	0x24000960
 8001b8c:	40020010 	.word	0x40020010

08001b90 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001b96:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <MX_SPI2_Init+0xa8>)
 8001b98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001b9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ba0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001baa:	2207      	movs	r2, #7
 8001bac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bc4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001bc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_SPI2_Init+0xa4>)
 8001c20:	f00a faa8 	bl	800c174 <HAL_SPI_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001c2a:	f7ff fe71 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	24000a70 	.word	0x24000a70
 8001c38:	40003800 	.word	0x40003800

08001c3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0ba      	sub	sp, #232	; 0xe8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	22bc      	movs	r2, #188	; 0xbc
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f018 fb57 	bl	801a310 <memset>
  if(spiHandle->Instance==SPI2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a40      	ldr	r2, [pc, #256]	; (8001d68 <HAL_SPI_MspInit+0x12c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d178      	bne.n	8001d5e <HAL_SPI_MspInit+0x122>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8001c72:	2305      	movs	r3, #5
 8001c74:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 8;
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001c82:	2302      	movs	r3, #2
 8001c84:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c8a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c98:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f007 fa92 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 8001caa:	f7ff fe31 	bl	8001910 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cb4:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	4a26      	ldr	r2, [pc, #152]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cd4:	f043 0308 	orr.w	r3, r3, #8
 8001cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cdc:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_SPI_MspInit+0x130>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d20:	2305      	movs	r3, #5
 8001d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4810      	ldr	r0, [pc, #64]	; (8001d70 <HAL_SPI_MspInit+0x134>)
 8001d2e:	f006 f843 	bl	8007db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8001d32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4806      	ldr	r0, [pc, #24]	; (8001d74 <HAL_SPI_MspInit+0x138>)
 8001d5a:	f006 f82d 	bl	8007db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d5e:	bf00      	nop
 8001d60:	37e8      	adds	r7, #232	; 0xe8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40003800 	.word	0x40003800
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58020c00 	.word	0x58020c00
 8001d74:	58020400 	.word	0x58020400

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_MspInit+0x30>)
 8001d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_MspInit+0x30>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_MspInit+0x30>)
 8001d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	58024400 	.word	0x58024400

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <NMI_Handler+0x4>

08001db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <HardFault_Handler+0x4>

08001db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <MemManage_Handler+0x4>

08001dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df8:	f000 ff18 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <DMA1_Stream0_IRQHandler+0x10>)
 8001e06:	f003 f879 	bl	8004efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	24000960 	.word	0x24000960

08001e14 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <ETH_IRQHandler+0x10>)
 8001e1a:	f004 fddd 	bl	80069d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	24000e44 	.word	0x24000e44

08001e28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
	return 1;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_kill>:

int _kill(int pid, int sig)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <_kill+0x20>)
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
	return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	24003e60 	.word	0x24003e60

08001e5c <_exit>:

void _exit (int status)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ffe5 	bl	8001e38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e6e:	e7fe      	b.n	8001e6e <_exit+0x12>

08001e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	e00a      	b.n	8001e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e82:	f3af 8000 	nop.w
 8001e86:	4601      	mov	r1, r0
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	60ba      	str	r2, [r7, #8]
 8001e8e:	b2ca      	uxtb	r2, r1
 8001e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dbf0      	blt.n	8001e82 <_read+0x12>
	}

return len;
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e009      	b.n	8001ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	60ba      	str	r2, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf1      	blt.n	8001ebc <_write+0x12>
	}
	return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_close>:

int _close(int file)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_isatty>:

int _isatty(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return 1;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <_sbrk+0x5c>)
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_sbrk+0x60>)
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <_sbrk+0x64>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <_sbrk+0x68>)
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d205      	bcs.n	8001f88 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <_sbrk+0x6c>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f86:	e009      	b.n	8001f9c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <_sbrk+0x64>)
 8001f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	24080000 	.word	0x24080000
 8001fac:	00000400 	.word	0x00000400
 8001fb0:	24000630 	.word	0x24000630
 8001fb4:	24003e70 	.word	0x24003e70
 8001fb8:	24003e60 	.word	0x24003e60

08001fbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b096      	sub	sp, #88	; 0x58
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	611a      	str	r2, [r3, #16]
 8001fde:	615a      	str	r2, [r3, #20]
 8001fe0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	222c      	movs	r2, #44	; 0x2c
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f018 f991 	bl	801a310 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fee:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <MX_TIM1_Init+0x118>)
 8001ff0:	4a39      	ldr	r2, [pc, #228]	; (80020d8 <MX_TIM1_Init+0x11c>)
 8001ff2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ff4:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <MX_TIM1_Init+0x118>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <MX_TIM1_Init+0x118>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002000:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <MX_TIM1_Init+0x118>)
 8002002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002006:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <MX_TIM1_Init+0x118>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800200e:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <MX_TIM1_Init+0x118>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <MX_TIM1_Init+0x118>)
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800201a:	482e      	ldr	r0, [pc, #184]	; (80020d4 <MX_TIM1_Init+0x118>)
 800201c:	f00a fa18 	bl	800c450 <HAL_TIM_OC_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002026:	f7ff fc73 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002036:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800203a:	4619      	mov	r1, r3
 800203c:	4825      	ldr	r0, [pc, #148]	; (80020d4 <MX_TIM1_Init+0x118>)
 800203e:	f00a fe3d 	bl	800ccbc <HAL_TIMEx_MasterConfigSynchronization>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002048:	f7ff fc62 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002054:	2300      	movs	r3, #0
 8002056:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002058:	2300      	movs	r3, #0
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800206c:	2204      	movs	r2, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4818      	ldr	r0, [pc, #96]	; (80020d4 <MX_TIM1_Init+0x118>)
 8002072:	f00a fa45 	bl	800c500 <HAL_TIM_OC_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800207c:	f7ff fc48 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002098:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <MX_TIM1_Init+0x118>)
 80020b6:	f00a fe89 	bl	800cdcc <HAL_TIMEx_ConfigBreakDeadTime>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80020c0:	f7ff fc26 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <MX_TIM1_Init+0x118>)
 80020c6:	f000 fa25 	bl	8002514 <HAL_TIM_MspPostInit>

}
 80020ca:	bf00      	nop
 80020cc:	3758      	adds	r7, #88	; 0x58
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	24000c28 	.word	0x24000c28
 80020d8:	40010000 	.word	0x40010000

080020dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ee:	463b      	mov	r3, r7
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
 80020fc:	615a      	str	r2, [r3, #20]
 80020fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <MX_TIM3_Init+0xac>)
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <MX_TIM3_Init+0xb0>)
 8002104:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <MX_TIM3_Init+0xac>)
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <MX_TIM3_Init+0xac>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_TIM3_Init+0xac>)
 8002114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002118:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_TIM3_Init+0xac>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <MX_TIM3_Init+0xac>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002126:	4818      	ldr	r0, [pc, #96]	; (8002188 <MX_TIM3_Init+0xac>)
 8002128:	f00a f992 	bl	800c450 <HAL_TIM_OC_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002132:	f7ff fbed 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	4619      	mov	r1, r3
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <MX_TIM3_Init+0xac>)
 8002146:	f00a fdb9 	bl	800ccbc <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002150:	f7ff fbde 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002154:	2300      	movs	r3, #0
 8002156:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	4807      	ldr	r0, [pc, #28]	; (8002188 <MX_TIM3_Init+0xac>)
 800216c:	f00a f9c8 	bl	800c500 <HAL_TIM_OC_ConfigChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002176:	f7ff fbcb 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800217a:	4803      	ldr	r0, [pc, #12]	; (8002188 <MX_TIM3_Init+0xac>)
 800217c:	f000 f9ca 	bl	8002514 <HAL_TIM_MspPostInit>

}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	24000bdc 	.word	0x24000bdc
 800218c:	40000400 	.word	0x40000400

08002190 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a2:	463b      	mov	r3, r7
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
 80021b0:	615a      	str	r2, [r3, #20]
 80021b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <MX_TIM4_Init+0xac>)
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <MX_TIM4_Init+0xb0>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <MX_TIM4_Init+0xac>)
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <MX_TIM4_Init+0xac>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <MX_TIM4_Init+0xac>)
 80021c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_TIM4_Init+0xac>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <MX_TIM4_Init+0xac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80021da:	4818      	ldr	r0, [pc, #96]	; (800223c <MX_TIM4_Init+0xac>)
 80021dc:	f00a f938 	bl	800c450 <HAL_TIM_OC_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80021e6:	f7ff fb93 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	4810      	ldr	r0, [pc, #64]	; (800223c <MX_TIM4_Init+0xac>)
 80021fa:	f00a fd5f 	bl	800ccbc <HAL_TIMEx_MasterConfigSynchronization>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002204:	f7ff fb84 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002208:	2300      	movs	r3, #0
 800220a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002218:	463b      	mov	r3, r7
 800221a:	2204      	movs	r2, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4807      	ldr	r0, [pc, #28]	; (800223c <MX_TIM4_Init+0xac>)
 8002220:	f00a f96e 	bl	800c500 <HAL_TIM_OC_ConfigChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800222a:	f7ff fb71 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <MX_TIM4_Init+0xac>)
 8002230:	f000 f970 	bl	8002514 <HAL_TIM_MspPostInit>

}
 8002234:	bf00      	nop
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	24000b44 	.word	0x24000b44
 8002240:	40000800 	.word	0x40000800

08002244 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002256:	463b      	mov	r3, r7
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	615a      	str	r2, [r3, #20]
 8002266:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <MX_TIM5_Init+0xac>)
 800226a:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <MX_TIM5_Init+0xb0>)
 800226c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <MX_TIM5_Init+0xac>)
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <MX_TIM5_Init+0xac>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <MX_TIM5_Init+0xac>)
 800227c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002280:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <MX_TIM5_Init+0xac>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <MX_TIM5_Init+0xac>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800228e:	4818      	ldr	r0, [pc, #96]	; (80022f0 <MX_TIM5_Init+0xac>)
 8002290:	f00a f8de 	bl	800c450 <HAL_TIM_OC_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800229a:	f7ff fb39 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022a6:	f107 031c 	add.w	r3, r7, #28
 80022aa:	4619      	mov	r1, r3
 80022ac:	4810      	ldr	r0, [pc, #64]	; (80022f0 <MX_TIM5_Init+0xac>)
 80022ae:	f00a fd05 	bl	800ccbc <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80022b8:	f7ff fb2a 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80022bc:	2300      	movs	r3, #0
 80022be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022cc:	463b      	mov	r3, r7
 80022ce:	2208      	movs	r2, #8
 80022d0:	4619      	mov	r1, r3
 80022d2:	4807      	ldr	r0, [pc, #28]	; (80022f0 <MX_TIM5_Init+0xac>)
 80022d4:	f00a f914 	bl	800c500 <HAL_TIM_OC_ConfigChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80022de:	f7ff fb17 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <MX_TIM5_Init+0xac>)
 80022e4:	f000 f916 	bl	8002514 <HAL_TIM_MspPostInit>

}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	; 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	24000b90 	.word	0x24000b90
 80022f4:	40000c00 	.word	0x40000c00

080022f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b096      	sub	sp, #88	; 0x58
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]
 800231a:	615a      	str	r2, [r3, #20]
 800231c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	222c      	movs	r2, #44	; 0x2c
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f017 fff3 	bl	801a310 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <MX_TIM8_Init+0x118>)
 800232c:	4a39      	ldr	r2, [pc, #228]	; (8002414 <MX_TIM8_Init+0x11c>)
 800232e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002330:	4b37      	ldr	r3, [pc, #220]	; (8002410 <MX_TIM8_Init+0x118>)
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <MX_TIM8_Init+0x118>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800233c:	4b34      	ldr	r3, [pc, #208]	; (8002410 <MX_TIM8_Init+0x118>)
 800233e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002342:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002344:	4b32      	ldr	r3, [pc, #200]	; (8002410 <MX_TIM8_Init+0x118>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <MX_TIM8_Init+0x118>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <MX_TIM8_Init+0x118>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002356:	482e      	ldr	r0, [pc, #184]	; (8002410 <MX_TIM8_Init+0x118>)
 8002358:	f00a f87a 	bl	800c450 <HAL_TIM_OC_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8002362:	f7ff fad5 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002372:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002376:	4619      	mov	r1, r3
 8002378:	4825      	ldr	r0, [pc, #148]	; (8002410 <MX_TIM8_Init+0x118>)
 800237a:	f00a fc9f 	bl	800ccbc <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002384:	f7ff fac4 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002390:	2300      	movs	r3, #0
 8002392:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002394:	2300      	movs	r3, #0
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023a8:	2208      	movs	r2, #8
 80023aa:	4619      	mov	r1, r3
 80023ac:	4818      	ldr	r0, [pc, #96]	; (8002410 <MX_TIM8_Init+0x118>)
 80023ae:	f00a f8a7 	bl	800c500 <HAL_TIM_OC_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80023b8:	f7ff faaa 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4807      	ldr	r0, [pc, #28]	; (8002410 <MX_TIM8_Init+0x118>)
 80023f2:	f00a fceb 	bl	800cdcc <HAL_TIMEx_ConfigBreakDeadTime>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80023fc:	f7ff fa88 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002400:	4803      	ldr	r0, [pc, #12]	; (8002410 <MX_TIM8_Init+0x118>)
 8002402:	f000 f887 	bl	8002514 <HAL_TIM_MspPostInit>

}
 8002406:	bf00      	nop
 8002408:	3758      	adds	r7, #88	; 0x58
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	24000af8 	.word	0x24000af8
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a35      	ldr	r2, [pc, #212]	; (80024fc <HAL_TIM_OC_MspInit+0xe4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d10f      	bne.n	800244a <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242a:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 800242c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002430:	4a33      	ldr	r2, [pc, #204]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 800243c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002448:	e052      	b.n	80024f0 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a2d      	ldr	r2, [pc, #180]	; (8002504 <HAL_TIM_OC_MspInit+0xec>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d10f      	bne.n	8002474 <HAL_TIM_OC_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 8002456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800245a:	4a29      	ldr	r2, [pc, #164]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 8002466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	69bb      	ldr	r3, [r7, #24]
}
 8002472:	e03d      	b.n	80024f0 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM4)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_TIM_OC_MspInit+0xf0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d10f      	bne.n	800249e <HAL_TIM_OC_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 8002480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002484:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 8002490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
}
 800249c:	e028      	b.n	80024f0 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM5)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_TIM_OC_MspInit+0xf4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10f      	bne.n	80024c8 <HAL_TIM_OC_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 80024aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 80024b0:	f043 0308 	orr.w	r3, r3, #8
 80024b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 80024ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
}
 80024c6:	e013      	b.n	80024f0 <HAL_TIM_OC_MspInit+0xd8>
  else if(tim_ocHandle->Instance==TIM8)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a10      	ldr	r2, [pc, #64]	; (8002510 <HAL_TIM_OC_MspInit+0xf8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10e      	bne.n	80024f0 <HAL_TIM_OC_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 80024d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d8:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_TIM_OC_MspInit+0xe8>)
 80024e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3724      	adds	r7, #36	; 0x24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40010000 	.word	0x40010000
 8002500:	58024400 	.word	0x58024400
 8002504:	40000400 	.word	0x40000400
 8002508:	40000800 	.word	0x40000800
 800250c:	40000c00 	.word	0x40000c00
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a5e      	ldr	r2, [pc, #376]	; (80026ac <HAL_TIM_MspPostInit+0x198>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d120      	bne.n	8002578 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253c:	4a5c      	ldr	r2, [pc, #368]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002546:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 8002548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 8002554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002566:	2301      	movs	r3, #1
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	4619      	mov	r1, r3
 8002570:	4850      	ldr	r0, [pc, #320]	; (80026b4 <HAL_TIM_MspPostInit+0x1a0>)
 8002572:	f005 fc21 	bl	8007db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002576:	e095      	b.n	80026a4 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_TIM_MspPostInit+0x1a4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11f      	bne.n	80025c2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 8002584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002588:	4a49      	ldr	r2, [pc, #292]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002592:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 8002594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 80025a0:	2340      	movs	r3, #64	; 0x40
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025b0:	2302      	movs	r3, #2
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	4619      	mov	r1, r3
 80025ba:	4840      	ldr	r0, [pc, #256]	; (80026bc <HAL_TIM_MspPostInit+0x1a8>)
 80025bc:	f005 fbfc 	bl	8007db8 <HAL_GPIO_Init>
}
 80025c0:	e070      	b.n	80026a4 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a3e      	ldr	r2, [pc, #248]	; (80026c0 <HAL_TIM_MspPostInit+0x1ac>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d120      	bne.n	800260e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025cc:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d2:	4a37      	ldr	r2, [pc, #220]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 80025de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 80025ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025fc:	2302      	movs	r3, #2
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	482f      	ldr	r0, [pc, #188]	; (80026c4 <HAL_TIM_MspPostInit+0x1b0>)
 8002608:	f005 fbd6 	bl	8007db8 <HAL_GPIO_Init>
}
 800260c:	e04a      	b.n	80026a4 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2d      	ldr	r2, [pc, #180]	; (80026c8 <HAL_TIM_MspPostInit+0x1b4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d120      	bne.n	800265a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 800261a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261e:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 800262a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 8002636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002648:	2302      	movs	r3, #2
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	481e      	ldr	r0, [pc, #120]	; (80026cc <HAL_TIM_MspPostInit+0x1b8>)
 8002654:	f005 fbb0 	bl	8007db8 <HAL_GPIO_Init>
}
 8002658:	e024      	b.n	80026a4 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_TIM_MspPostInit+0x1bc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d11f      	bne.n	80026a4 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_TIM_MspPostInit+0x19c>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 8002682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002694:	2303      	movs	r3, #3
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <HAL_TIM_MspPostInit+0x1a8>)
 80026a0:	f005 fb8a 	bl	8007db8 <HAL_GPIO_Init>
}
 80026a4:	bf00      	nop
 80026a6:	3730      	adds	r7, #48	; 0x30
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40010000 	.word	0x40010000
 80026b0:	58024400 	.word	0x58024400
 80026b4:	58020000 	.word	0x58020000
 80026b8:	40000400 	.word	0x40000400
 80026bc:	58020800 	.word	0x58020800
 80026c0:	40000800 	.word	0x40000800
 80026c4:	58020c00 	.word	0x58020c00
 80026c8:	40000c00 	.word	0x40000c00
 80026cc:	58021c00 	.word	0x58021c00
 80026d0:	40010400 	.word	0x40010400

080026d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <MX_USART1_UART_Init+0x90>)
 80026da:	4a23      	ldr	r2, [pc, #140]	; (8002768 <MX_USART1_UART_Init+0x94>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <MX_USART1_UART_Init+0x90>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <MX_USART1_UART_Init+0x90>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <MX_USART1_UART_Init+0x90>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <MX_USART1_UART_Init+0x90>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_USART1_UART_Init+0x90>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <MX_USART1_UART_Init+0x90>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <MX_USART1_UART_Init+0x90>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <MX_USART1_UART_Init+0x90>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <MX_USART1_UART_Init+0x90>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <MX_USART1_UART_Init+0x90>)
 8002718:	2200      	movs	r2, #0
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800271c:	4811      	ldr	r0, [pc, #68]	; (8002764 <MX_USART1_UART_Init+0x90>)
 800271e:	f00a fbd3 	bl	800cec8 <HAL_UART_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002728:	f7ff f8f2 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800272c:	2100      	movs	r1, #0
 800272e:	480d      	ldr	r0, [pc, #52]	; (8002764 <MX_USART1_UART_Init+0x90>)
 8002730:	f00b fb20 	bl	800dd74 <HAL_UARTEx_SetTxFifoThreshold>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800273a:	f7ff f8e9 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800273e:	2100      	movs	r1, #0
 8002740:	4808      	ldr	r0, [pc, #32]	; (8002764 <MX_USART1_UART_Init+0x90>)
 8002742:	f00b fb55 	bl	800ddf0 <HAL_UARTEx_SetRxFifoThreshold>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800274c:	f7ff f8e0 	bl	8001910 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002750:	4804      	ldr	r0, [pc, #16]	; (8002764 <MX_USART1_UART_Init+0x90>)
 8002752:	f00b fad6 	bl	800dd02 <HAL_UARTEx_DisableFifoMode>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800275c:	f7ff f8d8 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002760:	bf00      	nop
 8002762:	bd80      	pop	{r7, pc}
 8002764:	24000c74 	.word	0x24000c74
 8002768:	40011000 	.word	0x40011000

0800276c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0b8      	sub	sp, #224	; 0xe0
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	22bc      	movs	r2, #188	; 0xbc
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f017 fdbf 	bl	801a310 <memset>
  if(uartHandle->Instance==USART1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a24      	ldr	r2, [pc, #144]	; (8002828 <HAL_UART_MspInit+0xbc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d141      	bne.n	8002820 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800279c:	2301      	movs	r3, #1
 800279e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	4618      	mov	r0, r3
 80027ac:	f006 fd0c 	bl	80091c8 <HAL_RCCEx_PeriphCLKConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027b6:	f7ff f8ab 	bl	8001910 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ba:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_UART_MspInit+0xc0>)
 80027bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027c0:	4a1a      	ldr	r2, [pc, #104]	; (800282c <HAL_UART_MspInit+0xc0>)
 80027c2:	f043 0310 	orr.w	r3, r3, #16
 80027c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_UART_MspInit+0xc0>)
 80027cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_UART_MspInit+0xc0>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <HAL_UART_MspInit+0xc0>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e8:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_UART_MspInit+0xc0>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027f6:	23c0      	movs	r3, #192	; 0xc0
 80027f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800280e:	2307      	movs	r3, #7
 8002810:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002818:	4619      	mov	r1, r3
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_UART_MspInit+0xc4>)
 800281c:	f005 facc 	bl	8007db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002820:	bf00      	nop
 8002822:	37e0      	adds	r7, #224	; 0xe0
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40011000 	.word	0x40011000
 800282c:	58024400 	.word	0x58024400
 8002830:	58020400 	.word	0x58020400

08002834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800286c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002838:	f7fe f91a 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800283e:	490d      	ldr	r1, [pc, #52]	; (8002874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002840:	4a0d      	ldr	r2, [pc, #52]	; (8002878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002844:	e002      	b.n	800284c <LoopCopyDataInit>

08002846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284a:	3304      	adds	r3, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800284c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002850:	d3f9      	bcc.n	8002846 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002854:	4c0a      	ldr	r4, [pc, #40]	; (8002880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002858:	e001      	b.n	800285e <LoopFillZerobss>

0800285a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800285c:	3204      	adds	r2, #4

0800285e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002860:	d3fb      	bcc.n	800285a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002862:	f017 fcf3 	bl	801a24c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002866:	f7fe fe33 	bl	80014d0 <main>
  bx  lr
 800286a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800286c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002870:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002874:	24000604 	.word	0x24000604
  ldr r2, =_sidata
 8002878:	080222f8 	.word	0x080222f8
  ldr r2, =_sbss
 800287c:	24000604 	.word	0x24000604
  ldr r4, =_ebss
 8002880:	24003e70 	.word	0x24003e70

08002884 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC3_IRQHandler>

08002886 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <LAN8742_RegisterBusIO+0x28>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d007      	beq.n	80028ae <LAN8742_RegisterBusIO+0x28>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <LAN8742_RegisterBusIO+0x28>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b2:	e014      	b.n	80028de <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d17c      	bne.n	8002a04 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e01c      	b.n	800295e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f107 0208 	add.w	r2, r7, #8
 800292c:	2112      	movs	r1, #18
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	4798      	blx	r3
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	da03      	bge.n	8002940 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002938:	f06f 0304 	mvn.w	r3, #4
 800293c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800293e:	e00b      	b.n	8002958 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	429a      	cmp	r2, r3
 800294a:	d105      	bne.n	8002958 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
         break;
 8002956:	e005      	b.n	8002964 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3301      	adds	r3, #1
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b1f      	cmp	r3, #31
 8002962:	d9df      	bls.n	8002924 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b1f      	cmp	r3, #31
 800296a:	d902      	bls.n	8002972 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800296c:	f06f 0302 	mvn.w	r3, #2
 8002970:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d145      	bne.n	8002a04 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6810      	ldr	r0, [r2, #0]
 8002980:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002984:	2100      	movs	r1, #0
 8002986:	4798      	blx	r3
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	db37      	blt.n	80029fe <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6810      	ldr	r0, [r2, #0]
 8002996:	f107 0208 	add.w	r2, r7, #8
 800299a:	2100      	movs	r1, #0
 800299c:	4798      	blx	r3
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db28      	blt.n	80029f6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4798      	blx	r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80029ae:	e01c      	b.n	80029ea <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4798      	blx	r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029c2:	d80e      	bhi.n	80029e2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6810      	ldr	r0, [r2, #0]
 80029cc:	f107 0208 	add.w	r2, r7, #8
 80029d0:	2100      	movs	r1, #0
 80029d2:	4798      	blx	r3
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	da07      	bge.n	80029ea <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80029da:	f06f 0304 	mvn.w	r3, #4
 80029de:	613b      	str	r3, [r7, #16]
                 break;
 80029e0:	e010      	b.n	8002a04 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80029e2:	f06f 0301 	mvn.w	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
               break;
 80029e8:	e00c      	b.n	8002a04 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1dd      	bne.n	80029b0 <LAN8742_Init+0xc6>
 80029f4:	e006      	b.n	8002a04 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80029f6:	f06f 0304 	mvn.w	r3, #4
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	e002      	b.n	8002a04 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80029fe:	f06f 0303 	mvn.w	r3, #3
 8002a02:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d112      	bne.n	8002a30 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4798      	blx	r3
 8002a10:	4603      	mov	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002a14:	bf00      	nop
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4798      	blx	r3
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a28:	d9f5      	bls.n	8002a16 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002a30:	693b      	ldr	r3, [r7, #16]
 }
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6810      	ldr	r0, [r2, #0]
 8002a4e:	f107 020c 	add.w	r2, r7, #12
 8002a52:	2101      	movs	r1, #1
 8002a54:	4798      	blx	r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	da02      	bge.n	8002a62 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a5c:	f06f 0304 	mvn.w	r3, #4
 8002a60:	e06e      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6810      	ldr	r0, [r2, #0]
 8002a6a:	f107 020c 	add.w	r2, r7, #12
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4798      	blx	r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	da02      	bge.n	8002a7e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002a78:	f06f 0304 	mvn.w	r3, #4
 8002a7c:	e060      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e059      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6810      	ldr	r0, [r2, #0]
 8002a94:	f107 020c 	add.w	r2, r7, #12
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4798      	blx	r3
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da02      	bge.n	8002aa8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002aa2:	f06f 0304 	mvn.w	r3, #4
 8002aa6:	e04b      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11b      	bne.n	8002aea <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <LAN8742_GetLinkState+0x90>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e03a      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e033      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	e02c      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002ae6:	2305      	movs	r3, #5
 8002ae8:	e02a      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6810      	ldr	r0, [r2, #0]
 8002af2:	f107 020c 	add.w	r2, r7, #12
 8002af6:	211f      	movs	r1, #31
 8002af8:	4798      	blx	r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	da02      	bge.n	8002b06 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002b00:	f06f 0304 	mvn.w	r3, #4
 8002b04:	e01c      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002b10:	2306      	movs	r3, #6
 8002b12:	e015      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 031c 	and.w	r3, r3, #28
 8002b1a:	2b18      	cmp	r3, #24
 8002b1c:	d101      	bne.n	8002b22 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e00e      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 031c 	and.w	r3, r3, #28
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d101      	bne.n	8002b30 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e007      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 031c 	and.w	r3, r3, #28
 8002b36:	2b14      	cmp	r3, #20
 8002b38:	d101      	bne.n	8002b3e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	e000      	b.n	8002b40 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002b3e:	2305      	movs	r3, #5
    }				
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b4e:	2003      	movs	r0, #3
 8002b50:	f001 fa54 	bl	8003ffc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b54:	f006 f962 	bl	8008e1c <HAL_RCC_GetSysClockFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_Init+0x68>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	4913      	ldr	r1, [pc, #76]	; (8002bb4 <HAL_Init+0x6c>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_Init+0x68>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_Init+0x6c>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <HAL_Init+0x70>)
 8002b8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <HAL_Init+0x74>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b92:	2000      	movs	r0, #0
 8002b94:	f000 f814 	bl	8002bc0 <HAL_InitTick>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e002      	b.n	8002ba8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba2:	f7ff f8e9 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	08021a30 	.word	0x08021a30
 8002bb8:	24000404 	.word	0x24000404
 8002bbc:	24000400 	.word	0x24000400

08002bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_InitTick+0x60>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e021      	b.n	8002c18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_InitTick+0x64>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_InitTick+0x60>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 fa39 	bl	8004062 <HAL_SYSTICK_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00e      	b.n	8002c18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d80a      	bhi.n	8002c16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c00:	2200      	movs	r2, #0
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c08:	f001 fa03 	bl	8004012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <HAL_InitTick+0x68>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	2400040c 	.word	0x2400040c
 8002c24:	24000400 	.word	0x24000400
 8002c28:	24000408 	.word	0x24000408

08002c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_IncTick+0x20>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_IncTick+0x24>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <HAL_IncTick+0x24>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	2400040c 	.word	0x2400040c
 8002c50:	24000d04 	.word	0x24000d04

08002c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return uwTick;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_GetTick+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	24000d04 	.word	0x24000d04

08002c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff ffee 	bl	8002c54 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c84:	d005      	beq.n	8002c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_Delay+0x44>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c92:	bf00      	nop
 8002c94:	f7ff ffde 	bl	8002c54 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8f7      	bhi.n	8002c94 <HAL_Delay+0x28>
  {
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2400040c 	.word	0x2400040c

08002cb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_GetREVID+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	5c001000 	.word	0x5c001000

08002ccc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002cdc:	4904      	ldr	r1, [pc, #16]	; (8002cf0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	58000400 	.word	0x58000400

08002cf4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	401a      	ands	r2, r3
 8002d08:	4904      	ldr	r1, [pc, #16]	; (8002d1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	58000400 	.word	0x58000400

08002d20 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d30:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	52004000 	.word	0x52004000

08002d48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	609a      	str	r2, [r3, #8]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3360      	adds	r3, #96	; 0x60
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	611a      	str	r2, [r3, #16]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b087      	sub	sp, #28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3360      	adds	r3, #96	; 0x60
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3330      	adds	r3, #48	; 0x30
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	4413      	add	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	211f      	movs	r1, #31
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	f003 011f 	and.w	r1, r3, #31
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	0e5b      	lsrs	r3, r3, #25
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	0d1b      	lsrs	r3, r3, #20
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2107      	movs	r1, #7
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	0d1b      	lsrs	r3, r3, #20
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f20:	43db      	mvns	r3, r3
 8002f22:	401a      	ands	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0318 	and.w	r3, r3, #24
 8002f2a:	4908      	ldr	r1, [pc, #32]	; (8002f4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f2c:	40d9      	lsrs	r1, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	400b      	ands	r3, r1
 8002f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	000fffff 	.word	0x000fffff

08002f50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6093      	str	r3, [r2, #8]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	5fffffc0 	.word	0x5fffffc0

08002f74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f88:	d101      	bne.n	8002f8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	6fffffc0 	.word	0x6fffffc0

08002fc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd8:	d101      	bne.n	8002fde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <LL_ADC_IsEnabled+0x18>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <LL_ADC_IsEnabled+0x1a>
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d101      	bne.n	800302a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d101      	bne.n	8003050 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e18e      	b.n	8003398 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fd fecd 	bl	8000e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff67 	bl	8002f74 <LL_ADC_IsDeepPowerDownEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff4d 	bl	8002f50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff82 	bl	8002fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d114      	bne.n	80030f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff66 	bl	8002f9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030d0:	4b9a      	ldr	r3, [pc, #616]	; (800333c <HAL_ADC_Init+0x2dc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	4a9a      	ldr	r2, [pc, #616]	; (8003340 <HAL_ADC_Init+0x2e0>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	3301      	adds	r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030e2:	e002      	b.n	80030ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f9      	bne.n	80030e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff65 	bl	8002fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff76 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 8003126:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 8128 	bne.w	8003386 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 8124 	bne.w	8003386 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003146:	f043 0202 	orr.w	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff4a 	bl	8002fec <LL_ADC_IsEnabled>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d136      	bne.n	80031cc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a78      	ldr	r2, [pc, #480]	; (8003344 <HAL_ADC_Init+0x2e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_ADC_Init+0x112>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a76      	ldr	r2, [pc, #472]	; (8003348 <HAL_ADC_Init+0x2e8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10e      	bne.n	8003190 <HAL_ADC_Init+0x130>
 8003172:	4874      	ldr	r0, [pc, #464]	; (8003344 <HAL_ADC_Init+0x2e4>)
 8003174:	f7ff ff3a 	bl	8002fec <LL_ADC_IsEnabled>
 8003178:	4604      	mov	r4, r0
 800317a:	4873      	ldr	r0, [pc, #460]	; (8003348 <HAL_ADC_Init+0x2e8>)
 800317c:	f7ff ff36 	bl	8002fec <LL_ADC_IsEnabled>
 8003180:	4603      	mov	r3, r0
 8003182:	4323      	orrs	r3, r4
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e008      	b.n	80031a2 <HAL_ADC_Init+0x142>
 8003190:	486e      	ldr	r0, [pc, #440]	; (800334c <HAL_ADC_Init+0x2ec>)
 8003192:	f7ff ff2b 	bl	8002fec <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d012      	beq.n	80031cc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a66      	ldr	r2, [pc, #408]	; (8003344 <HAL_ADC_Init+0x2e4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_ADC_Init+0x15a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a64      	ldr	r2, [pc, #400]	; (8003348 <HAL_ADC_Init+0x2e8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Init+0x15e>
 80031ba:	4a65      	ldr	r2, [pc, #404]	; (8003350 <HAL_ADC_Init+0x2f0>)
 80031bc:	e000      	b.n	80031c0 <HAL_ADC_Init+0x160>
 80031be:	4a65      	ldr	r2, [pc, #404]	; (8003354 <HAL_ADC_Init+0x2f4>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f7ff fdbe 	bl	8002d48 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80031cc:	f7ff fd72 	bl	8002cb4 <HAL_GetREVID>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d914      	bls.n	8003204 <HAL_ADC_Init+0x1a4>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b10      	cmp	r3, #16
 80031e0:	d110      	bne.n	8003204 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7d5b      	ldrb	r3, [r3, #21]
 80031e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7f1b      	ldrb	r3, [r3, #28]
 80031f8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80031fa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031fc:	f043 030c 	orr.w	r3, r3, #12
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	e00d      	b.n	8003220 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7d5b      	ldrb	r3, [r3, #21]
 8003208:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800320e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003214:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7f1b      	ldrb	r3, [r3, #28]
 800321a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7f1b      	ldrb	r3, [r3, #28]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d106      	bne.n	8003236 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	3b01      	subs	r3, #1
 800322e:	045b      	lsls	r3, r3, #17
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_ADC_Init+0x2f8>)
 800325a:	4013      	ands	r3, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	69b9      	ldr	r1, [r7, #24]
 8003262:	430b      	orrs	r3, r1
 8003264:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fed1 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 8003270:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fede 	bl	8003038 <LL_ADC_INJ_IsConversionOngoing>
 800327c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d14a      	bne.n	800331a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d147      	bne.n	800331a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	7d1b      	ldrb	r3, [r3, #20]
 800328e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_ADC_Init+0x2fc>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d11b      	bne.n	80032ee <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_ADC_Init+0x300>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032ca:	3a01      	subs	r2, #1
 80032cc:	0411      	lsls	r1, r2, #16
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032d2:	4311      	orrs	r1, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032d8:	4311      	orrs	r1, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032de:	430a      	orrs	r2, r1
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	611a      	str	r2, [r3, #16]
 80032ec:	e007      	b.n	80032fe <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fb93 	bl	8003a40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d120      	bne.n	8003364 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f023 010f 	bic.w	r1, r3, #15
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	1e5a      	subs	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
 800333a:	e01b      	b.n	8003374 <HAL_ADC_Init+0x314>
 800333c:	24000400 	.word	0x24000400
 8003340:	053e2d63 	.word	0x053e2d63
 8003344:	40022000 	.word	0x40022000
 8003348:	40022100 	.word	0x40022100
 800334c:	58026000 	.word	0x58026000
 8003350:	40022300 	.word	0x40022300
 8003354:	58026300 	.word	0x58026300
 8003358:	fff0c003 	.word	0xfff0c003
 800335c:	ffffbffc 	.word	0xffffbffc
 8003360:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 020f 	bic.w	r2, r2, #15
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003378:	f023 0303 	bic.w	r3, r3, #3
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
 8003384:	e007      	b.n	8003396 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003396:	7ffb      	ldrb	r3, [r7, #31]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3724      	adds	r7, #36	; 0x24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}

080033a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b0a1      	sub	sp, #132	; 0x84
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a9d      	ldr	r2, [pc, #628]	; (8003630 <HAL_ADC_ConfigChannel+0x290>)
 80033ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x2a>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e321      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x66e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fe1b 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 8306 	bne.w	80039f0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d108      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x62>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0e9b      	lsrs	r3, r3, #26
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2201      	movs	r2, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	e016      	b.n	8003430 <HAL_ADC_ConfigChannel+0x90>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003412:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800341a:	2320      	movs	r3, #32
 800341c:	e003      	b.n	8003426 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800341e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2201      	movs	r2, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	69d1      	ldr	r1, [r2, #28]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	430b      	orrs	r3, r1
 800343c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	f7ff fd04 	bl	8002e58 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fddc 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 800345a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fde9 	bl	8003038 <LL_ADC_INJ_IsConversionOngoing>
 8003466:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346a:	2b00      	cmp	r3, #0
 800346c:	f040 80b3 	bne.w	80035d6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 80af 	bne.w	80035d6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	461a      	mov	r2, r3
 8003486:	f7ff fd13 	bl	8002eb0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800348a:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_ADC_ConfigChannel+0x294>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003496:	d10b      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x110>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	e01d      	b.n	80034ec <HAL_ADC_ConfigChannel+0x14c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10b      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x136>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	e00a      	b.n	80034ec <HAL_ADC_ConfigChannel+0x14c>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d027      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6919      	ldr	r1, [r3, #16]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003504:	f7ff fc54 	bl	8002db0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	6919      	ldr	r1, [r3, #16]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	7e5b      	ldrb	r3, [r3, #25]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_ADC_ConfigChannel+0x17e>
 8003518:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800351c:	e000      	b.n	8003520 <HAL_ADC_ConfigChannel+0x180>
 800351e:	2300      	movs	r3, #0
 8003520:	461a      	mov	r2, r3
 8003522:	f7ff fc7e 	bl	8002e22 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6919      	ldr	r1, [r3, #16]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	7e1b      	ldrb	r3, [r3, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_ADC_ConfigChannel+0x19c>
 8003536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800353a:	e000      	b.n	800353e <HAL_ADC_ConfigChannel+0x19e>
 800353c:	2300      	movs	r3, #0
 800353e:	461a      	mov	r2, r3
 8003540:	f7ff fc56 	bl	8002df0 <LL_ADC_SetDataRightShift>
 8003544:	e047      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	069b      	lsls	r3, r3, #26
 8003556:	429a      	cmp	r2, r3
 8003558:	d107      	bne.n	800356a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003568:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	069b      	lsls	r3, r3, #26
 800357a:	429a      	cmp	r2, r3
 800357c:	d107      	bne.n	800358e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800358c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003594:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	069b      	lsls	r3, r3, #26
 800359e:	429a      	cmp	r2, r3
 80035a0:	d107      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035b0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	069b      	lsls	r3, r3, #26
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d107      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fd06 	bl	8002fec <LL_ADC_IsEnabled>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 820d 	bne.w	8003a02 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	461a      	mov	r2, r3
 80035f6:	f7ff fc87 	bl	8002f08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4a0c      	ldr	r2, [pc, #48]	; (8003630 <HAL_ADC_ConfigChannel+0x290>)
 8003600:	4293      	cmp	r3, r2
 8003602:	f040 8133 	bne.w	800386c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003612:	2b00      	cmp	r3, #0
 8003614:	d110      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x298>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	0e9b      	lsrs	r3, r3, #26
 800361c:	3301      	adds	r3, #1
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2b09      	cmp	r3, #9
 8003624:	bf94      	ite	ls
 8003626:	2301      	movls	r3, #1
 8003628:	2300      	movhi	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e01e      	b.n	800366c <HAL_ADC_ConfigChannel+0x2cc>
 800362e:	bf00      	nop
 8003630:	47ff0000 	.word	0x47ff0000
 8003634:	5c001000 	.word	0x5c001000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003648:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800364a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003650:	2320      	movs	r3, #32
 8003652:	e003      	b.n	800365c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3301      	adds	r3, #1
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2b09      	cmp	r3, #9
 8003664:	bf94      	ite	ls
 8003666:	2301      	movls	r3, #1
 8003668:	2300      	movhi	r3, #0
 800366a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366c:	2b00      	cmp	r3, #0
 800366e:	d079      	beq.n	8003764 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003678:	2b00      	cmp	r3, #0
 800367a:	d107      	bne.n	800368c <HAL_ADC_ConfigChannel+0x2ec>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0e9b      	lsrs	r3, r3, #26
 8003682:	3301      	adds	r3, #1
 8003684:	069b      	lsls	r3, r3, #26
 8003686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800368a:	e015      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x318>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800369a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800369e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80036a4:	2320      	movs	r3, #32
 80036a6:	e003      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80036a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036aa:	fab3 f383 	clz	r3, r3
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	069b      	lsls	r3, r3, #26
 80036b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x338>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	0e9b      	lsrs	r3, r3, #26
 80036ca:	3301      	adds	r3, #1
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	e017      	b.n	8003708 <HAL_ADC_ConfigChannel+0x368>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e003      	b.n	80036fc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80036f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	3301      	adds	r3, #1
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	ea42 0103 	orr.w	r1, r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <HAL_ADC_ConfigChannel+0x38e>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	3301      	adds	r3, #1
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	051b      	lsls	r3, r3, #20
 800372c:	e018      	b.n	8003760 <HAL_ADC_ConfigChannel+0x3c0>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003746:	2320      	movs	r3, #32
 8003748:	e003      	b.n	8003752 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	3301      	adds	r3, #1
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4613      	mov	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003760:	430b      	orrs	r3, r1
 8003762:	e07e      	b.n	8003862 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x3e0>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0e9b      	lsrs	r3, r3, #26
 8003776:	3301      	adds	r3, #1
 8003778:	069b      	lsls	r3, r3, #26
 800377a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377e:	e015      	b.n	80037ac <HAL_ADC_ConfigChannel+0x40c>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003798:	2320      	movs	r3, #32
 800379a:	e003      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	069b      	lsls	r3, r3, #26
 80037a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x42c>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0e9b      	lsrs	r3, r3, #26
 80037be:	3301      	adds	r3, #1
 80037c0:	f003 031f 	and.w	r3, r3, #31
 80037c4:	2101      	movs	r1, #1
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	e017      	b.n	80037fc <HAL_ADC_ConfigChannel+0x45c>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	61bb      	str	r3, [r7, #24]
  return result;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e003      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	ea42 0103 	orr.w	r1, r2, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10d      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x488>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	3301      	adds	r3, #1
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	3b1e      	subs	r3, #30
 8003820:	051b      	lsls	r3, r3, #20
 8003822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003826:	e01b      	b.n	8003860 <HAL_ADC_ConfigChannel+0x4c0>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	60fb      	str	r3, [r7, #12]
  return result;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e003      	b.n	800384c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3301      	adds	r3, #1
 800384e:	f003 021f 	and.w	r2, r3, #31
 8003852:	4613      	mov	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	3b1e      	subs	r3, #30
 800385a:	051b      	lsls	r3, r3, #20
 800385c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003860:	430b      	orrs	r3, r1
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	6892      	ldr	r2, [r2, #8]
 8003866:	4619      	mov	r1, r3
 8003868:	f7ff fb22 	bl	8002eb0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f280 80c6 	bge.w	8003a02 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <HAL_ADC_ConfigChannel+0x678>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d004      	beq.n	800388a <HAL_ADC_ConfigChannel+0x4ea>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a65      	ldr	r2, [pc, #404]	; (8003a1c <HAL_ADC_ConfigChannel+0x67c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0x4ee>
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_ADC_ConfigChannel+0x680>)
 800388c:	e000      	b.n	8003890 <HAL_ADC_ConfigChannel+0x4f0>
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_ADC_ConfigChannel+0x684>)
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fa7f 	bl	8002d94 <LL_ADC_GetCommonPathInternalCh>
 8003896:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5e      	ldr	r2, [pc, #376]	; (8003a18 <HAL_ADC_ConfigChannel+0x678>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_ADC_ConfigChannel+0x50c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_ADC_ConfigChannel+0x67c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d10e      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x52a>
 80038ac:	485a      	ldr	r0, [pc, #360]	; (8003a18 <HAL_ADC_ConfigChannel+0x678>)
 80038ae:	f7ff fb9d 	bl	8002fec <LL_ADC_IsEnabled>
 80038b2:	4604      	mov	r4, r0
 80038b4:	4859      	ldr	r0, [pc, #356]	; (8003a1c <HAL_ADC_ConfigChannel+0x67c>)
 80038b6:	f7ff fb99 	bl	8002fec <LL_ADC_IsEnabled>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4323      	orrs	r3, r4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	e008      	b.n	80038dc <HAL_ADC_ConfigChannel+0x53c>
 80038ca:	4857      	ldr	r0, [pc, #348]	; (8003a28 <HAL_ADC_ConfigChannel+0x688>)
 80038cc:	f7ff fb8e 	bl	8002fec <LL_ADC_IsEnabled>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf0c      	ite	eq
 80038d6:	2301      	moveq	r3, #1
 80038d8:	2300      	movne	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d07d      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a51      	ldr	r2, [pc, #324]	; (8003a2c <HAL_ADC_ConfigChannel+0x68c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d130      	bne.n	800394c <HAL_ADC_ConfigChannel+0x5ac>
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d12b      	bne.n	800394c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a4b      	ldr	r2, [pc, #300]	; (8003a28 <HAL_ADC_ConfigChannel+0x688>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	f040 8081 	bne.w	8003a02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a44      	ldr	r2, [pc, #272]	; (8003a18 <HAL_ADC_ConfigChannel+0x678>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_ADC_ConfigChannel+0x574>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a43      	ldr	r2, [pc, #268]	; (8003a1c <HAL_ADC_ConfigChannel+0x67c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x578>
 8003914:	4a42      	ldr	r2, [pc, #264]	; (8003a20 <HAL_ADC_ConfigChannel+0x680>)
 8003916:	e000      	b.n	800391a <HAL_ADC_ConfigChannel+0x57a>
 8003918:	4a42      	ldr	r2, [pc, #264]	; (8003a24 <HAL_ADC_ConfigChannel+0x684>)
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f7ff fa23 	bl	8002d6e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003928:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_ADC_ConfigChannel+0x690>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	4a41      	ldr	r2, [pc, #260]	; (8003a34 <HAL_ADC_ConfigChannel+0x694>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	3301      	adds	r3, #1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800393c:	e002      	b.n	8003944 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3b01      	subs	r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f9      	bne.n	800393e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800394a:	e05a      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a39      	ldr	r2, [pc, #228]	; (8003a38 <HAL_ADC_ConfigChannel+0x698>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d11e      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x5f4>
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d119      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a30      	ldr	r2, [pc, #192]	; (8003a28 <HAL_ADC_ConfigChannel+0x688>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d14b      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <HAL_ADC_ConfigChannel+0x678>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_ADC_ConfigChannel+0x5de>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <HAL_ADC_ConfigChannel+0x67c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x5e2>
 800397e:	4a28      	ldr	r2, [pc, #160]	; (8003a20 <HAL_ADC_ConfigChannel+0x680>)
 8003980:	e000      	b.n	8003984 <HAL_ADC_ConfigChannel+0x5e4>
 8003982:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <HAL_ADC_ConfigChannel+0x684>)
 8003984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f7ff f9ee 	bl	8002d6e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003992:	e036      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <HAL_ADC_ConfigChannel+0x69c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d131      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x662>
 800399e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d12c      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <HAL_ADC_ConfigChannel+0x688>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d127      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <HAL_ADC_ConfigChannel+0x678>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x626>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <HAL_ADC_ConfigChannel+0x67c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x62a>
 80039c6:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <HAL_ADC_ConfigChannel+0x680>)
 80039c8:	e000      	b.n	80039cc <HAL_ADC_ConfigChannel+0x62c>
 80039ca:	4a16      	ldr	r2, [pc, #88]	; (8003a24 <HAL_ADC_ConfigChannel+0x684>)
 80039cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f7ff f9ca 	bl	8002d6e <LL_ADC_SetCommonPathInternalCh>
 80039da:	e012      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039ee:	e008      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3784      	adds	r7, #132	; 0x84
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd90      	pop	{r4, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40022100 	.word	0x40022100
 8003a20:	40022300 	.word	0x40022300
 8003a24:	58026300 	.word	0x58026300
 8003a28:	58026000 	.word	0x58026000
 8003a2c:	cb840000 	.word	0xcb840000
 8003a30:	24000400 	.word	0x24000400
 8003a34:	053e2d63 	.word	0x053e2d63
 8003a38:	c7520000 	.word	0xc7520000
 8003a3c:	cfb80000 	.word	0xcfb80000

08003a40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a79      	ldr	r2, [pc, #484]	; (8003c34 <ADC_ConfigureBoostMode+0x1f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <ADC_ConfigureBoostMode+0x1c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a78      	ldr	r2, [pc, #480]	; (8003c38 <ADC_ConfigureBoostMode+0x1f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d109      	bne.n	8003a70 <ADC_ConfigureBoostMode+0x30>
 8003a5c:	4b77      	ldr	r3, [pc, #476]	; (8003c3c <ADC_ConfigureBoostMode+0x1fc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e008      	b.n	8003a82 <ADC_ConfigureBoostMode+0x42>
 8003a70:	4b73      	ldr	r3, [pc, #460]	; (8003c40 <ADC_ConfigureBoostMode+0x200>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01c      	beq.n	8003ac0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a86:	f005 fb43 	bl	8009110 <HAL_RCC_GetHCLKFreq>
 8003a8a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a94:	d010      	beq.n	8003ab8 <ADC_ConfigureBoostMode+0x78>
 8003a96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a9a:	d871      	bhi.n	8003b80 <ADC_ConfigureBoostMode+0x140>
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d002      	beq.n	8003aa8 <ADC_ConfigureBoostMode+0x68>
 8003aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa6:	d16b      	bne.n	8003b80 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	60fb      	str	r3, [r7, #12]
        break;
 8003ab6:	e066      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	60fb      	str	r3, [r7, #12]
        break;
 8003abe:	e062      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ac0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ac4:	f006 fac0 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ac8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ad2:	d051      	beq.n	8003b78 <ADC_ConfigureBoostMode+0x138>
 8003ad4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ad8:	d854      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003ada:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ade:	d047      	beq.n	8003b70 <ADC_ConfigureBoostMode+0x130>
 8003ae0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ae4:	d84e      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003ae6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003aea:	d03d      	beq.n	8003b68 <ADC_ConfigureBoostMode+0x128>
 8003aec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003af0:	d848      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003af2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003af6:	d033      	beq.n	8003b60 <ADC_ConfigureBoostMode+0x120>
 8003af8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afc:	d842      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003afe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b02:	d029      	beq.n	8003b58 <ADC_ConfigureBoostMode+0x118>
 8003b04:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b08:	d83c      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003b0a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b0e:	d01a      	beq.n	8003b46 <ADC_ConfigureBoostMode+0x106>
 8003b10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b14:	d836      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003b16:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b1a:	d014      	beq.n	8003b46 <ADC_ConfigureBoostMode+0x106>
 8003b1c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b20:	d830      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b26:	d00e      	beq.n	8003b46 <ADC_ConfigureBoostMode+0x106>
 8003b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2c:	d82a      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003b2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b32:	d008      	beq.n	8003b46 <ADC_ConfigureBoostMode+0x106>
 8003b34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b38:	d824      	bhi.n	8003b84 <ADC_ConfigureBoostMode+0x144>
 8003b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b3e:	d002      	beq.n	8003b46 <ADC_ConfigureBoostMode+0x106>
 8003b40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b44:	d11e      	bne.n	8003b84 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	60fb      	str	r3, [r7, #12]
        break;
 8003b56:	e016      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
        break;
 8003b5e:	e012      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	60fb      	str	r3, [r7, #12]
        break;
 8003b66:	e00e      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	60fb      	str	r3, [r7, #12]
        break;
 8003b6e:	e00a      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	09db      	lsrs	r3, r3, #7
 8003b74:	60fb      	str	r3, [r7, #12]
        break;
 8003b76:	e006      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	60fb      	str	r3, [r7, #12]
        break;
 8003b7e:	e002      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
        break;
 8003b80:	bf00      	nop
 8003b82:	e000      	b.n	8003b86 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003b84:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b86:	f7ff f895 	bl	8002cb4 <HAL_GetREVID>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d815      	bhi.n	8003bc0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <ADC_ConfigureBoostMode+0x204>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d908      	bls.n	8003bae <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003baa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bac:	e03e      	b.n	8003c2c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bbc:	609a      	str	r2, [r3, #8]
}
 8003bbe:	e035      	b.n	8003c2c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a1f      	ldr	r2, [pc, #124]	; (8003c48 <ADC_ConfigureBoostMode+0x208>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d808      	bhi.n	8003be0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bdc:	609a      	str	r2, [r3, #8]
}
 8003bde:	e025      	b.n	8003c2c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <ADC_ConfigureBoostMode+0x20c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d80a      	bhi.n	8003bfe <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	e016      	b.n	8003c2c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <ADC_ConfigureBoostMode+0x210>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d80a      	bhi.n	8003c1c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	609a      	str	r2, [r3, #8]
}
 8003c1a:	e007      	b.n	8003c2c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c2a:	609a      	str	r2, [r3, #8]
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40022100 	.word	0x40022100
 8003c3c:	40022300 	.word	0x40022300
 8003c40:	58026300 	.word	0x58026300
 8003c44:	01312d00 	.word	0x01312d00
 8003c48:	005f5e10 	.word	0x005f5e10
 8003c4c:	00bebc20 	.word	0x00bebc20
 8003c50:	017d7840 	.word	0x017d7840

08003c54 <LL_ADC_IsEnabled>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <LL_ADC_IsEnabled+0x18>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <LL_ADC_IsEnabled+0x1a>
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d101      	bne.n	8003c92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b09f      	sub	sp, #124	; 0x7c
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0be      	b.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a5c      	ldr	r2, [pc, #368]	; (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d102      	bne.n	8003cde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cd8:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	e001      	b.n	8003ce2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e09d      	b.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ffb9 	bl	8003c7a <LL_ADC_REG_IsConversionOngoing>
 8003d08:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff ffb3 	bl	8003c7a <LL_ADC_REG_IsConversionOngoing>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d17f      	bne.n	8003e1a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d17c      	bne.n	8003e1a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a47      	ldr	r2, [pc, #284]	; (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d101      	bne.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d34:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d36:	e000      	b.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d38:	4b45      	ldr	r3, [pc, #276]	; (8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d3a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d039      	beq.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d54:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a3a      	ldr	r2, [pc, #232]	; (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10e      	bne.n	8003d88 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003d6a:	4836      	ldr	r0, [pc, #216]	; (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d6c:	f7ff ff72 	bl	8003c54 <LL_ADC_IsEnabled>
 8003d70:	4604      	mov	r4, r0
 8003d72:	4835      	ldr	r0, [pc, #212]	; (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d74:	f7ff ff6e 	bl	8003c54 <LL_ADC_IsEnabled>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4323      	orrs	r3, r4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e008      	b.n	8003d9a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003d88:	4832      	ldr	r0, [pc, #200]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d8a:	f7ff ff63 	bl	8003c54 <LL_ADC_IsEnabled>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d047      	beq.n	8003e2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	4b2d      	ldr	r3, [pc, #180]	; (8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	6892      	ldr	r2, [r2, #8]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	431a      	orrs	r2, r3
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003db6:	e03a      	b.n	8003e2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d10e      	bne.n	8003df6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003dd8:	481a      	ldr	r0, [pc, #104]	; (8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dda:	f7ff ff3b 	bl	8003c54 <LL_ADC_IsEnabled>
 8003dde:	4604      	mov	r4, r0
 8003de0:	4819      	ldr	r0, [pc, #100]	; (8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003de2:	f7ff ff37 	bl	8003c54 <LL_ADC_IsEnabled>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4323      	orrs	r3, r4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e008      	b.n	8003e08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003df6:	4817      	ldr	r0, [pc, #92]	; (8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003df8:	f7ff ff2c 	bl	8003c54 <LL_ADC_IsEnabled>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d010      	beq.n	8003e2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e16:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e18:	e009      	b.n	8003e2e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e2c:	e000      	b.n	8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	377c      	adds	r7, #124	; 0x7c
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd90      	pop	{r4, r7, pc}
 8003e44:	40022000 	.word	0x40022000
 8003e48:	40022100 	.word	0x40022100
 8003e4c:	40022300 	.word	0x40022300
 8003e50:	58026300 	.word	0x58026300
 8003e54:	58026000 	.word	0x58026000
 8003e58:	fffff0e0 	.word	0xfffff0e0

08003e5c <__NVIC_SetPriorityGrouping>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <__NVIC_SetPriorityGrouping+0x40>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e8a:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <__NVIC_SetPriorityGrouping+0x40>)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	60d3      	str	r3, [r2, #12]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000ed00 	.word	0xe000ed00
 8003ea0:	05fa0000 	.word	0x05fa0000

08003ea4 <__NVIC_GetPriorityGrouping>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <__NVIC_GetPriorityGrouping+0x18>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 0307 	and.w	r3, r3, #7
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_EnableIRQ>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	db0b      	blt.n	8003eea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	f003 021f 	and.w	r2, r3, #31
 8003ed8:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <__NVIC_EnableIRQ+0x38>)
 8003eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	e000e100 	.word	0xe000e100

08003efc <__NVIC_SetPriority>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	6039      	str	r1, [r7, #0]
 8003f06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	db0a      	blt.n	8003f26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	490c      	ldr	r1, [pc, #48]	; (8003f48 <__NVIC_SetPriority+0x4c>)
 8003f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f1a:	0112      	lsls	r2, r2, #4
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f24:	e00a      	b.n	8003f3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4908      	ldr	r1, [pc, #32]	; (8003f4c <__NVIC_SetPriority+0x50>)
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	3b04      	subs	r3, #4
 8003f34:	0112      	lsls	r2, r2, #4
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	440b      	add	r3, r1
 8003f3a:	761a      	strb	r2, [r3, #24]
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000e100 	.word	0xe000e100
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <NVIC_EncodePriority>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f1c3 0307 	rsb	r3, r3, #7
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	bf28      	it	cs
 8003f6e:	2304      	movcs	r3, #4
 8003f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3304      	adds	r3, #4
 8003f76:	2b06      	cmp	r3, #6
 8003f78:	d902      	bls.n	8003f80 <NVIC_EncodePriority+0x30>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3b03      	subs	r3, #3
 8003f7e:	e000      	b.n	8003f82 <NVIC_EncodePriority+0x32>
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	401a      	ands	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	43d9      	mvns	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	4313      	orrs	r3, r2
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3724      	adds	r7, #36	; 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc8:	d301      	bcc.n	8003fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e00f      	b.n	8003fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <SysTick_Config+0x40>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd6:	210f      	movs	r1, #15
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fdc:	f7ff ff8e 	bl	8003efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <SysTick_Config+0x40>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe6:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <SysTick_Config+0x40>)
 8003fe8:	2207      	movs	r2, #7
 8003fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	e000e010 	.word	0xe000e010

08003ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff29 	bl	8003e5c <__NVIC_SetPriorityGrouping>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004020:	f7ff ff40 	bl	8003ea4 <__NVIC_GetPriorityGrouping>
 8004024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	6978      	ldr	r0, [r7, #20]
 800402c:	f7ff ff90 	bl	8003f50 <NVIC_EncodePriority>
 8004030:	4602      	mov	r2, r0
 8004032:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff5f 	bl	8003efc <__NVIC_SetPriority>
}
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff33 	bl	8003ec0 <__NVIC_EnableIRQ>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffa4 	bl	8003fb8 <SysTick_Config>
 8004070:	4603      	mov	r3, r0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004080:	f3bf 8f5f 	dmb	sy
}
 8004084:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_MPU_Disable+0x28>)
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	4a06      	ldr	r2, [pc, #24]	; (80040a4 <HAL_MPU_Disable+0x28>)
 800408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004090:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_MPU_Disable+0x2c>)
 8004094:	2200      	movs	r2, #0
 8004096:	605a      	str	r2, [r3, #4]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000ed00 	.word	0xe000ed00
 80040a8:	e000ed90 	.word	0xe000ed90

080040ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80040b4:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <HAL_MPU_Enable+0x38>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_MPU_Enable+0x3c>)
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <HAL_MPU_Enable+0x3c>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80040ca:	f3bf 8f4f 	dsb	sy
}
 80040ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040d0:	f3bf 8f6f 	isb	sy
}
 80040d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000ed90 	.word	0xe000ed90
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	785a      	ldrb	r2, [r3, #1]
 80040f8:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_MPU_ConfigRegion+0x84>)
 80040fa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d029      	beq.n	8004158 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004104:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <HAL_MPU_ConfigRegion+0x84>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7b1b      	ldrb	r3, [r3, #12]
 8004110:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7adb      	ldrb	r3, [r3, #11]
 8004116:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004118:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7a9b      	ldrb	r3, [r3, #10]
 800411e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004120:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7b5b      	ldrb	r3, [r3, #13]
 8004126:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004128:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7b9b      	ldrb	r3, [r3, #14]
 800412e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004130:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	7bdb      	ldrb	r3, [r3, #15]
 8004136:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004138:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	7a5b      	ldrb	r3, [r3, #9]
 800413e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004140:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7a1b      	ldrb	r3, [r3, #8]
 8004146:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004148:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	7812      	ldrb	r2, [r2, #0]
 800414e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004152:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004154:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004156:	e005      	b.n	8004164 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_MPU_ConfigRegion+0x84>)
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_MPU_ConfigRegion+0x84>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000ed90 	.word	0xe000ed90

08004174 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <HAL_GetCurrentCPUID+0x24>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	2b07      	cmp	r3, #7
 8004184:	d101      	bne.n	800418a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004186:	2303      	movs	r3, #3
 8004188:	e000      	b.n	800418c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800418a:	2301      	movs	r3, #1
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e054      	b.n	8004258 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	7f5b      	ldrb	r3, [r3, #29]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc fef6 	bl	8000fb0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	791b      	ldrb	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10c      	bne.n	80041ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a22      	ldr	r2, [pc, #136]	; (8004260 <HAL_CRC_Init+0xc4>)
 80041d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0218 	bic.w	r2, r2, #24
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	e00c      	b.n	8004206 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6899      	ldr	r1, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f834 	bl	8004264 <HAL_CRCEx_Polynomial_Set>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e028      	b.n	8004258 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	795b      	ldrb	r3, [r3, #5]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004216:	611a      	str	r2, [r3, #16]
 8004218:	e004      	b.n	8004224 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6912      	ldr	r2, [r2, #16]
 8004222:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	04c11db7 	.word	0x04c11db7

08004264 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004274:	231f      	movs	r3, #31
 8004276:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004278:	bf00      	nop
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	613a      	str	r2, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <HAL_CRCEx_Polynomial_Set+0x34>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_CRCEx_Polynomial_Set+0x16>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b18      	cmp	r3, #24
 800429c:	d846      	bhi.n	800432c <HAL_CRCEx_Polynomial_Set+0xc8>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	08004333 	.word	0x08004333
 80042a8:	0800432d 	.word	0x0800432d
 80042ac:	0800432d 	.word	0x0800432d
 80042b0:	0800432d 	.word	0x0800432d
 80042b4:	0800432d 	.word	0x0800432d
 80042b8:	0800432d 	.word	0x0800432d
 80042bc:	0800432d 	.word	0x0800432d
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	08004321 	.word	0x08004321
 80042c8:	0800432d 	.word	0x0800432d
 80042cc:	0800432d 	.word	0x0800432d
 80042d0:	0800432d 	.word	0x0800432d
 80042d4:	0800432d 	.word	0x0800432d
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	0800432d 	.word	0x0800432d
 80042e0:	0800432d 	.word	0x0800432d
 80042e4:	08004315 	.word	0x08004315
 80042e8:	0800432d 	.word	0x0800432d
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	0800432d 	.word	0x0800432d
 80042f4:	0800432d 	.word	0x0800432d
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	0800432d 	.word	0x0800432d
 8004300:	0800432d 	.word	0x0800432d
 8004304:	08004309 	.word	0x08004309
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b06      	cmp	r3, #6
 800430c:	d913      	bls.n	8004336 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004312:	e010      	b.n	8004336 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b07      	cmp	r3, #7
 8004318:	d90f      	bls.n	800433a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800431e:	e00c      	b.n	800433a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b0f      	cmp	r3, #15
 8004324:	d90b      	bls.n	800433e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800432a:	e008      	b.n	800433e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
      break;
 8004330:	e006      	b.n	8004340 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004332:	bf00      	nop
 8004334:	e004      	b.n	8004340 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800433e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 0118 	bic.w	r1, r3, #24
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004362:	7dfb      	ldrb	r3, [r7, #23]
}
 8004364:	4618      	mov	r0, r3
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7fe fc6c 	bl	8002c54 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e316      	b.n	80049b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a66      	ldr	r2, [pc, #408]	; (8004528 <HAL_DMA_Init+0x1b8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d04a      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a65      	ldr	r2, [pc, #404]	; (800452c <HAL_DMA_Init+0x1bc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d045      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a63      	ldr	r2, [pc, #396]	; (8004530 <HAL_DMA_Init+0x1c0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d040      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a62      	ldr	r2, [pc, #392]	; (8004534 <HAL_DMA_Init+0x1c4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d03b      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a60      	ldr	r2, [pc, #384]	; (8004538 <HAL_DMA_Init+0x1c8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d036      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5f      	ldr	r2, [pc, #380]	; (800453c <HAL_DMA_Init+0x1cc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d031      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <HAL_DMA_Init+0x1d0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02c      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5c      	ldr	r2, [pc, #368]	; (8004544 <HAL_DMA_Init+0x1d4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d027      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a5a      	ldr	r2, [pc, #360]	; (8004548 <HAL_DMA_Init+0x1d8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d022      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a59      	ldr	r2, [pc, #356]	; (800454c <HAL_DMA_Init+0x1dc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d01d      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a57      	ldr	r2, [pc, #348]	; (8004550 <HAL_DMA_Init+0x1e0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d018      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a56      	ldr	r2, [pc, #344]	; (8004554 <HAL_DMA_Init+0x1e4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a54      	ldr	r2, [pc, #336]	; (8004558 <HAL_DMA_Init+0x1e8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a53      	ldr	r2, [pc, #332]	; (800455c <HAL_DMA_Init+0x1ec>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a51      	ldr	r2, [pc, #324]	; (8004560 <HAL_DMA_Init+0x1f0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_DMA_Init+0xb8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a50      	ldr	r2, [pc, #320]	; (8004564 <HAL_DMA_Init+0x1f4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d101      	bne.n	800442c <HAL_DMA_Init+0xbc>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_DMA_Init+0xbe>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 813b 	beq.w	80046aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a37      	ldr	r2, [pc, #220]	; (8004528 <HAL_DMA_Init+0x1b8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d04a      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a36      	ldr	r2, [pc, #216]	; (800452c <HAL_DMA_Init+0x1bc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d045      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a34      	ldr	r2, [pc, #208]	; (8004530 <HAL_DMA_Init+0x1c0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d040      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a33      	ldr	r2, [pc, #204]	; (8004534 <HAL_DMA_Init+0x1c4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d03b      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a31      	ldr	r2, [pc, #196]	; (8004538 <HAL_DMA_Init+0x1c8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d036      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a30      	ldr	r2, [pc, #192]	; (800453c <HAL_DMA_Init+0x1cc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d031      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <HAL_DMA_Init+0x1d0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d02c      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <HAL_DMA_Init+0x1d4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d027      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <HAL_DMA_Init+0x1d8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d022      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2a      	ldr	r2, [pc, #168]	; (800454c <HAL_DMA_Init+0x1dc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d01d      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a28      	ldr	r2, [pc, #160]	; (8004550 <HAL_DMA_Init+0x1e0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d018      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a27      	ldr	r2, [pc, #156]	; (8004554 <HAL_DMA_Init+0x1e4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a25      	ldr	r2, [pc, #148]	; (8004558 <HAL_DMA_Init+0x1e8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00e      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a24      	ldr	r2, [pc, #144]	; (800455c <HAL_DMA_Init+0x1ec>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d009      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a22      	ldr	r2, [pc, #136]	; (8004560 <HAL_DMA_Init+0x1f0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_DMA_Init+0x174>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a21      	ldr	r2, [pc, #132]	; (8004564 <HAL_DMA_Init+0x1f4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d108      	bne.n	80044f6 <HAL_DMA_Init+0x186>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e007      	b.n	8004506 <HAL_DMA_Init+0x196>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004506:	e02f      	b.n	8004568 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004508:	f7fe fba4 	bl	8002c54 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b05      	cmp	r3, #5
 8004514:	d928      	bls.n	8004568 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2203      	movs	r2, #3
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e246      	b.n	80049b6 <HAL_DMA_Init+0x646>
 8004528:	40020010 	.word	0x40020010
 800452c:	40020028 	.word	0x40020028
 8004530:	40020040 	.word	0x40020040
 8004534:	40020058 	.word	0x40020058
 8004538:	40020070 	.word	0x40020070
 800453c:	40020088 	.word	0x40020088
 8004540:	400200a0 	.word	0x400200a0
 8004544:	400200b8 	.word	0x400200b8
 8004548:	40020410 	.word	0x40020410
 800454c:	40020428 	.word	0x40020428
 8004550:	40020440 	.word	0x40020440
 8004554:	40020458 	.word	0x40020458
 8004558:	40020470 	.word	0x40020470
 800455c:	40020488 	.word	0x40020488
 8004560:	400204a0 	.word	0x400204a0
 8004564:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1c8      	bne.n	8004508 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4b83      	ldr	r3, [pc, #524]	; (8004790 <HAL_DMA_Init+0x420>)
 8004582:	4013      	ands	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800458e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d107      	bne.n	80045cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	4313      	orrs	r3, r2
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80045cc:	4b71      	ldr	r3, [pc, #452]	; (8004794 <HAL_DMA_Init+0x424>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b71      	ldr	r3, [pc, #452]	; (8004798 <HAL_DMA_Init+0x428>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d8:	d328      	bcc.n	800462c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b28      	cmp	r3, #40	; 0x28
 80045e0:	d903      	bls.n	80045ea <HAL_DMA_Init+0x27a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b2e      	cmp	r3, #46	; 0x2e
 80045e8:	d917      	bls.n	800461a <HAL_DMA_Init+0x2aa>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b3e      	cmp	r3, #62	; 0x3e
 80045f0:	d903      	bls.n	80045fa <HAL_DMA_Init+0x28a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b42      	cmp	r3, #66	; 0x42
 80045f8:	d90f      	bls.n	800461a <HAL_DMA_Init+0x2aa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b46      	cmp	r3, #70	; 0x46
 8004600:	d903      	bls.n	800460a <HAL_DMA_Init+0x29a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b48      	cmp	r3, #72	; 0x48
 8004608:	d907      	bls.n	800461a <HAL_DMA_Init+0x2aa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b4e      	cmp	r3, #78	; 0x4e
 8004610:	d905      	bls.n	800461e <HAL_DMA_Init+0x2ae>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b52      	cmp	r3, #82	; 0x52
 8004618:	d801      	bhi.n	800461e <HAL_DMA_Init+0x2ae>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_DMA_Init+0x2b0>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0307 	bic.w	r3, r3, #7
 8004642:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	2b04      	cmp	r3, #4
 8004654:	d117      	bne.n	8004686 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f001 fddb 	bl	8006224 <DMA_CheckFifoParam>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2240      	movs	r2, #64	; 0x40
 8004678:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e197      	b.n	80049b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f001 fd16 	bl	80060c0 <DMA_CalcBaseAndBitshift>
 8004694:	4603      	mov	r3, r0
 8004696:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	223f      	movs	r2, #63	; 0x3f
 80046a2:	409a      	lsls	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	e0cd      	b.n	8004846 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3b      	ldr	r2, [pc, #236]	; (800479c <HAL_DMA_Init+0x42c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d022      	beq.n	80046fa <HAL_DMA_Init+0x38a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a39      	ldr	r2, [pc, #228]	; (80047a0 <HAL_DMA_Init+0x430>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d01d      	beq.n	80046fa <HAL_DMA_Init+0x38a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a38      	ldr	r2, [pc, #224]	; (80047a4 <HAL_DMA_Init+0x434>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d018      	beq.n	80046fa <HAL_DMA_Init+0x38a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a36      	ldr	r2, [pc, #216]	; (80047a8 <HAL_DMA_Init+0x438>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d013      	beq.n	80046fa <HAL_DMA_Init+0x38a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a35      	ldr	r2, [pc, #212]	; (80047ac <HAL_DMA_Init+0x43c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_DMA_Init+0x38a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a33      	ldr	r2, [pc, #204]	; (80047b0 <HAL_DMA_Init+0x440>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_DMA_Init+0x38a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <HAL_DMA_Init+0x444>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_DMA_Init+0x38a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a30      	ldr	r2, [pc, #192]	; (80047b8 <HAL_DMA_Init+0x448>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <HAL_DMA_Init+0x38e>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <HAL_DMA_Init+0x390>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8097 	beq.w	8004834 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a24      	ldr	r2, [pc, #144]	; (800479c <HAL_DMA_Init+0x42c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d021      	beq.n	8004754 <HAL_DMA_Init+0x3e4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <HAL_DMA_Init+0x430>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01c      	beq.n	8004754 <HAL_DMA_Init+0x3e4>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <HAL_DMA_Init+0x434>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d017      	beq.n	8004754 <HAL_DMA_Init+0x3e4>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <HAL_DMA_Init+0x438>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d012      	beq.n	8004754 <HAL_DMA_Init+0x3e4>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <HAL_DMA_Init+0x43c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00d      	beq.n	8004754 <HAL_DMA_Init+0x3e4>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_DMA_Init+0x440>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d008      	beq.n	8004754 <HAL_DMA_Init+0x3e4>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <HAL_DMA_Init+0x444>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <HAL_DMA_Init+0x3e4>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_DMA_Init+0x448>)
 8004752:	4293      	cmp	r3, r2
 8004754:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <HAL_DMA_Init+0x44c>)
 8004772:	4013      	ands	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d020      	beq.n	80047c0 <HAL_DMA_Init+0x450>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d102      	bne.n	800478c <HAL_DMA_Init+0x41c>
 8004786:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800478a:	e01a      	b.n	80047c2 <HAL_DMA_Init+0x452>
 800478c:	2300      	movs	r3, #0
 800478e:	e018      	b.n	80047c2 <HAL_DMA_Init+0x452>
 8004790:	fe10803f 	.word	0xfe10803f
 8004794:	5c001000 	.word	0x5c001000
 8004798:	ffff0000 	.word	0xffff0000
 800479c:	58025408 	.word	0x58025408
 80047a0:	5802541c 	.word	0x5802541c
 80047a4:	58025430 	.word	0x58025430
 80047a8:	58025444 	.word	0x58025444
 80047ac:	58025458 	.word	0x58025458
 80047b0:	5802546c 	.word	0x5802546c
 80047b4:	58025480 	.word	0x58025480
 80047b8:	58025494 	.word	0x58025494
 80047bc:	fffe000f 	.word	0xfffe000f
 80047c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68d2      	ldr	r2, [r2, #12]
 80047c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	4b6e      	ldr	r3, [pc, #440]	; (80049c0 <HAL_DMA_Init+0x650>)
 8004808:	4413      	add	r3, r2
 800480a:	4a6e      	ldr	r2, [pc, #440]	; (80049c4 <HAL_DMA_Init+0x654>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	009a      	lsls	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f001 fc51 	bl	80060c0 <DMA_CalcBaseAndBitshift>
 800481e:	4603      	mov	r3, r0
 8004820:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	2201      	movs	r2, #1
 800482c:	409a      	lsls	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	e008      	b.n	8004846 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2240      	movs	r2, #64	; 0x40
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2203      	movs	r2, #3
 800483e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e0b7      	b.n	80049b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a5f      	ldr	r2, [pc, #380]	; (80049c8 <HAL_DMA_Init+0x658>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d072      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5d      	ldr	r2, [pc, #372]	; (80049cc <HAL_DMA_Init+0x65c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d06d      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a5c      	ldr	r2, [pc, #368]	; (80049d0 <HAL_DMA_Init+0x660>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d068      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5a      	ldr	r2, [pc, #360]	; (80049d4 <HAL_DMA_Init+0x664>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d063      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a59      	ldr	r2, [pc, #356]	; (80049d8 <HAL_DMA_Init+0x668>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d05e      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a57      	ldr	r2, [pc, #348]	; (80049dc <HAL_DMA_Init+0x66c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d059      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a56      	ldr	r2, [pc, #344]	; (80049e0 <HAL_DMA_Init+0x670>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d054      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a54      	ldr	r2, [pc, #336]	; (80049e4 <HAL_DMA_Init+0x674>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04f      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a53      	ldr	r2, [pc, #332]	; (80049e8 <HAL_DMA_Init+0x678>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d04a      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a51      	ldr	r2, [pc, #324]	; (80049ec <HAL_DMA_Init+0x67c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d045      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a50      	ldr	r2, [pc, #320]	; (80049f0 <HAL_DMA_Init+0x680>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d040      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_DMA_Init+0x684>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d03b      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a4d      	ldr	r2, [pc, #308]	; (80049f8 <HAL_DMA_Init+0x688>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d036      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a4b      	ldr	r2, [pc, #300]	; (80049fc <HAL_DMA_Init+0x68c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d031      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4a      	ldr	r2, [pc, #296]	; (8004a00 <HAL_DMA_Init+0x690>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d02c      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a48      	ldr	r2, [pc, #288]	; (8004a04 <HAL_DMA_Init+0x694>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d027      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a47      	ldr	r2, [pc, #284]	; (8004a08 <HAL_DMA_Init+0x698>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a45      	ldr	r2, [pc, #276]	; (8004a0c <HAL_DMA_Init+0x69c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01d      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a44      	ldr	r2, [pc, #272]	; (8004a10 <HAL_DMA_Init+0x6a0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a42      	ldr	r2, [pc, #264]	; (8004a14 <HAL_DMA_Init+0x6a4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a41      	ldr	r2, [pc, #260]	; (8004a18 <HAL_DMA_Init+0x6a8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3f      	ldr	r2, [pc, #252]	; (8004a1c <HAL_DMA_Init+0x6ac>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3e      	ldr	r2, [pc, #248]	; (8004a20 <HAL_DMA_Init+0x6b0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_DMA_Init+0x5c6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <HAL_DMA_Init+0x6b4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_DMA_Init+0x5ca>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_DMA_Init+0x5cc>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d032      	beq.n	80049a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 fceb 	bl	800631c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d102      	bne.n	8004954 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004968:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d010      	beq.n	8004994 <HAL_DMA_Init+0x624>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d80c      	bhi.n	8004994 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f001 fd68 	bl	8006450 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	e008      	b.n	80049a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	a7fdabf8 	.word	0xa7fdabf8
 80049c4:	cccccccd 	.word	0xcccccccd
 80049c8:	40020010 	.word	0x40020010
 80049cc:	40020028 	.word	0x40020028
 80049d0:	40020040 	.word	0x40020040
 80049d4:	40020058 	.word	0x40020058
 80049d8:	40020070 	.word	0x40020070
 80049dc:	40020088 	.word	0x40020088
 80049e0:	400200a0 	.word	0x400200a0
 80049e4:	400200b8 	.word	0x400200b8
 80049e8:	40020410 	.word	0x40020410
 80049ec:	40020428 	.word	0x40020428
 80049f0:	40020440 	.word	0x40020440
 80049f4:	40020458 	.word	0x40020458
 80049f8:	40020470 	.word	0x40020470
 80049fc:	40020488 	.word	0x40020488
 8004a00:	400204a0 	.word	0x400204a0
 8004a04:	400204b8 	.word	0x400204b8
 8004a08:	58025408 	.word	0x58025408
 8004a0c:	5802541c 	.word	0x5802541c
 8004a10:	58025430 	.word	0x58025430
 8004a14:	58025444 	.word	0x58025444
 8004a18:	58025458 	.word	0x58025458
 8004a1c:	5802546c 	.word	0x5802546c
 8004a20:	58025480 	.word	0x58025480
 8004a24:	58025494 	.word	0x58025494

08004a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e226      	b.n	8004e92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_DMA_Start_IT+0x2a>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e21f      	b.n	8004e92 <HAL_DMA_Start_IT+0x46a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	f040 820a 	bne.w	8004e7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a68      	ldr	r2, [pc, #416]	; (8004c1c <HAL_DMA_Start_IT+0x1f4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d04a      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a66      	ldr	r2, [pc, #408]	; (8004c20 <HAL_DMA_Start_IT+0x1f8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d045      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a65      	ldr	r2, [pc, #404]	; (8004c24 <HAL_DMA_Start_IT+0x1fc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d040      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a63      	ldr	r2, [pc, #396]	; (8004c28 <HAL_DMA_Start_IT+0x200>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d03b      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a62      	ldr	r2, [pc, #392]	; (8004c2c <HAL_DMA_Start_IT+0x204>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d036      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a60      	ldr	r2, [pc, #384]	; (8004c30 <HAL_DMA_Start_IT+0x208>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5f      	ldr	r2, [pc, #380]	; (8004c34 <HAL_DMA_Start_IT+0x20c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d02c      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a5d      	ldr	r2, [pc, #372]	; (8004c38 <HAL_DMA_Start_IT+0x210>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d027      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5c      	ldr	r2, [pc, #368]	; (8004c3c <HAL_DMA_Start_IT+0x214>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d022      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5a      	ldr	r2, [pc, #360]	; (8004c40 <HAL_DMA_Start_IT+0x218>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01d      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a59      	ldr	r2, [pc, #356]	; (8004c44 <HAL_DMA_Start_IT+0x21c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d018      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a57      	ldr	r2, [pc, #348]	; (8004c48 <HAL_DMA_Start_IT+0x220>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a56      	ldr	r2, [pc, #344]	; (8004c4c <HAL_DMA_Start_IT+0x224>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a54      	ldr	r2, [pc, #336]	; (8004c50 <HAL_DMA_Start_IT+0x228>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a53      	ldr	r2, [pc, #332]	; (8004c54 <HAL_DMA_Start_IT+0x22c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_DMA_Start_IT+0xee>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a51      	ldr	r2, [pc, #324]	; (8004c58 <HAL_DMA_Start_IT+0x230>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d108      	bne.n	8004b28 <HAL_DMA_Start_IT+0x100>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e007      	b.n	8004b38 <HAL_DMA_Start_IT+0x110>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f001 f912 	bl	8005d68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a34      	ldr	r2, [pc, #208]	; (8004c1c <HAL_DMA_Start_IT+0x1f4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d04a      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a33      	ldr	r2, [pc, #204]	; (8004c20 <HAL_DMA_Start_IT+0x1f8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d045      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a31      	ldr	r2, [pc, #196]	; (8004c24 <HAL_DMA_Start_IT+0x1fc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d040      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a30      	ldr	r2, [pc, #192]	; (8004c28 <HAL_DMA_Start_IT+0x200>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d03b      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a2e      	ldr	r2, [pc, #184]	; (8004c2c <HAL_DMA_Start_IT+0x204>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d036      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2d      	ldr	r2, [pc, #180]	; (8004c30 <HAL_DMA_Start_IT+0x208>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d031      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2b      	ldr	r2, [pc, #172]	; (8004c34 <HAL_DMA_Start_IT+0x20c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d02c      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2a      	ldr	r2, [pc, #168]	; (8004c38 <HAL_DMA_Start_IT+0x210>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d027      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a28      	ldr	r2, [pc, #160]	; (8004c3c <HAL_DMA_Start_IT+0x214>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d022      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <HAL_DMA_Start_IT+0x218>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d01d      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a25      	ldr	r2, [pc, #148]	; (8004c44 <HAL_DMA_Start_IT+0x21c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a24      	ldr	r2, [pc, #144]	; (8004c48 <HAL_DMA_Start_IT+0x220>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <HAL_DMA_Start_IT+0x224>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <HAL_DMA_Start_IT+0x228>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <HAL_DMA_Start_IT+0x22c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_DMA_Start_IT+0x1bc>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <HAL_DMA_Start_IT+0x230>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d101      	bne.n	8004be8 <HAL_DMA_Start_IT+0x1c0>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <HAL_DMA_Start_IT+0x1c2>
 8004be8:	2300      	movs	r3, #0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d036      	beq.n	8004c5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 021e 	bic.w	r2, r3, #30
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0216 	orr.w	r2, r2, #22
 8004c00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d03e      	beq.n	8004c88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0208 	orr.w	r2, r2, #8
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e035      	b.n	8004c88 <HAL_DMA_Start_IT+0x260>
 8004c1c:	40020010 	.word	0x40020010
 8004c20:	40020028 	.word	0x40020028
 8004c24:	40020040 	.word	0x40020040
 8004c28:	40020058 	.word	0x40020058
 8004c2c:	40020070 	.word	0x40020070
 8004c30:	40020088 	.word	0x40020088
 8004c34:	400200a0 	.word	0x400200a0
 8004c38:	400200b8 	.word	0x400200b8
 8004c3c:	40020410 	.word	0x40020410
 8004c40:	40020428 	.word	0x40020428
 8004c44:	40020440 	.word	0x40020440
 8004c48:	40020458 	.word	0x40020458
 8004c4c:	40020470 	.word	0x40020470
 8004c50:	40020488 	.word	0x40020488
 8004c54:	400204a0 	.word	0x400204a0
 8004c58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 020e 	bic.w	r2, r3, #14
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 020a 	orr.w	r2, r2, #10
 8004c6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0204 	orr.w	r2, r2, #4
 8004c86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a83      	ldr	r2, [pc, #524]	; (8004e9c <HAL_DMA_Start_IT+0x474>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d072      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a82      	ldr	r2, [pc, #520]	; (8004ea0 <HAL_DMA_Start_IT+0x478>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d06d      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a80      	ldr	r2, [pc, #512]	; (8004ea4 <HAL_DMA_Start_IT+0x47c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d068      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a7f      	ldr	r2, [pc, #508]	; (8004ea8 <HAL_DMA_Start_IT+0x480>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d063      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a7d      	ldr	r2, [pc, #500]	; (8004eac <HAL_DMA_Start_IT+0x484>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d05e      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7c      	ldr	r2, [pc, #496]	; (8004eb0 <HAL_DMA_Start_IT+0x488>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d059      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a7a      	ldr	r2, [pc, #488]	; (8004eb4 <HAL_DMA_Start_IT+0x48c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d054      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a79      	ldr	r2, [pc, #484]	; (8004eb8 <HAL_DMA_Start_IT+0x490>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d04f      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a77      	ldr	r2, [pc, #476]	; (8004ebc <HAL_DMA_Start_IT+0x494>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d04a      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a76      	ldr	r2, [pc, #472]	; (8004ec0 <HAL_DMA_Start_IT+0x498>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d045      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a74      	ldr	r2, [pc, #464]	; (8004ec4 <HAL_DMA_Start_IT+0x49c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d040      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a73      	ldr	r2, [pc, #460]	; (8004ec8 <HAL_DMA_Start_IT+0x4a0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d03b      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a71      	ldr	r2, [pc, #452]	; (8004ecc <HAL_DMA_Start_IT+0x4a4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d036      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <HAL_DMA_Start_IT+0x4a8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d031      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	; (8004ed4 <HAL_DMA_Start_IT+0x4ac>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02c      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6d      	ldr	r2, [pc, #436]	; (8004ed8 <HAL_DMA_Start_IT+0x4b0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d027      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6b      	ldr	r2, [pc, #428]	; (8004edc <HAL_DMA_Start_IT+0x4b4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6a      	ldr	r2, [pc, #424]	; (8004ee0 <HAL_DMA_Start_IT+0x4b8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d01d      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a68      	ldr	r2, [pc, #416]	; (8004ee4 <HAL_DMA_Start_IT+0x4bc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a67      	ldr	r2, [pc, #412]	; (8004ee8 <HAL_DMA_Start_IT+0x4c0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a65      	ldr	r2, [pc, #404]	; (8004eec <HAL_DMA_Start_IT+0x4c4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a64      	ldr	r2, [pc, #400]	; (8004ef0 <HAL_DMA_Start_IT+0x4c8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a62      	ldr	r2, [pc, #392]	; (8004ef4 <HAL_DMA_Start_IT+0x4cc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_DMA_Start_IT+0x350>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a61      	ldr	r2, [pc, #388]	; (8004ef8 <HAL_DMA_Start_IT+0x4d0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_DMA_Start_IT+0x354>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_DMA_Start_IT+0x356>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01a      	beq.n	8004db8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a37      	ldr	r2, [pc, #220]	; (8004e9c <HAL_DMA_Start_IT+0x474>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d04a      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a36      	ldr	r2, [pc, #216]	; (8004ea0 <HAL_DMA_Start_IT+0x478>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d045      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a34      	ldr	r2, [pc, #208]	; (8004ea4 <HAL_DMA_Start_IT+0x47c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d040      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a33      	ldr	r2, [pc, #204]	; (8004ea8 <HAL_DMA_Start_IT+0x480>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d03b      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a31      	ldr	r2, [pc, #196]	; (8004eac <HAL_DMA_Start_IT+0x484>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d036      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a30      	ldr	r2, [pc, #192]	; (8004eb0 <HAL_DMA_Start_IT+0x488>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d031      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2e      	ldr	r2, [pc, #184]	; (8004eb4 <HAL_DMA_Start_IT+0x48c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02c      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2d      	ldr	r2, [pc, #180]	; (8004eb8 <HAL_DMA_Start_IT+0x490>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d027      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	; (8004ebc <HAL_DMA_Start_IT+0x494>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2a      	ldr	r2, [pc, #168]	; (8004ec0 <HAL_DMA_Start_IT+0x498>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01d      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a28      	ldr	r2, [pc, #160]	; (8004ec4 <HAL_DMA_Start_IT+0x49c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <HAL_DMA_Start_IT+0x4a0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <HAL_DMA_Start_IT+0x4a4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a24      	ldr	r2, [pc, #144]	; (8004ed0 <HAL_DMA_Start_IT+0x4a8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <HAL_DMA_Start_IT+0x4ac>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_DMA_Start_IT+0x430>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	; (8004ed8 <HAL_DMA_Start_IT+0x4b0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d108      	bne.n	8004e6a <HAL_DMA_Start_IT+0x442>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e012      	b.n	8004e90 <HAL_DMA_Start_IT+0x468>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	e009      	b.n	8004e90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40020010 	.word	0x40020010
 8004ea0:	40020028 	.word	0x40020028
 8004ea4:	40020040 	.word	0x40020040
 8004ea8:	40020058 	.word	0x40020058
 8004eac:	40020070 	.word	0x40020070
 8004eb0:	40020088 	.word	0x40020088
 8004eb4:	400200a0 	.word	0x400200a0
 8004eb8:	400200b8 	.word	0x400200b8
 8004ebc:	40020410 	.word	0x40020410
 8004ec0:	40020428 	.word	0x40020428
 8004ec4:	40020440 	.word	0x40020440
 8004ec8:	40020458 	.word	0x40020458
 8004ecc:	40020470 	.word	0x40020470
 8004ed0:	40020488 	.word	0x40020488
 8004ed4:	400204a0 	.word	0x400204a0
 8004ed8:	400204b8 	.word	0x400204b8
 8004edc:	58025408 	.word	0x58025408
 8004ee0:	5802541c 	.word	0x5802541c
 8004ee4:	58025430 	.word	0x58025430
 8004ee8:	58025444 	.word	0x58025444
 8004eec:	58025458 	.word	0x58025458
 8004ef0:	5802546c 	.word	0x5802546c
 8004ef4:	58025480 	.word	0x58025480
 8004ef8:	58025494 	.word	0x58025494

08004efc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f08:	4b67      	ldr	r3, [pc, #412]	; (80050a8 <HAL_DMA_IRQHandler+0x1ac>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a67      	ldr	r2, [pc, #412]	; (80050ac <HAL_DMA_IRQHandler+0x1b0>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	0a9b      	lsrs	r3, r3, #10
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a5f      	ldr	r2, [pc, #380]	; (80050b0 <HAL_DMA_IRQHandler+0x1b4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d04a      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a5d      	ldr	r2, [pc, #372]	; (80050b4 <HAL_DMA_IRQHandler+0x1b8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d045      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a5c      	ldr	r2, [pc, #368]	; (80050b8 <HAL_DMA_IRQHandler+0x1bc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d040      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a5a      	ldr	r2, [pc, #360]	; (80050bc <HAL_DMA_IRQHandler+0x1c0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d03b      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a59      	ldr	r2, [pc, #356]	; (80050c0 <HAL_DMA_IRQHandler+0x1c4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d036      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a57      	ldr	r2, [pc, #348]	; (80050c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d031      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a56      	ldr	r2, [pc, #344]	; (80050c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d02c      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a54      	ldr	r2, [pc, #336]	; (80050cc <HAL_DMA_IRQHandler+0x1d0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d027      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a53      	ldr	r2, [pc, #332]	; (80050d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d022      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a51      	ldr	r2, [pc, #324]	; (80050d4 <HAL_DMA_IRQHandler+0x1d8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01d      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a50      	ldr	r2, [pc, #320]	; (80050d8 <HAL_DMA_IRQHandler+0x1dc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d018      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a4e      	ldr	r2, [pc, #312]	; (80050dc <HAL_DMA_IRQHandler+0x1e0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4d      	ldr	r2, [pc, #308]	; (80050e0 <HAL_DMA_IRQHandler+0x1e4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00e      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a4b      	ldr	r2, [pc, #300]	; (80050e4 <HAL_DMA_IRQHandler+0x1e8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d009      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4a      	ldr	r2, [pc, #296]	; (80050e8 <HAL_DMA_IRQHandler+0x1ec>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_DMA_IRQHandler+0xd2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a48      	ldr	r2, [pc, #288]	; (80050ec <HAL_DMA_IRQHandler+0x1f0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_DMA_IRQHandler+0xd6>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <HAL_DMA_IRQHandler+0xd8>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 842b 	beq.w	8005830 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2208      	movs	r2, #8
 8004fe4:	409a      	lsls	r2, r3
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 80a2 	beq.w	8005134 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a2e      	ldr	r2, [pc, #184]	; (80050b0 <HAL_DMA_IRQHandler+0x1b4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d04a      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <HAL_DMA_IRQHandler+0x1b8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d045      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a2b      	ldr	r2, [pc, #172]	; (80050b8 <HAL_DMA_IRQHandler+0x1bc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d040      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <HAL_DMA_IRQHandler+0x1c0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d03b      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <HAL_DMA_IRQHandler+0x1c4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d036      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a27      	ldr	r2, [pc, #156]	; (80050c4 <HAL_DMA_IRQHandler+0x1c8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d031      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <HAL_DMA_IRQHandler+0x1cc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d02c      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a24      	ldr	r2, [pc, #144]	; (80050cc <HAL_DMA_IRQHandler+0x1d0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d027      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <HAL_DMA_IRQHandler+0x1d4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d022      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <HAL_DMA_IRQHandler+0x1d8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d01d      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <HAL_DMA_IRQHandler+0x1dc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d018      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <HAL_DMA_IRQHandler+0x1e0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_DMA_IRQHandler+0x1e4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00e      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <HAL_DMA_IRQHandler+0x1e8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d009      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a19      	ldr	r2, [pc, #100]	; (80050e8 <HAL_DMA_IRQHandler+0x1ec>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_DMA_IRQHandler+0x194>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a18      	ldr	r2, [pc, #96]	; (80050ec <HAL_DMA_IRQHandler+0x1f0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d12f      	bne.n	80050f0 <HAL_DMA_IRQHandler+0x1f4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	bf14      	ite	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	2300      	moveq	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e02e      	b.n	8005104 <HAL_DMA_IRQHandler+0x208>
 80050a6:	bf00      	nop
 80050a8:	24000400 	.word	0x24000400
 80050ac:	1b4e81b5 	.word	0x1b4e81b5
 80050b0:	40020010 	.word	0x40020010
 80050b4:	40020028 	.word	0x40020028
 80050b8:	40020040 	.word	0x40020040
 80050bc:	40020058 	.word	0x40020058
 80050c0:	40020070 	.word	0x40020070
 80050c4:	40020088 	.word	0x40020088
 80050c8:	400200a0 	.word	0x400200a0
 80050cc:	400200b8 	.word	0x400200b8
 80050d0:	40020410 	.word	0x40020410
 80050d4:	40020428 	.word	0x40020428
 80050d8:	40020440 	.word	0x40020440
 80050dc:	40020458 	.word	0x40020458
 80050e0:	40020470 	.word	0x40020470
 80050e4:	40020488 	.word	0x40020488
 80050e8:	400204a0 	.word	0x400204a0
 80050ec:	400204b8 	.word	0x400204b8
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf14      	ite	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	2300      	moveq	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d015      	beq.n	8005134 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0204 	bic.w	r2, r2, #4
 8005116:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	2208      	movs	r2, #8
 8005122:	409a      	lsls	r2, r3
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	f043 0201 	orr.w	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d06e      	beq.n	8005228 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a69      	ldr	r2, [pc, #420]	; (80052f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d04a      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a67      	ldr	r2, [pc, #412]	; (80052f8 <HAL_DMA_IRQHandler+0x3fc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d045      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a66      	ldr	r2, [pc, #408]	; (80052fc <HAL_DMA_IRQHandler+0x400>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d040      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a64      	ldr	r2, [pc, #400]	; (8005300 <HAL_DMA_IRQHandler+0x404>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d03b      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a63      	ldr	r2, [pc, #396]	; (8005304 <HAL_DMA_IRQHandler+0x408>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d036      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a61      	ldr	r2, [pc, #388]	; (8005308 <HAL_DMA_IRQHandler+0x40c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d031      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a60      	ldr	r2, [pc, #384]	; (800530c <HAL_DMA_IRQHandler+0x410>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d02c      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5e      	ldr	r2, [pc, #376]	; (8005310 <HAL_DMA_IRQHandler+0x414>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d027      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a5d      	ldr	r2, [pc, #372]	; (8005314 <HAL_DMA_IRQHandler+0x418>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5b      	ldr	r2, [pc, #364]	; (8005318 <HAL_DMA_IRQHandler+0x41c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01d      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a5a      	ldr	r2, [pc, #360]	; (800531c <HAL_DMA_IRQHandler+0x420>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a58      	ldr	r2, [pc, #352]	; (8005320 <HAL_DMA_IRQHandler+0x424>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a57      	ldr	r2, [pc, #348]	; (8005324 <HAL_DMA_IRQHandler+0x428>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a55      	ldr	r2, [pc, #340]	; (8005328 <HAL_DMA_IRQHandler+0x42c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a54      	ldr	r2, [pc, #336]	; (800532c <HAL_DMA_IRQHandler+0x430>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_DMA_IRQHandler+0x2ee>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a52      	ldr	r2, [pc, #328]	; (8005330 <HAL_DMA_IRQHandler+0x434>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10a      	bne.n	8005200 <HAL_DMA_IRQHandler+0x304>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	e003      	b.n	8005208 <HAL_DMA_IRQHandler+0x30c>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2201      	movs	r2, #1
 8005216:	409a      	lsls	r2, r3
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005220:	f043 0202 	orr.w	r2, r3, #2
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2204      	movs	r2, #4
 8005232:	409a      	lsls	r2, r3
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 808f 	beq.w	800535c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <HAL_DMA_IRQHandler+0x3f8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d04a      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <HAL_DMA_IRQHandler+0x3fc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d045      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a29      	ldr	r2, [pc, #164]	; (80052fc <HAL_DMA_IRQHandler+0x400>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d040      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a27      	ldr	r2, [pc, #156]	; (8005300 <HAL_DMA_IRQHandler+0x404>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d03b      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a26      	ldr	r2, [pc, #152]	; (8005304 <HAL_DMA_IRQHandler+0x408>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d036      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a24      	ldr	r2, [pc, #144]	; (8005308 <HAL_DMA_IRQHandler+0x40c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d031      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a23      	ldr	r2, [pc, #140]	; (800530c <HAL_DMA_IRQHandler+0x410>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d02c      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a21      	ldr	r2, [pc, #132]	; (8005310 <HAL_DMA_IRQHandler+0x414>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d027      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a20      	ldr	r2, [pc, #128]	; (8005314 <HAL_DMA_IRQHandler+0x418>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d022      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_DMA_IRQHandler+0x41c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01d      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_DMA_IRQHandler+0x420>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d018      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <HAL_DMA_IRQHandler+0x424>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1a      	ldr	r2, [pc, #104]	; (8005324 <HAL_DMA_IRQHandler+0x428>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00e      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a18      	ldr	r2, [pc, #96]	; (8005328 <HAL_DMA_IRQHandler+0x42c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d009      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a17      	ldr	r2, [pc, #92]	; (800532c <HAL_DMA_IRQHandler+0x430>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_DMA_IRQHandler+0x3e2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a15      	ldr	r2, [pc, #84]	; (8005330 <HAL_DMA_IRQHandler+0x434>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d12a      	bne.n	8005334 <HAL_DMA_IRQHandler+0x438>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e023      	b.n	800533c <HAL_DMA_IRQHandler+0x440>
 80052f4:	40020010 	.word	0x40020010
 80052f8:	40020028 	.word	0x40020028
 80052fc:	40020040 	.word	0x40020040
 8005300:	40020058 	.word	0x40020058
 8005304:	40020070 	.word	0x40020070
 8005308:	40020088 	.word	0x40020088
 800530c:	400200a0 	.word	0x400200a0
 8005310:	400200b8 	.word	0x400200b8
 8005314:	40020410 	.word	0x40020410
 8005318:	40020428 	.word	0x40020428
 800531c:	40020440 	.word	0x40020440
 8005320:	40020458 	.word	0x40020458
 8005324:	40020470 	.word	0x40020470
 8005328:	40020488 	.word	0x40020488
 800532c:	400204a0 	.word	0x400204a0
 8005330:	400204b8 	.word	0x400204b8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2204      	movs	r2, #4
 800534a:	409a      	lsls	r2, r3
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f043 0204 	orr.w	r2, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	2210      	movs	r2, #16
 8005366:	409a      	lsls	r2, r3
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80a6 	beq.w	80054be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a85      	ldr	r2, [pc, #532]	; (800558c <HAL_DMA_IRQHandler+0x690>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d04a      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a83      	ldr	r2, [pc, #524]	; (8005590 <HAL_DMA_IRQHandler+0x694>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d045      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a82      	ldr	r2, [pc, #520]	; (8005594 <HAL_DMA_IRQHandler+0x698>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d040      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a80      	ldr	r2, [pc, #512]	; (8005598 <HAL_DMA_IRQHandler+0x69c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d03b      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7f      	ldr	r2, [pc, #508]	; (800559c <HAL_DMA_IRQHandler+0x6a0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d036      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7d      	ldr	r2, [pc, #500]	; (80055a0 <HAL_DMA_IRQHandler+0x6a4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d031      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7c      	ldr	r2, [pc, #496]	; (80055a4 <HAL_DMA_IRQHandler+0x6a8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d02c      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a7a      	ldr	r2, [pc, #488]	; (80055a8 <HAL_DMA_IRQHandler+0x6ac>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d027      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a79      	ldr	r2, [pc, #484]	; (80055ac <HAL_DMA_IRQHandler+0x6b0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d022      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a77      	ldr	r2, [pc, #476]	; (80055b0 <HAL_DMA_IRQHandler+0x6b4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01d      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a76      	ldr	r2, [pc, #472]	; (80055b4 <HAL_DMA_IRQHandler+0x6b8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d018      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a74      	ldr	r2, [pc, #464]	; (80055b8 <HAL_DMA_IRQHandler+0x6bc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a73      	ldr	r2, [pc, #460]	; (80055bc <HAL_DMA_IRQHandler+0x6c0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a71      	ldr	r2, [pc, #452]	; (80055c0 <HAL_DMA_IRQHandler+0x6c4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a70      	ldr	r2, [pc, #448]	; (80055c4 <HAL_DMA_IRQHandler+0x6c8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_DMA_IRQHandler+0x516>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6e      	ldr	r2, [pc, #440]	; (80055c8 <HAL_DMA_IRQHandler+0x6cc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d10a      	bne.n	8005428 <HAL_DMA_IRQHandler+0x52c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	e009      	b.n	800543c <HAL_DMA_IRQHandler+0x540>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf14      	ite	ne
 8005436:	2301      	movne	r3, #1
 8005438:	2300      	moveq	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d03e      	beq.n	80054be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	2210      	movs	r2, #16
 800544a:	409a      	lsls	r2, r3
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d018      	beq.n	8005490 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d024      	beq.n	80054be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
 800547c:	e01f      	b.n	80054be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01b      	beq.n	80054be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
 800548e:	e016      	b.n	80054be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0208 	bic.w	r2, r2, #8
 80054ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2220      	movs	r2, #32
 80054c8:	409a      	lsls	r2, r3
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8110 	beq.w	80056f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a2c      	ldr	r2, [pc, #176]	; (800558c <HAL_DMA_IRQHandler+0x690>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d04a      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2b      	ldr	r2, [pc, #172]	; (8005590 <HAL_DMA_IRQHandler+0x694>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d045      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a29      	ldr	r2, [pc, #164]	; (8005594 <HAL_DMA_IRQHandler+0x698>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d040      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a28      	ldr	r2, [pc, #160]	; (8005598 <HAL_DMA_IRQHandler+0x69c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d03b      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a26      	ldr	r2, [pc, #152]	; (800559c <HAL_DMA_IRQHandler+0x6a0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d036      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a25      	ldr	r2, [pc, #148]	; (80055a0 <HAL_DMA_IRQHandler+0x6a4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d031      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a23      	ldr	r2, [pc, #140]	; (80055a4 <HAL_DMA_IRQHandler+0x6a8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d02c      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <HAL_DMA_IRQHandler+0x6ac>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d027      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a20      	ldr	r2, [pc, #128]	; (80055ac <HAL_DMA_IRQHandler+0x6b0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d022      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <HAL_DMA_IRQHandler+0x6b4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d01d      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <HAL_DMA_IRQHandler+0x6b8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d018      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <HAL_DMA_IRQHandler+0x6bc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1a      	ldr	r2, [pc, #104]	; (80055bc <HAL_DMA_IRQHandler+0x6c0>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_DMA_IRQHandler+0x6c4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <HAL_DMA_IRQHandler+0x6c8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_DMA_IRQHandler+0x678>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <HAL_DMA_IRQHandler+0x6cc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d12b      	bne.n	80055cc <HAL_DMA_IRQHandler+0x6d0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e02a      	b.n	80055e0 <HAL_DMA_IRQHandler+0x6e4>
 800558a:	bf00      	nop
 800558c:	40020010 	.word	0x40020010
 8005590:	40020028 	.word	0x40020028
 8005594:	40020040 	.word	0x40020040
 8005598:	40020058 	.word	0x40020058
 800559c:	40020070 	.word	0x40020070
 80055a0:	40020088 	.word	0x40020088
 80055a4:	400200a0 	.word	0x400200a0
 80055a8:	400200b8 	.word	0x400200b8
 80055ac:	40020410 	.word	0x40020410
 80055b0:	40020428 	.word	0x40020428
 80055b4:	40020440 	.word	0x40020440
 80055b8:	40020458 	.word	0x40020458
 80055bc:	40020470 	.word	0x40020470
 80055c0:	40020488 	.word	0x40020488
 80055c4:	400204a0 	.word	0x400204a0
 80055c8:	400204b8 	.word	0x400204b8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bf14      	ite	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	2300      	moveq	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8087 	beq.w	80056f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2220      	movs	r2, #32
 80055f0:	409a      	lsls	r2, r3
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d139      	bne.n	8005676 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0216 	bic.w	r2, r2, #22
 8005610:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005620:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <HAL_DMA_IRQHandler+0x736>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0208 	bic.w	r2, r2, #8
 8005640:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	223f      	movs	r2, #63	; 0x3f
 800564c:	409a      	lsls	r2, r3
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 834a 	beq.w	8005d00 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
          }
          return;
 8005674:	e344      	b.n	8005d00 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d018      	beq.n	80056b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d108      	bne.n	80056a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	2b00      	cmp	r3, #0
 8005698:	d02c      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
 80056a2:	e027      	b.n	80056f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d023      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	4798      	blx	r3
 80056b4:	e01e      	b.n	80056f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10f      	bne.n	80056e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0210 	bic.w	r2, r2, #16
 80056d2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 8306 	beq.w	8005d0a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8088 	beq.w	800581c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2204      	movs	r2, #4
 8005710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a7a      	ldr	r2, [pc, #488]	; (8005904 <HAL_DMA_IRQHandler+0xa08>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d04a      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a79      	ldr	r2, [pc, #484]	; (8005908 <HAL_DMA_IRQHandler+0xa0c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d045      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a77      	ldr	r2, [pc, #476]	; (800590c <HAL_DMA_IRQHandler+0xa10>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d040      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a76      	ldr	r2, [pc, #472]	; (8005910 <HAL_DMA_IRQHandler+0xa14>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d03b      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a74      	ldr	r2, [pc, #464]	; (8005914 <HAL_DMA_IRQHandler+0xa18>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d036      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a73      	ldr	r2, [pc, #460]	; (8005918 <HAL_DMA_IRQHandler+0xa1c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d031      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a71      	ldr	r2, [pc, #452]	; (800591c <HAL_DMA_IRQHandler+0xa20>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d02c      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a70      	ldr	r2, [pc, #448]	; (8005920 <HAL_DMA_IRQHandler+0xa24>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d027      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_DMA_IRQHandler+0xa28>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d022      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6d      	ldr	r2, [pc, #436]	; (8005928 <HAL_DMA_IRQHandler+0xa2c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d01d      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a6b      	ldr	r2, [pc, #428]	; (800592c <HAL_DMA_IRQHandler+0xa30>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d018      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a6a      	ldr	r2, [pc, #424]	; (8005930 <HAL_DMA_IRQHandler+0xa34>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d013      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a68      	ldr	r2, [pc, #416]	; (8005934 <HAL_DMA_IRQHandler+0xa38>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00e      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a67      	ldr	r2, [pc, #412]	; (8005938 <HAL_DMA_IRQHandler+0xa3c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d009      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a65      	ldr	r2, [pc, #404]	; (800593c <HAL_DMA_IRQHandler+0xa40>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <HAL_DMA_IRQHandler+0x8b8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a64      	ldr	r2, [pc, #400]	; (8005940 <HAL_DMA_IRQHandler+0xa44>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d108      	bne.n	80057c6 <HAL_DMA_IRQHandler+0x8ca>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0201 	bic.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e007      	b.n	80057d6 <HAL_DMA_IRQHandler+0x8da>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0201 	bic.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3301      	adds	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057de:	429a      	cmp	r2, r3
 80057e0:	d307      	bcc.n	80057f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1f2      	bne.n	80057d6 <HAL_DMA_IRQHandler+0x8da>
 80057f0:	e000      	b.n	80057f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80057f2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2203      	movs	r2, #3
 800580e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005812:	e003      	b.n	800581c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8272 	beq.w	8005d0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
 800582e:	e26c      	b.n	8005d0a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a43      	ldr	r2, [pc, #268]	; (8005944 <HAL_DMA_IRQHandler+0xa48>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d022      	beq.n	8005880 <HAL_DMA_IRQHandler+0x984>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a42      	ldr	r2, [pc, #264]	; (8005948 <HAL_DMA_IRQHandler+0xa4c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d01d      	beq.n	8005880 <HAL_DMA_IRQHandler+0x984>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a40      	ldr	r2, [pc, #256]	; (800594c <HAL_DMA_IRQHandler+0xa50>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_DMA_IRQHandler+0x984>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a3f      	ldr	r2, [pc, #252]	; (8005950 <HAL_DMA_IRQHandler+0xa54>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <HAL_DMA_IRQHandler+0x984>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a3d      	ldr	r2, [pc, #244]	; (8005954 <HAL_DMA_IRQHandler+0xa58>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_DMA_IRQHandler+0x984>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a3c      	ldr	r2, [pc, #240]	; (8005958 <HAL_DMA_IRQHandler+0xa5c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_DMA_IRQHandler+0x984>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a3a      	ldr	r2, [pc, #232]	; (800595c <HAL_DMA_IRQHandler+0xa60>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_DMA_IRQHandler+0x984>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a39      	ldr	r2, [pc, #228]	; (8005960 <HAL_DMA_IRQHandler+0xa64>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d101      	bne.n	8005884 <HAL_DMA_IRQHandler+0x988>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_DMA_IRQHandler+0x98a>
 8005884:	2300      	movs	r3, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 823f 	beq.w	8005d0a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	2204      	movs	r2, #4
 800589e:	409a      	lsls	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80cd 	beq.w	8005a44 <HAL_DMA_IRQHandler+0xb48>
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80c7 	beq.w	8005a44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2204      	movs	r2, #4
 80058c0:	409a      	lsls	r2, r3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d049      	beq.n	8005964 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8210 	beq.w	8005d04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058ec:	e20a      	b.n	8005d04 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8206 	beq.w	8005d04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005900:	e200      	b.n	8005d04 <HAL_DMA_IRQHandler+0xe08>
 8005902:	bf00      	nop
 8005904:	40020010 	.word	0x40020010
 8005908:	40020028 	.word	0x40020028
 800590c:	40020040 	.word	0x40020040
 8005910:	40020058 	.word	0x40020058
 8005914:	40020070 	.word	0x40020070
 8005918:	40020088 	.word	0x40020088
 800591c:	400200a0 	.word	0x400200a0
 8005920:	400200b8 	.word	0x400200b8
 8005924:	40020410 	.word	0x40020410
 8005928:	40020428 	.word	0x40020428
 800592c:	40020440 	.word	0x40020440
 8005930:	40020458 	.word	0x40020458
 8005934:	40020470 	.word	0x40020470
 8005938:	40020488 	.word	0x40020488
 800593c:	400204a0 	.word	0x400204a0
 8005940:	400204b8 	.word	0x400204b8
 8005944:	58025408 	.word	0x58025408
 8005948:	5802541c 	.word	0x5802541c
 800594c:	58025430 	.word	0x58025430
 8005950:	58025444 	.word	0x58025444
 8005954:	58025458 	.word	0x58025458
 8005958:	5802546c 	.word	0x5802546c
 800595c:	58025480 	.word	0x58025480
 8005960:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d160      	bne.n	8005a30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a8c      	ldr	r2, [pc, #560]	; (8005ba4 <HAL_DMA_IRQHandler+0xca8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d04a      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a8a      	ldr	r2, [pc, #552]	; (8005ba8 <HAL_DMA_IRQHandler+0xcac>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d045      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a89      	ldr	r2, [pc, #548]	; (8005bac <HAL_DMA_IRQHandler+0xcb0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d040      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a87      	ldr	r2, [pc, #540]	; (8005bb0 <HAL_DMA_IRQHandler+0xcb4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d03b      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a86      	ldr	r2, [pc, #536]	; (8005bb4 <HAL_DMA_IRQHandler+0xcb8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d036      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a84      	ldr	r2, [pc, #528]	; (8005bb8 <HAL_DMA_IRQHandler+0xcbc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d031      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a83      	ldr	r2, [pc, #524]	; (8005bbc <HAL_DMA_IRQHandler+0xcc0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d02c      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a81      	ldr	r2, [pc, #516]	; (8005bc0 <HAL_DMA_IRQHandler+0xcc4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d027      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a80      	ldr	r2, [pc, #512]	; (8005bc4 <HAL_DMA_IRQHandler+0xcc8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a7e      	ldr	r2, [pc, #504]	; (8005bc8 <HAL_DMA_IRQHandler+0xccc>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a7d      	ldr	r2, [pc, #500]	; (8005bcc <HAL_DMA_IRQHandler+0xcd0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d018      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a7b      	ldr	r2, [pc, #492]	; (8005bd0 <HAL_DMA_IRQHandler+0xcd4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a7a      	ldr	r2, [pc, #488]	; (8005bd4 <HAL_DMA_IRQHandler+0xcd8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a78      	ldr	r2, [pc, #480]	; (8005bd8 <HAL_DMA_IRQHandler+0xcdc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a77      	ldr	r2, [pc, #476]	; (8005bdc <HAL_DMA_IRQHandler+0xce0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_DMA_IRQHandler+0xb12>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a75      	ldr	r2, [pc, #468]	; (8005be0 <HAL_DMA_IRQHandler+0xce4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <HAL_DMA_IRQHandler+0xb24>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0208 	bic.w	r2, r2, #8
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e007      	b.n	8005a30 <HAL_DMA_IRQHandler+0xb34>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0204 	bic.w	r2, r2, #4
 8005a2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8165 	beq.w	8005d04 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a42:	e15f      	b.n	8005d04 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80c5 	beq.w	8005be4 <HAL_DMA_IRQHandler+0xce8>
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80bf 	beq.w	8005be4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6a:	f003 031f 	and.w	r3, r3, #31
 8005a6e:	2202      	movs	r2, #2
 8005a70:	409a      	lsls	r2, r3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d018      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 813a 	beq.w	8005d08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a9c:	e134      	b.n	8005d08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8130 	beq.w	8005d08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab0:	e12a      	b.n	8005d08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d168      	bne.n	8005b8e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a38      	ldr	r2, [pc, #224]	; (8005ba4 <HAL_DMA_IRQHandler+0xca8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d04a      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a37      	ldr	r2, [pc, #220]	; (8005ba8 <HAL_DMA_IRQHandler+0xcac>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d045      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a35      	ldr	r2, [pc, #212]	; (8005bac <HAL_DMA_IRQHandler+0xcb0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d040      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a34      	ldr	r2, [pc, #208]	; (8005bb0 <HAL_DMA_IRQHandler+0xcb4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d03b      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a32      	ldr	r2, [pc, #200]	; (8005bb4 <HAL_DMA_IRQHandler+0xcb8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d036      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a31      	ldr	r2, [pc, #196]	; (8005bb8 <HAL_DMA_IRQHandler+0xcbc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d031      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2f      	ldr	r2, [pc, #188]	; (8005bbc <HAL_DMA_IRQHandler+0xcc0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d02c      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2e      	ldr	r2, [pc, #184]	; (8005bc0 <HAL_DMA_IRQHandler+0xcc4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d027      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <HAL_DMA_IRQHandler+0xcc8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d022      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a2b      	ldr	r2, [pc, #172]	; (8005bc8 <HAL_DMA_IRQHandler+0xccc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d01d      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a29      	ldr	r2, [pc, #164]	; (8005bcc <HAL_DMA_IRQHandler+0xcd0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d018      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a28      	ldr	r2, [pc, #160]	; (8005bd0 <HAL_DMA_IRQHandler+0xcd4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a26      	ldr	r2, [pc, #152]	; (8005bd4 <HAL_DMA_IRQHandler+0xcd8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00e      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a25      	ldr	r2, [pc, #148]	; (8005bd8 <HAL_DMA_IRQHandler+0xcdc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <HAL_DMA_IRQHandler+0xce0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_DMA_IRQHandler+0xc60>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a22      	ldr	r2, [pc, #136]	; (8005be0 <HAL_DMA_IRQHandler+0xce4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d108      	bne.n	8005b6e <HAL_DMA_IRQHandler+0xc72>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0214 	bic.w	r2, r2, #20
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e007      	b.n	8005b7e <HAL_DMA_IRQHandler+0xc82>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 020a 	bic.w	r2, r2, #10
 8005b7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80b8 	beq.w	8005d08 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ba0:	e0b2      	b.n	8005d08 <HAL_DMA_IRQHandler+0xe0c>
 8005ba2:	bf00      	nop
 8005ba4:	40020010 	.word	0x40020010
 8005ba8:	40020028 	.word	0x40020028
 8005bac:	40020040 	.word	0x40020040
 8005bb0:	40020058 	.word	0x40020058
 8005bb4:	40020070 	.word	0x40020070
 8005bb8:	40020088 	.word	0x40020088
 8005bbc:	400200a0 	.word	0x400200a0
 8005bc0:	400200b8 	.word	0x400200b8
 8005bc4:	40020410 	.word	0x40020410
 8005bc8:	40020428 	.word	0x40020428
 8005bcc:	40020440 	.word	0x40020440
 8005bd0:	40020458 	.word	0x40020458
 8005bd4:	40020470 	.word	0x40020470
 8005bd8:	40020488 	.word	0x40020488
 8005bdc:	400204a0 	.word	0x400204a0
 8005be0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	2208      	movs	r2, #8
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8088 	beq.w	8005d0a <HAL_DMA_IRQHandler+0xe0e>
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8082 	beq.w	8005d0a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a41      	ldr	r2, [pc, #260]	; (8005d10 <HAL_DMA_IRQHandler+0xe14>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d04a      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3f      	ldr	r2, [pc, #252]	; (8005d14 <HAL_DMA_IRQHandler+0xe18>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d045      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a3e      	ldr	r2, [pc, #248]	; (8005d18 <HAL_DMA_IRQHandler+0xe1c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d040      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a3c      	ldr	r2, [pc, #240]	; (8005d1c <HAL_DMA_IRQHandler+0xe20>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d03b      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a3b      	ldr	r2, [pc, #236]	; (8005d20 <HAL_DMA_IRQHandler+0xe24>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d036      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a39      	ldr	r2, [pc, #228]	; (8005d24 <HAL_DMA_IRQHandler+0xe28>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d031      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a38      	ldr	r2, [pc, #224]	; (8005d28 <HAL_DMA_IRQHandler+0xe2c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d02c      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a36      	ldr	r2, [pc, #216]	; (8005d2c <HAL_DMA_IRQHandler+0xe30>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d027      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a35      	ldr	r2, [pc, #212]	; (8005d30 <HAL_DMA_IRQHandler+0xe34>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a33      	ldr	r2, [pc, #204]	; (8005d34 <HAL_DMA_IRQHandler+0xe38>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01d      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a32      	ldr	r2, [pc, #200]	; (8005d38 <HAL_DMA_IRQHandler+0xe3c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d018      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a30      	ldr	r2, [pc, #192]	; (8005d3c <HAL_DMA_IRQHandler+0xe40>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2f      	ldr	r2, [pc, #188]	; (8005d40 <HAL_DMA_IRQHandler+0xe44>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a2d      	ldr	r2, [pc, #180]	; (8005d44 <HAL_DMA_IRQHandler+0xe48>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <HAL_DMA_IRQHandler+0xe4c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0xdaa>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a2a      	ldr	r2, [pc, #168]	; (8005d4c <HAL_DMA_IRQHandler+0xe50>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d108      	bne.n	8005cb8 <HAL_DMA_IRQHandler+0xdbc>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 021c 	bic.w	r2, r2, #28
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e007      	b.n	8005cc8 <HAL_DMA_IRQHandler+0xdcc>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 020e 	bic.w	r2, r2, #14
 8005cc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ccc:	f003 031f 	and.w	r3, r3, #31
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3
 8005cfe:	e004      	b.n	8005d0a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005d00:	bf00      	nop
 8005d02:	e002      	b.n	8005d0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d04:	bf00      	nop
 8005d06:	e000      	b.n	8005d0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d0a:	3728      	adds	r7, #40	; 0x28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40020010 	.word	0x40020010
 8005d14:	40020028 	.word	0x40020028
 8005d18:	40020040 	.word	0x40020040
 8005d1c:	40020058 	.word	0x40020058
 8005d20:	40020070 	.word	0x40020070
 8005d24:	40020088 	.word	0x40020088
 8005d28:	400200a0 	.word	0x400200a0
 8005d2c:	400200b8 	.word	0x400200b8
 8005d30:	40020410 	.word	0x40020410
 8005d34:	40020428 	.word	0x40020428
 8005d38:	40020440 	.word	0x40020440
 8005d3c:	40020458 	.word	0x40020458
 8005d40:	40020470 	.word	0x40020470
 8005d44:	40020488 	.word	0x40020488
 8005d48:	400204a0 	.word	0x400204a0
 8005d4c:	400204b8 	.word	0x400204b8

08005d50 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a84      	ldr	r2, [pc, #528]	; (8005f98 <DMA_SetConfig+0x230>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d072      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a82      	ldr	r2, [pc, #520]	; (8005f9c <DMA_SetConfig+0x234>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d06d      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a81      	ldr	r2, [pc, #516]	; (8005fa0 <DMA_SetConfig+0x238>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d068      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a7f      	ldr	r2, [pc, #508]	; (8005fa4 <DMA_SetConfig+0x23c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d063      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a7e      	ldr	r2, [pc, #504]	; (8005fa8 <DMA_SetConfig+0x240>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d05e      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a7c      	ldr	r2, [pc, #496]	; (8005fac <DMA_SetConfig+0x244>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d059      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a7b      	ldr	r2, [pc, #492]	; (8005fb0 <DMA_SetConfig+0x248>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d054      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a79      	ldr	r2, [pc, #484]	; (8005fb4 <DMA_SetConfig+0x24c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d04f      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a78      	ldr	r2, [pc, #480]	; (8005fb8 <DMA_SetConfig+0x250>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d04a      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a76      	ldr	r2, [pc, #472]	; (8005fbc <DMA_SetConfig+0x254>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d045      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a75      	ldr	r2, [pc, #468]	; (8005fc0 <DMA_SetConfig+0x258>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d040      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a73      	ldr	r2, [pc, #460]	; (8005fc4 <DMA_SetConfig+0x25c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d03b      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a72      	ldr	r2, [pc, #456]	; (8005fc8 <DMA_SetConfig+0x260>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d036      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a70      	ldr	r2, [pc, #448]	; (8005fcc <DMA_SetConfig+0x264>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d031      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a6f      	ldr	r2, [pc, #444]	; (8005fd0 <DMA_SetConfig+0x268>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d02c      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6d      	ldr	r2, [pc, #436]	; (8005fd4 <DMA_SetConfig+0x26c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d027      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a6c      	ldr	r2, [pc, #432]	; (8005fd8 <DMA_SetConfig+0x270>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a6a      	ldr	r2, [pc, #424]	; (8005fdc <DMA_SetConfig+0x274>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01d      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a69      	ldr	r2, [pc, #420]	; (8005fe0 <DMA_SetConfig+0x278>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a67      	ldr	r2, [pc, #412]	; (8005fe4 <DMA_SetConfig+0x27c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a66      	ldr	r2, [pc, #408]	; (8005fe8 <DMA_SetConfig+0x280>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a64      	ldr	r2, [pc, #400]	; (8005fec <DMA_SetConfig+0x284>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a63      	ldr	r2, [pc, #396]	; (8005ff0 <DMA_SetConfig+0x288>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <DMA_SetConfig+0x10a>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a61      	ldr	r2, [pc, #388]	; (8005ff4 <DMA_SetConfig+0x28c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <DMA_SetConfig+0x10e>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <DMA_SetConfig+0x110>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00d      	beq.n	8005e98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d004      	beq.n	8005e98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a3e      	ldr	r2, [pc, #248]	; (8005f98 <DMA_SetConfig+0x230>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a3d      	ldr	r2, [pc, #244]	; (8005f9c <DMA_SetConfig+0x234>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a3b      	ldr	r2, [pc, #236]	; (8005fa0 <DMA_SetConfig+0x238>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a3a      	ldr	r2, [pc, #232]	; (8005fa4 <DMA_SetConfig+0x23c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a38      	ldr	r2, [pc, #224]	; (8005fa8 <DMA_SetConfig+0x240>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a37      	ldr	r2, [pc, #220]	; (8005fac <DMA_SetConfig+0x244>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a35      	ldr	r2, [pc, #212]	; (8005fb0 <DMA_SetConfig+0x248>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a34      	ldr	r2, [pc, #208]	; (8005fb4 <DMA_SetConfig+0x24c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a32      	ldr	r2, [pc, #200]	; (8005fb8 <DMA_SetConfig+0x250>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a31      	ldr	r2, [pc, #196]	; (8005fbc <DMA_SetConfig+0x254>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2f      	ldr	r2, [pc, #188]	; (8005fc0 <DMA_SetConfig+0x258>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2e      	ldr	r2, [pc, #184]	; (8005fc4 <DMA_SetConfig+0x25c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2c      	ldr	r2, [pc, #176]	; (8005fc8 <DMA_SetConfig+0x260>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a2b      	ldr	r2, [pc, #172]	; (8005fcc <DMA_SetConfig+0x264>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a29      	ldr	r2, [pc, #164]	; (8005fd0 <DMA_SetConfig+0x268>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <DMA_SetConfig+0x1d0>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a28      	ldr	r2, [pc, #160]	; (8005fd4 <DMA_SetConfig+0x26c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <DMA_SetConfig+0x1d4>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e000      	b.n	8005f3e <DMA_SetConfig+0x1d6>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d05a      	beq.n	8005ff8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	223f      	movs	r2, #63	; 0x3f
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	d108      	bne.n	8005f84 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f82:	e087      	b.n	8006094 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]
}
 8005f94:	e07e      	b.n	8006094 <DMA_SetConfig+0x32c>
 8005f96:	bf00      	nop
 8005f98:	40020010 	.word	0x40020010
 8005f9c:	40020028 	.word	0x40020028
 8005fa0:	40020040 	.word	0x40020040
 8005fa4:	40020058 	.word	0x40020058
 8005fa8:	40020070 	.word	0x40020070
 8005fac:	40020088 	.word	0x40020088
 8005fb0:	400200a0 	.word	0x400200a0
 8005fb4:	400200b8 	.word	0x400200b8
 8005fb8:	40020410 	.word	0x40020410
 8005fbc:	40020428 	.word	0x40020428
 8005fc0:	40020440 	.word	0x40020440
 8005fc4:	40020458 	.word	0x40020458
 8005fc8:	40020470 	.word	0x40020470
 8005fcc:	40020488 	.word	0x40020488
 8005fd0:	400204a0 	.word	0x400204a0
 8005fd4:	400204b8 	.word	0x400204b8
 8005fd8:	58025408 	.word	0x58025408
 8005fdc:	5802541c 	.word	0x5802541c
 8005fe0:	58025430 	.word	0x58025430
 8005fe4:	58025444 	.word	0x58025444
 8005fe8:	58025458 	.word	0x58025458
 8005fec:	5802546c 	.word	0x5802546c
 8005ff0:	58025480 	.word	0x58025480
 8005ff4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a28      	ldr	r2, [pc, #160]	; (80060a0 <DMA_SetConfig+0x338>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d022      	beq.n	8006048 <DMA_SetConfig+0x2e0>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <DMA_SetConfig+0x33c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d01d      	beq.n	8006048 <DMA_SetConfig+0x2e0>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a25      	ldr	r2, [pc, #148]	; (80060a8 <DMA_SetConfig+0x340>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d018      	beq.n	8006048 <DMA_SetConfig+0x2e0>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a24      	ldr	r2, [pc, #144]	; (80060ac <DMA_SetConfig+0x344>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d013      	beq.n	8006048 <DMA_SetConfig+0x2e0>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <DMA_SetConfig+0x348>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00e      	beq.n	8006048 <DMA_SetConfig+0x2e0>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <DMA_SetConfig+0x34c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d009      	beq.n	8006048 <DMA_SetConfig+0x2e0>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <DMA_SetConfig+0x350>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <DMA_SetConfig+0x2e0>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1e      	ldr	r2, [pc, #120]	; (80060bc <DMA_SetConfig+0x354>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d101      	bne.n	800604c <DMA_SetConfig+0x2e4>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <DMA_SetConfig+0x2e6>
 800604c:	2300      	movs	r3, #0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d020      	beq.n	8006094 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2201      	movs	r2, #1
 800605c:	409a      	lsls	r2, r3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d108      	bne.n	8006084 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	60da      	str	r2, [r3, #12]
}
 8006082:	e007      	b.n	8006094 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	60da      	str	r2, [r3, #12]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	58025408 	.word	0x58025408
 80060a4:	5802541c 	.word	0x5802541c
 80060a8:	58025430 	.word	0x58025430
 80060ac:	58025444 	.word	0x58025444
 80060b0:	58025458 	.word	0x58025458
 80060b4:	5802546c 	.word	0x5802546c
 80060b8:	58025480 	.word	0x58025480
 80060bc:	58025494 	.word	0x58025494

080060c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a42      	ldr	r2, [pc, #264]	; (80061d8 <DMA_CalcBaseAndBitshift+0x118>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d04a      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a41      	ldr	r2, [pc, #260]	; (80061dc <DMA_CalcBaseAndBitshift+0x11c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d045      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a3f      	ldr	r2, [pc, #252]	; (80061e0 <DMA_CalcBaseAndBitshift+0x120>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d040      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3e      	ldr	r2, [pc, #248]	; (80061e4 <DMA_CalcBaseAndBitshift+0x124>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d03b      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a3c      	ldr	r2, [pc, #240]	; (80061e8 <DMA_CalcBaseAndBitshift+0x128>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d036      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a3b      	ldr	r2, [pc, #236]	; (80061ec <DMA_CalcBaseAndBitshift+0x12c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d031      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a39      	ldr	r2, [pc, #228]	; (80061f0 <DMA_CalcBaseAndBitshift+0x130>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d02c      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a38      	ldr	r2, [pc, #224]	; (80061f4 <DMA_CalcBaseAndBitshift+0x134>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d027      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a36      	ldr	r2, [pc, #216]	; (80061f8 <DMA_CalcBaseAndBitshift+0x138>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d022      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a35      	ldr	r2, [pc, #212]	; (80061fc <DMA_CalcBaseAndBitshift+0x13c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d01d      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a33      	ldr	r2, [pc, #204]	; (8006200 <DMA_CalcBaseAndBitshift+0x140>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d018      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a32      	ldr	r2, [pc, #200]	; (8006204 <DMA_CalcBaseAndBitshift+0x144>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d013      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a30      	ldr	r2, [pc, #192]	; (8006208 <DMA_CalcBaseAndBitshift+0x148>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00e      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a2f      	ldr	r2, [pc, #188]	; (800620c <DMA_CalcBaseAndBitshift+0x14c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2d      	ldr	r2, [pc, #180]	; (8006210 <DMA_CalcBaseAndBitshift+0x150>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <DMA_CalcBaseAndBitshift+0xa8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2c      	ldr	r2, [pc, #176]	; (8006214 <DMA_CalcBaseAndBitshift+0x154>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d101      	bne.n	800616c <DMA_CalcBaseAndBitshift+0xac>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <DMA_CalcBaseAndBitshift+0xae>
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d024      	beq.n	80061bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	3b10      	subs	r3, #16
 800617a:	4a27      	ldr	r2, [pc, #156]	; (8006218 <DMA_CalcBaseAndBitshift+0x158>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	4a24      	ldr	r2, [pc, #144]	; (800621c <DMA_CalcBaseAndBitshift+0x15c>)
 800618c:	5cd3      	ldrb	r3, [r2, r3]
 800618e:	461a      	mov	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b03      	cmp	r3, #3
 8006198:	d908      	bls.n	80061ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	4b1f      	ldr	r3, [pc, #124]	; (8006220 <DMA_CalcBaseAndBitshift+0x160>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	1d1a      	adds	r2, r3, #4
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	659a      	str	r2, [r3, #88]	; 0x58
 80061aa:	e00d      	b.n	80061c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <DMA_CalcBaseAndBitshift+0x160>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6593      	str	r3, [r2, #88]	; 0x58
 80061ba:	e005      	b.n	80061c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40020010 	.word	0x40020010
 80061dc:	40020028 	.word	0x40020028
 80061e0:	40020040 	.word	0x40020040
 80061e4:	40020058 	.word	0x40020058
 80061e8:	40020070 	.word	0x40020070
 80061ec:	40020088 	.word	0x40020088
 80061f0:	400200a0 	.word	0x400200a0
 80061f4:	400200b8 	.word	0x400200b8
 80061f8:	40020410 	.word	0x40020410
 80061fc:	40020428 	.word	0x40020428
 8006200:	40020440 	.word	0x40020440
 8006204:	40020458 	.word	0x40020458
 8006208:	40020470 	.word	0x40020470
 800620c:	40020488 	.word	0x40020488
 8006210:	400204a0 	.word	0x400204a0
 8006214:	400204b8 	.word	0x400204b8
 8006218:	aaaaaaab 	.word	0xaaaaaaab
 800621c:	08021a40 	.word	0x08021a40
 8006220:	fffffc00 	.word	0xfffffc00

08006224 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d120      	bne.n	800627a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	2b03      	cmp	r3, #3
 800623e:	d858      	bhi.n	80062f2 <DMA_CheckFifoParam+0xce>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <DMA_CheckFifoParam+0x24>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	08006259 	.word	0x08006259
 800624c:	0800626b 	.word	0x0800626b
 8006250:	08006259 	.word	0x08006259
 8006254:	080062f3 	.word	0x080062f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d048      	beq.n	80062f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006268:	e045      	b.n	80062f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006272:	d142      	bne.n	80062fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006278:	e03f      	b.n	80062fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006282:	d123      	bne.n	80062cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	2b03      	cmp	r3, #3
 800628a:	d838      	bhi.n	80062fe <DMA_CheckFifoParam+0xda>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <DMA_CheckFifoParam+0x70>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062ab 	.word	0x080062ab
 800629c:	080062a5 	.word	0x080062a5
 80062a0:	080062bd 	.word	0x080062bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
        break;
 80062a8:	e030      	b.n	800630c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d025      	beq.n	8006302 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062ba:	e022      	b.n	8006302 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062c4:	d11f      	bne.n	8006306 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062ca:	e01c      	b.n	8006306 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d902      	bls.n	80062da <DMA_CheckFifoParam+0xb6>
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d003      	beq.n	80062e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80062d8:	e018      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
        break;
 80062de:	e015      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00e      	beq.n	800630a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
    break;
 80062f0:	e00b      	b.n	800630a <DMA_CheckFifoParam+0xe6>
        break;
 80062f2:	bf00      	nop
 80062f4:	e00a      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 80062f6:	bf00      	nop
 80062f8:	e008      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 80062fa:	bf00      	nop
 80062fc:	e006      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 80062fe:	bf00      	nop
 8006300:	e004      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <DMA_CheckFifoParam+0xe8>
        break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <DMA_CheckFifoParam+0xe8>
    break;
 800630a:	bf00      	nop
    }
  }

  return status;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop

0800631c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a38      	ldr	r2, [pc, #224]	; (8006410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a36      	ldr	r2, [pc, #216]	; (8006414 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01d      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a35      	ldr	r2, [pc, #212]	; (8006418 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a33      	ldr	r2, [pc, #204]	; (800641c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a32      	ldr	r2, [pc, #200]	; (8006420 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a30      	ldr	r2, [pc, #192]	; (8006424 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a2f      	ldr	r2, [pc, #188]	; (8006428 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a2d      	ldr	r2, [pc, #180]	; (800642c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d101      	bne.n	800637e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01a      	beq.n	80063ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	3b08      	subs	r3, #8
 800638c:	4a28      	ldr	r2, [pc, #160]	; (8006430 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4b26      	ldr	r3, [pc, #152]	; (8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a24      	ldr	r2, [pc, #144]	; (8006438 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80063a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2201      	movs	r2, #1
 80063b2:	409a      	lsls	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80063b8:	e024      	b.n	8006404 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	3b10      	subs	r3, #16
 80063c2:	4a1e      	ldr	r2, [pc, #120]	; (800643c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80063c4:	fba2 2303 	umull	r2, r3, r2, r3
 80063c8:	091b      	lsrs	r3, r3, #4
 80063ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4a1c      	ldr	r2, [pc, #112]	; (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d806      	bhi.n	80063e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4a1b      	ldr	r2, [pc, #108]	; (8006444 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d902      	bls.n	80063e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3308      	adds	r3, #8
 80063e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4b18      	ldr	r3, [pc, #96]	; (8006448 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a16      	ldr	r2, [pc, #88]	; (800644c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	2201      	movs	r2, #1
 80063fe:	409a      	lsls	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	58025408 	.word	0x58025408
 8006414:	5802541c 	.word	0x5802541c
 8006418:	58025430 	.word	0x58025430
 800641c:	58025444 	.word	0x58025444
 8006420:	58025458 	.word	0x58025458
 8006424:	5802546c 	.word	0x5802546c
 8006428:	58025480 	.word	0x58025480
 800642c:	58025494 	.word	0x58025494
 8006430:	cccccccd 	.word	0xcccccccd
 8006434:	16009600 	.word	0x16009600
 8006438:	58025880 	.word	0x58025880
 800643c:	aaaaaaab 	.word	0xaaaaaaab
 8006440:	400204b8 	.word	0x400204b8
 8006444:	4002040f 	.word	0x4002040f
 8006448:	10008200 	.word	0x10008200
 800644c:	40020880 	.word	0x40020880

08006450 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d04a      	beq.n	80064fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d847      	bhi.n	80064fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a25      	ldr	r2, [pc, #148]	; (8006508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d022      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a24      	ldr	r2, [pc, #144]	; (800650c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01d      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a22      	ldr	r2, [pc, #136]	; (8006510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d018      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a21      	ldr	r2, [pc, #132]	; (8006514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d013      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1f      	ldr	r2, [pc, #124]	; (8006518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00e      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1e      	ldr	r2, [pc, #120]	; (800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d009      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d004      	beq.n	80064bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4b17      	ldr	r3, [pc, #92]	; (8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a15      	ldr	r2, [pc, #84]	; (800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80064d8:	671a      	str	r2, [r3, #112]	; 0x70
 80064da:	e009      	b.n	80064f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4b14      	ldr	r3, [pc, #80]	; (8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80064e0:	4413      	add	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	461a      	mov	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a11      	ldr	r2, [pc, #68]	; (8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80064ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	2201      	movs	r2, #1
 80064f6:	409a      	lsls	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	58025408 	.word	0x58025408
 800650c:	5802541c 	.word	0x5802541c
 8006510:	58025430 	.word	0x58025430
 8006514:	58025444 	.word	0x58025444
 8006518:	58025458 	.word	0x58025458
 800651c:	5802546c 	.word	0x5802546c
 8006520:	58025480 	.word	0x58025480
 8006524:	58025494 	.word	0x58025494
 8006528:	1600963f 	.word	0x1600963f
 800652c:	58025940 	.word	0x58025940
 8006530:	1000823f 	.word	0x1000823f
 8006534:	40020940 	.word	0x40020940

08006538 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0c6      	b.n	80066d8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d102      	bne.n	8006558 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f007 ff2c 	bl	800e3b0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2223      	movs	r2, #35	; 0x23
 800655c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800655e:	4b60      	ldr	r3, [pc, #384]	; (80066e0 <HAL_ETH_Init+0x1a8>)
 8006560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006564:	4a5e      	ldr	r2, [pc, #376]	; (80066e0 <HAL_ETH_Init+0x1a8>)
 8006566:	f043 0302 	orr.w	r3, r3, #2
 800656a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800656e:	4b5c      	ldr	r3, [pc, #368]	; (80066e0 <HAL_ETH_Init+0x1a8>)
 8006570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	7a1b      	ldrb	r3, [r3, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006584:	2000      	movs	r0, #0
 8006586:	f7fc fba1 	bl	8002ccc <HAL_SYSCFG_ETHInterfaceSelect>
 800658a:	e003      	b.n	8006594 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800658c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006590:	f7fc fb9c 	bl	8002ccc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065ac:	f7fc fb52 	bl	8002c54 <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80065b2:	e00f      	b.n	80065d4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80065b4:	f7fc fb4e 	bl	8002c54 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065c2:	d907      	bls.n	80065d4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2204      	movs	r2, #4
 80065c8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	22e0      	movs	r2, #224	; 0xe0
 80065ce:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e081      	b.n	80066d8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e6      	bne.n	80065b4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f86c 	bl	80076c4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80065ec:	f002 fd90 	bl	8009110 <HAL_RCC_GetHCLKFreq>
 80065f0:	4603      	mov	r3, r0
 80065f2:	4a3c      	ldr	r2, [pc, #240]	; (80066e4 <HAL_ETH_Init+0x1ac>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	0c9a      	lsrs	r2, r3, #18
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3a01      	subs	r2, #1
 8006600:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 ffbf 	bl	8007588 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006620:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006624:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	22e0      	movs	r2, #224	; 0xe0
 800663c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e04a      	b.n	80066d8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	f241 1308 	movw	r3, #4360	; 0x1108
 800664a:	4413      	add	r3, r2
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4b26      	ldr	r3, [pc, #152]	; (80066e8 <HAL_ETH_Init+0x1b0>)
 8006650:	4013      	ands	r3, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6952      	ldr	r2, [r2, #20]
 8006656:	0052      	lsls	r2, r2, #1
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	6809      	ldr	r1, [r1, #0]
 800665c:	431a      	orrs	r2, r3
 800665e:	f241 1308 	movw	r3, #4360	; 0x1108
 8006662:	440b      	add	r3, r1
 8006664:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 f884 	bl	8007774 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 f8c8 	bl	8007802 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	3305      	adds	r3, #5
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	021a      	lsls	r2, r3, #8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	3303      	adds	r3, #3
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	061a      	lsls	r2, r3, #24
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	3302      	adds	r3, #2
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	041b      	lsls	r3, r3, #16
 80066a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	3301      	adds	r3, #1
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80066b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80066be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80066c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2210      	movs	r2, #16
 80066ce:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2210      	movs	r2, #16
 80066d4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	58024400 	.word	0x58024400
 80066e4:	431bde83 	.word	0x431bde83
 80066e8:	ffff8001 	.word	0xffff8001

080066ec <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	3310      	adds	r3, #16
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <HAL_ETH_DescAssignMemory+0x28>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d904      	bls.n	800671e <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e021      	b.n	8006762 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677a:	2b10      	cmp	r3, #16
 800677c:	d14c      	bne.n	8006818 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2223      	movs	r2, #35	; 0x23
 8006782:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0202 	orr.w	r2, r2, #2
 8006792:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0201 	orr.w	r2, r2, #1
 80067b4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f241 1304 	movw	r3, #4356	; 0x1104
 80067c0:	4413      	add	r3, r2
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6811      	ldr	r1, [r2, #0]
 80067c8:	f043 0201 	orr.w	r2, r3, #1
 80067cc:	f241 1304 	movw	r3, #4356	; 0x1104
 80067d0:	440b      	add	r3, r1
 80067d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80067dc:	4413      	add	r3, r2
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6811      	ldr	r1, [r2, #0]
 80067e4:	f043 0201 	orr.w	r2, r3, #1
 80067e8:	f241 1308 	movw	r3, #4360	; 0x1108
 80067ec:	440b      	add	r3, r1
 80067ee:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8006802:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006806:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2210      	movs	r2, #16
 800680c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2222      	movs	r2, #34	; 0x22
 8006812:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d040      	beq.n	80068b8 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2223      	movs	r2, #35	; 0x23
 800683a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	f241 1304 	movw	r3, #4356	; 0x1104
 8006844:	4413      	add	r3, r2
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6811      	ldr	r1, [r2, #0]
 800684c:	f023 0201 	bic.w	r2, r3, #1
 8006850:	f241 1304 	movw	r3, #4356	; 0x1104
 8006854:	440b      	add	r3, r1
 8006856:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f241 1308 	movw	r3, #4360	; 0x1108
 8006860:	4413      	add	r3, r2
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6811      	ldr	r1, [r2, #0]
 8006868:	f023 0201 	bic.w	r2, r3, #1
 800686c:	f241 1308 	movw	r3, #4360	; 0x1108
 8006870:	440b      	add	r3, r1
 8006872:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0201 	orr.w	r2, r2, #1
 8006894:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0202 	bic.w	r2, r2, #2
 80068a6:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2210      	movs	r2, #16
 80068ac:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2210      	movs	r2, #16
 80068b2:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e000      	b.n	80068ba <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068dc:	f043 0201 	orr.w	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e073      	b.n	80069d0 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d16e      	bne.n	80069ce <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80068f0:	2200      	movs	r2, #0
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 ffe1 	bl	80078bc <ETH_Prepare_Tx_Descriptors>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d007      	beq.n	8006910 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006904:	f043 0202 	orr.w	r2, r3, #2
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e05f      	b.n	80069d0 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3206      	adds	r2, #6
 8006918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691c:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	629a      	str	r2, [r3, #40]	; 0x28
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	2b03      	cmp	r3, #3
 800692e:	d904      	bls.n	800693a <HAL_ETH_Transmit+0x74>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	1f1a      	subs	r2, r3, #4
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	3106      	adds	r1, #6
 8006946:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800694a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800694e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8006950:	f7fc f980 	bl	8002c54 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006956:	e034      	b.n	80069c2 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d011      	beq.n	800698e <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696e:	f043 0208 	orr.w	r2, r3, #8
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	22e0      	movs	r2, #224	; 0xe0
 8006988:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e020      	b.n	80069d0 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006994:	d015      	beq.n	80069c2 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8006996:	f7fc f95d 	bl	8002c54 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <HAL_ETH_Transmit+0xe6>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b0:	f043 0204 	orr.w	r2, r3, #4
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	22e0      	movs	r2, #224	; 0xe0
 80069bc:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e006      	b.n	80069d0 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	dbc6      	blt.n	8006958 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e000      	b.n	80069d0 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
  }
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d113      	bne.n	8006a1a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	f241 1334 	movw	r3, #4404	; 0x1134
 80069fa:	4413      	add	r3, r2
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d109      	bne.n	8006a1a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f8f2 	bl	8006bf0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006a14:	f248 0240 	movw	r2, #32832	; 0x8040
 8006a18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d113      	bne.n	8006a54 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	f241 1334 	movw	r3, #4404	; 0x1134
 8006a34:	4413      	add	r3, r2
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d109      	bne.n	8006a54 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f8cb 	bl	8006bdc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006a4e:	f248 0201 	movw	r2, #32769	; 0x8001
 8006a52:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a66:	d149      	bne.n	8006afc <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	f241 1334 	movw	r3, #4404	; 0x1134
 8006a70:	4413      	add	r3, r2
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7c:	d13e      	bne.n	8006afc <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a82:	f043 0208 	orr.w	r2, r3, #8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9c:	d11b      	bne.n	8006ad6 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	f241 1302 	movw	r3, #4354	; 0x1102
 8006aac:	4013      	ands	r3, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	f241 1334 	movw	r3, #4404	; 0x1134
 8006aba:	4413      	add	r3, r2
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6811      	ldr	r1, [r2, #0]
 8006ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ac6:	f241 1334 	movw	r3, #4404	; 0x1134
 8006aca:	440b      	add	r3, r1
 8006acc:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	22e0      	movs	r2, #224	; 0xe0
 8006ad2:	66da      	str	r2, [r3, #108]	; 0x6c
 8006ad4:	e00f      	b.n	8006af6 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006af0:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8006af4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f884 	bl	8006c04 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b04:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8006b08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b0c:	d10e      	bne.n	8006b2c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	22e0      	movs	r2, #224	; 0xe0
 8006b1e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f879 	bl	8006c18 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d10f      	bne.n	8006b5c <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b44:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f86c 	bl	8006c2c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d10f      	bne.n	8006b8c <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f85e 	bl	8006c40 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8006b8c:	f7fd faf2 	bl	8004174 <HAL_GetCurrentCPUID>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d10d      	bne.n	8006bb2 <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <HAL_ETH_IRQHandler+0x1fc>)
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d014      	beq.n	8006bcc <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <HAL_ETH_IRQHandler+0x1fc>)
 8006ba4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006ba8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f852 	bl	8006c54 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8006bb0:	e00c      	b.n	8006bcc <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8006bb2:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <HAL_ETH_IRQHandler+0x200>)
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d006      	beq.n	8006bcc <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <HAL_ETH_IRQHandler+0x200>)
 8006bc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006bc4:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f844 	bl	8006c54 <HAL_ETH_WakeUpCallback>
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	58000080 	.word	0x58000080
 8006bd8:	580000c0 	.word	0x580000c0

08006bdc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e03e      	b.n	8006d08 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c92:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	055b      	lsls	r3, r3, #21
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	041b      	lsls	r3, r3, #16
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f043 030c 	orr.w	r3, r3, #12
 8006cb6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006cca:	f7fb ffc3 	bl	8002c54 <HAL_GetTick>
 8006cce:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006cd0:	e009      	b.n	8006ce6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8006cd2:	f7fb ffbf 	bl	8002c54 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ce0:	d901      	bls.n	8006ce6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e010      	b.n	8006d08 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1ed      	bne.n	8006cd2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e03c      	b.n	8006dac <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d3a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	055b      	lsls	r3, r3, #21
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	041b      	lsls	r3, r3, #16
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 030c 	bic.w	r3, r3, #12
 8006d5e:	f043 0304 	orr.w	r3, r3, #4
 8006d62:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <HAL_ETH_WritePHYRegister+0xa4>)
 8006d72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006d76:	4a0f      	ldr	r2, [pc, #60]	; (8006db4 <HAL_ETH_WritePHYRegister+0xa4>)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006d7e:	f7fb ff69 	bl	8002c54 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006d84:	e009      	b.n	8006d9a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8006d86:	f7fb ff65 	bl	8002c54 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d94:	d901      	bls.n	8006d9a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e008      	b.n	8006dac <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1ed      	bne.n	8006d86 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40028000 	.word	0x40028000

08006db8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e1c3      	b.n	8007154 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 020c 	and.w	r2, r3, #12
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bf0c      	ite	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	2300      	movne	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bf14      	ite	ne
 8006e2e:	2301      	movne	r3, #1
 8006e30:	2300      	moveq	r3, #0
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bf0c      	ite	eq
 8006e48:	2301      	moveq	r3, #1
 8006e4a:	2300      	movne	r3, #0
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	461a      	mov	r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bf14      	ite	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	2300      	moveq	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf14      	ite	ne
 8006e7c:	2301      	movne	r3, #1
 8006e7e:	2300      	moveq	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bf14      	ite	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	2300      	moveq	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	2300      	movne	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf14      	ite	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	2300      	moveq	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2301      	movne	r3, #1
 8006f50:	2300      	moveq	r3, #0
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bf14      	ite	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	2300      	moveq	r3, #0
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bf14      	ite	ne
 8007000:	2301      	movne	r3, #1
 8007002:	2300      	moveq	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	0e5b      	lsrs	r3, r3, #25
 8007016:	f003 021f 	and.w	r2, r3, #31
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf14      	ite	ne
 800702c:	2301      	movne	r3, #1
 800702e:	2300      	moveq	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 020f 	and.w	r2, r3, #15
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	bf14      	ite	ne
 8007056:	2301      	movne	r3, #1
 8007058:	2300      	moveq	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706e:	2b00      	cmp	r3, #0
 8007070:	bf0c      	ite	eq
 8007072:	2301      	moveq	r3, #1
 8007074:	2300      	movne	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	b29a      	uxth	r2, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf14      	ite	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	2300      	moveq	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bf14      	ite	ne
 80070ca:	2301      	movne	r3, #1
 80070cc:	2300      	moveq	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80070e0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80070f0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b00      	cmp	r3, #0
 8007106:	bf14      	ite	ne
 8007108:	2301      	movne	r3, #1
 800710a:	2300      	moveq	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	bf14      	ite	ne
 8007126:	2301      	movne	r3, #1
 8007128:	2300      	moveq	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	bf0c      	ite	eq
 8007144:	2301      	moveq	r3, #1
 8007146:	2300      	movne	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e00a      	b.n	800718a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007178:	2b10      	cmp	r3, #16
 800717a:	d105      	bne.n	8007188 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f860 	bl	8007244 <ETH_SetMACConfig>

    return HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	e000      	b.n	800718a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071a4:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071ac:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80071ae:	f001 ffaf 	bl	8009110 <HAL_RCC_GetHCLKFreq>
 80071b2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d908      	bls.n	80071ce <HAL_ETH_SetMDIOClockRange+0x3a>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4a1d      	ldr	r2, [pc, #116]	; (8007234 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d804      	bhi.n	80071ce <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e027      	b.n	800721e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	4a18      	ldr	r2, [pc, #96]	; (8007234 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d908      	bls.n	80071e8 <HAL_ETH_SetMDIOClockRange+0x54>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4a17      	ldr	r2, [pc, #92]	; (8007238 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d204      	bcs.n	80071e8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	e01a      	b.n	800721e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4a13      	ldr	r2, [pc, #76]	; (8007238 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d303      	bcc.n	80071f8 <HAL_ETH_SetMDIOClockRange+0x64>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4a12      	ldr	r2, [pc, #72]	; (800723c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d911      	bls.n	800721c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4a10      	ldr	r2, [pc, #64]	; (800723c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d908      	bls.n	8007212 <HAL_ETH_SetMDIOClockRange+0x7e>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4a0f      	ldr	r2, [pc, #60]	; (8007240 <HAL_ETH_SetMDIOClockRange+0xac>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d804      	bhi.n	8007212 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e005      	b.n	800721e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e000      	b.n	800721e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800721c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	01312cff 	.word	0x01312cff
 8007234:	02160ebf 	.word	0x02160ebf
 8007238:	03938700 	.word	0x03938700
 800723c:	05f5e0ff 	.word	0x05f5e0ff
 8007240:	08f0d17f 	.word	0x08f0d17f

08007244 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8007256:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	791b      	ldrb	r3, [r3, #4]
 800725c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800725e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	7b1b      	ldrb	r3, [r3, #12]
 8007264:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007266:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	7b5b      	ldrb	r3, [r3, #13]
 800726c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800726e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	7b9b      	ldrb	r3, [r3, #14]
 8007274:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007276:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	7bdb      	ldrb	r3, [r3, #15]
 800727c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800727e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	7c12      	ldrb	r2, [r2, #16]
 8007284:	2a00      	cmp	r2, #0
 8007286:	d102      	bne.n	800728e <ETH_SetMACConfig+0x4a>
 8007288:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800728c:	e000      	b.n	8007290 <ETH_SetMACConfig+0x4c>
 800728e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007290:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	7c52      	ldrb	r2, [r2, #17]
 8007296:	2a00      	cmp	r2, #0
 8007298:	d102      	bne.n	80072a0 <ETH_SetMACConfig+0x5c>
 800729a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800729e:	e000      	b.n	80072a2 <ETH_SetMACConfig+0x5e>
 80072a0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80072a2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	7c9b      	ldrb	r3, [r3, #18]
 80072a8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80072aa:	431a      	orrs	r2, r3
                                macconf->Speed |
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80072b0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80072b6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	7f1b      	ldrb	r3, [r3, #28]
 80072bc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80072be:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	7f5b      	ldrb	r3, [r3, #29]
 80072c4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80072c6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	7f92      	ldrb	r2, [r2, #30]
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	d102      	bne.n	80072d6 <ETH_SetMACConfig+0x92>
 80072d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072d4:	e000      	b.n	80072d8 <ETH_SetMACConfig+0x94>
 80072d6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80072d8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	7fdb      	ldrb	r3, [r3, #31]
 80072de:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80072e0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80072e8:	2a00      	cmp	r2, #0
 80072ea:	d102      	bne.n	80072f2 <ETH_SetMACConfig+0xae>
 80072ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072f0:	e000      	b.n	80072f4 <ETH_SetMACConfig+0xb0>
 80072f2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80072f4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80072fa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007302:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8007304:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	4b56      	ldr	r3, [pc, #344]	; (8007470 <ETH_SetMACConfig+0x22c>)
 8007316:	4013      	ands	r3, r2
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6812      	ldr	r2, [r2, #0]
 800731c:	68f9      	ldr	r1, [r7, #12]
 800731e:	430b      	orrs	r3, r1
 8007320:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007326:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800732e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007330:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007338:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800733a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007342:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007344:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800734c:	2a00      	cmp	r2, #0
 800734e:	d102      	bne.n	8007356 <ETH_SetMACConfig+0x112>
 8007350:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007354:	e000      	b.n	8007358 <ETH_SetMACConfig+0x114>
 8007356:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007358:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	4b42      	ldr	r3, [pc, #264]	; (8007474 <ETH_SetMACConfig+0x230>)
 800736a:	4013      	ands	r3, r2
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	68f9      	ldr	r1, [r7, #12]
 8007372:	430b      	orrs	r3, r1
 8007374:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800737c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	4b3a      	ldr	r3, [pc, #232]	; (8007478 <ETH_SetMACConfig+0x234>)
 800738e:	4013      	ands	r3, r2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	68f9      	ldr	r1, [r7, #12]
 8007396:	430b      	orrs	r3, r1
 8007398:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80073a0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80073a6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	d101      	bne.n	80073b6 <ETH_SetMACConfig+0x172>
 80073b2:	2280      	movs	r2, #128	; 0x80
 80073b4:	e000      	b.n	80073b8 <ETH_SetMACConfig+0x174>
 80073b6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80073b8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073be:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073ca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80073ce:	4013      	ands	r3, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	68f9      	ldr	r1, [r7, #12]
 80073d6:	430b      	orrs	r3, r1
 80073d8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80073e0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80073e8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	f023 0103 	bic.w	r1, r3, #3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	430a      	orrs	r2, r1
 8007402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800740e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800742a:	2a00      	cmp	r2, #0
 800742c:	d101      	bne.n	8007432 <ETH_SetMACConfig+0x1ee>
 800742e:	2240      	movs	r2, #64	; 0x40
 8007430:	e000      	b.n	8007434 <ETH_SetMACConfig+0x1f0>
 8007432:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007434:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800743c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800743e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007446:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007454:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	430a      	orrs	r2, r1
 8007460:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	00048083 	.word	0x00048083
 8007474:	c0f88000 	.word	0xc0f88000
 8007478:	fffffef0 	.word	0xfffffef0

0800747c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	4b38      	ldr	r3, [pc, #224]	; (8007574 <ETH_SetDMAConfig+0xf8>)
 8007492:	4013      	ands	r3, r2
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	6809      	ldr	r1, [r1, #0]
 800749c:	431a      	orrs	r2, r3
 800749e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80074a2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	791b      	ldrb	r3, [r3, #4]
 80074a8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80074ae:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	7b1b      	ldrb	r3, [r3, #12]
 80074b4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	f241 0304 	movw	r3, #4100	; 0x1004
 80074c2:	4413      	add	r3, r2
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4b2c      	ldr	r3, [pc, #176]	; (8007578 <ETH_SetDMAConfig+0xfc>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6811      	ldr	r1, [r2, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80074d6:	440b      	add	r3, r1
 80074d8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	7b5b      	ldrb	r3, [r3, #13]
 80074de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b22      	ldr	r3, [pc, #136]	; (800757c <ETH_SetDMAConfig+0x100>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6811      	ldr	r1, [r2, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8007502:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	7d1b      	ldrb	r3, [r3, #20]
 800750c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800750e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	7f5b      	ldrb	r3, [r3, #29]
 8007514:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	f241 1304 	movw	r3, #4356	; 0x1104
 8007522:	4413      	add	r3, r2
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4b16      	ldr	r3, [pc, #88]	; (8007580 <ETH_SetDMAConfig+0x104>)
 8007528:	4013      	ands	r3, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6811      	ldr	r1, [r2, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	431a      	orrs	r2, r3
 8007532:	f241 1304 	movw	r3, #4356	; 0x1104
 8007536:	440b      	add	r3, r1
 8007538:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	7f1b      	ldrb	r3, [r3, #28]
 800753e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f241 1308 	movw	r3, #4360	; 0x1108
 8007550:	4413      	add	r3, r2
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <ETH_SetDMAConfig+0x108>)
 8007556:	4013      	ands	r3, r2
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6811      	ldr	r1, [r2, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	431a      	orrs	r2, r3
 8007560:	f241 1308 	movw	r3, #4360	; 0x1108
 8007564:	440b      	add	r3, r1
 8007566:	601a      	str	r2, [r3, #0]
}
 8007568:	bf00      	nop
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	ffff87fd 	.word	0xffff87fd
 8007578:	ffff2ffe 	.word	0xffff2ffe
 800757c:	fffec000 	.word	0xfffec000
 8007580:	ffc0efef 	.word	0xffc0efef
 8007584:	7fc0ffff 	.word	0x7fc0ffff

08007588 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b0a4      	sub	sp, #144	; 0x90
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007596:	2300      	movs	r3, #0
 8007598:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800759a:	2300      	movs	r3, #0
 800759c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80075a0:	2300      	movs	r3, #0
 80075a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80075c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075c8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80075da:	2300      	movs	r3, #0
 80075dc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80075e0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80075e4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80075ec:	2300      	movs	r3, #0
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007602:	2300      	movs	r3, #0
 8007604:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007606:	2300      	movs	r3, #0
 8007608:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800760a:	2300      	movs	r3, #0
 800760c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800760e:	2300      	movs	r3, #0
 8007610:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007620:	2320      	movs	r3, #32
 8007622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800762c:	2300      	movs	r3, #0
 800762e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007632:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007636:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800763c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800763e:	2300      	movs	r3, #0
 8007640:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007644:	2302      	movs	r3, #2
 8007646:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800764a:	2300      	movs	r3, #0
 800764c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007650:	2300      	movs	r3, #0
 8007652:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800765c:	2301      	movs	r3, #1
 800765e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007662:	2300      	movs	r3, #0
 8007664:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800766c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff fde6 	bl	8007244 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007678:	2301      	movs	r3, #1
 800767a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800767c:	2301      	movs	r3, #1
 800767e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007680:	2300      	movs	r3, #0
 8007682:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007684:	2300      	movs	r3, #0
 8007686:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800768a:	2300      	movs	r3, #0
 800768c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800768e:	2300      	movs	r3, #0
 8007690:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007692:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007696:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007698:	2300      	movs	r3, #0
 800769a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800769c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80076a8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80076ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80076ae:	f107 0308 	add.w	r3, r7, #8
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7ff fee1 	bl	800747c <ETH_SetDMAConfig>
}
 80076ba:	bf00      	nop
 80076bc:	3790      	adds	r7, #144	; 0x90
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80076de:	f001 fd17 	bl	8009110 <HAL_RCC_GetHCLKFreq>
 80076e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	; (8007760 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d908      	bls.n	80076fe <ETH_MAC_MDIO_ClkConfig+0x3a>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d804      	bhi.n	80076fe <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	e027      	b.n	800774e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	4a18      	ldr	r2, [pc, #96]	; (8007764 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d908      	bls.n	8007718 <ETH_MAC_MDIO_ClkConfig+0x54>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	4a17      	ldr	r2, [pc, #92]	; (8007768 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d204      	bcs.n	8007718 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e01a      	b.n	800774e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4a13      	ldr	r2, [pc, #76]	; (8007768 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d303      	bcc.n	8007728 <ETH_MAC_MDIO_ClkConfig+0x64>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4a12      	ldr	r2, [pc, #72]	; (800776c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d911      	bls.n	800774c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4a10      	ldr	r2, [pc, #64]	; (800776c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d908      	bls.n	8007742 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4a0f      	ldr	r2, [pc, #60]	; (8007770 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d804      	bhi.n	8007742 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	e005      	b.n	800774e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	e000      	b.n	800774e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800774c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007758:	bf00      	nop
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	01312cff 	.word	0x01312cff
 8007764:	02160ebf 	.word	0x02160ebf
 8007768:	03938700 	.word	0x03938700
 800776c:	05f5e0ff 	.word	0x05f5e0ff
 8007770:	08f0d17f 	.word	0x08f0d17f

08007774 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e01d      	b.n	80077be <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68d9      	ldr	r1, [r3, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4613      	mov	r3, r2
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	4413      	add	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	440b      	add	r3, r1
 8007792:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2200      	movs	r2, #0
 800779e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	3206      	adds	r2, #6
 80077b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	3301      	adds	r3, #1
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d9de      	bls.n	8007782 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	f241 132c 	movw	r3, #4396	; 0x112c
 80077d2:	4413      	add	r3, r2
 80077d4:	2203      	movs	r2, #3
 80077d6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68d9      	ldr	r1, [r3, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	f241 1314 	movw	r3, #4372	; 0x1114
 80077e4:	4413      	add	r3, r2
 80077e6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80077f4:	601a      	str	r2, [r3, #0]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	e024      	b.n	800785a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6919      	ldr	r1, [r3, #16]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	440b      	add	r3, r1
 8007820:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2200      	movs	r2, #0
 800782c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2200      	movs	r2, #0
 8007832:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2200      	movs	r2, #0
 8007838:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2200      	movs	r2, #0
 800783e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2200      	movs	r2, #0
 8007844:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3310      	adds	r3, #16
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b03      	cmp	r3, #3
 800785e:	d9d7      	bls.n	8007810 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	f241 1330 	movw	r3, #4400	; 0x1130
 8007886:	4413      	add	r3, r2
 8007888:	2203      	movs	r2, #3
 800788a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6919      	ldr	r1, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	f241 131c 	movw	r3, #4380	; 0x111c
 8007898:	4413      	add	r3, r2
 800789a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	f241 1328 	movw	r3, #4392	; 0x1128
 80078ac:	4413      	add	r3, r2
 80078ae:	6019      	str	r1, [r3, #0]
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80078bc:	b480      	push	{r7}
 80078be:	b08d      	sub	sp, #52	; 0x34
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3318      	adds	r3, #24
 80078cc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80078da:	2300      	movs	r3, #0
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078fe:	d007      	beq.n	8007910 <ETH_Prepare_Tx_Descriptors+0x54>
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	3304      	adds	r3, #4
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8007910:	2302      	movs	r3, #2
 8007912:	e24a      	b.n	8007daa <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d044      	beq.n	80079aa <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	4b72      	ldr	r3, [pc, #456]	; (8007af0 <ETH_Prepare_Tx_Descriptors+0x234>)
 8007926:	4013      	ands	r3, r2
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800792c:	431a      	orrs	r2, r3
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800794c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0308 	and.w	r3, r3, #8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d027      	beq.n	80079aa <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	b29a      	uxth	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	431a      	orrs	r2, r3
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007984:	431a      	orrs	r2, r3
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007998:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80079a8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00e      	beq.n	80079d4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	4b4e      	ldr	r3, [pc, #312]	; (8007af4 <ETH_Prepare_Tx_Descriptors+0x238>)
 80079bc:	4013      	ands	r3, r2
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	6992      	ldr	r2, [r2, #24]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d105      	bne.n	80079ec <ETH_Prepare_Tx_Descriptors+0x130>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d030      	beq.n	8007a4e <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	3301      	adds	r3, #1
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d902      	bls.n	8007a16 <ETH_Prepare_Tx_Descriptors+0x15a>
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	3b04      	subs	r3, #4
 8007a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	3301      	adds	r3, #1
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a32:	d10c      	bne.n	8007a4e <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e1ad      	b.n	8007daa <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	3301      	adds	r3, #1
 8007a52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	4b24      	ldr	r3, [pc, #144]	; (8007af4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8007a64:	4013      	ands	r3, r2
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	6852      	ldr	r2, [r2, #4]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d012      	beq.n	8007a9e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	4b1a      	ldr	r3, [pc, #104]	; (8007af8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8007a8e:	4013      	ands	r3, r2
 8007a90:	69fa      	ldr	r2, [r7, #28]
 8007a92:	6852      	ldr	r2, [r2, #4]
 8007a94:	0412      	lsls	r2, r2, #16
 8007a96:	431a      	orrs	r2, r3
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	609a      	str	r2, [r3, #8]
 8007a9c:	e008      	b.n	8007ab0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8007aaa:	4013      	ands	r3, r2
 8007aac:	6a3a      	ldr	r2, [r7, #32]
 8007aae:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d021      	beq.n	8007b00 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	04db      	lsls	r3, r3, #19
 8007aca:	431a      	orrs	r2, r3
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	4b09      	ldr	r3, [pc, #36]	; (8007afc <ETH_Prepare_Tx_Descriptors+0x240>)
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	69d2      	ldr	r2, [r2, #28]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	60da      	str	r2, [r3, #12]
 8007aee:	e02e      	b.n	8007b4e <ETH_Prepare_Tx_Descriptors+0x292>
 8007af0:	ffff0000 	.word	0xffff0000
 8007af4:	ffffc000 	.word	0xffffc000
 8007af8:	c000ffff 	.word	0xc000ffff
 8007afc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	4b93      	ldr	r3, [pc, #588]	; (8007d54 <ETH_Prepare_Tx_Descriptors+0x498>)
 8007b06:	4013      	ands	r3, r2
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	6852      	ldr	r2, [r2, #4]
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d008      	beq.n	8007b30 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d008      	beq.n	8007b4e <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d008      	beq.n	8007b6c <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	431a      	orrs	r2, r3
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80cb 	beq.w	8007d34 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8007bb0:	e0c0      	b.n	8007d34 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d902      	bls.n	8007bd0 <ETH_Prepare_Tx_Descriptors+0x314>
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	3b04      	subs	r3, #4
 8007bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf2:	d007      	beq.n	8007c04 <ETH_Prepare_Tx_Descriptors+0x348>
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d026      	beq.n	8007c52 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c10:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8007c12:	2300      	movs	r3, #0
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
 8007c16:	e016      	b.n	8007c46 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	3301      	adds	r3, #1
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d902      	bls.n	8007c36 <ETH_Prepare_Tx_Descriptors+0x37a>
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	3b04      	subs	r3, #4
 8007c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	3301      	adds	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
 8007c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d3e4      	bcc.n	8007c18 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e0ab      	b.n	8007daa <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	3301      	adds	r3, #1
 8007c56:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	4b3a      	ldr	r3, [pc, #232]	; (8007d58 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d012      	beq.n	8007ca8 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	4b31      	ldr	r3, [pc, #196]	; (8007d5c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	6852      	ldr	r2, [r2, #4]
 8007c9e:	0412      	lsls	r2, r2, #16
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	609a      	str	r2, [r3, #8]
 8007ca6:	e008      	b.n	8007cba <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	2200      	movs	r2, #0
 8007cac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	6a3a      	ldr	r2, [r7, #32]
 8007cb8:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0310 	and.w	r3, r3, #16
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00f      	beq.n	8007ce6 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	4b25      	ldr	r3, [pc, #148]	; (8007d60 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	69d2      	ldr	r2, [r2, #28]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	60da      	str	r2, [r3, #12]
 8007ce4:	e017      	b.n	8007d16 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <ETH_Prepare_Tx_Descriptors+0x498>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	6852      	ldr	r2, [r2, #4]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	431a      	orrs	r2, r3
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f47f af3a 	bne.w	8007bb2 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00f      	beq.n	8007d64 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	609a      	str	r2, [r3, #8]
 8007d50:	e00e      	b.n	8007d70 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8007d52:	bf00      	nop
 8007d54:	ffff8000 	.word	0xffff8000
 8007d58:	ffffc000 	.word	0xffffc000
 8007d5c:	c000ffff 	.word	0xc000ffff
 8007d60:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d80:	6979      	ldr	r1, [r7, #20]
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	3304      	adds	r3, #4
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d90:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d92:	b672      	cpsid	i
}
 8007d94:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007da4:	b662      	cpsie	i
}
 8007da6:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3734      	adds	r7, #52	; 0x34
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop

08007db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b089      	sub	sp, #36	; 0x24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007dc6:	4b89      	ldr	r3, [pc, #548]	; (8007fec <HAL_GPIO_Init+0x234>)
 8007dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dca:	e194      	b.n	80080f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd8:	4013      	ands	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 8186 	beq.w	80080f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d00b      	beq.n	8007e04 <HAL_GPIO_Init+0x4c>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d007      	beq.n	8007e04 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007df8:	2b11      	cmp	r3, #17
 8007dfa:	d003      	beq.n	8007e04 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2b12      	cmp	r3, #18
 8007e02:	d130      	bne.n	8007e66 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	005b      	lsls	r3, r3, #1
 8007e0e:	2203      	movs	r2, #3
 8007e10:	fa02 f303 	lsl.w	r3, r2, r3
 8007e14:	43db      	mvns	r3, r3
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	43db      	mvns	r3, r3
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	4013      	ands	r3, r2
 8007e48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	091b      	lsrs	r3, r3, #4
 8007e50:	f003 0201 	and.w	r2, r3, #1
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	2203      	movs	r2, #3
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	43db      	mvns	r3, r3
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d003      	beq.n	8007ea6 <HAL_GPIO_Init+0xee>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b12      	cmp	r3, #18
 8007ea4:	d123      	bne.n	8007eee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	08da      	lsrs	r2, r3, #3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3208      	adds	r2, #8
 8007eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	220f      	movs	r2, #15
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	08da      	lsrs	r2, r3, #3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3208      	adds	r2, #8
 8007ee8:	69b9      	ldr	r1, [r7, #24]
 8007eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	2203      	movs	r2, #3
 8007efa:	fa02 f303 	lsl.w	r3, r2, r3
 8007efe:	43db      	mvns	r3, r3
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	4013      	ands	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f003 0203 	and.w	r2, r3, #3
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80e0 	beq.w	80080f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f30:	4b2f      	ldr	r3, [pc, #188]	; (8007ff0 <HAL_GPIO_Init+0x238>)
 8007f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f36:	4a2e      	ldr	r2, [pc, #184]	; (8007ff0 <HAL_GPIO_Init+0x238>)
 8007f38:	f043 0302 	orr.w	r3, r3, #2
 8007f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f40:	4b2b      	ldr	r3, [pc, #172]	; (8007ff0 <HAL_GPIO_Init+0x238>)
 8007f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f4e:	4a29      	ldr	r2, [pc, #164]	; (8007ff4 <HAL_GPIO_Init+0x23c>)
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	089b      	lsrs	r3, r3, #2
 8007f54:	3302      	adds	r3, #2
 8007f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	220f      	movs	r2, #15
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a20      	ldr	r2, [pc, #128]	; (8007ff8 <HAL_GPIO_Init+0x240>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d052      	beq.n	8008020 <HAL_GPIO_Init+0x268>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <HAL_GPIO_Init+0x244>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d031      	beq.n	8007fe6 <HAL_GPIO_Init+0x22e>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a1e      	ldr	r2, [pc, #120]	; (8008000 <HAL_GPIO_Init+0x248>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d02b      	beq.n	8007fe2 <HAL_GPIO_Init+0x22a>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <HAL_GPIO_Init+0x24c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d025      	beq.n	8007fde <HAL_GPIO_Init+0x226>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1c      	ldr	r2, [pc, #112]	; (8008008 <HAL_GPIO_Init+0x250>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01f      	beq.n	8007fda <HAL_GPIO_Init+0x222>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a1b      	ldr	r2, [pc, #108]	; (800800c <HAL_GPIO_Init+0x254>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d019      	beq.n	8007fd6 <HAL_GPIO_Init+0x21e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a1a      	ldr	r2, [pc, #104]	; (8008010 <HAL_GPIO_Init+0x258>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d013      	beq.n	8007fd2 <HAL_GPIO_Init+0x21a>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a19      	ldr	r2, [pc, #100]	; (8008014 <HAL_GPIO_Init+0x25c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00d      	beq.n	8007fce <HAL_GPIO_Init+0x216>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a18      	ldr	r2, [pc, #96]	; (8008018 <HAL_GPIO_Init+0x260>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d007      	beq.n	8007fca <HAL_GPIO_Init+0x212>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a17      	ldr	r2, [pc, #92]	; (800801c <HAL_GPIO_Init+0x264>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d101      	bne.n	8007fc6 <HAL_GPIO_Init+0x20e>
 8007fc2:	2309      	movs	r3, #9
 8007fc4:	e02d      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fc6:	230a      	movs	r3, #10
 8007fc8:	e02b      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fca:	2308      	movs	r3, #8
 8007fcc:	e029      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fce:	2307      	movs	r3, #7
 8007fd0:	e027      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fd2:	2306      	movs	r3, #6
 8007fd4:	e025      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fd6:	2305      	movs	r3, #5
 8007fd8:	e023      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fda:	2304      	movs	r3, #4
 8007fdc:	e021      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e01f      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e01d      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e01b      	b.n	8008022 <HAL_GPIO_Init+0x26a>
 8007fea:	bf00      	nop
 8007fec:	58000080 	.word	0x58000080
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	58000400 	.word	0x58000400
 8007ff8:	58020000 	.word	0x58020000
 8007ffc:	58020400 	.word	0x58020400
 8008000:	58020800 	.word	0x58020800
 8008004:	58020c00 	.word	0x58020c00
 8008008:	58021000 	.word	0x58021000
 800800c:	58021400 	.word	0x58021400
 8008010:	58021800 	.word	0x58021800
 8008014:	58021c00 	.word	0x58021c00
 8008018:	58022000 	.word	0x58022000
 800801c:	58022400 	.word	0x58022400
 8008020:	2300      	movs	r3, #0
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	f002 0203 	and.w	r2, r2, #3
 8008028:	0092      	lsls	r2, r2, #2
 800802a:	4093      	lsls	r3, r2
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	4313      	orrs	r3, r2
 8008030:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008032:	4938      	ldr	r1, [pc, #224]	; (8008114 <HAL_GPIO_Init+0x35c>)
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	089b      	lsrs	r3, r3, #2
 8008038:	3302      	adds	r3, #2
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	43db      	mvns	r3, r3
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	4013      	ands	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	43db      	mvns	r3, r3
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	4013      	ands	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	4313      	orrs	r3, r2
 800808c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	43db      	mvns	r3, r3
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	4013      	ands	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80080ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80080c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	4013      	ands	r3, r2
 80080d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	3301      	adds	r3, #1
 80080f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	f47f ae63 	bne.w	8007dcc <HAL_GPIO_Init+0x14>
  }
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	3724      	adds	r7, #36	; 0x24
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	58000400 	.word	0x58000400

08008118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	807b      	strh	r3, [r7, #2]
 8008124:	4613      	mov	r3, r2
 8008126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008128:	787b      	ldrb	r3, [r7, #1]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800812e:	887a      	ldrh	r2, [r7, #2]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008134:	e003      	b.n	800813e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008136:	887b      	ldrh	r3, [r7, #2]
 8008138:	041a      	lsls	r2, r3, #16
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	619a      	str	r2, [r3, #24]
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800815c:	887a      	ldrh	r2, [r7, #2]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4013      	ands	r3, r2
 8008162:	041a      	lsls	r2, r3, #16
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	43d9      	mvns	r1, r3
 8008168:	887b      	ldrh	r3, [r7, #2]
 800816a:	400b      	ands	r3, r1
 800816c:	431a      	orrs	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	619a      	str	r2, [r3, #24]
}
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008188:	4a08      	ldr	r2, [pc, #32]	; (80081ac <HAL_HSEM_FastTake+0x2c>)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3320      	adds	r3, #32
 800818e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008192:	4a07      	ldr	r2, [pc, #28]	; (80081b0 <HAL_HSEM_FastTake+0x30>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d101      	bne.n	800819c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	e000      	b.n	800819e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
}
 800819e:	4618      	mov	r0, r3
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	58026400 	.word	0x58026400
 80081b0:	80000300 	.word	0x80000300

080081b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80081be:	4906      	ldr	r1, [pc, #24]	; (80081d8 <HAL_HSEM_Release+0x24>)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	58026400 	.word	0x58026400

080081dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80081e4:	4b29      	ldr	r3, [pc, #164]	; (800828c <HAL_PWREx_ConfigSupply+0xb0>)
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	2b06      	cmp	r3, #6
 80081ee:	d00a      	beq.n	8008206 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081f0:	4b26      	ldr	r3, [pc, #152]	; (800828c <HAL_PWREx_ConfigSupply+0xb0>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d001      	beq.n	8008202 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e040      	b.n	8008284 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	e03e      	b.n	8008284 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008206:	4b21      	ldr	r3, [pc, #132]	; (800828c <HAL_PWREx_ConfigSupply+0xb0>)
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800820e:	491f      	ldr	r1, [pc, #124]	; (800828c <HAL_PWREx_ConfigSupply+0xb0>)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4313      	orrs	r3, r2
 8008214:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008216:	f7fa fd1d 	bl	8002c54 <HAL_GetTick>
 800821a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800821c:	e009      	b.n	8008232 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800821e:	f7fa fd19 	bl	8002c54 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800822c:	d901      	bls.n	8008232 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e028      	b.n	8008284 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008232:	4b16      	ldr	r3, [pc, #88]	; (800828c <HAL_PWREx_ConfigSupply+0xb0>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800823a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823e:	d1ee      	bne.n	800821e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b1e      	cmp	r3, #30
 8008244:	d008      	beq.n	8008258 <HAL_PWREx_ConfigSupply+0x7c>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b2e      	cmp	r3, #46	; 0x2e
 800824a:	d005      	beq.n	8008258 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b1d      	cmp	r3, #29
 8008250:	d002      	beq.n	8008258 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b2d      	cmp	r3, #45	; 0x2d
 8008256:	d114      	bne.n	8008282 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008258:	f7fa fcfc 	bl	8002c54 <HAL_GetTick>
 800825c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800825e:	e009      	b.n	8008274 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008260:	f7fa fcf8 	bl	8002c54 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800826e:	d901      	bls.n	8008274 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e007      	b.n	8008284 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008274:	4b05      	ldr	r3, [pc, #20]	; (800828c <HAL_PWREx_ConfigSupply+0xb0>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800827c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008280:	d1ee      	bne.n	8008260 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	58024800 	.word	0x58024800

08008290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08c      	sub	sp, #48	; 0x30
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e3ff      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 8087 	beq.w	80083be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082b0:	4b99      	ldr	r3, [pc, #612]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082ba:	4b97      	ldr	r3, [pc, #604]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	2b10      	cmp	r3, #16
 80082c4:	d007      	beq.n	80082d6 <HAL_RCC_OscConfig+0x46>
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	2b18      	cmp	r3, #24
 80082ca:	d110      	bne.n	80082ee <HAL_RCC_OscConfig+0x5e>
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d10b      	bne.n	80082ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082d6:	4b90      	ldr	r3, [pc, #576]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d06c      	beq.n	80083bc <HAL_RCC_OscConfig+0x12c>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d168      	bne.n	80083bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e3d9      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f6:	d106      	bne.n	8008306 <HAL_RCC_OscConfig+0x76>
 80082f8:	4b87      	ldr	r3, [pc, #540]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a86      	ldr	r2, [pc, #536]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80082fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	e02e      	b.n	8008364 <HAL_RCC_OscConfig+0xd4>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10c      	bne.n	8008328 <HAL_RCC_OscConfig+0x98>
 800830e:	4b82      	ldr	r3, [pc, #520]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a81      	ldr	r2, [pc, #516]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008318:	6013      	str	r3, [r2, #0]
 800831a:	4b7f      	ldr	r3, [pc, #508]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a7e      	ldr	r2, [pc, #504]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008324:	6013      	str	r3, [r2, #0]
 8008326:	e01d      	b.n	8008364 <HAL_RCC_OscConfig+0xd4>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008330:	d10c      	bne.n	800834c <HAL_RCC_OscConfig+0xbc>
 8008332:	4b79      	ldr	r3, [pc, #484]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a78      	ldr	r2, [pc, #480]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	4b76      	ldr	r3, [pc, #472]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a75      	ldr	r2, [pc, #468]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	e00b      	b.n	8008364 <HAL_RCC_OscConfig+0xd4>
 800834c:	4b72      	ldr	r3, [pc, #456]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a71      	ldr	r2, [pc, #452]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	4b6f      	ldr	r3, [pc, #444]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a6e      	ldr	r2, [pc, #440]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 800835e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d013      	beq.n	8008394 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836c:	f7fa fc72 	bl	8002c54 <HAL_GetTick>
 8008370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008374:	f7fa fc6e 	bl	8002c54 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b64      	cmp	r3, #100	; 0x64
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e38d      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008386:	4b64      	ldr	r3, [pc, #400]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f0      	beq.n	8008374 <HAL_RCC_OscConfig+0xe4>
 8008392:	e014      	b.n	80083be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008394:	f7fa fc5e 	bl	8002c54 <HAL_GetTick>
 8008398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800839c:	f7fa fc5a 	bl	8002c54 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b64      	cmp	r3, #100	; 0x64
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e379      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083ae:	4b5a      	ldr	r3, [pc, #360]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1f0      	bne.n	800839c <HAL_RCC_OscConfig+0x10c>
 80083ba:	e000      	b.n	80083be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 0302 	and.w	r3, r3, #2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 80ae 	beq.w	8008528 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083cc:	4b52      	ldr	r3, [pc, #328]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083d6:	4b50      	ldr	r3, [pc, #320]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d007      	beq.n	80083f2 <HAL_RCC_OscConfig+0x162>
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	2b18      	cmp	r3, #24
 80083e6:	d13a      	bne.n	800845e <HAL_RCC_OscConfig+0x1ce>
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	f003 0303 	and.w	r3, r3, #3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d135      	bne.n	800845e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083f2:	4b49      	ldr	r3, [pc, #292]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_RCC_OscConfig+0x17a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e34b      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800840a:	f7fa fc53 	bl	8002cb4 <HAL_GetREVID>
 800840e:	4603      	mov	r3, r0
 8008410:	f241 0203 	movw	r2, #4099	; 0x1003
 8008414:	4293      	cmp	r3, r2
 8008416:	d817      	bhi.n	8008448 <HAL_RCC_OscConfig+0x1b8>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	2b40      	cmp	r3, #64	; 0x40
 800841e:	d108      	bne.n	8008432 <HAL_RCC_OscConfig+0x1a2>
 8008420:	4b3d      	ldr	r3, [pc, #244]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008428:	4a3b      	ldr	r2, [pc, #236]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 800842a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800842e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008430:	e07a      	b.n	8008528 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008432:	4b39      	ldr	r3, [pc, #228]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	031b      	lsls	r3, r3, #12
 8008440:	4935      	ldr	r1, [pc, #212]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008442:	4313      	orrs	r3, r2
 8008444:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008446:	e06f      	b.n	8008528 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008448:	4b33      	ldr	r3, [pc, #204]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	061b      	lsls	r3, r3, #24
 8008456:	4930      	ldr	r1, [pc, #192]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008458:	4313      	orrs	r3, r2
 800845a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800845c:	e064      	b.n	8008528 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d045      	beq.n	80084f2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008466:	4b2c      	ldr	r3, [pc, #176]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f023 0219 	bic.w	r2, r3, #25
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	4929      	ldr	r1, [pc, #164]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008474:	4313      	orrs	r3, r2
 8008476:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008478:	f7fa fbec 	bl	8002c54 <HAL_GetTick>
 800847c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800847e:	e008      	b.n	8008492 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008480:	f7fa fbe8 	bl	8002c54 <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e307      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008492:	4b21      	ldr	r3, [pc, #132]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0f0      	beq.n	8008480 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800849e:	f7fa fc09 	bl	8002cb4 <HAL_GetREVID>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d817      	bhi.n	80084dc <HAL_RCC_OscConfig+0x24c>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d108      	bne.n	80084c6 <HAL_RCC_OscConfig+0x236>
 80084b4:	4b18      	ldr	r3, [pc, #96]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084bc:	4a16      	ldr	r2, [pc, #88]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80084be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084c2:	6053      	str	r3, [r2, #4]
 80084c4:	e030      	b.n	8008528 <HAL_RCC_OscConfig+0x298>
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	031b      	lsls	r3, r3, #12
 80084d4:	4910      	ldr	r1, [pc, #64]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	604b      	str	r3, [r1, #4]
 80084da:	e025      	b.n	8008528 <HAL_RCC_OscConfig+0x298>
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	061b      	lsls	r3, r3, #24
 80084ea:	490b      	ldr	r1, [pc, #44]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80084ec:	4313      	orrs	r3, r2
 80084ee:	604b      	str	r3, [r1, #4]
 80084f0:	e01a      	b.n	8008528 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084f2:	4b09      	ldr	r3, [pc, #36]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a08      	ldr	r2, [pc, #32]	; (8008518 <HAL_RCC_OscConfig+0x288>)
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fe:	f7fa fba9 	bl	8002c54 <HAL_GetTick>
 8008502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008504:	e00a      	b.n	800851c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008506:	f7fa fba5 	bl	8002c54 <HAL_GetTick>
 800850a:	4602      	mov	r2, r0
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d903      	bls.n	800851c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e2c4      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
 8008518:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800851c:	4ba4      	ldr	r3, [pc, #656]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ee      	bne.n	8008506 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0310 	and.w	r3, r3, #16
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80a9 	beq.w	8008688 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008536:	4b9e      	ldr	r3, [pc, #632]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800853e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008540:	4b9b      	ldr	r3, [pc, #620]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b08      	cmp	r3, #8
 800854a:	d007      	beq.n	800855c <HAL_RCC_OscConfig+0x2cc>
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b18      	cmp	r3, #24
 8008550:	d13a      	bne.n	80085c8 <HAL_RCC_OscConfig+0x338>
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	2b01      	cmp	r3, #1
 800855a:	d135      	bne.n	80085c8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800855c:	4b94      	ldr	r3, [pc, #592]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <HAL_RCC_OscConfig+0x2e4>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	2b80      	cmp	r3, #128	; 0x80
 800856e:	d001      	beq.n	8008574 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e296      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008574:	f7fa fb9e 	bl	8002cb4 <HAL_GetREVID>
 8008578:	4603      	mov	r3, r0
 800857a:	f241 0203 	movw	r2, #4099	; 0x1003
 800857e:	4293      	cmp	r3, r2
 8008580:	d817      	bhi.n	80085b2 <HAL_RCC_OscConfig+0x322>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	2b20      	cmp	r3, #32
 8008588:	d108      	bne.n	800859c <HAL_RCC_OscConfig+0x30c>
 800858a:	4b89      	ldr	r3, [pc, #548]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008592:	4a87      	ldr	r2, [pc, #540]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008598:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800859a:	e075      	b.n	8008688 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800859c:	4b84      	ldr	r3, [pc, #528]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	069b      	lsls	r3, r3, #26
 80085aa:	4981      	ldr	r1, [pc, #516]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085b0:	e06a      	b.n	8008688 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085b2:	4b7f      	ldr	r3, [pc, #508]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	061b      	lsls	r3, r3, #24
 80085c0:	497b      	ldr	r1, [pc, #492]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085c6:	e05f      	b.n	8008688 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d042      	beq.n	8008656 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80085d0:	4b77      	ldr	r3, [pc, #476]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a76      	ldr	r2, [pc, #472]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80085d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085dc:	f7fa fb3a 	bl	8002c54 <HAL_GetTick>
 80085e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085e2:	e008      	b.n	80085f6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085e4:	f7fa fb36 	bl	8002c54 <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e255      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085f6:	4b6e      	ldr	r3, [pc, #440]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0f0      	beq.n	80085e4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008602:	f7fa fb57 	bl	8002cb4 <HAL_GetREVID>
 8008606:	4603      	mov	r3, r0
 8008608:	f241 0203 	movw	r2, #4099	; 0x1003
 800860c:	4293      	cmp	r3, r2
 800860e:	d817      	bhi.n	8008640 <HAL_RCC_OscConfig+0x3b0>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	2b20      	cmp	r3, #32
 8008616:	d108      	bne.n	800862a <HAL_RCC_OscConfig+0x39a>
 8008618:	4b65      	ldr	r3, [pc, #404]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008620:	4a63      	ldr	r2, [pc, #396]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008622:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008626:	6053      	str	r3, [r2, #4]
 8008628:	e02e      	b.n	8008688 <HAL_RCC_OscConfig+0x3f8>
 800862a:	4b61      	ldr	r3, [pc, #388]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	069b      	lsls	r3, r3, #26
 8008638:	495d      	ldr	r1, [pc, #372]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800863a:	4313      	orrs	r3, r2
 800863c:	604b      	str	r3, [r1, #4]
 800863e:	e023      	b.n	8008688 <HAL_RCC_OscConfig+0x3f8>
 8008640:	4b5b      	ldr	r3, [pc, #364]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	061b      	lsls	r3, r3, #24
 800864e:	4958      	ldr	r1, [pc, #352]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008650:	4313      	orrs	r3, r2
 8008652:	60cb      	str	r3, [r1, #12]
 8008654:	e018      	b.n	8008688 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008656:	4b56      	ldr	r3, [pc, #344]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a55      	ldr	r2, [pc, #340]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800865c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008662:	f7fa faf7 	bl	8002c54 <HAL_GetTick>
 8008666:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008668:	e008      	b.n	800867c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800866a:	f7fa faf3 	bl	8002c54 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e212      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800867c:	4b4c      	ldr	r3, [pc, #304]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f0      	bne.n	800866a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d036      	beq.n	8008702 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d019      	beq.n	80086d0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800869c:	4b44      	ldr	r3, [pc, #272]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800869e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a0:	4a43      	ldr	r2, [pc, #268]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80086a2:	f043 0301 	orr.w	r3, r3, #1
 80086a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a8:	f7fa fad4 	bl	8002c54 <HAL_GetTick>
 80086ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086b0:	f7fa fad0 	bl	8002c54 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e1ef      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086c2:	4b3b      	ldr	r3, [pc, #236]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80086c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0f0      	beq.n	80086b0 <HAL_RCC_OscConfig+0x420>
 80086ce:	e018      	b.n	8008702 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086d0:	4b37      	ldr	r3, [pc, #220]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80086d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d4:	4a36      	ldr	r2, [pc, #216]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80086d6:	f023 0301 	bic.w	r3, r3, #1
 80086da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086dc:	f7fa faba 	bl	8002c54 <HAL_GetTick>
 80086e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086e4:	f7fa fab6 	bl	8002c54 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e1d5      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086f6:	4b2e      	ldr	r3, [pc, #184]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 80086f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f0      	bne.n	80086e4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b00      	cmp	r3, #0
 800870c:	d036      	beq.n	800877c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d019      	beq.n	800874a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008716:	4b26      	ldr	r3, [pc, #152]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a25      	ldr	r2, [pc, #148]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800871c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008720:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008722:	f7fa fa97 	bl	8002c54 <HAL_GetTick>
 8008726:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800872a:	f7fa fa93 	bl	8002c54 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e1b2      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0f0      	beq.n	800872a <HAL_RCC_OscConfig+0x49a>
 8008748:	e018      	b.n	800877c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800874a:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a18      	ldr	r2, [pc, #96]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008754:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008756:	f7fa fa7d 	bl	8002c54 <HAL_GetTick>
 800875a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800875c:	e008      	b.n	8008770 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800875e:	f7fa fa79 	bl	8002c54 <HAL_GetTick>
 8008762:	4602      	mov	r2, r0
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	2b02      	cmp	r3, #2
 800876a:	d901      	bls.n	8008770 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e198      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008770:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <HAL_RCC_OscConfig+0x520>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1f0      	bne.n	800875e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8085 	beq.w	8008894 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800878a:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <HAL_RCC_OscConfig+0x524>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a09      	ldr	r2, [pc, #36]	; (80087b4 <HAL_RCC_OscConfig+0x524>)
 8008790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008794:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008796:	f7fa fa5d 	bl	8002c54 <HAL_GetTick>
 800879a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800879c:	e00c      	b.n	80087b8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800879e:	f7fa fa59 	bl	8002c54 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b64      	cmp	r3, #100	; 0x64
 80087aa:	d905      	bls.n	80087b8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e178      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
 80087b0:	58024400 	.word	0x58024400
 80087b4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087b8:	4b96      	ldr	r3, [pc, #600]	; (8008a14 <HAL_RCC_OscConfig+0x784>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0ec      	beq.n	800879e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d106      	bne.n	80087da <HAL_RCC_OscConfig+0x54a>
 80087cc:	4b92      	ldr	r3, [pc, #584]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d0:	4a91      	ldr	r2, [pc, #580]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80087d2:	f043 0301 	orr.w	r3, r3, #1
 80087d6:	6713      	str	r3, [r2, #112]	; 0x70
 80087d8:	e02d      	b.n	8008836 <HAL_RCC_OscConfig+0x5a6>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10c      	bne.n	80087fc <HAL_RCC_OscConfig+0x56c>
 80087e2:	4b8d      	ldr	r3, [pc, #564]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80087e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e6:	4a8c      	ldr	r2, [pc, #560]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80087e8:	f023 0301 	bic.w	r3, r3, #1
 80087ec:	6713      	str	r3, [r2, #112]	; 0x70
 80087ee:	4b8a      	ldr	r3, [pc, #552]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	4a89      	ldr	r2, [pc, #548]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80087f4:	f023 0304 	bic.w	r3, r3, #4
 80087f8:	6713      	str	r3, [r2, #112]	; 0x70
 80087fa:	e01c      	b.n	8008836 <HAL_RCC_OscConfig+0x5a6>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	2b05      	cmp	r3, #5
 8008802:	d10c      	bne.n	800881e <HAL_RCC_OscConfig+0x58e>
 8008804:	4b84      	ldr	r3, [pc, #528]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008808:	4a83      	ldr	r2, [pc, #524]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800880a:	f043 0304 	orr.w	r3, r3, #4
 800880e:	6713      	str	r3, [r2, #112]	; 0x70
 8008810:	4b81      	ldr	r3, [pc, #516]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008814:	4a80      	ldr	r2, [pc, #512]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008816:	f043 0301 	orr.w	r3, r3, #1
 800881a:	6713      	str	r3, [r2, #112]	; 0x70
 800881c:	e00b      	b.n	8008836 <HAL_RCC_OscConfig+0x5a6>
 800881e:	4b7e      	ldr	r3, [pc, #504]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	4a7d      	ldr	r2, [pc, #500]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008824:	f023 0301 	bic.w	r3, r3, #1
 8008828:	6713      	str	r3, [r2, #112]	; 0x70
 800882a:	4b7b      	ldr	r3, [pc, #492]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800882c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882e:	4a7a      	ldr	r2, [pc, #488]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008830:	f023 0304 	bic.w	r3, r3, #4
 8008834:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d015      	beq.n	800886a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800883e:	f7fa fa09 	bl	8002c54 <HAL_GetTick>
 8008842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008844:	e00a      	b.n	800885c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008846:	f7fa fa05 	bl	8002c54 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	f241 3288 	movw	r2, #5000	; 0x1388
 8008854:	4293      	cmp	r3, r2
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e122      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800885c:	4b6e      	ldr	r3, [pc, #440]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0ee      	beq.n	8008846 <HAL_RCC_OscConfig+0x5b6>
 8008868:	e014      	b.n	8008894 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800886a:	f7fa f9f3 	bl	8002c54 <HAL_GetTick>
 800886e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008870:	e00a      	b.n	8008888 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008872:	f7fa f9ef 	bl	8002c54 <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008880:	4293      	cmp	r3, r2
 8008882:	d901      	bls.n	8008888 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e10c      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008888:	4b63      	ldr	r3, [pc, #396]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800888a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1ee      	bne.n	8008872 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 8101 	beq.w	8008aa0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800889e:	4b5e      	ldr	r3, [pc, #376]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088a6:	2b18      	cmp	r3, #24
 80088a8:	f000 80bc 	beq.w	8008a24 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	f040 8095 	bne.w	80089e0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088b6:	4b58      	ldr	r3, [pc, #352]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a57      	ldr	r2, [pc, #348]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80088bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c2:	f7fa f9c7 	bl	8002c54 <HAL_GetTick>
 80088c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088c8:	e008      	b.n	80088dc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088ca:	f7fa f9c3 	bl	8002c54 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d901      	bls.n	80088dc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e0e2      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088dc:	4b4e      	ldr	r3, [pc, #312]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1f0      	bne.n	80088ca <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088e8:	4b4b      	ldr	r3, [pc, #300]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80088ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ec:	4b4b      	ldr	r3, [pc, #300]	; (8008a1c <HAL_RCC_OscConfig+0x78c>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80088f8:	0112      	lsls	r2, r2, #4
 80088fa:	430a      	orrs	r2, r1
 80088fc:	4946      	ldr	r1, [pc, #280]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	628b      	str	r3, [r1, #40]	; 0x28
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	3b01      	subs	r3, #1
 8008908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008910:	3b01      	subs	r3, #1
 8008912:	025b      	lsls	r3, r3, #9
 8008914:	b29b      	uxth	r3, r3
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	3b01      	subs	r3, #1
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800892a:	3b01      	subs	r3, #1
 800892c:	061b      	lsls	r3, r3, #24
 800892e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008932:	4939      	ldr	r1, [pc, #228]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008934:	4313      	orrs	r3, r2
 8008936:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008938:	4b37      	ldr	r3, [pc, #220]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	4a36      	ldr	r2, [pc, #216]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800893e:	f023 0301 	bic.w	r3, r3, #1
 8008942:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008944:	4b34      	ldr	r3, [pc, #208]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008948:	4b35      	ldr	r3, [pc, #212]	; (8008a20 <HAL_RCC_OscConfig+0x790>)
 800894a:	4013      	ands	r3, r2
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008950:	00d2      	lsls	r2, r2, #3
 8008952:	4931      	ldr	r1, [pc, #196]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008954:	4313      	orrs	r3, r2
 8008956:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008958:	4b2f      	ldr	r3, [pc, #188]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	f023 020c 	bic.w	r2, r3, #12
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008964:	492c      	ldr	r1, [pc, #176]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008966:	4313      	orrs	r3, r2
 8008968:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800896a:	4b2b      	ldr	r3, [pc, #172]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	f023 0202 	bic.w	r2, r3, #2
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	4928      	ldr	r1, [pc, #160]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008978:	4313      	orrs	r3, r2
 800897a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800897c:	4b26      	ldr	r3, [pc, #152]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008988:	4b23      	ldr	r3, [pc, #140]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800898a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898c:	4a22      	ldr	r2, [pc, #136]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800898e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008994:	4b20      	ldr	r3, [pc, #128]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	4a1f      	ldr	r2, [pc, #124]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 800899a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800899e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80089a0:	4b1d      	ldr	r3, [pc, #116]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4a1c      	ldr	r2, [pc, #112]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089ac:	4b1a      	ldr	r3, [pc, #104]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a19      	ldr	r2, [pc, #100]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80089b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b8:	f7fa f94c 	bl	8002c54 <HAL_GetTick>
 80089bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089c0:	f7fa f948 	bl	8002c54 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e067      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089d2:	4b11      	ldr	r3, [pc, #68]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0f0      	beq.n	80089c0 <HAL_RCC_OscConfig+0x730>
 80089de:	e05f      	b.n	8008aa0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089e0:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 80089e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ec:	f7fa f932 	bl	8002c54 <HAL_GetTick>
 80089f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089f2:	e008      	b.n	8008a06 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089f4:	f7fa f92e 	bl	8002c54 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e04d      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a06:	4b04      	ldr	r3, [pc, #16]	; (8008a18 <HAL_RCC_OscConfig+0x788>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1f0      	bne.n	80089f4 <HAL_RCC_OscConfig+0x764>
 8008a12:	e045      	b.n	8008aa0 <HAL_RCC_OscConfig+0x810>
 8008a14:	58024800 	.word	0x58024800
 8008a18:	58024400 	.word	0x58024400
 8008a1c:	fffffc0c 	.word	0xfffffc0c
 8008a20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a24:	4b21      	ldr	r3, [pc, #132]	; (8008aac <HAL_RCC_OscConfig+0x81c>)
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a2a:	4b20      	ldr	r3, [pc, #128]	; (8008aac <HAL_RCC_OscConfig+0x81c>)
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d031      	beq.n	8008a9c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f003 0203 	and.w	r2, r3, #3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d12a      	bne.n	8008a9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	091b      	lsrs	r3, r3, #4
 8008a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d122      	bne.n	8008a9c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a60:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d11a      	bne.n	8008a9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	0a5b      	lsrs	r3, r3, #9
 8008a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a72:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d111      	bne.n	8008a9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	0c1b      	lsrs	r3, r3, #16
 8008a7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d108      	bne.n	8008a9c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	0e1b      	lsrs	r3, r3, #24
 8008a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a96:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d001      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e000      	b.n	8008aa2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3730      	adds	r7, #48	; 0x30
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	58024400 	.word	0x58024400

08008ab0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e19c      	b.n	8008dfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ac4:	4b8a      	ldr	r3, [pc, #552]	; (8008cf0 <HAL_RCC_ClockConfig+0x240>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d910      	bls.n	8008af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ad2:	4b87      	ldr	r3, [pc, #540]	; (8008cf0 <HAL_RCC_ClockConfig+0x240>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f023 020f 	bic.w	r2, r3, #15
 8008ada:	4985      	ldr	r1, [pc, #532]	; (8008cf0 <HAL_RCC_ClockConfig+0x240>)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ae2:	4b83      	ldr	r3, [pc, #524]	; (8008cf0 <HAL_RCC_ClockConfig+0x240>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d001      	beq.n	8008af4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e184      	b.n	8008dfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d010      	beq.n	8008b22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691a      	ldr	r2, [r3, #16]
 8008b04:	4b7b      	ldr	r3, [pc, #492]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d908      	bls.n	8008b22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b10:	4b78      	ldr	r3, [pc, #480]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	4975      	ldr	r1, [pc, #468]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d010      	beq.n	8008b50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695a      	ldr	r2, [r3, #20]
 8008b32:	4b70      	ldr	r3, [pc, #448]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d908      	bls.n	8008b50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b3e:	4b6d      	ldr	r3, [pc, #436]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	496a      	ldr	r1, [pc, #424]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0310 	and.w	r3, r3, #16
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d010      	beq.n	8008b7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699a      	ldr	r2, [r3, #24]
 8008b60:	4b64      	ldr	r3, [pc, #400]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d908      	bls.n	8008b7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b6c:	4b61      	ldr	r3, [pc, #388]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	495e      	ldr	r1, [pc, #376]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d010      	beq.n	8008bac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69da      	ldr	r2, [r3, #28]
 8008b8e:	4b59      	ldr	r3, [pc, #356]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d908      	bls.n	8008bac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b9a:	4b56      	ldr	r3, [pc, #344]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	4953      	ldr	r1, [pc, #332]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d010      	beq.n	8008bda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	4b4d      	ldr	r3, [pc, #308]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d908      	bls.n	8008bda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bc8:	4b4a      	ldr	r3, [pc, #296]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	f023 020f 	bic.w	r2, r3, #15
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	4947      	ldr	r1, [pc, #284]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d055      	beq.n	8008c92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008be6:	4b43      	ldr	r3, [pc, #268]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	4940      	ldr	r1, [pc, #256]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d107      	bne.n	8008c10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c00:	4b3c      	ldr	r3, [pc, #240]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d121      	bne.n	8008c50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e0f6      	b.n	8008dfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b03      	cmp	r3, #3
 8008c16:	d107      	bne.n	8008c28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c18:	4b36      	ldr	r3, [pc, #216]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d115      	bne.n	8008c50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e0ea      	b.n	8008dfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d107      	bne.n	8008c40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c30:	4b30      	ldr	r3, [pc, #192]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d109      	bne.n	8008c50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0de      	b.n	8008dfe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c40:	4b2c      	ldr	r3, [pc, #176]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e0d6      	b.n	8008dfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c50:	4b28      	ldr	r3, [pc, #160]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	f023 0207 	bic.w	r2, r3, #7
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	4925      	ldr	r1, [pc, #148]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c62:	f7f9 fff7 	bl	8002c54 <HAL_GetTick>
 8008c66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c68:	e00a      	b.n	8008c80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c6a:	f7f9 fff3 	bl	8002c54 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d901      	bls.n	8008c80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	e0be      	b.n	8008dfe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c80:	4b1c      	ldr	r3, [pc, #112]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d1eb      	bne.n	8008c6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d010      	beq.n	8008cc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	4b14      	ldr	r3, [pc, #80]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d208      	bcs.n	8008cc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cae:	4b11      	ldr	r3, [pc, #68]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	f023 020f 	bic.w	r2, r3, #15
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	490e      	ldr	r1, [pc, #56]	; (8008cf4 <HAL_RCC_ClockConfig+0x244>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <HAL_RCC_ClockConfig+0x240>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d214      	bcs.n	8008cf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <HAL_RCC_ClockConfig+0x240>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f023 020f 	bic.w	r2, r3, #15
 8008cd6:	4906      	ldr	r1, [pc, #24]	; (8008cf0 <HAL_RCC_ClockConfig+0x240>)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cde:	4b04      	ldr	r3, [pc, #16]	; (8008cf0 <HAL_RCC_ClockConfig+0x240>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 030f 	and.w	r3, r3, #15
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d005      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e086      	b.n	8008dfe <HAL_RCC_ClockConfig+0x34e>
 8008cf0:	52002000 	.word	0x52002000
 8008cf4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d010      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691a      	ldr	r2, [r3, #16]
 8008d08:	4b3f      	ldr	r3, [pc, #252]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d208      	bcs.n	8008d26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d14:	4b3c      	ldr	r3, [pc, #240]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	4939      	ldr	r1, [pc, #228]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d010      	beq.n	8008d54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	4b34      	ldr	r3, [pc, #208]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d208      	bcs.n	8008d54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d42:	4b31      	ldr	r3, [pc, #196]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	492e      	ldr	r1, [pc, #184]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0310 	and.w	r3, r3, #16
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d010      	beq.n	8008d82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	4b28      	ldr	r3, [pc, #160]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d208      	bcs.n	8008d82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d70:	4b25      	ldr	r3, [pc, #148]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	4922      	ldr	r1, [pc, #136]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d010      	beq.n	8008db0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69da      	ldr	r2, [r3, #28]
 8008d92:	4b1d      	ldr	r3, [pc, #116]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d208      	bcs.n	8008db0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d9e:	4b1a      	ldr	r3, [pc, #104]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	4917      	ldr	r1, [pc, #92]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008db0:	f000 f834 	bl	8008e1c <HAL_RCC_GetSysClockFreq>
 8008db4:	4602      	mov	r2, r0
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	0a1b      	lsrs	r3, r3, #8
 8008dbc:	f003 030f 	and.w	r3, r3, #15
 8008dc0:	4912      	ldr	r1, [pc, #72]	; (8008e0c <HAL_RCC_ClockConfig+0x35c>)
 8008dc2:	5ccb      	ldrb	r3, [r1, r3]
 8008dc4:	f003 031f 	and.w	r3, r3, #31
 8008dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008dce:	4b0e      	ldr	r3, [pc, #56]	; (8008e08 <HAL_RCC_ClockConfig+0x358>)
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	f003 030f 	and.w	r3, r3, #15
 8008dd6:	4a0d      	ldr	r2, [pc, #52]	; (8008e0c <HAL_RCC_ClockConfig+0x35c>)
 8008dd8:	5cd3      	ldrb	r3, [r2, r3]
 8008dda:	f003 031f 	and.w	r3, r3, #31
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
 8008de4:	4a0a      	ldr	r2, [pc, #40]	; (8008e10 <HAL_RCC_ClockConfig+0x360>)
 8008de6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008de8:	4a0a      	ldr	r2, [pc, #40]	; (8008e14 <HAL_RCC_ClockConfig+0x364>)
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008dee:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <HAL_RCC_ClockConfig+0x368>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f9 fee4 	bl	8002bc0 <HAL_InitTick>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	08021a30 	.word	0x08021a30
 8008e10:	24000404 	.word	0x24000404
 8008e14:	24000400 	.word	0x24000400
 8008e18:	24000408 	.word	0x24000408

08008e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b089      	sub	sp, #36	; 0x24
 8008e20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e22:	4bb3      	ldr	r3, [pc, #716]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e2a:	2b18      	cmp	r3, #24
 8008e2c:	f200 8155 	bhi.w	80090da <HAL_RCC_GetSysClockFreq+0x2be>
 8008e30:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e9d 	.word	0x08008e9d
 8008e3c:	080090db 	.word	0x080090db
 8008e40:	080090db 	.word	0x080090db
 8008e44:	080090db 	.word	0x080090db
 8008e48:	080090db 	.word	0x080090db
 8008e4c:	080090db 	.word	0x080090db
 8008e50:	080090db 	.word	0x080090db
 8008e54:	080090db 	.word	0x080090db
 8008e58:	08008ec3 	.word	0x08008ec3
 8008e5c:	080090db 	.word	0x080090db
 8008e60:	080090db 	.word	0x080090db
 8008e64:	080090db 	.word	0x080090db
 8008e68:	080090db 	.word	0x080090db
 8008e6c:	080090db 	.word	0x080090db
 8008e70:	080090db 	.word	0x080090db
 8008e74:	080090db 	.word	0x080090db
 8008e78:	08008ec9 	.word	0x08008ec9
 8008e7c:	080090db 	.word	0x080090db
 8008e80:	080090db 	.word	0x080090db
 8008e84:	080090db 	.word	0x080090db
 8008e88:	080090db 	.word	0x080090db
 8008e8c:	080090db 	.word	0x080090db
 8008e90:	080090db 	.word	0x080090db
 8008e94:	080090db 	.word	0x080090db
 8008e98:	08008ecf 	.word	0x08008ecf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e9c:	4b94      	ldr	r3, [pc, #592]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d009      	beq.n	8008ebc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ea8:	4b91      	ldr	r3, [pc, #580]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	08db      	lsrs	r3, r3, #3
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	4a90      	ldr	r2, [pc, #576]	; (80090f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008eba:	e111      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ebc:	4b8d      	ldr	r3, [pc, #564]	; (80090f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ebe:	61bb      	str	r3, [r7, #24]
    break;
 8008ec0:	e10e      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008ec2:	4b8d      	ldr	r3, [pc, #564]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ec4:	61bb      	str	r3, [r7, #24]
    break;
 8008ec6:	e10b      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008ec8:	4b8c      	ldr	r3, [pc, #560]	; (80090fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008eca:	61bb      	str	r3, [r7, #24]
    break;
 8008ecc:	e108      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ece:	4b88      	ldr	r3, [pc, #544]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ed8:	4b85      	ldr	r3, [pc, #532]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008edc:	091b      	lsrs	r3, r3, #4
 8008ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ee2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ee4:	4b82      	ldr	r3, [pc, #520]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008eee:	4b80      	ldr	r3, [pc, #512]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	08db      	lsrs	r3, r3, #3
 8008ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	fb02 f303 	mul.w	r3, r2, r3
 8008efe:	ee07 3a90 	vmov	s15, r3
 8008f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 80e1 	beq.w	80090d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	f000 8083 	beq.w	8009020 <HAL_RCC_GetSysClockFreq+0x204>
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	f200 80a1 	bhi.w	8009064 <HAL_RCC_GetSysClockFreq+0x248>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <HAL_RCC_GetSysClockFreq+0x114>
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d056      	beq.n	8008fdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f2e:	e099      	b.n	8009064 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f30:	4b6f      	ldr	r3, [pc, #444]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d02d      	beq.n	8008f98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f3c:	4b6c      	ldr	r3, [pc, #432]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	08db      	lsrs	r3, r3, #3
 8008f42:	f003 0303 	and.w	r3, r3, #3
 8008f46:	4a6b      	ldr	r2, [pc, #428]	; (80090f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f48:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	ee07 3a90 	vmov	s15, r3
 8008f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f66:	4b62      	ldr	r3, [pc, #392]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009100 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008f96:	e087      	b.n	80090a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009104 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008faa:	4b51      	ldr	r3, [pc, #324]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb2:	ee07 3a90 	vmov	s15, r3
 8008fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009100 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fda:	e065      	b.n	80090a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	ee07 3a90 	vmov	s15, r3
 8008fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fee:	4b40      	ldr	r3, [pc, #256]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009002:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009100 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800900e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800901e:	e043      	b.n	80090a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800910c <HAL_RCC_GetSysClockFreq+0x2f0>
 800902e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009032:	4b2f      	ldr	r3, [pc, #188]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009042:	ed97 6a02 	vldr	s12, [r7, #8]
 8009046:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009100 <HAL_RCC_GetSysClockFreq+0x2e4>
 800904a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800904e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009062:	e021      	b.n	80090a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009108 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009076:	4b1e      	ldr	r3, [pc, #120]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009086:	ed97 6a02 	vldr	s12, [r7, #8]
 800908a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009100 <HAL_RCC_GetSysClockFreq+0x2e4>
 800908e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800909a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80090a8:	4b11      	ldr	r3, [pc, #68]	; (80090f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	0a5b      	lsrs	r3, r3, #9
 80090ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b2:	3301      	adds	r3, #1
 80090b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	ee07 3a90 	vmov	s15, r3
 80090bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090cc:	ee17 3a90 	vmov	r3, s15
 80090d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80090d2:	e005      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	61bb      	str	r3, [r7, #24]
    break;
 80090d8:	e002      	b.n	80090e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80090da:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090dc:	61bb      	str	r3, [r7, #24]
    break;
 80090de:	bf00      	nop
  }

  return sysclockfreq;
 80090e0:	69bb      	ldr	r3, [r7, #24]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3724      	adds	r7, #36	; 0x24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	58024400 	.word	0x58024400
 80090f4:	03d09000 	.word	0x03d09000
 80090f8:	003d0900 	.word	0x003d0900
 80090fc:	017d7840 	.word	0x017d7840
 8009100:	46000000 	.word	0x46000000
 8009104:	4c742400 	.word	0x4c742400
 8009108:	4a742400 	.word	0x4a742400
 800910c:	4bbebc20 	.word	0x4bbebc20

08009110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009116:	f7ff fe81 	bl	8008e1c <HAL_RCC_GetSysClockFreq>
 800911a:	4602      	mov	r2, r0
 800911c:	4b10      	ldr	r3, [pc, #64]	; (8009160 <HAL_RCC_GetHCLKFreq+0x50>)
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	0a1b      	lsrs	r3, r3, #8
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	490f      	ldr	r1, [pc, #60]	; (8009164 <HAL_RCC_GetHCLKFreq+0x54>)
 8009128:	5ccb      	ldrb	r3, [r1, r3]
 800912a:	f003 031f 	and.w	r3, r3, #31
 800912e:	fa22 f303 	lsr.w	r3, r2, r3
 8009132:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009134:	4b0a      	ldr	r3, [pc, #40]	; (8009160 <HAL_RCC_GetHCLKFreq+0x50>)
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f003 030f 	and.w	r3, r3, #15
 800913c:	4a09      	ldr	r2, [pc, #36]	; (8009164 <HAL_RCC_GetHCLKFreq+0x54>)
 800913e:	5cd3      	ldrb	r3, [r2, r3]
 8009140:	f003 031f 	and.w	r3, r3, #31
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	fa22 f303 	lsr.w	r3, r2, r3
 800914a:	4a07      	ldr	r2, [pc, #28]	; (8009168 <HAL_RCC_GetHCLKFreq+0x58>)
 800914c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800914e:	4a07      	ldr	r2, [pc, #28]	; (800916c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009154:	4b04      	ldr	r3, [pc, #16]	; (8009168 <HAL_RCC_GetHCLKFreq+0x58>)
 8009156:	681b      	ldr	r3, [r3, #0]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	58024400 	.word	0x58024400
 8009164:	08021a30 	.word	0x08021a30
 8009168:	24000404 	.word	0x24000404
 800916c:	24000400 	.word	0x24000400

08009170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009174:	f7ff ffcc 	bl	8009110 <HAL_RCC_GetHCLKFreq>
 8009178:	4602      	mov	r2, r0
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	091b      	lsrs	r3, r3, #4
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	4904      	ldr	r1, [pc, #16]	; (8009198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009186:	5ccb      	ldrb	r3, [r1, r3]
 8009188:	f003 031f 	and.w	r3, r3, #31
 800918c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009190:	4618      	mov	r0, r3
 8009192:	bd80      	pop	{r7, pc}
 8009194:	58024400 	.word	0x58024400
 8009198:	08021a30 	.word	0x08021a30

0800919c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80091a0:	f7ff ffb6 	bl	8009110 <HAL_RCC_GetHCLKFreq>
 80091a4:	4602      	mov	r2, r0
 80091a6:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	0a1b      	lsrs	r3, r3, #8
 80091ac:	f003 0307 	and.w	r3, r3, #7
 80091b0:	4904      	ldr	r1, [pc, #16]	; (80091c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80091b2:	5ccb      	ldrb	r3, [r1, r3]
 80091b4:	f003 031f 	and.w	r3, r3, #31
 80091b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80091bc:	4618      	mov	r0, r3
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	58024400 	.word	0x58024400
 80091c4:	08021a30 	.word	0x08021a30

080091c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091d0:	2300      	movs	r3, #0
 80091d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091d4:	2300      	movs	r3, #0
 80091d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d03f      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091ec:	d02a      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80091ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091f2:	d824      	bhi.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091f8:	d018      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091fe:	d81e      	bhi.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009208:	d007      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800920a:	e018      	b.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800920c:	4bab      	ldr	r3, [pc, #684]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	4aaa      	ldr	r2, [pc, #680]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009218:	e015      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3304      	adds	r3, #4
 800921e:	2102      	movs	r1, #2
 8009220:	4618      	mov	r0, r3
 8009222:	f001 fff3 	bl	800b20c <RCCEx_PLL2_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800922a:	e00c      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3324      	adds	r3, #36	; 0x24
 8009230:	2102      	movs	r1, #2
 8009232:	4618      	mov	r0, r3
 8009234:	f002 f89c 	bl	800b370 <RCCEx_PLL3_Config>
 8009238:	4603      	mov	r3, r0
 800923a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800923c:	e003      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	75fb      	strb	r3, [r7, #23]
      break;
 8009242:	e000      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800924c:	4b9b      	ldr	r3, [pc, #620]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800924e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009258:	4998      	ldr	r1, [pc, #608]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800925a:	4313      	orrs	r3, r2
 800925c:	650b      	str	r3, [r1, #80]	; 0x50
 800925e:	e001      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926c:	2b00      	cmp	r3, #0
 800926e:	d03d      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009274:	2b04      	cmp	r3, #4
 8009276:	d826      	bhi.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009278:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800927a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927e:	bf00      	nop
 8009280:	08009295 	.word	0x08009295
 8009284:	080092a3 	.word	0x080092a3
 8009288:	080092b5 	.word	0x080092b5
 800928c:	080092cd 	.word	0x080092cd
 8009290:	080092cd 	.word	0x080092cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009294:	4b89      	ldr	r3, [pc, #548]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	4a88      	ldr	r2, [pc, #544]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800929a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800929e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092a0:	e015      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3304      	adds	r3, #4
 80092a6:	2100      	movs	r1, #0
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 ffaf 	bl	800b20c <RCCEx_PLL2_Config>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092b2:	e00c      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3324      	adds	r3, #36	; 0x24
 80092b8:	2100      	movs	r1, #0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f002 f858 	bl	800b370 <RCCEx_PLL3_Config>
 80092c0:	4603      	mov	r3, r0
 80092c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092c4:	e003      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	75fb      	strb	r3, [r7, #23]
      break;
 80092ca:	e000      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80092cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d109      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092d4:	4b79      	ldr	r3, [pc, #484]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d8:	f023 0207 	bic.w	r2, r3, #7
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e0:	4976      	ldr	r1, [pc, #472]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092e2:	4313      	orrs	r3, r2
 80092e4:	650b      	str	r3, [r1, #80]	; 0x50
 80092e6:	e001      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d042      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009300:	d02b      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009306:	d825      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009308:	2bc0      	cmp	r3, #192	; 0xc0
 800930a:	d028      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800930c:	2bc0      	cmp	r3, #192	; 0xc0
 800930e:	d821      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009310:	2b80      	cmp	r3, #128	; 0x80
 8009312:	d016      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009314:	2b80      	cmp	r3, #128	; 0x80
 8009316:	d81d      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800931c:	2b40      	cmp	r3, #64	; 0x40
 800931e:	d007      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009320:	e018      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009322:	4b66      	ldr	r3, [pc, #408]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	4a65      	ldr	r2, [pc, #404]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800932c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800932e:	e017      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	3304      	adds	r3, #4
 8009334:	2100      	movs	r1, #0
 8009336:	4618      	mov	r0, r3
 8009338:	f001 ff68 	bl	800b20c <RCCEx_PLL2_Config>
 800933c:	4603      	mov	r3, r0
 800933e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009340:	e00e      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	3324      	adds	r3, #36	; 0x24
 8009346:	2100      	movs	r1, #0
 8009348:	4618      	mov	r0, r3
 800934a:	f002 f811 	bl	800b370 <RCCEx_PLL3_Config>
 800934e:	4603      	mov	r3, r0
 8009350:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009352:	e005      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	75fb      	strb	r3, [r7, #23]
      break;
 8009358:	e002      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800935a:	bf00      	nop
 800935c:	e000      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800935e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d109      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009366:	4b55      	ldr	r3, [pc, #340]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009372:	4952      	ldr	r1, [pc, #328]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009374:	4313      	orrs	r3, r2
 8009376:	650b      	str	r3, [r1, #80]	; 0x50
 8009378:	e001      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009386:	2b00      	cmp	r3, #0
 8009388:	d049      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009390:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009394:	d030      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800939a:	d82a      	bhi.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800939c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093a0:	d02c      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 80093a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093a6:	d824      	bhi.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80093a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093ac:	d018      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80093ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093b2:	d81e      	bhi.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d003      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80093b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093bc:	d007      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 80093be:	e018      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c0:	4b3e      	ldr	r3, [pc, #248]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	4a3d      	ldr	r2, [pc, #244]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093cc:	e017      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3304      	adds	r3, #4
 80093d2:	2100      	movs	r1, #0
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 ff19 	bl	800b20c <RCCEx_PLL2_Config>
 80093da:	4603      	mov	r3, r0
 80093dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80093de:	e00e      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3324      	adds	r3, #36	; 0x24
 80093e4:	2100      	movs	r1, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 ffc2 	bl	800b370 <RCCEx_PLL3_Config>
 80093ec:	4603      	mov	r3, r0
 80093ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093f0:	e005      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	75fb      	strb	r3, [r7, #23]
      break;
 80093f6:	e002      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80093f8:	bf00      	nop
 80093fa:	e000      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80093fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10a      	bne.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009404:	4b2d      	ldr	r3, [pc, #180]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009408:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009412:	492a      	ldr	r1, [pc, #168]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009414:	4313      	orrs	r3, r2
 8009416:	658b      	str	r3, [r1, #88]	; 0x58
 8009418:	e001      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009426:	2b00      	cmp	r3, #0
 8009428:	d04c      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009434:	d030      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800943a:	d82a      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800943c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009440:	d02c      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009442:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009446:	d824      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800944c:	d018      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800944e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009452:	d81e      	bhi.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d003      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800945c:	d007      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800945e:	e018      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009460:	4b16      	ldr	r3, [pc, #88]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	4a15      	ldr	r2, [pc, #84]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800946a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800946c:	e017      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3304      	adds	r3, #4
 8009472:	2100      	movs	r1, #0
 8009474:	4618      	mov	r0, r3
 8009476:	f001 fec9 	bl	800b20c <RCCEx_PLL2_Config>
 800947a:	4603      	mov	r3, r0
 800947c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800947e:	e00e      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3324      	adds	r3, #36	; 0x24
 8009484:	2100      	movs	r1, #0
 8009486:	4618      	mov	r0, r3
 8009488:	f001 ff72 	bl	800b370 <RCCEx_PLL3_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009490:	e005      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
      break;
 8009496:	e002      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009498:	bf00      	nop
 800949a:	e000      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800949c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10d      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80094a4:	4b05      	ldr	r3, [pc, #20]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80094b2:	4902      	ldr	r1, [pc, #8]	; (80094bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	658b      	str	r3, [r1, #88]	; 0x58
 80094b8:	e004      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80094ba:	bf00      	nop
 80094bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d032      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d4:	2b30      	cmp	r3, #48	; 0x30
 80094d6:	d01c      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80094d8:	2b30      	cmp	r3, #48	; 0x30
 80094da:	d817      	bhi.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d00c      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d813      	bhi.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d016      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d10f      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ec:	4baf      	ldr	r3, [pc, #700]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	4aae      	ldr	r2, [pc, #696]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80094f8:	e00e      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3304      	adds	r3, #4
 80094fe:	2102      	movs	r1, #2
 8009500:	4618      	mov	r0, r3
 8009502:	f001 fe83 	bl	800b20c <RCCEx_PLL2_Config>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800950a:	e005      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	75fb      	strb	r3, [r7, #23]
      break;
 8009510:	e002      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009512:	bf00      	nop
 8009514:	e000      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800951e:	4ba3      	ldr	r3, [pc, #652]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009522:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800952a:	49a0      	ldr	r1, [pc, #640]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800952c:	4313      	orrs	r3, r2
 800952e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009530:	e001      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d047      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800954a:	d030      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800954c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009550:	d82a      	bhi.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009552:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009556:	d02c      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009558:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800955c:	d824      	bhi.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800955e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009562:	d018      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009568:	d81e      	bhi.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800956e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009572:	d007      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009574:	e018      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009576:	4b8d      	ldr	r3, [pc, #564]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	4a8c      	ldr	r2, [pc, #560]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800957c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009582:	e017      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3304      	adds	r3, #4
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fe3e 	bl	800b20c <RCCEx_PLL2_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009594:	e00e      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3324      	adds	r3, #36	; 0x24
 800959a:	2100      	movs	r1, #0
 800959c:	4618      	mov	r0, r3
 800959e:	f001 fee7 	bl	800b370 <RCCEx_PLL3_Config>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80095a6:	e005      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	75fb      	strb	r3, [r7, #23]
      break;
 80095ac:	e002      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80095ae:	bf00      	nop
 80095b0:	e000      	b.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80095b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d109      	bne.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80095ba:	4b7c      	ldr	r3, [pc, #496]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095be:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095c6:	4979      	ldr	r1, [pc, #484]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	650b      	str	r3, [r1, #80]	; 0x50
 80095cc:	e001      	b.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d049      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095e6:	d02e      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80095e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095ec:	d828      	bhi.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095f2:	d02a      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x482>
 80095f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095f8:	d822      	bhi.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095fe:	d026      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009600:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009604:	d81c      	bhi.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800960a:	d010      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800960c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009610:	d816      	bhi.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01d      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800961a:	d111      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3304      	adds	r3, #4
 8009620:	2101      	movs	r1, #1
 8009622:	4618      	mov	r0, r3
 8009624:	f001 fdf2 	bl	800b20c <RCCEx_PLL2_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800962c:	e012      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3324      	adds	r3, #36	; 0x24
 8009632:	2101      	movs	r1, #1
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fe9b 	bl	800b370 <RCCEx_PLL3_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800963e:	e009      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	75fb      	strb	r3, [r7, #23]
      break;
 8009644:	e006      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009646:	bf00      	nop
 8009648:	e004      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800964a:	bf00      	nop
 800964c:	e002      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800964e:	bf00      	nop
 8009650:	e000      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009654:	7dfb      	ldrb	r3, [r7, #23]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d109      	bne.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800965a:	4b54      	ldr	r3, [pc, #336]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800965c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800965e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009666:	4951      	ldr	r1, [pc, #324]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009668:	4313      	orrs	r3, r2
 800966a:	650b      	str	r3, [r1, #80]	; 0x50
 800966c:	e001      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966e:	7dfb      	ldrb	r3, [r7, #23]
 8009670:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d04b      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009688:	d02e      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800968a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800968e:	d828      	bhi.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009694:	d02a      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969a:	d822      	bhi.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800969c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096a0:	d026      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80096a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096a6:	d81c      	bhi.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80096a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ac:	d010      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80096ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096b2:	d816      	bhi.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01d      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80096b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096bc:	d111      	bne.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3304      	adds	r3, #4
 80096c2:	2101      	movs	r1, #1
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 fda1 	bl	800b20c <RCCEx_PLL2_Config>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096ce:	e012      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3324      	adds	r3, #36	; 0x24
 80096d4:	2101      	movs	r1, #1
 80096d6:	4618      	mov	r0, r3
 80096d8:	f001 fe4a 	bl	800b370 <RCCEx_PLL3_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096e0:	e009      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	75fb      	strb	r3, [r7, #23]
      break;
 80096e6:	e006      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096e8:	bf00      	nop
 80096ea:	e004      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096ec:	bf00      	nop
 80096ee:	e002      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096f0:	bf00      	nop
 80096f2:	e000      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10a      	bne.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096fc:	4b2b      	ldr	r3, [pc, #172]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009700:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800970a:	4928      	ldr	r1, [pc, #160]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800970c:	4313      	orrs	r3, r2
 800970e:	658b      	str	r3, [r1, #88]	; 0x58
 8009710:	e001      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d02f      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800972a:	d00e      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800972c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009730:	d814      	bhi.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d015      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800973a:	d10f      	bne.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009740:	4a1a      	ldr	r2, [pc, #104]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009748:	e00c      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3304      	adds	r3, #4
 800974e:	2101      	movs	r1, #1
 8009750:	4618      	mov	r0, r3
 8009752:	f001 fd5b 	bl	800b20c <RCCEx_PLL2_Config>
 8009756:	4603      	mov	r3, r0
 8009758:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800975a:	e003      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	75fb      	strb	r3, [r7, #23]
      break;
 8009760:	e000      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d109      	bne.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800976c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009776:	490d      	ldr	r1, [pc, #52]	; (80097ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009778:	4313      	orrs	r3, r2
 800977a:	650b      	str	r3, [r1, #80]	; 0x50
 800977c:	e001      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d033      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009792:	2b03      	cmp	r3, #3
 8009794:	d81c      	bhi.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009796:	a201      	add	r2, pc, #4	; (adr r2, 800979c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979c:	080097d7 	.word	0x080097d7
 80097a0:	080097b1 	.word	0x080097b1
 80097a4:	080097bf 	.word	0x080097bf
 80097a8:	080097d7 	.word	0x080097d7
 80097ac:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b0:	4bb8      	ldr	r3, [pc, #736]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	4ab7      	ldr	r2, [pc, #732]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097bc:	e00c      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3304      	adds	r3, #4
 80097c2:	2102      	movs	r1, #2
 80097c4:	4618      	mov	r0, r3
 80097c6:	f001 fd21 	bl	800b20c <RCCEx_PLL2_Config>
 80097ca:	4603      	mov	r3, r0
 80097cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097ce:	e003      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	75fb      	strb	r3, [r7, #23]
      break;
 80097d4:	e000      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80097d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097de:	4bad      	ldr	r3, [pc, #692]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e2:	f023 0203 	bic.w	r2, r3, #3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ea:	49aa      	ldr	r1, [pc, #680]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097f0:	e001      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 8086 	beq.w	8009910 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009804:	4ba4      	ldr	r3, [pc, #656]	; (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4aa3      	ldr	r2, [pc, #652]	; (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800980a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800980e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009810:	f7f9 fa20 	bl	8002c54 <HAL_GetTick>
 8009814:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009816:	e009      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009818:	f7f9 fa1c 	bl	8002c54 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b64      	cmp	r3, #100	; 0x64
 8009824:	d902      	bls.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	75fb      	strb	r3, [r7, #23]
        break;
 800982a:	e005      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800982c:	4b9a      	ldr	r3, [pc, #616]	; (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0ef      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d166      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800983e:	4b95      	ldr	r3, [pc, #596]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009848:	4053      	eors	r3, r2
 800984a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800984e:	2b00      	cmp	r3, #0
 8009850:	d013      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009852:	4b90      	ldr	r3, [pc, #576]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800985a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800985c:	4b8d      	ldr	r3, [pc, #564]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800985e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009860:	4a8c      	ldr	r2, [pc, #560]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009866:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009868:	4b8a      	ldr	r3, [pc, #552]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800986a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800986c:	4a89      	ldr	r2, [pc, #548]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800986e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009872:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009874:	4a87      	ldr	r2, [pc, #540]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009884:	d115      	bne.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009886:	f7f9 f9e5 	bl	8002c54 <HAL_GetTick>
 800988a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800988c:	e00b      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800988e:	f7f9 f9e1 	bl	8002c54 <HAL_GetTick>
 8009892:	4602      	mov	r2, r0
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	f241 3288 	movw	r2, #5000	; 0x1388
 800989c:	4293      	cmp	r3, r2
 800989e:	d902      	bls.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	75fb      	strb	r3, [r7, #23]
            break;
 80098a4:	e005      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098a6:	4b7b      	ldr	r3, [pc, #492]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0ed      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d126      	bne.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098c6:	d10d      	bne.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80098c8:	4b72      	ldr	r3, [pc, #456]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098d6:	0919      	lsrs	r1, r3, #4
 80098d8:	4b70      	ldr	r3, [pc, #448]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80098da:	400b      	ands	r3, r1
 80098dc:	496d      	ldr	r1, [pc, #436]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098de:	4313      	orrs	r3, r2
 80098e0:	610b      	str	r3, [r1, #16]
 80098e2:	e005      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80098e4:	4b6b      	ldr	r3, [pc, #428]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	4a6a      	ldr	r2, [pc, #424]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098ee:	6113      	str	r3, [r2, #16]
 80098f0:	4b68      	ldr	r3, [pc, #416]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098fe:	4965      	ldr	r1, [pc, #404]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009900:	4313      	orrs	r3, r2
 8009902:	670b      	str	r3, [r1, #112]	; 0x70
 8009904:	e004      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	75bb      	strb	r3, [r7, #22]
 800990a:	e001      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	2b00      	cmp	r3, #0
 800991a:	d07e      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009920:	2b28      	cmp	r3, #40	; 0x28
 8009922:	d867      	bhi.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009924:	a201      	add	r2, pc, #4	; (adr r2, 800992c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992a:	bf00      	nop
 800992c:	080099fb 	.word	0x080099fb
 8009930:	080099f5 	.word	0x080099f5
 8009934:	080099f5 	.word	0x080099f5
 8009938:	080099f5 	.word	0x080099f5
 800993c:	080099f5 	.word	0x080099f5
 8009940:	080099f5 	.word	0x080099f5
 8009944:	080099f5 	.word	0x080099f5
 8009948:	080099f5 	.word	0x080099f5
 800994c:	080099d1 	.word	0x080099d1
 8009950:	080099f5 	.word	0x080099f5
 8009954:	080099f5 	.word	0x080099f5
 8009958:	080099f5 	.word	0x080099f5
 800995c:	080099f5 	.word	0x080099f5
 8009960:	080099f5 	.word	0x080099f5
 8009964:	080099f5 	.word	0x080099f5
 8009968:	080099f5 	.word	0x080099f5
 800996c:	080099e3 	.word	0x080099e3
 8009970:	080099f5 	.word	0x080099f5
 8009974:	080099f5 	.word	0x080099f5
 8009978:	080099f5 	.word	0x080099f5
 800997c:	080099f5 	.word	0x080099f5
 8009980:	080099f5 	.word	0x080099f5
 8009984:	080099f5 	.word	0x080099f5
 8009988:	080099f5 	.word	0x080099f5
 800998c:	080099fb 	.word	0x080099fb
 8009990:	080099f5 	.word	0x080099f5
 8009994:	080099f5 	.word	0x080099f5
 8009998:	080099f5 	.word	0x080099f5
 800999c:	080099f5 	.word	0x080099f5
 80099a0:	080099f5 	.word	0x080099f5
 80099a4:	080099f5 	.word	0x080099f5
 80099a8:	080099f5 	.word	0x080099f5
 80099ac:	080099fb 	.word	0x080099fb
 80099b0:	080099f5 	.word	0x080099f5
 80099b4:	080099f5 	.word	0x080099f5
 80099b8:	080099f5 	.word	0x080099f5
 80099bc:	080099f5 	.word	0x080099f5
 80099c0:	080099f5 	.word	0x080099f5
 80099c4:	080099f5 	.word	0x080099f5
 80099c8:	080099f5 	.word	0x080099f5
 80099cc:	080099fb 	.word	0x080099fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3304      	adds	r3, #4
 80099d4:	2101      	movs	r1, #1
 80099d6:	4618      	mov	r0, r3
 80099d8:	f001 fc18 	bl	800b20c <RCCEx_PLL2_Config>
 80099dc:	4603      	mov	r3, r0
 80099de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099e0:	e00c      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3324      	adds	r3, #36	; 0x24
 80099e6:	2101      	movs	r1, #1
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 fcc1 	bl	800b370 <RCCEx_PLL3_Config>
 80099ee:	4603      	mov	r3, r0
 80099f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099f2:	e003      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	75fb      	strb	r3, [r7, #23]
      break;
 80099f8:	e000      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80099fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099fc:	7dfb      	ldrb	r3, [r7, #23]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d109      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a02:	4b24      	ldr	r3, [pc, #144]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a06:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a0e:	4921      	ldr	r1, [pc, #132]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	654b      	str	r3, [r1, #84]	; 0x54
 8009a14:	e001      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d03e      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d820      	bhi.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a77 	.word	0x08009a77
 8009a38:	08009a4d 	.word	0x08009a4d
 8009a3c:	08009a5f 	.word	0x08009a5f
 8009a40:	08009a77 	.word	0x08009a77
 8009a44:	08009a77 	.word	0x08009a77
 8009a48:	08009a77 	.word	0x08009a77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	2101      	movs	r1, #1
 8009a52:	4618      	mov	r0, r3
 8009a54:	f001 fbda 	bl	800b20c <RCCEx_PLL2_Config>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a5c:	e00c      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3324      	adds	r3, #36	; 0x24
 8009a62:	2101      	movs	r1, #1
 8009a64:	4618      	mov	r0, r3
 8009a66:	f001 fc83 	bl	800b370 <RCCEx_PLL3_Config>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a6e:	e003      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	75fb      	strb	r3, [r7, #23]
      break;
 8009a74:	e000      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d110      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a7e:	4b05      	ldr	r3, [pc, #20]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a82:	f023 0207 	bic.w	r2, r3, #7
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a8a:	4902      	ldr	r1, [pc, #8]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	654b      	str	r3, [r1, #84]	; 0x54
 8009a90:	e008      	b.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009a92:	bf00      	nop
 8009a94:	58024400 	.word	0x58024400
 8009a98:	58024800 	.word	0x58024800
 8009a9c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d039      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	d820      	bhi.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009b03 	.word	0x08009b03
 8009ac4:	08009ad9 	.word	0x08009ad9
 8009ac8:	08009aeb 	.word	0x08009aeb
 8009acc:	08009b03 	.word	0x08009b03
 8009ad0:	08009b03 	.word	0x08009b03
 8009ad4:	08009b03 	.word	0x08009b03
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	2101      	movs	r1, #1
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 fb94 	bl	800b20c <RCCEx_PLL2_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ae8:	e00c      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3324      	adds	r3, #36	; 0x24
 8009aee:	2101      	movs	r1, #1
 8009af0:	4618      	mov	r0, r3
 8009af2:	f001 fc3d 	bl	800b370 <RCCEx_PLL3_Config>
 8009af6:	4603      	mov	r3, r0
 8009af8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009afa:	e003      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	75fb      	strb	r3, [r7, #23]
      break;
 8009b00:	e000      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10a      	bne.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b0a:	4bb7      	ldr	r3, [pc, #732]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0e:	f023 0207 	bic.w	r2, r3, #7
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b18:	49b3      	ldr	r1, [pc, #716]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8009b1e:	e001      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0320 	and.w	r3, r3, #32
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d04b      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b3a:	d02e      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b40:	d828      	bhi.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b46:	d02a      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4c:	d822      	bhi.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b52:	d026      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b58:	d81c      	bhi.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b5e:	d010      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b64:	d816      	bhi.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d01d      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b6e:	d111      	bne.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	3304      	adds	r3, #4
 8009b74:	2100      	movs	r1, #0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fb48 	bl	800b20c <RCCEx_PLL2_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b80:	e012      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	2102      	movs	r1, #2
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fbf1 	bl	800b370 <RCCEx_PLL3_Config>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b92:	e009      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	75fb      	strb	r3, [r7, #23]
      break;
 8009b98:	e006      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b9a:	bf00      	nop
 8009b9c:	e004      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b9e:	bf00      	nop
 8009ba0:	e002      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009ba2:	bf00      	nop
 8009ba4:	e000      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bae:	4b8e      	ldr	r3, [pc, #568]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bbc:	498a      	ldr	r1, [pc, #552]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	654b      	str	r3, [r1, #84]	; 0x54
 8009bc2:	e001      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d04b      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009bde:	d02e      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009be0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009be4:	d828      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bea:	d02a      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bf0:	d822      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bf6:	d026      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bfc:	d81c      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c02:	d010      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c08:	d816      	bhi.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d01d      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c12:	d111      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3304      	adds	r3, #4
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 faf6 	bl	800b20c <RCCEx_PLL2_Config>
 8009c20:	4603      	mov	r3, r0
 8009c22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c24:	e012      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	3324      	adds	r3, #36	; 0x24
 8009c2a:	2102      	movs	r1, #2
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f001 fb9f 	bl	800b370 <RCCEx_PLL3_Config>
 8009c32:	4603      	mov	r3, r0
 8009c34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c36:	e009      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c3c:	e006      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c3e:	bf00      	nop
 8009c40:	e004      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c42:	bf00      	nop
 8009c44:	e002      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10a      	bne.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c52:	4b65      	ldr	r3, [pc, #404]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c60:	4961      	ldr	r1, [pc, #388]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	658b      	str	r3, [r1, #88]	; 0x58
 8009c66:	e001      	b.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d04b      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c82:	d02e      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009c84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c88:	d828      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c8e:	d02a      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c94:	d822      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c9a:	d026      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009c9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009ca0:	d81c      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ca6:	d010      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cac:	d816      	bhi.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01d      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb6:	d111      	bne.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3304      	adds	r3, #4
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 faa4 	bl	800b20c <RCCEx_PLL2_Config>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009cc8:	e012      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3324      	adds	r3, #36	; 0x24
 8009cce:	2102      	movs	r1, #2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 fb4d 	bl	800b370 <RCCEx_PLL3_Config>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009cda:	e009      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce0:	e006      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009ce2:	bf00      	nop
 8009ce4:	e004      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009ce6:	bf00      	nop
 8009ce8:	e002      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cea:	bf00      	nop
 8009cec:	e000      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10a      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009cf6:	4b3c      	ldr	r3, [pc, #240]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d04:	4938      	ldr	r1, [pc, #224]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	658b      	str	r3, [r1, #88]	; 0x58
 8009d0a:	e001      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0308 	and.w	r3, r3, #8
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d01a      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d26:	d10a      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3324      	adds	r3, #36	; 0x24
 8009d2c:	2102      	movs	r1, #2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 fb1e 	bl	800b370 <RCCEx_PLL3_Config>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d3e:	4b2a      	ldr	r3, [pc, #168]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d4c:	4926      	ldr	r1, [pc, #152]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0310 	and.w	r3, r3, #16
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d01a      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d68:	d10a      	bne.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3324      	adds	r3, #36	; 0x24
 8009d6e:	2102      	movs	r1, #2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 fafd 	bl	800b370 <RCCEx_PLL3_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d80:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d8e:	4916      	ldr	r1, [pc, #88]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d036      	beq.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009daa:	d01f      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db0:	d817      	bhi.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dba:	d009      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009dbc:	e011      	b.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 fa21 	bl	800b20c <RCCEx_PLL2_Config>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009dce:	e00e      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3324      	adds	r3, #36	; 0x24
 8009dd4:	2102      	movs	r1, #2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 faca 	bl	800b370 <RCCEx_PLL3_Config>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009de0:	e005      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	75fb      	strb	r3, [r7, #23]
      break;
 8009de6:	e002      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009de8:	58024400 	.word	0x58024400
      break;
 8009dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10a      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009df4:	4b93      	ldr	r3, [pc, #588]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e02:	4990      	ldr	r1, [pc, #576]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	658b      	str	r3, [r1, #88]	; 0x58
 8009e08:	e001      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d033      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e24:	d01c      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009e26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e2a:	d816      	bhi.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e30:	d003      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e36:	d007      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009e38:	e00f      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e3a:	4b82      	ldr	r3, [pc, #520]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3e:	4a81      	ldr	r2, [pc, #516]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e46:	e00c      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3324      	adds	r3, #36	; 0x24
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f001 fa8e 	bl	800b370 <RCCEx_PLL3_Config>
 8009e54:	4603      	mov	r3, r0
 8009e56:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e58:	e003      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e5e:	e000      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e68:	4b76      	ldr	r3, [pc, #472]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e76:	4973      	ldr	r1, [pc, #460]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	654b      	str	r3, [r1, #84]	; 0x54
 8009e7c:	e001      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d029      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d003      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e9a:	d007      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009e9c:	e00f      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9e:	4b69      	ldr	r3, [pc, #420]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea2:	4a68      	ldr	r2, [pc, #416]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009eaa:	e00b      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	2102      	movs	r1, #2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 f9aa 	bl	800b20c <RCCEx_PLL2_Config>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ebc:	e002      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009eca:	4b5e      	ldr	r3, [pc, #376]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ece:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed6:	495b      	ldr	r1, [pc, #364]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009edc:	e001      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ede:	7dfb      	ldrb	r3, [r7, #23]
 8009ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00a      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3324      	adds	r3, #36	; 0x24
 8009ef2:	2102      	movs	r1, #2
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 fa3b 	bl	800b370 <RCCEx_PLL3_Config>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d030      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f18:	d017      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f1e:	d811      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f24:	d013      	beq.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f2a:	d80b      	bhi.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d010      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f34:	d106      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f36:	4b43      	ldr	r3, [pc, #268]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3a:	4a42      	ldr	r2, [pc, #264]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009f42:	e007      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
      break;
 8009f48:	e004      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f4a:	bf00      	nop
 8009f4c:	e002      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f4e:	bf00      	nop
 8009f50:	e000      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f54:	7dfb      	ldrb	r3, [r7, #23]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f5a:	4b3a      	ldr	r3, [pc, #232]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f66:	4937      	ldr	r1, [pc, #220]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8009f6c:	e001      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d008      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f7e:	4b31      	ldr	r3, [pc, #196]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8a:	492e      	ldr	r1, [pc, #184]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d009      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f9c:	4b29      	ldr	r3, [pc, #164]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009faa:	4926      	ldr	r1, [pc, #152]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d008      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fbc:	4b21      	ldr	r3, [pc, #132]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fc8:	491e      	ldr	r1, [pc, #120]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00d      	beq.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fda:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	4a19      	ldr	r2, [pc, #100]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fe4:	6113      	str	r3, [r2, #16]
 8009fe6:	4b17      	ldr	r3, [pc, #92]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009ff0:	4914      	ldr	r1, [pc, #80]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	da08      	bge.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ffe:	4b11      	ldr	r3, [pc, #68]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a002:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a00a:	490e      	ldr	r1, [pc, #56]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a01c:	4b09      	ldr	r3, [pc, #36]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a020:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02a:	4906      	ldr	r1, [pc, #24]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a02c:	4313      	orrs	r3, r2
 800a02e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a030:	7dbb      	ldrb	r3, [r7, #22]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	e000      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	58024400 	.word	0x58024400

0800a048 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b090      	sub	sp, #64	; 0x40
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a056:	f040 8095 	bne.w	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a05a:	4bae      	ldr	r3, [pc, #696]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a05e:	f003 0307 	and.w	r3, r3, #7
 800a062:	633b      	str	r3, [r7, #48]	; 0x30
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	2b04      	cmp	r3, #4
 800a068:	f200 8088 	bhi.w	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a06c:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a089 	.word	0x0800a089
 800a078:	0800a0b1 	.word	0x0800a0b1
 800a07c:	0800a0d9 	.word	0x0800a0d9
 800a080:	0800a175 	.word	0x0800a175
 800a084:	0800a101 	.word	0x0800a101

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a088:	4ba2      	ldr	r3, [pc, #648]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a094:	d108      	bne.n	800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 ff64 	bl	800af68 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a0a4:	f000 bc95 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0ac:	f000 bc91 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0b0:	4b98      	ldr	r3, [pc, #608]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0bc:	d108      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0be:	f107 0318 	add.w	r3, r7, #24
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fca8 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a0cc:	f000 bc81 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0d4:	f000 bc7d 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0d8:	4b8e      	ldr	r3, [pc, #568]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0e4:	d108      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0e6:	f107 030c 	add.w	r3, r7, #12
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fde8 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a0f4:	f000 bc6d 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0fc:	f000 bc69 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a100:	4b84      	ldr	r3, [pc, #528]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a108:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a10a:	4b82      	ldr	r3, [pc, #520]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0304 	and.w	r3, r3, #4
 800a112:	2b04      	cmp	r3, #4
 800a114:	d10c      	bne.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a11c:	4b7d      	ldr	r3, [pc, #500]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	08db      	lsrs	r3, r3, #3
 800a122:	f003 0303 	and.w	r3, r3, #3
 800a126:	4a7c      	ldr	r2, [pc, #496]	; (800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a128:	fa22 f303 	lsr.w	r3, r2, r3
 800a12c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a12e:	e01f      	b.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a130:	4b78      	ldr	r3, [pc, #480]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a13c:	d106      	bne.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a144:	d102      	bne.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a146:	4b75      	ldr	r3, [pc, #468]	; (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a14a:	e011      	b.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a14c:	4b71      	ldr	r3, [pc, #452]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a158:	d106      	bne.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a160:	d102      	bne.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a162:	4b6f      	ldr	r3, [pc, #444]	; (800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a164:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a166:	e003      	b.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a16c:	f000 bc31 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a170:	f000 bc2f 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a174:	4b6b      	ldr	r3, [pc, #428]	; (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a176:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a178:	f000 bc2b 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a180:	f000 bc27 	b.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a18a:	f040 8095 	bne.w	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a18e:	4b61      	ldr	r3, [pc, #388]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a192:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a196:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a19e:	d04d      	beq.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a6:	f200 8084 	bhi.w	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	2bc0      	cmp	r3, #192	; 0xc0
 800a1ae:	d07d      	beq.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	2bc0      	cmp	r3, #192	; 0xc0
 800a1b4:	d87d      	bhi.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	2b80      	cmp	r3, #128	; 0x80
 800a1ba:	d02d      	beq.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	2b80      	cmp	r3, #128	; 0x80
 800a1c0:	d877      	bhi.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d003      	beq.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	2b40      	cmp	r3, #64	; 0x40
 800a1cc:	d012      	beq.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a1ce:	e070      	b.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1d0:	4b50      	ldr	r3, [pc, #320]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1dc:	d107      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fec0 	bl	800af68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1ec:	e3f1      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f2:	e3ee      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1f4:	4b47      	ldr	r3, [pc, #284]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a200:	d107      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a202:	f107 0318 	add.w	r3, r7, #24
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fc06 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a210:	e3df      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a216:	e3dc      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a218:	4b3e      	ldr	r3, [pc, #248]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a224:	d107      	bne.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a226:	f107 030c 	add.w	r3, r7, #12
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fd48 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a234:	e3cd      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a23a:	e3ca      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a23c:	4b35      	ldr	r3, [pc, #212]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a244:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a246:	4b33      	ldr	r3, [pc, #204]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0304 	and.w	r3, r3, #4
 800a24e:	2b04      	cmp	r3, #4
 800a250:	d10c      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a254:	2b00      	cmp	r3, #0
 800a256:	d109      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a258:	4b2e      	ldr	r3, [pc, #184]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	08db      	lsrs	r3, r3, #3
 800a25e:	f003 0303 	and.w	r3, r3, #3
 800a262:	4a2d      	ldr	r2, [pc, #180]	; (800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a264:	fa22 f303 	lsr.w	r3, r2, r3
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a26a:	e01e      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a26c:	4b29      	ldr	r3, [pc, #164]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a278:	d106      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a280:	d102      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a282:	4b26      	ldr	r3, [pc, #152]	; (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a286:	e010      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a288:	4b22      	ldr	r3, [pc, #136]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a294:	d106      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a29c:	d102      	bne.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a29e:	4b20      	ldr	r3, [pc, #128]	; (800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2a2:	e002      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a2a8:	e393      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a2aa:	e392      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a2ac:	4b1d      	ldr	r3, [pc, #116]	; (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2b0:	e38f      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2b6:	e38c      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2be:	f040 80a7 	bne.w	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a2c2:	4b14      	ldr	r3, [pc, #80]	; (800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a2ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2d2:	d05f      	beq.n	800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2da:	f200 8096 	bhi.w	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2e4:	f000 808e 	beq.w	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2ee:	f200 808c 	bhi.w	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2f8:	d03a      	beq.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a300:	f200 8083 	bhi.w	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00e      	beq.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a310:	d01c      	beq.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a312:	e07a      	b.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a314:	58024400 	.word	0x58024400
 800a318:	03d09000 	.word	0x03d09000
 800a31c:	003d0900 	.word	0x003d0900
 800a320:	017d7840 	.word	0x017d7840
 800a324:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a328:	4baa      	ldr	r3, [pc, #680]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a334:	d107      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fe14 	bl	800af68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a344:	e345      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a34a:	e342      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a34c:	4ba1      	ldr	r3, [pc, #644]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a358:	d107      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a35a:	f107 0318 	add.w	r3, r7, #24
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fb5a 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a368:	e333      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a36e:	e330      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a370:	4b98      	ldr	r3, [pc, #608]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a37c:	d107      	bne.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a37e:	f107 030c 	add.w	r3, r7, #12
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fc9c 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a38c:	e321      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a392:	e31e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a394:	4b8f      	ldr	r3, [pc, #572]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a39c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a39e:	4b8d      	ldr	r3, [pc, #564]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0304 	and.w	r3, r3, #4
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d10c      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d109      	bne.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3b0:	4b88      	ldr	r3, [pc, #544]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	08db      	lsrs	r3, r3, #3
 800a3b6:	f003 0303 	and.w	r3, r3, #3
 800a3ba:	4a87      	ldr	r2, [pc, #540]	; (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c2:	e01e      	b.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3c4:	4b83      	ldr	r3, [pc, #524]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d0:	d106      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3d8:	d102      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a3da:	4b80      	ldr	r3, [pc, #512]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3de:	e010      	b.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3e0:	4b7c      	ldr	r3, [pc, #496]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ec:	d106      	bne.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f4:	d102      	bne.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3f6:	4b7a      	ldr	r3, [pc, #488]	; (800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3fa:	e002      	b.n	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a400:	e2e7      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a402:	e2e6      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a404:	4b77      	ldr	r3, [pc, #476]	; (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a408:	e2e3      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a40e:	e2e0      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a416:	f040 809c 	bne.w	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a41a:	4b6e      	ldr	r3, [pc, #440]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a422:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a42a:	d054      	beq.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a432:	f200 808b 	bhi.w	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a43c:	f000 8083 	beq.w	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a446:	f200 8081 	bhi.w	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a450:	d02f      	beq.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a458:	d878      	bhi.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d004      	beq.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a466:	d012      	beq.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a468:	e070      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a46a:	4b5a      	ldr	r3, [pc, #360]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a476:	d107      	bne.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 fd73 	bl	800af68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a486:	e2a4      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a48c:	e2a1      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a48e:	4b51      	ldr	r3, [pc, #324]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a49a:	d107      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a49c:	f107 0318 	add.w	r3, r7, #24
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 fab9 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a4aa:	e292      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4b0:	e28f      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4b2:	4b48      	ldr	r3, [pc, #288]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4be:	d107      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c0:	f107 030c 	add.w	r3, r7, #12
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 fbfb 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4ce:	e280      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4d4:	e27d      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4d6:	4b3f      	ldr	r3, [pc, #252]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e0:	4b3c      	ldr	r3, [pc, #240]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d10c      	bne.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d109      	bne.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4f2:	4b38      	ldr	r3, [pc, #224]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	08db      	lsrs	r3, r3, #3
 800a4f8:	f003 0303 	and.w	r3, r3, #3
 800a4fc:	4a36      	ldr	r2, [pc, #216]	; (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a504:	e01e      	b.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a506:	4b33      	ldr	r3, [pc, #204]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a512:	d106      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a51a:	d102      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a51c:	4b2f      	ldr	r3, [pc, #188]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a520:	e010      	b.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a522:	4b2c      	ldr	r3, [pc, #176]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a52a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a52e:	d106      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a536:	d102      	bne.n	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a538:	4b29      	ldr	r3, [pc, #164]	; (800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a53c:	e002      	b.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a542:	e246      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a544:	e245      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a546:	4b27      	ldr	r3, [pc, #156]	; (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a54a:	e242      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a550:	e23f      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a558:	f040 80a8 	bne.w	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a55c:	4b1d      	ldr	r3, [pc, #116]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a560:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a564:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a56c:	d060      	beq.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a574:	f200 8097 	bhi.w	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a57e:	f000 808f 	beq.w	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a588:	f200 808d 	bhi.w	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a592:	d03b      	beq.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a59a:	f200 8084 	bhi.w	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d004      	beq.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5aa:	d01d      	beq.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800a5ac:	e07b      	b.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5ae:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5ba:	d107      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fcd1 	bl	800af68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5ca:	e202      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5d0:	e1ff      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a5d2:	bf00      	nop
 800a5d4:	58024400 	.word	0x58024400
 800a5d8:	03d09000 	.word	0x03d09000
 800a5dc:	003d0900 	.word	0x003d0900
 800a5e0:	017d7840 	.word	0x017d7840
 800a5e4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e8:	4ba3      	ldr	r3, [pc, #652]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5f4:	d107      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f6:	f107 0318 	add.w	r3, r7, #24
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 fa0c 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a604:	e1e5      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a60a:	e1e2      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a60c:	4b9a      	ldr	r3, [pc, #616]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a618:	d107      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a61a:	f107 030c 	add.w	r3, r7, #12
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 fb4e 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a628:	e1d3      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a62e:	e1d0      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a630:	4b91      	ldr	r3, [pc, #580]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a638:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a63a:	4b8f      	ldr	r3, [pc, #572]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b04      	cmp	r3, #4
 800a644:	d10c      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800a646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d109      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a64c:	4b8a      	ldr	r3, [pc, #552]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	08db      	lsrs	r3, r3, #3
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	4a89      	ldr	r2, [pc, #548]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
 800a65c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a65e:	e01e      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a660:	4b85      	ldr	r3, [pc, #532]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a66c:	d106      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800a66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a674:	d102      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a676:	4b82      	ldr	r3, [pc, #520]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a67a:	e010      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a67c:	4b7e      	ldr	r3, [pc, #504]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a688:	d106      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a690:	d102      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a692:	4b7c      	ldr	r3, [pc, #496]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a696:	e002      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a69c:	e199      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a69e:	e198      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a6a0:	4b79      	ldr	r3, [pc, #484]	; (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6a4:	e195      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6aa:	e192      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6b2:	d173      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a6b4:	4b70      	ldr	r3, [pc, #448]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6c4:	d02f      	beq.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6cc:	d863      	bhi.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d004      	beq.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6da:	d012      	beq.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800a6dc:	e05b      	b.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6de:	4b66      	ldr	r3, [pc, #408]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6ea:	d107      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ec:	f107 0318 	add.w	r3, r7, #24
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 f991 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6fa:	e16a      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a700:	e167      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a702:	4b5d      	ldr	r3, [pc, #372]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a70a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a70e:	d107      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a710:	f107 030c 	add.w	r3, r7, #12
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fad3 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a71e:	e158      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a724:	e155      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a726:	4b54      	ldr	r3, [pc, #336]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a72a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a72e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a730:	4b51      	ldr	r3, [pc, #324]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b04      	cmp	r3, #4
 800a73a:	d10c      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800a73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d109      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a742:	4b4d      	ldr	r3, [pc, #308]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	08db      	lsrs	r3, r3, #3
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	4a4b      	ldr	r2, [pc, #300]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a74e:	fa22 f303 	lsr.w	r3, r2, r3
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a754:	e01e      	b.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a756:	4b48      	ldr	r3, [pc, #288]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a75e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a762:	d106      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a76a:	d102      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a76c:	4b44      	ldr	r3, [pc, #272]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a770:	e010      	b.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a772:	4b41      	ldr	r3, [pc, #260]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a77e:	d106      	bne.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a786:	d102      	bne.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a788:	4b3e      	ldr	r3, [pc, #248]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a78c:	e002      	b.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a792:	e11e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a794:	e11d      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a79a:	e11a      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a2:	d133      	bne.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a7a4:	4b34      	ldr	r3, [pc, #208]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ba:	d012      	beq.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a7bc:	e023      	b.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7be:	4b2e      	ldr	r3, [pc, #184]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ca:	d107      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fbc9 	bl	800af68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7da:	e0fa      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7e0:	e0f7      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7e2:	4b25      	ldr	r3, [pc, #148]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7ee:	d107      	bne.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7f0:	f107 0318 	add.w	r3, r7, #24
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 f90f 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7fe:	e0e8      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a804:	e0e5      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a80a:	e0e2      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a812:	f040 808f 	bne.w	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a816:	4b18      	ldr	r3, [pc, #96]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a81a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a81e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a826:	d075      	beq.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a82e:	d87e      	bhi.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a836:	d060      	beq.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83e:	d876      	bhi.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a842:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a846:	d045      	beq.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a84e:	d86e      	bhi.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a856:	d02b      	beq.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85e:	d866      	bhi.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a86c:	d00e      	beq.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800a86e:	e05e      	b.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a870:	f000 f8bc 	bl	800a9ec <HAL_RCCEx_GetD3PCLK1Freq>
 800a874:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a876:	e0ac      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a878:	58024400 	.word	0x58024400
 800a87c:	03d09000 	.word	0x03d09000
 800a880:	003d0900 	.word	0x003d0900
 800a884:	017d7840 	.word	0x017d7840
 800a888:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a88c:	4b53      	ldr	r3, [pc, #332]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a898:	d107      	bne.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a89a:	f107 0318 	add.w	r3, r7, #24
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 f8ba 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8a8:	e093      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8ae:	e090      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8b0:	4b4a      	ldr	r3, [pc, #296]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8bc:	d107      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8be:	f107 030c 	add.w	r3, r7, #12
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 f9fc 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8cc:	e081      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8d2:	e07e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8d4:	4b41      	ldr	r3, [pc, #260]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d109      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8e0:	4b3e      	ldr	r3, [pc, #248]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	08db      	lsrs	r3, r3, #3
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	4a3d      	ldr	r2, [pc, #244]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a8ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8f2:	e06e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8f8:	e06b      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8fa:	4b38      	ldr	r3, [pc, #224]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a906:	d102      	bne.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800a908:	4b36      	ldr	r3, [pc, #216]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a90c:	e061      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a912:	e05e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a914:	4b31      	ldr	r3, [pc, #196]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a920:	d102      	bne.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800a922:	4b31      	ldr	r3, [pc, #196]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a926:	e054      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a92c:	e051      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a932:	e04e      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a93a:	d148      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a93c:	4b27      	ldr	r3, [pc, #156]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a940:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a944:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a94c:	d02a      	beq.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a954:	d838      	bhi.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a962:	d00d      	beq.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a964:	e030      	b.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a966:	4b1d      	ldr	r3, [pc, #116]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a972:	d102      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800a974:	4b1c      	ldr	r3, [pc, #112]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a976:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a978:	e02b      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a97e:	e028      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a980:	4b16      	ldr	r3, [pc, #88]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a98c:	d107      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a98e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a992:	4618      	mov	r0, r3
 800a994:	f000 fae8 	bl	800af68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a99c:	e019      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9a2:	e016      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9a4:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9b0:	d107      	bne.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b2:	f107 0318 	add.w	r3, r7, #24
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 f82e 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9c0:	e007      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9c6:	e004      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9cc:	e001      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3740      	adds	r7, #64	; 0x40
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	03d09000 	.word	0x03d09000
 800a9e4:	003d0900 	.word	0x003d0900
 800a9e8:	017d7840 	.word	0x017d7840

0800a9ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9f0:	f7fe fb8e 	bl	8009110 <HAL_RCC_GetHCLKFreq>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	4b06      	ldr	r3, [pc, #24]	; (800aa10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	091b      	lsrs	r3, r3, #4
 800a9fc:	f003 0307 	and.w	r3, r3, #7
 800aa00:	4904      	ldr	r1, [pc, #16]	; (800aa14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa02:	5ccb      	ldrb	r3, [r1, r3]
 800aa04:	f003 031f 	and.w	r3, r3, #31
 800aa08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	58024400 	.word	0x58024400
 800aa14:	08021a30 	.word	0x08021a30

0800aa18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b089      	sub	sp, #36	; 0x24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa20:	4ba1      	ldr	r3, [pc, #644]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aa2a:	4b9f      	ldr	r3, [pc, #636]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2e:	0b1b      	lsrs	r3, r3, #12
 800aa30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa36:	4b9c      	ldr	r3, [pc, #624]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3a:	091b      	lsrs	r3, r3, #4
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aa42:	4b99      	ldr	r3, [pc, #612]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa46:	08db      	lsrs	r3, r3, #3
 800aa48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	fb02 f303 	mul.w	r3, r2, r3
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 8111 	beq.w	800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	f000 8083 	beq.w	800ab74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	f200 80a1 	bhi.w	800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d056      	beq.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa82:	e099      	b.n	800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa84:	4b88      	ldr	r3, [pc, #544]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0320 	and.w	r3, r3, #32
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d02d      	beq.n	800aaec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa90:	4b85      	ldr	r3, [pc, #532]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	08db      	lsrs	r3, r3, #3
 800aa96:	f003 0303 	and.w	r3, r3, #3
 800aa9a:	4a84      	ldr	r2, [pc, #528]	; (800acac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	ee07 3a90 	vmov	s15, r3
 800aaa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaba:	4b7b      	ldr	r3, [pc, #492]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaca:	ed97 6a03 	vldr	s12, [r7, #12]
 800aace:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aaea:	e087      	b.n	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafe:	4b6a      	ldr	r3, [pc, #424]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2e:	e065      	b.n	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab42:	4b59      	ldr	r3, [pc, #356]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab72:	e043      	b.n	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab86:	4b48      	ldr	r3, [pc, #288]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abb6:	e021      	b.n	800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abca:	4b37      	ldr	r3, [pc, #220]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abda:	ed97 6a03 	vldr	s12, [r7, #12]
 800abde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800abfc:	4b2a      	ldr	r3, [pc, #168]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac00:	0a5b      	lsrs	r3, r3, #9
 800ac02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac22:	ee17 2a90 	vmov	r2, s15
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ac2a:	4b1f      	ldr	r3, [pc, #124]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	0c1b      	lsrs	r3, r3, #16
 800ac30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac50:	ee17 2a90 	vmov	r2, s15
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ac58:	4b13      	ldr	r3, [pc, #76]	; (800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	0e1b      	lsrs	r3, r3, #24
 800ac5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac7e:	ee17 2a90 	vmov	r2, s15
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac86:	e008      	b.n	800ac9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	609a      	str	r2, [r3, #8]
}
 800ac9a:	bf00      	nop
 800ac9c:	3724      	adds	r7, #36	; 0x24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	58024400 	.word	0x58024400
 800acac:	03d09000 	.word	0x03d09000
 800acb0:	46000000 	.word	0x46000000
 800acb4:	4c742400 	.word	0x4c742400
 800acb8:	4a742400 	.word	0x4a742400
 800acbc:	4bbebc20 	.word	0x4bbebc20

0800acc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b089      	sub	sp, #36	; 0x24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acc8:	4ba1      	ldr	r3, [pc, #644]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800accc:	f003 0303 	and.w	r3, r3, #3
 800acd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800acd2:	4b9f      	ldr	r3, [pc, #636]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd6:	0d1b      	lsrs	r3, r3, #20
 800acd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acde:	4b9c      	ldr	r3, [pc, #624]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace2:	0a1b      	lsrs	r3, r3, #8
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800acea:	4b99      	ldr	r3, [pc, #612]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acee:	08db      	lsrs	r3, r3, #3
 800acf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	fb02 f303 	mul.w	r3, r2, r3
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	f000 8111 	beq.w	800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	f000 8083 	beq.w	800ae1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	f200 80a1 	bhi.w	800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d056      	beq.n	800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad2a:	e099      	b.n	800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad2c:	4b88      	ldr	r3, [pc, #544]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0320 	and.w	r3, r3, #32
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d02d      	beq.n	800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad38:	4b85      	ldr	r3, [pc, #532]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	08db      	lsrs	r3, r3, #3
 800ad3e:	f003 0303 	and.w	r3, r3, #3
 800ad42:	4a84      	ldr	r2, [pc, #528]	; (800af54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad44:	fa22 f303 	lsr.w	r3, r2, r3
 800ad48:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	ee07 3a90 	vmov	s15, r3
 800ad50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad62:	4b7b      	ldr	r3, [pc, #492]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6a:	ee07 3a90 	vmov	s15, r3
 800ad6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ad92:	e087      	b.n	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ada2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada6:	4b6a      	ldr	r3, [pc, #424]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ada8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800add6:	e065      	b.n	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ade6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adea:	4b59      	ldr	r3, [pc, #356]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800adfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae1a:	e043      	b.n	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2e:	4b48      	ldr	r3, [pc, #288]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae5e:	e021      	b.n	800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae72:	4b37      	ldr	r3, [pc, #220]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aea2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aea4:	4b2a      	ldr	r3, [pc, #168]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea8:	0a5b      	lsrs	r3, r3, #9
 800aeaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aeba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aebe:	edd7 6a07 	vldr	s13, [r7, #28]
 800aec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeca:	ee17 2a90 	vmov	r2, s15
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aed2:	4b1f      	ldr	r3, [pc, #124]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed6:	0c1b      	lsrs	r3, r3, #16
 800aed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aedc:	ee07 3a90 	vmov	s15, r3
 800aee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aee8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeec:	edd7 6a07 	vldr	s13, [r7, #28]
 800aef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aef8:	ee17 2a90 	vmov	r2, s15
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800af00:	4b13      	ldr	r3, [pc, #76]	; (800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af04:	0e1b      	lsrs	r3, r3, #24
 800af06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af26:	ee17 2a90 	vmov	r2, s15
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af2e:	e008      	b.n	800af42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	609a      	str	r2, [r3, #8]
}
 800af42:	bf00      	nop
 800af44:	3724      	adds	r7, #36	; 0x24
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	58024400 	.word	0x58024400
 800af54:	03d09000 	.word	0x03d09000
 800af58:	46000000 	.word	0x46000000
 800af5c:	4c742400 	.word	0x4c742400
 800af60:	4a742400 	.word	0x4a742400
 800af64:	4bbebc20 	.word	0x4bbebc20

0800af68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800af68:	b480      	push	{r7}
 800af6a:	b089      	sub	sp, #36	; 0x24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af70:	4ba0      	ldr	r3, [pc, #640]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af74:	f003 0303 	and.w	r3, r3, #3
 800af78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800af7a:	4b9e      	ldr	r3, [pc, #632]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7e:	091b      	lsrs	r3, r3, #4
 800af80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af86:	4b9b      	ldr	r3, [pc, #620]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af90:	4b98      	ldr	r3, [pc, #608]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af94:	08db      	lsrs	r3, r3, #3
 800af96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	fb02 f303 	mul.w	r3, r2, r3
 800afa0:	ee07 3a90 	vmov	s15, r3
 800afa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 8111 	beq.w	800b1d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	f000 8083 	beq.w	800b0c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	f200 80a1 	bhi.w	800b106 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d003      	beq.n	800afd2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d056      	beq.n	800b07e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800afd0:	e099      	b.n	800b106 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afd2:	4b88      	ldr	r3, [pc, #544]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0320 	and.w	r3, r3, #32
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d02d      	beq.n	800b03a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afde:	4b85      	ldr	r3, [pc, #532]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	08db      	lsrs	r3, r3, #3
 800afe4:	f003 0303 	and.w	r3, r3, #3
 800afe8:	4a83      	ldr	r2, [pc, #524]	; (800b1f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800afea:	fa22 f303 	lsr.w	r3, r2, r3
 800afee:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	ee07 3a90 	vmov	s15, r3
 800b000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b008:	4b7a      	ldr	r3, [pc, #488]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b010:	ee07 3a90 	vmov	s15, r3
 800b014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b018:	ed97 6a03 	vldr	s12, [r7, #12]
 800b01c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b1fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b020:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b024:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b02c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b030:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b034:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b038:	e087      	b.n	800b14a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	ee07 3a90 	vmov	s15, r3
 800b040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b044:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b200 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b04c:	4b69      	ldr	r3, [pc, #420]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b054:	ee07 3a90 	vmov	s15, r3
 800b058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b05c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b060:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b1fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b06c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b074:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b078:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b07c:	e065      	b.n	800b14a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b088:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b204 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b08c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b090:	4b58      	ldr	r3, [pc, #352]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b098:	ee07 3a90 	vmov	s15, r3
 800b09c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b1fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0c0:	e043      	b.n	800b14a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b208 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0d4:	4b47      	ldr	r3, [pc, #284]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0dc:	ee07 3a90 	vmov	s15, r3
 800b0e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b1fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b100:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b104:	e021      	b.n	800b14a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b110:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b200 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b118:	4b36      	ldr	r3, [pc, #216]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b120:	ee07 3a90 	vmov	s15, r3
 800b124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b128:	ed97 6a03 	vldr	s12, [r7, #12]
 800b12c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b1fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b130:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b134:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b13c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b144:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b148:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b14a:	4b2a      	ldr	r3, [pc, #168]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14e:	0a5b      	lsrs	r3, r3, #9
 800b150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b154:	ee07 3a90 	vmov	s15, r3
 800b158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b160:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b164:	edd7 6a07 	vldr	s13, [r7, #28]
 800b168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b16c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b170:	ee17 2a90 	vmov	r2, s15
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b178:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17c:	0c1b      	lsrs	r3, r3, #16
 800b17e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b18e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b192:	edd7 6a07 	vldr	s13, [r7, #28]
 800b196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b19a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b19e:	ee17 2a90 	vmov	r2, s15
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b1a6:	4b13      	ldr	r3, [pc, #76]	; (800b1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1aa:	0e1b      	lsrs	r3, r3, #24
 800b1ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1b0:	ee07 3a90 	vmov	s15, r3
 800b1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1cc:	ee17 2a90 	vmov	r2, s15
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1d4:	e008      	b.n	800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	609a      	str	r2, [r3, #8]
}
 800b1e8:	bf00      	nop
 800b1ea:	3724      	adds	r7, #36	; 0x24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	58024400 	.word	0x58024400
 800b1f8:	03d09000 	.word	0x03d09000
 800b1fc:	46000000 	.word	0x46000000
 800b200:	4c742400 	.word	0x4c742400
 800b204:	4a742400 	.word	0x4a742400
 800b208:	4bbebc20 	.word	0x4bbebc20

0800b20c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b216:	2300      	movs	r3, #0
 800b218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b21a:	4b53      	ldr	r3, [pc, #332]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	2b03      	cmp	r3, #3
 800b224:	d101      	bne.n	800b22a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e099      	b.n	800b35e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b22a:	4b4f      	ldr	r3, [pc, #316]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a4e      	ldr	r2, [pc, #312]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b230:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b236:	f7f7 fd0d 	bl	8002c54 <HAL_GetTick>
 800b23a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b23c:	e008      	b.n	800b250 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b23e:	f7f7 fd09 	bl	8002c54 <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d901      	bls.n	800b250 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e086      	b.n	800b35e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b250:	4b45      	ldr	r3, [pc, #276]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1f0      	bne.n	800b23e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b25c:	4b42      	ldr	r3, [pc, #264]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b260:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	031b      	lsls	r3, r3, #12
 800b26a:	493f      	ldr	r1, [pc, #252]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b26c:	4313      	orrs	r3, r2
 800b26e:	628b      	str	r3, [r1, #40]	; 0x28
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	3b01      	subs	r3, #1
 800b276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	3b01      	subs	r3, #1
 800b280:	025b      	lsls	r3, r3, #9
 800b282:	b29b      	uxth	r3, r3
 800b284:	431a      	orrs	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	041b      	lsls	r3, r3, #16
 800b28e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b292:	431a      	orrs	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	3b01      	subs	r3, #1
 800b29a:	061b      	lsls	r3, r3, #24
 800b29c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b2a0:	4931      	ldr	r1, [pc, #196]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b2a6:	4b30      	ldr	r3, [pc, #192]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	492d      	ldr	r1, [pc, #180]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2b8:	4b2b      	ldr	r3, [pc, #172]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2bc:	f023 0220 	bic.w	r2, r3, #32
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	4928      	ldr	r1, [pc, #160]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2ca:	4b27      	ldr	r3, [pc, #156]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ce:	4a26      	ldr	r2, [pc, #152]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2d0:	f023 0310 	bic.w	r3, r3, #16
 800b2d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2d6:	4b24      	ldr	r3, [pc, #144]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2da:	4b24      	ldr	r3, [pc, #144]	; (800b36c <RCCEx_PLL2_Config+0x160>)
 800b2dc:	4013      	ands	r3, r2
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	69d2      	ldr	r2, [r2, #28]
 800b2e2:	00d2      	lsls	r2, r2, #3
 800b2e4:	4920      	ldr	r1, [pc, #128]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2ea:	4b1f      	ldr	r3, [pc, #124]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ee:	4a1e      	ldr	r2, [pc, #120]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2f0:	f043 0310 	orr.w	r3, r3, #16
 800b2f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	4a19      	ldr	r2, [pc, #100]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b306:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b308:	e00f      	b.n	800b32a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d106      	bne.n	800b31e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b310:	4b15      	ldr	r3, [pc, #84]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b314:	4a14      	ldr	r2, [pc, #80]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b31a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b31c:	e005      	b.n	800b32a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b31e:	4b12      	ldr	r3, [pc, #72]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	4a11      	ldr	r2, [pc, #68]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b328:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b32a:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a0e      	ldr	r2, [pc, #56]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b336:	f7f7 fc8d 	bl	8002c54 <HAL_GetTick>
 800b33a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b33c:	e008      	b.n	800b350 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b33e:	f7f7 fc89 	bl	8002c54 <HAL_GetTick>
 800b342:	4602      	mov	r2, r0
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d901      	bls.n	800b350 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b34c:	2303      	movs	r3, #3
 800b34e:	e006      	b.n	800b35e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b350:	4b05      	ldr	r3, [pc, #20]	; (800b368 <RCCEx_PLL2_Config+0x15c>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d0f0      	beq.n	800b33e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	58024400 	.word	0x58024400
 800b36c:	ffff0007 	.word	0xffff0007

0800b370 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b37e:	4b53      	ldr	r3, [pc, #332]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b382:	f003 0303 	and.w	r3, r3, #3
 800b386:	2b03      	cmp	r3, #3
 800b388:	d101      	bne.n	800b38e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e099      	b.n	800b4c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b38e:	4b4f      	ldr	r3, [pc, #316]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a4e      	ldr	r2, [pc, #312]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b39a:	f7f7 fc5b 	bl	8002c54 <HAL_GetTick>
 800b39e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3a0:	e008      	b.n	800b3b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b3a2:	f7f7 fc57 	bl	8002c54 <HAL_GetTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d901      	bls.n	800b3b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e086      	b.n	800b4c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3b4:	4b45      	ldr	r3, [pc, #276]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1f0      	bne.n	800b3a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3c0:	4b42      	ldr	r3, [pc, #264]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	051b      	lsls	r3, r3, #20
 800b3ce:	493f      	ldr	r1, [pc, #252]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	628b      	str	r3, [r1, #40]	; 0x28
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	025b      	lsls	r3, r3, #9
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	041b      	lsls	r3, r3, #16
 800b3f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	061b      	lsls	r3, r3, #24
 800b400:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b404:	4931      	ldr	r1, [pc, #196]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b406:	4313      	orrs	r3, r2
 800b408:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b40a:	4b30      	ldr	r3, [pc, #192]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	492d      	ldr	r1, [pc, #180]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b418:	4313      	orrs	r3, r2
 800b41a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b41c:	4b2b      	ldr	r3, [pc, #172]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	4928      	ldr	r1, [pc, #160]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b42a:	4313      	orrs	r3, r2
 800b42c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b42e:	4b27      	ldr	r3, [pc, #156]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b432:	4a26      	ldr	r2, [pc, #152]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b438:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b43a:	4b24      	ldr	r3, [pc, #144]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b43c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b43e:	4b24      	ldr	r3, [pc, #144]	; (800b4d0 <RCCEx_PLL3_Config+0x160>)
 800b440:	4013      	ands	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	69d2      	ldr	r2, [r2, #28]
 800b446:	00d2      	lsls	r2, r2, #3
 800b448:	4920      	ldr	r1, [pc, #128]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b44e:	4b1f      	ldr	r3, [pc, #124]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	4a1e      	ldr	r2, [pc, #120]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b458:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d106      	bne.n	800b46e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b460:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	4a19      	ldr	r2, [pc, #100]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b466:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b46a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b46c:	e00f      	b.n	800b48e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d106      	bne.n	800b482 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b474:	4b15      	ldr	r3, [pc, #84]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	4a14      	ldr	r2, [pc, #80]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b47a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b47e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b480:	e005      	b.n	800b48e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b482:	4b12      	ldr	r3, [pc, #72]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	4a11      	ldr	r2, [pc, #68]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b48c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a0e      	ldr	r2, [pc, #56]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b49a:	f7f7 fbdb 	bl	8002c54 <HAL_GetTick>
 800b49e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4a0:	e008      	b.n	800b4b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b4a2:	f7f7 fbd7 	bl	8002c54 <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d901      	bls.n	800b4b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e006      	b.n	800b4c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4b4:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <RCCEx_PLL3_Config+0x15c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0f0      	beq.n	800b4a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	58024400 	.word	0x58024400
 800b4d0:	ffff0007 	.word	0xffff0007

0800b4d4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e04d      	b.n	800b582 <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	7a5b      	ldrb	r3, [r3, #9]
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d105      	bne.n	800b4fc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7f6 fa26 	bl	8001948 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2202      	movs	r2, #2
 800b500:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f023 0120 	bic.w	r1, r3, #32
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f042 0204 	orr.w	r2, r2, #4
 800b526:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b532:	2b40      	cmp	r3, #64	; 0x40
 800b534:	d104      	bne.n	800b540 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2204      	movs	r2, #4
 800b53a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e020      	b.n	800b582 <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800b540:	f7f7 fb88 	bl	8002c54 <HAL_GetTick>
 800b544:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b546:	e00e      	b.n	800b566 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b548:	f7f7 fb84 	bl	8002c54 <HAL_GetTick>
 800b54c:	4602      	mov	r2, r0
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	2b02      	cmp	r3, #2
 800b554:	d907      	bls.n	800b566 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2204      	movs	r2, #4
 800b55a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2202      	movs	r2, #2
 800b560:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e00d      	b.n	800b582 <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b04      	cmp	r3, #4
 800b572:	d0e9      	beq.n	800b548 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b594:	2300      	movs	r3, #0
 800b596:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	7a1b      	ldrb	r3, [r3, #8]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d101      	bne.n	800b5a4 <HAL_RNG_GenerateRandomNumber+0x1a>
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	e03d      	b.n	800b620 <HAL_RNG_GenerateRandomNumber+0x96>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	7a5b      	ldrb	r3, [r3, #9]
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d12c      	bne.n	800b60e <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2202      	movs	r2, #2
 800b5b8:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800b5ba:	f7f7 fb4b 	bl	8002c54 <HAL_GetTick>
 800b5be:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b5c0:	e011      	b.n	800b5e6 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b5c2:	f7f7 fb47 	bl	8002c54 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	2b02      	cmp	r3, #2
 800b5ce:	d90a      	bls.n	800b5e6 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2202      	movs	r2, #2
 800b5da:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e01c      	b.n	800b620 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	f003 0301 	and.w	r3, r3, #1
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d1e6      	bne.n	800b5c2 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	689a      	ldr	r2, [r3, #8]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691a      	ldr	r2, [r3, #16]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	725a      	strb	r2, [r3, #9]
 800b60c:	e004      	b.n	800b618 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2204      	movs	r2, #4
 800b612:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	721a      	strb	r2, [r3, #8]

  return status;
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d904      	bls.n	800b646 <HAL_SAI_InitProtocol+0x1e>
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	3b03      	subs	r3, #3
 800b640:	2b01      	cmp	r3, #1
 800b642:	d812      	bhi.n	800b66a <HAL_SAI_InitProtocol+0x42>
 800b644:	e008      	b.n	800b658 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	68b9      	ldr	r1, [r7, #8]
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f000 fb7d 	bl	800bd4c <SAI_InitI2S>
 800b652:	4603      	mov	r3, r0
 800b654:	75fb      	strb	r3, [r7, #23]
      break;
 800b656:	e00b      	b.n	800b670 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	68b9      	ldr	r1, [r7, #8]
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 fc26 	bl	800beb0 <SAI_InitPCM>
 800b664:	4603      	mov	r3, r0
 800b666:	75fb      	strb	r3, [r7, #23]
      break;
 800b668:	e002      	b.n	800b670 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	75fb      	strb	r3, [r7, #23]
      break;
 800b66e:	bf00      	nop
  }

  if (status == HAL_OK)
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d104      	bne.n	800b680 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f000 f808 	bl	800b68c <HAL_SAI_Init>
 800b67c:	4603      	mov	r3, r0
 800b67e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b680:	7dfb      	ldrb	r3, [r7, #23]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08a      	sub	sp, #40	; 0x28
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e283      	b.n	800bba6 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b69e:	f7f7 fb09 	bl	8002cb4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d113      	bne.n	800b6d4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a94      	ldr	r2, [pc, #592]	; (800b904 <HAL_SAI_Init+0x278>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d004      	beq.n	800b6c0 <HAL_SAI_Init+0x34>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a93      	ldr	r2, [pc, #588]	; (800b908 <HAL_SAI_Init+0x27c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d107      	bne.n	800b6d0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d103      	bne.n	800b6d0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e268      	b.n	800bba6 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a8a      	ldr	r2, [pc, #552]	; (800b904 <HAL_SAI_Init+0x278>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d004      	beq.n	800b6e8 <HAL_SAI_Init+0x5c>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a8a      	ldr	r2, [pc, #552]	; (800b90c <HAL_SAI_Init+0x280>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d102      	bne.n	800b6ee <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800b6e8:	4b89      	ldr	r3, [pc, #548]	; (800b910 <HAL_SAI_Init+0x284>)
 800b6ea:	61bb      	str	r3, [r7, #24]
 800b6ec:	e028      	b.n	800b740 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a88      	ldr	r2, [pc, #544]	; (800b914 <HAL_SAI_Init+0x288>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d004      	beq.n	800b702 <HAL_SAI_Init+0x76>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a86      	ldr	r2, [pc, #536]	; (800b918 <HAL_SAI_Init+0x28c>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d102      	bne.n	800b708 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800b702:	4b86      	ldr	r3, [pc, #536]	; (800b91c <HAL_SAI_Init+0x290>)
 800b704:	61bb      	str	r3, [r7, #24]
 800b706:	e01b      	b.n	800b740 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a84      	ldr	r2, [pc, #528]	; (800b920 <HAL_SAI_Init+0x294>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d004      	beq.n	800b71c <HAL_SAI_Init+0x90>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a83      	ldr	r2, [pc, #524]	; (800b924 <HAL_SAI_Init+0x298>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d102      	bne.n	800b722 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800b71c:	4b82      	ldr	r3, [pc, #520]	; (800b928 <HAL_SAI_Init+0x29c>)
 800b71e:	61bb      	str	r3, [r7, #24]
 800b720:	e00e      	b.n	800b740 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a78      	ldr	r2, [pc, #480]	; (800b908 <HAL_SAI_Init+0x27c>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d004      	beq.n	800b736 <HAL_SAI_Init+0xaa>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a7e      	ldr	r2, [pc, #504]	; (800b92c <HAL_SAI_Init+0x2a0>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d102      	bne.n	800b73c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800b736:	4b7e      	ldr	r3, [pc, #504]	; (800b930 <HAL_SAI_Init+0x2a4>)
 800b738:	61bb      	str	r3, [r7, #24]
 800b73a:	e001      	b.n	800b740 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e232      	b.n	800bba6 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d106      	bne.n	800b75a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7f6 f965 	bl	8001a24 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fc62 	bl	800c024 <SAI_Disable>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e21d      	b.n	800bba6 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2202      	movs	r2, #2
 800b76e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	2b02      	cmp	r3, #2
 800b778:	d00c      	beq.n	800b794 <HAL_SAI_Init+0x108>
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d80d      	bhi.n	800b79a <HAL_SAI_Init+0x10e>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <HAL_SAI_Init+0xfc>
 800b782:	2b01      	cmp	r3, #1
 800b784:	d003      	beq.n	800b78e <HAL_SAI_Init+0x102>
 800b786:	e008      	b.n	800b79a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b78c:	e008      	b.n	800b7a0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b78e:	2310      	movs	r3, #16
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b792:	e005      	b.n	800b7a0 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b794:	2320      	movs	r3, #32
 800b796:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b798:	e002      	b.n	800b7a0 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b79e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	2b05      	cmp	r3, #5
 800b7a6:	d832      	bhi.n	800b80e <HAL_SAI_Init+0x182>
 800b7a8:	a201      	add	r2, pc, #4	; (adr r2, 800b7b0 <HAL_SAI_Init+0x124>)
 800b7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ae:	bf00      	nop
 800b7b0:	0800b7c9 	.word	0x0800b7c9
 800b7b4:	0800b7cf 	.word	0x0800b7cf
 800b7b8:	0800b7d7 	.word	0x0800b7d7
 800b7bc:	0800b7df 	.word	0x0800b7df
 800b7c0:	0800b7ef 	.word	0x0800b7ef
 800b7c4:	0800b7ff 	.word	0x0800b7ff
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	61fb      	str	r3, [r7, #28]
      break;
 800b7cc:	e022      	b.n	800b814 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d2:	61fb      	str	r3, [r7, #28]
      break;
 800b7d4:	e01e      	b.n	800b814 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b7d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7da:	61fb      	str	r3, [r7, #28]
      break;
 800b7dc:	e01a      	b.n	800b814 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b7de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7e2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e6:	f043 0301 	orr.w	r3, r3, #1
 800b7ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b7ec:	e012      	b.n	800b814 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b7ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7f2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	f043 0302 	orr.w	r3, r3, #2
 800b7fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b7fc:	e00a      	b.n	800b814 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b7fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b802:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	f043 0303 	orr.w	r3, r3, #3
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800b80c:	e002      	b.n	800b814 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	61fb      	str	r3, [r7, #28]
      break;
 800b812:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b818:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 80ba 	beq.w	800b998 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a35      	ldr	r2, [pc, #212]	; (800b904 <HAL_SAI_Init+0x278>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d004      	beq.n	800b83c <HAL_SAI_Init+0x1b0>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a35      	ldr	r2, [pc, #212]	; (800b90c <HAL_SAI_Init+0x280>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d104      	bne.n	800b846 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b83c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b840:	f7fe fc02 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 800b844:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a32      	ldr	r2, [pc, #200]	; (800b914 <HAL_SAI_Init+0x288>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d004      	beq.n	800b85a <HAL_SAI_Init+0x1ce>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a30      	ldr	r2, [pc, #192]	; (800b918 <HAL_SAI_Init+0x28c>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d104      	bne.n	800b864 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b85a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b85e:	f7fe fbf3 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 800b862:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a2d      	ldr	r2, [pc, #180]	; (800b920 <HAL_SAI_Init+0x294>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d004      	beq.n	800b878 <HAL_SAI_Init+0x1ec>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a2c      	ldr	r2, [pc, #176]	; (800b924 <HAL_SAI_Init+0x298>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d104      	bne.n	800b882 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800b878:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b87c:	f7fe fbe4 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 800b880:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a20      	ldr	r2, [pc, #128]	; (800b908 <HAL_SAI_Init+0x27c>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d104      	bne.n	800b896 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b88c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b890:	f7fe fbda 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 800b894:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a24      	ldr	r2, [pc, #144]	; (800b92c <HAL_SAI_Init+0x2a0>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d104      	bne.n	800b8aa <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b8a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b8a4:	f7fe fbd0 	bl	800a048 <HAL_RCCEx_GetPeriphCLKFreq>
 800b8a8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b8b2:	d120      	bne.n	800b8f6 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b8:	2b04      	cmp	r3, #4
 800b8ba:	d102      	bne.n	800b8c2 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800b8bc:	2340      	movs	r3, #64	; 0x40
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	e00a      	b.n	800b8d8 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c6:	2b08      	cmp	r3, #8
 800b8c8:	d103      	bne.n	800b8d2 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800b8ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	e002      	b.n	800b8d8 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a1b      	ldr	r3, [r3, #32]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
 800b8ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	e02f      	b.n	800b956 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8fe:	d119      	bne.n	800b934 <HAL_SAI_Init+0x2a8>
 800b900:	2302      	movs	r3, #2
 800b902:	e018      	b.n	800b936 <HAL_SAI_Init+0x2aa>
 800b904:	40015804 	.word	0x40015804
 800b908:	58005404 	.word	0x58005404
 800b90c:	40015824 	.word	0x40015824
 800b910:	40015800 	.word	0x40015800
 800b914:	40015c04 	.word	0x40015c04
 800b918:	40015c24 	.word	0x40015c24
 800b91c:	40015c00 	.word	0x40015c00
 800b920:	40016004 	.word	0x40016004
 800b924:	40016024 	.word	0x40016024
 800b928:	40016000 	.word	0x40016000
 800b92c:	58005424 	.word	0x58005424
 800b930:	58005400 	.word	0x58005400
 800b934:	2301      	movs	r3, #1
 800b936:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	4613      	mov	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	4619      	mov	r1, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	fb02 f303 	mul.w	r3, r2, r3
 800b94e:	021b      	lsls	r3, r3, #8
 800b950:	fbb1 f3f3 	udiv	r3, r1, r3
 800b954:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	4a95      	ldr	r2, [pc, #596]	; (800bbb0 <HAL_SAI_Init+0x524>)
 800b95a:	fba2 2303 	umull	r2, r3, r2, r3
 800b95e:	08da      	lsrs	r2, r3, #3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b964:	6939      	ldr	r1, [r7, #16]
 800b966:	4b92      	ldr	r3, [pc, #584]	; (800bbb0 <HAL_SAI_Init+0x524>)
 800b968:	fba3 2301 	umull	r2, r3, r3, r1
 800b96c:	08da      	lsrs	r2, r3, #3
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	1aca      	subs	r2, r1, r3
 800b978:	2a08      	cmp	r2, #8
 800b97a:	d904      	bls.n	800b986 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	d104      	bne.n	800b998 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b992:	085a      	lsrs	r2, r3, #1
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <HAL_SAI_Init+0x31c>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d109      	bne.n	800b9bc <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d101      	bne.n	800b9b4 <HAL_SAI_Init+0x328>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e001      	b.n	800b9b8 <HAL_SAI_Init+0x32c>
 800b9b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9b8:	623b      	str	r3, [r7, #32]
 800b9ba:	e008      	b.n	800b9ce <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d102      	bne.n	800b9ca <HAL_SAI_Init+0x33e>
 800b9c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9c8:	e000      	b.n	800b9cc <HAL_SAI_Init+0x340>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b9ce:	f7f7 f971 	bl	8002cb4 <HAL_GetREVID>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9d8:	d331      	bcc.n	800ba3e <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6819      	ldr	r1, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	4b73      	ldr	r3, [pc, #460]	; (800bbb4 <HAL_SAI_Init+0x528>)
 800b9e6:	400b      	ands	r3, r1
 800b9e8:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	6819      	ldr	r1, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685a      	ldr	r2, [r3, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b9fe:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba04:	431a      	orrs	r2, r3
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ba12:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	695b      	ldr	r3, [r3, #20]
 800ba18:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ba1e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	051b      	lsls	r3, r3, #20
 800ba26:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ba2c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e02d      	b.n	800ba9a <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6819      	ldr	r1, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	4b5b      	ldr	r3, [pc, #364]	; (800bbb8 <HAL_SAI_Init+0x52c>)
 800ba4a:	400b      	ands	r3, r1
 800ba4c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6819      	ldr	r1, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba5c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ba62:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	6a3b      	ldr	r3, [r7, #32]
 800ba6c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800ba6e:	69fb      	ldr	r3, [r7, #28]
 800ba70:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800ba76:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ba82:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	051b      	lsls	r3, r3, #20
 800ba8a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ba90:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6859      	ldr	r1, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4b45      	ldr	r3, [pc, #276]	; (800bbbc <HAL_SAI_Init+0x530>)
 800baa6:	400b      	ands	r3, r1
 800baa8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6859      	ldr	r1, [r3, #4]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	69da      	ldr	r2, [r3, #28]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab8:	431a      	orrs	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	430a      	orrs	r2, r1
 800bac6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6899      	ldr	r1, [r3, #8]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	4b3b      	ldr	r3, [pc, #236]	; (800bbc0 <HAL_SAI_Init+0x534>)
 800bad4:	400b      	ands	r3, r1
 800bad6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6899      	ldr	r1, [r3, #8]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bae8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800baee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800baf4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafa:	3b01      	subs	r3, #1
 800bafc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bafe:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	430a      	orrs	r2, r1
 800bb06:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68d9      	ldr	r1, [r3, #12]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	f24f 0320 	movw	r3, #61472	; 0xf020
 800bb16:	400b      	ands	r3, r1
 800bb18:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68d9      	ldr	r1, [r3, #12]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb28:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb2e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bb30:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb36:	3b01      	subs	r3, #1
 800bb38:	021b      	lsls	r3, r3, #8
 800bb3a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a1e      	ldr	r2, [pc, #120]	; (800bbc4 <HAL_SAI_Init+0x538>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d004      	beq.n	800bb58 <HAL_SAI_Init+0x4cc>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a1d      	ldr	r2, [pc, #116]	; (800bbc8 <HAL_SAI_Init+0x53c>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d119      	bne.n	800bb8c <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb5c:	f023 0201 	bic.w	r2, r3, #1
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d10e      	bne.n	800bb8c <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb76:	3b01      	subs	r3, #1
 800bb78:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800bb7a:	431a      	orrs	r2, r3
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb84:	f043 0201 	orr.w	r2, r3, #1
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3728      	adds	r7, #40	; 0x28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	cccccccd 	.word	0xcccccccd
 800bbb4:	f005c010 	.word	0xf005c010
 800bbb8:	f805c010 	.word	0xf805c010
 800bbbc:	ffff1ff0 	.word	0xffff1ff0
 800bbc0:	fff88000 	.word	0xfff88000
 800bbc4:	40015804 	.word	0x40015804
 800bbc8:	58005404 	.word	0x58005404

0800bbcc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800bbda:	f7f7 f83b 	bl	8002c54 <HAL_GetTick>
 800bbde:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <HAL_SAI_Transmit_DMA+0x20>
 800bbe6:	88fb      	ldrh	r3, [r7, #6]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	e098      	b.n	800bd22 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	f040 8091 	bne.w	800bd20 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d101      	bne.n	800bc0c <HAL_SAI_Transmit_DMA+0x40>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e08a      	b.n	800bd22 <HAL_SAI_Transmit_DMA+0x156>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	88fa      	ldrh	r2, [r7, #6]
 800bc1e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	88fa      	ldrh	r2, [r7, #6]
 800bc26:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2212      	movs	r2, #18
 800bc36:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc40:	4a3a      	ldr	r2, [pc, #232]	; (800bd2c <HAL_SAI_Transmit_DMA+0x160>)
 800bc42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc4a:	4a39      	ldr	r2, [pc, #228]	; (800bd30 <HAL_SAI_Transmit_DMA+0x164>)
 800bc4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc54:	4a37      	ldr	r2, [pc, #220]	; (800bd34 <HAL_SAI_Transmit_DMA+0x168>)
 800bc56:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc5e:	2200      	movs	r2, #0
 800bc60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	331c      	adds	r3, #28
 800bc74:	461a      	mov	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800bc7c:	f7f8 fed4 	bl	8004a28 <HAL_DMA_Start_IT>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d005      	beq.n	800bc92 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e047      	b.n	800bd22 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bc92:	2100      	movs	r1, #0
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 f98d 	bl	800bfb4 <SAI_InterruptFlag>
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	691a      	ldr	r2, [r3, #16]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bcb8:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bcba:	e015      	b.n	800bce8 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800bcbc:	f7f6 ffca 	bl	8002c54 <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcca:	d90d      	bls.n	800bce8 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e01c      	b.n	800bd22 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0e2      	beq.n	800bcbc <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d107      	bne.n	800bd14 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bd12:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	e000      	b.n	800bd22 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800bd20:	2302      	movs	r3, #2
  }
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3718      	adds	r7, #24
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	0800c0f9 	.word	0x0800c0f9
 800bd30:	0800c099 	.word	0x0800c099
 800bd34:	0800c115 	.word	0x0800c115

0800bd38 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <SAI_InitI2S+0x2e>
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d103      	bne.n	800bd82 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	651a      	str	r2, [r3, #80]	; 0x50
 800bd80:	e002      	b.n	800bd88 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2201      	movs	r2, #1
 800bd86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bd8e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd96:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e077      	b.n	800bea2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d107      	bne.n	800bdc8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bdc4:	665a      	str	r2, [r3, #100]	; 0x64
 800bdc6:	e006      	b.n	800bdd6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bdce:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	665a      	str	r2, [r3, #100]	; 0x64
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d84f      	bhi.n	800be7c <SAI_InitI2S+0x130>
 800bddc:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <SAI_InitI2S+0x98>)
 800bdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde2:	bf00      	nop
 800bde4:	0800bdf5 	.word	0x0800bdf5
 800bde8:	0800be17 	.word	0x0800be17
 800bdec:	0800be39 	.word	0x0800be39
 800bdf0:	0800be5b 	.word	0x0800be5b

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2280      	movs	r2, #128	; 0x80
 800bdf8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	085b      	lsrs	r3, r3, #1
 800be08:	011a      	lsls	r2, r3, #4
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2240      	movs	r2, #64	; 0x40
 800be12:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800be14:	e035      	b.n	800be82 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2280      	movs	r2, #128	; 0x80
 800be1a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	085b      	lsrs	r3, r3, #1
 800be20:	019a      	lsls	r2, r3, #6
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	085b      	lsrs	r3, r3, #1
 800be2a:	015a      	lsls	r2, r3, #5
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2280      	movs	r2, #128	; 0x80
 800be34:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800be36:	e024      	b.n	800be82 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	22c0      	movs	r2, #192	; 0xc0
 800be3c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	085b      	lsrs	r3, r3, #1
 800be42:	019a      	lsls	r2, r3, #6
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	085b      	lsrs	r3, r3, #1
 800be4c:	015a      	lsls	r2, r3, #5
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2280      	movs	r2, #128	; 0x80
 800be56:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800be58:	e013      	b.n	800be82 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	22e0      	movs	r2, #224	; 0xe0
 800be5e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	085b      	lsrs	r3, r3, #1
 800be64:	019a      	lsls	r2, r3, #6
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	015a      	lsls	r2, r3, #5
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2280      	movs	r2, #128	; 0x80
 800be78:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800be7a:	e002      	b.n	800be82 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800be7c:	2301      	movs	r3, #1
 800be7e:	75fb      	strb	r3, [r7, #23]
      break;
 800be80:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d10b      	bne.n	800bea0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d102      	bne.n	800be94 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2210      	movs	r2, #16
 800be92:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d102      	bne.n	800bea0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2208      	movs	r2, #8
 800be9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	371c      	adds	r7, #28
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop

0800beb0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <SAI_InitPCM+0x2e>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d103      	bne.n	800bee6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2201      	movs	r2, #1
 800bee2:	651a      	str	r2, [r3, #80]	; 0x50
 800bee4:	e002      	b.n	800beec <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bef8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800bf00:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf14:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2b04      	cmp	r3, #4
 800bf1a:	d103      	bne.n	800bf24 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	659a      	str	r2, [r3, #88]	; 0x58
 800bf22:	e002      	b.n	800bf2a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	220d      	movs	r2, #13
 800bf28:	659a      	str	r2, [r3, #88]	; 0x58
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d837      	bhi.n	800bfa0 <SAI_InitPCM+0xf0>
 800bf30:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <SAI_InitPCM+0x88>)
 800bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf36:	bf00      	nop
 800bf38:	0800bf49 	.word	0x0800bf49
 800bf3c:	0800bf5f 	.word	0x0800bf5f
 800bf40:	0800bf75 	.word	0x0800bf75
 800bf44:	0800bf8b 	.word	0x0800bf8b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2280      	movs	r2, #128	; 0x80
 800bf4c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	011a      	lsls	r2, r3, #4
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2240      	movs	r2, #64	; 0x40
 800bf5a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bf5c:	e023      	b.n	800bfa6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2280      	movs	r2, #128	; 0x80
 800bf62:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	015a      	lsls	r2, r3, #5
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2280      	movs	r2, #128	; 0x80
 800bf70:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bf72:	e018      	b.n	800bfa6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	22c0      	movs	r2, #192	; 0xc0
 800bf78:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	015a      	lsls	r2, r3, #5
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2280      	movs	r2, #128	; 0x80
 800bf86:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bf88:	e00d      	b.n	800bfa6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	22e0      	movs	r2, #224	; 0xe0
 800bf8e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2280      	movs	r2, #128	; 0x80
 800bf9c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800bf9e:	e002      	b.n	800bfa6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	75fb      	strb	r3, [r7, #23]
      break;
 800bfa4:	bf00      	nop
  }

  return status;
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800bfc4:	78fb      	ldrb	r3, [r7, #3]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d103      	bne.n	800bfd2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f043 0308 	orr.w	r3, r3, #8
 800bfd0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd6:	2b08      	cmp	r3, #8
 800bfd8:	d10b      	bne.n	800bff2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d003      	beq.n	800bfea <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d103      	bne.n	800bff2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f043 0310 	orr.w	r3, r3, #16
 800bff0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d003      	beq.n	800c002 <SAI_InterruptFlag+0x4e>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d104      	bne.n	800c00c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c008:	60fb      	str	r3, [r7, #12]
 800c00a:	e003      	b.n	800c014 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f043 0304 	orr.w	r3, r3, #4
 800c012:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800c014:	68fb      	ldr	r3, [r7, #12]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
	...

0800c024 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c02c:	4b18      	ldr	r3, [pc, #96]	; (800c090 <SAI_Disable+0x6c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a18      	ldr	r2, [pc, #96]	; (800c094 <SAI_Disable+0x70>)
 800c032:	fba2 2303 	umull	r2, r3, r2, r3
 800c036:	0b1b      	lsrs	r3, r3, #12
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c04e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10a      	bne.n	800c06c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c05c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	72fb      	strb	r3, [r7, #11]
      break;
 800c06a:	e009      	b.n	800c080 <SAI_Disable+0x5c>
    }
    count--;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	3b01      	subs	r3, #1
 800c070:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e7      	bne.n	800c050 <SAI_Disable+0x2c>

  return status;
 800c080:	7afb      	ldrb	r3, [r7, #11]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3714      	adds	r7, #20
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	24000400 	.word	0x24000400
 800c094:	95cbec1b 	.word	0x95cbec1b

0800c098 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	69db      	ldr	r3, [r3, #28]
 800c0aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ae:	d01c      	beq.n	800c0ea <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c0c6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f7ff ff72 	bl	800bfb4 <SAI_InterruptFlag>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	43d9      	mvns	r1, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	691a      	ldr	r2, [r3, #16]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	400a      	ands	r2, r1
 800c0e0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f00c f9f8 	bl	80184e0 <HAL_SAI_TxCpltCallback>
#endif
}
 800c0f0:	bf00      	nop
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c104:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f00c f9e0 	bl	80184cc <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800c10c:	bf00      	nop
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c120:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7f9 fe14 	bl	8005d50 <HAL_DMA_GetError>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d01d      	beq.n	800c16a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c134:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c14c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff ff68 	bl	800c024 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f7ff fde7 	bl	800bd38 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800c16a:	bf00      	nop
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c17c:	2300      	movs	r3, #0
 800c17e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e0eb      	b.n	800c362 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a75      	ldr	r2, [pc, #468]	; (800c36c <HAL_SPI_Init+0x1f8>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d00f      	beq.n	800c1ba <HAL_SPI_Init+0x46>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a74      	ldr	r2, [pc, #464]	; (800c370 <HAL_SPI_Init+0x1fc>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d00a      	beq.n	800c1ba <HAL_SPI_Init+0x46>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a72      	ldr	r2, [pc, #456]	; (800c374 <HAL_SPI_Init+0x200>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d005      	beq.n	800c1ba <HAL_SPI_Init+0x46>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	2b0f      	cmp	r3, #15
 800c1b4:	d901      	bls.n	800c1ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e0d3      	b.n	800c362 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f8dc 	bl	800c378 <SPI_GetPacketSize>
 800c1c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a69      	ldr	r2, [pc, #420]	; (800c36c <HAL_SPI_Init+0x1f8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d00c      	beq.n	800c1e6 <HAL_SPI_Init+0x72>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a67      	ldr	r2, [pc, #412]	; (800c370 <HAL_SPI_Init+0x1fc>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d007      	beq.n	800c1e6 <HAL_SPI_Init+0x72>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a66      	ldr	r2, [pc, #408]	; (800c374 <HAL_SPI_Init+0x200>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d002      	beq.n	800c1e6 <HAL_SPI_Init+0x72>
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2b08      	cmp	r3, #8
 800c1e4:	d811      	bhi.n	800c20a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1ea:	4a60      	ldr	r2, [pc, #384]	; (800c36c <HAL_SPI_Init+0x1f8>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d009      	beq.n	800c204 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a5e      	ldr	r2, [pc, #376]	; (800c370 <HAL_SPI_Init+0x1fc>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d004      	beq.n	800c204 <HAL_SPI_Init+0x90>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a5d      	ldr	r2, [pc, #372]	; (800c374 <HAL_SPI_Init+0x200>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d104      	bne.n	800c20e <HAL_SPI_Init+0x9a>
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2b10      	cmp	r3, #16
 800c208:	d901      	bls.n	800c20e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	e0a9      	b.n	800c362 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b00      	cmp	r3, #0
 800c218:	d106      	bne.n	800c228 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7f5 fd0a 	bl	8001c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f022 0201 	bic.w	r2, r2, #1
 800c23e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c248:	d119      	bne.n	800c27e <HAL_SPI_Init+0x10a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c252:	d103      	bne.n	800c25c <HAL_SPI_Init+0xe8>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d008      	beq.n	800c26e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10c      	bne.n	800c27e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c268:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c26c:	d107      	bne.n	800c27e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c27c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	69da      	ldr	r2, [r3, #28]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c286:	431a      	orrs	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	431a      	orrs	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c290:	ea42 0103 	orr.w	r1, r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	430a      	orrs	r2, r1
 800c29e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	431a      	orrs	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	431a      	orrs	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	695b      	ldr	r3, [r3, #20]
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	431a      	orrs	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2de:	ea42 0103 	orr.w	r1, r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d113      	bne.n	800c31e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c308:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c31c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f022 0201 	bic.w	r2, r2, #1
 800c32c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00a      	beq.n	800c350 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	430a      	orrs	r2, r1
 800c34e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	40013000 	.word	0x40013000
 800c370:	40003800 	.word	0x40003800
 800c374:	40003c00 	.word	0x40003c00

0800c378 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c384:	095b      	lsrs	r3, r3, #5
 800c386:	3301      	adds	r3, #1
 800c388:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	3301      	adds	r3, #1
 800c390:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	3307      	adds	r3, #7
 800c396:	08db      	lsrs	r3, r3, #3
 800c398:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	68fa      	ldr	r2, [r7, #12]
 800c39e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr
	...

0800c3b0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e03e      	b.n	800c444 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f7f4 ff34 	bl	8001248 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4610      	mov	r0, r2
 800c3ec:	f001 fd8c 	bl	800df08 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6818      	ldr	r0, [r3, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	68b9      	ldr	r1, [r7, #8]
 800c3fc:	f001 fe14 	bl	800e028 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6858      	ldr	r0, [r3, #4]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	f001 fe5b 	bl	800e0c8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	6892      	ldr	r2, [r2, #8]
 800c41a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	6892      	ldr	r2, [r2, #8]
 800c426:	f041 0101 	orr.w	r1, r1, #1
 800c42a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c42e:	4b07      	ldr	r3, [pc, #28]	; (800c44c <HAL_SRAM_Init+0x9c>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a06      	ldr	r2, [pc, #24]	; (800c44c <HAL_SRAM_Init+0x9c>)
 800c434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c438:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	52004000 	.word	0x52004000

0800c450 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d101      	bne.n	800c462 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	e049      	b.n	800c4f6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7f5 ffce 	bl	8002418 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2202      	movs	r2, #2
 800c480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	f000 f8ac 	bl	800c5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
	...

0800c500 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c512:	2b01      	cmp	r3, #1
 800c514:	d101      	bne.n	800c51a <HAL_TIM_OC_ConfigChannel+0x1a>
 800c516:	2302      	movs	r3, #2
 800c518:	e064      	b.n	800c5e4 <HAL_TIM_OC_ConfigChannel+0xe4>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b14      	cmp	r3, #20
 800c526:	d857      	bhi.n	800c5d8 <HAL_TIM_OC_ConfigChannel+0xd8>
 800c528:	a201      	add	r2, pc, #4	; (adr r2, 800c530 <HAL_TIM_OC_ConfigChannel+0x30>)
 800c52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52e:	bf00      	nop
 800c530:	0800c585 	.word	0x0800c585
 800c534:	0800c5d9 	.word	0x0800c5d9
 800c538:	0800c5d9 	.word	0x0800c5d9
 800c53c:	0800c5d9 	.word	0x0800c5d9
 800c540:	0800c593 	.word	0x0800c593
 800c544:	0800c5d9 	.word	0x0800c5d9
 800c548:	0800c5d9 	.word	0x0800c5d9
 800c54c:	0800c5d9 	.word	0x0800c5d9
 800c550:	0800c5a1 	.word	0x0800c5a1
 800c554:	0800c5d9 	.word	0x0800c5d9
 800c558:	0800c5d9 	.word	0x0800c5d9
 800c55c:	0800c5d9 	.word	0x0800c5d9
 800c560:	0800c5af 	.word	0x0800c5af
 800c564:	0800c5d9 	.word	0x0800c5d9
 800c568:	0800c5d9 	.word	0x0800c5d9
 800c56c:	0800c5d9 	.word	0x0800c5d9
 800c570:	0800c5bd 	.word	0x0800c5bd
 800c574:	0800c5d9 	.word	0x0800c5d9
 800c578:	0800c5d9 	.word	0x0800c5d9
 800c57c:	0800c5d9 	.word	0x0800c5d9
 800c580:	0800c5cb 	.word	0x0800c5cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68b9      	ldr	r1, [r7, #8]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 f8c8 	bl	800c720 <TIM_OC1_SetConfig>
      break;
 800c590:	e023      	b.n	800c5da <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68b9      	ldr	r1, [r7, #8]
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 f951 	bl	800c840 <TIM_OC2_SetConfig>
      break;
 800c59e:	e01c      	b.n	800c5da <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68b9      	ldr	r1, [r7, #8]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 f9d4 	bl	800c954 <TIM_OC3_SetConfig>
      break;
 800c5ac:	e015      	b.n	800c5da <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68b9      	ldr	r1, [r7, #8]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f000 fa53 	bl	800ca60 <TIM_OC4_SetConfig>
      break;
 800c5ba:	e00e      	b.n	800c5da <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f000 fab4 	bl	800cb30 <TIM_OC5_SetConfig>
      break;
 800c5c8:	e007      	b.n	800c5da <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68b9      	ldr	r1, [r7, #8]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 fb0f 	bl	800cbf4 <TIM_OC6_SetConfig>
      break;
 800c5d6:	e000      	b.n	800c5da <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800c5d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4a40      	ldr	r2, [pc, #256]	; (800c700 <TIM_Base_SetConfig+0x114>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d013      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60a:	d00f      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a3d      	ldr	r2, [pc, #244]	; (800c704 <TIM_Base_SetConfig+0x118>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d00b      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a3c      	ldr	r2, [pc, #240]	; (800c708 <TIM_Base_SetConfig+0x11c>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d007      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a3b      	ldr	r2, [pc, #236]	; (800c70c <TIM_Base_SetConfig+0x120>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d003      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a3a      	ldr	r2, [pc, #232]	; (800c710 <TIM_Base_SetConfig+0x124>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d108      	bne.n	800c63e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a2f      	ldr	r2, [pc, #188]	; (800c700 <TIM_Base_SetConfig+0x114>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d01f      	beq.n	800c686 <TIM_Base_SetConfig+0x9a>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c64c:	d01b      	beq.n	800c686 <TIM_Base_SetConfig+0x9a>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a2c      	ldr	r2, [pc, #176]	; (800c704 <TIM_Base_SetConfig+0x118>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d017      	beq.n	800c686 <TIM_Base_SetConfig+0x9a>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a2b      	ldr	r2, [pc, #172]	; (800c708 <TIM_Base_SetConfig+0x11c>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d013      	beq.n	800c686 <TIM_Base_SetConfig+0x9a>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a2a      	ldr	r2, [pc, #168]	; (800c70c <TIM_Base_SetConfig+0x120>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d00f      	beq.n	800c686 <TIM_Base_SetConfig+0x9a>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a29      	ldr	r2, [pc, #164]	; (800c710 <TIM_Base_SetConfig+0x124>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d00b      	beq.n	800c686 <TIM_Base_SetConfig+0x9a>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a28      	ldr	r2, [pc, #160]	; (800c714 <TIM_Base_SetConfig+0x128>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d007      	beq.n	800c686 <TIM_Base_SetConfig+0x9a>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a27      	ldr	r2, [pc, #156]	; (800c718 <TIM_Base_SetConfig+0x12c>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d003      	beq.n	800c686 <TIM_Base_SetConfig+0x9a>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a26      	ldr	r2, [pc, #152]	; (800c71c <TIM_Base_SetConfig+0x130>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d108      	bne.n	800c698 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c68c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	4313      	orrs	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	689a      	ldr	r2, [r3, #8]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a10      	ldr	r2, [pc, #64]	; (800c700 <TIM_Base_SetConfig+0x114>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d00f      	beq.n	800c6e4 <TIM_Base_SetConfig+0xf8>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a12      	ldr	r2, [pc, #72]	; (800c710 <TIM_Base_SetConfig+0x124>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d00b      	beq.n	800c6e4 <TIM_Base_SetConfig+0xf8>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a11      	ldr	r2, [pc, #68]	; (800c714 <TIM_Base_SetConfig+0x128>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d007      	beq.n	800c6e4 <TIM_Base_SetConfig+0xf8>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a10      	ldr	r2, [pc, #64]	; (800c718 <TIM_Base_SetConfig+0x12c>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d003      	beq.n	800c6e4 <TIM_Base_SetConfig+0xf8>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a0f      	ldr	r2, [pc, #60]	; (800c71c <TIM_Base_SetConfig+0x130>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d103      	bne.n	800c6ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	691a      	ldr	r2, [r3, #16]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	615a      	str	r2, [r3, #20]
}
 800c6f2:	bf00      	nop
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	40010000 	.word	0x40010000
 800c704:	40000400 	.word	0x40000400
 800c708:	40000800 	.word	0x40000800
 800c70c:	40000c00 	.word	0x40000c00
 800c710:	40010400 	.word	0x40010400
 800c714:	40014000 	.word	0x40014000
 800c718:	40014400 	.word	0x40014400
 800c71c:	40014800 	.word	0x40014800

0800c720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	f023 0201 	bic.w	r2, r3, #1
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	699b      	ldr	r3, [r3, #24]
 800c746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4b37      	ldr	r3, [pc, #220]	; (800c828 <TIM_OC1_SetConfig+0x108>)
 800c74c:	4013      	ands	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f023 0303 	bic.w	r3, r3, #3
 800c756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	4313      	orrs	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f023 0302 	bic.w	r3, r3, #2
 800c768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	4313      	orrs	r3, r2
 800c772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a2d      	ldr	r2, [pc, #180]	; (800c82c <TIM_OC1_SetConfig+0x10c>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d00f      	beq.n	800c79c <TIM_OC1_SetConfig+0x7c>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a2c      	ldr	r2, [pc, #176]	; (800c830 <TIM_OC1_SetConfig+0x110>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d00b      	beq.n	800c79c <TIM_OC1_SetConfig+0x7c>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a2b      	ldr	r2, [pc, #172]	; (800c834 <TIM_OC1_SetConfig+0x114>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d007      	beq.n	800c79c <TIM_OC1_SetConfig+0x7c>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4a2a      	ldr	r2, [pc, #168]	; (800c838 <TIM_OC1_SetConfig+0x118>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d003      	beq.n	800c79c <TIM_OC1_SetConfig+0x7c>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4a29      	ldr	r2, [pc, #164]	; (800c83c <TIM_OC1_SetConfig+0x11c>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d10c      	bne.n	800c7b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	f023 0308 	bic.w	r3, r3, #8
 800c7a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f023 0304 	bic.w	r3, r3, #4
 800c7b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4a1c      	ldr	r2, [pc, #112]	; (800c82c <TIM_OC1_SetConfig+0x10c>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d00f      	beq.n	800c7de <TIM_OC1_SetConfig+0xbe>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a1b      	ldr	r2, [pc, #108]	; (800c830 <TIM_OC1_SetConfig+0x110>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d00b      	beq.n	800c7de <TIM_OC1_SetConfig+0xbe>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a1a      	ldr	r2, [pc, #104]	; (800c834 <TIM_OC1_SetConfig+0x114>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d007      	beq.n	800c7de <TIM_OC1_SetConfig+0xbe>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a19      	ldr	r2, [pc, #100]	; (800c838 <TIM_OC1_SetConfig+0x118>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d003      	beq.n	800c7de <TIM_OC1_SetConfig+0xbe>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a18      	ldr	r2, [pc, #96]	; (800c83c <TIM_OC1_SetConfig+0x11c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d111      	bne.n	800c802 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	699b      	ldr	r3, [r3, #24]
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685a      	ldr	r2, [r3, #4]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	621a      	str	r2, [r3, #32]
}
 800c81c:	bf00      	nop
 800c81e:	371c      	adds	r7, #28
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	fffeff8f 	.word	0xfffeff8f
 800c82c:	40010000 	.word	0x40010000
 800c830:	40010400 	.word	0x40010400
 800c834:	40014000 	.word	0x40014000
 800c838:	40014400 	.word	0x40014400
 800c83c:	40014800 	.word	0x40014800

0800c840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a1b      	ldr	r3, [r3, #32]
 800c84e:	f023 0210 	bic.w	r2, r3, #16
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	4b34      	ldr	r3, [pc, #208]	; (800c93c <TIM_OC2_SetConfig+0xfc>)
 800c86c:	4013      	ands	r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	021b      	lsls	r3, r3, #8
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	4313      	orrs	r3, r2
 800c882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	f023 0320 	bic.w	r3, r3, #32
 800c88a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	011b      	lsls	r3, r3, #4
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	4313      	orrs	r3, r2
 800c896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a29      	ldr	r2, [pc, #164]	; (800c940 <TIM_OC2_SetConfig+0x100>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d003      	beq.n	800c8a8 <TIM_OC2_SetConfig+0x68>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a28      	ldr	r2, [pc, #160]	; (800c944 <TIM_OC2_SetConfig+0x104>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d10d      	bne.n	800c8c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	011b      	lsls	r3, r3, #4
 800c8b6:	697a      	ldr	r2, [r7, #20]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a1e      	ldr	r2, [pc, #120]	; (800c940 <TIM_OC2_SetConfig+0x100>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d00f      	beq.n	800c8ec <TIM_OC2_SetConfig+0xac>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a1d      	ldr	r2, [pc, #116]	; (800c944 <TIM_OC2_SetConfig+0x104>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d00b      	beq.n	800c8ec <TIM_OC2_SetConfig+0xac>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a1c      	ldr	r2, [pc, #112]	; (800c948 <TIM_OC2_SetConfig+0x108>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d007      	beq.n	800c8ec <TIM_OC2_SetConfig+0xac>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a1b      	ldr	r2, [pc, #108]	; (800c94c <TIM_OC2_SetConfig+0x10c>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d003      	beq.n	800c8ec <TIM_OC2_SetConfig+0xac>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4a1a      	ldr	r2, [pc, #104]	; (800c950 <TIM_OC2_SetConfig+0x110>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d113      	bne.n	800c914 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	695b      	ldr	r3, [r3, #20]
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	4313      	orrs	r3, r2
 800c906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	4313      	orrs	r3, r2
 800c912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	621a      	str	r2, [r3, #32]
}
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	feff8fff 	.word	0xfeff8fff
 800c940:	40010000 	.word	0x40010000
 800c944:	40010400 	.word	0x40010400
 800c948:	40014000 	.word	0x40014000
 800c94c:	40014400 	.word	0x40014400
 800c950:	40014800 	.word	0x40014800

0800c954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f023 0303 	bic.w	r3, r3, #3
 800c98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	4313      	orrs	r3, r2
 800c994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	021b      	lsls	r3, r3, #8
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4a27      	ldr	r2, [pc, #156]	; (800ca4c <TIM_OC3_SetConfig+0xf8>)
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d003      	beq.n	800c9ba <TIM_OC3_SetConfig+0x66>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a26      	ldr	r2, [pc, #152]	; (800ca50 <TIM_OC3_SetConfig+0xfc>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d10d      	bne.n	800c9d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	021b      	lsls	r3, r3, #8
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c9d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a1c      	ldr	r2, [pc, #112]	; (800ca4c <TIM_OC3_SetConfig+0xf8>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d00f      	beq.n	800c9fe <TIM_OC3_SetConfig+0xaa>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a1b      	ldr	r2, [pc, #108]	; (800ca50 <TIM_OC3_SetConfig+0xfc>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d00b      	beq.n	800c9fe <TIM_OC3_SetConfig+0xaa>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a1a      	ldr	r2, [pc, #104]	; (800ca54 <TIM_OC3_SetConfig+0x100>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d007      	beq.n	800c9fe <TIM_OC3_SetConfig+0xaa>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a19      	ldr	r2, [pc, #100]	; (800ca58 <TIM_OC3_SetConfig+0x104>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d003      	beq.n	800c9fe <TIM_OC3_SetConfig+0xaa>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a18      	ldr	r2, [pc, #96]	; (800ca5c <TIM_OC3_SetConfig+0x108>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d113      	bne.n	800ca26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	695b      	ldr	r3, [r3, #20]
 800ca12:	011b      	lsls	r3, r3, #4
 800ca14:	693a      	ldr	r2, [r7, #16]
 800ca16:	4313      	orrs	r3, r2
 800ca18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	011b      	lsls	r3, r3, #4
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	697a      	ldr	r2, [r7, #20]
 800ca3e:	621a      	str	r2, [r3, #32]
}
 800ca40:	bf00      	nop
 800ca42:	371c      	adds	r7, #28
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	40010000 	.word	0x40010000
 800ca50:	40010400 	.word	0x40010400
 800ca54:	40014000 	.word	0x40014000
 800ca58:	40014400 	.word	0x40014400
 800ca5c:	40014800 	.word	0x40014800

0800ca60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	69db      	ldr	r3, [r3, #28]
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	021b      	lsls	r3, r3, #8
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800caaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	031b      	lsls	r3, r3, #12
 800cab2:	693a      	ldr	r2, [r7, #16]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a18      	ldr	r2, [pc, #96]	; (800cb1c <TIM_OC4_SetConfig+0xbc>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d00f      	beq.n	800cae0 <TIM_OC4_SetConfig+0x80>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a17      	ldr	r2, [pc, #92]	; (800cb20 <TIM_OC4_SetConfig+0xc0>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d00b      	beq.n	800cae0 <TIM_OC4_SetConfig+0x80>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a16      	ldr	r2, [pc, #88]	; (800cb24 <TIM_OC4_SetConfig+0xc4>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d007      	beq.n	800cae0 <TIM_OC4_SetConfig+0x80>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a15      	ldr	r2, [pc, #84]	; (800cb28 <TIM_OC4_SetConfig+0xc8>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d003      	beq.n	800cae0 <TIM_OC4_SetConfig+0x80>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a14      	ldr	r2, [pc, #80]	; (800cb2c <TIM_OC4_SetConfig+0xcc>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d109      	bne.n	800caf4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	019b      	lsls	r3, r3, #6
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	685a      	ldr	r2, [r3, #4]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	621a      	str	r2, [r3, #32]
}
 800cb0e:	bf00      	nop
 800cb10:	371c      	adds	r7, #28
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	40010000 	.word	0x40010000
 800cb20:	40010400 	.word	0x40010400
 800cb24:	40014000 	.word	0x40014000
 800cb28:	40014400 	.word	0x40014400
 800cb2c:	40014800 	.word	0x40014800

0800cb30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b087      	sub	sp, #28
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a1b      	ldr	r3, [r3, #32]
 800cb3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a1b      	ldr	r3, [r3, #32]
 800cb4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cb70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	689b      	ldr	r3, [r3, #8]
 800cb76:	041b      	lsls	r3, r3, #16
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a17      	ldr	r2, [pc, #92]	; (800cbe0 <TIM_OC5_SetConfig+0xb0>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d00f      	beq.n	800cba6 <TIM_OC5_SetConfig+0x76>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a16      	ldr	r2, [pc, #88]	; (800cbe4 <TIM_OC5_SetConfig+0xb4>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d00b      	beq.n	800cba6 <TIM_OC5_SetConfig+0x76>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a15      	ldr	r2, [pc, #84]	; (800cbe8 <TIM_OC5_SetConfig+0xb8>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d007      	beq.n	800cba6 <TIM_OC5_SetConfig+0x76>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a14      	ldr	r2, [pc, #80]	; (800cbec <TIM_OC5_SetConfig+0xbc>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d003      	beq.n	800cba6 <TIM_OC5_SetConfig+0x76>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a13      	ldr	r2, [pc, #76]	; (800cbf0 <TIM_OC5_SetConfig+0xc0>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d109      	bne.n	800cbba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	021b      	lsls	r3, r3, #8
 800cbb4:	697a      	ldr	r2, [r7, #20]
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	685a      	ldr	r2, [r3, #4]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	621a      	str	r2, [r3, #32]
}
 800cbd4:	bf00      	nop
 800cbd6:	371c      	adds	r7, #28
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr
 800cbe0:	40010000 	.word	0x40010000
 800cbe4:	40010400 	.word	0x40010400
 800cbe8:	40014000 	.word	0x40014000
 800cbec:	40014400 	.word	0x40014400
 800cbf0:	40014800 	.word	0x40014800

0800cbf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	021b      	lsls	r3, r3, #8
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	051b      	lsls	r3, r3, #20
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a18      	ldr	r2, [pc, #96]	; (800cca8 <TIM_OC6_SetConfig+0xb4>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d00f      	beq.n	800cc6c <TIM_OC6_SetConfig+0x78>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a17      	ldr	r2, [pc, #92]	; (800ccac <TIM_OC6_SetConfig+0xb8>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d00b      	beq.n	800cc6c <TIM_OC6_SetConfig+0x78>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a16      	ldr	r2, [pc, #88]	; (800ccb0 <TIM_OC6_SetConfig+0xbc>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d007      	beq.n	800cc6c <TIM_OC6_SetConfig+0x78>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a15      	ldr	r2, [pc, #84]	; (800ccb4 <TIM_OC6_SetConfig+0xc0>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d003      	beq.n	800cc6c <TIM_OC6_SetConfig+0x78>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a14      	ldr	r2, [pc, #80]	; (800ccb8 <TIM_OC6_SetConfig+0xc4>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d109      	bne.n	800cc80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cc72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	029b      	lsls	r3, r3, #10
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	621a      	str	r2, [r3, #32]
}
 800cc9a:	bf00      	nop
 800cc9c:	371c      	adds	r7, #28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	40010000 	.word	0x40010000
 800ccac:	40010400 	.word	0x40010400
 800ccb0:	40014000 	.word	0x40014000
 800ccb4:	40014400 	.word	0x40014400
 800ccb8:	40014800 	.word	0x40014800

0800ccbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d101      	bne.n	800ccd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccd0:	2302      	movs	r3, #2
 800ccd2:	e068      	b.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2202      	movs	r2, #2
 800cce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a2e      	ldr	r2, [pc, #184]	; (800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d004      	beq.n	800cd08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a2d      	ldr	r2, [pc, #180]	; (800cdb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d108      	bne.n	800cd1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a1e      	ldr	r2, [pc, #120]	; (800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d01d      	beq.n	800cd7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd46:	d018      	beq.n	800cd7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a1b      	ldr	r2, [pc, #108]	; (800cdbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d013      	beq.n	800cd7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a1a      	ldr	r2, [pc, #104]	; (800cdc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d00e      	beq.n	800cd7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a18      	ldr	r2, [pc, #96]	; (800cdc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d009      	beq.n	800cd7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a13      	ldr	r2, [pc, #76]	; (800cdb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d004      	beq.n	800cd7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a14      	ldr	r2, [pc, #80]	; (800cdc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d10c      	bne.n	800cd94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	40010000 	.word	0x40010000
 800cdb8:	40010400 	.word	0x40010400
 800cdbc:	40000400 	.word	0x40000400
 800cdc0:	40000800 	.word	0x40000800
 800cdc4:	40000c00 	.word	0x40000c00
 800cdc8:	40001800 	.word	0x40001800

0800cdcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d101      	bne.n	800cde8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cde4:	2302      	movs	r3, #2
 800cde6:	e065      	b.n	800ceb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	4313      	orrs	r3, r2
 800ce18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	041b      	lsls	r3, r3, #16
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a16      	ldr	r2, [pc, #88]	; (800cec0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d004      	beq.n	800ce76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a14      	ldr	r2, [pc, #80]	; (800cec4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d115      	bne.n	800cea2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	051b      	lsls	r3, r3, #20
 800ce82:	4313      	orrs	r3, r2
 800ce84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	69db      	ldr	r3, [r3, #28]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr
 800cec0:	40010000 	.word	0x40010000
 800cec4:	40010400 	.word	0x40010400

0800cec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e042      	b.n	800cf60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d106      	bne.n	800cef2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f7f5 fc3d 	bl	800276c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2224      	movs	r2, #36	; 0x24
 800cef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f022 0201 	bic.w	r2, r2, #1
 800cf08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f82c 	bl	800cf68 <UART_SetConfig>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d101      	bne.n	800cf1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e022      	b.n	800cf60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d002      	beq.n	800cf28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fd80 	bl	800da28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	689a      	ldr	r2, [r3, #8]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f042 0201 	orr.w	r2, r2, #1
 800cf56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 fe07 	bl	800db6c <UART_CheckIdleState>
 800cf5e:	4603      	mov	r3, r0
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf68:	b5b0      	push	{r4, r5, r7, lr}
 800cf6a:	b08e      	sub	sp, #56	; 0x38
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf70:	2300      	movs	r3, #0
 800cf72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	691b      	ldr	r3, [r3, #16]
 800cf7e:	431a      	orrs	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	431a      	orrs	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	69db      	ldr	r3, [r3, #28]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	4bbf      	ldr	r3, [pc, #764]	; (800d294 <UART_SetConfig+0x32c>)
 800cf96:	4013      	ands	r3, r2
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	6812      	ldr	r2, [r2, #0]
 800cf9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf9e:	430b      	orrs	r3, r1
 800cfa0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68da      	ldr	r2, [r3, #12]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	430a      	orrs	r2, r1
 800cfb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4ab5      	ldr	r2, [pc, #724]	; (800d298 <UART_SetConfig+0x330>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d004      	beq.n	800cfd2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a1b      	ldr	r3, [r3, #32]
 800cfcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	689a      	ldr	r2, [r3, #8]
 800cfd8:	4bb0      	ldr	r3, [pc, #704]	; (800d29c <UART_SetConfig+0x334>)
 800cfda:	4013      	ands	r3, r2
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	6812      	ldr	r2, [r2, #0]
 800cfe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfe2:	430b      	orrs	r3, r1
 800cfe4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfec:	f023 010f 	bic.w	r1, r3, #15
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	430a      	orrs	r2, r1
 800cffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4aa7      	ldr	r2, [pc, #668]	; (800d2a0 <UART_SetConfig+0x338>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d176      	bne.n	800d0f4 <UART_SetConfig+0x18c>
 800d006:	4ba7      	ldr	r3, [pc, #668]	; (800d2a4 <UART_SetConfig+0x33c>)
 800d008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d00a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d00e:	2b28      	cmp	r3, #40	; 0x28
 800d010:	d86c      	bhi.n	800d0ec <UART_SetConfig+0x184>
 800d012:	a201      	add	r2, pc, #4	; (adr r2, 800d018 <UART_SetConfig+0xb0>)
 800d014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d018:	0800d0bd 	.word	0x0800d0bd
 800d01c:	0800d0ed 	.word	0x0800d0ed
 800d020:	0800d0ed 	.word	0x0800d0ed
 800d024:	0800d0ed 	.word	0x0800d0ed
 800d028:	0800d0ed 	.word	0x0800d0ed
 800d02c:	0800d0ed 	.word	0x0800d0ed
 800d030:	0800d0ed 	.word	0x0800d0ed
 800d034:	0800d0ed 	.word	0x0800d0ed
 800d038:	0800d0c5 	.word	0x0800d0c5
 800d03c:	0800d0ed 	.word	0x0800d0ed
 800d040:	0800d0ed 	.word	0x0800d0ed
 800d044:	0800d0ed 	.word	0x0800d0ed
 800d048:	0800d0ed 	.word	0x0800d0ed
 800d04c:	0800d0ed 	.word	0x0800d0ed
 800d050:	0800d0ed 	.word	0x0800d0ed
 800d054:	0800d0ed 	.word	0x0800d0ed
 800d058:	0800d0cd 	.word	0x0800d0cd
 800d05c:	0800d0ed 	.word	0x0800d0ed
 800d060:	0800d0ed 	.word	0x0800d0ed
 800d064:	0800d0ed 	.word	0x0800d0ed
 800d068:	0800d0ed 	.word	0x0800d0ed
 800d06c:	0800d0ed 	.word	0x0800d0ed
 800d070:	0800d0ed 	.word	0x0800d0ed
 800d074:	0800d0ed 	.word	0x0800d0ed
 800d078:	0800d0d5 	.word	0x0800d0d5
 800d07c:	0800d0ed 	.word	0x0800d0ed
 800d080:	0800d0ed 	.word	0x0800d0ed
 800d084:	0800d0ed 	.word	0x0800d0ed
 800d088:	0800d0ed 	.word	0x0800d0ed
 800d08c:	0800d0ed 	.word	0x0800d0ed
 800d090:	0800d0ed 	.word	0x0800d0ed
 800d094:	0800d0ed 	.word	0x0800d0ed
 800d098:	0800d0dd 	.word	0x0800d0dd
 800d09c:	0800d0ed 	.word	0x0800d0ed
 800d0a0:	0800d0ed 	.word	0x0800d0ed
 800d0a4:	0800d0ed 	.word	0x0800d0ed
 800d0a8:	0800d0ed 	.word	0x0800d0ed
 800d0ac:	0800d0ed 	.word	0x0800d0ed
 800d0b0:	0800d0ed 	.word	0x0800d0ed
 800d0b4:	0800d0ed 	.word	0x0800d0ed
 800d0b8:	0800d0e5 	.word	0x0800d0e5
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c2:	e222      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d0c4:	2304      	movs	r3, #4
 800d0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ca:	e21e      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d0cc:	2308      	movs	r3, #8
 800d0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0d2:	e21a      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d0d4:	2310      	movs	r3, #16
 800d0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0da:	e216      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d0dc:	2320      	movs	r3, #32
 800d0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0e2:	e212      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d0e4:	2340      	movs	r3, #64	; 0x40
 800d0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ea:	e20e      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d0ec:	2380      	movs	r3, #128	; 0x80
 800d0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0f2:	e20a      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a6b      	ldr	r2, [pc, #428]	; (800d2a8 <UART_SetConfig+0x340>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d130      	bne.n	800d160 <UART_SetConfig+0x1f8>
 800d0fe:	4b69      	ldr	r3, [pc, #420]	; (800d2a4 <UART_SetConfig+0x33c>)
 800d100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d102:	f003 0307 	and.w	r3, r3, #7
 800d106:	2b05      	cmp	r3, #5
 800d108:	d826      	bhi.n	800d158 <UART_SetConfig+0x1f0>
 800d10a:	a201      	add	r2, pc, #4	; (adr r2, 800d110 <UART_SetConfig+0x1a8>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d129 	.word	0x0800d129
 800d114:	0800d131 	.word	0x0800d131
 800d118:	0800d139 	.word	0x0800d139
 800d11c:	0800d141 	.word	0x0800d141
 800d120:	0800d149 	.word	0x0800d149
 800d124:	0800d151 	.word	0x0800d151
 800d128:	2300      	movs	r3, #0
 800d12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d12e:	e1ec      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d130:	2304      	movs	r3, #4
 800d132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d136:	e1e8      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d138:	2308      	movs	r3, #8
 800d13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d13e:	e1e4      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d140:	2310      	movs	r3, #16
 800d142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d146:	e1e0      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d148:	2320      	movs	r3, #32
 800d14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d14e:	e1dc      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d150:	2340      	movs	r3, #64	; 0x40
 800d152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d156:	e1d8      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d158:	2380      	movs	r3, #128	; 0x80
 800d15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d15e:	e1d4      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a51      	ldr	r2, [pc, #324]	; (800d2ac <UART_SetConfig+0x344>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d130      	bne.n	800d1cc <UART_SetConfig+0x264>
 800d16a:	4b4e      	ldr	r3, [pc, #312]	; (800d2a4 <UART_SetConfig+0x33c>)
 800d16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b05      	cmp	r3, #5
 800d174:	d826      	bhi.n	800d1c4 <UART_SetConfig+0x25c>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <UART_SetConfig+0x214>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d195 	.word	0x0800d195
 800d180:	0800d19d 	.word	0x0800d19d
 800d184:	0800d1a5 	.word	0x0800d1a5
 800d188:	0800d1ad 	.word	0x0800d1ad
 800d18c:	0800d1b5 	.word	0x0800d1b5
 800d190:	0800d1bd 	.word	0x0800d1bd
 800d194:	2300      	movs	r3, #0
 800d196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d19a:	e1b6      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d19c:	2304      	movs	r3, #4
 800d19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1a2:	e1b2      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d1a4:	2308      	movs	r3, #8
 800d1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1aa:	e1ae      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1b2:	e1aa      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d1b4:	2320      	movs	r3, #32
 800d1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1ba:	e1a6      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d1bc:	2340      	movs	r3, #64	; 0x40
 800d1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1c2:	e1a2      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d1c4:	2380      	movs	r3, #128	; 0x80
 800d1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1ca:	e19e      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a37      	ldr	r2, [pc, #220]	; (800d2b0 <UART_SetConfig+0x348>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d130      	bne.n	800d238 <UART_SetConfig+0x2d0>
 800d1d6:	4b33      	ldr	r3, [pc, #204]	; (800d2a4 <UART_SetConfig+0x33c>)
 800d1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1da:	f003 0307 	and.w	r3, r3, #7
 800d1de:	2b05      	cmp	r3, #5
 800d1e0:	d826      	bhi.n	800d230 <UART_SetConfig+0x2c8>
 800d1e2:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <UART_SetConfig+0x280>)
 800d1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e8:	0800d201 	.word	0x0800d201
 800d1ec:	0800d209 	.word	0x0800d209
 800d1f0:	0800d211 	.word	0x0800d211
 800d1f4:	0800d219 	.word	0x0800d219
 800d1f8:	0800d221 	.word	0x0800d221
 800d1fc:	0800d229 	.word	0x0800d229
 800d200:	2300      	movs	r3, #0
 800d202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d206:	e180      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d208:	2304      	movs	r3, #4
 800d20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d20e:	e17c      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d210:	2308      	movs	r3, #8
 800d212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d216:	e178      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d218:	2310      	movs	r3, #16
 800d21a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d21e:	e174      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d220:	2320      	movs	r3, #32
 800d222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d226:	e170      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d228:	2340      	movs	r3, #64	; 0x40
 800d22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d22e:	e16c      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d230:	2380      	movs	r3, #128	; 0x80
 800d232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d236:	e168      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a1d      	ldr	r2, [pc, #116]	; (800d2b4 <UART_SetConfig+0x34c>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d142      	bne.n	800d2c8 <UART_SetConfig+0x360>
 800d242:	4b18      	ldr	r3, [pc, #96]	; (800d2a4 <UART_SetConfig+0x33c>)
 800d244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	2b05      	cmp	r3, #5
 800d24c:	d838      	bhi.n	800d2c0 <UART_SetConfig+0x358>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <UART_SetConfig+0x2ec>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d26d 	.word	0x0800d26d
 800d258:	0800d275 	.word	0x0800d275
 800d25c:	0800d27d 	.word	0x0800d27d
 800d260:	0800d285 	.word	0x0800d285
 800d264:	0800d28d 	.word	0x0800d28d
 800d268:	0800d2b9 	.word	0x0800d2b9
 800d26c:	2300      	movs	r3, #0
 800d26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d272:	e14a      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d274:	2304      	movs	r3, #4
 800d276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d27a:	e146      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d27c:	2308      	movs	r3, #8
 800d27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d282:	e142      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d284:	2310      	movs	r3, #16
 800d286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d28a:	e13e      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d28c:	2320      	movs	r3, #32
 800d28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d292:	e13a      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d294:	cfff69f3 	.word	0xcfff69f3
 800d298:	58000c00 	.word	0x58000c00
 800d29c:	11fff4ff 	.word	0x11fff4ff
 800d2a0:	40011000 	.word	0x40011000
 800d2a4:	58024400 	.word	0x58024400
 800d2a8:	40004400 	.word	0x40004400
 800d2ac:	40004800 	.word	0x40004800
 800d2b0:	40004c00 	.word	0x40004c00
 800d2b4:	40005000 	.word	0x40005000
 800d2b8:	2340      	movs	r3, #64	; 0x40
 800d2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2be:	e124      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d2c0:	2380      	movs	r3, #128	; 0x80
 800d2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d2c6:	e120      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4acc      	ldr	r2, [pc, #816]	; (800d600 <UART_SetConfig+0x698>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d176      	bne.n	800d3c0 <UART_SetConfig+0x458>
 800d2d2:	4bcc      	ldr	r3, [pc, #816]	; (800d604 <UART_SetConfig+0x69c>)
 800d2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d2da:	2b28      	cmp	r3, #40	; 0x28
 800d2dc:	d86c      	bhi.n	800d3b8 <UART_SetConfig+0x450>
 800d2de:	a201      	add	r2, pc, #4	; (adr r2, 800d2e4 <UART_SetConfig+0x37c>)
 800d2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e4:	0800d389 	.word	0x0800d389
 800d2e8:	0800d3b9 	.word	0x0800d3b9
 800d2ec:	0800d3b9 	.word	0x0800d3b9
 800d2f0:	0800d3b9 	.word	0x0800d3b9
 800d2f4:	0800d3b9 	.word	0x0800d3b9
 800d2f8:	0800d3b9 	.word	0x0800d3b9
 800d2fc:	0800d3b9 	.word	0x0800d3b9
 800d300:	0800d3b9 	.word	0x0800d3b9
 800d304:	0800d391 	.word	0x0800d391
 800d308:	0800d3b9 	.word	0x0800d3b9
 800d30c:	0800d3b9 	.word	0x0800d3b9
 800d310:	0800d3b9 	.word	0x0800d3b9
 800d314:	0800d3b9 	.word	0x0800d3b9
 800d318:	0800d3b9 	.word	0x0800d3b9
 800d31c:	0800d3b9 	.word	0x0800d3b9
 800d320:	0800d3b9 	.word	0x0800d3b9
 800d324:	0800d399 	.word	0x0800d399
 800d328:	0800d3b9 	.word	0x0800d3b9
 800d32c:	0800d3b9 	.word	0x0800d3b9
 800d330:	0800d3b9 	.word	0x0800d3b9
 800d334:	0800d3b9 	.word	0x0800d3b9
 800d338:	0800d3b9 	.word	0x0800d3b9
 800d33c:	0800d3b9 	.word	0x0800d3b9
 800d340:	0800d3b9 	.word	0x0800d3b9
 800d344:	0800d3a1 	.word	0x0800d3a1
 800d348:	0800d3b9 	.word	0x0800d3b9
 800d34c:	0800d3b9 	.word	0x0800d3b9
 800d350:	0800d3b9 	.word	0x0800d3b9
 800d354:	0800d3b9 	.word	0x0800d3b9
 800d358:	0800d3b9 	.word	0x0800d3b9
 800d35c:	0800d3b9 	.word	0x0800d3b9
 800d360:	0800d3b9 	.word	0x0800d3b9
 800d364:	0800d3a9 	.word	0x0800d3a9
 800d368:	0800d3b9 	.word	0x0800d3b9
 800d36c:	0800d3b9 	.word	0x0800d3b9
 800d370:	0800d3b9 	.word	0x0800d3b9
 800d374:	0800d3b9 	.word	0x0800d3b9
 800d378:	0800d3b9 	.word	0x0800d3b9
 800d37c:	0800d3b9 	.word	0x0800d3b9
 800d380:	0800d3b9 	.word	0x0800d3b9
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	2301      	movs	r3, #1
 800d38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d38e:	e0bc      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d396:	e0b8      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d39e:	e0b4      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3a6:	e0b0      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3ae:	e0ac      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d3b0:	2340      	movs	r3, #64	; 0x40
 800d3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3b6:	e0a8      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d3b8:	2380      	movs	r3, #128	; 0x80
 800d3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3be:	e0a4      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a90      	ldr	r2, [pc, #576]	; (800d608 <UART_SetConfig+0x6a0>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d130      	bne.n	800d42c <UART_SetConfig+0x4c4>
 800d3ca:	4b8e      	ldr	r3, [pc, #568]	; (800d604 <UART_SetConfig+0x69c>)
 800d3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	2b05      	cmp	r3, #5
 800d3d4:	d826      	bhi.n	800d424 <UART_SetConfig+0x4bc>
 800d3d6:	a201      	add	r2, pc, #4	; (adr r2, 800d3dc <UART_SetConfig+0x474>)
 800d3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3dc:	0800d3f5 	.word	0x0800d3f5
 800d3e0:	0800d3fd 	.word	0x0800d3fd
 800d3e4:	0800d405 	.word	0x0800d405
 800d3e8:	0800d40d 	.word	0x0800d40d
 800d3ec:	0800d415 	.word	0x0800d415
 800d3f0:	0800d41d 	.word	0x0800d41d
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3fa:	e086      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d402:	e082      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d404:	2308      	movs	r3, #8
 800d406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d40a:	e07e      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d40c:	2310      	movs	r3, #16
 800d40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d412:	e07a      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d414:	2320      	movs	r3, #32
 800d416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d41a:	e076      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d41c:	2340      	movs	r3, #64	; 0x40
 800d41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d422:	e072      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d424:	2380      	movs	r3, #128	; 0x80
 800d426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d42a:	e06e      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a76      	ldr	r2, [pc, #472]	; (800d60c <UART_SetConfig+0x6a4>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d130      	bne.n	800d498 <UART_SetConfig+0x530>
 800d436:	4b73      	ldr	r3, [pc, #460]	; (800d604 <UART_SetConfig+0x69c>)
 800d438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d43a:	f003 0307 	and.w	r3, r3, #7
 800d43e:	2b05      	cmp	r3, #5
 800d440:	d826      	bhi.n	800d490 <UART_SetConfig+0x528>
 800d442:	a201      	add	r2, pc, #4	; (adr r2, 800d448 <UART_SetConfig+0x4e0>)
 800d444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d448:	0800d461 	.word	0x0800d461
 800d44c:	0800d469 	.word	0x0800d469
 800d450:	0800d471 	.word	0x0800d471
 800d454:	0800d479 	.word	0x0800d479
 800d458:	0800d481 	.word	0x0800d481
 800d45c:	0800d489 	.word	0x0800d489
 800d460:	2300      	movs	r3, #0
 800d462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d466:	e050      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d468:	2304      	movs	r3, #4
 800d46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d46e:	e04c      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d470:	2308      	movs	r3, #8
 800d472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d476:	e048      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d478:	2310      	movs	r3, #16
 800d47a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d47e:	e044      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d480:	2320      	movs	r3, #32
 800d482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d486:	e040      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d488:	2340      	movs	r3, #64	; 0x40
 800d48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d48e:	e03c      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d490:	2380      	movs	r3, #128	; 0x80
 800d492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d496:	e038      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a5c      	ldr	r2, [pc, #368]	; (800d610 <UART_SetConfig+0x6a8>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d130      	bne.n	800d504 <UART_SetConfig+0x59c>
 800d4a2:	4b58      	ldr	r3, [pc, #352]	; (800d604 <UART_SetConfig+0x69c>)
 800d4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4a6:	f003 0307 	and.w	r3, r3, #7
 800d4aa:	2b05      	cmp	r3, #5
 800d4ac:	d826      	bhi.n	800d4fc <UART_SetConfig+0x594>
 800d4ae:	a201      	add	r2, pc, #4	; (adr r2, 800d4b4 <UART_SetConfig+0x54c>)
 800d4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b4:	0800d4cd 	.word	0x0800d4cd
 800d4b8:	0800d4d5 	.word	0x0800d4d5
 800d4bc:	0800d4dd 	.word	0x0800d4dd
 800d4c0:	0800d4e5 	.word	0x0800d4e5
 800d4c4:	0800d4ed 	.word	0x0800d4ed
 800d4c8:	0800d4f5 	.word	0x0800d4f5
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4d2:	e01a      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d4d4:	2304      	movs	r3, #4
 800d4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4da:	e016      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d4dc:	2308      	movs	r3, #8
 800d4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4e2:	e012      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d4e4:	2310      	movs	r3, #16
 800d4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4ea:	e00e      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d4ec:	2320      	movs	r3, #32
 800d4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4f2:	e00a      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d4f4:	2340      	movs	r3, #64	; 0x40
 800d4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4fa:	e006      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d4fc:	2380      	movs	r3, #128	; 0x80
 800d4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d502:	e002      	b.n	800d50a <UART_SetConfig+0x5a2>
 800d504:	2380      	movs	r3, #128	; 0x80
 800d506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a40      	ldr	r2, [pc, #256]	; (800d610 <UART_SetConfig+0x6a8>)
 800d510:	4293      	cmp	r3, r2
 800d512:	f040 80ef 	bne.w	800d6f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d51a:	2b20      	cmp	r3, #32
 800d51c:	dc46      	bgt.n	800d5ac <UART_SetConfig+0x644>
 800d51e:	2b02      	cmp	r3, #2
 800d520:	f2c0 8081 	blt.w	800d626 <UART_SetConfig+0x6be>
 800d524:	3b02      	subs	r3, #2
 800d526:	2b1e      	cmp	r3, #30
 800d528:	d87d      	bhi.n	800d626 <UART_SetConfig+0x6be>
 800d52a:	a201      	add	r2, pc, #4	; (adr r2, 800d530 <UART_SetConfig+0x5c8>)
 800d52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d530:	0800d5b3 	.word	0x0800d5b3
 800d534:	0800d627 	.word	0x0800d627
 800d538:	0800d5bb 	.word	0x0800d5bb
 800d53c:	0800d627 	.word	0x0800d627
 800d540:	0800d627 	.word	0x0800d627
 800d544:	0800d627 	.word	0x0800d627
 800d548:	0800d5cb 	.word	0x0800d5cb
 800d54c:	0800d627 	.word	0x0800d627
 800d550:	0800d627 	.word	0x0800d627
 800d554:	0800d627 	.word	0x0800d627
 800d558:	0800d627 	.word	0x0800d627
 800d55c:	0800d627 	.word	0x0800d627
 800d560:	0800d627 	.word	0x0800d627
 800d564:	0800d627 	.word	0x0800d627
 800d568:	0800d5db 	.word	0x0800d5db
 800d56c:	0800d627 	.word	0x0800d627
 800d570:	0800d627 	.word	0x0800d627
 800d574:	0800d627 	.word	0x0800d627
 800d578:	0800d627 	.word	0x0800d627
 800d57c:	0800d627 	.word	0x0800d627
 800d580:	0800d627 	.word	0x0800d627
 800d584:	0800d627 	.word	0x0800d627
 800d588:	0800d627 	.word	0x0800d627
 800d58c:	0800d627 	.word	0x0800d627
 800d590:	0800d627 	.word	0x0800d627
 800d594:	0800d627 	.word	0x0800d627
 800d598:	0800d627 	.word	0x0800d627
 800d59c:	0800d627 	.word	0x0800d627
 800d5a0:	0800d627 	.word	0x0800d627
 800d5a4:	0800d627 	.word	0x0800d627
 800d5a8:	0800d619 	.word	0x0800d619
 800d5ac:	2b40      	cmp	r3, #64	; 0x40
 800d5ae:	d036      	beq.n	800d61e <UART_SetConfig+0x6b6>
 800d5b0:	e039      	b.n	800d626 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d5b2:	f7fd fa1b 	bl	800a9ec <HAL_RCCEx_GetD3PCLK1Freq>
 800d5b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d5b8:	e03b      	b.n	800d632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5ba:	f107 0314 	add.w	r3, r7, #20
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fd fa2a 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5c8:	e033      	b.n	800d632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5ca:	f107 0308 	add.w	r3, r7, #8
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fd fb76 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5d8:	e02b      	b.n	800d632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5da:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <UART_SetConfig+0x69c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 0320 	and.w	r3, r3, #32
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d009      	beq.n	800d5fa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5e6:	4b07      	ldr	r3, [pc, #28]	; (800d604 <UART_SetConfig+0x69c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	08db      	lsrs	r3, r3, #3
 800d5ec:	f003 0303 	and.w	r3, r3, #3
 800d5f0:	4a08      	ldr	r2, [pc, #32]	; (800d614 <UART_SetConfig+0x6ac>)
 800d5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5f8:	e01b      	b.n	800d632 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d5fa:	4b06      	ldr	r3, [pc, #24]	; (800d614 <UART_SetConfig+0x6ac>)
 800d5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5fe:	e018      	b.n	800d632 <UART_SetConfig+0x6ca>
 800d600:	40011400 	.word	0x40011400
 800d604:	58024400 	.word	0x58024400
 800d608:	40007800 	.word	0x40007800
 800d60c:	40007c00 	.word	0x40007c00
 800d610:	58000c00 	.word	0x58000c00
 800d614:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d618:	4bc4      	ldr	r3, [pc, #784]	; (800d92c <UART_SetConfig+0x9c4>)
 800d61a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d61c:	e009      	b.n	800d632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d61e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d624:	e005      	b.n	800d632 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d626:	2300      	movs	r3, #0
 800d628:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d634:	2b00      	cmp	r3, #0
 800d636:	f000 81da 	beq.w	800d9ee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	4abc      	ldr	r2, [pc, #752]	; (800d930 <UART_SetConfig+0x9c8>)
 800d640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d644:	461a      	mov	r2, r3
 800d646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d648:	fbb3 f3f2 	udiv	r3, r3, r2
 800d64c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	4613      	mov	r3, r2
 800d654:	005b      	lsls	r3, r3, #1
 800d656:	4413      	add	r3, r2
 800d658:	6a3a      	ldr	r2, [r7, #32]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d305      	bcc.n	800d66a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d664:	6a3a      	ldr	r2, [r7, #32]
 800d666:	429a      	cmp	r2, r3
 800d668:	d903      	bls.n	800d672 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d66a:	2301      	movs	r3, #1
 800d66c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d670:	e1bd      	b.n	800d9ee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	4618      	mov	r0, r3
 800d676:	f04f 0100 	mov.w	r1, #0
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67e:	4aac      	ldr	r2, [pc, #688]	; (800d930 <UART_SetConfig+0x9c8>)
 800d680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d684:	b29a      	uxth	r2, r3
 800d686:	f04f 0300 	mov.w	r3, #0
 800d68a:	f7f3 f83d 	bl	8000708 <__aeabi_uldivmod>
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	4610      	mov	r0, r2
 800d694:	4619      	mov	r1, r3
 800d696:	f04f 0200 	mov.w	r2, #0
 800d69a:	f04f 0300 	mov.w	r3, #0
 800d69e:	020b      	lsls	r3, r1, #8
 800d6a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d6a4:	0202      	lsls	r2, r0, #8
 800d6a6:	6879      	ldr	r1, [r7, #4]
 800d6a8:	6849      	ldr	r1, [r1, #4]
 800d6aa:	0849      	lsrs	r1, r1, #1
 800d6ac:	4608      	mov	r0, r1
 800d6ae:	f04f 0100 	mov.w	r1, #0
 800d6b2:	1814      	adds	r4, r2, r0
 800d6b4:	eb43 0501 	adc.w	r5, r3, r1
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	f04f 0300 	mov.w	r3, #0
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	f7f3 f81f 	bl	8000708 <__aeabi_uldivmod>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6d8:	d308      	bcc.n	800d6ec <UART_SetConfig+0x784>
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6e0:	d204      	bcs.n	800d6ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6e8:	60da      	str	r2, [r3, #12]
 800d6ea:	e180      	b.n	800d9ee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d6f2:	e17c      	b.n	800d9ee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	69db      	ldr	r3, [r3, #28]
 800d6f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6fc:	f040 80bf 	bne.w	800d87e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d704:	2b20      	cmp	r3, #32
 800d706:	dc49      	bgt.n	800d79c <UART_SetConfig+0x834>
 800d708:	2b00      	cmp	r3, #0
 800d70a:	db7c      	blt.n	800d806 <UART_SetConfig+0x89e>
 800d70c:	2b20      	cmp	r3, #32
 800d70e:	d87a      	bhi.n	800d806 <UART_SetConfig+0x89e>
 800d710:	a201      	add	r2, pc, #4	; (adr r2, 800d718 <UART_SetConfig+0x7b0>)
 800d712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d716:	bf00      	nop
 800d718:	0800d7a3 	.word	0x0800d7a3
 800d71c:	0800d7ab 	.word	0x0800d7ab
 800d720:	0800d807 	.word	0x0800d807
 800d724:	0800d807 	.word	0x0800d807
 800d728:	0800d7b3 	.word	0x0800d7b3
 800d72c:	0800d807 	.word	0x0800d807
 800d730:	0800d807 	.word	0x0800d807
 800d734:	0800d807 	.word	0x0800d807
 800d738:	0800d7c3 	.word	0x0800d7c3
 800d73c:	0800d807 	.word	0x0800d807
 800d740:	0800d807 	.word	0x0800d807
 800d744:	0800d807 	.word	0x0800d807
 800d748:	0800d807 	.word	0x0800d807
 800d74c:	0800d807 	.word	0x0800d807
 800d750:	0800d807 	.word	0x0800d807
 800d754:	0800d807 	.word	0x0800d807
 800d758:	0800d7d3 	.word	0x0800d7d3
 800d75c:	0800d807 	.word	0x0800d807
 800d760:	0800d807 	.word	0x0800d807
 800d764:	0800d807 	.word	0x0800d807
 800d768:	0800d807 	.word	0x0800d807
 800d76c:	0800d807 	.word	0x0800d807
 800d770:	0800d807 	.word	0x0800d807
 800d774:	0800d807 	.word	0x0800d807
 800d778:	0800d807 	.word	0x0800d807
 800d77c:	0800d807 	.word	0x0800d807
 800d780:	0800d807 	.word	0x0800d807
 800d784:	0800d807 	.word	0x0800d807
 800d788:	0800d807 	.word	0x0800d807
 800d78c:	0800d807 	.word	0x0800d807
 800d790:	0800d807 	.word	0x0800d807
 800d794:	0800d807 	.word	0x0800d807
 800d798:	0800d7f9 	.word	0x0800d7f9
 800d79c:	2b40      	cmp	r3, #64	; 0x40
 800d79e:	d02e      	beq.n	800d7fe <UART_SetConfig+0x896>
 800d7a0:	e031      	b.n	800d806 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7a2:	f7fb fce5 	bl	8009170 <HAL_RCC_GetPCLK1Freq>
 800d7a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d7a8:	e033      	b.n	800d812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7aa:	f7fb fcf7 	bl	800919c <HAL_RCC_GetPCLK2Freq>
 800d7ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d7b0:	e02f      	b.n	800d812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7b2:	f107 0314 	add.w	r3, r7, #20
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fd f92e 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7c0:	e027      	b.n	800d812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7c2:	f107 0308 	add.w	r3, r7, #8
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fd fa7a 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7d0:	e01f      	b.n	800d812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7d2:	4b58      	ldr	r3, [pc, #352]	; (800d934 <UART_SetConfig+0x9cc>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d009      	beq.n	800d7f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7de:	4b55      	ldr	r3, [pc, #340]	; (800d934 <UART_SetConfig+0x9cc>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	08db      	lsrs	r3, r3, #3
 800d7e4:	f003 0303 	and.w	r3, r3, #3
 800d7e8:	4a53      	ldr	r2, [pc, #332]	; (800d938 <UART_SetConfig+0x9d0>)
 800d7ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7f0:	e00f      	b.n	800d812 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d7f2:	4b51      	ldr	r3, [pc, #324]	; (800d938 <UART_SetConfig+0x9d0>)
 800d7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7f6:	e00c      	b.n	800d812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7f8:	4b4c      	ldr	r3, [pc, #304]	; (800d92c <UART_SetConfig+0x9c4>)
 800d7fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7fc:	e009      	b.n	800d812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d804:	e005      	b.n	800d812 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 80ea 	beq.w	800d9ee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81e:	4a44      	ldr	r2, [pc, #272]	; (800d930 <UART_SetConfig+0x9c8>)
 800d820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d824:	461a      	mov	r2, r3
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	fbb3 f3f2 	udiv	r3, r3, r2
 800d82c:	005a      	lsls	r2, r3, #1
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	085b      	lsrs	r3, r3, #1
 800d834:	441a      	add	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d83e:	b29b      	uxth	r3, r3
 800d840:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d844:	2b0f      	cmp	r3, #15
 800d846:	d916      	bls.n	800d876 <UART_SetConfig+0x90e>
 800d848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d84e:	d212      	bcs.n	800d876 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d852:	b29b      	uxth	r3, r3
 800d854:	f023 030f 	bic.w	r3, r3, #15
 800d858:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	085b      	lsrs	r3, r3, #1
 800d85e:	b29b      	uxth	r3, r3
 800d860:	f003 0307 	and.w	r3, r3, #7
 800d864:	b29a      	uxth	r2, r3
 800d866:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d868:	4313      	orrs	r3, r2
 800d86a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d872:	60da      	str	r2, [r3, #12]
 800d874:	e0bb      	b.n	800d9ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d87c:	e0b7      	b.n	800d9ee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d87e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d882:	2b20      	cmp	r3, #32
 800d884:	dc4a      	bgt.n	800d91c <UART_SetConfig+0x9b4>
 800d886:	2b00      	cmp	r3, #0
 800d888:	f2c0 8086 	blt.w	800d998 <UART_SetConfig+0xa30>
 800d88c:	2b20      	cmp	r3, #32
 800d88e:	f200 8083 	bhi.w	800d998 <UART_SetConfig+0xa30>
 800d892:	a201      	add	r2, pc, #4	; (adr r2, 800d898 <UART_SetConfig+0x930>)
 800d894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d898:	0800d923 	.word	0x0800d923
 800d89c:	0800d93d 	.word	0x0800d93d
 800d8a0:	0800d999 	.word	0x0800d999
 800d8a4:	0800d999 	.word	0x0800d999
 800d8a8:	0800d945 	.word	0x0800d945
 800d8ac:	0800d999 	.word	0x0800d999
 800d8b0:	0800d999 	.word	0x0800d999
 800d8b4:	0800d999 	.word	0x0800d999
 800d8b8:	0800d955 	.word	0x0800d955
 800d8bc:	0800d999 	.word	0x0800d999
 800d8c0:	0800d999 	.word	0x0800d999
 800d8c4:	0800d999 	.word	0x0800d999
 800d8c8:	0800d999 	.word	0x0800d999
 800d8cc:	0800d999 	.word	0x0800d999
 800d8d0:	0800d999 	.word	0x0800d999
 800d8d4:	0800d999 	.word	0x0800d999
 800d8d8:	0800d965 	.word	0x0800d965
 800d8dc:	0800d999 	.word	0x0800d999
 800d8e0:	0800d999 	.word	0x0800d999
 800d8e4:	0800d999 	.word	0x0800d999
 800d8e8:	0800d999 	.word	0x0800d999
 800d8ec:	0800d999 	.word	0x0800d999
 800d8f0:	0800d999 	.word	0x0800d999
 800d8f4:	0800d999 	.word	0x0800d999
 800d8f8:	0800d999 	.word	0x0800d999
 800d8fc:	0800d999 	.word	0x0800d999
 800d900:	0800d999 	.word	0x0800d999
 800d904:	0800d999 	.word	0x0800d999
 800d908:	0800d999 	.word	0x0800d999
 800d90c:	0800d999 	.word	0x0800d999
 800d910:	0800d999 	.word	0x0800d999
 800d914:	0800d999 	.word	0x0800d999
 800d918:	0800d98b 	.word	0x0800d98b
 800d91c:	2b40      	cmp	r3, #64	; 0x40
 800d91e:	d037      	beq.n	800d990 <UART_SetConfig+0xa28>
 800d920:	e03a      	b.n	800d998 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d922:	f7fb fc25 	bl	8009170 <HAL_RCC_GetPCLK1Freq>
 800d926:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d928:	e03c      	b.n	800d9a4 <UART_SetConfig+0xa3c>
 800d92a:	bf00      	nop
 800d92c:	003d0900 	.word	0x003d0900
 800d930:	08021a48 	.word	0x08021a48
 800d934:	58024400 	.word	0x58024400
 800d938:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d93c:	f7fb fc2e 	bl	800919c <HAL_RCC_GetPCLK2Freq>
 800d940:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d942:	e02f      	b.n	800d9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d944:	f107 0314 	add.w	r3, r7, #20
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fd f865 	bl	800aa18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d952:	e027      	b.n	800d9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d954:	f107 0308 	add.w	r3, r7, #8
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fd f9b1 	bl	800acc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d962:	e01f      	b.n	800d9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d964:	4b2c      	ldr	r3, [pc, #176]	; (800da18 <UART_SetConfig+0xab0>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f003 0320 	and.w	r3, r3, #32
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d009      	beq.n	800d984 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d970:	4b29      	ldr	r3, [pc, #164]	; (800da18 <UART_SetConfig+0xab0>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	08db      	lsrs	r3, r3, #3
 800d976:	f003 0303 	and.w	r3, r3, #3
 800d97a:	4a28      	ldr	r2, [pc, #160]	; (800da1c <UART_SetConfig+0xab4>)
 800d97c:	fa22 f303 	lsr.w	r3, r2, r3
 800d980:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d982:	e00f      	b.n	800d9a4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d984:	4b25      	ldr	r3, [pc, #148]	; (800da1c <UART_SetConfig+0xab4>)
 800d986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d988:	e00c      	b.n	800d9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d98a:	4b25      	ldr	r3, [pc, #148]	; (800da20 <UART_SetConfig+0xab8>)
 800d98c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d98e:	e009      	b.n	800d9a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d996:	e005      	b.n	800d9a4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d998:	2300      	movs	r3, #0
 800d99a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d9a2:	bf00      	nop
    }

    if (pclk != 0U)
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d021      	beq.n	800d9ee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ae:	4a1d      	ldr	r2, [pc, #116]	; (800da24 <UART_SetConfig+0xabc>)
 800d9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	085b      	lsrs	r3, r3, #1
 800d9c2:	441a      	add	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d2:	2b0f      	cmp	r3, #15
 800d9d4:	d908      	bls.n	800d9e8 <UART_SetConfig+0xa80>
 800d9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9dc:	d204      	bcs.n	800d9e8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9e4:	60da      	str	r2, [r3, #12]
 800d9e6:	e002      	b.n	800d9ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800da0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3738      	adds	r7, #56	; 0x38
 800da12:	46bd      	mov	sp, r7
 800da14:	bdb0      	pop	{r4, r5, r7, pc}
 800da16:	bf00      	nop
 800da18:	58024400 	.word	0x58024400
 800da1c:	03d09000 	.word	0x03d09000
 800da20:	003d0900 	.word	0x003d0900
 800da24:	08021a48 	.word	0x08021a48

0800da28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da34:	f003 0301 	and.w	r3, r3, #1
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00a      	beq.n	800da52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	430a      	orrs	r2, r1
 800da50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da56:	f003 0302 	and.w	r3, r3, #2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00a      	beq.n	800da74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	430a      	orrs	r2, r1
 800da72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da78:	f003 0304 	and.w	r3, r3, #4
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00a      	beq.n	800da96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	430a      	orrs	r2, r1
 800da94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da9a:	f003 0308 	and.w	r3, r3, #8
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00a      	beq.n	800dab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	430a      	orrs	r2, r1
 800dab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dabc:	f003 0310 	and.w	r3, r3, #16
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00a      	beq.n	800dada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	689b      	ldr	r3, [r3, #8]
 800daca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	430a      	orrs	r2, r1
 800dad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dade:	f003 0320 	and.w	r3, r3, #32
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	430a      	orrs	r2, r1
 800dafa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db04:	2b00      	cmp	r3, #0
 800db06:	d01a      	beq.n	800db3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	430a      	orrs	r2, r1
 800db1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db26:	d10a      	bne.n	800db3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	430a      	orrs	r2, r1
 800db3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00a      	beq.n	800db60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	430a      	orrs	r2, r1
 800db5e:	605a      	str	r2, [r3, #4]
  }
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b086      	sub	sp, #24
 800db70:	af02      	add	r7, sp, #8
 800db72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db7c:	f7f5 f86a 	bl	8002c54 <HAL_GetTick>
 800db80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f003 0308 	and.w	r3, r3, #8
 800db8c:	2b08      	cmp	r3, #8
 800db8e:	d10e      	bne.n	800dbae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2200      	movs	r2, #0
 800db9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f82f 	bl	800dc02 <UART_WaitOnFlagUntilTimeout>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d001      	beq.n	800dbae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	e025      	b.n	800dbfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f003 0304 	and.w	r3, r3, #4
 800dbb8:	2b04      	cmp	r3, #4
 800dbba:	d10e      	bne.n	800dbda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dbbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 f819 	bl	800dc02 <UART_WaitOnFlagUntilTimeout>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbd6:	2303      	movs	r3, #3
 800dbd8:	e00f      	b.n	800dbfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2220      	movs	r2, #32
 800dbe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	603b      	str	r3, [r7, #0]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc12:	e062      	b.n	800dcda <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc1a:	d05e      	beq.n	800dcda <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc1c:	f7f5 f81a 	bl	8002c54 <HAL_GetTick>
 800dc20:	4602      	mov	r2, r0
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	69ba      	ldr	r2, [r7, #24]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d302      	bcc.n	800dc32 <UART_WaitOnFlagUntilTimeout+0x30>
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d11d      	bne.n	800dc6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dc40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689a      	ldr	r2, [r3, #8]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f022 0201 	bic.w	r2, r2, #1
 800dc50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2220      	movs	r2, #32
 800dc56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2220      	movs	r2, #32
 800dc5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dc6a:	2303      	movs	r3, #3
 800dc6c:	e045      	b.n	800dcfa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f003 0304 	and.w	r3, r3, #4
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d02e      	beq.n	800dcda <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	69db      	ldr	r3, [r3, #28]
 800dc82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc8a:	d126      	bne.n	800dcda <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dca4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	689a      	ldr	r2, [r3, #8]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f022 0201 	bic.w	r2, r2, #1
 800dcb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2220      	movs	r2, #32
 800dcba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2220      	movs	r2, #32
 800dcc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2220      	movs	r2, #32
 800dcca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e00f      	b.n	800dcfa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	69da      	ldr	r2, [r3, #28]
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	4013      	ands	r3, r2
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	bf0c      	ite	eq
 800dcea:	2301      	moveq	r3, #1
 800dcec:	2300      	movne	r3, #0
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d08d      	beq.n	800dc14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd02:	b480      	push	{r7}
 800dd04:	b085      	sub	sp, #20
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d101      	bne.n	800dd18 <HAL_UARTEx_DisableFifoMode+0x16>
 800dd14:	2302      	movs	r3, #2
 800dd16:	e027      	b.n	800dd68 <HAL_UARTEx_DisableFifoMode+0x66>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2224      	movs	r2, #36	; 0x24
 800dd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f022 0201 	bic.w	r2, r2, #1
 800dd3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dd46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	68fa      	ldr	r2, [r7, #12]
 800dd54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2220      	movs	r2, #32
 800dd5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3714      	adds	r7, #20
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d101      	bne.n	800dd8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd88:	2302      	movs	r3, #2
 800dd8a:	e02d      	b.n	800dde8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2224      	movs	r2, #36	; 0x24
 800dd98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f022 0201 	bic.w	r2, r2, #1
 800ddb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	430a      	orrs	r2, r1
 800ddc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f84f 	bl	800de6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2220      	movs	r2, #32
 800ddda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de00:	2b01      	cmp	r3, #1
 800de02:	d101      	bne.n	800de08 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de04:	2302      	movs	r3, #2
 800de06:	e02d      	b.n	800de64 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2201      	movs	r2, #1
 800de0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2224      	movs	r2, #36	; 0x24
 800de14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f022 0201 	bic.w	r2, r2, #1
 800de2e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	683a      	ldr	r2, [r7, #0]
 800de40:	430a      	orrs	r2, r1
 800de42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 f811 	bl	800de6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2220      	movs	r2, #32
 800de56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d108      	bne.n	800de8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2201      	movs	r2, #1
 800de80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2201      	movs	r2, #1
 800de88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de8c:	e031      	b.n	800def2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de8e:	2310      	movs	r3, #16
 800de90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de92:	2310      	movs	r3, #16
 800de94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	0e5b      	lsrs	r3, r3, #25
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	f003 0307 	and.w	r3, r3, #7
 800dea4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	0f5b      	lsrs	r3, r3, #29
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	f003 0307 	and.w	r3, r3, #7
 800deb4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800deb6:	7bbb      	ldrb	r3, [r7, #14]
 800deb8:	7b3a      	ldrb	r2, [r7, #12]
 800deba:	4911      	ldr	r1, [pc, #68]	; (800df00 <UARTEx_SetNbDataToProcess+0x94>)
 800debc:	5c8a      	ldrb	r2, [r1, r2]
 800debe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dec2:	7b3a      	ldrb	r2, [r7, #12]
 800dec4:	490f      	ldr	r1, [pc, #60]	; (800df04 <UARTEx_SetNbDataToProcess+0x98>)
 800dec6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dec8:	fb93 f3f2 	sdiv	r3, r3, r2
 800decc:	b29a      	uxth	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ded4:	7bfb      	ldrb	r3, [r7, #15]
 800ded6:	7b7a      	ldrb	r2, [r7, #13]
 800ded8:	4909      	ldr	r1, [pc, #36]	; (800df00 <UARTEx_SetNbDataToProcess+0x94>)
 800deda:	5c8a      	ldrb	r2, [r1, r2]
 800dedc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dee0:	7b7a      	ldrb	r2, [r7, #13]
 800dee2:	4908      	ldr	r1, [pc, #32]	; (800df04 <UARTEx_SetNbDataToProcess+0x98>)
 800dee4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dee6:	fb93 f3f2 	sdiv	r3, r3, r2
 800deea:	b29a      	uxth	r2, r3
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800def2:	bf00      	nop
 800def4:	3714      	adds	r7, #20
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	08021a60 	.word	0x08021a60
 800df04:	08021a68 	.word	0x08021a68

0800df08 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800df08:	b480      	push	{r7}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df1c:	683a      	ldr	r2, [r7, #0]
 800df1e:	6812      	ldr	r2, [r2, #0]
 800df20:	f023 0101 	bic.w	r1, r3, #1
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	2b08      	cmp	r3, #8
 800df30:	d102      	bne.n	800df38 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800df32:	2340      	movs	r3, #64	; 0x40
 800df34:	617b      	str	r3, [r7, #20]
 800df36:	e001      	b.n	800df3c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800df38:	2300      	movs	r3, #0
 800df3a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800df48:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800df4e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800df54:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800df5a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800df60:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800df66:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800df6c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800df72:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800df78:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800df7e:	4313      	orrs	r3, r2
 800df80:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df86:	693a      	ldr	r2, [r7, #16]
 800df88:	4313      	orrs	r3, r2
 800df8a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	4313      	orrs	r3, r2
 800df94:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9a:	693a      	ldr	r2, [r7, #16]
 800df9c:	4313      	orrs	r3, r2
 800df9e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800dfa0:	4b20      	ldr	r3, [pc, #128]	; (800e024 <FMC_NORSRAM_Init+0x11c>)
 800dfa2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dfaa:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dfb2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800dfba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	43db      	mvns	r3, r3
 800dfca:	ea02 0103 	and.w	r1, r2, r3
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	4319      	orrs	r1, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfe4:	d10c      	bne.n	800e000 <FMC_NORSRAM_Init+0xf8>
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d008      	beq.n	800e000 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffa:	431a      	orrs	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d006      	beq.n	800e016 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e010:	431a      	orrs	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	371c      	adds	r7, #28
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	0008fb7f 	.word	0x0008fb7f

0800e028 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e028:	b480      	push	{r7}
 800e02a:	b087      	sub	sp, #28
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	1c5a      	adds	r2, r3, #1
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e03e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	011b      	lsls	r3, r3, #4
 800e04c:	431a      	orrs	r2, r3
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	021b      	lsls	r3, r3, #8
 800e054:	431a      	orrs	r2, r3
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	041b      	lsls	r3, r3, #16
 800e05c:	431a      	orrs	r2, r3
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	3b01      	subs	r3, #1
 800e064:	051b      	lsls	r3, r3, #20
 800e066:	431a      	orrs	r2, r3
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	3b02      	subs	r3, #2
 800e06e:	061b      	lsls	r3, r3, #24
 800e070:	431a      	orrs	r2, r3
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	4313      	orrs	r3, r2
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	3201      	adds	r2, #1
 800e07c:	4319      	orrs	r1, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e08c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e090:	d113      	bne.n	800e0ba <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e09a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	051b      	lsls	r3, r3, #20
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	431a      	orrs	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e0ba:	2300      	movs	r3, #0
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	371c      	adds	r7, #28
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b085      	sub	sp, #20
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e0dc:	d11d      	bne.n	800e11a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e0e6:	4b13      	ldr	r3, [pc, #76]	; (800e134 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	6811      	ldr	r1, [r2, #0]
 800e0ee:	68ba      	ldr	r2, [r7, #8]
 800e0f0:	6852      	ldr	r2, [r2, #4]
 800e0f2:	0112      	lsls	r2, r2, #4
 800e0f4:	4311      	orrs	r1, r2
 800e0f6:	68ba      	ldr	r2, [r7, #8]
 800e0f8:	6892      	ldr	r2, [r2, #8]
 800e0fa:	0212      	lsls	r2, r2, #8
 800e0fc:	4311      	orrs	r1, r2
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	6992      	ldr	r2, [r2, #24]
 800e102:	4311      	orrs	r1, r2
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	68d2      	ldr	r2, [r2, #12]
 800e108:	0412      	lsls	r2, r2, #16
 800e10a:	430a      	orrs	r2, r1
 800e10c:	ea43 0102 	orr.w	r1, r3, r2
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e118:	e005      	b.n	800e126 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3714      	adds	r7, #20
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr
 800e134:	cff00000 	.word	0xcff00000

0800e138 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e13e:	4b8d      	ldr	r3, [pc, #564]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e140:	22c0      	movs	r2, #192	; 0xc0
 800e142:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e144:	4b8b      	ldr	r3, [pc, #556]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e146:	22a8      	movs	r2, #168	; 0xa8
 800e148:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800e14a:	4b8a      	ldr	r3, [pc, #552]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e14c:	2201      	movs	r2, #1
 800e14e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 800e150:	4b88      	ldr	r3, [pc, #544]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e152:	2201      	movs	r2, #1
 800e154:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e156:	4b88      	ldr	r3, [pc, #544]	; (800e378 <MX_LWIP_Init+0x240>)
 800e158:	22ff      	movs	r2, #255	; 0xff
 800e15a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e15c:	4b86      	ldr	r3, [pc, #536]	; (800e378 <MX_LWIP_Init+0x240>)
 800e15e:	22ff      	movs	r2, #255	; 0xff
 800e160:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800e162:	4b85      	ldr	r3, [pc, #532]	; (800e378 <MX_LWIP_Init+0x240>)
 800e164:	22ff      	movs	r2, #255	; 0xff
 800e166:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e168:	4b83      	ldr	r3, [pc, #524]	; (800e378 <MX_LWIP_Init+0x240>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800e16e:	4b83      	ldr	r3, [pc, #524]	; (800e37c <MX_LWIP_Init+0x244>)
 800e170:	2200      	movs	r2, #0
 800e172:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800e174:	4b81      	ldr	r3, [pc, #516]	; (800e37c <MX_LWIP_Init+0x244>)
 800e176:	2200      	movs	r2, #0
 800e178:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800e17a:	4b80      	ldr	r3, [pc, #512]	; (800e37c <MX_LWIP_Init+0x244>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800e180:	4b7e      	ldr	r3, [pc, #504]	; (800e37c <MX_LWIP_Init+0x244>)
 800e182:	2200      	movs	r2, #0
 800e184:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800e186:	f001 feb9 	bl	800fefc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e18a:	4b7a      	ldr	r3, [pc, #488]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	061a      	lsls	r2, r3, #24
 800e190:	4b78      	ldr	r3, [pc, #480]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e192:	785b      	ldrb	r3, [r3, #1]
 800e194:	041b      	lsls	r3, r3, #16
 800e196:	431a      	orrs	r2, r3
 800e198:	4b76      	ldr	r3, [pc, #472]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e19a:	789b      	ldrb	r3, [r3, #2]
 800e19c:	021b      	lsls	r3, r3, #8
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	4a74      	ldr	r2, [pc, #464]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1a2:	78d2      	ldrb	r2, [r2, #3]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	061a      	lsls	r2, r3, #24
 800e1a8:	4b72      	ldr	r3, [pc, #456]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	0619      	lsls	r1, r3, #24
 800e1ae:	4b71      	ldr	r3, [pc, #452]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1b0:	785b      	ldrb	r3, [r3, #1]
 800e1b2:	041b      	lsls	r3, r3, #16
 800e1b4:	4319      	orrs	r1, r3
 800e1b6:	4b6f      	ldr	r3, [pc, #444]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1b8:	789b      	ldrb	r3, [r3, #2]
 800e1ba:	021b      	lsls	r3, r3, #8
 800e1bc:	430b      	orrs	r3, r1
 800e1be:	496d      	ldr	r1, [pc, #436]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1c0:	78c9      	ldrb	r1, [r1, #3]
 800e1c2:	430b      	orrs	r3, r1
 800e1c4:	021b      	lsls	r3, r3, #8
 800e1c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1ca:	431a      	orrs	r2, r3
 800e1cc:	4b69      	ldr	r3, [pc, #420]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	0619      	lsls	r1, r3, #24
 800e1d2:	4b68      	ldr	r3, [pc, #416]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1d4:	785b      	ldrb	r3, [r3, #1]
 800e1d6:	041b      	lsls	r3, r3, #16
 800e1d8:	4319      	orrs	r1, r3
 800e1da:	4b66      	ldr	r3, [pc, #408]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1dc:	789b      	ldrb	r3, [r3, #2]
 800e1de:	021b      	lsls	r3, r3, #8
 800e1e0:	430b      	orrs	r3, r1
 800e1e2:	4964      	ldr	r1, [pc, #400]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1e4:	78c9      	ldrb	r1, [r1, #3]
 800e1e6:	430b      	orrs	r3, r1
 800e1e8:	0a1b      	lsrs	r3, r3, #8
 800e1ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e1ee:	431a      	orrs	r2, r3
 800e1f0:	4b60      	ldr	r3, [pc, #384]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	0619      	lsls	r1, r3, #24
 800e1f6:	4b5f      	ldr	r3, [pc, #380]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e1f8:	785b      	ldrb	r3, [r3, #1]
 800e1fa:	041b      	lsls	r3, r3, #16
 800e1fc:	4319      	orrs	r1, r3
 800e1fe:	4b5d      	ldr	r3, [pc, #372]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e200:	789b      	ldrb	r3, [r3, #2]
 800e202:	021b      	lsls	r3, r3, #8
 800e204:	430b      	orrs	r3, r1
 800e206:	495b      	ldr	r1, [pc, #364]	; (800e374 <MX_LWIP_Init+0x23c>)
 800e208:	78c9      	ldrb	r1, [r1, #3]
 800e20a:	430b      	orrs	r3, r1
 800e20c:	0e1b      	lsrs	r3, r3, #24
 800e20e:	4313      	orrs	r3, r2
 800e210:	4a5b      	ldr	r2, [pc, #364]	; (800e380 <MX_LWIP_Init+0x248>)
 800e212:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e214:	4b58      	ldr	r3, [pc, #352]	; (800e378 <MX_LWIP_Init+0x240>)
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	061a      	lsls	r2, r3, #24
 800e21a:	4b57      	ldr	r3, [pc, #348]	; (800e378 <MX_LWIP_Init+0x240>)
 800e21c:	785b      	ldrb	r3, [r3, #1]
 800e21e:	041b      	lsls	r3, r3, #16
 800e220:	431a      	orrs	r2, r3
 800e222:	4b55      	ldr	r3, [pc, #340]	; (800e378 <MX_LWIP_Init+0x240>)
 800e224:	789b      	ldrb	r3, [r3, #2]
 800e226:	021b      	lsls	r3, r3, #8
 800e228:	4313      	orrs	r3, r2
 800e22a:	4a53      	ldr	r2, [pc, #332]	; (800e378 <MX_LWIP_Init+0x240>)
 800e22c:	78d2      	ldrb	r2, [r2, #3]
 800e22e:	4313      	orrs	r3, r2
 800e230:	061a      	lsls	r2, r3, #24
 800e232:	4b51      	ldr	r3, [pc, #324]	; (800e378 <MX_LWIP_Init+0x240>)
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	0619      	lsls	r1, r3, #24
 800e238:	4b4f      	ldr	r3, [pc, #316]	; (800e378 <MX_LWIP_Init+0x240>)
 800e23a:	785b      	ldrb	r3, [r3, #1]
 800e23c:	041b      	lsls	r3, r3, #16
 800e23e:	4319      	orrs	r1, r3
 800e240:	4b4d      	ldr	r3, [pc, #308]	; (800e378 <MX_LWIP_Init+0x240>)
 800e242:	789b      	ldrb	r3, [r3, #2]
 800e244:	021b      	lsls	r3, r3, #8
 800e246:	430b      	orrs	r3, r1
 800e248:	494b      	ldr	r1, [pc, #300]	; (800e378 <MX_LWIP_Init+0x240>)
 800e24a:	78c9      	ldrb	r1, [r1, #3]
 800e24c:	430b      	orrs	r3, r1
 800e24e:	021b      	lsls	r3, r3, #8
 800e250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e254:	431a      	orrs	r2, r3
 800e256:	4b48      	ldr	r3, [pc, #288]	; (800e378 <MX_LWIP_Init+0x240>)
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	0619      	lsls	r1, r3, #24
 800e25c:	4b46      	ldr	r3, [pc, #280]	; (800e378 <MX_LWIP_Init+0x240>)
 800e25e:	785b      	ldrb	r3, [r3, #1]
 800e260:	041b      	lsls	r3, r3, #16
 800e262:	4319      	orrs	r1, r3
 800e264:	4b44      	ldr	r3, [pc, #272]	; (800e378 <MX_LWIP_Init+0x240>)
 800e266:	789b      	ldrb	r3, [r3, #2]
 800e268:	021b      	lsls	r3, r3, #8
 800e26a:	430b      	orrs	r3, r1
 800e26c:	4942      	ldr	r1, [pc, #264]	; (800e378 <MX_LWIP_Init+0x240>)
 800e26e:	78c9      	ldrb	r1, [r1, #3]
 800e270:	430b      	orrs	r3, r1
 800e272:	0a1b      	lsrs	r3, r3, #8
 800e274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e278:	431a      	orrs	r2, r3
 800e27a:	4b3f      	ldr	r3, [pc, #252]	; (800e378 <MX_LWIP_Init+0x240>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	0619      	lsls	r1, r3, #24
 800e280:	4b3d      	ldr	r3, [pc, #244]	; (800e378 <MX_LWIP_Init+0x240>)
 800e282:	785b      	ldrb	r3, [r3, #1]
 800e284:	041b      	lsls	r3, r3, #16
 800e286:	4319      	orrs	r1, r3
 800e288:	4b3b      	ldr	r3, [pc, #236]	; (800e378 <MX_LWIP_Init+0x240>)
 800e28a:	789b      	ldrb	r3, [r3, #2]
 800e28c:	021b      	lsls	r3, r3, #8
 800e28e:	430b      	orrs	r3, r1
 800e290:	4939      	ldr	r1, [pc, #228]	; (800e378 <MX_LWIP_Init+0x240>)
 800e292:	78c9      	ldrb	r1, [r1, #3]
 800e294:	430b      	orrs	r3, r1
 800e296:	0e1b      	lsrs	r3, r3, #24
 800e298:	4313      	orrs	r3, r2
 800e29a:	4a3a      	ldr	r2, [pc, #232]	; (800e384 <MX_LWIP_Init+0x24c>)
 800e29c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e29e:	4b37      	ldr	r3, [pc, #220]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	061a      	lsls	r2, r3, #24
 800e2a4:	4b35      	ldr	r3, [pc, #212]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2a6:	785b      	ldrb	r3, [r3, #1]
 800e2a8:	041b      	lsls	r3, r3, #16
 800e2aa:	431a      	orrs	r2, r3
 800e2ac:	4b33      	ldr	r3, [pc, #204]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2ae:	789b      	ldrb	r3, [r3, #2]
 800e2b0:	021b      	lsls	r3, r3, #8
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	4a31      	ldr	r2, [pc, #196]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2b6:	78d2      	ldrb	r2, [r2, #3]
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	061a      	lsls	r2, r3, #24
 800e2bc:	4b2f      	ldr	r3, [pc, #188]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	0619      	lsls	r1, r3, #24
 800e2c2:	4b2e      	ldr	r3, [pc, #184]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2c4:	785b      	ldrb	r3, [r3, #1]
 800e2c6:	041b      	lsls	r3, r3, #16
 800e2c8:	4319      	orrs	r1, r3
 800e2ca:	4b2c      	ldr	r3, [pc, #176]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2cc:	789b      	ldrb	r3, [r3, #2]
 800e2ce:	021b      	lsls	r3, r3, #8
 800e2d0:	430b      	orrs	r3, r1
 800e2d2:	492a      	ldr	r1, [pc, #168]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2d4:	78c9      	ldrb	r1, [r1, #3]
 800e2d6:	430b      	orrs	r3, r1
 800e2d8:	021b      	lsls	r3, r3, #8
 800e2da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e2de:	431a      	orrs	r2, r3
 800e2e0:	4b26      	ldr	r3, [pc, #152]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	0619      	lsls	r1, r3, #24
 800e2e6:	4b25      	ldr	r3, [pc, #148]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2e8:	785b      	ldrb	r3, [r3, #1]
 800e2ea:	041b      	lsls	r3, r3, #16
 800e2ec:	4319      	orrs	r1, r3
 800e2ee:	4b23      	ldr	r3, [pc, #140]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2f0:	789b      	ldrb	r3, [r3, #2]
 800e2f2:	021b      	lsls	r3, r3, #8
 800e2f4:	430b      	orrs	r3, r1
 800e2f6:	4921      	ldr	r1, [pc, #132]	; (800e37c <MX_LWIP_Init+0x244>)
 800e2f8:	78c9      	ldrb	r1, [r1, #3]
 800e2fa:	430b      	orrs	r3, r1
 800e2fc:	0a1b      	lsrs	r3, r3, #8
 800e2fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e302:	431a      	orrs	r2, r3
 800e304:	4b1d      	ldr	r3, [pc, #116]	; (800e37c <MX_LWIP_Init+0x244>)
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	0619      	lsls	r1, r3, #24
 800e30a:	4b1c      	ldr	r3, [pc, #112]	; (800e37c <MX_LWIP_Init+0x244>)
 800e30c:	785b      	ldrb	r3, [r3, #1]
 800e30e:	041b      	lsls	r3, r3, #16
 800e310:	4319      	orrs	r1, r3
 800e312:	4b1a      	ldr	r3, [pc, #104]	; (800e37c <MX_LWIP_Init+0x244>)
 800e314:	789b      	ldrb	r3, [r3, #2]
 800e316:	021b      	lsls	r3, r3, #8
 800e318:	430b      	orrs	r3, r1
 800e31a:	4918      	ldr	r1, [pc, #96]	; (800e37c <MX_LWIP_Init+0x244>)
 800e31c:	78c9      	ldrb	r1, [r1, #3]
 800e31e:	430b      	orrs	r3, r1
 800e320:	0e1b      	lsrs	r3, r3, #24
 800e322:	4313      	orrs	r3, r2
 800e324:	4a18      	ldr	r2, [pc, #96]	; (800e388 <MX_LWIP_Init+0x250>)
 800e326:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800e328:	4b18      	ldr	r3, [pc, #96]	; (800e38c <MX_LWIP_Init+0x254>)
 800e32a:	9302      	str	r3, [sp, #8]
 800e32c:	4b18      	ldr	r3, [pc, #96]	; (800e390 <MX_LWIP_Init+0x258>)
 800e32e:	9301      	str	r3, [sp, #4]
 800e330:	2300      	movs	r3, #0
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	4b14      	ldr	r3, [pc, #80]	; (800e388 <MX_LWIP_Init+0x250>)
 800e336:	4a13      	ldr	r2, [pc, #76]	; (800e384 <MX_LWIP_Init+0x24c>)
 800e338:	4911      	ldr	r1, [pc, #68]	; (800e380 <MX_LWIP_Init+0x248>)
 800e33a:	4816      	ldr	r0, [pc, #88]	; (800e394 <MX_LWIP_Init+0x25c>)
 800e33c:	f003 fb90 	bl	8011a60 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e340:	4814      	ldr	r0, [pc, #80]	; (800e394 <MX_LWIP_Init+0x25c>)
 800e342:	f003 fd3f 	bl	8011dc4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800e346:	4b13      	ldr	r3, [pc, #76]	; (800e394 <MX_LWIP_Init+0x25c>)
 800e348:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e34c:	089b      	lsrs	r3, r3, #2
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2b00      	cmp	r3, #0
 800e356:	d003      	beq.n	800e360 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800e358:	480e      	ldr	r0, [pc, #56]	; (800e394 <MX_LWIP_Init+0x25c>)
 800e35a:	f003 fd43 	bl	8011de4 <netif_set_up>
 800e35e:	e002      	b.n	800e366 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800e360:	480c      	ldr	r0, [pc, #48]	; (800e394 <MX_LWIP_Init+0x25c>)
 800e362:	f003 fdab 	bl	8011ebc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e366:	490c      	ldr	r1, [pc, #48]	; (800e398 <MX_LWIP_Init+0x260>)
 800e368:	480a      	ldr	r0, [pc, #40]	; (800e394 <MX_LWIP_Init+0x25c>)
 800e36a:	f003 fe3d 	bl	8011fe8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e36e:	bf00      	nop
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	24000d4c 	.word	0x24000d4c
 800e378:	24000d48 	.word	0x24000d48
 800e37c:	24000d08 	.word	0x24000d08
 800e380:	24000d40 	.word	0x24000d40
 800e384:	24000d50 	.word	0x24000d50
 800e388:	24000d54 	.word	0x24000d54
 800e38c:	0800f871 	.word	0x0800f871
 800e390:	0800e76d 	.word	0x0800e76d
 800e394:	24000d0c 	.word	0x24000d0c
 800e398:	0800e39d 	.word	0x0800e39d

0800e39c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e3a4:	bf00      	nop
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b08e      	sub	sp, #56	; 0x38
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
 800e3c0:	605a      	str	r2, [r3, #4]
 800e3c2:	609a      	str	r2, [r3, #8]
 800e3c4:	60da      	str	r2, [r3, #12]
 800e3c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a4d      	ldr	r2, [pc, #308]	; (800e504 <HAL_ETH_MspInit+0x154>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	f040 8093 	bne.w	800e4fa <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800e3d4:	4b4c      	ldr	r3, [pc, #304]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e3d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e3da:	4a4b      	ldr	r2, [pc, #300]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e3dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e3e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e3e4:	4b48      	ldr	r3, [pc, #288]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e3e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e3ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3ee:	623b      	str	r3, [r7, #32]
 800e3f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800e3f2:	4b45      	ldr	r3, [pc, #276]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e3f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e3f8:	4a43      	ldr	r2, [pc, #268]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e3fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e402:	4b41      	ldr	r3, [pc, #260]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e40c:	61fb      	str	r3, [r7, #28]
 800e40e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800e410:	4b3d      	ldr	r3, [pc, #244]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e412:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e416:	4a3c      	ldr	r2, [pc, #240]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e41c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e420:	4b39      	ldr	r3, [pc, #228]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e422:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e42a:	61bb      	str	r3, [r7, #24]
 800e42c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e42e:	4b36      	ldr	r3, [pc, #216]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e434:	4a34      	ldr	r2, [pc, #208]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e43a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e43e:	4b32      	ldr	r3, [pc, #200]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e448:	617b      	str	r3, [r7, #20]
 800e44a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e44c:	4b2e      	ldr	r3, [pc, #184]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e44e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e452:	4a2d      	ldr	r2, [pc, #180]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e454:	f043 0304 	orr.w	r3, r3, #4
 800e458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e45c:	4b2a      	ldr	r3, [pc, #168]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e45e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e462:	f003 0304 	and.w	r3, r3, #4
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e46a:	4b27      	ldr	r3, [pc, #156]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e46c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e470:	4a25      	ldr	r2, [pc, #148]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e472:	f043 0301 	orr.w	r3, r3, #1
 800e476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e47a:	4b23      	ldr	r3, [pc, #140]	; (800e508 <HAL_ETH_MspInit+0x158>)
 800e47c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e480:	f003 0301 	and.w	r3, r3, #1
 800e484:	60fb      	str	r3, [r7, #12]
 800e486:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800e488:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e48e:	2302      	movs	r3, #2
 800e490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e492:	2300      	movs	r3, #0
 800e494:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e496:	2303      	movs	r3, #3
 800e498:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e49a:	230b      	movs	r3, #11
 800e49c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e49e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	4819      	ldr	r0, [pc, #100]	; (800e50c <HAL_ETH_MspInit+0x15c>)
 800e4a6:	f7f9 fc87 	bl	8007db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 800e4aa:	2332      	movs	r3, #50	; 0x32
 800e4ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4ae:	2302      	movs	r3, #2
 800e4b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4b6:	2303      	movs	r3, #3
 800e4b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4ba:	230b      	movs	r3, #11
 800e4bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e4be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4812      	ldr	r0, [pc, #72]	; (800e510 <HAL_ETH_MspInit+0x160>)
 800e4c6:	f7f9 fc77 	bl	8007db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 800e4ca:	2386      	movs	r3, #134	; 0x86
 800e4cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4d6:	2303      	movs	r3, #3
 800e4d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4da:	230b      	movs	r3, #11
 800e4dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	480b      	ldr	r0, [pc, #44]	; (800e514 <HAL_ETH_MspInit+0x164>)
 800e4e6:	f7f9 fc67 	bl	8007db8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	203d      	movs	r0, #61	; 0x3d
 800e4f0:	f7f5 fd8f 	bl	8004012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e4f4:	203d      	movs	r0, #61	; 0x3d
 800e4f6:	f7f5 fda6 	bl	8004046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e4fa:	bf00      	nop
 800e4fc:	3738      	adds	r7, #56	; 0x38
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	40028000 	.word	0x40028000
 800e508:	58024400 	.word	0x58024400
 800e50c:	58021800 	.word	0x58021800
 800e510:	58020800 	.word	0x58020800
 800e514:	58020000 	.word	0x58020000

0800e518 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800e520:	2300      	movs	r3, #0
 800e522:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e528:	4b4a      	ldr	r3, [pc, #296]	; (800e654 <low_level_init+0x13c>)
 800e52a:	4a4b      	ldr	r2, [pc, #300]	; (800e658 <low_level_init+0x140>)
 800e52c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800e52e:	2300      	movs	r3, #0
 800e530:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800e532:	2380      	movs	r3, #128	; 0x80
 800e534:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800e536:	23e1      	movs	r3, #225	; 0xe1
 800e538:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800e53a:	2300      	movs	r3, #0
 800e53c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800e53e:	2300      	movs	r3, #0
 800e540:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800e542:	2300      	movs	r3, #0
 800e544:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800e546:	4a43      	ldr	r2, [pc, #268]	; (800e654 <low_level_init+0x13c>)
 800e548:	f107 030c 	add.w	r3, r7, #12
 800e54c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800e54e:	4b41      	ldr	r3, [pc, #260]	; (800e654 <low_level_init+0x13c>)
 800e550:	2201      	movs	r2, #1
 800e552:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800e554:	4b3f      	ldr	r3, [pc, #252]	; (800e654 <low_level_init+0x13c>)
 800e556:	4a41      	ldr	r2, [pc, #260]	; (800e65c <low_level_init+0x144>)
 800e558:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800e55a:	4b3e      	ldr	r3, [pc, #248]	; (800e654 <low_level_init+0x13c>)
 800e55c:	4a40      	ldr	r2, [pc, #256]	; (800e660 <low_level_init+0x148>)
 800e55e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800e560:	4b3c      	ldr	r3, [pc, #240]	; (800e654 <low_level_init+0x13c>)
 800e562:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e566:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e568:	483a      	ldr	r0, [pc, #232]	; (800e654 <low_level_init+0x13c>)
 800e56a:	f7f7 ffe5 	bl	8006538 <HAL_ETH_Init>
 800e56e:	4603      	mov	r3, r0
 800e570:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800e572:	2234      	movs	r2, #52	; 0x34
 800e574:	2100      	movs	r1, #0
 800e576:	483b      	ldr	r0, [pc, #236]	; (800e664 <low_level_init+0x14c>)
 800e578:	f00b feca 	bl	801a310 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800e57c:	4b39      	ldr	r3, [pc, #228]	; (800e664 <low_level_init+0x14c>)
 800e57e:	2221      	movs	r2, #33	; 0x21
 800e580:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800e582:	4b38      	ldr	r3, [pc, #224]	; (800e664 <low_level_init+0x14c>)
 800e584:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e588:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800e58a:	4b36      	ldr	r3, [pc, #216]	; (800e664 <low_level_init+0x14c>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e590:	4835      	ldr	r0, [pc, #212]	; (800e668 <low_level_init+0x150>)
 800e592:	f003 f973 	bl	801187c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2206      	movs	r2, #6
 800e59a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e59e:	4b2d      	ldr	r3, [pc, #180]	; (800e654 <low_level_init+0x13c>)
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	781a      	ldrb	r2, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e5aa:	4b2a      	ldr	r3, [pc, #168]	; (800e654 <low_level_init+0x13c>)
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	785a      	ldrb	r2, [r3, #1]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e5b6:	4b27      	ldr	r3, [pc, #156]	; (800e654 <low_level_init+0x13c>)
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	789a      	ldrb	r2, [r3, #2]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e5c2:	4b24      	ldr	r3, [pc, #144]	; (800e654 <low_level_init+0x13c>)
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	78da      	ldrb	r2, [r3, #3]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e5ce:	4b21      	ldr	r3, [pc, #132]	; (800e654 <low_level_init+0x13c>)
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	791a      	ldrb	r2, [r3, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e5da:	4b1e      	ldr	r3, [pc, #120]	; (800e654 <low_level_init+0x13c>)
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	795a      	ldrb	r2, [r3, #5]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e5ec:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5f4:	f043 030a 	orr.w	r3, r3, #10
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e600:	2300      	movs	r3, #0
 800e602:	617b      	str	r3, [r7, #20]
 800e604:	e00e      	b.n	800e624 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800e60c:	fb02 f303 	mul.w	r3, r2, r3
 800e610:	4a16      	ldr	r2, [pc, #88]	; (800e66c <low_level_init+0x154>)
 800e612:	441a      	add	r2, r3
 800e614:	2300      	movs	r3, #0
 800e616:	6979      	ldr	r1, [r7, #20]
 800e618:	480e      	ldr	r0, [pc, #56]	; (800e654 <low_level_init+0x13c>)
 800e61a:	f7f8 f867 	bl	80066ec <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	3301      	adds	r3, #1
 800e622:	617b      	str	r3, [r7, #20]
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	2b03      	cmp	r3, #3
 800e628:	d9ed      	bls.n	800e606 <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e62a:	4911      	ldr	r1, [pc, #68]	; (800e670 <low_level_init+0x158>)
 800e62c:	4811      	ldr	r0, [pc, #68]	; (800e674 <low_level_init+0x15c>)
 800e62e:	f7f4 f92a 	bl	8002886 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e632:	4810      	ldr	r0, [pc, #64]	; (800e674 <low_level_init+0x15c>)
 800e634:	f7f4 f959 	bl	80028ea <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e638:	7cfb      	ldrb	r3, [r7, #19]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d103      	bne.n	800e646 <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f918 	bl	800e874 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800e644:	e001      	b.n	800e64a <low_level_init+0x132>
    Error_Handler();
 800e646:	f7f3 f963 	bl	8001910 <Error_Handler>
}
 800e64a:	bf00      	nop
 800e64c:	3718      	adds	r7, #24
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	24000e44 	.word	0x24000e44
 800e658:	40028000 	.word	0x40028000
 800e65c:	30040060 	.word	0x30040060
 800e660:	30040000 	.word	0x30040000
 800e664:	24000ecc 	.word	0x24000ecc
 800e668:	08021a70 	.word	0x08021a70
 800e66c:	30040200 	.word	0x30040200
 800e670:	24000410 	.word	0x24000410
 800e674:	24000e24 	.word	0x24000e24

0800e678 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b092      	sub	sp, #72	; 0x48
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800e682:	2300      	movs	r3, #0
 800e684:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800e686:	2300      	movs	r3, #0
 800e688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e68c:	f107 030c 	add.w	r3, r7, #12
 800e690:	2230      	movs	r2, #48	; 0x30
 800e692:	2100      	movs	r1, #0
 800e694:	4618      	mov	r0, r3
 800e696:	f00b fe3b 	bl	801a310 <memset>

  for(q = p; q != NULL; q = q->next)
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	643b      	str	r3, [r7, #64]	; 0x40
 800e69e:	e049      	b.n	800e734 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e6a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6a2:	2b03      	cmp	r3, #3
 800e6a4:	d902      	bls.n	800e6ac <low_level_output+0x34>
      return ERR_IF;
 800e6a6:	f06f 030b 	mvn.w	r3, #11
 800e6aa:	e056      	b.n	800e75a <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800e6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ae:	6859      	ldr	r1, [r3, #4]
 800e6b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	005b      	lsls	r3, r3, #1
 800e6b6:	4413      	add	r3, r2
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e6be:	4413      	add	r3, r2
 800e6c0:	3b3c      	subs	r3, #60	; 0x3c
 800e6c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6c6:	895b      	ldrh	r3, [r3, #10]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	005b      	lsls	r3, r3, #1
 800e6d0:	4413      	add	r3, r2
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e6d8:	4413      	add	r3, r2
 800e6da:	3b38      	subs	r3, #56	; 0x38
 800e6dc:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d012      	beq.n	800e70a <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e6e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6e6:	1e5a      	subs	r2, r3, #1
 800e6e8:	f107 000c 	add.w	r0, r7, #12
 800e6ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	005b      	lsls	r3, r3, #1
 800e6f2:	440b      	add	r3, r1
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	18c1      	adds	r1, r0, r3
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	4413      	add	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e704:	4413      	add	r3, r2
 800e706:	3b34      	subs	r3, #52	; 0x34
 800e708:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10a      	bne.n	800e728 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800e712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e714:	4613      	mov	r3, r2
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	4413      	add	r3, r2
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e720:	4413      	add	r3, r2
 800e722:	3b34      	subs	r3, #52	; 0x34
 800e724:	2200      	movs	r2, #0
 800e726:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e72a:	3301      	adds	r3, #1
 800e72c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e72e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	643b      	str	r3, [r7, #64]	; 0x40
 800e734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e736:	2b00      	cmp	r3, #0
 800e738:	d1b2      	bne.n	800e6a0 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	891b      	ldrh	r3, [r3, #8]
 800e73e:	461a      	mov	r2, r3
 800e740:	4b08      	ldr	r3, [pc, #32]	; (800e764 <low_level_output+0xec>)
 800e742:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e744:	4a07      	ldr	r2, [pc, #28]	; (800e764 <low_level_output+0xec>)
 800e746:	f107 030c 	add.w	r3, r7, #12
 800e74a:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e74c:	2214      	movs	r2, #20
 800e74e:	4905      	ldr	r1, [pc, #20]	; (800e764 <low_level_output+0xec>)
 800e750:	4805      	ldr	r0, [pc, #20]	; (800e768 <low_level_output+0xf0>)
 800e752:	f7f8 f8b8 	bl	80068c6 <HAL_ETH_Transmit>

  return errval;
 800e756:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3748      	adds	r7, #72	; 0x48
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	24000ecc 	.word	0x24000ecc
 800e768:	24000e44 	.word	0x24000e44

0800e76c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d106      	bne.n	800e788 <ethernetif_init+0x1c>
 800e77a:	4b0e      	ldr	r3, [pc, #56]	; (800e7b4 <ethernetif_init+0x48>)
 800e77c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e780:	490d      	ldr	r1, [pc, #52]	; (800e7b8 <ethernetif_init+0x4c>)
 800e782:	480e      	ldr	r0, [pc, #56]	; (800e7bc <ethernetif_init+0x50>)
 800e784:	f00c fcbe 	bl	801b104 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2273      	movs	r2, #115	; 0x73
 800e78c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2274      	movs	r2, #116	; 0x74
 800e794:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4a09      	ldr	r2, [pc, #36]	; (800e7c0 <ethernetif_init+0x54>)
 800e79c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a08      	ldr	r2, [pc, #32]	; (800e7c4 <ethernetif_init+0x58>)
 800e7a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff feb7 	bl	800e518 <low_level_init>

  return ERR_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	0801edc0 	.word	0x0801edc0
 800e7b8:	0801eddc 	.word	0x0801eddc
 800e7bc:	0801edec 	.word	0x0801edec
 800e7c0:	0800f271 	.word	0x0800f271
 800e7c4:	0800e679 	.word	0x0800e679

0800e7c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e7cc:	f7f4 fa42 	bl	8002c54 <HAL_GetTick>
 800e7d0:	4603      	mov	r3, r0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	bd80      	pop	{r7, pc}
	...

0800e7d8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e7dc:	4802      	ldr	r0, [pc, #8]	; (800e7e8 <ETH_PHY_IO_Init+0x10>)
 800e7de:	f7f8 fcd9 	bl	8007194 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	24000e44 	.word	0x24000e44

0800e7ec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	af00      	add	r7, sp, #0
  return 0;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	68f9      	ldr	r1, [r7, #12]
 800e80e:	4807      	ldr	r0, [pc, #28]	; (800e82c <ETH_PHY_IO_ReadReg+0x30>)
 800e810:	f7f8 fa2a 	bl	8006c68 <HAL_ETH_ReadPHYRegister>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d002      	beq.n	800e820 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e81a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e81e:	e000      	b.n	800e822 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e820:	2300      	movs	r3, #0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	24000e44 	.word	0x24000e44

0800e830 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	68ba      	ldr	r2, [r7, #8]
 800e840:	68f9      	ldr	r1, [r7, #12]
 800e842:	4807      	ldr	r0, [pc, #28]	; (800e860 <ETH_PHY_IO_WriteReg+0x30>)
 800e844:	f7f8 fa64 	bl	8006d10 <HAL_ETH_WritePHYRegister>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d002      	beq.n	800e854 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e84e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e852:	e000      	b.n	800e856 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	24000e44 	.word	0x24000e44

0800e864 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e868:	f7f4 f9f4 	bl	8002c54 <HAL_GetTick>
 800e86c:	4603      	mov	r3, r0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b0a0      	sub	sp, #128	; 0x80
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800e87c:	2300      	movs	r3, #0
 800e87e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e880:	2300      	movs	r3, #0
 800e882:	67bb      	str	r3, [r7, #120]	; 0x78
 800e884:	2300      	movs	r3, #0
 800e886:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e888:	483a      	ldr	r0, [pc, #232]	; (800e974 <ethernet_link_check_state+0x100>)
 800e88a:	f7f4 f8d6 	bl	8002a3a <LAN8742_GetLinkState>
 800e88e:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e896:	089b      	lsrs	r3, r3, #2
 800e898:	f003 0301 	and.w	r3, r3, #1
 800e89c:	b2db      	uxtb	r3, r3
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00c      	beq.n	800e8bc <ethernet_link_check_state+0x48>
 800e8a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	dc09      	bgt.n	800e8bc <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 800e8a8:	4833      	ldr	r0, [pc, #204]	; (800e978 <ethernet_link_check_state+0x104>)
 800e8aa:	f7f7 ffbc 	bl	8006826 <HAL_ETH_Stop>
    netif_set_down(netif);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f003 fb04 	bl	8011ebc <netif_set_down>
    netif_set_link_down(netif);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f003 fb67 	bl	8011f88 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800e8ba:	e056      	b.n	800e96a <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8c2:	f003 0304 	and.w	r3, r3, #4
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d14f      	bne.n	800e96a <ethernet_link_check_state+0xf6>
 800e8ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	dd4c      	ble.n	800e96a <ethernet_link_check_state+0xf6>
 800e8d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8d2:	3b02      	subs	r3, #2
 800e8d4:	2b03      	cmp	r3, #3
 800e8d6:	d82b      	bhi.n	800e930 <ethernet_link_check_state+0xbc>
 800e8d8:	a201      	add	r2, pc, #4	; (adr r2, 800e8e0 <ethernet_link_check_state+0x6c>)
 800e8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8de:	bf00      	nop
 800e8e0:	0800e8f1 	.word	0x0800e8f1
 800e8e4:	0800e903 	.word	0x0800e903
 800e8e8:	0800e913 	.word	0x0800e913
 800e8ec:	0800e923 	.word	0x0800e923
      duplex = ETH_FULLDUPLEX_MODE;
 800e8f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e8f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e900:	e017      	b.n	800e932 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800e902:	2300      	movs	r3, #0
 800e904:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e906:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e90a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e90c:	2301      	movs	r3, #1
 800e90e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e910:	e00f      	b.n	800e932 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 800e912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e916:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e918:	2300      	movs	r3, #0
 800e91a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e91c:	2301      	movs	r3, #1
 800e91e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e920:	e007      	b.n	800e932 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 800e922:	2300      	movs	r3, #0
 800e924:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e926:	2300      	movs	r3, #0
 800e928:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e92a:	2301      	movs	r3, #1
 800e92c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e92e:	e000      	b.n	800e932 <ethernet_link_check_state+0xbe>
      break;
 800e930:	bf00      	nop
    if(linkchanged)
 800e932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e934:	2b00      	cmp	r3, #0
 800e936:	d018      	beq.n	800e96a <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e938:	f107 030c 	add.w	r3, r7, #12
 800e93c:	4619      	mov	r1, r3
 800e93e:	480e      	ldr	r0, [pc, #56]	; (800e978 <ethernet_link_check_state+0x104>)
 800e940:	f7f8 fa3a 	bl	8006db8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e946:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800e948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e94a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e94c:	f107 030c 	add.w	r3, r7, #12
 800e950:	4619      	mov	r1, r3
 800e952:	4809      	ldr	r0, [pc, #36]	; (800e978 <ethernet_link_check_state+0x104>)
 800e954:	f7f8 fc04 	bl	8007160 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800e958:	4807      	ldr	r0, [pc, #28]	; (800e978 <ethernet_link_check_state+0x104>)
 800e95a:	f7f7 ff08 	bl	800676e <HAL_ETH_Start>
      netif_set_up(netif);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f003 fa40 	bl	8011de4 <netif_set_up>
      netif_set_link_up(netif);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f003 fadb 	bl	8011f20 <netif_set_link_up>
}
 800e96a:	bf00      	nop
 800e96c:	3780      	adds	r7, #128	; 0x80
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	24000e24 	.word	0x24000e24
 800e978:	24000e44 	.word	0x24000e44

0800e97c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	4603      	mov	r3, r0
 800e984:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e986:	88fb      	ldrh	r3, [r7, #6]
 800e988:	021b      	lsls	r3, r3, #8
 800e98a:	b21a      	sxth	r2, r3
 800e98c:	88fb      	ldrh	r3, [r7, #6]
 800e98e:	0a1b      	lsrs	r3, r3, #8
 800e990:	b29b      	uxth	r3, r3
 800e992:	b21b      	sxth	r3, r3
 800e994:	4313      	orrs	r3, r2
 800e996:	b21b      	sxth	r3, r3
 800e998:	b29b      	uxth	r3, r3
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr

0800e9a6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e9a6:	b480      	push	{r7}
 800e9a8:	b083      	sub	sp, #12
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	061a      	lsls	r2, r3, #24
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	021b      	lsls	r3, r3, #8
 800e9b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e9ba:	431a      	orrs	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	0a1b      	lsrs	r3, r3, #8
 800e9c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e9c4:	431a      	orrs	r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	0e1b      	lsrs	r3, r3, #24
 800e9ca:	4313      	orrs	r3, r2
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e9e0:	4915      	ldr	r1, [pc, #84]	; (800ea38 <etharp_free_entry+0x60>)
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	005b      	lsls	r3, r3, #1
 800e9e8:	4413      	add	r3, r2
 800e9ea:	00db      	lsls	r3, r3, #3
 800e9ec:	440b      	add	r3, r1
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d013      	beq.n	800ea1c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e9f4:	4910      	ldr	r1, [pc, #64]	; (800ea38 <etharp_free_entry+0x60>)
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	005b      	lsls	r3, r3, #1
 800e9fc:	4413      	add	r3, r2
 800e9fe:	00db      	lsls	r3, r3, #3
 800ea00:	440b      	add	r3, r1
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4618      	mov	r0, r3
 800ea06:	f003 fe4f 	bl	80126a8 <pbuf_free>
    arp_table[i].q = NULL;
 800ea0a:	490b      	ldr	r1, [pc, #44]	; (800ea38 <etharp_free_entry+0x60>)
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	4613      	mov	r3, r2
 800ea10:	005b      	lsls	r3, r3, #1
 800ea12:	4413      	add	r3, r2
 800ea14:	00db      	lsls	r3, r3, #3
 800ea16:	440b      	add	r3, r1
 800ea18:	2200      	movs	r2, #0
 800ea1a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ea1c:	4906      	ldr	r1, [pc, #24]	; (800ea38 <etharp_free_entry+0x60>)
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	4613      	mov	r3, r2
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	4413      	add	r3, r2
 800ea26:	00db      	lsls	r3, r3, #3
 800ea28:	440b      	add	r3, r1
 800ea2a:	3314      	adds	r3, #20
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ea30:	bf00      	nop
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	24000638 	.word	0x24000638

0800ea3c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea42:	2300      	movs	r3, #0
 800ea44:	607b      	str	r3, [r7, #4]
 800ea46:	e096      	b.n	800eb76 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ea48:	494f      	ldr	r1, [pc, #316]	; (800eb88 <etharp_tmr+0x14c>)
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	005b      	lsls	r3, r3, #1
 800ea50:	4413      	add	r3, r2
 800ea52:	00db      	lsls	r3, r3, #3
 800ea54:	440b      	add	r3, r1
 800ea56:	3314      	adds	r3, #20
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ea5c:	78fb      	ldrb	r3, [r7, #3]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f000 8086 	beq.w	800eb70 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ea64:	4948      	ldr	r1, [pc, #288]	; (800eb88 <etharp_tmr+0x14c>)
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	005b      	lsls	r3, r3, #1
 800ea6c:	4413      	add	r3, r2
 800ea6e:	00db      	lsls	r3, r3, #3
 800ea70:	440b      	add	r3, r1
 800ea72:	3312      	adds	r3, #18
 800ea74:	881b      	ldrh	r3, [r3, #0]
 800ea76:	3301      	adds	r3, #1
 800ea78:	b298      	uxth	r0, r3
 800ea7a:	4943      	ldr	r1, [pc, #268]	; (800eb88 <etharp_tmr+0x14c>)
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	005b      	lsls	r3, r3, #1
 800ea82:	4413      	add	r3, r2
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	440b      	add	r3, r1
 800ea88:	3312      	adds	r3, #18
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ea8e:	493e      	ldr	r1, [pc, #248]	; (800eb88 <etharp_tmr+0x14c>)
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	4613      	mov	r3, r2
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	4413      	add	r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	440b      	add	r3, r1
 800ea9c:	3312      	adds	r3, #18
 800ea9e:	881b      	ldrh	r3, [r3, #0]
 800eaa0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800eaa4:	d215      	bcs.n	800ead2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eaa6:	4938      	ldr	r1, [pc, #224]	; (800eb88 <etharp_tmr+0x14c>)
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	005b      	lsls	r3, r3, #1
 800eaae:	4413      	add	r3, r2
 800eab0:	00db      	lsls	r3, r3, #3
 800eab2:	440b      	add	r3, r1
 800eab4:	3314      	adds	r3, #20
 800eab6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d10e      	bne.n	800eada <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800eabc:	4932      	ldr	r1, [pc, #200]	; (800eb88 <etharp_tmr+0x14c>)
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	4613      	mov	r3, r2
 800eac2:	005b      	lsls	r3, r3, #1
 800eac4:	4413      	add	r3, r2
 800eac6:	00db      	lsls	r3, r3, #3
 800eac8:	440b      	add	r3, r1
 800eaca:	3312      	adds	r3, #18
 800eacc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eace:	2b04      	cmp	r3, #4
 800ead0:	d903      	bls.n	800eada <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f7ff ff80 	bl	800e9d8 <etharp_free_entry>
 800ead8:	e04a      	b.n	800eb70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800eada:	492b      	ldr	r1, [pc, #172]	; (800eb88 <etharp_tmr+0x14c>)
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	4613      	mov	r3, r2
 800eae0:	005b      	lsls	r3, r3, #1
 800eae2:	4413      	add	r3, r2
 800eae4:	00db      	lsls	r3, r3, #3
 800eae6:	440b      	add	r3, r1
 800eae8:	3314      	adds	r3, #20
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	2b03      	cmp	r3, #3
 800eaee:	d10a      	bne.n	800eb06 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800eaf0:	4925      	ldr	r1, [pc, #148]	; (800eb88 <etharp_tmr+0x14c>)
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	4413      	add	r3, r2
 800eafa:	00db      	lsls	r3, r3, #3
 800eafc:	440b      	add	r3, r1
 800eafe:	3314      	adds	r3, #20
 800eb00:	2204      	movs	r2, #4
 800eb02:	701a      	strb	r2, [r3, #0]
 800eb04:	e034      	b.n	800eb70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800eb06:	4920      	ldr	r1, [pc, #128]	; (800eb88 <etharp_tmr+0x14c>)
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	4613      	mov	r3, r2
 800eb0c:	005b      	lsls	r3, r3, #1
 800eb0e:	4413      	add	r3, r2
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	440b      	add	r3, r1
 800eb14:	3314      	adds	r3, #20
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	2b04      	cmp	r3, #4
 800eb1a:	d10a      	bne.n	800eb32 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800eb1c:	491a      	ldr	r1, [pc, #104]	; (800eb88 <etharp_tmr+0x14c>)
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	4613      	mov	r3, r2
 800eb22:	005b      	lsls	r3, r3, #1
 800eb24:	4413      	add	r3, r2
 800eb26:	00db      	lsls	r3, r3, #3
 800eb28:	440b      	add	r3, r1
 800eb2a:	3314      	adds	r3, #20
 800eb2c:	2202      	movs	r2, #2
 800eb2e:	701a      	strb	r2, [r3, #0]
 800eb30:	e01e      	b.n	800eb70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eb32:	4915      	ldr	r1, [pc, #84]	; (800eb88 <etharp_tmr+0x14c>)
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	4613      	mov	r3, r2
 800eb38:	005b      	lsls	r3, r3, #1
 800eb3a:	4413      	add	r3, r2
 800eb3c:	00db      	lsls	r3, r3, #3
 800eb3e:	440b      	add	r3, r1
 800eb40:	3314      	adds	r3, #20
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d113      	bne.n	800eb70 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800eb48:	490f      	ldr	r1, [pc, #60]	; (800eb88 <etharp_tmr+0x14c>)
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	4413      	add	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	440b      	add	r3, r1
 800eb56:	3308      	adds	r3, #8
 800eb58:	6818      	ldr	r0, [r3, #0]
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	4413      	add	r3, r2
 800eb62:	00db      	lsls	r3, r3, #3
 800eb64:	4a08      	ldr	r2, [pc, #32]	; (800eb88 <etharp_tmr+0x14c>)
 800eb66:	4413      	add	r3, r2
 800eb68:	3304      	adds	r3, #4
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	f000 fe6e 	bl	800f84c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	3301      	adds	r3, #1
 800eb74:	607b      	str	r3, [r7, #4]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2b09      	cmp	r3, #9
 800eb7a:	f77f af65 	ble.w	800ea48 <etharp_tmr+0xc>
      }
    }
  }
}
 800eb7e:	bf00      	nop
 800eb80:	bf00      	nop
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	24000638 	.word	0x24000638

0800eb8c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b08a      	sub	sp, #40	; 0x28
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	460b      	mov	r3, r1
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800eb9a:	230a      	movs	r3, #10
 800eb9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800eb9e:	230a      	movs	r3, #10
 800eba0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800eba2:	230a      	movs	r3, #10
 800eba4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ebaa:	230a      	movs	r3, #10
 800ebac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	83bb      	strh	r3, [r7, #28]
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	837b      	strh	r3, [r7, #26]
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ebba:	2300      	movs	r3, #0
 800ebbc:	843b      	strh	r3, [r7, #32]
 800ebbe:	e0ae      	b.n	800ed1e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ebc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebc4:	49a6      	ldr	r1, [pc, #664]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	4413      	add	r3, r2
 800ebcc:	00db      	lsls	r3, r3, #3
 800ebce:	440b      	add	r3, r1
 800ebd0:	3314      	adds	r3, #20
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ebd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ebda:	2b0a      	cmp	r3, #10
 800ebdc:	d105      	bne.n	800ebea <etharp_find_entry+0x5e>
 800ebde:	7dfb      	ldrb	r3, [r7, #23]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d102      	bne.n	800ebea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ebe4:	8c3b      	ldrh	r3, [r7, #32]
 800ebe6:	847b      	strh	r3, [r7, #34]	; 0x22
 800ebe8:	e095      	b.n	800ed16 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ebea:	7dfb      	ldrb	r3, [r7, #23]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 8092 	beq.w	800ed16 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ebf2:	7dfb      	ldrb	r3, [r7, #23]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d009      	beq.n	800ec0c <etharp_find_entry+0x80>
 800ebf8:	7dfb      	ldrb	r3, [r7, #23]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d806      	bhi.n	800ec0c <etharp_find_entry+0x80>
 800ebfe:	4b99      	ldr	r3, [pc, #612]	; (800ee64 <etharp_find_entry+0x2d8>)
 800ec00:	f240 1223 	movw	r2, #291	; 0x123
 800ec04:	4998      	ldr	r1, [pc, #608]	; (800ee68 <etharp_find_entry+0x2dc>)
 800ec06:	4899      	ldr	r0, [pc, #612]	; (800ee6c <etharp_find_entry+0x2e0>)
 800ec08:	f00c fa7c 	bl	801b104 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d020      	beq.n	800ec54 <etharp_find_entry+0xc8>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6819      	ldr	r1, [r3, #0]
 800ec16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec1a:	4891      	ldr	r0, [pc, #580]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	005b      	lsls	r3, r3, #1
 800ec20:	4413      	add	r3, r2
 800ec22:	00db      	lsls	r3, r3, #3
 800ec24:	4403      	add	r3, r0
 800ec26:	3304      	adds	r3, #4
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4299      	cmp	r1, r3
 800ec2c:	d112      	bne.n	800ec54 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00c      	beq.n	800ec4e <etharp_find_entry+0xc2>
 800ec34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec38:	4989      	ldr	r1, [pc, #548]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	005b      	lsls	r3, r3, #1
 800ec3e:	4413      	add	r3, r2
 800ec40:	00db      	lsls	r3, r3, #3
 800ec42:	440b      	add	r3, r1
 800ec44:	3308      	adds	r3, #8
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d102      	bne.n	800ec54 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800ec4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec52:	e100      	b.n	800ee56 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800ec54:	7dfb      	ldrb	r3, [r7, #23]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d140      	bne.n	800ecdc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800ec5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec5e:	4980      	ldr	r1, [pc, #512]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ec60:	4613      	mov	r3, r2
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	4413      	add	r3, r2
 800ec66:	00db      	lsls	r3, r3, #3
 800ec68:	440b      	add	r3, r1
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d01a      	beq.n	800eca6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ec70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec74:	497a      	ldr	r1, [pc, #488]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ec76:	4613      	mov	r3, r2
 800ec78:	005b      	lsls	r3, r3, #1
 800ec7a:	4413      	add	r3, r2
 800ec7c:	00db      	lsls	r3, r3, #3
 800ec7e:	440b      	add	r3, r1
 800ec80:	3312      	adds	r3, #18
 800ec82:	881b      	ldrh	r3, [r3, #0]
 800ec84:	8bba      	ldrh	r2, [r7, #28]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d845      	bhi.n	800ed16 <etharp_find_entry+0x18a>
            old_queue = i;
 800ec8a:	8c3b      	ldrh	r3, [r7, #32]
 800ec8c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ec8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec92:	4973      	ldr	r1, [pc, #460]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ec94:	4613      	mov	r3, r2
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	4413      	add	r3, r2
 800ec9a:	00db      	lsls	r3, r3, #3
 800ec9c:	440b      	add	r3, r1
 800ec9e:	3312      	adds	r3, #18
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	83bb      	strh	r3, [r7, #28]
 800eca4:	e037      	b.n	800ed16 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800eca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecaa:	496d      	ldr	r1, [pc, #436]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ecac:	4613      	mov	r3, r2
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	4413      	add	r3, r2
 800ecb2:	00db      	lsls	r3, r3, #3
 800ecb4:	440b      	add	r3, r1
 800ecb6:	3312      	adds	r3, #18
 800ecb8:	881b      	ldrh	r3, [r3, #0]
 800ecba:	8b7a      	ldrh	r2, [r7, #26]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d82a      	bhi.n	800ed16 <etharp_find_entry+0x18a>
            old_pending = i;
 800ecc0:	8c3b      	ldrh	r3, [r7, #32]
 800ecc2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ecc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ecc8:	4965      	ldr	r1, [pc, #404]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ecca:	4613      	mov	r3, r2
 800eccc:	005b      	lsls	r3, r3, #1
 800ecce:	4413      	add	r3, r2
 800ecd0:	00db      	lsls	r3, r3, #3
 800ecd2:	440b      	add	r3, r1
 800ecd4:	3312      	adds	r3, #18
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	837b      	strh	r3, [r7, #26]
 800ecda:	e01c      	b.n	800ed16 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d919      	bls.n	800ed16 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ece2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ece6:	495e      	ldr	r1, [pc, #376]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ece8:	4613      	mov	r3, r2
 800ecea:	005b      	lsls	r3, r3, #1
 800ecec:	4413      	add	r3, r2
 800ecee:	00db      	lsls	r3, r3, #3
 800ecf0:	440b      	add	r3, r1
 800ecf2:	3312      	adds	r3, #18
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	8b3a      	ldrh	r2, [r7, #24]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d80c      	bhi.n	800ed16 <etharp_find_entry+0x18a>
            old_stable = i;
 800ecfc:	8c3b      	ldrh	r3, [r7, #32]
 800ecfe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ed00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed04:	4956      	ldr	r1, [pc, #344]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ed06:	4613      	mov	r3, r2
 800ed08:	005b      	lsls	r3, r3, #1
 800ed0a:	4413      	add	r3, r2
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	440b      	add	r3, r1
 800ed10:	3312      	adds	r3, #18
 800ed12:	881b      	ldrh	r3, [r3, #0]
 800ed14:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed16:	8c3b      	ldrh	r3, [r7, #32]
 800ed18:	3301      	adds	r3, #1
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	843b      	strh	r3, [r7, #32]
 800ed1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ed22:	2b09      	cmp	r3, #9
 800ed24:	f77f af4c 	ble.w	800ebc0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ed28:	7afb      	ldrb	r3, [r7, #11]
 800ed2a:	f003 0302 	and.w	r3, r3, #2
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d108      	bne.n	800ed44 <etharp_find_entry+0x1b8>
 800ed32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ed36:	2b0a      	cmp	r3, #10
 800ed38:	d107      	bne.n	800ed4a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ed3a:	7afb      	ldrb	r3, [r7, #11]
 800ed3c:	f003 0301 	and.w	r3, r3, #1
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d102      	bne.n	800ed4a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ed44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed48:	e085      	b.n	800ee56 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ed4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ed4e:	2b09      	cmp	r3, #9
 800ed50:	dc02      	bgt.n	800ed58 <etharp_find_entry+0x1cc>
    i = empty;
 800ed52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed54:	843b      	strh	r3, [r7, #32]
 800ed56:	e039      	b.n	800edcc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ed58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ed5c:	2b09      	cmp	r3, #9
 800ed5e:	dc14      	bgt.n	800ed8a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ed60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed62:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ed64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ed68:	493d      	ldr	r1, [pc, #244]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	005b      	lsls	r3, r3, #1
 800ed6e:	4413      	add	r3, r2
 800ed70:	00db      	lsls	r3, r3, #3
 800ed72:	440b      	add	r3, r1
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d018      	beq.n	800edac <etharp_find_entry+0x220>
 800ed7a:	4b3a      	ldr	r3, [pc, #232]	; (800ee64 <etharp_find_entry+0x2d8>)
 800ed7c:	f240 126d 	movw	r2, #365	; 0x16d
 800ed80:	493b      	ldr	r1, [pc, #236]	; (800ee70 <etharp_find_entry+0x2e4>)
 800ed82:	483a      	ldr	r0, [pc, #232]	; (800ee6c <etharp_find_entry+0x2e0>)
 800ed84:	f00c f9be 	bl	801b104 <iprintf>
 800ed88:	e010      	b.n	800edac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ed8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ed8e:	2b09      	cmp	r3, #9
 800ed90:	dc02      	bgt.n	800ed98 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ed92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed94:	843b      	strh	r3, [r7, #32]
 800ed96:	e009      	b.n	800edac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ed98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ed9c:	2b09      	cmp	r3, #9
 800ed9e:	dc02      	bgt.n	800eda6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800eda0:	8bfb      	ldrh	r3, [r7, #30]
 800eda2:	843b      	strh	r3, [r7, #32]
 800eda4:	e002      	b.n	800edac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800eda6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edaa:	e054      	b.n	800ee56 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800edac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edb0:	2b09      	cmp	r3, #9
 800edb2:	dd06      	ble.n	800edc2 <etharp_find_entry+0x236>
 800edb4:	4b2b      	ldr	r3, [pc, #172]	; (800ee64 <etharp_find_entry+0x2d8>)
 800edb6:	f240 127f 	movw	r2, #383	; 0x17f
 800edba:	492e      	ldr	r1, [pc, #184]	; (800ee74 <etharp_find_entry+0x2e8>)
 800edbc:	482b      	ldr	r0, [pc, #172]	; (800ee6c <etharp_find_entry+0x2e0>)
 800edbe:	f00c f9a1 	bl	801b104 <iprintf>
    etharp_free_entry(i);
 800edc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7ff fe06 	bl	800e9d8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800edcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800edd0:	2b09      	cmp	r3, #9
 800edd2:	dd06      	ble.n	800ede2 <etharp_find_entry+0x256>
 800edd4:	4b23      	ldr	r3, [pc, #140]	; (800ee64 <etharp_find_entry+0x2d8>)
 800edd6:	f240 1283 	movw	r2, #387	; 0x183
 800edda:	4926      	ldr	r1, [pc, #152]	; (800ee74 <etharp_find_entry+0x2e8>)
 800eddc:	4823      	ldr	r0, [pc, #140]	; (800ee6c <etharp_find_entry+0x2e0>)
 800edde:	f00c f991 	bl	801b104 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ede2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ede6:	491e      	ldr	r1, [pc, #120]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ede8:	4613      	mov	r3, r2
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	4413      	add	r3, r2
 800edee:	00db      	lsls	r3, r3, #3
 800edf0:	440b      	add	r3, r1
 800edf2:	3314      	adds	r3, #20
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d006      	beq.n	800ee08 <etharp_find_entry+0x27c>
 800edfa:	4b1a      	ldr	r3, [pc, #104]	; (800ee64 <etharp_find_entry+0x2d8>)
 800edfc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ee00:	491d      	ldr	r1, [pc, #116]	; (800ee78 <etharp_find_entry+0x2ec>)
 800ee02:	481a      	ldr	r0, [pc, #104]	; (800ee6c <etharp_find_entry+0x2e0>)
 800ee04:	f00c f97e 	bl	801b104 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00b      	beq.n	800ee26 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ee0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6819      	ldr	r1, [r3, #0]
 800ee16:	4812      	ldr	r0, [pc, #72]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ee18:	4613      	mov	r3, r2
 800ee1a:	005b      	lsls	r3, r3, #1
 800ee1c:	4413      	add	r3, r2
 800ee1e:	00db      	lsls	r3, r3, #3
 800ee20:	4403      	add	r3, r0
 800ee22:	3304      	adds	r3, #4
 800ee24:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ee26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee2a:	490d      	ldr	r1, [pc, #52]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	00db      	lsls	r3, r3, #3
 800ee34:	440b      	add	r3, r1
 800ee36:	3312      	adds	r3, #18
 800ee38:	2200      	movs	r2, #0
 800ee3a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ee3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee40:	4907      	ldr	r1, [pc, #28]	; (800ee60 <etharp_find_entry+0x2d4>)
 800ee42:	4613      	mov	r3, r2
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	4413      	add	r3, r2
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	440b      	add	r3, r1
 800ee4c:	3308      	adds	r3, #8
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ee52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3728      	adds	r7, #40	; 0x28
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	24000638 	.word	0x24000638
 800ee64:	0801ee14 	.word	0x0801ee14
 800ee68:	0801ee78 	.word	0x0801ee78
 800ee6c:	0801eeb8 	.word	0x0801eeb8
 800ee70:	0801eee0 	.word	0x0801eee0
 800ee74:	0801eef8 	.word	0x0801eef8
 800ee78:	0801ef0c 	.word	0x0801ef0c

0800ee7c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b088      	sub	sp, #32
 800ee80:	af02      	add	r7, sp, #8
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee90:	2b06      	cmp	r3, #6
 800ee92:	d006      	beq.n	800eea2 <etharp_update_arp_entry+0x26>
 800ee94:	4b48      	ldr	r3, [pc, #288]	; (800efb8 <etharp_update_arp_entry+0x13c>)
 800ee96:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ee9a:	4948      	ldr	r1, [pc, #288]	; (800efbc <etharp_update_arp_entry+0x140>)
 800ee9c:	4848      	ldr	r0, [pc, #288]	; (800efc0 <etharp_update_arp_entry+0x144>)
 800ee9e:	f00c f931 	bl	801b104 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d012      	beq.n	800eece <etharp_update_arp_entry+0x52>
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d00e      	beq.n	800eece <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	68f9      	ldr	r1, [r7, #12]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f001 facc 	bl	8010454 <ip4_addr_isbroadcast_u32>
 800eebc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d105      	bne.n	800eece <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eeca:	2be0      	cmp	r3, #224	; 0xe0
 800eecc:	d102      	bne.n	800eed4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eece:	f06f 030f 	mvn.w	r3, #15
 800eed2:	e06c      	b.n	800efae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800eed4:	78fb      	ldrb	r3, [r7, #3]
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	4619      	mov	r1, r3
 800eeda:	68b8      	ldr	r0, [r7, #8]
 800eedc:	f7ff fe56 	bl	800eb8c <etharp_find_entry>
 800eee0:	4603      	mov	r3, r0
 800eee2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800eee4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	da02      	bge.n	800eef2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800eeec:	8afb      	ldrh	r3, [r7, #22]
 800eeee:	b25b      	sxtb	r3, r3
 800eef0:	e05d      	b.n	800efae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800eef2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eef6:	4933      	ldr	r1, [pc, #204]	; (800efc4 <etharp_update_arp_entry+0x148>)
 800eef8:	4613      	mov	r3, r2
 800eefa:	005b      	lsls	r3, r3, #1
 800eefc:	4413      	add	r3, r2
 800eefe:	00db      	lsls	r3, r3, #3
 800ef00:	440b      	add	r3, r1
 800ef02:	3314      	adds	r3, #20
 800ef04:	2202      	movs	r2, #2
 800ef06:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ef08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef0c:	492d      	ldr	r1, [pc, #180]	; (800efc4 <etharp_update_arp_entry+0x148>)
 800ef0e:	4613      	mov	r3, r2
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	4413      	add	r3, r2
 800ef14:	00db      	lsls	r3, r3, #3
 800ef16:	440b      	add	r3, r1
 800ef18:	3308      	adds	r3, #8
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ef1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef22:	4613      	mov	r3, r2
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	4413      	add	r3, r2
 800ef28:	00db      	lsls	r3, r3, #3
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	4a25      	ldr	r2, [pc, #148]	; (800efc4 <etharp_update_arp_entry+0x148>)
 800ef2e:	4413      	add	r3, r2
 800ef30:	3304      	adds	r3, #4
 800ef32:	2206      	movs	r2, #6
 800ef34:	6879      	ldr	r1, [r7, #4]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f00b f9c2 	bl	801a2c0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ef3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef40:	4920      	ldr	r1, [pc, #128]	; (800efc4 <etharp_update_arp_entry+0x148>)
 800ef42:	4613      	mov	r3, r2
 800ef44:	005b      	lsls	r3, r3, #1
 800ef46:	4413      	add	r3, r2
 800ef48:	00db      	lsls	r3, r3, #3
 800ef4a:	440b      	add	r3, r1
 800ef4c:	3312      	adds	r3, #18
 800ef4e:	2200      	movs	r2, #0
 800ef50:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ef52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef56:	491b      	ldr	r1, [pc, #108]	; (800efc4 <etharp_update_arp_entry+0x148>)
 800ef58:	4613      	mov	r3, r2
 800ef5a:	005b      	lsls	r3, r3, #1
 800ef5c:	4413      	add	r3, r2
 800ef5e:	00db      	lsls	r3, r3, #3
 800ef60:	440b      	add	r3, r1
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d021      	beq.n	800efac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ef68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef6c:	4915      	ldr	r1, [pc, #84]	; (800efc4 <etharp_update_arp_entry+0x148>)
 800ef6e:	4613      	mov	r3, r2
 800ef70:	005b      	lsls	r3, r3, #1
 800ef72:	4413      	add	r3, r2
 800ef74:	00db      	lsls	r3, r3, #3
 800ef76:	440b      	add	r3, r1
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ef7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ef80:	4910      	ldr	r1, [pc, #64]	; (800efc4 <etharp_update_arp_entry+0x148>)
 800ef82:	4613      	mov	r3, r2
 800ef84:	005b      	lsls	r3, r3, #1
 800ef86:	4413      	add	r3, r2
 800ef88:	00db      	lsls	r3, r3, #3
 800ef8a:	440b      	add	r3, r1
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ef96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6939      	ldr	r1, [r7, #16]
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f000 fcf3 	bl	800f98c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800efa6:	6938      	ldr	r0, [r7, #16]
 800efa8:	f003 fb7e 	bl	80126a8 <pbuf_free>
  }
  return ERR_OK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	0801ee14 	.word	0x0801ee14
 800efbc:	0801ef38 	.word	0x0801ef38
 800efc0:	0801eeb8 	.word	0x0801eeb8
 800efc4:	24000638 	.word	0x24000638

0800efc8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efd0:	2300      	movs	r3, #0
 800efd2:	60fb      	str	r3, [r7, #12]
 800efd4:	e01e      	b.n	800f014 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800efd6:	4913      	ldr	r1, [pc, #76]	; (800f024 <etharp_cleanup_netif+0x5c>)
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	4613      	mov	r3, r2
 800efdc:	005b      	lsls	r3, r3, #1
 800efde:	4413      	add	r3, r2
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	440b      	add	r3, r1
 800efe4:	3314      	adds	r3, #20
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800efea:	7afb      	ldrb	r3, [r7, #11]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00e      	beq.n	800f00e <etharp_cleanup_netif+0x46>
 800eff0:	490c      	ldr	r1, [pc, #48]	; (800f024 <etharp_cleanup_netif+0x5c>)
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	4613      	mov	r3, r2
 800eff6:	005b      	lsls	r3, r3, #1
 800eff8:	4413      	add	r3, r2
 800effa:	00db      	lsls	r3, r3, #3
 800effc:	440b      	add	r3, r1
 800effe:	3308      	adds	r3, #8
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	429a      	cmp	r2, r3
 800f006:	d102      	bne.n	800f00e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f7ff fce5 	bl	800e9d8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3301      	adds	r3, #1
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b09      	cmp	r3, #9
 800f018:	dddd      	ble.n	800efd6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f01a:	bf00      	nop
 800f01c:	bf00      	nop
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	24000638 	.word	0x24000638

0800f028 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f028:	b5b0      	push	{r4, r5, r7, lr}
 800f02a:	b08a      	sub	sp, #40	; 0x28
 800f02c:	af04      	add	r7, sp, #16
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d107      	bne.n	800f048 <etharp_input+0x20>
 800f038:	4b3d      	ldr	r3, [pc, #244]	; (800f130 <etharp_input+0x108>)
 800f03a:	f240 228a 	movw	r2, #650	; 0x28a
 800f03e:	493d      	ldr	r1, [pc, #244]	; (800f134 <etharp_input+0x10c>)
 800f040:	483d      	ldr	r0, [pc, #244]	; (800f138 <etharp_input+0x110>)
 800f042:	f00c f85f 	bl	801b104 <iprintf>
 800f046:	e06f      	b.n	800f128 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	881b      	ldrh	r3, [r3, #0]
 800f052:	b29b      	uxth	r3, r3
 800f054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f058:	d10c      	bne.n	800f074 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f05e:	2b06      	cmp	r3, #6
 800f060:	d108      	bne.n	800f074 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f066:	2b04      	cmp	r3, #4
 800f068:	d104      	bne.n	800f074 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	885b      	ldrh	r3, [r3, #2]
 800f06e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f070:	2b08      	cmp	r3, #8
 800f072:	d003      	beq.n	800f07c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f003 fb17 	bl	80126a8 <pbuf_free>
    return;
 800f07a:	e055      	b.n	800f128 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	330e      	adds	r3, #14
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	3318      	adds	r3, #24
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	3304      	adds	r3, #4
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d102      	bne.n	800f09c <etharp_input+0x74>
    for_us = 0;
 800f096:	2300      	movs	r3, #0
 800f098:	75fb      	strb	r3, [r7, #23]
 800f09a:	e009      	b.n	800f0b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	3304      	adds	r3, #4
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	bf0c      	ite	eq
 800f0a8:	2301      	moveq	r3, #1
 800f0aa:	2300      	movne	r3, #0
 800f0ac:	b2db      	uxtb	r3, r3
 800f0ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	f103 0208 	add.w	r2, r3, #8
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d001      	beq.n	800f0c0 <etharp_input+0x98>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	e000      	b.n	800f0c2 <etharp_input+0x9a>
 800f0c0:	2302      	movs	r3, #2
 800f0c2:	f107 010c 	add.w	r1, r7, #12
 800f0c6:	6838      	ldr	r0, [r7, #0]
 800f0c8:	f7ff fed8 	bl	800ee7c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	88db      	ldrh	r3, [r3, #6]
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0d6:	d003      	beq.n	800f0e0 <etharp_input+0xb8>
 800f0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0dc:	d01e      	beq.n	800f11c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f0de:	e020      	b.n	800f122 <etharp_input+0xfa>
      if (for_us) {
 800f0e0:	7dfb      	ldrb	r3, [r7, #23]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d01c      	beq.n	800f120 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f0fc:	693a      	ldr	r2, [r7, #16]
 800f0fe:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f100:	2102      	movs	r1, #2
 800f102:	9103      	str	r1, [sp, #12]
 800f104:	f107 010c 	add.w	r1, r7, #12
 800f108:	9102      	str	r1, [sp, #8]
 800f10a:	9201      	str	r2, [sp, #4]
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	462b      	mov	r3, r5
 800f110:	4622      	mov	r2, r4
 800f112:	4601      	mov	r1, r0
 800f114:	6838      	ldr	r0, [r7, #0]
 800f116:	f000 faeb 	bl	800f6f0 <etharp_raw>
      break;
 800f11a:	e001      	b.n	800f120 <etharp_input+0xf8>
      break;
 800f11c:	bf00      	nop
 800f11e:	e000      	b.n	800f122 <etharp_input+0xfa>
      break;
 800f120:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f003 fac0 	bl	80126a8 <pbuf_free>
}
 800f128:	3718      	adds	r7, #24
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bdb0      	pop	{r4, r5, r7, pc}
 800f12e:	bf00      	nop
 800f130:	0801ee14 	.word	0x0801ee14
 800f134:	0801ef90 	.word	0x0801ef90
 800f138:	0801eeb8 	.word	0x0801eeb8

0800f13c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b086      	sub	sp, #24
 800f140:	af02      	add	r7, sp, #8
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	4613      	mov	r3, r2
 800f148:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f14a:	79fa      	ldrb	r2, [r7, #7]
 800f14c:	4944      	ldr	r1, [pc, #272]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f14e:	4613      	mov	r3, r2
 800f150:	005b      	lsls	r3, r3, #1
 800f152:	4413      	add	r3, r2
 800f154:	00db      	lsls	r3, r3, #3
 800f156:	440b      	add	r3, r1
 800f158:	3314      	adds	r3, #20
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d806      	bhi.n	800f16e <etharp_output_to_arp_index+0x32>
 800f160:	4b40      	ldr	r3, [pc, #256]	; (800f264 <etharp_output_to_arp_index+0x128>)
 800f162:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f166:	4940      	ldr	r1, [pc, #256]	; (800f268 <etharp_output_to_arp_index+0x12c>)
 800f168:	4840      	ldr	r0, [pc, #256]	; (800f26c <etharp_output_to_arp_index+0x130>)
 800f16a:	f00b ffcb 	bl	801b104 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f16e:	79fa      	ldrb	r2, [r7, #7]
 800f170:	493b      	ldr	r1, [pc, #236]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f172:	4613      	mov	r3, r2
 800f174:	005b      	lsls	r3, r3, #1
 800f176:	4413      	add	r3, r2
 800f178:	00db      	lsls	r3, r3, #3
 800f17a:	440b      	add	r3, r1
 800f17c:	3314      	adds	r3, #20
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	2b02      	cmp	r3, #2
 800f182:	d153      	bne.n	800f22c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f184:	79fa      	ldrb	r2, [r7, #7]
 800f186:	4936      	ldr	r1, [pc, #216]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f188:	4613      	mov	r3, r2
 800f18a:	005b      	lsls	r3, r3, #1
 800f18c:	4413      	add	r3, r2
 800f18e:	00db      	lsls	r3, r3, #3
 800f190:	440b      	add	r3, r1
 800f192:	3312      	adds	r3, #18
 800f194:	881b      	ldrh	r3, [r3, #0]
 800f196:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f19a:	d919      	bls.n	800f1d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f19c:	79fa      	ldrb	r2, [r7, #7]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	4413      	add	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	4a2e      	ldr	r2, [pc, #184]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f1a8:	4413      	add	r3, r2
 800f1aa:	3304      	adds	r3, #4
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	68f8      	ldr	r0, [r7, #12]
 800f1b0:	f000 fb4c 	bl	800f84c <etharp_request>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d138      	bne.n	800f22c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f1ba:	79fa      	ldrb	r2, [r7, #7]
 800f1bc:	4928      	ldr	r1, [pc, #160]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f1be:	4613      	mov	r3, r2
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	4413      	add	r3, r2
 800f1c4:	00db      	lsls	r3, r3, #3
 800f1c6:	440b      	add	r3, r1
 800f1c8:	3314      	adds	r3, #20
 800f1ca:	2203      	movs	r2, #3
 800f1cc:	701a      	strb	r2, [r3, #0]
 800f1ce:	e02d      	b.n	800f22c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f1d0:	79fa      	ldrb	r2, [r7, #7]
 800f1d2:	4923      	ldr	r1, [pc, #140]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	005b      	lsls	r3, r3, #1
 800f1d8:	4413      	add	r3, r2
 800f1da:	00db      	lsls	r3, r3, #3
 800f1dc:	440b      	add	r3, r1
 800f1de:	3312      	adds	r3, #18
 800f1e0:	881b      	ldrh	r3, [r3, #0]
 800f1e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f1e6:	d321      	bcc.n	800f22c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f1e8:	79fa      	ldrb	r2, [r7, #7]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	005b      	lsls	r3, r3, #1
 800f1ee:	4413      	add	r3, r2
 800f1f0:	00db      	lsls	r3, r3, #3
 800f1f2:	4a1b      	ldr	r2, [pc, #108]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f1f4:	4413      	add	r3, r2
 800f1f6:	1d19      	adds	r1, r3, #4
 800f1f8:	79fa      	ldrb	r2, [r7, #7]
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	4413      	add	r3, r2
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	3308      	adds	r3, #8
 800f204:	4a16      	ldr	r2, [pc, #88]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f206:	4413      	add	r3, r2
 800f208:	3304      	adds	r3, #4
 800f20a:	461a      	mov	r2, r3
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f000 fafb 	bl	800f808 <etharp_request_dst>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d109      	bne.n	800f22c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f218:	79fa      	ldrb	r2, [r7, #7]
 800f21a:	4911      	ldr	r1, [pc, #68]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f21c:	4613      	mov	r3, r2
 800f21e:	005b      	lsls	r3, r3, #1
 800f220:	4413      	add	r3, r2
 800f222:	00db      	lsls	r3, r3, #3
 800f224:	440b      	add	r3, r1
 800f226:	3314      	adds	r3, #20
 800f228:	2203      	movs	r2, #3
 800f22a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f232:	79fa      	ldrb	r2, [r7, #7]
 800f234:	4613      	mov	r3, r2
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	4413      	add	r3, r2
 800f23a:	00db      	lsls	r3, r3, #3
 800f23c:	3308      	adds	r3, #8
 800f23e:	4a08      	ldr	r2, [pc, #32]	; (800f260 <etharp_output_to_arp_index+0x124>)
 800f240:	4413      	add	r3, r2
 800f242:	3304      	adds	r3, #4
 800f244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f248:	9200      	str	r2, [sp, #0]
 800f24a:	460a      	mov	r2, r1
 800f24c:	68b9      	ldr	r1, [r7, #8]
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f000 fb9c 	bl	800f98c <ethernet_output>
 800f254:	4603      	mov	r3, r0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	24000638 	.word	0x24000638
 800f264:	0801ee14 	.word	0x0801ee14
 800f268:	0801efb0 	.word	0x0801efb0
 800f26c:	0801eeb8 	.word	0x0801eeb8

0800f270 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b08a      	sub	sp, #40	; 0x28
 800f274:	af02      	add	r7, sp, #8
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d106      	bne.n	800f294 <etharp_output+0x24>
 800f286:	4b73      	ldr	r3, [pc, #460]	; (800f454 <etharp_output+0x1e4>)
 800f288:	f240 321e 	movw	r2, #798	; 0x31e
 800f28c:	4972      	ldr	r1, [pc, #456]	; (800f458 <etharp_output+0x1e8>)
 800f28e:	4873      	ldr	r0, [pc, #460]	; (800f45c <etharp_output+0x1ec>)
 800f290:	f00b ff38 	bl	801b104 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d106      	bne.n	800f2a8 <etharp_output+0x38>
 800f29a:	4b6e      	ldr	r3, [pc, #440]	; (800f454 <etharp_output+0x1e4>)
 800f29c:	f240 321f 	movw	r2, #799	; 0x31f
 800f2a0:	496f      	ldr	r1, [pc, #444]	; (800f460 <etharp_output+0x1f0>)
 800f2a2:	486e      	ldr	r0, [pc, #440]	; (800f45c <etharp_output+0x1ec>)
 800f2a4:	f00b ff2e 	bl	801b104 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d106      	bne.n	800f2bc <etharp_output+0x4c>
 800f2ae:	4b69      	ldr	r3, [pc, #420]	; (800f454 <etharp_output+0x1e4>)
 800f2b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f2b4:	496b      	ldr	r1, [pc, #428]	; (800f464 <etharp_output+0x1f4>)
 800f2b6:	4869      	ldr	r0, [pc, #420]	; (800f45c <etharp_output+0x1ec>)
 800f2b8:	f00b ff24 	bl	801b104 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68f9      	ldr	r1, [r7, #12]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f001 f8c6 	bl	8010454 <ip4_addr_isbroadcast_u32>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d002      	beq.n	800f2d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f2ce:	4b66      	ldr	r3, [pc, #408]	; (800f468 <etharp_output+0x1f8>)
 800f2d0:	61fb      	str	r3, [r7, #28]
 800f2d2:	e0af      	b.n	800f434 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2dc:	2be0      	cmp	r3, #224	; 0xe0
 800f2de:	d118      	bne.n	800f312 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f2e8:	235e      	movs	r3, #94	; 0x5e
 800f2ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	3302      	adds	r3, #2
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3303      	adds	r3, #3
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f30a:	f107 0310 	add.w	r3, r7, #16
 800f30e:	61fb      	str	r3, [r7, #28]
 800f310:	e090      	b.n	800f434 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	3304      	adds	r3, #4
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	405a      	eors	r2, r3
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3308      	adds	r3, #8
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4013      	ands	r3, r2
 800f326:	2b00      	cmp	r3, #0
 800f328:	d012      	beq.n	800f350 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f330:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f334:	4293      	cmp	r3, r2
 800f336:	d00b      	beq.n	800f350 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	330c      	adds	r3, #12
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d003      	beq.n	800f34a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	330c      	adds	r3, #12
 800f346:	61bb      	str	r3, [r7, #24]
 800f348:	e002      	b.n	800f350 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f34a:	f06f 0303 	mvn.w	r3, #3
 800f34e:	e07d      	b.n	800f44c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f350:	4b46      	ldr	r3, [pc, #280]	; (800f46c <etharp_output+0x1fc>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	4619      	mov	r1, r3
 800f356:	4a46      	ldr	r2, [pc, #280]	; (800f470 <etharp_output+0x200>)
 800f358:	460b      	mov	r3, r1
 800f35a:	005b      	lsls	r3, r3, #1
 800f35c:	440b      	add	r3, r1
 800f35e:	00db      	lsls	r3, r3, #3
 800f360:	4413      	add	r3, r2
 800f362:	3314      	adds	r3, #20
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	2b01      	cmp	r3, #1
 800f368:	d925      	bls.n	800f3b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f36a:	4b40      	ldr	r3, [pc, #256]	; (800f46c <etharp_output+0x1fc>)
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	4619      	mov	r1, r3
 800f370:	4a3f      	ldr	r2, [pc, #252]	; (800f470 <etharp_output+0x200>)
 800f372:	460b      	mov	r3, r1
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	440b      	add	r3, r1
 800f378:	00db      	lsls	r3, r3, #3
 800f37a:	4413      	add	r3, r2
 800f37c:	3308      	adds	r3, #8
 800f37e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	429a      	cmp	r2, r3
 800f384:	d117      	bne.n	800f3b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	4b38      	ldr	r3, [pc, #224]	; (800f46c <etharp_output+0x1fc>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	4618      	mov	r0, r3
 800f390:	4937      	ldr	r1, [pc, #220]	; (800f470 <etharp_output+0x200>)
 800f392:	4603      	mov	r3, r0
 800f394:	005b      	lsls	r3, r3, #1
 800f396:	4403      	add	r3, r0
 800f398:	00db      	lsls	r3, r3, #3
 800f39a:	440b      	add	r3, r1
 800f39c:	3304      	adds	r3, #4
 800f39e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d108      	bne.n	800f3b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f3a4:	4b31      	ldr	r3, [pc, #196]	; (800f46c <etharp_output+0x1fc>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f7ff fec5 	bl	800f13c <etharp_output_to_arp_index>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	e04a      	b.n	800f44c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	75fb      	strb	r3, [r7, #23]
 800f3ba:	e031      	b.n	800f420 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f3bc:	7dfa      	ldrb	r2, [r7, #23]
 800f3be:	492c      	ldr	r1, [pc, #176]	; (800f470 <etharp_output+0x200>)
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	005b      	lsls	r3, r3, #1
 800f3c4:	4413      	add	r3, r2
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	440b      	add	r3, r1
 800f3ca:	3314      	adds	r3, #20
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d923      	bls.n	800f41a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f3d2:	7dfa      	ldrb	r2, [r7, #23]
 800f3d4:	4926      	ldr	r1, [pc, #152]	; (800f470 <etharp_output+0x200>)
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	005b      	lsls	r3, r3, #1
 800f3da:	4413      	add	r3, r2
 800f3dc:	00db      	lsls	r3, r3, #3
 800f3de:	440b      	add	r3, r1
 800f3e0:	3308      	adds	r3, #8
 800f3e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d117      	bne.n	800f41a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	6819      	ldr	r1, [r3, #0]
 800f3ee:	7dfa      	ldrb	r2, [r7, #23]
 800f3f0:	481f      	ldr	r0, [pc, #124]	; (800f470 <etharp_output+0x200>)
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	005b      	lsls	r3, r3, #1
 800f3f6:	4413      	add	r3, r2
 800f3f8:	00db      	lsls	r3, r3, #3
 800f3fa:	4403      	add	r3, r0
 800f3fc:	3304      	adds	r3, #4
 800f3fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f400:	4299      	cmp	r1, r3
 800f402:	d10a      	bne.n	800f41a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f404:	4a19      	ldr	r2, [pc, #100]	; (800f46c <etharp_output+0x1fc>)
 800f406:	7dfb      	ldrb	r3, [r7, #23]
 800f408:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f40a:	7dfb      	ldrb	r3, [r7, #23]
 800f40c:	461a      	mov	r2, r3
 800f40e:	68b9      	ldr	r1, [r7, #8]
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f7ff fe93 	bl	800f13c <etharp_output_to_arp_index>
 800f416:	4603      	mov	r3, r0
 800f418:	e018      	b.n	800f44c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f41a:	7dfb      	ldrb	r3, [r7, #23]
 800f41c:	3301      	adds	r3, #1
 800f41e:	75fb      	strb	r3, [r7, #23]
 800f420:	7dfb      	ldrb	r3, [r7, #23]
 800f422:	2b09      	cmp	r3, #9
 800f424:	d9ca      	bls.n	800f3bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f426:	68ba      	ldr	r2, [r7, #8]
 800f428:	69b9      	ldr	r1, [r7, #24]
 800f42a:	68f8      	ldr	r0, [r7, #12]
 800f42c:	f000 f822 	bl	800f474 <etharp_query>
 800f430:	4603      	mov	r3, r0
 800f432:	e00b      	b.n	800f44c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f43a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f43e:	9300      	str	r3, [sp, #0]
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	68b9      	ldr	r1, [r7, #8]
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f000 faa1 	bl	800f98c <ethernet_output>
 800f44a:	4603      	mov	r3, r0
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3720      	adds	r7, #32
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	0801ee14 	.word	0x0801ee14
 800f458:	0801ef90 	.word	0x0801ef90
 800f45c:	0801eeb8 	.word	0x0801eeb8
 800f460:	0801efe0 	.word	0x0801efe0
 800f464:	0801ef80 	.word	0x0801ef80
 800f468:	08021a7c 	.word	0x08021a7c
 800f46c:	24000728 	.word	0x24000728
 800f470:	24000638 	.word	0x24000638

0800f474 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b08c      	sub	sp, #48	; 0x30
 800f478:	af02      	add	r7, sp, #8
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	3326      	adds	r3, #38	; 0x26
 800f484:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f486:	23ff      	movs	r3, #255	; 0xff
 800f488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f48c:	2300      	movs	r3, #0
 800f48e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	68f9      	ldr	r1, [r7, #12]
 800f496:	4618      	mov	r0, r3
 800f498:	f000 ffdc 	bl	8010454 <ip4_addr_isbroadcast_u32>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d10c      	bne.n	800f4bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f4aa:	2be0      	cmp	r3, #224	; 0xe0
 800f4ac:	d006      	beq.n	800f4bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d003      	beq.n	800f4bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d102      	bne.n	800f4c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f4bc:	f06f 030f 	mvn.w	r3, #15
 800f4c0:	e101      	b.n	800f6c6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	2101      	movs	r1, #1
 800f4c6:	68b8      	ldr	r0, [r7, #8]
 800f4c8:	f7ff fb60 	bl	800eb8c <etharp_find_entry>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f4d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	da02      	bge.n	800f4de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f4d8:	8a7b      	ldrh	r3, [r7, #18]
 800f4da:	b25b      	sxtb	r3, r3
 800f4dc:	e0f3      	b.n	800f6c6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f4de:	8a7b      	ldrh	r3, [r7, #18]
 800f4e0:	2b7e      	cmp	r3, #126	; 0x7e
 800f4e2:	d906      	bls.n	800f4f2 <etharp_query+0x7e>
 800f4e4:	4b7a      	ldr	r3, [pc, #488]	; (800f6d0 <etharp_query+0x25c>)
 800f4e6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f4ea:	497a      	ldr	r1, [pc, #488]	; (800f6d4 <etharp_query+0x260>)
 800f4ec:	487a      	ldr	r0, [pc, #488]	; (800f6d8 <etharp_query+0x264>)
 800f4ee:	f00b fe09 	bl	801b104 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f4f2:	8a7b      	ldrh	r3, [r7, #18]
 800f4f4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f4f6:	7c7a      	ldrb	r2, [r7, #17]
 800f4f8:	4978      	ldr	r1, [pc, #480]	; (800f6dc <etharp_query+0x268>)
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	005b      	lsls	r3, r3, #1
 800f4fe:	4413      	add	r3, r2
 800f500:	00db      	lsls	r3, r3, #3
 800f502:	440b      	add	r3, r1
 800f504:	3314      	adds	r3, #20
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d115      	bne.n	800f538 <etharp_query+0xc4>
    is_new_entry = 1;
 800f50c:	2301      	movs	r3, #1
 800f50e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f510:	7c7a      	ldrb	r2, [r7, #17]
 800f512:	4972      	ldr	r1, [pc, #456]	; (800f6dc <etharp_query+0x268>)
 800f514:	4613      	mov	r3, r2
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	4413      	add	r3, r2
 800f51a:	00db      	lsls	r3, r3, #3
 800f51c:	440b      	add	r3, r1
 800f51e:	3314      	adds	r3, #20
 800f520:	2201      	movs	r2, #1
 800f522:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f524:	7c7a      	ldrb	r2, [r7, #17]
 800f526:	496d      	ldr	r1, [pc, #436]	; (800f6dc <etharp_query+0x268>)
 800f528:	4613      	mov	r3, r2
 800f52a:	005b      	lsls	r3, r3, #1
 800f52c:	4413      	add	r3, r2
 800f52e:	00db      	lsls	r3, r3, #3
 800f530:	440b      	add	r3, r1
 800f532:	3308      	adds	r3, #8
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f538:	7c7a      	ldrb	r2, [r7, #17]
 800f53a:	4968      	ldr	r1, [pc, #416]	; (800f6dc <etharp_query+0x268>)
 800f53c:	4613      	mov	r3, r2
 800f53e:	005b      	lsls	r3, r3, #1
 800f540:	4413      	add	r3, r2
 800f542:	00db      	lsls	r3, r3, #3
 800f544:	440b      	add	r3, r1
 800f546:	3314      	adds	r3, #20
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d011      	beq.n	800f572 <etharp_query+0xfe>
 800f54e:	7c7a      	ldrb	r2, [r7, #17]
 800f550:	4962      	ldr	r1, [pc, #392]	; (800f6dc <etharp_query+0x268>)
 800f552:	4613      	mov	r3, r2
 800f554:	005b      	lsls	r3, r3, #1
 800f556:	4413      	add	r3, r2
 800f558:	00db      	lsls	r3, r3, #3
 800f55a:	440b      	add	r3, r1
 800f55c:	3314      	adds	r3, #20
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d806      	bhi.n	800f572 <etharp_query+0xfe>
 800f564:	4b5a      	ldr	r3, [pc, #360]	; (800f6d0 <etharp_query+0x25c>)
 800f566:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f56a:	495d      	ldr	r1, [pc, #372]	; (800f6e0 <etharp_query+0x26c>)
 800f56c:	485a      	ldr	r0, [pc, #360]	; (800f6d8 <etharp_query+0x264>)
 800f56e:	f00b fdc9 	bl	801b104 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f572:	6a3b      	ldr	r3, [r7, #32]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d102      	bne.n	800f57e <etharp_query+0x10a>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d10c      	bne.n	800f598 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f57e:	68b9      	ldr	r1, [r7, #8]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f000 f963 	bl	800f84c <etharp_request>
 800f586:	4603      	mov	r3, r0
 800f588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d102      	bne.n	800f598 <etharp_query+0x124>
      return result;
 800f592:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f596:	e096      	b.n	800f6c6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d106      	bne.n	800f5ac <etharp_query+0x138>
 800f59e:	4b4c      	ldr	r3, [pc, #304]	; (800f6d0 <etharp_query+0x25c>)
 800f5a0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f5a4:	494f      	ldr	r1, [pc, #316]	; (800f6e4 <etharp_query+0x270>)
 800f5a6:	484c      	ldr	r0, [pc, #304]	; (800f6d8 <etharp_query+0x264>)
 800f5a8:	f00b fdac 	bl	801b104 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f5ac:	7c7a      	ldrb	r2, [r7, #17]
 800f5ae:	494b      	ldr	r1, [pc, #300]	; (800f6dc <etharp_query+0x268>)
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	005b      	lsls	r3, r3, #1
 800f5b4:	4413      	add	r3, r2
 800f5b6:	00db      	lsls	r3, r3, #3
 800f5b8:	440b      	add	r3, r1
 800f5ba:	3314      	adds	r3, #20
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d917      	bls.n	800f5f2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f5c2:	4a49      	ldr	r2, [pc, #292]	; (800f6e8 <etharp_query+0x274>)
 800f5c4:	7c7b      	ldrb	r3, [r7, #17]
 800f5c6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f5c8:	7c7a      	ldrb	r2, [r7, #17]
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	005b      	lsls	r3, r3, #1
 800f5ce:	4413      	add	r3, r2
 800f5d0:	00db      	lsls	r3, r3, #3
 800f5d2:	3308      	adds	r3, #8
 800f5d4:	4a41      	ldr	r2, [pc, #260]	; (800f6dc <etharp_query+0x268>)
 800f5d6:	4413      	add	r3, r2
 800f5d8:	3304      	adds	r3, #4
 800f5da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5de:	9200      	str	r2, [sp, #0]
 800f5e0:	697a      	ldr	r2, [r7, #20]
 800f5e2:	6879      	ldr	r1, [r7, #4]
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f000 f9d1 	bl	800f98c <ethernet_output>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f5f0:	e067      	b.n	800f6c2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f5f2:	7c7a      	ldrb	r2, [r7, #17]
 800f5f4:	4939      	ldr	r1, [pc, #228]	; (800f6dc <etharp_query+0x268>)
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	4413      	add	r3, r2
 800f5fc:	00db      	lsls	r3, r3, #3
 800f5fe:	440b      	add	r3, r1
 800f600:	3314      	adds	r3, #20
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	2b01      	cmp	r3, #1
 800f606:	d15c      	bne.n	800f6c2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f608:	2300      	movs	r3, #0
 800f60a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f610:	e01c      	b.n	800f64c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	895a      	ldrh	r2, [r3, #10]
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	891b      	ldrh	r3, [r3, #8]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d10a      	bne.n	800f634 <etharp_query+0x1c0>
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d006      	beq.n	800f634 <etharp_query+0x1c0>
 800f626:	4b2a      	ldr	r3, [pc, #168]	; (800f6d0 <etharp_query+0x25c>)
 800f628:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f62c:	492f      	ldr	r1, [pc, #188]	; (800f6ec <etharp_query+0x278>)
 800f62e:	482a      	ldr	r0, [pc, #168]	; (800f6d8 <etharp_query+0x264>)
 800f630:	f00b fd68 	bl	801b104 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	7b1b      	ldrb	r3, [r3, #12]
 800f638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d002      	beq.n	800f646 <etharp_query+0x1d2>
        copy_needed = 1;
 800f640:	2301      	movs	r3, #1
 800f642:	61bb      	str	r3, [r7, #24]
        break;
 800f644:	e005      	b.n	800f652 <etharp_query+0x1de>
      }
      p = p->next;
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d1df      	bne.n	800f612 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d007      	beq.n	800f668 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f65e:	200e      	movs	r0, #14
 800f660:	f003 fa7e 	bl	8012b60 <pbuf_clone>
 800f664:	61f8      	str	r0, [r7, #28]
 800f666:	e004      	b.n	800f672 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f66c:	69f8      	ldr	r0, [r7, #28]
 800f66e:	f003 f8bb 	bl	80127e8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d021      	beq.n	800f6bc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f678:	7c7a      	ldrb	r2, [r7, #17]
 800f67a:	4918      	ldr	r1, [pc, #96]	; (800f6dc <etharp_query+0x268>)
 800f67c:	4613      	mov	r3, r2
 800f67e:	005b      	lsls	r3, r3, #1
 800f680:	4413      	add	r3, r2
 800f682:	00db      	lsls	r3, r3, #3
 800f684:	440b      	add	r3, r1
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00a      	beq.n	800f6a2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f68c:	7c7a      	ldrb	r2, [r7, #17]
 800f68e:	4913      	ldr	r1, [pc, #76]	; (800f6dc <etharp_query+0x268>)
 800f690:	4613      	mov	r3, r2
 800f692:	005b      	lsls	r3, r3, #1
 800f694:	4413      	add	r3, r2
 800f696:	00db      	lsls	r3, r3, #3
 800f698:	440b      	add	r3, r1
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f003 f803 	bl	80126a8 <pbuf_free>
      }
      arp_table[i].q = p;
 800f6a2:	7c7a      	ldrb	r2, [r7, #17]
 800f6a4:	490d      	ldr	r1, [pc, #52]	; (800f6dc <etharp_query+0x268>)
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	4413      	add	r3, r2
 800f6ac:	00db      	lsls	r3, r3, #3
 800f6ae:	440b      	add	r3, r1
 800f6b0:	69fa      	ldr	r2, [r7, #28]
 800f6b2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6ba:	e002      	b.n	800f6c2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f6bc:	23ff      	movs	r3, #255	; 0xff
 800f6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f6c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3728      	adds	r7, #40	; 0x28
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	0801ee14 	.word	0x0801ee14
 800f6d4:	0801efec 	.word	0x0801efec
 800f6d8:	0801eeb8 	.word	0x0801eeb8
 800f6dc:	24000638 	.word	0x24000638
 800f6e0:	0801effc 	.word	0x0801effc
 800f6e4:	0801efe0 	.word	0x0801efe0
 800f6e8:	24000728 	.word	0x24000728
 800f6ec:	0801f024 	.word	0x0801f024

0800f6f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b08a      	sub	sp, #40	; 0x28
 800f6f4:	af02      	add	r7, sp, #8
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	607a      	str	r2, [r7, #4]
 800f6fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f6fe:	2300      	movs	r3, #0
 800f700:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d106      	bne.n	800f716 <etharp_raw+0x26>
 800f708:	4b3a      	ldr	r3, [pc, #232]	; (800f7f4 <etharp_raw+0x104>)
 800f70a:	f240 4257 	movw	r2, #1111	; 0x457
 800f70e:	493a      	ldr	r1, [pc, #232]	; (800f7f8 <etharp_raw+0x108>)
 800f710:	483a      	ldr	r0, [pc, #232]	; (800f7fc <etharp_raw+0x10c>)
 800f712:	f00b fcf7 	bl	801b104 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f716:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f71a:	211c      	movs	r1, #28
 800f71c:	200e      	movs	r0, #14
 800f71e:	f002 fcdf 	bl	80120e0 <pbuf_alloc>
 800f722:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d102      	bne.n	800f730 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f72a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f72e:	e05d      	b.n	800f7ec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	895b      	ldrh	r3, [r3, #10]
 800f734:	2b1b      	cmp	r3, #27
 800f736:	d806      	bhi.n	800f746 <etharp_raw+0x56>
 800f738:	4b2e      	ldr	r3, [pc, #184]	; (800f7f4 <etharp_raw+0x104>)
 800f73a:	f240 4262 	movw	r2, #1122	; 0x462
 800f73e:	4930      	ldr	r1, [pc, #192]	; (800f800 <etharp_raw+0x110>)
 800f740:	482e      	ldr	r0, [pc, #184]	; (800f7fc <etharp_raw+0x10c>)
 800f742:	f00b fcdf 	bl	801b104 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f746:	69bb      	ldr	r3, [r7, #24]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f74c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff f914 	bl	800e97c <lwip_htons>
 800f754:	4603      	mov	r3, r0
 800f756:	461a      	mov	r2, r3
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f762:	2b06      	cmp	r3, #6
 800f764:	d006      	beq.n	800f774 <etharp_raw+0x84>
 800f766:	4b23      	ldr	r3, [pc, #140]	; (800f7f4 <etharp_raw+0x104>)
 800f768:	f240 4269 	movw	r2, #1129	; 0x469
 800f76c:	4925      	ldr	r1, [pc, #148]	; (800f804 <etharp_raw+0x114>)
 800f76e:	4823      	ldr	r0, [pc, #140]	; (800f7fc <etharp_raw+0x10c>)
 800f770:	f00b fcc8 	bl	801b104 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	3308      	adds	r3, #8
 800f778:	2206      	movs	r2, #6
 800f77a:	6839      	ldr	r1, [r7, #0]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f00a fd9f 	bl	801a2c0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	3312      	adds	r3, #18
 800f786:	2206      	movs	r2, #6
 800f788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f78a:	4618      	mov	r0, r3
 800f78c:	f00a fd98 	bl	801a2c0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	330e      	adds	r3, #14
 800f794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f796:	6812      	ldr	r2, [r2, #0]
 800f798:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	3318      	adds	r3, #24
 800f79e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7a0:	6812      	ldr	r2, [r2, #0]
 800f7a2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	701a      	strb	r2, [r3, #0]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f042 0201 	orr.w	r2, r2, #1
 800f7b0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f042 0208 	orr.w	r2, r2, #8
 800f7ba:	709a      	strb	r2, [r3, #2]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	2206      	movs	r2, #6
 800f7c4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	2204      	movs	r2, #4
 800f7ca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f7cc:	f640 0306 	movw	r3, #2054	; 0x806
 800f7d0:	9300      	str	r3, [sp, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	68ba      	ldr	r2, [r7, #8]
 800f7d6:	69b9      	ldr	r1, [r7, #24]
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f000 f8d7 	bl	800f98c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f7de:	69b8      	ldr	r0, [r7, #24]
 800f7e0:	f002 ff62 	bl	80126a8 <pbuf_free>
  p = NULL;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f7e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3720      	adds	r7, #32
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	0801ee14 	.word	0x0801ee14
 800f7f8:	0801ef90 	.word	0x0801ef90
 800f7fc:	0801eeb8 	.word	0x0801eeb8
 800f800:	0801f040 	.word	0x0801f040
 800f804:	0801f074 	.word	0x0801f074

0800f808 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b088      	sub	sp, #32
 800f80c:	af04      	add	r7, sp, #16
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f824:	2201      	movs	r2, #1
 800f826:	9203      	str	r2, [sp, #12]
 800f828:	68ba      	ldr	r2, [r7, #8]
 800f82a:	9202      	str	r2, [sp, #8]
 800f82c:	4a06      	ldr	r2, [pc, #24]	; (800f848 <etharp_request_dst+0x40>)
 800f82e:	9201      	str	r2, [sp, #4]
 800f830:	9300      	str	r3, [sp, #0]
 800f832:	4603      	mov	r3, r0
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f7ff ff5a 	bl	800f6f0 <etharp_raw>
 800f83c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	08021a84 	.word	0x08021a84

0800f84c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f856:	4a05      	ldr	r2, [pc, #20]	; (800f86c <etharp_request+0x20>)
 800f858:	6839      	ldr	r1, [r7, #0]
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f7ff ffd4 	bl	800f808 <etharp_request_dst>
 800f860:	4603      	mov	r3, r0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	08021a7c 	.word	0x08021a7c

0800f870 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f87a:	230e      	movs	r3, #14
 800f87c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	895b      	ldrh	r3, [r3, #10]
 800f882:	2b0e      	cmp	r3, #14
 800f884:	d96e      	bls.n	800f964 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	7bdb      	ldrb	r3, [r3, #15]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d106      	bne.n	800f89c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f894:	3301      	adds	r3, #1
 800f896:	b2da      	uxtb	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	7b1a      	ldrb	r2, [r3, #12]
 800f8a6:	7b5b      	ldrb	r3, [r3, #13]
 800f8a8:	021b      	lsls	r3, r3, #8
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	f003 0301 	and.w	r3, r3, #1
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d023      	beq.n	800f902 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d10f      	bne.n	800f8e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	785b      	ldrb	r3, [r3, #1]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d11b      	bne.n	800f902 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f8ce:	2b5e      	cmp	r3, #94	; 0x5e
 800f8d0:	d117      	bne.n	800f902 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	7b5b      	ldrb	r3, [r3, #13]
 800f8d6:	f043 0310 	orr.w	r3, r3, #16
 800f8da:	b2da      	uxtb	r2, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	735a      	strb	r2, [r3, #13]
 800f8e0:	e00f      	b.n	800f902 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	2206      	movs	r2, #6
 800f8e6:	4928      	ldr	r1, [pc, #160]	; (800f988 <ethernet_input+0x118>)
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f00a fcdb 	bl	801a2a4 <memcmp>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d106      	bne.n	800f902 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	7b5b      	ldrb	r3, [r3, #13]
 800f8f8:	f043 0308 	orr.w	r3, r3, #8
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f902:	89fb      	ldrh	r3, [r7, #14]
 800f904:	2b08      	cmp	r3, #8
 800f906:	d003      	beq.n	800f910 <ethernet_input+0xa0>
 800f908:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f90c:	d014      	beq.n	800f938 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f90e:	e032      	b.n	800f976 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f916:	f003 0308 	and.w	r3, r3, #8
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d024      	beq.n	800f968 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f91e:	8afb      	ldrh	r3, [r7, #22]
 800f920:	4619      	mov	r1, r3
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f002 fe3a 	bl	801259c <pbuf_remove_header>
 800f928:	4603      	mov	r3, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d11e      	bne.n	800f96c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f92e:	6839      	ldr	r1, [r7, #0]
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 fb93 	bl	801005c <ip4_input>
      break;
 800f936:	e013      	b.n	800f960 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f93e:	f003 0308 	and.w	r3, r3, #8
 800f942:	2b00      	cmp	r3, #0
 800f944:	d014      	beq.n	800f970 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f946:	8afb      	ldrh	r3, [r7, #22]
 800f948:	4619      	mov	r1, r3
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f002 fe26 	bl	801259c <pbuf_remove_header>
 800f950:	4603      	mov	r3, r0
 800f952:	2b00      	cmp	r3, #0
 800f954:	d10e      	bne.n	800f974 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f956:	6839      	ldr	r1, [r7, #0]
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f7ff fb65 	bl	800f028 <etharp_input>
      break;
 800f95e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f960:	2300      	movs	r3, #0
 800f962:	e00c      	b.n	800f97e <ethernet_input+0x10e>
    goto free_and_return;
 800f964:	bf00      	nop
 800f966:	e006      	b.n	800f976 <ethernet_input+0x106>
        goto free_and_return;
 800f968:	bf00      	nop
 800f96a:	e004      	b.n	800f976 <ethernet_input+0x106>
        goto free_and_return;
 800f96c:	bf00      	nop
 800f96e:	e002      	b.n	800f976 <ethernet_input+0x106>
        goto free_and_return;
 800f970:	bf00      	nop
 800f972:	e000      	b.n	800f976 <ethernet_input+0x106>
        goto free_and_return;
 800f974:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f002 fe96 	bl	80126a8 <pbuf_free>
  return ERR_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3718      	adds	r7, #24
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	08021a7c 	.word	0x08021a7c

0800f98c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
 800f998:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f99a:	8c3b      	ldrh	r3, [r7, #32]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fe ffed 	bl	800e97c <lwip_htons>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f9a6:	210e      	movs	r1, #14
 800f9a8:	68b8      	ldr	r0, [r7, #8]
 800f9aa:	f002 fde7 	bl	801257c <pbuf_add_header>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d125      	bne.n	800fa00 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	8afa      	ldrh	r2, [r7, #22]
 800f9be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	2206      	movs	r2, #6
 800f9c4:	6839      	ldr	r1, [r7, #0]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f00a fc7a 	bl	801a2c0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	3306      	adds	r3, #6
 800f9d0:	2206      	movs	r2, #6
 800f9d2:	6879      	ldr	r1, [r7, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f00a fc73 	bl	801a2c0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f9e0:	2b06      	cmp	r3, #6
 800f9e2:	d006      	beq.n	800f9f2 <ethernet_output+0x66>
 800f9e4:	4b0a      	ldr	r3, [pc, #40]	; (800fa10 <ethernet_output+0x84>)
 800f9e6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f9ea:	490a      	ldr	r1, [pc, #40]	; (800fa14 <ethernet_output+0x88>)
 800f9ec:	480a      	ldr	r0, [pc, #40]	; (800fa18 <ethernet_output+0x8c>)
 800f9ee:	f00b fb89 	bl	801b104 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	699b      	ldr	r3, [r3, #24]
 800f9f6:	68b9      	ldr	r1, [r7, #8]
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	4798      	blx	r3
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	e002      	b.n	800fa06 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fa00:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fa02:	f06f 0301 	mvn.w	r3, #1
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3718      	adds	r7, #24
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	0801f0b8 	.word	0x0801f0b8
 800fa14:	0801f118 	.word	0x0801f118
 800fa18:	0801f14c 	.word	0x0801f14c

0800fa1c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b08e      	sub	sp, #56	; 0x38
 800fa20:	af04      	add	r7, sp, #16
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fa26:	4b87      	ldr	r3, [pc, #540]	; (800fc44 <icmp_input+0x228>)
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	f003 030f 	and.w	r3, r3, #15
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fa3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fa3e:	2b13      	cmp	r3, #19
 800fa40:	f240 80e8 	bls.w	800fc14 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	895b      	ldrh	r3, [r3, #10]
 800fa48:	2b03      	cmp	r3, #3
 800fa4a:	f240 80e5 	bls.w	800fc18 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fa58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	f000 80d2 	beq.w	800fc06 <icmp_input+0x1ea>
 800fa62:	2b08      	cmp	r3, #8
 800fa64:	f040 80d2 	bne.w	800fc0c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fa68:	4b77      	ldr	r3, [pc, #476]	; (800fc48 <icmp_input+0x22c>)
 800fa6a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fa6c:	4b75      	ldr	r3, [pc, #468]	; (800fc44 <icmp_input+0x228>)
 800fa6e:	695b      	ldr	r3, [r3, #20]
 800fa70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa74:	2be0      	cmp	r3, #224	; 0xe0
 800fa76:	f000 80d6 	beq.w	800fc26 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fa7a:	4b72      	ldr	r3, [pc, #456]	; (800fc44 <icmp_input+0x228>)
 800fa7c:	695b      	ldr	r3, [r3, #20]
 800fa7e:	4a71      	ldr	r2, [pc, #452]	; (800fc44 <icmp_input+0x228>)
 800fa80:	6812      	ldr	r2, [r2, #0]
 800fa82:	4611      	mov	r1, r2
 800fa84:	4618      	mov	r0, r3
 800fa86:	f000 fce5 	bl	8010454 <ip4_addr_isbroadcast_u32>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f040 80cc 	bne.w	800fc2a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	891b      	ldrh	r3, [r3, #8]
 800fa96:	2b07      	cmp	r3, #7
 800fa98:	f240 80c0 	bls.w	800fc1c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f000 f9e0 	bl	800fe62 <inet_chksum_pbuf>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d003      	beq.n	800fab0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f002 fdfd 	bl	80126a8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800faae:	e0c5      	b.n	800fc3c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fab2:	330e      	adds	r3, #14
 800fab4:	4619      	mov	r1, r3
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f002 fd60 	bl	801257c <pbuf_add_header>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d04b      	beq.n	800fb5a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	891a      	ldrh	r2, [r3, #8]
 800fac6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fac8:	4413      	add	r3, r2
 800faca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	891b      	ldrh	r3, [r3, #8]
 800fad0:	8b7a      	ldrh	r2, [r7, #26]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	f0c0 80ab 	bcc.w	800fc2e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fad8:	8b7b      	ldrh	r3, [r7, #26]
 800fada:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fade:	4619      	mov	r1, r3
 800fae0:	200e      	movs	r0, #14
 800fae2:	f002 fafd 	bl	80120e0 <pbuf_alloc>
 800fae6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	2b00      	cmp	r3, #0
 800faec:	f000 80a1 	beq.w	800fc32 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	895b      	ldrh	r3, [r3, #10]
 800faf4:	461a      	mov	r2, r3
 800faf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800faf8:	3308      	adds	r3, #8
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d203      	bcs.n	800fb06 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fafe:	6978      	ldr	r0, [r7, #20]
 800fb00:	f002 fdd2 	bl	80126a8 <pbuf_free>
          goto icmperr;
 800fb04:	e096      	b.n	800fc34 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f00a fbd6 	bl	801a2c0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fb14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb16:	4619      	mov	r1, r3
 800fb18:	6978      	ldr	r0, [r7, #20]
 800fb1a:	f002 fd3f 	bl	801259c <pbuf_remove_header>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d009      	beq.n	800fb38 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fb24:	4b49      	ldr	r3, [pc, #292]	; (800fc4c <icmp_input+0x230>)
 800fb26:	22b6      	movs	r2, #182	; 0xb6
 800fb28:	4949      	ldr	r1, [pc, #292]	; (800fc50 <icmp_input+0x234>)
 800fb2a:	484a      	ldr	r0, [pc, #296]	; (800fc54 <icmp_input+0x238>)
 800fb2c:	f00b faea 	bl	801b104 <iprintf>
          pbuf_free(r);
 800fb30:	6978      	ldr	r0, [r7, #20]
 800fb32:	f002 fdb9 	bl	80126a8 <pbuf_free>
          goto icmperr;
 800fb36:	e07d      	b.n	800fc34 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fb38:	6879      	ldr	r1, [r7, #4]
 800fb3a:	6978      	ldr	r0, [r7, #20]
 800fb3c:	f002 fecc 	bl	80128d8 <pbuf_copy>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fb46:	6978      	ldr	r0, [r7, #20]
 800fb48:	f002 fdae 	bl	80126a8 <pbuf_free>
          goto icmperr;
 800fb4c:	e072      	b.n	800fc34 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f002 fdaa 	bl	80126a8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	607b      	str	r3, [r7, #4]
 800fb58:	e00f      	b.n	800fb7a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fb5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb5c:	330e      	adds	r3, #14
 800fb5e:	4619      	mov	r1, r3
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f002 fd1b 	bl	801259c <pbuf_remove_header>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d006      	beq.n	800fb7a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fb6c:	4b37      	ldr	r3, [pc, #220]	; (800fc4c <icmp_input+0x230>)
 800fb6e:	22c7      	movs	r2, #199	; 0xc7
 800fb70:	4939      	ldr	r1, [pc, #228]	; (800fc58 <icmp_input+0x23c>)
 800fb72:	4838      	ldr	r0, [pc, #224]	; (800fc54 <icmp_input+0x238>)
 800fb74:	f00b fac6 	bl	801b104 <iprintf>
          goto icmperr;
 800fb78:	e05c      	b.n	800fc34 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fb80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb82:	4619      	mov	r1, r3
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f002 fcf9 	bl	801257c <pbuf_add_header>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d13c      	bne.n	800fc0a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fb9e:	4b29      	ldr	r3, [pc, #164]	; (800fc44 <icmp_input+0x228>)
 800fba0:	691a      	ldr	r2, [r3, #16]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	885b      	ldrh	r3, [r3, #2]
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d907      	bls.n	800fbca <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	885b      	ldrh	r3, [r3, #2]
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	3309      	adds	r3, #9
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	805a      	strh	r2, [r3, #2]
 800fbc8:	e006      	b.n	800fbd8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	885b      	ldrh	r3, [r3, #2]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	3308      	adds	r3, #8
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	22ff      	movs	r2, #255	; 0xff
 800fbdc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	729a      	strb	r2, [r3, #10]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	9302      	str	r3, [sp, #8]
 800fbec:	2301      	movs	r3, #1
 800fbee:	9301      	str	r3, [sp, #4]
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	9300      	str	r3, [sp, #0]
 800fbf4:	23ff      	movs	r3, #255	; 0xff
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	69f9      	ldr	r1, [r7, #28]
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 fb52 	bl	80102a4 <ip4_output_if>
 800fc00:	4603      	mov	r3, r0
 800fc02:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fc04:	e001      	b.n	800fc0a <icmp_input+0x1ee>
      break;
 800fc06:	bf00      	nop
 800fc08:	e000      	b.n	800fc0c <icmp_input+0x1f0>
      break;
 800fc0a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f002 fd4b 	bl	80126a8 <pbuf_free>
  return;
 800fc12:	e013      	b.n	800fc3c <icmp_input+0x220>
    goto lenerr;
 800fc14:	bf00      	nop
 800fc16:	e002      	b.n	800fc1e <icmp_input+0x202>
    goto lenerr;
 800fc18:	bf00      	nop
 800fc1a:	e000      	b.n	800fc1e <icmp_input+0x202>
        goto lenerr;
 800fc1c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f002 fd42 	bl	80126a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fc24:	e00a      	b.n	800fc3c <icmp_input+0x220>
        goto icmperr;
 800fc26:	bf00      	nop
 800fc28:	e004      	b.n	800fc34 <icmp_input+0x218>
        goto icmperr;
 800fc2a:	bf00      	nop
 800fc2c:	e002      	b.n	800fc34 <icmp_input+0x218>
          goto icmperr;
 800fc2e:	bf00      	nop
 800fc30:	e000      	b.n	800fc34 <icmp_input+0x218>
          goto icmperr;
 800fc32:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f002 fd37 	bl	80126a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fc3a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fc3c:	3728      	adds	r7, #40	; 0x28
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	24000f00 	.word	0x24000f00
 800fc48:	24000f14 	.word	0x24000f14
 800fc4c:	0801f174 	.word	0x0801f174
 800fc50:	0801f1d4 	.word	0x0801f1d4
 800fc54:	0801f20c 	.word	0x0801f20c
 800fc58:	0801f234 	.word	0x0801f234

0800fc5c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	460b      	mov	r3, r1
 800fc66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fc68:	78fb      	ldrb	r3, [r7, #3]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	2103      	movs	r1, #3
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f814 	bl	800fc9c <icmp_send_response>
}
 800fc74:	bf00      	nop
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	460b      	mov	r3, r1
 800fc86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fc88:	78fb      	ldrb	r3, [r7, #3]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	210b      	movs	r1, #11
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f804 	bl	800fc9c <icmp_send_response>
}
 800fc94:	bf00      	nop
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b08c      	sub	sp, #48	; 0x30
 800fca0:	af04      	add	r7, sp, #16
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	460b      	mov	r3, r1
 800fca6:	70fb      	strb	r3, [r7, #3]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fcac:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fcb0:	2124      	movs	r1, #36	; 0x24
 800fcb2:	2022      	movs	r0, #34	; 0x22
 800fcb4:	f002 fa14 	bl	80120e0 <pbuf_alloc>
 800fcb8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d056      	beq.n	800fd6e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	895b      	ldrh	r3, [r3, #10]
 800fcc4:	2b23      	cmp	r3, #35	; 0x23
 800fcc6:	d806      	bhi.n	800fcd6 <icmp_send_response+0x3a>
 800fcc8:	4b2b      	ldr	r3, [pc, #172]	; (800fd78 <icmp_send_response+0xdc>)
 800fcca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fcce:	492b      	ldr	r1, [pc, #172]	; (800fd7c <icmp_send_response+0xe0>)
 800fcd0:	482b      	ldr	r0, [pc, #172]	; (800fd80 <icmp_send_response+0xe4>)
 800fcd2:	f00b fa17 	bl	801b104 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	78fa      	ldrb	r2, [r7, #3]
 800fce6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	78ba      	ldrb	r2, [r7, #2]
 800fcec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	711a      	strb	r2, [r3, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	719a      	strb	r2, [r3, #6]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	f103 0008 	add.w	r0, r3, #8
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	221c      	movs	r2, #28
 800fd10:	4619      	mov	r1, r3
 800fd12:	f00a fad5 	bl	801a2c0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fd1c:	f107 030c 	add.w	r3, r7, #12
 800fd20:	4618      	mov	r0, r3
 800fd22:	f000 f901 	bl	800ff28 <ip4_route>
 800fd26:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d01b      	beq.n	800fd66 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	2200      	movs	r2, #0
 800fd32:	709a      	strb	r2, [r3, #2]
 800fd34:	2200      	movs	r2, #0
 800fd36:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	895b      	ldrh	r3, [r3, #10]
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	6978      	ldr	r0, [r7, #20]
 800fd40:	f000 f87d 	bl	800fe3e <inet_chksum>
 800fd44:	4603      	mov	r3, r0
 800fd46:	461a      	mov	r2, r3
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fd4c:	f107 020c 	add.w	r2, r7, #12
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	9302      	str	r3, [sp, #8]
 800fd54:	2301      	movs	r3, #1
 800fd56:	9301      	str	r3, [sp, #4]
 800fd58:	2300      	movs	r3, #0
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	23ff      	movs	r3, #255	; 0xff
 800fd5e:	2100      	movs	r1, #0
 800fd60:	69f8      	ldr	r0, [r7, #28]
 800fd62:	f000 fa9f 	bl	80102a4 <ip4_output_if>
  }
  pbuf_free(q);
 800fd66:	69f8      	ldr	r0, [r7, #28]
 800fd68:	f002 fc9e 	bl	80126a8 <pbuf_free>
 800fd6c:	e000      	b.n	800fd70 <icmp_send_response+0xd4>
    return;
 800fd6e:	bf00      	nop
}
 800fd70:	3720      	adds	r7, #32
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
 800fd76:	bf00      	nop
 800fd78:	0801f174 	.word	0x0801f174
 800fd7c:	0801f268 	.word	0x0801f268
 800fd80:	0801f20c 	.word	0x0801f20c

0800fd84 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b089      	sub	sp, #36	; 0x24
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800fd92:	2300      	movs	r3, #0
 800fd94:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fd96:	2300      	movs	r3, #0
 800fd98:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d00d      	beq.n	800fdc4 <lwip_standard_chksum+0x40>
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	dd0a      	ble.n	800fdc4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fdae:	69fa      	ldr	r2, [r7, #28]
 800fdb0:	1c53      	adds	r3, r2, #1
 800fdb2:	61fb      	str	r3, [r7, #28]
 800fdb4:	f107 030e 	add.w	r3, r7, #14
 800fdb8:	3301      	adds	r3, #1
 800fdba:	7812      	ldrb	r2, [r2, #0]
 800fdbc:	701a      	strb	r2, [r3, #0]
    len--;
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fdc8:	e00a      	b.n	800fde0 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	1c9a      	adds	r2, r3, #2
 800fdce:	61ba      	str	r2, [r7, #24]
 800fdd0:	881b      	ldrh	r3, [r3, #0]
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	4413      	add	r3, r2
 800fdd8:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	3b02      	subs	r3, #2
 800fdde:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	dcf1      	bgt.n	800fdca <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	dd04      	ble.n	800fdf6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fdec:	f107 030e 	add.w	r3, r7, #14
 800fdf0:	69ba      	ldr	r2, [r7, #24]
 800fdf2:	7812      	ldrb	r2, [r2, #0]
 800fdf4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800fdf6:	89fb      	ldrh	r3, [r7, #14]
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	0c1a      	lsrs	r2, r3, #16
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	4413      	add	r3, r2
 800fe0a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	0c1a      	lsrs	r2, r3, #16
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	4413      	add	r3, r2
 800fe16:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d007      	beq.n	800fe2e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	021b      	lsls	r3, r3, #8
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	0a1b      	lsrs	r3, r3, #8
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	b29b      	uxth	r3, r3
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3724      	adds	r7, #36	; 0x24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr

0800fe3e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b082      	sub	sp, #8
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
 800fe46:	460b      	mov	r3, r1
 800fe48:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fe4a:	887b      	ldrh	r3, [r7, #2]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f7ff ff98 	bl	800fd84 <lwip_standard_chksum>
 800fe54:	4603      	mov	r3, r0
 800fe56:	43db      	mvns	r3, r3
 800fe58:	b29b      	uxth	r3, r3
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b086      	sub	sp, #24
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	613b      	str	r3, [r7, #16]
 800fe76:	e02b      	b.n	800fed0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	895b      	ldrh	r3, [r3, #10]
 800fe80:	4619      	mov	r1, r3
 800fe82:	4610      	mov	r0, r2
 800fe84:	f7ff ff7e 	bl	800fd84 <lwip_standard_chksum>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	4413      	add	r3, r2
 800fe90:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	0c1a      	lsrs	r2, r3, #16
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	b29b      	uxth	r3, r3
 800fe9a:	4413      	add	r3, r2
 800fe9c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	895b      	ldrh	r3, [r3, #10]
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00e      	beq.n	800feca <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	bf0c      	ite	eq
 800feb2:	2301      	moveq	r3, #1
 800feb4:	2300      	movne	r3, #0
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	021b      	lsls	r3, r3, #8
 800febe:	b29a      	uxth	r2, r3
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	0a1b      	lsrs	r3, r3, #8
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	4313      	orrs	r3, r2
 800fec8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	613b      	str	r3, [r7, #16]
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d1d0      	bne.n	800fe78 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d007      	beq.n	800feec <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	021b      	lsls	r3, r3, #8
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	0a1b      	lsrs	r3, r3, #8
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	4313      	orrs	r3, r2
 800feea:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	b29b      	uxth	r3, r3
 800fef0:	43db      	mvns	r3, r3
 800fef2:	b29b      	uxth	r3, r3
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3718      	adds	r7, #24
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ff02:	2300      	movs	r3, #0
 800ff04:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ff06:	f001 f9e5 	bl	80112d4 <mem_init>
  memp_init();
 800ff0a:	f001 fce7 	bl	80118dc <memp_init>
  pbuf_init();
  netif_init();
 800ff0e:	f001 fd9f 	bl	8011a50 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ff12:	f008 f8b7 	bl	8018084 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ff16:	f002 fe55 	bl	8012bc4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ff1a:	f008 f86b 	bl	8017ff4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ff1e:	bf00      	nop
 800ff20:	3708      	adds	r7, #8
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
	...

0800ff28 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b085      	sub	sp, #20
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ff30:	4b33      	ldr	r3, [pc, #204]	; (8010000 <ip4_route+0xd8>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	60fb      	str	r3, [r7, #12]
 800ff36:	e036      	b.n	800ffa6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff3e:	f003 0301 	and.w	r3, r3, #1
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d02b      	beq.n	800ffa0 <ip4_route+0x78>
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff4e:	089b      	lsrs	r3, r3, #2
 800ff50:	f003 0301 	and.w	r3, r3, #1
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d022      	beq.n	800ffa0 <ip4_route+0x78>
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	3304      	adds	r3, #4
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d01d      	beq.n	800ffa0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	3304      	adds	r3, #4
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	405a      	eors	r2, r3
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	3308      	adds	r3, #8
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4013      	ands	r3, r2
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	e038      	b.n	800fff2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff86:	f003 0302 	and.w	r3, r3, #2
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d108      	bne.n	800ffa0 <ip4_route+0x78>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	330c      	adds	r3, #12
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d101      	bne.n	800ffa0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	e028      	b.n	800fff2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	60fb      	str	r3, [r7, #12]
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1c5      	bne.n	800ff38 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ffac:	4b15      	ldr	r3, [pc, #84]	; (8010004 <ip4_route+0xdc>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01a      	beq.n	800ffea <ip4_route+0xc2>
 800ffb4:	4b13      	ldr	r3, [pc, #76]	; (8010004 <ip4_route+0xdc>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffbc:	f003 0301 	and.w	r3, r3, #1
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d012      	beq.n	800ffea <ip4_route+0xc2>
 800ffc4:	4b0f      	ldr	r3, [pc, #60]	; (8010004 <ip4_route+0xdc>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffcc:	f003 0304 	and.w	r3, r3, #4
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00a      	beq.n	800ffea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ffd4:	4b0b      	ldr	r3, [pc, #44]	; (8010004 <ip4_route+0xdc>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	3304      	adds	r3, #4
 800ffda:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d004      	beq.n	800ffea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	2b7f      	cmp	r3, #127	; 0x7f
 800ffe8:	d101      	bne.n	800ffee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ffea:	2300      	movs	r3, #0
 800ffec:	e001      	b.n	800fff2 <ip4_route+0xca>
  }

  return netif_default;
 800ffee:	4b05      	ldr	r3, [pc, #20]	; (8010004 <ip4_route+0xdc>)
 800fff0:	681b      	ldr	r3, [r3, #0]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3714      	adds	r7, #20
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	24003de0 	.word	0x24003de0
 8010004:	24003de4 	.word	0x24003de4

08010008 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010016:	f003 0301 	and.w	r3, r3, #1
 801001a:	b2db      	uxtb	r3, r3
 801001c:	2b00      	cmp	r3, #0
 801001e:	d016      	beq.n	801004e <ip4_input_accept+0x46>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	3304      	adds	r3, #4
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d011      	beq.n	801004e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801002a:	4b0b      	ldr	r3, [pc, #44]	; (8010058 <ip4_input_accept+0x50>)
 801002c:	695a      	ldr	r2, [r3, #20]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	3304      	adds	r3, #4
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	429a      	cmp	r2, r3
 8010036:	d008      	beq.n	801004a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010038:	4b07      	ldr	r3, [pc, #28]	; (8010058 <ip4_input_accept+0x50>)
 801003a:	695b      	ldr	r3, [r3, #20]
 801003c:	6879      	ldr	r1, [r7, #4]
 801003e:	4618      	mov	r0, r3
 8010040:	f000 fa08 	bl	8010454 <ip4_addr_isbroadcast_u32>
 8010044:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010046:	2b00      	cmp	r3, #0
 8010048:	d001      	beq.n	801004e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801004a:	2301      	movs	r3, #1
 801004c:	e000      	b.n	8010050 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801004e:	2300      	movs	r3, #0
}
 8010050:	4618      	mov	r0, r3
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	24000f00 	.word	0x24000f00

0801005c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b086      	sub	sp, #24
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	091b      	lsrs	r3, r3, #4
 8010072:	b2db      	uxtb	r3, r3
 8010074:	2b04      	cmp	r3, #4
 8010076:	d004      	beq.n	8010082 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f002 fb15 	bl	80126a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801007e:	2300      	movs	r3, #0
 8010080:	e107      	b.n	8010292 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	f003 030f 	and.w	r3, r3, #15
 801008a:	b2db      	uxtb	r3, r3
 801008c:	009b      	lsls	r3, r3, #2
 801008e:	b2db      	uxtb	r3, r3
 8010090:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	885b      	ldrh	r3, [r3, #2]
 8010096:	b29b      	uxth	r3, r3
 8010098:	4618      	mov	r0, r3
 801009a:	f7fe fc6f 	bl	800e97c <lwip_htons>
 801009e:	4603      	mov	r3, r0
 80100a0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	891b      	ldrh	r3, [r3, #8]
 80100a6:	89ba      	ldrh	r2, [r7, #12]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d204      	bcs.n	80100b6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80100ac:	89bb      	ldrh	r3, [r7, #12]
 80100ae:	4619      	mov	r1, r3
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f002 f973 	bl	801239c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	895b      	ldrh	r3, [r3, #10]
 80100ba:	89fa      	ldrh	r2, [r7, #14]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d807      	bhi.n	80100d0 <ip4_input+0x74>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	891b      	ldrh	r3, [r3, #8]
 80100c4:	89ba      	ldrh	r2, [r7, #12]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d802      	bhi.n	80100d0 <ip4_input+0x74>
 80100ca:	89fb      	ldrh	r3, [r7, #14]
 80100cc:	2b13      	cmp	r3, #19
 80100ce:	d804      	bhi.n	80100da <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f002 fae9 	bl	80126a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80100d6:	2300      	movs	r3, #0
 80100d8:	e0db      	b.n	8010292 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	691b      	ldr	r3, [r3, #16]
 80100de:	4a6f      	ldr	r2, [pc, #444]	; (801029c <ip4_input+0x240>)
 80100e0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	4a6d      	ldr	r2, [pc, #436]	; (801029c <ip4_input+0x240>)
 80100e8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80100ea:	4b6c      	ldr	r3, [pc, #432]	; (801029c <ip4_input+0x240>)
 80100ec:	695b      	ldr	r3, [r3, #20]
 80100ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100f2:	2be0      	cmp	r3, #224	; 0xe0
 80100f4:	d112      	bne.n	801011c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80100fc:	f003 0301 	and.w	r3, r3, #1
 8010100:	b2db      	uxtb	r3, r3
 8010102:	2b00      	cmp	r3, #0
 8010104:	d007      	beq.n	8010116 <ip4_input+0xba>
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	3304      	adds	r3, #4
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d002      	beq.n	8010116 <ip4_input+0xba>
      netif = inp;
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	613b      	str	r3, [r7, #16]
 8010114:	e02a      	b.n	801016c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010116:	2300      	movs	r3, #0
 8010118:	613b      	str	r3, [r7, #16]
 801011a:	e027      	b.n	801016c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801011c:	6838      	ldr	r0, [r7, #0]
 801011e:	f7ff ff73 	bl	8010008 <ip4_input_accept>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <ip4_input+0xd2>
      netif = inp;
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	613b      	str	r3, [r7, #16]
 801012c:	e01e      	b.n	801016c <ip4_input+0x110>
    } else {
      netif = NULL;
 801012e:	2300      	movs	r3, #0
 8010130:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010132:	4b5a      	ldr	r3, [pc, #360]	; (801029c <ip4_input+0x240>)
 8010134:	695b      	ldr	r3, [r3, #20]
 8010136:	b2db      	uxtb	r3, r3
 8010138:	2b7f      	cmp	r3, #127	; 0x7f
 801013a:	d017      	beq.n	801016c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801013c:	4b58      	ldr	r3, [pc, #352]	; (80102a0 <ip4_input+0x244>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	613b      	str	r3, [r7, #16]
 8010142:	e00e      	b.n	8010162 <ip4_input+0x106>
          if (netif == inp) {
 8010144:	693a      	ldr	r2, [r7, #16]
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	429a      	cmp	r2, r3
 801014a:	d006      	beq.n	801015a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801014c:	6938      	ldr	r0, [r7, #16]
 801014e:	f7ff ff5b 	bl	8010008 <ip4_input_accept>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d108      	bne.n	801016a <ip4_input+0x10e>
 8010158:	e000      	b.n	801015c <ip4_input+0x100>
            continue;
 801015a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	613b      	str	r3, [r7, #16]
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d1ed      	bne.n	8010144 <ip4_input+0xe8>
 8010168:	e000      	b.n	801016c <ip4_input+0x110>
            break;
 801016a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801016c:	4b4b      	ldr	r3, [pc, #300]	; (801029c <ip4_input+0x240>)
 801016e:	691b      	ldr	r3, [r3, #16]
 8010170:	6839      	ldr	r1, [r7, #0]
 8010172:	4618      	mov	r0, r3
 8010174:	f000 f96e 	bl	8010454 <ip4_addr_isbroadcast_u32>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d105      	bne.n	801018a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801017e:	4b47      	ldr	r3, [pc, #284]	; (801029c <ip4_input+0x240>)
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010186:	2be0      	cmp	r3, #224	; 0xe0
 8010188:	d104      	bne.n	8010194 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f002 fa8c 	bl	80126a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010190:	2300      	movs	r3, #0
 8010192:	e07e      	b.n	8010292 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d104      	bne.n	80101a4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f002 fa84 	bl	80126a8 <pbuf_free>
    return ERR_OK;
 80101a0:	2300      	movs	r3, #0
 80101a2:	e076      	b.n	8010292 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	88db      	ldrh	r3, [r3, #6]
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	461a      	mov	r2, r3
 80101ac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80101b0:	4013      	ands	r3, r2
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00b      	beq.n	80101ce <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 fc92 	bl	8010ae0 <ip4_reass>
 80101bc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d101      	bne.n	80101c8 <ip4_input+0x16c>
      return ERR_OK;
 80101c4:	2300      	movs	r3, #0
 80101c6:	e064      	b.n	8010292 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80101ce:	4a33      	ldr	r2, [pc, #204]	; (801029c <ip4_input+0x240>)
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80101d4:	4a31      	ldr	r2, [pc, #196]	; (801029c <ip4_input+0x240>)
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80101da:	4a30      	ldr	r2, [pc, #192]	; (801029c <ip4_input+0x240>)
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	f003 030f 	and.w	r3, r3, #15
 80101e8:	b2db      	uxtb	r3, r3
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	4b2a      	ldr	r3, [pc, #168]	; (801029c <ip4_input+0x240>)
 80101f2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80101f4:	89fb      	ldrh	r3, [r7, #14]
 80101f6:	4619      	mov	r1, r3
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f002 f9cf 	bl	801259c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	7a5b      	ldrb	r3, [r3, #9]
 8010202:	2b11      	cmp	r3, #17
 8010204:	d006      	beq.n	8010214 <ip4_input+0x1b8>
 8010206:	2b11      	cmp	r3, #17
 8010208:	dc13      	bgt.n	8010232 <ip4_input+0x1d6>
 801020a:	2b01      	cmp	r3, #1
 801020c:	d00c      	beq.n	8010228 <ip4_input+0x1cc>
 801020e:	2b06      	cmp	r3, #6
 8010210:	d005      	beq.n	801021e <ip4_input+0x1c2>
 8010212:	e00e      	b.n	8010232 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010214:	6839      	ldr	r1, [r7, #0]
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f007 ffaa 	bl	8018170 <udp_input>
        break;
 801021c:	e026      	b.n	801026c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801021e:	6839      	ldr	r1, [r7, #0]
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f004 f869 	bl	80142f8 <tcp_input>
        break;
 8010226:	e021      	b.n	801026c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010228:	6839      	ldr	r1, [r7, #0]
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7ff fbf6 	bl	800fa1c <icmp_input>
        break;
 8010230:	e01c      	b.n	801026c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010232:	4b1a      	ldr	r3, [pc, #104]	; (801029c <ip4_input+0x240>)
 8010234:	695b      	ldr	r3, [r3, #20]
 8010236:	6939      	ldr	r1, [r7, #16]
 8010238:	4618      	mov	r0, r3
 801023a:	f000 f90b 	bl	8010454 <ip4_addr_isbroadcast_u32>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d10f      	bne.n	8010264 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010244:	4b15      	ldr	r3, [pc, #84]	; (801029c <ip4_input+0x240>)
 8010246:	695b      	ldr	r3, [r3, #20]
 8010248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801024c:	2be0      	cmp	r3, #224	; 0xe0
 801024e:	d009      	beq.n	8010264 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010254:	4619      	mov	r1, r3
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f002 fa13 	bl	8012682 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801025c:	2102      	movs	r1, #2
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f7ff fcfc 	bl	800fc5c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f002 fa1f 	bl	80126a8 <pbuf_free>
        break;
 801026a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801026c:	4b0b      	ldr	r3, [pc, #44]	; (801029c <ip4_input+0x240>)
 801026e:	2200      	movs	r2, #0
 8010270:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010272:	4b0a      	ldr	r3, [pc, #40]	; (801029c <ip4_input+0x240>)
 8010274:	2200      	movs	r2, #0
 8010276:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010278:	4b08      	ldr	r3, [pc, #32]	; (801029c <ip4_input+0x240>)
 801027a:	2200      	movs	r2, #0
 801027c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801027e:	4b07      	ldr	r3, [pc, #28]	; (801029c <ip4_input+0x240>)
 8010280:	2200      	movs	r2, #0
 8010282:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010284:	4b05      	ldr	r3, [pc, #20]	; (801029c <ip4_input+0x240>)
 8010286:	2200      	movs	r2, #0
 8010288:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801028a:	4b04      	ldr	r3, [pc, #16]	; (801029c <ip4_input+0x240>)
 801028c:	2200      	movs	r2, #0
 801028e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3718      	adds	r7, #24
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	24000f00 	.word	0x24000f00
 80102a0:	24003de0 	.word	0x24003de0

080102a4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b08a      	sub	sp, #40	; 0x28
 80102a8:	af04      	add	r7, sp, #16
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	607a      	str	r2, [r7, #4]
 80102b0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d009      	beq.n	80102d0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d003      	beq.n	80102ca <ip4_output_if+0x26>
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d102      	bne.n	80102d0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80102ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102cc:	3304      	adds	r3, #4
 80102ce:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80102d0:	78fa      	ldrb	r2, [r7, #3]
 80102d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d4:	9302      	str	r3, [sp, #8]
 80102d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80102da:	9301      	str	r3, [sp, #4]
 80102dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	4613      	mov	r3, r2
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	6979      	ldr	r1, [r7, #20]
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	f000 f805 	bl	80102f8 <ip4_output_if_src>
 80102ee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3718      	adds	r7, #24
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b088      	sub	sp, #32
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	7b9b      	ldrb	r3, [r3, #14]
 801030a:	2b01      	cmp	r3, #1
 801030c:	d006      	beq.n	801031c <ip4_output_if_src+0x24>
 801030e:	4b4b      	ldr	r3, [pc, #300]	; (801043c <ip4_output_if_src+0x144>)
 8010310:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010314:	494a      	ldr	r1, [pc, #296]	; (8010440 <ip4_output_if_src+0x148>)
 8010316:	484b      	ldr	r0, [pc, #300]	; (8010444 <ip4_output_if_src+0x14c>)
 8010318:	f00a fef4 	bl	801b104 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d060      	beq.n	80103e4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010322:	2314      	movs	r3, #20
 8010324:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010326:	2114      	movs	r1, #20
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f002 f927 	bl	801257c <pbuf_add_header>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010334:	f06f 0301 	mvn.w	r3, #1
 8010338:	e07c      	b.n	8010434 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	895b      	ldrh	r3, [r3, #10]
 8010344:	2b13      	cmp	r3, #19
 8010346:	d806      	bhi.n	8010356 <ip4_output_if_src+0x5e>
 8010348:	4b3c      	ldr	r3, [pc, #240]	; (801043c <ip4_output_if_src+0x144>)
 801034a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801034e:	493e      	ldr	r1, [pc, #248]	; (8010448 <ip4_output_if_src+0x150>)
 8010350:	483c      	ldr	r0, [pc, #240]	; (8010444 <ip4_output_if_src+0x14c>)
 8010352:	f00a fed7 	bl	801b104 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	78fa      	ldrb	r2, [r7, #3]
 801035a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010362:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801036c:	8b7b      	ldrh	r3, [r7, #26]
 801036e:	089b      	lsrs	r3, r3, #2
 8010370:	b29b      	uxth	r3, r3
 8010372:	b2db      	uxtb	r3, r3
 8010374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010378:	b2da      	uxtb	r2, r3
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010384:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	891b      	ldrh	r3, [r3, #8]
 801038a:	4618      	mov	r0, r3
 801038c:	f7fe faf6 	bl	800e97c <lwip_htons>
 8010390:	4603      	mov	r3, r0
 8010392:	461a      	mov	r2, r3
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	2200      	movs	r2, #0
 801039c:	719a      	strb	r2, [r3, #6]
 801039e:	2200      	movs	r2, #0
 80103a0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80103a2:	4b2a      	ldr	r3, [pc, #168]	; (801044c <ip4_output_if_src+0x154>)
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fe fae8 	bl	800e97c <lwip_htons>
 80103ac:	4603      	mov	r3, r0
 80103ae:	461a      	mov	r2, r3
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80103b4:	4b25      	ldr	r3, [pc, #148]	; (801044c <ip4_output_if_src+0x154>)
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	3301      	adds	r3, #1
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	4b23      	ldr	r3, [pc, #140]	; (801044c <ip4_output_if_src+0x154>)
 80103be:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d104      	bne.n	80103d0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80103c6:	4b22      	ldr	r3, [pc, #136]	; (8010450 <ip4_output_if_src+0x158>)
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	60da      	str	r2, [r3, #12]
 80103ce:	e003      	b.n	80103d8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	2200      	movs	r2, #0
 80103dc:	729a      	strb	r2, [r3, #10]
 80103de:	2200      	movs	r2, #0
 80103e0:	72da      	strb	r2, [r3, #11]
 80103e2:	e00f      	b.n	8010404 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	895b      	ldrh	r3, [r3, #10]
 80103e8:	2b13      	cmp	r3, #19
 80103ea:	d802      	bhi.n	80103f2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80103ec:	f06f 0301 	mvn.w	r3, #1
 80103f0:	e020      	b.n	8010434 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	691b      	ldr	r3, [r3, #16]
 80103fc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80103fe:	f107 0314 	add.w	r3, r7, #20
 8010402:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010406:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010408:	2b00      	cmp	r3, #0
 801040a:	d00c      	beq.n	8010426 <ip4_output_if_src+0x12e>
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	891a      	ldrh	r2, [r3, #8]
 8010410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010412:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010414:	429a      	cmp	r2, r3
 8010416:	d906      	bls.n	8010426 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f000 fd4d 	bl	8010ebc <ip4_frag>
 8010422:	4603      	mov	r3, r0
 8010424:	e006      	b.n	8010434 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010428:	695b      	ldr	r3, [r3, #20]
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	68f9      	ldr	r1, [r7, #12]
 801042e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010430:	4798      	blx	r3
 8010432:	4603      	mov	r3, r0
}
 8010434:	4618      	mov	r0, r3
 8010436:	3720      	adds	r7, #32
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	0801f294 	.word	0x0801f294
 8010440:	0801f2f4 	.word	0x0801f2f4
 8010444:	0801f300 	.word	0x0801f300
 8010448:	0801f328 	.word	0x0801f328
 801044c:	2400072a 	.word	0x2400072a
 8010450:	08021a8c 	.word	0x08021a8c

08010454 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010468:	d002      	beq.n	8010470 <ip4_addr_isbroadcast_u32+0x1c>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d101      	bne.n	8010474 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010470:	2301      	movs	r3, #1
 8010472:	e02a      	b.n	80104ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801047a:	f003 0302 	and.w	r3, r3, #2
 801047e:	2b00      	cmp	r3, #0
 8010480:	d101      	bne.n	8010486 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010482:	2300      	movs	r3, #0
 8010484:	e021      	b.n	80104ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	3304      	adds	r3, #4
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	429a      	cmp	r2, r3
 8010490:	d101      	bne.n	8010496 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010492:	2300      	movs	r3, #0
 8010494:	e019      	b.n	80104ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	3304      	adds	r3, #4
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	405a      	eors	r2, r3
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	3308      	adds	r3, #8
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4013      	ands	r3, r2
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10d      	bne.n	80104c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	3308      	adds	r3, #8
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	43da      	mvns	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	3308      	adds	r3, #8
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d101      	bne.n	80104c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80104c4:	2301      	movs	r3, #1
 80104c6:	e000      	b.n	80104ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80104c8:	2300      	movs	r3, #0
  }
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
	...

080104d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80104e2:	4b12      	ldr	r3, [pc, #72]	; (801052c <ip_reass_tmr+0x54>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80104e8:	e018      	b.n	801051c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	7fdb      	ldrb	r3, [r3, #31]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00b      	beq.n	801050a <ip_reass_tmr+0x32>
      r->timer--;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	7fdb      	ldrb	r3, [r3, #31]
 80104f6:	3b01      	subs	r3, #1
 80104f8:	b2da      	uxtb	r2, r3
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	60fb      	str	r3, [r7, #12]
 8010508:	e008      	b.n	801051c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010514:	68b9      	ldr	r1, [r7, #8]
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 f80a 	bl	8010530 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d1e3      	bne.n	80104ea <ip_reass_tmr+0x12>
    }
  }
}
 8010522:	bf00      	nop
 8010524:	bf00      	nop
 8010526:	3710      	adds	r7, #16
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	2400072c 	.word	0x2400072c

08010530 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b088      	sub	sp, #32
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801053a:	2300      	movs	r3, #0
 801053c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	429a      	cmp	r2, r3
 8010544:	d105      	bne.n	8010552 <ip_reass_free_complete_datagram+0x22>
 8010546:	4b45      	ldr	r3, [pc, #276]	; (801065c <ip_reass_free_complete_datagram+0x12c>)
 8010548:	22ab      	movs	r2, #171	; 0xab
 801054a:	4945      	ldr	r1, [pc, #276]	; (8010660 <ip_reass_free_complete_datagram+0x130>)
 801054c:	4845      	ldr	r0, [pc, #276]	; (8010664 <ip_reass_free_complete_datagram+0x134>)
 801054e:	f00a fdd9 	bl	801b104 <iprintf>
  if (prev != NULL) {
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d00a      	beq.n	801056e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	429a      	cmp	r2, r3
 8010560:	d005      	beq.n	801056e <ip_reass_free_complete_datagram+0x3e>
 8010562:	4b3e      	ldr	r3, [pc, #248]	; (801065c <ip_reass_free_complete_datagram+0x12c>)
 8010564:	22ad      	movs	r2, #173	; 0xad
 8010566:	4940      	ldr	r1, [pc, #256]	; (8010668 <ip_reass_free_complete_datagram+0x138>)
 8010568:	483e      	ldr	r0, [pc, #248]	; (8010664 <ip_reass_free_complete_datagram+0x134>)
 801056a:	f00a fdcb 	bl	801b104 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	889b      	ldrh	r3, [r3, #4]
 801057a:	b29b      	uxth	r3, r3
 801057c:	2b00      	cmp	r3, #0
 801057e:	d12a      	bne.n	80105d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	6858      	ldr	r0, [r3, #4]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	3308      	adds	r3, #8
 8010596:	2214      	movs	r2, #20
 8010598:	4619      	mov	r1, r3
 801059a:	f009 fe91 	bl	801a2c0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801059e:	2101      	movs	r1, #1
 80105a0:	69b8      	ldr	r0, [r7, #24]
 80105a2:	f7ff fb6b 	bl	800fc7c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80105a6:	69b8      	ldr	r0, [r7, #24]
 80105a8:	f002 f906 	bl	80127b8 <pbuf_clen>
 80105ac:	4603      	mov	r3, r0
 80105ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80105b0:	8bfa      	ldrh	r2, [r7, #30]
 80105b2:	8a7b      	ldrh	r3, [r7, #18]
 80105b4:	4413      	add	r3, r2
 80105b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105ba:	db05      	blt.n	80105c8 <ip_reass_free_complete_datagram+0x98>
 80105bc:	4b27      	ldr	r3, [pc, #156]	; (801065c <ip_reass_free_complete_datagram+0x12c>)
 80105be:	22bc      	movs	r2, #188	; 0xbc
 80105c0:	492a      	ldr	r1, [pc, #168]	; (801066c <ip_reass_free_complete_datagram+0x13c>)
 80105c2:	4828      	ldr	r0, [pc, #160]	; (8010664 <ip_reass_free_complete_datagram+0x134>)
 80105c4:	f00a fd9e 	bl	801b104 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80105c8:	8bfa      	ldrh	r2, [r7, #30]
 80105ca:	8a7b      	ldrh	r3, [r7, #18]
 80105cc:	4413      	add	r3, r2
 80105ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80105d0:	69b8      	ldr	r0, [r7, #24]
 80105d2:	f002 f869 	bl	80126a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80105dc:	e01f      	b.n	801061e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80105de:	69bb      	ldr	r3, [r7, #24]
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80105ee:	68f8      	ldr	r0, [r7, #12]
 80105f0:	f002 f8e2 	bl	80127b8 <pbuf_clen>
 80105f4:	4603      	mov	r3, r0
 80105f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80105f8:	8bfa      	ldrh	r2, [r7, #30]
 80105fa:	8a7b      	ldrh	r3, [r7, #18]
 80105fc:	4413      	add	r3, r2
 80105fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010602:	db05      	blt.n	8010610 <ip_reass_free_complete_datagram+0xe0>
 8010604:	4b15      	ldr	r3, [pc, #84]	; (801065c <ip_reass_free_complete_datagram+0x12c>)
 8010606:	22cc      	movs	r2, #204	; 0xcc
 8010608:	4918      	ldr	r1, [pc, #96]	; (801066c <ip_reass_free_complete_datagram+0x13c>)
 801060a:	4816      	ldr	r0, [pc, #88]	; (8010664 <ip_reass_free_complete_datagram+0x134>)
 801060c:	f00a fd7a 	bl	801b104 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010610:	8bfa      	ldrh	r2, [r7, #30]
 8010612:	8a7b      	ldrh	r3, [r7, #18]
 8010614:	4413      	add	r3, r2
 8010616:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f002 f845 	bl	80126a8 <pbuf_free>
  while (p != NULL) {
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1dc      	bne.n	80105de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010624:	6839      	ldr	r1, [r7, #0]
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f000 f8c2 	bl	80107b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801062c:	4b10      	ldr	r3, [pc, #64]	; (8010670 <ip_reass_free_complete_datagram+0x140>)
 801062e:	881b      	ldrh	r3, [r3, #0]
 8010630:	8bfa      	ldrh	r2, [r7, #30]
 8010632:	429a      	cmp	r2, r3
 8010634:	d905      	bls.n	8010642 <ip_reass_free_complete_datagram+0x112>
 8010636:	4b09      	ldr	r3, [pc, #36]	; (801065c <ip_reass_free_complete_datagram+0x12c>)
 8010638:	22d2      	movs	r2, #210	; 0xd2
 801063a:	490e      	ldr	r1, [pc, #56]	; (8010674 <ip_reass_free_complete_datagram+0x144>)
 801063c:	4809      	ldr	r0, [pc, #36]	; (8010664 <ip_reass_free_complete_datagram+0x134>)
 801063e:	f00a fd61 	bl	801b104 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010642:	4b0b      	ldr	r3, [pc, #44]	; (8010670 <ip_reass_free_complete_datagram+0x140>)
 8010644:	881a      	ldrh	r2, [r3, #0]
 8010646:	8bfb      	ldrh	r3, [r7, #30]
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	b29a      	uxth	r2, r3
 801064c:	4b08      	ldr	r3, [pc, #32]	; (8010670 <ip_reass_free_complete_datagram+0x140>)
 801064e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010650:	8bfb      	ldrh	r3, [r7, #30]
}
 8010652:	4618      	mov	r0, r3
 8010654:	3720      	adds	r7, #32
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	0801f358 	.word	0x0801f358
 8010660:	0801f3bc 	.word	0x0801f3bc
 8010664:	0801f3c8 	.word	0x0801f3c8
 8010668:	0801f3f0 	.word	0x0801f3f0
 801066c:	0801f404 	.word	0x0801f404
 8010670:	24000730 	.word	0x24000730
 8010674:	0801f424 	.word	0x0801f424

08010678 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b08a      	sub	sp, #40	; 0x28
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010682:	2300      	movs	r3, #0
 8010684:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010686:	2300      	movs	r3, #0
 8010688:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801068a:	2300      	movs	r3, #0
 801068c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801068e:	2300      	movs	r3, #0
 8010690:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010692:	2300      	movs	r3, #0
 8010694:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010696:	4b28      	ldr	r3, [pc, #160]	; (8010738 <ip_reass_remove_oldest_datagram+0xc0>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801069c:	e030      	b.n	8010700 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a0:	695a      	ldr	r2, [r3, #20]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	68db      	ldr	r3, [r3, #12]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d10c      	bne.n	80106c4 <ip_reass_remove_oldest_datagram+0x4c>
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	699a      	ldr	r2, [r3, #24]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	691b      	ldr	r3, [r3, #16]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d106      	bne.n	80106c4 <ip_reass_remove_oldest_datagram+0x4c>
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b8:	899a      	ldrh	r2, [r3, #12]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	889b      	ldrh	r3, [r3, #4]
 80106be:	b29b      	uxth	r3, r3
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d014      	beq.n	80106ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	3301      	adds	r3, #1
 80106c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80106ca:	6a3b      	ldr	r3, [r7, #32]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d104      	bne.n	80106da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80106d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	61bb      	str	r3, [r7, #24]
 80106d8:	e009      	b.n	80106ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80106da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106dc:	7fda      	ldrb	r2, [r3, #31]
 80106de:	6a3b      	ldr	r3, [r7, #32]
 80106e0:	7fdb      	ldrb	r3, [r3, #31]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d803      	bhi.n	80106ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80106e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80106ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d001      	beq.n	80106fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80106f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80106fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1cb      	bne.n	801069e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010706:	6a3b      	ldr	r3, [r7, #32]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d008      	beq.n	801071e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801070c:	69b9      	ldr	r1, [r7, #24]
 801070e:	6a38      	ldr	r0, [r7, #32]
 8010710:	f7ff ff0e 	bl	8010530 <ip_reass_free_complete_datagram>
 8010714:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010716:	697a      	ldr	r2, [r7, #20]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	4413      	add	r3, r2
 801071c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801071e:	697a      	ldr	r2, [r7, #20]
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	429a      	cmp	r2, r3
 8010724:	da02      	bge.n	801072c <ip_reass_remove_oldest_datagram+0xb4>
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	2b01      	cmp	r3, #1
 801072a:	dcac      	bgt.n	8010686 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801072c:	697b      	ldr	r3, [r7, #20]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3728      	adds	r7, #40	; 0x28
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	2400072c 	.word	0x2400072c

0801073c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010746:	2004      	movs	r0, #4
 8010748:	f001 f90c 	bl	8011964 <memp_malloc>
 801074c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d110      	bne.n	8010776 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010754:	6839      	ldr	r1, [r7, #0]
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7ff ff8e 	bl	8010678 <ip_reass_remove_oldest_datagram>
 801075c:	4602      	mov	r2, r0
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	4293      	cmp	r3, r2
 8010762:	dc03      	bgt.n	801076c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010764:	2004      	movs	r0, #4
 8010766:	f001 f8fd 	bl	8011964 <memp_malloc>
 801076a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d101      	bne.n	8010776 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010772:	2300      	movs	r3, #0
 8010774:	e016      	b.n	80107a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010776:	2220      	movs	r2, #32
 8010778:	2100      	movs	r1, #0
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f009 fdc8 	bl	801a310 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	220f      	movs	r2, #15
 8010784:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010786:	4b09      	ldr	r3, [pc, #36]	; (80107ac <ip_reass_enqueue_new_datagram+0x70>)
 8010788:	681a      	ldr	r2, [r3, #0]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801078e:	4a07      	ldr	r2, [pc, #28]	; (80107ac <ip_reass_enqueue_new_datagram+0x70>)
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	3308      	adds	r3, #8
 8010798:	2214      	movs	r2, #20
 801079a:	6879      	ldr	r1, [r7, #4]
 801079c:	4618      	mov	r0, r3
 801079e:	f009 fd8f 	bl	801a2c0 <memcpy>
  return ipr;
 80107a2:	68fb      	ldr	r3, [r7, #12]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3710      	adds	r7, #16
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	2400072c 	.word	0x2400072c

080107b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80107ba:	4b10      	ldr	r3, [pc, #64]	; (80107fc <ip_reass_dequeue_datagram+0x4c>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d104      	bne.n	80107ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4a0c      	ldr	r2, [pc, #48]	; (80107fc <ip_reass_dequeue_datagram+0x4c>)
 80107ca:	6013      	str	r3, [r2, #0]
 80107cc:	e00d      	b.n	80107ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d106      	bne.n	80107e2 <ip_reass_dequeue_datagram+0x32>
 80107d4:	4b0a      	ldr	r3, [pc, #40]	; (8010800 <ip_reass_dequeue_datagram+0x50>)
 80107d6:	f240 1245 	movw	r2, #325	; 0x145
 80107da:	490a      	ldr	r1, [pc, #40]	; (8010804 <ip_reass_dequeue_datagram+0x54>)
 80107dc:	480a      	ldr	r0, [pc, #40]	; (8010808 <ip_reass_dequeue_datagram+0x58>)
 80107de:	f00a fc91 	bl	801b104 <iprintf>
    prev->next = ipr->next;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80107ea:	6879      	ldr	r1, [r7, #4]
 80107ec:	2004      	movs	r0, #4
 80107ee:	f001 f905 	bl	80119fc <memp_free>
}
 80107f2:	bf00      	nop
 80107f4:	3708      	adds	r7, #8
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	2400072c 	.word	0x2400072c
 8010800:	0801f358 	.word	0x0801f358
 8010804:	0801f448 	.word	0x0801f448
 8010808:	0801f3c8 	.word	0x0801f3c8

0801080c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b08c      	sub	sp, #48	; 0x30
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	60b9      	str	r1, [r7, #8]
 8010816:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010818:	2300      	movs	r3, #0
 801081a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801081c:	2301      	movs	r3, #1
 801081e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	885b      	ldrh	r3, [r3, #2]
 801082a:	b29b      	uxth	r3, r3
 801082c:	4618      	mov	r0, r3
 801082e:	f7fe f8a5 	bl	800e97c <lwip_htons>
 8010832:	4603      	mov	r3, r0
 8010834:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	f003 030f 	and.w	r3, r3, #15
 801083e:	b2db      	uxtb	r3, r3
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010844:	7e7b      	ldrb	r3, [r7, #25]
 8010846:	b29b      	uxth	r3, r3
 8010848:	8b7a      	ldrh	r2, [r7, #26]
 801084a:	429a      	cmp	r2, r3
 801084c:	d202      	bcs.n	8010854 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801084e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010852:	e135      	b.n	8010ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010854:	7e7b      	ldrb	r3, [r7, #25]
 8010856:	b29b      	uxth	r3, r3
 8010858:	8b7a      	ldrh	r2, [r7, #26]
 801085a:	1ad3      	subs	r3, r2, r3
 801085c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	88db      	ldrh	r3, [r3, #6]
 8010862:	b29b      	uxth	r3, r3
 8010864:	4618      	mov	r0, r3
 8010866:	f7fe f889 	bl	800e97c <lwip_htons>
 801086a:	4603      	mov	r3, r0
 801086c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010870:	b29b      	uxth	r3, r3
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	2200      	movs	r2, #0
 8010880:	701a      	strb	r2, [r3, #0]
 8010882:	2200      	movs	r2, #0
 8010884:	705a      	strb	r2, [r3, #1]
 8010886:	2200      	movs	r2, #0
 8010888:	709a      	strb	r2, [r3, #2]
 801088a:	2200      	movs	r2, #0
 801088c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010890:	8afa      	ldrh	r2, [r7, #22]
 8010892:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010894:	8afa      	ldrh	r2, [r7, #22]
 8010896:	8b7b      	ldrh	r3, [r7, #26]
 8010898:	4413      	add	r3, r2
 801089a:	b29a      	uxth	r2, r3
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80108a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a2:	88db      	ldrh	r3, [r3, #6]
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	8afa      	ldrh	r2, [r7, #22]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d902      	bls.n	80108b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108b0:	e106      	b.n	8010ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	627b      	str	r3, [r7, #36]	; 0x24
 80108b8:	e068      	b.n	801098c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80108c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c2:	889b      	ldrh	r3, [r3, #4]
 80108c4:	b29a      	uxth	r2, r3
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	889b      	ldrh	r3, [r3, #4]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d235      	bcs.n	801093c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80108d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80108d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d020      	beq.n	801091e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80108dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108de:	889b      	ldrh	r3, [r3, #4]
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e4:	88db      	ldrh	r3, [r3, #6]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d307      	bcc.n	80108fc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	88db      	ldrh	r3, [r3, #6]
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	889b      	ldrh	r3, [r3, #4]
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d902      	bls.n	8010902 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80108fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010900:	e0de      	b.n	8010ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090a:	88db      	ldrh	r3, [r3, #6]
 801090c:	b29a      	uxth	r2, r3
 801090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010910:	889b      	ldrh	r3, [r3, #4]
 8010912:	b29b      	uxth	r3, r3
 8010914:	429a      	cmp	r2, r3
 8010916:	d03d      	beq.n	8010994 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010918:	2300      	movs	r3, #0
 801091a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801091c:	e03a      	b.n	8010994 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010920:	88db      	ldrh	r3, [r3, #6]
 8010922:	b29a      	uxth	r2, r3
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	889b      	ldrh	r3, [r3, #4]
 8010928:	b29b      	uxth	r3, r3
 801092a:	429a      	cmp	r2, r3
 801092c:	d902      	bls.n	8010934 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010932:	e0c5      	b.n	8010ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	68ba      	ldr	r2, [r7, #8]
 8010938:	605a      	str	r2, [r3, #4]
      break;
 801093a:	e02b      	b.n	8010994 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	889b      	ldrh	r3, [r3, #4]
 8010940:	b29a      	uxth	r2, r3
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	889b      	ldrh	r3, [r3, #4]
 8010946:	b29b      	uxth	r3, r3
 8010948:	429a      	cmp	r2, r3
 801094a:	d102      	bne.n	8010952 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801094c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010950:	e0b6      	b.n	8010ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010954:	889b      	ldrh	r3, [r3, #4]
 8010956:	b29a      	uxth	r2, r3
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	88db      	ldrh	r3, [r3, #6]
 801095c:	b29b      	uxth	r3, r3
 801095e:	429a      	cmp	r2, r3
 8010960:	d202      	bcs.n	8010968 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010966:	e0ab      	b.n	8010ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096a:	2b00      	cmp	r3, #0
 801096c:	d009      	beq.n	8010982 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010970:	88db      	ldrh	r3, [r3, #6]
 8010972:	b29a      	uxth	r2, r3
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	889b      	ldrh	r3, [r3, #4]
 8010978:	b29b      	uxth	r3, r3
 801097a:	429a      	cmp	r2, r3
 801097c:	d001      	beq.n	8010982 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098e:	2b00      	cmp	r3, #0
 8010990:	d193      	bne.n	80108ba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010992:	e000      	b.n	8010996 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010994:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010998:	2b00      	cmp	r3, #0
 801099a:	d12d      	bne.n	80109f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d01c      	beq.n	80109dc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80109a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a4:	88db      	ldrh	r3, [r3, #6]
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109aa:	889b      	ldrh	r3, [r3, #4]
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d906      	bls.n	80109c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80109b2:	4b45      	ldr	r3, [pc, #276]	; (8010ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80109b4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80109b8:	4944      	ldr	r1, [pc, #272]	; (8010acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80109ba:	4845      	ldr	r0, [pc, #276]	; (8010ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80109bc:	f00a fba2 	bl	801b104 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80109c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80109c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c8:	88db      	ldrh	r3, [r3, #6]
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ce:	889b      	ldrh	r3, [r3, #4]
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d010      	beq.n	80109f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80109d6:	2300      	movs	r3, #0
 80109d8:	623b      	str	r3, [r7, #32]
 80109da:	e00d      	b.n	80109f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d006      	beq.n	80109f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80109e4:	4b38      	ldr	r3, [pc, #224]	; (8010ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80109e6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80109ea:	493a      	ldr	r1, [pc, #232]	; (8010ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80109ec:	4838      	ldr	r0, [pc, #224]	; (8010ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80109ee:	f00a fb89 	bl	801b104 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	68ba      	ldr	r2, [r7, #8]
 80109f6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d105      	bne.n	8010a0a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	7f9b      	ldrb	r3, [r3, #30]
 8010a02:	f003 0301 	and.w	r3, r3, #1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d059      	beq.n	8010abe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010a0a:	6a3b      	ldr	r3, [r7, #32]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d04f      	beq.n	8010ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d006      	beq.n	8010a26 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	685b      	ldr	r3, [r3, #4]
 8010a1e:	889b      	ldrh	r3, [r3, #4]
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d002      	beq.n	8010a2c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010a26:	2300      	movs	r3, #0
 8010a28:	623b      	str	r3, [r7, #32]
 8010a2a:	e041      	b.n	8010ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010a36:	e012      	b.n	8010a5e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a40:	88db      	ldrh	r3, [r3, #6]
 8010a42:	b29a      	uxth	r2, r3
 8010a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a46:	889b      	ldrh	r3, [r3, #4]
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d002      	beq.n	8010a54 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	623b      	str	r3, [r7, #32]
            break;
 8010a52:	e007      	b.n	8010a64 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a56:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d1e9      	bne.n	8010a38 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010a64:	6a3b      	ldr	r3, [r7, #32]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d022      	beq.n	8010ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010a72:	4b15      	ldr	r3, [pc, #84]	; (8010ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a74:	f240 12df 	movw	r2, #479	; 0x1df
 8010a78:	4917      	ldr	r1, [pc, #92]	; (8010ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010a7a:	4815      	ldr	r0, [pc, #84]	; (8010ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a7c:	f00a fb42 	bl	801b104 <iprintf>
          LWIP_ASSERT("sanity check",
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d106      	bne.n	8010a9a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010a8c:	4b0e      	ldr	r3, [pc, #56]	; (8010ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010a8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010a92:	4911      	ldr	r1, [pc, #68]	; (8010ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010a94:	480e      	ldr	r0, [pc, #56]	; (8010ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010a96:	f00a fb35 	bl	801b104 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d006      	beq.n	8010ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010aa2:	4b09      	ldr	r3, [pc, #36]	; (8010ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010aa4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010aa8:	490c      	ldr	r1, [pc, #48]	; (8010adc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010aaa:	4809      	ldr	r0, [pc, #36]	; (8010ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010aac:	f00a fb2a 	bl	801b104 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010ab0:	6a3b      	ldr	r3, [r7, #32]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	bf14      	ite	ne
 8010ab6:	2301      	movne	r3, #1
 8010ab8:	2300      	moveq	r3, #0
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	e000      	b.n	8010ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010abe:	2300      	movs	r3, #0
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3730      	adds	r7, #48	; 0x30
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	0801f358 	.word	0x0801f358
 8010acc:	0801f464 	.word	0x0801f464
 8010ad0:	0801f3c8 	.word	0x0801f3c8
 8010ad4:	0801f484 	.word	0x0801f484
 8010ad8:	0801f4bc 	.word	0x0801f4bc
 8010adc:	0801f4cc 	.word	0x0801f4cc

08010ae0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b08e      	sub	sp, #56	; 0x38
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	f003 030f 	and.w	r3, r3, #15
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	2b14      	cmp	r3, #20
 8010afe:	f040 8167 	bne.w	8010dd0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b04:	88db      	ldrh	r3, [r3, #6]
 8010b06:	b29b      	uxth	r3, r3
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7fd ff37 	bl	800e97c <lwip_htons>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	00db      	lsls	r3, r3, #3
 8010b18:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1c:	885b      	ldrh	r3, [r3, #2]
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fd ff2b 	bl	800e97c <lwip_htons>
 8010b26:	4603      	mov	r3, r0
 8010b28:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	f003 030f 	and.w	r3, r3, #15
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010b3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b42:	429a      	cmp	r2, r3
 8010b44:	f0c0 8146 	bcc.w	8010dd4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010b48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f001 fe2f 	bl	80127b8 <pbuf_clen>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010b5e:	4b9f      	ldr	r3, [pc, #636]	; (8010ddc <ip4_reass+0x2fc>)
 8010b60:	881b      	ldrh	r3, [r3, #0]
 8010b62:	461a      	mov	r2, r3
 8010b64:	8c3b      	ldrh	r3, [r7, #32]
 8010b66:	4413      	add	r3, r2
 8010b68:	2b0a      	cmp	r3, #10
 8010b6a:	dd10      	ble.n	8010b8e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010b6c:	8c3b      	ldrh	r3, [r7, #32]
 8010b6e:	4619      	mov	r1, r3
 8010b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b72:	f7ff fd81 	bl	8010678 <ip_reass_remove_oldest_datagram>
 8010b76:	4603      	mov	r3, r0
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	f000 812d 	beq.w	8010dd8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010b7e:	4b97      	ldr	r3, [pc, #604]	; (8010ddc <ip4_reass+0x2fc>)
 8010b80:	881b      	ldrh	r3, [r3, #0]
 8010b82:	461a      	mov	r2, r3
 8010b84:	8c3b      	ldrh	r3, [r7, #32]
 8010b86:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010b88:	2b0a      	cmp	r3, #10
 8010b8a:	f300 8125 	bgt.w	8010dd8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010b8e:	4b94      	ldr	r3, [pc, #592]	; (8010de0 <ip4_reass+0x300>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	633b      	str	r3, [r7, #48]	; 0x30
 8010b94:	e015      	b.n	8010bc2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b98:	695a      	ldr	r2, [r3, #20]
 8010b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d10c      	bne.n	8010bbc <ip4_reass+0xdc>
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba4:	699a      	ldr	r2, [r3, #24]
 8010ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba8:	691b      	ldr	r3, [r3, #16]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d106      	bne.n	8010bbc <ip4_reass+0xdc>
 8010bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb0:	899a      	ldrh	r2, [r3, #12]
 8010bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb4:	889b      	ldrh	r3, [r3, #4]
 8010bb6:	b29b      	uxth	r3, r3
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d006      	beq.n	8010bca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d1e6      	bne.n	8010b96 <ip4_reass+0xb6>
 8010bc8:	e000      	b.n	8010bcc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010bca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d109      	bne.n	8010be6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010bd2:	8c3b      	ldrh	r3, [r7, #32]
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bd8:	f7ff fdb0 	bl	801073c <ip_reass_enqueue_new_datagram>
 8010bdc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d11c      	bne.n	8010c1e <ip4_reass+0x13e>
      goto nullreturn;
 8010be4:	e109      	b.n	8010dfa <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be8:	88db      	ldrh	r3, [r3, #6]
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fd fec5 	bl	800e97c <lwip_htons>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d110      	bne.n	8010c1e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfe:	89db      	ldrh	r3, [r3, #14]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fd febb 	bl	800e97c <lwip_htons>
 8010c06:	4603      	mov	r3, r0
 8010c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d006      	beq.n	8010c1e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	3308      	adds	r3, #8
 8010c14:	2214      	movs	r2, #20
 8010c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f009 fb51 	bl	801a2c0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c20:	88db      	ldrh	r3, [r3, #6]
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	f003 0320 	and.w	r3, r3, #32
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	bf0c      	ite	eq
 8010c2c:	2301      	moveq	r3, #1
 8010c2e:	2300      	movne	r3, #0
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d00e      	beq.n	8010c58 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010c3a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c3e:	4413      	add	r3, r2
 8010c40:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010c42:	8b7a      	ldrh	r2, [r7, #26]
 8010c44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c46:	429a      	cmp	r2, r3
 8010c48:	f0c0 80a0 	bcc.w	8010d8c <ip4_reass+0x2ac>
 8010c4c:	8b7b      	ldrh	r3, [r7, #26]
 8010c4e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010c52:	4293      	cmp	r3, r2
 8010c54:	f200 809a 	bhi.w	8010d8c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010c58:	69fa      	ldr	r2, [r7, #28]
 8010c5a:	6879      	ldr	r1, [r7, #4]
 8010c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c5e:	f7ff fdd5 	bl	801080c <ip_reass_chain_frag_into_datagram_and_validate>
 8010c62:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c6a:	f000 8091 	beq.w	8010d90 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010c6e:	4b5b      	ldr	r3, [pc, #364]	; (8010ddc <ip4_reass+0x2fc>)
 8010c70:	881a      	ldrh	r2, [r3, #0]
 8010c72:	8c3b      	ldrh	r3, [r7, #32]
 8010c74:	4413      	add	r3, r2
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	4b58      	ldr	r3, [pc, #352]	; (8010ddc <ip4_reass+0x2fc>)
 8010c7a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00d      	beq.n	8010c9e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010c82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c86:	4413      	add	r3, r2
 8010c88:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	8a7a      	ldrh	r2, [r7, #18]
 8010c8e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c92:	7f9b      	ldrb	r3, [r3, #30]
 8010c94:	f043 0301 	orr.w	r3, r3, #1
 8010c98:	b2da      	uxtb	r2, r3
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d171      	bne.n	8010d88 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca6:	8b9b      	ldrh	r3, [r3, #28]
 8010ca8:	3314      	adds	r3, #20
 8010caa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	3308      	adds	r3, #8
 8010cc2:	2214      	movs	r2, #20
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cc8:	f009 fafa 	bl	801a2c0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010ccc:	8a3b      	ldrh	r3, [r7, #16]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fd fe54 	bl	800e97c <lwip_htons>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cda:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cde:	2200      	movs	r2, #0
 8010ce0:	719a      	strb	r2, [r3, #6]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	2200      	movs	r2, #0
 8010cea:	729a      	strb	r2, [r3, #10]
 8010cec:	2200      	movs	r2, #0
 8010cee:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010cf6:	e00d      	b.n	8010d14 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010cfe:	2114      	movs	r1, #20
 8010d00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010d02:	f001 fc4b 	bl	801259c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010d06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f001 fd8f 	bl	801282c <pbuf_cat>
      r = iprh->next_pbuf;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d1ee      	bne.n	8010cf8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010d1a:	4b31      	ldr	r3, [pc, #196]	; (8010de0 <ip4_reass+0x300>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d102      	bne.n	8010d2a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010d24:	2300      	movs	r3, #0
 8010d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d28:	e010      	b.n	8010d4c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010d2a:	4b2d      	ldr	r3, [pc, #180]	; (8010de0 <ip4_reass+0x300>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d30:	e007      	b.n	8010d42 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d006      	beq.n	8010d4a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d1f4      	bne.n	8010d32 <ip4_reass+0x252>
 8010d48:	e000      	b.n	8010d4c <ip4_reass+0x26c>
          break;
 8010d4a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010d4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d50:	f7ff fd2e 	bl	80107b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f001 fd2f 	bl	80127b8 <pbuf_clen>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010d5e:	4b1f      	ldr	r3, [pc, #124]	; (8010ddc <ip4_reass+0x2fc>)
 8010d60:	881b      	ldrh	r3, [r3, #0]
 8010d62:	8c3a      	ldrh	r2, [r7, #32]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d906      	bls.n	8010d76 <ip4_reass+0x296>
 8010d68:	4b1e      	ldr	r3, [pc, #120]	; (8010de4 <ip4_reass+0x304>)
 8010d6a:	f240 229b 	movw	r2, #667	; 0x29b
 8010d6e:	491e      	ldr	r1, [pc, #120]	; (8010de8 <ip4_reass+0x308>)
 8010d70:	481e      	ldr	r0, [pc, #120]	; (8010dec <ip4_reass+0x30c>)
 8010d72:	f00a f9c7 	bl	801b104 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010d76:	4b19      	ldr	r3, [pc, #100]	; (8010ddc <ip4_reass+0x2fc>)
 8010d78:	881a      	ldrh	r2, [r3, #0]
 8010d7a:	8c3b      	ldrh	r3, [r7, #32]
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	b29a      	uxth	r2, r3
 8010d80:	4b16      	ldr	r3, [pc, #88]	; (8010ddc <ip4_reass+0x2fc>)
 8010d82:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	e03c      	b.n	8010e02 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	e03a      	b.n	8010e02 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8010d8c:	bf00      	nop
 8010d8e:	e000      	b.n	8010d92 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010d90:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d106      	bne.n	8010da6 <ip4_reass+0x2c6>
 8010d98:	4b12      	ldr	r3, [pc, #72]	; (8010de4 <ip4_reass+0x304>)
 8010d9a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010d9e:	4914      	ldr	r1, [pc, #80]	; (8010df0 <ip4_reass+0x310>)
 8010da0:	4812      	ldr	r0, [pc, #72]	; (8010dec <ip4_reass+0x30c>)
 8010da2:	f00a f9af 	bl	801b104 <iprintf>
  if (ipr->p == NULL) {
 8010da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d124      	bne.n	8010df8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010dae:	4b0c      	ldr	r3, [pc, #48]	; (8010de0 <ip4_reass+0x300>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d006      	beq.n	8010dc6 <ip4_reass+0x2e6>
 8010db8:	4b0a      	ldr	r3, [pc, #40]	; (8010de4 <ip4_reass+0x304>)
 8010dba:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010dbe:	490d      	ldr	r1, [pc, #52]	; (8010df4 <ip4_reass+0x314>)
 8010dc0:	480a      	ldr	r0, [pc, #40]	; (8010dec <ip4_reass+0x30c>)
 8010dc2:	f00a f99f 	bl	801b104 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010dc6:	2100      	movs	r1, #0
 8010dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dca:	f7ff fcf1 	bl	80107b0 <ip_reass_dequeue_datagram>
 8010dce:	e014      	b.n	8010dfa <ip4_reass+0x31a>
    goto nullreturn;
 8010dd0:	bf00      	nop
 8010dd2:	e012      	b.n	8010dfa <ip4_reass+0x31a>
    goto nullreturn;
 8010dd4:	bf00      	nop
 8010dd6:	e010      	b.n	8010dfa <ip4_reass+0x31a>
      goto nullreturn;
 8010dd8:	bf00      	nop
 8010dda:	e00e      	b.n	8010dfa <ip4_reass+0x31a>
 8010ddc:	24000730 	.word	0x24000730
 8010de0:	2400072c 	.word	0x2400072c
 8010de4:	0801f358 	.word	0x0801f358
 8010de8:	0801f4f0 	.word	0x0801f4f0
 8010dec:	0801f3c8 	.word	0x0801f3c8
 8010df0:	0801f50c 	.word	0x0801f50c
 8010df4:	0801f518 	.word	0x0801f518
  }

nullreturn:
 8010df8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f001 fc54 	bl	80126a8 <pbuf_free>
  return NULL;
 8010e00:	2300      	movs	r3, #0
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3738      	adds	r7, #56	; 0x38
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop

08010e0c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010e10:	2005      	movs	r0, #5
 8010e12:	f000 fda7 	bl	8011964 <memp_malloc>
 8010e16:	4603      	mov	r3, r0
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d106      	bne.n	8010e38 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010e2a:	4b07      	ldr	r3, [pc, #28]	; (8010e48 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010e2c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010e30:	4906      	ldr	r1, [pc, #24]	; (8010e4c <ip_frag_free_pbuf_custom_ref+0x30>)
 8010e32:	4807      	ldr	r0, [pc, #28]	; (8010e50 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010e34:	f00a f966 	bl	801b104 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010e38:	6879      	ldr	r1, [r7, #4]
 8010e3a:	2005      	movs	r0, #5
 8010e3c:	f000 fdde 	bl	80119fc <memp_free>
}
 8010e40:	bf00      	nop
 8010e42:	3708      	adds	r7, #8
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	0801f358 	.word	0x0801f358
 8010e4c:	0801f538 	.word	0x0801f538
 8010e50:	0801f3c8 	.word	0x0801f3c8

08010e54 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d106      	bne.n	8010e74 <ipfrag_free_pbuf_custom+0x20>
 8010e66:	4b11      	ldr	r3, [pc, #68]	; (8010eac <ipfrag_free_pbuf_custom+0x58>)
 8010e68:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010e6c:	4910      	ldr	r1, [pc, #64]	; (8010eb0 <ipfrag_free_pbuf_custom+0x5c>)
 8010e6e:	4811      	ldr	r0, [pc, #68]	; (8010eb4 <ipfrag_free_pbuf_custom+0x60>)
 8010e70:	f00a f948 	bl	801b104 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d006      	beq.n	8010e8a <ipfrag_free_pbuf_custom+0x36>
 8010e7c:	4b0b      	ldr	r3, [pc, #44]	; (8010eac <ipfrag_free_pbuf_custom+0x58>)
 8010e7e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010e82:	490d      	ldr	r1, [pc, #52]	; (8010eb8 <ipfrag_free_pbuf_custom+0x64>)
 8010e84:	480b      	ldr	r0, [pc, #44]	; (8010eb4 <ipfrag_free_pbuf_custom+0x60>)
 8010e86:	f00a f93d 	bl	801b104 <iprintf>
  if (pcr->original != NULL) {
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	695b      	ldr	r3, [r3, #20]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d004      	beq.n	8010e9c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	695b      	ldr	r3, [r3, #20]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f001 fc06 	bl	80126a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f7ff ffbd 	bl	8010e1c <ip_frag_free_pbuf_custom_ref>
}
 8010ea2:	bf00      	nop
 8010ea4:	3710      	adds	r7, #16
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	0801f358 	.word	0x0801f358
 8010eb0:	0801f544 	.word	0x0801f544
 8010eb4:	0801f3c8 	.word	0x0801f3c8
 8010eb8:	0801f550 	.word	0x0801f550

08010ebc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b094      	sub	sp, #80	; 0x50
 8010ec0:	af02      	add	r7, sp, #8
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010ed2:	3b14      	subs	r3, #20
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	da00      	bge.n	8010eda <ip4_frag+0x1e>
 8010ed8:	3307      	adds	r3, #7
 8010eda:	10db      	asrs	r3, r3, #3
 8010edc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010ede:	2314      	movs	r3, #20
 8010ee0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	f003 030f 	and.w	r3, r3, #15
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	2b14      	cmp	r3, #20
 8010efc:	d002      	beq.n	8010f04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010efe:	f06f 0305 	mvn.w	r3, #5
 8010f02:	e110      	b.n	8011126 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	895b      	ldrh	r3, [r3, #10]
 8010f08:	2b13      	cmp	r3, #19
 8010f0a:	d809      	bhi.n	8010f20 <ip4_frag+0x64>
 8010f0c:	4b88      	ldr	r3, [pc, #544]	; (8011130 <ip4_frag+0x274>)
 8010f0e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010f12:	4988      	ldr	r1, [pc, #544]	; (8011134 <ip4_frag+0x278>)
 8010f14:	4888      	ldr	r0, [pc, #544]	; (8011138 <ip4_frag+0x27c>)
 8010f16:	f00a f8f5 	bl	801b104 <iprintf>
 8010f1a:	f06f 0305 	mvn.w	r3, #5
 8010f1e:	e102      	b.n	8011126 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f22:	88db      	ldrh	r3, [r3, #6]
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fd fd28 	bl	800e97c <lwip_htons>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010f30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010f3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010f40:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	891b      	ldrh	r3, [r3, #8]
 8010f46:	3b14      	subs	r3, #20
 8010f48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010f4c:	e0e1      	b.n	8011112 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010f4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f50:	00db      	lsls	r3, r3, #3
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	bf28      	it	cs
 8010f5c:	4613      	movcs	r3, r2
 8010f5e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010f60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f64:	2114      	movs	r1, #20
 8010f66:	200e      	movs	r0, #14
 8010f68:	f001 f8ba 	bl	80120e0 <pbuf_alloc>
 8010f6c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	f000 80d5 	beq.w	8011120 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	895b      	ldrh	r3, [r3, #10]
 8010f7a:	2b13      	cmp	r3, #19
 8010f7c:	d806      	bhi.n	8010f8c <ip4_frag+0xd0>
 8010f7e:	4b6c      	ldr	r3, [pc, #432]	; (8011130 <ip4_frag+0x274>)
 8010f80:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010f84:	496d      	ldr	r1, [pc, #436]	; (801113c <ip4_frag+0x280>)
 8010f86:	486c      	ldr	r0, [pc, #432]	; (8011138 <ip4_frag+0x27c>)
 8010f88:	f00a f8bc 	bl	801b104 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	2214      	movs	r2, #20
 8010f92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010f94:	4618      	mov	r0, r3
 8010f96:	f009 f993 	bl	801a2c0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010fa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010fa2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010fa6:	e064      	b.n	8011072 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	895a      	ldrh	r2, [r3, #10]
 8010fac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fae:	1ad3      	subs	r3, r2, r3
 8010fb0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	895b      	ldrh	r3, [r3, #10]
 8010fb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d906      	bls.n	8010fca <ip4_frag+0x10e>
 8010fbc:	4b5c      	ldr	r3, [pc, #368]	; (8011130 <ip4_frag+0x274>)
 8010fbe:	f240 322d 	movw	r2, #813	; 0x32d
 8010fc2:	495f      	ldr	r1, [pc, #380]	; (8011140 <ip4_frag+0x284>)
 8010fc4:	485c      	ldr	r0, [pc, #368]	; (8011138 <ip4_frag+0x27c>)
 8010fc6:	f00a f89d 	bl	801b104 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010fca:	8bfa      	ldrh	r2, [r7, #30]
 8010fcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	bf28      	it	cs
 8010fd4:	4613      	movcs	r3, r2
 8010fd6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010fda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d105      	bne.n	8010fee <ip4_frag+0x132>
        poff = 0;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	60fb      	str	r3, [r7, #12]
        continue;
 8010fec:	e041      	b.n	8011072 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010fee:	f7ff ff0d 	bl	8010e0c <ip_frag_alloc_pbuf_custom_ref>
 8010ff2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d103      	bne.n	8011002 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ffc:	f001 fb54 	bl	80126a8 <pbuf_free>
        goto memerr;
 8011000:	e08f      	b.n	8011122 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011002:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011008:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801100a:	4413      	add	r3, r2
 801100c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011010:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011014:	9201      	str	r2, [sp, #4]
 8011016:	9300      	str	r3, [sp, #0]
 8011018:	4603      	mov	r3, r0
 801101a:	2241      	movs	r2, #65	; 0x41
 801101c:	2000      	movs	r0, #0
 801101e:	f001 f989 	bl	8012334 <pbuf_alloced_custom>
 8011022:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d106      	bne.n	8011038 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801102a:	69b8      	ldr	r0, [r7, #24]
 801102c:	f7ff fef6 	bl	8010e1c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011032:	f001 fb39 	bl	80126a8 <pbuf_free>
        goto memerr;
 8011036:	e074      	b.n	8011122 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011038:	68f8      	ldr	r0, [r7, #12]
 801103a:	f001 fbd5 	bl	80127e8 <pbuf_ref>
      pcr->original = p;
 801103e:	69bb      	ldr	r3, [r7, #24]
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	4a3f      	ldr	r2, [pc, #252]	; (8011144 <ip4_frag+0x288>)
 8011048:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801104a:	6979      	ldr	r1, [r7, #20]
 801104c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801104e:	f001 fbed 	bl	801282c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011052:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011056:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011060:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011064:	2b00      	cmp	r3, #0
 8011066:	d004      	beq.n	8011072 <ip4_frag+0x1b6>
        poff = 0;
 8011068:	2300      	movs	r3, #0
 801106a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011072:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011076:	2b00      	cmp	r3, #0
 8011078:	d196      	bne.n	8010fa8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801107a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801107c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011080:	4413      	add	r3, r2
 8011082:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011088:	f1a3 0213 	sub.w	r2, r3, #19
 801108c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011090:	429a      	cmp	r2, r3
 8011092:	bfcc      	ite	gt
 8011094:	2301      	movgt	r3, #1
 8011096:	2300      	movle	r3, #0
 8011098:	b2db      	uxtb	r3, r3
 801109a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801109c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80110a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80110a6:	6a3b      	ldr	r3, [r7, #32]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d002      	beq.n	80110b2 <ip4_frag+0x1f6>
 80110ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d003      	beq.n	80110ba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80110b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80110b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80110b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80110ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fd fc5d 	bl	800e97c <lwip_htons>
 80110c2:	4603      	mov	r3, r0
 80110c4:	461a      	mov	r2, r3
 80110c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80110ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110cc:	3314      	adds	r3, #20
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fd fc53 	bl	800e97c <lwip_htons>
 80110d6:	4603      	mov	r3, r0
 80110d8:	461a      	mov	r2, r3
 80110da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80110de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e0:	2200      	movs	r2, #0
 80110e2:	729a      	strb	r2, [r3, #10]
 80110e4:	2200      	movs	r2, #0
 80110e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	695b      	ldr	r3, [r3, #20]
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110f0:	68b8      	ldr	r0, [r7, #8]
 80110f2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80110f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110f6:	f001 fad7 	bl	80126a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80110fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011106:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801110a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801110c:	4413      	add	r3, r2
 801110e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011112:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011116:	2b00      	cmp	r3, #0
 8011118:	f47f af19 	bne.w	8010f4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801111c:	2300      	movs	r3, #0
 801111e:	e002      	b.n	8011126 <ip4_frag+0x26a>
      goto memerr;
 8011120:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011126:	4618      	mov	r0, r3
 8011128:	3748      	adds	r7, #72	; 0x48
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	0801f358 	.word	0x0801f358
 8011134:	0801f55c 	.word	0x0801f55c
 8011138:	0801f3c8 	.word	0x0801f3c8
 801113c:	0801f578 	.word	0x0801f578
 8011140:	0801f598 	.word	0x0801f598
 8011144:	08010e55 	.word	0x08010e55

08011148 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	4603      	mov	r3, r0
 8011150:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011152:	4b05      	ldr	r3, [pc, #20]	; (8011168 <ptr_to_mem+0x20>)
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	88fb      	ldrh	r3, [r7, #6]
 8011158:	4413      	add	r3, r2
}
 801115a:	4618      	mov	r0, r3
 801115c:	370c      	adds	r7, #12
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	24000734 	.word	0x24000734

0801116c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011174:	4b05      	ldr	r3, [pc, #20]	; (801118c <mem_to_ptr+0x20>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	b29b      	uxth	r3, r3
}
 801117e:	4618      	mov	r0, r3
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop
 801118c:	24000734 	.word	0x24000734

08011190 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011190:	b590      	push	{r4, r7, lr}
 8011192:	b085      	sub	sp, #20
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011198:	4b45      	ldr	r3, [pc, #276]	; (80112b0 <plug_holes+0x120>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d206      	bcs.n	80111b0 <plug_holes+0x20>
 80111a2:	4b44      	ldr	r3, [pc, #272]	; (80112b4 <plug_holes+0x124>)
 80111a4:	f240 12df 	movw	r2, #479	; 0x1df
 80111a8:	4943      	ldr	r1, [pc, #268]	; (80112b8 <plug_holes+0x128>)
 80111aa:	4844      	ldr	r0, [pc, #272]	; (80112bc <plug_holes+0x12c>)
 80111ac:	f009 ffaa 	bl	801b104 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80111b0:	4b43      	ldr	r3, [pc, #268]	; (80112c0 <plug_holes+0x130>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	687a      	ldr	r2, [r7, #4]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d306      	bcc.n	80111c8 <plug_holes+0x38>
 80111ba:	4b3e      	ldr	r3, [pc, #248]	; (80112b4 <plug_holes+0x124>)
 80111bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80111c0:	4940      	ldr	r1, [pc, #256]	; (80112c4 <plug_holes+0x134>)
 80111c2:	483e      	ldr	r0, [pc, #248]	; (80112bc <plug_holes+0x12c>)
 80111c4:	f009 ff9e 	bl	801b104 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	791b      	ldrb	r3, [r3, #4]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d006      	beq.n	80111de <plug_holes+0x4e>
 80111d0:	4b38      	ldr	r3, [pc, #224]	; (80112b4 <plug_holes+0x124>)
 80111d2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80111d6:	493c      	ldr	r1, [pc, #240]	; (80112c8 <plug_holes+0x138>)
 80111d8:	4838      	ldr	r0, [pc, #224]	; (80112bc <plug_holes+0x12c>)
 80111da:	f009 ff93 	bl	801b104 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	881b      	ldrh	r3, [r3, #0]
 80111e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80111e6:	d906      	bls.n	80111f6 <plug_holes+0x66>
 80111e8:	4b32      	ldr	r3, [pc, #200]	; (80112b4 <plug_holes+0x124>)
 80111ea:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80111ee:	4937      	ldr	r1, [pc, #220]	; (80112cc <plug_holes+0x13c>)
 80111f0:	4832      	ldr	r0, [pc, #200]	; (80112bc <plug_holes+0x12c>)
 80111f2:	f009 ff87 	bl	801b104 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	881b      	ldrh	r3, [r3, #0]
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7ff ffa4 	bl	8011148 <ptr_to_mem>
 8011200:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	429a      	cmp	r2, r3
 8011208:	d024      	beq.n	8011254 <plug_holes+0xc4>
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	791b      	ldrb	r3, [r3, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d120      	bne.n	8011254 <plug_holes+0xc4>
 8011212:	4b2b      	ldr	r3, [pc, #172]	; (80112c0 <plug_holes+0x130>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	68fa      	ldr	r2, [r7, #12]
 8011218:	429a      	cmp	r2, r3
 801121a:	d01b      	beq.n	8011254 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801121c:	4b2c      	ldr	r3, [pc, #176]	; (80112d0 <plug_holes+0x140>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	68fa      	ldr	r2, [r7, #12]
 8011222:	429a      	cmp	r2, r3
 8011224:	d102      	bne.n	801122c <plug_holes+0x9c>
      lfree = mem;
 8011226:	4a2a      	ldr	r2, [pc, #168]	; (80112d0 <plug_holes+0x140>)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	881a      	ldrh	r2, [r3, #0]
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801123c:	d00a      	beq.n	8011254 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	881b      	ldrh	r3, [r3, #0]
 8011242:	4618      	mov	r0, r3
 8011244:	f7ff ff80 	bl	8011148 <ptr_to_mem>
 8011248:	4604      	mov	r4, r0
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f7ff ff8e 	bl	801116c <mem_to_ptr>
 8011250:	4603      	mov	r3, r0
 8011252:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	885b      	ldrh	r3, [r3, #2]
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff ff75 	bl	8011148 <ptr_to_mem>
 801125e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011260:	68ba      	ldr	r2, [r7, #8]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	429a      	cmp	r2, r3
 8011266:	d01f      	beq.n	80112a8 <plug_holes+0x118>
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	791b      	ldrb	r3, [r3, #4]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d11b      	bne.n	80112a8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011270:	4b17      	ldr	r3, [pc, #92]	; (80112d0 <plug_holes+0x140>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	429a      	cmp	r2, r3
 8011278:	d102      	bne.n	8011280 <plug_holes+0xf0>
      lfree = pmem;
 801127a:	4a15      	ldr	r2, [pc, #84]	; (80112d0 <plug_holes+0x140>)
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	881a      	ldrh	r2, [r3, #0]
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	881b      	ldrh	r3, [r3, #0]
 801128c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011290:	d00a      	beq.n	80112a8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	881b      	ldrh	r3, [r3, #0]
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff ff56 	bl	8011148 <ptr_to_mem>
 801129c:	4604      	mov	r4, r0
 801129e:	68b8      	ldr	r0, [r7, #8]
 80112a0:	f7ff ff64 	bl	801116c <mem_to_ptr>
 80112a4:	4603      	mov	r3, r0
 80112a6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80112a8:	bf00      	nop
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd90      	pop	{r4, r7, pc}
 80112b0:	24000734 	.word	0x24000734
 80112b4:	0801f5a8 	.word	0x0801f5a8
 80112b8:	0801f604 	.word	0x0801f604
 80112bc:	0801f61c 	.word	0x0801f61c
 80112c0:	24000738 	.word	0x24000738
 80112c4:	0801f644 	.word	0x0801f644
 80112c8:	0801f660 	.word	0x0801f660
 80112cc:	0801f67c 	.word	0x0801f67c
 80112d0:	2400073c 	.word	0x2400073c

080112d4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b082      	sub	sp, #8
 80112d8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80112da:	4b16      	ldr	r3, [pc, #88]	; (8011334 <mem_init+0x60>)
 80112dc:	4a16      	ldr	r2, [pc, #88]	; (8011338 <mem_init+0x64>)
 80112de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80112e0:	4b14      	ldr	r3, [pc, #80]	; (8011334 <mem_init+0x60>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80112ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2200      	movs	r2, #0
 80112f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2200      	movs	r2, #0
 80112f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80112fa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80112fe:	f7ff ff23 	bl	8011148 <ptr_to_mem>
 8011302:	4603      	mov	r3, r0
 8011304:	4a0d      	ldr	r2, [pc, #52]	; (801133c <mem_init+0x68>)
 8011306:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011308:	4b0c      	ldr	r3, [pc, #48]	; (801133c <mem_init+0x68>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2201      	movs	r2, #1
 801130e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011310:	4b0a      	ldr	r3, [pc, #40]	; (801133c <mem_init+0x68>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011318:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801131a:	4b08      	ldr	r3, [pc, #32]	; (801133c <mem_init+0x68>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011322:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011324:	4b03      	ldr	r3, [pc, #12]	; (8011334 <mem_init+0x60>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4a05      	ldr	r2, [pc, #20]	; (8011340 <mem_init+0x6c>)
 801132a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801132c:	bf00      	nop
 801132e:	3708      	adds	r7, #8
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	24000734 	.word	0x24000734
 8011338:	30044000 	.word	0x30044000
 801133c:	24000738 	.word	0x24000738
 8011340:	2400073c 	.word	0x2400073c

08011344 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b086      	sub	sp, #24
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801134c:	6878      	ldr	r0, [r7, #4]
 801134e:	f7ff ff0d 	bl	801116c <mem_to_ptr>
 8011352:	4603      	mov	r3, r0
 8011354:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	881b      	ldrh	r3, [r3, #0]
 801135a:	4618      	mov	r0, r3
 801135c:	f7ff fef4 	bl	8011148 <ptr_to_mem>
 8011360:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	885b      	ldrh	r3, [r3, #2]
 8011366:	4618      	mov	r0, r3
 8011368:	f7ff feee 	bl	8011148 <ptr_to_mem>
 801136c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	881b      	ldrh	r3, [r3, #0]
 8011372:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011376:	d818      	bhi.n	80113aa <mem_link_valid+0x66>
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	885b      	ldrh	r3, [r3, #2]
 801137c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011380:	d813      	bhi.n	80113aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011386:	8afa      	ldrh	r2, [r7, #22]
 8011388:	429a      	cmp	r2, r3
 801138a:	d004      	beq.n	8011396 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	8afa      	ldrh	r2, [r7, #22]
 8011392:	429a      	cmp	r2, r3
 8011394:	d109      	bne.n	80113aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011396:	4b08      	ldr	r3, [pc, #32]	; (80113b8 <mem_link_valid+0x74>)
 8011398:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801139a:	693a      	ldr	r2, [r7, #16]
 801139c:	429a      	cmp	r2, r3
 801139e:	d006      	beq.n	80113ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	885b      	ldrh	r3, [r3, #2]
 80113a4:	8afa      	ldrh	r2, [r7, #22]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d001      	beq.n	80113ae <mem_link_valid+0x6a>
    return 0;
 80113aa:	2300      	movs	r3, #0
 80113ac:	e000      	b.n	80113b0 <mem_link_valid+0x6c>
  }
  return 1;
 80113ae:	2301      	movs	r3, #1
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3718      	adds	r7, #24
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	24000738 	.word	0x24000738

080113bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b084      	sub	sp, #16
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d04c      	beq.n	8011464 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f003 0303 	and.w	r3, r3, #3
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d007      	beq.n	80113e4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80113d4:	4b25      	ldr	r3, [pc, #148]	; (801146c <mem_free+0xb0>)
 80113d6:	f240 2273 	movw	r2, #627	; 0x273
 80113da:	4925      	ldr	r1, [pc, #148]	; (8011470 <mem_free+0xb4>)
 80113dc:	4825      	ldr	r0, [pc, #148]	; (8011474 <mem_free+0xb8>)
 80113de:	f009 fe91 	bl	801b104 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80113e2:	e040      	b.n	8011466 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	3b08      	subs	r3, #8
 80113e8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80113ea:	4b23      	ldr	r3, [pc, #140]	; (8011478 <mem_free+0xbc>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	68fa      	ldr	r2, [r7, #12]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d306      	bcc.n	8011402 <mem_free+0x46>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f103 020c 	add.w	r2, r3, #12
 80113fa:	4b20      	ldr	r3, [pc, #128]	; (801147c <mem_free+0xc0>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d907      	bls.n	8011412 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011402:	4b1a      	ldr	r3, [pc, #104]	; (801146c <mem_free+0xb0>)
 8011404:	f240 227f 	movw	r2, #639	; 0x27f
 8011408:	491d      	ldr	r1, [pc, #116]	; (8011480 <mem_free+0xc4>)
 801140a:	481a      	ldr	r0, [pc, #104]	; (8011474 <mem_free+0xb8>)
 801140c:	f009 fe7a 	bl	801b104 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011410:	e029      	b.n	8011466 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	791b      	ldrb	r3, [r3, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d107      	bne.n	801142a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801141a:	4b14      	ldr	r3, [pc, #80]	; (801146c <mem_free+0xb0>)
 801141c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011420:	4918      	ldr	r1, [pc, #96]	; (8011484 <mem_free+0xc8>)
 8011422:	4814      	ldr	r0, [pc, #80]	; (8011474 <mem_free+0xb8>)
 8011424:	f009 fe6e 	bl	801b104 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011428:	e01d      	b.n	8011466 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f7ff ff8a 	bl	8011344 <mem_link_valid>
 8011430:	4603      	mov	r3, r0
 8011432:	2b00      	cmp	r3, #0
 8011434:	d107      	bne.n	8011446 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011436:	4b0d      	ldr	r3, [pc, #52]	; (801146c <mem_free+0xb0>)
 8011438:	f240 2295 	movw	r2, #661	; 0x295
 801143c:	4912      	ldr	r1, [pc, #72]	; (8011488 <mem_free+0xcc>)
 801143e:	480d      	ldr	r0, [pc, #52]	; (8011474 <mem_free+0xb8>)
 8011440:	f009 fe60 	bl	801b104 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8011444:	e00f      	b.n	8011466 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	2200      	movs	r2, #0
 801144a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801144c:	4b0f      	ldr	r3, [pc, #60]	; (801148c <mem_free+0xd0>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	68fa      	ldr	r2, [r7, #12]
 8011452:	429a      	cmp	r2, r3
 8011454:	d202      	bcs.n	801145c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011456:	4a0d      	ldr	r2, [pc, #52]	; (801148c <mem_free+0xd0>)
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801145c:	68f8      	ldr	r0, [r7, #12]
 801145e:	f7ff fe97 	bl	8011190 <plug_holes>
 8011462:	e000      	b.n	8011466 <mem_free+0xaa>
    return;
 8011464:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8011466:	3710      	adds	r7, #16
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	0801f5a8 	.word	0x0801f5a8
 8011470:	0801f6a8 	.word	0x0801f6a8
 8011474:	0801f61c 	.word	0x0801f61c
 8011478:	24000734 	.word	0x24000734
 801147c:	24000738 	.word	0x24000738
 8011480:	0801f6cc 	.word	0x0801f6cc
 8011484:	0801f6e8 	.word	0x0801f6e8
 8011488:	0801f710 	.word	0x0801f710
 801148c:	2400073c 	.word	0x2400073c

08011490 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b088      	sub	sp, #32
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	460b      	mov	r3, r1
 801149a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801149c:	887b      	ldrh	r3, [r7, #2]
 801149e:	3303      	adds	r3, #3
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	f023 0303 	bic.w	r3, r3, #3
 80114a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80114a8:	8bfb      	ldrh	r3, [r7, #30]
 80114aa:	2b0b      	cmp	r3, #11
 80114ac:	d801      	bhi.n	80114b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80114ae:	230c      	movs	r3, #12
 80114b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80114b2:	8bfb      	ldrh	r3, [r7, #30]
 80114b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80114b8:	d803      	bhi.n	80114c2 <mem_trim+0x32>
 80114ba:	8bfa      	ldrh	r2, [r7, #30]
 80114bc:	887b      	ldrh	r3, [r7, #2]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d201      	bcs.n	80114c6 <mem_trim+0x36>
    return NULL;
 80114c2:	2300      	movs	r3, #0
 80114c4:	e0cc      	b.n	8011660 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80114c6:	4b68      	ldr	r3, [pc, #416]	; (8011668 <mem_trim+0x1d8>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	687a      	ldr	r2, [r7, #4]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d304      	bcc.n	80114da <mem_trim+0x4a>
 80114d0:	4b66      	ldr	r3, [pc, #408]	; (801166c <mem_trim+0x1dc>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d306      	bcc.n	80114e8 <mem_trim+0x58>
 80114da:	4b65      	ldr	r3, [pc, #404]	; (8011670 <mem_trim+0x1e0>)
 80114dc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80114e0:	4964      	ldr	r1, [pc, #400]	; (8011674 <mem_trim+0x1e4>)
 80114e2:	4865      	ldr	r0, [pc, #404]	; (8011678 <mem_trim+0x1e8>)
 80114e4:	f009 fe0e 	bl	801b104 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80114e8:	4b5f      	ldr	r3, [pc, #380]	; (8011668 <mem_trim+0x1d8>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d304      	bcc.n	80114fc <mem_trim+0x6c>
 80114f2:	4b5e      	ldr	r3, [pc, #376]	; (801166c <mem_trim+0x1dc>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d301      	bcc.n	8011500 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	e0af      	b.n	8011660 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	3b08      	subs	r3, #8
 8011504:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011506:	69b8      	ldr	r0, [r7, #24]
 8011508:	f7ff fe30 	bl	801116c <mem_to_ptr>
 801150c:	4603      	mov	r3, r0
 801150e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	881a      	ldrh	r2, [r3, #0]
 8011514:	8afb      	ldrh	r3, [r7, #22]
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	b29b      	uxth	r3, r3
 801151a:	3b08      	subs	r3, #8
 801151c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801151e:	8bfa      	ldrh	r2, [r7, #30]
 8011520:	8abb      	ldrh	r3, [r7, #20]
 8011522:	429a      	cmp	r2, r3
 8011524:	d906      	bls.n	8011534 <mem_trim+0xa4>
 8011526:	4b52      	ldr	r3, [pc, #328]	; (8011670 <mem_trim+0x1e0>)
 8011528:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801152c:	4953      	ldr	r1, [pc, #332]	; (801167c <mem_trim+0x1ec>)
 801152e:	4852      	ldr	r0, [pc, #328]	; (8011678 <mem_trim+0x1e8>)
 8011530:	f009 fde8 	bl	801b104 <iprintf>
  if (newsize > size) {
 8011534:	8bfa      	ldrh	r2, [r7, #30]
 8011536:	8abb      	ldrh	r3, [r7, #20]
 8011538:	429a      	cmp	r2, r3
 801153a:	d901      	bls.n	8011540 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801153c:	2300      	movs	r3, #0
 801153e:	e08f      	b.n	8011660 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8011540:	8bfa      	ldrh	r2, [r7, #30]
 8011542:	8abb      	ldrh	r3, [r7, #20]
 8011544:	429a      	cmp	r2, r3
 8011546:	d101      	bne.n	801154c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	e089      	b.n	8011660 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	881b      	ldrh	r3, [r3, #0]
 8011550:	4618      	mov	r0, r3
 8011552:	f7ff fdf9 	bl	8011148 <ptr_to_mem>
 8011556:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	791b      	ldrb	r3, [r3, #4]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d13f      	bne.n	80115e0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011560:	69bb      	ldr	r3, [r7, #24]
 8011562:	881b      	ldrh	r3, [r3, #0]
 8011564:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011568:	d106      	bne.n	8011578 <mem_trim+0xe8>
 801156a:	4b41      	ldr	r3, [pc, #260]	; (8011670 <mem_trim+0x1e0>)
 801156c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011570:	4943      	ldr	r1, [pc, #268]	; (8011680 <mem_trim+0x1f0>)
 8011572:	4841      	ldr	r0, [pc, #260]	; (8011678 <mem_trim+0x1e8>)
 8011574:	f009 fdc6 	bl	801b104 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	881b      	ldrh	r3, [r3, #0]
 801157c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801157e:	8afa      	ldrh	r2, [r7, #22]
 8011580:	8bfb      	ldrh	r3, [r7, #30]
 8011582:	4413      	add	r3, r2
 8011584:	b29b      	uxth	r3, r3
 8011586:	3308      	adds	r3, #8
 8011588:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801158a:	4b3e      	ldr	r3, [pc, #248]	; (8011684 <mem_trim+0x1f4>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	693a      	ldr	r2, [r7, #16]
 8011590:	429a      	cmp	r2, r3
 8011592:	d106      	bne.n	80115a2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8011594:	89fb      	ldrh	r3, [r7, #14]
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff fdd6 	bl	8011148 <ptr_to_mem>
 801159c:	4603      	mov	r3, r0
 801159e:	4a39      	ldr	r2, [pc, #228]	; (8011684 <mem_trim+0x1f4>)
 80115a0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80115a2:	89fb      	ldrh	r3, [r7, #14]
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7ff fdcf 	bl	8011148 <ptr_to_mem>
 80115aa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	2200      	movs	r2, #0
 80115b0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	89ba      	ldrh	r2, [r7, #12]
 80115b6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	8afa      	ldrh	r2, [r7, #22]
 80115bc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80115be:	69bb      	ldr	r3, [r7, #24]
 80115c0:	89fa      	ldrh	r2, [r7, #14]
 80115c2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	881b      	ldrh	r3, [r3, #0]
 80115c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80115cc:	d047      	beq.n	801165e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	881b      	ldrh	r3, [r3, #0]
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff fdb8 	bl	8011148 <ptr_to_mem>
 80115d8:	4602      	mov	r2, r0
 80115da:	89fb      	ldrh	r3, [r7, #14]
 80115dc:	8053      	strh	r3, [r2, #2]
 80115de:	e03e      	b.n	801165e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80115e0:	8bfb      	ldrh	r3, [r7, #30]
 80115e2:	f103 0214 	add.w	r2, r3, #20
 80115e6:	8abb      	ldrh	r3, [r7, #20]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d838      	bhi.n	801165e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80115ec:	8afa      	ldrh	r2, [r7, #22]
 80115ee:	8bfb      	ldrh	r3, [r7, #30]
 80115f0:	4413      	add	r3, r2
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	3308      	adds	r3, #8
 80115f6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	881b      	ldrh	r3, [r3, #0]
 80115fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011600:	d106      	bne.n	8011610 <mem_trim+0x180>
 8011602:	4b1b      	ldr	r3, [pc, #108]	; (8011670 <mem_trim+0x1e0>)
 8011604:	f240 3216 	movw	r2, #790	; 0x316
 8011608:	491d      	ldr	r1, [pc, #116]	; (8011680 <mem_trim+0x1f0>)
 801160a:	481b      	ldr	r0, [pc, #108]	; (8011678 <mem_trim+0x1e8>)
 801160c:	f009 fd7a 	bl	801b104 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011610:	89fb      	ldrh	r3, [r7, #14]
 8011612:	4618      	mov	r0, r3
 8011614:	f7ff fd98 	bl	8011148 <ptr_to_mem>
 8011618:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801161a:	4b1a      	ldr	r3, [pc, #104]	; (8011684 <mem_trim+0x1f4>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	693a      	ldr	r2, [r7, #16]
 8011620:	429a      	cmp	r2, r3
 8011622:	d202      	bcs.n	801162a <mem_trim+0x19a>
      lfree = mem2;
 8011624:	4a17      	ldr	r2, [pc, #92]	; (8011684 <mem_trim+0x1f4>)
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	2200      	movs	r2, #0
 801162e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011630:	69bb      	ldr	r3, [r7, #24]
 8011632:	881a      	ldrh	r2, [r3, #0]
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	8afa      	ldrh	r2, [r7, #22]
 801163c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801163e:	69bb      	ldr	r3, [r7, #24]
 8011640:	89fa      	ldrh	r2, [r7, #14]
 8011642:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801164c:	d007      	beq.n	801165e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	4618      	mov	r0, r3
 8011654:	f7ff fd78 	bl	8011148 <ptr_to_mem>
 8011658:	4602      	mov	r2, r0
 801165a:	89fb      	ldrh	r3, [r7, #14]
 801165c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801165e:	687b      	ldr	r3, [r7, #4]
}
 8011660:	4618      	mov	r0, r3
 8011662:	3720      	adds	r7, #32
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}
 8011668:	24000734 	.word	0x24000734
 801166c:	24000738 	.word	0x24000738
 8011670:	0801f5a8 	.word	0x0801f5a8
 8011674:	0801f744 	.word	0x0801f744
 8011678:	0801f61c 	.word	0x0801f61c
 801167c:	0801f75c 	.word	0x0801f75c
 8011680:	0801f77c 	.word	0x0801f77c
 8011684:	2400073c 	.word	0x2400073c

08011688 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b088      	sub	sp, #32
 801168c:	af00      	add	r7, sp, #0
 801168e:	4603      	mov	r3, r0
 8011690:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011692:	88fb      	ldrh	r3, [r7, #6]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d101      	bne.n	801169c <mem_malloc+0x14>
    return NULL;
 8011698:	2300      	movs	r3, #0
 801169a:	e0d9      	b.n	8011850 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801169c:	88fb      	ldrh	r3, [r7, #6]
 801169e:	3303      	adds	r3, #3
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	f023 0303 	bic.w	r3, r3, #3
 80116a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80116a8:	8bbb      	ldrh	r3, [r7, #28]
 80116aa:	2b0b      	cmp	r3, #11
 80116ac:	d801      	bhi.n	80116b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80116ae:	230c      	movs	r3, #12
 80116b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80116b2:	8bbb      	ldrh	r3, [r7, #28]
 80116b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80116b8:	d803      	bhi.n	80116c2 <mem_malloc+0x3a>
 80116ba:	8bba      	ldrh	r2, [r7, #28]
 80116bc:	88fb      	ldrh	r3, [r7, #6]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d201      	bcs.n	80116c6 <mem_malloc+0x3e>
    return NULL;
 80116c2:	2300      	movs	r3, #0
 80116c4:	e0c4      	b.n	8011850 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80116c6:	4b64      	ldr	r3, [pc, #400]	; (8011858 <mem_malloc+0x1d0>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7ff fd4e 	bl	801116c <mem_to_ptr>
 80116d0:	4603      	mov	r3, r0
 80116d2:	83fb      	strh	r3, [r7, #30]
 80116d4:	e0b4      	b.n	8011840 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80116d6:	8bfb      	ldrh	r3, [r7, #30]
 80116d8:	4618      	mov	r0, r3
 80116da:	f7ff fd35 	bl	8011148 <ptr_to_mem>
 80116de:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	791b      	ldrb	r3, [r3, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	f040 80a4 	bne.w	8011832 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	881b      	ldrh	r3, [r3, #0]
 80116ee:	461a      	mov	r2, r3
 80116f0:	8bfb      	ldrh	r3, [r7, #30]
 80116f2:	1ad3      	subs	r3, r2, r3
 80116f4:	f1a3 0208 	sub.w	r2, r3, #8
 80116f8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80116fa:	429a      	cmp	r2, r3
 80116fc:	f0c0 8099 	bcc.w	8011832 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	461a      	mov	r2, r3
 8011706:	8bfb      	ldrh	r3, [r7, #30]
 8011708:	1ad3      	subs	r3, r2, r3
 801170a:	f1a3 0208 	sub.w	r2, r3, #8
 801170e:	8bbb      	ldrh	r3, [r7, #28]
 8011710:	3314      	adds	r3, #20
 8011712:	429a      	cmp	r2, r3
 8011714:	d333      	bcc.n	801177e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011716:	8bfa      	ldrh	r2, [r7, #30]
 8011718:	8bbb      	ldrh	r3, [r7, #28]
 801171a:	4413      	add	r3, r2
 801171c:	b29b      	uxth	r3, r3
 801171e:	3308      	adds	r3, #8
 8011720:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011722:	8a7b      	ldrh	r3, [r7, #18]
 8011724:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011728:	d106      	bne.n	8011738 <mem_malloc+0xb0>
 801172a:	4b4c      	ldr	r3, [pc, #304]	; (801185c <mem_malloc+0x1d4>)
 801172c:	f240 3287 	movw	r2, #903	; 0x387
 8011730:	494b      	ldr	r1, [pc, #300]	; (8011860 <mem_malloc+0x1d8>)
 8011732:	484c      	ldr	r0, [pc, #304]	; (8011864 <mem_malloc+0x1dc>)
 8011734:	f009 fce6 	bl	801b104 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011738:	8a7b      	ldrh	r3, [r7, #18]
 801173a:	4618      	mov	r0, r3
 801173c:	f7ff fd04 	bl	8011148 <ptr_to_mem>
 8011740:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2200      	movs	r2, #0
 8011746:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	881a      	ldrh	r2, [r3, #0]
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	8bfa      	ldrh	r2, [r7, #30]
 8011754:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	8a7a      	ldrh	r2, [r7, #18]
 801175a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	2201      	movs	r2, #1
 8011760:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	881b      	ldrh	r3, [r3, #0]
 8011766:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801176a:	d00b      	beq.n	8011784 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	881b      	ldrh	r3, [r3, #0]
 8011770:	4618      	mov	r0, r3
 8011772:	f7ff fce9 	bl	8011148 <ptr_to_mem>
 8011776:	4602      	mov	r2, r0
 8011778:	8a7b      	ldrh	r3, [r7, #18]
 801177a:	8053      	strh	r3, [r2, #2]
 801177c:	e002      	b.n	8011784 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	2201      	movs	r2, #1
 8011782:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011784:	4b34      	ldr	r3, [pc, #208]	; (8011858 <mem_malloc+0x1d0>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	697a      	ldr	r2, [r7, #20]
 801178a:	429a      	cmp	r2, r3
 801178c:	d127      	bne.n	80117de <mem_malloc+0x156>
          struct mem *cur = lfree;
 801178e:	4b32      	ldr	r3, [pc, #200]	; (8011858 <mem_malloc+0x1d0>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011794:	e005      	b.n	80117a2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	881b      	ldrh	r3, [r3, #0]
 801179a:	4618      	mov	r0, r3
 801179c:	f7ff fcd4 	bl	8011148 <ptr_to_mem>
 80117a0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	791b      	ldrb	r3, [r3, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d004      	beq.n	80117b4 <mem_malloc+0x12c>
 80117aa:	4b2f      	ldr	r3, [pc, #188]	; (8011868 <mem_malloc+0x1e0>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	69ba      	ldr	r2, [r7, #24]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d1f0      	bne.n	8011796 <mem_malloc+0x10e>
          }
          lfree = cur;
 80117b4:	4a28      	ldr	r2, [pc, #160]	; (8011858 <mem_malloc+0x1d0>)
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80117ba:	4b27      	ldr	r3, [pc, #156]	; (8011858 <mem_malloc+0x1d0>)
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	4b2a      	ldr	r3, [pc, #168]	; (8011868 <mem_malloc+0x1e0>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d00b      	beq.n	80117de <mem_malloc+0x156>
 80117c6:	4b24      	ldr	r3, [pc, #144]	; (8011858 <mem_malloc+0x1d0>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	791b      	ldrb	r3, [r3, #4]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d006      	beq.n	80117de <mem_malloc+0x156>
 80117d0:	4b22      	ldr	r3, [pc, #136]	; (801185c <mem_malloc+0x1d4>)
 80117d2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80117d6:	4925      	ldr	r1, [pc, #148]	; (801186c <mem_malloc+0x1e4>)
 80117d8:	4822      	ldr	r0, [pc, #136]	; (8011864 <mem_malloc+0x1dc>)
 80117da:	f009 fc93 	bl	801b104 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80117de:	8bba      	ldrh	r2, [r7, #28]
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	4413      	add	r3, r2
 80117e4:	3308      	adds	r3, #8
 80117e6:	4a20      	ldr	r2, [pc, #128]	; (8011868 <mem_malloc+0x1e0>)
 80117e8:	6812      	ldr	r2, [r2, #0]
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d906      	bls.n	80117fc <mem_malloc+0x174>
 80117ee:	4b1b      	ldr	r3, [pc, #108]	; (801185c <mem_malloc+0x1d4>)
 80117f0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80117f4:	491e      	ldr	r1, [pc, #120]	; (8011870 <mem_malloc+0x1e8>)
 80117f6:	481b      	ldr	r0, [pc, #108]	; (8011864 <mem_malloc+0x1dc>)
 80117f8:	f009 fc84 	bl	801b104 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	f003 0303 	and.w	r3, r3, #3
 8011802:	2b00      	cmp	r3, #0
 8011804:	d006      	beq.n	8011814 <mem_malloc+0x18c>
 8011806:	4b15      	ldr	r3, [pc, #84]	; (801185c <mem_malloc+0x1d4>)
 8011808:	f240 32bb 	movw	r2, #955	; 0x3bb
 801180c:	4919      	ldr	r1, [pc, #100]	; (8011874 <mem_malloc+0x1ec>)
 801180e:	4815      	ldr	r0, [pc, #84]	; (8011864 <mem_malloc+0x1dc>)
 8011810:	f009 fc78 	bl	801b104 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	f003 0303 	and.w	r3, r3, #3
 801181a:	2b00      	cmp	r3, #0
 801181c:	d006      	beq.n	801182c <mem_malloc+0x1a4>
 801181e:	4b0f      	ldr	r3, [pc, #60]	; (801185c <mem_malloc+0x1d4>)
 8011820:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011824:	4914      	ldr	r1, [pc, #80]	; (8011878 <mem_malloc+0x1f0>)
 8011826:	480f      	ldr	r0, [pc, #60]	; (8011864 <mem_malloc+0x1dc>)
 8011828:	f009 fc6c 	bl	801b104 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	3308      	adds	r3, #8
 8011830:	e00e      	b.n	8011850 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8011832:	8bfb      	ldrh	r3, [r7, #30]
 8011834:	4618      	mov	r0, r3
 8011836:	f7ff fc87 	bl	8011148 <ptr_to_mem>
 801183a:	4603      	mov	r3, r0
 801183c:	881b      	ldrh	r3, [r3, #0]
 801183e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011840:	8bfa      	ldrh	r2, [r7, #30]
 8011842:	8bbb      	ldrh	r3, [r7, #28]
 8011844:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011848:	429a      	cmp	r2, r3
 801184a:	f4ff af44 	bcc.w	80116d6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3720      	adds	r7, #32
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	2400073c 	.word	0x2400073c
 801185c:	0801f5a8 	.word	0x0801f5a8
 8011860:	0801f77c 	.word	0x0801f77c
 8011864:	0801f61c 	.word	0x0801f61c
 8011868:	24000738 	.word	0x24000738
 801186c:	0801f790 	.word	0x0801f790
 8011870:	0801f7ac 	.word	0x0801f7ac
 8011874:	0801f7dc 	.word	0x0801f7dc
 8011878:	0801f80c 	.word	0x0801f80c

0801187c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801187c:	b480      	push	{r7}
 801187e:	b085      	sub	sp, #20
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	689b      	ldr	r3, [r3, #8]
 8011888:	2200      	movs	r2, #0
 801188a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	3303      	adds	r3, #3
 8011892:	f023 0303 	bic.w	r3, r3, #3
 8011896:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011898:	2300      	movs	r3, #0
 801189a:	60fb      	str	r3, [r7, #12]
 801189c:	e011      	b.n	80118c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	689b      	ldr	r3, [r3, #8]
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	689b      	ldr	r3, [r3, #8]
 80118ac:	68ba      	ldr	r2, [r7, #8]
 80118ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	461a      	mov	r2, r3
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	4413      	add	r3, r2
 80118ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	3301      	adds	r3, #1
 80118c0:	60fb      	str	r3, [r7, #12]
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	885b      	ldrh	r3, [r3, #2]
 80118c6:	461a      	mov	r2, r3
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	4293      	cmp	r3, r2
 80118cc:	dbe7      	blt.n	801189e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80118ce:	bf00      	nop
 80118d0:	bf00      	nop
 80118d2:	3714      	adds	r7, #20
 80118d4:	46bd      	mov	sp, r7
 80118d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118da:	4770      	bx	lr

080118dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80118e2:	2300      	movs	r3, #0
 80118e4:	80fb      	strh	r3, [r7, #6]
 80118e6:	e009      	b.n	80118fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80118e8:	88fb      	ldrh	r3, [r7, #6]
 80118ea:	4a08      	ldr	r2, [pc, #32]	; (801190c <memp_init+0x30>)
 80118ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7ff ffc3 	bl	801187c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80118f6:	88fb      	ldrh	r3, [r7, #6]
 80118f8:	3301      	adds	r3, #1
 80118fa:	80fb      	strh	r3, [r7, #6]
 80118fc:	88fb      	ldrh	r3, [r7, #6]
 80118fe:	2b08      	cmp	r3, #8
 8011900:	d9f2      	bls.n	80118e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011902:	bf00      	nop
 8011904:	bf00      	nop
 8011906:	3708      	adds	r7, #8
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	08021afc 	.word	0x08021afc

08011910 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	689b      	ldr	r3, [r3, #8]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d012      	beq.n	801194c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	689b      	ldr	r3, [r3, #8]
 801192a:	68fa      	ldr	r2, [r7, #12]
 801192c:	6812      	ldr	r2, [r2, #0]
 801192e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	f003 0303 	and.w	r3, r3, #3
 8011936:	2b00      	cmp	r3, #0
 8011938:	d006      	beq.n	8011948 <do_memp_malloc_pool+0x38>
 801193a:	4b07      	ldr	r3, [pc, #28]	; (8011958 <do_memp_malloc_pool+0x48>)
 801193c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011940:	4906      	ldr	r1, [pc, #24]	; (801195c <do_memp_malloc_pool+0x4c>)
 8011942:	4807      	ldr	r0, [pc, #28]	; (8011960 <do_memp_malloc_pool+0x50>)
 8011944:	f009 fbde 	bl	801b104 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	e000      	b.n	801194e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801194c:	2300      	movs	r3, #0
}
 801194e:	4618      	mov	r0, r3
 8011950:	3710      	adds	r7, #16
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	0801f830 	.word	0x0801f830
 801195c:	0801f88c 	.word	0x0801f88c
 8011960:	0801f8b0 	.word	0x0801f8b0

08011964 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	4603      	mov	r3, r0
 801196c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801196e:	79fb      	ldrb	r3, [r7, #7]
 8011970:	2b08      	cmp	r3, #8
 8011972:	d908      	bls.n	8011986 <memp_malloc+0x22>
 8011974:	4b0a      	ldr	r3, [pc, #40]	; (80119a0 <memp_malloc+0x3c>)
 8011976:	f240 1257 	movw	r2, #343	; 0x157
 801197a:	490a      	ldr	r1, [pc, #40]	; (80119a4 <memp_malloc+0x40>)
 801197c:	480a      	ldr	r0, [pc, #40]	; (80119a8 <memp_malloc+0x44>)
 801197e:	f009 fbc1 	bl	801b104 <iprintf>
 8011982:	2300      	movs	r3, #0
 8011984:	e008      	b.n	8011998 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011986:	79fb      	ldrb	r3, [r7, #7]
 8011988:	4a08      	ldr	r2, [pc, #32]	; (80119ac <memp_malloc+0x48>)
 801198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801198e:	4618      	mov	r0, r3
 8011990:	f7ff ffbe 	bl	8011910 <do_memp_malloc_pool>
 8011994:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011996:	68fb      	ldr	r3, [r7, #12]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3710      	adds	r7, #16
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	0801f830 	.word	0x0801f830
 80119a4:	0801f8ec 	.word	0x0801f8ec
 80119a8:	0801f8b0 	.word	0x0801f8b0
 80119ac:	08021afc 	.word	0x08021afc

080119b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b084      	sub	sp, #16
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	f003 0303 	and.w	r3, r3, #3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d006      	beq.n	80119d2 <do_memp_free_pool+0x22>
 80119c4:	4b0a      	ldr	r3, [pc, #40]	; (80119f0 <do_memp_free_pool+0x40>)
 80119c6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80119ca:	490a      	ldr	r1, [pc, #40]	; (80119f4 <do_memp_free_pool+0x44>)
 80119cc:	480a      	ldr	r0, [pc, #40]	; (80119f8 <do_memp_free_pool+0x48>)
 80119ce:	f009 fb99 	bl	801b104 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	689b      	ldr	r3, [r3, #8]
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	68fa      	ldr	r2, [r7, #12]
 80119e6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80119e8:	bf00      	nop
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	0801f830 	.word	0x0801f830
 80119f4:	0801f90c 	.word	0x0801f90c
 80119f8:	0801f8b0 	.word	0x0801f8b0

080119fc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	4603      	mov	r3, r0
 8011a04:	6039      	str	r1, [r7, #0]
 8011a06:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011a08:	79fb      	ldrb	r3, [r7, #7]
 8011a0a:	2b08      	cmp	r3, #8
 8011a0c:	d907      	bls.n	8011a1e <memp_free+0x22>
 8011a0e:	4b0c      	ldr	r3, [pc, #48]	; (8011a40 <memp_free+0x44>)
 8011a10:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011a14:	490b      	ldr	r1, [pc, #44]	; (8011a44 <memp_free+0x48>)
 8011a16:	480c      	ldr	r0, [pc, #48]	; (8011a48 <memp_free+0x4c>)
 8011a18:	f009 fb74 	bl	801b104 <iprintf>
 8011a1c:	e00c      	b.n	8011a38 <memp_free+0x3c>

  if (mem == NULL) {
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d008      	beq.n	8011a36 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011a24:	79fb      	ldrb	r3, [r7, #7]
 8011a26:	4a09      	ldr	r2, [pc, #36]	; (8011a4c <memp_free+0x50>)
 8011a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a2c:	6839      	ldr	r1, [r7, #0]
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7ff ffbe 	bl	80119b0 <do_memp_free_pool>
 8011a34:	e000      	b.n	8011a38 <memp_free+0x3c>
    return;
 8011a36:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011a38:	3708      	adds	r7, #8
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	0801f830 	.word	0x0801f830
 8011a44:	0801f92c 	.word	0x0801f92c
 8011a48:	0801f8b0 	.word	0x0801f8b0
 8011a4c:	08021afc 	.word	0x08021afc

08011a50 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011a50:	b480      	push	{r7}
 8011a52:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011a54:	bf00      	nop
 8011a56:	46bd      	mov	sp, r7
 8011a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5c:	4770      	bx	lr
	...

08011a60 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b086      	sub	sp, #24
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	607a      	str	r2, [r7, #4]
 8011a6c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d108      	bne.n	8011a86 <netif_add+0x26>
 8011a74:	4b57      	ldr	r3, [pc, #348]	; (8011bd4 <netif_add+0x174>)
 8011a76:	f240 1227 	movw	r2, #295	; 0x127
 8011a7a:	4957      	ldr	r1, [pc, #348]	; (8011bd8 <netif_add+0x178>)
 8011a7c:	4857      	ldr	r0, [pc, #348]	; (8011bdc <netif_add+0x17c>)
 8011a7e:	f009 fb41 	bl	801b104 <iprintf>
 8011a82:	2300      	movs	r3, #0
 8011a84:	e0a2      	b.n	8011bcc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d108      	bne.n	8011a9e <netif_add+0x3e>
 8011a8c:	4b51      	ldr	r3, [pc, #324]	; (8011bd4 <netif_add+0x174>)
 8011a8e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011a92:	4953      	ldr	r1, [pc, #332]	; (8011be0 <netif_add+0x180>)
 8011a94:	4851      	ldr	r0, [pc, #324]	; (8011bdc <netif_add+0x17c>)
 8011a96:	f009 fb35 	bl	801b104 <iprintf>
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	e096      	b.n	8011bcc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011aa4:	4b4f      	ldr	r3, [pc, #316]	; (8011be4 <netif_add+0x184>)
 8011aa6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d101      	bne.n	8011ab2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011aae:	4b4d      	ldr	r3, [pc, #308]	; (8011be4 <netif_add+0x184>)
 8011ab0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d101      	bne.n	8011abc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011ab8:	4b4a      	ldr	r3, [pc, #296]	; (8011be4 <netif_add+0x184>)
 8011aba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2200      	movs	r2, #0
 8011acc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	4a45      	ldr	r2, [pc, #276]	; (8011be8 <netif_add+0x188>)
 8011ad2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2200      	movs	r2, #0
 8011ade:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	6a3a      	ldr	r2, [r7, #32]
 8011aec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011aee:	4b3f      	ldr	r3, [pc, #252]	; (8011bec <netif_add+0x18c>)
 8011af0:	781a      	ldrb	r2, [r3, #0]
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011afc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	68b9      	ldr	r1, [r7, #8]
 8011b04:	68f8      	ldr	r0, [r7, #12]
 8011b06:	f000 f913 	bl	8011d30 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0c:	68f8      	ldr	r0, [r7, #12]
 8011b0e:	4798      	blx	r3
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d001      	beq.n	8011b1a <netif_add+0xba>
    return NULL;
 8011b16:	2300      	movs	r3, #0
 8011b18:	e058      	b.n	8011bcc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b20:	2bff      	cmp	r3, #255	; 0xff
 8011b22:	d103      	bne.n	8011b2c <netif_add+0xcc>
        netif->num = 0;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011b30:	4b2f      	ldr	r3, [pc, #188]	; (8011bf0 <netif_add+0x190>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	617b      	str	r3, [r7, #20]
 8011b36:	e02b      	b.n	8011b90 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011b38:	697a      	ldr	r2, [r7, #20]
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d106      	bne.n	8011b4e <netif_add+0xee>
 8011b40:	4b24      	ldr	r3, [pc, #144]	; (8011bd4 <netif_add+0x174>)
 8011b42:	f240 128b 	movw	r2, #395	; 0x18b
 8011b46:	492b      	ldr	r1, [pc, #172]	; (8011bf4 <netif_add+0x194>)
 8011b48:	4824      	ldr	r0, [pc, #144]	; (8011bdc <netif_add+0x17c>)
 8011b4a:	f009 fadb 	bl	801b104 <iprintf>
        num_netifs++;
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	3301      	adds	r3, #1
 8011b52:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	2bff      	cmp	r3, #255	; 0xff
 8011b58:	dd06      	ble.n	8011b68 <netif_add+0x108>
 8011b5a:	4b1e      	ldr	r3, [pc, #120]	; (8011bd4 <netif_add+0x174>)
 8011b5c:	f240 128d 	movw	r2, #397	; 0x18d
 8011b60:	4925      	ldr	r1, [pc, #148]	; (8011bf8 <netif_add+0x198>)
 8011b62:	481e      	ldr	r0, [pc, #120]	; (8011bdc <netif_add+0x17c>)
 8011b64:	f009 face 	bl	801b104 <iprintf>
        if (netif2->num == netif->num) {
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d108      	bne.n	8011b8a <netif_add+0x12a>
          netif->num++;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b7e:	3301      	adds	r3, #1
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8011b88:	e005      	b.n	8011b96 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	617b      	str	r3, [r7, #20]
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1d0      	bne.n	8011b38 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d1be      	bne.n	8011b1a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011ba2:	2bfe      	cmp	r3, #254	; 0xfe
 8011ba4:	d103      	bne.n	8011bae <netif_add+0x14e>
    netif_num = 0;
 8011ba6:	4b11      	ldr	r3, [pc, #68]	; (8011bec <netif_add+0x18c>)
 8011ba8:	2200      	movs	r2, #0
 8011baa:	701a      	strb	r2, [r3, #0]
 8011bac:	e006      	b.n	8011bbc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	b2da      	uxtb	r2, r3
 8011bb8:	4b0c      	ldr	r3, [pc, #48]	; (8011bec <netif_add+0x18c>)
 8011bba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011bbc:	4b0c      	ldr	r3, [pc, #48]	; (8011bf0 <netif_add+0x190>)
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011bc4:	4a0a      	ldr	r2, [pc, #40]	; (8011bf0 <netif_add+0x190>)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011bca:	68fb      	ldr	r3, [r7, #12]
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3718      	adds	r7, #24
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	0801f948 	.word	0x0801f948
 8011bd8:	0801fa04 	.word	0x0801fa04
 8011bdc:	0801f9c0 	.word	0x0801f9c0
 8011be0:	0801fa20 	.word	0x0801fa20
 8011be4:	08021a8c 	.word	0x08021a8c
 8011be8:	0801200b 	.word	0x0801200b
 8011bec:	24000764 	.word	0x24000764
 8011bf0:	24003de0 	.word	0x24003de0
 8011bf4:	0801fa44 	.word	0x0801fa44
 8011bf8:	0801fa58 	.word	0x0801fa58

08011bfc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011c06:	6839      	ldr	r1, [r7, #0]
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f002 fb23 	bl	8014254 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011c0e:	6839      	ldr	r1, [r7, #0]
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f006 fbc1 	bl	8018398 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011c16:	bf00      	nop
 8011c18:	3708      	adds	r7, #8
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
	...

08011c20 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b086      	sub	sp, #24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d106      	bne.n	8011c40 <netif_do_set_ipaddr+0x20>
 8011c32:	4b1d      	ldr	r3, [pc, #116]	; (8011ca8 <netif_do_set_ipaddr+0x88>)
 8011c34:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011c38:	491c      	ldr	r1, [pc, #112]	; (8011cac <netif_do_set_ipaddr+0x8c>)
 8011c3a:	481d      	ldr	r0, [pc, #116]	; (8011cb0 <netif_do_set_ipaddr+0x90>)
 8011c3c:	f009 fa62 	bl	801b104 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d106      	bne.n	8011c54 <netif_do_set_ipaddr+0x34>
 8011c46:	4b18      	ldr	r3, [pc, #96]	; (8011ca8 <netif_do_set_ipaddr+0x88>)
 8011c48:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011c4c:	4917      	ldr	r1, [pc, #92]	; (8011cac <netif_do_set_ipaddr+0x8c>)
 8011c4e:	4818      	ldr	r0, [pc, #96]	; (8011cb0 <netif_do_set_ipaddr+0x90>)
 8011c50:	f009 fa58 	bl	801b104 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	3304      	adds	r3, #4
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d01c      	beq.n	8011c9c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	3304      	adds	r3, #4
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011c72:	f107 0314 	add.w	r3, r7, #20
 8011c76:	4619      	mov	r1, r3
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f7ff ffbf 	bl	8011bfc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d002      	beq.n	8011c8a <netif_do_set_ipaddr+0x6a>
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	e000      	b.n	8011c8c <netif_do_set_ipaddr+0x6c>
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	68fa      	ldr	r2, [r7, #12]
 8011c8e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011c90:	2101      	movs	r1, #1
 8011c92:	68f8      	ldr	r0, [r7, #12]
 8011c94:	f000 f8d2 	bl	8011e3c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011c98:	2301      	movs	r3, #1
 8011c9a:	e000      	b.n	8011c9e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011c9c:	2300      	movs	r3, #0
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3718      	adds	r7, #24
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	0801f948 	.word	0x0801f948
 8011cac:	0801fa88 	.word	0x0801fa88
 8011cb0:	0801f9c0 	.word	0x0801f9c0

08011cb4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b085      	sub	sp, #20
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	681a      	ldr	r2, [r3, #0]
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	3308      	adds	r3, #8
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d00a      	beq.n	8011ce4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d002      	beq.n	8011cda <netif_do_set_netmask+0x26>
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	e000      	b.n	8011cdc <netif_do_set_netmask+0x28>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	68fa      	ldr	r2, [r7, #12]
 8011cde:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	e000      	b.n	8011ce6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011ce4:	2300      	movs	r3, #0
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr

08011cf2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011cf2:	b480      	push	{r7}
 8011cf4:	b085      	sub	sp, #20
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	60f8      	str	r0, [r7, #12]
 8011cfa:	60b9      	str	r1, [r7, #8]
 8011cfc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	330c      	adds	r3, #12
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d00a      	beq.n	8011d22 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d002      	beq.n	8011d18 <netif_do_set_gw+0x26>
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	e000      	b.n	8011d1a <netif_do_set_gw+0x28>
 8011d18:	2300      	movs	r3, #0
 8011d1a:	68fa      	ldr	r2, [r7, #12]
 8011d1c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011d1e:	2301      	movs	r3, #1
 8011d20:	e000      	b.n	8011d24 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011d22:	2300      	movs	r3, #0
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3714      	adds	r7, #20
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr

08011d30 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b088      	sub	sp, #32
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	60f8      	str	r0, [r7, #12]
 8011d38:	60b9      	str	r1, [r7, #8]
 8011d3a:	607a      	str	r2, [r7, #4]
 8011d3c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011d42:	2300      	movs	r3, #0
 8011d44:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d101      	bne.n	8011d50 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011d4c:	4b1c      	ldr	r3, [pc, #112]	; (8011dc0 <netif_set_addr+0x90>)
 8011d4e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d101      	bne.n	8011d5a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011d56:	4b1a      	ldr	r3, [pc, #104]	; (8011dc0 <netif_set_addr+0x90>)
 8011d58:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d101      	bne.n	8011d64 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011d60:	4b17      	ldr	r3, [pc, #92]	; (8011dc0 <netif_set_addr+0x90>)
 8011d62:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d003      	beq.n	8011d72 <netif_set_addr+0x42>
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d101      	bne.n	8011d76 <netif_set_addr+0x46>
 8011d72:	2301      	movs	r3, #1
 8011d74:	e000      	b.n	8011d78 <netif_set_addr+0x48>
 8011d76:	2300      	movs	r3, #0
 8011d78:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d006      	beq.n	8011d8e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011d80:	f107 0310 	add.w	r3, r7, #16
 8011d84:	461a      	mov	r2, r3
 8011d86:	68b9      	ldr	r1, [r7, #8]
 8011d88:	68f8      	ldr	r0, [r7, #12]
 8011d8a:	f7ff ff49 	bl	8011c20 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011d8e:	69fa      	ldr	r2, [r7, #28]
 8011d90:	6879      	ldr	r1, [r7, #4]
 8011d92:	68f8      	ldr	r0, [r7, #12]
 8011d94:	f7ff ff8e 	bl	8011cb4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011d98:	69ba      	ldr	r2, [r7, #24]
 8011d9a:	6839      	ldr	r1, [r7, #0]
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f7ff ffa8 	bl	8011cf2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d106      	bne.n	8011db6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011da8:	f107 0310 	add.w	r3, r7, #16
 8011dac:	461a      	mov	r2, r3
 8011dae:	68b9      	ldr	r1, [r7, #8]
 8011db0:	68f8      	ldr	r0, [r7, #12]
 8011db2:	f7ff ff35 	bl	8011c20 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011db6:	bf00      	nop
 8011db8:	3720      	adds	r7, #32
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	08021a8c 	.word	0x08021a8c

08011dc4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b083      	sub	sp, #12
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011dcc:	4a04      	ldr	r2, [pc, #16]	; (8011de0 <netif_set_default+0x1c>)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011dd2:	bf00      	nop
 8011dd4:	370c      	adds	r7, #12
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr
 8011dde:	bf00      	nop
 8011de0:	24003de4 	.word	0x24003de4

08011de4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d107      	bne.n	8011e02 <netif_set_up+0x1e>
 8011df2:	4b0f      	ldr	r3, [pc, #60]	; (8011e30 <netif_set_up+0x4c>)
 8011df4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011df8:	490e      	ldr	r1, [pc, #56]	; (8011e34 <netif_set_up+0x50>)
 8011dfa:	480f      	ldr	r0, [pc, #60]	; (8011e38 <netif_set_up+0x54>)
 8011dfc:	f009 f982 	bl	801b104 <iprintf>
 8011e00:	e013      	b.n	8011e2a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e08:	f003 0301 	and.w	r3, r3, #1
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d10c      	bne.n	8011e2a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e16:	f043 0301 	orr.w	r3, r3, #1
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011e22:	2103      	movs	r1, #3
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f000 f809 	bl	8011e3c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011e2a:	3708      	adds	r7, #8
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	0801f948 	.word	0x0801f948
 8011e34:	0801faf8 	.word	0x0801faf8
 8011e38:	0801f9c0 	.word	0x0801f9c0

08011e3c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	460b      	mov	r3, r1
 8011e46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d106      	bne.n	8011e5c <netif_issue_reports+0x20>
 8011e4e:	4b18      	ldr	r3, [pc, #96]	; (8011eb0 <netif_issue_reports+0x74>)
 8011e50:	f240 326d 	movw	r2, #877	; 0x36d
 8011e54:	4917      	ldr	r1, [pc, #92]	; (8011eb4 <netif_issue_reports+0x78>)
 8011e56:	4818      	ldr	r0, [pc, #96]	; (8011eb8 <netif_issue_reports+0x7c>)
 8011e58:	f009 f954 	bl	801b104 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e62:	f003 0304 	and.w	r3, r3, #4
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d01e      	beq.n	8011ea8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e70:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d017      	beq.n	8011ea8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011e78:	78fb      	ldrb	r3, [r7, #3]
 8011e7a:	f003 0301 	and.w	r3, r3, #1
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d013      	beq.n	8011eaa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	3304      	adds	r3, #4
 8011e86:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d00e      	beq.n	8011eaa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e92:	f003 0308 	and.w	r3, r3, #8
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d007      	beq.n	8011eaa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f7fd fcd3 	bl	800f84c <etharp_request>
 8011ea6:	e000      	b.n	8011eaa <netif_issue_reports+0x6e>
    return;
 8011ea8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011eaa:	3708      	adds	r7, #8
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	0801f948 	.word	0x0801f948
 8011eb4:	0801fb14 	.word	0x0801fb14
 8011eb8:	0801f9c0 	.word	0x0801f9c0

08011ebc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d107      	bne.n	8011eda <netif_set_down+0x1e>
 8011eca:	4b12      	ldr	r3, [pc, #72]	; (8011f14 <netif_set_down+0x58>)
 8011ecc:	f240 329b 	movw	r2, #923	; 0x39b
 8011ed0:	4911      	ldr	r1, [pc, #68]	; (8011f18 <netif_set_down+0x5c>)
 8011ed2:	4812      	ldr	r0, [pc, #72]	; (8011f1c <netif_set_down+0x60>)
 8011ed4:	f009 f916 	bl	801b104 <iprintf>
 8011ed8:	e019      	b.n	8011f0e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ee0:	f003 0301 	and.w	r3, r3, #1
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d012      	beq.n	8011f0e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011eee:	f023 0301 	bic.w	r3, r3, #1
 8011ef2:	b2da      	uxtb	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f00:	f003 0308 	and.w	r3, r3, #8
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d002      	beq.n	8011f0e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011f08:	6878      	ldr	r0, [r7, #4]
 8011f0a:	f7fd f85d 	bl	800efc8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	0801f948 	.word	0x0801f948
 8011f18:	0801fb38 	.word	0x0801fb38
 8011f1c:	0801f9c0 	.word	0x0801f9c0

08011f20 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d107      	bne.n	8011f3e <netif_set_link_up+0x1e>
 8011f2e:	4b13      	ldr	r3, [pc, #76]	; (8011f7c <netif_set_link_up+0x5c>)
 8011f30:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011f34:	4912      	ldr	r1, [pc, #72]	; (8011f80 <netif_set_link_up+0x60>)
 8011f36:	4813      	ldr	r0, [pc, #76]	; (8011f84 <netif_set_link_up+0x64>)
 8011f38:	f009 f8e4 	bl	801b104 <iprintf>
 8011f3c:	e01b      	b.n	8011f76 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f44:	f003 0304 	and.w	r3, r3, #4
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d114      	bne.n	8011f76 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f52:	f043 0304 	orr.w	r3, r3, #4
 8011f56:	b2da      	uxtb	r2, r3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011f5e:	2103      	movs	r1, #3
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7ff ff6b 	bl	8011e3c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	69db      	ldr	r3, [r3, #28]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d003      	beq.n	8011f76 <netif_set_link_up+0x56>
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	69db      	ldr	r3, [r3, #28]
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	0801f948 	.word	0x0801f948
 8011f80:	0801fb58 	.word	0x0801fb58
 8011f84:	0801f9c0 	.word	0x0801f9c0

08011f88 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d107      	bne.n	8011fa6 <netif_set_link_down+0x1e>
 8011f96:	4b11      	ldr	r3, [pc, #68]	; (8011fdc <netif_set_link_down+0x54>)
 8011f98:	f240 4206 	movw	r2, #1030	; 0x406
 8011f9c:	4910      	ldr	r1, [pc, #64]	; (8011fe0 <netif_set_link_down+0x58>)
 8011f9e:	4811      	ldr	r0, [pc, #68]	; (8011fe4 <netif_set_link_down+0x5c>)
 8011fa0:	f009 f8b0 	bl	801b104 <iprintf>
 8011fa4:	e017      	b.n	8011fd6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fac:	f003 0304 	and.w	r3, r3, #4
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d010      	beq.n	8011fd6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fba:	f023 0304 	bic.w	r3, r3, #4
 8011fbe:	b2da      	uxtb	r2, r3
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	69db      	ldr	r3, [r3, #28]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d003      	beq.n	8011fd6 <netif_set_link_down+0x4e>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	69db      	ldr	r3, [r3, #28]
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011fd6:	3708      	adds	r7, #8
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	0801f948 	.word	0x0801f948
 8011fe0:	0801fb7c 	.word	0x0801fb7c
 8011fe4:	0801f9c0 	.word	0x0801f9c0

08011fe8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d002      	beq.n	8011ffe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	683a      	ldr	r2, [r7, #0]
 8011ffc:	61da      	str	r2, [r3, #28]
  }
}
 8011ffe:	bf00      	nop
 8012000:	370c      	adds	r7, #12
 8012002:	46bd      	mov	sp, r7
 8012004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012008:	4770      	bx	lr

0801200a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801200a:	b480      	push	{r7}
 801200c:	b085      	sub	sp, #20
 801200e:	af00      	add	r7, sp, #0
 8012010:	60f8      	str	r0, [r7, #12]
 8012012:	60b9      	str	r1, [r7, #8]
 8012014:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012016:	f06f 030b 	mvn.w	r3, #11
}
 801201a:	4618      	mov	r0, r3
 801201c:	3714      	adds	r7, #20
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr
	...

08012028 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012028:	b480      	push	{r7}
 801202a:	b085      	sub	sp, #20
 801202c:	af00      	add	r7, sp, #0
 801202e:	4603      	mov	r3, r0
 8012030:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012032:	79fb      	ldrb	r3, [r7, #7]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d013      	beq.n	8012060 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012038:	4b0d      	ldr	r3, [pc, #52]	; (8012070 <netif_get_by_index+0x48>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	60fb      	str	r3, [r7, #12]
 801203e:	e00c      	b.n	801205a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012046:	3301      	adds	r3, #1
 8012048:	b2db      	uxtb	r3, r3
 801204a:	79fa      	ldrb	r2, [r7, #7]
 801204c:	429a      	cmp	r2, r3
 801204e:	d101      	bne.n	8012054 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	e006      	b.n	8012062 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	60fb      	str	r3, [r7, #12]
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1ef      	bne.n	8012040 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012060:	2300      	movs	r3, #0
}
 8012062:	4618      	mov	r0, r3
 8012064:	3714      	adds	r7, #20
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr
 801206e:	bf00      	nop
 8012070:	24003de0 	.word	0x24003de0

08012074 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012074:	b480      	push	{r7}
 8012076:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8012078:	4b03      	ldr	r3, [pc, #12]	; (8012088 <pbuf_pool_is_empty+0x14>)
 801207a:	2201      	movs	r2, #1
 801207c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801207e:	bf00      	nop
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	24003de8 	.word	0x24003de8

0801208c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801208c:	b480      	push	{r7}
 801208e:	b085      	sub	sp, #20
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	4611      	mov	r1, r2
 8012098:	461a      	mov	r2, r3
 801209a:	460b      	mov	r3, r1
 801209c:	80fb      	strh	r3, [r7, #6]
 801209e:	4613      	mov	r3, r2
 80120a0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	2200      	movs	r2, #0
 80120a6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	68ba      	ldr	r2, [r7, #8]
 80120ac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	88fa      	ldrh	r2, [r7, #6]
 80120b2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	88ba      	ldrh	r2, [r7, #4]
 80120b8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80120ba:	8b3b      	ldrh	r3, [r7, #24]
 80120bc:	b2da      	uxtb	r2, r3
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	7f3a      	ldrb	r2, [r7, #28]
 80120c6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2201      	movs	r2, #1
 80120cc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2200      	movs	r2, #0
 80120d2:	73da      	strb	r2, [r3, #15]
}
 80120d4:	bf00      	nop
 80120d6:	3714      	adds	r7, #20
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b08c      	sub	sp, #48	; 0x30
 80120e4:	af02      	add	r7, sp, #8
 80120e6:	4603      	mov	r3, r0
 80120e8:	71fb      	strb	r3, [r7, #7]
 80120ea:	460b      	mov	r3, r1
 80120ec:	80bb      	strh	r3, [r7, #4]
 80120ee:	4613      	mov	r3, r2
 80120f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80120f2:	79fb      	ldrb	r3, [r7, #7]
 80120f4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80120f6:	887b      	ldrh	r3, [r7, #2]
 80120f8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80120fc:	d07f      	beq.n	80121fe <pbuf_alloc+0x11e>
 80120fe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012102:	f300 80c8 	bgt.w	8012296 <pbuf_alloc+0x1b6>
 8012106:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801210a:	d010      	beq.n	801212e <pbuf_alloc+0x4e>
 801210c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012110:	f300 80c1 	bgt.w	8012296 <pbuf_alloc+0x1b6>
 8012114:	2b01      	cmp	r3, #1
 8012116:	d002      	beq.n	801211e <pbuf_alloc+0x3e>
 8012118:	2b41      	cmp	r3, #65	; 0x41
 801211a:	f040 80bc 	bne.w	8012296 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801211e:	887a      	ldrh	r2, [r7, #2]
 8012120:	88bb      	ldrh	r3, [r7, #4]
 8012122:	4619      	mov	r1, r3
 8012124:	2000      	movs	r0, #0
 8012126:	f000 f8d1 	bl	80122cc <pbuf_alloc_reference>
 801212a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801212c:	e0bd      	b.n	80122aa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801212e:	2300      	movs	r3, #0
 8012130:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012132:	2300      	movs	r3, #0
 8012134:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012136:	88bb      	ldrh	r3, [r7, #4]
 8012138:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801213a:	2008      	movs	r0, #8
 801213c:	f7ff fc12 	bl	8011964 <memp_malloc>
 8012140:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d109      	bne.n	801215c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012148:	f7ff ff94 	bl	8012074 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214e:	2b00      	cmp	r3, #0
 8012150:	d002      	beq.n	8012158 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012154:	f000 faa8 	bl	80126a8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012158:	2300      	movs	r3, #0
 801215a:	e0a7      	b.n	80122ac <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801215c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801215e:	3303      	adds	r3, #3
 8012160:	b29b      	uxth	r3, r3
 8012162:	f023 0303 	bic.w	r3, r3, #3
 8012166:	b29b      	uxth	r3, r3
 8012168:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801216c:	b29b      	uxth	r3, r3
 801216e:	8b7a      	ldrh	r2, [r7, #26]
 8012170:	4293      	cmp	r3, r2
 8012172:	bf28      	it	cs
 8012174:	4613      	movcs	r3, r2
 8012176:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012178:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801217a:	3310      	adds	r3, #16
 801217c:	693a      	ldr	r2, [r7, #16]
 801217e:	4413      	add	r3, r2
 8012180:	3303      	adds	r3, #3
 8012182:	f023 0303 	bic.w	r3, r3, #3
 8012186:	4618      	mov	r0, r3
 8012188:	89f9      	ldrh	r1, [r7, #14]
 801218a:	8b7a      	ldrh	r2, [r7, #26]
 801218c:	2300      	movs	r3, #0
 801218e:	9301      	str	r3, [sp, #4]
 8012190:	887b      	ldrh	r3, [r7, #2]
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	460b      	mov	r3, r1
 8012196:	4601      	mov	r1, r0
 8012198:	6938      	ldr	r0, [r7, #16]
 801219a:	f7ff ff77 	bl	801208c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	f003 0303 	and.w	r3, r3, #3
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d006      	beq.n	80121b8 <pbuf_alloc+0xd8>
 80121aa:	4b42      	ldr	r3, [pc, #264]	; (80122b4 <pbuf_alloc+0x1d4>)
 80121ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80121b0:	4941      	ldr	r1, [pc, #260]	; (80122b8 <pbuf_alloc+0x1d8>)
 80121b2:	4842      	ldr	r0, [pc, #264]	; (80122bc <pbuf_alloc+0x1dc>)
 80121b4:	f008 ffa6 	bl	801b104 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80121b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121ba:	3303      	adds	r3, #3
 80121bc:	f023 0303 	bic.w	r3, r3, #3
 80121c0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80121c4:	d106      	bne.n	80121d4 <pbuf_alloc+0xf4>
 80121c6:	4b3b      	ldr	r3, [pc, #236]	; (80122b4 <pbuf_alloc+0x1d4>)
 80121c8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80121cc:	493c      	ldr	r1, [pc, #240]	; (80122c0 <pbuf_alloc+0x1e0>)
 80121ce:	483b      	ldr	r0, [pc, #236]	; (80122bc <pbuf_alloc+0x1dc>)
 80121d0:	f008 ff98 	bl	801b104 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80121d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d102      	bne.n	80121e0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	627b      	str	r3, [r7, #36]	; 0x24
 80121de:	e002      	b.n	80121e6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	693a      	ldr	r2, [r7, #16]
 80121e4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80121ea:	8b7a      	ldrh	r2, [r7, #26]
 80121ec:	89fb      	ldrh	r3, [r7, #14]
 80121ee:	1ad3      	subs	r3, r2, r3
 80121f0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80121f2:	2300      	movs	r3, #0
 80121f4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80121f6:	8b7b      	ldrh	r3, [r7, #26]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d19e      	bne.n	801213a <pbuf_alloc+0x5a>
      break;
 80121fc:	e055      	b.n	80122aa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80121fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012200:	3303      	adds	r3, #3
 8012202:	b29b      	uxth	r3, r3
 8012204:	f023 0303 	bic.w	r3, r3, #3
 8012208:	b29a      	uxth	r2, r3
 801220a:	88bb      	ldrh	r3, [r7, #4]
 801220c:	3303      	adds	r3, #3
 801220e:	b29b      	uxth	r3, r3
 8012210:	f023 0303 	bic.w	r3, r3, #3
 8012214:	b29b      	uxth	r3, r3
 8012216:	4413      	add	r3, r2
 8012218:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801221a:	8b3b      	ldrh	r3, [r7, #24]
 801221c:	3310      	adds	r3, #16
 801221e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012220:	8b3a      	ldrh	r2, [r7, #24]
 8012222:	88bb      	ldrh	r3, [r7, #4]
 8012224:	3303      	adds	r3, #3
 8012226:	f023 0303 	bic.w	r3, r3, #3
 801222a:	429a      	cmp	r2, r3
 801222c:	d306      	bcc.n	801223c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801222e:	8afa      	ldrh	r2, [r7, #22]
 8012230:	88bb      	ldrh	r3, [r7, #4]
 8012232:	3303      	adds	r3, #3
 8012234:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012238:	429a      	cmp	r2, r3
 801223a:	d201      	bcs.n	8012240 <pbuf_alloc+0x160>
        return NULL;
 801223c:	2300      	movs	r3, #0
 801223e:	e035      	b.n	80122ac <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012240:	8afb      	ldrh	r3, [r7, #22]
 8012242:	4618      	mov	r0, r3
 8012244:	f7ff fa20 	bl	8011688 <mem_malloc>
 8012248:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <pbuf_alloc+0x174>
        return NULL;
 8012250:	2300      	movs	r3, #0
 8012252:	e02b      	b.n	80122ac <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012256:	3310      	adds	r3, #16
 8012258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801225a:	4413      	add	r3, r2
 801225c:	3303      	adds	r3, #3
 801225e:	f023 0303 	bic.w	r3, r3, #3
 8012262:	4618      	mov	r0, r3
 8012264:	88b9      	ldrh	r1, [r7, #4]
 8012266:	88ba      	ldrh	r2, [r7, #4]
 8012268:	2300      	movs	r3, #0
 801226a:	9301      	str	r3, [sp, #4]
 801226c:	887b      	ldrh	r3, [r7, #2]
 801226e:	9300      	str	r3, [sp, #0]
 8012270:	460b      	mov	r3, r1
 8012272:	4601      	mov	r1, r0
 8012274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012276:	f7ff ff09 	bl	801208c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	f003 0303 	and.w	r3, r3, #3
 8012282:	2b00      	cmp	r3, #0
 8012284:	d010      	beq.n	80122a8 <pbuf_alloc+0x1c8>
 8012286:	4b0b      	ldr	r3, [pc, #44]	; (80122b4 <pbuf_alloc+0x1d4>)
 8012288:	f44f 7291 	mov.w	r2, #290	; 0x122
 801228c:	490d      	ldr	r1, [pc, #52]	; (80122c4 <pbuf_alloc+0x1e4>)
 801228e:	480b      	ldr	r0, [pc, #44]	; (80122bc <pbuf_alloc+0x1dc>)
 8012290:	f008 ff38 	bl	801b104 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012294:	e008      	b.n	80122a8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012296:	4b07      	ldr	r3, [pc, #28]	; (80122b4 <pbuf_alloc+0x1d4>)
 8012298:	f240 1227 	movw	r2, #295	; 0x127
 801229c:	490a      	ldr	r1, [pc, #40]	; (80122c8 <pbuf_alloc+0x1e8>)
 801229e:	4807      	ldr	r0, [pc, #28]	; (80122bc <pbuf_alloc+0x1dc>)
 80122a0:	f008 ff30 	bl	801b104 <iprintf>
      return NULL;
 80122a4:	2300      	movs	r3, #0
 80122a6:	e001      	b.n	80122ac <pbuf_alloc+0x1cc>
      break;
 80122a8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80122aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3728      	adds	r7, #40	; 0x28
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	0801fba0 	.word	0x0801fba0
 80122b8:	0801fbfc 	.word	0x0801fbfc
 80122bc:	0801fc2c 	.word	0x0801fc2c
 80122c0:	0801fc54 	.word	0x0801fc54
 80122c4:	0801fc88 	.word	0x0801fc88
 80122c8:	0801fcb4 	.word	0x0801fcb4

080122cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b086      	sub	sp, #24
 80122d0:	af02      	add	r7, sp, #8
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	460b      	mov	r3, r1
 80122d6:	807b      	strh	r3, [r7, #2]
 80122d8:	4613      	mov	r3, r2
 80122da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80122dc:	883b      	ldrh	r3, [r7, #0]
 80122de:	2b41      	cmp	r3, #65	; 0x41
 80122e0:	d009      	beq.n	80122f6 <pbuf_alloc_reference+0x2a>
 80122e2:	883b      	ldrh	r3, [r7, #0]
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d006      	beq.n	80122f6 <pbuf_alloc_reference+0x2a>
 80122e8:	4b0f      	ldr	r3, [pc, #60]	; (8012328 <pbuf_alloc_reference+0x5c>)
 80122ea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80122ee:	490f      	ldr	r1, [pc, #60]	; (801232c <pbuf_alloc_reference+0x60>)
 80122f0:	480f      	ldr	r0, [pc, #60]	; (8012330 <pbuf_alloc_reference+0x64>)
 80122f2:	f008 ff07 	bl	801b104 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80122f6:	2007      	movs	r0, #7
 80122f8:	f7ff fb34 	bl	8011964 <memp_malloc>
 80122fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d101      	bne.n	8012308 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012304:	2300      	movs	r3, #0
 8012306:	e00b      	b.n	8012320 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012308:	8879      	ldrh	r1, [r7, #2]
 801230a:	887a      	ldrh	r2, [r7, #2]
 801230c:	2300      	movs	r3, #0
 801230e:	9301      	str	r3, [sp, #4]
 8012310:	883b      	ldrh	r3, [r7, #0]
 8012312:	9300      	str	r3, [sp, #0]
 8012314:	460b      	mov	r3, r1
 8012316:	6879      	ldr	r1, [r7, #4]
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f7ff feb7 	bl	801208c <pbuf_init_alloced_pbuf>
  return p;
 801231e:	68fb      	ldr	r3, [r7, #12]
}
 8012320:	4618      	mov	r0, r3
 8012322:	3710      	adds	r7, #16
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}
 8012328:	0801fba0 	.word	0x0801fba0
 801232c:	0801fcd0 	.word	0x0801fcd0
 8012330:	0801fc2c 	.word	0x0801fc2c

08012334 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b088      	sub	sp, #32
 8012338:	af02      	add	r7, sp, #8
 801233a:	607b      	str	r3, [r7, #4]
 801233c:	4603      	mov	r3, r0
 801233e:	73fb      	strb	r3, [r7, #15]
 8012340:	460b      	mov	r3, r1
 8012342:	81bb      	strh	r3, [r7, #12]
 8012344:	4613      	mov	r3, r2
 8012346:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012348:	7bfb      	ldrb	r3, [r7, #15]
 801234a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801234c:	8a7b      	ldrh	r3, [r7, #18]
 801234e:	3303      	adds	r3, #3
 8012350:	f023 0203 	bic.w	r2, r3, #3
 8012354:	89bb      	ldrh	r3, [r7, #12]
 8012356:	441a      	add	r2, r3
 8012358:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801235a:	429a      	cmp	r2, r3
 801235c:	d901      	bls.n	8012362 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801235e:	2300      	movs	r3, #0
 8012360:	e018      	b.n	8012394 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012362:	6a3b      	ldr	r3, [r7, #32]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d007      	beq.n	8012378 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012368:	8a7b      	ldrh	r3, [r7, #18]
 801236a:	3303      	adds	r3, #3
 801236c:	f023 0303 	bic.w	r3, r3, #3
 8012370:	6a3a      	ldr	r2, [r7, #32]
 8012372:	4413      	add	r3, r2
 8012374:	617b      	str	r3, [r7, #20]
 8012376:	e001      	b.n	801237c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012378:	2300      	movs	r3, #0
 801237a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	89b9      	ldrh	r1, [r7, #12]
 8012380:	89ba      	ldrh	r2, [r7, #12]
 8012382:	2302      	movs	r3, #2
 8012384:	9301      	str	r3, [sp, #4]
 8012386:	897b      	ldrh	r3, [r7, #10]
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	460b      	mov	r3, r1
 801238c:	6979      	ldr	r1, [r7, #20]
 801238e:	f7ff fe7d 	bl	801208c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012392:	687b      	ldr	r3, [r7, #4]
}
 8012394:	4618      	mov	r0, r3
 8012396:	3718      	adds	r7, #24
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	460b      	mov	r3, r1
 80123a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d106      	bne.n	80123bc <pbuf_realloc+0x20>
 80123ae:	4b3a      	ldr	r3, [pc, #232]	; (8012498 <pbuf_realloc+0xfc>)
 80123b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80123b4:	4939      	ldr	r1, [pc, #228]	; (801249c <pbuf_realloc+0x100>)
 80123b6:	483a      	ldr	r0, [pc, #232]	; (80124a0 <pbuf_realloc+0x104>)
 80123b8:	f008 fea4 	bl	801b104 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	891b      	ldrh	r3, [r3, #8]
 80123c0:	887a      	ldrh	r2, [r7, #2]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	d263      	bcs.n	801248e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	891a      	ldrh	r2, [r3, #8]
 80123ca:	887b      	ldrh	r3, [r7, #2]
 80123cc:	1ad3      	subs	r3, r2, r3
 80123ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80123d0:	887b      	ldrh	r3, [r7, #2]
 80123d2:	817b      	strh	r3, [r7, #10]
  q = p;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80123d8:	e018      	b.n	801240c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	895b      	ldrh	r3, [r3, #10]
 80123de:	897a      	ldrh	r2, [r7, #10]
 80123e0:	1ad3      	subs	r3, r2, r3
 80123e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	891a      	ldrh	r2, [r3, #8]
 80123e8:	893b      	ldrh	r3, [r7, #8]
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d106      	bne.n	801240c <pbuf_realloc+0x70>
 80123fe:	4b26      	ldr	r3, [pc, #152]	; (8012498 <pbuf_realloc+0xfc>)
 8012400:	f240 12af 	movw	r2, #431	; 0x1af
 8012404:	4927      	ldr	r1, [pc, #156]	; (80124a4 <pbuf_realloc+0x108>)
 8012406:	4826      	ldr	r0, [pc, #152]	; (80124a0 <pbuf_realloc+0x104>)
 8012408:	f008 fe7c 	bl	801b104 <iprintf>
  while (rem_len > q->len) {
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	895b      	ldrh	r3, [r3, #10]
 8012410:	897a      	ldrh	r2, [r7, #10]
 8012412:	429a      	cmp	r2, r3
 8012414:	d8e1      	bhi.n	80123da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	7b1b      	ldrb	r3, [r3, #12]
 801241a:	f003 030f 	and.w	r3, r3, #15
 801241e:	2b00      	cmp	r3, #0
 8012420:	d121      	bne.n	8012466 <pbuf_realloc+0xca>
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	895b      	ldrh	r3, [r3, #10]
 8012426:	897a      	ldrh	r2, [r7, #10]
 8012428:	429a      	cmp	r2, r3
 801242a:	d01c      	beq.n	8012466 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	7b5b      	ldrb	r3, [r3, #13]
 8012430:	f003 0302 	and.w	r3, r3, #2
 8012434:	2b00      	cmp	r3, #0
 8012436:	d116      	bne.n	8012466 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	685a      	ldr	r2, [r3, #4]
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	1ad3      	subs	r3, r2, r3
 8012440:	b29a      	uxth	r2, r3
 8012442:	897b      	ldrh	r3, [r7, #10]
 8012444:	4413      	add	r3, r2
 8012446:	b29b      	uxth	r3, r3
 8012448:	4619      	mov	r1, r3
 801244a:	68f8      	ldr	r0, [r7, #12]
 801244c:	f7ff f820 	bl	8011490 <mem_trim>
 8012450:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d106      	bne.n	8012466 <pbuf_realloc+0xca>
 8012458:	4b0f      	ldr	r3, [pc, #60]	; (8012498 <pbuf_realloc+0xfc>)
 801245a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801245e:	4912      	ldr	r1, [pc, #72]	; (80124a8 <pbuf_realloc+0x10c>)
 8012460:	480f      	ldr	r0, [pc, #60]	; (80124a0 <pbuf_realloc+0x104>)
 8012462:	f008 fe4f 	bl	801b104 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	897a      	ldrh	r2, [r7, #10]
 801246a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	895a      	ldrh	r2, [r3, #10]
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d004      	beq.n	8012486 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4618      	mov	r0, r3
 8012482:	f000 f911 	bl	80126a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2200      	movs	r2, #0
 801248a:	601a      	str	r2, [r3, #0]
 801248c:	e000      	b.n	8012490 <pbuf_realloc+0xf4>
    return;
 801248e:	bf00      	nop

}
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	0801fba0 	.word	0x0801fba0
 801249c:	0801fce4 	.word	0x0801fce4
 80124a0:	0801fc2c 	.word	0x0801fc2c
 80124a4:	0801fcfc 	.word	0x0801fcfc
 80124a8:	0801fd14 	.word	0x0801fd14

080124ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b086      	sub	sp, #24
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	4613      	mov	r3, r2
 80124b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d106      	bne.n	80124ce <pbuf_add_header_impl+0x22>
 80124c0:	4b2b      	ldr	r3, [pc, #172]	; (8012570 <pbuf_add_header_impl+0xc4>)
 80124c2:	f240 12df 	movw	r2, #479	; 0x1df
 80124c6:	492b      	ldr	r1, [pc, #172]	; (8012574 <pbuf_add_header_impl+0xc8>)
 80124c8:	482b      	ldr	r0, [pc, #172]	; (8012578 <pbuf_add_header_impl+0xcc>)
 80124ca:	f008 fe1b 	bl	801b104 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d003      	beq.n	80124dc <pbuf_add_header_impl+0x30>
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80124da:	d301      	bcc.n	80124e0 <pbuf_add_header_impl+0x34>
    return 1;
 80124dc:	2301      	movs	r3, #1
 80124de:	e043      	b.n	8012568 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d101      	bne.n	80124ea <pbuf_add_header_impl+0x3e>
    return 0;
 80124e6:	2300      	movs	r3, #0
 80124e8:	e03e      	b.n	8012568 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	891a      	ldrh	r2, [r3, #8]
 80124f2:	8a7b      	ldrh	r3, [r7, #18]
 80124f4:	4413      	add	r3, r2
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	8a7a      	ldrh	r2, [r7, #18]
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d901      	bls.n	8012502 <pbuf_add_header_impl+0x56>
    return 1;
 80124fe:	2301      	movs	r3, #1
 8012500:	e032      	b.n	8012568 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	7b1b      	ldrb	r3, [r3, #12]
 8012506:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012508:	8a3b      	ldrh	r3, [r7, #16]
 801250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801250e:	2b00      	cmp	r3, #0
 8012510:	d00c      	beq.n	801252c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	685a      	ldr	r2, [r3, #4]
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	425b      	negs	r3, r3
 801251a:	4413      	add	r3, r2
 801251c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	3310      	adds	r3, #16
 8012522:	697a      	ldr	r2, [r7, #20]
 8012524:	429a      	cmp	r2, r3
 8012526:	d20d      	bcs.n	8012544 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012528:	2301      	movs	r3, #1
 801252a:	e01d      	b.n	8012568 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801252c:	79fb      	ldrb	r3, [r7, #7]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d006      	beq.n	8012540 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	685a      	ldr	r2, [r3, #4]
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	425b      	negs	r3, r3
 801253a:	4413      	add	r3, r2
 801253c:	617b      	str	r3, [r7, #20]
 801253e:	e001      	b.n	8012544 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012540:	2301      	movs	r3, #1
 8012542:	e011      	b.n	8012568 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	697a      	ldr	r2, [r7, #20]
 8012548:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	895a      	ldrh	r2, [r3, #10]
 801254e:	8a7b      	ldrh	r3, [r7, #18]
 8012550:	4413      	add	r3, r2
 8012552:	b29a      	uxth	r2, r3
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	891a      	ldrh	r2, [r3, #8]
 801255c:	8a7b      	ldrh	r3, [r7, #18]
 801255e:	4413      	add	r3, r2
 8012560:	b29a      	uxth	r2, r3
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	811a      	strh	r2, [r3, #8]


  return 0;
 8012566:	2300      	movs	r3, #0
}
 8012568:	4618      	mov	r0, r3
 801256a:	3718      	adds	r7, #24
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}
 8012570:	0801fba0 	.word	0x0801fba0
 8012574:	0801fd30 	.word	0x0801fd30
 8012578:	0801fc2c 	.word	0x0801fc2c

0801257c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012586:	2200      	movs	r2, #0
 8012588:	6839      	ldr	r1, [r7, #0]
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f7ff ff8e 	bl	80124ac <pbuf_add_header_impl>
 8012590:	4603      	mov	r3, r0
}
 8012592:	4618      	mov	r0, r3
 8012594:	3708      	adds	r7, #8
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}
	...

0801259c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d106      	bne.n	80125ba <pbuf_remove_header+0x1e>
 80125ac:	4b20      	ldr	r3, [pc, #128]	; (8012630 <pbuf_remove_header+0x94>)
 80125ae:	f240 224b 	movw	r2, #587	; 0x24b
 80125b2:	4920      	ldr	r1, [pc, #128]	; (8012634 <pbuf_remove_header+0x98>)
 80125b4:	4820      	ldr	r0, [pc, #128]	; (8012638 <pbuf_remove_header+0x9c>)
 80125b6:	f008 fda5 	bl	801b104 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d003      	beq.n	80125c8 <pbuf_remove_header+0x2c>
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125c6:	d301      	bcc.n	80125cc <pbuf_remove_header+0x30>
    return 1;
 80125c8:	2301      	movs	r3, #1
 80125ca:	e02c      	b.n	8012626 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d101      	bne.n	80125d6 <pbuf_remove_header+0x3a>
    return 0;
 80125d2:	2300      	movs	r3, #0
 80125d4:	e027      	b.n	8012626 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	895b      	ldrh	r3, [r3, #10]
 80125de:	89fa      	ldrh	r2, [r7, #14]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d908      	bls.n	80125f6 <pbuf_remove_header+0x5a>
 80125e4:	4b12      	ldr	r3, [pc, #72]	; (8012630 <pbuf_remove_header+0x94>)
 80125e6:	f240 2255 	movw	r2, #597	; 0x255
 80125ea:	4914      	ldr	r1, [pc, #80]	; (801263c <pbuf_remove_header+0xa0>)
 80125ec:	4812      	ldr	r0, [pc, #72]	; (8012638 <pbuf_remove_header+0x9c>)
 80125ee:	f008 fd89 	bl	801b104 <iprintf>
 80125f2:	2301      	movs	r3, #1
 80125f4:	e017      	b.n	8012626 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	685b      	ldr	r3, [r3, #4]
 80125fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	685a      	ldr	r2, [r3, #4]
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	441a      	add	r2, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	895a      	ldrh	r2, [r3, #10]
 801260c:	89fb      	ldrh	r3, [r7, #14]
 801260e:	1ad3      	subs	r3, r2, r3
 8012610:	b29a      	uxth	r2, r3
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	891a      	ldrh	r2, [r3, #8]
 801261a:	89fb      	ldrh	r3, [r7, #14]
 801261c:	1ad3      	subs	r3, r2, r3
 801261e:	b29a      	uxth	r2, r3
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012624:	2300      	movs	r3, #0
}
 8012626:	4618      	mov	r0, r3
 8012628:	3710      	adds	r7, #16
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	0801fba0 	.word	0x0801fba0
 8012634:	0801fd30 	.word	0x0801fd30
 8012638:	0801fc2c 	.word	0x0801fc2c
 801263c:	0801fd3c 	.word	0x0801fd3c

08012640 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	460b      	mov	r3, r1
 801264a:	807b      	strh	r3, [r7, #2]
 801264c:	4613      	mov	r3, r2
 801264e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012650:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012654:	2b00      	cmp	r3, #0
 8012656:	da08      	bge.n	801266a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012658:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801265c:	425b      	negs	r3, r3
 801265e:	4619      	mov	r1, r3
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7ff ff9b 	bl	801259c <pbuf_remove_header>
 8012666:	4603      	mov	r3, r0
 8012668:	e007      	b.n	801267a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801266a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801266e:	787a      	ldrb	r2, [r7, #1]
 8012670:	4619      	mov	r1, r3
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7ff ff1a 	bl	80124ac <pbuf_add_header_impl>
 8012678:	4603      	mov	r3, r0
  }
}
 801267a:	4618      	mov	r0, r3
 801267c:	3708      	adds	r7, #8
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b082      	sub	sp, #8
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
 801268a:	460b      	mov	r3, r1
 801268c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801268e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012692:	2201      	movs	r2, #1
 8012694:	4619      	mov	r1, r3
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f7ff ffd2 	bl	8012640 <pbuf_header_impl>
 801269c:	4603      	mov	r3, r0
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
	...

080126a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b086      	sub	sp, #24
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d10b      	bne.n	80126ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d106      	bne.n	80126ca <pbuf_free+0x22>
 80126bc:	4b38      	ldr	r3, [pc, #224]	; (80127a0 <pbuf_free+0xf8>)
 80126be:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80126c2:	4938      	ldr	r1, [pc, #224]	; (80127a4 <pbuf_free+0xfc>)
 80126c4:	4838      	ldr	r0, [pc, #224]	; (80127a8 <pbuf_free+0x100>)
 80126c6:	f008 fd1d 	bl	801b104 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80126ca:	2300      	movs	r3, #0
 80126cc:	e063      	b.n	8012796 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80126ce:	2300      	movs	r3, #0
 80126d0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80126d2:	e05c      	b.n	801278e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	7b9b      	ldrb	r3, [r3, #14]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d106      	bne.n	80126ea <pbuf_free+0x42>
 80126dc:	4b30      	ldr	r3, [pc, #192]	; (80127a0 <pbuf_free+0xf8>)
 80126de:	f240 22f1 	movw	r2, #753	; 0x2f1
 80126e2:	4932      	ldr	r1, [pc, #200]	; (80127ac <pbuf_free+0x104>)
 80126e4:	4830      	ldr	r0, [pc, #192]	; (80127a8 <pbuf_free+0x100>)
 80126e6:	f008 fd0d 	bl	801b104 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	7b9b      	ldrb	r3, [r3, #14]
 80126ee:	3b01      	subs	r3, #1
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	739a      	strb	r2, [r3, #14]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	7b9b      	ldrb	r3, [r3, #14]
 80126fa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80126fc:	7dbb      	ldrb	r3, [r7, #22]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d143      	bne.n	801278a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	7b1b      	ldrb	r3, [r3, #12]
 801270c:	f003 030f 	and.w	r3, r3, #15
 8012710:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	7b5b      	ldrb	r3, [r3, #13]
 8012716:	f003 0302 	and.w	r3, r3, #2
 801271a:	2b00      	cmp	r3, #0
 801271c:	d011      	beq.n	8012742 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	691b      	ldr	r3, [r3, #16]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d106      	bne.n	8012738 <pbuf_free+0x90>
 801272a:	4b1d      	ldr	r3, [pc, #116]	; (80127a0 <pbuf_free+0xf8>)
 801272c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012730:	491f      	ldr	r1, [pc, #124]	; (80127b0 <pbuf_free+0x108>)
 8012732:	481d      	ldr	r0, [pc, #116]	; (80127a8 <pbuf_free+0x100>)
 8012734:	f008 fce6 	bl	801b104 <iprintf>
        pc->custom_free_function(p);
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	691b      	ldr	r3, [r3, #16]
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	4798      	blx	r3
 8012740:	e01d      	b.n	801277e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012742:	7bfb      	ldrb	r3, [r7, #15]
 8012744:	2b02      	cmp	r3, #2
 8012746:	d104      	bne.n	8012752 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8012748:	6879      	ldr	r1, [r7, #4]
 801274a:	2008      	movs	r0, #8
 801274c:	f7ff f956 	bl	80119fc <memp_free>
 8012750:	e015      	b.n	801277e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012752:	7bfb      	ldrb	r3, [r7, #15]
 8012754:	2b01      	cmp	r3, #1
 8012756:	d104      	bne.n	8012762 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8012758:	6879      	ldr	r1, [r7, #4]
 801275a:	2007      	movs	r0, #7
 801275c:	f7ff f94e 	bl	80119fc <memp_free>
 8012760:	e00d      	b.n	801277e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012762:	7bfb      	ldrb	r3, [r7, #15]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d103      	bne.n	8012770 <pbuf_free+0xc8>
          mem_free(p);
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7fe fe27 	bl	80113bc <mem_free>
 801276e:	e006      	b.n	801277e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012770:	4b0b      	ldr	r3, [pc, #44]	; (80127a0 <pbuf_free+0xf8>)
 8012772:	f240 320f 	movw	r2, #783	; 0x30f
 8012776:	490f      	ldr	r1, [pc, #60]	; (80127b4 <pbuf_free+0x10c>)
 8012778:	480b      	ldr	r0, [pc, #44]	; (80127a8 <pbuf_free+0x100>)
 801277a:	f008 fcc3 	bl	801b104 <iprintf>
        }
      }
      count++;
 801277e:	7dfb      	ldrb	r3, [r7, #23]
 8012780:	3301      	adds	r3, #1
 8012782:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	607b      	str	r3, [r7, #4]
 8012788:	e001      	b.n	801278e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801278a:	2300      	movs	r3, #0
 801278c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d19f      	bne.n	80126d4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012794:	7dfb      	ldrb	r3, [r7, #23]
}
 8012796:	4618      	mov	r0, r3
 8012798:	3718      	adds	r7, #24
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	0801fba0 	.word	0x0801fba0
 80127a4:	0801fd30 	.word	0x0801fd30
 80127a8:	0801fc2c 	.word	0x0801fc2c
 80127ac:	0801fd5c 	.word	0x0801fd5c
 80127b0:	0801fd74 	.word	0x0801fd74
 80127b4:	0801fd98 	.word	0x0801fd98

080127b8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b085      	sub	sp, #20
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80127c0:	2300      	movs	r3, #0
 80127c2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80127c4:	e005      	b.n	80127d2 <pbuf_clen+0x1a>
    ++len;
 80127c6:	89fb      	ldrh	r3, [r7, #14]
 80127c8:	3301      	adds	r3, #1
 80127ca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d1f6      	bne.n	80127c6 <pbuf_clen+0xe>
  }
  return len;
 80127d8:	89fb      	ldrh	r3, [r7, #14]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3714      	adds	r7, #20
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr
	...

080127e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d010      	beq.n	8012818 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	7b9b      	ldrb	r3, [r3, #14]
 80127fa:	3301      	adds	r3, #1
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	7b9b      	ldrb	r3, [r3, #14]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d106      	bne.n	8012818 <pbuf_ref+0x30>
 801280a:	4b05      	ldr	r3, [pc, #20]	; (8012820 <pbuf_ref+0x38>)
 801280c:	f240 3242 	movw	r2, #834	; 0x342
 8012810:	4904      	ldr	r1, [pc, #16]	; (8012824 <pbuf_ref+0x3c>)
 8012812:	4805      	ldr	r0, [pc, #20]	; (8012828 <pbuf_ref+0x40>)
 8012814:	f008 fc76 	bl	801b104 <iprintf>
  }
}
 8012818:	bf00      	nop
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}
 8012820:	0801fba0 	.word	0x0801fba0
 8012824:	0801fdac 	.word	0x0801fdac
 8012828:	0801fc2c 	.word	0x0801fc2c

0801282c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d002      	beq.n	8012842 <pbuf_cat+0x16>
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d107      	bne.n	8012852 <pbuf_cat+0x26>
 8012842:	4b20      	ldr	r3, [pc, #128]	; (80128c4 <pbuf_cat+0x98>)
 8012844:	f240 3259 	movw	r2, #857	; 0x359
 8012848:	491f      	ldr	r1, [pc, #124]	; (80128c8 <pbuf_cat+0x9c>)
 801284a:	4820      	ldr	r0, [pc, #128]	; (80128cc <pbuf_cat+0xa0>)
 801284c:	f008 fc5a 	bl	801b104 <iprintf>
 8012850:	e034      	b.n	80128bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	60fb      	str	r3, [r7, #12]
 8012856:	e00a      	b.n	801286e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	891a      	ldrh	r2, [r3, #8]
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	891b      	ldrh	r3, [r3, #8]
 8012860:	4413      	add	r3, r2
 8012862:	b29a      	uxth	r2, r3
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	60fb      	str	r3, [r7, #12]
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1f0      	bne.n	8012858 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	891a      	ldrh	r2, [r3, #8]
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	895b      	ldrh	r3, [r3, #10]
 801287e:	429a      	cmp	r2, r3
 8012880:	d006      	beq.n	8012890 <pbuf_cat+0x64>
 8012882:	4b10      	ldr	r3, [pc, #64]	; (80128c4 <pbuf_cat+0x98>)
 8012884:	f240 3262 	movw	r2, #866	; 0x362
 8012888:	4911      	ldr	r1, [pc, #68]	; (80128d0 <pbuf_cat+0xa4>)
 801288a:	4810      	ldr	r0, [pc, #64]	; (80128cc <pbuf_cat+0xa0>)
 801288c:	f008 fc3a 	bl	801b104 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d006      	beq.n	80128a6 <pbuf_cat+0x7a>
 8012898:	4b0a      	ldr	r3, [pc, #40]	; (80128c4 <pbuf_cat+0x98>)
 801289a:	f240 3263 	movw	r2, #867	; 0x363
 801289e:	490d      	ldr	r1, [pc, #52]	; (80128d4 <pbuf_cat+0xa8>)
 80128a0:	480a      	ldr	r0, [pc, #40]	; (80128cc <pbuf_cat+0xa0>)
 80128a2:	f008 fc2f 	bl	801b104 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	891a      	ldrh	r2, [r3, #8]
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	891b      	ldrh	r3, [r3, #8]
 80128ae:	4413      	add	r3, r2
 80128b0:	b29a      	uxth	r2, r3
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	683a      	ldr	r2, [r7, #0]
 80128ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80128bc:	3710      	adds	r7, #16
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	0801fba0 	.word	0x0801fba0
 80128c8:	0801fdc0 	.word	0x0801fdc0
 80128cc:	0801fc2c 	.word	0x0801fc2c
 80128d0:	0801fdf8 	.word	0x0801fdf8
 80128d4:	0801fe28 	.word	0x0801fe28

080128d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b086      	sub	sp, #24
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80128e2:	2300      	movs	r3, #0
 80128e4:	617b      	str	r3, [r7, #20]
 80128e6:	2300      	movs	r3, #0
 80128e8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d008      	beq.n	8012902 <pbuf_copy+0x2a>
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d005      	beq.n	8012902 <pbuf_copy+0x2a>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	891a      	ldrh	r2, [r3, #8]
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	891b      	ldrh	r3, [r3, #8]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d209      	bcs.n	8012916 <pbuf_copy+0x3e>
 8012902:	4b57      	ldr	r3, [pc, #348]	; (8012a60 <pbuf_copy+0x188>)
 8012904:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012908:	4956      	ldr	r1, [pc, #344]	; (8012a64 <pbuf_copy+0x18c>)
 801290a:	4857      	ldr	r0, [pc, #348]	; (8012a68 <pbuf_copy+0x190>)
 801290c:	f008 fbfa 	bl	801b104 <iprintf>
 8012910:	f06f 030f 	mvn.w	r3, #15
 8012914:	e09f      	b.n	8012a56 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	895b      	ldrh	r3, [r3, #10]
 801291a:	461a      	mov	r2, r3
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	1ad2      	subs	r2, r2, r3
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	895b      	ldrh	r3, [r3, #10]
 8012924:	4619      	mov	r1, r3
 8012926:	693b      	ldr	r3, [r7, #16]
 8012928:	1acb      	subs	r3, r1, r3
 801292a:	429a      	cmp	r2, r3
 801292c:	d306      	bcc.n	801293c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	895b      	ldrh	r3, [r3, #10]
 8012932:	461a      	mov	r2, r3
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	60fb      	str	r3, [r7, #12]
 801293a:	e005      	b.n	8012948 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	895b      	ldrh	r3, [r3, #10]
 8012940:	461a      	mov	r2, r3
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	1ad3      	subs	r3, r2, r3
 8012946:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	685a      	ldr	r2, [r3, #4]
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	18d0      	adds	r0, r2, r3
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	685a      	ldr	r2, [r3, #4]
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	4413      	add	r3, r2
 8012958:	68fa      	ldr	r2, [r7, #12]
 801295a:	4619      	mov	r1, r3
 801295c:	f007 fcb0 	bl	801a2c0 <memcpy>
    offset_to += len;
 8012960:	697a      	ldr	r2, [r7, #20]
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	4413      	add	r3, r2
 8012966:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012968:	693a      	ldr	r2, [r7, #16]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	4413      	add	r3, r2
 801296e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	895b      	ldrh	r3, [r3, #10]
 8012974:	461a      	mov	r2, r3
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	4293      	cmp	r3, r2
 801297a:	d906      	bls.n	801298a <pbuf_copy+0xb2>
 801297c:	4b38      	ldr	r3, [pc, #224]	; (8012a60 <pbuf_copy+0x188>)
 801297e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012982:	493a      	ldr	r1, [pc, #232]	; (8012a6c <pbuf_copy+0x194>)
 8012984:	4838      	ldr	r0, [pc, #224]	; (8012a68 <pbuf_copy+0x190>)
 8012986:	f008 fbbd 	bl	801b104 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	895b      	ldrh	r3, [r3, #10]
 801298e:	461a      	mov	r2, r3
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	4293      	cmp	r3, r2
 8012994:	d906      	bls.n	80129a4 <pbuf_copy+0xcc>
 8012996:	4b32      	ldr	r3, [pc, #200]	; (8012a60 <pbuf_copy+0x188>)
 8012998:	f240 32da 	movw	r2, #986	; 0x3da
 801299c:	4934      	ldr	r1, [pc, #208]	; (8012a70 <pbuf_copy+0x198>)
 801299e:	4832      	ldr	r0, [pc, #200]	; (8012a68 <pbuf_copy+0x190>)
 80129a0:	f008 fbb0 	bl	801b104 <iprintf>
    if (offset_from >= p_from->len) {
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	895b      	ldrh	r3, [r3, #10]
 80129a8:	461a      	mov	r2, r3
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d304      	bcc.n	80129ba <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80129b0:	2300      	movs	r3, #0
 80129b2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	895b      	ldrh	r3, [r3, #10]
 80129be:	461a      	mov	r2, r3
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d114      	bne.n	80129f0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d10c      	bne.n	80129f0 <pbuf_copy+0x118>
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d009      	beq.n	80129f0 <pbuf_copy+0x118>
 80129dc:	4b20      	ldr	r3, [pc, #128]	; (8012a60 <pbuf_copy+0x188>)
 80129de:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80129e2:	4924      	ldr	r1, [pc, #144]	; (8012a74 <pbuf_copy+0x19c>)
 80129e4:	4820      	ldr	r0, [pc, #128]	; (8012a68 <pbuf_copy+0x190>)
 80129e6:	f008 fb8d 	bl	801b104 <iprintf>
 80129ea:	f06f 030f 	mvn.w	r3, #15
 80129ee:	e032      	b.n	8012a56 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d013      	beq.n	8012a1e <pbuf_copy+0x146>
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	895a      	ldrh	r2, [r3, #10]
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	891b      	ldrh	r3, [r3, #8]
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d10d      	bne.n	8012a1e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d009      	beq.n	8012a1e <pbuf_copy+0x146>
 8012a0a:	4b15      	ldr	r3, [pc, #84]	; (8012a60 <pbuf_copy+0x188>)
 8012a0c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012a10:	4919      	ldr	r1, [pc, #100]	; (8012a78 <pbuf_copy+0x1a0>)
 8012a12:	4815      	ldr	r0, [pc, #84]	; (8012a68 <pbuf_copy+0x190>)
 8012a14:	f008 fb76 	bl	801b104 <iprintf>
 8012a18:	f06f 0305 	mvn.w	r3, #5
 8012a1c:	e01b      	b.n	8012a56 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d013      	beq.n	8012a4c <pbuf_copy+0x174>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	895a      	ldrh	r2, [r3, #10]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	891b      	ldrh	r3, [r3, #8]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d10d      	bne.n	8012a4c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d009      	beq.n	8012a4c <pbuf_copy+0x174>
 8012a38:	4b09      	ldr	r3, [pc, #36]	; (8012a60 <pbuf_copy+0x188>)
 8012a3a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012a3e:	490e      	ldr	r1, [pc, #56]	; (8012a78 <pbuf_copy+0x1a0>)
 8012a40:	4809      	ldr	r0, [pc, #36]	; (8012a68 <pbuf_copy+0x190>)
 8012a42:	f008 fb5f 	bl	801b104 <iprintf>
 8012a46:	f06f 0305 	mvn.w	r3, #5
 8012a4a:	e004      	b.n	8012a56 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f47f af61 	bne.w	8012916 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012a54:	2300      	movs	r3, #0
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3718      	adds	r7, #24
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	0801fba0 	.word	0x0801fba0
 8012a64:	0801fe74 	.word	0x0801fe74
 8012a68:	0801fc2c 	.word	0x0801fc2c
 8012a6c:	0801fea4 	.word	0x0801fea4
 8012a70:	0801febc 	.word	0x0801febc
 8012a74:	0801fed8 	.word	0x0801fed8
 8012a78:	0801fee8 	.word	0x0801fee8

08012a7c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b088      	sub	sp, #32
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	4611      	mov	r1, r2
 8012a88:	461a      	mov	r2, r3
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	80fb      	strh	r3, [r7, #6]
 8012a8e:	4613      	mov	r3, r2
 8012a90:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012a96:	2300      	movs	r3, #0
 8012a98:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d108      	bne.n	8012ab2 <pbuf_copy_partial+0x36>
 8012aa0:	4b2b      	ldr	r3, [pc, #172]	; (8012b50 <pbuf_copy_partial+0xd4>)
 8012aa2:	f240 420a 	movw	r2, #1034	; 0x40a
 8012aa6:	492b      	ldr	r1, [pc, #172]	; (8012b54 <pbuf_copy_partial+0xd8>)
 8012aa8:	482b      	ldr	r0, [pc, #172]	; (8012b58 <pbuf_copy_partial+0xdc>)
 8012aaa:	f008 fb2b 	bl	801b104 <iprintf>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	e04a      	b.n	8012b48 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d108      	bne.n	8012aca <pbuf_copy_partial+0x4e>
 8012ab8:	4b25      	ldr	r3, [pc, #148]	; (8012b50 <pbuf_copy_partial+0xd4>)
 8012aba:	f240 420b 	movw	r2, #1035	; 0x40b
 8012abe:	4927      	ldr	r1, [pc, #156]	; (8012b5c <pbuf_copy_partial+0xe0>)
 8012ac0:	4825      	ldr	r0, [pc, #148]	; (8012b58 <pbuf_copy_partial+0xdc>)
 8012ac2:	f008 fb1f 	bl	801b104 <iprintf>
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	e03e      	b.n	8012b48 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	61fb      	str	r3, [r7, #28]
 8012ace:	e034      	b.n	8012b3a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012ad0:	88bb      	ldrh	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d00a      	beq.n	8012aec <pbuf_copy_partial+0x70>
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	895b      	ldrh	r3, [r3, #10]
 8012ada:	88ba      	ldrh	r2, [r7, #4]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d305      	bcc.n	8012aec <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	895b      	ldrh	r3, [r3, #10]
 8012ae4:	88ba      	ldrh	r2, [r7, #4]
 8012ae6:	1ad3      	subs	r3, r2, r3
 8012ae8:	80bb      	strh	r3, [r7, #4]
 8012aea:	e023      	b.n	8012b34 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	895a      	ldrh	r2, [r3, #10]
 8012af0:	88bb      	ldrh	r3, [r7, #4]
 8012af2:	1ad3      	subs	r3, r2, r3
 8012af4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012af6:	8b3a      	ldrh	r2, [r7, #24]
 8012af8:	88fb      	ldrh	r3, [r7, #6]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d901      	bls.n	8012b02 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012afe:	88fb      	ldrh	r3, [r7, #6]
 8012b00:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012b02:	8b7b      	ldrh	r3, [r7, #26]
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	18d0      	adds	r0, r2, r3
 8012b08:	69fb      	ldr	r3, [r7, #28]
 8012b0a:	685a      	ldr	r2, [r3, #4]
 8012b0c:	88bb      	ldrh	r3, [r7, #4]
 8012b0e:	4413      	add	r3, r2
 8012b10:	8b3a      	ldrh	r2, [r7, #24]
 8012b12:	4619      	mov	r1, r3
 8012b14:	f007 fbd4 	bl	801a2c0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012b18:	8afa      	ldrh	r2, [r7, #22]
 8012b1a:	8b3b      	ldrh	r3, [r7, #24]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012b20:	8b7a      	ldrh	r2, [r7, #26]
 8012b22:	8b3b      	ldrh	r3, [r7, #24]
 8012b24:	4413      	add	r3, r2
 8012b26:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012b28:	88fa      	ldrh	r2, [r7, #6]
 8012b2a:	8b3b      	ldrh	r3, [r7, #24]
 8012b2c:	1ad3      	subs	r3, r2, r3
 8012b2e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012b30:	2300      	movs	r3, #0
 8012b32:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	61fb      	str	r3, [r7, #28]
 8012b3a:	88fb      	ldrh	r3, [r7, #6]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d002      	beq.n	8012b46 <pbuf_copy_partial+0xca>
 8012b40:	69fb      	ldr	r3, [r7, #28]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1c4      	bne.n	8012ad0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012b46:	8afb      	ldrh	r3, [r7, #22]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3720      	adds	r7, #32
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	0801fba0 	.word	0x0801fba0
 8012b54:	0801ff14 	.word	0x0801ff14
 8012b58:	0801fc2c 	.word	0x0801fc2c
 8012b5c:	0801ff34 	.word	0x0801ff34

08012b60 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	4603      	mov	r3, r0
 8012b68:	603a      	str	r2, [r7, #0]
 8012b6a:	71fb      	strb	r3, [r7, #7]
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	8919      	ldrh	r1, [r3, #8]
 8012b74:	88ba      	ldrh	r2, [r7, #4]
 8012b76:	79fb      	ldrb	r3, [r7, #7]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7ff fab1 	bl	80120e0 <pbuf_alloc>
 8012b7e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d101      	bne.n	8012b8a <pbuf_clone+0x2a>
    return NULL;
 8012b86:	2300      	movs	r3, #0
 8012b88:	e011      	b.n	8012bae <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012b8a:	6839      	ldr	r1, [r7, #0]
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f7ff fea3 	bl	80128d8 <pbuf_copy>
 8012b92:	4603      	mov	r3, r0
 8012b94:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012b96:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d006      	beq.n	8012bac <pbuf_clone+0x4c>
 8012b9e:	4b06      	ldr	r3, [pc, #24]	; (8012bb8 <pbuf_clone+0x58>)
 8012ba0:	f240 5224 	movw	r2, #1316	; 0x524
 8012ba4:	4905      	ldr	r1, [pc, #20]	; (8012bbc <pbuf_clone+0x5c>)
 8012ba6:	4806      	ldr	r0, [pc, #24]	; (8012bc0 <pbuf_clone+0x60>)
 8012ba8:	f008 faac 	bl	801b104 <iprintf>
  return q;
 8012bac:	68fb      	ldr	r3, [r7, #12]
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3710      	adds	r7, #16
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}
 8012bb6:	bf00      	nop
 8012bb8:	0801fba0 	.word	0x0801fba0
 8012bbc:	08020040 	.word	0x08020040
 8012bc0:	0801fc2c 	.word	0x0801fc2c

08012bc4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012bc8:	f008 fab4 	bl	801b134 <rand>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012bda:	b29a      	uxth	r2, r3
 8012bdc:	4b01      	ldr	r3, [pc, #4]	; (8012be4 <tcp_init+0x20>)
 8012bde:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012be0:	bf00      	nop
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	24000424 	.word	0x24000424

08012be8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	7d1b      	ldrb	r3, [r3, #20]
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	d105      	bne.n	8012c04 <tcp_free+0x1c>
 8012bf8:	4b06      	ldr	r3, [pc, #24]	; (8012c14 <tcp_free+0x2c>)
 8012bfa:	22d4      	movs	r2, #212	; 0xd4
 8012bfc:	4906      	ldr	r1, [pc, #24]	; (8012c18 <tcp_free+0x30>)
 8012bfe:	4807      	ldr	r0, [pc, #28]	; (8012c1c <tcp_free+0x34>)
 8012c00:	f008 fa80 	bl	801b104 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012c04:	6879      	ldr	r1, [r7, #4]
 8012c06:	2001      	movs	r0, #1
 8012c08:	f7fe fef8 	bl	80119fc <memp_free>
}
 8012c0c:	bf00      	nop
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	080200cc 	.word	0x080200cc
 8012c18:	08020128 	.word	0x08020128
 8012c1c:	0802013c 	.word	0x0802013c

08012c20 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	7d1b      	ldrb	r3, [r3, #20]
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d105      	bne.n	8012c3c <tcp_free_listen+0x1c>
 8012c30:	4b06      	ldr	r3, [pc, #24]	; (8012c4c <tcp_free_listen+0x2c>)
 8012c32:	22df      	movs	r2, #223	; 0xdf
 8012c34:	4906      	ldr	r1, [pc, #24]	; (8012c50 <tcp_free_listen+0x30>)
 8012c36:	4807      	ldr	r0, [pc, #28]	; (8012c54 <tcp_free_listen+0x34>)
 8012c38:	f008 fa64 	bl	801b104 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012c3c:	6879      	ldr	r1, [r7, #4]
 8012c3e:	2002      	movs	r0, #2
 8012c40:	f7fe fedc 	bl	80119fc <memp_free>
}
 8012c44:	bf00      	nop
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	080200cc 	.word	0x080200cc
 8012c50:	08020164 	.word	0x08020164
 8012c54:	0802013c 	.word	0x0802013c

08012c58 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012c5c:	f000 fea2 	bl	80139a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012c60:	4b07      	ldr	r3, [pc, #28]	; (8012c80 <tcp_tmr+0x28>)
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	3301      	adds	r3, #1
 8012c66:	b2da      	uxtb	r2, r3
 8012c68:	4b05      	ldr	r3, [pc, #20]	; (8012c80 <tcp_tmr+0x28>)
 8012c6a:	701a      	strb	r2, [r3, #0]
 8012c6c:	4b04      	ldr	r3, [pc, #16]	; (8012c80 <tcp_tmr+0x28>)
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	f003 0301 	and.w	r3, r3, #1
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012c78:	f000 fb54 	bl	8013324 <tcp_slowtmr>
  }
}
 8012c7c:	bf00      	nop
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	24000765 	.word	0x24000765

08012c84 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d105      	bne.n	8012ca0 <tcp_remove_listener+0x1c>
 8012c94:	4b0d      	ldr	r3, [pc, #52]	; (8012ccc <tcp_remove_listener+0x48>)
 8012c96:	22ff      	movs	r2, #255	; 0xff
 8012c98:	490d      	ldr	r1, [pc, #52]	; (8012cd0 <tcp_remove_listener+0x4c>)
 8012c9a:	480e      	ldr	r0, [pc, #56]	; (8012cd4 <tcp_remove_listener+0x50>)
 8012c9c:	f008 fa32 	bl	801b104 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	60fb      	str	r3, [r7, #12]
 8012ca4:	e00a      	b.n	8012cbc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012caa:	683a      	ldr	r2, [r7, #0]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d102      	bne.n	8012cb6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	68db      	ldr	r3, [r3, #12]
 8012cba:	60fb      	str	r3, [r7, #12]
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d1f1      	bne.n	8012ca6 <tcp_remove_listener+0x22>
    }
  }
}
 8012cc2:	bf00      	nop
 8012cc4:	bf00      	nop
 8012cc6:	3710      	adds	r7, #16
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	080200cc 	.word	0x080200cc
 8012cd0:	08020180 	.word	0x08020180
 8012cd4:	0802013c 	.word	0x0802013c

08012cd8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b084      	sub	sp, #16
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d106      	bne.n	8012cf4 <tcp_listen_closed+0x1c>
 8012ce6:	4b14      	ldr	r3, [pc, #80]	; (8012d38 <tcp_listen_closed+0x60>)
 8012ce8:	f240 1211 	movw	r2, #273	; 0x111
 8012cec:	4913      	ldr	r1, [pc, #76]	; (8012d3c <tcp_listen_closed+0x64>)
 8012cee:	4814      	ldr	r0, [pc, #80]	; (8012d40 <tcp_listen_closed+0x68>)
 8012cf0:	f008 fa08 	bl	801b104 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	7d1b      	ldrb	r3, [r3, #20]
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	d006      	beq.n	8012d0a <tcp_listen_closed+0x32>
 8012cfc:	4b0e      	ldr	r3, [pc, #56]	; (8012d38 <tcp_listen_closed+0x60>)
 8012cfe:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012d02:	4910      	ldr	r1, [pc, #64]	; (8012d44 <tcp_listen_closed+0x6c>)
 8012d04:	480e      	ldr	r0, [pc, #56]	; (8012d40 <tcp_listen_closed+0x68>)
 8012d06:	f008 f9fd 	bl	801b104 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	60fb      	str	r3, [r7, #12]
 8012d0e:	e00b      	b.n	8012d28 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012d10:	4a0d      	ldr	r2, [pc, #52]	; (8012d48 <tcp_listen_closed+0x70>)
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	6879      	ldr	r1, [r7, #4]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7ff ffb1 	bl	8012c84 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	3301      	adds	r3, #1
 8012d26:	60fb      	str	r3, [r7, #12]
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	2b03      	cmp	r3, #3
 8012d2c:	d9f0      	bls.n	8012d10 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012d2e:	bf00      	nop
 8012d30:	bf00      	nop
 8012d32:	3710      	adds	r7, #16
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	080200cc 	.word	0x080200cc
 8012d3c:	080201a8 	.word	0x080201a8
 8012d40:	0802013c 	.word	0x0802013c
 8012d44:	080201b4 	.word	0x080201b4
 8012d48:	08021b38 	.word	0x08021b38

08012d4c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012d4c:	b5b0      	push	{r4, r5, r7, lr}
 8012d4e:	b088      	sub	sp, #32
 8012d50:	af04      	add	r7, sp, #16
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	460b      	mov	r3, r1
 8012d56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d106      	bne.n	8012d6c <tcp_close_shutdown+0x20>
 8012d5e:	4b63      	ldr	r3, [pc, #396]	; (8012eec <tcp_close_shutdown+0x1a0>)
 8012d60:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012d64:	4962      	ldr	r1, [pc, #392]	; (8012ef0 <tcp_close_shutdown+0x1a4>)
 8012d66:	4863      	ldr	r0, [pc, #396]	; (8012ef4 <tcp_close_shutdown+0x1a8>)
 8012d68:	f008 f9cc 	bl	801b104 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012d6c:	78fb      	ldrb	r3, [r7, #3]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d066      	beq.n	8012e40 <tcp_close_shutdown+0xf4>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	7d1b      	ldrb	r3, [r3, #20]
 8012d76:	2b04      	cmp	r3, #4
 8012d78:	d003      	beq.n	8012d82 <tcp_close_shutdown+0x36>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	7d1b      	ldrb	r3, [r3, #20]
 8012d7e:	2b07      	cmp	r3, #7
 8012d80:	d15e      	bne.n	8012e40 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d104      	bne.n	8012d94 <tcp_close_shutdown+0x48>
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012d92:	d055      	beq.n	8012e40 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	8b5b      	ldrh	r3, [r3, #26]
 8012d98:	f003 0310 	and.w	r3, r3, #16
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d106      	bne.n	8012dae <tcp_close_shutdown+0x62>
 8012da0:	4b52      	ldr	r3, [pc, #328]	; (8012eec <tcp_close_shutdown+0x1a0>)
 8012da2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012da6:	4954      	ldr	r1, [pc, #336]	; (8012ef8 <tcp_close_shutdown+0x1ac>)
 8012da8:	4852      	ldr	r0, [pc, #328]	; (8012ef4 <tcp_close_shutdown+0x1a8>)
 8012daa:	f008 f9ab 	bl	801b104 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012db6:	687d      	ldr	r5, [r7, #4]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	3304      	adds	r3, #4
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	8ad2      	ldrh	r2, [r2, #22]
 8012dc0:	6879      	ldr	r1, [r7, #4]
 8012dc2:	8b09      	ldrh	r1, [r1, #24]
 8012dc4:	9102      	str	r1, [sp, #8]
 8012dc6:	9201      	str	r2, [sp, #4]
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	462b      	mov	r3, r5
 8012dcc:	4622      	mov	r2, r4
 8012dce:	4601      	mov	r1, r0
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f004 fe8d 	bl	8017af0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f001 f8c6 	bl	8013f68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012ddc:	4b47      	ldr	r3, [pc, #284]	; (8012efc <tcp_close_shutdown+0x1b0>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d105      	bne.n	8012df2 <tcp_close_shutdown+0xa6>
 8012de6:	4b45      	ldr	r3, [pc, #276]	; (8012efc <tcp_close_shutdown+0x1b0>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	4a43      	ldr	r2, [pc, #268]	; (8012efc <tcp_close_shutdown+0x1b0>)
 8012dee:	6013      	str	r3, [r2, #0]
 8012df0:	e013      	b.n	8012e1a <tcp_close_shutdown+0xce>
 8012df2:	4b42      	ldr	r3, [pc, #264]	; (8012efc <tcp_close_shutdown+0x1b0>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	60fb      	str	r3, [r7, #12]
 8012df8:	e00c      	b.n	8012e14 <tcp_close_shutdown+0xc8>
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d104      	bne.n	8012e0e <tcp_close_shutdown+0xc2>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	68da      	ldr	r2, [r3, #12]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	60da      	str	r2, [r3, #12]
 8012e0c:	e005      	b.n	8012e1a <tcp_close_shutdown+0xce>
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	60fb      	str	r3, [r7, #12]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d1ef      	bne.n	8012dfa <tcp_close_shutdown+0xae>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	60da      	str	r2, [r3, #12]
 8012e20:	4b37      	ldr	r3, [pc, #220]	; (8012f00 <tcp_close_shutdown+0x1b4>)
 8012e22:	2201      	movs	r2, #1
 8012e24:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012e26:	4b37      	ldr	r3, [pc, #220]	; (8012f04 <tcp_close_shutdown+0x1b8>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d102      	bne.n	8012e36 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012e30:	f003 fd5a 	bl	80168e8 <tcp_trigger_input_pcb_close>
 8012e34:	e002      	b.n	8012e3c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	f7ff fed6 	bl	8012be8 <tcp_free>
      }
      return ERR_OK;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	e050      	b.n	8012ee2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	7d1b      	ldrb	r3, [r3, #20]
 8012e44:	2b02      	cmp	r3, #2
 8012e46:	d03b      	beq.n	8012ec0 <tcp_close_shutdown+0x174>
 8012e48:	2b02      	cmp	r3, #2
 8012e4a:	dc44      	bgt.n	8012ed6 <tcp_close_shutdown+0x18a>
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d002      	beq.n	8012e56 <tcp_close_shutdown+0x10a>
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d02a      	beq.n	8012eaa <tcp_close_shutdown+0x15e>
 8012e54:	e03f      	b.n	8012ed6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	8adb      	ldrh	r3, [r3, #22]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d021      	beq.n	8012ea2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012e5e:	4b2a      	ldr	r3, [pc, #168]	; (8012f08 <tcp_close_shutdown+0x1bc>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	687a      	ldr	r2, [r7, #4]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d105      	bne.n	8012e74 <tcp_close_shutdown+0x128>
 8012e68:	4b27      	ldr	r3, [pc, #156]	; (8012f08 <tcp_close_shutdown+0x1bc>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	68db      	ldr	r3, [r3, #12]
 8012e6e:	4a26      	ldr	r2, [pc, #152]	; (8012f08 <tcp_close_shutdown+0x1bc>)
 8012e70:	6013      	str	r3, [r2, #0]
 8012e72:	e013      	b.n	8012e9c <tcp_close_shutdown+0x150>
 8012e74:	4b24      	ldr	r3, [pc, #144]	; (8012f08 <tcp_close_shutdown+0x1bc>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	60bb      	str	r3, [r7, #8]
 8012e7a:	e00c      	b.n	8012e96 <tcp_close_shutdown+0x14a>
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	687a      	ldr	r2, [r7, #4]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d104      	bne.n	8012e90 <tcp_close_shutdown+0x144>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	68da      	ldr	r2, [r3, #12]
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	60da      	str	r2, [r3, #12]
 8012e8e:	e005      	b.n	8012e9c <tcp_close_shutdown+0x150>
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	68db      	ldr	r3, [r3, #12]
 8012e94:	60bb      	str	r3, [r7, #8]
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d1ef      	bne.n	8012e7c <tcp_close_shutdown+0x130>
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7ff fea0 	bl	8012be8 <tcp_free>
      break;
 8012ea8:	e01a      	b.n	8012ee0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff ff14 	bl	8012cd8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012eb0:	6879      	ldr	r1, [r7, #4]
 8012eb2:	4816      	ldr	r0, [pc, #88]	; (8012f0c <tcp_close_shutdown+0x1c0>)
 8012eb4:	f001 f8a8 	bl	8014008 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7ff feb1 	bl	8012c20 <tcp_free_listen>
      break;
 8012ebe:	e00f      	b.n	8012ee0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012ec0:	6879      	ldr	r1, [r7, #4]
 8012ec2:	480e      	ldr	r0, [pc, #56]	; (8012efc <tcp_close_shutdown+0x1b0>)
 8012ec4:	f001 f8a0 	bl	8014008 <tcp_pcb_remove>
 8012ec8:	4b0d      	ldr	r3, [pc, #52]	; (8012f00 <tcp_close_shutdown+0x1b4>)
 8012eca:	2201      	movs	r2, #1
 8012ecc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f7ff fe8a 	bl	8012be8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012ed4:	e004      	b.n	8012ee0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f000 f81a 	bl	8012f10 <tcp_close_shutdown_fin>
 8012edc:	4603      	mov	r3, r0
 8012ede:	e000      	b.n	8012ee2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8012eea:	bf00      	nop
 8012eec:	080200cc 	.word	0x080200cc
 8012ef0:	080201cc 	.word	0x080201cc
 8012ef4:	0802013c 	.word	0x0802013c
 8012ef8:	080201ec 	.word	0x080201ec
 8012efc:	24003df0 	.word	0x24003df0
 8012f00:	24003dec 	.word	0x24003dec
 8012f04:	24003e04 	.word	0x24003e04
 8012f08:	24003dfc 	.word	0x24003dfc
 8012f0c:	24003df8 	.word	0x24003df8

08012f10 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d106      	bne.n	8012f2c <tcp_close_shutdown_fin+0x1c>
 8012f1e:	4b2e      	ldr	r3, [pc, #184]	; (8012fd8 <tcp_close_shutdown_fin+0xc8>)
 8012f20:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012f24:	492d      	ldr	r1, [pc, #180]	; (8012fdc <tcp_close_shutdown_fin+0xcc>)
 8012f26:	482e      	ldr	r0, [pc, #184]	; (8012fe0 <tcp_close_shutdown_fin+0xd0>)
 8012f28:	f008 f8ec 	bl	801b104 <iprintf>

  switch (pcb->state) {
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	7d1b      	ldrb	r3, [r3, #20]
 8012f30:	2b07      	cmp	r3, #7
 8012f32:	d020      	beq.n	8012f76 <tcp_close_shutdown_fin+0x66>
 8012f34:	2b07      	cmp	r3, #7
 8012f36:	dc2b      	bgt.n	8012f90 <tcp_close_shutdown_fin+0x80>
 8012f38:	2b03      	cmp	r3, #3
 8012f3a:	d002      	beq.n	8012f42 <tcp_close_shutdown_fin+0x32>
 8012f3c:	2b04      	cmp	r3, #4
 8012f3e:	d00d      	beq.n	8012f5c <tcp_close_shutdown_fin+0x4c>
 8012f40:	e026      	b.n	8012f90 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f003 fee2 	bl	8016d0c <tcp_send_fin>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d11f      	bne.n	8012f94 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2205      	movs	r2, #5
 8012f58:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012f5a:	e01b      	b.n	8012f94 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f003 fed5 	bl	8016d0c <tcp_send_fin>
 8012f62:	4603      	mov	r3, r0
 8012f64:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d114      	bne.n	8012f98 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2205      	movs	r2, #5
 8012f72:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012f74:	e010      	b.n	8012f98 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f003 fec8 	bl	8016d0c <tcp_send_fin>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d109      	bne.n	8012f9c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2209      	movs	r2, #9
 8012f8c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012f8e:	e005      	b.n	8012f9c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012f90:	2300      	movs	r3, #0
 8012f92:	e01c      	b.n	8012fce <tcp_close_shutdown_fin+0xbe>
      break;
 8012f94:	bf00      	nop
 8012f96:	e002      	b.n	8012f9e <tcp_close_shutdown_fin+0x8e>
      break;
 8012f98:	bf00      	nop
 8012f9a:	e000      	b.n	8012f9e <tcp_close_shutdown_fin+0x8e>
      break;
 8012f9c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d103      	bne.n	8012fae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f003 ffee 	bl	8016f88 <tcp_output>
 8012fac:	e00d      	b.n	8012fca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8012fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fb6:	d108      	bne.n	8012fca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	8b5b      	ldrh	r3, [r3, #26]
 8012fbc:	f043 0308 	orr.w	r3, r3, #8
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	e001      	b.n	8012fce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	080200cc 	.word	0x080200cc
 8012fdc:	080201a8 	.word	0x080201a8
 8012fe0:	0802013c 	.word	0x0802013c

08012fe4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d109      	bne.n	8013006 <tcp_close+0x22>
 8012ff2:	4b0f      	ldr	r3, [pc, #60]	; (8013030 <tcp_close+0x4c>)
 8012ff4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012ff8:	490e      	ldr	r1, [pc, #56]	; (8013034 <tcp_close+0x50>)
 8012ffa:	480f      	ldr	r0, [pc, #60]	; (8013038 <tcp_close+0x54>)
 8012ffc:	f008 f882 	bl	801b104 <iprintf>
 8013000:	f06f 030f 	mvn.w	r3, #15
 8013004:	e00f      	b.n	8013026 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	7d1b      	ldrb	r3, [r3, #20]
 801300a:	2b01      	cmp	r3, #1
 801300c:	d006      	beq.n	801301c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	8b5b      	ldrh	r3, [r3, #26]
 8013012:	f043 0310 	orr.w	r3, r3, #16
 8013016:	b29a      	uxth	r2, r3
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801301c:	2101      	movs	r1, #1
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7ff fe94 	bl	8012d4c <tcp_close_shutdown>
 8013024:	4603      	mov	r3, r0
}
 8013026:	4618      	mov	r0, r3
 8013028:	3708      	adds	r7, #8
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	080200cc 	.word	0x080200cc
 8013034:	08020208 	.word	0x08020208
 8013038:	0802013c 	.word	0x0802013c

0801303c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b08e      	sub	sp, #56	; 0x38
 8013040:	af04      	add	r7, sp, #16
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d107      	bne.n	801305c <tcp_abandon+0x20>
 801304c:	4b52      	ldr	r3, [pc, #328]	; (8013198 <tcp_abandon+0x15c>)
 801304e:	f240 223d 	movw	r2, #573	; 0x23d
 8013052:	4952      	ldr	r1, [pc, #328]	; (801319c <tcp_abandon+0x160>)
 8013054:	4852      	ldr	r0, [pc, #328]	; (80131a0 <tcp_abandon+0x164>)
 8013056:	f008 f855 	bl	801b104 <iprintf>
 801305a:	e099      	b.n	8013190 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	7d1b      	ldrb	r3, [r3, #20]
 8013060:	2b01      	cmp	r3, #1
 8013062:	d106      	bne.n	8013072 <tcp_abandon+0x36>
 8013064:	4b4c      	ldr	r3, [pc, #304]	; (8013198 <tcp_abandon+0x15c>)
 8013066:	f44f 7210 	mov.w	r2, #576	; 0x240
 801306a:	494e      	ldr	r1, [pc, #312]	; (80131a4 <tcp_abandon+0x168>)
 801306c:	484c      	ldr	r0, [pc, #304]	; (80131a0 <tcp_abandon+0x164>)
 801306e:	f008 f849 	bl	801b104 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	7d1b      	ldrb	r3, [r3, #20]
 8013076:	2b0a      	cmp	r3, #10
 8013078:	d107      	bne.n	801308a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801307a:	6879      	ldr	r1, [r7, #4]
 801307c:	484a      	ldr	r0, [pc, #296]	; (80131a8 <tcp_abandon+0x16c>)
 801307e:	f000 ffc3 	bl	8014008 <tcp_pcb_remove>
    tcp_free(pcb);
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f7ff fdb0 	bl	8012be8 <tcp_free>
 8013088:	e082      	b.n	8013190 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801308a:	2300      	movs	r3, #0
 801308c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801308e:	2300      	movs	r3, #0
 8013090:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013096:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801309c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130a4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	691b      	ldr	r3, [r3, #16]
 80130aa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	7d1b      	ldrb	r3, [r3, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d126      	bne.n	8013102 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	8adb      	ldrh	r3, [r3, #22]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d02e      	beq.n	801311a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80130bc:	4b3b      	ldr	r3, [pc, #236]	; (80131ac <tcp_abandon+0x170>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	687a      	ldr	r2, [r7, #4]
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d105      	bne.n	80130d2 <tcp_abandon+0x96>
 80130c6:	4b39      	ldr	r3, [pc, #228]	; (80131ac <tcp_abandon+0x170>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	68db      	ldr	r3, [r3, #12]
 80130cc:	4a37      	ldr	r2, [pc, #220]	; (80131ac <tcp_abandon+0x170>)
 80130ce:	6013      	str	r3, [r2, #0]
 80130d0:	e013      	b.n	80130fa <tcp_abandon+0xbe>
 80130d2:	4b36      	ldr	r3, [pc, #216]	; (80131ac <tcp_abandon+0x170>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	61fb      	str	r3, [r7, #28]
 80130d8:	e00c      	b.n	80130f4 <tcp_abandon+0xb8>
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	68db      	ldr	r3, [r3, #12]
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d104      	bne.n	80130ee <tcp_abandon+0xb2>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	68da      	ldr	r2, [r3, #12]
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	60da      	str	r2, [r3, #12]
 80130ec:	e005      	b.n	80130fa <tcp_abandon+0xbe>
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	68db      	ldr	r3, [r3, #12]
 80130f2:	61fb      	str	r3, [r7, #28]
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d1ef      	bne.n	80130da <tcp_abandon+0x9e>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2200      	movs	r2, #0
 80130fe:	60da      	str	r2, [r3, #12]
 8013100:	e00b      	b.n	801311a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	8adb      	ldrh	r3, [r3, #22]
 801310a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801310c:	6879      	ldr	r1, [r7, #4]
 801310e:	4828      	ldr	r0, [pc, #160]	; (80131b0 <tcp_abandon+0x174>)
 8013110:	f000 ff7a 	bl	8014008 <tcp_pcb_remove>
 8013114:	4b27      	ldr	r3, [pc, #156]	; (80131b4 <tcp_abandon+0x178>)
 8013116:	2201      	movs	r2, #1
 8013118:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801311e:	2b00      	cmp	r3, #0
 8013120:	d004      	beq.n	801312c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013126:	4618      	mov	r0, r3
 8013128:	f000 fd1c 	bl	8013b64 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013130:	2b00      	cmp	r3, #0
 8013132:	d004      	beq.n	801313e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013138:	4618      	mov	r0, r3
 801313a:	f000 fd13 	bl	8013b64 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013142:	2b00      	cmp	r3, #0
 8013144:	d004      	beq.n	8013150 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801314a:	4618      	mov	r0, r3
 801314c:	f000 fd0a 	bl	8013b64 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	2b00      	cmp	r3, #0
 8013154:	d00e      	beq.n	8013174 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013156:	6879      	ldr	r1, [r7, #4]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	3304      	adds	r3, #4
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	8b12      	ldrh	r2, [r2, #24]
 8013160:	9202      	str	r2, [sp, #8]
 8013162:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013164:	9201      	str	r2, [sp, #4]
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	460b      	mov	r3, r1
 801316a:	697a      	ldr	r2, [r7, #20]
 801316c:	69b9      	ldr	r1, [r7, #24]
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f004 fcbe 	bl	8017af0 <tcp_rst>
    }
    last_state = pcb->state;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	7d1b      	ldrb	r3, [r3, #20]
 8013178:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f7ff fd34 	bl	8012be8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013180:	693b      	ldr	r3, [r7, #16]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d004      	beq.n	8013190 <tcp_abandon+0x154>
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	f06f 010c 	mvn.w	r1, #12
 801318c:	68f8      	ldr	r0, [r7, #12]
 801318e:	4798      	blx	r3
  }
}
 8013190:	3728      	adds	r7, #40	; 0x28
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	080200cc 	.word	0x080200cc
 801319c:	0802023c 	.word	0x0802023c
 80131a0:	0802013c 	.word	0x0802013c
 80131a4:	08020258 	.word	0x08020258
 80131a8:	24003e00 	.word	0x24003e00
 80131ac:	24003dfc 	.word	0x24003dfc
 80131b0:	24003df0 	.word	0x24003df0
 80131b4:	24003dec 	.word	0x24003dec

080131b8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80131c0:	2101      	movs	r1, #1
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7ff ff3a 	bl	801303c <tcp_abandon>
}
 80131c8:	bf00      	nop
 80131ca:	3708      	adds	r7, #8
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}

080131d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d106      	bne.n	80131ec <tcp_update_rcv_ann_wnd+0x1c>
 80131de:	4b25      	ldr	r3, [pc, #148]	; (8013274 <tcp_update_rcv_ann_wnd+0xa4>)
 80131e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80131e4:	4924      	ldr	r1, [pc, #144]	; (8013278 <tcp_update_rcv_ann_wnd+0xa8>)
 80131e6:	4825      	ldr	r0, [pc, #148]	; (801327c <tcp_update_rcv_ann_wnd+0xac>)
 80131e8:	f007 ff8c 	bl	801b104 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f0:	687a      	ldr	r2, [r7, #4]
 80131f2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80131f4:	4413      	add	r3, r2
 80131f6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013200:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013204:	bf28      	it	cs
 8013206:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801320a:	b292      	uxth	r2, r2
 801320c:	4413      	add	r3, r2
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	1ad3      	subs	r3, r2, r3
 8013212:	2b00      	cmp	r3, #0
 8013214:	db08      	blt.n	8013228 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	e020      	b.n	801326a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013230:	1ad3      	subs	r3, r2, r3
 8013232:	2b00      	cmp	r3, #0
 8013234:	dd03      	ble.n	801323e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2200      	movs	r2, #0
 801323a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801323c:	e014      	b.n	8013268 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013246:	1ad3      	subs	r3, r2, r3
 8013248:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013250:	d306      	bcc.n	8013260 <tcp_update_rcv_ann_wnd+0x90>
 8013252:	4b08      	ldr	r3, [pc, #32]	; (8013274 <tcp_update_rcv_ann_wnd+0xa4>)
 8013254:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013258:	4909      	ldr	r1, [pc, #36]	; (8013280 <tcp_update_rcv_ann_wnd+0xb0>)
 801325a:	4808      	ldr	r0, [pc, #32]	; (801327c <tcp_update_rcv_ann_wnd+0xac>)
 801325c:	f007 ff52 	bl	801b104 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	b29a      	uxth	r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013268:	2300      	movs	r3, #0
  }
}
 801326a:	4618      	mov	r0, r3
 801326c:	3710      	adds	r7, #16
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	080200cc 	.word	0x080200cc
 8013278:	08020354 	.word	0x08020354
 801327c:	0802013c 	.word	0x0802013c
 8013280:	08020378 	.word	0x08020378

08013284 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b084      	sub	sp, #16
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
 801328c:	460b      	mov	r3, r1
 801328e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d107      	bne.n	80132a6 <tcp_recved+0x22>
 8013296:	4b1f      	ldr	r3, [pc, #124]	; (8013314 <tcp_recved+0x90>)
 8013298:	f240 32cf 	movw	r2, #975	; 0x3cf
 801329c:	491e      	ldr	r1, [pc, #120]	; (8013318 <tcp_recved+0x94>)
 801329e:	481f      	ldr	r0, [pc, #124]	; (801331c <tcp_recved+0x98>)
 80132a0:	f007 ff30 	bl	801b104 <iprintf>
 80132a4:	e032      	b.n	801330c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	7d1b      	ldrb	r3, [r3, #20]
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d106      	bne.n	80132bc <tcp_recved+0x38>
 80132ae:	4b19      	ldr	r3, [pc, #100]	; (8013314 <tcp_recved+0x90>)
 80132b0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80132b4:	491a      	ldr	r1, [pc, #104]	; (8013320 <tcp_recved+0x9c>)
 80132b6:	4819      	ldr	r0, [pc, #100]	; (801331c <tcp_recved+0x98>)
 80132b8:	f007 ff24 	bl	801b104 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132c0:	887b      	ldrh	r3, [r7, #2]
 80132c2:	4413      	add	r3, r2
 80132c4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80132c6:	89fb      	ldrh	r3, [r7, #14]
 80132c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80132cc:	d804      	bhi.n	80132d8 <tcp_recved+0x54>
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132d2:	89fa      	ldrh	r2, [r7, #14]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d204      	bcs.n	80132e2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80132de:	851a      	strh	r2, [r3, #40]	; 0x28
 80132e0:	e002      	b.n	80132e8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	89fa      	ldrh	r2, [r7, #14]
 80132e6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f7ff ff71 	bl	80131d0 <tcp_update_rcv_ann_wnd>
 80132ee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80132f6:	d309      	bcc.n	801330c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	8b5b      	ldrh	r3, [r3, #26]
 80132fc:	f043 0302 	orr.w	r3, r3, #2
 8013300:	b29a      	uxth	r2, r3
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f003 fe3e 	bl	8016f88 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	080200cc 	.word	0x080200cc
 8013318:	08020394 	.word	0x08020394
 801331c:	0802013c 	.word	0x0802013c
 8013320:	080203ac 	.word	0x080203ac

08013324 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013324:	b5b0      	push	{r4, r5, r7, lr}
 8013326:	b090      	sub	sp, #64	; 0x40
 8013328:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801332a:	2300      	movs	r3, #0
 801332c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013330:	4b94      	ldr	r3, [pc, #592]	; (8013584 <tcp_slowtmr+0x260>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	3301      	adds	r3, #1
 8013336:	4a93      	ldr	r2, [pc, #588]	; (8013584 <tcp_slowtmr+0x260>)
 8013338:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801333a:	4b93      	ldr	r3, [pc, #588]	; (8013588 <tcp_slowtmr+0x264>)
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	3301      	adds	r3, #1
 8013340:	b2da      	uxtb	r2, r3
 8013342:	4b91      	ldr	r3, [pc, #580]	; (8013588 <tcp_slowtmr+0x264>)
 8013344:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013346:	2300      	movs	r3, #0
 8013348:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801334a:	4b90      	ldr	r3, [pc, #576]	; (801358c <tcp_slowtmr+0x268>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013350:	e29d      	b.n	801388e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013354:	7d1b      	ldrb	r3, [r3, #20]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d106      	bne.n	8013368 <tcp_slowtmr+0x44>
 801335a:	4b8d      	ldr	r3, [pc, #564]	; (8013590 <tcp_slowtmr+0x26c>)
 801335c:	f240 42be 	movw	r2, #1214	; 0x4be
 8013360:	498c      	ldr	r1, [pc, #560]	; (8013594 <tcp_slowtmr+0x270>)
 8013362:	488d      	ldr	r0, [pc, #564]	; (8013598 <tcp_slowtmr+0x274>)
 8013364:	f007 fece 	bl	801b104 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801336a:	7d1b      	ldrb	r3, [r3, #20]
 801336c:	2b01      	cmp	r3, #1
 801336e:	d106      	bne.n	801337e <tcp_slowtmr+0x5a>
 8013370:	4b87      	ldr	r3, [pc, #540]	; (8013590 <tcp_slowtmr+0x26c>)
 8013372:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013376:	4989      	ldr	r1, [pc, #548]	; (801359c <tcp_slowtmr+0x278>)
 8013378:	4887      	ldr	r0, [pc, #540]	; (8013598 <tcp_slowtmr+0x274>)
 801337a:	f007 fec3 	bl	801b104 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013380:	7d1b      	ldrb	r3, [r3, #20]
 8013382:	2b0a      	cmp	r3, #10
 8013384:	d106      	bne.n	8013394 <tcp_slowtmr+0x70>
 8013386:	4b82      	ldr	r3, [pc, #520]	; (8013590 <tcp_slowtmr+0x26c>)
 8013388:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801338c:	4984      	ldr	r1, [pc, #528]	; (80135a0 <tcp_slowtmr+0x27c>)
 801338e:	4882      	ldr	r0, [pc, #520]	; (8013598 <tcp_slowtmr+0x274>)
 8013390:	f007 feb8 	bl	801b104 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013396:	7f9a      	ldrb	r2, [r3, #30]
 8013398:	4b7b      	ldr	r3, [pc, #492]	; (8013588 <tcp_slowtmr+0x264>)
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	429a      	cmp	r2, r3
 801339e:	d105      	bne.n	80133ac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80133a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80133a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a6:	68db      	ldr	r3, [r3, #12]
 80133a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80133aa:	e270      	b.n	801388e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80133ac:	4b76      	ldr	r3, [pc, #472]	; (8013588 <tcp_slowtmr+0x264>)
 80133ae:	781a      	ldrb	r2, [r3, #0]
 80133b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80133ba:	2300      	movs	r3, #0
 80133bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80133c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c2:	7d1b      	ldrb	r3, [r3, #20]
 80133c4:	2b02      	cmp	r3, #2
 80133c6:	d10a      	bne.n	80133de <tcp_slowtmr+0xba>
 80133c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80133ce:	2b05      	cmp	r3, #5
 80133d0:	d905      	bls.n	80133de <tcp_slowtmr+0xba>
      ++pcb_remove;
 80133d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133d6:	3301      	adds	r3, #1
 80133d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133dc:	e11e      	b.n	801361c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80133de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80133e4:	2b0b      	cmp	r3, #11
 80133e6:	d905      	bls.n	80133f4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80133e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133ec:	3301      	adds	r3, #1
 80133ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133f2:	e113      	b.n	801361c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80133f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d075      	beq.n	80134ea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80133fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013402:	2b00      	cmp	r3, #0
 8013404:	d006      	beq.n	8013414 <tcp_slowtmr+0xf0>
 8013406:	4b62      	ldr	r3, [pc, #392]	; (8013590 <tcp_slowtmr+0x26c>)
 8013408:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801340c:	4965      	ldr	r1, [pc, #404]	; (80135a4 <tcp_slowtmr+0x280>)
 801340e:	4862      	ldr	r0, [pc, #392]	; (8013598 <tcp_slowtmr+0x274>)
 8013410:	f007 fe78 	bl	801b104 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013418:	2b00      	cmp	r3, #0
 801341a:	d106      	bne.n	801342a <tcp_slowtmr+0x106>
 801341c:	4b5c      	ldr	r3, [pc, #368]	; (8013590 <tcp_slowtmr+0x26c>)
 801341e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013422:	4961      	ldr	r1, [pc, #388]	; (80135a8 <tcp_slowtmr+0x284>)
 8013424:	485c      	ldr	r0, [pc, #368]	; (8013598 <tcp_slowtmr+0x274>)
 8013426:	f007 fe6d 	bl	801b104 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013430:	2b0b      	cmp	r3, #11
 8013432:	d905      	bls.n	8013440 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013438:	3301      	adds	r3, #1
 801343a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801343e:	e0ed      	b.n	801361c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013442:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013446:	3b01      	subs	r3, #1
 8013448:	4a58      	ldr	r2, [pc, #352]	; (80135ac <tcp_slowtmr+0x288>)
 801344a:	5cd3      	ldrb	r3, [r2, r3]
 801344c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013450:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013454:	7c7a      	ldrb	r2, [r7, #17]
 8013456:	429a      	cmp	r2, r3
 8013458:	d907      	bls.n	801346a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801345c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013460:	3301      	adds	r3, #1
 8013462:	b2da      	uxtb	r2, r3
 8013464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013466:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013470:	7c7a      	ldrb	r2, [r7, #17]
 8013472:	429a      	cmp	r2, r3
 8013474:	f200 80d2 	bhi.w	801361c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013478:	2301      	movs	r3, #1
 801347a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013482:	2b00      	cmp	r3, #0
 8013484:	d108      	bne.n	8013498 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013488:	f004 fc26 	bl	8017cd8 <tcp_zero_window_probe>
 801348c:	4603      	mov	r3, r0
 801348e:	2b00      	cmp	r3, #0
 8013490:	d014      	beq.n	80134bc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013492:	2300      	movs	r3, #0
 8013494:	623b      	str	r3, [r7, #32]
 8013496:	e011      	b.n	80134bc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801349e:	4619      	mov	r1, r3
 80134a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134a2:	f003 faeb 	bl	8016a7c <tcp_split_unsent_seg>
 80134a6:	4603      	mov	r3, r0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d107      	bne.n	80134bc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80134ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134ae:	f003 fd6b 	bl	8016f88 <tcp_output>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d101      	bne.n	80134bc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80134b8:	2300      	movs	r3, #0
 80134ba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80134bc:	6a3b      	ldr	r3, [r7, #32]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	f000 80ac 	beq.w	801361c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80134c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c6:	2200      	movs	r2, #0
 80134c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80134cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80134d2:	2b06      	cmp	r3, #6
 80134d4:	f200 80a2 	bhi.w	801361c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80134d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80134de:	3301      	adds	r3, #1
 80134e0:	b2da      	uxtb	r2, r3
 80134e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80134e8:	e098      	b.n	801361c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80134ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	db0f      	blt.n	8013514 <tcp_slowtmr+0x1f0>
 80134f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80134fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80134fe:	4293      	cmp	r3, r2
 8013500:	d008      	beq.n	8013514 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013504:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013508:	b29b      	uxth	r3, r3
 801350a:	3301      	adds	r3, #1
 801350c:	b29b      	uxth	r3, r3
 801350e:	b21a      	sxth	r2, r3
 8013510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013512:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013516:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801351c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013520:	429a      	cmp	r2, r3
 8013522:	db7b      	blt.n	801361c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013526:	f004 f821 	bl	801756c <tcp_rexmit_rto_prepare>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	d007      	beq.n	8013540 <tcp_slowtmr+0x21c>
 8013530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013534:	2b00      	cmp	r3, #0
 8013536:	d171      	bne.n	801361c <tcp_slowtmr+0x2f8>
 8013538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801353c:	2b00      	cmp	r3, #0
 801353e:	d06d      	beq.n	801361c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013542:	7d1b      	ldrb	r3, [r3, #20]
 8013544:	2b02      	cmp	r3, #2
 8013546:	d03a      	beq.n	80135be <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801354a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801354e:	2b0c      	cmp	r3, #12
 8013550:	bf28      	it	cs
 8013552:	230c      	movcs	r3, #12
 8013554:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013558:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801355c:	10db      	asrs	r3, r3, #3
 801355e:	b21b      	sxth	r3, r3
 8013560:	461a      	mov	r2, r3
 8013562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013564:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013568:	4413      	add	r3, r2
 801356a:	7efa      	ldrb	r2, [r7, #27]
 801356c:	4910      	ldr	r1, [pc, #64]	; (80135b0 <tcp_slowtmr+0x28c>)
 801356e:	5c8a      	ldrb	r2, [r1, r2]
 8013570:	4093      	lsls	r3, r2
 8013572:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801357a:	4293      	cmp	r3, r2
 801357c:	dc1a      	bgt.n	80135b4 <tcp_slowtmr+0x290>
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	b21a      	sxth	r2, r3
 8013582:	e019      	b.n	80135b8 <tcp_slowtmr+0x294>
 8013584:	24003df4 	.word	0x24003df4
 8013588:	24000766 	.word	0x24000766
 801358c:	24003df0 	.word	0x24003df0
 8013590:	080200cc 	.word	0x080200cc
 8013594:	0802043c 	.word	0x0802043c
 8013598:	0802013c 	.word	0x0802013c
 801359c:	08020468 	.word	0x08020468
 80135a0:	08020494 	.word	0x08020494
 80135a4:	080204c4 	.word	0x080204c4
 80135a8:	080204f8 	.word	0x080204f8
 80135ac:	08021b30 	.word	0x08021b30
 80135b0:	08021b20 	.word	0x08021b20
 80135b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80135b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80135be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c0:	2200      	movs	r2, #0
 80135c2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80135c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80135ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135d0:	4293      	cmp	r3, r2
 80135d2:	bf28      	it	cs
 80135d4:	4613      	movcs	r3, r2
 80135d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80135d8:	8a7b      	ldrh	r3, [r7, #18]
 80135da:	085b      	lsrs	r3, r3, #1
 80135dc:	b29a      	uxth	r2, r3
 80135de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80135e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80135ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135ee:	005b      	lsls	r3, r3, #1
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d206      	bcs.n	8013604 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80135f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135fa:	005b      	lsls	r3, r3, #1
 80135fc:	b29a      	uxth	r2, r3
 80135fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013600:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013606:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013610:	2200      	movs	r2, #0
 8013612:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013618:	f004 f818 	bl	801764c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361e:	7d1b      	ldrb	r3, [r3, #20]
 8013620:	2b06      	cmp	r3, #6
 8013622:	d111      	bne.n	8013648 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013626:	8b5b      	ldrh	r3, [r3, #26]
 8013628:	f003 0310 	and.w	r3, r3, #16
 801362c:	2b00      	cmp	r3, #0
 801362e:	d00b      	beq.n	8013648 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013630:	4b9c      	ldr	r3, [pc, #624]	; (80138a4 <tcp_slowtmr+0x580>)
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013636:	6a1b      	ldr	r3, [r3, #32]
 8013638:	1ad3      	subs	r3, r2, r3
 801363a:	2b28      	cmp	r3, #40	; 0x28
 801363c:	d904      	bls.n	8013648 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801363e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013642:	3301      	adds	r3, #1
 8013644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364a:	7a5b      	ldrb	r3, [r3, #9]
 801364c:	f003 0308 	and.w	r3, r3, #8
 8013650:	2b00      	cmp	r3, #0
 8013652:	d04a      	beq.n	80136ea <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8013654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013656:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013658:	2b04      	cmp	r3, #4
 801365a:	d003      	beq.n	8013664 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801365e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013660:	2b07      	cmp	r3, #7
 8013662:	d142      	bne.n	80136ea <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013664:	4b8f      	ldr	r3, [pc, #572]	; (80138a4 <tcp_slowtmr+0x580>)
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366a:	6a1b      	ldr	r3, [r3, #32]
 801366c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013670:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013674:	4b8c      	ldr	r3, [pc, #560]	; (80138a8 <tcp_slowtmr+0x584>)
 8013676:	440b      	add	r3, r1
 8013678:	498c      	ldr	r1, [pc, #560]	; (80138ac <tcp_slowtmr+0x588>)
 801367a:	fba1 1303 	umull	r1, r3, r1, r3
 801367e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013680:	429a      	cmp	r2, r3
 8013682:	d90a      	bls.n	801369a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013688:	3301      	adds	r3, #1
 801368a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801368e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013692:	3301      	adds	r3, #1
 8013694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013698:	e027      	b.n	80136ea <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801369a:	4b82      	ldr	r3, [pc, #520]	; (80138a4 <tcp_slowtmr+0x580>)
 801369c:	681a      	ldr	r2, [r3, #0]
 801369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a0:	6a1b      	ldr	r3, [r3, #32]
 80136a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80136a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80136aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80136b0:	4618      	mov	r0, r3
 80136b2:	4b7f      	ldr	r3, [pc, #508]	; (80138b0 <tcp_slowtmr+0x58c>)
 80136b4:	fb03 f300 	mul.w	r3, r3, r0
 80136b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80136ba:	497c      	ldr	r1, [pc, #496]	; (80138ac <tcp_slowtmr+0x588>)
 80136bc:	fba1 1303 	umull	r1, r3, r1, r3
 80136c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d911      	bls.n	80136ea <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80136c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80136c8:	f004 fac6 	bl	8017c58 <tcp_keepalive>
 80136cc:	4603      	mov	r3, r0
 80136ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80136d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d107      	bne.n	80136ea <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80136da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80136e0:	3301      	adds	r3, #1
 80136e2:	b2da      	uxtb	r2, r3
 80136e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80136ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d011      	beq.n	8013716 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80136f2:	4b6c      	ldr	r3, [pc, #432]	; (80138a4 <tcp_slowtmr+0x580>)
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f8:	6a1b      	ldr	r3, [r3, #32]
 80136fa:	1ad2      	subs	r2, r2, r3
 80136fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013702:	4619      	mov	r1, r3
 8013704:	460b      	mov	r3, r1
 8013706:	005b      	lsls	r3, r3, #1
 8013708:	440b      	add	r3, r1
 801370a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801370c:	429a      	cmp	r2, r3
 801370e:	d302      	bcc.n	8013716 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013712:	f000 fddd 	bl	80142d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013718:	7d1b      	ldrb	r3, [r3, #20]
 801371a:	2b03      	cmp	r3, #3
 801371c:	d10b      	bne.n	8013736 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801371e:	4b61      	ldr	r3, [pc, #388]	; (80138a4 <tcp_slowtmr+0x580>)
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013724:	6a1b      	ldr	r3, [r3, #32]
 8013726:	1ad3      	subs	r3, r2, r3
 8013728:	2b28      	cmp	r3, #40	; 0x28
 801372a:	d904      	bls.n	8013736 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801372c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013730:	3301      	adds	r3, #1
 8013732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013738:	7d1b      	ldrb	r3, [r3, #20]
 801373a:	2b09      	cmp	r3, #9
 801373c:	d10b      	bne.n	8013756 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801373e:	4b59      	ldr	r3, [pc, #356]	; (80138a4 <tcp_slowtmr+0x580>)
 8013740:	681a      	ldr	r2, [r3, #0]
 8013742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013744:	6a1b      	ldr	r3, [r3, #32]
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	2bf0      	cmp	r3, #240	; 0xf0
 801374a:	d904      	bls.n	8013756 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801374c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013750:	3301      	adds	r3, #1
 8013752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801375a:	2b00      	cmp	r3, #0
 801375c:	d060      	beq.n	8013820 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013764:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013766:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013768:	f000 fbfe 	bl	8013f68 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376e:	2b00      	cmp	r3, #0
 8013770:	d010      	beq.n	8013794 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013772:	4b50      	ldr	r3, [pc, #320]	; (80138b4 <tcp_slowtmr+0x590>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013778:	429a      	cmp	r2, r3
 801377a:	d106      	bne.n	801378a <tcp_slowtmr+0x466>
 801377c:	4b4e      	ldr	r3, [pc, #312]	; (80138b8 <tcp_slowtmr+0x594>)
 801377e:	f240 526d 	movw	r2, #1389	; 0x56d
 8013782:	494e      	ldr	r1, [pc, #312]	; (80138bc <tcp_slowtmr+0x598>)
 8013784:	484e      	ldr	r0, [pc, #312]	; (80138c0 <tcp_slowtmr+0x59c>)
 8013786:	f007 fcbd 	bl	801b104 <iprintf>
        prev->next = pcb->next;
 801378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801378c:	68da      	ldr	r2, [r3, #12]
 801378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013790:	60da      	str	r2, [r3, #12]
 8013792:	e00f      	b.n	80137b4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013794:	4b47      	ldr	r3, [pc, #284]	; (80138b4 <tcp_slowtmr+0x590>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801379a:	429a      	cmp	r2, r3
 801379c:	d006      	beq.n	80137ac <tcp_slowtmr+0x488>
 801379e:	4b46      	ldr	r3, [pc, #280]	; (80138b8 <tcp_slowtmr+0x594>)
 80137a0:	f240 5271 	movw	r2, #1393	; 0x571
 80137a4:	4947      	ldr	r1, [pc, #284]	; (80138c4 <tcp_slowtmr+0x5a0>)
 80137a6:	4846      	ldr	r0, [pc, #280]	; (80138c0 <tcp_slowtmr+0x59c>)
 80137a8:	f007 fcac 	bl	801b104 <iprintf>
        tcp_active_pcbs = pcb->next;
 80137ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ae:	68db      	ldr	r3, [r3, #12]
 80137b0:	4a40      	ldr	r2, [pc, #256]	; (80138b4 <tcp_slowtmr+0x590>)
 80137b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80137b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d013      	beq.n	80137e4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80137bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80137c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80137c4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80137c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c8:	3304      	adds	r3, #4
 80137ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137cc:	8ad2      	ldrh	r2, [r2, #22]
 80137ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137d0:	8b09      	ldrh	r1, [r1, #24]
 80137d2:	9102      	str	r1, [sp, #8]
 80137d4:	9201      	str	r2, [sp, #4]
 80137d6:	9300      	str	r3, [sp, #0]
 80137d8:	462b      	mov	r3, r5
 80137da:	4622      	mov	r2, r4
 80137dc:	4601      	mov	r1, r0
 80137de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137e0:	f004 f986 	bl	8017af0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80137e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e6:	691b      	ldr	r3, [r3, #16]
 80137e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80137ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ec:	7d1b      	ldrb	r3, [r3, #20]
 80137ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80137f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80137f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137f6:	68db      	ldr	r3, [r3, #12]
 80137f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80137fa:	6838      	ldr	r0, [r7, #0]
 80137fc:	f7ff f9f4 	bl	8012be8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013800:	4b31      	ldr	r3, [pc, #196]	; (80138c8 <tcp_slowtmr+0x5a4>)
 8013802:	2200      	movs	r2, #0
 8013804:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d004      	beq.n	8013816 <tcp_slowtmr+0x4f2>
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	f06f 010c 	mvn.w	r1, #12
 8013812:	68b8      	ldr	r0, [r7, #8]
 8013814:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013816:	4b2c      	ldr	r3, [pc, #176]	; (80138c8 <tcp_slowtmr+0x5a4>)
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d037      	beq.n	801388e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801381e:	e592      	b.n	8013346 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013822:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382c:	7f1b      	ldrb	r3, [r3, #28]
 801382e:	3301      	adds	r3, #1
 8013830:	b2da      	uxtb	r2, r3
 8013832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013834:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013838:	7f1a      	ldrb	r2, [r3, #28]
 801383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383c:	7f5b      	ldrb	r3, [r3, #29]
 801383e:	429a      	cmp	r2, r3
 8013840:	d325      	bcc.n	801388e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8013842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013844:	2200      	movs	r2, #0
 8013846:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013848:	4b1f      	ldr	r3, [pc, #124]	; (80138c8 <tcp_slowtmr+0x5a4>)
 801384a:	2200      	movs	r2, #0
 801384c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00b      	beq.n	8013870 <tcp_slowtmr+0x54c>
 8013858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801385e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013860:	6912      	ldr	r2, [r2, #16]
 8013862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013864:	4610      	mov	r0, r2
 8013866:	4798      	blx	r3
 8013868:	4603      	mov	r3, r0
 801386a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801386e:	e002      	b.n	8013876 <tcp_slowtmr+0x552>
 8013870:	2300      	movs	r3, #0
 8013872:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013876:	4b14      	ldr	r3, [pc, #80]	; (80138c8 <tcp_slowtmr+0x5a4>)
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d000      	beq.n	8013880 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801387e:	e562      	b.n	8013346 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013880:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013884:	2b00      	cmp	r3, #0
 8013886:	d102      	bne.n	801388e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8013888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801388a:	f003 fb7d 	bl	8016f88 <tcp_output>
  while (pcb != NULL) {
 801388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013890:	2b00      	cmp	r3, #0
 8013892:	f47f ad5e 	bne.w	8013352 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013896:	2300      	movs	r3, #0
 8013898:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801389a:	4b0c      	ldr	r3, [pc, #48]	; (80138cc <tcp_slowtmr+0x5a8>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80138a0:	e069      	b.n	8013976 <tcp_slowtmr+0x652>
 80138a2:	bf00      	nop
 80138a4:	24003df4 	.word	0x24003df4
 80138a8:	000a4cb8 	.word	0x000a4cb8
 80138ac:	10624dd3 	.word	0x10624dd3
 80138b0:	000124f8 	.word	0x000124f8
 80138b4:	24003df0 	.word	0x24003df0
 80138b8:	080200cc 	.word	0x080200cc
 80138bc:	08020530 	.word	0x08020530
 80138c0:	0802013c 	.word	0x0802013c
 80138c4:	0802055c 	.word	0x0802055c
 80138c8:	24003dec 	.word	0x24003dec
 80138cc:	24003e00 	.word	0x24003e00
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80138d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d2:	7d1b      	ldrb	r3, [r3, #20]
 80138d4:	2b0a      	cmp	r3, #10
 80138d6:	d006      	beq.n	80138e6 <tcp_slowtmr+0x5c2>
 80138d8:	4b2b      	ldr	r3, [pc, #172]	; (8013988 <tcp_slowtmr+0x664>)
 80138da:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80138de:	492b      	ldr	r1, [pc, #172]	; (801398c <tcp_slowtmr+0x668>)
 80138e0:	482b      	ldr	r0, [pc, #172]	; (8013990 <tcp_slowtmr+0x66c>)
 80138e2:	f007 fc0f 	bl	801b104 <iprintf>
    pcb_remove = 0;
 80138e6:	2300      	movs	r3, #0
 80138e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80138ec:	4b29      	ldr	r3, [pc, #164]	; (8013994 <tcp_slowtmr+0x670>)
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f2:	6a1b      	ldr	r3, [r3, #32]
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	2bf0      	cmp	r3, #240	; 0xf0
 80138f8:	d904      	bls.n	8013904 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80138fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138fe:	3301      	adds	r3, #1
 8013900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013908:	2b00      	cmp	r3, #0
 801390a:	d02f      	beq.n	801396c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801390c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801390e:	f000 fb2b 	bl	8013f68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013914:	2b00      	cmp	r3, #0
 8013916:	d010      	beq.n	801393a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013918:	4b1f      	ldr	r3, [pc, #124]	; (8013998 <tcp_slowtmr+0x674>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801391e:	429a      	cmp	r2, r3
 8013920:	d106      	bne.n	8013930 <tcp_slowtmr+0x60c>
 8013922:	4b19      	ldr	r3, [pc, #100]	; (8013988 <tcp_slowtmr+0x664>)
 8013924:	f240 52af 	movw	r2, #1455	; 0x5af
 8013928:	491c      	ldr	r1, [pc, #112]	; (801399c <tcp_slowtmr+0x678>)
 801392a:	4819      	ldr	r0, [pc, #100]	; (8013990 <tcp_slowtmr+0x66c>)
 801392c:	f007 fbea 	bl	801b104 <iprintf>
        prev->next = pcb->next;
 8013930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013932:	68da      	ldr	r2, [r3, #12]
 8013934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013936:	60da      	str	r2, [r3, #12]
 8013938:	e00f      	b.n	801395a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801393a:	4b17      	ldr	r3, [pc, #92]	; (8013998 <tcp_slowtmr+0x674>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013940:	429a      	cmp	r2, r3
 8013942:	d006      	beq.n	8013952 <tcp_slowtmr+0x62e>
 8013944:	4b10      	ldr	r3, [pc, #64]	; (8013988 <tcp_slowtmr+0x664>)
 8013946:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801394a:	4915      	ldr	r1, [pc, #84]	; (80139a0 <tcp_slowtmr+0x67c>)
 801394c:	4810      	ldr	r0, [pc, #64]	; (8013990 <tcp_slowtmr+0x66c>)
 801394e:	f007 fbd9 	bl	801b104 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013954:	68db      	ldr	r3, [r3, #12]
 8013956:	4a10      	ldr	r2, [pc, #64]	; (8013998 <tcp_slowtmr+0x674>)
 8013958:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801395c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013960:	68db      	ldr	r3, [r3, #12]
 8013962:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013964:	69f8      	ldr	r0, [r7, #28]
 8013966:	f7ff f93f 	bl	8012be8 <tcp_free>
 801396a:	e004      	b.n	8013976 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801396e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013972:	68db      	ldr	r3, [r3, #12]
 8013974:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013978:	2b00      	cmp	r3, #0
 801397a:	d1a9      	bne.n	80138d0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801397c:	bf00      	nop
 801397e:	bf00      	nop
 8013980:	3730      	adds	r7, #48	; 0x30
 8013982:	46bd      	mov	sp, r7
 8013984:	bdb0      	pop	{r4, r5, r7, pc}
 8013986:	bf00      	nop
 8013988:	080200cc 	.word	0x080200cc
 801398c:	08020588 	.word	0x08020588
 8013990:	0802013c 	.word	0x0802013c
 8013994:	24003df4 	.word	0x24003df4
 8013998:	24003e00 	.word	0x24003e00
 801399c:	080205b8 	.word	0x080205b8
 80139a0:	080205e0 	.word	0x080205e0

080139a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b082      	sub	sp, #8
 80139a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80139aa:	4b2d      	ldr	r3, [pc, #180]	; (8013a60 <tcp_fasttmr+0xbc>)
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	3301      	adds	r3, #1
 80139b0:	b2da      	uxtb	r2, r3
 80139b2:	4b2b      	ldr	r3, [pc, #172]	; (8013a60 <tcp_fasttmr+0xbc>)
 80139b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80139b6:	4b2b      	ldr	r3, [pc, #172]	; (8013a64 <tcp_fasttmr+0xc0>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80139bc:	e048      	b.n	8013a50 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	7f9a      	ldrb	r2, [r3, #30]
 80139c2:	4b27      	ldr	r3, [pc, #156]	; (8013a60 <tcp_fasttmr+0xbc>)
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d03f      	beq.n	8013a4a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80139ca:	4b25      	ldr	r3, [pc, #148]	; (8013a60 <tcp_fasttmr+0xbc>)
 80139cc:	781a      	ldrb	r2, [r3, #0]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	8b5b      	ldrh	r3, [r3, #26]
 80139d6:	f003 0301 	and.w	r3, r3, #1
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d010      	beq.n	8013a00 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	8b5b      	ldrh	r3, [r3, #26]
 80139e2:	f043 0302 	orr.w	r3, r3, #2
 80139e6:	b29a      	uxth	r2, r3
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f003 facb 	bl	8016f88 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	8b5b      	ldrh	r3, [r3, #26]
 80139f6:	f023 0303 	bic.w	r3, r3, #3
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	8b5b      	ldrh	r3, [r3, #26]
 8013a04:	f003 0308 	and.w	r3, r3, #8
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d009      	beq.n	8013a20 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	8b5b      	ldrh	r3, [r3, #26]
 8013a10:	f023 0308 	bic.w	r3, r3, #8
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f7ff fa78 	bl	8012f10 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d00a      	beq.n	8013a44 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013a2e:	4b0e      	ldr	r3, [pc, #56]	; (8013a68 <tcp_fasttmr+0xc4>)
 8013a30:	2200      	movs	r2, #0
 8013a32:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f000 f819 	bl	8013a6c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013a3a:	4b0b      	ldr	r3, [pc, #44]	; (8013a68 <tcp_fasttmr+0xc4>)
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d000      	beq.n	8013a44 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013a42:	e7b8      	b.n	80139b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	607b      	str	r3, [r7, #4]
 8013a48:	e002      	b.n	8013a50 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	68db      	ldr	r3, [r3, #12]
 8013a4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d1b3      	bne.n	80139be <tcp_fasttmr+0x1a>
    }
  }
}
 8013a56:	bf00      	nop
 8013a58:	bf00      	nop
 8013a5a:	3708      	adds	r7, #8
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}
 8013a60:	24000766 	.word	0x24000766
 8013a64:	24003df0 	.word	0x24003df0
 8013a68:	24003dec 	.word	0x24003dec

08013a6c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013a6c:	b590      	push	{r4, r7, lr}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d109      	bne.n	8013a8e <tcp_process_refused_data+0x22>
 8013a7a:	4b37      	ldr	r3, [pc, #220]	; (8013b58 <tcp_process_refused_data+0xec>)
 8013a7c:	f240 6209 	movw	r2, #1545	; 0x609
 8013a80:	4936      	ldr	r1, [pc, #216]	; (8013b5c <tcp_process_refused_data+0xf0>)
 8013a82:	4837      	ldr	r0, [pc, #220]	; (8013b60 <tcp_process_refused_data+0xf4>)
 8013a84:	f007 fb3e 	bl	801b104 <iprintf>
 8013a88:	f06f 030f 	mvn.w	r3, #15
 8013a8c:	e060      	b.n	8013b50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a92:	7b5b      	ldrb	r3, [r3, #13]
 8013a94:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a9a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00b      	beq.n	8013ac4 <tcp_process_refused_data+0x58>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6918      	ldr	r0, [r3, #16]
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	68ba      	ldr	r2, [r7, #8]
 8013aba:	6879      	ldr	r1, [r7, #4]
 8013abc:	47a0      	blx	r4
 8013abe:	4603      	mov	r3, r0
 8013ac0:	73fb      	strb	r3, [r7, #15]
 8013ac2:	e007      	b.n	8013ad4 <tcp_process_refused_data+0x68>
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	68ba      	ldr	r2, [r7, #8]
 8013ac8:	6879      	ldr	r1, [r7, #4]
 8013aca:	2000      	movs	r0, #0
 8013acc:	f000 f8a4 	bl	8013c18 <tcp_recv_null>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d12a      	bne.n	8013b32 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013adc:	7bbb      	ldrb	r3, [r7, #14]
 8013ade:	f003 0320 	and.w	r3, r3, #32
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d033      	beq.n	8013b4e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013aea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013aee:	d005      	beq.n	8013afc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013af4:	3301      	adds	r3, #1
 8013af6:	b29a      	uxth	r2, r3
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d00b      	beq.n	8013b1e <tcp_process_refused_data+0xb2>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6918      	ldr	r0, [r3, #16]
 8013b10:	2300      	movs	r3, #0
 8013b12:	2200      	movs	r2, #0
 8013b14:	6879      	ldr	r1, [r7, #4]
 8013b16:	47a0      	blx	r4
 8013b18:	4603      	mov	r3, r0
 8013b1a:	73fb      	strb	r3, [r7, #15]
 8013b1c:	e001      	b.n	8013b22 <tcp_process_refused_data+0xb6>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b26:	f113 0f0d 	cmn.w	r3, #13
 8013b2a:	d110      	bne.n	8013b4e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013b2c:	f06f 030c 	mvn.w	r3, #12
 8013b30:	e00e      	b.n	8013b50 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b36:	f113 0f0d 	cmn.w	r3, #13
 8013b3a:	d102      	bne.n	8013b42 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013b3c:	f06f 030c 	mvn.w	r3, #12
 8013b40:	e006      	b.n	8013b50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	68ba      	ldr	r2, [r7, #8]
 8013b46:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8013b48:	f06f 0304 	mvn.w	r3, #4
 8013b4c:	e000      	b.n	8013b50 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013b4e:	2300      	movs	r3, #0
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3714      	adds	r7, #20
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd90      	pop	{r4, r7, pc}
 8013b58:	080200cc 	.word	0x080200cc
 8013b5c:	08020608 	.word	0x08020608
 8013b60:	0802013c 	.word	0x0802013c

08013b64 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b084      	sub	sp, #16
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013b6c:	e007      	b.n	8013b7e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f000 f80a 	bl	8013b8e <tcp_seg_free>
    seg = next;
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d1f4      	bne.n	8013b6e <tcp_segs_free+0xa>
  }
}
 8013b84:	bf00      	nop
 8013b86:	bf00      	nop
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}

08013b8e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013b8e:	b580      	push	{r7, lr}
 8013b90:	b082      	sub	sp, #8
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d00c      	beq.n	8013bb6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d004      	beq.n	8013bae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	685b      	ldr	r3, [r3, #4]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fe fd7d 	bl	80126a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013bae:	6879      	ldr	r1, [r7, #4]
 8013bb0:	2003      	movs	r0, #3
 8013bb2:	f7fd ff23 	bl	80119fc <memp_free>
  }
}
 8013bb6:	bf00      	nop
 8013bb8:	3708      	adds	r7, #8
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
	...

08013bc0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d106      	bne.n	8013bdc <tcp_seg_copy+0x1c>
 8013bce:	4b0f      	ldr	r3, [pc, #60]	; (8013c0c <tcp_seg_copy+0x4c>)
 8013bd0:	f240 6282 	movw	r2, #1666	; 0x682
 8013bd4:	490e      	ldr	r1, [pc, #56]	; (8013c10 <tcp_seg_copy+0x50>)
 8013bd6:	480f      	ldr	r0, [pc, #60]	; (8013c14 <tcp_seg_copy+0x54>)
 8013bd8:	f007 fa94 	bl	801b104 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013bdc:	2003      	movs	r0, #3
 8013bde:	f7fd fec1 	bl	8011964 <memp_malloc>
 8013be2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d101      	bne.n	8013bee <tcp_seg_copy+0x2e>
    return NULL;
 8013bea:	2300      	movs	r3, #0
 8013bec:	e00a      	b.n	8013c04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013bee:	2210      	movs	r2, #16
 8013bf0:	6879      	ldr	r1, [r7, #4]
 8013bf2:	68f8      	ldr	r0, [r7, #12]
 8013bf4:	f006 fb64 	bl	801a2c0 <memcpy>
  pbuf_ref(cseg->p);
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fe fdf3 	bl	80127e8 <pbuf_ref>
  return cseg;
 8013c02:	68fb      	ldr	r3, [r7, #12]
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	3710      	adds	r7, #16
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}
 8013c0c:	080200cc 	.word	0x080200cc
 8013c10:	0802064c 	.word	0x0802064c
 8013c14:	0802013c 	.word	0x0802013c

08013c18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b084      	sub	sp, #16
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	60b9      	str	r1, [r7, #8]
 8013c22:	607a      	str	r2, [r7, #4]
 8013c24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d109      	bne.n	8013c40 <tcp_recv_null+0x28>
 8013c2c:	4b12      	ldr	r3, [pc, #72]	; (8013c78 <tcp_recv_null+0x60>)
 8013c2e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013c32:	4912      	ldr	r1, [pc, #72]	; (8013c7c <tcp_recv_null+0x64>)
 8013c34:	4812      	ldr	r0, [pc, #72]	; (8013c80 <tcp_recv_null+0x68>)
 8013c36:	f007 fa65 	bl	801b104 <iprintf>
 8013c3a:	f06f 030f 	mvn.w	r3, #15
 8013c3e:	e016      	b.n	8013c6e <tcp_recv_null+0x56>

  if (p != NULL) {
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d009      	beq.n	8013c5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	891b      	ldrh	r3, [r3, #8]
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	68b8      	ldr	r0, [r7, #8]
 8013c4e:	f7ff fb19 	bl	8013284 <tcp_recved>
    pbuf_free(p);
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f7fe fd28 	bl	80126a8 <pbuf_free>
 8013c58:	e008      	b.n	8013c6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d104      	bne.n	8013c6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013c62:	68b8      	ldr	r0, [r7, #8]
 8013c64:	f7ff f9be 	bl	8012fe4 <tcp_close>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	e000      	b.n	8013c6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013c6c:	2300      	movs	r3, #0
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	080200cc 	.word	0x080200cc
 8013c7c:	08020668 	.word	0x08020668
 8013c80:	0802013c 	.word	0x0802013c

08013c84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	db01      	blt.n	8013c9a <tcp_kill_prio+0x16>
 8013c96:	79fb      	ldrb	r3, [r7, #7]
 8013c98:	e000      	b.n	8013c9c <tcp_kill_prio+0x18>
 8013c9a:	237f      	movs	r3, #127	; 0x7f
 8013c9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013c9e:	7afb      	ldrb	r3, [r7, #11]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d034      	beq.n	8013d0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013ca4:	7afb      	ldrb	r3, [r7, #11]
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cb2:	4b19      	ldr	r3, [pc, #100]	; (8013d18 <tcp_kill_prio+0x94>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	617b      	str	r3, [r7, #20]
 8013cb8:	e01f      	b.n	8013cfa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	7d5b      	ldrb	r3, [r3, #21]
 8013cbe:	7afa      	ldrb	r2, [r7, #11]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d80c      	bhi.n	8013cde <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013cc8:	7afa      	ldrb	r2, [r7, #11]
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d112      	bne.n	8013cf4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013cce:	4b13      	ldr	r3, [pc, #76]	; (8013d1c <tcp_kill_prio+0x98>)
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	6a1b      	ldr	r3, [r3, #32]
 8013cd6:	1ad3      	subs	r3, r2, r3
 8013cd8:	68fa      	ldr	r2, [r7, #12]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d80a      	bhi.n	8013cf4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013cde:	4b0f      	ldr	r3, [pc, #60]	; (8013d1c <tcp_kill_prio+0x98>)
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	6a1b      	ldr	r3, [r3, #32]
 8013ce6:	1ad3      	subs	r3, r2, r3
 8013ce8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	7d5b      	ldrb	r3, [r3, #21]
 8013cf2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	617b      	str	r3, [r7, #20]
 8013cfa:	697b      	ldr	r3, [r7, #20]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d1dc      	bne.n	8013cba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d004      	beq.n	8013d10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013d06:	6938      	ldr	r0, [r7, #16]
 8013d08:	f7ff fa56 	bl	80131b8 <tcp_abort>
 8013d0c:	e000      	b.n	8013d10 <tcp_kill_prio+0x8c>
    return;
 8013d0e:	bf00      	nop
  }
}
 8013d10:	3718      	adds	r7, #24
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	24003df0 	.word	0x24003df0
 8013d1c:	24003df4 	.word	0x24003df4

08013d20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b086      	sub	sp, #24
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	4603      	mov	r3, r0
 8013d28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013d2a:	79fb      	ldrb	r3, [r7, #7]
 8013d2c:	2b08      	cmp	r3, #8
 8013d2e:	d009      	beq.n	8013d44 <tcp_kill_state+0x24>
 8013d30:	79fb      	ldrb	r3, [r7, #7]
 8013d32:	2b09      	cmp	r3, #9
 8013d34:	d006      	beq.n	8013d44 <tcp_kill_state+0x24>
 8013d36:	4b1a      	ldr	r3, [pc, #104]	; (8013da0 <tcp_kill_state+0x80>)
 8013d38:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8013d3c:	4919      	ldr	r1, [pc, #100]	; (8013da4 <tcp_kill_state+0x84>)
 8013d3e:	481a      	ldr	r0, [pc, #104]	; (8013da8 <tcp_kill_state+0x88>)
 8013d40:	f007 f9e0 	bl	801b104 <iprintf>

  inactivity = 0;
 8013d44:	2300      	movs	r3, #0
 8013d46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d4c:	4b17      	ldr	r3, [pc, #92]	; (8013dac <tcp_kill_state+0x8c>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	617b      	str	r3, [r7, #20]
 8013d52:	e017      	b.n	8013d84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	7d1b      	ldrb	r3, [r3, #20]
 8013d58:	79fa      	ldrb	r2, [r7, #7]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d10f      	bne.n	8013d7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013d5e:	4b14      	ldr	r3, [pc, #80]	; (8013db0 <tcp_kill_state+0x90>)
 8013d60:	681a      	ldr	r2, [r3, #0]
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	6a1b      	ldr	r3, [r3, #32]
 8013d66:	1ad3      	subs	r3, r2, r3
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d807      	bhi.n	8013d7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013d6e:	4b10      	ldr	r3, [pc, #64]	; (8013db0 <tcp_kill_state+0x90>)
 8013d70:	681a      	ldr	r2, [r3, #0]
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	6a1b      	ldr	r3, [r3, #32]
 8013d76:	1ad3      	subs	r3, r2, r3
 8013d78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	68db      	ldr	r3, [r3, #12]
 8013d82:	617b      	str	r3, [r7, #20]
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d1e4      	bne.n	8013d54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d003      	beq.n	8013d98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013d90:	2100      	movs	r1, #0
 8013d92:	6938      	ldr	r0, [r7, #16]
 8013d94:	f7ff f952 	bl	801303c <tcp_abandon>
  }
}
 8013d98:	bf00      	nop
 8013d9a:	3718      	adds	r7, #24
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	080200cc 	.word	0x080200cc
 8013da4:	08020684 	.word	0x08020684
 8013da8:	0802013c 	.word	0x0802013c
 8013dac:	24003df0 	.word	0x24003df0
 8013db0:	24003df4 	.word	0x24003df4

08013db4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dc2:	4b12      	ldr	r3, [pc, #72]	; (8013e0c <tcp_kill_timewait+0x58>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	60fb      	str	r3, [r7, #12]
 8013dc8:	e012      	b.n	8013df0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013dca:	4b11      	ldr	r3, [pc, #68]	; (8013e10 <tcp_kill_timewait+0x5c>)
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	6a1b      	ldr	r3, [r3, #32]
 8013dd2:	1ad3      	subs	r3, r2, r3
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d807      	bhi.n	8013dea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013dda:	4b0d      	ldr	r3, [pc, #52]	; (8013e10 <tcp_kill_timewait+0x5c>)
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	6a1b      	ldr	r3, [r3, #32]
 8013de2:	1ad3      	subs	r3, r2, r3
 8013de4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	68db      	ldr	r3, [r3, #12]
 8013dee:	60fb      	str	r3, [r7, #12]
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d1e9      	bne.n	8013dca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d002      	beq.n	8013e02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013dfc:	68b8      	ldr	r0, [r7, #8]
 8013dfe:	f7ff f9db 	bl	80131b8 <tcp_abort>
  }
}
 8013e02:	bf00      	nop
 8013e04:	3710      	adds	r7, #16
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	24003e00 	.word	0x24003e00
 8013e10:	24003df4 	.word	0x24003df4

08013e14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8013e1a:	4b10      	ldr	r3, [pc, #64]	; (8013e5c <tcp_handle_closepend+0x48>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013e20:	e014      	b.n	8013e4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	68db      	ldr	r3, [r3, #12]
 8013e26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	8b5b      	ldrh	r3, [r3, #26]
 8013e2c:	f003 0308 	and.w	r3, r3, #8
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d009      	beq.n	8013e48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	8b5b      	ldrh	r3, [r3, #26]
 8013e38:	f023 0308 	bic.w	r3, r3, #8
 8013e3c:	b29a      	uxth	r2, r3
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f7ff f864 	bl	8012f10 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d1e7      	bne.n	8013e22 <tcp_handle_closepend+0xe>
  }
}
 8013e52:	bf00      	nop
 8013e54:	bf00      	nop
 8013e56:	3708      	adds	r7, #8
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	24003df0 	.word	0x24003df0

08013e60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b084      	sub	sp, #16
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	4603      	mov	r3, r0
 8013e68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013e6a:	2001      	movs	r0, #1
 8013e6c:	f7fd fd7a 	bl	8011964 <memp_malloc>
 8013e70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d126      	bne.n	8013ec6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013e78:	f7ff ffcc 	bl	8013e14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013e7c:	f7ff ff9a 	bl	8013db4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013e80:	2001      	movs	r0, #1
 8013e82:	f7fd fd6f 	bl	8011964 <memp_malloc>
 8013e86:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d11b      	bne.n	8013ec6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013e8e:	2009      	movs	r0, #9
 8013e90:	f7ff ff46 	bl	8013d20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013e94:	2001      	movs	r0, #1
 8013e96:	f7fd fd65 	bl	8011964 <memp_malloc>
 8013e9a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d111      	bne.n	8013ec6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013ea2:	2008      	movs	r0, #8
 8013ea4:	f7ff ff3c 	bl	8013d20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ea8:	2001      	movs	r0, #1
 8013eaa:	f7fd fd5b 	bl	8011964 <memp_malloc>
 8013eae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d107      	bne.n	8013ec6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013eb6:	79fb      	ldrb	r3, [r7, #7]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7ff fee3 	bl	8013c84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013ebe:	2001      	movs	r0, #1
 8013ec0:	f7fd fd50 	bl	8011964 <memp_malloc>
 8013ec4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d03f      	beq.n	8013f4c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013ecc:	229c      	movs	r2, #156	; 0x9c
 8013ece:	2100      	movs	r1, #0
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f006 fa1d 	bl	801a310 <memset>
    pcb->prio = prio;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	79fa      	ldrb	r2, [r7, #7]
 8013eda:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013ee2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013eec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	22ff      	movs	r2, #255	; 0xff
 8013efa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013f02:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	2206      	movs	r2, #6
 8013f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	2206      	movs	r2, #6
 8013f10:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f18:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	2201      	movs	r2, #1
 8013f1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013f22:	4b0d      	ldr	r3, [pc, #52]	; (8013f58 <tcp_alloc+0xf8>)
 8013f24:	681a      	ldr	r2, [r3, #0]
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013f2a:	4b0c      	ldr	r3, [pc, #48]	; (8013f5c <tcp_alloc+0xfc>)
 8013f2c:	781a      	ldrb	r2, [r3, #0]
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013f38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	4a08      	ldr	r2, [pc, #32]	; (8013f60 <tcp_alloc+0x100>)
 8013f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	4a07      	ldr	r2, [pc, #28]	; (8013f64 <tcp_alloc+0x104>)
 8013f48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
}
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3710      	adds	r7, #16
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}
 8013f56:	bf00      	nop
 8013f58:	24003df4 	.word	0x24003df4
 8013f5c:	24000766 	.word	0x24000766
 8013f60:	08013c19 	.word	0x08013c19
 8013f64:	006ddd00 	.word	0x006ddd00

08013f68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d107      	bne.n	8013f86 <tcp_pcb_purge+0x1e>
 8013f76:	4b21      	ldr	r3, [pc, #132]	; (8013ffc <tcp_pcb_purge+0x94>)
 8013f78:	f640 0251 	movw	r2, #2129	; 0x851
 8013f7c:	4920      	ldr	r1, [pc, #128]	; (8014000 <tcp_pcb_purge+0x98>)
 8013f7e:	4821      	ldr	r0, [pc, #132]	; (8014004 <tcp_pcb_purge+0x9c>)
 8013f80:	f007 f8c0 	bl	801b104 <iprintf>
 8013f84:	e037      	b.n	8013ff6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	7d1b      	ldrb	r3, [r3, #20]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d033      	beq.n	8013ff6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013f92:	2b0a      	cmp	r3, #10
 8013f94:	d02f      	beq.n	8013ff6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	d02b      	beq.n	8013ff6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d007      	beq.n	8013fb6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fe fb7c 	bl	80126a8 <pbuf_free>
      pcb->refused_data = NULL;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d002      	beq.n	8013fc4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f000 f986 	bl	80142d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013fca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7ff fdc7 	bl	8013b64 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7ff fdc2 	bl	8013b64 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	66da      	str	r2, [r3, #108]	; 0x6c
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013ff6:	3708      	adds	r7, #8
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	080200cc 	.word	0x080200cc
 8014000:	08020744 	.word	0x08020744
 8014004:	0802013c 	.word	0x0802013c

08014008 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d106      	bne.n	8014026 <tcp_pcb_remove+0x1e>
 8014018:	4b3e      	ldr	r3, [pc, #248]	; (8014114 <tcp_pcb_remove+0x10c>)
 801401a:	f640 0283 	movw	r2, #2179	; 0x883
 801401e:	493e      	ldr	r1, [pc, #248]	; (8014118 <tcp_pcb_remove+0x110>)
 8014020:	483e      	ldr	r0, [pc, #248]	; (801411c <tcp_pcb_remove+0x114>)
 8014022:	f007 f86f 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d106      	bne.n	801403a <tcp_pcb_remove+0x32>
 801402c:	4b39      	ldr	r3, [pc, #228]	; (8014114 <tcp_pcb_remove+0x10c>)
 801402e:	f640 0284 	movw	r2, #2180	; 0x884
 8014032:	493b      	ldr	r1, [pc, #236]	; (8014120 <tcp_pcb_remove+0x118>)
 8014034:	4839      	ldr	r0, [pc, #228]	; (801411c <tcp_pcb_remove+0x114>)
 8014036:	f007 f865 	bl	801b104 <iprintf>

  TCP_RMV(pcblist, pcb);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	683a      	ldr	r2, [r7, #0]
 8014040:	429a      	cmp	r2, r3
 8014042:	d105      	bne.n	8014050 <tcp_pcb_remove+0x48>
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	68da      	ldr	r2, [r3, #12]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	601a      	str	r2, [r3, #0]
 801404e:	e013      	b.n	8014078 <tcp_pcb_remove+0x70>
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	60fb      	str	r3, [r7, #12]
 8014056:	e00c      	b.n	8014072 <tcp_pcb_remove+0x6a>
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	683a      	ldr	r2, [r7, #0]
 801405e:	429a      	cmp	r2, r3
 8014060:	d104      	bne.n	801406c <tcp_pcb_remove+0x64>
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	68da      	ldr	r2, [r3, #12]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	60da      	str	r2, [r3, #12]
 801406a:	e005      	b.n	8014078 <tcp_pcb_remove+0x70>
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	60fb      	str	r3, [r7, #12]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d1ef      	bne.n	8014058 <tcp_pcb_remove+0x50>
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	2200      	movs	r2, #0
 801407c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801407e:	6838      	ldr	r0, [r7, #0]
 8014080:	f7ff ff72 	bl	8013f68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	7d1b      	ldrb	r3, [r3, #20]
 8014088:	2b0a      	cmp	r3, #10
 801408a:	d013      	beq.n	80140b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014090:	2b01      	cmp	r3, #1
 8014092:	d00f      	beq.n	80140b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	8b5b      	ldrh	r3, [r3, #26]
 8014098:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801409c:	2b00      	cmp	r3, #0
 801409e:	d009      	beq.n	80140b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	8b5b      	ldrh	r3, [r3, #26]
 80140a4:	f043 0302 	orr.w	r3, r3, #2
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80140ae:	6838      	ldr	r0, [r7, #0]
 80140b0:	f002 ff6a 	bl	8016f88 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	7d1b      	ldrb	r3, [r3, #20]
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d020      	beq.n	80140fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d006      	beq.n	80140d2 <tcp_pcb_remove+0xca>
 80140c4:	4b13      	ldr	r3, [pc, #76]	; (8014114 <tcp_pcb_remove+0x10c>)
 80140c6:	f640 0293 	movw	r2, #2195	; 0x893
 80140ca:	4916      	ldr	r1, [pc, #88]	; (8014124 <tcp_pcb_remove+0x11c>)
 80140cc:	4813      	ldr	r0, [pc, #76]	; (801411c <tcp_pcb_remove+0x114>)
 80140ce:	f007 f819 	bl	801b104 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d006      	beq.n	80140e8 <tcp_pcb_remove+0xe0>
 80140da:	4b0e      	ldr	r3, [pc, #56]	; (8014114 <tcp_pcb_remove+0x10c>)
 80140dc:	f640 0294 	movw	r2, #2196	; 0x894
 80140e0:	4911      	ldr	r1, [pc, #68]	; (8014128 <tcp_pcb_remove+0x120>)
 80140e2:	480e      	ldr	r0, [pc, #56]	; (801411c <tcp_pcb_remove+0x114>)
 80140e4:	f007 f80e 	bl	801b104 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d006      	beq.n	80140fe <tcp_pcb_remove+0xf6>
 80140f0:	4b08      	ldr	r3, [pc, #32]	; (8014114 <tcp_pcb_remove+0x10c>)
 80140f2:	f640 0296 	movw	r2, #2198	; 0x896
 80140f6:	490d      	ldr	r1, [pc, #52]	; (801412c <tcp_pcb_remove+0x124>)
 80140f8:	4808      	ldr	r0, [pc, #32]	; (801411c <tcp_pcb_remove+0x114>)
 80140fa:	f007 f803 	bl	801b104 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	2200      	movs	r2, #0
 8014102:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	2200      	movs	r2, #0
 8014108:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801410a:	bf00      	nop
 801410c:	3710      	adds	r7, #16
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	080200cc 	.word	0x080200cc
 8014118:	08020760 	.word	0x08020760
 801411c:	0802013c 	.word	0x0802013c
 8014120:	0802077c 	.word	0x0802077c
 8014124:	0802079c 	.word	0x0802079c
 8014128:	080207b4 	.word	0x080207b4
 801412c:	080207d0 	.word	0x080207d0

08014130 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d106      	bne.n	801414c <tcp_next_iss+0x1c>
 801413e:	4b0a      	ldr	r3, [pc, #40]	; (8014168 <tcp_next_iss+0x38>)
 8014140:	f640 02af 	movw	r2, #2223	; 0x8af
 8014144:	4909      	ldr	r1, [pc, #36]	; (801416c <tcp_next_iss+0x3c>)
 8014146:	480a      	ldr	r0, [pc, #40]	; (8014170 <tcp_next_iss+0x40>)
 8014148:	f006 ffdc 	bl	801b104 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801414c:	4b09      	ldr	r3, [pc, #36]	; (8014174 <tcp_next_iss+0x44>)
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	4b09      	ldr	r3, [pc, #36]	; (8014178 <tcp_next_iss+0x48>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	4413      	add	r3, r2
 8014156:	4a07      	ldr	r2, [pc, #28]	; (8014174 <tcp_next_iss+0x44>)
 8014158:	6013      	str	r3, [r2, #0]
  return iss;
 801415a:	4b06      	ldr	r3, [pc, #24]	; (8014174 <tcp_next_iss+0x44>)
 801415c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801415e:	4618      	mov	r0, r3
 8014160:	3708      	adds	r7, #8
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	080200cc 	.word	0x080200cc
 801416c:	080207e8 	.word	0x080207e8
 8014170:	0802013c 	.word	0x0802013c
 8014174:	24000428 	.word	0x24000428
 8014178:	24003df4 	.word	0x24003df4

0801417c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b086      	sub	sp, #24
 8014180:	af00      	add	r7, sp, #0
 8014182:	4603      	mov	r3, r0
 8014184:	60b9      	str	r1, [r7, #8]
 8014186:	607a      	str	r2, [r7, #4]
 8014188:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d106      	bne.n	801419e <tcp_eff_send_mss_netif+0x22>
 8014190:	4b14      	ldr	r3, [pc, #80]	; (80141e4 <tcp_eff_send_mss_netif+0x68>)
 8014192:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014196:	4914      	ldr	r1, [pc, #80]	; (80141e8 <tcp_eff_send_mss_netif+0x6c>)
 8014198:	4814      	ldr	r0, [pc, #80]	; (80141ec <tcp_eff_send_mss_netif+0x70>)
 801419a:	f006 ffb3 	bl	801b104 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d101      	bne.n	80141a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80141a4:	89fb      	ldrh	r3, [r7, #14]
 80141a6:	e019      	b.n	80141dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80141ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80141ae:	8afb      	ldrh	r3, [r7, #22]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d012      	beq.n	80141da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80141b4:	2328      	movs	r3, #40	; 0x28
 80141b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80141b8:	8afa      	ldrh	r2, [r7, #22]
 80141ba:	8abb      	ldrh	r3, [r7, #20]
 80141bc:	429a      	cmp	r2, r3
 80141be:	d904      	bls.n	80141ca <tcp_eff_send_mss_netif+0x4e>
 80141c0:	8afa      	ldrh	r2, [r7, #22]
 80141c2:	8abb      	ldrh	r3, [r7, #20]
 80141c4:	1ad3      	subs	r3, r2, r3
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	e000      	b.n	80141cc <tcp_eff_send_mss_netif+0x50>
 80141ca:	2300      	movs	r3, #0
 80141cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80141ce:	8a7a      	ldrh	r2, [r7, #18]
 80141d0:	89fb      	ldrh	r3, [r7, #14]
 80141d2:	4293      	cmp	r3, r2
 80141d4:	bf28      	it	cs
 80141d6:	4613      	movcs	r3, r2
 80141d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80141da:	89fb      	ldrh	r3, [r7, #14]
}
 80141dc:	4618      	mov	r0, r3
 80141de:	3718      	adds	r7, #24
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}
 80141e4:	080200cc 	.word	0x080200cc
 80141e8:	08020804 	.word	0x08020804
 80141ec:	0802013c 	.word	0x0802013c

080141f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d119      	bne.n	8014238 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014204:	4b10      	ldr	r3, [pc, #64]	; (8014248 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014206:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801420a:	4910      	ldr	r1, [pc, #64]	; (801424c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801420c:	4810      	ldr	r0, [pc, #64]	; (8014250 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801420e:	f006 ff79 	bl	801b104 <iprintf>

  while (pcb != NULL) {
 8014212:	e011      	b.n	8014238 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	681a      	ldr	r2, [r3, #0]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	429a      	cmp	r2, r3
 801421e:	d108      	bne.n	8014232 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	68db      	ldr	r3, [r3, #12]
 8014224:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014226:	68f8      	ldr	r0, [r7, #12]
 8014228:	f7fe ffc6 	bl	80131b8 <tcp_abort>
      pcb = next;
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	60fb      	str	r3, [r7, #12]
 8014230:	e002      	b.n	8014238 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	68db      	ldr	r3, [r3, #12]
 8014236:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d1ea      	bne.n	8014214 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801423e:	bf00      	nop
 8014240:	bf00      	nop
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}
 8014248:	080200cc 	.word	0x080200cc
 801424c:	0802082c 	.word	0x0802082c
 8014250:	0802013c 	.word	0x0802013c

08014254 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b084      	sub	sp, #16
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d02a      	beq.n	80142ba <tcp_netif_ip_addr_changed+0x66>
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d026      	beq.n	80142ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801426c:	4b15      	ldr	r3, [pc, #84]	; (80142c4 <tcp_netif_ip_addr_changed+0x70>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	4619      	mov	r1, r3
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f7ff ffbc 	bl	80141f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014278:	4b13      	ldr	r3, [pc, #76]	; (80142c8 <tcp_netif_ip_addr_changed+0x74>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	4619      	mov	r1, r3
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f7ff ffb6 	bl	80141f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d017      	beq.n	80142ba <tcp_netif_ip_addr_changed+0x66>
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d013      	beq.n	80142ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014292:	4b0e      	ldr	r3, [pc, #56]	; (80142cc <tcp_netif_ip_addr_changed+0x78>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	60fb      	str	r3, [r7, #12]
 8014298:	e00c      	b.n	80142b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d103      	bne.n	80142ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	68db      	ldr	r3, [r3, #12]
 80142b2:	60fb      	str	r3, [r7, #12]
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d1ef      	bne.n	801429a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80142ba:	bf00      	nop
 80142bc:	3710      	adds	r7, #16
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	24003df0 	.word	0x24003df0
 80142c8:	24003dfc 	.word	0x24003dfc
 80142cc:	24003df8 	.word	0x24003df8

080142d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d007      	beq.n	80142f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7ff fc3d 	bl	8013b64 <tcp_segs_free>
    pcb->ooseq = NULL;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2200      	movs	r2, #0
 80142ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80142f0:	bf00      	nop
 80142f2:	3708      	adds	r7, #8
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80142f8:	b590      	push	{r4, r7, lr}
 80142fa:	b08d      	sub	sp, #52	; 0x34
 80142fc:	af04      	add	r7, sp, #16
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d105      	bne.n	8014314 <tcp_input+0x1c>
 8014308:	4b9b      	ldr	r3, [pc, #620]	; (8014578 <tcp_input+0x280>)
 801430a:	2283      	movs	r2, #131	; 0x83
 801430c:	499b      	ldr	r1, [pc, #620]	; (801457c <tcp_input+0x284>)
 801430e:	489c      	ldr	r0, [pc, #624]	; (8014580 <tcp_input+0x288>)
 8014310:	f006 fef8 	bl	801b104 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	685b      	ldr	r3, [r3, #4]
 8014318:	4a9a      	ldr	r2, [pc, #616]	; (8014584 <tcp_input+0x28c>)
 801431a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	895b      	ldrh	r3, [r3, #10]
 8014320:	2b13      	cmp	r3, #19
 8014322:	f240 83c4 	bls.w	8014aae <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014326:	4b98      	ldr	r3, [pc, #608]	; (8014588 <tcp_input+0x290>)
 8014328:	695b      	ldr	r3, [r3, #20]
 801432a:	4a97      	ldr	r2, [pc, #604]	; (8014588 <tcp_input+0x290>)
 801432c:	6812      	ldr	r2, [r2, #0]
 801432e:	4611      	mov	r1, r2
 8014330:	4618      	mov	r0, r3
 8014332:	f7fc f88f 	bl	8010454 <ip4_addr_isbroadcast_u32>
 8014336:	4603      	mov	r3, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	f040 83ba 	bne.w	8014ab2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801433e:	4b92      	ldr	r3, [pc, #584]	; (8014588 <tcp_input+0x290>)
 8014340:	695b      	ldr	r3, [r3, #20]
 8014342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014346:	2be0      	cmp	r3, #224	; 0xe0
 8014348:	f000 83b3 	beq.w	8014ab2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801434c:	4b8d      	ldr	r3, [pc, #564]	; (8014584 <tcp_input+0x28c>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	899b      	ldrh	r3, [r3, #12]
 8014352:	b29b      	uxth	r3, r3
 8014354:	4618      	mov	r0, r3
 8014356:	f7fa fb11 	bl	800e97c <lwip_htons>
 801435a:	4603      	mov	r3, r0
 801435c:	0b1b      	lsrs	r3, r3, #12
 801435e:	b29b      	uxth	r3, r3
 8014360:	b2db      	uxtb	r3, r3
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014366:	7cbb      	ldrb	r3, [r7, #18]
 8014368:	2b13      	cmp	r3, #19
 801436a:	f240 83a4 	bls.w	8014ab6 <tcp_input+0x7be>
 801436e:	7cbb      	ldrb	r3, [r7, #18]
 8014370:	b29a      	uxth	r2, r3
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	891b      	ldrh	r3, [r3, #8]
 8014376:	429a      	cmp	r2, r3
 8014378:	f200 839d 	bhi.w	8014ab6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801437c:	7cbb      	ldrb	r3, [r7, #18]
 801437e:	b29b      	uxth	r3, r3
 8014380:	3b14      	subs	r3, #20
 8014382:	b29a      	uxth	r2, r3
 8014384:	4b81      	ldr	r3, [pc, #516]	; (801458c <tcp_input+0x294>)
 8014386:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014388:	4b81      	ldr	r3, [pc, #516]	; (8014590 <tcp_input+0x298>)
 801438a:	2200      	movs	r2, #0
 801438c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	895a      	ldrh	r2, [r3, #10]
 8014392:	7cbb      	ldrb	r3, [r7, #18]
 8014394:	b29b      	uxth	r3, r3
 8014396:	429a      	cmp	r2, r3
 8014398:	d309      	bcc.n	80143ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801439a:	4b7c      	ldr	r3, [pc, #496]	; (801458c <tcp_input+0x294>)
 801439c:	881a      	ldrh	r2, [r3, #0]
 801439e:	4b7d      	ldr	r3, [pc, #500]	; (8014594 <tcp_input+0x29c>)
 80143a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80143a2:	7cbb      	ldrb	r3, [r7, #18]
 80143a4:	4619      	mov	r1, r3
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f7fe f8f8 	bl	801259c <pbuf_remove_header>
 80143ac:	e04e      	b.n	801444c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d105      	bne.n	80143c2 <tcp_input+0xca>
 80143b6:	4b70      	ldr	r3, [pc, #448]	; (8014578 <tcp_input+0x280>)
 80143b8:	22c2      	movs	r2, #194	; 0xc2
 80143ba:	4977      	ldr	r1, [pc, #476]	; (8014598 <tcp_input+0x2a0>)
 80143bc:	4870      	ldr	r0, [pc, #448]	; (8014580 <tcp_input+0x288>)
 80143be:	f006 fea1 	bl	801b104 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80143c2:	2114      	movs	r1, #20
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f7fe f8e9 	bl	801259c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	895a      	ldrh	r2, [r3, #10]
 80143ce:	4b71      	ldr	r3, [pc, #452]	; (8014594 <tcp_input+0x29c>)
 80143d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80143d2:	4b6e      	ldr	r3, [pc, #440]	; (801458c <tcp_input+0x294>)
 80143d4:	881a      	ldrh	r2, [r3, #0]
 80143d6:	4b6f      	ldr	r3, [pc, #444]	; (8014594 <tcp_input+0x29c>)
 80143d8:	881b      	ldrh	r3, [r3, #0]
 80143da:	1ad3      	subs	r3, r2, r3
 80143dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80143de:	4b6d      	ldr	r3, [pc, #436]	; (8014594 <tcp_input+0x29c>)
 80143e0:	881b      	ldrh	r3, [r3, #0]
 80143e2:	4619      	mov	r1, r3
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7fe f8d9 	bl	801259c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	895b      	ldrh	r3, [r3, #10]
 80143f0:	8a3a      	ldrh	r2, [r7, #16]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	f200 8361 	bhi.w	8014aba <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	4a64      	ldr	r2, [pc, #400]	; (8014590 <tcp_input+0x298>)
 8014400:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	8a3a      	ldrh	r2, [r7, #16]
 8014408:	4611      	mov	r1, r2
 801440a:	4618      	mov	r0, r3
 801440c:	f7fe f8c6 	bl	801259c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	891a      	ldrh	r2, [r3, #8]
 8014414:	8a3b      	ldrh	r3, [r7, #16]
 8014416:	1ad3      	subs	r3, r2, r3
 8014418:	b29a      	uxth	r2, r3
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	895b      	ldrh	r3, [r3, #10]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d005      	beq.n	8014432 <tcp_input+0x13a>
 8014426:	4b54      	ldr	r3, [pc, #336]	; (8014578 <tcp_input+0x280>)
 8014428:	22df      	movs	r2, #223	; 0xdf
 801442a:	495c      	ldr	r1, [pc, #368]	; (801459c <tcp_input+0x2a4>)
 801442c:	4854      	ldr	r0, [pc, #336]	; (8014580 <tcp_input+0x288>)
 801442e:	f006 fe69 	bl	801b104 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	891a      	ldrh	r2, [r3, #8]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	891b      	ldrh	r3, [r3, #8]
 801443c:	429a      	cmp	r2, r3
 801443e:	d005      	beq.n	801444c <tcp_input+0x154>
 8014440:	4b4d      	ldr	r3, [pc, #308]	; (8014578 <tcp_input+0x280>)
 8014442:	22e0      	movs	r2, #224	; 0xe0
 8014444:	4956      	ldr	r1, [pc, #344]	; (80145a0 <tcp_input+0x2a8>)
 8014446:	484e      	ldr	r0, [pc, #312]	; (8014580 <tcp_input+0x288>)
 8014448:	f006 fe5c 	bl	801b104 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801444c:	4b4d      	ldr	r3, [pc, #308]	; (8014584 <tcp_input+0x28c>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	881b      	ldrh	r3, [r3, #0]
 8014452:	b29b      	uxth	r3, r3
 8014454:	4a4b      	ldr	r2, [pc, #300]	; (8014584 <tcp_input+0x28c>)
 8014456:	6814      	ldr	r4, [r2, #0]
 8014458:	4618      	mov	r0, r3
 801445a:	f7fa fa8f 	bl	800e97c <lwip_htons>
 801445e:	4603      	mov	r3, r0
 8014460:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014462:	4b48      	ldr	r3, [pc, #288]	; (8014584 <tcp_input+0x28c>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	885b      	ldrh	r3, [r3, #2]
 8014468:	b29b      	uxth	r3, r3
 801446a:	4a46      	ldr	r2, [pc, #280]	; (8014584 <tcp_input+0x28c>)
 801446c:	6814      	ldr	r4, [r2, #0]
 801446e:	4618      	mov	r0, r3
 8014470:	f7fa fa84 	bl	800e97c <lwip_htons>
 8014474:	4603      	mov	r3, r0
 8014476:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014478:	4b42      	ldr	r3, [pc, #264]	; (8014584 <tcp_input+0x28c>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	4a41      	ldr	r2, [pc, #260]	; (8014584 <tcp_input+0x28c>)
 8014480:	6814      	ldr	r4, [r2, #0]
 8014482:	4618      	mov	r0, r3
 8014484:	f7fa fa8f 	bl	800e9a6 <lwip_htonl>
 8014488:	4603      	mov	r3, r0
 801448a:	6063      	str	r3, [r4, #4]
 801448c:	6863      	ldr	r3, [r4, #4]
 801448e:	4a45      	ldr	r2, [pc, #276]	; (80145a4 <tcp_input+0x2ac>)
 8014490:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014492:	4b3c      	ldr	r3, [pc, #240]	; (8014584 <tcp_input+0x28c>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	689b      	ldr	r3, [r3, #8]
 8014498:	4a3a      	ldr	r2, [pc, #232]	; (8014584 <tcp_input+0x28c>)
 801449a:	6814      	ldr	r4, [r2, #0]
 801449c:	4618      	mov	r0, r3
 801449e:	f7fa fa82 	bl	800e9a6 <lwip_htonl>
 80144a2:	4603      	mov	r3, r0
 80144a4:	60a3      	str	r3, [r4, #8]
 80144a6:	68a3      	ldr	r3, [r4, #8]
 80144a8:	4a3f      	ldr	r2, [pc, #252]	; (80145a8 <tcp_input+0x2b0>)
 80144aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80144ac:	4b35      	ldr	r3, [pc, #212]	; (8014584 <tcp_input+0x28c>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	89db      	ldrh	r3, [r3, #14]
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	4a33      	ldr	r2, [pc, #204]	; (8014584 <tcp_input+0x28c>)
 80144b6:	6814      	ldr	r4, [r2, #0]
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7fa fa5f 	bl	800e97c <lwip_htons>
 80144be:	4603      	mov	r3, r0
 80144c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80144c2:	4b30      	ldr	r3, [pc, #192]	; (8014584 <tcp_input+0x28c>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	899b      	ldrh	r3, [r3, #12]
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7fa fa56 	bl	800e97c <lwip_htons>
 80144d0:	4603      	mov	r3, r0
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80144d8:	b2da      	uxtb	r2, r3
 80144da:	4b34      	ldr	r3, [pc, #208]	; (80145ac <tcp_input+0x2b4>)
 80144dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	891a      	ldrh	r2, [r3, #8]
 80144e2:	4b33      	ldr	r3, [pc, #204]	; (80145b0 <tcp_input+0x2b8>)
 80144e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80144e6:	4b31      	ldr	r3, [pc, #196]	; (80145ac <tcp_input+0x2b4>)
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	f003 0303 	and.w	r3, r3, #3
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00c      	beq.n	801450c <tcp_input+0x214>
    tcplen++;
 80144f2:	4b2f      	ldr	r3, [pc, #188]	; (80145b0 <tcp_input+0x2b8>)
 80144f4:	881b      	ldrh	r3, [r3, #0]
 80144f6:	3301      	adds	r3, #1
 80144f8:	b29a      	uxth	r2, r3
 80144fa:	4b2d      	ldr	r3, [pc, #180]	; (80145b0 <tcp_input+0x2b8>)
 80144fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	891a      	ldrh	r2, [r3, #8]
 8014502:	4b2b      	ldr	r3, [pc, #172]	; (80145b0 <tcp_input+0x2b8>)
 8014504:	881b      	ldrh	r3, [r3, #0]
 8014506:	429a      	cmp	r2, r3
 8014508:	f200 82d9 	bhi.w	8014abe <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801450c:	2300      	movs	r3, #0
 801450e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014510:	4b28      	ldr	r3, [pc, #160]	; (80145b4 <tcp_input+0x2bc>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	61fb      	str	r3, [r7, #28]
 8014516:	e09d      	b.n	8014654 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	7d1b      	ldrb	r3, [r3, #20]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d105      	bne.n	801452c <tcp_input+0x234>
 8014520:	4b15      	ldr	r3, [pc, #84]	; (8014578 <tcp_input+0x280>)
 8014522:	22fb      	movs	r2, #251	; 0xfb
 8014524:	4924      	ldr	r1, [pc, #144]	; (80145b8 <tcp_input+0x2c0>)
 8014526:	4816      	ldr	r0, [pc, #88]	; (8014580 <tcp_input+0x288>)
 8014528:	f006 fdec 	bl	801b104 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	7d1b      	ldrb	r3, [r3, #20]
 8014530:	2b0a      	cmp	r3, #10
 8014532:	d105      	bne.n	8014540 <tcp_input+0x248>
 8014534:	4b10      	ldr	r3, [pc, #64]	; (8014578 <tcp_input+0x280>)
 8014536:	22fc      	movs	r2, #252	; 0xfc
 8014538:	4920      	ldr	r1, [pc, #128]	; (80145bc <tcp_input+0x2c4>)
 801453a:	4811      	ldr	r0, [pc, #68]	; (8014580 <tcp_input+0x288>)
 801453c:	f006 fde2 	bl	801b104 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014540:	69fb      	ldr	r3, [r7, #28]
 8014542:	7d1b      	ldrb	r3, [r3, #20]
 8014544:	2b01      	cmp	r3, #1
 8014546:	d105      	bne.n	8014554 <tcp_input+0x25c>
 8014548:	4b0b      	ldr	r3, [pc, #44]	; (8014578 <tcp_input+0x280>)
 801454a:	22fd      	movs	r2, #253	; 0xfd
 801454c:	491c      	ldr	r1, [pc, #112]	; (80145c0 <tcp_input+0x2c8>)
 801454e:	480c      	ldr	r0, [pc, #48]	; (8014580 <tcp_input+0x288>)
 8014550:	f006 fdd8 	bl	801b104 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014554:	69fb      	ldr	r3, [r7, #28]
 8014556:	7a1b      	ldrb	r3, [r3, #8]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d033      	beq.n	80145c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	7a1a      	ldrb	r2, [r3, #8]
 8014560:	4b09      	ldr	r3, [pc, #36]	; (8014588 <tcp_input+0x290>)
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014568:	3301      	adds	r3, #1
 801456a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801456c:	429a      	cmp	r2, r3
 801456e:	d029      	beq.n	80145c4 <tcp_input+0x2cc>
      prev = pcb;
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	61bb      	str	r3, [r7, #24]
      continue;
 8014574:	e06b      	b.n	801464e <tcp_input+0x356>
 8014576:	bf00      	nop
 8014578:	08020860 	.word	0x08020860
 801457c:	080208c0 	.word	0x080208c0
 8014580:	080208d8 	.word	0x080208d8
 8014584:	24000778 	.word	0x24000778
 8014588:	24000f00 	.word	0x24000f00
 801458c:	2400077c 	.word	0x2400077c
 8014590:	24000780 	.word	0x24000780
 8014594:	2400077e 	.word	0x2400077e
 8014598:	08020900 	.word	0x08020900
 801459c:	08020910 	.word	0x08020910
 80145a0:	0802091c 	.word	0x0802091c
 80145a4:	24000788 	.word	0x24000788
 80145a8:	2400078c 	.word	0x2400078c
 80145ac:	24000794 	.word	0x24000794
 80145b0:	24000792 	.word	0x24000792
 80145b4:	24003df0 	.word	0x24003df0
 80145b8:	0802093c 	.word	0x0802093c
 80145bc:	08020964 	.word	0x08020964
 80145c0:	08020990 	.word	0x08020990
    }

    if (pcb->remote_port == tcphdr->src &&
 80145c4:	69fb      	ldr	r3, [r7, #28]
 80145c6:	8b1a      	ldrh	r2, [r3, #24]
 80145c8:	4b94      	ldr	r3, [pc, #592]	; (801481c <tcp_input+0x524>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d13a      	bne.n	801464a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80145d4:	69fb      	ldr	r3, [r7, #28]
 80145d6:	8ada      	ldrh	r2, [r3, #22]
 80145d8:	4b90      	ldr	r3, [pc, #576]	; (801481c <tcp_input+0x524>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	885b      	ldrh	r3, [r3, #2]
 80145de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d132      	bne.n	801464a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145e4:	69fb      	ldr	r3, [r7, #28]
 80145e6:	685a      	ldr	r2, [r3, #4]
 80145e8:	4b8d      	ldr	r3, [pc, #564]	; (8014820 <tcp_input+0x528>)
 80145ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80145ec:	429a      	cmp	r2, r3
 80145ee:	d12c      	bne.n	801464a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	681a      	ldr	r2, [r3, #0]
 80145f4:	4b8a      	ldr	r3, [pc, #552]	; (8014820 <tcp_input+0x528>)
 80145f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d126      	bne.n	801464a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	69fa      	ldr	r2, [r7, #28]
 8014602:	429a      	cmp	r2, r3
 8014604:	d106      	bne.n	8014614 <tcp_input+0x31c>
 8014606:	4b87      	ldr	r3, [pc, #540]	; (8014824 <tcp_input+0x52c>)
 8014608:	f240 120d 	movw	r2, #269	; 0x10d
 801460c:	4986      	ldr	r1, [pc, #536]	; (8014828 <tcp_input+0x530>)
 801460e:	4887      	ldr	r0, [pc, #540]	; (801482c <tcp_input+0x534>)
 8014610:	f006 fd78 	bl	801b104 <iprintf>
      if (prev != NULL) {
 8014614:	69bb      	ldr	r3, [r7, #24]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d00a      	beq.n	8014630 <tcp_input+0x338>
        prev->next = pcb->next;
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	68da      	ldr	r2, [r3, #12]
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014622:	4b83      	ldr	r3, [pc, #524]	; (8014830 <tcp_input+0x538>)
 8014624:	681a      	ldr	r2, [r3, #0]
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801462a:	4a81      	ldr	r2, [pc, #516]	; (8014830 <tcp_input+0x538>)
 801462c:	69fb      	ldr	r3, [r7, #28]
 801462e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014630:	69fb      	ldr	r3, [r7, #28]
 8014632:	68db      	ldr	r3, [r3, #12]
 8014634:	69fa      	ldr	r2, [r7, #28]
 8014636:	429a      	cmp	r2, r3
 8014638:	d111      	bne.n	801465e <tcp_input+0x366>
 801463a:	4b7a      	ldr	r3, [pc, #488]	; (8014824 <tcp_input+0x52c>)
 801463c:	f240 1215 	movw	r2, #277	; 0x115
 8014640:	497c      	ldr	r1, [pc, #496]	; (8014834 <tcp_input+0x53c>)
 8014642:	487a      	ldr	r0, [pc, #488]	; (801482c <tcp_input+0x534>)
 8014644:	f006 fd5e 	bl	801b104 <iprintf>
      break;
 8014648:	e009      	b.n	801465e <tcp_input+0x366>
    }
    prev = pcb;
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801464e:	69fb      	ldr	r3, [r7, #28]
 8014650:	68db      	ldr	r3, [r3, #12]
 8014652:	61fb      	str	r3, [r7, #28]
 8014654:	69fb      	ldr	r3, [r7, #28]
 8014656:	2b00      	cmp	r3, #0
 8014658:	f47f af5e 	bne.w	8014518 <tcp_input+0x220>
 801465c:	e000      	b.n	8014660 <tcp_input+0x368>
      break;
 801465e:	bf00      	nop
  }

  if (pcb == NULL) {
 8014660:	69fb      	ldr	r3, [r7, #28]
 8014662:	2b00      	cmp	r3, #0
 8014664:	f040 8095 	bne.w	8014792 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014668:	4b73      	ldr	r3, [pc, #460]	; (8014838 <tcp_input+0x540>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	61fb      	str	r3, [r7, #28]
 801466e:	e03f      	b.n	80146f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014670:	69fb      	ldr	r3, [r7, #28]
 8014672:	7d1b      	ldrb	r3, [r3, #20]
 8014674:	2b0a      	cmp	r3, #10
 8014676:	d006      	beq.n	8014686 <tcp_input+0x38e>
 8014678:	4b6a      	ldr	r3, [pc, #424]	; (8014824 <tcp_input+0x52c>)
 801467a:	f240 121f 	movw	r2, #287	; 0x11f
 801467e:	496f      	ldr	r1, [pc, #444]	; (801483c <tcp_input+0x544>)
 8014680:	486a      	ldr	r0, [pc, #424]	; (801482c <tcp_input+0x534>)
 8014682:	f006 fd3f 	bl	801b104 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	7a1b      	ldrb	r3, [r3, #8]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d009      	beq.n	80146a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801468e:	69fb      	ldr	r3, [r7, #28]
 8014690:	7a1a      	ldrb	r2, [r3, #8]
 8014692:	4b63      	ldr	r3, [pc, #396]	; (8014820 <tcp_input+0x528>)
 8014694:	685b      	ldr	r3, [r3, #4]
 8014696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801469a:	3301      	adds	r3, #1
 801469c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801469e:	429a      	cmp	r2, r3
 80146a0:	d122      	bne.n	80146e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	8b1a      	ldrh	r2, [r3, #24]
 80146a6:	4b5d      	ldr	r3, [pc, #372]	; (801481c <tcp_input+0x524>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	881b      	ldrh	r3, [r3, #0]
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d11b      	bne.n	80146ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80146b2:	69fb      	ldr	r3, [r7, #28]
 80146b4:	8ada      	ldrh	r2, [r3, #22]
 80146b6:	4b59      	ldr	r3, [pc, #356]	; (801481c <tcp_input+0x524>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	885b      	ldrh	r3, [r3, #2]
 80146bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80146be:	429a      	cmp	r2, r3
 80146c0:	d113      	bne.n	80146ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	685a      	ldr	r2, [r3, #4]
 80146c6:	4b56      	ldr	r3, [pc, #344]	; (8014820 <tcp_input+0x528>)
 80146c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d10d      	bne.n	80146ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	4b53      	ldr	r3, [pc, #332]	; (8014820 <tcp_input+0x528>)
 80146d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80146d6:	429a      	cmp	r2, r3
 80146d8:	d107      	bne.n	80146ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80146da:	69f8      	ldr	r0, [r7, #28]
 80146dc:	f000 fb54 	bl	8014d88 <tcp_timewait_input>
        }
        pbuf_free(p);
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f7fd ffe1 	bl	80126a8 <pbuf_free>
        return;
 80146e6:	e1f0      	b.n	8014aca <tcp_input+0x7d2>
        continue;
 80146e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	68db      	ldr	r3, [r3, #12]
 80146ee:	61fb      	str	r3, [r7, #28]
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d1bc      	bne.n	8014670 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80146f6:	2300      	movs	r3, #0
 80146f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80146fa:	4b51      	ldr	r3, [pc, #324]	; (8014840 <tcp_input+0x548>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	617b      	str	r3, [r7, #20]
 8014700:	e02a      	b.n	8014758 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	7a1b      	ldrb	r3, [r3, #8]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d00c      	beq.n	8014724 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	7a1a      	ldrb	r2, [r3, #8]
 801470e:	4b44      	ldr	r3, [pc, #272]	; (8014820 <tcp_input+0x528>)
 8014710:	685b      	ldr	r3, [r3, #4]
 8014712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014716:	3301      	adds	r3, #1
 8014718:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801471a:	429a      	cmp	r2, r3
 801471c:	d002      	beq.n	8014724 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	61bb      	str	r3, [r7, #24]
        continue;
 8014722:	e016      	b.n	8014752 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	8ada      	ldrh	r2, [r3, #22]
 8014728:	4b3c      	ldr	r3, [pc, #240]	; (801481c <tcp_input+0x524>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	885b      	ldrh	r3, [r3, #2]
 801472e:	b29b      	uxth	r3, r3
 8014730:	429a      	cmp	r2, r3
 8014732:	d10c      	bne.n	801474e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	4b39      	ldr	r3, [pc, #228]	; (8014820 <tcp_input+0x528>)
 801473a:	695b      	ldr	r3, [r3, #20]
 801473c:	429a      	cmp	r2, r3
 801473e:	d00f      	beq.n	8014760 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d00d      	beq.n	8014762 <tcp_input+0x46a>
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d009      	beq.n	8014762 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	68db      	ldr	r3, [r3, #12]
 8014756:	617b      	str	r3, [r7, #20]
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d1d1      	bne.n	8014702 <tcp_input+0x40a>
 801475e:	e000      	b.n	8014762 <tcp_input+0x46a>
            break;
 8014760:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d014      	beq.n	8014792 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014768:	69bb      	ldr	r3, [r7, #24]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d00a      	beq.n	8014784 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	68da      	ldr	r2, [r3, #12]
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014776:	4b32      	ldr	r3, [pc, #200]	; (8014840 <tcp_input+0x548>)
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801477e:	4a30      	ldr	r2, [pc, #192]	; (8014840 <tcp_input+0x548>)
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014784:	6978      	ldr	r0, [r7, #20]
 8014786:	f000 fa01 	bl	8014b8c <tcp_listen_input>
      }
      pbuf_free(p);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7fd ff8c 	bl	80126a8 <pbuf_free>
      return;
 8014790:	e19b      	b.n	8014aca <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014792:	69fb      	ldr	r3, [r7, #28]
 8014794:	2b00      	cmp	r3, #0
 8014796:	f000 8160 	beq.w	8014a5a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801479a:	4b2a      	ldr	r3, [pc, #168]	; (8014844 <tcp_input+0x54c>)
 801479c:	2200      	movs	r2, #0
 801479e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	891a      	ldrh	r2, [r3, #8]
 80147a4:	4b27      	ldr	r3, [pc, #156]	; (8014844 <tcp_input+0x54c>)
 80147a6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80147a8:	4a26      	ldr	r2, [pc, #152]	; (8014844 <tcp_input+0x54c>)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80147ae:	4b1b      	ldr	r3, [pc, #108]	; (801481c <tcp_input+0x524>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	4a24      	ldr	r2, [pc, #144]	; (8014844 <tcp_input+0x54c>)
 80147b4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80147b6:	4b24      	ldr	r3, [pc, #144]	; (8014848 <tcp_input+0x550>)
 80147b8:	2200      	movs	r2, #0
 80147ba:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80147bc:	4b23      	ldr	r3, [pc, #140]	; (801484c <tcp_input+0x554>)
 80147be:	2200      	movs	r2, #0
 80147c0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80147c2:	4b23      	ldr	r3, [pc, #140]	; (8014850 <tcp_input+0x558>)
 80147c4:	2200      	movs	r2, #0
 80147c6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80147c8:	4b22      	ldr	r3, [pc, #136]	; (8014854 <tcp_input+0x55c>)
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	f003 0308 	and.w	r3, r3, #8
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d006      	beq.n	80147e2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	7b5b      	ldrb	r3, [r3, #13]
 80147d8:	f043 0301 	orr.w	r3, r3, #1
 80147dc:	b2da      	uxtb	r2, r3
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d038      	beq.n	801485c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80147ea:	69f8      	ldr	r0, [r7, #28]
 80147ec:	f7ff f93e 	bl	8013a6c <tcp_process_refused_data>
 80147f0:	4603      	mov	r3, r0
 80147f2:	f113 0f0d 	cmn.w	r3, #13
 80147f6:	d007      	beq.n	8014808 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80147f8:	69fb      	ldr	r3, [r7, #28]
 80147fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d02d      	beq.n	801485c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014800:	4b15      	ldr	r3, [pc, #84]	; (8014858 <tcp_input+0x560>)
 8014802:	881b      	ldrh	r3, [r3, #0]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d029      	beq.n	801485c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014808:	69fb      	ldr	r3, [r7, #28]
 801480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801480c:	2b00      	cmp	r3, #0
 801480e:	f040 8104 	bne.w	8014a1a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014812:	69f8      	ldr	r0, [r7, #28]
 8014814:	f003 f9be 	bl	8017b94 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014818:	e0ff      	b.n	8014a1a <tcp_input+0x722>
 801481a:	bf00      	nop
 801481c:	24000778 	.word	0x24000778
 8014820:	24000f00 	.word	0x24000f00
 8014824:	08020860 	.word	0x08020860
 8014828:	080209b8 	.word	0x080209b8
 801482c:	080208d8 	.word	0x080208d8
 8014830:	24003df0 	.word	0x24003df0
 8014834:	080209e4 	.word	0x080209e4
 8014838:	24003e00 	.word	0x24003e00
 801483c:	08020a10 	.word	0x08020a10
 8014840:	24003df8 	.word	0x24003df8
 8014844:	24000768 	.word	0x24000768
 8014848:	24000798 	.word	0x24000798
 801484c:	24000795 	.word	0x24000795
 8014850:	24000790 	.word	0x24000790
 8014854:	24000794 	.word	0x24000794
 8014858:	24000792 	.word	0x24000792
      }
    }
    tcp_input_pcb = pcb;
 801485c:	4a9c      	ldr	r2, [pc, #624]	; (8014ad0 <tcp_input+0x7d8>)
 801485e:	69fb      	ldr	r3, [r7, #28]
 8014860:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014862:	69f8      	ldr	r0, [r7, #28]
 8014864:	f000 fb0a 	bl	8014e7c <tcp_process>
 8014868:	4603      	mov	r3, r0
 801486a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801486c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014870:	f113 0f0d 	cmn.w	r3, #13
 8014874:	f000 80d3 	beq.w	8014a1e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8014878:	4b96      	ldr	r3, [pc, #600]	; (8014ad4 <tcp_input+0x7dc>)
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	f003 0308 	and.w	r3, r3, #8
 8014880:	2b00      	cmp	r3, #0
 8014882:	d015      	beq.n	80148b0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801488a:	2b00      	cmp	r3, #0
 801488c:	d008      	beq.n	80148a0 <tcp_input+0x5a8>
 801488e:	69fb      	ldr	r3, [r7, #28]
 8014890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014894:	69fa      	ldr	r2, [r7, #28]
 8014896:	6912      	ldr	r2, [r2, #16]
 8014898:	f06f 010d 	mvn.w	r1, #13
 801489c:	4610      	mov	r0, r2
 801489e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80148a0:	69f9      	ldr	r1, [r7, #28]
 80148a2:	488d      	ldr	r0, [pc, #564]	; (8014ad8 <tcp_input+0x7e0>)
 80148a4:	f7ff fbb0 	bl	8014008 <tcp_pcb_remove>
        tcp_free(pcb);
 80148a8:	69f8      	ldr	r0, [r7, #28]
 80148aa:	f7fe f99d 	bl	8012be8 <tcp_free>
 80148ae:	e0c1      	b.n	8014a34 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80148b0:	2300      	movs	r3, #0
 80148b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80148b4:	4b89      	ldr	r3, [pc, #548]	; (8014adc <tcp_input+0x7e4>)
 80148b6:	881b      	ldrh	r3, [r3, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d01d      	beq.n	80148f8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80148bc:	4b87      	ldr	r3, [pc, #540]	; (8014adc <tcp_input+0x7e4>)
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80148c2:	69fb      	ldr	r3, [r7, #28]
 80148c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d00a      	beq.n	80148e2 <tcp_input+0x5ea>
 80148cc:	69fb      	ldr	r3, [r7, #28]
 80148ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148d2:	69fa      	ldr	r2, [r7, #28]
 80148d4:	6910      	ldr	r0, [r2, #16]
 80148d6:	89fa      	ldrh	r2, [r7, #14]
 80148d8:	69f9      	ldr	r1, [r7, #28]
 80148da:	4798      	blx	r3
 80148dc:	4603      	mov	r3, r0
 80148de:	74fb      	strb	r3, [r7, #19]
 80148e0:	e001      	b.n	80148e6 <tcp_input+0x5ee>
 80148e2:	2300      	movs	r3, #0
 80148e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80148e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148ea:	f113 0f0d 	cmn.w	r3, #13
 80148ee:	f000 8098 	beq.w	8014a22 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80148f2:	4b7a      	ldr	r3, [pc, #488]	; (8014adc <tcp_input+0x7e4>)
 80148f4:	2200      	movs	r2, #0
 80148f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80148f8:	69f8      	ldr	r0, [r7, #28]
 80148fa:	f000 f907 	bl	8014b0c <tcp_input_delayed_close>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	f040 8090 	bne.w	8014a26 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014906:	4b76      	ldr	r3, [pc, #472]	; (8014ae0 <tcp_input+0x7e8>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d041      	beq.n	8014992 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801490e:	69fb      	ldr	r3, [r7, #28]
 8014910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014912:	2b00      	cmp	r3, #0
 8014914:	d006      	beq.n	8014924 <tcp_input+0x62c>
 8014916:	4b73      	ldr	r3, [pc, #460]	; (8014ae4 <tcp_input+0x7ec>)
 8014918:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801491c:	4972      	ldr	r1, [pc, #456]	; (8014ae8 <tcp_input+0x7f0>)
 801491e:	4873      	ldr	r0, [pc, #460]	; (8014aec <tcp_input+0x7f4>)
 8014920:	f006 fbf0 	bl	801b104 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	8b5b      	ldrh	r3, [r3, #26]
 8014928:	f003 0310 	and.w	r3, r3, #16
 801492c:	2b00      	cmp	r3, #0
 801492e:	d008      	beq.n	8014942 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014930:	4b6b      	ldr	r3, [pc, #428]	; (8014ae0 <tcp_input+0x7e8>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	4618      	mov	r0, r3
 8014936:	f7fd feb7 	bl	80126a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801493a:	69f8      	ldr	r0, [r7, #28]
 801493c:	f7fe fc3c 	bl	80131b8 <tcp_abort>
            goto aborted;
 8014940:	e078      	b.n	8014a34 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014948:	2b00      	cmp	r3, #0
 801494a:	d00c      	beq.n	8014966 <tcp_input+0x66e>
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	6918      	ldr	r0, [r3, #16]
 8014956:	4b62      	ldr	r3, [pc, #392]	; (8014ae0 <tcp_input+0x7e8>)
 8014958:	681a      	ldr	r2, [r3, #0]
 801495a:	2300      	movs	r3, #0
 801495c:	69f9      	ldr	r1, [r7, #28]
 801495e:	47a0      	blx	r4
 8014960:	4603      	mov	r3, r0
 8014962:	74fb      	strb	r3, [r7, #19]
 8014964:	e008      	b.n	8014978 <tcp_input+0x680>
 8014966:	4b5e      	ldr	r3, [pc, #376]	; (8014ae0 <tcp_input+0x7e8>)
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	2300      	movs	r3, #0
 801496c:	69f9      	ldr	r1, [r7, #28]
 801496e:	2000      	movs	r0, #0
 8014970:	f7ff f952 	bl	8013c18 <tcp_recv_null>
 8014974:	4603      	mov	r3, r0
 8014976:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014978:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801497c:	f113 0f0d 	cmn.w	r3, #13
 8014980:	d053      	beq.n	8014a2a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014982:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d003      	beq.n	8014992 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801498a:	4b55      	ldr	r3, [pc, #340]	; (8014ae0 <tcp_input+0x7e8>)
 801498c:	681a      	ldr	r2, [r3, #0]
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014992:	4b50      	ldr	r3, [pc, #320]	; (8014ad4 <tcp_input+0x7dc>)
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	f003 0320 	and.w	r3, r3, #32
 801499a:	2b00      	cmp	r3, #0
 801499c:	d030      	beq.n	8014a00 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801499e:	69fb      	ldr	r3, [r7, #28]
 80149a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d009      	beq.n	80149ba <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80149aa:	7b5a      	ldrb	r2, [r3, #13]
 80149ac:	69fb      	ldr	r3, [r7, #28]
 80149ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80149b0:	f042 0220 	orr.w	r2, r2, #32
 80149b4:	b2d2      	uxtb	r2, r2
 80149b6:	735a      	strb	r2, [r3, #13]
 80149b8:	e022      	b.n	8014a00 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80149ba:	69fb      	ldr	r3, [r7, #28]
 80149bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80149c2:	d005      	beq.n	80149d0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80149c4:	69fb      	ldr	r3, [r7, #28]
 80149c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149c8:	3301      	adds	r3, #1
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	69fb      	ldr	r3, [r7, #28]
 80149ce:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80149d0:	69fb      	ldr	r3, [r7, #28]
 80149d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d00b      	beq.n	80149f2 <tcp_input+0x6fa>
 80149da:	69fb      	ldr	r3, [r7, #28]
 80149dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80149e0:	69fb      	ldr	r3, [r7, #28]
 80149e2:	6918      	ldr	r0, [r3, #16]
 80149e4:	2300      	movs	r3, #0
 80149e6:	2200      	movs	r2, #0
 80149e8:	69f9      	ldr	r1, [r7, #28]
 80149ea:	47a0      	blx	r4
 80149ec:	4603      	mov	r3, r0
 80149ee:	74fb      	strb	r3, [r7, #19]
 80149f0:	e001      	b.n	80149f6 <tcp_input+0x6fe>
 80149f2:	2300      	movs	r3, #0
 80149f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80149f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80149fa:	f113 0f0d 	cmn.w	r3, #13
 80149fe:	d016      	beq.n	8014a2e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014a00:	4b33      	ldr	r3, [pc, #204]	; (8014ad0 <tcp_input+0x7d8>)
 8014a02:	2200      	movs	r2, #0
 8014a04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014a06:	69f8      	ldr	r0, [r7, #28]
 8014a08:	f000 f880 	bl	8014b0c <tcp_input_delayed_close>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d10f      	bne.n	8014a32 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014a12:	69f8      	ldr	r0, [r7, #28]
 8014a14:	f002 fab8 	bl	8016f88 <tcp_output>
 8014a18:	e00c      	b.n	8014a34 <tcp_input+0x73c>
        goto aborted;
 8014a1a:	bf00      	nop
 8014a1c:	e00a      	b.n	8014a34 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014a1e:	bf00      	nop
 8014a20:	e008      	b.n	8014a34 <tcp_input+0x73c>
              goto aborted;
 8014a22:	bf00      	nop
 8014a24:	e006      	b.n	8014a34 <tcp_input+0x73c>
          goto aborted;
 8014a26:	bf00      	nop
 8014a28:	e004      	b.n	8014a34 <tcp_input+0x73c>
            goto aborted;
 8014a2a:	bf00      	nop
 8014a2c:	e002      	b.n	8014a34 <tcp_input+0x73c>
              goto aborted;
 8014a2e:	bf00      	nop
 8014a30:	e000      	b.n	8014a34 <tcp_input+0x73c>
          goto aborted;
 8014a32:	bf00      	nop
    tcp_input_pcb = NULL;
 8014a34:	4b26      	ldr	r3, [pc, #152]	; (8014ad0 <tcp_input+0x7d8>)
 8014a36:	2200      	movs	r2, #0
 8014a38:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014a3a:	4b29      	ldr	r3, [pc, #164]	; (8014ae0 <tcp_input+0x7e8>)
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014a40:	4b2b      	ldr	r3, [pc, #172]	; (8014af0 <tcp_input+0x7f8>)
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d03f      	beq.n	8014ac8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8014a48:	4b29      	ldr	r3, [pc, #164]	; (8014af0 <tcp_input+0x7f8>)
 8014a4a:	685b      	ldr	r3, [r3, #4]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7fd fe2b 	bl	80126a8 <pbuf_free>
      inseg.p = NULL;
 8014a52:	4b27      	ldr	r3, [pc, #156]	; (8014af0 <tcp_input+0x7f8>)
 8014a54:	2200      	movs	r2, #0
 8014a56:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014a58:	e036      	b.n	8014ac8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014a5a:	4b26      	ldr	r3, [pc, #152]	; (8014af4 <tcp_input+0x7fc>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	899b      	ldrh	r3, [r3, #12]
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7f9 ff8a 	bl	800e97c <lwip_htons>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	b2db      	uxtb	r3, r3
 8014a6c:	f003 0304 	and.w	r3, r3, #4
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d118      	bne.n	8014aa6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a74:	4b20      	ldr	r3, [pc, #128]	; (8014af8 <tcp_input+0x800>)
 8014a76:	6819      	ldr	r1, [r3, #0]
 8014a78:	4b20      	ldr	r3, [pc, #128]	; (8014afc <tcp_input+0x804>)
 8014a7a:	881b      	ldrh	r3, [r3, #0]
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	4b20      	ldr	r3, [pc, #128]	; (8014b00 <tcp_input+0x808>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a84:	4b1b      	ldr	r3, [pc, #108]	; (8014af4 <tcp_input+0x7fc>)
 8014a86:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a88:	885b      	ldrh	r3, [r3, #2]
 8014a8a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014a8c:	4a19      	ldr	r2, [pc, #100]	; (8014af4 <tcp_input+0x7fc>)
 8014a8e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014a90:	8812      	ldrh	r2, [r2, #0]
 8014a92:	b292      	uxth	r2, r2
 8014a94:	9202      	str	r2, [sp, #8]
 8014a96:	9301      	str	r3, [sp, #4]
 8014a98:	4b1a      	ldr	r3, [pc, #104]	; (8014b04 <tcp_input+0x80c>)
 8014a9a:	9300      	str	r3, [sp, #0]
 8014a9c:	4b1a      	ldr	r3, [pc, #104]	; (8014b08 <tcp_input+0x810>)
 8014a9e:	4602      	mov	r2, r0
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	f003 f825 	bl	8017af0 <tcp_rst>
    pbuf_free(p);
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f7fd fdfe 	bl	80126a8 <pbuf_free>
  return;
 8014aac:	e00c      	b.n	8014ac8 <tcp_input+0x7d0>
    goto dropped;
 8014aae:	bf00      	nop
 8014ab0:	e006      	b.n	8014ac0 <tcp_input+0x7c8>
    goto dropped;
 8014ab2:	bf00      	nop
 8014ab4:	e004      	b.n	8014ac0 <tcp_input+0x7c8>
    goto dropped;
 8014ab6:	bf00      	nop
 8014ab8:	e002      	b.n	8014ac0 <tcp_input+0x7c8>
      goto dropped;
 8014aba:	bf00      	nop
 8014abc:	e000      	b.n	8014ac0 <tcp_input+0x7c8>
      goto dropped;
 8014abe:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f7fd fdf1 	bl	80126a8 <pbuf_free>
 8014ac6:	e000      	b.n	8014aca <tcp_input+0x7d2>
  return;
 8014ac8:	bf00      	nop
}
 8014aca:	3724      	adds	r7, #36	; 0x24
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd90      	pop	{r4, r7, pc}
 8014ad0:	24003e04 	.word	0x24003e04
 8014ad4:	24000795 	.word	0x24000795
 8014ad8:	24003df0 	.word	0x24003df0
 8014adc:	24000790 	.word	0x24000790
 8014ae0:	24000798 	.word	0x24000798
 8014ae4:	08020860 	.word	0x08020860
 8014ae8:	08020a40 	.word	0x08020a40
 8014aec:	080208d8 	.word	0x080208d8
 8014af0:	24000768 	.word	0x24000768
 8014af4:	24000778 	.word	0x24000778
 8014af8:	2400078c 	.word	0x2400078c
 8014afc:	24000792 	.word	0x24000792
 8014b00:	24000788 	.word	0x24000788
 8014b04:	24000f10 	.word	0x24000f10
 8014b08:	24000f14 	.word	0x24000f14

08014b0c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d106      	bne.n	8014b28 <tcp_input_delayed_close+0x1c>
 8014b1a:	4b17      	ldr	r3, [pc, #92]	; (8014b78 <tcp_input_delayed_close+0x6c>)
 8014b1c:	f240 225a 	movw	r2, #602	; 0x25a
 8014b20:	4916      	ldr	r1, [pc, #88]	; (8014b7c <tcp_input_delayed_close+0x70>)
 8014b22:	4817      	ldr	r0, [pc, #92]	; (8014b80 <tcp_input_delayed_close+0x74>)
 8014b24:	f006 faee 	bl	801b104 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014b28:	4b16      	ldr	r3, [pc, #88]	; (8014b84 <tcp_input_delayed_close+0x78>)
 8014b2a:	781b      	ldrb	r3, [r3, #0]
 8014b2c:	f003 0310 	and.w	r3, r3, #16
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d01c      	beq.n	8014b6e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	8b5b      	ldrh	r3, [r3, #26]
 8014b38:	f003 0310 	and.w	r3, r3, #16
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d10d      	bne.n	8014b5c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d008      	beq.n	8014b5c <tcp_input_delayed_close+0x50>
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b50:	687a      	ldr	r2, [r7, #4]
 8014b52:	6912      	ldr	r2, [r2, #16]
 8014b54:	f06f 010e 	mvn.w	r1, #14
 8014b58:	4610      	mov	r0, r2
 8014b5a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014b5c:	6879      	ldr	r1, [r7, #4]
 8014b5e:	480a      	ldr	r0, [pc, #40]	; (8014b88 <tcp_input_delayed_close+0x7c>)
 8014b60:	f7ff fa52 	bl	8014008 <tcp_pcb_remove>
    tcp_free(pcb);
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7fe f83f 	bl	8012be8 <tcp_free>
    return 1;
 8014b6a:	2301      	movs	r3, #1
 8014b6c:	e000      	b.n	8014b70 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014b6e:	2300      	movs	r3, #0
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	08020860 	.word	0x08020860
 8014b7c:	08020a5c 	.word	0x08020a5c
 8014b80:	080208d8 	.word	0x080208d8
 8014b84:	24000795 	.word	0x24000795
 8014b88:	24003df0 	.word	0x24003df0

08014b8c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014b8c:	b590      	push	{r4, r7, lr}
 8014b8e:	b08b      	sub	sp, #44	; 0x2c
 8014b90:	af04      	add	r7, sp, #16
 8014b92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014b94:	4b6f      	ldr	r3, [pc, #444]	; (8014d54 <tcp_listen_input+0x1c8>)
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	f003 0304 	and.w	r3, r3, #4
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	f040 80d2 	bne.w	8014d46 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d106      	bne.n	8014bb6 <tcp_listen_input+0x2a>
 8014ba8:	4b6b      	ldr	r3, [pc, #428]	; (8014d58 <tcp_listen_input+0x1cc>)
 8014baa:	f240 2281 	movw	r2, #641	; 0x281
 8014bae:	496b      	ldr	r1, [pc, #428]	; (8014d5c <tcp_listen_input+0x1d0>)
 8014bb0:	486b      	ldr	r0, [pc, #428]	; (8014d60 <tcp_listen_input+0x1d4>)
 8014bb2:	f006 faa7 	bl	801b104 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014bb6:	4b67      	ldr	r3, [pc, #412]	; (8014d54 <tcp_listen_input+0x1c8>)
 8014bb8:	781b      	ldrb	r3, [r3, #0]
 8014bba:	f003 0310 	and.w	r3, r3, #16
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d019      	beq.n	8014bf6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bc2:	4b68      	ldr	r3, [pc, #416]	; (8014d64 <tcp_listen_input+0x1d8>)
 8014bc4:	6819      	ldr	r1, [r3, #0]
 8014bc6:	4b68      	ldr	r3, [pc, #416]	; (8014d68 <tcp_listen_input+0x1dc>)
 8014bc8:	881b      	ldrh	r3, [r3, #0]
 8014bca:	461a      	mov	r2, r3
 8014bcc:	4b67      	ldr	r3, [pc, #412]	; (8014d6c <tcp_listen_input+0x1e0>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014bd2:	4b67      	ldr	r3, [pc, #412]	; (8014d70 <tcp_listen_input+0x1e4>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bd6:	885b      	ldrh	r3, [r3, #2]
 8014bd8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014bda:	4a65      	ldr	r2, [pc, #404]	; (8014d70 <tcp_listen_input+0x1e4>)
 8014bdc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014bde:	8812      	ldrh	r2, [r2, #0]
 8014be0:	b292      	uxth	r2, r2
 8014be2:	9202      	str	r2, [sp, #8]
 8014be4:	9301      	str	r3, [sp, #4]
 8014be6:	4b63      	ldr	r3, [pc, #396]	; (8014d74 <tcp_listen_input+0x1e8>)
 8014be8:	9300      	str	r3, [sp, #0]
 8014bea:	4b63      	ldr	r3, [pc, #396]	; (8014d78 <tcp_listen_input+0x1ec>)
 8014bec:	4602      	mov	r2, r0
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f002 ff7e 	bl	8017af0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014bf4:	e0a9      	b.n	8014d4a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014bf6:	4b57      	ldr	r3, [pc, #348]	; (8014d54 <tcp_listen_input+0x1c8>)
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	f003 0302 	and.w	r3, r3, #2
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	f000 80a3 	beq.w	8014d4a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	7d5b      	ldrb	r3, [r3, #21]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7ff f929 	bl	8013e60 <tcp_alloc>
 8014c0e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d111      	bne.n	8014c3a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	699b      	ldr	r3, [r3, #24]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00a      	beq.n	8014c34 <tcp_listen_input+0xa8>
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	699b      	ldr	r3, [r3, #24]
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	6910      	ldr	r0, [r2, #16]
 8014c26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c2a:	2100      	movs	r1, #0
 8014c2c:	4798      	blx	r3
 8014c2e:	4603      	mov	r3, r0
 8014c30:	73bb      	strb	r3, [r7, #14]
      return;
 8014c32:	e08b      	b.n	8014d4c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014c34:	23f0      	movs	r3, #240	; 0xf0
 8014c36:	73bb      	strb	r3, [r7, #14]
      return;
 8014c38:	e088      	b.n	8014d4c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014c3a:	4b50      	ldr	r3, [pc, #320]	; (8014d7c <tcp_listen_input+0x1f0>)
 8014c3c:	695a      	ldr	r2, [r3, #20]
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014c42:	4b4e      	ldr	r3, [pc, #312]	; (8014d7c <tcp_listen_input+0x1f0>)
 8014c44:	691a      	ldr	r2, [r3, #16]
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	8ada      	ldrh	r2, [r3, #22]
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014c52:	4b47      	ldr	r3, [pc, #284]	; (8014d70 <tcp_listen_input+0x1e4>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	881b      	ldrh	r3, [r3, #0]
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	2203      	movs	r2, #3
 8014c62:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014c64:	4b41      	ldr	r3, [pc, #260]	; (8014d6c <tcp_listen_input+0x1e0>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	1c5a      	adds	r2, r3, #1
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014c76:	6978      	ldr	r0, [r7, #20]
 8014c78:	f7ff fa5a 	bl	8014130 <tcp_next_iss>
 8014c7c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	693a      	ldr	r2, [r7, #16]
 8014c82:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	693a      	ldr	r2, [r7, #16]
 8014c88:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014c8a:	697b      	ldr	r3, [r7, #20]
 8014c8c:	693a      	ldr	r2, [r7, #16]
 8014c8e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	693a      	ldr	r2, [r7, #16]
 8014c94:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014c96:	4b35      	ldr	r3, [pc, #212]	; (8014d6c <tcp_listen_input+0x1e0>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	1e5a      	subs	r2, r3, #1
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	691a      	ldr	r2, [r3, #16]
 8014ca4:	697b      	ldr	r3, [r7, #20]
 8014ca6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014ca8:	697b      	ldr	r3, [r7, #20]
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	7a5b      	ldrb	r3, [r3, #9]
 8014cb2:	f003 030c 	and.w	r3, r3, #12
 8014cb6:	b2da      	uxtb	r2, r3
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	7a1a      	ldrb	r2, [r3, #8]
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014cc4:	4b2e      	ldr	r3, [pc, #184]	; (8014d80 <tcp_listen_input+0x1f4>)
 8014cc6:	681a      	ldr	r2, [r3, #0]
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	60da      	str	r2, [r3, #12]
 8014ccc:	4a2c      	ldr	r2, [pc, #176]	; (8014d80 <tcp_listen_input+0x1f4>)
 8014cce:	697b      	ldr	r3, [r7, #20]
 8014cd0:	6013      	str	r3, [r2, #0]
 8014cd2:	f003 f8cf 	bl	8017e74 <tcp_timer_needed>
 8014cd6:	4b2b      	ldr	r3, [pc, #172]	; (8014d84 <tcp_listen_input+0x1f8>)
 8014cd8:	2201      	movs	r2, #1
 8014cda:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014cdc:	6978      	ldr	r0, [r7, #20]
 8014cde:	f001 fd8d 	bl	80167fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014ce2:	4b23      	ldr	r3, [pc, #140]	; (8014d70 <tcp_listen_input+0x1e4>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	89db      	ldrh	r3, [r3, #14]
 8014ce8:	b29a      	uxth	r2, r3
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014cf0:	697b      	ldr	r3, [r7, #20]
 8014cf2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014d00:	697b      	ldr	r3, [r7, #20]
 8014d02:	3304      	adds	r3, #4
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7fb f90f 	bl	800ff28 <ip4_route>
 8014d0a:	4601      	mov	r1, r0
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	3304      	adds	r3, #4
 8014d10:	461a      	mov	r2, r3
 8014d12:	4620      	mov	r0, r4
 8014d14:	f7ff fa32 	bl	801417c <tcp_eff_send_mss_netif>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	697b      	ldr	r3, [r7, #20]
 8014d1e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014d20:	2112      	movs	r1, #18
 8014d22:	6978      	ldr	r0, [r7, #20]
 8014d24:	f002 f842 	bl	8016dac <tcp_enqueue_flags>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d004      	beq.n	8014d3e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014d34:	2100      	movs	r1, #0
 8014d36:	6978      	ldr	r0, [r7, #20]
 8014d38:	f7fe f980 	bl	801303c <tcp_abandon>
      return;
 8014d3c:	e006      	b.n	8014d4c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014d3e:	6978      	ldr	r0, [r7, #20]
 8014d40:	f002 f922 	bl	8016f88 <tcp_output>
  return;
 8014d44:	e001      	b.n	8014d4a <tcp_listen_input+0x1be>
    return;
 8014d46:	bf00      	nop
 8014d48:	e000      	b.n	8014d4c <tcp_listen_input+0x1c0>
  return;
 8014d4a:	bf00      	nop
}
 8014d4c:	371c      	adds	r7, #28
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd90      	pop	{r4, r7, pc}
 8014d52:	bf00      	nop
 8014d54:	24000794 	.word	0x24000794
 8014d58:	08020860 	.word	0x08020860
 8014d5c:	08020a84 	.word	0x08020a84
 8014d60:	080208d8 	.word	0x080208d8
 8014d64:	2400078c 	.word	0x2400078c
 8014d68:	24000792 	.word	0x24000792
 8014d6c:	24000788 	.word	0x24000788
 8014d70:	24000778 	.word	0x24000778
 8014d74:	24000f10 	.word	0x24000f10
 8014d78:	24000f14 	.word	0x24000f14
 8014d7c:	24000f00 	.word	0x24000f00
 8014d80:	24003df0 	.word	0x24003df0
 8014d84:	24003dec 	.word	0x24003dec

08014d88 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b086      	sub	sp, #24
 8014d8c:	af04      	add	r7, sp, #16
 8014d8e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014d90:	4b2f      	ldr	r3, [pc, #188]	; (8014e50 <tcp_timewait_input+0xc8>)
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	f003 0304 	and.w	r3, r3, #4
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d153      	bne.n	8014e44 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d106      	bne.n	8014db0 <tcp_timewait_input+0x28>
 8014da2:	4b2c      	ldr	r3, [pc, #176]	; (8014e54 <tcp_timewait_input+0xcc>)
 8014da4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014da8:	492b      	ldr	r1, [pc, #172]	; (8014e58 <tcp_timewait_input+0xd0>)
 8014daa:	482c      	ldr	r0, [pc, #176]	; (8014e5c <tcp_timewait_input+0xd4>)
 8014dac:	f006 f9aa 	bl	801b104 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014db0:	4b27      	ldr	r3, [pc, #156]	; (8014e50 <tcp_timewait_input+0xc8>)
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	f003 0302 	and.w	r3, r3, #2
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d02a      	beq.n	8014e12 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014dbc:	4b28      	ldr	r3, [pc, #160]	; (8014e60 <tcp_timewait_input+0xd8>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dc4:	1ad3      	subs	r3, r2, r3
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	db2d      	blt.n	8014e26 <tcp_timewait_input+0x9e>
 8014dca:	4b25      	ldr	r3, [pc, #148]	; (8014e60 <tcp_timewait_input+0xd8>)
 8014dcc:	681a      	ldr	r2, [r3, #0]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dd2:	6879      	ldr	r1, [r7, #4]
 8014dd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014dd6:	440b      	add	r3, r1
 8014dd8:	1ad3      	subs	r3, r2, r3
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	dc23      	bgt.n	8014e26 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014dde:	4b21      	ldr	r3, [pc, #132]	; (8014e64 <tcp_timewait_input+0xdc>)
 8014de0:	6819      	ldr	r1, [r3, #0]
 8014de2:	4b21      	ldr	r3, [pc, #132]	; (8014e68 <tcp_timewait_input+0xe0>)
 8014de4:	881b      	ldrh	r3, [r3, #0]
 8014de6:	461a      	mov	r2, r3
 8014de8:	4b1d      	ldr	r3, [pc, #116]	; (8014e60 <tcp_timewait_input+0xd8>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014dee:	4b1f      	ldr	r3, [pc, #124]	; (8014e6c <tcp_timewait_input+0xe4>)
 8014df0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014df2:	885b      	ldrh	r3, [r3, #2]
 8014df4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014df6:	4a1d      	ldr	r2, [pc, #116]	; (8014e6c <tcp_timewait_input+0xe4>)
 8014df8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014dfa:	8812      	ldrh	r2, [r2, #0]
 8014dfc:	b292      	uxth	r2, r2
 8014dfe:	9202      	str	r2, [sp, #8]
 8014e00:	9301      	str	r3, [sp, #4]
 8014e02:	4b1b      	ldr	r3, [pc, #108]	; (8014e70 <tcp_timewait_input+0xe8>)
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	4b1b      	ldr	r3, [pc, #108]	; (8014e74 <tcp_timewait_input+0xec>)
 8014e08:	4602      	mov	r2, r0
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f002 fe70 	bl	8017af0 <tcp_rst>
      return;
 8014e10:	e01b      	b.n	8014e4a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014e12:	4b0f      	ldr	r3, [pc, #60]	; (8014e50 <tcp_timewait_input+0xc8>)
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	f003 0301 	and.w	r3, r3, #1
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d003      	beq.n	8014e26 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014e1e:	4b16      	ldr	r3, [pc, #88]	; (8014e78 <tcp_timewait_input+0xf0>)
 8014e20:	681a      	ldr	r2, [r3, #0]
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014e26:	4b10      	ldr	r3, [pc, #64]	; (8014e68 <tcp_timewait_input+0xe0>)
 8014e28:	881b      	ldrh	r3, [r3, #0]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d00c      	beq.n	8014e48 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	8b5b      	ldrh	r3, [r3, #26]
 8014e32:	f043 0302 	orr.w	r3, r3, #2
 8014e36:	b29a      	uxth	r2, r3
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f002 f8a3 	bl	8016f88 <tcp_output>
  }
  return;
 8014e42:	e001      	b.n	8014e48 <tcp_timewait_input+0xc0>
    return;
 8014e44:	bf00      	nop
 8014e46:	e000      	b.n	8014e4a <tcp_timewait_input+0xc2>
  return;
 8014e48:	bf00      	nop
}
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	24000794 	.word	0x24000794
 8014e54:	08020860 	.word	0x08020860
 8014e58:	08020aa4 	.word	0x08020aa4
 8014e5c:	080208d8 	.word	0x080208d8
 8014e60:	24000788 	.word	0x24000788
 8014e64:	2400078c 	.word	0x2400078c
 8014e68:	24000792 	.word	0x24000792
 8014e6c:	24000778 	.word	0x24000778
 8014e70:	24000f10 	.word	0x24000f10
 8014e74:	24000f14 	.word	0x24000f14
 8014e78:	24003df4 	.word	0x24003df4

08014e7c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014e7c:	b590      	push	{r4, r7, lr}
 8014e7e:	b08d      	sub	sp, #52	; 0x34
 8014e80:	af04      	add	r7, sp, #16
 8014e82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014e84:	2300      	movs	r3, #0
 8014e86:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d106      	bne.n	8014ea0 <tcp_process+0x24>
 8014e92:	4ba5      	ldr	r3, [pc, #660]	; (8015128 <tcp_process+0x2ac>)
 8014e94:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014e98:	49a4      	ldr	r1, [pc, #656]	; (801512c <tcp_process+0x2b0>)
 8014e9a:	48a5      	ldr	r0, [pc, #660]	; (8015130 <tcp_process+0x2b4>)
 8014e9c:	f006 f932 	bl	801b104 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014ea0:	4ba4      	ldr	r3, [pc, #656]	; (8015134 <tcp_process+0x2b8>)
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	f003 0304 	and.w	r3, r3, #4
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d04e      	beq.n	8014f4a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	7d1b      	ldrb	r3, [r3, #20]
 8014eb0:	2b02      	cmp	r3, #2
 8014eb2:	d108      	bne.n	8014ec6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014eb8:	4b9f      	ldr	r3, [pc, #636]	; (8015138 <tcp_process+0x2bc>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d123      	bne.n	8014f08 <tcp_process+0x8c>
        acceptable = 1;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	76fb      	strb	r3, [r7, #27]
 8014ec4:	e020      	b.n	8014f08 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014eca:	4b9c      	ldr	r3, [pc, #624]	; (801513c <tcp_process+0x2c0>)
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d102      	bne.n	8014ed8 <tcp_process+0x5c>
        acceptable = 1;
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	76fb      	strb	r3, [r7, #27]
 8014ed6:	e017      	b.n	8014f08 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014ed8:	4b98      	ldr	r3, [pc, #608]	; (801513c <tcp_process+0x2c0>)
 8014eda:	681a      	ldr	r2, [r3, #0]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	db10      	blt.n	8014f08 <tcp_process+0x8c>
 8014ee6:	4b95      	ldr	r3, [pc, #596]	; (801513c <tcp_process+0x2c0>)
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eee:	6879      	ldr	r1, [r7, #4]
 8014ef0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014ef2:	440b      	add	r3, r1
 8014ef4:	1ad3      	subs	r3, r2, r3
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	dc06      	bgt.n	8014f08 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	8b5b      	ldrh	r3, [r3, #26]
 8014efe:	f043 0302 	orr.w	r3, r3, #2
 8014f02:	b29a      	uxth	r2, r3
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014f08:	7efb      	ldrb	r3, [r7, #27]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d01b      	beq.n	8014f46 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	7d1b      	ldrb	r3, [r3, #20]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d106      	bne.n	8014f24 <tcp_process+0xa8>
 8014f16:	4b84      	ldr	r3, [pc, #528]	; (8015128 <tcp_process+0x2ac>)
 8014f18:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014f1c:	4988      	ldr	r1, [pc, #544]	; (8015140 <tcp_process+0x2c4>)
 8014f1e:	4884      	ldr	r0, [pc, #528]	; (8015130 <tcp_process+0x2b4>)
 8014f20:	f006 f8f0 	bl	801b104 <iprintf>
      recv_flags |= TF_RESET;
 8014f24:	4b87      	ldr	r3, [pc, #540]	; (8015144 <tcp_process+0x2c8>)
 8014f26:	781b      	ldrb	r3, [r3, #0]
 8014f28:	f043 0308 	orr.w	r3, r3, #8
 8014f2c:	b2da      	uxtb	r2, r3
 8014f2e:	4b85      	ldr	r3, [pc, #532]	; (8015144 <tcp_process+0x2c8>)
 8014f30:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	8b5b      	ldrh	r3, [r3, #26]
 8014f36:	f023 0301 	bic.w	r3, r3, #1
 8014f3a:	b29a      	uxth	r2, r3
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014f40:	f06f 030d 	mvn.w	r3, #13
 8014f44:	e37a      	b.n	801563c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014f46:	2300      	movs	r3, #0
 8014f48:	e378      	b.n	801563c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014f4a:	4b7a      	ldr	r3, [pc, #488]	; (8015134 <tcp_process+0x2b8>)
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	f003 0302 	and.w	r3, r3, #2
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d010      	beq.n	8014f78 <tcp_process+0xfc>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	7d1b      	ldrb	r3, [r3, #20]
 8014f5a:	2b02      	cmp	r3, #2
 8014f5c:	d00c      	beq.n	8014f78 <tcp_process+0xfc>
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	7d1b      	ldrb	r3, [r3, #20]
 8014f62:	2b03      	cmp	r3, #3
 8014f64:	d008      	beq.n	8014f78 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	8b5b      	ldrh	r3, [r3, #26]
 8014f6a:	f043 0302 	orr.w	r3, r3, #2
 8014f6e:	b29a      	uxth	r2, r3
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014f74:	2300      	movs	r3, #0
 8014f76:	e361      	b.n	801563c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	8b5b      	ldrh	r3, [r3, #26]
 8014f7c:	f003 0310 	and.w	r3, r3, #16
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d103      	bne.n	8014f8c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014f84:	4b70      	ldr	r3, [pc, #448]	; (8015148 <tcp_process+0x2cc>)
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2200      	movs	r2, #0
 8014f98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f001 fc2d 	bl	80167fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	7d1b      	ldrb	r3, [r3, #20]
 8014fa6:	3b02      	subs	r3, #2
 8014fa8:	2b07      	cmp	r3, #7
 8014faa:	f200 8337 	bhi.w	801561c <tcp_process+0x7a0>
 8014fae:	a201      	add	r2, pc, #4	; (adr r2, 8014fb4 <tcp_process+0x138>)
 8014fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fb4:	08014fd5 	.word	0x08014fd5
 8014fb8:	08015205 	.word	0x08015205
 8014fbc:	0801537d 	.word	0x0801537d
 8014fc0:	080153a7 	.word	0x080153a7
 8014fc4:	080154cb 	.word	0x080154cb
 8014fc8:	0801537d 	.word	0x0801537d
 8014fcc:	08015557 	.word	0x08015557
 8014fd0:	080155e7 	.word	0x080155e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014fd4:	4b57      	ldr	r3, [pc, #348]	; (8015134 <tcp_process+0x2b8>)
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	f003 0310 	and.w	r3, r3, #16
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	f000 80e4 	beq.w	80151aa <tcp_process+0x32e>
 8014fe2:	4b54      	ldr	r3, [pc, #336]	; (8015134 <tcp_process+0x2b8>)
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	f003 0302 	and.w	r3, r3, #2
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	f000 80dd 	beq.w	80151aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ff4:	1c5a      	adds	r2, r3, #1
 8014ff6:	4b50      	ldr	r3, [pc, #320]	; (8015138 <tcp_process+0x2bc>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	f040 80d5 	bne.w	80151aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015000:	4b4e      	ldr	r3, [pc, #312]	; (801513c <tcp_process+0x2c0>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	1c5a      	adds	r2, r3, #1
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015012:	4b49      	ldr	r3, [pc, #292]	; (8015138 <tcp_process+0x2bc>)
 8015014:	681a      	ldr	r2, [r3, #0]
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801501a:	4b4c      	ldr	r3, [pc, #304]	; (801514c <tcp_process+0x2d0>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	89db      	ldrh	r3, [r3, #14]
 8015020:	b29a      	uxth	r2, r3
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015034:	4b41      	ldr	r3, [pc, #260]	; (801513c <tcp_process+0x2c0>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	1e5a      	subs	r2, r3, #1
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2204      	movs	r2, #4
 8015042:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	3304      	adds	r3, #4
 801504c:	4618      	mov	r0, r3
 801504e:	f7fa ff6b 	bl	800ff28 <ip4_route>
 8015052:	4601      	mov	r1, r0
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	3304      	adds	r3, #4
 8015058:	461a      	mov	r2, r3
 801505a:	4620      	mov	r0, r4
 801505c:	f7ff f88e 	bl	801417c <tcp_eff_send_mss_netif>
 8015060:	4603      	mov	r3, r0
 8015062:	461a      	mov	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801506c:	009a      	lsls	r2, r3, #2
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015072:	005b      	lsls	r3, r3, #1
 8015074:	f241 111c 	movw	r1, #4380	; 0x111c
 8015078:	428b      	cmp	r3, r1
 801507a:	bf38      	it	cc
 801507c:	460b      	movcc	r3, r1
 801507e:	429a      	cmp	r2, r3
 8015080:	d204      	bcs.n	801508c <tcp_process+0x210>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	b29b      	uxth	r3, r3
 801508a:	e00d      	b.n	80150a8 <tcp_process+0x22c>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015090:	005b      	lsls	r3, r3, #1
 8015092:	f241 121c 	movw	r2, #4380	; 0x111c
 8015096:	4293      	cmp	r3, r2
 8015098:	d904      	bls.n	80150a4 <tcp_process+0x228>
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801509e:	005b      	lsls	r3, r3, #1
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	e001      	b.n	80150a8 <tcp_process+0x22c>
 80150a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80150a8:	687a      	ldr	r2, [r7, #4]
 80150aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d106      	bne.n	80150c6 <tcp_process+0x24a>
 80150b8:	4b1b      	ldr	r3, [pc, #108]	; (8015128 <tcp_process+0x2ac>)
 80150ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80150be:	4924      	ldr	r1, [pc, #144]	; (8015150 <tcp_process+0x2d4>)
 80150c0:	481b      	ldr	r0, [pc, #108]	; (8015130 <tcp_process+0x2b4>)
 80150c2:	f006 f81f 	bl	801b104 <iprintf>
        --pcb->snd_queuelen;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80150cc:	3b01      	subs	r3, #1
 80150ce:	b29a      	uxth	r2, r3
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d111      	bne.n	8015106 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80150e8:	69fb      	ldr	r3, [r7, #28]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d106      	bne.n	80150fc <tcp_process+0x280>
 80150ee:	4b0e      	ldr	r3, [pc, #56]	; (8015128 <tcp_process+0x2ac>)
 80150f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80150f4:	4917      	ldr	r1, [pc, #92]	; (8015154 <tcp_process+0x2d8>)
 80150f6:	480e      	ldr	r0, [pc, #56]	; (8015130 <tcp_process+0x2b4>)
 80150f8:	f006 f804 	bl	801b104 <iprintf>
          pcb->unsent = rseg->next;
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	66da      	str	r2, [r3, #108]	; 0x6c
 8015104:	e003      	b.n	801510e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8015106:	69fb      	ldr	r3, [r7, #28]
 8015108:	681a      	ldr	r2, [r3, #0]
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801510e:	69f8      	ldr	r0, [r7, #28]
 8015110:	f7fe fd3d 	bl	8013b8e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015118:	2b00      	cmp	r3, #0
 801511a:	d11d      	bne.n	8015158 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015122:	861a      	strh	r2, [r3, #48]	; 0x30
 8015124:	e01f      	b.n	8015166 <tcp_process+0x2ea>
 8015126:	bf00      	nop
 8015128:	08020860 	.word	0x08020860
 801512c:	08020ac4 	.word	0x08020ac4
 8015130:	080208d8 	.word	0x080208d8
 8015134:	24000794 	.word	0x24000794
 8015138:	2400078c 	.word	0x2400078c
 801513c:	24000788 	.word	0x24000788
 8015140:	08020ae0 	.word	0x08020ae0
 8015144:	24000795 	.word	0x24000795
 8015148:	24003df4 	.word	0x24003df4
 801514c:	24000778 	.word	0x24000778
 8015150:	08020b00 	.word	0x08020b00
 8015154:	08020b18 	.word	0x08020b18
        } else {
          pcb->rtime = 0;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2200      	movs	r2, #0
 801515c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	2200      	movs	r2, #0
 8015162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801516c:	2b00      	cmp	r3, #0
 801516e:	d00a      	beq.n	8015186 <tcp_process+0x30a>
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	6910      	ldr	r0, [r2, #16]
 801517a:	2200      	movs	r2, #0
 801517c:	6879      	ldr	r1, [r7, #4]
 801517e:	4798      	blx	r3
 8015180:	4603      	mov	r3, r0
 8015182:	76bb      	strb	r3, [r7, #26]
 8015184:	e001      	b.n	801518a <tcp_process+0x30e>
 8015186:	2300      	movs	r3, #0
 8015188:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801518a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801518e:	f113 0f0d 	cmn.w	r3, #13
 8015192:	d102      	bne.n	801519a <tcp_process+0x31e>
          return ERR_ABRT;
 8015194:	f06f 030c 	mvn.w	r3, #12
 8015198:	e250      	b.n	801563c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	8b5b      	ldrh	r3, [r3, #26]
 801519e:	f043 0302 	orr.w	r3, r3, #2
 80151a2:	b29a      	uxth	r2, r3
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80151a8:	e23a      	b.n	8015620 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80151aa:	4b9d      	ldr	r3, [pc, #628]	; (8015420 <tcp_process+0x5a4>)
 80151ac:	781b      	ldrb	r3, [r3, #0]
 80151ae:	f003 0310 	and.w	r3, r3, #16
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	f000 8234 	beq.w	8015620 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80151b8:	4b9a      	ldr	r3, [pc, #616]	; (8015424 <tcp_process+0x5a8>)
 80151ba:	6819      	ldr	r1, [r3, #0]
 80151bc:	4b9a      	ldr	r3, [pc, #616]	; (8015428 <tcp_process+0x5ac>)
 80151be:	881b      	ldrh	r3, [r3, #0]
 80151c0:	461a      	mov	r2, r3
 80151c2:	4b9a      	ldr	r3, [pc, #616]	; (801542c <tcp_process+0x5b0>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80151c8:	4b99      	ldr	r3, [pc, #612]	; (8015430 <tcp_process+0x5b4>)
 80151ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80151cc:	885b      	ldrh	r3, [r3, #2]
 80151ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80151d0:	4a97      	ldr	r2, [pc, #604]	; (8015430 <tcp_process+0x5b4>)
 80151d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80151d4:	8812      	ldrh	r2, [r2, #0]
 80151d6:	b292      	uxth	r2, r2
 80151d8:	9202      	str	r2, [sp, #8]
 80151da:	9301      	str	r3, [sp, #4]
 80151dc:	4b95      	ldr	r3, [pc, #596]	; (8015434 <tcp_process+0x5b8>)
 80151de:	9300      	str	r3, [sp, #0]
 80151e0:	4b95      	ldr	r3, [pc, #596]	; (8015438 <tcp_process+0x5bc>)
 80151e2:	4602      	mov	r2, r0
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f002 fc83 	bl	8017af0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80151f0:	2b05      	cmp	r3, #5
 80151f2:	f200 8215 	bhi.w	8015620 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2200      	movs	r2, #0
 80151fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f002 fa4d 	bl	801769c <tcp_rexmit_rto>
      break;
 8015202:	e20d      	b.n	8015620 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015204:	4b86      	ldr	r3, [pc, #536]	; (8015420 <tcp_process+0x5a4>)
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	f003 0310 	and.w	r3, r3, #16
 801520c:	2b00      	cmp	r3, #0
 801520e:	f000 80a1 	beq.w	8015354 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015212:	4b84      	ldr	r3, [pc, #528]	; (8015424 <tcp_process+0x5a8>)
 8015214:	681a      	ldr	r2, [r3, #0]
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801521a:	1ad3      	subs	r3, r2, r3
 801521c:	3b01      	subs	r3, #1
 801521e:	2b00      	cmp	r3, #0
 8015220:	db7e      	blt.n	8015320 <tcp_process+0x4a4>
 8015222:	4b80      	ldr	r3, [pc, #512]	; (8015424 <tcp_process+0x5a8>)
 8015224:	681a      	ldr	r2, [r3, #0]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801522a:	1ad3      	subs	r3, r2, r3
 801522c:	2b00      	cmp	r3, #0
 801522e:	dc77      	bgt.n	8015320 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2204      	movs	r2, #4
 8015234:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801523a:	2b00      	cmp	r3, #0
 801523c:	d102      	bne.n	8015244 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801523e:	23fa      	movs	r3, #250	; 0xfa
 8015240:	76bb      	strb	r3, [r7, #26]
 8015242:	e01d      	b.n	8015280 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015248:	699b      	ldr	r3, [r3, #24]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d106      	bne.n	801525c <tcp_process+0x3e0>
 801524e:	4b7b      	ldr	r3, [pc, #492]	; (801543c <tcp_process+0x5c0>)
 8015250:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015254:	497a      	ldr	r1, [pc, #488]	; (8015440 <tcp_process+0x5c4>)
 8015256:	487b      	ldr	r0, [pc, #492]	; (8015444 <tcp_process+0x5c8>)
 8015258:	f005 ff54 	bl	801b104 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015260:	699b      	ldr	r3, [r3, #24]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d00a      	beq.n	801527c <tcp_process+0x400>
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801526a:	699b      	ldr	r3, [r3, #24]
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	6910      	ldr	r0, [r2, #16]
 8015270:	2200      	movs	r2, #0
 8015272:	6879      	ldr	r1, [r7, #4]
 8015274:	4798      	blx	r3
 8015276:	4603      	mov	r3, r0
 8015278:	76bb      	strb	r3, [r7, #26]
 801527a:	e001      	b.n	8015280 <tcp_process+0x404>
 801527c:	23f0      	movs	r3, #240	; 0xf0
 801527e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015280:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d00a      	beq.n	801529e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015288:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801528c:	f113 0f0d 	cmn.w	r3, #13
 8015290:	d002      	beq.n	8015298 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	f7fd ff90 	bl	80131b8 <tcp_abort>
            }
            return ERR_ABRT;
 8015298:	f06f 030c 	mvn.w	r3, #12
 801529c:	e1ce      	b.n	801563c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f000 fae0 	bl	8015864 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80152a4:	4b68      	ldr	r3, [pc, #416]	; (8015448 <tcp_process+0x5cc>)
 80152a6:	881b      	ldrh	r3, [r3, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d005      	beq.n	80152b8 <tcp_process+0x43c>
            recv_acked--;
 80152ac:	4b66      	ldr	r3, [pc, #408]	; (8015448 <tcp_process+0x5cc>)
 80152ae:	881b      	ldrh	r3, [r3, #0]
 80152b0:	3b01      	subs	r3, #1
 80152b2:	b29a      	uxth	r2, r3
 80152b4:	4b64      	ldr	r3, [pc, #400]	; (8015448 <tcp_process+0x5cc>)
 80152b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152bc:	009a      	lsls	r2, r3, #2
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152c2:	005b      	lsls	r3, r3, #1
 80152c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80152c8:	428b      	cmp	r3, r1
 80152ca:	bf38      	it	cc
 80152cc:	460b      	movcc	r3, r1
 80152ce:	429a      	cmp	r2, r3
 80152d0:	d204      	bcs.n	80152dc <tcp_process+0x460>
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152d6:	009b      	lsls	r3, r3, #2
 80152d8:	b29b      	uxth	r3, r3
 80152da:	e00d      	b.n	80152f8 <tcp_process+0x47c>
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80152e6:	4293      	cmp	r3, r2
 80152e8:	d904      	bls.n	80152f4 <tcp_process+0x478>
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152ee:	005b      	lsls	r3, r3, #1
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	e001      	b.n	80152f8 <tcp_process+0x47c>
 80152f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80152f8:	687a      	ldr	r2, [r7, #4]
 80152fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80152fe:	4b53      	ldr	r3, [pc, #332]	; (801544c <tcp_process+0x5d0>)
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	f003 0320 	and.w	r3, r3, #32
 8015306:	2b00      	cmp	r3, #0
 8015308:	d037      	beq.n	801537a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	8b5b      	ldrh	r3, [r3, #26]
 801530e:	f043 0302 	orr.w	r3, r3, #2
 8015312:	b29a      	uxth	r2, r3
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2207      	movs	r2, #7
 801531c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801531e:	e02c      	b.n	801537a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015320:	4b40      	ldr	r3, [pc, #256]	; (8015424 <tcp_process+0x5a8>)
 8015322:	6819      	ldr	r1, [r3, #0]
 8015324:	4b40      	ldr	r3, [pc, #256]	; (8015428 <tcp_process+0x5ac>)
 8015326:	881b      	ldrh	r3, [r3, #0]
 8015328:	461a      	mov	r2, r3
 801532a:	4b40      	ldr	r3, [pc, #256]	; (801542c <tcp_process+0x5b0>)
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015330:	4b3f      	ldr	r3, [pc, #252]	; (8015430 <tcp_process+0x5b4>)
 8015332:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015334:	885b      	ldrh	r3, [r3, #2]
 8015336:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015338:	4a3d      	ldr	r2, [pc, #244]	; (8015430 <tcp_process+0x5b4>)
 801533a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801533c:	8812      	ldrh	r2, [r2, #0]
 801533e:	b292      	uxth	r2, r2
 8015340:	9202      	str	r2, [sp, #8]
 8015342:	9301      	str	r3, [sp, #4]
 8015344:	4b3b      	ldr	r3, [pc, #236]	; (8015434 <tcp_process+0x5b8>)
 8015346:	9300      	str	r3, [sp, #0]
 8015348:	4b3b      	ldr	r3, [pc, #236]	; (8015438 <tcp_process+0x5bc>)
 801534a:	4602      	mov	r2, r0
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f002 fbcf 	bl	8017af0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015352:	e167      	b.n	8015624 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015354:	4b32      	ldr	r3, [pc, #200]	; (8015420 <tcp_process+0x5a4>)
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	f003 0302 	and.w	r3, r3, #2
 801535c:	2b00      	cmp	r3, #0
 801535e:	f000 8161 	beq.w	8015624 <tcp_process+0x7a8>
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015366:	1e5a      	subs	r2, r3, #1
 8015368:	4b30      	ldr	r3, [pc, #192]	; (801542c <tcp_process+0x5b0>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	429a      	cmp	r2, r3
 801536e:	f040 8159 	bne.w	8015624 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f002 f9b4 	bl	80176e0 <tcp_rexmit>
      break;
 8015378:	e154      	b.n	8015624 <tcp_process+0x7a8>
 801537a:	e153      	b.n	8015624 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801537c:	6878      	ldr	r0, [r7, #4]
 801537e:	f000 fa71 	bl	8015864 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015382:	4b32      	ldr	r3, [pc, #200]	; (801544c <tcp_process+0x5d0>)
 8015384:	781b      	ldrb	r3, [r3, #0]
 8015386:	f003 0320 	and.w	r3, r3, #32
 801538a:	2b00      	cmp	r3, #0
 801538c:	f000 814c 	beq.w	8015628 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	8b5b      	ldrh	r3, [r3, #26]
 8015394:	f043 0302 	orr.w	r3, r3, #2
 8015398:	b29a      	uxth	r2, r3
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2207      	movs	r2, #7
 80153a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80153a4:	e140      	b.n	8015628 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f000 fa5c 	bl	8015864 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80153ac:	4b27      	ldr	r3, [pc, #156]	; (801544c <tcp_process+0x5d0>)
 80153ae:	781b      	ldrb	r3, [r3, #0]
 80153b0:	f003 0320 	and.w	r3, r3, #32
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d071      	beq.n	801549c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80153b8:	4b19      	ldr	r3, [pc, #100]	; (8015420 <tcp_process+0x5a4>)
 80153ba:	781b      	ldrb	r3, [r3, #0]
 80153bc:	f003 0310 	and.w	r3, r3, #16
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d060      	beq.n	8015486 <tcp_process+0x60a>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153c8:	4b16      	ldr	r3, [pc, #88]	; (8015424 <tcp_process+0x5a8>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d15a      	bne.n	8015486 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d156      	bne.n	8015486 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	8b5b      	ldrh	r3, [r3, #26]
 80153dc:	f043 0302 	orr.w	r3, r3, #2
 80153e0:	b29a      	uxth	r2, r3
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f7fe fdbe 	bl	8013f68 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80153ec:	4b18      	ldr	r3, [pc, #96]	; (8015450 <tcp_process+0x5d4>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	687a      	ldr	r2, [r7, #4]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d105      	bne.n	8015402 <tcp_process+0x586>
 80153f6:	4b16      	ldr	r3, [pc, #88]	; (8015450 <tcp_process+0x5d4>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	4a14      	ldr	r2, [pc, #80]	; (8015450 <tcp_process+0x5d4>)
 80153fe:	6013      	str	r3, [r2, #0]
 8015400:	e02e      	b.n	8015460 <tcp_process+0x5e4>
 8015402:	4b13      	ldr	r3, [pc, #76]	; (8015450 <tcp_process+0x5d4>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	617b      	str	r3, [r7, #20]
 8015408:	e027      	b.n	801545a <tcp_process+0x5de>
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	687a      	ldr	r2, [r7, #4]
 8015410:	429a      	cmp	r2, r3
 8015412:	d11f      	bne.n	8015454 <tcp_process+0x5d8>
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	68da      	ldr	r2, [r3, #12]
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	60da      	str	r2, [r3, #12]
 801541c:	e020      	b.n	8015460 <tcp_process+0x5e4>
 801541e:	bf00      	nop
 8015420:	24000794 	.word	0x24000794
 8015424:	2400078c 	.word	0x2400078c
 8015428:	24000792 	.word	0x24000792
 801542c:	24000788 	.word	0x24000788
 8015430:	24000778 	.word	0x24000778
 8015434:	24000f10 	.word	0x24000f10
 8015438:	24000f14 	.word	0x24000f14
 801543c:	08020860 	.word	0x08020860
 8015440:	08020b2c 	.word	0x08020b2c
 8015444:	080208d8 	.word	0x080208d8
 8015448:	24000790 	.word	0x24000790
 801544c:	24000795 	.word	0x24000795
 8015450:	24003df0 	.word	0x24003df0
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	617b      	str	r3, [r7, #20]
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d1d4      	bne.n	801540a <tcp_process+0x58e>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	2200      	movs	r2, #0
 8015464:	60da      	str	r2, [r3, #12]
 8015466:	4b77      	ldr	r3, [pc, #476]	; (8015644 <tcp_process+0x7c8>)
 8015468:	2201      	movs	r2, #1
 801546a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	220a      	movs	r2, #10
 8015470:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015472:	4b75      	ldr	r3, [pc, #468]	; (8015648 <tcp_process+0x7cc>)
 8015474:	681a      	ldr	r2, [r3, #0]
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	60da      	str	r2, [r3, #12]
 801547a:	4a73      	ldr	r2, [pc, #460]	; (8015648 <tcp_process+0x7cc>)
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6013      	str	r3, [r2, #0]
 8015480:	f002 fcf8 	bl	8017e74 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015484:	e0d2      	b.n	801562c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	8b5b      	ldrh	r3, [r3, #26]
 801548a:	f043 0302 	orr.w	r3, r3, #2
 801548e:	b29a      	uxth	r2, r3
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2208      	movs	r2, #8
 8015498:	751a      	strb	r2, [r3, #20]
      break;
 801549a:	e0c7      	b.n	801562c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801549c:	4b6b      	ldr	r3, [pc, #428]	; (801564c <tcp_process+0x7d0>)
 801549e:	781b      	ldrb	r3, [r3, #0]
 80154a0:	f003 0310 	and.w	r3, r3, #16
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f000 80c1 	beq.w	801562c <tcp_process+0x7b0>
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80154ae:	4b68      	ldr	r3, [pc, #416]	; (8015650 <tcp_process+0x7d4>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	429a      	cmp	r2, r3
 80154b4:	f040 80ba 	bne.w	801562c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80154bc:	2b00      	cmp	r3, #0
 80154be:	f040 80b5 	bne.w	801562c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2206      	movs	r2, #6
 80154c6:	751a      	strb	r2, [r3, #20]
      break;
 80154c8:	e0b0      	b.n	801562c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 f9ca 	bl	8015864 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80154d0:	4b60      	ldr	r3, [pc, #384]	; (8015654 <tcp_process+0x7d8>)
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	f003 0320 	and.w	r3, r3, #32
 80154d8:	2b00      	cmp	r3, #0
 80154da:	f000 80a9 	beq.w	8015630 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	8b5b      	ldrh	r3, [r3, #26]
 80154e2:	f043 0302 	orr.w	r3, r3, #2
 80154e6:	b29a      	uxth	r2, r3
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7fe fd3b 	bl	8013f68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80154f2:	4b59      	ldr	r3, [pc, #356]	; (8015658 <tcp_process+0x7dc>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d105      	bne.n	8015508 <tcp_process+0x68c>
 80154fc:	4b56      	ldr	r3, [pc, #344]	; (8015658 <tcp_process+0x7dc>)
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	68db      	ldr	r3, [r3, #12]
 8015502:	4a55      	ldr	r2, [pc, #340]	; (8015658 <tcp_process+0x7dc>)
 8015504:	6013      	str	r3, [r2, #0]
 8015506:	e013      	b.n	8015530 <tcp_process+0x6b4>
 8015508:	4b53      	ldr	r3, [pc, #332]	; (8015658 <tcp_process+0x7dc>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	613b      	str	r3, [r7, #16]
 801550e:	e00c      	b.n	801552a <tcp_process+0x6ae>
 8015510:	693b      	ldr	r3, [r7, #16]
 8015512:	68db      	ldr	r3, [r3, #12]
 8015514:	687a      	ldr	r2, [r7, #4]
 8015516:	429a      	cmp	r2, r3
 8015518:	d104      	bne.n	8015524 <tcp_process+0x6a8>
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	68da      	ldr	r2, [r3, #12]
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	60da      	str	r2, [r3, #12]
 8015522:	e005      	b.n	8015530 <tcp_process+0x6b4>
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	613b      	str	r3, [r7, #16]
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d1ef      	bne.n	8015510 <tcp_process+0x694>
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	2200      	movs	r2, #0
 8015534:	60da      	str	r2, [r3, #12]
 8015536:	4b43      	ldr	r3, [pc, #268]	; (8015644 <tcp_process+0x7c8>)
 8015538:	2201      	movs	r2, #1
 801553a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	220a      	movs	r2, #10
 8015540:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015542:	4b41      	ldr	r3, [pc, #260]	; (8015648 <tcp_process+0x7cc>)
 8015544:	681a      	ldr	r2, [r3, #0]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	60da      	str	r2, [r3, #12]
 801554a:	4a3f      	ldr	r2, [pc, #252]	; (8015648 <tcp_process+0x7cc>)
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	6013      	str	r3, [r2, #0]
 8015550:	f002 fc90 	bl	8017e74 <tcp_timer_needed>
      }
      break;
 8015554:	e06c      	b.n	8015630 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f000 f984 	bl	8015864 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801555c:	4b3b      	ldr	r3, [pc, #236]	; (801564c <tcp_process+0x7d0>)
 801555e:	781b      	ldrb	r3, [r3, #0]
 8015560:	f003 0310 	and.w	r3, r3, #16
 8015564:	2b00      	cmp	r3, #0
 8015566:	d065      	beq.n	8015634 <tcp_process+0x7b8>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801556c:	4b38      	ldr	r3, [pc, #224]	; (8015650 <tcp_process+0x7d4>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	429a      	cmp	r2, r3
 8015572:	d15f      	bne.n	8015634 <tcp_process+0x7b8>
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015578:	2b00      	cmp	r3, #0
 801557a:	d15b      	bne.n	8015634 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f7fe fcf3 	bl	8013f68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015582:	4b35      	ldr	r3, [pc, #212]	; (8015658 <tcp_process+0x7dc>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	429a      	cmp	r2, r3
 801558a:	d105      	bne.n	8015598 <tcp_process+0x71c>
 801558c:	4b32      	ldr	r3, [pc, #200]	; (8015658 <tcp_process+0x7dc>)
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	4a31      	ldr	r2, [pc, #196]	; (8015658 <tcp_process+0x7dc>)
 8015594:	6013      	str	r3, [r2, #0]
 8015596:	e013      	b.n	80155c0 <tcp_process+0x744>
 8015598:	4b2f      	ldr	r3, [pc, #188]	; (8015658 <tcp_process+0x7dc>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	60fb      	str	r3, [r7, #12]
 801559e:	e00c      	b.n	80155ba <tcp_process+0x73e>
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	687a      	ldr	r2, [r7, #4]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d104      	bne.n	80155b4 <tcp_process+0x738>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	68da      	ldr	r2, [r3, #12]
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	60da      	str	r2, [r3, #12]
 80155b2:	e005      	b.n	80155c0 <tcp_process+0x744>
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	68db      	ldr	r3, [r3, #12]
 80155b8:	60fb      	str	r3, [r7, #12]
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d1ef      	bne.n	80155a0 <tcp_process+0x724>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2200      	movs	r2, #0
 80155c4:	60da      	str	r2, [r3, #12]
 80155c6:	4b1f      	ldr	r3, [pc, #124]	; (8015644 <tcp_process+0x7c8>)
 80155c8:	2201      	movs	r2, #1
 80155ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	220a      	movs	r2, #10
 80155d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80155d2:	4b1d      	ldr	r3, [pc, #116]	; (8015648 <tcp_process+0x7cc>)
 80155d4:	681a      	ldr	r2, [r3, #0]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	60da      	str	r2, [r3, #12]
 80155da:	4a1b      	ldr	r2, [pc, #108]	; (8015648 <tcp_process+0x7cc>)
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6013      	str	r3, [r2, #0]
 80155e0:	f002 fc48 	bl	8017e74 <tcp_timer_needed>
      }
      break;
 80155e4:	e026      	b.n	8015634 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f000 f93c 	bl	8015864 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80155ec:	4b17      	ldr	r3, [pc, #92]	; (801564c <tcp_process+0x7d0>)
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	f003 0310 	and.w	r3, r3, #16
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d01f      	beq.n	8015638 <tcp_process+0x7bc>
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80155fc:	4b14      	ldr	r3, [pc, #80]	; (8015650 <tcp_process+0x7d4>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	429a      	cmp	r2, r3
 8015602:	d119      	bne.n	8015638 <tcp_process+0x7bc>
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015608:	2b00      	cmp	r3, #0
 801560a:	d115      	bne.n	8015638 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801560c:	4b11      	ldr	r3, [pc, #68]	; (8015654 <tcp_process+0x7d8>)
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	f043 0310 	orr.w	r3, r3, #16
 8015614:	b2da      	uxtb	r2, r3
 8015616:	4b0f      	ldr	r3, [pc, #60]	; (8015654 <tcp_process+0x7d8>)
 8015618:	701a      	strb	r2, [r3, #0]
      }
      break;
 801561a:	e00d      	b.n	8015638 <tcp_process+0x7bc>
    default:
      break;
 801561c:	bf00      	nop
 801561e:	e00c      	b.n	801563a <tcp_process+0x7be>
      break;
 8015620:	bf00      	nop
 8015622:	e00a      	b.n	801563a <tcp_process+0x7be>
      break;
 8015624:	bf00      	nop
 8015626:	e008      	b.n	801563a <tcp_process+0x7be>
      break;
 8015628:	bf00      	nop
 801562a:	e006      	b.n	801563a <tcp_process+0x7be>
      break;
 801562c:	bf00      	nop
 801562e:	e004      	b.n	801563a <tcp_process+0x7be>
      break;
 8015630:	bf00      	nop
 8015632:	e002      	b.n	801563a <tcp_process+0x7be>
      break;
 8015634:	bf00      	nop
 8015636:	e000      	b.n	801563a <tcp_process+0x7be>
      break;
 8015638:	bf00      	nop
  }
  return ERR_OK;
 801563a:	2300      	movs	r3, #0
}
 801563c:	4618      	mov	r0, r3
 801563e:	3724      	adds	r7, #36	; 0x24
 8015640:	46bd      	mov	sp, r7
 8015642:	bd90      	pop	{r4, r7, pc}
 8015644:	24003dec 	.word	0x24003dec
 8015648:	24003e00 	.word	0x24003e00
 801564c:	24000794 	.word	0x24000794
 8015650:	2400078c 	.word	0x2400078c
 8015654:	24000795 	.word	0x24000795
 8015658:	24003df0 	.word	0x24003df0

0801565c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801565c:	b590      	push	{r4, r7, lr}
 801565e:	b085      	sub	sp, #20
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d106      	bne.n	801567a <tcp_oos_insert_segment+0x1e>
 801566c:	4b3b      	ldr	r3, [pc, #236]	; (801575c <tcp_oos_insert_segment+0x100>)
 801566e:	f240 421f 	movw	r2, #1055	; 0x41f
 8015672:	493b      	ldr	r1, [pc, #236]	; (8015760 <tcp_oos_insert_segment+0x104>)
 8015674:	483b      	ldr	r0, [pc, #236]	; (8015764 <tcp_oos_insert_segment+0x108>)
 8015676:	f005 fd45 	bl	801b104 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	68db      	ldr	r3, [r3, #12]
 801567e:	899b      	ldrh	r3, [r3, #12]
 8015680:	b29b      	uxth	r3, r3
 8015682:	4618      	mov	r0, r3
 8015684:	f7f9 f97a 	bl	800e97c <lwip_htons>
 8015688:	4603      	mov	r3, r0
 801568a:	b2db      	uxtb	r3, r3
 801568c:	f003 0301 	and.w	r3, r3, #1
 8015690:	2b00      	cmp	r3, #0
 8015692:	d028      	beq.n	80156e6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015694:	6838      	ldr	r0, [r7, #0]
 8015696:	f7fe fa65 	bl	8013b64 <tcp_segs_free>
    next = NULL;
 801569a:	2300      	movs	r3, #0
 801569c:	603b      	str	r3, [r7, #0]
 801569e:	e056      	b.n	801574e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80156a0:	683b      	ldr	r3, [r7, #0]
 80156a2:	68db      	ldr	r3, [r3, #12]
 80156a4:	899b      	ldrh	r3, [r3, #12]
 80156a6:	b29b      	uxth	r3, r3
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7f9 f967 	bl	800e97c <lwip_htons>
 80156ae:	4603      	mov	r3, r0
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	f003 0301 	and.w	r3, r3, #1
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d00d      	beq.n	80156d6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	899b      	ldrh	r3, [r3, #12]
 80156c0:	b29c      	uxth	r4, r3
 80156c2:	2001      	movs	r0, #1
 80156c4:	f7f9 f95a 	bl	800e97c <lwip_htons>
 80156c8:	4603      	mov	r3, r0
 80156ca:	461a      	mov	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	4322      	orrs	r2, r4
 80156d2:	b292      	uxth	r2, r2
 80156d4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80156e0:	68f8      	ldr	r0, [r7, #12]
 80156e2:	f7fe fa54 	bl	8013b8e <tcp_seg_free>
    while (next &&
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d00e      	beq.n	801570a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	891b      	ldrh	r3, [r3, #8]
 80156f0:	461a      	mov	r2, r3
 80156f2:	4b1d      	ldr	r3, [pc, #116]	; (8015768 <tcp_oos_insert_segment+0x10c>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	441a      	add	r2, r3
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	68db      	ldr	r3, [r3, #12]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	6839      	ldr	r1, [r7, #0]
 8015700:	8909      	ldrh	r1, [r1, #8]
 8015702:	440b      	add	r3, r1
 8015704:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015706:	2b00      	cmp	r3, #0
 8015708:	daca      	bge.n	80156a0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d01e      	beq.n	801574e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	891b      	ldrh	r3, [r3, #8]
 8015714:	461a      	mov	r2, r3
 8015716:	4b14      	ldr	r3, [pc, #80]	; (8015768 <tcp_oos_insert_segment+0x10c>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	441a      	add	r2, r3
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015724:	2b00      	cmp	r3, #0
 8015726:	dd12      	ble.n	801574e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	68db      	ldr	r3, [r3, #12]
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	b29a      	uxth	r2, r3
 8015730:	4b0d      	ldr	r3, [pc, #52]	; (8015768 <tcp_oos_insert_segment+0x10c>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	b29b      	uxth	r3, r3
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	b29a      	uxth	r2, r3
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	685a      	ldr	r2, [r3, #4]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	891b      	ldrh	r3, [r3, #8]
 8015746:	4619      	mov	r1, r3
 8015748:	4610      	mov	r0, r2
 801574a:	f7fc fe27 	bl	801239c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	683a      	ldr	r2, [r7, #0]
 8015752:	601a      	str	r2, [r3, #0]
}
 8015754:	bf00      	nop
 8015756:	3714      	adds	r7, #20
 8015758:	46bd      	mov	sp, r7
 801575a:	bd90      	pop	{r4, r7, pc}
 801575c:	08020860 	.word	0x08020860
 8015760:	08020b4c 	.word	0x08020b4c
 8015764:	080208d8 	.word	0x080208d8
 8015768:	24000788 	.word	0x24000788

0801576c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801576c:	b5b0      	push	{r4, r5, r7, lr}
 801576e:	b086      	sub	sp, #24
 8015770:	af00      	add	r7, sp, #0
 8015772:	60f8      	str	r0, [r7, #12]
 8015774:	60b9      	str	r1, [r7, #8]
 8015776:	607a      	str	r2, [r7, #4]
 8015778:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801577a:	e03e      	b.n	80157fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	4618      	mov	r0, r3
 801578c:	f7fd f814 	bl	80127b8 <pbuf_clen>
 8015790:	4603      	mov	r3, r0
 8015792:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801579a:	8a7a      	ldrh	r2, [r7, #18]
 801579c:	429a      	cmp	r2, r3
 801579e:	d906      	bls.n	80157ae <tcp_free_acked_segments+0x42>
 80157a0:	4b2a      	ldr	r3, [pc, #168]	; (801584c <tcp_free_acked_segments+0xe0>)
 80157a2:	f240 4257 	movw	r2, #1111	; 0x457
 80157a6:	492a      	ldr	r1, [pc, #168]	; (8015850 <tcp_free_acked_segments+0xe4>)
 80157a8:	482a      	ldr	r0, [pc, #168]	; (8015854 <tcp_free_acked_segments+0xe8>)
 80157aa:	f005 fcab 	bl	801b104 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80157b4:	8a7b      	ldrh	r3, [r7, #18]
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	b29a      	uxth	r2, r3
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	891a      	ldrh	r2, [r3, #8]
 80157c4:	4b24      	ldr	r3, [pc, #144]	; (8015858 <tcp_free_acked_segments+0xec>)
 80157c6:	881b      	ldrh	r3, [r3, #0]
 80157c8:	4413      	add	r3, r2
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	4b22      	ldr	r3, [pc, #136]	; (8015858 <tcp_free_acked_segments+0xec>)
 80157ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80157d0:	6978      	ldr	r0, [r7, #20]
 80157d2:	f7fe f9dc 	bl	8013b8e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d00c      	beq.n	80157fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80157e0:	68bb      	ldr	r3, [r7, #8]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d109      	bne.n	80157fa <tcp_free_acked_segments+0x8e>
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d106      	bne.n	80157fa <tcp_free_acked_segments+0x8e>
 80157ec:	4b17      	ldr	r3, [pc, #92]	; (801584c <tcp_free_acked_segments+0xe0>)
 80157ee:	f240 4261 	movw	r2, #1121	; 0x461
 80157f2:	491a      	ldr	r1, [pc, #104]	; (801585c <tcp_free_acked_segments+0xf0>)
 80157f4:	4817      	ldr	r0, [pc, #92]	; (8015854 <tcp_free_acked_segments+0xe8>)
 80157f6:	f005 fc85 	bl	801b104 <iprintf>
  while (seg_list != NULL &&
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d020      	beq.n	8015842 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	68db      	ldr	r3, [r3, #12]
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	4618      	mov	r0, r3
 8015808:	f7f9 f8cd 	bl	800e9a6 <lwip_htonl>
 801580c:	4604      	mov	r4, r0
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	891b      	ldrh	r3, [r3, #8]
 8015812:	461d      	mov	r5, r3
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	68db      	ldr	r3, [r3, #12]
 8015818:	899b      	ldrh	r3, [r3, #12]
 801581a:	b29b      	uxth	r3, r3
 801581c:	4618      	mov	r0, r3
 801581e:	f7f9 f8ad 	bl	800e97c <lwip_htons>
 8015822:	4603      	mov	r3, r0
 8015824:	b2db      	uxtb	r3, r3
 8015826:	f003 0303 	and.w	r3, r3, #3
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <tcp_free_acked_segments+0xc6>
 801582e:	2301      	movs	r3, #1
 8015830:	e000      	b.n	8015834 <tcp_free_acked_segments+0xc8>
 8015832:	2300      	movs	r3, #0
 8015834:	442b      	add	r3, r5
 8015836:	18e2      	adds	r2, r4, r3
 8015838:	4b09      	ldr	r3, [pc, #36]	; (8015860 <tcp_free_acked_segments+0xf4>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801583e:	2b00      	cmp	r3, #0
 8015840:	dd9c      	ble.n	801577c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015842:	68bb      	ldr	r3, [r7, #8]
}
 8015844:	4618      	mov	r0, r3
 8015846:	3718      	adds	r7, #24
 8015848:	46bd      	mov	sp, r7
 801584a:	bdb0      	pop	{r4, r5, r7, pc}
 801584c:	08020860 	.word	0x08020860
 8015850:	08020b74 	.word	0x08020b74
 8015854:	080208d8 	.word	0x080208d8
 8015858:	24000790 	.word	0x24000790
 801585c:	08020b9c 	.word	0x08020b9c
 8015860:	2400078c 	.word	0x2400078c

08015864 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015864:	b5b0      	push	{r4, r5, r7, lr}
 8015866:	b094      	sub	sp, #80	; 0x50
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801586c:	2300      	movs	r3, #0
 801586e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d106      	bne.n	8015884 <tcp_receive+0x20>
 8015876:	4ba6      	ldr	r3, [pc, #664]	; (8015b10 <tcp_receive+0x2ac>)
 8015878:	f240 427b 	movw	r2, #1147	; 0x47b
 801587c:	49a5      	ldr	r1, [pc, #660]	; (8015b14 <tcp_receive+0x2b0>)
 801587e:	48a6      	ldr	r0, [pc, #664]	; (8015b18 <tcp_receive+0x2b4>)
 8015880:	f005 fc40 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	7d1b      	ldrb	r3, [r3, #20]
 8015888:	2b03      	cmp	r3, #3
 801588a:	d806      	bhi.n	801589a <tcp_receive+0x36>
 801588c:	4ba0      	ldr	r3, [pc, #640]	; (8015b10 <tcp_receive+0x2ac>)
 801588e:	f240 427c 	movw	r2, #1148	; 0x47c
 8015892:	49a2      	ldr	r1, [pc, #648]	; (8015b1c <tcp_receive+0x2b8>)
 8015894:	48a0      	ldr	r0, [pc, #640]	; (8015b18 <tcp_receive+0x2b4>)
 8015896:	f005 fc35 	bl	801b104 <iprintf>

  if (flags & TCP_ACK) {
 801589a:	4ba1      	ldr	r3, [pc, #644]	; (8015b20 <tcp_receive+0x2bc>)
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	f003 0310 	and.w	r3, r3, #16
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	f000 8263 	beq.w	8015d6e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80158ae:	461a      	mov	r2, r3
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158b4:	4413      	add	r3, r2
 80158b6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80158bc:	4b99      	ldr	r3, [pc, #612]	; (8015b24 <tcp_receive+0x2c0>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	1ad3      	subs	r3, r2, r3
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	db1b      	blt.n	80158fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80158ca:	4b96      	ldr	r3, [pc, #600]	; (8015b24 <tcp_receive+0x2c0>)
 80158cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d106      	bne.n	80158e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80158d6:	4b94      	ldr	r3, [pc, #592]	; (8015b28 <tcp_receive+0x2c4>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	1ad3      	subs	r3, r2, r3
 80158dc:	2b00      	cmp	r3, #0
 80158de:	db0e      	blt.n	80158fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80158e4:	4b90      	ldr	r3, [pc, #576]	; (8015b28 <tcp_receive+0x2c4>)
 80158e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d125      	bne.n	8015938 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80158ec:	4b8f      	ldr	r3, [pc, #572]	; (8015b2c <tcp_receive+0x2c8>)
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	89db      	ldrh	r3, [r3, #14]
 80158f2:	b29a      	uxth	r2, r3
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d91c      	bls.n	8015938 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80158fe:	4b8b      	ldr	r3, [pc, #556]	; (8015b2c <tcp_receive+0x2c8>)
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	89db      	ldrh	r3, [r3, #14]
 8015904:	b29a      	uxth	r2, r3
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015918:	429a      	cmp	r2, r3
 801591a:	d205      	bcs.n	8015928 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015928:	4b7e      	ldr	r3, [pc, #504]	; (8015b24 <tcp_receive+0x2c0>)
 801592a:	681a      	ldr	r2, [r3, #0]
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015930:	4b7d      	ldr	r3, [pc, #500]	; (8015b28 <tcp_receive+0x2c4>)
 8015932:	681a      	ldr	r2, [r3, #0]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015938:	4b7b      	ldr	r3, [pc, #492]	; (8015b28 <tcp_receive+0x2c4>)
 801593a:	681a      	ldr	r2, [r3, #0]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015940:	1ad3      	subs	r3, r2, r3
 8015942:	2b00      	cmp	r3, #0
 8015944:	dc58      	bgt.n	80159f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015946:	4b7a      	ldr	r3, [pc, #488]	; (8015b30 <tcp_receive+0x2cc>)
 8015948:	881b      	ldrh	r3, [r3, #0]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d14b      	bne.n	80159e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015958:	4413      	add	r3, r2
 801595a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801595c:	429a      	cmp	r2, r3
 801595e:	d142      	bne.n	80159e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015966:	2b00      	cmp	r3, #0
 8015968:	db3d      	blt.n	80159e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801596e:	4b6e      	ldr	r3, [pc, #440]	; (8015b28 <tcp_receive+0x2c4>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	429a      	cmp	r2, r3
 8015974:	d137      	bne.n	80159e6 <tcp_receive+0x182>
              found_dupack = 1;
 8015976:	2301      	movs	r3, #1
 8015978:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015980:	2bff      	cmp	r3, #255	; 0xff
 8015982:	d007      	beq.n	8015994 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801598a:	3301      	adds	r3, #1
 801598c:	b2da      	uxtb	r2, r3
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801599a:	2b03      	cmp	r3, #3
 801599c:	d91b      	bls.n	80159d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159a8:	4413      	add	r3, r2
 80159aa:	b29a      	uxth	r2, r3
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d30a      	bcc.n	80159cc <tcp_receive+0x168>
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80159c0:	4413      	add	r3, r2
 80159c2:	b29a      	uxth	r2, r3
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80159ca:	e004      	b.n	80159d6 <tcp_receive+0x172>
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80159dc:	2b02      	cmp	r3, #2
 80159de:	d902      	bls.n	80159e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f001 fee9 	bl	80177b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80159e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	f040 8160 	bne.w	8015cae <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2200      	movs	r2, #0
 80159f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80159f6:	e15a      	b.n	8015cae <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80159f8:	4b4b      	ldr	r3, [pc, #300]	; (8015b28 <tcp_receive+0x2c4>)
 80159fa:	681a      	ldr	r2, [r3, #0]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a00:	1ad3      	subs	r3, r2, r3
 8015a02:	3b01      	subs	r3, #1
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	f2c0 814d 	blt.w	8015ca4 <tcp_receive+0x440>
 8015a0a:	4b47      	ldr	r3, [pc, #284]	; (8015b28 <tcp_receive+0x2c4>)
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a12:	1ad3      	subs	r3, r2, r3
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f300 8145 	bgt.w	8015ca4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	8b5b      	ldrh	r3, [r3, #26]
 8015a1e:	f003 0304 	and.w	r3, r3, #4
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d010      	beq.n	8015a48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	8b5b      	ldrh	r3, [r3, #26]
 8015a2a:	f023 0304 	bic.w	r3, r3, #4
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2200      	movs	r2, #0
 8015a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a56:	10db      	asrs	r3, r3, #3
 8015a58:	b21b      	sxth	r3, r3
 8015a5a:	b29a      	uxth	r2, r3
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a62:	b29b      	uxth	r3, r3
 8015a64:	4413      	add	r3, r2
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	b21a      	sxth	r2, r3
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015a70:	4b2d      	ldr	r3, [pc, #180]	; (8015b28 <tcp_receive+0x2c4>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	b29a      	uxth	r2, r3
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a7a:	b29b      	uxth	r3, r3
 8015a7c:	1ad3      	subs	r3, r2, r3
 8015a7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2200      	movs	r2, #0
 8015a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015a88:	4b27      	ldr	r3, [pc, #156]	; (8015b28 <tcp_receive+0x2c4>)
 8015a8a:	681a      	ldr	r2, [r3, #0]
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	7d1b      	ldrb	r3, [r3, #20]
 8015a94:	2b03      	cmp	r3, #3
 8015a96:	f240 8096 	bls.w	8015bc6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d244      	bcs.n	8015b34 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	8b5b      	ldrh	r3, [r3, #26]
 8015aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d001      	beq.n	8015aba <tcp_receive+0x256>
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	e000      	b.n	8015abc <tcp_receive+0x258>
 8015aba:	2302      	movs	r3, #2
 8015abc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015ac0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015ac4:	b29a      	uxth	r2, r3
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015aca:	fb12 f303 	smulbb	r3, r2, r3
 8015ace:	b29b      	uxth	r3, r3
 8015ad0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015ad2:	4293      	cmp	r3, r2
 8015ad4:	bf28      	it	cs
 8015ad6:	4613      	movcs	r3, r2
 8015ad8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015ae0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015ae2:	4413      	add	r3, r2
 8015ae4:	b29a      	uxth	r2, r3
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d309      	bcc.n	8015b04 <tcp_receive+0x2a0>
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015af6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015af8:	4413      	add	r3, r2
 8015afa:	b29a      	uxth	r2, r3
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015b02:	e060      	b.n	8015bc6 <tcp_receive+0x362>
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015b0e:	e05a      	b.n	8015bc6 <tcp_receive+0x362>
 8015b10:	08020860 	.word	0x08020860
 8015b14:	08020bbc 	.word	0x08020bbc
 8015b18:	080208d8 	.word	0x080208d8
 8015b1c:	08020bd8 	.word	0x08020bd8
 8015b20:	24000794 	.word	0x24000794
 8015b24:	24000788 	.word	0x24000788
 8015b28:	2400078c 	.word	0x2400078c
 8015b2c:	24000778 	.word	0x24000778
 8015b30:	24000792 	.word	0x24000792
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015b3c:	4413      	add	r3, r2
 8015b3e:	b29a      	uxth	r2, r3
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d309      	bcc.n	8015b5e <tcp_receive+0x2fa>
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015b50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015b52:	4413      	add	r3, r2
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015b5c:	e004      	b.n	8015b68 <tcp_receive+0x304>
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015b74:	429a      	cmp	r2, r3
 8015b76:	d326      	bcc.n	8015bc6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015b84:	1ad3      	subs	r3, r2, r3
 8015b86:	b29a      	uxth	r2, r3
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b98:	4413      	add	r3, r2
 8015b9a:	b29a      	uxth	r2, r3
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d30a      	bcc.n	8015bbc <tcp_receive+0x358>
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bb0:	4413      	add	r3, r2
 8015bb2:	b29a      	uxth	r2, r3
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015bba:	e004      	b.n	8015bc6 <tcp_receive+0x362>
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bce:	4a98      	ldr	r2, [pc, #608]	; (8015e30 <tcp_receive+0x5cc>)
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f7ff fdcb 	bl	801576c <tcp_free_acked_segments>
 8015bd6:	4602      	mov	r2, r0
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015be4:	4a93      	ldr	r2, [pc, #588]	; (8015e34 <tcp_receive+0x5d0>)
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f7ff fdc0 	bl	801576c <tcp_free_acked_segments>
 8015bec:	4602      	mov	r2, r0
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d104      	bne.n	8015c04 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c00:	861a      	strh	r2, [r3, #48]	; 0x30
 8015c02:	e002      	b.n	8015c0a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2200      	movs	r2, #0
 8015c08:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d103      	bne.n	8015c20 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015c26:	4b84      	ldr	r3, [pc, #528]	; (8015e38 <tcp_receive+0x5d4>)
 8015c28:	881b      	ldrh	r3, [r3, #0]
 8015c2a:	4413      	add	r3, r2
 8015c2c:	b29a      	uxth	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	8b5b      	ldrh	r3, [r3, #26]
 8015c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d035      	beq.n	8015cac <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d118      	bne.n	8015c7a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d00c      	beq.n	8015c6a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c58:	68db      	ldr	r3, [r3, #12]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7f8 fea2 	bl	800e9a6 <lwip_htonl>
 8015c62:	4603      	mov	r3, r0
 8015c64:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	dc20      	bgt.n	8015cac <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	8b5b      	ldrh	r3, [r3, #26]
 8015c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015c78:	e018      	b.n	8015cac <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7f8 fe8d 	bl	800e9a6 <lwip_htonl>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	1ae3      	subs	r3, r4, r3
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	dc0b      	bgt.n	8015cac <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	8b5b      	ldrh	r3, [r3, #26]
 8015c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015c9c:	b29a      	uxth	r2, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015ca2:	e003      	b.n	8015cac <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f001 ff75 	bl	8017b94 <tcp_send_empty_ack>
 8015caa:	e000      	b.n	8015cae <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015cac:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d05b      	beq.n	8015d6e <tcp_receive+0x50a>
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015cba:	4b60      	ldr	r3, [pc, #384]	; (8015e3c <tcp_receive+0x5d8>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	1ad3      	subs	r3, r2, r3
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	da54      	bge.n	8015d6e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015cc4:	4b5e      	ldr	r3, [pc, #376]	; (8015e40 <tcp_receive+0x5dc>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	1ad3      	subs	r3, r2, r3
 8015cd2:	b29b      	uxth	r3, r3
 8015cd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015cd8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015ce2:	10db      	asrs	r3, r3, #3
 8015ce4:	b21b      	sxth	r3, r3
 8015ce6:	b29b      	uxth	r3, r3
 8015ce8:	1ad3      	subs	r3, r2, r3
 8015cea:	b29b      	uxth	r3, r3
 8015cec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015cfc:	4413      	add	r3, r2
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	b21a      	sxth	r2, r3
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015d06:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	da05      	bge.n	8015d1a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8015d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015d12:	425b      	negs	r3, r3
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015d1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015d24:	109b      	asrs	r3, r3, #2
 8015d26:	b21b      	sxth	r3, r3
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	1ad3      	subs	r3, r2, r3
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015d38:	b29a      	uxth	r2, r3
 8015d3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015d3e:	4413      	add	r3, r2
 8015d40:	b29b      	uxth	r3, r3
 8015d42:	b21a      	sxth	r2, r3
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015d4e:	10db      	asrs	r3, r3, #3
 8015d50:	b21b      	sxth	r3, r3
 8015d52:	b29a      	uxth	r2, r3
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	4413      	add	r3, r2
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	b21a      	sxth	r2, r3
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015d6e:	4b35      	ldr	r3, [pc, #212]	; (8015e44 <tcp_receive+0x5e0>)
 8015d70:	881b      	ldrh	r3, [r3, #0]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	f000 84e1 	beq.w	801673a <tcp_receive+0xed6>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	7d1b      	ldrb	r3, [r3, #20]
 8015d7c:	2b06      	cmp	r3, #6
 8015d7e:	f200 84dc 	bhi.w	801673a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d86:	4b30      	ldr	r3, [pc, #192]	; (8015e48 <tcp_receive+0x5e4>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	1ad3      	subs	r3, r2, r3
 8015d8c:	3b01      	subs	r3, #1
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	f2c0 808e 	blt.w	8015eb0 <tcp_receive+0x64c>
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d98:	4b2a      	ldr	r3, [pc, #168]	; (8015e44 <tcp_receive+0x5e0>)
 8015d9a:	881b      	ldrh	r3, [r3, #0]
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	4b2a      	ldr	r3, [pc, #168]	; (8015e48 <tcp_receive+0x5e4>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	440b      	add	r3, r1
 8015da4:	1ad3      	subs	r3, r2, r3
 8015da6:	3301      	adds	r3, #1
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	f300 8081 	bgt.w	8015eb0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015dae:	4b27      	ldr	r3, [pc, #156]	; (8015e4c <tcp_receive+0x5e8>)
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015db8:	4b23      	ldr	r3, [pc, #140]	; (8015e48 <tcp_receive+0x5e4>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	1ad3      	subs	r3, r2, r3
 8015dbe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015dc0:	4b22      	ldr	r3, [pc, #136]	; (8015e4c <tcp_receive+0x5e8>)
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d106      	bne.n	8015dd6 <tcp_receive+0x572>
 8015dc8:	4b21      	ldr	r3, [pc, #132]	; (8015e50 <tcp_receive+0x5ec>)
 8015dca:	f240 5294 	movw	r2, #1428	; 0x594
 8015dce:	4921      	ldr	r1, [pc, #132]	; (8015e54 <tcp_receive+0x5f0>)
 8015dd0:	4821      	ldr	r0, [pc, #132]	; (8015e58 <tcp_receive+0x5f4>)
 8015dd2:	f005 f997 	bl	801b104 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	d906      	bls.n	8015dee <tcp_receive+0x58a>
 8015de0:	4b1b      	ldr	r3, [pc, #108]	; (8015e50 <tcp_receive+0x5ec>)
 8015de2:	f240 5295 	movw	r2, #1429	; 0x595
 8015de6:	491d      	ldr	r1, [pc, #116]	; (8015e5c <tcp_receive+0x5f8>)
 8015de8:	481b      	ldr	r0, [pc, #108]	; (8015e58 <tcp_receive+0x5f4>)
 8015dea:	f005 f98b 	bl	801b104 <iprintf>
      off = (u16_t)off32;
 8015dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015df4:	4b15      	ldr	r3, [pc, #84]	; (8015e4c <tcp_receive+0x5e8>)
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	891b      	ldrh	r3, [r3, #8]
 8015dfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d906      	bls.n	8015e10 <tcp_receive+0x5ac>
 8015e02:	4b13      	ldr	r3, [pc, #76]	; (8015e50 <tcp_receive+0x5ec>)
 8015e04:	f240 5297 	movw	r2, #1431	; 0x597
 8015e08:	4915      	ldr	r1, [pc, #84]	; (8015e60 <tcp_receive+0x5fc>)
 8015e0a:	4813      	ldr	r0, [pc, #76]	; (8015e58 <tcp_receive+0x5f4>)
 8015e0c:	f005 f97a 	bl	801b104 <iprintf>
      inseg.len -= off;
 8015e10:	4b0e      	ldr	r3, [pc, #56]	; (8015e4c <tcp_receive+0x5e8>)
 8015e12:	891a      	ldrh	r2, [r3, #8]
 8015e14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	b29a      	uxth	r2, r3
 8015e1c:	4b0b      	ldr	r3, [pc, #44]	; (8015e4c <tcp_receive+0x5e8>)
 8015e1e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015e20:	4b0a      	ldr	r3, [pc, #40]	; (8015e4c <tcp_receive+0x5e8>)
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	891a      	ldrh	r2, [r3, #8]
 8015e26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e2a:	1ad3      	subs	r3, r2, r3
 8015e2c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015e2e:	e029      	b.n	8015e84 <tcp_receive+0x620>
 8015e30:	08020bf4 	.word	0x08020bf4
 8015e34:	08020bfc 	.word	0x08020bfc
 8015e38:	24000790 	.word	0x24000790
 8015e3c:	2400078c 	.word	0x2400078c
 8015e40:	24003df4 	.word	0x24003df4
 8015e44:	24000792 	.word	0x24000792
 8015e48:	24000788 	.word	0x24000788
 8015e4c:	24000768 	.word	0x24000768
 8015e50:	08020860 	.word	0x08020860
 8015e54:	08020c04 	.word	0x08020c04
 8015e58:	080208d8 	.word	0x080208d8
 8015e5c:	08020c14 	.word	0x08020c14
 8015e60:	08020c24 	.word	0x08020c24
        off -= p->len;
 8015e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e66:	895b      	ldrh	r3, [r3, #10]
 8015e68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e6c:	1ad3      	subs	r3, r2, r3
 8015e6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015e76:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e86:	895b      	ldrh	r3, [r3, #10]
 8015e88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d8e9      	bhi.n	8015e64 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015e90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015e94:	4619      	mov	r1, r3
 8015e96:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015e98:	f7fc fb80 	bl	801259c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ea0:	4a91      	ldr	r2, [pc, #580]	; (80160e8 <tcp_receive+0x884>)
 8015ea2:	6013      	str	r3, [r2, #0]
 8015ea4:	4b91      	ldr	r3, [pc, #580]	; (80160ec <tcp_receive+0x888>)
 8015ea6:	68db      	ldr	r3, [r3, #12]
 8015ea8:	4a8f      	ldr	r2, [pc, #572]	; (80160e8 <tcp_receive+0x884>)
 8015eaa:	6812      	ldr	r2, [r2, #0]
 8015eac:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015eae:	e00d      	b.n	8015ecc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015eb0:	4b8d      	ldr	r3, [pc, #564]	; (80160e8 <tcp_receive+0x884>)
 8015eb2:	681a      	ldr	r2, [r3, #0]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb8:	1ad3      	subs	r3, r2, r3
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	da06      	bge.n	8015ecc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	8b5b      	ldrh	r3, [r3, #26]
 8015ec2:	f043 0302 	orr.w	r3, r3, #2
 8015ec6:	b29a      	uxth	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015ecc:	4b86      	ldr	r3, [pc, #536]	; (80160e8 <tcp_receive+0x884>)
 8015ece:	681a      	ldr	r2, [r3, #0]
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed4:	1ad3      	subs	r3, r2, r3
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	f2c0 842a 	blt.w	8016730 <tcp_receive+0xecc>
 8015edc:	4b82      	ldr	r3, [pc, #520]	; (80160e8 <tcp_receive+0x884>)
 8015ede:	681a      	ldr	r2, [r3, #0]
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ee4:	6879      	ldr	r1, [r7, #4]
 8015ee6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015ee8:	440b      	add	r3, r1
 8015eea:	1ad3      	subs	r3, r2, r3
 8015eec:	3301      	adds	r3, #1
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	f300 841e 	bgt.w	8016730 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ef8:	4b7b      	ldr	r3, [pc, #492]	; (80160e8 <tcp_receive+0x884>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	429a      	cmp	r2, r3
 8015efe:	f040 829a 	bne.w	8016436 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015f02:	4b7a      	ldr	r3, [pc, #488]	; (80160ec <tcp_receive+0x888>)
 8015f04:	891c      	ldrh	r4, [r3, #8]
 8015f06:	4b79      	ldr	r3, [pc, #484]	; (80160ec <tcp_receive+0x888>)
 8015f08:	68db      	ldr	r3, [r3, #12]
 8015f0a:	899b      	ldrh	r3, [r3, #12]
 8015f0c:	b29b      	uxth	r3, r3
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7f8 fd34 	bl	800e97c <lwip_htons>
 8015f14:	4603      	mov	r3, r0
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	f003 0303 	and.w	r3, r3, #3
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d001      	beq.n	8015f24 <tcp_receive+0x6c0>
 8015f20:	2301      	movs	r3, #1
 8015f22:	e000      	b.n	8015f26 <tcp_receive+0x6c2>
 8015f24:	2300      	movs	r3, #0
 8015f26:	4423      	add	r3, r4
 8015f28:	b29a      	uxth	r2, r3
 8015f2a:	4b71      	ldr	r3, [pc, #452]	; (80160f0 <tcp_receive+0x88c>)
 8015f2c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f32:	4b6f      	ldr	r3, [pc, #444]	; (80160f0 <tcp_receive+0x88c>)
 8015f34:	881b      	ldrh	r3, [r3, #0]
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d275      	bcs.n	8016026 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015f3a:	4b6c      	ldr	r3, [pc, #432]	; (80160ec <tcp_receive+0x888>)
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	899b      	ldrh	r3, [r3, #12]
 8015f40:	b29b      	uxth	r3, r3
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7f8 fd1a 	bl	800e97c <lwip_htons>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	b2db      	uxtb	r3, r3
 8015f4c:	f003 0301 	and.w	r3, r3, #1
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d01f      	beq.n	8015f94 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015f54:	4b65      	ldr	r3, [pc, #404]	; (80160ec <tcp_receive+0x888>)
 8015f56:	68db      	ldr	r3, [r3, #12]
 8015f58:	899b      	ldrh	r3, [r3, #12]
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	b21b      	sxth	r3, r3
 8015f5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015f62:	b21c      	sxth	r4, r3
 8015f64:	4b61      	ldr	r3, [pc, #388]	; (80160ec <tcp_receive+0x888>)
 8015f66:	68db      	ldr	r3, [r3, #12]
 8015f68:	899b      	ldrh	r3, [r3, #12]
 8015f6a:	b29b      	uxth	r3, r3
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7f8 fd05 	bl	800e97c <lwip_htons>
 8015f72:	4603      	mov	r3, r0
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	b29b      	uxth	r3, r3
 8015f78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7f8 fcfc 	bl	800e97c <lwip_htons>
 8015f84:	4603      	mov	r3, r0
 8015f86:	b21b      	sxth	r3, r3
 8015f88:	4323      	orrs	r3, r4
 8015f8a:	b21a      	sxth	r2, r3
 8015f8c:	4b57      	ldr	r3, [pc, #348]	; (80160ec <tcp_receive+0x888>)
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	b292      	uxth	r2, r2
 8015f92:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f98:	4b54      	ldr	r3, [pc, #336]	; (80160ec <tcp_receive+0x888>)
 8015f9a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015f9c:	4b53      	ldr	r3, [pc, #332]	; (80160ec <tcp_receive+0x888>)
 8015f9e:	68db      	ldr	r3, [r3, #12]
 8015fa0:	899b      	ldrh	r3, [r3, #12]
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7f8 fce9 	bl	800e97c <lwip_htons>
 8015faa:	4603      	mov	r3, r0
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	f003 0302 	and.w	r3, r3, #2
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d005      	beq.n	8015fc2 <tcp_receive+0x75e>
            inseg.len -= 1;
 8015fb6:	4b4d      	ldr	r3, [pc, #308]	; (80160ec <tcp_receive+0x888>)
 8015fb8:	891b      	ldrh	r3, [r3, #8]
 8015fba:	3b01      	subs	r3, #1
 8015fbc:	b29a      	uxth	r2, r3
 8015fbe:	4b4b      	ldr	r3, [pc, #300]	; (80160ec <tcp_receive+0x888>)
 8015fc0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015fc2:	4b4a      	ldr	r3, [pc, #296]	; (80160ec <tcp_receive+0x888>)
 8015fc4:	685b      	ldr	r3, [r3, #4]
 8015fc6:	4a49      	ldr	r2, [pc, #292]	; (80160ec <tcp_receive+0x888>)
 8015fc8:	8912      	ldrh	r2, [r2, #8]
 8015fca:	4611      	mov	r1, r2
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7fc f9e5 	bl	801239c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015fd2:	4b46      	ldr	r3, [pc, #280]	; (80160ec <tcp_receive+0x888>)
 8015fd4:	891c      	ldrh	r4, [r3, #8]
 8015fd6:	4b45      	ldr	r3, [pc, #276]	; (80160ec <tcp_receive+0x888>)
 8015fd8:	68db      	ldr	r3, [r3, #12]
 8015fda:	899b      	ldrh	r3, [r3, #12]
 8015fdc:	b29b      	uxth	r3, r3
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f7f8 fccc 	bl	800e97c <lwip_htons>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	b2db      	uxtb	r3, r3
 8015fe8:	f003 0303 	and.w	r3, r3, #3
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d001      	beq.n	8015ff4 <tcp_receive+0x790>
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	e000      	b.n	8015ff6 <tcp_receive+0x792>
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	4423      	add	r3, r4
 8015ff8:	b29a      	uxth	r2, r3
 8015ffa:	4b3d      	ldr	r3, [pc, #244]	; (80160f0 <tcp_receive+0x88c>)
 8015ffc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015ffe:	4b3c      	ldr	r3, [pc, #240]	; (80160f0 <tcp_receive+0x88c>)
 8016000:	881b      	ldrh	r3, [r3, #0]
 8016002:	461a      	mov	r2, r3
 8016004:	4b38      	ldr	r3, [pc, #224]	; (80160e8 <tcp_receive+0x884>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	441a      	add	r2, r3
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801600e:	6879      	ldr	r1, [r7, #4]
 8016010:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016012:	440b      	add	r3, r1
 8016014:	429a      	cmp	r2, r3
 8016016:	d006      	beq.n	8016026 <tcp_receive+0x7c2>
 8016018:	4b36      	ldr	r3, [pc, #216]	; (80160f4 <tcp_receive+0x890>)
 801601a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801601e:	4936      	ldr	r1, [pc, #216]	; (80160f8 <tcp_receive+0x894>)
 8016020:	4836      	ldr	r0, [pc, #216]	; (80160fc <tcp_receive+0x898>)
 8016022:	f005 f86f 	bl	801b104 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801602a:	2b00      	cmp	r3, #0
 801602c:	f000 80e7 	beq.w	80161fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016030:	4b2e      	ldr	r3, [pc, #184]	; (80160ec <tcp_receive+0x888>)
 8016032:	68db      	ldr	r3, [r3, #12]
 8016034:	899b      	ldrh	r3, [r3, #12]
 8016036:	b29b      	uxth	r3, r3
 8016038:	4618      	mov	r0, r3
 801603a:	f7f8 fc9f 	bl	800e97c <lwip_htons>
 801603e:	4603      	mov	r3, r0
 8016040:	b2db      	uxtb	r3, r3
 8016042:	f003 0301 	and.w	r3, r3, #1
 8016046:	2b00      	cmp	r3, #0
 8016048:	d010      	beq.n	801606c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801604a:	e00a      	b.n	8016062 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016050:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016056:	681a      	ldr	r2, [r3, #0]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801605c:	68f8      	ldr	r0, [r7, #12]
 801605e:	f7fd fd96 	bl	8013b8e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016066:	2b00      	cmp	r3, #0
 8016068:	d1f0      	bne.n	801604c <tcp_receive+0x7e8>
 801606a:	e0c8      	b.n	80161fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016070:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016072:	e052      	b.n	801611a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016076:	68db      	ldr	r3, [r3, #12]
 8016078:	899b      	ldrh	r3, [r3, #12]
 801607a:	b29b      	uxth	r3, r3
 801607c:	4618      	mov	r0, r3
 801607e:	f7f8 fc7d 	bl	800e97c <lwip_htons>
 8016082:	4603      	mov	r3, r0
 8016084:	b2db      	uxtb	r3, r3
 8016086:	f003 0301 	and.w	r3, r3, #1
 801608a:	2b00      	cmp	r3, #0
 801608c:	d03d      	beq.n	801610a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801608e:	4b17      	ldr	r3, [pc, #92]	; (80160ec <tcp_receive+0x888>)
 8016090:	68db      	ldr	r3, [r3, #12]
 8016092:	899b      	ldrh	r3, [r3, #12]
 8016094:	b29b      	uxth	r3, r3
 8016096:	4618      	mov	r0, r3
 8016098:	f7f8 fc70 	bl	800e97c <lwip_htons>
 801609c:	4603      	mov	r3, r0
 801609e:	b2db      	uxtb	r3, r3
 80160a0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d130      	bne.n	801610a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80160a8:	4b10      	ldr	r3, [pc, #64]	; (80160ec <tcp_receive+0x888>)
 80160aa:	68db      	ldr	r3, [r3, #12]
 80160ac:	899b      	ldrh	r3, [r3, #12]
 80160ae:	b29c      	uxth	r4, r3
 80160b0:	2001      	movs	r0, #1
 80160b2:	f7f8 fc63 	bl	800e97c <lwip_htons>
 80160b6:	4603      	mov	r3, r0
 80160b8:	461a      	mov	r2, r3
 80160ba:	4b0c      	ldr	r3, [pc, #48]	; (80160ec <tcp_receive+0x888>)
 80160bc:	68db      	ldr	r3, [r3, #12]
 80160be:	4322      	orrs	r2, r4
 80160c0:	b292      	uxth	r2, r2
 80160c2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80160c4:	4b09      	ldr	r3, [pc, #36]	; (80160ec <tcp_receive+0x888>)
 80160c6:	891c      	ldrh	r4, [r3, #8]
 80160c8:	4b08      	ldr	r3, [pc, #32]	; (80160ec <tcp_receive+0x888>)
 80160ca:	68db      	ldr	r3, [r3, #12]
 80160cc:	899b      	ldrh	r3, [r3, #12]
 80160ce:	b29b      	uxth	r3, r3
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7f8 fc53 	bl	800e97c <lwip_htons>
 80160d6:	4603      	mov	r3, r0
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	f003 0303 	and.w	r3, r3, #3
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d00e      	beq.n	8016100 <tcp_receive+0x89c>
 80160e2:	2301      	movs	r3, #1
 80160e4:	e00d      	b.n	8016102 <tcp_receive+0x89e>
 80160e6:	bf00      	nop
 80160e8:	24000788 	.word	0x24000788
 80160ec:	24000768 	.word	0x24000768
 80160f0:	24000792 	.word	0x24000792
 80160f4:	08020860 	.word	0x08020860
 80160f8:	08020c34 	.word	0x08020c34
 80160fc:	080208d8 	.word	0x080208d8
 8016100:	2300      	movs	r3, #0
 8016102:	4423      	add	r3, r4
 8016104:	b29a      	uxth	r2, r3
 8016106:	4b98      	ldr	r3, [pc, #608]	; (8016368 <tcp_receive+0xb04>)
 8016108:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801610a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801610c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801610e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016114:	6938      	ldr	r0, [r7, #16]
 8016116:	f7fd fd3a 	bl	8013b8e <tcp_seg_free>
            while (next &&
 801611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801611c:	2b00      	cmp	r3, #0
 801611e:	d00e      	beq.n	801613e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016120:	4b91      	ldr	r3, [pc, #580]	; (8016368 <tcp_receive+0xb04>)
 8016122:	881b      	ldrh	r3, [r3, #0]
 8016124:	461a      	mov	r2, r3
 8016126:	4b91      	ldr	r3, [pc, #580]	; (801636c <tcp_receive+0xb08>)
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	441a      	add	r2, r3
 801612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801612e:	68db      	ldr	r3, [r3, #12]
 8016130:	685b      	ldr	r3, [r3, #4]
 8016132:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016134:	8909      	ldrh	r1, [r1, #8]
 8016136:	440b      	add	r3, r1
 8016138:	1ad3      	subs	r3, r2, r3
            while (next &&
 801613a:	2b00      	cmp	r3, #0
 801613c:	da9a      	bge.n	8016074 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016140:	2b00      	cmp	r3, #0
 8016142:	d059      	beq.n	80161f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016144:	4b88      	ldr	r3, [pc, #544]	; (8016368 <tcp_receive+0xb04>)
 8016146:	881b      	ldrh	r3, [r3, #0]
 8016148:	461a      	mov	r2, r3
 801614a:	4b88      	ldr	r3, [pc, #544]	; (801636c <tcp_receive+0xb08>)
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	441a      	add	r2, r3
 8016150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016152:	68db      	ldr	r3, [r3, #12]
 8016154:	685b      	ldr	r3, [r3, #4]
 8016156:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016158:	2b00      	cmp	r3, #0
 801615a:	dd4d      	ble.n	80161f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801615c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	b29a      	uxth	r2, r3
 8016164:	4b81      	ldr	r3, [pc, #516]	; (801636c <tcp_receive+0xb08>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	b29b      	uxth	r3, r3
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	b29a      	uxth	r2, r3
 801616e:	4b80      	ldr	r3, [pc, #512]	; (8016370 <tcp_receive+0xb0c>)
 8016170:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016172:	4b7f      	ldr	r3, [pc, #508]	; (8016370 <tcp_receive+0xb0c>)
 8016174:	68db      	ldr	r3, [r3, #12]
 8016176:	899b      	ldrh	r3, [r3, #12]
 8016178:	b29b      	uxth	r3, r3
 801617a:	4618      	mov	r0, r3
 801617c:	f7f8 fbfe 	bl	800e97c <lwip_htons>
 8016180:	4603      	mov	r3, r0
 8016182:	b2db      	uxtb	r3, r3
 8016184:	f003 0302 	and.w	r3, r3, #2
 8016188:	2b00      	cmp	r3, #0
 801618a:	d005      	beq.n	8016198 <tcp_receive+0x934>
                inseg.len -= 1;
 801618c:	4b78      	ldr	r3, [pc, #480]	; (8016370 <tcp_receive+0xb0c>)
 801618e:	891b      	ldrh	r3, [r3, #8]
 8016190:	3b01      	subs	r3, #1
 8016192:	b29a      	uxth	r2, r3
 8016194:	4b76      	ldr	r3, [pc, #472]	; (8016370 <tcp_receive+0xb0c>)
 8016196:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016198:	4b75      	ldr	r3, [pc, #468]	; (8016370 <tcp_receive+0xb0c>)
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	4a74      	ldr	r2, [pc, #464]	; (8016370 <tcp_receive+0xb0c>)
 801619e:	8912      	ldrh	r2, [r2, #8]
 80161a0:	4611      	mov	r1, r2
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7fc f8fa 	bl	801239c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80161a8:	4b71      	ldr	r3, [pc, #452]	; (8016370 <tcp_receive+0xb0c>)
 80161aa:	891c      	ldrh	r4, [r3, #8]
 80161ac:	4b70      	ldr	r3, [pc, #448]	; (8016370 <tcp_receive+0xb0c>)
 80161ae:	68db      	ldr	r3, [r3, #12]
 80161b0:	899b      	ldrh	r3, [r3, #12]
 80161b2:	b29b      	uxth	r3, r3
 80161b4:	4618      	mov	r0, r3
 80161b6:	f7f8 fbe1 	bl	800e97c <lwip_htons>
 80161ba:	4603      	mov	r3, r0
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	f003 0303 	and.w	r3, r3, #3
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d001      	beq.n	80161ca <tcp_receive+0x966>
 80161c6:	2301      	movs	r3, #1
 80161c8:	e000      	b.n	80161cc <tcp_receive+0x968>
 80161ca:	2300      	movs	r3, #0
 80161cc:	4423      	add	r3, r4
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	4b65      	ldr	r3, [pc, #404]	; (8016368 <tcp_receive+0xb04>)
 80161d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80161d4:	4b64      	ldr	r3, [pc, #400]	; (8016368 <tcp_receive+0xb04>)
 80161d6:	881b      	ldrh	r3, [r3, #0]
 80161d8:	461a      	mov	r2, r3
 80161da:	4b64      	ldr	r3, [pc, #400]	; (801636c <tcp_receive+0xb08>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	441a      	add	r2, r3
 80161e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161e2:	68db      	ldr	r3, [r3, #12]
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d006      	beq.n	80161f8 <tcp_receive+0x994>
 80161ea:	4b62      	ldr	r3, [pc, #392]	; (8016374 <tcp_receive+0xb10>)
 80161ec:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80161f0:	4961      	ldr	r1, [pc, #388]	; (8016378 <tcp_receive+0xb14>)
 80161f2:	4862      	ldr	r0, [pc, #392]	; (801637c <tcp_receive+0xb18>)
 80161f4:	f004 ff86 	bl	801b104 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80161fc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80161fe:	4b5a      	ldr	r3, [pc, #360]	; (8016368 <tcp_receive+0xb04>)
 8016200:	881b      	ldrh	r3, [r3, #0]
 8016202:	461a      	mov	r2, r3
 8016204:	4b59      	ldr	r3, [pc, #356]	; (801636c <tcp_receive+0xb08>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	441a      	add	r2, r3
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016212:	4b55      	ldr	r3, [pc, #340]	; (8016368 <tcp_receive+0xb04>)
 8016214:	881b      	ldrh	r3, [r3, #0]
 8016216:	429a      	cmp	r2, r3
 8016218:	d206      	bcs.n	8016228 <tcp_receive+0x9c4>
 801621a:	4b56      	ldr	r3, [pc, #344]	; (8016374 <tcp_receive+0xb10>)
 801621c:	f240 6207 	movw	r2, #1543	; 0x607
 8016220:	4957      	ldr	r1, [pc, #348]	; (8016380 <tcp_receive+0xb1c>)
 8016222:	4856      	ldr	r0, [pc, #344]	; (801637c <tcp_receive+0xb18>)
 8016224:	f004 ff6e 	bl	801b104 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801622c:	4b4e      	ldr	r3, [pc, #312]	; (8016368 <tcp_receive+0xb04>)
 801622e:	881b      	ldrh	r3, [r3, #0]
 8016230:	1ad3      	subs	r3, r2, r3
 8016232:	b29a      	uxth	r2, r3
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7fc ffc9 	bl	80131d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801623e:	4b4c      	ldr	r3, [pc, #304]	; (8016370 <tcp_receive+0xb0c>)
 8016240:	685b      	ldr	r3, [r3, #4]
 8016242:	891b      	ldrh	r3, [r3, #8]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d006      	beq.n	8016256 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016248:	4b49      	ldr	r3, [pc, #292]	; (8016370 <tcp_receive+0xb0c>)
 801624a:	685b      	ldr	r3, [r3, #4]
 801624c:	4a4d      	ldr	r2, [pc, #308]	; (8016384 <tcp_receive+0xb20>)
 801624e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016250:	4b47      	ldr	r3, [pc, #284]	; (8016370 <tcp_receive+0xb0c>)
 8016252:	2200      	movs	r2, #0
 8016254:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016256:	4b46      	ldr	r3, [pc, #280]	; (8016370 <tcp_receive+0xb0c>)
 8016258:	68db      	ldr	r3, [r3, #12]
 801625a:	899b      	ldrh	r3, [r3, #12]
 801625c:	b29b      	uxth	r3, r3
 801625e:	4618      	mov	r0, r3
 8016260:	f7f8 fb8c 	bl	800e97c <lwip_htons>
 8016264:	4603      	mov	r3, r0
 8016266:	b2db      	uxtb	r3, r3
 8016268:	f003 0301 	and.w	r3, r3, #1
 801626c:	2b00      	cmp	r3, #0
 801626e:	f000 80b8 	beq.w	80163e2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016272:	4b45      	ldr	r3, [pc, #276]	; (8016388 <tcp_receive+0xb24>)
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	f043 0320 	orr.w	r3, r3, #32
 801627a:	b2da      	uxtb	r2, r3
 801627c:	4b42      	ldr	r3, [pc, #264]	; (8016388 <tcp_receive+0xb24>)
 801627e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016280:	e0af      	b.n	80163e2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016286:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801628c:	68db      	ldr	r3, [r3, #12]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	4a36      	ldr	r2, [pc, #216]	; (801636c <tcp_receive+0xb08>)
 8016292:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	891b      	ldrh	r3, [r3, #8]
 8016298:	461c      	mov	r4, r3
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	68db      	ldr	r3, [r3, #12]
 801629e:	899b      	ldrh	r3, [r3, #12]
 80162a0:	b29b      	uxth	r3, r3
 80162a2:	4618      	mov	r0, r3
 80162a4:	f7f8 fb6a 	bl	800e97c <lwip_htons>
 80162a8:	4603      	mov	r3, r0
 80162aa:	b2db      	uxtb	r3, r3
 80162ac:	f003 0303 	and.w	r3, r3, #3
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d001      	beq.n	80162b8 <tcp_receive+0xa54>
 80162b4:	2301      	movs	r3, #1
 80162b6:	e000      	b.n	80162ba <tcp_receive+0xa56>
 80162b8:	2300      	movs	r3, #0
 80162ba:	191a      	adds	r2, r3, r4
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162c0:	441a      	add	r2, r3
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162ca:	461c      	mov	r4, r3
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	891b      	ldrh	r3, [r3, #8]
 80162d0:	461d      	mov	r5, r3
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	899b      	ldrh	r3, [r3, #12]
 80162d8:	b29b      	uxth	r3, r3
 80162da:	4618      	mov	r0, r3
 80162dc:	f7f8 fb4e 	bl	800e97c <lwip_htons>
 80162e0:	4603      	mov	r3, r0
 80162e2:	b2db      	uxtb	r3, r3
 80162e4:	f003 0303 	and.w	r3, r3, #3
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d001      	beq.n	80162f0 <tcp_receive+0xa8c>
 80162ec:	2301      	movs	r3, #1
 80162ee:	e000      	b.n	80162f2 <tcp_receive+0xa8e>
 80162f0:	2300      	movs	r3, #0
 80162f2:	442b      	add	r3, r5
 80162f4:	429c      	cmp	r4, r3
 80162f6:	d206      	bcs.n	8016306 <tcp_receive+0xaa2>
 80162f8:	4b1e      	ldr	r3, [pc, #120]	; (8016374 <tcp_receive+0xb10>)
 80162fa:	f240 622b 	movw	r2, #1579	; 0x62b
 80162fe:	4923      	ldr	r1, [pc, #140]	; (801638c <tcp_receive+0xb28>)
 8016300:	481e      	ldr	r0, [pc, #120]	; (801637c <tcp_receive+0xb18>)
 8016302:	f004 feff 	bl	801b104 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	891b      	ldrh	r3, [r3, #8]
 801630a:	461c      	mov	r4, r3
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	68db      	ldr	r3, [r3, #12]
 8016310:	899b      	ldrh	r3, [r3, #12]
 8016312:	b29b      	uxth	r3, r3
 8016314:	4618      	mov	r0, r3
 8016316:	f7f8 fb31 	bl	800e97c <lwip_htons>
 801631a:	4603      	mov	r3, r0
 801631c:	b2db      	uxtb	r3, r3
 801631e:	f003 0303 	and.w	r3, r3, #3
 8016322:	2b00      	cmp	r3, #0
 8016324:	d001      	beq.n	801632a <tcp_receive+0xac6>
 8016326:	2301      	movs	r3, #1
 8016328:	e000      	b.n	801632c <tcp_receive+0xac8>
 801632a:	2300      	movs	r3, #0
 801632c:	1919      	adds	r1, r3, r4
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016332:	b28b      	uxth	r3, r1
 8016334:	1ad3      	subs	r3, r2, r3
 8016336:	b29a      	uxth	r2, r3
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f7fc ff47 	bl	80131d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	891b      	ldrh	r3, [r3, #8]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d028      	beq.n	801639e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801634c:	4b0d      	ldr	r3, [pc, #52]	; (8016384 <tcp_receive+0xb20>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d01d      	beq.n	8016390 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016354:	4b0b      	ldr	r3, [pc, #44]	; (8016384 <tcp_receive+0xb20>)
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	4619      	mov	r1, r3
 801635e:	4610      	mov	r0, r2
 8016360:	f7fc fa64 	bl	801282c <pbuf_cat>
 8016364:	e018      	b.n	8016398 <tcp_receive+0xb34>
 8016366:	bf00      	nop
 8016368:	24000792 	.word	0x24000792
 801636c:	24000788 	.word	0x24000788
 8016370:	24000768 	.word	0x24000768
 8016374:	08020860 	.word	0x08020860
 8016378:	08020c6c 	.word	0x08020c6c
 801637c:	080208d8 	.word	0x080208d8
 8016380:	08020ca8 	.word	0x08020ca8
 8016384:	24000798 	.word	0x24000798
 8016388:	24000795 	.word	0x24000795
 801638c:	08020cc8 	.word	0x08020cc8
            } else {
              recv_data = cseg->p;
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	4a70      	ldr	r2, [pc, #448]	; (8016558 <tcp_receive+0xcf4>)
 8016396:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	2200      	movs	r2, #0
 801639c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	68db      	ldr	r3, [r3, #12]
 80163a2:	899b      	ldrh	r3, [r3, #12]
 80163a4:	b29b      	uxth	r3, r3
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7f8 fae8 	bl	800e97c <lwip_htons>
 80163ac:	4603      	mov	r3, r0
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	f003 0301 	and.w	r3, r3, #1
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d00d      	beq.n	80163d4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80163b8:	4b68      	ldr	r3, [pc, #416]	; (801655c <tcp_receive+0xcf8>)
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	f043 0320 	orr.w	r3, r3, #32
 80163c0:	b2da      	uxtb	r2, r3
 80163c2:	4b66      	ldr	r3, [pc, #408]	; (801655c <tcp_receive+0xcf8>)
 80163c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	7d1b      	ldrb	r3, [r3, #20]
 80163ca:	2b04      	cmp	r3, #4
 80163cc:	d102      	bne.n	80163d4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	2207      	movs	r2, #7
 80163d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80163d4:	68bb      	ldr	r3, [r7, #8]
 80163d6:	681a      	ldr	r2, [r3, #0]
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80163dc:	68b8      	ldr	r0, [r7, #8]
 80163de:	f7fd fbd6 	bl	8013b8e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d008      	beq.n	80163fc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163ee:	68db      	ldr	r3, [r3, #12]
 80163f0:	685a      	ldr	r2, [r3, #4]
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80163f6:	429a      	cmp	r2, r3
 80163f8:	f43f af43 	beq.w	8016282 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	8b5b      	ldrh	r3, [r3, #26]
 8016400:	f003 0301 	and.w	r3, r3, #1
 8016404:	2b00      	cmp	r3, #0
 8016406:	d00e      	beq.n	8016426 <tcp_receive+0xbc2>
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	8b5b      	ldrh	r3, [r3, #26]
 801640c:	f023 0301 	bic.w	r3, r3, #1
 8016410:	b29a      	uxth	r2, r3
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	835a      	strh	r2, [r3, #26]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	8b5b      	ldrh	r3, [r3, #26]
 801641a:	f043 0302 	orr.w	r3, r3, #2
 801641e:	b29a      	uxth	r2, r3
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016424:	e188      	b.n	8016738 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	8b5b      	ldrh	r3, [r3, #26]
 801642a:	f043 0301 	orr.w	r3, r3, #1
 801642e:	b29a      	uxth	r2, r3
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016434:	e180      	b.n	8016738 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801643a:	2b00      	cmp	r3, #0
 801643c:	d106      	bne.n	801644c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801643e:	4848      	ldr	r0, [pc, #288]	; (8016560 <tcp_receive+0xcfc>)
 8016440:	f7fd fbbe 	bl	8013bc0 <tcp_seg_copy>
 8016444:	4602      	mov	r2, r0
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	675a      	str	r2, [r3, #116]	; 0x74
 801644a:	e16d      	b.n	8016728 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801644c:	2300      	movs	r3, #0
 801644e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016454:	63bb      	str	r3, [r7, #56]	; 0x38
 8016456:	e157      	b.n	8016708 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8016458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645a:	68db      	ldr	r3, [r3, #12]
 801645c:	685a      	ldr	r2, [r3, #4]
 801645e:	4b41      	ldr	r3, [pc, #260]	; (8016564 <tcp_receive+0xd00>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	429a      	cmp	r2, r3
 8016464:	d11d      	bne.n	80164a2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016466:	4b3e      	ldr	r3, [pc, #248]	; (8016560 <tcp_receive+0xcfc>)
 8016468:	891a      	ldrh	r2, [r3, #8]
 801646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801646c:	891b      	ldrh	r3, [r3, #8]
 801646e:	429a      	cmp	r2, r3
 8016470:	f240 814f 	bls.w	8016712 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016474:	483a      	ldr	r0, [pc, #232]	; (8016560 <tcp_receive+0xcfc>)
 8016476:	f7fd fba3 	bl	8013bc0 <tcp_seg_copy>
 801647a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	2b00      	cmp	r3, #0
 8016480:	f000 8149 	beq.w	8016716 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8016484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016486:	2b00      	cmp	r3, #0
 8016488:	d003      	beq.n	8016492 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801648a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801648c:	697a      	ldr	r2, [r7, #20]
 801648e:	601a      	str	r2, [r3, #0]
 8016490:	e002      	b.n	8016498 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	697a      	ldr	r2, [r7, #20]
 8016496:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016498:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801649a:	6978      	ldr	r0, [r7, #20]
 801649c:	f7ff f8de 	bl	801565c <tcp_oos_insert_segment>
                }
                break;
 80164a0:	e139      	b.n	8016716 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80164a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d117      	bne.n	80164d8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80164a8:	4b2e      	ldr	r3, [pc, #184]	; (8016564 <tcp_receive+0xd00>)
 80164aa:	681a      	ldr	r2, [r3, #0]
 80164ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ae:	68db      	ldr	r3, [r3, #12]
 80164b0:	685b      	ldr	r3, [r3, #4]
 80164b2:	1ad3      	subs	r3, r2, r3
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	da57      	bge.n	8016568 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80164b8:	4829      	ldr	r0, [pc, #164]	; (8016560 <tcp_receive+0xcfc>)
 80164ba:	f7fd fb81 	bl	8013bc0 <tcp_seg_copy>
 80164be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80164c0:	69bb      	ldr	r3, [r7, #24]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	f000 8129 	beq.w	801671a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	69ba      	ldr	r2, [r7, #24]
 80164cc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80164ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80164d0:	69b8      	ldr	r0, [r7, #24]
 80164d2:	f7ff f8c3 	bl	801565c <tcp_oos_insert_segment>
                  }
                  break;
 80164d6:	e120      	b.n	801671a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80164d8:	4b22      	ldr	r3, [pc, #136]	; (8016564 <tcp_receive+0xd00>)
 80164da:	681a      	ldr	r2, [r3, #0]
 80164dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164de:	68db      	ldr	r3, [r3, #12]
 80164e0:	685b      	ldr	r3, [r3, #4]
 80164e2:	1ad3      	subs	r3, r2, r3
 80164e4:	3b01      	subs	r3, #1
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	db3e      	blt.n	8016568 <tcp_receive+0xd04>
 80164ea:	4b1e      	ldr	r3, [pc, #120]	; (8016564 <tcp_receive+0xd00>)
 80164ec:	681a      	ldr	r2, [r3, #0]
 80164ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164f0:	68db      	ldr	r3, [r3, #12]
 80164f2:	685b      	ldr	r3, [r3, #4]
 80164f4:	1ad3      	subs	r3, r2, r3
 80164f6:	3301      	adds	r3, #1
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	dc35      	bgt.n	8016568 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80164fc:	4818      	ldr	r0, [pc, #96]	; (8016560 <tcp_receive+0xcfc>)
 80164fe:	f7fd fb5f 	bl	8013bc0 <tcp_seg_copy>
 8016502:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016504:	69fb      	ldr	r3, [r7, #28]
 8016506:	2b00      	cmp	r3, #0
 8016508:	f000 8109 	beq.w	801671e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801650e:	68db      	ldr	r3, [r3, #12]
 8016510:	685b      	ldr	r3, [r3, #4]
 8016512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016514:	8912      	ldrh	r2, [r2, #8]
 8016516:	441a      	add	r2, r3
 8016518:	4b12      	ldr	r3, [pc, #72]	; (8016564 <tcp_receive+0xd00>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	1ad3      	subs	r3, r2, r3
 801651e:	2b00      	cmp	r3, #0
 8016520:	dd12      	ble.n	8016548 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016522:	4b10      	ldr	r3, [pc, #64]	; (8016564 <tcp_receive+0xd00>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	b29a      	uxth	r2, r3
 8016528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	b29b      	uxth	r3, r3
 8016530:	1ad3      	subs	r3, r2, r3
 8016532:	b29a      	uxth	r2, r3
 8016534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016536:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801653a:	685a      	ldr	r2, [r3, #4]
 801653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801653e:	891b      	ldrh	r3, [r3, #8]
 8016540:	4619      	mov	r1, r3
 8016542:	4610      	mov	r0, r2
 8016544:	f7fb ff2a 	bl	801239c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801654a:	69fa      	ldr	r2, [r7, #28]
 801654c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801654e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016550:	69f8      	ldr	r0, [r7, #28]
 8016552:	f7ff f883 	bl	801565c <tcp_oos_insert_segment>
                  }
                  break;
 8016556:	e0e2      	b.n	801671e <tcp_receive+0xeba>
 8016558:	24000798 	.word	0x24000798
 801655c:	24000795 	.word	0x24000795
 8016560:	24000768 	.word	0x24000768
 8016564:	24000788 	.word	0x24000788
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801656a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801656c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	2b00      	cmp	r3, #0
 8016572:	f040 80c6 	bne.w	8016702 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016576:	4b80      	ldr	r3, [pc, #512]	; (8016778 <tcp_receive+0xf14>)
 8016578:	681a      	ldr	r2, [r3, #0]
 801657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	685b      	ldr	r3, [r3, #4]
 8016580:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016582:	2b00      	cmp	r3, #0
 8016584:	f340 80bd 	ble.w	8016702 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801658a:	68db      	ldr	r3, [r3, #12]
 801658c:	899b      	ldrh	r3, [r3, #12]
 801658e:	b29b      	uxth	r3, r3
 8016590:	4618      	mov	r0, r3
 8016592:	f7f8 f9f3 	bl	800e97c <lwip_htons>
 8016596:	4603      	mov	r3, r0
 8016598:	b2db      	uxtb	r3, r3
 801659a:	f003 0301 	and.w	r3, r3, #1
 801659e:	2b00      	cmp	r3, #0
 80165a0:	f040 80bf 	bne.w	8016722 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80165a4:	4875      	ldr	r0, [pc, #468]	; (801677c <tcp_receive+0xf18>)
 80165a6:	f7fd fb0b 	bl	8013bc0 <tcp_seg_copy>
 80165aa:	4602      	mov	r2, r0
 80165ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80165b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	f000 80b6 	beq.w	8016726 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80165ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165bc:	68db      	ldr	r3, [r3, #12]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165c2:	8912      	ldrh	r2, [r2, #8]
 80165c4:	441a      	add	r2, r3
 80165c6:	4b6c      	ldr	r3, [pc, #432]	; (8016778 <tcp_receive+0xf14>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	1ad3      	subs	r3, r2, r3
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	dd12      	ble.n	80165f6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80165d0:	4b69      	ldr	r3, [pc, #420]	; (8016778 <tcp_receive+0xf14>)
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	b29a      	uxth	r2, r3
 80165d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d8:	68db      	ldr	r3, [r3, #12]
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	b29b      	uxth	r3, r3
 80165de:	1ad3      	subs	r3, r2, r3
 80165e0:	b29a      	uxth	r2, r3
 80165e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80165e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e8:	685a      	ldr	r2, [r3, #4]
 80165ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ec:	891b      	ldrh	r3, [r3, #8]
 80165ee:	4619      	mov	r1, r3
 80165f0:	4610      	mov	r0, r2
 80165f2:	f7fb fed3 	bl	801239c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80165f6:	4b62      	ldr	r3, [pc, #392]	; (8016780 <tcp_receive+0xf1c>)
 80165f8:	881b      	ldrh	r3, [r3, #0]
 80165fa:	461a      	mov	r2, r3
 80165fc:	4b5e      	ldr	r3, [pc, #376]	; (8016778 <tcp_receive+0xf14>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	441a      	add	r2, r3
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016606:	6879      	ldr	r1, [r7, #4]
 8016608:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801660a:	440b      	add	r3, r1
 801660c:	1ad3      	subs	r3, r2, r3
 801660e:	2b00      	cmp	r3, #0
 8016610:	f340 8089 	ble.w	8016726 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	68db      	ldr	r3, [r3, #12]
 801661a:	899b      	ldrh	r3, [r3, #12]
 801661c:	b29b      	uxth	r3, r3
 801661e:	4618      	mov	r0, r3
 8016620:	f7f8 f9ac 	bl	800e97c <lwip_htons>
 8016624:	4603      	mov	r3, r0
 8016626:	b2db      	uxtb	r3, r3
 8016628:	f003 0301 	and.w	r3, r3, #1
 801662c:	2b00      	cmp	r3, #0
 801662e:	d022      	beq.n	8016676 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	68db      	ldr	r3, [r3, #12]
 8016636:	899b      	ldrh	r3, [r3, #12]
 8016638:	b29b      	uxth	r3, r3
 801663a:	b21b      	sxth	r3, r3
 801663c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016640:	b21c      	sxth	r4, r3
 8016642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	68db      	ldr	r3, [r3, #12]
 8016648:	899b      	ldrh	r3, [r3, #12]
 801664a:	b29b      	uxth	r3, r3
 801664c:	4618      	mov	r0, r3
 801664e:	f7f8 f995 	bl	800e97c <lwip_htons>
 8016652:	4603      	mov	r3, r0
 8016654:	b2db      	uxtb	r3, r3
 8016656:	b29b      	uxth	r3, r3
 8016658:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801665c:	b29b      	uxth	r3, r3
 801665e:	4618      	mov	r0, r3
 8016660:	f7f8 f98c 	bl	800e97c <lwip_htons>
 8016664:	4603      	mov	r3, r0
 8016666:	b21b      	sxth	r3, r3
 8016668:	4323      	orrs	r3, r4
 801666a:	b21a      	sxth	r2, r3
 801666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	68db      	ldr	r3, [r3, #12]
 8016672:	b292      	uxth	r2, r2
 8016674:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801667a:	b29a      	uxth	r2, r3
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016680:	4413      	add	r3, r2
 8016682:	b299      	uxth	r1, r3
 8016684:	4b3c      	ldr	r3, [pc, #240]	; (8016778 <tcp_receive+0xf14>)
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	b29a      	uxth	r2, r3
 801668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	1a8a      	subs	r2, r1, r2
 8016690:	b292      	uxth	r2, r2
 8016692:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	685a      	ldr	r2, [r3, #4]
 801669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	891b      	ldrh	r3, [r3, #8]
 80166a0:	4619      	mov	r1, r3
 80166a2:	4610      	mov	r0, r2
 80166a4:	f7fb fe7a 	bl	801239c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80166a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	891c      	ldrh	r4, [r3, #8]
 80166ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	68db      	ldr	r3, [r3, #12]
 80166b4:	899b      	ldrh	r3, [r3, #12]
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	4618      	mov	r0, r3
 80166ba:	f7f8 f95f 	bl	800e97c <lwip_htons>
 80166be:	4603      	mov	r3, r0
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	f003 0303 	and.w	r3, r3, #3
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d001      	beq.n	80166ce <tcp_receive+0xe6a>
 80166ca:	2301      	movs	r3, #1
 80166cc:	e000      	b.n	80166d0 <tcp_receive+0xe6c>
 80166ce:	2300      	movs	r3, #0
 80166d0:	4423      	add	r3, r4
 80166d2:	b29a      	uxth	r2, r3
 80166d4:	4b2a      	ldr	r3, [pc, #168]	; (8016780 <tcp_receive+0xf1c>)
 80166d6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80166d8:	4b29      	ldr	r3, [pc, #164]	; (8016780 <tcp_receive+0xf1c>)
 80166da:	881b      	ldrh	r3, [r3, #0]
 80166dc:	461a      	mov	r2, r3
 80166de:	4b26      	ldr	r3, [pc, #152]	; (8016778 <tcp_receive+0xf14>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	441a      	add	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166e8:	6879      	ldr	r1, [r7, #4]
 80166ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80166ec:	440b      	add	r3, r1
 80166ee:	429a      	cmp	r2, r3
 80166f0:	d019      	beq.n	8016726 <tcp_receive+0xec2>
 80166f2:	4b24      	ldr	r3, [pc, #144]	; (8016784 <tcp_receive+0xf20>)
 80166f4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80166f8:	4923      	ldr	r1, [pc, #140]	; (8016788 <tcp_receive+0xf24>)
 80166fa:	4824      	ldr	r0, [pc, #144]	; (801678c <tcp_receive+0xf28>)
 80166fc:	f004 fd02 	bl	801b104 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016700:	e011      	b.n	8016726 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	63bb      	str	r3, [r7, #56]	; 0x38
 8016708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801670a:	2b00      	cmp	r3, #0
 801670c:	f47f aea4 	bne.w	8016458 <tcp_receive+0xbf4>
 8016710:	e00a      	b.n	8016728 <tcp_receive+0xec4>
                break;
 8016712:	bf00      	nop
 8016714:	e008      	b.n	8016728 <tcp_receive+0xec4>
                break;
 8016716:	bf00      	nop
 8016718:	e006      	b.n	8016728 <tcp_receive+0xec4>
                  break;
 801671a:	bf00      	nop
 801671c:	e004      	b.n	8016728 <tcp_receive+0xec4>
                  break;
 801671e:	bf00      	nop
 8016720:	e002      	b.n	8016728 <tcp_receive+0xec4>
                  break;
 8016722:	bf00      	nop
 8016724:	e000      	b.n	8016728 <tcp_receive+0xec4>
                break;
 8016726:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016728:	6878      	ldr	r0, [r7, #4]
 801672a:	f001 fa33 	bl	8017b94 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801672e:	e003      	b.n	8016738 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f001 fa2f 	bl	8017b94 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016736:	e01a      	b.n	801676e <tcp_receive+0xf0a>
 8016738:	e019      	b.n	801676e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801673a:	4b0f      	ldr	r3, [pc, #60]	; (8016778 <tcp_receive+0xf14>)
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016742:	1ad3      	subs	r3, r2, r3
 8016744:	2b00      	cmp	r3, #0
 8016746:	db0a      	blt.n	801675e <tcp_receive+0xefa>
 8016748:	4b0b      	ldr	r3, [pc, #44]	; (8016778 <tcp_receive+0xf14>)
 801674a:	681a      	ldr	r2, [r3, #0]
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016750:	6879      	ldr	r1, [r7, #4]
 8016752:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016754:	440b      	add	r3, r1
 8016756:	1ad3      	subs	r3, r2, r3
 8016758:	3301      	adds	r3, #1
 801675a:	2b00      	cmp	r3, #0
 801675c:	dd07      	ble.n	801676e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	8b5b      	ldrh	r3, [r3, #26]
 8016762:	f043 0302 	orr.w	r3, r3, #2
 8016766:	b29a      	uxth	r2, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801676c:	e7ff      	b.n	801676e <tcp_receive+0xf0a>
 801676e:	bf00      	nop
 8016770:	3750      	adds	r7, #80	; 0x50
 8016772:	46bd      	mov	sp, r7
 8016774:	bdb0      	pop	{r4, r5, r7, pc}
 8016776:	bf00      	nop
 8016778:	24000788 	.word	0x24000788
 801677c:	24000768 	.word	0x24000768
 8016780:	24000792 	.word	0x24000792
 8016784:	08020860 	.word	0x08020860
 8016788:	08020c34 	.word	0x08020c34
 801678c:	080208d8 	.word	0x080208d8

08016790 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016790:	b480      	push	{r7}
 8016792:	b083      	sub	sp, #12
 8016794:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016796:	4b15      	ldr	r3, [pc, #84]	; (80167ec <tcp_get_next_optbyte+0x5c>)
 8016798:	881b      	ldrh	r3, [r3, #0]
 801679a:	1c5a      	adds	r2, r3, #1
 801679c:	b291      	uxth	r1, r2
 801679e:	4a13      	ldr	r2, [pc, #76]	; (80167ec <tcp_get_next_optbyte+0x5c>)
 80167a0:	8011      	strh	r1, [r2, #0]
 80167a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80167a4:	4b12      	ldr	r3, [pc, #72]	; (80167f0 <tcp_get_next_optbyte+0x60>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d004      	beq.n	80167b6 <tcp_get_next_optbyte+0x26>
 80167ac:	4b11      	ldr	r3, [pc, #68]	; (80167f4 <tcp_get_next_optbyte+0x64>)
 80167ae:	881b      	ldrh	r3, [r3, #0]
 80167b0:	88fa      	ldrh	r2, [r7, #6]
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d208      	bcs.n	80167c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80167b6:	4b10      	ldr	r3, [pc, #64]	; (80167f8 <tcp_get_next_optbyte+0x68>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	3314      	adds	r3, #20
 80167bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80167be:	88fb      	ldrh	r3, [r7, #6]
 80167c0:	683a      	ldr	r2, [r7, #0]
 80167c2:	4413      	add	r3, r2
 80167c4:	781b      	ldrb	r3, [r3, #0]
 80167c6:	e00b      	b.n	80167e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80167c8:	88fb      	ldrh	r3, [r7, #6]
 80167ca:	b2da      	uxtb	r2, r3
 80167cc:	4b09      	ldr	r3, [pc, #36]	; (80167f4 <tcp_get_next_optbyte+0x64>)
 80167ce:	881b      	ldrh	r3, [r3, #0]
 80167d0:	b2db      	uxtb	r3, r3
 80167d2:	1ad3      	subs	r3, r2, r3
 80167d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80167d6:	4b06      	ldr	r3, [pc, #24]	; (80167f0 <tcp_get_next_optbyte+0x60>)
 80167d8:	681a      	ldr	r2, [r3, #0]
 80167da:	797b      	ldrb	r3, [r7, #5]
 80167dc:	4413      	add	r3, r2
 80167de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80167e0:	4618      	mov	r0, r3
 80167e2:	370c      	adds	r7, #12
 80167e4:	46bd      	mov	sp, r7
 80167e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ea:	4770      	bx	lr
 80167ec:	24000784 	.word	0x24000784
 80167f0:	24000780 	.word	0x24000780
 80167f4:	2400077e 	.word	0x2400077e
 80167f8:	24000778 	.word	0x24000778

080167fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b084      	sub	sp, #16
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d106      	bne.n	8016818 <tcp_parseopt+0x1c>
 801680a:	4b32      	ldr	r3, [pc, #200]	; (80168d4 <tcp_parseopt+0xd8>)
 801680c:	f240 727d 	movw	r2, #1917	; 0x77d
 8016810:	4931      	ldr	r1, [pc, #196]	; (80168d8 <tcp_parseopt+0xdc>)
 8016812:	4832      	ldr	r0, [pc, #200]	; (80168dc <tcp_parseopt+0xe0>)
 8016814:	f004 fc76 	bl	801b104 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016818:	4b31      	ldr	r3, [pc, #196]	; (80168e0 <tcp_parseopt+0xe4>)
 801681a:	881b      	ldrh	r3, [r3, #0]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d055      	beq.n	80168cc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016820:	4b30      	ldr	r3, [pc, #192]	; (80168e4 <tcp_parseopt+0xe8>)
 8016822:	2200      	movs	r2, #0
 8016824:	801a      	strh	r2, [r3, #0]
 8016826:	e045      	b.n	80168b4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8016828:	f7ff ffb2 	bl	8016790 <tcp_get_next_optbyte>
 801682c:	4603      	mov	r3, r0
 801682e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016830:	7bfb      	ldrb	r3, [r7, #15]
 8016832:	2b02      	cmp	r3, #2
 8016834:	d006      	beq.n	8016844 <tcp_parseopt+0x48>
 8016836:	2b02      	cmp	r3, #2
 8016838:	dc2b      	bgt.n	8016892 <tcp_parseopt+0x96>
 801683a:	2b00      	cmp	r3, #0
 801683c:	d041      	beq.n	80168c2 <tcp_parseopt+0xc6>
 801683e:	2b01      	cmp	r3, #1
 8016840:	d127      	bne.n	8016892 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016842:	e037      	b.n	80168b4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016844:	f7ff ffa4 	bl	8016790 <tcp_get_next_optbyte>
 8016848:	4603      	mov	r3, r0
 801684a:	2b04      	cmp	r3, #4
 801684c:	d13b      	bne.n	80168c6 <tcp_parseopt+0xca>
 801684e:	4b25      	ldr	r3, [pc, #148]	; (80168e4 <tcp_parseopt+0xe8>)
 8016850:	881b      	ldrh	r3, [r3, #0]
 8016852:	3301      	adds	r3, #1
 8016854:	4a22      	ldr	r2, [pc, #136]	; (80168e0 <tcp_parseopt+0xe4>)
 8016856:	8812      	ldrh	r2, [r2, #0]
 8016858:	4293      	cmp	r3, r2
 801685a:	da34      	bge.n	80168c6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801685c:	f7ff ff98 	bl	8016790 <tcp_get_next_optbyte>
 8016860:	4603      	mov	r3, r0
 8016862:	b29b      	uxth	r3, r3
 8016864:	021b      	lsls	r3, r3, #8
 8016866:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016868:	f7ff ff92 	bl	8016790 <tcp_get_next_optbyte>
 801686c:	4603      	mov	r3, r0
 801686e:	b29a      	uxth	r2, r3
 8016870:	89bb      	ldrh	r3, [r7, #12]
 8016872:	4313      	orrs	r3, r2
 8016874:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016876:	89bb      	ldrh	r3, [r7, #12]
 8016878:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801687c:	d804      	bhi.n	8016888 <tcp_parseopt+0x8c>
 801687e:	89bb      	ldrh	r3, [r7, #12]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d001      	beq.n	8016888 <tcp_parseopt+0x8c>
 8016884:	89ba      	ldrh	r2, [r7, #12]
 8016886:	e001      	b.n	801688c <tcp_parseopt+0x90>
 8016888:	f44f 7206 	mov.w	r2, #536	; 0x218
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016890:	e010      	b.n	80168b4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016892:	f7ff ff7d 	bl	8016790 <tcp_get_next_optbyte>
 8016896:	4603      	mov	r3, r0
 8016898:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801689a:	7afb      	ldrb	r3, [r7, #11]
 801689c:	2b01      	cmp	r3, #1
 801689e:	d914      	bls.n	80168ca <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80168a0:	7afb      	ldrb	r3, [r7, #11]
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	4b0f      	ldr	r3, [pc, #60]	; (80168e4 <tcp_parseopt+0xe8>)
 80168a6:	881b      	ldrh	r3, [r3, #0]
 80168a8:	4413      	add	r3, r2
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	3b02      	subs	r3, #2
 80168ae:	b29a      	uxth	r2, r3
 80168b0:	4b0c      	ldr	r3, [pc, #48]	; (80168e4 <tcp_parseopt+0xe8>)
 80168b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80168b4:	4b0b      	ldr	r3, [pc, #44]	; (80168e4 <tcp_parseopt+0xe8>)
 80168b6:	881a      	ldrh	r2, [r3, #0]
 80168b8:	4b09      	ldr	r3, [pc, #36]	; (80168e0 <tcp_parseopt+0xe4>)
 80168ba:	881b      	ldrh	r3, [r3, #0]
 80168bc:	429a      	cmp	r2, r3
 80168be:	d3b3      	bcc.n	8016828 <tcp_parseopt+0x2c>
 80168c0:	e004      	b.n	80168cc <tcp_parseopt+0xd0>
          return;
 80168c2:	bf00      	nop
 80168c4:	e002      	b.n	80168cc <tcp_parseopt+0xd0>
            return;
 80168c6:	bf00      	nop
 80168c8:	e000      	b.n	80168cc <tcp_parseopt+0xd0>
            return;
 80168ca:	bf00      	nop
      }
    }
  }
}
 80168cc:	3710      	adds	r7, #16
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}
 80168d2:	bf00      	nop
 80168d4:	08020860 	.word	0x08020860
 80168d8:	08020cf0 	.word	0x08020cf0
 80168dc:	080208d8 	.word	0x080208d8
 80168e0:	2400077c 	.word	0x2400077c
 80168e4:	24000784 	.word	0x24000784

080168e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80168e8:	b480      	push	{r7}
 80168ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80168ec:	4b05      	ldr	r3, [pc, #20]	; (8016904 <tcp_trigger_input_pcb_close+0x1c>)
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	f043 0310 	orr.w	r3, r3, #16
 80168f4:	b2da      	uxtb	r2, r3
 80168f6:	4b03      	ldr	r3, [pc, #12]	; (8016904 <tcp_trigger_input_pcb_close+0x1c>)
 80168f8:	701a      	strb	r2, [r3, #0]
}
 80168fa:	bf00      	nop
 80168fc:	46bd      	mov	sp, r7
 80168fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016902:	4770      	bx	lr
 8016904:	24000795 	.word	0x24000795

08016908 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b084      	sub	sp, #16
 801690c:	af00      	add	r7, sp, #0
 801690e:	60f8      	str	r0, [r7, #12]
 8016910:	60b9      	str	r1, [r7, #8]
 8016912:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	2b00      	cmp	r3, #0
 8016918:	d00a      	beq.n	8016930 <tcp_route+0x28>
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	7a1b      	ldrb	r3, [r3, #8]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d006      	beq.n	8016930 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	7a1b      	ldrb	r3, [r3, #8]
 8016926:	4618      	mov	r0, r3
 8016928:	f7fb fb7e 	bl	8012028 <netif_get_by_index>
 801692c:	4603      	mov	r3, r0
 801692e:	e003      	b.n	8016938 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	f7f9 faf9 	bl	800ff28 <ip4_route>
 8016936:	4603      	mov	r3, r0
  }
}
 8016938:	4618      	mov	r0, r3
 801693a:	3710      	adds	r7, #16
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}

08016940 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016940:	b590      	push	{r4, r7, lr}
 8016942:	b087      	sub	sp, #28
 8016944:	af00      	add	r7, sp, #0
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	603b      	str	r3, [r7, #0]
 801694c:	4613      	mov	r3, r2
 801694e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d105      	bne.n	8016962 <tcp_create_segment+0x22>
 8016956:	4b44      	ldr	r3, [pc, #272]	; (8016a68 <tcp_create_segment+0x128>)
 8016958:	22a3      	movs	r2, #163	; 0xa3
 801695a:	4944      	ldr	r1, [pc, #272]	; (8016a6c <tcp_create_segment+0x12c>)
 801695c:	4844      	ldr	r0, [pc, #272]	; (8016a70 <tcp_create_segment+0x130>)
 801695e:	f004 fbd1 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d105      	bne.n	8016974 <tcp_create_segment+0x34>
 8016968:	4b3f      	ldr	r3, [pc, #252]	; (8016a68 <tcp_create_segment+0x128>)
 801696a:	22a4      	movs	r2, #164	; 0xa4
 801696c:	4941      	ldr	r1, [pc, #260]	; (8016a74 <tcp_create_segment+0x134>)
 801696e:	4840      	ldr	r0, [pc, #256]	; (8016a70 <tcp_create_segment+0x130>)
 8016970:	f004 fbc8 	bl	801b104 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016974:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016978:	009b      	lsls	r3, r3, #2
 801697a:	b2db      	uxtb	r3, r3
 801697c:	f003 0304 	and.w	r3, r3, #4
 8016980:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016982:	2003      	movs	r0, #3
 8016984:	f7fa ffee 	bl	8011964 <memp_malloc>
 8016988:	6138      	str	r0, [r7, #16]
 801698a:	693b      	ldr	r3, [r7, #16]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d104      	bne.n	801699a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016990:	68b8      	ldr	r0, [r7, #8]
 8016992:	f7fb fe89 	bl	80126a8 <pbuf_free>
    return NULL;
 8016996:	2300      	movs	r3, #0
 8016998:	e061      	b.n	8016a5e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801699a:	693b      	ldr	r3, [r7, #16]
 801699c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80169a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	2200      	movs	r2, #0
 80169a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	68ba      	ldr	r2, [r7, #8]
 80169ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	891a      	ldrh	r2, [r3, #8]
 80169b2:	7dfb      	ldrb	r3, [r7, #23]
 80169b4:	b29b      	uxth	r3, r3
 80169b6:	429a      	cmp	r2, r3
 80169b8:	d205      	bcs.n	80169c6 <tcp_create_segment+0x86>
 80169ba:	4b2b      	ldr	r3, [pc, #172]	; (8016a68 <tcp_create_segment+0x128>)
 80169bc:	22b0      	movs	r2, #176	; 0xb0
 80169be:	492e      	ldr	r1, [pc, #184]	; (8016a78 <tcp_create_segment+0x138>)
 80169c0:	482b      	ldr	r0, [pc, #172]	; (8016a70 <tcp_create_segment+0x130>)
 80169c2:	f004 fb9f 	bl	801b104 <iprintf>
  seg->len = p->tot_len - optlen;
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	891a      	ldrh	r2, [r3, #8]
 80169ca:	7dfb      	ldrb	r3, [r7, #23]
 80169cc:	b29b      	uxth	r3, r3
 80169ce:	1ad3      	subs	r3, r2, r3
 80169d0:	b29a      	uxth	r2, r3
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80169d6:	2114      	movs	r1, #20
 80169d8:	68b8      	ldr	r0, [r7, #8]
 80169da:	f7fb fdcf 	bl	801257c <pbuf_add_header>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d004      	beq.n	80169ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80169e4:	6938      	ldr	r0, [r7, #16]
 80169e6:	f7fd f8d2 	bl	8013b8e <tcp_seg_free>
    return NULL;
 80169ea:	2300      	movs	r3, #0
 80169ec:	e037      	b.n	8016a5e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	685b      	ldr	r3, [r3, #4]
 80169f2:	685a      	ldr	r2, [r3, #4]
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	8ada      	ldrh	r2, [r3, #22]
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	68dc      	ldr	r4, [r3, #12]
 8016a00:	4610      	mov	r0, r2
 8016a02:	f7f7 ffbb 	bl	800e97c <lwip_htons>
 8016a06:	4603      	mov	r3, r0
 8016a08:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	8b1a      	ldrh	r2, [r3, #24]
 8016a0e:	693b      	ldr	r3, [r7, #16]
 8016a10:	68dc      	ldr	r4, [r3, #12]
 8016a12:	4610      	mov	r0, r2
 8016a14:	f7f7 ffb2 	bl	800e97c <lwip_htons>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	68dc      	ldr	r4, [r3, #12]
 8016a20:	6838      	ldr	r0, [r7, #0]
 8016a22:	f7f7 ffc0 	bl	800e9a6 <lwip_htonl>
 8016a26:	4603      	mov	r3, r0
 8016a28:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016a2a:	7dfb      	ldrb	r3, [r7, #23]
 8016a2c:	089b      	lsrs	r3, r3, #2
 8016a2e:	b2db      	uxtb	r3, r3
 8016a30:	b29b      	uxth	r3, r3
 8016a32:	3305      	adds	r3, #5
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	031b      	lsls	r3, r3, #12
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	79fb      	ldrb	r3, [r7, #7]
 8016a3c:	b29b      	uxth	r3, r3
 8016a3e:	4313      	orrs	r3, r2
 8016a40:	b29a      	uxth	r2, r3
 8016a42:	693b      	ldr	r3, [r7, #16]
 8016a44:	68dc      	ldr	r4, [r3, #12]
 8016a46:	4610      	mov	r0, r2
 8016a48:	f7f7 ff98 	bl	800e97c <lwip_htons>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	68db      	ldr	r3, [r3, #12]
 8016a54:	2200      	movs	r2, #0
 8016a56:	749a      	strb	r2, [r3, #18]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	74da      	strb	r2, [r3, #19]
  return seg;
 8016a5c:	693b      	ldr	r3, [r7, #16]
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	371c      	adds	r7, #28
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd90      	pop	{r4, r7, pc}
 8016a66:	bf00      	nop
 8016a68:	08020d0c 	.word	0x08020d0c
 8016a6c:	08020d6c 	.word	0x08020d6c
 8016a70:	08020d8c 	.word	0x08020d8c
 8016a74:	08020db4 	.word	0x08020db4
 8016a78:	08020dd8 	.word	0x08020dd8

08016a7c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016a7c:	b590      	push	{r4, r7, lr}
 8016a7e:	b08b      	sub	sp, #44	; 0x2c
 8016a80:	af02      	add	r7, sp, #8
 8016a82:	6078      	str	r0, [r7, #4]
 8016a84:	460b      	mov	r3, r1
 8016a86:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	61fb      	str	r3, [r7, #28]
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016a90:	2300      	movs	r3, #0
 8016a92:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d106      	bne.n	8016aa8 <tcp_split_unsent_seg+0x2c>
 8016a9a:	4b95      	ldr	r3, [pc, #596]	; (8016cf0 <tcp_split_unsent_seg+0x274>)
 8016a9c:	f240 324b 	movw	r2, #843	; 0x34b
 8016aa0:	4994      	ldr	r1, [pc, #592]	; (8016cf4 <tcp_split_unsent_seg+0x278>)
 8016aa2:	4895      	ldr	r0, [pc, #596]	; (8016cf8 <tcp_split_unsent_seg+0x27c>)
 8016aa4:	f004 fb2e 	bl	801b104 <iprintf>

  useg = pcb->unsent;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016aac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d102      	bne.n	8016aba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ab8:	e116      	b.n	8016ce8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016aba:	887b      	ldrh	r3, [r7, #2]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d109      	bne.n	8016ad4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016ac0:	4b8b      	ldr	r3, [pc, #556]	; (8016cf0 <tcp_split_unsent_seg+0x274>)
 8016ac2:	f240 3253 	movw	r2, #851	; 0x353
 8016ac6:	498d      	ldr	r1, [pc, #564]	; (8016cfc <tcp_split_unsent_seg+0x280>)
 8016ac8:	488b      	ldr	r0, [pc, #556]	; (8016cf8 <tcp_split_unsent_seg+0x27c>)
 8016aca:	f004 fb1b 	bl	801b104 <iprintf>
    return ERR_VAL;
 8016ace:	f06f 0305 	mvn.w	r3, #5
 8016ad2:	e109      	b.n	8016ce8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	891b      	ldrh	r3, [r3, #8]
 8016ad8:	887a      	ldrh	r2, [r7, #2]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d301      	bcc.n	8016ae2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	e102      	b.n	8016ce8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ae6:	887a      	ldrh	r2, [r7, #2]
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	d906      	bls.n	8016afa <tcp_split_unsent_seg+0x7e>
 8016aec:	4b80      	ldr	r3, [pc, #512]	; (8016cf0 <tcp_split_unsent_seg+0x274>)
 8016aee:	f240 325b 	movw	r2, #859	; 0x35b
 8016af2:	4983      	ldr	r1, [pc, #524]	; (8016d00 <tcp_split_unsent_seg+0x284>)
 8016af4:	4880      	ldr	r0, [pc, #512]	; (8016cf8 <tcp_split_unsent_seg+0x27c>)
 8016af6:	f004 fb05 	bl	801b104 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	891b      	ldrh	r3, [r3, #8]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d106      	bne.n	8016b10 <tcp_split_unsent_seg+0x94>
 8016b02:	4b7b      	ldr	r3, [pc, #492]	; (8016cf0 <tcp_split_unsent_seg+0x274>)
 8016b04:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016b08:	497e      	ldr	r1, [pc, #504]	; (8016d04 <tcp_split_unsent_seg+0x288>)
 8016b0a:	487b      	ldr	r0, [pc, #492]	; (8016cf8 <tcp_split_unsent_seg+0x27c>)
 8016b0c:	f004 fafa 	bl	801b104 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	7a9b      	ldrb	r3, [r3, #10]
 8016b14:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016b16:	7bfb      	ldrb	r3, [r7, #15]
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	f003 0304 	and.w	r3, r3, #4
 8016b20:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	891a      	ldrh	r2, [r3, #8]
 8016b26:	887b      	ldrh	r3, [r7, #2]
 8016b28:	1ad3      	subs	r3, r2, r3
 8016b2a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016b2c:	7bbb      	ldrb	r3, [r7, #14]
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	89bb      	ldrh	r3, [r7, #12]
 8016b32:	4413      	add	r3, r2
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	2036      	movs	r0, #54	; 0x36
 8016b3e:	f7fb facf 	bl	80120e0 <pbuf_alloc>
 8016b42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016b44:	693b      	ldr	r3, [r7, #16]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	f000 80b7 	beq.w	8016cba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	685b      	ldr	r3, [r3, #4]
 8016b50:	891a      	ldrh	r2, [r3, #8]
 8016b52:	697b      	ldr	r3, [r7, #20]
 8016b54:	891b      	ldrh	r3, [r3, #8]
 8016b56:	1ad3      	subs	r3, r2, r3
 8016b58:	b29a      	uxth	r2, r3
 8016b5a:	887b      	ldrh	r3, [r7, #2]
 8016b5c:	4413      	add	r3, r2
 8016b5e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	6858      	ldr	r0, [r3, #4]
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	685a      	ldr	r2, [r3, #4]
 8016b68:	7bbb      	ldrb	r3, [r7, #14]
 8016b6a:	18d1      	adds	r1, r2, r3
 8016b6c:	897b      	ldrh	r3, [r7, #10]
 8016b6e:	89ba      	ldrh	r2, [r7, #12]
 8016b70:	f7fb ff84 	bl	8012a7c <pbuf_copy_partial>
 8016b74:	4603      	mov	r3, r0
 8016b76:	461a      	mov	r2, r3
 8016b78:	89bb      	ldrh	r3, [r7, #12]
 8016b7a:	4293      	cmp	r3, r2
 8016b7c:	f040 809f 	bne.w	8016cbe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016b80:	697b      	ldr	r3, [r7, #20]
 8016b82:	68db      	ldr	r3, [r3, #12]
 8016b84:	899b      	ldrh	r3, [r3, #12]
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f7f7 fef7 	bl	800e97c <lwip_htons>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	b2db      	uxtb	r3, r3
 8016b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016b96:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016b98:	2300      	movs	r3, #0
 8016b9a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016b9c:	7efb      	ldrb	r3, [r7, #27]
 8016b9e:	f003 0308 	and.w	r3, r3, #8
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d007      	beq.n	8016bb6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016ba6:	7efb      	ldrb	r3, [r7, #27]
 8016ba8:	f023 0308 	bic.w	r3, r3, #8
 8016bac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016bae:	7ebb      	ldrb	r3, [r7, #26]
 8016bb0:	f043 0308 	orr.w	r3, r3, #8
 8016bb4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016bb6:	7efb      	ldrb	r3, [r7, #27]
 8016bb8:	f003 0301 	and.w	r3, r3, #1
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d007      	beq.n	8016bd0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016bc0:	7efb      	ldrb	r3, [r7, #27]
 8016bc2:	f023 0301 	bic.w	r3, r3, #1
 8016bc6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016bc8:	7ebb      	ldrb	r3, [r7, #26]
 8016bca:	f043 0301 	orr.w	r3, r3, #1
 8016bce:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016bd0:	697b      	ldr	r3, [r7, #20]
 8016bd2:	68db      	ldr	r3, [r3, #12]
 8016bd4:	685b      	ldr	r3, [r3, #4]
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7f7 fee5 	bl	800e9a6 <lwip_htonl>
 8016bdc:	4602      	mov	r2, r0
 8016bde:	887b      	ldrh	r3, [r7, #2]
 8016be0:	18d1      	adds	r1, r2, r3
 8016be2:	7eba      	ldrb	r2, [r7, #26]
 8016be4:	7bfb      	ldrb	r3, [r7, #15]
 8016be6:	9300      	str	r3, [sp, #0]
 8016be8:	460b      	mov	r3, r1
 8016bea:	6939      	ldr	r1, [r7, #16]
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f7ff fea7 	bl	8016940 <tcp_create_segment>
 8016bf2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016bf4:	69fb      	ldr	r3, [r7, #28]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d063      	beq.n	8016cc2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7fb fdda 	bl	80127b8 <pbuf_clen>
 8016c04:	4603      	mov	r3, r0
 8016c06:	461a      	mov	r2, r3
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016c0e:	1a9b      	subs	r3, r3, r2
 8016c10:	b29a      	uxth	r2, r3
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016c18:	697b      	ldr	r3, [r7, #20]
 8016c1a:	6858      	ldr	r0, [r3, #4]
 8016c1c:	697b      	ldr	r3, [r7, #20]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	891a      	ldrh	r2, [r3, #8]
 8016c22:	89bb      	ldrh	r3, [r7, #12]
 8016c24:	1ad3      	subs	r3, r2, r3
 8016c26:	b29b      	uxth	r3, r3
 8016c28:	4619      	mov	r1, r3
 8016c2a:	f7fb fbb7 	bl	801239c <pbuf_realloc>
  useg->len -= remainder;
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	891a      	ldrh	r2, [r3, #8]
 8016c32:	89bb      	ldrh	r3, [r7, #12]
 8016c34:	1ad3      	subs	r3, r2, r3
 8016c36:	b29a      	uxth	r2, r3
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	68db      	ldr	r3, [r3, #12]
 8016c40:	899b      	ldrh	r3, [r3, #12]
 8016c42:	b29c      	uxth	r4, r3
 8016c44:	7efb      	ldrb	r3, [r7, #27]
 8016c46:	b29b      	uxth	r3, r3
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7f7 fe97 	bl	800e97c <lwip_htons>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	461a      	mov	r2, r3
 8016c52:	697b      	ldr	r3, [r7, #20]
 8016c54:	68db      	ldr	r3, [r3, #12]
 8016c56:	4322      	orrs	r2, r4
 8016c58:	b292      	uxth	r2, r2
 8016c5a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	685b      	ldr	r3, [r3, #4]
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7fb fda9 	bl	80127b8 <pbuf_clen>
 8016c66:	4603      	mov	r3, r0
 8016c68:	461a      	mov	r2, r3
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016c70:	4413      	add	r3, r2
 8016c72:	b29a      	uxth	r2, r3
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016c7a:	69fb      	ldr	r3, [r7, #28]
 8016c7c:	685b      	ldr	r3, [r3, #4]
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f7fb fd9a 	bl	80127b8 <pbuf_clen>
 8016c84:	4603      	mov	r3, r0
 8016c86:	461a      	mov	r2, r3
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016c8e:	4413      	add	r3, r2
 8016c90:	b29a      	uxth	r2, r3
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	681a      	ldr	r2, [r3, #0]
 8016c9c:	69fb      	ldr	r3, [r7, #28]
 8016c9e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016ca0:	697b      	ldr	r3, [r7, #20]
 8016ca2:	69fa      	ldr	r2, [r7, #28]
 8016ca4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016ca6:	69fb      	ldr	r3, [r7, #28]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d103      	bne.n	8016cb6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	e016      	b.n	8016ce8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016cba:	bf00      	nop
 8016cbc:	e002      	b.n	8016cc4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016cbe:	bf00      	nop
 8016cc0:	e000      	b.n	8016cc4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016cc2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016cc4:	69fb      	ldr	r3, [r7, #28]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d006      	beq.n	8016cd8 <tcp_split_unsent_seg+0x25c>
 8016cca:	4b09      	ldr	r3, [pc, #36]	; (8016cf0 <tcp_split_unsent_seg+0x274>)
 8016ccc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016cd0:	490d      	ldr	r1, [pc, #52]	; (8016d08 <tcp_split_unsent_seg+0x28c>)
 8016cd2:	4809      	ldr	r0, [pc, #36]	; (8016cf8 <tcp_split_unsent_seg+0x27c>)
 8016cd4:	f004 fa16 	bl	801b104 <iprintf>
  if (p != NULL) {
 8016cd8:	693b      	ldr	r3, [r7, #16]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d002      	beq.n	8016ce4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016cde:	6938      	ldr	r0, [r7, #16]
 8016ce0:	f7fb fce2 	bl	80126a8 <pbuf_free>
  }

  return ERR_MEM;
 8016ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016ce8:	4618      	mov	r0, r3
 8016cea:	3724      	adds	r7, #36	; 0x24
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd90      	pop	{r4, r7, pc}
 8016cf0:	08020d0c 	.word	0x08020d0c
 8016cf4:	080210cc 	.word	0x080210cc
 8016cf8:	08020d8c 	.word	0x08020d8c
 8016cfc:	080210f0 	.word	0x080210f0
 8016d00:	08021114 	.word	0x08021114
 8016d04:	08021124 	.word	0x08021124
 8016d08:	08021134 	.word	0x08021134

08016d0c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016d0c:	b590      	push	{r4, r7, lr}
 8016d0e:	b085      	sub	sp, #20
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d106      	bne.n	8016d28 <tcp_send_fin+0x1c>
 8016d1a:	4b21      	ldr	r3, [pc, #132]	; (8016da0 <tcp_send_fin+0x94>)
 8016d1c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016d20:	4920      	ldr	r1, [pc, #128]	; (8016da4 <tcp_send_fin+0x98>)
 8016d22:	4821      	ldr	r0, [pc, #132]	; (8016da8 <tcp_send_fin+0x9c>)
 8016d24:	f004 f9ee 	bl	801b104 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d02e      	beq.n	8016d8e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d34:	60fb      	str	r3, [r7, #12]
 8016d36:	e002      	b.n	8016d3e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d1f8      	bne.n	8016d38 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	68db      	ldr	r3, [r3, #12]
 8016d4a:	899b      	ldrh	r3, [r3, #12]
 8016d4c:	b29b      	uxth	r3, r3
 8016d4e:	4618      	mov	r0, r3
 8016d50:	f7f7 fe14 	bl	800e97c <lwip_htons>
 8016d54:	4603      	mov	r3, r0
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	f003 0307 	and.w	r3, r3, #7
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d116      	bne.n	8016d8e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	68db      	ldr	r3, [r3, #12]
 8016d64:	899b      	ldrh	r3, [r3, #12]
 8016d66:	b29c      	uxth	r4, r3
 8016d68:	2001      	movs	r0, #1
 8016d6a:	f7f7 fe07 	bl	800e97c <lwip_htons>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	461a      	mov	r2, r3
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	68db      	ldr	r3, [r3, #12]
 8016d76:	4322      	orrs	r2, r4
 8016d78:	b292      	uxth	r2, r2
 8016d7a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	8b5b      	ldrh	r3, [r3, #26]
 8016d80:	f043 0320 	orr.w	r3, r3, #32
 8016d84:	b29a      	uxth	r2, r3
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	e004      	b.n	8016d98 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016d8e:	2101      	movs	r1, #1
 8016d90:	6878      	ldr	r0, [r7, #4]
 8016d92:	f000 f80b 	bl	8016dac <tcp_enqueue_flags>
 8016d96:	4603      	mov	r3, r0
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	3714      	adds	r7, #20
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	bd90      	pop	{r4, r7, pc}
 8016da0:	08020d0c 	.word	0x08020d0c
 8016da4:	08021140 	.word	0x08021140
 8016da8:	08020d8c 	.word	0x08020d8c

08016dac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b08a      	sub	sp, #40	; 0x28
 8016db0:	af02      	add	r7, sp, #8
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	460b      	mov	r3, r1
 8016db6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016db8:	2300      	movs	r3, #0
 8016dba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016dc0:	78fb      	ldrb	r3, [r7, #3]
 8016dc2:	f003 0303 	and.w	r3, r3, #3
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d106      	bne.n	8016dd8 <tcp_enqueue_flags+0x2c>
 8016dca:	4b67      	ldr	r3, [pc, #412]	; (8016f68 <tcp_enqueue_flags+0x1bc>)
 8016dcc:	f240 4211 	movw	r2, #1041	; 0x411
 8016dd0:	4966      	ldr	r1, [pc, #408]	; (8016f6c <tcp_enqueue_flags+0x1c0>)
 8016dd2:	4867      	ldr	r0, [pc, #412]	; (8016f70 <tcp_enqueue_flags+0x1c4>)
 8016dd4:	f004 f996 	bl	801b104 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d106      	bne.n	8016dec <tcp_enqueue_flags+0x40>
 8016dde:	4b62      	ldr	r3, [pc, #392]	; (8016f68 <tcp_enqueue_flags+0x1bc>)
 8016de0:	f240 4213 	movw	r2, #1043	; 0x413
 8016de4:	4963      	ldr	r1, [pc, #396]	; (8016f74 <tcp_enqueue_flags+0x1c8>)
 8016de6:	4862      	ldr	r0, [pc, #392]	; (8016f70 <tcp_enqueue_flags+0x1c4>)
 8016de8:	f004 f98c 	bl	801b104 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016dec:	78fb      	ldrb	r3, [r7, #3]
 8016dee:	f003 0302 	and.w	r3, r3, #2
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d001      	beq.n	8016dfa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016df6:	2301      	movs	r3, #1
 8016df8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016dfa:	7ffb      	ldrb	r3, [r7, #31]
 8016dfc:	009b      	lsls	r3, r3, #2
 8016dfe:	b2db      	uxtb	r3, r3
 8016e00:	f003 0304 	and.w	r3, r3, #4
 8016e04:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016e06:	7dfb      	ldrb	r3, [r7, #23]
 8016e08:	b29b      	uxth	r3, r3
 8016e0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e0e:	4619      	mov	r1, r3
 8016e10:	2036      	movs	r0, #54	; 0x36
 8016e12:	f7fb f965 	bl	80120e0 <pbuf_alloc>
 8016e16:	6138      	str	r0, [r7, #16]
 8016e18:	693b      	ldr	r3, [r7, #16]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d109      	bne.n	8016e32 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	8b5b      	ldrh	r3, [r3, #26]
 8016e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e26:	b29a      	uxth	r2, r3
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e30:	e095      	b.n	8016f5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	895a      	ldrh	r2, [r3, #10]
 8016e36:	7dfb      	ldrb	r3, [r7, #23]
 8016e38:	b29b      	uxth	r3, r3
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d206      	bcs.n	8016e4c <tcp_enqueue_flags+0xa0>
 8016e3e:	4b4a      	ldr	r3, [pc, #296]	; (8016f68 <tcp_enqueue_flags+0x1bc>)
 8016e40:	f240 4239 	movw	r2, #1081	; 0x439
 8016e44:	494c      	ldr	r1, [pc, #304]	; (8016f78 <tcp_enqueue_flags+0x1cc>)
 8016e46:	484a      	ldr	r0, [pc, #296]	; (8016f70 <tcp_enqueue_flags+0x1c4>)
 8016e48:	f004 f95c 	bl	801b104 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016e50:	78fa      	ldrb	r2, [r7, #3]
 8016e52:	7ffb      	ldrb	r3, [r7, #31]
 8016e54:	9300      	str	r3, [sp, #0]
 8016e56:	460b      	mov	r3, r1
 8016e58:	6939      	ldr	r1, [r7, #16]
 8016e5a:	6878      	ldr	r0, [r7, #4]
 8016e5c:	f7ff fd70 	bl	8016940 <tcp_create_segment>
 8016e60:	60f8      	str	r0, [r7, #12]
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d109      	bne.n	8016e7c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	8b5b      	ldrh	r3, [r3, #26]
 8016e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e70:	b29a      	uxth	r2, r3
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e7a:	e070      	b.n	8016f5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	68db      	ldr	r3, [r3, #12]
 8016e80:	f003 0303 	and.w	r3, r3, #3
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d006      	beq.n	8016e96 <tcp_enqueue_flags+0xea>
 8016e88:	4b37      	ldr	r3, [pc, #220]	; (8016f68 <tcp_enqueue_flags+0x1bc>)
 8016e8a:	f240 4242 	movw	r2, #1090	; 0x442
 8016e8e:	493b      	ldr	r1, [pc, #236]	; (8016f7c <tcp_enqueue_flags+0x1d0>)
 8016e90:	4837      	ldr	r0, [pc, #220]	; (8016f70 <tcp_enqueue_flags+0x1c4>)
 8016e92:	f004 f937 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	891b      	ldrh	r3, [r3, #8]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d006      	beq.n	8016eac <tcp_enqueue_flags+0x100>
 8016e9e:	4b32      	ldr	r3, [pc, #200]	; (8016f68 <tcp_enqueue_flags+0x1bc>)
 8016ea0:	f240 4243 	movw	r2, #1091	; 0x443
 8016ea4:	4936      	ldr	r1, [pc, #216]	; (8016f80 <tcp_enqueue_flags+0x1d4>)
 8016ea6:	4832      	ldr	r0, [pc, #200]	; (8016f70 <tcp_enqueue_flags+0x1c4>)
 8016ea8:	f004 f92c 	bl	801b104 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d103      	bne.n	8016ebc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	68fa      	ldr	r2, [r7, #12]
 8016eb8:	66da      	str	r2, [r3, #108]	; 0x6c
 8016eba:	e00d      	b.n	8016ed8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ec0:	61bb      	str	r3, [r7, #24]
 8016ec2:	e002      	b.n	8016eca <tcp_enqueue_flags+0x11e>
 8016ec4:	69bb      	ldr	r3, [r7, #24]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	61bb      	str	r3, [r7, #24]
 8016eca:	69bb      	ldr	r3, [r7, #24]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d1f8      	bne.n	8016ec4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016ed2:	69bb      	ldr	r3, [r7, #24]
 8016ed4:	68fa      	ldr	r2, [r7, #12]
 8016ed6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2200      	movs	r2, #0
 8016edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016ee0:	78fb      	ldrb	r3, [r7, #3]
 8016ee2:	f003 0302 	and.w	r3, r3, #2
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d104      	bne.n	8016ef4 <tcp_enqueue_flags+0x148>
 8016eea:	78fb      	ldrb	r3, [r7, #3]
 8016eec:	f003 0301 	and.w	r3, r3, #1
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d004      	beq.n	8016efe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ef8:	1c5a      	adds	r2, r3, #1
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016efe:	78fb      	ldrb	r3, [r7, #3]
 8016f00:	f003 0301 	and.w	r3, r3, #1
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d006      	beq.n	8016f16 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	8b5b      	ldrh	r3, [r3, #26]
 8016f0c:	f043 0320 	orr.w	r3, r3, #32
 8016f10:	b29a      	uxth	r2, r3
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	685b      	ldr	r3, [r3, #4]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f7fb fc4c 	bl	80127b8 <pbuf_clen>
 8016f20:	4603      	mov	r3, r0
 8016f22:	461a      	mov	r2, r3
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016f2a:	4413      	add	r3, r2
 8016f2c:	b29a      	uxth	r2, r3
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d00e      	beq.n	8016f5c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d10a      	bne.n	8016f5c <tcp_enqueue_flags+0x1b0>
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d106      	bne.n	8016f5c <tcp_enqueue_flags+0x1b0>
 8016f4e:	4b06      	ldr	r3, [pc, #24]	; (8016f68 <tcp_enqueue_flags+0x1bc>)
 8016f50:	f240 4265 	movw	r2, #1125	; 0x465
 8016f54:	490b      	ldr	r1, [pc, #44]	; (8016f84 <tcp_enqueue_flags+0x1d8>)
 8016f56:	4806      	ldr	r0, [pc, #24]	; (8016f70 <tcp_enqueue_flags+0x1c4>)
 8016f58:	f004 f8d4 	bl	801b104 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016f5c:	2300      	movs	r3, #0
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3720      	adds	r7, #32
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd80      	pop	{r7, pc}
 8016f66:	bf00      	nop
 8016f68:	08020d0c 	.word	0x08020d0c
 8016f6c:	0802115c 	.word	0x0802115c
 8016f70:	08020d8c 	.word	0x08020d8c
 8016f74:	080211b4 	.word	0x080211b4
 8016f78:	080211d4 	.word	0x080211d4
 8016f7c:	08021210 	.word	0x08021210
 8016f80:	08021228 	.word	0x08021228
 8016f84:	08021254 	.word	0x08021254

08016f88 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016f88:	b5b0      	push	{r4, r5, r7, lr}
 8016f8a:	b08a      	sub	sp, #40	; 0x28
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d106      	bne.n	8016fa4 <tcp_output+0x1c>
 8016f96:	4b9e      	ldr	r3, [pc, #632]	; (8017210 <tcp_output+0x288>)
 8016f98:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016f9c:	499d      	ldr	r1, [pc, #628]	; (8017214 <tcp_output+0x28c>)
 8016f9e:	489e      	ldr	r0, [pc, #632]	; (8017218 <tcp_output+0x290>)
 8016fa0:	f004 f8b0 	bl	801b104 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	7d1b      	ldrb	r3, [r3, #20]
 8016fa8:	2b01      	cmp	r3, #1
 8016faa:	d106      	bne.n	8016fba <tcp_output+0x32>
 8016fac:	4b98      	ldr	r3, [pc, #608]	; (8017210 <tcp_output+0x288>)
 8016fae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016fb2:	499a      	ldr	r1, [pc, #616]	; (801721c <tcp_output+0x294>)
 8016fb4:	4898      	ldr	r0, [pc, #608]	; (8017218 <tcp_output+0x290>)
 8016fb6:	f004 f8a5 	bl	801b104 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016fba:	4b99      	ldr	r3, [pc, #612]	; (8017220 <tcp_output+0x298>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	687a      	ldr	r2, [r7, #4]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d101      	bne.n	8016fc8 <tcp_output+0x40>
    return ERR_OK;
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	e1ce      	b.n	8017366 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016fd4:	4293      	cmp	r3, r2
 8016fd6:	bf28      	it	cs
 8016fd8:	4613      	movcs	r3, r2
 8016fda:	b29b      	uxth	r3, r3
 8016fdc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fe2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d10b      	bne.n	8017002 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	8b5b      	ldrh	r3, [r3, #26]
 8016fee:	f003 0302 	and.w	r3, r3, #2
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	f000 81aa 	beq.w	801734c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016ff8:	6878      	ldr	r0, [r7, #4]
 8016ffa:	f000 fdcb 	bl	8017b94 <tcp_send_empty_ack>
 8016ffe:	4603      	mov	r3, r0
 8017000:	e1b1      	b.n	8017366 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017002:	6879      	ldr	r1, [r7, #4]
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	3304      	adds	r3, #4
 8017008:	461a      	mov	r2, r3
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f7ff fc7c 	bl	8016908 <tcp_route>
 8017010:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017012:	697b      	ldr	r3, [r7, #20]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d102      	bne.n	801701e <tcp_output+0x96>
    return ERR_RTE;
 8017018:	f06f 0303 	mvn.w	r3, #3
 801701c:	e1a3      	b.n	8017366 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d003      	beq.n	801702c <tcp_output+0xa4>
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d111      	bne.n	8017050 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d002      	beq.n	8017038 <tcp_output+0xb0>
 8017032:	697b      	ldr	r3, [r7, #20]
 8017034:	3304      	adds	r3, #4
 8017036:	e000      	b.n	801703a <tcp_output+0xb2>
 8017038:	2300      	movs	r3, #0
 801703a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801703c:	693b      	ldr	r3, [r7, #16]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d102      	bne.n	8017048 <tcp_output+0xc0>
      return ERR_RTE;
 8017042:	f06f 0303 	mvn.w	r3, #3
 8017046:	e18e      	b.n	8017366 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	681a      	ldr	r2, [r3, #0]
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017052:	68db      	ldr	r3, [r3, #12]
 8017054:	685b      	ldr	r3, [r3, #4]
 8017056:	4618      	mov	r0, r3
 8017058:	f7f7 fca5 	bl	800e9a6 <lwip_htonl>
 801705c:	4602      	mov	r2, r0
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017062:	1ad3      	subs	r3, r2, r3
 8017064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017066:	8912      	ldrh	r2, [r2, #8]
 8017068:	4413      	add	r3, r2
 801706a:	69ba      	ldr	r2, [r7, #24]
 801706c:	429a      	cmp	r2, r3
 801706e:	d227      	bcs.n	80170c0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017076:	461a      	mov	r2, r3
 8017078:	69bb      	ldr	r3, [r7, #24]
 801707a:	4293      	cmp	r3, r2
 801707c:	d114      	bne.n	80170a8 <tcp_output+0x120>
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017082:	2b00      	cmp	r3, #0
 8017084:	d110      	bne.n	80170a8 <tcp_output+0x120>
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801708c:	2b00      	cmp	r3, #0
 801708e:	d10b      	bne.n	80170a8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2200      	movs	r2, #0
 8017094:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	2201      	movs	r2, #1
 801709c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2200      	movs	r2, #0
 80170a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	8b5b      	ldrh	r3, [r3, #26]
 80170ac:	f003 0302 	and.w	r3, r3, #2
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	f000 814d 	beq.w	8017350 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f000 fd6c 	bl	8017b94 <tcp_send_empty_ack>
 80170bc:	4603      	mov	r3, r0
 80170be:	e152      	b.n	8017366 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	2200      	movs	r2, #0
 80170c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80170cc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80170ce:	6a3b      	ldr	r3, [r7, #32]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f000 811c 	beq.w	801730e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80170d6:	e002      	b.n	80170de <tcp_output+0x156>
 80170d8:	6a3b      	ldr	r3, [r7, #32]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	623b      	str	r3, [r7, #32]
 80170de:	6a3b      	ldr	r3, [r7, #32]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d1f8      	bne.n	80170d8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80170e6:	e112      	b.n	801730e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80170e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ea:	68db      	ldr	r3, [r3, #12]
 80170ec:	899b      	ldrh	r3, [r3, #12]
 80170ee:	b29b      	uxth	r3, r3
 80170f0:	4618      	mov	r0, r3
 80170f2:	f7f7 fc43 	bl	800e97c <lwip_htons>
 80170f6:	4603      	mov	r3, r0
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	f003 0304 	and.w	r3, r3, #4
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d006      	beq.n	8017110 <tcp_output+0x188>
 8017102:	4b43      	ldr	r3, [pc, #268]	; (8017210 <tcp_output+0x288>)
 8017104:	f240 5236 	movw	r2, #1334	; 0x536
 8017108:	4946      	ldr	r1, [pc, #280]	; (8017224 <tcp_output+0x29c>)
 801710a:	4843      	ldr	r0, [pc, #268]	; (8017218 <tcp_output+0x290>)
 801710c:	f003 fffa 	bl	801b104 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017114:	2b00      	cmp	r3, #0
 8017116:	d01f      	beq.n	8017158 <tcp_output+0x1d0>
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	8b5b      	ldrh	r3, [r3, #26]
 801711c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017120:	2b00      	cmp	r3, #0
 8017122:	d119      	bne.n	8017158 <tcp_output+0x1d0>
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017128:	2b00      	cmp	r3, #0
 801712a:	d00b      	beq.n	8017144 <tcp_output+0x1bc>
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d110      	bne.n	8017158 <tcp_output+0x1d0>
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801713a:	891a      	ldrh	r2, [r3, #8]
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017140:	429a      	cmp	r2, r3
 8017142:	d209      	bcs.n	8017158 <tcp_output+0x1d0>
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801714a:	2b00      	cmp	r3, #0
 801714c:	d004      	beq.n	8017158 <tcp_output+0x1d0>
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017154:	2b08      	cmp	r3, #8
 8017156:	d901      	bls.n	801715c <tcp_output+0x1d4>
 8017158:	2301      	movs	r3, #1
 801715a:	e000      	b.n	801715e <tcp_output+0x1d6>
 801715c:	2300      	movs	r3, #0
 801715e:	2b00      	cmp	r3, #0
 8017160:	d106      	bne.n	8017170 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	8b5b      	ldrh	r3, [r3, #26]
 8017166:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801716a:	2b00      	cmp	r3, #0
 801716c:	f000 80e4 	beq.w	8017338 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	7d1b      	ldrb	r3, [r3, #20]
 8017174:	2b02      	cmp	r3, #2
 8017176:	d00d      	beq.n	8017194 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717a:	68db      	ldr	r3, [r3, #12]
 801717c:	899b      	ldrh	r3, [r3, #12]
 801717e:	b29c      	uxth	r4, r3
 8017180:	2010      	movs	r0, #16
 8017182:	f7f7 fbfb 	bl	800e97c <lwip_htons>
 8017186:	4603      	mov	r3, r0
 8017188:	461a      	mov	r2, r3
 801718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718c:	68db      	ldr	r3, [r3, #12]
 801718e:	4322      	orrs	r2, r4
 8017190:	b292      	uxth	r2, r2
 8017192:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017194:	697a      	ldr	r2, [r7, #20]
 8017196:	6879      	ldr	r1, [r7, #4]
 8017198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801719a:	f000 f909 	bl	80173b0 <tcp_output_segment>
 801719e:	4603      	mov	r3, r0
 80171a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80171a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d009      	beq.n	80171be <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	8b5b      	ldrh	r3, [r3, #26]
 80171ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171b2:	b29a      	uxth	r2, r3
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	835a      	strh	r2, [r3, #26]
      return err;
 80171b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171bc:	e0d3      	b.n	8017366 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80171be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	7d1b      	ldrb	r3, [r3, #20]
 80171ca:	2b02      	cmp	r3, #2
 80171cc:	d006      	beq.n	80171dc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	8b5b      	ldrh	r3, [r3, #26]
 80171d2:	f023 0303 	bic.w	r3, r3, #3
 80171d6:	b29a      	uxth	r2, r3
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80171dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171de:	68db      	ldr	r3, [r3, #12]
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7f7 fbdf 	bl	800e9a6 <lwip_htonl>
 80171e8:	4604      	mov	r4, r0
 80171ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ec:	891b      	ldrh	r3, [r3, #8]
 80171ee:	461d      	mov	r5, r3
 80171f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f2:	68db      	ldr	r3, [r3, #12]
 80171f4:	899b      	ldrh	r3, [r3, #12]
 80171f6:	b29b      	uxth	r3, r3
 80171f8:	4618      	mov	r0, r3
 80171fa:	f7f7 fbbf 	bl	800e97c <lwip_htons>
 80171fe:	4603      	mov	r3, r0
 8017200:	b2db      	uxtb	r3, r3
 8017202:	f003 0303 	and.w	r3, r3, #3
 8017206:	2b00      	cmp	r3, #0
 8017208:	d00e      	beq.n	8017228 <tcp_output+0x2a0>
 801720a:	2301      	movs	r3, #1
 801720c:	e00d      	b.n	801722a <tcp_output+0x2a2>
 801720e:	bf00      	nop
 8017210:	08020d0c 	.word	0x08020d0c
 8017214:	0802127c 	.word	0x0802127c
 8017218:	08020d8c 	.word	0x08020d8c
 801721c:	08021294 	.word	0x08021294
 8017220:	24003e04 	.word	0x24003e04
 8017224:	080212bc 	.word	0x080212bc
 8017228:	2300      	movs	r3, #0
 801722a:	442b      	add	r3, r5
 801722c:	4423      	add	r3, r4
 801722e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017234:	68bb      	ldr	r3, [r7, #8]
 8017236:	1ad3      	subs	r3, r2, r3
 8017238:	2b00      	cmp	r3, #0
 801723a:	da02      	bge.n	8017242 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	68ba      	ldr	r2, [r7, #8]
 8017240:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017244:	891b      	ldrh	r3, [r3, #8]
 8017246:	461c      	mov	r4, r3
 8017248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801724a:	68db      	ldr	r3, [r3, #12]
 801724c:	899b      	ldrh	r3, [r3, #12]
 801724e:	b29b      	uxth	r3, r3
 8017250:	4618      	mov	r0, r3
 8017252:	f7f7 fb93 	bl	800e97c <lwip_htons>
 8017256:	4603      	mov	r3, r0
 8017258:	b2db      	uxtb	r3, r3
 801725a:	f003 0303 	and.w	r3, r3, #3
 801725e:	2b00      	cmp	r3, #0
 8017260:	d001      	beq.n	8017266 <tcp_output+0x2de>
 8017262:	2301      	movs	r3, #1
 8017264:	e000      	b.n	8017268 <tcp_output+0x2e0>
 8017266:	2300      	movs	r3, #0
 8017268:	4423      	add	r3, r4
 801726a:	2b00      	cmp	r3, #0
 801726c:	d049      	beq.n	8017302 <tcp_output+0x37a>
      seg->next = NULL;
 801726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017270:	2200      	movs	r2, #0
 8017272:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017278:	2b00      	cmp	r3, #0
 801727a:	d105      	bne.n	8017288 <tcp_output+0x300>
        pcb->unacked = seg;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017280:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017284:	623b      	str	r3, [r7, #32]
 8017286:	e03f      	b.n	8017308 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	685b      	ldr	r3, [r3, #4]
 801728e:	4618      	mov	r0, r3
 8017290:	f7f7 fb89 	bl	800e9a6 <lwip_htonl>
 8017294:	4604      	mov	r4, r0
 8017296:	6a3b      	ldr	r3, [r7, #32]
 8017298:	68db      	ldr	r3, [r3, #12]
 801729a:	685b      	ldr	r3, [r3, #4]
 801729c:	4618      	mov	r0, r3
 801729e:	f7f7 fb82 	bl	800e9a6 <lwip_htonl>
 80172a2:	4603      	mov	r3, r0
 80172a4:	1ae3      	subs	r3, r4, r3
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	da24      	bge.n	80172f4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	3370      	adds	r3, #112	; 0x70
 80172ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80172b0:	e002      	b.n	80172b8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80172b2:	69fb      	ldr	r3, [r7, #28]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80172b8:	69fb      	ldr	r3, [r7, #28]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d011      	beq.n	80172e4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80172c0:	69fb      	ldr	r3, [r7, #28]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	68db      	ldr	r3, [r3, #12]
 80172c6:	685b      	ldr	r3, [r3, #4]
 80172c8:	4618      	mov	r0, r3
 80172ca:	f7f7 fb6c 	bl	800e9a6 <lwip_htonl>
 80172ce:	4604      	mov	r4, r0
 80172d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d2:	68db      	ldr	r3, [r3, #12]
 80172d4:	685b      	ldr	r3, [r3, #4]
 80172d6:	4618      	mov	r0, r3
 80172d8:	f7f7 fb65 	bl	800e9a6 <lwip_htonl>
 80172dc:	4603      	mov	r3, r0
 80172de:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	dbe6      	blt.n	80172b2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80172e4:	69fb      	ldr	r3, [r7, #28]
 80172e6:	681a      	ldr	r2, [r3, #0]
 80172e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80172ec:	69fb      	ldr	r3, [r7, #28]
 80172ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172f0:	601a      	str	r2, [r3, #0]
 80172f2:	e009      	b.n	8017308 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80172f4:	6a3b      	ldr	r3, [r7, #32]
 80172f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172f8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80172fa:	6a3b      	ldr	r3, [r7, #32]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	623b      	str	r3, [r7, #32]
 8017300:	e002      	b.n	8017308 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017302:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017304:	f7fc fc43 	bl	8013b8e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801730c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017310:	2b00      	cmp	r3, #0
 8017312:	d012      	beq.n	801733a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017316:	68db      	ldr	r3, [r3, #12]
 8017318:	685b      	ldr	r3, [r3, #4]
 801731a:	4618      	mov	r0, r3
 801731c:	f7f7 fb43 	bl	800e9a6 <lwip_htonl>
 8017320:	4602      	mov	r2, r0
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017326:	1ad3      	subs	r3, r2, r3
 8017328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801732a:	8912      	ldrh	r2, [r2, #8]
 801732c:	4413      	add	r3, r2
  while (seg != NULL &&
 801732e:	69ba      	ldr	r2, [r7, #24]
 8017330:	429a      	cmp	r2, r3
 8017332:	f4bf aed9 	bcs.w	80170e8 <tcp_output+0x160>
 8017336:	e000      	b.n	801733a <tcp_output+0x3b2>
      break;
 8017338:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801733e:	2b00      	cmp	r3, #0
 8017340:	d108      	bne.n	8017354 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	2200      	movs	r2, #0
 8017346:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801734a:	e004      	b.n	8017356 <tcp_output+0x3ce>
    goto output_done;
 801734c:	bf00      	nop
 801734e:	e002      	b.n	8017356 <tcp_output+0x3ce>
    goto output_done;
 8017350:	bf00      	nop
 8017352:	e000      	b.n	8017356 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017354:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	8b5b      	ldrh	r3, [r3, #26]
 801735a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801735e:	b29a      	uxth	r2, r3
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017364:	2300      	movs	r3, #0
}
 8017366:	4618      	mov	r0, r3
 8017368:	3728      	adds	r7, #40	; 0x28
 801736a:	46bd      	mov	sp, r7
 801736c:	bdb0      	pop	{r4, r5, r7, pc}
 801736e:	bf00      	nop

08017370 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d106      	bne.n	801738c <tcp_output_segment_busy+0x1c>
 801737e:	4b09      	ldr	r3, [pc, #36]	; (80173a4 <tcp_output_segment_busy+0x34>)
 8017380:	f240 529a 	movw	r2, #1434	; 0x59a
 8017384:	4908      	ldr	r1, [pc, #32]	; (80173a8 <tcp_output_segment_busy+0x38>)
 8017386:	4809      	ldr	r0, [pc, #36]	; (80173ac <tcp_output_segment_busy+0x3c>)
 8017388:	f003 febc 	bl	801b104 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	685b      	ldr	r3, [r3, #4]
 8017390:	7b9b      	ldrb	r3, [r3, #14]
 8017392:	2b01      	cmp	r3, #1
 8017394:	d001      	beq.n	801739a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017396:	2301      	movs	r3, #1
 8017398:	e000      	b.n	801739c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801739a:	2300      	movs	r3, #0
}
 801739c:	4618      	mov	r0, r3
 801739e:	3708      	adds	r7, #8
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	08020d0c 	.word	0x08020d0c
 80173a8:	080212d4 	.word	0x080212d4
 80173ac:	08020d8c 	.word	0x08020d8c

080173b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80173b0:	b5b0      	push	{r4, r5, r7, lr}
 80173b2:	b08c      	sub	sp, #48	; 0x30
 80173b4:	af04      	add	r7, sp, #16
 80173b6:	60f8      	str	r0, [r7, #12]
 80173b8:	60b9      	str	r1, [r7, #8]
 80173ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d106      	bne.n	80173d0 <tcp_output_segment+0x20>
 80173c2:	4b63      	ldr	r3, [pc, #396]	; (8017550 <tcp_output_segment+0x1a0>)
 80173c4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80173c8:	4962      	ldr	r1, [pc, #392]	; (8017554 <tcp_output_segment+0x1a4>)
 80173ca:	4863      	ldr	r0, [pc, #396]	; (8017558 <tcp_output_segment+0x1a8>)
 80173cc:	f003 fe9a 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d106      	bne.n	80173e4 <tcp_output_segment+0x34>
 80173d6:	4b5e      	ldr	r3, [pc, #376]	; (8017550 <tcp_output_segment+0x1a0>)
 80173d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80173dc:	495f      	ldr	r1, [pc, #380]	; (801755c <tcp_output_segment+0x1ac>)
 80173de:	485e      	ldr	r0, [pc, #376]	; (8017558 <tcp_output_segment+0x1a8>)
 80173e0:	f003 fe90 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d106      	bne.n	80173f8 <tcp_output_segment+0x48>
 80173ea:	4b59      	ldr	r3, [pc, #356]	; (8017550 <tcp_output_segment+0x1a0>)
 80173ec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80173f0:	495b      	ldr	r1, [pc, #364]	; (8017560 <tcp_output_segment+0x1b0>)
 80173f2:	4859      	ldr	r0, [pc, #356]	; (8017558 <tcp_output_segment+0x1a8>)
 80173f4:	f003 fe86 	bl	801b104 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80173f8:	68f8      	ldr	r0, [r7, #12]
 80173fa:	f7ff ffb9 	bl	8017370 <tcp_output_segment_busy>
 80173fe:	4603      	mov	r3, r0
 8017400:	2b00      	cmp	r3, #0
 8017402:	d001      	beq.n	8017408 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017404:	2300      	movs	r3, #0
 8017406:	e09f      	b.n	8017548 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017408:	68bb      	ldr	r3, [r7, #8]
 801740a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	68dc      	ldr	r4, [r3, #12]
 8017410:	4610      	mov	r0, r2
 8017412:	f7f7 fac8 	bl	800e9a6 <lwip_htonl>
 8017416:	4603      	mov	r3, r0
 8017418:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	68dc      	ldr	r4, [r3, #12]
 8017422:	4610      	mov	r0, r2
 8017424:	f7f7 faaa 	bl	800e97c <lwip_htons>
 8017428:	4603      	mov	r3, r0
 801742a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801742c:	68bb      	ldr	r3, [r7, #8]
 801742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017430:	68ba      	ldr	r2, [r7, #8]
 8017432:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017434:	441a      	add	r2, r3
 8017436:	68bb      	ldr	r3, [r7, #8]
 8017438:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	68db      	ldr	r3, [r3, #12]
 801743e:	3314      	adds	r3, #20
 8017440:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	7a9b      	ldrb	r3, [r3, #10]
 8017446:	f003 0301 	and.w	r3, r3, #1
 801744a:	2b00      	cmp	r3, #0
 801744c:	d015      	beq.n	801747a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801744e:	68bb      	ldr	r3, [r7, #8]
 8017450:	3304      	adds	r3, #4
 8017452:	461a      	mov	r2, r3
 8017454:	6879      	ldr	r1, [r7, #4]
 8017456:	f44f 7006 	mov.w	r0, #536	; 0x218
 801745a:	f7fc fe8f 	bl	801417c <tcp_eff_send_mss_netif>
 801745e:	4603      	mov	r3, r0
 8017460:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017462:	8b7b      	ldrh	r3, [r7, #26]
 8017464:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017468:	4618      	mov	r0, r3
 801746a:	f7f7 fa9c 	bl	800e9a6 <lwip_htonl>
 801746e:	4602      	mov	r2, r0
 8017470:	69fb      	ldr	r3, [r7, #28]
 8017472:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017474:	69fb      	ldr	r3, [r7, #28]
 8017476:	3304      	adds	r3, #4
 8017478:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017480:	2b00      	cmp	r3, #0
 8017482:	da02      	bge.n	801748a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	2200      	movs	r2, #0
 8017488:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801748a:	68bb      	ldr	r3, [r7, #8]
 801748c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801748e:	2b00      	cmp	r3, #0
 8017490:	d10c      	bne.n	80174ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017492:	4b34      	ldr	r3, [pc, #208]	; (8017564 <tcp_output_segment+0x1b4>)
 8017494:	681a      	ldr	r2, [r3, #0]
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	68db      	ldr	r3, [r3, #12]
 801749e:	685b      	ldr	r3, [r3, #4]
 80174a0:	4618      	mov	r0, r3
 80174a2:	f7f7 fa80 	bl	800e9a6 <lwip_htonl>
 80174a6:	4602      	mov	r2, r0
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	68da      	ldr	r2, [r3, #12]
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	685b      	ldr	r3, [r3, #4]
 80174b4:	685b      	ldr	r3, [r3, #4]
 80174b6:	1ad3      	subs	r3, r2, r3
 80174b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	685b      	ldr	r3, [r3, #4]
 80174be:	8959      	ldrh	r1, [r3, #10]
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	685b      	ldr	r3, [r3, #4]
 80174c4:	8b3a      	ldrh	r2, [r7, #24]
 80174c6:	1a8a      	subs	r2, r1, r2
 80174c8:	b292      	uxth	r2, r2
 80174ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	685b      	ldr	r3, [r3, #4]
 80174d0:	8919      	ldrh	r1, [r3, #8]
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	8b3a      	ldrh	r2, [r7, #24]
 80174d8:	1a8a      	subs	r2, r1, r2
 80174da:	b292      	uxth	r2, r2
 80174dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	685b      	ldr	r3, [r3, #4]
 80174e2:	68fa      	ldr	r2, [r7, #12]
 80174e4:	68d2      	ldr	r2, [r2, #12]
 80174e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	68db      	ldr	r3, [r3, #12]
 80174ec:	2200      	movs	r2, #0
 80174ee:	741a      	strb	r2, [r3, #16]
 80174f0:	2200      	movs	r2, #0
 80174f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	68db      	ldr	r3, [r3, #12]
 80174f8:	f103 0214 	add.w	r2, r3, #20
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	7a9b      	ldrb	r3, [r3, #10]
 8017500:	009b      	lsls	r3, r3, #2
 8017502:	f003 0304 	and.w	r3, r3, #4
 8017506:	4413      	add	r3, r2
 8017508:	69fa      	ldr	r2, [r7, #28]
 801750a:	429a      	cmp	r2, r3
 801750c:	d006      	beq.n	801751c <tcp_output_segment+0x16c>
 801750e:	4b10      	ldr	r3, [pc, #64]	; (8017550 <tcp_output_segment+0x1a0>)
 8017510:	f240 621c 	movw	r2, #1564	; 0x61c
 8017514:	4914      	ldr	r1, [pc, #80]	; (8017568 <tcp_output_segment+0x1b8>)
 8017516:	4810      	ldr	r0, [pc, #64]	; (8017558 <tcp_output_segment+0x1a8>)
 8017518:	f003 fdf4 	bl	801b104 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	6858      	ldr	r0, [r3, #4]
 8017520:	68b9      	ldr	r1, [r7, #8]
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	1d1c      	adds	r4, r3, #4
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	7add      	ldrb	r5, [r3, #11]
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	7a9b      	ldrb	r3, [r3, #10]
 801752e:	687a      	ldr	r2, [r7, #4]
 8017530:	9202      	str	r2, [sp, #8]
 8017532:	2206      	movs	r2, #6
 8017534:	9201      	str	r2, [sp, #4]
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	462b      	mov	r3, r5
 801753a:	4622      	mov	r2, r4
 801753c:	f7f8 feb2 	bl	80102a4 <ip4_output_if>
 8017540:	4603      	mov	r3, r0
 8017542:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017544:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017548:	4618      	mov	r0, r3
 801754a:	3720      	adds	r7, #32
 801754c:	46bd      	mov	sp, r7
 801754e:	bdb0      	pop	{r4, r5, r7, pc}
 8017550:	08020d0c 	.word	0x08020d0c
 8017554:	080212fc 	.word	0x080212fc
 8017558:	08020d8c 	.word	0x08020d8c
 801755c:	0802131c 	.word	0x0802131c
 8017560:	0802133c 	.word	0x0802133c
 8017564:	24003df4 	.word	0x24003df4
 8017568:	08021360 	.word	0x08021360

0801756c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801756c:	b5b0      	push	{r4, r5, r7, lr}
 801756e:	b084      	sub	sp, #16
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d106      	bne.n	8017588 <tcp_rexmit_rto_prepare+0x1c>
 801757a:	4b31      	ldr	r3, [pc, #196]	; (8017640 <tcp_rexmit_rto_prepare+0xd4>)
 801757c:	f240 6263 	movw	r2, #1635	; 0x663
 8017580:	4930      	ldr	r1, [pc, #192]	; (8017644 <tcp_rexmit_rto_prepare+0xd8>)
 8017582:	4831      	ldr	r0, [pc, #196]	; (8017648 <tcp_rexmit_rto_prepare+0xdc>)
 8017584:	f003 fdbe 	bl	801b104 <iprintf>

  if (pcb->unacked == NULL) {
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801758c:	2b00      	cmp	r3, #0
 801758e:	d102      	bne.n	8017596 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017590:	f06f 0305 	mvn.w	r3, #5
 8017594:	e050      	b.n	8017638 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801759a:	60fb      	str	r3, [r7, #12]
 801759c:	e00b      	b.n	80175b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801759e:	68f8      	ldr	r0, [r7, #12]
 80175a0:	f7ff fee6 	bl	8017370 <tcp_output_segment_busy>
 80175a4:	4603      	mov	r3, r0
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d002      	beq.n	80175b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80175aa:	f06f 0305 	mvn.w	r3, #5
 80175ae:	e043      	b.n	8017638 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	60fb      	str	r3, [r7, #12]
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d1ef      	bne.n	801759e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80175be:	68f8      	ldr	r0, [r7, #12]
 80175c0:	f7ff fed6 	bl	8017370 <tcp_output_segment_busy>
 80175c4:	4603      	mov	r3, r0
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d002      	beq.n	80175d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80175ca:	f06f 0305 	mvn.w	r3, #5
 80175ce:	e033      	b.n	8017638 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	2200      	movs	r2, #0
 80175e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	8b5b      	ldrh	r3, [r3, #26]
 80175ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80175ee:	b29a      	uxth	r2, r3
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	68db      	ldr	r3, [r3, #12]
 80175f8:	685b      	ldr	r3, [r3, #4]
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7f7 f9d3 	bl	800e9a6 <lwip_htonl>
 8017600:	4604      	mov	r4, r0
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	891b      	ldrh	r3, [r3, #8]
 8017606:	461d      	mov	r5, r3
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	68db      	ldr	r3, [r3, #12]
 801760c:	899b      	ldrh	r3, [r3, #12]
 801760e:	b29b      	uxth	r3, r3
 8017610:	4618      	mov	r0, r3
 8017612:	f7f7 f9b3 	bl	800e97c <lwip_htons>
 8017616:	4603      	mov	r3, r0
 8017618:	b2db      	uxtb	r3, r3
 801761a:	f003 0303 	and.w	r3, r3, #3
 801761e:	2b00      	cmp	r3, #0
 8017620:	d001      	beq.n	8017626 <tcp_rexmit_rto_prepare+0xba>
 8017622:	2301      	movs	r3, #1
 8017624:	e000      	b.n	8017628 <tcp_rexmit_rto_prepare+0xbc>
 8017626:	2300      	movs	r3, #0
 8017628:	442b      	add	r3, r5
 801762a:	18e2      	adds	r2, r4, r3
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2200      	movs	r2, #0
 8017634:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017636:	2300      	movs	r3, #0
}
 8017638:	4618      	mov	r0, r3
 801763a:	3710      	adds	r7, #16
 801763c:	46bd      	mov	sp, r7
 801763e:	bdb0      	pop	{r4, r5, r7, pc}
 8017640:	08020d0c 	.word	0x08020d0c
 8017644:	08021374 	.word	0x08021374
 8017648:	08020d8c 	.word	0x08020d8c

0801764c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b082      	sub	sp, #8
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d106      	bne.n	8017668 <tcp_rexmit_rto_commit+0x1c>
 801765a:	4b0d      	ldr	r3, [pc, #52]	; (8017690 <tcp_rexmit_rto_commit+0x44>)
 801765c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017660:	490c      	ldr	r1, [pc, #48]	; (8017694 <tcp_rexmit_rto_commit+0x48>)
 8017662:	480d      	ldr	r0, [pc, #52]	; (8017698 <tcp_rexmit_rto_commit+0x4c>)
 8017664:	f003 fd4e 	bl	801b104 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801766e:	2bff      	cmp	r3, #255	; 0xff
 8017670:	d007      	beq.n	8017682 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017678:	3301      	adds	r3, #1
 801767a:	b2da      	uxtb	r2, r3
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7ff fc80 	bl	8016f88 <tcp_output>
}
 8017688:	bf00      	nop
 801768a:	3708      	adds	r7, #8
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}
 8017690:	08020d0c 	.word	0x08020d0c
 8017694:	08021398 	.word	0x08021398
 8017698:	08020d8c 	.word	0x08020d8c

0801769c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b082      	sub	sp, #8
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d106      	bne.n	80176b8 <tcp_rexmit_rto+0x1c>
 80176aa:	4b0a      	ldr	r3, [pc, #40]	; (80176d4 <tcp_rexmit_rto+0x38>)
 80176ac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80176b0:	4909      	ldr	r1, [pc, #36]	; (80176d8 <tcp_rexmit_rto+0x3c>)
 80176b2:	480a      	ldr	r0, [pc, #40]	; (80176dc <tcp_rexmit_rto+0x40>)
 80176b4:	f003 fd26 	bl	801b104 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f7ff ff57 	bl	801756c <tcp_rexmit_rto_prepare>
 80176be:	4603      	mov	r3, r0
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d102      	bne.n	80176ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80176c4:	6878      	ldr	r0, [r7, #4]
 80176c6:	f7ff ffc1 	bl	801764c <tcp_rexmit_rto_commit>
  }
}
 80176ca:	bf00      	nop
 80176cc:	3708      	adds	r7, #8
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop
 80176d4:	08020d0c 	.word	0x08020d0c
 80176d8:	080213bc 	.word	0x080213bc
 80176dc:	08020d8c 	.word	0x08020d8c

080176e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80176e0:	b590      	push	{r4, r7, lr}
 80176e2:	b085      	sub	sp, #20
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d106      	bne.n	80176fc <tcp_rexmit+0x1c>
 80176ee:	4b2f      	ldr	r3, [pc, #188]	; (80177ac <tcp_rexmit+0xcc>)
 80176f0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80176f4:	492e      	ldr	r1, [pc, #184]	; (80177b0 <tcp_rexmit+0xd0>)
 80176f6:	482f      	ldr	r0, [pc, #188]	; (80177b4 <tcp_rexmit+0xd4>)
 80176f8:	f003 fd04 	bl	801b104 <iprintf>

  if (pcb->unacked == NULL) {
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017700:	2b00      	cmp	r3, #0
 8017702:	d102      	bne.n	801770a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017704:	f06f 0305 	mvn.w	r3, #5
 8017708:	e04c      	b.n	80177a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801770e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017710:	68b8      	ldr	r0, [r7, #8]
 8017712:	f7ff fe2d 	bl	8017370 <tcp_output_segment_busy>
 8017716:	4603      	mov	r3, r0
 8017718:	2b00      	cmp	r3, #0
 801771a:	d002      	beq.n	8017722 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801771c:	f06f 0305 	mvn.w	r3, #5
 8017720:	e040      	b.n	80177a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017722:	68bb      	ldr	r3, [r7, #8]
 8017724:	681a      	ldr	r2, [r3, #0]
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	336c      	adds	r3, #108	; 0x6c
 801772e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017730:	e002      	b.n	8017738 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d011      	beq.n	8017764 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	68db      	ldr	r3, [r3, #12]
 8017746:	685b      	ldr	r3, [r3, #4]
 8017748:	4618      	mov	r0, r3
 801774a:	f7f7 f92c 	bl	800e9a6 <lwip_htonl>
 801774e:	4604      	mov	r4, r0
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	68db      	ldr	r3, [r3, #12]
 8017754:	685b      	ldr	r3, [r3, #4]
 8017756:	4618      	mov	r0, r3
 8017758:	f7f7 f925 	bl	800e9a6 <lwip_htonl>
 801775c:	4603      	mov	r3, r0
 801775e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017760:	2b00      	cmp	r3, #0
 8017762:	dbe6      	blt.n	8017732 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	681a      	ldr	r2, [r3, #0]
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	68ba      	ldr	r2, [r7, #8]
 8017770:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017772:	68bb      	ldr	r3, [r7, #8]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d103      	bne.n	8017782 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2200      	movs	r2, #0
 801777e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017788:	2bff      	cmp	r3, #255	; 0xff
 801778a:	d007      	beq.n	801779c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017792:	3301      	adds	r3, #1
 8017794:	b2da      	uxtb	r2, r3
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	2200      	movs	r2, #0
 80177a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80177a2:	2300      	movs	r3, #0
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	3714      	adds	r7, #20
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd90      	pop	{r4, r7, pc}
 80177ac:	08020d0c 	.word	0x08020d0c
 80177b0:	080213d8 	.word	0x080213d8
 80177b4:	08020d8c 	.word	0x08020d8c

080177b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d106      	bne.n	80177d4 <tcp_rexmit_fast+0x1c>
 80177c6:	4b2a      	ldr	r3, [pc, #168]	; (8017870 <tcp_rexmit_fast+0xb8>)
 80177c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80177cc:	4929      	ldr	r1, [pc, #164]	; (8017874 <tcp_rexmit_fast+0xbc>)
 80177ce:	482a      	ldr	r0, [pc, #168]	; (8017878 <tcp_rexmit_fast+0xc0>)
 80177d0:	f003 fc98 	bl	801b104 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d045      	beq.n	8017868 <tcp_rexmit_fast+0xb0>
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	8b5b      	ldrh	r3, [r3, #26]
 80177e0:	f003 0304 	and.w	r3, r3, #4
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d13f      	bne.n	8017868 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f7ff ff79 	bl	80176e0 <tcp_rexmit>
 80177ee:	4603      	mov	r3, r0
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d139      	bne.n	8017868 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017800:	4293      	cmp	r3, r2
 8017802:	bf28      	it	cs
 8017804:	4613      	movcs	r3, r2
 8017806:	b29b      	uxth	r3, r3
 8017808:	2b00      	cmp	r3, #0
 801780a:	da00      	bge.n	801780e <tcp_rexmit_fast+0x56>
 801780c:	3301      	adds	r3, #1
 801780e:	105b      	asrs	r3, r3, #1
 8017810:	b29a      	uxth	r2, r3
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801781e:	461a      	mov	r2, r3
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017824:	005b      	lsls	r3, r3, #1
 8017826:	429a      	cmp	r2, r3
 8017828:	d206      	bcs.n	8017838 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801782e:	005b      	lsls	r3, r3, #1
 8017830:	b29a      	uxth	r2, r3
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017842:	4619      	mov	r1, r3
 8017844:	0049      	lsls	r1, r1, #1
 8017846:	440b      	add	r3, r1
 8017848:	b29b      	uxth	r3, r3
 801784a:	4413      	add	r3, r2
 801784c:	b29a      	uxth	r2, r3
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	8b5b      	ldrh	r3, [r3, #26]
 8017858:	f043 0304 	orr.w	r3, r3, #4
 801785c:	b29a      	uxth	r2, r3
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	2200      	movs	r2, #0
 8017866:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017868:	bf00      	nop
 801786a:	3708      	adds	r7, #8
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	08020d0c 	.word	0x08020d0c
 8017874:	080213f0 	.word	0x080213f0
 8017878:	08020d8c 	.word	0x08020d8c

0801787c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b086      	sub	sp, #24
 8017880:	af00      	add	r7, sp, #0
 8017882:	60f8      	str	r0, [r7, #12]
 8017884:	607b      	str	r3, [r7, #4]
 8017886:	460b      	mov	r3, r1
 8017888:	817b      	strh	r3, [r7, #10]
 801788a:	4613      	mov	r3, r2
 801788c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801788e:	897a      	ldrh	r2, [r7, #10]
 8017890:	893b      	ldrh	r3, [r7, #8]
 8017892:	4413      	add	r3, r2
 8017894:	b29b      	uxth	r3, r3
 8017896:	3314      	adds	r3, #20
 8017898:	b29b      	uxth	r3, r3
 801789a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801789e:	4619      	mov	r1, r3
 80178a0:	2022      	movs	r0, #34	; 0x22
 80178a2:	f7fa fc1d 	bl	80120e0 <pbuf_alloc>
 80178a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80178a8:	697b      	ldr	r3, [r7, #20]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d04d      	beq.n	801794a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80178ae:	897b      	ldrh	r3, [r7, #10]
 80178b0:	3313      	adds	r3, #19
 80178b2:	697a      	ldr	r2, [r7, #20]
 80178b4:	8952      	ldrh	r2, [r2, #10]
 80178b6:	4293      	cmp	r3, r2
 80178b8:	db06      	blt.n	80178c8 <tcp_output_alloc_header_common+0x4c>
 80178ba:	4b26      	ldr	r3, [pc, #152]	; (8017954 <tcp_output_alloc_header_common+0xd8>)
 80178bc:	f240 7223 	movw	r2, #1827	; 0x723
 80178c0:	4925      	ldr	r1, [pc, #148]	; (8017958 <tcp_output_alloc_header_common+0xdc>)
 80178c2:	4826      	ldr	r0, [pc, #152]	; (801795c <tcp_output_alloc_header_common+0xe0>)
 80178c4:	f003 fc1e 	bl	801b104 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	685b      	ldr	r3, [r3, #4]
 80178cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80178ce:	8c3b      	ldrh	r3, [r7, #32]
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7f7 f853 	bl	800e97c <lwip_htons>
 80178d6:	4603      	mov	r3, r0
 80178d8:	461a      	mov	r2, r3
 80178da:	693b      	ldr	r3, [r7, #16]
 80178dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80178de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7f7 f84b 	bl	800e97c <lwip_htons>
 80178e6:	4603      	mov	r3, r0
 80178e8:	461a      	mov	r2, r3
 80178ea:	693b      	ldr	r3, [r7, #16]
 80178ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	687a      	ldr	r2, [r7, #4]
 80178f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80178f4:	68f8      	ldr	r0, [r7, #12]
 80178f6:	f7f7 f856 	bl	800e9a6 <lwip_htonl>
 80178fa:	4602      	mov	r2, r0
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017900:	897b      	ldrh	r3, [r7, #10]
 8017902:	089b      	lsrs	r3, r3, #2
 8017904:	b29b      	uxth	r3, r3
 8017906:	3305      	adds	r3, #5
 8017908:	b29b      	uxth	r3, r3
 801790a:	031b      	lsls	r3, r3, #12
 801790c:	b29a      	uxth	r2, r3
 801790e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017912:	b29b      	uxth	r3, r3
 8017914:	4313      	orrs	r3, r2
 8017916:	b29b      	uxth	r3, r3
 8017918:	4618      	mov	r0, r3
 801791a:	f7f7 f82f 	bl	800e97c <lwip_htons>
 801791e:	4603      	mov	r3, r0
 8017920:	461a      	mov	r2, r3
 8017922:	693b      	ldr	r3, [r7, #16]
 8017924:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017926:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017928:	4618      	mov	r0, r3
 801792a:	f7f7 f827 	bl	800e97c <lwip_htons>
 801792e:	4603      	mov	r3, r0
 8017930:	461a      	mov	r2, r3
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	2200      	movs	r2, #0
 801793a:	741a      	strb	r2, [r3, #16]
 801793c:	2200      	movs	r2, #0
 801793e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017940:	693b      	ldr	r3, [r7, #16]
 8017942:	2200      	movs	r2, #0
 8017944:	749a      	strb	r2, [r3, #18]
 8017946:	2200      	movs	r2, #0
 8017948:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801794a:	697b      	ldr	r3, [r7, #20]
}
 801794c:	4618      	mov	r0, r3
 801794e:	3718      	adds	r7, #24
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}
 8017954:	08020d0c 	.word	0x08020d0c
 8017958:	08021410 	.word	0x08021410
 801795c:	08020d8c 	.word	0x08020d8c

08017960 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017960:	b5b0      	push	{r4, r5, r7, lr}
 8017962:	b08a      	sub	sp, #40	; 0x28
 8017964:	af04      	add	r7, sp, #16
 8017966:	60f8      	str	r0, [r7, #12]
 8017968:	607b      	str	r3, [r7, #4]
 801796a:	460b      	mov	r3, r1
 801796c:	817b      	strh	r3, [r7, #10]
 801796e:	4613      	mov	r3, r2
 8017970:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d106      	bne.n	8017986 <tcp_output_alloc_header+0x26>
 8017978:	4b15      	ldr	r3, [pc, #84]	; (80179d0 <tcp_output_alloc_header+0x70>)
 801797a:	f240 7242 	movw	r2, #1858	; 0x742
 801797e:	4915      	ldr	r1, [pc, #84]	; (80179d4 <tcp_output_alloc_header+0x74>)
 8017980:	4815      	ldr	r0, [pc, #84]	; (80179d8 <tcp_output_alloc_header+0x78>)
 8017982:	f003 fbbf 	bl	801b104 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	8adb      	ldrh	r3, [r3, #22]
 801798e:	68fa      	ldr	r2, [r7, #12]
 8017990:	8b12      	ldrh	r2, [r2, #24]
 8017992:	68f9      	ldr	r1, [r7, #12]
 8017994:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017996:	893d      	ldrh	r5, [r7, #8]
 8017998:	897c      	ldrh	r4, [r7, #10]
 801799a:	9103      	str	r1, [sp, #12]
 801799c:	2110      	movs	r1, #16
 801799e:	9102      	str	r1, [sp, #8]
 80179a0:	9201      	str	r2, [sp, #4]
 80179a2:	9300      	str	r3, [sp, #0]
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	462a      	mov	r2, r5
 80179a8:	4621      	mov	r1, r4
 80179aa:	f7ff ff67 	bl	801787c <tcp_output_alloc_header_common>
 80179ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80179b0:	697b      	ldr	r3, [r7, #20]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d006      	beq.n	80179c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ba:	68fa      	ldr	r2, [r7, #12]
 80179bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80179be:	441a      	add	r2, r3
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80179c4:	697b      	ldr	r3, [r7, #20]
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3718      	adds	r7, #24
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bdb0      	pop	{r4, r5, r7, pc}
 80179ce:	bf00      	nop
 80179d0:	08020d0c 	.word	0x08020d0c
 80179d4:	08021440 	.word	0x08021440
 80179d8:	08020d8c 	.word	0x08020d8c

080179dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b088      	sub	sp, #32
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	60f8      	str	r0, [r7, #12]
 80179e4:	60b9      	str	r1, [r7, #8]
 80179e6:	4611      	mov	r1, r2
 80179e8:	461a      	mov	r2, r3
 80179ea:	460b      	mov	r3, r1
 80179ec:	71fb      	strb	r3, [r7, #7]
 80179ee:	4613      	mov	r3, r2
 80179f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80179f2:	2300      	movs	r3, #0
 80179f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80179f6:	68bb      	ldr	r3, [r7, #8]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d106      	bne.n	8017a0a <tcp_output_fill_options+0x2e>
 80179fc:	4b13      	ldr	r3, [pc, #76]	; (8017a4c <tcp_output_fill_options+0x70>)
 80179fe:	f240 7256 	movw	r2, #1878	; 0x756
 8017a02:	4913      	ldr	r1, [pc, #76]	; (8017a50 <tcp_output_fill_options+0x74>)
 8017a04:	4813      	ldr	r0, [pc, #76]	; (8017a54 <tcp_output_fill_options+0x78>)
 8017a06:	f003 fb7d 	bl	801b104 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017a0a:	68bb      	ldr	r3, [r7, #8]
 8017a0c:	685b      	ldr	r3, [r3, #4]
 8017a0e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017a10:	69bb      	ldr	r3, [r7, #24]
 8017a12:	3314      	adds	r3, #20
 8017a14:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017a16:	69bb      	ldr	r3, [r7, #24]
 8017a18:	f103 0214 	add.w	r2, r3, #20
 8017a1c:	8bfb      	ldrh	r3, [r7, #30]
 8017a1e:	009b      	lsls	r3, r3, #2
 8017a20:	4619      	mov	r1, r3
 8017a22:	79fb      	ldrb	r3, [r7, #7]
 8017a24:	009b      	lsls	r3, r3, #2
 8017a26:	f003 0304 	and.w	r3, r3, #4
 8017a2a:	440b      	add	r3, r1
 8017a2c:	4413      	add	r3, r2
 8017a2e:	697a      	ldr	r2, [r7, #20]
 8017a30:	429a      	cmp	r2, r3
 8017a32:	d006      	beq.n	8017a42 <tcp_output_fill_options+0x66>
 8017a34:	4b05      	ldr	r3, [pc, #20]	; (8017a4c <tcp_output_fill_options+0x70>)
 8017a36:	f240 7275 	movw	r2, #1909	; 0x775
 8017a3a:	4907      	ldr	r1, [pc, #28]	; (8017a58 <tcp_output_fill_options+0x7c>)
 8017a3c:	4805      	ldr	r0, [pc, #20]	; (8017a54 <tcp_output_fill_options+0x78>)
 8017a3e:	f003 fb61 	bl	801b104 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017a42:	bf00      	nop
 8017a44:	3720      	adds	r7, #32
 8017a46:	46bd      	mov	sp, r7
 8017a48:	bd80      	pop	{r7, pc}
 8017a4a:	bf00      	nop
 8017a4c:	08020d0c 	.word	0x08020d0c
 8017a50:	08021468 	.word	0x08021468
 8017a54:	08020d8c 	.word	0x08020d8c
 8017a58:	08021360 	.word	0x08021360

08017a5c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b08a      	sub	sp, #40	; 0x28
 8017a60:	af04      	add	r7, sp, #16
 8017a62:	60f8      	str	r0, [r7, #12]
 8017a64:	60b9      	str	r1, [r7, #8]
 8017a66:	607a      	str	r2, [r7, #4]
 8017a68:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017a6a:	68bb      	ldr	r3, [r7, #8]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d106      	bne.n	8017a7e <tcp_output_control_segment+0x22>
 8017a70:	4b1c      	ldr	r3, [pc, #112]	; (8017ae4 <tcp_output_control_segment+0x88>)
 8017a72:	f240 7287 	movw	r2, #1927	; 0x787
 8017a76:	491c      	ldr	r1, [pc, #112]	; (8017ae8 <tcp_output_control_segment+0x8c>)
 8017a78:	481c      	ldr	r0, [pc, #112]	; (8017aec <tcp_output_control_segment+0x90>)
 8017a7a:	f003 fb43 	bl	801b104 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017a7e:	683a      	ldr	r2, [r7, #0]
 8017a80:	6879      	ldr	r1, [r7, #4]
 8017a82:	68f8      	ldr	r0, [r7, #12]
 8017a84:	f7fe ff40 	bl	8016908 <tcp_route>
 8017a88:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d102      	bne.n	8017a96 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017a90:	23fc      	movs	r3, #252	; 0xfc
 8017a92:	75fb      	strb	r3, [r7, #23]
 8017a94:	e01c      	b.n	8017ad0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d006      	beq.n	8017aaa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017a9c:	68fb      	ldr	r3, [r7, #12]
 8017a9e:	7adb      	ldrb	r3, [r3, #11]
 8017aa0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	7a9b      	ldrb	r3, [r3, #10]
 8017aa6:	757b      	strb	r3, [r7, #21]
 8017aa8:	e003      	b.n	8017ab2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017aaa:	23ff      	movs	r3, #255	; 0xff
 8017aac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017ab2:	7dba      	ldrb	r2, [r7, #22]
 8017ab4:	693b      	ldr	r3, [r7, #16]
 8017ab6:	9302      	str	r3, [sp, #8]
 8017ab8:	2306      	movs	r3, #6
 8017aba:	9301      	str	r3, [sp, #4]
 8017abc:	7d7b      	ldrb	r3, [r7, #21]
 8017abe:	9300      	str	r3, [sp, #0]
 8017ac0:	4613      	mov	r3, r2
 8017ac2:	683a      	ldr	r2, [r7, #0]
 8017ac4:	6879      	ldr	r1, [r7, #4]
 8017ac6:	68b8      	ldr	r0, [r7, #8]
 8017ac8:	f7f8 fbec 	bl	80102a4 <ip4_output_if>
 8017acc:	4603      	mov	r3, r0
 8017ace:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017ad0:	68b8      	ldr	r0, [r7, #8]
 8017ad2:	f7fa fde9 	bl	80126a8 <pbuf_free>
  return err;
 8017ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3718      	adds	r7, #24
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}
 8017ae2:	bf00      	nop
 8017ae4:	08020d0c 	.word	0x08020d0c
 8017ae8:	08021490 	.word	0x08021490
 8017aec:	08020d8c 	.word	0x08020d8c

08017af0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017af0:	b590      	push	{r4, r7, lr}
 8017af2:	b08b      	sub	sp, #44	; 0x2c
 8017af4:	af04      	add	r7, sp, #16
 8017af6:	60f8      	str	r0, [r7, #12]
 8017af8:	60b9      	str	r1, [r7, #8]
 8017afa:	607a      	str	r2, [r7, #4]
 8017afc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d106      	bne.n	8017b12 <tcp_rst+0x22>
 8017b04:	4b1f      	ldr	r3, [pc, #124]	; (8017b84 <tcp_rst+0x94>)
 8017b06:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017b0a:	491f      	ldr	r1, [pc, #124]	; (8017b88 <tcp_rst+0x98>)
 8017b0c:	481f      	ldr	r0, [pc, #124]	; (8017b8c <tcp_rst+0x9c>)
 8017b0e:	f003 faf9 	bl	801b104 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d106      	bne.n	8017b26 <tcp_rst+0x36>
 8017b18:	4b1a      	ldr	r3, [pc, #104]	; (8017b84 <tcp_rst+0x94>)
 8017b1a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8017b1e:	491c      	ldr	r1, [pc, #112]	; (8017b90 <tcp_rst+0xa0>)
 8017b20:	481a      	ldr	r0, [pc, #104]	; (8017b8c <tcp_rst+0x9c>)
 8017b22:	f003 faef 	bl	801b104 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017b26:	2300      	movs	r3, #0
 8017b28:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017b2a:	f246 0308 	movw	r3, #24584	; 0x6008
 8017b2e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017b30:	7dfb      	ldrb	r3, [r7, #23]
 8017b32:	b29c      	uxth	r4, r3
 8017b34:	68b8      	ldr	r0, [r7, #8]
 8017b36:	f7f6 ff36 	bl	800e9a6 <lwip_htonl>
 8017b3a:	4602      	mov	r2, r0
 8017b3c:	8abb      	ldrh	r3, [r7, #20]
 8017b3e:	9303      	str	r3, [sp, #12]
 8017b40:	2314      	movs	r3, #20
 8017b42:	9302      	str	r3, [sp, #8]
 8017b44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017b46:	9301      	str	r3, [sp, #4]
 8017b48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017b4a:	9300      	str	r3, [sp, #0]
 8017b4c:	4613      	mov	r3, r2
 8017b4e:	2200      	movs	r2, #0
 8017b50:	4621      	mov	r1, r4
 8017b52:	6878      	ldr	r0, [r7, #4]
 8017b54:	f7ff fe92 	bl	801787c <tcp_output_alloc_header_common>
 8017b58:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017b5a:	693b      	ldr	r3, [r7, #16]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d00c      	beq.n	8017b7a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017b60:	7dfb      	ldrb	r3, [r7, #23]
 8017b62:	2200      	movs	r2, #0
 8017b64:	6939      	ldr	r1, [r7, #16]
 8017b66:	68f8      	ldr	r0, [r7, #12]
 8017b68:	f7ff ff38 	bl	80179dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b6e:	683a      	ldr	r2, [r7, #0]
 8017b70:	6939      	ldr	r1, [r7, #16]
 8017b72:	68f8      	ldr	r0, [r7, #12]
 8017b74:	f7ff ff72 	bl	8017a5c <tcp_output_control_segment>
 8017b78:	e000      	b.n	8017b7c <tcp_rst+0x8c>
    return;
 8017b7a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017b7c:	371c      	adds	r7, #28
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd90      	pop	{r4, r7, pc}
 8017b82:	bf00      	nop
 8017b84:	08020d0c 	.word	0x08020d0c
 8017b88:	080214bc 	.word	0x080214bc
 8017b8c:	08020d8c 	.word	0x08020d8c
 8017b90:	080214d8 	.word	0x080214d8

08017b94 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017b94:	b590      	push	{r4, r7, lr}
 8017b96:	b087      	sub	sp, #28
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d106      	bne.n	8017bb8 <tcp_send_empty_ack+0x24>
 8017baa:	4b28      	ldr	r3, [pc, #160]	; (8017c4c <tcp_send_empty_ack+0xb8>)
 8017bac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017bb0:	4927      	ldr	r1, [pc, #156]	; (8017c50 <tcp_send_empty_ack+0xbc>)
 8017bb2:	4828      	ldr	r0, [pc, #160]	; (8017c54 <tcp_send_empty_ack+0xc0>)
 8017bb4:	f003 faa6 	bl	801b104 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017bb8:	7dfb      	ldrb	r3, [r7, #23]
 8017bba:	009b      	lsls	r3, r3, #2
 8017bbc:	b2db      	uxtb	r3, r3
 8017bbe:	f003 0304 	and.w	r3, r3, #4
 8017bc2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017bc4:	7d7b      	ldrb	r3, [r7, #21]
 8017bc6:	b29c      	uxth	r4, r3
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f7f6 feea 	bl	800e9a6 <lwip_htonl>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	4621      	mov	r1, r4
 8017bd8:	6878      	ldr	r0, [r7, #4]
 8017bda:	f7ff fec1 	bl	8017960 <tcp_output_alloc_header>
 8017bde:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017be0:	693b      	ldr	r3, [r7, #16]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d109      	bne.n	8017bfa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	8b5b      	ldrh	r3, [r3, #26]
 8017bea:	f043 0303 	orr.w	r3, r3, #3
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017bf4:	f06f 0301 	mvn.w	r3, #1
 8017bf8:	e023      	b.n	8017c42 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017bfa:	7dbb      	ldrb	r3, [r7, #22]
 8017bfc:	7dfa      	ldrb	r2, [r7, #23]
 8017bfe:	6939      	ldr	r1, [r7, #16]
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f7ff feeb 	bl	80179dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017c06:	687a      	ldr	r2, [r7, #4]
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	3304      	adds	r3, #4
 8017c0c:	6939      	ldr	r1, [r7, #16]
 8017c0e:	6878      	ldr	r0, [r7, #4]
 8017c10:	f7ff ff24 	bl	8017a5c <tcp_output_control_segment>
 8017c14:	4603      	mov	r3, r0
 8017c16:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d007      	beq.n	8017c30 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	8b5b      	ldrh	r3, [r3, #26]
 8017c24:	f043 0303 	orr.w	r3, r3, #3
 8017c28:	b29a      	uxth	r2, r3
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	835a      	strh	r2, [r3, #26]
 8017c2e:	e006      	b.n	8017c3e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	8b5b      	ldrh	r3, [r3, #26]
 8017c34:	f023 0303 	bic.w	r3, r3, #3
 8017c38:	b29a      	uxth	r2, r3
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017c42:	4618      	mov	r0, r3
 8017c44:	371c      	adds	r7, #28
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd90      	pop	{r4, r7, pc}
 8017c4a:	bf00      	nop
 8017c4c:	08020d0c 	.word	0x08020d0c
 8017c50:	080214f4 	.word	0x080214f4
 8017c54:	08020d8c 	.word	0x08020d8c

08017c58 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017c58:	b590      	push	{r4, r7, lr}
 8017c5a:	b087      	sub	sp, #28
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017c60:	2300      	movs	r3, #0
 8017c62:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d106      	bne.n	8017c78 <tcp_keepalive+0x20>
 8017c6a:	4b18      	ldr	r3, [pc, #96]	; (8017ccc <tcp_keepalive+0x74>)
 8017c6c:	f640 0224 	movw	r2, #2084	; 0x824
 8017c70:	4917      	ldr	r1, [pc, #92]	; (8017cd0 <tcp_keepalive+0x78>)
 8017c72:	4818      	ldr	r0, [pc, #96]	; (8017cd4 <tcp_keepalive+0x7c>)
 8017c74:	f003 fa46 	bl	801b104 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017c78:	7dfb      	ldrb	r3, [r7, #23]
 8017c7a:	b29c      	uxth	r4, r3
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c80:	3b01      	subs	r3, #1
 8017c82:	4618      	mov	r0, r3
 8017c84:	f7f6 fe8f 	bl	800e9a6 <lwip_htonl>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	4621      	mov	r1, r4
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f7ff fe66 	bl	8017960 <tcp_output_alloc_header>
 8017c94:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017c96:	693b      	ldr	r3, [r7, #16]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d102      	bne.n	8017ca2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ca0:	e010      	b.n	8017cc4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017ca2:	7dfb      	ldrb	r3, [r7, #23]
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	6939      	ldr	r1, [r7, #16]
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f7ff fe97 	bl	80179dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017cae:	687a      	ldr	r2, [r7, #4]
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	3304      	adds	r3, #4
 8017cb4:	6939      	ldr	r1, [r7, #16]
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f7ff fed0 	bl	8017a5c <tcp_output_control_segment>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	371c      	adds	r7, #28
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd90      	pop	{r4, r7, pc}
 8017ccc:	08020d0c 	.word	0x08020d0c
 8017cd0:	08021514 	.word	0x08021514
 8017cd4:	08020d8c 	.word	0x08020d8c

08017cd8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017cd8:	b590      	push	{r4, r7, lr}
 8017cda:	b08b      	sub	sp, #44	; 0x2c
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d106      	bne.n	8017cfa <tcp_zero_window_probe+0x22>
 8017cec:	4b4c      	ldr	r3, [pc, #304]	; (8017e20 <tcp_zero_window_probe+0x148>)
 8017cee:	f640 024f 	movw	r2, #2127	; 0x84f
 8017cf2:	494c      	ldr	r1, [pc, #304]	; (8017e24 <tcp_zero_window_probe+0x14c>)
 8017cf4:	484c      	ldr	r0, [pc, #304]	; (8017e28 <tcp_zero_window_probe+0x150>)
 8017cf6:	f003 fa05 	bl	801b104 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cfe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017d00:	6a3b      	ldr	r3, [r7, #32]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d101      	bne.n	8017d0a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017d06:	2300      	movs	r3, #0
 8017d08:	e086      	b.n	8017e18 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017d10:	2bff      	cmp	r3, #255	; 0xff
 8017d12:	d007      	beq.n	8017d24 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017d1a:	3301      	adds	r3, #1
 8017d1c:	b2da      	uxtb	r2, r3
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017d24:	6a3b      	ldr	r3, [r7, #32]
 8017d26:	68db      	ldr	r3, [r3, #12]
 8017d28:	899b      	ldrh	r3, [r3, #12]
 8017d2a:	b29b      	uxth	r3, r3
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f7f6 fe25 	bl	800e97c <lwip_htons>
 8017d32:	4603      	mov	r3, r0
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	f003 0301 	and.w	r3, r3, #1
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d005      	beq.n	8017d4a <tcp_zero_window_probe+0x72>
 8017d3e:	6a3b      	ldr	r3, [r7, #32]
 8017d40:	891b      	ldrh	r3, [r3, #8]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d101      	bne.n	8017d4a <tcp_zero_window_probe+0x72>
 8017d46:	2301      	movs	r3, #1
 8017d48:	e000      	b.n	8017d4c <tcp_zero_window_probe+0x74>
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017d4e:	7ffb      	ldrb	r3, [r7, #31]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	bf0c      	ite	eq
 8017d54:	2301      	moveq	r3, #1
 8017d56:	2300      	movne	r3, #0
 8017d58:	b2db      	uxtb	r3, r3
 8017d5a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d60:	b299      	uxth	r1, r3
 8017d62:	6a3b      	ldr	r3, [r7, #32]
 8017d64:	68db      	ldr	r3, [r3, #12]
 8017d66:	685b      	ldr	r3, [r3, #4]
 8017d68:	8bba      	ldrh	r2, [r7, #28]
 8017d6a:	6878      	ldr	r0, [r7, #4]
 8017d6c:	f7ff fdf8 	bl	8017960 <tcp_output_alloc_header>
 8017d70:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017d72:	69bb      	ldr	r3, [r7, #24]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d102      	bne.n	8017d7e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d7c:	e04c      	b.n	8017e18 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017d7e:	69bb      	ldr	r3, [r7, #24]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017d84:	7ffb      	ldrb	r3, [r7, #31]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d011      	beq.n	8017dae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017d8a:	697b      	ldr	r3, [r7, #20]
 8017d8c:	899b      	ldrh	r3, [r3, #12]
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	b21b      	sxth	r3, r3
 8017d92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017d96:	b21c      	sxth	r4, r3
 8017d98:	2011      	movs	r0, #17
 8017d9a:	f7f6 fdef 	bl	800e97c <lwip_htons>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	b21b      	sxth	r3, r3
 8017da2:	4323      	orrs	r3, r4
 8017da4:	b21b      	sxth	r3, r3
 8017da6:	b29a      	uxth	r2, r3
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	819a      	strh	r2, [r3, #12]
 8017dac:	e010      	b.n	8017dd0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017dae:	69bb      	ldr	r3, [r7, #24]
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	3314      	adds	r3, #20
 8017db4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017db6:	6a3b      	ldr	r3, [r7, #32]
 8017db8:	6858      	ldr	r0, [r3, #4]
 8017dba:	6a3b      	ldr	r3, [r7, #32]
 8017dbc:	685b      	ldr	r3, [r3, #4]
 8017dbe:	891a      	ldrh	r2, [r3, #8]
 8017dc0:	6a3b      	ldr	r3, [r7, #32]
 8017dc2:	891b      	ldrh	r3, [r3, #8]
 8017dc4:	1ad3      	subs	r3, r2, r3
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	2201      	movs	r2, #1
 8017dca:	6939      	ldr	r1, [r7, #16]
 8017dcc:	f7fa fe56 	bl	8012a7c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017dd0:	6a3b      	ldr	r3, [r7, #32]
 8017dd2:	68db      	ldr	r3, [r3, #12]
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7f6 fde5 	bl	800e9a6 <lwip_htonl>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	3301      	adds	r3, #1
 8017de0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	1ad3      	subs	r3, r2, r3
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	da02      	bge.n	8017df4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	68fa      	ldr	r2, [r7, #12]
 8017df2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017df8:	2200      	movs	r2, #0
 8017dfa:	69b9      	ldr	r1, [r7, #24]
 8017dfc:	6878      	ldr	r0, [r7, #4]
 8017dfe:	f7ff fded 	bl	80179dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017e02:	687a      	ldr	r2, [r7, #4]
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	3304      	adds	r3, #4
 8017e08:	69b9      	ldr	r1, [r7, #24]
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f7ff fe26 	bl	8017a5c <tcp_output_control_segment>
 8017e10:	4603      	mov	r3, r0
 8017e12:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017e14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	372c      	adds	r7, #44	; 0x2c
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd90      	pop	{r4, r7, pc}
 8017e20:	08020d0c 	.word	0x08020d0c
 8017e24:	08021530 	.word	0x08021530
 8017e28:	08020d8c 	.word	0x08020d8c

08017e2c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017e34:	f7fa ff10 	bl	8012c58 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017e38:	4b0a      	ldr	r3, [pc, #40]	; (8017e64 <tcpip_tcp_timer+0x38>)
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d103      	bne.n	8017e48 <tcpip_tcp_timer+0x1c>
 8017e40:	4b09      	ldr	r3, [pc, #36]	; (8017e68 <tcpip_tcp_timer+0x3c>)
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d005      	beq.n	8017e54 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017e48:	2200      	movs	r2, #0
 8017e4a:	4908      	ldr	r1, [pc, #32]	; (8017e6c <tcpip_tcp_timer+0x40>)
 8017e4c:	20fa      	movs	r0, #250	; 0xfa
 8017e4e:	f000 f8f3 	bl	8018038 <sys_timeout>
 8017e52:	e003      	b.n	8017e5c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017e54:	4b06      	ldr	r3, [pc, #24]	; (8017e70 <tcpip_tcp_timer+0x44>)
 8017e56:	2200      	movs	r2, #0
 8017e58:	601a      	str	r2, [r3, #0]
  }
}
 8017e5a:	bf00      	nop
 8017e5c:	bf00      	nop
 8017e5e:	3708      	adds	r7, #8
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bd80      	pop	{r7, pc}
 8017e64:	24003df0 	.word	0x24003df0
 8017e68:	24003e00 	.word	0x24003e00
 8017e6c:	08017e2d 	.word	0x08017e2d
 8017e70:	240007a4 	.word	0x240007a4

08017e74 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017e78:	4b0a      	ldr	r3, [pc, #40]	; (8017ea4 <tcp_timer_needed+0x30>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d10f      	bne.n	8017ea0 <tcp_timer_needed+0x2c>
 8017e80:	4b09      	ldr	r3, [pc, #36]	; (8017ea8 <tcp_timer_needed+0x34>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d103      	bne.n	8017e90 <tcp_timer_needed+0x1c>
 8017e88:	4b08      	ldr	r3, [pc, #32]	; (8017eac <tcp_timer_needed+0x38>)
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d007      	beq.n	8017ea0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017e90:	4b04      	ldr	r3, [pc, #16]	; (8017ea4 <tcp_timer_needed+0x30>)
 8017e92:	2201      	movs	r2, #1
 8017e94:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017e96:	2200      	movs	r2, #0
 8017e98:	4905      	ldr	r1, [pc, #20]	; (8017eb0 <tcp_timer_needed+0x3c>)
 8017e9a:	20fa      	movs	r0, #250	; 0xfa
 8017e9c:	f000 f8cc 	bl	8018038 <sys_timeout>
  }
}
 8017ea0:	bf00      	nop
 8017ea2:	bd80      	pop	{r7, pc}
 8017ea4:	240007a4 	.word	0x240007a4
 8017ea8:	24003df0 	.word	0x24003df0
 8017eac:	24003e00 	.word	0x24003e00
 8017eb0:	08017e2d 	.word	0x08017e2d

08017eb4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b086      	sub	sp, #24
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	60f8      	str	r0, [r7, #12]
 8017ebc:	60b9      	str	r1, [r7, #8]
 8017ebe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017ec0:	2006      	movs	r0, #6
 8017ec2:	f7f9 fd4f 	bl	8011964 <memp_malloc>
 8017ec6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d109      	bne.n	8017ee2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017ece:	693b      	ldr	r3, [r7, #16]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d151      	bne.n	8017f78 <sys_timeout_abs+0xc4>
 8017ed4:	4b2a      	ldr	r3, [pc, #168]	; (8017f80 <sys_timeout_abs+0xcc>)
 8017ed6:	22be      	movs	r2, #190	; 0xbe
 8017ed8:	492a      	ldr	r1, [pc, #168]	; (8017f84 <sys_timeout_abs+0xd0>)
 8017eda:	482b      	ldr	r0, [pc, #172]	; (8017f88 <sys_timeout_abs+0xd4>)
 8017edc:	f003 f912 	bl	801b104 <iprintf>
    return;
 8017ee0:	e04a      	b.n	8017f78 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017ee2:	693b      	ldr	r3, [r7, #16]
 8017ee4:	2200      	movs	r2, #0
 8017ee6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017ee8:	693b      	ldr	r3, [r7, #16]
 8017eea:	68ba      	ldr	r2, [r7, #8]
 8017eec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017eee:	693b      	ldr	r3, [r7, #16]
 8017ef0:	687a      	ldr	r2, [r7, #4]
 8017ef2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017ef4:	693b      	ldr	r3, [r7, #16]
 8017ef6:	68fa      	ldr	r2, [r7, #12]
 8017ef8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017efa:	4b24      	ldr	r3, [pc, #144]	; (8017f8c <sys_timeout_abs+0xd8>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d103      	bne.n	8017f0a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017f02:	4a22      	ldr	r2, [pc, #136]	; (8017f8c <sys_timeout_abs+0xd8>)
 8017f04:	693b      	ldr	r3, [r7, #16]
 8017f06:	6013      	str	r3, [r2, #0]
    return;
 8017f08:	e037      	b.n	8017f7a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	685a      	ldr	r2, [r3, #4]
 8017f0e:	4b1f      	ldr	r3, [pc, #124]	; (8017f8c <sys_timeout_abs+0xd8>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	685b      	ldr	r3, [r3, #4]
 8017f14:	1ad3      	subs	r3, r2, r3
 8017f16:	0fdb      	lsrs	r3, r3, #31
 8017f18:	f003 0301 	and.w	r3, r3, #1
 8017f1c:	b2db      	uxtb	r3, r3
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d007      	beq.n	8017f32 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017f22:	4b1a      	ldr	r3, [pc, #104]	; (8017f8c <sys_timeout_abs+0xd8>)
 8017f24:	681a      	ldr	r2, [r3, #0]
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017f2a:	4a18      	ldr	r2, [pc, #96]	; (8017f8c <sys_timeout_abs+0xd8>)
 8017f2c:	693b      	ldr	r3, [r7, #16]
 8017f2e:	6013      	str	r3, [r2, #0]
 8017f30:	e023      	b.n	8017f7a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017f32:	4b16      	ldr	r3, [pc, #88]	; (8017f8c <sys_timeout_abs+0xd8>)
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	617b      	str	r3, [r7, #20]
 8017f38:	e01a      	b.n	8017f70 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017f3a:	697b      	ldr	r3, [r7, #20]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d00b      	beq.n	8017f5a <sys_timeout_abs+0xa6>
 8017f42:	693b      	ldr	r3, [r7, #16]
 8017f44:	685a      	ldr	r2, [r3, #4]
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	685b      	ldr	r3, [r3, #4]
 8017f4c:	1ad3      	subs	r3, r2, r3
 8017f4e:	0fdb      	lsrs	r3, r3, #31
 8017f50:	f003 0301 	and.w	r3, r3, #1
 8017f54:	b2db      	uxtb	r3, r3
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d007      	beq.n	8017f6a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017f5a:	697b      	ldr	r3, [r7, #20]
 8017f5c:	681a      	ldr	r2, [r3, #0]
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	693a      	ldr	r2, [r7, #16]
 8017f66:	601a      	str	r2, [r3, #0]
        break;
 8017f68:	e007      	b.n	8017f7a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017f6a:	697b      	ldr	r3, [r7, #20]
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	617b      	str	r3, [r7, #20]
 8017f70:	697b      	ldr	r3, [r7, #20]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d1e1      	bne.n	8017f3a <sys_timeout_abs+0x86>
 8017f76:	e000      	b.n	8017f7a <sys_timeout_abs+0xc6>
    return;
 8017f78:	bf00      	nop
      }
    }
  }
}
 8017f7a:	3718      	adds	r7, #24
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	bd80      	pop	{r7, pc}
 8017f80:	08021554 	.word	0x08021554
 8017f84:	080215b4 	.word	0x080215b4
 8017f88:	080215f4 	.word	0x080215f4
 8017f8c:	2400079c 	.word	0x2400079c

08017f90 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b086      	sub	sp, #24
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017f9c:	697b      	ldr	r3, [r7, #20]
 8017f9e:	685b      	ldr	r3, [r3, #4]
 8017fa0:	4798      	blx	r3

  now = sys_now();
 8017fa2:	f7f6 fc11 	bl	800e7c8 <sys_now>
 8017fa6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017fa8:	697b      	ldr	r3, [r7, #20]
 8017faa:	681a      	ldr	r2, [r3, #0]
 8017fac:	4b0f      	ldr	r3, [pc, #60]	; (8017fec <lwip_cyclic_timer+0x5c>)
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4413      	add	r3, r2
 8017fb2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017fb4:	68fa      	ldr	r2, [r7, #12]
 8017fb6:	693b      	ldr	r3, [r7, #16]
 8017fb8:	1ad3      	subs	r3, r2, r3
 8017fba:	0fdb      	lsrs	r3, r3, #31
 8017fbc:	f003 0301 	and.w	r3, r3, #1
 8017fc0:	b2db      	uxtb	r3, r3
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d009      	beq.n	8017fda <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017fc6:	697b      	ldr	r3, [r7, #20]
 8017fc8:	681a      	ldr	r2, [r3, #0]
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	4413      	add	r3, r2
 8017fce:	687a      	ldr	r2, [r7, #4]
 8017fd0:	4907      	ldr	r1, [pc, #28]	; (8017ff0 <lwip_cyclic_timer+0x60>)
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7ff ff6e 	bl	8017eb4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017fd8:	e004      	b.n	8017fe4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017fda:	687a      	ldr	r2, [r7, #4]
 8017fdc:	4904      	ldr	r1, [pc, #16]	; (8017ff0 <lwip_cyclic_timer+0x60>)
 8017fde:	68f8      	ldr	r0, [r7, #12]
 8017fe0:	f7ff ff68 	bl	8017eb4 <sys_timeout_abs>
}
 8017fe4:	bf00      	nop
 8017fe6:	3718      	adds	r7, #24
 8017fe8:	46bd      	mov	sp, r7
 8017fea:	bd80      	pop	{r7, pc}
 8017fec:	240007a0 	.word	0x240007a0
 8017ff0:	08017f91 	.word	0x08017f91

08017ff4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b082      	sub	sp, #8
 8017ff8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017ffa:	2301      	movs	r3, #1
 8017ffc:	607b      	str	r3, [r7, #4]
 8017ffe:	e00e      	b.n	801801e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018000:	4a0b      	ldr	r2, [pc, #44]	; (8018030 <sys_timeouts_init+0x3c>)
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	00db      	lsls	r3, r3, #3
 801800c:	4a08      	ldr	r2, [pc, #32]	; (8018030 <sys_timeouts_init+0x3c>)
 801800e:	4413      	add	r3, r2
 8018010:	461a      	mov	r2, r3
 8018012:	4908      	ldr	r1, [pc, #32]	; (8018034 <sys_timeouts_init+0x40>)
 8018014:	f000 f810 	bl	8018038 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	3301      	adds	r3, #1
 801801c:	607b      	str	r3, [r7, #4]
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	2b02      	cmp	r3, #2
 8018022:	d9ed      	bls.n	8018000 <sys_timeouts_init+0xc>
  }
}
 8018024:	bf00      	nop
 8018026:	bf00      	nop
 8018028:	3708      	adds	r7, #8
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}
 801802e:	bf00      	nop
 8018030:	08021b48 	.word	0x08021b48
 8018034:	08017f91 	.word	0x08017f91

08018038 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b086      	sub	sp, #24
 801803c:	af00      	add	r7, sp, #0
 801803e:	60f8      	str	r0, [r7, #12]
 8018040:	60b9      	str	r1, [r7, #8]
 8018042:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801804a:	d306      	bcc.n	801805a <sys_timeout+0x22>
 801804c:	4b0a      	ldr	r3, [pc, #40]	; (8018078 <sys_timeout+0x40>)
 801804e:	f240 1229 	movw	r2, #297	; 0x129
 8018052:	490a      	ldr	r1, [pc, #40]	; (801807c <sys_timeout+0x44>)
 8018054:	480a      	ldr	r0, [pc, #40]	; (8018080 <sys_timeout+0x48>)
 8018056:	f003 f855 	bl	801b104 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801805a:	f7f6 fbb5 	bl	800e7c8 <sys_now>
 801805e:	4602      	mov	r2, r0
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	4413      	add	r3, r2
 8018064:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018066:	687a      	ldr	r2, [r7, #4]
 8018068:	68b9      	ldr	r1, [r7, #8]
 801806a:	6978      	ldr	r0, [r7, #20]
 801806c:	f7ff ff22 	bl	8017eb4 <sys_timeout_abs>
#endif
}
 8018070:	bf00      	nop
 8018072:	3718      	adds	r7, #24
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}
 8018078:	08021554 	.word	0x08021554
 801807c:	0802161c 	.word	0x0802161c
 8018080:	080215f4 	.word	0x080215f4

08018084 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018084:	b580      	push	{r7, lr}
 8018086:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018088:	f003 f854 	bl	801b134 <rand>
 801808c:	4603      	mov	r3, r0
 801808e:	b29b      	uxth	r3, r3
 8018090:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018094:	b29b      	uxth	r3, r3
 8018096:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801809a:	b29a      	uxth	r2, r3
 801809c:	4b01      	ldr	r3, [pc, #4]	; (80180a4 <udp_init+0x20>)
 801809e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80180a0:	bf00      	nop
 80180a2:	bd80      	pop	{r7, pc}
 80180a4:	2400042c 	.word	0x2400042c

080180a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b084      	sub	sp, #16
 80180ac:	af00      	add	r7, sp, #0
 80180ae:	60f8      	str	r0, [r7, #12]
 80180b0:	60b9      	str	r1, [r7, #8]
 80180b2:	4613      	mov	r3, r2
 80180b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d105      	bne.n	80180c8 <udp_input_local_match+0x20>
 80180bc:	4b27      	ldr	r3, [pc, #156]	; (801815c <udp_input_local_match+0xb4>)
 80180be:	2287      	movs	r2, #135	; 0x87
 80180c0:	4927      	ldr	r1, [pc, #156]	; (8018160 <udp_input_local_match+0xb8>)
 80180c2:	4828      	ldr	r0, [pc, #160]	; (8018164 <udp_input_local_match+0xbc>)
 80180c4:	f003 f81e 	bl	801b104 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80180c8:	68bb      	ldr	r3, [r7, #8]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d105      	bne.n	80180da <udp_input_local_match+0x32>
 80180ce:	4b23      	ldr	r3, [pc, #140]	; (801815c <udp_input_local_match+0xb4>)
 80180d0:	2288      	movs	r2, #136	; 0x88
 80180d2:	4925      	ldr	r1, [pc, #148]	; (8018168 <udp_input_local_match+0xc0>)
 80180d4:	4823      	ldr	r0, [pc, #140]	; (8018164 <udp_input_local_match+0xbc>)
 80180d6:	f003 f815 	bl	801b104 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	7a1b      	ldrb	r3, [r3, #8]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d00b      	beq.n	80180fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	7a1a      	ldrb	r2, [r3, #8]
 80180e6:	4b21      	ldr	r3, [pc, #132]	; (801816c <udp_input_local_match+0xc4>)
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80180ee:	3301      	adds	r3, #1
 80180f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d001      	beq.n	80180fa <udp_input_local_match+0x52>
    return 0;
 80180f6:	2300      	movs	r3, #0
 80180f8:	e02b      	b.n	8018152 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80180fa:	79fb      	ldrb	r3, [r7, #7]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d018      	beq.n	8018132 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d013      	beq.n	801812e <udp_input_local_match+0x86>
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d00f      	beq.n	801812e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801810e:	4b17      	ldr	r3, [pc, #92]	; (801816c <udp_input_local_match+0xc4>)
 8018110:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018116:	d00a      	beq.n	801812e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	681a      	ldr	r2, [r3, #0]
 801811c:	4b13      	ldr	r3, [pc, #76]	; (801816c <udp_input_local_match+0xc4>)
 801811e:	695b      	ldr	r3, [r3, #20]
 8018120:	405a      	eors	r2, r3
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	3308      	adds	r3, #8
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801812a:	2b00      	cmp	r3, #0
 801812c:	d110      	bne.n	8018150 <udp_input_local_match+0xa8>
          return 1;
 801812e:	2301      	movs	r3, #1
 8018130:	e00f      	b.n	8018152 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d009      	beq.n	801814c <udp_input_local_match+0xa4>
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d005      	beq.n	801814c <udp_input_local_match+0xa4>
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	681a      	ldr	r2, [r3, #0]
 8018144:	4b09      	ldr	r3, [pc, #36]	; (801816c <udp_input_local_match+0xc4>)
 8018146:	695b      	ldr	r3, [r3, #20]
 8018148:	429a      	cmp	r2, r3
 801814a:	d101      	bne.n	8018150 <udp_input_local_match+0xa8>
        return 1;
 801814c:	2301      	movs	r3, #1
 801814e:	e000      	b.n	8018152 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018150:	2300      	movs	r3, #0
}
 8018152:	4618      	mov	r0, r3
 8018154:	3710      	adds	r7, #16
 8018156:	46bd      	mov	sp, r7
 8018158:	bd80      	pop	{r7, pc}
 801815a:	bf00      	nop
 801815c:	08021668 	.word	0x08021668
 8018160:	080216c4 	.word	0x080216c4
 8018164:	080216e8 	.word	0x080216e8
 8018168:	08021710 	.word	0x08021710
 801816c:	24000f00 	.word	0x24000f00

08018170 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018170:	b590      	push	{r4, r7, lr}
 8018172:	b08d      	sub	sp, #52	; 0x34
 8018174:	af02      	add	r7, sp, #8
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801817a:	2300      	movs	r3, #0
 801817c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d105      	bne.n	8018190 <udp_input+0x20>
 8018184:	4b7c      	ldr	r3, [pc, #496]	; (8018378 <udp_input+0x208>)
 8018186:	22cf      	movs	r2, #207	; 0xcf
 8018188:	497c      	ldr	r1, [pc, #496]	; (801837c <udp_input+0x20c>)
 801818a:	487d      	ldr	r0, [pc, #500]	; (8018380 <udp_input+0x210>)
 801818c:	f002 ffba 	bl	801b104 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018190:	683b      	ldr	r3, [r7, #0]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d105      	bne.n	80181a2 <udp_input+0x32>
 8018196:	4b78      	ldr	r3, [pc, #480]	; (8018378 <udp_input+0x208>)
 8018198:	22d0      	movs	r2, #208	; 0xd0
 801819a:	497a      	ldr	r1, [pc, #488]	; (8018384 <udp_input+0x214>)
 801819c:	4878      	ldr	r0, [pc, #480]	; (8018380 <udp_input+0x210>)
 801819e:	f002 ffb1 	bl	801b104 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	895b      	ldrh	r3, [r3, #10]
 80181a6:	2b07      	cmp	r3, #7
 80181a8:	d803      	bhi.n	80181b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80181aa:	6878      	ldr	r0, [r7, #4]
 80181ac:	f7fa fa7c 	bl	80126a8 <pbuf_free>
    goto end;
 80181b0:	e0de      	b.n	8018370 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	685b      	ldr	r3, [r3, #4]
 80181b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80181b8:	4b73      	ldr	r3, [pc, #460]	; (8018388 <udp_input+0x218>)
 80181ba:	695b      	ldr	r3, [r3, #20]
 80181bc:	4a72      	ldr	r2, [pc, #456]	; (8018388 <udp_input+0x218>)
 80181be:	6812      	ldr	r2, [r2, #0]
 80181c0:	4611      	mov	r1, r2
 80181c2:	4618      	mov	r0, r3
 80181c4:	f7f8 f946 	bl	8010454 <ip4_addr_isbroadcast_u32>
 80181c8:	4603      	mov	r3, r0
 80181ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	881b      	ldrh	r3, [r3, #0]
 80181d0:	b29b      	uxth	r3, r3
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7f6 fbd2 	bl	800e97c <lwip_htons>
 80181d8:	4603      	mov	r3, r0
 80181da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80181dc:	697b      	ldr	r3, [r7, #20]
 80181de:	885b      	ldrh	r3, [r3, #2]
 80181e0:	b29b      	uxth	r3, r3
 80181e2:	4618      	mov	r0, r3
 80181e4:	f7f6 fbca 	bl	800e97c <lwip_htons>
 80181e8:	4603      	mov	r3, r0
 80181ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80181ec:	2300      	movs	r3, #0
 80181ee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80181f0:	2300      	movs	r3, #0
 80181f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80181f4:	2300      	movs	r3, #0
 80181f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80181f8:	4b64      	ldr	r3, [pc, #400]	; (801838c <udp_input+0x21c>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	627b      	str	r3, [r7, #36]	; 0x24
 80181fe:	e054      	b.n	80182aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018202:	8a5b      	ldrh	r3, [r3, #18]
 8018204:	89fa      	ldrh	r2, [r7, #14]
 8018206:	429a      	cmp	r2, r3
 8018208:	d14a      	bne.n	80182a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801820a:	7cfb      	ldrb	r3, [r7, #19]
 801820c:	461a      	mov	r2, r3
 801820e:	6839      	ldr	r1, [r7, #0]
 8018210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018212:	f7ff ff49 	bl	80180a8 <udp_input_local_match>
 8018216:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018218:	2b00      	cmp	r3, #0
 801821a:	d041      	beq.n	80182a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801821e:	7c1b      	ldrb	r3, [r3, #16]
 8018220:	f003 0304 	and.w	r3, r3, #4
 8018224:	2b00      	cmp	r3, #0
 8018226:	d11d      	bne.n	8018264 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018228:	69fb      	ldr	r3, [r7, #28]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d102      	bne.n	8018234 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018230:	61fb      	str	r3, [r7, #28]
 8018232:	e017      	b.n	8018264 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018234:	7cfb      	ldrb	r3, [r7, #19]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d014      	beq.n	8018264 <udp_input+0xf4>
 801823a:	4b53      	ldr	r3, [pc, #332]	; (8018388 <udp_input+0x218>)
 801823c:	695b      	ldr	r3, [r3, #20]
 801823e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018242:	d10f      	bne.n	8018264 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018244:	69fb      	ldr	r3, [r7, #28]
 8018246:	681a      	ldr	r2, [r3, #0]
 8018248:	683b      	ldr	r3, [r7, #0]
 801824a:	3304      	adds	r3, #4
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	429a      	cmp	r2, r3
 8018250:	d008      	beq.n	8018264 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018254:	681a      	ldr	r2, [r3, #0]
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	3304      	adds	r3, #4
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	429a      	cmp	r2, r3
 801825e:	d101      	bne.n	8018264 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018262:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018266:	8a9b      	ldrh	r3, [r3, #20]
 8018268:	8a3a      	ldrh	r2, [r7, #16]
 801826a:	429a      	cmp	r2, r3
 801826c:	d118      	bne.n	80182a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018270:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018272:	2b00      	cmp	r3, #0
 8018274:	d005      	beq.n	8018282 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018278:	685a      	ldr	r2, [r3, #4]
 801827a:	4b43      	ldr	r3, [pc, #268]	; (8018388 <udp_input+0x218>)
 801827c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801827e:	429a      	cmp	r2, r3
 8018280:	d10e      	bne.n	80182a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018282:	6a3b      	ldr	r3, [r7, #32]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d014      	beq.n	80182b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801828a:	68da      	ldr	r2, [r3, #12]
 801828c:	6a3b      	ldr	r3, [r7, #32]
 801828e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018290:	4b3e      	ldr	r3, [pc, #248]	; (801838c <udp_input+0x21c>)
 8018292:	681a      	ldr	r2, [r3, #0]
 8018294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018296:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018298:	4a3c      	ldr	r2, [pc, #240]	; (801838c <udp_input+0x21c>)
 801829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801829c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801829e:	e008      	b.n	80182b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80182a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80182a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182a6:	68db      	ldr	r3, [r3, #12]
 80182a8:	627b      	str	r3, [r7, #36]	; 0x24
 80182aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d1a7      	bne.n	8018200 <udp_input+0x90>
 80182b0:	e000      	b.n	80182b4 <udp_input+0x144>
        break;
 80182b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80182b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d101      	bne.n	80182be <udp_input+0x14e>
    pcb = uncon_pcb;
 80182ba:	69fb      	ldr	r3, [r7, #28]
 80182bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80182be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d002      	beq.n	80182ca <udp_input+0x15a>
    for_us = 1;
 80182c4:	2301      	movs	r3, #1
 80182c6:	76fb      	strb	r3, [r7, #27]
 80182c8:	e00a      	b.n	80182e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	3304      	adds	r3, #4
 80182ce:	681a      	ldr	r2, [r3, #0]
 80182d0:	4b2d      	ldr	r3, [pc, #180]	; (8018388 <udp_input+0x218>)
 80182d2:	695b      	ldr	r3, [r3, #20]
 80182d4:	429a      	cmp	r2, r3
 80182d6:	bf0c      	ite	eq
 80182d8:	2301      	moveq	r3, #1
 80182da:	2300      	movne	r3, #0
 80182dc:	b2db      	uxtb	r3, r3
 80182de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80182e0:	7efb      	ldrb	r3, [r7, #27]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d041      	beq.n	801836a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80182e6:	2108      	movs	r1, #8
 80182e8:	6878      	ldr	r0, [r7, #4]
 80182ea:	f7fa f957 	bl	801259c <pbuf_remove_header>
 80182ee:	4603      	mov	r3, r0
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d00a      	beq.n	801830a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80182f4:	4b20      	ldr	r3, [pc, #128]	; (8018378 <udp_input+0x208>)
 80182f6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80182fa:	4925      	ldr	r1, [pc, #148]	; (8018390 <udp_input+0x220>)
 80182fc:	4820      	ldr	r0, [pc, #128]	; (8018380 <udp_input+0x210>)
 80182fe:	f002 ff01 	bl	801b104 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018302:	6878      	ldr	r0, [r7, #4]
 8018304:	f7fa f9d0 	bl	80126a8 <pbuf_free>
      goto end;
 8018308:	e032      	b.n	8018370 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801830c:	2b00      	cmp	r3, #0
 801830e:	d012      	beq.n	8018336 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018312:	699b      	ldr	r3, [r3, #24]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d00a      	beq.n	801832e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801831a:	699c      	ldr	r4, [r3, #24]
 801831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801831e:	69d8      	ldr	r0, [r3, #28]
 8018320:	8a3b      	ldrh	r3, [r7, #16]
 8018322:	9300      	str	r3, [sp, #0]
 8018324:	4b1b      	ldr	r3, [pc, #108]	; (8018394 <udp_input+0x224>)
 8018326:	687a      	ldr	r2, [r7, #4]
 8018328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801832a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801832c:	e021      	b.n	8018372 <udp_input+0x202>
        pbuf_free(p);
 801832e:	6878      	ldr	r0, [r7, #4]
 8018330:	f7fa f9ba 	bl	80126a8 <pbuf_free>
        goto end;
 8018334:	e01c      	b.n	8018370 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018336:	7cfb      	ldrb	r3, [r7, #19]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d112      	bne.n	8018362 <udp_input+0x1f2>
 801833c:	4b12      	ldr	r3, [pc, #72]	; (8018388 <udp_input+0x218>)
 801833e:	695b      	ldr	r3, [r3, #20]
 8018340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018344:	2be0      	cmp	r3, #224	; 0xe0
 8018346:	d00c      	beq.n	8018362 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018348:	4b0f      	ldr	r3, [pc, #60]	; (8018388 <udp_input+0x218>)
 801834a:	899b      	ldrh	r3, [r3, #12]
 801834c:	3308      	adds	r3, #8
 801834e:	b29b      	uxth	r3, r3
 8018350:	b21b      	sxth	r3, r3
 8018352:	4619      	mov	r1, r3
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	f7fa f994 	bl	8012682 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801835a:	2103      	movs	r1, #3
 801835c:	6878      	ldr	r0, [r7, #4]
 801835e:	f7f7 fc7d 	bl	800fc5c <icmp_dest_unreach>
      pbuf_free(p);
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f7fa f9a0 	bl	80126a8 <pbuf_free>
  return;
 8018368:	e003      	b.n	8018372 <udp_input+0x202>
    pbuf_free(p);
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f7fa f99c 	bl	80126a8 <pbuf_free>
  return;
 8018370:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018372:	372c      	adds	r7, #44	; 0x2c
 8018374:	46bd      	mov	sp, r7
 8018376:	bd90      	pop	{r4, r7, pc}
 8018378:	08021668 	.word	0x08021668
 801837c:	08021738 	.word	0x08021738
 8018380:	080216e8 	.word	0x080216e8
 8018384:	08021750 	.word	0x08021750
 8018388:	24000f00 	.word	0x24000f00
 801838c:	24003e08 	.word	0x24003e08
 8018390:	0802176c 	.word	0x0802176c
 8018394:	24000f10 	.word	0x24000f10

08018398 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018398:	b480      	push	{r7}
 801839a:	b085      	sub	sp, #20
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
 80183a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d01e      	beq.n	80183e6 <udp_netif_ip_addr_changed+0x4e>
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d01a      	beq.n	80183e6 <udp_netif_ip_addr_changed+0x4e>
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d017      	beq.n	80183e6 <udp_netif_ip_addr_changed+0x4e>
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d013      	beq.n	80183e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80183be:	4b0d      	ldr	r3, [pc, #52]	; (80183f4 <udp_netif_ip_addr_changed+0x5c>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	60fb      	str	r3, [r7, #12]
 80183c4:	e00c      	b.n	80183e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	681a      	ldr	r2, [r3, #0]
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	429a      	cmp	r2, r3
 80183d0:	d103      	bne.n	80183da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	681a      	ldr	r2, [r3, #0]
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	68db      	ldr	r3, [r3, #12]
 80183de:	60fb      	str	r3, [r7, #12]
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d1ef      	bne.n	80183c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80183e6:	bf00      	nop
 80183e8:	3714      	adds	r7, #20
 80183ea:	46bd      	mov	sp, r7
 80183ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f0:	4770      	bx	lr
 80183f2:	bf00      	nop
 80183f4:	24003e08 	.word	0x24003e08

080183f8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80183fc:	4b10      	ldr	r3, [pc, #64]	; (8018440 <MX_PDM2PCM_Init+0x48>)
 80183fe:	2200      	movs	r2, #0
 8018400:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8018402:	4b0f      	ldr	r3, [pc, #60]	; (8018440 <MX_PDM2PCM_Init+0x48>)
 8018404:	2201      	movs	r2, #1
 8018406:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8018408:	4b0d      	ldr	r3, [pc, #52]	; (8018440 <MX_PDM2PCM_Init+0x48>)
 801840a:	4a0e      	ldr	r2, [pc, #56]	; (8018444 <MX_PDM2PCM_Init+0x4c>)
 801840c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 801840e:	4b0c      	ldr	r3, [pc, #48]	; (8018440 <MX_PDM2PCM_Init+0x48>)
 8018410:	2202      	movs	r2, #2
 8018412:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8018414:	4b0a      	ldr	r3, [pc, #40]	; (8018440 <MX_PDM2PCM_Init+0x48>)
 8018416:	2202      	movs	r2, #2
 8018418:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 801841a:	4809      	ldr	r0, [pc, #36]	; (8018440 <MX_PDM2PCM_Init+0x48>)
 801841c:	f001 fd4c 	bl	8019eb8 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8018420:	4b09      	ldr	r3, [pc, #36]	; (8018448 <MX_PDM2PCM_Init+0x50>)
 8018422:	2202      	movs	r2, #2
 8018424:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8018426:	4b08      	ldr	r3, [pc, #32]	; (8018448 <MX_PDM2PCM_Init+0x50>)
 8018428:	2210      	movs	r2, #16
 801842a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 801842c:	4b06      	ldr	r3, [pc, #24]	; (8018448 <MX_PDM2PCM_Init+0x50>)
 801842e:	2200      	movs	r2, #0
 8018430:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8018432:	4905      	ldr	r1, [pc, #20]	; (8018448 <MX_PDM2PCM_Init+0x50>)
 8018434:	4802      	ldr	r0, [pc, #8]	; (8018440 <MX_PDM2PCM_Init+0x48>)
 8018436:	f001 fe0f 	bl	801a058 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 801843a:	bf00      	nop
 801843c:	bd80      	pop	{r7, pc}
 801843e:	bf00      	nop
 8018440:	24003e14 	.word	0x24003e14
 8018444:	7d70a3d6 	.word	0x7d70a3d6
 8018448:	24003e0c 	.word	0x24003e0c

0801844c <pcm5102_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/

void pcm5102_Init(void)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, GPIO_PIN_RESET); //Filterselect: Normallatency(Low) / Lowlatency(High)
 8018450:	2200      	movs	r2, #0
 8018452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8018456:	480a      	ldr	r0, [pc, #40]	; (8018480 <pcm5102_Init+0x34>)
 8018458:	f7ef fe5e 	bl	8008118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, GPIO_PIN_RESET); //De-emphasiscontrol for 44.1kHz sampling rate: Off(Low) / On(High)
 801845c:	2200      	movs	r2, #0
 801845e:	2108      	movs	r1, #8
 8018460:	4808      	ldr	r0, [pc, #32]	; (8018484 <pcm5102_Init+0x38>)
 8018462:	f7ef fe59 	bl	8008118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, GPIO_PIN_SET); //Soft mute control: Softmute(Low) / soft un-mute(High)
 8018466:	2201      	movs	r2, #1
 8018468:	2104      	movs	r1, #4
 801846a:	4805      	ldr	r0, [pc, #20]	; (8018480 <pcm5102_Init+0x34>)
 801846c:	f7ef fe54 	bl	8008118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET); //Audio format selection: I2S(Low)/ Left justified(High)
 8018470:	2200      	movs	r2, #0
 8018472:	2140      	movs	r1, #64	; 0x40
 8018474:	4804      	ldr	r0, [pc, #16]	; (8018488 <pcm5102_Init+0x3c>)
 8018476:	f7ef fe4f 	bl	8008118 <HAL_GPIO_WritePin>
}
 801847a:	bf00      	nop
 801847c:	bd80      	pop	{r7, pc}
 801847e:	bf00      	nop
 8018480:	58020800 	.word	0x58020800
 8018484:	58021c00 	.word	0x58021c00
 8018488:	58021400 	.word	0x58021400

0801848c <Audio_Player_Play>:

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b082      	sub	sp, #8
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 8018496:	683b      	ldr	r3, [r7, #0]
 8018498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801849c:	d306      	bcc.n	80184ac <Audio_Player_Play+0x20>
		Size = 0xFFFF;
 801849e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80184a2:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80184a4:	2140      	movs	r1, #64	; 0x40
 80184a6:	4807      	ldr	r0, [pc, #28]	; (80184c4 <Audio_Player_Play+0x38>)
 80184a8:	f7ef fe4f 	bl	800814a <HAL_GPIO_TogglePin>
	}
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, Size);
 80184ac:	683b      	ldr	r3, [r7, #0]
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	461a      	mov	r2, r3
 80184b2:	6879      	ldr	r1, [r7, #4]
 80184b4:	4804      	ldr	r0, [pc, #16]	; (80184c8 <Audio_Player_Play+0x3c>)
 80184b6:	f7f3 fb89 	bl	800bbcc <HAL_SAI_Transmit_DMA>
//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 80184ba:	bf00      	nop
 80184bc:	3708      	adds	r7, #8
 80184be:	46bd      	mov	sp, r7
 80184c0:	bd80      	pop	{r7, pc}
 80184c2:	bf00      	nop
 80184c4:	58021c00 	.word	0x58021c00
 80184c8:	240009d8 	.word	0x240009d8

080184cc <HAL_SAI_TxHalfCpltCallback>:
//void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
//{
//	HalfTransfer_CallBack_FS();
//}
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 80184cc:	b480      	push	{r7}
 80184ce:	b083      	sub	sp, #12
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
	{

	}
}
 80184d4:	bf00      	nop
 80184d6:	370c      	adds	r7, #12
 80184d8:	46bd      	mov	sp, r7
 80184da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184de:	4770      	bx	lr

080184e0 <HAL_SAI_TxCpltCallback>:
//{
//	TransferComplete_CallBack_FS();
//}

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 80184e0:	b480      	push	{r7}
 80184e2:	b083      	sub	sp, #12
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
	{

	}
}
 80184e8:	bf00      	nop
 80184ea:	370c      	adds	r7, #12
 80184ec:	46bd      	mov	sp, r7
 80184ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f2:	4770      	bx	lr

080184f4 <D16_GENERIC>:
 80184f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184f8:	b089      	sub	sp, #36	; 0x24
 80184fa:	6993      	ldr	r3, [r2, #24]
 80184fc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80184fe:	9103      	str	r1, [sp, #12]
 8018500:	9307      	str	r3, [sp, #28]
 8018502:	69d3      	ldr	r3, [r2, #28]
 8018504:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8018508:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 801850c:	9106      	str	r1, [sp, #24]
 801850e:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8018512:	2d00      	cmp	r5, #0
 8018514:	d063      	beq.n	80185de <D16_GENERIC+0xea>
 8018516:	f001 0520 	and.w	r5, r1, #32
 801851a:	f001 0110 	and.w	r1, r1, #16
 801851e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8018600 <D16_GENERIC+0x10c>
 8018522:	46c1      	mov	r9, r8
 8018524:	9104      	str	r1, [sp, #16]
 8018526:	2100      	movs	r1, #0
 8018528:	9505      	str	r5, [sp, #20]
 801852a:	e04d      	b.n	80185c8 <D16_GENERIC+0xd4>
 801852c:	5d87      	ldrb	r7, [r0, r6]
 801852e:	7805      	ldrb	r5, [r0, #0]
 8018530:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8018534:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8018538:	b2fe      	uxtb	r6, r7
 801853a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801853e:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8018542:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8018546:	441d      	add	r5, r3
 8018548:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 801854c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8018550:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8018554:	0a9b      	lsrs	r3, r3, #10
 8018556:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 801855a:	4d27      	ldr	r5, [pc, #156]	; (80185f8 <D16_GENERIC+0x104>)
 801855c:	fb26 c505 	smlad	r5, r6, r5, ip
 8018560:	4f26      	ldr	r7, [pc, #152]	; (80185fc <D16_GENERIC+0x108>)
 8018562:	fb26 fc07 	smuad	ip, r6, r7
 8018566:	9e04      	ldr	r6, [sp, #16]
 8018568:	f101 0801 	add.w	r8, r1, #1
 801856c:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8018570:	b1ae      	cbz	r6, 801859e <D16_GENERIC+0xaa>
 8018572:	442c      	add	r4, r5
 8018574:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8018578:	eba4 040a 	sub.w	r4, r4, sl
 801857c:	46aa      	mov	sl, r5
 801857e:	17e7      	asrs	r7, r4, #31
 8018580:	fba4 450b 	umull	r4, r5, r4, fp
 8018584:	e9cd 4500 	strd	r4, r5, [sp]
 8018588:	fb0b 5407 	mla	r4, fp, r7, r5
 801858c:	9401      	str	r4, [sp, #4]
 801858e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018592:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8018596:	f145 0500 	adc.w	r5, r5, #0
 801859a:	006c      	lsls	r4, r5, #1
 801859c:	4625      	mov	r5, r4
 801859e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80185a2:	042d      	lsls	r5, r5, #16
 80185a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80185a8:	2700      	movs	r7, #0
 80185aa:	fb01 fb0b 	mul.w	fp, r1, fp
 80185ae:	fa1f f188 	uxth.w	r1, r8
 80185b2:	fbc9 6705 	smlal	r6, r7, r9, r5
 80185b6:	9e03      	ldr	r6, [sp, #12]
 80185b8:	10bd      	asrs	r5, r7, #2
 80185ba:	f305 050f 	ssat	r5, #16, r5
 80185be:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80185c2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80185c4:	428d      	cmp	r5, r1
 80185c6:	d90a      	bls.n	80185de <D16_GENERIC+0xea>
 80185c8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80185ca:	2d01      	cmp	r5, #1
 80185cc:	b2ee      	uxtb	r6, r5
 80185ce:	d1ad      	bne.n	801852c <D16_GENERIC+0x38>
 80185d0:	9d05      	ldr	r5, [sp, #20]
 80185d2:	f850 7b02 	ldr.w	r7, [r0], #2
 80185d6:	2d00      	cmp	r5, #0
 80185d8:	d0ae      	beq.n	8018538 <D16_GENERIC+0x44>
 80185da:	ba7f      	rev16	r7, r7
 80185dc:	e7ac      	b.n	8018538 <D16_GENERIC+0x44>
 80185de:	2000      	movs	r0, #0
 80185e0:	9906      	ldr	r1, [sp, #24]
 80185e2:	61d3      	str	r3, [r2, #28]
 80185e4:	9b07      	ldr	r3, [sp, #28]
 80185e6:	f8c2 c008 	str.w	ip, [r2, #8]
 80185ea:	60d1      	str	r1, [r2, #12]
 80185ec:	6193      	str	r3, [r2, #24]
 80185ee:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 80185f2:	b009      	add	sp, #36	; 0x24
 80185f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185f8:	00030001 	.word	0x00030001
 80185fc:	00010003 	.word	0x00010003
 8018600:	24000000 	.word	0x24000000

08018604 <D24_GENERIC>:
 8018604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018608:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 801860c:	b089      	sub	sp, #36	; 0x24
 801860e:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8018610:	9303      	str	r3, [sp, #12]
 8018612:	6993      	ldr	r3, [r2, #24]
 8018614:	9104      	str	r1, [sp, #16]
 8018616:	9307      	str	r3, [sp, #28]
 8018618:	69d1      	ldr	r1, [r2, #28]
 801861a:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 801861e:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8018622:	2e00      	cmp	r6, #0
 8018624:	f000 8088 	beq.w	8018738 <D24_GENERIC+0x134>
 8018628:	f005 0620 	and.w	r6, r5, #32
 801862c:	f005 0510 	and.w	r5, r5, #16
 8018630:	f04f 0c00 	mov.w	ip, #0
 8018634:	f8df e140 	ldr.w	lr, [pc, #320]	; 8018778 <D24_GENERIC+0x174>
 8018638:	9606      	str	r6, [sp, #24]
 801863a:	9505      	str	r5, [sp, #20]
 801863c:	e064      	b.n	8018708 <D24_GENERIC+0x104>
 801863e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8018642:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018646:	f810 b007 	ldrb.w	fp, [r0, r7]
 801864a:	042d      	lsls	r5, r5, #16
 801864c:	19f0      	adds	r0, r6, r7
 801864e:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8018652:	44a9      	add	r9, r5
 8018654:	fa5f f689 	uxtb.w	r6, r9
 8018658:	f3c9 2707 	ubfx	r7, r9, #8, #8
 801865c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8018660:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8018664:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8018668:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 801866c:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8018670:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8018674:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8018678:	f3c7 0509 	ubfx	r5, r7, #0, #10
 801867c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8018680:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8018684:	4d3a      	ldr	r5, [pc, #232]	; (8018770 <D24_GENERIC+0x16c>)
 8018686:	fb26 8705 	smlad	r7, r6, r5, r8
 801868a:	4d3a      	ldr	r5, [pc, #232]	; (8018774 <D24_GENERIC+0x170>)
 801868c:	fb26 3805 	smlad	r8, r6, r5, r3
 8018690:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8018694:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8018698:	2301      	movs	r3, #1
 801869a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 801869e:	fb26 f603 	smuad	r6, r6, r3
 80186a2:	eb0c 0903 	add.w	r9, ip, r3
 80186a6:	eb0b 0306 	add.w	r3, fp, r6
 80186aa:	9e05      	ldr	r6, [sp, #20]
 80186ac:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80186b0:	b1ae      	cbz	r6, 80186de <D24_GENERIC+0xda>
 80186b2:	442c      	add	r4, r5
 80186b4:	9e03      	ldr	r6, [sp, #12]
 80186b6:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80186ba:	1ba4      	subs	r4, r4, r6
 80186bc:	9503      	str	r5, [sp, #12]
 80186be:	17e7      	asrs	r7, r4, #31
 80186c0:	fba4 450b 	umull	r4, r5, r4, fp
 80186c4:	e9cd 4500 	strd	r4, r5, [sp]
 80186c8:	fb0b 5407 	mla	r4, fp, r7, r5
 80186cc:	9401      	str	r4, [sp, #4]
 80186ce:	e9dd 4500 	ldrd	r4, r5, [sp]
 80186d2:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80186d6:	f145 0500 	adc.w	r5, r5, #0
 80186da:	006c      	lsls	r4, r5, #1
 80186dc:	4625      	mov	r5, r4
 80186de:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 80186e2:	03ad      	lsls	r5, r5, #14
 80186e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80186e8:	2700      	movs	r7, #0
 80186ea:	fb0c fb0b 	mul.w	fp, ip, fp
 80186ee:	fa1f fc89 	uxth.w	ip, r9
 80186f2:	fbca 6705 	smlal	r6, r7, sl, r5
 80186f6:	9e04      	ldr	r6, [sp, #16]
 80186f8:	10bd      	asrs	r5, r7, #2
 80186fa:	f305 050f 	ssat	r5, #16, r5
 80186fe:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8018702:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8018704:	4565      	cmp	r5, ip
 8018706:	d917      	bls.n	8018738 <D24_GENERIC+0x134>
 8018708:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 801870a:	f890 9000 	ldrb.w	r9, [r0]
 801870e:	b2ef      	uxtb	r7, r5
 8018710:	2d01      	cmp	r5, #1
 8018712:	b23e      	sxth	r6, r7
 8018714:	d193      	bne.n	801863e <D24_GENERIC+0x3a>
 8018716:	9d06      	ldr	r5, [sp, #24]
 8018718:	b1dd      	cbz	r5, 8018752 <D24_GENERIC+0x14e>
 801871a:	78c7      	ldrb	r7, [r0, #3]
 801871c:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8018720:	f01c 0f01 	tst.w	ip, #1
 8018724:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8018728:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 801872c:	d11a      	bne.n	8018764 <D24_GENERIC+0x160>
 801872e:	f890 9001 	ldrb.w	r9, [r0, #1]
 8018732:	3002      	adds	r0, #2
 8018734:	44b1      	add	r9, r6
 8018736:	e78d      	b.n	8018654 <D24_GENERIC+0x50>
 8018738:	6093      	str	r3, [r2, #8]
 801873a:	2000      	movs	r0, #0
 801873c:	9b03      	ldr	r3, [sp, #12]
 801873e:	f8c2 800c 	str.w	r8, [r2, #12]
 8018742:	6153      	str	r3, [r2, #20]
 8018744:	9b07      	ldr	r3, [sp, #28]
 8018746:	61d1      	str	r1, [r2, #28]
 8018748:	6114      	str	r4, [r2, #16]
 801874a:	6193      	str	r3, [r2, #24]
 801874c:	b009      	add	sp, #36	; 0x24
 801874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018752:	7845      	ldrb	r5, [r0, #1]
 8018754:	3003      	adds	r0, #3
 8018756:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 801875a:	022d      	lsls	r5, r5, #8
 801875c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8018760:	44a9      	add	r9, r5
 8018762:	e777      	b.n	8018654 <D24_GENERIC+0x50>
 8018764:	7886      	ldrb	r6, [r0, #2]
 8018766:	3004      	adds	r0, #4
 8018768:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 801876c:	44a9      	add	r9, r5
 801876e:	e771      	b.n	8018654 <D24_GENERIC+0x50>
 8018770:	00030001 	.word	0x00030001
 8018774:	00060007 	.word	0x00060007
 8018778:	24000000 	.word	0x24000000

0801877c <D32_GENERIC>:
 801877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018780:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8018784:	b089      	sub	sp, #36	; 0x24
 8018786:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8018788:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 801878a:	9302      	str	r3, [sp, #8]
 801878c:	6993      	ldr	r3, [r2, #24]
 801878e:	9104      	str	r1, [sp, #16]
 8018790:	9307      	str	r3, [sp, #28]
 8018792:	9503      	str	r5, [sp, #12]
 8018794:	69d1      	ldr	r1, [r2, #28]
 8018796:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8018798:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 801879c:	2e00      	cmp	r6, #0
 801879e:	f000 8097 	beq.w	80188d0 <D32_GENERIC+0x154>
 80187a2:	f005 0620 	and.w	r6, r5, #32
 80187a6:	f005 0510 	and.w	r5, r5, #16
 80187aa:	f04f 0e00 	mov.w	lr, #0
 80187ae:	f8df c150 	ldr.w	ip, [pc, #336]	; 8018900 <D32_GENERIC+0x184>
 80187b2:	9606      	str	r6, [sp, #24]
 80187b4:	9505      	str	r5, [sp, #20]
 80187b6:	e079      	b.n	80188ac <D32_GENERIC+0x130>
 80187b8:	783d      	ldrb	r5, [r7, #0]
 80187ba:	f810 b009 	ldrb.w	fp, [r0, r9]
 80187be:	042d      	lsls	r5, r5, #16
 80187c0:	f810 a006 	ldrb.w	sl, [r0, r6]
 80187c4:	f890 9000 	ldrb.w	r9, [r0]
 80187c8:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 80187cc:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 80187d0:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 80187d4:	44a9      	add	r9, r5
 80187d6:	fa5f f789 	uxtb.w	r7, r9
 80187da:	f3c9 2507 	ubfx	r5, r9, #8, #8
 80187de:	f3c9 4607 	ubfx	r6, r9, #16, #8
 80187e2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80187e6:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80187ea:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80187ee:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 80187f2:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80187f6:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 80187fa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80187fe:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8018802:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8018806:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801880a:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 801880e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8018812:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8018816:	f3c1 0509 	ubfx	r5, r1, #0, #10
 801881a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801881e:	4d34      	ldr	r5, [pc, #208]	; (80188f0 <D32_GENERIC+0x174>)
 8018820:	fb29 8805 	smlad	r8, r9, r5, r8
 8018824:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8018828:	fb26 8705 	smlad	r7, r6, r5, r8
 801882c:	4d31      	ldr	r5, [pc, #196]	; (80188f4 <D32_GENERIC+0x178>)
 801882e:	fb29 3305 	smlad	r3, r9, r5, r3
 8018832:	4d31      	ldr	r5, [pc, #196]	; (80188f8 <D32_GENERIC+0x17c>)
 8018834:	fb26 3805 	smlad	r8, r6, r5, r3
 8018838:	2301      	movs	r3, #1
 801883a:	fb29 f903 	smuad	r9, r9, r3
 801883e:	4b2f      	ldr	r3, [pc, #188]	; (80188fc <D32_GENERIC+0x180>)
 8018840:	fb26 9303 	smlad	r3, r6, r3, r9
 8018844:	9e05      	ldr	r6, [sp, #20]
 8018846:	f10e 0901 	add.w	r9, lr, #1
 801884a:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 801884e:	b1ae      	cbz	r6, 801887c <D32_GENERIC+0x100>
 8018850:	442c      	add	r4, r5
 8018852:	9e02      	ldr	r6, [sp, #8]
 8018854:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8018858:	1ba4      	subs	r4, r4, r6
 801885a:	9502      	str	r5, [sp, #8]
 801885c:	17e7      	asrs	r7, r4, #31
 801885e:	fba4 450a 	umull	r4, r5, r4, sl
 8018862:	e9cd 4500 	strd	r4, r5, [sp]
 8018866:	fb0a 5407 	mla	r4, sl, r7, r5
 801886a:	9401      	str	r4, [sp, #4]
 801886c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018870:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8018874:	f145 0500 	adc.w	r5, r5, #0
 8018878:	006c      	lsls	r4, r5, #1
 801887a:	4625      	mov	r5, r4
 801887c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8018880:	036d      	lsls	r5, r5, #13
 8018882:	9f03      	ldr	r7, [sp, #12]
 8018884:	fb0e fb0a 	mul.w	fp, lr, sl
 8018888:	fa1f fe89 	uxth.w	lr, r9
 801888c:	f04f 0a00 	mov.w	sl, #0
 8018890:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8018894:	9e04      	ldr	r6, [sp, #16]
 8018896:	fbc7 9a05 	smlal	r9, sl, r7, r5
 801889a:	4657      	mov	r7, sl
 801889c:	10bd      	asrs	r5, r7, #2
 801889e:	f305 050f 	ssat	r5, #16, r5
 80188a2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80188a6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80188a8:	4575      	cmp	r5, lr
 80188aa:	d911      	bls.n	80188d0 <D32_GENERIC+0x154>
 80188ac:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80188ae:	b2ee      	uxtb	r6, r5
 80188b0:	2d01      	cmp	r5, #1
 80188b2:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 80188b6:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80188ba:	f47f af7d 	bne.w	80187b8 <D32_GENERIC+0x3c>
 80188be:	1d05      	adds	r5, r0, #4
 80188c0:	f8d0 9000 	ldr.w	r9, [r0]
 80188c4:	9806      	ldr	r0, [sp, #24]
 80188c6:	b180      	cbz	r0, 80188ea <D32_GENERIC+0x16e>
 80188c8:	fa99 f999 	rev16.w	r9, r9
 80188cc:	4628      	mov	r0, r5
 80188ce:	e782      	b.n	80187d6 <D32_GENERIC+0x5a>
 80188d0:	6093      	str	r3, [r2, #8]
 80188d2:	2000      	movs	r0, #0
 80188d4:	9b02      	ldr	r3, [sp, #8]
 80188d6:	f8c2 800c 	str.w	r8, [r2, #12]
 80188da:	6153      	str	r3, [r2, #20]
 80188dc:	9b07      	ldr	r3, [sp, #28]
 80188de:	61d1      	str	r1, [r2, #28]
 80188e0:	6114      	str	r4, [r2, #16]
 80188e2:	6193      	str	r3, [r2, #24]
 80188e4:	b009      	add	sp, #36	; 0x24
 80188e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188ea:	4628      	mov	r0, r5
 80188ec:	e773      	b.n	80187d6 <D32_GENERIC+0x5a>
 80188ee:	bf00      	nop
 80188f0:	00060003 	.word	0x00060003
 80188f4:	000a000c 	.word	0x000a000c
 80188f8:	000c000a 	.word	0x000c000a
 80188fc:	00030006 	.word	0x00030006
 8018900:	24000000 	.word	0x24000000

08018904 <D48_GENERIC>:
 8018904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018908:	6913      	ldr	r3, [r2, #16]
 801890a:	b089      	sub	sp, #36	; 0x24
 801890c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801890e:	9301      	str	r3, [sp, #4]
 8018910:	6953      	ldr	r3, [r2, #20]
 8018912:	9104      	str	r1, [sp, #16]
 8018914:	9302      	str	r3, [sp, #8]
 8018916:	6993      	ldr	r3, [r2, #24]
 8018918:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 801891c:	9307      	str	r3, [sp, #28]
 801891e:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8018922:	9100      	str	r1, [sp, #0]
 8018924:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8018926:	9103      	str	r1, [sp, #12]
 8018928:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801892a:	2c00      	cmp	r4, #0
 801892c:	f000 80be 	beq.w	8018aac <D48_GENERIC+0x1a8>
 8018930:	f001 0420 	and.w	r4, r1, #32
 8018934:	f001 0110 	and.w	r1, r1, #16
 8018938:	f04f 0e00 	mov.w	lr, #0
 801893c:	9105      	str	r1, [sp, #20]
 801893e:	9406      	str	r4, [sp, #24]
 8018940:	4962      	ldr	r1, [pc, #392]	; (8018acc <D48_GENERIC+0x1c8>)
 8018942:	e0a0      	b.n	8018a86 <D48_GENERIC+0x182>
 8018944:	eb00 0608 	add.w	r6, r0, r8
 8018948:	f810 a008 	ldrb.w	sl, [r0, r8]
 801894c:	f810 9005 	ldrb.w	r9, [r0, r5]
 8018950:	5df4      	ldrb	r4, [r6, r7]
 8018952:	443e      	add	r6, r7
 8018954:	f890 b000 	ldrb.w	fp, [r0]
 8018958:	0420      	lsls	r0, r4, #16
 801895a:	eb06 0408 	add.w	r4, r6, r8
 801895e:	f816 6008 	ldrb.w	r6, [r6, r8]
 8018962:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8018966:	f814 8007 	ldrb.w	r8, [r4, r7]
 801896a:	4427      	add	r7, r4
 801896c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8018970:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8018974:	eb0a 040b 	add.w	r4, sl, fp
 8018978:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 801897c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8018980:	b2f7      	uxtb	r7, r6
 8018982:	b2e6      	uxtb	r6, r4
 8018984:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8018988:	f3c4 4907 	ubfx	r9, r4, #16, #8
 801898c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8018990:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8018994:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8018998:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 801899c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 80189a0:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 80189a4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80189a8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80189ac:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 80189b0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80189b4:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80189b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80189bc:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80189c0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80189c4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80189c8:	9d00      	ldr	r5, [sp, #0]
 80189ca:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80189ce:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80189d2:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80189d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80189da:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80189de:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80189e2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80189e6:	4c3a      	ldr	r4, [pc, #232]	; (8018ad0 <D48_GENERIC+0x1cc>)
 80189e8:	fb26 5a04 	smlad	sl, r6, r4, r5
 80189ec:	4c39      	ldr	r4, [pc, #228]	; (8018ad4 <D48_GENERIC+0x1d0>)
 80189ee:	fb29 aa04 	smlad	sl, r9, r4, sl
 80189f2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80189f6:	fb27 aa04 	smlad	sl, r7, r4, sl
 80189fa:	4c37      	ldr	r4, [pc, #220]	; (8018ad8 <D48_GENERIC+0x1d4>)
 80189fc:	fb26 3304 	smlad	r3, r6, r4, r3
 8018a00:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8018a04:	fb29 3304 	smlad	r3, r9, r4, r3
 8018a08:	4c34      	ldr	r4, [pc, #208]	; (8018adc <D48_GENERIC+0x1d8>)
 8018a0a:	fb27 3304 	smlad	r3, r7, r4, r3
 8018a0e:	2501      	movs	r5, #1
 8018a10:	9300      	str	r3, [sp, #0]
 8018a12:	fb26 f605 	smuad	r6, r6, r5
 8018a16:	4b32      	ldr	r3, [pc, #200]	; (8018ae0 <D48_GENERIC+0x1dc>)
 8018a18:	fb29 6903 	smlad	r9, r9, r3, r6
 8018a1c:	4b31      	ldr	r3, [pc, #196]	; (8018ae4 <D48_GENERIC+0x1e0>)
 8018a1e:	fb27 9303 	smlad	r3, r7, r3, r9
 8018a22:	9c05      	ldr	r4, [sp, #20]
 8018a24:	eb0e 0805 	add.w	r8, lr, r5
 8018a28:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 8018a2c:	b19c      	cbz	r4, 8018a56 <D48_GENERIC+0x152>
 8018a2e:	9c01      	ldr	r4, [sp, #4]
 8018a30:	9d02      	ldr	r5, [sp, #8]
 8018a32:	4454      	add	r4, sl
 8018a34:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8018a38:	f8cd a008 	str.w	sl, [sp, #8]
 8018a3c:	1b64      	subs	r4, r4, r5
 8018a3e:	fba4 ab09 	umull	sl, fp, r4, r9
 8018a42:	17e7      	asrs	r7, r4, #31
 8018a44:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8018a48:	fb09 bb07 	mla	fp, r9, r7, fp
 8018a4c:	f14b 0500 	adc.w	r5, fp, #0
 8018a50:	006c      	lsls	r4, r5, #1
 8018a52:	46a2      	mov	sl, r4
 8018a54:	9401      	str	r4, [sp, #4]
 8018a56:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8018a58:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8018a5c:	9d03      	ldr	r5, [sp, #12]
 8018a5e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8018a62:	fb0e f606 	mul.w	r6, lr, r6
 8018a66:	fa1f fe88 	uxth.w	lr, r8
 8018a6a:	f04f 0800 	mov.w	r8, #0
 8018a6e:	fbc5 780a 	smlal	r7, r8, r5, sl
 8018a72:	4645      	mov	r5, r8
 8018a74:	10ac      	asrs	r4, r5, #2
 8018a76:	9d04      	ldr	r5, [sp, #16]
 8018a78:	f304 040f 	ssat	r4, #16, r4
 8018a7c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8018a80:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8018a82:	4574      	cmp	r4, lr
 8018a84:	d912      	bls.n	8018aac <D48_GENERIC+0x1a8>
 8018a86:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8018a88:	b2e5      	uxtb	r5, r4
 8018a8a:	2c01      	cmp	r4, #1
 8018a8c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8018a90:	f1c5 0700 	rsb	r7, r5, #0
 8018a94:	f47f af56 	bne.w	8018944 <D48_GENERIC+0x40>
 8018a98:	9d06      	ldr	r5, [sp, #24]
 8018a9a:	e9d0 4600 	ldrd	r4, r6, [r0]
 8018a9e:	3006      	adds	r0, #6
 8018aa0:	2d00      	cmp	r5, #0
 8018aa2:	f43f af6b 	beq.w	801897c <D48_GENERIC+0x78>
 8018aa6:	ba64      	rev16	r4, r4
 8018aa8:	ba76      	rev16	r6, r6
 8018aaa:	e767      	b.n	801897c <D48_GENERIC+0x78>
 8018aac:	6093      	str	r3, [r2, #8]
 8018aae:	2000      	movs	r0, #0
 8018ab0:	9b00      	ldr	r3, [sp, #0]
 8018ab2:	f8c2 c01c 	str.w	ip, [r2, #28]
 8018ab6:	60d3      	str	r3, [r2, #12]
 8018ab8:	9b01      	ldr	r3, [sp, #4]
 8018aba:	6113      	str	r3, [r2, #16]
 8018abc:	9b02      	ldr	r3, [sp, #8]
 8018abe:	6153      	str	r3, [r2, #20]
 8018ac0:	9b07      	ldr	r3, [sp, #28]
 8018ac2:	6193      	str	r3, [r2, #24]
 8018ac4:	b009      	add	sp, #36	; 0x24
 8018ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018aca:	bf00      	nop
 8018acc:	24000000 	.word	0x24000000
 8018ad0:	000f000a 	.word	0x000f000a
 8018ad4:	00060003 	.word	0x00060003
 8018ad8:	00150019 	.word	0x00150019
 8018adc:	00190015 	.word	0x00190015
 8018ae0:	00030006 	.word	0x00030006
 8018ae4:	000a000f 	.word	0x000a000f

08018ae8 <D64_GENERIC>:
 8018ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018aec:	6913      	ldr	r3, [r2, #16]
 8018aee:	b089      	sub	sp, #36	; 0x24
 8018af0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8018af2:	9300      	str	r3, [sp, #0]
 8018af4:	6953      	ldr	r3, [r2, #20]
 8018af6:	9105      	str	r1, [sp, #20]
 8018af8:	9303      	str	r3, [sp, #12]
 8018afa:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8018afc:	6993      	ldr	r3, [r2, #24]
 8018afe:	69d4      	ldr	r4, [r2, #28]
 8018b00:	9307      	str	r3, [sp, #28]
 8018b02:	9504      	str	r5, [sp, #16]
 8018b04:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8018b08:	2900      	cmp	r1, #0
 8018b0a:	f000 80e8 	beq.w	8018cde <D64_GENERIC+0x1f6>
 8018b0e:	6a11      	ldr	r1, [r2, #32]
 8018b10:	2500      	movs	r5, #0
 8018b12:	46b3      	mov	fp, r6
 8018b14:	9302      	str	r3, [sp, #8]
 8018b16:	9106      	str	r1, [sp, #24]
 8018b18:	4978      	ldr	r1, [pc, #480]	; (8018cfc <D64_GENERIC+0x214>)
 8018b1a:	e0cc      	b.n	8018cb6 <D64_GENERIC+0x1ce>
 8018b1c:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8018b20:	f1ce 0c00 	rsb	ip, lr, #0
 8018b24:	f890 9000 	ldrb.w	r9, [r0]
 8018b28:	eb00 0708 	add.w	r7, r0, r8
 8018b2c:	f810 6008 	ldrb.w	r6, [r0, r8]
 8018b30:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8018b34:	f817 000c 	ldrb.w	r0, [r7, ip]
 8018b38:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8018b3c:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8018b40:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8018b44:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8018b48:	f817 000c 	ldrb.w	r0, [r7, ip]
 8018b4c:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8018b50:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8018b54:	0400      	lsls	r0, r0, #16
 8018b56:	4467      	add	r7, ip
 8018b58:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8018b5c:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8018b60:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8018b64:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8018b68:	444e      	add	r6, r9
 8018b6a:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8018b6e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8018b72:	44c2      	add	sl, r8
 8018b74:	b2f7      	uxtb	r7, r6
 8018b76:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8018b7a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8018b7e:	0e36      	lsrs	r6, r6, #24
 8018b80:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8018b84:	fa5f fc8a 	uxtb.w	ip, sl
 8018b88:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8018b8c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8018b90:	443c      	add	r4, r7
 8018b92:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8018b96:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8018b9a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8018b9e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8018ba2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8018ba6:	4b56      	ldr	r3, [pc, #344]	; (8018d00 <D64_GENERIC+0x218>)
 8018ba8:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 8018bac:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8018bb0:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8018bb4:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 8018bb8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8018bbc:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8018bc0:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8018bc4:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8018bc8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8018bcc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8018bd0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8018bd4:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 8018bd8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8018bdc:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8018be0:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8018be4:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8018be8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8018bec:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8018bf0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8018bf4:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 8018bf8:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8018bfc:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8018c00:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8018c04:	fb28 b903 	smlad	r9, r8, r3, fp
 8018c08:	4b3e      	ldr	r3, [pc, #248]	; (8018d04 <D64_GENERIC+0x21c>)
 8018c0a:	fb26 9903 	smlad	r9, r6, r3, r9
 8018c0e:	4b3e      	ldr	r3, [pc, #248]	; (8018d08 <D64_GENERIC+0x220>)
 8018c10:	fb2c 9703 	smlad	r7, ip, r3, r9
 8018c14:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8018c18:	fb2a 7909 	smlad	r9, sl, r9, r7
 8018c1c:	4f3b      	ldr	r7, [pc, #236]	; (8018d0c <D64_GENERIC+0x224>)
 8018c1e:	9b02      	ldr	r3, [sp, #8]
 8018c20:	fb28 3307 	smlad	r3, r8, r7, r3
 8018c24:	fb2a 3317 	smladx	r3, sl, r7, r3
 8018c28:	4f39      	ldr	r7, [pc, #228]	; (8018d10 <D64_GENERIC+0x228>)
 8018c2a:	fb26 3307 	smlad	r3, r6, r7, r3
 8018c2e:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8018c32:	f04f 0e01 	mov.w	lr, #1
 8018c36:	fb28 f80e 	smuad	r8, r8, lr
 8018c3a:	4b36      	ldr	r3, [pc, #216]	; (8018d14 <D64_GENERIC+0x22c>)
 8018c3c:	fb26 8603 	smlad	r6, r6, r3, r8
 8018c40:	4b35      	ldr	r3, [pc, #212]	; (8018d18 <D64_GENERIC+0x230>)
 8018c42:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8018c46:	4b35      	ldr	r3, [pc, #212]	; (8018d1c <D64_GENERIC+0x234>)
 8018c48:	fb2a c303 	smlad	r3, sl, r3, ip
 8018c4c:	9f06      	ldr	r7, [sp, #24]
 8018c4e:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8018c52:	9302      	str	r3, [sp, #8]
 8018c54:	b1cf      	cbz	r7, 8018c8a <D64_GENERIC+0x1a2>
 8018c56:	9b00      	ldr	r3, [sp, #0]
 8018c58:	444b      	add	r3, r9
 8018c5a:	461e      	mov	r6, r3
 8018c5c:	9b03      	ldr	r3, [sp, #12]
 8018c5e:	f8cd 900c 	str.w	r9, [sp, #12]
 8018c62:	1af6      	subs	r6, r6, r3
 8018c64:	46b0      	mov	r8, r6
 8018c66:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8018c6a:	e9cd 8900 	strd	r8, r9, [sp]
 8018c6e:	fba6 8907 	umull	r8, r9, r6, r7
 8018c72:	9e01      	ldr	r6, [sp, #4]
 8018c74:	fb07 9306 	mla	r3, r7, r6, r9
 8018c78:	4646      	mov	r6, r8
 8018c7a:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8018c7e:	f143 0700 	adc.w	r7, r3, #0
 8018c82:	fa07 f30e 	lsl.w	r3, r7, lr
 8018c86:	4699      	mov	r9, r3
 8018c88:	9300      	str	r3, [sp, #0]
 8018c8a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 8018c8e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8018c92:	9b04      	ldr	r3, [sp, #16]
 8018c94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018c98:	2700      	movs	r7, #0
 8018c9a:	fb05 fc0c 	mul.w	ip, r5, ip
 8018c9e:	3501      	adds	r5, #1
 8018ca0:	fbc3 6709 	smlal	r6, r7, r3, r9
 8018ca4:	9b05      	ldr	r3, [sp, #20]
 8018ca6:	10be      	asrs	r6, r7, #2
 8018ca8:	f306 060f 	ssat	r6, #16, r6
 8018cac:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 8018cb0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8018cb2:	42ae      	cmp	r6, r5
 8018cb4:	dd11      	ble.n	8018cda <D64_GENERIC+0x1f2>
 8018cb6:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 8018cba:	f1be 0f01 	cmp.w	lr, #1
 8018cbe:	f47f af2d 	bne.w	8018b1c <D64_GENERIC+0x34>
 8018cc2:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8018cc4:	f100 0c08 	add.w	ip, r0, #8
 8018cc8:	06bb      	lsls	r3, r7, #26
 8018cca:	e9d0 6a00 	ldrd	r6, sl, [r0]
 8018cce:	d513      	bpl.n	8018cf8 <D64_GENERIC+0x210>
 8018cd0:	ba76      	rev16	r6, r6
 8018cd2:	fa9a fa9a 	rev16.w	sl, sl
 8018cd6:	4660      	mov	r0, ip
 8018cd8:	e74c      	b.n	8018b74 <D64_GENERIC+0x8c>
 8018cda:	465e      	mov	r6, fp
 8018cdc:	9b02      	ldr	r3, [sp, #8]
 8018cde:	6093      	str	r3, [r2, #8]
 8018ce0:	2000      	movs	r0, #0
 8018ce2:	9b00      	ldr	r3, [sp, #0]
 8018ce4:	60d6      	str	r6, [r2, #12]
 8018ce6:	6113      	str	r3, [r2, #16]
 8018ce8:	9b03      	ldr	r3, [sp, #12]
 8018cea:	61d4      	str	r4, [r2, #28]
 8018cec:	6153      	str	r3, [r2, #20]
 8018cee:	9b07      	ldr	r3, [sp, #28]
 8018cf0:	6193      	str	r3, [r2, #24]
 8018cf2:	b009      	add	sp, #36	; 0x24
 8018cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf8:	4660      	mov	r0, ip
 8018cfa:	e73b      	b.n	8018b74 <D64_GENERIC+0x8c>
 8018cfc:	24000000 	.word	0x24000000
 8018d00:	001c0015 	.word	0x001c0015
 8018d04:	000f000a 	.word	0x000f000a
 8018d08:	00060003 	.word	0x00060003
 8018d0c:	0024002a 	.word	0x0024002a
 8018d10:	002e0030 	.word	0x002e0030
 8018d14:	00030006 	.word	0x00030006
 8018d18:	000a000f 	.word	0x000a000f
 8018d1c:	0015001c 	.word	0x0015001c

08018d20 <D80_GENERIC>:
 8018d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d24:	b08b      	sub	sp, #44	; 0x2c
 8018d26:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8018d28:	9107      	str	r1, [sp, #28]
 8018d2a:	6911      	ldr	r1, [r2, #16]
 8018d2c:	9104      	str	r1, [sp, #16]
 8018d2e:	6951      	ldr	r1, [r2, #20]
 8018d30:	9105      	str	r1, [sp, #20]
 8018d32:	6991      	ldr	r1, [r2, #24]
 8018d34:	9109      	str	r1, [sp, #36]	; 0x24
 8018d36:	69d1      	ldr	r1, [r2, #28]
 8018d38:	9102      	str	r1, [sp, #8]
 8018d3a:	6891      	ldr	r1, [r2, #8]
 8018d3c:	9103      	str	r1, [sp, #12]
 8018d3e:	68d1      	ldr	r1, [r2, #12]
 8018d40:	9101      	str	r1, [sp, #4]
 8018d42:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8018d44:	9106      	str	r1, [sp, #24]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	f000 810b 	beq.w	8018f62 <D80_GENERIC+0x242>
 8018d4c:	6a13      	ldr	r3, [r2, #32]
 8018d4e:	f04f 0800 	mov.w	r8, #0
 8018d52:	f8df c260 	ldr.w	ip, [pc, #608]	; 8018fb4 <D80_GENERIC+0x294>
 8018d56:	9308      	str	r3, [sp, #32]
 8018d58:	9200      	str	r2, [sp, #0]
 8018d5a:	e0ee      	b.n	8018f3a <D80_GENERIC+0x21a>
 8018d5c:	b2db      	uxtb	r3, r3
 8018d5e:	f890 e000 	ldrb.w	lr, [r0]
 8018d62:	b219      	sxth	r1, r3
 8018d64:	425c      	negs	r4, r3
 8018d66:	f810 9003 	ldrb.w	r9, [r0, r3]
 8018d6a:	004e      	lsls	r6, r1, #1
 8018d6c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8018d70:	4431      	add	r1, r6
 8018d72:	1843      	adds	r3, r0, r1
 8018d74:	f810 b001 	ldrb.w	fp, [r0, r1]
 8018d78:	1919      	adds	r1, r3, r4
 8018d7a:	5d1b      	ldrb	r3, [r3, r4]
 8018d7c:	1948      	adds	r0, r1, r5
 8018d7e:	f811 a005 	ldrb.w	sl, [r1, r5]
 8018d82:	041b      	lsls	r3, r3, #16
 8018d84:	1907      	adds	r7, r0, r4
 8018d86:	5d01      	ldrb	r1, [r0, r4]
 8018d88:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8018d8c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8018d90:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8018d94:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8018d98:	0409      	lsls	r1, r1, #16
 8018d9a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8018d9e:	eb0b 0905 	add.w	r9, fp, r5
 8018da2:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8018da6:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8018daa:	eb09 0b04 	add.w	fp, r9, r4
 8018dae:	f819 4004 	ldrb.w	r4, [r9, r4]
 8018db2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8018db6:	4473      	add	r3, lr
 8018db8:	eb0b 0006 	add.w	r0, fp, r6
 8018dbc:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8018dc0:	4439      	add	r1, r7
 8018dc2:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8018dc6:	b2df      	uxtb	r7, r3
 8018dc8:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8018dcc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8018dd0:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8018dd4:	fa5f fa81 	uxtb.w	sl, r1
 8018dd8:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8018ddc:	9c02      	ldr	r4, [sp, #8]
 8018dde:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8018de2:	441c      	add	r4, r3
 8018de4:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8018de8:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8018dec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018df0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8018df4:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8018df8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8018dfc:	b2ed      	uxtb	r5, r5
 8018dfe:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8018e02:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8018e06:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8018e0a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8018e0e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8018e12:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8018e16:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8018e1a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8018e1e:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8018e22:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8018e26:	0e09      	lsrs	r1, r1, #24
 8018e28:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8018e2c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8018e30:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8018e34:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8018e38:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8018e3c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8018e40:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8018e44:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8018e48:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8018e4c:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8018e50:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8018e54:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8018e58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8018e5c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8018e60:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8018e64:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8018e68:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8018e6c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8018e70:	9202      	str	r2, [sp, #8]
 8018e72:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8018e76:	4a43      	ldr	r2, [pc, #268]	; (8018f84 <D80_GENERIC+0x264>)
 8018e78:	9f01      	ldr	r7, [sp, #4]
 8018e7a:	fb23 7a02 	smlad	sl, r3, r2, r7
 8018e7e:	4a42      	ldr	r2, [pc, #264]	; (8018f88 <D80_GENERIC+0x268>)
 8018e80:	fb26 aa02 	smlad	sl, r6, r2, sl
 8018e84:	4a41      	ldr	r2, [pc, #260]	; (8018f8c <D80_GENERIC+0x26c>)
 8018e86:	fb24 aa02 	smlad	sl, r4, r2, sl
 8018e8a:	4a41      	ldr	r2, [pc, #260]	; (8018f90 <D80_GENERIC+0x270>)
 8018e8c:	fb21 a702 	smlad	r7, r1, r2, sl
 8018e90:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8018e94:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8018e98:	4a3e      	ldr	r2, [pc, #248]	; (8018f94 <D80_GENERIC+0x274>)
 8018e9a:	9f03      	ldr	r7, [sp, #12]
 8018e9c:	fb23 7e02 	smlad	lr, r3, r2, r7
 8018ea0:	4a3d      	ldr	r2, [pc, #244]	; (8018f98 <D80_GENERIC+0x278>)
 8018ea2:	fb26 ee02 	smlad	lr, r6, r2, lr
 8018ea6:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 8018eaa:	fb24 e707 	smlad	r7, r4, r7, lr
 8018eae:	4a3b      	ldr	r2, [pc, #236]	; (8018f9c <D80_GENERIC+0x27c>)
 8018eb0:	fb21 7702 	smlad	r7, r1, r2, r7
 8018eb4:	4a3a      	ldr	r2, [pc, #232]	; (8018fa0 <D80_GENERIC+0x280>)
 8018eb6:	fb25 7202 	smlad	r2, r5, r2, r7
 8018eba:	f04f 0901 	mov.w	r9, #1
 8018ebe:	9201      	str	r2, [sp, #4]
 8018ec0:	fb23 f909 	smuad	r9, r3, r9
 8018ec4:	4b37      	ldr	r3, [pc, #220]	; (8018fa4 <D80_GENERIC+0x284>)
 8018ec6:	fb26 9603 	smlad	r6, r6, r3, r9
 8018eca:	4f37      	ldr	r7, [pc, #220]	; (8018fa8 <D80_GENERIC+0x288>)
 8018ecc:	fb24 6407 	smlad	r4, r4, r7, r6
 8018ed0:	4f36      	ldr	r7, [pc, #216]	; (8018fac <D80_GENERIC+0x28c>)
 8018ed2:	fb21 4707 	smlad	r7, r1, r7, r4
 8018ed6:	4936      	ldr	r1, [pc, #216]	; (8018fb0 <D80_GENERIC+0x290>)
 8018ed8:	fb25 7301 	smlad	r3, r5, r1, r7
 8018edc:	9303      	str	r3, [sp, #12]
 8018ede:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 8018ee2:	9b08      	ldr	r3, [sp, #32]
 8018ee4:	b193      	cbz	r3, 8018f0c <D80_GENERIC+0x1ec>
 8018ee6:	9a04      	ldr	r2, [sp, #16]
 8018ee8:	4452      	add	r2, sl
 8018eea:	4614      	mov	r4, r2
 8018eec:	9a05      	ldr	r2, [sp, #20]
 8018eee:	f8cd a014 	str.w	sl, [sp, #20]
 8018ef2:	1aa4      	subs	r4, r4, r2
 8018ef4:	fba4 1203 	umull	r1, r2, r4, r3
 8018ef8:	17e7      	asrs	r7, r4, #31
 8018efa:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 8018efe:	fb03 2207 	mla	r2, r3, r7, r2
 8018f02:	f142 0500 	adc.w	r5, r2, #0
 8018f06:	006b      	lsls	r3, r5, #1
 8018f08:	469a      	mov	sl, r3
 8018f0a:	9304      	str	r3, [sp, #16]
 8018f0c:	9e00      	ldr	r6, [sp, #0]
 8018f0e:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8018f12:	9a06      	ldr	r2, [sp, #24]
 8018f14:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018f18:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8018f1a:	2500      	movs	r5, #0
 8018f1c:	fb08 f303 	mul.w	r3, r8, r3
 8018f20:	fbc2 450a 	smlal	r4, r5, r2, sl
 8018f24:	9a07      	ldr	r2, [sp, #28]
 8018f26:	f108 0801 	add.w	r8, r8, #1
 8018f2a:	10a9      	asrs	r1, r5, #2
 8018f2c:	f301 010f 	ssat	r1, #16, r1
 8018f30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8018f34:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8018f36:	4543      	cmp	r3, r8
 8018f38:	dd12      	ble.n	8018f60 <D80_GENERIC+0x240>
 8018f3a:	9b00      	ldr	r3, [sp, #0]
 8018f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f3e:	2b01      	cmp	r3, #1
 8018f40:	f47f af0c 	bne.w	8018d5c <D80_GENERIC+0x3c>
 8018f44:	9b00      	ldr	r3, [sp, #0]
 8018f46:	6885      	ldr	r5, [r0, #8]
 8018f48:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8018f4a:	06b2      	lsls	r2, r6, #26
 8018f4c:	e9d0 3100 	ldrd	r3, r1, [r0]
 8018f50:	f100 000a 	add.w	r0, r0, #10
 8018f54:	f57f af35 	bpl.w	8018dc2 <D80_GENERIC+0xa2>
 8018f58:	ba5b      	rev16	r3, r3
 8018f5a:	ba49      	rev16	r1, r1
 8018f5c:	ba6d      	rev16	r5, r5
 8018f5e:	e730      	b.n	8018dc2 <D80_GENERIC+0xa2>
 8018f60:	4632      	mov	r2, r6
 8018f62:	9b03      	ldr	r3, [sp, #12]
 8018f64:	2000      	movs	r0, #0
 8018f66:	6093      	str	r3, [r2, #8]
 8018f68:	9b01      	ldr	r3, [sp, #4]
 8018f6a:	60d3      	str	r3, [r2, #12]
 8018f6c:	9b02      	ldr	r3, [sp, #8]
 8018f6e:	61d3      	str	r3, [r2, #28]
 8018f70:	9b04      	ldr	r3, [sp, #16]
 8018f72:	6113      	str	r3, [r2, #16]
 8018f74:	9b05      	ldr	r3, [sp, #20]
 8018f76:	6153      	str	r3, [r2, #20]
 8018f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f7a:	6193      	str	r3, [r2, #24]
 8018f7c:	b00b      	add	sp, #44	; 0x2c
 8018f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f82:	bf00      	nop
 8018f84:	002d0024 	.word	0x002d0024
 8018f88:	001c0015 	.word	0x001c0015
 8018f8c:	000f000a 	.word	0x000f000a
 8018f90:	00060003 	.word	0x00060003
 8018f94:	0037003f 	.word	0x0037003f
 8018f98:	00450049 	.word	0x00450049
 8018f9c:	00490045 	.word	0x00490045
 8018fa0:	003f0037 	.word	0x003f0037
 8018fa4:	00030006 	.word	0x00030006
 8018fa8:	000a000f 	.word	0x000a000f
 8018fac:	0015001c 	.word	0x0015001c
 8018fb0:	0024002d 	.word	0x0024002d
 8018fb4:	24000000 	.word	0x24000000

08018fb8 <D128_GENERIC>:
 8018fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fbc:	b08d      	sub	sp, #52	; 0x34
 8018fbe:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8018fc0:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8018fc4:	9109      	str	r1, [sp, #36]	; 0x24
 8018fc6:	6911      	ldr	r1, [r2, #16]
 8018fc8:	9201      	str	r2, [sp, #4]
 8018fca:	9106      	str	r1, [sp, #24]
 8018fcc:	6951      	ldr	r1, [r2, #20]
 8018fce:	9107      	str	r1, [sp, #28]
 8018fd0:	6991      	ldr	r1, [r2, #24]
 8018fd2:	910b      	str	r1, [sp, #44]	; 0x2c
 8018fd4:	6891      	ldr	r1, [r2, #8]
 8018fd6:	9103      	str	r1, [sp, #12]
 8018fd8:	68d1      	ldr	r1, [r2, #12]
 8018fda:	9102      	str	r1, [sp, #8]
 8018fdc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8018fde:	9108      	str	r1, [sp, #32]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	f000 8183 	beq.w	80192ec <D128_GENERIC+0x334>
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	6a12      	ldr	r2, [r2, #32]
 8018fea:	4681      	mov	r9, r0
 8018fec:	920a      	str	r2, [sp, #40]	; 0x28
 8018fee:	e9cd a304 	strd	sl, r3, [sp, #16]
 8018ff2:	e165      	b.n	80192c0 <D128_GENERIC+0x308>
 8018ff4:	b2d2      	uxtb	r2, r2
 8018ff6:	f899 b000 	ldrb.w	fp, [r9]
 8018ffa:	b213      	sxth	r3, r2
 8018ffc:	4255      	negs	r5, r2
 8018ffe:	f819 0002 	ldrb.w	r0, [r9, r2]
 8019002:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019006:	009f      	lsls	r7, r3, #2
 8019008:	eb09 0402 	add.w	r4, r9, r2
 801900c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8019010:	f819 8002 	ldrb.w	r8, [r9, r2]
 8019014:	443b      	add	r3, r7
 8019016:	1962      	adds	r2, r4, r5
 8019018:	5d64      	ldrb	r4, [r4, r5]
 801901a:	eb02 0c03 	add.w	ip, r2, r3
 801901e:	0424      	lsls	r4, r4, #16
 8019020:	5cd3      	ldrb	r3, [r2, r3]
 8019022:	eb0c 0e05 	add.w	lr, ip, r5
 8019026:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 801902a:	f81c 2005 	ldrb.w	r2, [ip, r5]
 801902e:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8019032:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8019036:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 801903a:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 801903e:	eb0c 0e06 	add.w	lr, ip, r6
 8019042:	f81c a006 	ldrb.w	sl, [ip, r6]
 8019046:	0412      	lsls	r2, r2, #16
 8019048:	445c      	add	r4, fp
 801904a:	eb0e 0c05 	add.w	ip, lr, r5
 801904e:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8019052:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8019056:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 801905a:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 801905e:	041b      	lsls	r3, r3, #16
 8019060:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8019064:	eb00 0b06 	add.w	fp, r0, r6
 8019068:	5d80      	ldrb	r0, [r0, r6]
 801906a:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 801906e:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8019072:	eb0b 0a05 	add.w	sl, fp, r5
 8019076:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 801907a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 801907e:	0436      	lsls	r6, r6, #16
 8019080:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8019084:	4442      	add	r2, r8
 8019086:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 801908a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 801908e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8019092:	44b9      	add	r9, r7
 8019094:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8019098:	4463      	add	r3, ip
 801909a:	eb06 0508 	add.w	r5, r6, r8
 801909e:	b2e7      	uxtb	r7, r4
 80190a0:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80190a4:	499b      	ldr	r1, [pc, #620]	; (8019314 <D128_GENERIC+0x35c>)
 80190a6:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80190aa:	0e24      	lsrs	r4, r4, #24
 80190ac:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 80190b0:	b2d7      	uxtb	r7, r2
 80190b2:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 80190b6:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80190ba:	9904      	ldr	r1, [sp, #16]
 80190bc:	4461      	add	r1, ip
 80190be:	468c      	mov	ip, r1
 80190c0:	4994      	ldr	r1, [pc, #592]	; (8019314 <D128_GENERIC+0x35c>)
 80190c2:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 80190c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80190ca:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 80190ce:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80190d2:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 80190d6:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 80190da:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 80190de:	0e12      	lsrs	r2, r2, #24
 80190e0:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 80190e4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80190e8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80190ec:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80190f0:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 80190f4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80190f8:	b2da      	uxtb	r2, r3
 80190fa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80190fe:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8019102:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8019106:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801910a:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 801910e:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8019112:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8019116:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 801911a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801911e:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8019122:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8019126:	f3c3 4007 	ubfx	r0, r3, #16, #8
 801912a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801912e:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8019132:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8019136:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 801913a:	0e1b      	lsrs	r3, r3, #24
 801913c:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8019140:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019144:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8019148:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 801914c:	b2eb      	uxtb	r3, r5
 801914e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8019152:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8019156:	f3cc 0409 	ubfx	r4, ip, #0, #10
 801915a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801915e:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8019162:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8019166:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801916a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801916e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019172:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8019176:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 801917a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801917e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8019182:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8019186:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801918a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 801918e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8019192:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8019196:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 801919a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801919e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80191a2:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 80191a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80191aa:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 80191ae:	ea4f 219e 	mov.w	r1, lr, lsr #10
 80191b2:	f3ce 0209 	ubfx	r2, lr, #0, #10
 80191b6:	9104      	str	r1, [sp, #16]
 80191b8:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80191bc:	9902      	ldr	r1, [sp, #8]
 80191be:	4a56      	ldr	r2, [pc, #344]	; (8019318 <D128_GENERIC+0x360>)
 80191c0:	fb2b 1202 	smlad	r2, fp, r2, r1
 80191c4:	4955      	ldr	r1, [pc, #340]	; (801931c <D128_GENERIC+0x364>)
 80191c6:	fb28 2201 	smlad	r2, r8, r1, r2
 80191ca:	4955      	ldr	r1, [pc, #340]	; (8019320 <D128_GENERIC+0x368>)
 80191cc:	fb27 2201 	smlad	r2, r7, r1, r2
 80191d0:	4954      	ldr	r1, [pc, #336]	; (8019324 <D128_GENERIC+0x36c>)
 80191d2:	fb26 2201 	smlad	r2, r6, r1, r2
 80191d6:	4954      	ldr	r1, [pc, #336]	; (8019328 <D128_GENERIC+0x370>)
 80191d8:	fb24 2201 	smlad	r2, r4, r1, r2
 80191dc:	4953      	ldr	r1, [pc, #332]	; (801932c <D128_GENERIC+0x374>)
 80191de:	fb20 2201 	smlad	r2, r0, r1, r2
 80191e2:	4953      	ldr	r1, [pc, #332]	; (8019330 <D128_GENERIC+0x378>)
 80191e4:	fb23 2201 	smlad	r2, r3, r1, r2
 80191e8:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80191ec:	fb25 2a0c 	smlad	sl, r5, ip, r2
 80191f0:	4950      	ldr	r1, [pc, #320]	; (8019334 <D128_GENERIC+0x37c>)
 80191f2:	9a03      	ldr	r2, [sp, #12]
 80191f4:	fb2b 2c01 	smlad	ip, fp, r1, r2
 80191f8:	4a4f      	ldr	r2, [pc, #316]	; (8019338 <D128_GENERIC+0x380>)
 80191fa:	fb28 ce02 	smlad	lr, r8, r2, ip
 80191fe:	f8df c150 	ldr.w	ip, [pc, #336]	; 8019350 <D128_GENERIC+0x398>
 8019202:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8019206:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8019354 <D128_GENERIC+0x39c>
 801920a:	fb26 cc0e 	smlad	ip, r6, lr, ip
 801920e:	f8df e148 	ldr.w	lr, [pc, #328]	; 8019358 <D128_GENERIC+0x3a0>
 8019212:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8019216:	f8df c144 	ldr.w	ip, [pc, #324]	; 801935c <D128_GENERIC+0x3a4>
 801921a:	fb20 ee0c 	smlad	lr, r0, ip, lr
 801921e:	f8df c140 	ldr.w	ip, [pc, #320]	; 8019360 <D128_GENERIC+0x3a8>
 8019222:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8019226:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8019364 <D128_GENERIC+0x3ac>
 801922a:	fb25 c20e 	smlad	r2, r5, lr, ip
 801922e:	f04f 0c01 	mov.w	ip, #1
 8019232:	9202      	str	r2, [sp, #8]
 8019234:	fb2b fb0c 	smuad	fp, fp, ip
 8019238:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8019368 <D128_GENERIC+0x3b0>
 801923c:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8019240:	f8df c128 	ldr.w	ip, [pc, #296]	; 801936c <D128_GENERIC+0x3b4>
 8019244:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8019248:	4f3c      	ldr	r7, [pc, #240]	; (801933c <D128_GENERIC+0x384>)
 801924a:	fb26 bb07 	smlad	fp, r6, r7, fp
 801924e:	4f3c      	ldr	r7, [pc, #240]	; (8019340 <D128_GENERIC+0x388>)
 8019250:	fb24 bb07 	smlad	fp, r4, r7, fp
 8019254:	4f3b      	ldr	r7, [pc, #236]	; (8019344 <D128_GENERIC+0x38c>)
 8019256:	fb20 bb07 	smlad	fp, r0, r7, fp
 801925a:	4f3b      	ldr	r7, [pc, #236]	; (8019348 <D128_GENERIC+0x390>)
 801925c:	fb23 bb07 	smlad	fp, r3, r7, fp
 8019260:	4b3a      	ldr	r3, [pc, #232]	; (801934c <D128_GENERIC+0x394>)
 8019262:	fb25 b303 	smlad	r3, r5, r3, fp
 8019266:	9303      	str	r3, [sp, #12]
 8019268:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 801926c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801926e:	b183      	cbz	r3, 8019292 <D128_GENERIC+0x2da>
 8019270:	9a06      	ldr	r2, [sp, #24]
 8019272:	9907      	ldr	r1, [sp, #28]
 8019274:	4422      	add	r2, r4
 8019276:	9407      	str	r4, [sp, #28]
 8019278:	1a52      	subs	r2, r2, r1
 801927a:	fba2 0103 	umull	r0, r1, r2, r3
 801927e:	17d5      	asrs	r5, r2, #31
 8019280:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8019284:	fb03 1105 	mla	r1, r3, r5, r1
 8019288:	f141 0300 	adc.w	r3, r1, #0
 801928c:	005b      	lsls	r3, r3, #1
 801928e:	461c      	mov	r4, r3
 8019290:	9306      	str	r3, [sp, #24]
 8019292:	9d01      	ldr	r5, [sp, #4]
 8019294:	01e4      	lsls	r4, r4, #7
 8019296:	9e05      	ldr	r6, [sp, #20]
 8019298:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801929c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 801929e:	2300      	movs	r3, #0
 80192a0:	9908      	ldr	r1, [sp, #32]
 80192a2:	fb06 f000 	mul.w	r0, r6, r0
 80192a6:	3601      	adds	r6, #1
 80192a8:	fbc1 2304 	smlal	r2, r3, r1, r4
 80192ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192ae:	109b      	asrs	r3, r3, #2
 80192b0:	9605      	str	r6, [sp, #20]
 80192b2:	f303 030f 	ssat	r3, #16, r3
 80192b6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 80192ba:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80192bc:	42b3      	cmp	r3, r6
 80192be:	dd13      	ble.n	80192e8 <D128_GENERIC+0x330>
 80192c0:	9b01      	ldr	r3, [sp, #4]
 80192c2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80192c4:	2a01      	cmp	r2, #1
 80192c6:	f47f ae95 	bne.w	8018ff4 <D128_GENERIC+0x3c>
 80192ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80192cc:	f109 0610 	add.w	r6, r9, #16
 80192d0:	0681      	lsls	r1, r0, #26
 80192d2:	e9d9 4200 	ldrd	r4, r2, [r9]
 80192d6:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 80192da:	d518      	bpl.n	801930e <D128_GENERIC+0x356>
 80192dc:	ba64      	rev16	r4, r4
 80192de:	ba52      	rev16	r2, r2
 80192e0:	ba5b      	rev16	r3, r3
 80192e2:	ba6d      	rev16	r5, r5
 80192e4:	46b1      	mov	r9, r6
 80192e6:	e6da      	b.n	801909e <D128_GENERIC+0xe6>
 80192e8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80192ec:	9b01      	ldr	r3, [sp, #4]
 80192ee:	2000      	movs	r0, #0
 80192f0:	9903      	ldr	r1, [sp, #12]
 80192f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80192f4:	6099      	str	r1, [r3, #8]
 80192f6:	9902      	ldr	r1, [sp, #8]
 80192f8:	f8c3 a01c 	str.w	sl, [r3, #28]
 80192fc:	60d9      	str	r1, [r3, #12]
 80192fe:	9906      	ldr	r1, [sp, #24]
 8019300:	619a      	str	r2, [r3, #24]
 8019302:	6119      	str	r1, [r3, #16]
 8019304:	9907      	ldr	r1, [sp, #28]
 8019306:	6159      	str	r1, [r3, #20]
 8019308:	b00d      	add	sp, #52	; 0x34
 801930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801930e:	46b1      	mov	r9, r6
 8019310:	e6c5      	b.n	801909e <D128_GENERIC+0xe6>
 8019312:	bf00      	nop
 8019314:	24000000 	.word	0x24000000
 8019318:	00780069 	.word	0x00780069
 801931c:	005b004e 	.word	0x005b004e
 8019320:	00420037 	.word	0x00420037
 8019324:	002d0024 	.word	0x002d0024
 8019328:	001c0015 	.word	0x001c0015
 801932c:	000f000a 	.word	0x000f000a
 8019330:	00060003 	.word	0x00060003
 8019334:	00880096 	.word	0x00880096
 8019338:	00a200ac 	.word	0x00a200ac
 801933c:	0015001c 	.word	0x0015001c
 8019340:	0024002d 	.word	0x0024002d
 8019344:	00370042 	.word	0x00370042
 8019348:	004e005b 	.word	0x004e005b
 801934c:	00690078 	.word	0x00690078
 8019350:	00b400ba 	.word	0x00b400ba
 8019354:	00be00c0 	.word	0x00be00c0
 8019358:	00c000be 	.word	0x00c000be
 801935c:	00ba00b4 	.word	0x00ba00b4
 8019360:	00ac00a2 	.word	0x00ac00a2
 8019364:	00960088 	.word	0x00960088
 8019368:	00030006 	.word	0x00030006
 801936c:	000a000f 	.word	0x000a000f

08019370 <D16_1CH_HTONS_VOL_HP>:
 8019370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019374:	6993      	ldr	r3, [r2, #24]
 8019376:	b087      	sub	sp, #28
 8019378:	4682      	mov	sl, r0
 801937a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 801937c:	9304      	str	r3, [sp, #16]
 801937e:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8019382:	69d3      	ldr	r3, [r2, #28]
 8019384:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8019388:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 801938c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8019390:	9403      	str	r4, [sp, #12]
 8019392:	2800      	cmp	r0, #0
 8019394:	d054      	beq.n	8019440 <D16_1CH_HTONS_VOL_HP+0xd0>
 8019396:	f1a1 0902 	sub.w	r9, r1, #2
 801939a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 801939e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 801944c <D16_1CH_HTONS_VOL_HP+0xdc>
 80193a2:	4650      	mov	r0, sl
 80193a4:	9101      	str	r1, [sp, #4]
 80193a6:	4619      	mov	r1, r3
 80193a8:	f8cd b008 	str.w	fp, [sp, #8]
 80193ac:	9205      	str	r2, [sp, #20]
 80193ae:	f850 3b02 	ldr.w	r3, [r0], #2
 80193b2:	ba5b      	rev16	r3, r3
 80193b4:	b2dc      	uxtb	r4, r3
 80193b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80193ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80193be:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80193c2:	4419      	add	r1, r3
 80193c4:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 80193c8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80193cc:	f3c4 0209 	ubfx	r2, r4, #0, #10
 80193d0:	0aa1      	lsrs	r1, r4, #10
 80193d2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80193d6:	4a1b      	ldr	r2, [pc, #108]	; (8019444 <D16_1CH_HTONS_VOL_HP+0xd4>)
 80193d8:	fb23 5402 	smlad	r4, r3, r2, r5
 80193dc:	4a1a      	ldr	r2, [pc, #104]	; (8019448 <D16_1CH_HTONS_VOL_HP+0xd8>)
 80193de:	fb23 f502 	smuad	r5, r3, r2
 80193e2:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80193e6:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 80193ea:	f04f 0b00 	mov.w	fp, #0
 80193ee:	19a2      	adds	r2, r4, r6
 80193f0:	eba2 020c 	sub.w	r2, r2, ip
 80193f4:	46a4      	mov	ip, r4
 80193f6:	17d7      	asrs	r7, r2, #31
 80193f8:	fba2 230e 	umull	r2, r3, r2, lr
 80193fc:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8019400:	fb0e 3307 	mla	r3, lr, r7, r3
 8019404:	f143 0700 	adc.w	r7, r3, #0
 8019408:	9b02      	ldr	r3, [sp, #8]
 801940a:	047a      	lsls	r2, r7, #17
 801940c:	007e      	lsls	r6, r7, #1
 801940e:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8019412:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8019416:	f303 030f 	ssat	r3, #16, r3
 801941a:	f829 3f02 	strh.w	r3, [r9, #2]!
 801941e:	9b01      	ldr	r3, [sp, #4]
 8019420:	4298      	cmp	r0, r3
 8019422:	d1c4      	bne.n	80193ae <D16_1CH_HTONS_VOL_HP+0x3e>
 8019424:	460b      	mov	r3, r1
 8019426:	9a05      	ldr	r2, [sp, #20]
 8019428:	2000      	movs	r0, #0
 801942a:	9903      	ldr	r1, [sp, #12]
 801942c:	61d3      	str	r3, [r2, #28]
 801942e:	9b04      	ldr	r3, [sp, #16]
 8019430:	6095      	str	r5, [r2, #8]
 8019432:	60d1      	str	r1, [r2, #12]
 8019434:	6193      	str	r3, [r2, #24]
 8019436:	e9c2 6404 	strd	r6, r4, [r2, #16]
 801943a:	b007      	add	sp, #28
 801943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019440:	4664      	mov	r4, ip
 8019442:	e7f1      	b.n	8019428 <D16_1CH_HTONS_VOL_HP+0xb8>
 8019444:	00030001 	.word	0x00030001
 8019448:	00010003 	.word	0x00010003
 801944c:	24000000 	.word	0x24000000

08019450 <D24_1CH_HTONS_VOL_HP>:
 8019450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019454:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8019456:	b089      	sub	sp, #36	; 0x24
 8019458:	6993      	ldr	r3, [r2, #24]
 801945a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 801945c:	9604      	str	r6, [sp, #16]
 801945e:	6a16      	ldr	r6, [r2, #32]
 8019460:	9306      	str	r3, [sp, #24]
 8019462:	9505      	str	r5, [sp, #20]
 8019464:	69d3      	ldr	r3, [r2, #28]
 8019466:	9600      	str	r6, [sp, #0]
 8019468:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 801946c:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8019470:	2d00      	cmp	r5, #0
 8019472:	f000 8083 	beq.w	801957c <D24_1CH_HTONS_VOL_HP+0x12c>
 8019476:	9207      	str	r2, [sp, #28]
 8019478:	2600      	movs	r6, #0
 801947a:	4622      	mov	r2, r4
 801947c:	f1a1 0b02 	sub.w	fp, r1, #2
 8019480:	4f3f      	ldr	r7, [pc, #252]	; (8019580 <D24_1CH_HTONS_VOL_HP+0x130>)
 8019482:	461d      	mov	r5, r3
 8019484:	f8cd a00c 	str.w	sl, [sp, #12]
 8019488:	9c00      	ldr	r4, [sp, #0]
 801948a:	e056      	b.n	801953a <D24_1CH_HTONS_VOL_HP+0xea>
 801948c:	7841      	ldrb	r1, [r0, #1]
 801948e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8019492:	3002      	adds	r0, #2
 8019494:	4488      	add	r8, r1
 8019496:	fa5f f388 	uxtb.w	r3, r8
 801949a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 801949e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80194a2:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80194a6:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 80194aa:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 80194ae:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 80194b2:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80194b6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80194ba:	f3c8 0309 	ubfx	r3, r8, #0, #10
 80194be:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80194c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80194c6:	492f      	ldr	r1, [pc, #188]	; (8019584 <D24_1CH_HTONS_VOL_HP+0x134>)
 80194c8:	fb23 e901 	smlad	r9, r3, r1, lr
 80194cc:	492e      	ldr	r1, [pc, #184]	; (8019588 <D24_1CH_HTONS_VOL_HP+0x138>)
 80194ce:	fb23 ce01 	smlad	lr, r3, r1, ip
 80194d2:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 80194d6:	2101      	movs	r1, #1
 80194d8:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 80194dc:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 80194e0:	fb23 f301 	smuad	r3, r3, r1
 80194e4:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 80194e8:	eb08 0c03 	add.w	ip, r8, r3
 80194ec:	9b03      	ldr	r3, [sp, #12]
 80194ee:	f04f 0a00 	mov.w	sl, #0
 80194f2:	440a      	add	r2, r1
 80194f4:	3601      	adds	r6, #1
 80194f6:	9103      	str	r1, [sp, #12]
 80194f8:	1ad2      	subs	r2, r2, r3
 80194fa:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80194fe:	fba2 2304 	umull	r2, r3, r2, r4
 8019502:	e9cd 2300 	strd	r2, r3, [sp]
 8019506:	fb04 3309 	mla	r3, r4, r9, r3
 801950a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801950e:	9301      	str	r3, [sp, #4]
 8019510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019514:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8019518:	f143 0300 	adc.w	r3, r3, #0
 801951c:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8019520:	005a      	lsls	r2, r3, #1
 8019522:	9b04      	ldr	r3, [sp, #16]
 8019524:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8019528:	ea4f 03aa 	mov.w	r3, sl, asr #2
 801952c:	f303 030f 	ssat	r3, #16, r3
 8019530:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8019534:	9b05      	ldr	r3, [sp, #20]
 8019536:	429e      	cmp	r6, r3
 8019538:	d010      	beq.n	801955c <D24_1CH_HTONS_VOL_HP+0x10c>
 801953a:	f890 9003 	ldrb.w	r9, [r0, #3]
 801953e:	f016 0f01 	tst.w	r6, #1
 8019542:	7801      	ldrb	r1, [r0, #0]
 8019544:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8019548:	ea4f 2801 	mov.w	r8, r1, lsl #8
 801954c:	d09e      	beq.n	801948c <D24_1CH_HTONS_VOL_HP+0x3c>
 801954e:	f890 8002 	ldrb.w	r8, [r0, #2]
 8019552:	3004      	adds	r0, #4
 8019554:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8019558:	4488      	add	r8, r1
 801955a:	e79c      	b.n	8019496 <D24_1CH_HTONS_VOL_HP+0x46>
 801955c:	4614      	mov	r4, r2
 801955e:	462b      	mov	r3, r5
 8019560:	9a07      	ldr	r2, [sp, #28]
 8019562:	2000      	movs	r0, #0
 8019564:	61d3      	str	r3, [r2, #28]
 8019566:	9b06      	ldr	r3, [sp, #24]
 8019568:	f8c2 c008 	str.w	ip, [r2, #8]
 801956c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8019570:	6193      	str	r3, [r2, #24]
 8019572:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8019576:	b009      	add	sp, #36	; 0x24
 8019578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801957c:	4651      	mov	r1, sl
 801957e:	e7f0      	b.n	8019562 <D24_1CH_HTONS_VOL_HP+0x112>
 8019580:	24000000 	.word	0x24000000
 8019584:	00030001 	.word	0x00030001
 8019588:	00060007 	.word	0x00060007

0801958c <D32_1CH_HTONS_VOL_HP>:
 801958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019590:	6993      	ldr	r3, [r2, #24]
 8019592:	b087      	sub	sp, #28
 8019594:	4683      	mov	fp, r0
 8019596:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8019598:	9304      	str	r3, [sp, #16]
 801959a:	69d5      	ldr	r5, [r2, #28]
 801959c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 801959e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80195a2:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 80195a6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80195aa:	2800      	cmp	r0, #0
 80195ac:	d077      	beq.n	801969e <D32_1CH_HTONS_VOL_HP+0x112>
 80195ae:	460f      	mov	r7, r1
 80195b0:	46f1      	mov	r9, lr
 80195b2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80195b6:	f8cd 8000 	str.w	r8, [sp]
 80195ba:	4e3a      	ldr	r6, [pc, #232]	; (80196a4 <D32_1CH_HTONS_VOL_HP+0x118>)
 80195bc:	469e      	mov	lr, r3
 80195be:	46a0      	mov	r8, r4
 80195c0:	9103      	str	r1, [sp, #12]
 80195c2:	9205      	str	r2, [sp, #20]
 80195c4:	f85b 4b04 	ldr.w	r4, [fp], #4
 80195c8:	ba64      	rev16	r4, r4
 80195ca:	b2e0      	uxtb	r0, r4
 80195cc:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80195d0:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80195d4:	0e24      	lsrs	r4, r4, #24
 80195d6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80195da:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80195de:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 80195e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80195e6:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80195ea:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 80195ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80195f2:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80195f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80195fa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80195fe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8019602:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019606:	f3c5 0009 	ubfx	r0, r5, #0, #10
 801960a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801960e:	4826      	ldr	r0, [pc, #152]	; (80196a8 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8019610:	fb23 c400 	smlad	r4, r3, r0, ip
 8019614:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8019618:	fb21 4402 	smlad	r4, r1, r2, r4
 801961c:	4823      	ldr	r0, [pc, #140]	; (80196ac <D32_1CH_HTONS_VOL_HP+0x120>)
 801961e:	fb23 ec00 	smlad	ip, r3, r0, lr
 8019622:	4823      	ldr	r0, [pc, #140]	; (80196b0 <D32_1CH_HTONS_VOL_HP+0x124>)
 8019624:	fb21 cc00 	smlad	ip, r1, r0, ip
 8019628:	2201      	movs	r2, #1
 801962a:	fb23 f302 	smuad	r3, r3, r2
 801962e:	4821      	ldr	r0, [pc, #132]	; (80196b4 <D32_1CH_HTONS_VOL_HP+0x128>)
 8019630:	fb21 3e00 	smlad	lr, r1, r0, r3
 8019634:	9b00      	ldr	r3, [sp, #0]
 8019636:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 801963a:	4423      	add	r3, r4
 801963c:	eba3 0209 	sub.w	r2, r3, r9
 8019640:	46a1      	mov	r9, r4
 8019642:	17d1      	asrs	r1, r2, #31
 8019644:	fba2 230a 	umull	r2, r3, r2, sl
 8019648:	e9cd 2300 	strd	r2, r3, [sp]
 801964c:	fb0a 3301 	mla	r3, sl, r1, r3
 8019650:	9301      	str	r3, [sp, #4]
 8019652:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019656:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 801965a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801965e:	f143 0300 	adc.w	r3, r3, #0
 8019662:	0399      	lsls	r1, r3, #14
 8019664:	005b      	lsls	r3, r3, #1
 8019666:	9300      	str	r3, [sp, #0]
 8019668:	2300      	movs	r3, #0
 801966a:	fbc8 2301 	smlal	r2, r3, r8, r1
 801966e:	109b      	asrs	r3, r3, #2
 8019670:	f303 030f 	ssat	r3, #16, r3
 8019674:	f827 3b02 	strh.w	r3, [r7], #2
 8019678:	9b03      	ldr	r3, [sp, #12]
 801967a:	429f      	cmp	r7, r3
 801967c:	d1a2      	bne.n	80195c4 <D32_1CH_HTONS_VOL_HP+0x38>
 801967e:	4673      	mov	r3, lr
 8019680:	f8dd 8000 	ldr.w	r8, [sp]
 8019684:	9a05      	ldr	r2, [sp, #20]
 8019686:	6093      	str	r3, [r2, #8]
 8019688:	2000      	movs	r0, #0
 801968a:	9b04      	ldr	r3, [sp, #16]
 801968c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8019690:	61d5      	str	r5, [r2, #28]
 8019692:	6193      	str	r3, [r2, #24]
 8019694:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8019698:	b007      	add	sp, #28
 801969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801969e:	4674      	mov	r4, lr
 80196a0:	e7f1      	b.n	8019686 <D32_1CH_HTONS_VOL_HP+0xfa>
 80196a2:	bf00      	nop
 80196a4:	24000000 	.word	0x24000000
 80196a8:	00060003 	.word	0x00060003
 80196ac:	000a000c 	.word	0x000a000c
 80196b0:	000c000a 	.word	0x000c000a
 80196b4:	00030006 	.word	0x00030006

080196b8 <D48_1CH_HTONS_VOL_HP>:
 80196b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196bc:	6b17      	ldr	r7, [r2, #48]	; 0x30
 80196be:	b087      	sub	sp, #28
 80196c0:	6993      	ldr	r3, [r2, #24]
 80196c2:	9701      	str	r7, [sp, #4]
 80196c4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80196c6:	6a17      	ldr	r7, [r2, #32]
 80196c8:	9304      	str	r3, [sp, #16]
 80196ca:	69d6      	ldr	r6, [r2, #28]
 80196cc:	9702      	str	r7, [sp, #8]
 80196ce:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 80196d2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80196d6:	2d00      	cmp	r5, #0
 80196d8:	f000 8093 	beq.w	8019802 <D48_1CH_HTONS_VOL_HP+0x14a>
 80196dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80196e0:	f1a1 0b02 	sub.w	fp, r1, #2
 80196e4:	46f2      	mov	sl, lr
 80196e6:	4f48      	ldr	r7, [pc, #288]	; (8019808 <D48_1CH_HTONS_VOL_HP+0x150>)
 80196e8:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 80196ec:	469e      	mov	lr, r3
 80196ee:	9205      	str	r2, [sp, #20]
 80196f0:	9103      	str	r1, [sp, #12]
 80196f2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80196f6:	3006      	adds	r0, #6
 80196f8:	ba5b      	rev16	r3, r3
 80196fa:	fa92 f992 	rev16.w	r9, r2
 80196fe:	b2dd      	uxtb	r5, r3
 8019700:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019704:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019708:	0e1b      	lsrs	r3, r3, #24
 801970a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801970e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8019712:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8019716:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 801971a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801971e:	fa5f f289 	uxtb.w	r2, r9
 8019722:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8019726:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801972a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801972e:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8019732:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8019736:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 801973a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801973e:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8019742:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019746:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 801974a:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 801974e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019752:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8019756:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801975a:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 801975e:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8019762:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8019766:	4b29      	ldr	r3, [pc, #164]	; (801980c <D48_1CH_HTONS_VOL_HP+0x154>)
 8019768:	fb28 c103 	smlad	r1, r8, r3, ip
 801976c:	4b28      	ldr	r3, [pc, #160]	; (8019810 <D48_1CH_HTONS_VOL_HP+0x158>)
 801976e:	fb25 1103 	smlad	r1, r5, r3, r1
 8019772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019776:	fb22 1903 	smlad	r9, r2, r3, r1
 801977a:	4b26      	ldr	r3, [pc, #152]	; (8019814 <D48_1CH_HTONS_VOL_HP+0x15c>)
 801977c:	fb28 ec03 	smlad	ip, r8, r3, lr
 8019780:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8019784:	fb25 cc03 	smlad	ip, r5, r3, ip
 8019788:	4b23      	ldr	r3, [pc, #140]	; (8019818 <D48_1CH_HTONS_VOL_HP+0x160>)
 801978a:	fb22 cc03 	smlad	ip, r2, r3, ip
 801978e:	2101      	movs	r1, #1
 8019790:	fb28 f801 	smuad	r8, r8, r1
 8019794:	4b21      	ldr	r3, [pc, #132]	; (801981c <D48_1CH_HTONS_VOL_HP+0x164>)
 8019796:	fb25 8503 	smlad	r5, r5, r3, r8
 801979a:	4b21      	ldr	r3, [pc, #132]	; (8019820 <D48_1CH_HTONS_VOL_HP+0x168>)
 801979c:	fb22 5e03 	smlad	lr, r2, r3, r5
 80197a0:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 80197a4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80197a8:	190a      	adds	r2, r1, r4
 80197aa:	9c02      	ldr	r4, [sp, #8]
 80197ac:	eba2 020a 	sub.w	r2, r2, sl
 80197b0:	468a      	mov	sl, r1
 80197b2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80197b6:	fba2 2304 	umull	r2, r3, r2, r4
 80197ba:	fb04 3309 	mla	r3, r4, r9, r3
 80197be:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 80197c2:	f04f 0900 	mov.w	r9, #0
 80197c6:	f143 0500 	adc.w	r5, r3, #0
 80197ca:	9b01      	ldr	r3, [sp, #4]
 80197cc:	032a      	lsls	r2, r5, #12
 80197ce:	006c      	lsls	r4, r5, #1
 80197d0:	fbc3 8902 	smlal	r8, r9, r3, r2
 80197d4:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80197d8:	f303 030f 	ssat	r3, #16, r3
 80197dc:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80197e0:	9b03      	ldr	r3, [sp, #12]
 80197e2:	4283      	cmp	r3, r0
 80197e4:	d185      	bne.n	80196f2 <D48_1CH_HTONS_VOL_HP+0x3a>
 80197e6:	4673      	mov	r3, lr
 80197e8:	9a05      	ldr	r2, [sp, #20]
 80197ea:	6093      	str	r3, [r2, #8]
 80197ec:	2000      	movs	r0, #0
 80197ee:	9b04      	ldr	r3, [sp, #16]
 80197f0:	f8c2 c00c 	str.w	ip, [r2, #12]
 80197f4:	61d6      	str	r6, [r2, #28]
 80197f6:	6193      	str	r3, [r2, #24]
 80197f8:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80197fc:	b007      	add	sp, #28
 80197fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019802:	4671      	mov	r1, lr
 8019804:	e7f1      	b.n	80197ea <D48_1CH_HTONS_VOL_HP+0x132>
 8019806:	bf00      	nop
 8019808:	24000000 	.word	0x24000000
 801980c:	000f000a 	.word	0x000f000a
 8019810:	00060003 	.word	0x00060003
 8019814:	00150019 	.word	0x00150019
 8019818:	00190015 	.word	0x00190015
 801981c:	00030006 	.word	0x00030006
 8019820:	000a000f 	.word	0x000a000f

08019824 <D64_1CH_HTONS_VOL_HP>:
 8019824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019828:	6b15      	ldr	r5, [r2, #48]	; 0x30
 801982a:	b089      	sub	sp, #36	; 0x24
 801982c:	6993      	ldr	r3, [r2, #24]
 801982e:	4686      	mov	lr, r0
 8019830:	9503      	str	r5, [sp, #12]
 8019832:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8019834:	6a15      	ldr	r5, [r2, #32]
 8019836:	9306      	str	r3, [sp, #24]
 8019838:	69d6      	ldr	r6, [r2, #28]
 801983a:	9504      	str	r5, [sp, #16]
 801983c:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 8019840:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8019844:	2800      	cmp	r0, #0
 8019846:	f000 80a4 	beq.w	8019992 <D64_1CH_HTONS_VOL_HP+0x16e>
 801984a:	460f      	mov	r7, r1
 801984c:	46f1      	mov	r9, lr
 801984e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8019852:	4d56      	ldr	r5, [pc, #344]	; (80199ac <D64_1CH_HTONS_VOL_HP+0x188>)
 8019854:	46a2      	mov	sl, r4
 8019856:	469e      	mov	lr, r3
 8019858:	9105      	str	r1, [sp, #20]
 801985a:	9207      	str	r2, [sp, #28]
 801985c:	f859 1b08 	ldr.w	r1, [r9], #8
 8019860:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8019864:	ba49      	rev16	r1, r1
 8019866:	fa93 fb93 	rev16.w	fp, r3
 801986a:	b2cb      	uxtb	r3, r1
 801986c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8019870:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8019874:	0e09      	lsrs	r1, r1, #24
 8019876:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 801987a:	fa5f f38b 	uxtb.w	r3, fp
 801987e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019882:	4426      	add	r6, r4
 8019884:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8019888:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801988c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8019890:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8019894:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019898:	f3cb 2307 	ubfx	r3, fp, #8, #8
 801989c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80198a0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80198a4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80198a8:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 80198ac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80198b0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80198b4:	f3cb 4607 	ubfx	r6, fp, #16, #8
 80198b8:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 80198bc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80198c0:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80198c4:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 80198c8:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 80198cc:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80198d0:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 80198d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80198d8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80198dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80198e0:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 80198e4:	f3c6 0409 	ubfx	r4, r6, #0, #10
 80198e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80198ec:	f3cb 0009 	ubfx	r0, fp, #0, #10
 80198f0:	ea4f 269b 	mov.w	r6, fp, lsr #10
 80198f4:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 80198f8:	482d      	ldr	r0, [pc, #180]	; (80199b0 <D64_1CH_HTONS_VOL_HP+0x18c>)
 80198fa:	fb22 cc00 	smlad	ip, r2, r0, ip
 80198fe:	482d      	ldr	r0, [pc, #180]	; (80199b4 <D64_1CH_HTONS_VOL_HP+0x190>)
 8019900:	fb21 cc00 	smlad	ip, r1, r0, ip
 8019904:	482c      	ldr	r0, [pc, #176]	; (80199b8 <D64_1CH_HTONS_VOL_HP+0x194>)
 8019906:	fb23 cc00 	smlad	ip, r3, r0, ip
 801990a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801990e:	fb2b c404 	smlad	r4, fp, r4, ip
 8019912:	482a      	ldr	r0, [pc, #168]	; (80199bc <D64_1CH_HTONS_VOL_HP+0x198>)
 8019914:	fb22 ec00 	smlad	ip, r2, r0, lr
 8019918:	fb2b cc10 	smladx	ip, fp, r0, ip
 801991c:	4828      	ldr	r0, [pc, #160]	; (80199c0 <D64_1CH_HTONS_VOL_HP+0x19c>)
 801991e:	fb21 cc00 	smlad	ip, r1, r0, ip
 8019922:	fb23 cc10 	smladx	ip, r3, r0, ip
 8019926:	f04f 0e01 	mov.w	lr, #1
 801992a:	fb22 f20e 	smuad	r2, r2, lr
 801992e:	4825      	ldr	r0, [pc, #148]	; (80199c4 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8019930:	fb21 2100 	smlad	r1, r1, r0, r2
 8019934:	4a24      	ldr	r2, [pc, #144]	; (80199c8 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8019936:	fb23 1302 	smlad	r3, r3, r2, r1
 801993a:	4a24      	ldr	r2, [pc, #144]	; (80199cc <D64_1CH_HTONS_VOL_HP+0x1a8>)
 801993c:	fb2b 3e02 	smlad	lr, fp, r2, r3
 8019940:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8019944:	eb04 0208 	add.w	r2, r4, r8
 8019948:	eba2 020a 	sub.w	r2, r2, sl
 801994c:	46a2      	mov	sl, r4
 801994e:	4610      	mov	r0, r2
 8019950:	17d1      	asrs	r1, r2, #31
 8019952:	e9cd 0100 	strd	r0, r1, [sp]
 8019956:	9904      	ldr	r1, [sp, #16]
 8019958:	9801      	ldr	r0, [sp, #4]
 801995a:	fba2 2301 	umull	r2, r3, r2, r1
 801995e:	fb01 3300 	mla	r3, r1, r0, r3
 8019962:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 8019966:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801996a:	f143 0100 	adc.w	r1, r3, #0
 801996e:	9b03      	ldr	r3, [sp, #12]
 8019970:	02ca      	lsls	r2, r1, #11
 8019972:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8019976:	2100      	movs	r1, #0
 8019978:	fbc3 0102 	smlal	r0, r1, r3, r2
 801997c:	108b      	asrs	r3, r1, #2
 801997e:	f303 030f 	ssat	r3, #16, r3
 8019982:	f827 3b02 	strh.w	r3, [r7], #2
 8019986:	9b05      	ldr	r3, [sp, #20]
 8019988:	429f      	cmp	r7, r3
 801998a:	f47f af67 	bne.w	801985c <D64_1CH_HTONS_VOL_HP+0x38>
 801998e:	4673      	mov	r3, lr
 8019990:	9a07      	ldr	r2, [sp, #28]
 8019992:	6093      	str	r3, [r2, #8]
 8019994:	2000      	movs	r0, #0
 8019996:	9b06      	ldr	r3, [sp, #24]
 8019998:	f8c2 c00c 	str.w	ip, [r2, #12]
 801999c:	61d6      	str	r6, [r2, #28]
 801999e:	6193      	str	r3, [r2, #24]
 80199a0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80199a4:	b009      	add	sp, #36	; 0x24
 80199a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199aa:	bf00      	nop
 80199ac:	24000000 	.word	0x24000000
 80199b0:	001c0015 	.word	0x001c0015
 80199b4:	000f000a 	.word	0x000f000a
 80199b8:	00060003 	.word	0x00060003
 80199bc:	0024002a 	.word	0x0024002a
 80199c0:	002e0030 	.word	0x002e0030
 80199c4:	00030006 	.word	0x00030006
 80199c8:	000a000f 	.word	0x000a000f
 80199cc:	0015001c 	.word	0x0015001c

080199d0 <D80_1CH_HTONS_VOL_HP>:
 80199d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199d4:	6913      	ldr	r3, [r2, #16]
 80199d6:	b089      	sub	sp, #36	; 0x24
 80199d8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80199da:	9301      	str	r3, [sp, #4]
 80199dc:	9603      	str	r6, [sp, #12]
 80199de:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80199e0:	6a16      	ldr	r6, [r2, #32]
 80199e2:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 80199e6:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 80199ea:	9306      	str	r3, [sp, #24]
 80199ec:	9604      	str	r6, [sp, #16]
 80199ee:	69d3      	ldr	r3, [r2, #28]
 80199f0:	2c00      	cmp	r4, #0
 80199f2:	f000 80ce 	beq.w	8019b92 <D80_1CH_HTONS_VOL_HP+0x1c2>
 80199f6:	3902      	subs	r1, #2
 80199f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80199fc:	4e66      	ldr	r6, [pc, #408]	; (8019b98 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 80199fe:	469e      	mov	lr, r3
 8019a00:	9102      	str	r1, [sp, #8]
 8019a02:	46aa      	mov	sl, r5
 8019a04:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8019a08:	9207      	str	r2, [sp, #28]
 8019a0a:	9105      	str	r1, [sp, #20]
 8019a0c:	6883      	ldr	r3, [r0, #8]
 8019a0e:	e9d0 4200 	ldrd	r4, r2, [r0]
 8019a12:	300a      	adds	r0, #10
 8019a14:	ba64      	rev16	r4, r4
 8019a16:	ba52      	rev16	r2, r2
 8019a18:	fa93 fb93 	rev16.w	fp, r3
 8019a1c:	b2e5      	uxtb	r5, r4
 8019a1e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8019a22:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8019a26:	0e24      	lsrs	r4, r4, #24
 8019a28:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8019a2c:	b2d5      	uxtb	r5, r2
 8019a2e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019a32:	44c6      	add	lr, r8
 8019a34:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019a38:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8019a3c:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8019a40:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8019a44:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019a48:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8019a4c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8019a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019a54:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8019a58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019a5c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8019a60:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8019a64:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8019a68:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8019a6c:	0e12      	lsrs	r2, r2, #24
 8019a6e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8019a72:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8019a76:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8019a7a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8019a7e:	fa5f fb8b 	uxtb.w	fp, fp
 8019a82:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8019a86:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8019a8a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8019a8e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8019a92:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8019a96:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8019a9a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019a9e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8019aa2:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 8019aa6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8019aaa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8019aae:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 8019ab2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8019ab6:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8019aba:	f3ce 0109 	ubfx	r1, lr, #0, #10
 8019abe:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8019ac2:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8019ac6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8019aca:	4934      	ldr	r1, [pc, #208]	; (8019b9c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8019acc:	fb23 cc01 	smlad	ip, r3, r1, ip
 8019ad0:	4933      	ldr	r1, [pc, #204]	; (8019ba0 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8019ad2:	fb24 cc01 	smlad	ip, r4, r1, ip
 8019ad6:	4933      	ldr	r1, [pc, #204]	; (8019ba4 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8019ad8:	fb28 cc01 	smlad	ip, r8, r1, ip
 8019adc:	4932      	ldr	r1, [pc, #200]	; (8019ba8 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8019ade:	fb22 cc01 	smlad	ip, r2, r1, ip
 8019ae2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8019ae6:	fb2b c901 	smlad	r9, fp, r1, ip
 8019aea:	4930      	ldr	r1, [pc, #192]	; (8019bac <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8019aec:	fb23 7701 	smlad	r7, r3, r1, r7
 8019af0:	492f      	ldr	r1, [pc, #188]	; (8019bb0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8019af2:	fb24 7701 	smlad	r7, r4, r1, r7
 8019af6:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 8019afa:	fb28 7c0c 	smlad	ip, r8, ip, r7
 8019afe:	492d      	ldr	r1, [pc, #180]	; (8019bb4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8019b00:	fb22 cc01 	smlad	ip, r2, r1, ip
 8019b04:	492c      	ldr	r1, [pc, #176]	; (8019bb8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8019b06:	fb2b cc01 	smlad	ip, fp, r1, ip
 8019b0a:	2101      	movs	r1, #1
 8019b0c:	fb23 f301 	smuad	r3, r3, r1
 8019b10:	492a      	ldr	r1, [pc, #168]	; (8019bbc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8019b12:	fb24 3401 	smlad	r4, r4, r1, r3
 8019b16:	492a      	ldr	r1, [pc, #168]	; (8019bc0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8019b18:	fb28 4101 	smlad	r1, r8, r1, r4
 8019b1c:	4f29      	ldr	r7, [pc, #164]	; (8019bc4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8019b1e:	fb22 1207 	smlad	r2, r2, r7, r1
 8019b22:	4f29      	ldr	r7, [pc, #164]	; (8019bc8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8019b24:	fb2b 2707 	smlad	r7, fp, r7, r2
 8019b28:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 8019b2c:	9b01      	ldr	r3, [sp, #4]
 8019b2e:	9c04      	ldr	r4, [sp, #16]
 8019b30:	440b      	add	r3, r1
 8019b32:	eba3 020a 	sub.w	r2, r3, sl
 8019b36:	468a      	mov	sl, r1
 8019b38:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8019b3c:	fba2 2304 	umull	r2, r3, r2, r4
 8019b40:	fb04 3309 	mla	r3, r4, r9, r3
 8019b44:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8019b48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019b4c:	f143 0500 	adc.w	r5, r3, #0
 8019b50:	006b      	lsls	r3, r5, #1
 8019b52:	02aa      	lsls	r2, r5, #10
 8019b54:	2500      	movs	r5, #0
 8019b56:	9301      	str	r3, [sp, #4]
 8019b58:	9b03      	ldr	r3, [sp, #12]
 8019b5a:	fbc3 4502 	smlal	r4, r5, r3, r2
 8019b5e:	9a02      	ldr	r2, [sp, #8]
 8019b60:	10ab      	asrs	r3, r5, #2
 8019b62:	f303 030f 	ssat	r3, #16, r3
 8019b66:	f822 3f02 	strh.w	r3, [r2, #2]!
 8019b6a:	9b05      	ldr	r3, [sp, #20]
 8019b6c:	9202      	str	r2, [sp, #8]
 8019b6e:	4298      	cmp	r0, r3
 8019b70:	f47f af4c 	bne.w	8019a0c <D80_1CH_HTONS_VOL_HP+0x3c>
 8019b74:	4673      	mov	r3, lr
 8019b76:	9a07      	ldr	r2, [sp, #28]
 8019b78:	61d3      	str	r3, [r2, #28]
 8019b7a:	2000      	movs	r0, #0
 8019b7c:	9b01      	ldr	r3, [sp, #4]
 8019b7e:	6097      	str	r7, [r2, #8]
 8019b80:	f8c2 c00c 	str.w	ip, [r2, #12]
 8019b84:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8019b88:	9b06      	ldr	r3, [sp, #24]
 8019b8a:	6193      	str	r3, [r2, #24]
 8019b8c:	b009      	add	sp, #36	; 0x24
 8019b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b92:	4629      	mov	r1, r5
 8019b94:	e7f0      	b.n	8019b78 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8019b96:	bf00      	nop
 8019b98:	24000000 	.word	0x24000000
 8019b9c:	002d0024 	.word	0x002d0024
 8019ba0:	001c0015 	.word	0x001c0015
 8019ba4:	000f000a 	.word	0x000f000a
 8019ba8:	00060003 	.word	0x00060003
 8019bac:	0037003f 	.word	0x0037003f
 8019bb0:	00450049 	.word	0x00450049
 8019bb4:	00490045 	.word	0x00490045
 8019bb8:	003f0037 	.word	0x003f0037
 8019bbc:	00030006 	.word	0x00030006
 8019bc0:	000a000f 	.word	0x000a000f
 8019bc4:	0015001c 	.word	0x0015001c
 8019bc8:	0024002d 	.word	0x0024002d

08019bcc <D128_1CH_HTONS_VOL_HP>:
 8019bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bd0:	6914      	ldr	r4, [r2, #16]
 8019bd2:	b08d      	sub	sp, #52	; 0x34
 8019bd4:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8019bd6:	9404      	str	r4, [sp, #16]
 8019bd8:	6954      	ldr	r4, [r2, #20]
 8019bda:	920b      	str	r2, [sp, #44]	; 0x2c
 8019bdc:	9405      	str	r4, [sp, #20]
 8019bde:	6994      	ldr	r4, [r2, #24]
 8019be0:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8019be4:	940a      	str	r4, [sp, #40]	; 0x28
 8019be6:	6894      	ldr	r4, [r2, #8]
 8019be8:	9403      	str	r4, [sp, #12]
 8019bea:	68d4      	ldr	r4, [r2, #12]
 8019bec:	9402      	str	r4, [sp, #8]
 8019bee:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8019bf0:	6a12      	ldr	r2, [r2, #32]
 8019bf2:	9407      	str	r4, [sp, #28]
 8019bf4:	9208      	str	r2, [sp, #32]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	f000 812e 	beq.w	8019e58 <D128_1CH_HTONS_VOL_HP+0x28c>
 8019bfc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8019c00:	f100 0b10 	add.w	fp, r0, #16
 8019c04:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8019e98 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8019c08:	9106      	str	r1, [sp, #24]
 8019c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8019c0c:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8019c10:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8019c14:	ba40      	rev16	r0, r0
 8019c16:	ba52      	rev16	r2, r2
 8019c18:	ba5b      	rev16	r3, r3
 8019c1a:	ba76      	rev16	r6, r6
 8019c1c:	b2c5      	uxtb	r5, r0
 8019c1e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8019c22:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8019c26:	0e00      	lsrs	r0, r0, #24
 8019c28:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8019c2c:	b2d5      	uxtb	r5, r2
 8019c2e:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8019c32:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8019c36:	44bc      	add	ip, r7
 8019c38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019c3c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8019c40:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8019c44:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8019c48:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8019c4c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8019c50:	0e12      	lsrs	r2, r2, #24
 8019c52:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8019c56:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8019c5a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8019c5e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019c62:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8019c66:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8019c6a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8019c6e:	b2da      	uxtb	r2, r3
 8019c70:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8019c74:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8019c78:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8019c7c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8019c80:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8019c84:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8019c88:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8019c8c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019c90:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8019c94:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019c98:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8019c9c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8019ca0:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8019ca4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8019ca8:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8019cac:	0e1b      	lsrs	r3, r3, #24
 8019cae:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8019cb2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8019cb6:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8019cba:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8019cbe:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8019cc2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8019cc6:	b2f3      	uxtb	r3, r6
 8019cc8:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8019ccc:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8019cd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019cd4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8019cd8:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8019cdc:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 8019ce0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8019ce4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8019ce8:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8019cec:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8019cf0:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8019cf4:	0e36      	lsrs	r6, r6, #24
 8019cf6:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8019cfa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8019cfe:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8019d02:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8019d06:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 8019d0a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019d0e:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8019d12:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8019d16:	9101      	str	r1, [sp, #4]
 8019d18:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8019d1c:	9b02      	ldr	r3, [sp, #8]
 8019d1e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8019d22:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019d26:	4611      	mov	r1, r2
 8019d28:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8019d2c:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8019d30:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8019d34:	4a49      	ldr	r2, [pc, #292]	; (8019e5c <D128_1CH_HTONS_VOL_HP+0x290>)
 8019d36:	fb2e 3202 	smlad	r2, lr, r2, r3
 8019d3a:	4b49      	ldr	r3, [pc, #292]	; (8019e60 <D128_1CH_HTONS_VOL_HP+0x294>)
 8019d3c:	fb27 2203 	smlad	r2, r7, r3, r2
 8019d40:	4b48      	ldr	r3, [pc, #288]	; (8019e64 <D128_1CH_HTONS_VOL_HP+0x298>)
 8019d42:	fb25 2203 	smlad	r2, r5, r3, r2
 8019d46:	4b48      	ldr	r3, [pc, #288]	; (8019e68 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8019d48:	fb24 2203 	smlad	r2, r4, r3, r2
 8019d4c:	4b47      	ldr	r3, [pc, #284]	; (8019e6c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8019d4e:	fb20 2803 	smlad	r8, r0, r3, r2
 8019d52:	4b47      	ldr	r3, [pc, #284]	; (8019e70 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8019d54:	9a01      	ldr	r2, [sp, #4]
 8019d56:	fb22 8203 	smlad	r2, r2, r3, r8
 8019d5a:	4b46      	ldr	r3, [pc, #280]	; (8019e74 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8019d5c:	9102      	str	r1, [sp, #8]
 8019d5e:	fb21 2203 	smlad	r2, r1, r3, r2
 8019d62:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8019d66:	fb26 2308 	smlad	r3, r6, r8, r2
 8019d6a:	4619      	mov	r1, r3
 8019d6c:	9a03      	ldr	r2, [sp, #12]
 8019d6e:	4b42      	ldr	r3, [pc, #264]	; (8019e78 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8019d70:	fb2e 2803 	smlad	r8, lr, r3, r2
 8019d74:	4b41      	ldr	r3, [pc, #260]	; (8019e7c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8019d76:	fb27 8a03 	smlad	sl, r7, r3, r8
 8019d7a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8019e9c <D128_1CH_HTONS_VOL_HP+0x2d0>
 8019d7e:	fb25 a808 	smlad	r8, r5, r8, sl
 8019d82:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8019ea0 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8019d86:	fb24 880a 	smlad	r8, r4, sl, r8
 8019d8a:	f8df a118 	ldr.w	sl, [pc, #280]	; 8019ea4 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8019d8e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8019d92:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8019ea8 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8019d96:	9b01      	ldr	r3, [sp, #4]
 8019d98:	fb23 aa08 	smlad	sl, r3, r8, sl
 8019d9c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8019eac <D128_1CH_HTONS_VOL_HP+0x2e0>
 8019da0:	9a02      	ldr	r2, [sp, #8]
 8019da2:	fb22 a808 	smlad	r8, r2, r8, sl
 8019da6:	f8df a108 	ldr.w	sl, [pc, #264]	; 8019eb0 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8019daa:	fb26 830a 	smlad	r3, r6, sl, r8
 8019dae:	f04f 0801 	mov.w	r8, #1
 8019db2:	9302      	str	r3, [sp, #8]
 8019db4:	fb2e fe08 	smuad	lr, lr, r8
 8019db8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8019eb4 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8019dbc:	fb27 ee08 	smlad	lr, r7, r8, lr
 8019dc0:	4f2f      	ldr	r7, [pc, #188]	; (8019e80 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8019dc2:	fb25 ee07 	smlad	lr, r5, r7, lr
 8019dc6:	4f2f      	ldr	r7, [pc, #188]	; (8019e84 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8019dc8:	fb24 ee07 	smlad	lr, r4, r7, lr
 8019dcc:	4f2e      	ldr	r7, [pc, #184]	; (8019e88 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8019dce:	fb20 ee07 	smlad	lr, r0, r7, lr
 8019dd2:	4f2e      	ldr	r7, [pc, #184]	; (8019e8c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8019dd4:	9b01      	ldr	r3, [sp, #4]
 8019dd6:	fb23 ee07 	smlad	lr, r3, r7, lr
 8019dda:	4f2d      	ldr	r7, [pc, #180]	; (8019e90 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8019ddc:	fb22 e707 	smlad	r7, r2, r7, lr
 8019de0:	4b2c      	ldr	r3, [pc, #176]	; (8019e94 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8019de2:	fb26 7303 	smlad	r3, r6, r3, r7
 8019de6:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 8019dea:	9303      	str	r3, [sp, #12]
 8019dec:	9b04      	ldr	r3, [sp, #16]
 8019dee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8019df2:	9f08      	ldr	r7, [sp, #32]
 8019df4:	2100      	movs	r1, #0
 8019df6:	4433      	add	r3, r6
 8019df8:	f10b 0b10 	add.w	fp, fp, #16
 8019dfc:	461a      	mov	r2, r3
 8019dfe:	9b05      	ldr	r3, [sp, #20]
 8019e00:	9605      	str	r6, [sp, #20]
 8019e02:	1ad2      	subs	r2, r2, r3
 8019e04:	17d5      	asrs	r5, r2, #31
 8019e06:	fba2 2307 	umull	r2, r3, r2, r7
 8019e0a:	1814      	adds	r4, r2, r0
 8019e0c:	fb07 3305 	mla	r3, r7, r5, r3
 8019e10:	eb43 0501 	adc.w	r5, r3, r1
 8019e14:	006b      	lsls	r3, r5, #1
 8019e16:	022a      	lsls	r2, r5, #8
 8019e18:	9304      	str	r3, [sp, #16]
 8019e1a:	9b07      	ldr	r3, [sp, #28]
 8019e1c:	fbc3 0102 	smlal	r0, r1, r3, r2
 8019e20:	9a06      	ldr	r2, [sp, #24]
 8019e22:	108b      	asrs	r3, r1, #2
 8019e24:	f303 030f 	ssat	r3, #16, r3
 8019e28:	f822 3b02 	strh.w	r3, [r2], #2
 8019e2c:	4613      	mov	r3, r2
 8019e2e:	9206      	str	r2, [sp, #24]
 8019e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e32:	4293      	cmp	r3, r2
 8019e34:	f47f aeea 	bne.w	8019c0c <D128_1CH_HTONS_VOL_HP+0x40>
 8019e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e3a:	2000      	movs	r0, #0
 8019e3c:	9903      	ldr	r1, [sp, #12]
 8019e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e40:	6099      	str	r1, [r3, #8]
 8019e42:	9902      	ldr	r1, [sp, #8]
 8019e44:	f8c3 c01c 	str.w	ip, [r3, #28]
 8019e48:	60d9      	str	r1, [r3, #12]
 8019e4a:	9904      	ldr	r1, [sp, #16]
 8019e4c:	619a      	str	r2, [r3, #24]
 8019e4e:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8019e52:	b00d      	add	sp, #52	; 0x34
 8019e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e58:	9e05      	ldr	r6, [sp, #20]
 8019e5a:	e7ed      	b.n	8019e38 <D128_1CH_HTONS_VOL_HP+0x26c>
 8019e5c:	00780069 	.word	0x00780069
 8019e60:	005b004e 	.word	0x005b004e
 8019e64:	00420037 	.word	0x00420037
 8019e68:	002d0024 	.word	0x002d0024
 8019e6c:	001c0015 	.word	0x001c0015
 8019e70:	000f000a 	.word	0x000f000a
 8019e74:	00060003 	.word	0x00060003
 8019e78:	00880096 	.word	0x00880096
 8019e7c:	00a200ac 	.word	0x00a200ac
 8019e80:	000a000f 	.word	0x000a000f
 8019e84:	0015001c 	.word	0x0015001c
 8019e88:	0024002d 	.word	0x0024002d
 8019e8c:	00370042 	.word	0x00370042
 8019e90:	004e005b 	.word	0x004e005b
 8019e94:	00690078 	.word	0x00690078
 8019e98:	24000000 	.word	0x24000000
 8019e9c:	00b400ba 	.word	0x00b400ba
 8019ea0:	00be00c0 	.word	0x00be00c0
 8019ea4:	00c000be 	.word	0x00c000be
 8019ea8:	00ba00b4 	.word	0x00ba00b4
 8019eac:	00ac00a2 	.word	0x00ac00a2
 8019eb0:	00960088 	.word	0x00960088
 8019eb4:	00030006 	.word	0x00030006

08019eb8 <PDM_Filter_Init>:
 8019eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eba:	2240      	movs	r2, #64	; 0x40
 8019ebc:	2100      	movs	r1, #0
 8019ebe:	4604      	mov	r4, r0
 8019ec0:	300c      	adds	r0, #12
 8019ec2:	f000 fa25 	bl	801a310 <memset>
 8019ec6:	4a56      	ldr	r2, [pc, #344]	; (801a020 <PDM_Filter_Init+0x168>)
 8019ec8:	4856      	ldr	r0, [pc, #344]	; (801a024 <PDM_Filter_Init+0x16c>)
 8019eca:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8019ece:	6813      	ldr	r3, [r2, #0]
 8019ed0:	f24c 2540 	movw	r5, #49728	; 0xc240
 8019ed4:	f023 0301 	bic.w	r3, r3, #1
 8019ed8:	6013      	str	r3, [r2, #0]
 8019eda:	6803      	ldr	r3, [r0, #0]
 8019edc:	400b      	ands	r3, r1
 8019ede:	42ab      	cmp	r3, r5
 8019ee0:	d040      	beq.n	8019f64 <PDM_Filter_Init+0xac>
 8019ee2:	6803      	ldr	r3, [r0, #0]
 8019ee4:	f24c 2270 	movw	r2, #49776	; 0xc270
 8019ee8:	4019      	ands	r1, r3
 8019eea:	4291      	cmp	r1, r2
 8019eec:	d03a      	beq.n	8019f64 <PDM_Filter_Init+0xac>
 8019eee:	4b4e      	ldr	r3, [pc, #312]	; (801a028 <PDM_Filter_Init+0x170>)
 8019ef0:	2101      	movs	r1, #1
 8019ef2:	461a      	mov	r2, r3
 8019ef4:	6019      	str	r1, [r3, #0]
 8019ef6:	6813      	ldr	r3, [r2, #0]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d1fc      	bne.n	8019ef6 <PDM_Filter_Init+0x3e>
 8019efc:	4b4b      	ldr	r3, [pc, #300]	; (801a02c <PDM_Filter_Init+0x174>)
 8019efe:	494c      	ldr	r1, [pc, #304]	; (801a030 <PDM_Filter_Init+0x178>)
 8019f00:	4a4c      	ldr	r2, [pc, #304]	; (801a034 <PDM_Filter_Init+0x17c>)
 8019f02:	6019      	str	r1, [r3, #0]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	8820      	ldrh	r0, [r4, #0]
 8019f08:	4293      	cmp	r3, r2
 8019f0a:	8961      	ldrh	r1, [r4, #10]
 8019f0c:	f04f 0300 	mov.w	r3, #0
 8019f10:	8922      	ldrh	r2, [r4, #8]
 8019f12:	bf14      	ite	ne
 8019f14:	2500      	movne	r5, #0
 8019f16:	4d47      	ldreq	r5, [pc, #284]	; (801a034 <PDM_Filter_Init+0x17c>)
 8019f18:	2801      	cmp	r0, #1
 8019f1a:	61a3      	str	r3, [r4, #24]
 8019f1c:	6465      	str	r5, [r4, #68]	; 0x44
 8019f1e:	60e3      	str	r3, [r4, #12]
 8019f20:	6263      	str	r3, [r4, #36]	; 0x24
 8019f22:	6423      	str	r3, [r4, #64]	; 0x40
 8019f24:	86a1      	strh	r1, [r4, #52]	; 0x34
 8019f26:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019f28:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8019f2c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8019f30:	d936      	bls.n	8019fa0 <PDM_Filter_Init+0xe8>
 8019f32:	2003      	movs	r0, #3
 8019f34:	2302      	movs	r3, #2
 8019f36:	8862      	ldrh	r2, [r4, #2]
 8019f38:	2a01      	cmp	r2, #1
 8019f3a:	d92e      	bls.n	8019f9a <PDM_Filter_Init+0xe2>
 8019f3c:	2140      	movs	r1, #64	; 0x40
 8019f3e:	2300      	movs	r3, #0
 8019f40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019f42:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8019f46:	d101      	bne.n	8019f4c <PDM_Filter_Init+0x94>
 8019f48:	460b      	mov	r3, r1
 8019f4a:	6421      	str	r1, [r4, #64]	; 0x40
 8019f4c:	6862      	ldr	r2, [r4, #4]
 8019f4e:	b11a      	cbz	r2, 8019f58 <PDM_Filter_Init+0xa0>
 8019f50:	f043 0310 	orr.w	r3, r3, #16
 8019f54:	62e2      	str	r2, [r4, #44]	; 0x2c
 8019f56:	6423      	str	r3, [r4, #64]	; 0x40
 8019f58:	2200      	movs	r2, #0
 8019f5a:	8722      	strh	r2, [r4, #56]	; 0x38
 8019f5c:	b908      	cbnz	r0, 8019f62 <PDM_Filter_Init+0xaa>
 8019f5e:	3380      	adds	r3, #128	; 0x80
 8019f60:	6423      	str	r3, [r4, #64]	; 0x40
 8019f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f64:	4b34      	ldr	r3, [pc, #208]	; (801a038 <PDM_Filter_Init+0x180>)
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d1c0      	bne.n	8019eee <PDM_Filter_Init+0x36>
 8019f6c:	4a33      	ldr	r2, [pc, #204]	; (801a03c <PDM_Filter_Init+0x184>)
 8019f6e:	6813      	ldr	r3, [r2, #0]
 8019f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019f74:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8019f78:	d006      	beq.n	8019f88 <PDM_Filter_Init+0xd0>
 8019f7a:	6813      	ldr	r3, [r2, #0]
 8019f7c:	f240 4283 	movw	r2, #1155	; 0x483
 8019f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019f84:	4293      	cmp	r3, r2
 8019f86:	d1b2      	bne.n	8019eee <PDM_Filter_Init+0x36>
 8019f88:	4b2d      	ldr	r3, [pc, #180]	; (801a040 <PDM_Filter_Init+0x188>)
 8019f8a:	2101      	movs	r1, #1
 8019f8c:	461a      	mov	r2, r3
 8019f8e:	6019      	str	r1, [r3, #0]
 8019f90:	6813      	ldr	r3, [r2, #0]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d1fc      	bne.n	8019f90 <PDM_Filter_Init+0xd8>
 8019f96:	4b2b      	ldr	r3, [pc, #172]	; (801a044 <PDM_Filter_Init+0x18c>)
 8019f98:	e7b1      	b.n	8019efe <PDM_Filter_Init+0x46>
 8019f9a:	d03a      	beq.n	801a012 <PDM_Filter_Init+0x15a>
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	e7cd      	b.n	8019f3c <PDM_Filter_Init+0x84>
 8019fa0:	4d29      	ldr	r5, [pc, #164]	; (801a048 <PDM_Filter_Init+0x190>)
 8019fa2:	782a      	ldrb	r2, [r5, #0]
 8019fa4:	d01b      	beq.n	8019fde <PDM_Filter_Init+0x126>
 8019fa6:	2a01      	cmp	r2, #1
 8019fa8:	d001      	beq.n	8019fae <PDM_Filter_Init+0xf6>
 8019faa:	2001      	movs	r0, #1
 8019fac:	e7c3      	b.n	8019f36 <PDM_Filter_Init+0x7e>
 8019fae:	4927      	ldr	r1, [pc, #156]	; (801a04c <PDM_Filter_Init+0x194>)
 8019fb0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801a054 <PDM_Filter_Init+0x19c>
 8019fb4:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8019fb8:	4e25      	ldr	r6, [pc, #148]	; (801a050 <PDM_Filter_Init+0x198>)
 8019fba:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019fbe:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8019fc2:	ea02 0006 	and.w	r0, r2, r6
 8019fc6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8019fca:	428f      	cmp	r7, r1
 8019fcc:	ea43 0300 	orr.w	r3, r3, r0
 8019fd0:	4413      	add	r3, r2
 8019fd2:	600b      	str	r3, [r1, #0]
 8019fd4:	d1f1      	bne.n	8019fba <PDM_Filter_Init+0x102>
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	2001      	movs	r0, #1
 8019fda:	702b      	strb	r3, [r5, #0]
 8019fdc:	e7ab      	b.n	8019f36 <PDM_Filter_Init+0x7e>
 8019fde:	2a00      	cmp	r2, #0
 8019fe0:	d1a9      	bne.n	8019f36 <PDM_Filter_Init+0x7e>
 8019fe2:	491a      	ldr	r1, [pc, #104]	; (801a04c <PDM_Filter_Init+0x194>)
 8019fe4:	f8df c06c 	ldr.w	ip, [pc, #108]	; 801a054 <PDM_Filter_Init+0x19c>
 8019fe8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 8019fec:	4e18      	ldr	r6, [pc, #96]	; (801a050 <PDM_Filter_Init+0x198>)
 8019fee:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8019ff2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8019ff6:	ea02 0006 	and.w	r0, r2, r6
 8019ffa:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8019ffe:	428f      	cmp	r7, r1
 801a000:	ea43 0300 	orr.w	r3, r3, r0
 801a004:	4413      	add	r3, r2
 801a006:	600b      	str	r3, [r1, #0]
 801a008:	d1f1      	bne.n	8019fee <PDM_Filter_Init+0x136>
 801a00a:	2001      	movs	r0, #1
 801a00c:	2300      	movs	r3, #0
 801a00e:	7028      	strb	r0, [r5, #0]
 801a010:	e791      	b.n	8019f36 <PDM_Filter_Init+0x7e>
 801a012:	2220      	movs	r2, #32
 801a014:	4618      	mov	r0, r3
 801a016:	2160      	movs	r1, #96	; 0x60
 801a018:	6422      	str	r2, [r4, #64]	; 0x40
 801a01a:	4613      	mov	r3, r2
 801a01c:	e790      	b.n	8019f40 <PDM_Filter_Init+0x88>
 801a01e:	bf00      	nop
 801a020:	e0002000 	.word	0xe0002000
 801a024:	e000ed00 	.word	0xe000ed00
 801a028:	40023008 	.word	0x40023008
 801a02c:	40023000 	.word	0x40023000
 801a030:	f407a5c2 	.word	0xf407a5c2
 801a034:	b5e8b5cd 	.word	0xb5e8b5cd
 801a038:	e0042000 	.word	0xe0042000
 801a03c:	5c001000 	.word	0x5c001000
 801a040:	58024c08 	.word	0x58024c08
 801a044:	58024c00 	.word	0x58024c00
 801a048:	24000620 	.word	0x24000620
 801a04c:	23fffffc 	.word	0x23fffffc
 801a050:	000ffc00 	.word	0x000ffc00
 801a054:	3ff00000 	.word	0x3ff00000

0801a058 <PDM_Filter_setConfig>:
 801a058:	4b67      	ldr	r3, [pc, #412]	; (801a1f8 <PDM_Filter_setConfig+0x1a0>)
 801a05a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a05c:	429a      	cmp	r2, r3
 801a05e:	d128      	bne.n	801a0b2 <PDM_Filter_setConfig+0x5a>
 801a060:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801a062:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a064:	880e      	ldrh	r6, [r1, #0]
 801a066:	460d      	mov	r5, r1
 801a068:	4604      	mov	r4, r0
 801a06a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 801a06e:	1e73      	subs	r3, r6, #1
 801a070:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 801a074:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 801a078:	2b06      	cmp	r3, #6
 801a07a:	ed2d 8b02 	vpush	{d8}
 801a07e:	6421      	str	r1, [r4, #64]	; 0x40
 801a080:	b083      	sub	sp, #12
 801a082:	d820      	bhi.n	801a0c6 <PDM_Filter_setConfig+0x6e>
 801a084:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a086:	42b3      	cmp	r3, r6
 801a088:	d03d      	beq.n	801a106 <PDM_Filter_setConfig+0xae>
 801a08a:	4b5c      	ldr	r3, [pc, #368]	; (801a1fc <PDM_Filter_setConfig+0x1a4>)
 801a08c:	4013      	ands	r3, r2
 801a08e:	4333      	orrs	r3, r6
 801a090:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801a094:	6423      	str	r3, [r4, #64]	; 0x40
 801a096:	f003 030f 	and.w	r3, r3, #15
 801a09a:	2a70      	cmp	r2, #112	; 0x70
 801a09c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801a0a0:	d009      	beq.n	801a0b6 <PDM_Filter_setConfig+0x5e>
 801a0a2:	2b06      	cmp	r3, #6
 801a0a4:	d824      	bhi.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a0a6:	e8df f003 	tbb	[pc, r3]
 801a0aa:	878a      	.short	0x878a
 801a0ac:	7b7e8184 	.word	0x7b7e8184
 801a0b0:	78          	.byte	0x78
 801a0b1:	00          	.byte	0x00
 801a0b2:	2004      	movs	r0, #4
 801a0b4:	4770      	bx	lr
 801a0b6:	2b06      	cmp	r3, #6
 801a0b8:	d81a      	bhi.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a0ba:	e8df f003 	tbb	[pc, r3]
 801a0be:	8f92      	.short	0x8f92
 801a0c0:	8617898c 	.word	0x8617898c
 801a0c4:	83          	.byte	0x83
 801a0c5:	00          	.byte	0x00
 801a0c6:	4287      	cmp	r7, r0
 801a0c8:	f000 808e 	beq.w	801a1e8 <PDM_Filter_setConfig+0x190>
 801a0cc:	f117 0f0c 	cmn.w	r7, #12
 801a0d0:	f04f 0008 	mov.w	r0, #8
 801a0d4:	da11      	bge.n	801a0fa <PDM_Filter_setConfig+0xa2>
 801a0d6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 801a0da:	3040      	adds	r0, #64	; 0x40
 801a0dc:	80ab      	strh	r3, [r5, #4]
 801a0de:	886b      	ldrh	r3, [r5, #2]
 801a0e0:	8626      	strh	r6, [r4, #48]	; 0x30
 801a0e2:	8663      	strh	r3, [r4, #50]	; 0x32
 801a0e4:	b003      	add	sp, #12
 801a0e6:	ecbd 8b02 	vpop	{d8}
 801a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ec:	4b44      	ldr	r3, [pc, #272]	; (801a200 <PDM_Filter_setConfig+0x1a8>)
 801a0ee:	64a3      	str	r3, [r4, #72]	; 0x48
 801a0f0:	f117 0f0c 	cmn.w	r7, #12
 801a0f4:	f04f 0000 	mov.w	r0, #0
 801a0f8:	dbed      	blt.n	801a0d6 <PDM_Filter_setConfig+0x7e>
 801a0fa:	2f33      	cmp	r7, #51	; 0x33
 801a0fc:	dd10      	ble.n	801a120 <PDM_Filter_setConfig+0xc8>
 801a0fe:	2333      	movs	r3, #51	; 0x33
 801a100:	3040      	adds	r0, #64	; 0x40
 801a102:	80ab      	strh	r3, [r5, #4]
 801a104:	e7eb      	b.n	801a0de <PDM_Filter_setConfig+0x86>
 801a106:	4287      	cmp	r7, r0
 801a108:	d1f2      	bne.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a10a:	886b      	ldrh	r3, [r5, #2]
 801a10c:	8663      	strh	r3, [r4, #50]	; 0x32
 801a10e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a110:	2000      	movs	r0, #0
 801a112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a116:	6423      	str	r3, [r4, #64]	; 0x40
 801a118:	b003      	add	sp, #12
 801a11a:	ecbd 8b02 	vpop	{d8}
 801a11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a122:	f003 030f 	and.w	r3, r3, #15
 801a126:	3b01      	subs	r3, #1
 801a128:	2b06      	cmp	r3, #6
 801a12a:	d831      	bhi.n	801a190 <PDM_Filter_setConfig+0x138>
 801a12c:	4a35      	ldr	r2, [pc, #212]	; (801a204 <PDM_Filter_setConfig+0x1ac>)
 801a12e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801a132:	eddf 0a35 	vldr	s1, [pc, #212]	; 801a208 <PDM_Filter_setConfig+0x1b0>
 801a136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a13a:	9001      	str	r0, [sp, #4]
 801a13c:	edd3 7a07 	vldr	s15, [r3, #28]
 801a140:	ed93 8a00 	vldr	s16, [r3]
 801a144:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a148:	f004 fc82 	bl	801ea50 <powf>
 801a14c:	eef0 8a40 	vmov.f32	s17, s0
 801a150:	9801      	ldr	r0, [sp, #4]
 801a152:	ee07 7a90 	vmov	s15, r7
 801a156:	ee28 8a28 	vmul.f32	s16, s16, s17
 801a15a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801a15e:	9001      	str	r0, [sp, #4]
 801a160:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801a164:	eddf 7a29 	vldr	s15, [pc, #164]	; 801a20c <PDM_Filter_setConfig+0x1b4>
 801a168:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801a16c:	f004 fc70 	bl	801ea50 <powf>
 801a170:	ee28 8a00 	vmul.f32	s16, s16, s0
 801a174:	886b      	ldrh	r3, [r5, #2]
 801a176:	9801      	ldr	r0, [sp, #4]
 801a178:	feb8 8a48 	vrinta.f32	s16, s16
 801a17c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 801a180:	8727      	strh	r7, [r4, #56]	; 0x38
 801a182:	8663      	strh	r3, [r4, #50]	; 0x32
 801a184:	8626      	strh	r6, [r4, #48]	; 0x30
 801a186:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 801a18a:	2800      	cmp	r0, #0
 801a18c:	d0bf      	beq.n	801a10e <PDM_Filter_setConfig+0xb6>
 801a18e:	e7a9      	b.n	801a0e4 <PDM_Filter_setConfig+0x8c>
 801a190:	eddf 8a1f 	vldr	s17, [pc, #124]	; 801a210 <PDM_Filter_setConfig+0x1b8>
 801a194:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 801a214 <PDM_Filter_setConfig+0x1bc>
 801a198:	e7db      	b.n	801a152 <PDM_Filter_setConfig+0xfa>
 801a19a:	4b1f      	ldr	r3, [pc, #124]	; (801a218 <PDM_Filter_setConfig+0x1c0>)
 801a19c:	64a3      	str	r3, [r4, #72]	; 0x48
 801a19e:	e7a7      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1a0:	4b1e      	ldr	r3, [pc, #120]	; (801a21c <PDM_Filter_setConfig+0x1c4>)
 801a1a2:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1a4:	e7a4      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1a6:	4b1e      	ldr	r3, [pc, #120]	; (801a220 <PDM_Filter_setConfig+0x1c8>)
 801a1a8:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1aa:	e7a1      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1ac:	4b1d      	ldr	r3, [pc, #116]	; (801a224 <PDM_Filter_setConfig+0x1cc>)
 801a1ae:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1b0:	e79e      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1b2:	4b1d      	ldr	r3, [pc, #116]	; (801a228 <PDM_Filter_setConfig+0x1d0>)
 801a1b4:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1b6:	e79b      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1b8:	4b1c      	ldr	r3, [pc, #112]	; (801a22c <PDM_Filter_setConfig+0x1d4>)
 801a1ba:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1bc:	e798      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1be:	4b1c      	ldr	r3, [pc, #112]	; (801a230 <PDM_Filter_setConfig+0x1d8>)
 801a1c0:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1c2:	e795      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1c4:	4b1b      	ldr	r3, [pc, #108]	; (801a234 <PDM_Filter_setConfig+0x1dc>)
 801a1c6:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1c8:	e792      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1ca:	4b1b      	ldr	r3, [pc, #108]	; (801a238 <PDM_Filter_setConfig+0x1e0>)
 801a1cc:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1ce:	e78f      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1d0:	4b1a      	ldr	r3, [pc, #104]	; (801a23c <PDM_Filter_setConfig+0x1e4>)
 801a1d2:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1d4:	e78c      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1d6:	4b1a      	ldr	r3, [pc, #104]	; (801a240 <PDM_Filter_setConfig+0x1e8>)
 801a1d8:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1da:	e789      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1dc:	4b19      	ldr	r3, [pc, #100]	; (801a244 <PDM_Filter_setConfig+0x1ec>)
 801a1de:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1e0:	e786      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1e2:	4b19      	ldr	r3, [pc, #100]	; (801a248 <PDM_Filter_setConfig+0x1f0>)
 801a1e4:	64a3      	str	r3, [r4, #72]	; 0x48
 801a1e6:	e783      	b.n	801a0f0 <PDM_Filter_setConfig+0x98>
 801a1e8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a1ea:	42b3      	cmp	r3, r6
 801a1ec:	f47f af6e 	bne.w	801a0cc <PDM_Filter_setConfig+0x74>
 801a1f0:	886b      	ldrh	r3, [r5, #2]
 801a1f2:	2008      	movs	r0, #8
 801a1f4:	8663      	strh	r3, [r4, #50]	; 0x32
 801a1f6:	e775      	b.n	801a0e4 <PDM_Filter_setConfig+0x8c>
 801a1f8:	b5e8b5cd 	.word	0xb5e8b5cd
 801a1fc:	fffffef0 	.word	0xfffffef0
 801a200:	08019371 	.word	0x08019371
 801a204:	080219f8 	.word	0x080219f8
 801a208:	42000000 	.word	0x42000000
 801a20c:	3d4ccccd 	.word	0x3d4ccccd
 801a210:	4f800000 	.word	0x4f800000
 801a214:	00000000 	.word	0x00000000
 801a218:	0801877d 	.word	0x0801877d
 801a21c:	08018605 	.word	0x08018605
 801a220:	080184f5 	.word	0x080184f5
 801a224:	08018fb9 	.word	0x08018fb9
 801a228:	08018d21 	.word	0x08018d21
 801a22c:	08018ae9 	.word	0x08018ae9
 801a230:	08018905 	.word	0x08018905
 801a234:	0801958d 	.word	0x0801958d
 801a238:	08019451 	.word	0x08019451
 801a23c:	08019bcd 	.word	0x08019bcd
 801a240:	080199d1 	.word	0x080199d1
 801a244:	08019825 	.word	0x08019825
 801a248:	080196b9 	.word	0x080196b9

0801a24c <__libc_init_array>:
 801a24c:	b570      	push	{r4, r5, r6, lr}
 801a24e:	4d0d      	ldr	r5, [pc, #52]	; (801a284 <__libc_init_array+0x38>)
 801a250:	4c0d      	ldr	r4, [pc, #52]	; (801a288 <__libc_init_array+0x3c>)
 801a252:	1b64      	subs	r4, r4, r5
 801a254:	10a4      	asrs	r4, r4, #2
 801a256:	2600      	movs	r6, #0
 801a258:	42a6      	cmp	r6, r4
 801a25a:	d109      	bne.n	801a270 <__libc_init_array+0x24>
 801a25c:	4d0b      	ldr	r5, [pc, #44]	; (801a28c <__libc_init_array+0x40>)
 801a25e:	4c0c      	ldr	r4, [pc, #48]	; (801a290 <__libc_init_array+0x44>)
 801a260:	f004 fda2 	bl	801eda8 <_init>
 801a264:	1b64      	subs	r4, r4, r5
 801a266:	10a4      	asrs	r4, r4, #2
 801a268:	2600      	movs	r6, #0
 801a26a:	42a6      	cmp	r6, r4
 801a26c:	d105      	bne.n	801a27a <__libc_init_array+0x2e>
 801a26e:	bd70      	pop	{r4, r5, r6, pc}
 801a270:	f855 3b04 	ldr.w	r3, [r5], #4
 801a274:	4798      	blx	r3
 801a276:	3601      	adds	r6, #1
 801a278:	e7ee      	b.n	801a258 <__libc_init_array+0xc>
 801a27a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a27e:	4798      	blx	r3
 801a280:	3601      	adds	r6, #1
 801a282:	e7f2      	b.n	801a26a <__libc_init_array+0x1e>
 801a284:	080222f0 	.word	0x080222f0
 801a288:	080222f0 	.word	0x080222f0
 801a28c:	080222f0 	.word	0x080222f0
 801a290:	080222f4 	.word	0x080222f4

0801a294 <malloc>:
 801a294:	4b02      	ldr	r3, [pc, #8]	; (801a2a0 <malloc+0xc>)
 801a296:	4601      	mov	r1, r0
 801a298:	6818      	ldr	r0, [r3, #0]
 801a29a:	f000 b891 	b.w	801a3c0 <_malloc_r>
 801a29e:	bf00      	nop
 801a2a0:	24000430 	.word	0x24000430

0801a2a4 <memcmp>:
 801a2a4:	b530      	push	{r4, r5, lr}
 801a2a6:	3901      	subs	r1, #1
 801a2a8:	2400      	movs	r4, #0
 801a2aa:	42a2      	cmp	r2, r4
 801a2ac:	d101      	bne.n	801a2b2 <memcmp+0xe>
 801a2ae:	2000      	movs	r0, #0
 801a2b0:	e005      	b.n	801a2be <memcmp+0x1a>
 801a2b2:	5d03      	ldrb	r3, [r0, r4]
 801a2b4:	3401      	adds	r4, #1
 801a2b6:	5d0d      	ldrb	r5, [r1, r4]
 801a2b8:	42ab      	cmp	r3, r5
 801a2ba:	d0f6      	beq.n	801a2aa <memcmp+0x6>
 801a2bc:	1b58      	subs	r0, r3, r5
 801a2be:	bd30      	pop	{r4, r5, pc}

0801a2c0 <memcpy>:
 801a2c0:	440a      	add	r2, r1
 801a2c2:	4291      	cmp	r1, r2
 801a2c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a2c8:	d100      	bne.n	801a2cc <memcpy+0xc>
 801a2ca:	4770      	bx	lr
 801a2cc:	b510      	push	{r4, lr}
 801a2ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a2d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a2d6:	4291      	cmp	r1, r2
 801a2d8:	d1f9      	bne.n	801a2ce <memcpy+0xe>
 801a2da:	bd10      	pop	{r4, pc}

0801a2dc <memmove>:
 801a2dc:	4288      	cmp	r0, r1
 801a2de:	b510      	push	{r4, lr}
 801a2e0:	eb01 0402 	add.w	r4, r1, r2
 801a2e4:	d902      	bls.n	801a2ec <memmove+0x10>
 801a2e6:	4284      	cmp	r4, r0
 801a2e8:	4623      	mov	r3, r4
 801a2ea:	d807      	bhi.n	801a2fc <memmove+0x20>
 801a2ec:	1e43      	subs	r3, r0, #1
 801a2ee:	42a1      	cmp	r1, r4
 801a2f0:	d008      	beq.n	801a304 <memmove+0x28>
 801a2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a2fa:	e7f8      	b.n	801a2ee <memmove+0x12>
 801a2fc:	4402      	add	r2, r0
 801a2fe:	4601      	mov	r1, r0
 801a300:	428a      	cmp	r2, r1
 801a302:	d100      	bne.n	801a306 <memmove+0x2a>
 801a304:	bd10      	pop	{r4, pc}
 801a306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a30a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a30e:	e7f7      	b.n	801a300 <memmove+0x24>

0801a310 <memset>:
 801a310:	4402      	add	r2, r0
 801a312:	4603      	mov	r3, r0
 801a314:	4293      	cmp	r3, r2
 801a316:	d100      	bne.n	801a31a <memset+0xa>
 801a318:	4770      	bx	lr
 801a31a:	f803 1b01 	strb.w	r1, [r3], #1
 801a31e:	e7f9      	b.n	801a314 <memset+0x4>

0801a320 <_free_r>:
 801a320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a322:	2900      	cmp	r1, #0
 801a324:	d048      	beq.n	801a3b8 <_free_r+0x98>
 801a326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a32a:	9001      	str	r0, [sp, #4]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	f1a1 0404 	sub.w	r4, r1, #4
 801a332:	bfb8      	it	lt
 801a334:	18e4      	addlt	r4, r4, r3
 801a336:	f003 faa9 	bl	801d88c <__malloc_lock>
 801a33a:	4a20      	ldr	r2, [pc, #128]	; (801a3bc <_free_r+0x9c>)
 801a33c:	9801      	ldr	r0, [sp, #4]
 801a33e:	6813      	ldr	r3, [r2, #0]
 801a340:	4615      	mov	r5, r2
 801a342:	b933      	cbnz	r3, 801a352 <_free_r+0x32>
 801a344:	6063      	str	r3, [r4, #4]
 801a346:	6014      	str	r4, [r2, #0]
 801a348:	b003      	add	sp, #12
 801a34a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a34e:	f003 baa3 	b.w	801d898 <__malloc_unlock>
 801a352:	42a3      	cmp	r3, r4
 801a354:	d90b      	bls.n	801a36e <_free_r+0x4e>
 801a356:	6821      	ldr	r1, [r4, #0]
 801a358:	1862      	adds	r2, r4, r1
 801a35a:	4293      	cmp	r3, r2
 801a35c:	bf04      	itt	eq
 801a35e:	681a      	ldreq	r2, [r3, #0]
 801a360:	685b      	ldreq	r3, [r3, #4]
 801a362:	6063      	str	r3, [r4, #4]
 801a364:	bf04      	itt	eq
 801a366:	1852      	addeq	r2, r2, r1
 801a368:	6022      	streq	r2, [r4, #0]
 801a36a:	602c      	str	r4, [r5, #0]
 801a36c:	e7ec      	b.n	801a348 <_free_r+0x28>
 801a36e:	461a      	mov	r2, r3
 801a370:	685b      	ldr	r3, [r3, #4]
 801a372:	b10b      	cbz	r3, 801a378 <_free_r+0x58>
 801a374:	42a3      	cmp	r3, r4
 801a376:	d9fa      	bls.n	801a36e <_free_r+0x4e>
 801a378:	6811      	ldr	r1, [r2, #0]
 801a37a:	1855      	adds	r5, r2, r1
 801a37c:	42a5      	cmp	r5, r4
 801a37e:	d10b      	bne.n	801a398 <_free_r+0x78>
 801a380:	6824      	ldr	r4, [r4, #0]
 801a382:	4421      	add	r1, r4
 801a384:	1854      	adds	r4, r2, r1
 801a386:	42a3      	cmp	r3, r4
 801a388:	6011      	str	r1, [r2, #0]
 801a38a:	d1dd      	bne.n	801a348 <_free_r+0x28>
 801a38c:	681c      	ldr	r4, [r3, #0]
 801a38e:	685b      	ldr	r3, [r3, #4]
 801a390:	6053      	str	r3, [r2, #4]
 801a392:	4421      	add	r1, r4
 801a394:	6011      	str	r1, [r2, #0]
 801a396:	e7d7      	b.n	801a348 <_free_r+0x28>
 801a398:	d902      	bls.n	801a3a0 <_free_r+0x80>
 801a39a:	230c      	movs	r3, #12
 801a39c:	6003      	str	r3, [r0, #0]
 801a39e:	e7d3      	b.n	801a348 <_free_r+0x28>
 801a3a0:	6825      	ldr	r5, [r4, #0]
 801a3a2:	1961      	adds	r1, r4, r5
 801a3a4:	428b      	cmp	r3, r1
 801a3a6:	bf04      	itt	eq
 801a3a8:	6819      	ldreq	r1, [r3, #0]
 801a3aa:	685b      	ldreq	r3, [r3, #4]
 801a3ac:	6063      	str	r3, [r4, #4]
 801a3ae:	bf04      	itt	eq
 801a3b0:	1949      	addeq	r1, r1, r5
 801a3b2:	6021      	streq	r1, [r4, #0]
 801a3b4:	6054      	str	r4, [r2, #4]
 801a3b6:	e7c7      	b.n	801a348 <_free_r+0x28>
 801a3b8:	b003      	add	sp, #12
 801a3ba:	bd30      	pop	{r4, r5, pc}
 801a3bc:	240007a8 	.word	0x240007a8

0801a3c0 <_malloc_r>:
 801a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c2:	1ccd      	adds	r5, r1, #3
 801a3c4:	f025 0503 	bic.w	r5, r5, #3
 801a3c8:	3508      	adds	r5, #8
 801a3ca:	2d0c      	cmp	r5, #12
 801a3cc:	bf38      	it	cc
 801a3ce:	250c      	movcc	r5, #12
 801a3d0:	2d00      	cmp	r5, #0
 801a3d2:	4606      	mov	r6, r0
 801a3d4:	db01      	blt.n	801a3da <_malloc_r+0x1a>
 801a3d6:	42a9      	cmp	r1, r5
 801a3d8:	d903      	bls.n	801a3e2 <_malloc_r+0x22>
 801a3da:	230c      	movs	r3, #12
 801a3dc:	6033      	str	r3, [r6, #0]
 801a3de:	2000      	movs	r0, #0
 801a3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3e2:	f003 fa53 	bl	801d88c <__malloc_lock>
 801a3e6:	4921      	ldr	r1, [pc, #132]	; (801a46c <_malloc_r+0xac>)
 801a3e8:	680a      	ldr	r2, [r1, #0]
 801a3ea:	4614      	mov	r4, r2
 801a3ec:	b99c      	cbnz	r4, 801a416 <_malloc_r+0x56>
 801a3ee:	4f20      	ldr	r7, [pc, #128]	; (801a470 <_malloc_r+0xb0>)
 801a3f0:	683b      	ldr	r3, [r7, #0]
 801a3f2:	b923      	cbnz	r3, 801a3fe <_malloc_r+0x3e>
 801a3f4:	4621      	mov	r1, r4
 801a3f6:	4630      	mov	r0, r6
 801a3f8:	f000 fedc 	bl	801b1b4 <_sbrk_r>
 801a3fc:	6038      	str	r0, [r7, #0]
 801a3fe:	4629      	mov	r1, r5
 801a400:	4630      	mov	r0, r6
 801a402:	f000 fed7 	bl	801b1b4 <_sbrk_r>
 801a406:	1c43      	adds	r3, r0, #1
 801a408:	d123      	bne.n	801a452 <_malloc_r+0x92>
 801a40a:	230c      	movs	r3, #12
 801a40c:	6033      	str	r3, [r6, #0]
 801a40e:	4630      	mov	r0, r6
 801a410:	f003 fa42 	bl	801d898 <__malloc_unlock>
 801a414:	e7e3      	b.n	801a3de <_malloc_r+0x1e>
 801a416:	6823      	ldr	r3, [r4, #0]
 801a418:	1b5b      	subs	r3, r3, r5
 801a41a:	d417      	bmi.n	801a44c <_malloc_r+0x8c>
 801a41c:	2b0b      	cmp	r3, #11
 801a41e:	d903      	bls.n	801a428 <_malloc_r+0x68>
 801a420:	6023      	str	r3, [r4, #0]
 801a422:	441c      	add	r4, r3
 801a424:	6025      	str	r5, [r4, #0]
 801a426:	e004      	b.n	801a432 <_malloc_r+0x72>
 801a428:	6863      	ldr	r3, [r4, #4]
 801a42a:	42a2      	cmp	r2, r4
 801a42c:	bf0c      	ite	eq
 801a42e:	600b      	streq	r3, [r1, #0]
 801a430:	6053      	strne	r3, [r2, #4]
 801a432:	4630      	mov	r0, r6
 801a434:	f003 fa30 	bl	801d898 <__malloc_unlock>
 801a438:	f104 000b 	add.w	r0, r4, #11
 801a43c:	1d23      	adds	r3, r4, #4
 801a43e:	f020 0007 	bic.w	r0, r0, #7
 801a442:	1ac2      	subs	r2, r0, r3
 801a444:	d0cc      	beq.n	801a3e0 <_malloc_r+0x20>
 801a446:	1a1b      	subs	r3, r3, r0
 801a448:	50a3      	str	r3, [r4, r2]
 801a44a:	e7c9      	b.n	801a3e0 <_malloc_r+0x20>
 801a44c:	4622      	mov	r2, r4
 801a44e:	6864      	ldr	r4, [r4, #4]
 801a450:	e7cc      	b.n	801a3ec <_malloc_r+0x2c>
 801a452:	1cc4      	adds	r4, r0, #3
 801a454:	f024 0403 	bic.w	r4, r4, #3
 801a458:	42a0      	cmp	r0, r4
 801a45a:	d0e3      	beq.n	801a424 <_malloc_r+0x64>
 801a45c:	1a21      	subs	r1, r4, r0
 801a45e:	4630      	mov	r0, r6
 801a460:	f000 fea8 	bl	801b1b4 <_sbrk_r>
 801a464:	3001      	adds	r0, #1
 801a466:	d1dd      	bne.n	801a424 <_malloc_r+0x64>
 801a468:	e7cf      	b.n	801a40a <_malloc_r+0x4a>
 801a46a:	bf00      	nop
 801a46c:	240007a8 	.word	0x240007a8
 801a470:	240007ac 	.word	0x240007ac

0801a474 <__cvt>:
 801a474:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a476:	ed2d 8b02 	vpush	{d8}
 801a47a:	eeb0 8b40 	vmov.f64	d8, d0
 801a47e:	b085      	sub	sp, #20
 801a480:	4617      	mov	r7, r2
 801a482:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a484:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a486:	ee18 2a90 	vmov	r2, s17
 801a48a:	f025 0520 	bic.w	r5, r5, #32
 801a48e:	2a00      	cmp	r2, #0
 801a490:	bfb6      	itet	lt
 801a492:	222d      	movlt	r2, #45	; 0x2d
 801a494:	2200      	movge	r2, #0
 801a496:	eeb1 8b40 	vneglt.f64	d8, d0
 801a49a:	2d46      	cmp	r5, #70	; 0x46
 801a49c:	460c      	mov	r4, r1
 801a49e:	701a      	strb	r2, [r3, #0]
 801a4a0:	d004      	beq.n	801a4ac <__cvt+0x38>
 801a4a2:	2d45      	cmp	r5, #69	; 0x45
 801a4a4:	d100      	bne.n	801a4a8 <__cvt+0x34>
 801a4a6:	3401      	adds	r4, #1
 801a4a8:	2102      	movs	r1, #2
 801a4aa:	e000      	b.n	801a4ae <__cvt+0x3a>
 801a4ac:	2103      	movs	r1, #3
 801a4ae:	ab03      	add	r3, sp, #12
 801a4b0:	9301      	str	r3, [sp, #4]
 801a4b2:	ab02      	add	r3, sp, #8
 801a4b4:	9300      	str	r3, [sp, #0]
 801a4b6:	4622      	mov	r2, r4
 801a4b8:	4633      	mov	r3, r6
 801a4ba:	eeb0 0b48 	vmov.f64	d0, d8
 801a4be:	f001 fea7 	bl	801c210 <_dtoa_r>
 801a4c2:	2d47      	cmp	r5, #71	; 0x47
 801a4c4:	d109      	bne.n	801a4da <__cvt+0x66>
 801a4c6:	07fb      	lsls	r3, r7, #31
 801a4c8:	d407      	bmi.n	801a4da <__cvt+0x66>
 801a4ca:	9b03      	ldr	r3, [sp, #12]
 801a4cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4ce:	1a1b      	subs	r3, r3, r0
 801a4d0:	6013      	str	r3, [r2, #0]
 801a4d2:	b005      	add	sp, #20
 801a4d4:	ecbd 8b02 	vpop	{d8}
 801a4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4da:	2d46      	cmp	r5, #70	; 0x46
 801a4dc:	eb00 0204 	add.w	r2, r0, r4
 801a4e0:	d10c      	bne.n	801a4fc <__cvt+0x88>
 801a4e2:	7803      	ldrb	r3, [r0, #0]
 801a4e4:	2b30      	cmp	r3, #48	; 0x30
 801a4e6:	d107      	bne.n	801a4f8 <__cvt+0x84>
 801a4e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4f0:	bf1c      	itt	ne
 801a4f2:	f1c4 0401 	rsbne	r4, r4, #1
 801a4f6:	6034      	strne	r4, [r6, #0]
 801a4f8:	6833      	ldr	r3, [r6, #0]
 801a4fa:	441a      	add	r2, r3
 801a4fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a504:	bf08      	it	eq
 801a506:	9203      	streq	r2, [sp, #12]
 801a508:	2130      	movs	r1, #48	; 0x30
 801a50a:	9b03      	ldr	r3, [sp, #12]
 801a50c:	4293      	cmp	r3, r2
 801a50e:	d2dc      	bcs.n	801a4ca <__cvt+0x56>
 801a510:	1c5c      	adds	r4, r3, #1
 801a512:	9403      	str	r4, [sp, #12]
 801a514:	7019      	strb	r1, [r3, #0]
 801a516:	e7f8      	b.n	801a50a <__cvt+0x96>

0801a518 <__exponent>:
 801a518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a51a:	4603      	mov	r3, r0
 801a51c:	2900      	cmp	r1, #0
 801a51e:	bfb8      	it	lt
 801a520:	4249      	neglt	r1, r1
 801a522:	f803 2b02 	strb.w	r2, [r3], #2
 801a526:	bfb4      	ite	lt
 801a528:	222d      	movlt	r2, #45	; 0x2d
 801a52a:	222b      	movge	r2, #43	; 0x2b
 801a52c:	2909      	cmp	r1, #9
 801a52e:	7042      	strb	r2, [r0, #1]
 801a530:	dd2a      	ble.n	801a588 <__exponent+0x70>
 801a532:	f10d 0407 	add.w	r4, sp, #7
 801a536:	46a4      	mov	ip, r4
 801a538:	270a      	movs	r7, #10
 801a53a:	46a6      	mov	lr, r4
 801a53c:	460a      	mov	r2, r1
 801a53e:	fb91 f6f7 	sdiv	r6, r1, r7
 801a542:	fb07 1516 	mls	r5, r7, r6, r1
 801a546:	3530      	adds	r5, #48	; 0x30
 801a548:	2a63      	cmp	r2, #99	; 0x63
 801a54a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801a54e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a552:	4631      	mov	r1, r6
 801a554:	dcf1      	bgt.n	801a53a <__exponent+0x22>
 801a556:	3130      	adds	r1, #48	; 0x30
 801a558:	f1ae 0502 	sub.w	r5, lr, #2
 801a55c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a560:	1c44      	adds	r4, r0, #1
 801a562:	4629      	mov	r1, r5
 801a564:	4561      	cmp	r1, ip
 801a566:	d30a      	bcc.n	801a57e <__exponent+0x66>
 801a568:	f10d 0209 	add.w	r2, sp, #9
 801a56c:	eba2 020e 	sub.w	r2, r2, lr
 801a570:	4565      	cmp	r5, ip
 801a572:	bf88      	it	hi
 801a574:	2200      	movhi	r2, #0
 801a576:	4413      	add	r3, r2
 801a578:	1a18      	subs	r0, r3, r0
 801a57a:	b003      	add	sp, #12
 801a57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a57e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a582:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a586:	e7ed      	b.n	801a564 <__exponent+0x4c>
 801a588:	2330      	movs	r3, #48	; 0x30
 801a58a:	3130      	adds	r1, #48	; 0x30
 801a58c:	7083      	strb	r3, [r0, #2]
 801a58e:	70c1      	strb	r1, [r0, #3]
 801a590:	1d03      	adds	r3, r0, #4
 801a592:	e7f1      	b.n	801a578 <__exponent+0x60>
 801a594:	0000      	movs	r0, r0
	...

0801a598 <_printf_float>:
 801a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a59c:	b08b      	sub	sp, #44	; 0x2c
 801a59e:	460c      	mov	r4, r1
 801a5a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a5a4:	4616      	mov	r6, r2
 801a5a6:	461f      	mov	r7, r3
 801a5a8:	4605      	mov	r5, r0
 801a5aa:	f003 f8f1 	bl	801d790 <_localeconv_r>
 801a5ae:	f8d0 b000 	ldr.w	fp, [r0]
 801a5b2:	4658      	mov	r0, fp
 801a5b4:	f7e5 fe94 	bl	80002e0 <strlen>
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	9308      	str	r3, [sp, #32]
 801a5bc:	f8d8 3000 	ldr.w	r3, [r8]
 801a5c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a5c4:	6822      	ldr	r2, [r4, #0]
 801a5c6:	3307      	adds	r3, #7
 801a5c8:	f023 0307 	bic.w	r3, r3, #7
 801a5cc:	f103 0108 	add.w	r1, r3, #8
 801a5d0:	f8c8 1000 	str.w	r1, [r8]
 801a5d4:	4682      	mov	sl, r0
 801a5d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a5da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801a5de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801a840 <_printf_float+0x2a8>
 801a5e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801a5e6:	eeb0 6bc0 	vabs.f64	d6, d0
 801a5ea:	eeb4 6b47 	vcmp.f64	d6, d7
 801a5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5f2:	dd24      	ble.n	801a63e <_printf_float+0xa6>
 801a5f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5fc:	d502      	bpl.n	801a604 <_printf_float+0x6c>
 801a5fe:	232d      	movs	r3, #45	; 0x2d
 801a600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a604:	4b90      	ldr	r3, [pc, #576]	; (801a848 <_printf_float+0x2b0>)
 801a606:	4891      	ldr	r0, [pc, #580]	; (801a84c <_printf_float+0x2b4>)
 801a608:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801a60c:	bf94      	ite	ls
 801a60e:	4698      	movls	r8, r3
 801a610:	4680      	movhi	r8, r0
 801a612:	2303      	movs	r3, #3
 801a614:	6123      	str	r3, [r4, #16]
 801a616:	f022 0204 	bic.w	r2, r2, #4
 801a61a:	2300      	movs	r3, #0
 801a61c:	6022      	str	r2, [r4, #0]
 801a61e:	9304      	str	r3, [sp, #16]
 801a620:	9700      	str	r7, [sp, #0]
 801a622:	4633      	mov	r3, r6
 801a624:	aa09      	add	r2, sp, #36	; 0x24
 801a626:	4621      	mov	r1, r4
 801a628:	4628      	mov	r0, r5
 801a62a:	f000 f9d3 	bl	801a9d4 <_printf_common>
 801a62e:	3001      	adds	r0, #1
 801a630:	f040 808a 	bne.w	801a748 <_printf_float+0x1b0>
 801a634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a638:	b00b      	add	sp, #44	; 0x2c
 801a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a63e:	eeb4 0b40 	vcmp.f64	d0, d0
 801a642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a646:	d709      	bvc.n	801a65c <_printf_float+0xc4>
 801a648:	ee10 3a90 	vmov	r3, s1
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	bfbc      	itt	lt
 801a650:	232d      	movlt	r3, #45	; 0x2d
 801a652:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a656:	487e      	ldr	r0, [pc, #504]	; (801a850 <_printf_float+0x2b8>)
 801a658:	4b7e      	ldr	r3, [pc, #504]	; (801a854 <_printf_float+0x2bc>)
 801a65a:	e7d5      	b.n	801a608 <_printf_float+0x70>
 801a65c:	6863      	ldr	r3, [r4, #4]
 801a65e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801a662:	9104      	str	r1, [sp, #16]
 801a664:	1c59      	adds	r1, r3, #1
 801a666:	d13c      	bne.n	801a6e2 <_printf_float+0x14a>
 801a668:	2306      	movs	r3, #6
 801a66a:	6063      	str	r3, [r4, #4]
 801a66c:	2300      	movs	r3, #0
 801a66e:	9303      	str	r3, [sp, #12]
 801a670:	ab08      	add	r3, sp, #32
 801a672:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801a676:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a67a:	ab07      	add	r3, sp, #28
 801a67c:	6861      	ldr	r1, [r4, #4]
 801a67e:	9300      	str	r3, [sp, #0]
 801a680:	6022      	str	r2, [r4, #0]
 801a682:	f10d 031b 	add.w	r3, sp, #27
 801a686:	4628      	mov	r0, r5
 801a688:	f7ff fef4 	bl	801a474 <__cvt>
 801a68c:	9b04      	ldr	r3, [sp, #16]
 801a68e:	9907      	ldr	r1, [sp, #28]
 801a690:	2b47      	cmp	r3, #71	; 0x47
 801a692:	4680      	mov	r8, r0
 801a694:	d108      	bne.n	801a6a8 <_printf_float+0x110>
 801a696:	1cc8      	adds	r0, r1, #3
 801a698:	db02      	blt.n	801a6a0 <_printf_float+0x108>
 801a69a:	6863      	ldr	r3, [r4, #4]
 801a69c:	4299      	cmp	r1, r3
 801a69e:	dd41      	ble.n	801a724 <_printf_float+0x18c>
 801a6a0:	f1a9 0902 	sub.w	r9, r9, #2
 801a6a4:	fa5f f989 	uxtb.w	r9, r9
 801a6a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801a6ac:	d820      	bhi.n	801a6f0 <_printf_float+0x158>
 801a6ae:	3901      	subs	r1, #1
 801a6b0:	464a      	mov	r2, r9
 801a6b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a6b6:	9107      	str	r1, [sp, #28]
 801a6b8:	f7ff ff2e 	bl	801a518 <__exponent>
 801a6bc:	9a08      	ldr	r2, [sp, #32]
 801a6be:	9004      	str	r0, [sp, #16]
 801a6c0:	1813      	adds	r3, r2, r0
 801a6c2:	2a01      	cmp	r2, #1
 801a6c4:	6123      	str	r3, [r4, #16]
 801a6c6:	dc02      	bgt.n	801a6ce <_printf_float+0x136>
 801a6c8:	6822      	ldr	r2, [r4, #0]
 801a6ca:	07d2      	lsls	r2, r2, #31
 801a6cc:	d501      	bpl.n	801a6d2 <_printf_float+0x13a>
 801a6ce:	3301      	adds	r3, #1
 801a6d0:	6123      	str	r3, [r4, #16]
 801a6d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d0a2      	beq.n	801a620 <_printf_float+0x88>
 801a6da:	232d      	movs	r3, #45	; 0x2d
 801a6dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a6e0:	e79e      	b.n	801a620 <_printf_float+0x88>
 801a6e2:	9904      	ldr	r1, [sp, #16]
 801a6e4:	2947      	cmp	r1, #71	; 0x47
 801a6e6:	d1c1      	bne.n	801a66c <_printf_float+0xd4>
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d1bf      	bne.n	801a66c <_printf_float+0xd4>
 801a6ec:	2301      	movs	r3, #1
 801a6ee:	e7bc      	b.n	801a66a <_printf_float+0xd2>
 801a6f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801a6f4:	d118      	bne.n	801a728 <_printf_float+0x190>
 801a6f6:	2900      	cmp	r1, #0
 801a6f8:	6863      	ldr	r3, [r4, #4]
 801a6fa:	dd0b      	ble.n	801a714 <_printf_float+0x17c>
 801a6fc:	6121      	str	r1, [r4, #16]
 801a6fe:	b913      	cbnz	r3, 801a706 <_printf_float+0x16e>
 801a700:	6822      	ldr	r2, [r4, #0]
 801a702:	07d0      	lsls	r0, r2, #31
 801a704:	d502      	bpl.n	801a70c <_printf_float+0x174>
 801a706:	3301      	adds	r3, #1
 801a708:	440b      	add	r3, r1
 801a70a:	6123      	str	r3, [r4, #16]
 801a70c:	2300      	movs	r3, #0
 801a70e:	65a1      	str	r1, [r4, #88]	; 0x58
 801a710:	9304      	str	r3, [sp, #16]
 801a712:	e7de      	b.n	801a6d2 <_printf_float+0x13a>
 801a714:	b913      	cbnz	r3, 801a71c <_printf_float+0x184>
 801a716:	6822      	ldr	r2, [r4, #0]
 801a718:	07d2      	lsls	r2, r2, #31
 801a71a:	d501      	bpl.n	801a720 <_printf_float+0x188>
 801a71c:	3302      	adds	r3, #2
 801a71e:	e7f4      	b.n	801a70a <_printf_float+0x172>
 801a720:	2301      	movs	r3, #1
 801a722:	e7f2      	b.n	801a70a <_printf_float+0x172>
 801a724:	f04f 0967 	mov.w	r9, #103	; 0x67
 801a728:	9b08      	ldr	r3, [sp, #32]
 801a72a:	4299      	cmp	r1, r3
 801a72c:	db05      	blt.n	801a73a <_printf_float+0x1a2>
 801a72e:	6823      	ldr	r3, [r4, #0]
 801a730:	6121      	str	r1, [r4, #16]
 801a732:	07d8      	lsls	r0, r3, #31
 801a734:	d5ea      	bpl.n	801a70c <_printf_float+0x174>
 801a736:	1c4b      	adds	r3, r1, #1
 801a738:	e7e7      	b.n	801a70a <_printf_float+0x172>
 801a73a:	2900      	cmp	r1, #0
 801a73c:	bfd4      	ite	le
 801a73e:	f1c1 0202 	rsble	r2, r1, #2
 801a742:	2201      	movgt	r2, #1
 801a744:	4413      	add	r3, r2
 801a746:	e7e0      	b.n	801a70a <_printf_float+0x172>
 801a748:	6823      	ldr	r3, [r4, #0]
 801a74a:	055a      	lsls	r2, r3, #21
 801a74c:	d407      	bmi.n	801a75e <_printf_float+0x1c6>
 801a74e:	6923      	ldr	r3, [r4, #16]
 801a750:	4642      	mov	r2, r8
 801a752:	4631      	mov	r1, r6
 801a754:	4628      	mov	r0, r5
 801a756:	47b8      	blx	r7
 801a758:	3001      	adds	r0, #1
 801a75a:	d12a      	bne.n	801a7b2 <_printf_float+0x21a>
 801a75c:	e76a      	b.n	801a634 <_printf_float+0x9c>
 801a75e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801a762:	f240 80e2 	bls.w	801a92a <_printf_float+0x392>
 801a766:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801a76a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a772:	d133      	bne.n	801a7dc <_printf_float+0x244>
 801a774:	4a38      	ldr	r2, [pc, #224]	; (801a858 <_printf_float+0x2c0>)
 801a776:	2301      	movs	r3, #1
 801a778:	4631      	mov	r1, r6
 801a77a:	4628      	mov	r0, r5
 801a77c:	47b8      	blx	r7
 801a77e:	3001      	adds	r0, #1
 801a780:	f43f af58 	beq.w	801a634 <_printf_float+0x9c>
 801a784:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a788:	429a      	cmp	r2, r3
 801a78a:	db02      	blt.n	801a792 <_printf_float+0x1fa>
 801a78c:	6823      	ldr	r3, [r4, #0]
 801a78e:	07d8      	lsls	r0, r3, #31
 801a790:	d50f      	bpl.n	801a7b2 <_printf_float+0x21a>
 801a792:	4653      	mov	r3, sl
 801a794:	465a      	mov	r2, fp
 801a796:	4631      	mov	r1, r6
 801a798:	4628      	mov	r0, r5
 801a79a:	47b8      	blx	r7
 801a79c:	3001      	adds	r0, #1
 801a79e:	f43f af49 	beq.w	801a634 <_printf_float+0x9c>
 801a7a2:	f04f 0800 	mov.w	r8, #0
 801a7a6:	f104 091a 	add.w	r9, r4, #26
 801a7aa:	9b08      	ldr	r3, [sp, #32]
 801a7ac:	3b01      	subs	r3, #1
 801a7ae:	4543      	cmp	r3, r8
 801a7b0:	dc09      	bgt.n	801a7c6 <_printf_float+0x22e>
 801a7b2:	6823      	ldr	r3, [r4, #0]
 801a7b4:	079b      	lsls	r3, r3, #30
 801a7b6:	f100 8108 	bmi.w	801a9ca <_printf_float+0x432>
 801a7ba:	68e0      	ldr	r0, [r4, #12]
 801a7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7be:	4298      	cmp	r0, r3
 801a7c0:	bfb8      	it	lt
 801a7c2:	4618      	movlt	r0, r3
 801a7c4:	e738      	b.n	801a638 <_printf_float+0xa0>
 801a7c6:	2301      	movs	r3, #1
 801a7c8:	464a      	mov	r2, r9
 801a7ca:	4631      	mov	r1, r6
 801a7cc:	4628      	mov	r0, r5
 801a7ce:	47b8      	blx	r7
 801a7d0:	3001      	adds	r0, #1
 801a7d2:	f43f af2f 	beq.w	801a634 <_printf_float+0x9c>
 801a7d6:	f108 0801 	add.w	r8, r8, #1
 801a7da:	e7e6      	b.n	801a7aa <_printf_float+0x212>
 801a7dc:	9b07      	ldr	r3, [sp, #28]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	dc3c      	bgt.n	801a85c <_printf_float+0x2c4>
 801a7e2:	4a1d      	ldr	r2, [pc, #116]	; (801a858 <_printf_float+0x2c0>)
 801a7e4:	2301      	movs	r3, #1
 801a7e6:	4631      	mov	r1, r6
 801a7e8:	4628      	mov	r0, r5
 801a7ea:	47b8      	blx	r7
 801a7ec:	3001      	adds	r0, #1
 801a7ee:	f43f af21 	beq.w	801a634 <_printf_float+0x9c>
 801a7f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a7f6:	4313      	orrs	r3, r2
 801a7f8:	d102      	bne.n	801a800 <_printf_float+0x268>
 801a7fa:	6823      	ldr	r3, [r4, #0]
 801a7fc:	07d9      	lsls	r1, r3, #31
 801a7fe:	d5d8      	bpl.n	801a7b2 <_printf_float+0x21a>
 801a800:	4653      	mov	r3, sl
 801a802:	465a      	mov	r2, fp
 801a804:	4631      	mov	r1, r6
 801a806:	4628      	mov	r0, r5
 801a808:	47b8      	blx	r7
 801a80a:	3001      	adds	r0, #1
 801a80c:	f43f af12 	beq.w	801a634 <_printf_float+0x9c>
 801a810:	f04f 0900 	mov.w	r9, #0
 801a814:	f104 0a1a 	add.w	sl, r4, #26
 801a818:	9b07      	ldr	r3, [sp, #28]
 801a81a:	425b      	negs	r3, r3
 801a81c:	454b      	cmp	r3, r9
 801a81e:	dc01      	bgt.n	801a824 <_printf_float+0x28c>
 801a820:	9b08      	ldr	r3, [sp, #32]
 801a822:	e795      	b.n	801a750 <_printf_float+0x1b8>
 801a824:	2301      	movs	r3, #1
 801a826:	4652      	mov	r2, sl
 801a828:	4631      	mov	r1, r6
 801a82a:	4628      	mov	r0, r5
 801a82c:	47b8      	blx	r7
 801a82e:	3001      	adds	r0, #1
 801a830:	f43f af00 	beq.w	801a634 <_printf_float+0x9c>
 801a834:	f109 0901 	add.w	r9, r9, #1
 801a838:	e7ee      	b.n	801a818 <_printf_float+0x280>
 801a83a:	bf00      	nop
 801a83c:	f3af 8000 	nop.w
 801a840:	ffffffff 	.word	0xffffffff
 801a844:	7fefffff 	.word	0x7fefffff
 801a848:	08021c68 	.word	0x08021c68
 801a84c:	08021c6c 	.word	0x08021c6c
 801a850:	08021c74 	.word	0x08021c74
 801a854:	08021c70 	.word	0x08021c70
 801a858:	08021c78 	.word	0x08021c78
 801a85c:	9a08      	ldr	r2, [sp, #32]
 801a85e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a860:	429a      	cmp	r2, r3
 801a862:	bfa8      	it	ge
 801a864:	461a      	movge	r2, r3
 801a866:	2a00      	cmp	r2, #0
 801a868:	4691      	mov	r9, r2
 801a86a:	dc38      	bgt.n	801a8de <_printf_float+0x346>
 801a86c:	2300      	movs	r3, #0
 801a86e:	9305      	str	r3, [sp, #20]
 801a870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a874:	f104 021a 	add.w	r2, r4, #26
 801a878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a87a:	9905      	ldr	r1, [sp, #20]
 801a87c:	9304      	str	r3, [sp, #16]
 801a87e:	eba3 0309 	sub.w	r3, r3, r9
 801a882:	428b      	cmp	r3, r1
 801a884:	dc33      	bgt.n	801a8ee <_printf_float+0x356>
 801a886:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a88a:	429a      	cmp	r2, r3
 801a88c:	db3c      	blt.n	801a908 <_printf_float+0x370>
 801a88e:	6823      	ldr	r3, [r4, #0]
 801a890:	07da      	lsls	r2, r3, #31
 801a892:	d439      	bmi.n	801a908 <_printf_float+0x370>
 801a894:	9a08      	ldr	r2, [sp, #32]
 801a896:	9b04      	ldr	r3, [sp, #16]
 801a898:	9907      	ldr	r1, [sp, #28]
 801a89a:	1ad3      	subs	r3, r2, r3
 801a89c:	eba2 0901 	sub.w	r9, r2, r1
 801a8a0:	4599      	cmp	r9, r3
 801a8a2:	bfa8      	it	ge
 801a8a4:	4699      	movge	r9, r3
 801a8a6:	f1b9 0f00 	cmp.w	r9, #0
 801a8aa:	dc35      	bgt.n	801a918 <_printf_float+0x380>
 801a8ac:	f04f 0800 	mov.w	r8, #0
 801a8b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a8b4:	f104 0a1a 	add.w	sl, r4, #26
 801a8b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a8bc:	1a9b      	subs	r3, r3, r2
 801a8be:	eba3 0309 	sub.w	r3, r3, r9
 801a8c2:	4543      	cmp	r3, r8
 801a8c4:	f77f af75 	ble.w	801a7b2 <_printf_float+0x21a>
 801a8c8:	2301      	movs	r3, #1
 801a8ca:	4652      	mov	r2, sl
 801a8cc:	4631      	mov	r1, r6
 801a8ce:	4628      	mov	r0, r5
 801a8d0:	47b8      	blx	r7
 801a8d2:	3001      	adds	r0, #1
 801a8d4:	f43f aeae 	beq.w	801a634 <_printf_float+0x9c>
 801a8d8:	f108 0801 	add.w	r8, r8, #1
 801a8dc:	e7ec      	b.n	801a8b8 <_printf_float+0x320>
 801a8de:	4613      	mov	r3, r2
 801a8e0:	4631      	mov	r1, r6
 801a8e2:	4642      	mov	r2, r8
 801a8e4:	4628      	mov	r0, r5
 801a8e6:	47b8      	blx	r7
 801a8e8:	3001      	adds	r0, #1
 801a8ea:	d1bf      	bne.n	801a86c <_printf_float+0x2d4>
 801a8ec:	e6a2      	b.n	801a634 <_printf_float+0x9c>
 801a8ee:	2301      	movs	r3, #1
 801a8f0:	4631      	mov	r1, r6
 801a8f2:	4628      	mov	r0, r5
 801a8f4:	9204      	str	r2, [sp, #16]
 801a8f6:	47b8      	blx	r7
 801a8f8:	3001      	adds	r0, #1
 801a8fa:	f43f ae9b 	beq.w	801a634 <_printf_float+0x9c>
 801a8fe:	9b05      	ldr	r3, [sp, #20]
 801a900:	9a04      	ldr	r2, [sp, #16]
 801a902:	3301      	adds	r3, #1
 801a904:	9305      	str	r3, [sp, #20]
 801a906:	e7b7      	b.n	801a878 <_printf_float+0x2e0>
 801a908:	4653      	mov	r3, sl
 801a90a:	465a      	mov	r2, fp
 801a90c:	4631      	mov	r1, r6
 801a90e:	4628      	mov	r0, r5
 801a910:	47b8      	blx	r7
 801a912:	3001      	adds	r0, #1
 801a914:	d1be      	bne.n	801a894 <_printf_float+0x2fc>
 801a916:	e68d      	b.n	801a634 <_printf_float+0x9c>
 801a918:	9a04      	ldr	r2, [sp, #16]
 801a91a:	464b      	mov	r3, r9
 801a91c:	4442      	add	r2, r8
 801a91e:	4631      	mov	r1, r6
 801a920:	4628      	mov	r0, r5
 801a922:	47b8      	blx	r7
 801a924:	3001      	adds	r0, #1
 801a926:	d1c1      	bne.n	801a8ac <_printf_float+0x314>
 801a928:	e684      	b.n	801a634 <_printf_float+0x9c>
 801a92a:	9a08      	ldr	r2, [sp, #32]
 801a92c:	2a01      	cmp	r2, #1
 801a92e:	dc01      	bgt.n	801a934 <_printf_float+0x39c>
 801a930:	07db      	lsls	r3, r3, #31
 801a932:	d537      	bpl.n	801a9a4 <_printf_float+0x40c>
 801a934:	2301      	movs	r3, #1
 801a936:	4642      	mov	r2, r8
 801a938:	4631      	mov	r1, r6
 801a93a:	4628      	mov	r0, r5
 801a93c:	47b8      	blx	r7
 801a93e:	3001      	adds	r0, #1
 801a940:	f43f ae78 	beq.w	801a634 <_printf_float+0x9c>
 801a944:	4653      	mov	r3, sl
 801a946:	465a      	mov	r2, fp
 801a948:	4631      	mov	r1, r6
 801a94a:	4628      	mov	r0, r5
 801a94c:	47b8      	blx	r7
 801a94e:	3001      	adds	r0, #1
 801a950:	f43f ae70 	beq.w	801a634 <_printf_float+0x9c>
 801a954:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801a958:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a960:	d01b      	beq.n	801a99a <_printf_float+0x402>
 801a962:	9b08      	ldr	r3, [sp, #32]
 801a964:	f108 0201 	add.w	r2, r8, #1
 801a968:	3b01      	subs	r3, #1
 801a96a:	4631      	mov	r1, r6
 801a96c:	4628      	mov	r0, r5
 801a96e:	47b8      	blx	r7
 801a970:	3001      	adds	r0, #1
 801a972:	d10e      	bne.n	801a992 <_printf_float+0x3fa>
 801a974:	e65e      	b.n	801a634 <_printf_float+0x9c>
 801a976:	2301      	movs	r3, #1
 801a978:	464a      	mov	r2, r9
 801a97a:	4631      	mov	r1, r6
 801a97c:	4628      	mov	r0, r5
 801a97e:	47b8      	blx	r7
 801a980:	3001      	adds	r0, #1
 801a982:	f43f ae57 	beq.w	801a634 <_printf_float+0x9c>
 801a986:	f108 0801 	add.w	r8, r8, #1
 801a98a:	9b08      	ldr	r3, [sp, #32]
 801a98c:	3b01      	subs	r3, #1
 801a98e:	4543      	cmp	r3, r8
 801a990:	dcf1      	bgt.n	801a976 <_printf_float+0x3de>
 801a992:	9b04      	ldr	r3, [sp, #16]
 801a994:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a998:	e6db      	b.n	801a752 <_printf_float+0x1ba>
 801a99a:	f04f 0800 	mov.w	r8, #0
 801a99e:	f104 091a 	add.w	r9, r4, #26
 801a9a2:	e7f2      	b.n	801a98a <_printf_float+0x3f2>
 801a9a4:	2301      	movs	r3, #1
 801a9a6:	4642      	mov	r2, r8
 801a9a8:	e7df      	b.n	801a96a <_printf_float+0x3d2>
 801a9aa:	2301      	movs	r3, #1
 801a9ac:	464a      	mov	r2, r9
 801a9ae:	4631      	mov	r1, r6
 801a9b0:	4628      	mov	r0, r5
 801a9b2:	47b8      	blx	r7
 801a9b4:	3001      	adds	r0, #1
 801a9b6:	f43f ae3d 	beq.w	801a634 <_printf_float+0x9c>
 801a9ba:	f108 0801 	add.w	r8, r8, #1
 801a9be:	68e3      	ldr	r3, [r4, #12]
 801a9c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a9c2:	1a5b      	subs	r3, r3, r1
 801a9c4:	4543      	cmp	r3, r8
 801a9c6:	dcf0      	bgt.n	801a9aa <_printf_float+0x412>
 801a9c8:	e6f7      	b.n	801a7ba <_printf_float+0x222>
 801a9ca:	f04f 0800 	mov.w	r8, #0
 801a9ce:	f104 0919 	add.w	r9, r4, #25
 801a9d2:	e7f4      	b.n	801a9be <_printf_float+0x426>

0801a9d4 <_printf_common>:
 801a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9d8:	4616      	mov	r6, r2
 801a9da:	4699      	mov	r9, r3
 801a9dc:	688a      	ldr	r2, [r1, #8]
 801a9de:	690b      	ldr	r3, [r1, #16]
 801a9e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a9e4:	4293      	cmp	r3, r2
 801a9e6:	bfb8      	it	lt
 801a9e8:	4613      	movlt	r3, r2
 801a9ea:	6033      	str	r3, [r6, #0]
 801a9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a9f0:	4607      	mov	r7, r0
 801a9f2:	460c      	mov	r4, r1
 801a9f4:	b10a      	cbz	r2, 801a9fa <_printf_common+0x26>
 801a9f6:	3301      	adds	r3, #1
 801a9f8:	6033      	str	r3, [r6, #0]
 801a9fa:	6823      	ldr	r3, [r4, #0]
 801a9fc:	0699      	lsls	r1, r3, #26
 801a9fe:	bf42      	ittt	mi
 801aa00:	6833      	ldrmi	r3, [r6, #0]
 801aa02:	3302      	addmi	r3, #2
 801aa04:	6033      	strmi	r3, [r6, #0]
 801aa06:	6825      	ldr	r5, [r4, #0]
 801aa08:	f015 0506 	ands.w	r5, r5, #6
 801aa0c:	d106      	bne.n	801aa1c <_printf_common+0x48>
 801aa0e:	f104 0a19 	add.w	sl, r4, #25
 801aa12:	68e3      	ldr	r3, [r4, #12]
 801aa14:	6832      	ldr	r2, [r6, #0]
 801aa16:	1a9b      	subs	r3, r3, r2
 801aa18:	42ab      	cmp	r3, r5
 801aa1a:	dc26      	bgt.n	801aa6a <_printf_common+0x96>
 801aa1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aa20:	1e13      	subs	r3, r2, #0
 801aa22:	6822      	ldr	r2, [r4, #0]
 801aa24:	bf18      	it	ne
 801aa26:	2301      	movne	r3, #1
 801aa28:	0692      	lsls	r2, r2, #26
 801aa2a:	d42b      	bmi.n	801aa84 <_printf_common+0xb0>
 801aa2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aa30:	4649      	mov	r1, r9
 801aa32:	4638      	mov	r0, r7
 801aa34:	47c0      	blx	r8
 801aa36:	3001      	adds	r0, #1
 801aa38:	d01e      	beq.n	801aa78 <_printf_common+0xa4>
 801aa3a:	6823      	ldr	r3, [r4, #0]
 801aa3c:	68e5      	ldr	r5, [r4, #12]
 801aa3e:	6832      	ldr	r2, [r6, #0]
 801aa40:	f003 0306 	and.w	r3, r3, #6
 801aa44:	2b04      	cmp	r3, #4
 801aa46:	bf08      	it	eq
 801aa48:	1aad      	subeq	r5, r5, r2
 801aa4a:	68a3      	ldr	r3, [r4, #8]
 801aa4c:	6922      	ldr	r2, [r4, #16]
 801aa4e:	bf0c      	ite	eq
 801aa50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa54:	2500      	movne	r5, #0
 801aa56:	4293      	cmp	r3, r2
 801aa58:	bfc4      	itt	gt
 801aa5a:	1a9b      	subgt	r3, r3, r2
 801aa5c:	18ed      	addgt	r5, r5, r3
 801aa5e:	2600      	movs	r6, #0
 801aa60:	341a      	adds	r4, #26
 801aa62:	42b5      	cmp	r5, r6
 801aa64:	d11a      	bne.n	801aa9c <_printf_common+0xc8>
 801aa66:	2000      	movs	r0, #0
 801aa68:	e008      	b.n	801aa7c <_printf_common+0xa8>
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	4652      	mov	r2, sl
 801aa6e:	4649      	mov	r1, r9
 801aa70:	4638      	mov	r0, r7
 801aa72:	47c0      	blx	r8
 801aa74:	3001      	adds	r0, #1
 801aa76:	d103      	bne.n	801aa80 <_printf_common+0xac>
 801aa78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa80:	3501      	adds	r5, #1
 801aa82:	e7c6      	b.n	801aa12 <_printf_common+0x3e>
 801aa84:	18e1      	adds	r1, r4, r3
 801aa86:	1c5a      	adds	r2, r3, #1
 801aa88:	2030      	movs	r0, #48	; 0x30
 801aa8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aa8e:	4422      	add	r2, r4
 801aa90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aa94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aa98:	3302      	adds	r3, #2
 801aa9a:	e7c7      	b.n	801aa2c <_printf_common+0x58>
 801aa9c:	2301      	movs	r3, #1
 801aa9e:	4622      	mov	r2, r4
 801aaa0:	4649      	mov	r1, r9
 801aaa2:	4638      	mov	r0, r7
 801aaa4:	47c0      	blx	r8
 801aaa6:	3001      	adds	r0, #1
 801aaa8:	d0e6      	beq.n	801aa78 <_printf_common+0xa4>
 801aaaa:	3601      	adds	r6, #1
 801aaac:	e7d9      	b.n	801aa62 <_printf_common+0x8e>
	...

0801aab0 <_printf_i>:
 801aab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aab4:	460c      	mov	r4, r1
 801aab6:	4691      	mov	r9, r2
 801aab8:	7e27      	ldrb	r7, [r4, #24]
 801aaba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aabc:	2f78      	cmp	r7, #120	; 0x78
 801aabe:	4680      	mov	r8, r0
 801aac0:	469a      	mov	sl, r3
 801aac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aac6:	d807      	bhi.n	801aad8 <_printf_i+0x28>
 801aac8:	2f62      	cmp	r7, #98	; 0x62
 801aaca:	d80a      	bhi.n	801aae2 <_printf_i+0x32>
 801aacc:	2f00      	cmp	r7, #0
 801aace:	f000 80d8 	beq.w	801ac82 <_printf_i+0x1d2>
 801aad2:	2f58      	cmp	r7, #88	; 0x58
 801aad4:	f000 80a3 	beq.w	801ac1e <_printf_i+0x16e>
 801aad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aae0:	e03a      	b.n	801ab58 <_printf_i+0xa8>
 801aae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aae6:	2b15      	cmp	r3, #21
 801aae8:	d8f6      	bhi.n	801aad8 <_printf_i+0x28>
 801aaea:	a001      	add	r0, pc, #4	; (adr r0, 801aaf0 <_printf_i+0x40>)
 801aaec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801aaf0:	0801ab49 	.word	0x0801ab49
 801aaf4:	0801ab5d 	.word	0x0801ab5d
 801aaf8:	0801aad9 	.word	0x0801aad9
 801aafc:	0801aad9 	.word	0x0801aad9
 801ab00:	0801aad9 	.word	0x0801aad9
 801ab04:	0801aad9 	.word	0x0801aad9
 801ab08:	0801ab5d 	.word	0x0801ab5d
 801ab0c:	0801aad9 	.word	0x0801aad9
 801ab10:	0801aad9 	.word	0x0801aad9
 801ab14:	0801aad9 	.word	0x0801aad9
 801ab18:	0801aad9 	.word	0x0801aad9
 801ab1c:	0801ac69 	.word	0x0801ac69
 801ab20:	0801ab8d 	.word	0x0801ab8d
 801ab24:	0801ac4b 	.word	0x0801ac4b
 801ab28:	0801aad9 	.word	0x0801aad9
 801ab2c:	0801aad9 	.word	0x0801aad9
 801ab30:	0801ac8b 	.word	0x0801ac8b
 801ab34:	0801aad9 	.word	0x0801aad9
 801ab38:	0801ab8d 	.word	0x0801ab8d
 801ab3c:	0801aad9 	.word	0x0801aad9
 801ab40:	0801aad9 	.word	0x0801aad9
 801ab44:	0801ac53 	.word	0x0801ac53
 801ab48:	680b      	ldr	r3, [r1, #0]
 801ab4a:	1d1a      	adds	r2, r3, #4
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	600a      	str	r2, [r1, #0]
 801ab50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ab54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ab58:	2301      	movs	r3, #1
 801ab5a:	e0a3      	b.n	801aca4 <_printf_i+0x1f4>
 801ab5c:	6825      	ldr	r5, [r4, #0]
 801ab5e:	6808      	ldr	r0, [r1, #0]
 801ab60:	062e      	lsls	r6, r5, #24
 801ab62:	f100 0304 	add.w	r3, r0, #4
 801ab66:	d50a      	bpl.n	801ab7e <_printf_i+0xce>
 801ab68:	6805      	ldr	r5, [r0, #0]
 801ab6a:	600b      	str	r3, [r1, #0]
 801ab6c:	2d00      	cmp	r5, #0
 801ab6e:	da03      	bge.n	801ab78 <_printf_i+0xc8>
 801ab70:	232d      	movs	r3, #45	; 0x2d
 801ab72:	426d      	negs	r5, r5
 801ab74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab78:	485e      	ldr	r0, [pc, #376]	; (801acf4 <_printf_i+0x244>)
 801ab7a:	230a      	movs	r3, #10
 801ab7c:	e019      	b.n	801abb2 <_printf_i+0x102>
 801ab7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ab82:	6805      	ldr	r5, [r0, #0]
 801ab84:	600b      	str	r3, [r1, #0]
 801ab86:	bf18      	it	ne
 801ab88:	b22d      	sxthne	r5, r5
 801ab8a:	e7ef      	b.n	801ab6c <_printf_i+0xbc>
 801ab8c:	680b      	ldr	r3, [r1, #0]
 801ab8e:	6825      	ldr	r5, [r4, #0]
 801ab90:	1d18      	adds	r0, r3, #4
 801ab92:	6008      	str	r0, [r1, #0]
 801ab94:	0628      	lsls	r0, r5, #24
 801ab96:	d501      	bpl.n	801ab9c <_printf_i+0xec>
 801ab98:	681d      	ldr	r5, [r3, #0]
 801ab9a:	e002      	b.n	801aba2 <_printf_i+0xf2>
 801ab9c:	0669      	lsls	r1, r5, #25
 801ab9e:	d5fb      	bpl.n	801ab98 <_printf_i+0xe8>
 801aba0:	881d      	ldrh	r5, [r3, #0]
 801aba2:	4854      	ldr	r0, [pc, #336]	; (801acf4 <_printf_i+0x244>)
 801aba4:	2f6f      	cmp	r7, #111	; 0x6f
 801aba6:	bf0c      	ite	eq
 801aba8:	2308      	moveq	r3, #8
 801abaa:	230a      	movne	r3, #10
 801abac:	2100      	movs	r1, #0
 801abae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801abb2:	6866      	ldr	r6, [r4, #4]
 801abb4:	60a6      	str	r6, [r4, #8]
 801abb6:	2e00      	cmp	r6, #0
 801abb8:	bfa2      	ittt	ge
 801abba:	6821      	ldrge	r1, [r4, #0]
 801abbc:	f021 0104 	bicge.w	r1, r1, #4
 801abc0:	6021      	strge	r1, [r4, #0]
 801abc2:	b90d      	cbnz	r5, 801abc8 <_printf_i+0x118>
 801abc4:	2e00      	cmp	r6, #0
 801abc6:	d04d      	beq.n	801ac64 <_printf_i+0x1b4>
 801abc8:	4616      	mov	r6, r2
 801abca:	fbb5 f1f3 	udiv	r1, r5, r3
 801abce:	fb03 5711 	mls	r7, r3, r1, r5
 801abd2:	5dc7      	ldrb	r7, [r0, r7]
 801abd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801abd8:	462f      	mov	r7, r5
 801abda:	42bb      	cmp	r3, r7
 801abdc:	460d      	mov	r5, r1
 801abde:	d9f4      	bls.n	801abca <_printf_i+0x11a>
 801abe0:	2b08      	cmp	r3, #8
 801abe2:	d10b      	bne.n	801abfc <_printf_i+0x14c>
 801abe4:	6823      	ldr	r3, [r4, #0]
 801abe6:	07df      	lsls	r7, r3, #31
 801abe8:	d508      	bpl.n	801abfc <_printf_i+0x14c>
 801abea:	6923      	ldr	r3, [r4, #16]
 801abec:	6861      	ldr	r1, [r4, #4]
 801abee:	4299      	cmp	r1, r3
 801abf0:	bfde      	ittt	le
 801abf2:	2330      	movle	r3, #48	; 0x30
 801abf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801abf8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801abfc:	1b92      	subs	r2, r2, r6
 801abfe:	6122      	str	r2, [r4, #16]
 801ac00:	f8cd a000 	str.w	sl, [sp]
 801ac04:	464b      	mov	r3, r9
 801ac06:	aa03      	add	r2, sp, #12
 801ac08:	4621      	mov	r1, r4
 801ac0a:	4640      	mov	r0, r8
 801ac0c:	f7ff fee2 	bl	801a9d4 <_printf_common>
 801ac10:	3001      	adds	r0, #1
 801ac12:	d14c      	bne.n	801acae <_printf_i+0x1fe>
 801ac14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac18:	b004      	add	sp, #16
 801ac1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac1e:	4835      	ldr	r0, [pc, #212]	; (801acf4 <_printf_i+0x244>)
 801ac20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ac24:	6823      	ldr	r3, [r4, #0]
 801ac26:	680e      	ldr	r6, [r1, #0]
 801ac28:	061f      	lsls	r7, r3, #24
 801ac2a:	f856 5b04 	ldr.w	r5, [r6], #4
 801ac2e:	600e      	str	r6, [r1, #0]
 801ac30:	d514      	bpl.n	801ac5c <_printf_i+0x1ac>
 801ac32:	07d9      	lsls	r1, r3, #31
 801ac34:	bf44      	itt	mi
 801ac36:	f043 0320 	orrmi.w	r3, r3, #32
 801ac3a:	6023      	strmi	r3, [r4, #0]
 801ac3c:	b91d      	cbnz	r5, 801ac46 <_printf_i+0x196>
 801ac3e:	6823      	ldr	r3, [r4, #0]
 801ac40:	f023 0320 	bic.w	r3, r3, #32
 801ac44:	6023      	str	r3, [r4, #0]
 801ac46:	2310      	movs	r3, #16
 801ac48:	e7b0      	b.n	801abac <_printf_i+0xfc>
 801ac4a:	6823      	ldr	r3, [r4, #0]
 801ac4c:	f043 0320 	orr.w	r3, r3, #32
 801ac50:	6023      	str	r3, [r4, #0]
 801ac52:	2378      	movs	r3, #120	; 0x78
 801ac54:	4828      	ldr	r0, [pc, #160]	; (801acf8 <_printf_i+0x248>)
 801ac56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ac5a:	e7e3      	b.n	801ac24 <_printf_i+0x174>
 801ac5c:	065e      	lsls	r6, r3, #25
 801ac5e:	bf48      	it	mi
 801ac60:	b2ad      	uxthmi	r5, r5
 801ac62:	e7e6      	b.n	801ac32 <_printf_i+0x182>
 801ac64:	4616      	mov	r6, r2
 801ac66:	e7bb      	b.n	801abe0 <_printf_i+0x130>
 801ac68:	680b      	ldr	r3, [r1, #0]
 801ac6a:	6826      	ldr	r6, [r4, #0]
 801ac6c:	6960      	ldr	r0, [r4, #20]
 801ac6e:	1d1d      	adds	r5, r3, #4
 801ac70:	600d      	str	r5, [r1, #0]
 801ac72:	0635      	lsls	r5, r6, #24
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	d501      	bpl.n	801ac7c <_printf_i+0x1cc>
 801ac78:	6018      	str	r0, [r3, #0]
 801ac7a:	e002      	b.n	801ac82 <_printf_i+0x1d2>
 801ac7c:	0671      	lsls	r1, r6, #25
 801ac7e:	d5fb      	bpl.n	801ac78 <_printf_i+0x1c8>
 801ac80:	8018      	strh	r0, [r3, #0]
 801ac82:	2300      	movs	r3, #0
 801ac84:	6123      	str	r3, [r4, #16]
 801ac86:	4616      	mov	r6, r2
 801ac88:	e7ba      	b.n	801ac00 <_printf_i+0x150>
 801ac8a:	680b      	ldr	r3, [r1, #0]
 801ac8c:	1d1a      	adds	r2, r3, #4
 801ac8e:	600a      	str	r2, [r1, #0]
 801ac90:	681e      	ldr	r6, [r3, #0]
 801ac92:	6862      	ldr	r2, [r4, #4]
 801ac94:	2100      	movs	r1, #0
 801ac96:	4630      	mov	r0, r6
 801ac98:	f7e5 fb2a 	bl	80002f0 <memchr>
 801ac9c:	b108      	cbz	r0, 801aca2 <_printf_i+0x1f2>
 801ac9e:	1b80      	subs	r0, r0, r6
 801aca0:	6060      	str	r0, [r4, #4]
 801aca2:	6863      	ldr	r3, [r4, #4]
 801aca4:	6123      	str	r3, [r4, #16]
 801aca6:	2300      	movs	r3, #0
 801aca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acac:	e7a8      	b.n	801ac00 <_printf_i+0x150>
 801acae:	6923      	ldr	r3, [r4, #16]
 801acb0:	4632      	mov	r2, r6
 801acb2:	4649      	mov	r1, r9
 801acb4:	4640      	mov	r0, r8
 801acb6:	47d0      	blx	sl
 801acb8:	3001      	adds	r0, #1
 801acba:	d0ab      	beq.n	801ac14 <_printf_i+0x164>
 801acbc:	6823      	ldr	r3, [r4, #0]
 801acbe:	079b      	lsls	r3, r3, #30
 801acc0:	d413      	bmi.n	801acea <_printf_i+0x23a>
 801acc2:	68e0      	ldr	r0, [r4, #12]
 801acc4:	9b03      	ldr	r3, [sp, #12]
 801acc6:	4298      	cmp	r0, r3
 801acc8:	bfb8      	it	lt
 801acca:	4618      	movlt	r0, r3
 801accc:	e7a4      	b.n	801ac18 <_printf_i+0x168>
 801acce:	2301      	movs	r3, #1
 801acd0:	4632      	mov	r2, r6
 801acd2:	4649      	mov	r1, r9
 801acd4:	4640      	mov	r0, r8
 801acd6:	47d0      	blx	sl
 801acd8:	3001      	adds	r0, #1
 801acda:	d09b      	beq.n	801ac14 <_printf_i+0x164>
 801acdc:	3501      	adds	r5, #1
 801acde:	68e3      	ldr	r3, [r4, #12]
 801ace0:	9903      	ldr	r1, [sp, #12]
 801ace2:	1a5b      	subs	r3, r3, r1
 801ace4:	42ab      	cmp	r3, r5
 801ace6:	dcf2      	bgt.n	801acce <_printf_i+0x21e>
 801ace8:	e7eb      	b.n	801acc2 <_printf_i+0x212>
 801acea:	2500      	movs	r5, #0
 801acec:	f104 0619 	add.w	r6, r4, #25
 801acf0:	e7f5      	b.n	801acde <_printf_i+0x22e>
 801acf2:	bf00      	nop
 801acf4:	08021c7a 	.word	0x08021c7a
 801acf8:	08021c8b 	.word	0x08021c8b

0801acfc <_scanf_float>:
 801acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad00:	b087      	sub	sp, #28
 801ad02:	4617      	mov	r7, r2
 801ad04:	9303      	str	r3, [sp, #12]
 801ad06:	688b      	ldr	r3, [r1, #8]
 801ad08:	1e5a      	subs	r2, r3, #1
 801ad0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ad0e:	bf83      	ittte	hi
 801ad10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ad14:	195b      	addhi	r3, r3, r5
 801ad16:	9302      	strhi	r3, [sp, #8]
 801ad18:	2300      	movls	r3, #0
 801ad1a:	bf86      	itte	hi
 801ad1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ad20:	608b      	strhi	r3, [r1, #8]
 801ad22:	9302      	strls	r3, [sp, #8]
 801ad24:	680b      	ldr	r3, [r1, #0]
 801ad26:	468b      	mov	fp, r1
 801ad28:	2500      	movs	r5, #0
 801ad2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ad2e:	f84b 3b1c 	str.w	r3, [fp], #28
 801ad32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ad36:	4680      	mov	r8, r0
 801ad38:	460c      	mov	r4, r1
 801ad3a:	465e      	mov	r6, fp
 801ad3c:	46aa      	mov	sl, r5
 801ad3e:	46a9      	mov	r9, r5
 801ad40:	9501      	str	r5, [sp, #4]
 801ad42:	68a2      	ldr	r2, [r4, #8]
 801ad44:	b152      	cbz	r2, 801ad5c <_scanf_float+0x60>
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	781b      	ldrb	r3, [r3, #0]
 801ad4a:	2b4e      	cmp	r3, #78	; 0x4e
 801ad4c:	d864      	bhi.n	801ae18 <_scanf_float+0x11c>
 801ad4e:	2b40      	cmp	r3, #64	; 0x40
 801ad50:	d83c      	bhi.n	801adcc <_scanf_float+0xd0>
 801ad52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ad56:	b2c8      	uxtb	r0, r1
 801ad58:	280e      	cmp	r0, #14
 801ad5a:	d93a      	bls.n	801add2 <_scanf_float+0xd6>
 801ad5c:	f1b9 0f00 	cmp.w	r9, #0
 801ad60:	d003      	beq.n	801ad6a <_scanf_float+0x6e>
 801ad62:	6823      	ldr	r3, [r4, #0]
 801ad64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ad68:	6023      	str	r3, [r4, #0]
 801ad6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ad6e:	f1ba 0f01 	cmp.w	sl, #1
 801ad72:	f200 8113 	bhi.w	801af9c <_scanf_float+0x2a0>
 801ad76:	455e      	cmp	r6, fp
 801ad78:	f200 8105 	bhi.w	801af86 <_scanf_float+0x28a>
 801ad7c:	2501      	movs	r5, #1
 801ad7e:	4628      	mov	r0, r5
 801ad80:	b007      	add	sp, #28
 801ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ad8a:	2a0d      	cmp	r2, #13
 801ad8c:	d8e6      	bhi.n	801ad5c <_scanf_float+0x60>
 801ad8e:	a101      	add	r1, pc, #4	; (adr r1, 801ad94 <_scanf_float+0x98>)
 801ad90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ad94:	0801aed3 	.word	0x0801aed3
 801ad98:	0801ad5d 	.word	0x0801ad5d
 801ad9c:	0801ad5d 	.word	0x0801ad5d
 801ada0:	0801ad5d 	.word	0x0801ad5d
 801ada4:	0801af33 	.word	0x0801af33
 801ada8:	0801af0b 	.word	0x0801af0b
 801adac:	0801ad5d 	.word	0x0801ad5d
 801adb0:	0801ad5d 	.word	0x0801ad5d
 801adb4:	0801aee1 	.word	0x0801aee1
 801adb8:	0801ad5d 	.word	0x0801ad5d
 801adbc:	0801ad5d 	.word	0x0801ad5d
 801adc0:	0801ad5d 	.word	0x0801ad5d
 801adc4:	0801ad5d 	.word	0x0801ad5d
 801adc8:	0801ae99 	.word	0x0801ae99
 801adcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801add0:	e7db      	b.n	801ad8a <_scanf_float+0x8e>
 801add2:	290e      	cmp	r1, #14
 801add4:	d8c2      	bhi.n	801ad5c <_scanf_float+0x60>
 801add6:	a001      	add	r0, pc, #4	; (adr r0, 801addc <_scanf_float+0xe0>)
 801add8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801addc:	0801ae8b 	.word	0x0801ae8b
 801ade0:	0801ad5d 	.word	0x0801ad5d
 801ade4:	0801ae8b 	.word	0x0801ae8b
 801ade8:	0801af1f 	.word	0x0801af1f
 801adec:	0801ad5d 	.word	0x0801ad5d
 801adf0:	0801ae39 	.word	0x0801ae39
 801adf4:	0801ae75 	.word	0x0801ae75
 801adf8:	0801ae75 	.word	0x0801ae75
 801adfc:	0801ae75 	.word	0x0801ae75
 801ae00:	0801ae75 	.word	0x0801ae75
 801ae04:	0801ae75 	.word	0x0801ae75
 801ae08:	0801ae75 	.word	0x0801ae75
 801ae0c:	0801ae75 	.word	0x0801ae75
 801ae10:	0801ae75 	.word	0x0801ae75
 801ae14:	0801ae75 	.word	0x0801ae75
 801ae18:	2b6e      	cmp	r3, #110	; 0x6e
 801ae1a:	d809      	bhi.n	801ae30 <_scanf_float+0x134>
 801ae1c:	2b60      	cmp	r3, #96	; 0x60
 801ae1e:	d8b2      	bhi.n	801ad86 <_scanf_float+0x8a>
 801ae20:	2b54      	cmp	r3, #84	; 0x54
 801ae22:	d077      	beq.n	801af14 <_scanf_float+0x218>
 801ae24:	2b59      	cmp	r3, #89	; 0x59
 801ae26:	d199      	bne.n	801ad5c <_scanf_float+0x60>
 801ae28:	2d07      	cmp	r5, #7
 801ae2a:	d197      	bne.n	801ad5c <_scanf_float+0x60>
 801ae2c:	2508      	movs	r5, #8
 801ae2e:	e029      	b.n	801ae84 <_scanf_float+0x188>
 801ae30:	2b74      	cmp	r3, #116	; 0x74
 801ae32:	d06f      	beq.n	801af14 <_scanf_float+0x218>
 801ae34:	2b79      	cmp	r3, #121	; 0x79
 801ae36:	e7f6      	b.n	801ae26 <_scanf_float+0x12a>
 801ae38:	6821      	ldr	r1, [r4, #0]
 801ae3a:	05c8      	lsls	r0, r1, #23
 801ae3c:	d51a      	bpl.n	801ae74 <_scanf_float+0x178>
 801ae3e:	9b02      	ldr	r3, [sp, #8]
 801ae40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ae44:	6021      	str	r1, [r4, #0]
 801ae46:	f109 0901 	add.w	r9, r9, #1
 801ae4a:	b11b      	cbz	r3, 801ae54 <_scanf_float+0x158>
 801ae4c:	3b01      	subs	r3, #1
 801ae4e:	3201      	adds	r2, #1
 801ae50:	9302      	str	r3, [sp, #8]
 801ae52:	60a2      	str	r2, [r4, #8]
 801ae54:	68a3      	ldr	r3, [r4, #8]
 801ae56:	3b01      	subs	r3, #1
 801ae58:	60a3      	str	r3, [r4, #8]
 801ae5a:	6923      	ldr	r3, [r4, #16]
 801ae5c:	3301      	adds	r3, #1
 801ae5e:	6123      	str	r3, [r4, #16]
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	3b01      	subs	r3, #1
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	607b      	str	r3, [r7, #4]
 801ae68:	f340 8084 	ble.w	801af74 <_scanf_float+0x278>
 801ae6c:	683b      	ldr	r3, [r7, #0]
 801ae6e:	3301      	adds	r3, #1
 801ae70:	603b      	str	r3, [r7, #0]
 801ae72:	e766      	b.n	801ad42 <_scanf_float+0x46>
 801ae74:	eb1a 0f05 	cmn.w	sl, r5
 801ae78:	f47f af70 	bne.w	801ad5c <_scanf_float+0x60>
 801ae7c:	6822      	ldr	r2, [r4, #0]
 801ae7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801ae82:	6022      	str	r2, [r4, #0]
 801ae84:	f806 3b01 	strb.w	r3, [r6], #1
 801ae88:	e7e4      	b.n	801ae54 <_scanf_float+0x158>
 801ae8a:	6822      	ldr	r2, [r4, #0]
 801ae8c:	0610      	lsls	r0, r2, #24
 801ae8e:	f57f af65 	bpl.w	801ad5c <_scanf_float+0x60>
 801ae92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ae96:	e7f4      	b.n	801ae82 <_scanf_float+0x186>
 801ae98:	f1ba 0f00 	cmp.w	sl, #0
 801ae9c:	d10e      	bne.n	801aebc <_scanf_float+0x1c0>
 801ae9e:	f1b9 0f00 	cmp.w	r9, #0
 801aea2:	d10e      	bne.n	801aec2 <_scanf_float+0x1c6>
 801aea4:	6822      	ldr	r2, [r4, #0]
 801aea6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aeaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aeae:	d108      	bne.n	801aec2 <_scanf_float+0x1c6>
 801aeb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aeb4:	6022      	str	r2, [r4, #0]
 801aeb6:	f04f 0a01 	mov.w	sl, #1
 801aeba:	e7e3      	b.n	801ae84 <_scanf_float+0x188>
 801aebc:	f1ba 0f02 	cmp.w	sl, #2
 801aec0:	d055      	beq.n	801af6e <_scanf_float+0x272>
 801aec2:	2d01      	cmp	r5, #1
 801aec4:	d002      	beq.n	801aecc <_scanf_float+0x1d0>
 801aec6:	2d04      	cmp	r5, #4
 801aec8:	f47f af48 	bne.w	801ad5c <_scanf_float+0x60>
 801aecc:	3501      	adds	r5, #1
 801aece:	b2ed      	uxtb	r5, r5
 801aed0:	e7d8      	b.n	801ae84 <_scanf_float+0x188>
 801aed2:	f1ba 0f01 	cmp.w	sl, #1
 801aed6:	f47f af41 	bne.w	801ad5c <_scanf_float+0x60>
 801aeda:	f04f 0a02 	mov.w	sl, #2
 801aede:	e7d1      	b.n	801ae84 <_scanf_float+0x188>
 801aee0:	b97d      	cbnz	r5, 801af02 <_scanf_float+0x206>
 801aee2:	f1b9 0f00 	cmp.w	r9, #0
 801aee6:	f47f af3c 	bne.w	801ad62 <_scanf_float+0x66>
 801aeea:	6822      	ldr	r2, [r4, #0]
 801aeec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aef0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aef4:	f47f af39 	bne.w	801ad6a <_scanf_float+0x6e>
 801aef8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aefc:	6022      	str	r2, [r4, #0]
 801aefe:	2501      	movs	r5, #1
 801af00:	e7c0      	b.n	801ae84 <_scanf_float+0x188>
 801af02:	2d03      	cmp	r5, #3
 801af04:	d0e2      	beq.n	801aecc <_scanf_float+0x1d0>
 801af06:	2d05      	cmp	r5, #5
 801af08:	e7de      	b.n	801aec8 <_scanf_float+0x1cc>
 801af0a:	2d02      	cmp	r5, #2
 801af0c:	f47f af26 	bne.w	801ad5c <_scanf_float+0x60>
 801af10:	2503      	movs	r5, #3
 801af12:	e7b7      	b.n	801ae84 <_scanf_float+0x188>
 801af14:	2d06      	cmp	r5, #6
 801af16:	f47f af21 	bne.w	801ad5c <_scanf_float+0x60>
 801af1a:	2507      	movs	r5, #7
 801af1c:	e7b2      	b.n	801ae84 <_scanf_float+0x188>
 801af1e:	6822      	ldr	r2, [r4, #0]
 801af20:	0591      	lsls	r1, r2, #22
 801af22:	f57f af1b 	bpl.w	801ad5c <_scanf_float+0x60>
 801af26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801af2a:	6022      	str	r2, [r4, #0]
 801af2c:	f8cd 9004 	str.w	r9, [sp, #4]
 801af30:	e7a8      	b.n	801ae84 <_scanf_float+0x188>
 801af32:	6822      	ldr	r2, [r4, #0]
 801af34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801af38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801af3c:	d006      	beq.n	801af4c <_scanf_float+0x250>
 801af3e:	0550      	lsls	r0, r2, #21
 801af40:	f57f af0c 	bpl.w	801ad5c <_scanf_float+0x60>
 801af44:	f1b9 0f00 	cmp.w	r9, #0
 801af48:	f43f af0f 	beq.w	801ad6a <_scanf_float+0x6e>
 801af4c:	0591      	lsls	r1, r2, #22
 801af4e:	bf58      	it	pl
 801af50:	9901      	ldrpl	r1, [sp, #4]
 801af52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801af56:	bf58      	it	pl
 801af58:	eba9 0101 	subpl.w	r1, r9, r1
 801af5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801af60:	bf58      	it	pl
 801af62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801af66:	6022      	str	r2, [r4, #0]
 801af68:	f04f 0900 	mov.w	r9, #0
 801af6c:	e78a      	b.n	801ae84 <_scanf_float+0x188>
 801af6e:	f04f 0a03 	mov.w	sl, #3
 801af72:	e787      	b.n	801ae84 <_scanf_float+0x188>
 801af74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801af78:	4639      	mov	r1, r7
 801af7a:	4640      	mov	r0, r8
 801af7c:	4798      	blx	r3
 801af7e:	2800      	cmp	r0, #0
 801af80:	f43f aedf 	beq.w	801ad42 <_scanf_float+0x46>
 801af84:	e6ea      	b.n	801ad5c <_scanf_float+0x60>
 801af86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801af8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801af8e:	463a      	mov	r2, r7
 801af90:	4640      	mov	r0, r8
 801af92:	4798      	blx	r3
 801af94:	6923      	ldr	r3, [r4, #16]
 801af96:	3b01      	subs	r3, #1
 801af98:	6123      	str	r3, [r4, #16]
 801af9a:	e6ec      	b.n	801ad76 <_scanf_float+0x7a>
 801af9c:	1e6b      	subs	r3, r5, #1
 801af9e:	2b06      	cmp	r3, #6
 801afa0:	d825      	bhi.n	801afee <_scanf_float+0x2f2>
 801afa2:	2d02      	cmp	r5, #2
 801afa4:	d836      	bhi.n	801b014 <_scanf_float+0x318>
 801afa6:	455e      	cmp	r6, fp
 801afa8:	f67f aee8 	bls.w	801ad7c <_scanf_float+0x80>
 801afac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801afb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801afb4:	463a      	mov	r2, r7
 801afb6:	4640      	mov	r0, r8
 801afb8:	4798      	blx	r3
 801afba:	6923      	ldr	r3, [r4, #16]
 801afbc:	3b01      	subs	r3, #1
 801afbe:	6123      	str	r3, [r4, #16]
 801afc0:	e7f1      	b.n	801afa6 <_scanf_float+0x2aa>
 801afc2:	9802      	ldr	r0, [sp, #8]
 801afc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801afc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801afcc:	9002      	str	r0, [sp, #8]
 801afce:	463a      	mov	r2, r7
 801afd0:	4640      	mov	r0, r8
 801afd2:	4798      	blx	r3
 801afd4:	6923      	ldr	r3, [r4, #16]
 801afd6:	3b01      	subs	r3, #1
 801afd8:	6123      	str	r3, [r4, #16]
 801afda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801afde:	fa5f fa8a 	uxtb.w	sl, sl
 801afe2:	f1ba 0f02 	cmp.w	sl, #2
 801afe6:	d1ec      	bne.n	801afc2 <_scanf_float+0x2c6>
 801afe8:	3d03      	subs	r5, #3
 801afea:	b2ed      	uxtb	r5, r5
 801afec:	1b76      	subs	r6, r6, r5
 801afee:	6823      	ldr	r3, [r4, #0]
 801aff0:	05da      	lsls	r2, r3, #23
 801aff2:	d52f      	bpl.n	801b054 <_scanf_float+0x358>
 801aff4:	055b      	lsls	r3, r3, #21
 801aff6:	d510      	bpl.n	801b01a <_scanf_float+0x31e>
 801aff8:	455e      	cmp	r6, fp
 801affa:	f67f aebf 	bls.w	801ad7c <_scanf_float+0x80>
 801affe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b002:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b006:	463a      	mov	r2, r7
 801b008:	4640      	mov	r0, r8
 801b00a:	4798      	blx	r3
 801b00c:	6923      	ldr	r3, [r4, #16]
 801b00e:	3b01      	subs	r3, #1
 801b010:	6123      	str	r3, [r4, #16]
 801b012:	e7f1      	b.n	801aff8 <_scanf_float+0x2fc>
 801b014:	46aa      	mov	sl, r5
 801b016:	9602      	str	r6, [sp, #8]
 801b018:	e7df      	b.n	801afda <_scanf_float+0x2de>
 801b01a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b01e:	6923      	ldr	r3, [r4, #16]
 801b020:	2965      	cmp	r1, #101	; 0x65
 801b022:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801b026:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801b02a:	6123      	str	r3, [r4, #16]
 801b02c:	d00c      	beq.n	801b048 <_scanf_float+0x34c>
 801b02e:	2945      	cmp	r1, #69	; 0x45
 801b030:	d00a      	beq.n	801b048 <_scanf_float+0x34c>
 801b032:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b036:	463a      	mov	r2, r7
 801b038:	4640      	mov	r0, r8
 801b03a:	4798      	blx	r3
 801b03c:	6923      	ldr	r3, [r4, #16]
 801b03e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b042:	3b01      	subs	r3, #1
 801b044:	1eb5      	subs	r5, r6, #2
 801b046:	6123      	str	r3, [r4, #16]
 801b048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b04c:	463a      	mov	r2, r7
 801b04e:	4640      	mov	r0, r8
 801b050:	4798      	blx	r3
 801b052:	462e      	mov	r6, r5
 801b054:	6825      	ldr	r5, [r4, #0]
 801b056:	f015 0510 	ands.w	r5, r5, #16
 801b05a:	d14d      	bne.n	801b0f8 <_scanf_float+0x3fc>
 801b05c:	7035      	strb	r5, [r6, #0]
 801b05e:	6823      	ldr	r3, [r4, #0]
 801b060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b068:	d11a      	bne.n	801b0a0 <_scanf_float+0x3a4>
 801b06a:	9b01      	ldr	r3, [sp, #4]
 801b06c:	454b      	cmp	r3, r9
 801b06e:	eba3 0209 	sub.w	r2, r3, r9
 801b072:	d122      	bne.n	801b0ba <_scanf_float+0x3be>
 801b074:	2200      	movs	r2, #0
 801b076:	4659      	mov	r1, fp
 801b078:	4640      	mov	r0, r8
 801b07a:	f000 fed3 	bl	801be24 <_strtod_r>
 801b07e:	9b03      	ldr	r3, [sp, #12]
 801b080:	6821      	ldr	r1, [r4, #0]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	f011 0f02 	tst.w	r1, #2
 801b088:	f103 0204 	add.w	r2, r3, #4
 801b08c:	d020      	beq.n	801b0d0 <_scanf_float+0x3d4>
 801b08e:	9903      	ldr	r1, [sp, #12]
 801b090:	600a      	str	r2, [r1, #0]
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	ed83 0b00 	vstr	d0, [r3]
 801b098:	68e3      	ldr	r3, [r4, #12]
 801b09a:	3301      	adds	r3, #1
 801b09c:	60e3      	str	r3, [r4, #12]
 801b09e:	e66e      	b.n	801ad7e <_scanf_float+0x82>
 801b0a0:	9b04      	ldr	r3, [sp, #16]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d0e6      	beq.n	801b074 <_scanf_float+0x378>
 801b0a6:	9905      	ldr	r1, [sp, #20]
 801b0a8:	230a      	movs	r3, #10
 801b0aa:	462a      	mov	r2, r5
 801b0ac:	3101      	adds	r1, #1
 801b0ae:	4640      	mov	r0, r8
 801b0b0:	f000 ff42 	bl	801bf38 <_strtol_r>
 801b0b4:	9b04      	ldr	r3, [sp, #16]
 801b0b6:	9e05      	ldr	r6, [sp, #20]
 801b0b8:	1ac2      	subs	r2, r0, r3
 801b0ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b0be:	429e      	cmp	r6, r3
 801b0c0:	bf28      	it	cs
 801b0c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b0c6:	490d      	ldr	r1, [pc, #52]	; (801b0fc <_scanf_float+0x400>)
 801b0c8:	4630      	mov	r0, r6
 801b0ca:	f000 f889 	bl	801b1e0 <siprintf>
 801b0ce:	e7d1      	b.n	801b074 <_scanf_float+0x378>
 801b0d0:	f011 0f04 	tst.w	r1, #4
 801b0d4:	9903      	ldr	r1, [sp, #12]
 801b0d6:	600a      	str	r2, [r1, #0]
 801b0d8:	d1db      	bne.n	801b092 <_scanf_float+0x396>
 801b0da:	eeb4 0b40 	vcmp.f64	d0, d0
 801b0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0e2:	681e      	ldr	r6, [r3, #0]
 801b0e4:	d705      	bvc.n	801b0f2 <_scanf_float+0x3f6>
 801b0e6:	4806      	ldr	r0, [pc, #24]	; (801b100 <_scanf_float+0x404>)
 801b0e8:	f000 f874 	bl	801b1d4 <nanf>
 801b0ec:	ed86 0a00 	vstr	s0, [r6]
 801b0f0:	e7d2      	b.n	801b098 <_scanf_float+0x39c>
 801b0f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b0f6:	e7f9      	b.n	801b0ec <_scanf_float+0x3f0>
 801b0f8:	2500      	movs	r5, #0
 801b0fa:	e640      	b.n	801ad7e <_scanf_float+0x82>
 801b0fc:	08021c9c 	.word	0x08021c9c
 801b100:	08021da3 	.word	0x08021da3

0801b104 <iprintf>:
 801b104:	b40f      	push	{r0, r1, r2, r3}
 801b106:	4b0a      	ldr	r3, [pc, #40]	; (801b130 <iprintf+0x2c>)
 801b108:	b513      	push	{r0, r1, r4, lr}
 801b10a:	681c      	ldr	r4, [r3, #0]
 801b10c:	b124      	cbz	r4, 801b118 <iprintf+0x14>
 801b10e:	69a3      	ldr	r3, [r4, #24]
 801b110:	b913      	cbnz	r3, 801b118 <iprintf+0x14>
 801b112:	4620      	mov	r0, r4
 801b114:	f001 ff1e 	bl	801cf54 <__sinit>
 801b118:	ab05      	add	r3, sp, #20
 801b11a:	9a04      	ldr	r2, [sp, #16]
 801b11c:	68a1      	ldr	r1, [r4, #8]
 801b11e:	9301      	str	r3, [sp, #4]
 801b120:	4620      	mov	r0, r4
 801b122:	f003 fa0f 	bl	801e544 <_vfiprintf_r>
 801b126:	b002      	add	sp, #8
 801b128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b12c:	b004      	add	sp, #16
 801b12e:	4770      	bx	lr
 801b130:	24000430 	.word	0x24000430

0801b134 <rand>:
 801b134:	4b17      	ldr	r3, [pc, #92]	; (801b194 <rand+0x60>)
 801b136:	b510      	push	{r4, lr}
 801b138:	681c      	ldr	r4, [r3, #0]
 801b13a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b13c:	b9b3      	cbnz	r3, 801b16c <rand+0x38>
 801b13e:	2018      	movs	r0, #24
 801b140:	f7ff f8a8 	bl	801a294 <malloc>
 801b144:	63a0      	str	r0, [r4, #56]	; 0x38
 801b146:	b928      	cbnz	r0, 801b154 <rand+0x20>
 801b148:	4602      	mov	r2, r0
 801b14a:	4b13      	ldr	r3, [pc, #76]	; (801b198 <rand+0x64>)
 801b14c:	4813      	ldr	r0, [pc, #76]	; (801b19c <rand+0x68>)
 801b14e:	214e      	movs	r1, #78	; 0x4e
 801b150:	f000 ffb4 	bl	801c0bc <__assert_func>
 801b154:	4a12      	ldr	r2, [pc, #72]	; (801b1a0 <rand+0x6c>)
 801b156:	4b13      	ldr	r3, [pc, #76]	; (801b1a4 <rand+0x70>)
 801b158:	e9c0 2300 	strd	r2, r3, [r0]
 801b15c:	4b12      	ldr	r3, [pc, #72]	; (801b1a8 <rand+0x74>)
 801b15e:	6083      	str	r3, [r0, #8]
 801b160:	230b      	movs	r3, #11
 801b162:	8183      	strh	r3, [r0, #12]
 801b164:	2201      	movs	r2, #1
 801b166:	2300      	movs	r3, #0
 801b168:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b16c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b16e:	480f      	ldr	r0, [pc, #60]	; (801b1ac <rand+0x78>)
 801b170:	690a      	ldr	r2, [r1, #16]
 801b172:	694b      	ldr	r3, [r1, #20]
 801b174:	4c0e      	ldr	r4, [pc, #56]	; (801b1b0 <rand+0x7c>)
 801b176:	4350      	muls	r0, r2
 801b178:	fb04 0003 	mla	r0, r4, r3, r0
 801b17c:	fba2 3404 	umull	r3, r4, r2, r4
 801b180:	1c5a      	adds	r2, r3, #1
 801b182:	4404      	add	r4, r0
 801b184:	f144 0000 	adc.w	r0, r4, #0
 801b188:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801b18c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b190:	bd10      	pop	{r4, pc}
 801b192:	bf00      	nop
 801b194:	24000430 	.word	0x24000430
 801b198:	08021ca1 	.word	0x08021ca1
 801b19c:	08021cb8 	.word	0x08021cb8
 801b1a0:	abcd330e 	.word	0xabcd330e
 801b1a4:	e66d1234 	.word	0xe66d1234
 801b1a8:	0005deec 	.word	0x0005deec
 801b1ac:	5851f42d 	.word	0x5851f42d
 801b1b0:	4c957f2d 	.word	0x4c957f2d

0801b1b4 <_sbrk_r>:
 801b1b4:	b538      	push	{r3, r4, r5, lr}
 801b1b6:	4d06      	ldr	r5, [pc, #24]	; (801b1d0 <_sbrk_r+0x1c>)
 801b1b8:	2300      	movs	r3, #0
 801b1ba:	4604      	mov	r4, r0
 801b1bc:	4608      	mov	r0, r1
 801b1be:	602b      	str	r3, [r5, #0]
 801b1c0:	f7e6 fec4 	bl	8001f4c <_sbrk>
 801b1c4:	1c43      	adds	r3, r0, #1
 801b1c6:	d102      	bne.n	801b1ce <_sbrk_r+0x1a>
 801b1c8:	682b      	ldr	r3, [r5, #0]
 801b1ca:	b103      	cbz	r3, 801b1ce <_sbrk_r+0x1a>
 801b1cc:	6023      	str	r3, [r4, #0]
 801b1ce:	bd38      	pop	{r3, r4, r5, pc}
 801b1d0:	24003e60 	.word	0x24003e60

0801b1d4 <nanf>:
 801b1d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b1dc <nanf+0x8>
 801b1d8:	4770      	bx	lr
 801b1da:	bf00      	nop
 801b1dc:	7fc00000 	.word	0x7fc00000

0801b1e0 <siprintf>:
 801b1e0:	b40e      	push	{r1, r2, r3}
 801b1e2:	b500      	push	{lr}
 801b1e4:	b09c      	sub	sp, #112	; 0x70
 801b1e6:	ab1d      	add	r3, sp, #116	; 0x74
 801b1e8:	9002      	str	r0, [sp, #8]
 801b1ea:	9006      	str	r0, [sp, #24]
 801b1ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b1f0:	4809      	ldr	r0, [pc, #36]	; (801b218 <siprintf+0x38>)
 801b1f2:	9107      	str	r1, [sp, #28]
 801b1f4:	9104      	str	r1, [sp, #16]
 801b1f6:	4909      	ldr	r1, [pc, #36]	; (801b21c <siprintf+0x3c>)
 801b1f8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1fc:	9105      	str	r1, [sp, #20]
 801b1fe:	6800      	ldr	r0, [r0, #0]
 801b200:	9301      	str	r3, [sp, #4]
 801b202:	a902      	add	r1, sp, #8
 801b204:	f003 f874 	bl	801e2f0 <_svfiprintf_r>
 801b208:	9b02      	ldr	r3, [sp, #8]
 801b20a:	2200      	movs	r2, #0
 801b20c:	701a      	strb	r2, [r3, #0]
 801b20e:	b01c      	add	sp, #112	; 0x70
 801b210:	f85d eb04 	ldr.w	lr, [sp], #4
 801b214:	b003      	add	sp, #12
 801b216:	4770      	bx	lr
 801b218:	24000430 	.word	0x24000430
 801b21c:	ffff0208 	.word	0xffff0208

0801b220 <strncmp>:
 801b220:	b510      	push	{r4, lr}
 801b222:	b16a      	cbz	r2, 801b240 <strncmp+0x20>
 801b224:	3901      	subs	r1, #1
 801b226:	1884      	adds	r4, r0, r2
 801b228:	f810 3b01 	ldrb.w	r3, [r0], #1
 801b22c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801b230:	4293      	cmp	r3, r2
 801b232:	d103      	bne.n	801b23c <strncmp+0x1c>
 801b234:	42a0      	cmp	r0, r4
 801b236:	d001      	beq.n	801b23c <strncmp+0x1c>
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d1f5      	bne.n	801b228 <strncmp+0x8>
 801b23c:	1a98      	subs	r0, r3, r2
 801b23e:	bd10      	pop	{r4, pc}
 801b240:	4610      	mov	r0, r2
 801b242:	e7fc      	b.n	801b23e <strncmp+0x1e>

0801b244 <sulp>:
 801b244:	b570      	push	{r4, r5, r6, lr}
 801b246:	4604      	mov	r4, r0
 801b248:	460d      	mov	r5, r1
 801b24a:	4616      	mov	r6, r2
 801b24c:	ec45 4b10 	vmov	d0, r4, r5
 801b250:	f002 fe94 	bl	801df7c <__ulp>
 801b254:	b17e      	cbz	r6, 801b276 <sulp+0x32>
 801b256:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b25a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b25e:	2b00      	cmp	r3, #0
 801b260:	dd09      	ble.n	801b276 <sulp+0x32>
 801b262:	051b      	lsls	r3, r3, #20
 801b264:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801b268:	2000      	movs	r0, #0
 801b26a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801b26e:	ec41 0b17 	vmov	d7, r0, r1
 801b272:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b276:	bd70      	pop	{r4, r5, r6, pc}

0801b278 <_strtod_l>:
 801b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b27c:	ed2d 8b0c 	vpush	{d8-d13}
 801b280:	b09d      	sub	sp, #116	; 0x74
 801b282:	461f      	mov	r7, r3
 801b284:	2300      	movs	r3, #0
 801b286:	9318      	str	r3, [sp, #96]	; 0x60
 801b288:	4ba6      	ldr	r3, [pc, #664]	; (801b524 <_strtod_l+0x2ac>)
 801b28a:	9213      	str	r2, [sp, #76]	; 0x4c
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	9308      	str	r3, [sp, #32]
 801b290:	4604      	mov	r4, r0
 801b292:	4618      	mov	r0, r3
 801b294:	468a      	mov	sl, r1
 801b296:	f7e5 f823 	bl	80002e0 <strlen>
 801b29a:	f04f 0800 	mov.w	r8, #0
 801b29e:	4605      	mov	r5, r0
 801b2a0:	f04f 0900 	mov.w	r9, #0
 801b2a4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801b2a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2aa:	781a      	ldrb	r2, [r3, #0]
 801b2ac:	2a2b      	cmp	r2, #43	; 0x2b
 801b2ae:	d04d      	beq.n	801b34c <_strtod_l+0xd4>
 801b2b0:	d83a      	bhi.n	801b328 <_strtod_l+0xb0>
 801b2b2:	2a0d      	cmp	r2, #13
 801b2b4:	d833      	bhi.n	801b31e <_strtod_l+0xa6>
 801b2b6:	2a08      	cmp	r2, #8
 801b2b8:	d833      	bhi.n	801b322 <_strtod_l+0xaa>
 801b2ba:	2a00      	cmp	r2, #0
 801b2bc:	d03d      	beq.n	801b33a <_strtod_l+0xc2>
 801b2be:	2300      	movs	r3, #0
 801b2c0:	930b      	str	r3, [sp, #44]	; 0x2c
 801b2c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801b2c4:	7833      	ldrb	r3, [r6, #0]
 801b2c6:	2b30      	cmp	r3, #48	; 0x30
 801b2c8:	f040 80b6 	bne.w	801b438 <_strtod_l+0x1c0>
 801b2cc:	7873      	ldrb	r3, [r6, #1]
 801b2ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b2d2:	2b58      	cmp	r3, #88	; 0x58
 801b2d4:	d16d      	bne.n	801b3b2 <_strtod_l+0x13a>
 801b2d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2d8:	9301      	str	r3, [sp, #4]
 801b2da:	ab18      	add	r3, sp, #96	; 0x60
 801b2dc:	9702      	str	r7, [sp, #8]
 801b2de:	9300      	str	r3, [sp, #0]
 801b2e0:	4a91      	ldr	r2, [pc, #580]	; (801b528 <_strtod_l+0x2b0>)
 801b2e2:	ab19      	add	r3, sp, #100	; 0x64
 801b2e4:	a917      	add	r1, sp, #92	; 0x5c
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	f001 ff4a 	bl	801d180 <__gethex>
 801b2ec:	f010 0507 	ands.w	r5, r0, #7
 801b2f0:	4607      	mov	r7, r0
 801b2f2:	d005      	beq.n	801b300 <_strtod_l+0x88>
 801b2f4:	2d06      	cmp	r5, #6
 801b2f6:	d12b      	bne.n	801b350 <_strtod_l+0xd8>
 801b2f8:	3601      	adds	r6, #1
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	9617      	str	r6, [sp, #92]	; 0x5c
 801b2fe:	930b      	str	r3, [sp, #44]	; 0x2c
 801b300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b302:	2b00      	cmp	r3, #0
 801b304:	f040 856e 	bne.w	801bde4 <_strtod_l+0xb6c>
 801b308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b30a:	b1e3      	cbz	r3, 801b346 <_strtod_l+0xce>
 801b30c:	ec49 8b17 	vmov	d7, r8, r9
 801b310:	eeb1 0b47 	vneg.f64	d0, d7
 801b314:	b01d      	add	sp, #116	; 0x74
 801b316:	ecbd 8b0c 	vpop	{d8-d13}
 801b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b31e:	2a20      	cmp	r2, #32
 801b320:	d1cd      	bne.n	801b2be <_strtod_l+0x46>
 801b322:	3301      	adds	r3, #1
 801b324:	9317      	str	r3, [sp, #92]	; 0x5c
 801b326:	e7bf      	b.n	801b2a8 <_strtod_l+0x30>
 801b328:	2a2d      	cmp	r2, #45	; 0x2d
 801b32a:	d1c8      	bne.n	801b2be <_strtod_l+0x46>
 801b32c:	2201      	movs	r2, #1
 801b32e:	920b      	str	r2, [sp, #44]	; 0x2c
 801b330:	1c5a      	adds	r2, r3, #1
 801b332:	9217      	str	r2, [sp, #92]	; 0x5c
 801b334:	785b      	ldrb	r3, [r3, #1]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d1c3      	bne.n	801b2c2 <_strtod_l+0x4a>
 801b33a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b33c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801b340:	2b00      	cmp	r3, #0
 801b342:	f040 854d 	bne.w	801bde0 <_strtod_l+0xb68>
 801b346:	ec49 8b10 	vmov	d0, r8, r9
 801b34a:	e7e3      	b.n	801b314 <_strtod_l+0x9c>
 801b34c:	2200      	movs	r2, #0
 801b34e:	e7ee      	b.n	801b32e <_strtod_l+0xb6>
 801b350:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b352:	b13a      	cbz	r2, 801b364 <_strtod_l+0xec>
 801b354:	2135      	movs	r1, #53	; 0x35
 801b356:	a81a      	add	r0, sp, #104	; 0x68
 801b358:	f002 ff1c 	bl	801e194 <__copybits>
 801b35c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b35e:	4620      	mov	r0, r4
 801b360:	f002 fae0 	bl	801d924 <_Bfree>
 801b364:	3d01      	subs	r5, #1
 801b366:	2d05      	cmp	r5, #5
 801b368:	d807      	bhi.n	801b37a <_strtod_l+0x102>
 801b36a:	e8df f005 	tbb	[pc, r5]
 801b36e:	0b0e      	.short	0x0b0e
 801b370:	030e1d18 	.word	0x030e1d18
 801b374:	f04f 0900 	mov.w	r9, #0
 801b378:	46c8      	mov	r8, r9
 801b37a:	073b      	lsls	r3, r7, #28
 801b37c:	d5c0      	bpl.n	801b300 <_strtod_l+0x88>
 801b37e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801b382:	e7bd      	b.n	801b300 <_strtod_l+0x88>
 801b384:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801b388:	e7f7      	b.n	801b37a <_strtod_l+0x102>
 801b38a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801b38e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b390:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b394:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b398:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801b39c:	e7ed      	b.n	801b37a <_strtod_l+0x102>
 801b39e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801b52c <_strtod_l+0x2b4>
 801b3a2:	f04f 0800 	mov.w	r8, #0
 801b3a6:	e7e8      	b.n	801b37a <_strtod_l+0x102>
 801b3a8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801b3ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801b3b0:	e7e3      	b.n	801b37a <_strtod_l+0x102>
 801b3b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3b4:	1c5a      	adds	r2, r3, #1
 801b3b6:	9217      	str	r2, [sp, #92]	; 0x5c
 801b3b8:	785b      	ldrb	r3, [r3, #1]
 801b3ba:	2b30      	cmp	r3, #48	; 0x30
 801b3bc:	d0f9      	beq.n	801b3b2 <_strtod_l+0x13a>
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d09e      	beq.n	801b300 <_strtod_l+0x88>
 801b3c2:	2301      	movs	r3, #1
 801b3c4:	9306      	str	r3, [sp, #24]
 801b3c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3c8:	930c      	str	r3, [sp, #48]	; 0x30
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	9304      	str	r3, [sp, #16]
 801b3ce:	930a      	str	r3, [sp, #40]	; 0x28
 801b3d0:	461e      	mov	r6, r3
 801b3d2:	220a      	movs	r2, #10
 801b3d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b3d6:	f890 b000 	ldrb.w	fp, [r0]
 801b3da:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801b3de:	b2d9      	uxtb	r1, r3
 801b3e0:	2909      	cmp	r1, #9
 801b3e2:	d92b      	bls.n	801b43c <_strtod_l+0x1c4>
 801b3e4:	9908      	ldr	r1, [sp, #32]
 801b3e6:	462a      	mov	r2, r5
 801b3e8:	f7ff ff1a 	bl	801b220 <strncmp>
 801b3ec:	2800      	cmp	r0, #0
 801b3ee:	d035      	beq.n	801b45c <_strtod_l+0x1e4>
 801b3f0:	2000      	movs	r0, #0
 801b3f2:	465a      	mov	r2, fp
 801b3f4:	4633      	mov	r3, r6
 801b3f6:	4683      	mov	fp, r0
 801b3f8:	4601      	mov	r1, r0
 801b3fa:	2a65      	cmp	r2, #101	; 0x65
 801b3fc:	d001      	beq.n	801b402 <_strtod_l+0x18a>
 801b3fe:	2a45      	cmp	r2, #69	; 0x45
 801b400:	d118      	bne.n	801b434 <_strtod_l+0x1bc>
 801b402:	b91b      	cbnz	r3, 801b40c <_strtod_l+0x194>
 801b404:	9b06      	ldr	r3, [sp, #24]
 801b406:	4303      	orrs	r3, r0
 801b408:	d097      	beq.n	801b33a <_strtod_l+0xc2>
 801b40a:	2300      	movs	r3, #0
 801b40c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801b410:	f10a 0201 	add.w	r2, sl, #1
 801b414:	9217      	str	r2, [sp, #92]	; 0x5c
 801b416:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801b41a:	2a2b      	cmp	r2, #43	; 0x2b
 801b41c:	d077      	beq.n	801b50e <_strtod_l+0x296>
 801b41e:	2a2d      	cmp	r2, #45	; 0x2d
 801b420:	d07d      	beq.n	801b51e <_strtod_l+0x2a6>
 801b422:	f04f 0e00 	mov.w	lr, #0
 801b426:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801b42a:	2d09      	cmp	r5, #9
 801b42c:	f240 8084 	bls.w	801b538 <_strtod_l+0x2c0>
 801b430:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801b434:	2500      	movs	r5, #0
 801b436:	e09f      	b.n	801b578 <_strtod_l+0x300>
 801b438:	2300      	movs	r3, #0
 801b43a:	e7c3      	b.n	801b3c4 <_strtod_l+0x14c>
 801b43c:	2e08      	cmp	r6, #8
 801b43e:	bfd5      	itete	le
 801b440:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801b442:	9904      	ldrgt	r1, [sp, #16]
 801b444:	fb02 3301 	mlale	r3, r2, r1, r3
 801b448:	fb02 3301 	mlagt	r3, r2, r1, r3
 801b44c:	f100 0001 	add.w	r0, r0, #1
 801b450:	bfd4      	ite	le
 801b452:	930a      	strle	r3, [sp, #40]	; 0x28
 801b454:	9304      	strgt	r3, [sp, #16]
 801b456:	3601      	adds	r6, #1
 801b458:	9017      	str	r0, [sp, #92]	; 0x5c
 801b45a:	e7bb      	b.n	801b3d4 <_strtod_l+0x15c>
 801b45c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b45e:	195a      	adds	r2, r3, r5
 801b460:	9217      	str	r2, [sp, #92]	; 0x5c
 801b462:	5d5a      	ldrb	r2, [r3, r5]
 801b464:	b3ae      	cbz	r6, 801b4d2 <_strtod_l+0x25a>
 801b466:	4683      	mov	fp, r0
 801b468:	4633      	mov	r3, r6
 801b46a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801b46e:	2909      	cmp	r1, #9
 801b470:	d912      	bls.n	801b498 <_strtod_l+0x220>
 801b472:	2101      	movs	r1, #1
 801b474:	e7c1      	b.n	801b3fa <_strtod_l+0x182>
 801b476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b478:	1c5a      	adds	r2, r3, #1
 801b47a:	9217      	str	r2, [sp, #92]	; 0x5c
 801b47c:	785a      	ldrb	r2, [r3, #1]
 801b47e:	3001      	adds	r0, #1
 801b480:	2a30      	cmp	r2, #48	; 0x30
 801b482:	d0f8      	beq.n	801b476 <_strtod_l+0x1fe>
 801b484:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801b488:	2b08      	cmp	r3, #8
 801b48a:	f200 84b0 	bhi.w	801bdee <_strtod_l+0xb76>
 801b48e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b490:	930c      	str	r3, [sp, #48]	; 0x30
 801b492:	4683      	mov	fp, r0
 801b494:	2000      	movs	r0, #0
 801b496:	4603      	mov	r3, r0
 801b498:	3a30      	subs	r2, #48	; 0x30
 801b49a:	f100 0101 	add.w	r1, r0, #1
 801b49e:	d012      	beq.n	801b4c6 <_strtod_l+0x24e>
 801b4a0:	448b      	add	fp, r1
 801b4a2:	eb00 0c03 	add.w	ip, r0, r3
 801b4a6:	4619      	mov	r1, r3
 801b4a8:	250a      	movs	r5, #10
 801b4aa:	4561      	cmp	r1, ip
 801b4ac:	d113      	bne.n	801b4d6 <_strtod_l+0x25e>
 801b4ae:	1819      	adds	r1, r3, r0
 801b4b0:	2908      	cmp	r1, #8
 801b4b2:	f103 0301 	add.w	r3, r3, #1
 801b4b6:	4403      	add	r3, r0
 801b4b8:	dc1d      	bgt.n	801b4f6 <_strtod_l+0x27e>
 801b4ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b4bc:	210a      	movs	r1, #10
 801b4be:	fb01 2200 	mla	r2, r1, r0, r2
 801b4c2:	920a      	str	r2, [sp, #40]	; 0x28
 801b4c4:	2100      	movs	r1, #0
 801b4c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b4c8:	1c50      	adds	r0, r2, #1
 801b4ca:	9017      	str	r0, [sp, #92]	; 0x5c
 801b4cc:	7852      	ldrb	r2, [r2, #1]
 801b4ce:	4608      	mov	r0, r1
 801b4d0:	e7cb      	b.n	801b46a <_strtod_l+0x1f2>
 801b4d2:	4630      	mov	r0, r6
 801b4d4:	e7d4      	b.n	801b480 <_strtod_l+0x208>
 801b4d6:	2908      	cmp	r1, #8
 801b4d8:	dc04      	bgt.n	801b4e4 <_strtod_l+0x26c>
 801b4da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b4dc:	436f      	muls	r7, r5
 801b4de:	970a      	str	r7, [sp, #40]	; 0x28
 801b4e0:	3101      	adds	r1, #1
 801b4e2:	e7e2      	b.n	801b4aa <_strtod_l+0x232>
 801b4e4:	f101 0e01 	add.w	lr, r1, #1
 801b4e8:	f1be 0f10 	cmp.w	lr, #16
 801b4ec:	bfde      	ittt	le
 801b4ee:	9f04      	ldrle	r7, [sp, #16]
 801b4f0:	436f      	mulle	r7, r5
 801b4f2:	9704      	strle	r7, [sp, #16]
 801b4f4:	e7f4      	b.n	801b4e0 <_strtod_l+0x268>
 801b4f6:	2b10      	cmp	r3, #16
 801b4f8:	bfdf      	itttt	le
 801b4fa:	9804      	ldrle	r0, [sp, #16]
 801b4fc:	210a      	movle	r1, #10
 801b4fe:	fb01 2200 	mlale	r2, r1, r0, r2
 801b502:	9204      	strle	r2, [sp, #16]
 801b504:	e7de      	b.n	801b4c4 <_strtod_l+0x24c>
 801b506:	f04f 0b00 	mov.w	fp, #0
 801b50a:	2101      	movs	r1, #1
 801b50c:	e77a      	b.n	801b404 <_strtod_l+0x18c>
 801b50e:	f04f 0e00 	mov.w	lr, #0
 801b512:	f10a 0202 	add.w	r2, sl, #2
 801b516:	9217      	str	r2, [sp, #92]	; 0x5c
 801b518:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801b51c:	e783      	b.n	801b426 <_strtod_l+0x1ae>
 801b51e:	f04f 0e01 	mov.w	lr, #1
 801b522:	e7f6      	b.n	801b512 <_strtod_l+0x29a>
 801b524:	08021ef0 	.word	0x08021ef0
 801b528:	08021d18 	.word	0x08021d18
 801b52c:	7ff00000 	.word	0x7ff00000
 801b530:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b532:	1c55      	adds	r5, r2, #1
 801b534:	9517      	str	r5, [sp, #92]	; 0x5c
 801b536:	7852      	ldrb	r2, [r2, #1]
 801b538:	2a30      	cmp	r2, #48	; 0x30
 801b53a:	d0f9      	beq.n	801b530 <_strtod_l+0x2b8>
 801b53c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801b540:	2d08      	cmp	r5, #8
 801b542:	f63f af77 	bhi.w	801b434 <_strtod_l+0x1bc>
 801b546:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801b54a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b54c:	9208      	str	r2, [sp, #32]
 801b54e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b550:	1c55      	adds	r5, r2, #1
 801b552:	9517      	str	r5, [sp, #92]	; 0x5c
 801b554:	7852      	ldrb	r2, [r2, #1]
 801b556:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801b55a:	2f09      	cmp	r7, #9
 801b55c:	d937      	bls.n	801b5ce <_strtod_l+0x356>
 801b55e:	9f08      	ldr	r7, [sp, #32]
 801b560:	1bed      	subs	r5, r5, r7
 801b562:	2d08      	cmp	r5, #8
 801b564:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801b568:	dc02      	bgt.n	801b570 <_strtod_l+0x2f8>
 801b56a:	4565      	cmp	r5, ip
 801b56c:	bfa8      	it	ge
 801b56e:	4665      	movge	r5, ip
 801b570:	f1be 0f00 	cmp.w	lr, #0
 801b574:	d000      	beq.n	801b578 <_strtod_l+0x300>
 801b576:	426d      	negs	r5, r5
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d14f      	bne.n	801b61c <_strtod_l+0x3a4>
 801b57c:	9b06      	ldr	r3, [sp, #24]
 801b57e:	4303      	orrs	r3, r0
 801b580:	f47f aebe 	bne.w	801b300 <_strtod_l+0x88>
 801b584:	2900      	cmp	r1, #0
 801b586:	f47f aed8 	bne.w	801b33a <_strtod_l+0xc2>
 801b58a:	2a69      	cmp	r2, #105	; 0x69
 801b58c:	d027      	beq.n	801b5de <_strtod_l+0x366>
 801b58e:	dc24      	bgt.n	801b5da <_strtod_l+0x362>
 801b590:	2a49      	cmp	r2, #73	; 0x49
 801b592:	d024      	beq.n	801b5de <_strtod_l+0x366>
 801b594:	2a4e      	cmp	r2, #78	; 0x4e
 801b596:	f47f aed0 	bne.w	801b33a <_strtod_l+0xc2>
 801b59a:	499b      	ldr	r1, [pc, #620]	; (801b808 <_strtod_l+0x590>)
 801b59c:	a817      	add	r0, sp, #92	; 0x5c
 801b59e:	f002 f847 	bl	801d630 <__match>
 801b5a2:	2800      	cmp	r0, #0
 801b5a4:	f43f aec9 	beq.w	801b33a <_strtod_l+0xc2>
 801b5a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5aa:	781b      	ldrb	r3, [r3, #0]
 801b5ac:	2b28      	cmp	r3, #40	; 0x28
 801b5ae:	d12d      	bne.n	801b60c <_strtod_l+0x394>
 801b5b0:	4996      	ldr	r1, [pc, #600]	; (801b80c <_strtod_l+0x594>)
 801b5b2:	aa1a      	add	r2, sp, #104	; 0x68
 801b5b4:	a817      	add	r0, sp, #92	; 0x5c
 801b5b6:	f002 f84f 	bl	801d658 <__hexnan>
 801b5ba:	2805      	cmp	r0, #5
 801b5bc:	d126      	bne.n	801b60c <_strtod_l+0x394>
 801b5be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b5c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801b5c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801b5c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801b5cc:	e698      	b.n	801b300 <_strtod_l+0x88>
 801b5ce:	250a      	movs	r5, #10
 801b5d0:	fb05 250c 	mla	r5, r5, ip, r2
 801b5d4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801b5d8:	e7b9      	b.n	801b54e <_strtod_l+0x2d6>
 801b5da:	2a6e      	cmp	r2, #110	; 0x6e
 801b5dc:	e7db      	b.n	801b596 <_strtod_l+0x31e>
 801b5de:	498c      	ldr	r1, [pc, #560]	; (801b810 <_strtod_l+0x598>)
 801b5e0:	a817      	add	r0, sp, #92	; 0x5c
 801b5e2:	f002 f825 	bl	801d630 <__match>
 801b5e6:	2800      	cmp	r0, #0
 801b5e8:	f43f aea7 	beq.w	801b33a <_strtod_l+0xc2>
 801b5ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5ee:	4989      	ldr	r1, [pc, #548]	; (801b814 <_strtod_l+0x59c>)
 801b5f0:	3b01      	subs	r3, #1
 801b5f2:	a817      	add	r0, sp, #92	; 0x5c
 801b5f4:	9317      	str	r3, [sp, #92]	; 0x5c
 801b5f6:	f002 f81b 	bl	801d630 <__match>
 801b5fa:	b910      	cbnz	r0, 801b602 <_strtod_l+0x38a>
 801b5fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5fe:	3301      	adds	r3, #1
 801b600:	9317      	str	r3, [sp, #92]	; 0x5c
 801b602:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801b828 <_strtod_l+0x5b0>
 801b606:	f04f 0800 	mov.w	r8, #0
 801b60a:	e679      	b.n	801b300 <_strtod_l+0x88>
 801b60c:	4882      	ldr	r0, [pc, #520]	; (801b818 <_strtod_l+0x5a0>)
 801b60e:	f003 f8cb 	bl	801e7a8 <nan>
 801b612:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b616:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801b61a:	e671      	b.n	801b300 <_strtod_l+0x88>
 801b61c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801b620:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b624:	eba5 020b 	sub.w	r2, r5, fp
 801b628:	2e00      	cmp	r6, #0
 801b62a:	bf08      	it	eq
 801b62c:	461e      	moveq	r6, r3
 801b62e:	2b10      	cmp	r3, #16
 801b630:	ed8d 7b08 	vstr	d7, [sp, #32]
 801b634:	9206      	str	r2, [sp, #24]
 801b636:	461a      	mov	r2, r3
 801b638:	bfa8      	it	ge
 801b63a:	2210      	movge	r2, #16
 801b63c:	2b09      	cmp	r3, #9
 801b63e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801b642:	dd0e      	ble.n	801b662 <_strtod_l+0x3ea>
 801b644:	4975      	ldr	r1, [pc, #468]	; (801b81c <_strtod_l+0x5a4>)
 801b646:	eddd 7a04 	vldr	s15, [sp, #16]
 801b64a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801b64e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801b652:	ed9d 5b08 	vldr	d5, [sp, #32]
 801b656:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b65a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b65e:	ec59 8b17 	vmov	r8, r9, d7
 801b662:	2b0f      	cmp	r3, #15
 801b664:	dc37      	bgt.n	801b6d6 <_strtod_l+0x45e>
 801b666:	9906      	ldr	r1, [sp, #24]
 801b668:	2900      	cmp	r1, #0
 801b66a:	f43f ae49 	beq.w	801b300 <_strtod_l+0x88>
 801b66e:	dd23      	ble.n	801b6b8 <_strtod_l+0x440>
 801b670:	2916      	cmp	r1, #22
 801b672:	dc0b      	bgt.n	801b68c <_strtod_l+0x414>
 801b674:	4b69      	ldr	r3, [pc, #420]	; (801b81c <_strtod_l+0x5a4>)
 801b676:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801b67a:	ed93 7b00 	vldr	d7, [r3]
 801b67e:	ec49 8b16 	vmov	d6, r8, r9
 801b682:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b686:	ec59 8b17 	vmov	r8, r9, d7
 801b68a:	e639      	b.n	801b300 <_strtod_l+0x88>
 801b68c:	9806      	ldr	r0, [sp, #24]
 801b68e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801b692:	4281      	cmp	r1, r0
 801b694:	db1f      	blt.n	801b6d6 <_strtod_l+0x45e>
 801b696:	4a61      	ldr	r2, [pc, #388]	; (801b81c <_strtod_l+0x5a4>)
 801b698:	f1c3 030f 	rsb	r3, r3, #15
 801b69c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801b6a0:	ed91 7b00 	vldr	d7, [r1]
 801b6a4:	ec49 8b16 	vmov	d6, r8, r9
 801b6a8:	1ac3      	subs	r3, r0, r3
 801b6aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801b6ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b6b2:	ed92 6b00 	vldr	d6, [r2]
 801b6b6:	e7e4      	b.n	801b682 <_strtod_l+0x40a>
 801b6b8:	9906      	ldr	r1, [sp, #24]
 801b6ba:	3116      	adds	r1, #22
 801b6bc:	db0b      	blt.n	801b6d6 <_strtod_l+0x45e>
 801b6be:	4b57      	ldr	r3, [pc, #348]	; (801b81c <_strtod_l+0x5a4>)
 801b6c0:	ebab 0505 	sub.w	r5, fp, r5
 801b6c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801b6c8:	ed95 7b00 	vldr	d7, [r5]
 801b6cc:	ec49 8b16 	vmov	d6, r8, r9
 801b6d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b6d4:	e7d7      	b.n	801b686 <_strtod_l+0x40e>
 801b6d6:	9906      	ldr	r1, [sp, #24]
 801b6d8:	1a9a      	subs	r2, r3, r2
 801b6da:	440a      	add	r2, r1
 801b6dc:	2a00      	cmp	r2, #0
 801b6de:	dd74      	ble.n	801b7ca <_strtod_l+0x552>
 801b6e0:	f012 000f 	ands.w	r0, r2, #15
 801b6e4:	d00a      	beq.n	801b6fc <_strtod_l+0x484>
 801b6e6:	494d      	ldr	r1, [pc, #308]	; (801b81c <_strtod_l+0x5a4>)
 801b6e8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801b6ec:	ed91 7b00 	vldr	d7, [r1]
 801b6f0:	ec49 8b16 	vmov	d6, r8, r9
 801b6f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b6f8:	ec59 8b17 	vmov	r8, r9, d7
 801b6fc:	f032 020f 	bics.w	r2, r2, #15
 801b700:	d04f      	beq.n	801b7a2 <_strtod_l+0x52a>
 801b702:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801b706:	dd22      	ble.n	801b74e <_strtod_l+0x4d6>
 801b708:	2500      	movs	r5, #0
 801b70a:	462e      	mov	r6, r5
 801b70c:	950a      	str	r5, [sp, #40]	; 0x28
 801b70e:	462f      	mov	r7, r5
 801b710:	2322      	movs	r3, #34	; 0x22
 801b712:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801b828 <_strtod_l+0x5b0>
 801b716:	6023      	str	r3, [r4, #0]
 801b718:	f04f 0800 	mov.w	r8, #0
 801b71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b71e:	2b00      	cmp	r3, #0
 801b720:	f43f adee 	beq.w	801b300 <_strtod_l+0x88>
 801b724:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b726:	4620      	mov	r0, r4
 801b728:	f002 f8fc 	bl	801d924 <_Bfree>
 801b72c:	4639      	mov	r1, r7
 801b72e:	4620      	mov	r0, r4
 801b730:	f002 f8f8 	bl	801d924 <_Bfree>
 801b734:	4631      	mov	r1, r6
 801b736:	4620      	mov	r0, r4
 801b738:	f002 f8f4 	bl	801d924 <_Bfree>
 801b73c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b73e:	4620      	mov	r0, r4
 801b740:	f002 f8f0 	bl	801d924 <_Bfree>
 801b744:	4629      	mov	r1, r5
 801b746:	4620      	mov	r0, r4
 801b748:	f002 f8ec 	bl	801d924 <_Bfree>
 801b74c:	e5d8      	b.n	801b300 <_strtod_l+0x88>
 801b74e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801b752:	2000      	movs	r0, #0
 801b754:	4f32      	ldr	r7, [pc, #200]	; (801b820 <_strtod_l+0x5a8>)
 801b756:	1112      	asrs	r2, r2, #4
 801b758:	4601      	mov	r1, r0
 801b75a:	2a01      	cmp	r2, #1
 801b75c:	dc24      	bgt.n	801b7a8 <_strtod_l+0x530>
 801b75e:	b108      	cbz	r0, 801b764 <_strtod_l+0x4ec>
 801b760:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801b764:	4a2e      	ldr	r2, [pc, #184]	; (801b820 <_strtod_l+0x5a8>)
 801b766:	482f      	ldr	r0, [pc, #188]	; (801b824 <_strtod_l+0x5ac>)
 801b768:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801b76c:	ed91 7b00 	vldr	d7, [r1]
 801b770:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801b774:	ec49 8b16 	vmov	d6, r8, r9
 801b778:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b77c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b780:	9905      	ldr	r1, [sp, #20]
 801b782:	4a29      	ldr	r2, [pc, #164]	; (801b828 <_strtod_l+0x5b0>)
 801b784:	400a      	ands	r2, r1
 801b786:	4282      	cmp	r2, r0
 801b788:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801b78c:	d8bc      	bhi.n	801b708 <_strtod_l+0x490>
 801b78e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801b792:	4282      	cmp	r2, r0
 801b794:	bf86      	itte	hi
 801b796:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801b82c <_strtod_l+0x5b4>
 801b79a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801b79e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801b7a2:	2200      	movs	r2, #0
 801b7a4:	9204      	str	r2, [sp, #16]
 801b7a6:	e07f      	b.n	801b8a8 <_strtod_l+0x630>
 801b7a8:	f012 0f01 	tst.w	r2, #1
 801b7ac:	d00a      	beq.n	801b7c4 <_strtod_l+0x54c>
 801b7ae:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801b7b2:	ed90 7b00 	vldr	d7, [r0]
 801b7b6:	ed9d 6b04 	vldr	d6, [sp, #16]
 801b7ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 801b7be:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b7c2:	2001      	movs	r0, #1
 801b7c4:	3101      	adds	r1, #1
 801b7c6:	1052      	asrs	r2, r2, #1
 801b7c8:	e7c7      	b.n	801b75a <_strtod_l+0x4e2>
 801b7ca:	d0ea      	beq.n	801b7a2 <_strtod_l+0x52a>
 801b7cc:	4252      	negs	r2, r2
 801b7ce:	f012 000f 	ands.w	r0, r2, #15
 801b7d2:	d00a      	beq.n	801b7ea <_strtod_l+0x572>
 801b7d4:	4911      	ldr	r1, [pc, #68]	; (801b81c <_strtod_l+0x5a4>)
 801b7d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801b7da:	ed91 7b00 	vldr	d7, [r1]
 801b7de:	ec49 8b16 	vmov	d6, r8, r9
 801b7e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b7e6:	ec59 8b17 	vmov	r8, r9, d7
 801b7ea:	1112      	asrs	r2, r2, #4
 801b7ec:	d0d9      	beq.n	801b7a2 <_strtod_l+0x52a>
 801b7ee:	2a1f      	cmp	r2, #31
 801b7f0:	dd1e      	ble.n	801b830 <_strtod_l+0x5b8>
 801b7f2:	2500      	movs	r5, #0
 801b7f4:	462e      	mov	r6, r5
 801b7f6:	950a      	str	r5, [sp, #40]	; 0x28
 801b7f8:	462f      	mov	r7, r5
 801b7fa:	2322      	movs	r3, #34	; 0x22
 801b7fc:	f04f 0800 	mov.w	r8, #0
 801b800:	f04f 0900 	mov.w	r9, #0
 801b804:	6023      	str	r3, [r4, #0]
 801b806:	e789      	b.n	801b71c <_strtod_l+0x4a4>
 801b808:	08021c75 	.word	0x08021c75
 801b80c:	08021d2c 	.word	0x08021d2c
 801b810:	08021c6d 	.word	0x08021c6d
 801b814:	08021da7 	.word	0x08021da7
 801b818:	08021da3 	.word	0x08021da3
 801b81c:	08021f90 	.word	0x08021f90
 801b820:	08021f68 	.word	0x08021f68
 801b824:	7ca00000 	.word	0x7ca00000
 801b828:	7ff00000 	.word	0x7ff00000
 801b82c:	7fefffff 	.word	0x7fefffff
 801b830:	f012 0110 	ands.w	r1, r2, #16
 801b834:	bf18      	it	ne
 801b836:	216a      	movne	r1, #106	; 0x6a
 801b838:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801b83c:	9104      	str	r1, [sp, #16]
 801b83e:	49c0      	ldr	r1, [pc, #768]	; (801bb40 <_strtod_l+0x8c8>)
 801b840:	2000      	movs	r0, #0
 801b842:	07d7      	lsls	r7, r2, #31
 801b844:	d508      	bpl.n	801b858 <_strtod_l+0x5e0>
 801b846:	ed9d 6b08 	vldr	d6, [sp, #32]
 801b84a:	ed91 7b00 	vldr	d7, [r1]
 801b84e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801b852:	ed8d 7b08 	vstr	d7, [sp, #32]
 801b856:	2001      	movs	r0, #1
 801b858:	1052      	asrs	r2, r2, #1
 801b85a:	f101 0108 	add.w	r1, r1, #8
 801b85e:	d1f0      	bne.n	801b842 <_strtod_l+0x5ca>
 801b860:	b108      	cbz	r0, 801b866 <_strtod_l+0x5ee>
 801b862:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801b866:	9a04      	ldr	r2, [sp, #16]
 801b868:	b1ba      	cbz	r2, 801b89a <_strtod_l+0x622>
 801b86a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801b86e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801b872:	2a00      	cmp	r2, #0
 801b874:	4649      	mov	r1, r9
 801b876:	dd10      	ble.n	801b89a <_strtod_l+0x622>
 801b878:	2a1f      	cmp	r2, #31
 801b87a:	f340 8132 	ble.w	801bae2 <_strtod_l+0x86a>
 801b87e:	2a34      	cmp	r2, #52	; 0x34
 801b880:	bfde      	ittt	le
 801b882:	3a20      	suble	r2, #32
 801b884:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 801b888:	fa00 f202 	lslle.w	r2, r0, r2
 801b88c:	f04f 0800 	mov.w	r8, #0
 801b890:	bfcc      	ite	gt
 801b892:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801b896:	ea02 0901 	andle.w	r9, r2, r1
 801b89a:	ec49 8b17 	vmov	d7, r8, r9
 801b89e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8a6:	d0a4      	beq.n	801b7f2 <_strtod_l+0x57a>
 801b8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b8aa:	9200      	str	r2, [sp, #0]
 801b8ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b8ae:	4632      	mov	r2, r6
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	f002 f8a3 	bl	801d9fc <__s2b>
 801b8b6:	900a      	str	r0, [sp, #40]	; 0x28
 801b8b8:	2800      	cmp	r0, #0
 801b8ba:	f43f af25 	beq.w	801b708 <_strtod_l+0x490>
 801b8be:	9b06      	ldr	r3, [sp, #24]
 801b8c0:	ebab 0505 	sub.w	r5, fp, r5
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	bfb4      	ite	lt
 801b8c8:	462b      	movlt	r3, r5
 801b8ca:	2300      	movge	r3, #0
 801b8cc:	930c      	str	r3, [sp, #48]	; 0x30
 801b8ce:	9b06      	ldr	r3, [sp, #24]
 801b8d0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801bb28 <_strtod_l+0x8b0>
 801b8d4:	ed9f ab96 	vldr	d10, [pc, #600]	; 801bb30 <_strtod_l+0x8b8>
 801b8d8:	ed9f bb97 	vldr	d11, [pc, #604]	; 801bb38 <_strtod_l+0x8c0>
 801b8dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8e0:	2500      	movs	r5, #0
 801b8e2:	9312      	str	r3, [sp, #72]	; 0x48
 801b8e4:	462e      	mov	r6, r5
 801b8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	6859      	ldr	r1, [r3, #4]
 801b8ec:	f001 ffda 	bl	801d8a4 <_Balloc>
 801b8f0:	4607      	mov	r7, r0
 801b8f2:	2800      	cmp	r0, #0
 801b8f4:	f43f af0c 	beq.w	801b710 <_strtod_l+0x498>
 801b8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8fa:	691a      	ldr	r2, [r3, #16]
 801b8fc:	3202      	adds	r2, #2
 801b8fe:	f103 010c 	add.w	r1, r3, #12
 801b902:	0092      	lsls	r2, r2, #2
 801b904:	300c      	adds	r0, #12
 801b906:	f7fe fcdb 	bl	801a2c0 <memcpy>
 801b90a:	ec49 8b10 	vmov	d0, r8, r9
 801b90e:	aa1a      	add	r2, sp, #104	; 0x68
 801b910:	a919      	add	r1, sp, #100	; 0x64
 801b912:	4620      	mov	r0, r4
 801b914:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801b918:	f002 fbac 	bl	801e074 <__d2b>
 801b91c:	9018      	str	r0, [sp, #96]	; 0x60
 801b91e:	2800      	cmp	r0, #0
 801b920:	f43f aef6 	beq.w	801b710 <_strtod_l+0x498>
 801b924:	2101      	movs	r1, #1
 801b926:	4620      	mov	r0, r4
 801b928:	f002 f902 	bl	801db30 <__i2b>
 801b92c:	4606      	mov	r6, r0
 801b92e:	2800      	cmp	r0, #0
 801b930:	f43f aeee 	beq.w	801b710 <_strtod_l+0x498>
 801b934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b936:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b938:	2b00      	cmp	r3, #0
 801b93a:	bfab      	itete	ge
 801b93c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801b93e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801b940:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 801b944:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 801b948:	bfac      	ite	ge
 801b94a:	eb03 0b02 	addge.w	fp, r3, r2
 801b94e:	eba2 0a03 	sublt.w	sl, r2, r3
 801b952:	9a04      	ldr	r2, [sp, #16]
 801b954:	1a9b      	subs	r3, r3, r2
 801b956:	440b      	add	r3, r1
 801b958:	4a7a      	ldr	r2, [pc, #488]	; (801bb44 <_strtod_l+0x8cc>)
 801b95a:	3b01      	subs	r3, #1
 801b95c:	4293      	cmp	r3, r2
 801b95e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801b962:	f280 80d1 	bge.w	801bb08 <_strtod_l+0x890>
 801b966:	1ad2      	subs	r2, r2, r3
 801b968:	2a1f      	cmp	r2, #31
 801b96a:	eba1 0102 	sub.w	r1, r1, r2
 801b96e:	f04f 0001 	mov.w	r0, #1
 801b972:	f300 80bd 	bgt.w	801baf0 <_strtod_l+0x878>
 801b976:	fa00 f302 	lsl.w	r3, r0, r2
 801b97a:	930e      	str	r3, [sp, #56]	; 0x38
 801b97c:	2300      	movs	r3, #0
 801b97e:	930d      	str	r3, [sp, #52]	; 0x34
 801b980:	eb0b 0301 	add.w	r3, fp, r1
 801b984:	9a04      	ldr	r2, [sp, #16]
 801b986:	459b      	cmp	fp, r3
 801b988:	448a      	add	sl, r1
 801b98a:	4492      	add	sl, r2
 801b98c:	465a      	mov	r2, fp
 801b98e:	bfa8      	it	ge
 801b990:	461a      	movge	r2, r3
 801b992:	4552      	cmp	r2, sl
 801b994:	bfa8      	it	ge
 801b996:	4652      	movge	r2, sl
 801b998:	2a00      	cmp	r2, #0
 801b99a:	bfc2      	ittt	gt
 801b99c:	1a9b      	subgt	r3, r3, r2
 801b99e:	ebaa 0a02 	subgt.w	sl, sl, r2
 801b9a2:	ebab 0b02 	subgt.w	fp, fp, r2
 801b9a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b9a8:	2a00      	cmp	r2, #0
 801b9aa:	dd18      	ble.n	801b9de <_strtod_l+0x766>
 801b9ac:	4631      	mov	r1, r6
 801b9ae:	4620      	mov	r0, r4
 801b9b0:	9315      	str	r3, [sp, #84]	; 0x54
 801b9b2:	f002 f979 	bl	801dca8 <__pow5mult>
 801b9b6:	4606      	mov	r6, r0
 801b9b8:	2800      	cmp	r0, #0
 801b9ba:	f43f aea9 	beq.w	801b710 <_strtod_l+0x498>
 801b9be:	4601      	mov	r1, r0
 801b9c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b9c2:	4620      	mov	r0, r4
 801b9c4:	f002 f8ca 	bl	801db5c <__multiply>
 801b9c8:	9014      	str	r0, [sp, #80]	; 0x50
 801b9ca:	2800      	cmp	r0, #0
 801b9cc:	f43f aea0 	beq.w	801b710 <_strtod_l+0x498>
 801b9d0:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b9d2:	4620      	mov	r0, r4
 801b9d4:	f001 ffa6 	bl	801d924 <_Bfree>
 801b9d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b9da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b9dc:	9218      	str	r2, [sp, #96]	; 0x60
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	f300 8097 	bgt.w	801bb12 <_strtod_l+0x89a>
 801b9e4:	9b06      	ldr	r3, [sp, #24]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	dd08      	ble.n	801b9fc <_strtod_l+0x784>
 801b9ea:	4639      	mov	r1, r7
 801b9ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9ee:	4620      	mov	r0, r4
 801b9f0:	f002 f95a 	bl	801dca8 <__pow5mult>
 801b9f4:	4607      	mov	r7, r0
 801b9f6:	2800      	cmp	r0, #0
 801b9f8:	f43f ae8a 	beq.w	801b710 <_strtod_l+0x498>
 801b9fc:	f1ba 0f00 	cmp.w	sl, #0
 801ba00:	dd08      	ble.n	801ba14 <_strtod_l+0x79c>
 801ba02:	4639      	mov	r1, r7
 801ba04:	4652      	mov	r2, sl
 801ba06:	4620      	mov	r0, r4
 801ba08:	f002 f9a8 	bl	801dd5c <__lshift>
 801ba0c:	4607      	mov	r7, r0
 801ba0e:	2800      	cmp	r0, #0
 801ba10:	f43f ae7e 	beq.w	801b710 <_strtod_l+0x498>
 801ba14:	f1bb 0f00 	cmp.w	fp, #0
 801ba18:	dd08      	ble.n	801ba2c <_strtod_l+0x7b4>
 801ba1a:	4631      	mov	r1, r6
 801ba1c:	465a      	mov	r2, fp
 801ba1e:	4620      	mov	r0, r4
 801ba20:	f002 f99c 	bl	801dd5c <__lshift>
 801ba24:	4606      	mov	r6, r0
 801ba26:	2800      	cmp	r0, #0
 801ba28:	f43f ae72 	beq.w	801b710 <_strtod_l+0x498>
 801ba2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ba2e:	463a      	mov	r2, r7
 801ba30:	4620      	mov	r0, r4
 801ba32:	f002 fa1b 	bl	801de6c <__mdiff>
 801ba36:	4605      	mov	r5, r0
 801ba38:	2800      	cmp	r0, #0
 801ba3a:	f43f ae69 	beq.w	801b710 <_strtod_l+0x498>
 801ba3e:	2300      	movs	r3, #0
 801ba40:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801ba44:	60c3      	str	r3, [r0, #12]
 801ba46:	4631      	mov	r1, r6
 801ba48:	f002 f9f4 	bl	801de34 <__mcmp>
 801ba4c:	2800      	cmp	r0, #0
 801ba4e:	da7f      	bge.n	801bb50 <_strtod_l+0x8d8>
 801ba50:	ea5a 0308 	orrs.w	r3, sl, r8
 801ba54:	f040 80a5 	bne.w	801bba2 <_strtod_l+0x92a>
 801ba58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	f040 80a0 	bne.w	801bba2 <_strtod_l+0x92a>
 801ba62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ba66:	0d1b      	lsrs	r3, r3, #20
 801ba68:	051b      	lsls	r3, r3, #20
 801ba6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ba6e:	f240 8098 	bls.w	801bba2 <_strtod_l+0x92a>
 801ba72:	696b      	ldr	r3, [r5, #20]
 801ba74:	b91b      	cbnz	r3, 801ba7e <_strtod_l+0x806>
 801ba76:	692b      	ldr	r3, [r5, #16]
 801ba78:	2b01      	cmp	r3, #1
 801ba7a:	f340 8092 	ble.w	801bba2 <_strtod_l+0x92a>
 801ba7e:	4629      	mov	r1, r5
 801ba80:	2201      	movs	r2, #1
 801ba82:	4620      	mov	r0, r4
 801ba84:	f002 f96a 	bl	801dd5c <__lshift>
 801ba88:	4631      	mov	r1, r6
 801ba8a:	4605      	mov	r5, r0
 801ba8c:	f002 f9d2 	bl	801de34 <__mcmp>
 801ba90:	2800      	cmp	r0, #0
 801ba92:	f340 8086 	ble.w	801bba2 <_strtod_l+0x92a>
 801ba96:	9904      	ldr	r1, [sp, #16]
 801ba98:	4a2b      	ldr	r2, [pc, #172]	; (801bb48 <_strtod_l+0x8d0>)
 801ba9a:	464b      	mov	r3, r9
 801ba9c:	2900      	cmp	r1, #0
 801ba9e:	f000 80a1 	beq.w	801bbe4 <_strtod_l+0x96c>
 801baa2:	ea02 0109 	and.w	r1, r2, r9
 801baa6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801baaa:	f300 809b 	bgt.w	801bbe4 <_strtod_l+0x96c>
 801baae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801bab2:	f77f aea2 	ble.w	801b7fa <_strtod_l+0x582>
 801bab6:	4a25      	ldr	r2, [pc, #148]	; (801bb4c <_strtod_l+0x8d4>)
 801bab8:	2300      	movs	r3, #0
 801baba:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801babe:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801bac2:	ec49 8b17 	vmov	d7, r8, r9
 801bac6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801baca:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bace:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801bad2:	4313      	orrs	r3, r2
 801bad4:	bf08      	it	eq
 801bad6:	2322      	moveq	r3, #34	; 0x22
 801bad8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801badc:	bf08      	it	eq
 801bade:	6023      	streq	r3, [r4, #0]
 801bae0:	e620      	b.n	801b724 <_strtod_l+0x4ac>
 801bae2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801bae6:	fa01 f202 	lsl.w	r2, r1, r2
 801baea:	ea02 0808 	and.w	r8, r2, r8
 801baee:	e6d4      	b.n	801b89a <_strtod_l+0x622>
 801baf0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801baf4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801baf8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801bafc:	33e2      	adds	r3, #226	; 0xe2
 801bafe:	fa00 f303 	lsl.w	r3, r0, r3
 801bb02:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801bb06:	e73b      	b.n	801b980 <_strtod_l+0x708>
 801bb08:	2000      	movs	r0, #0
 801bb0a:	2301      	movs	r3, #1
 801bb0c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 801bb10:	e736      	b.n	801b980 <_strtod_l+0x708>
 801bb12:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bb14:	461a      	mov	r2, r3
 801bb16:	4620      	mov	r0, r4
 801bb18:	f002 f920 	bl	801dd5c <__lshift>
 801bb1c:	9018      	str	r0, [sp, #96]	; 0x60
 801bb1e:	2800      	cmp	r0, #0
 801bb20:	f47f af60 	bne.w	801b9e4 <_strtod_l+0x76c>
 801bb24:	e5f4      	b.n	801b710 <_strtod_l+0x498>
 801bb26:	bf00      	nop
 801bb28:	94a03595 	.word	0x94a03595
 801bb2c:	3fcfffff 	.word	0x3fcfffff
 801bb30:	94a03595 	.word	0x94a03595
 801bb34:	3fdfffff 	.word	0x3fdfffff
 801bb38:	35afe535 	.word	0x35afe535
 801bb3c:	3fe00000 	.word	0x3fe00000
 801bb40:	08021d40 	.word	0x08021d40
 801bb44:	fffffc02 	.word	0xfffffc02
 801bb48:	7ff00000 	.word	0x7ff00000
 801bb4c:	39500000 	.word	0x39500000
 801bb50:	46cb      	mov	fp, r9
 801bb52:	d165      	bne.n	801bc20 <_strtod_l+0x9a8>
 801bb54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bb58:	f1ba 0f00 	cmp.w	sl, #0
 801bb5c:	d02a      	beq.n	801bbb4 <_strtod_l+0x93c>
 801bb5e:	4aaa      	ldr	r2, [pc, #680]	; (801be08 <_strtod_l+0xb90>)
 801bb60:	4293      	cmp	r3, r2
 801bb62:	d12b      	bne.n	801bbbc <_strtod_l+0x944>
 801bb64:	9b04      	ldr	r3, [sp, #16]
 801bb66:	4641      	mov	r1, r8
 801bb68:	b1fb      	cbz	r3, 801bbaa <_strtod_l+0x932>
 801bb6a:	4aa8      	ldr	r2, [pc, #672]	; (801be0c <_strtod_l+0xb94>)
 801bb6c:	ea09 0202 	and.w	r2, r9, r2
 801bb70:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801bb74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb78:	d81a      	bhi.n	801bbb0 <_strtod_l+0x938>
 801bb7a:	0d12      	lsrs	r2, r2, #20
 801bb7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801bb80:	fa00 f303 	lsl.w	r3, r0, r3
 801bb84:	4299      	cmp	r1, r3
 801bb86:	d119      	bne.n	801bbbc <_strtod_l+0x944>
 801bb88:	4ba1      	ldr	r3, [pc, #644]	; (801be10 <_strtod_l+0xb98>)
 801bb8a:	459b      	cmp	fp, r3
 801bb8c:	d102      	bne.n	801bb94 <_strtod_l+0x91c>
 801bb8e:	3101      	adds	r1, #1
 801bb90:	f43f adbe 	beq.w	801b710 <_strtod_l+0x498>
 801bb94:	4b9d      	ldr	r3, [pc, #628]	; (801be0c <_strtod_l+0xb94>)
 801bb96:	ea0b 0303 	and.w	r3, fp, r3
 801bb9a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801bb9e:	f04f 0800 	mov.w	r8, #0
 801bba2:	9b04      	ldr	r3, [sp, #16]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d186      	bne.n	801bab6 <_strtod_l+0x83e>
 801bba8:	e5bc      	b.n	801b724 <_strtod_l+0x4ac>
 801bbaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bbae:	e7e9      	b.n	801bb84 <_strtod_l+0x90c>
 801bbb0:	4603      	mov	r3, r0
 801bbb2:	e7e7      	b.n	801bb84 <_strtod_l+0x90c>
 801bbb4:	ea53 0308 	orrs.w	r3, r3, r8
 801bbb8:	f43f af6d 	beq.w	801ba96 <_strtod_l+0x81e>
 801bbbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbbe:	b1db      	cbz	r3, 801bbf8 <_strtod_l+0x980>
 801bbc0:	ea13 0f0b 	tst.w	r3, fp
 801bbc4:	d0ed      	beq.n	801bba2 <_strtod_l+0x92a>
 801bbc6:	9a04      	ldr	r2, [sp, #16]
 801bbc8:	4640      	mov	r0, r8
 801bbca:	4649      	mov	r1, r9
 801bbcc:	f1ba 0f00 	cmp.w	sl, #0
 801bbd0:	d016      	beq.n	801bc00 <_strtod_l+0x988>
 801bbd2:	f7ff fb37 	bl	801b244 <sulp>
 801bbd6:	ed9d 7b08 	vldr	d7, [sp, #32]
 801bbda:	ee37 7b00 	vadd.f64	d7, d7, d0
 801bbde:	ec59 8b17 	vmov	r8, r9, d7
 801bbe2:	e7de      	b.n	801bba2 <_strtod_l+0x92a>
 801bbe4:	4013      	ands	r3, r2
 801bbe6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bbea:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801bbee:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801bbf2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bbf6:	e7d4      	b.n	801bba2 <_strtod_l+0x92a>
 801bbf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bbfa:	ea13 0f08 	tst.w	r3, r8
 801bbfe:	e7e1      	b.n	801bbc4 <_strtod_l+0x94c>
 801bc00:	f7ff fb20 	bl	801b244 <sulp>
 801bc04:	ed9d 7b08 	vldr	d7, [sp, #32]
 801bc08:	ee37 7b40 	vsub.f64	d7, d7, d0
 801bc0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bc10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc18:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801bc1c:	d1c1      	bne.n	801bba2 <_strtod_l+0x92a>
 801bc1e:	e5ec      	b.n	801b7fa <_strtod_l+0x582>
 801bc20:	4631      	mov	r1, r6
 801bc22:	4628      	mov	r0, r5
 801bc24:	f002 fa82 	bl	801e12c <__ratio>
 801bc28:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801bc2c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801bc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc34:	d867      	bhi.n	801bd06 <_strtod_l+0xa8e>
 801bc36:	f1ba 0f00 	cmp.w	sl, #0
 801bc3a:	d044      	beq.n	801bcc6 <_strtod_l+0xa4e>
 801bc3c:	4b75      	ldr	r3, [pc, #468]	; (801be14 <_strtod_l+0xb9c>)
 801bc3e:	2200      	movs	r2, #0
 801bc40:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801bc44:	4971      	ldr	r1, [pc, #452]	; (801be0c <_strtod_l+0xb94>)
 801bc46:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801be20 <_strtod_l+0xba8>
 801bc4a:	ea0b 0001 	and.w	r0, fp, r1
 801bc4e:	4560      	cmp	r0, ip
 801bc50:	900d      	str	r0, [sp, #52]	; 0x34
 801bc52:	f040 808b 	bne.w	801bd6c <_strtod_l+0xaf4>
 801bc56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bc5a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801bc5e:	ec49 8b10 	vmov	d0, r8, r9
 801bc62:	ec43 2b1c 	vmov	d12, r2, r3
 801bc66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801bc6a:	f002 f987 	bl	801df7c <__ulp>
 801bc6e:	ec49 8b1d 	vmov	d13, r8, r9
 801bc72:	eeac db00 	vfma.f64	d13, d12, d0
 801bc76:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801bc7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc7c:	4963      	ldr	r1, [pc, #396]	; (801be0c <_strtod_l+0xb94>)
 801bc7e:	4a66      	ldr	r2, [pc, #408]	; (801be18 <_strtod_l+0xba0>)
 801bc80:	4019      	ands	r1, r3
 801bc82:	4291      	cmp	r1, r2
 801bc84:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 801bc88:	d947      	bls.n	801bd1a <_strtod_l+0xaa2>
 801bc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801bc90:	4293      	cmp	r3, r2
 801bc92:	d103      	bne.n	801bc9c <_strtod_l+0xa24>
 801bc94:	9b08      	ldr	r3, [sp, #32]
 801bc96:	3301      	adds	r3, #1
 801bc98:	f43f ad3a 	beq.w	801b710 <_strtod_l+0x498>
 801bc9c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801be10 <_strtod_l+0xb98>
 801bca0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bca4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bca6:	4620      	mov	r0, r4
 801bca8:	f001 fe3c 	bl	801d924 <_Bfree>
 801bcac:	4639      	mov	r1, r7
 801bcae:	4620      	mov	r0, r4
 801bcb0:	f001 fe38 	bl	801d924 <_Bfree>
 801bcb4:	4631      	mov	r1, r6
 801bcb6:	4620      	mov	r0, r4
 801bcb8:	f001 fe34 	bl	801d924 <_Bfree>
 801bcbc:	4629      	mov	r1, r5
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	f001 fe30 	bl	801d924 <_Bfree>
 801bcc4:	e60f      	b.n	801b8e6 <_strtod_l+0x66e>
 801bcc6:	f1b8 0f00 	cmp.w	r8, #0
 801bcca:	d112      	bne.n	801bcf2 <_strtod_l+0xa7a>
 801bccc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bcd0:	b9b3      	cbnz	r3, 801bd00 <_strtod_l+0xa88>
 801bcd2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801bcd6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801bcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcde:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801bce2:	d401      	bmi.n	801bce8 <_strtod_l+0xa70>
 801bce4:	ee20 8b08 	vmul.f64	d8, d0, d8
 801bce8:	eeb1 7b48 	vneg.f64	d7, d8
 801bcec:	ec53 2b17 	vmov	r2, r3, d7
 801bcf0:	e7a8      	b.n	801bc44 <_strtod_l+0x9cc>
 801bcf2:	f1b8 0f01 	cmp.w	r8, #1
 801bcf6:	d103      	bne.n	801bd00 <_strtod_l+0xa88>
 801bcf8:	f1b9 0f00 	cmp.w	r9, #0
 801bcfc:	f43f ad7d 	beq.w	801b7fa <_strtod_l+0x582>
 801bd00:	4b46      	ldr	r3, [pc, #280]	; (801be1c <_strtod_l+0xba4>)
 801bd02:	2200      	movs	r2, #0
 801bd04:	e79c      	b.n	801bc40 <_strtod_l+0x9c8>
 801bd06:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801bd0a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801bd0e:	f1ba 0f00 	cmp.w	sl, #0
 801bd12:	d0e9      	beq.n	801bce8 <_strtod_l+0xa70>
 801bd14:	ec53 2b18 	vmov	r2, r3, d8
 801bd18:	e794      	b.n	801bc44 <_strtod_l+0x9cc>
 801bd1a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801bd1e:	9b04      	ldr	r3, [sp, #16]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d1bf      	bne.n	801bca4 <_strtod_l+0xa2c>
 801bd24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801bd28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd2a:	0d1b      	lsrs	r3, r3, #20
 801bd2c:	051b      	lsls	r3, r3, #20
 801bd2e:	429a      	cmp	r2, r3
 801bd30:	d1b8      	bne.n	801bca4 <_strtod_l+0xa2c>
 801bd32:	ec51 0b18 	vmov	r0, r1, d8
 801bd36:	f7e4 fcff 	bl	8000738 <__aeabi_d2lz>
 801bd3a:	f7e4 fcb7 	bl	80006ac <__aeabi_l2d>
 801bd3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bd42:	ec41 0b17 	vmov	d7, r0, r1
 801bd46:	ea43 0308 	orr.w	r3, r3, r8
 801bd4a:	ea53 030a 	orrs.w	r3, r3, sl
 801bd4e:	ee38 8b47 	vsub.f64	d8, d8, d7
 801bd52:	d03e      	beq.n	801bdd2 <_strtod_l+0xb5a>
 801bd54:	eeb4 8bca 	vcmpe.f64	d8, d10
 801bd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd5c:	f53f ace2 	bmi.w	801b724 <_strtod_l+0x4ac>
 801bd60:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801bd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd68:	dd9c      	ble.n	801bca4 <_strtod_l+0xa2c>
 801bd6a:	e4db      	b.n	801b724 <_strtod_l+0x4ac>
 801bd6c:	9904      	ldr	r1, [sp, #16]
 801bd6e:	b301      	cbz	r1, 801bdb2 <_strtod_l+0xb3a>
 801bd70:	990d      	ldr	r1, [sp, #52]	; 0x34
 801bd72:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801bd76:	d81c      	bhi.n	801bdb2 <_strtod_l+0xb3a>
 801bd78:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801be00 <_strtod_l+0xb88>
 801bd7c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801bd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd84:	d811      	bhi.n	801bdaa <_strtod_l+0xb32>
 801bd86:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801bd8a:	ee18 3a10 	vmov	r3, s16
 801bd8e:	2b01      	cmp	r3, #1
 801bd90:	bf38      	it	cc
 801bd92:	2301      	movcc	r3, #1
 801bd94:	ee08 3a10 	vmov	s16, r3
 801bd98:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801bd9c:	f1ba 0f00 	cmp.w	sl, #0
 801bda0:	d114      	bne.n	801bdcc <_strtod_l+0xb54>
 801bda2:	eeb1 7b48 	vneg.f64	d7, d8
 801bda6:	ec53 2b17 	vmov	r2, r3, d7
 801bdaa:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bdac:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801bdb0:	1a0b      	subs	r3, r1, r0
 801bdb2:	ed9d 0b08 	vldr	d0, [sp, #32]
 801bdb6:	ec43 2b1c 	vmov	d12, r2, r3
 801bdba:	f002 f8df 	bl	801df7c <__ulp>
 801bdbe:	ed9d 7b08 	vldr	d7, [sp, #32]
 801bdc2:	eeac 7b00 	vfma.f64	d7, d12, d0
 801bdc6:	ec59 8b17 	vmov	r8, r9, d7
 801bdca:	e7a8      	b.n	801bd1e <_strtod_l+0xaa6>
 801bdcc:	ec53 2b18 	vmov	r2, r3, d8
 801bdd0:	e7eb      	b.n	801bdaa <_strtod_l+0xb32>
 801bdd2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801bdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdda:	f57f af63 	bpl.w	801bca4 <_strtod_l+0xa2c>
 801bdde:	e4a1      	b.n	801b724 <_strtod_l+0x4ac>
 801bde0:	2300      	movs	r3, #0
 801bde2:	930b      	str	r3, [sp, #44]	; 0x2c
 801bde4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bde6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bde8:	6013      	str	r3, [r2, #0]
 801bdea:	f7ff ba8d 	b.w	801b308 <_strtod_l+0x90>
 801bdee:	2a65      	cmp	r2, #101	; 0x65
 801bdf0:	f43f ab89 	beq.w	801b506 <_strtod_l+0x28e>
 801bdf4:	2a45      	cmp	r2, #69	; 0x45
 801bdf6:	f43f ab86 	beq.w	801b506 <_strtod_l+0x28e>
 801bdfa:	2101      	movs	r1, #1
 801bdfc:	f7ff bbbe 	b.w	801b57c <_strtod_l+0x304>
 801be00:	ffc00000 	.word	0xffc00000
 801be04:	41dfffff 	.word	0x41dfffff
 801be08:	000fffff 	.word	0x000fffff
 801be0c:	7ff00000 	.word	0x7ff00000
 801be10:	7fefffff 	.word	0x7fefffff
 801be14:	3ff00000 	.word	0x3ff00000
 801be18:	7c9fffff 	.word	0x7c9fffff
 801be1c:	bff00000 	.word	0xbff00000
 801be20:	7fe00000 	.word	0x7fe00000

0801be24 <_strtod_r>:
 801be24:	4b01      	ldr	r3, [pc, #4]	; (801be2c <_strtod_r+0x8>)
 801be26:	f7ff ba27 	b.w	801b278 <_strtod_l>
 801be2a:	bf00      	nop
 801be2c:	24000498 	.word	0x24000498

0801be30 <_strtol_l.isra.0>:
 801be30:	2b01      	cmp	r3, #1
 801be32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be36:	d001      	beq.n	801be3c <_strtol_l.isra.0+0xc>
 801be38:	2b24      	cmp	r3, #36	; 0x24
 801be3a:	d906      	bls.n	801be4a <_strtol_l.isra.0+0x1a>
 801be3c:	f000 ff6a 	bl	801cd14 <__errno>
 801be40:	2316      	movs	r3, #22
 801be42:	6003      	str	r3, [r0, #0]
 801be44:	2000      	movs	r0, #0
 801be46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be4a:	4f3a      	ldr	r7, [pc, #232]	; (801bf34 <_strtol_l.isra.0+0x104>)
 801be4c:	468e      	mov	lr, r1
 801be4e:	4676      	mov	r6, lr
 801be50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801be54:	5de5      	ldrb	r5, [r4, r7]
 801be56:	f015 0508 	ands.w	r5, r5, #8
 801be5a:	d1f8      	bne.n	801be4e <_strtol_l.isra.0+0x1e>
 801be5c:	2c2d      	cmp	r4, #45	; 0x2d
 801be5e:	d134      	bne.n	801beca <_strtol_l.isra.0+0x9a>
 801be60:	f89e 4000 	ldrb.w	r4, [lr]
 801be64:	f04f 0801 	mov.w	r8, #1
 801be68:	f106 0e02 	add.w	lr, r6, #2
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d05c      	beq.n	801bf2a <_strtol_l.isra.0+0xfa>
 801be70:	2b10      	cmp	r3, #16
 801be72:	d10c      	bne.n	801be8e <_strtol_l.isra.0+0x5e>
 801be74:	2c30      	cmp	r4, #48	; 0x30
 801be76:	d10a      	bne.n	801be8e <_strtol_l.isra.0+0x5e>
 801be78:	f89e 4000 	ldrb.w	r4, [lr]
 801be7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801be80:	2c58      	cmp	r4, #88	; 0x58
 801be82:	d14d      	bne.n	801bf20 <_strtol_l.isra.0+0xf0>
 801be84:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801be88:	2310      	movs	r3, #16
 801be8a:	f10e 0e02 	add.w	lr, lr, #2
 801be8e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801be92:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801be96:	2600      	movs	r6, #0
 801be98:	fbbc f9f3 	udiv	r9, ip, r3
 801be9c:	4635      	mov	r5, r6
 801be9e:	fb03 ca19 	mls	sl, r3, r9, ip
 801bea2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801bea6:	2f09      	cmp	r7, #9
 801bea8:	d818      	bhi.n	801bedc <_strtol_l.isra.0+0xac>
 801beaa:	463c      	mov	r4, r7
 801beac:	42a3      	cmp	r3, r4
 801beae:	dd24      	ble.n	801befa <_strtol_l.isra.0+0xca>
 801beb0:	2e00      	cmp	r6, #0
 801beb2:	db1f      	blt.n	801bef4 <_strtol_l.isra.0+0xc4>
 801beb4:	45a9      	cmp	r9, r5
 801beb6:	d31d      	bcc.n	801bef4 <_strtol_l.isra.0+0xc4>
 801beb8:	d101      	bne.n	801bebe <_strtol_l.isra.0+0x8e>
 801beba:	45a2      	cmp	sl, r4
 801bebc:	db1a      	blt.n	801bef4 <_strtol_l.isra.0+0xc4>
 801bebe:	fb05 4503 	mla	r5, r5, r3, r4
 801bec2:	2601      	movs	r6, #1
 801bec4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bec8:	e7eb      	b.n	801bea2 <_strtol_l.isra.0+0x72>
 801beca:	2c2b      	cmp	r4, #43	; 0x2b
 801becc:	bf08      	it	eq
 801bece:	f89e 4000 	ldrbeq.w	r4, [lr]
 801bed2:	46a8      	mov	r8, r5
 801bed4:	bf08      	it	eq
 801bed6:	f106 0e02 	addeq.w	lr, r6, #2
 801beda:	e7c7      	b.n	801be6c <_strtol_l.isra.0+0x3c>
 801bedc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801bee0:	2f19      	cmp	r7, #25
 801bee2:	d801      	bhi.n	801bee8 <_strtol_l.isra.0+0xb8>
 801bee4:	3c37      	subs	r4, #55	; 0x37
 801bee6:	e7e1      	b.n	801beac <_strtol_l.isra.0+0x7c>
 801bee8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801beec:	2f19      	cmp	r7, #25
 801beee:	d804      	bhi.n	801befa <_strtol_l.isra.0+0xca>
 801bef0:	3c57      	subs	r4, #87	; 0x57
 801bef2:	e7db      	b.n	801beac <_strtol_l.isra.0+0x7c>
 801bef4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801bef8:	e7e4      	b.n	801bec4 <_strtol_l.isra.0+0x94>
 801befa:	2e00      	cmp	r6, #0
 801befc:	da05      	bge.n	801bf0a <_strtol_l.isra.0+0xda>
 801befe:	2322      	movs	r3, #34	; 0x22
 801bf00:	6003      	str	r3, [r0, #0]
 801bf02:	4665      	mov	r5, ip
 801bf04:	b942      	cbnz	r2, 801bf18 <_strtol_l.isra.0+0xe8>
 801bf06:	4628      	mov	r0, r5
 801bf08:	e79d      	b.n	801be46 <_strtol_l.isra.0+0x16>
 801bf0a:	f1b8 0f00 	cmp.w	r8, #0
 801bf0e:	d000      	beq.n	801bf12 <_strtol_l.isra.0+0xe2>
 801bf10:	426d      	negs	r5, r5
 801bf12:	2a00      	cmp	r2, #0
 801bf14:	d0f7      	beq.n	801bf06 <_strtol_l.isra.0+0xd6>
 801bf16:	b10e      	cbz	r6, 801bf1c <_strtol_l.isra.0+0xec>
 801bf18:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801bf1c:	6011      	str	r1, [r2, #0]
 801bf1e:	e7f2      	b.n	801bf06 <_strtol_l.isra.0+0xd6>
 801bf20:	2430      	movs	r4, #48	; 0x30
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	d1b3      	bne.n	801be8e <_strtol_l.isra.0+0x5e>
 801bf26:	2308      	movs	r3, #8
 801bf28:	e7b1      	b.n	801be8e <_strtol_l.isra.0+0x5e>
 801bf2a:	2c30      	cmp	r4, #48	; 0x30
 801bf2c:	d0a4      	beq.n	801be78 <_strtol_l.isra.0+0x48>
 801bf2e:	230a      	movs	r3, #10
 801bf30:	e7ad      	b.n	801be8e <_strtol_l.isra.0+0x5e>
 801bf32:	bf00      	nop
 801bf34:	08021b61 	.word	0x08021b61

0801bf38 <_strtol_r>:
 801bf38:	f7ff bf7a 	b.w	801be30 <_strtol_l.isra.0>

0801bf3c <__swbuf_r>:
 801bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf3e:	460e      	mov	r6, r1
 801bf40:	4614      	mov	r4, r2
 801bf42:	4605      	mov	r5, r0
 801bf44:	b118      	cbz	r0, 801bf4e <__swbuf_r+0x12>
 801bf46:	6983      	ldr	r3, [r0, #24]
 801bf48:	b90b      	cbnz	r3, 801bf4e <__swbuf_r+0x12>
 801bf4a:	f001 f803 	bl	801cf54 <__sinit>
 801bf4e:	4b21      	ldr	r3, [pc, #132]	; (801bfd4 <__swbuf_r+0x98>)
 801bf50:	429c      	cmp	r4, r3
 801bf52:	d12b      	bne.n	801bfac <__swbuf_r+0x70>
 801bf54:	686c      	ldr	r4, [r5, #4]
 801bf56:	69a3      	ldr	r3, [r4, #24]
 801bf58:	60a3      	str	r3, [r4, #8]
 801bf5a:	89a3      	ldrh	r3, [r4, #12]
 801bf5c:	071a      	lsls	r2, r3, #28
 801bf5e:	d52f      	bpl.n	801bfc0 <__swbuf_r+0x84>
 801bf60:	6923      	ldr	r3, [r4, #16]
 801bf62:	b36b      	cbz	r3, 801bfc0 <__swbuf_r+0x84>
 801bf64:	6923      	ldr	r3, [r4, #16]
 801bf66:	6820      	ldr	r0, [r4, #0]
 801bf68:	1ac0      	subs	r0, r0, r3
 801bf6a:	6963      	ldr	r3, [r4, #20]
 801bf6c:	b2f6      	uxtb	r6, r6
 801bf6e:	4283      	cmp	r3, r0
 801bf70:	4637      	mov	r7, r6
 801bf72:	dc04      	bgt.n	801bf7e <__swbuf_r+0x42>
 801bf74:	4621      	mov	r1, r4
 801bf76:	4628      	mov	r0, r5
 801bf78:	f000 ff58 	bl	801ce2c <_fflush_r>
 801bf7c:	bb30      	cbnz	r0, 801bfcc <__swbuf_r+0x90>
 801bf7e:	68a3      	ldr	r3, [r4, #8]
 801bf80:	3b01      	subs	r3, #1
 801bf82:	60a3      	str	r3, [r4, #8]
 801bf84:	6823      	ldr	r3, [r4, #0]
 801bf86:	1c5a      	adds	r2, r3, #1
 801bf88:	6022      	str	r2, [r4, #0]
 801bf8a:	701e      	strb	r6, [r3, #0]
 801bf8c:	6963      	ldr	r3, [r4, #20]
 801bf8e:	3001      	adds	r0, #1
 801bf90:	4283      	cmp	r3, r0
 801bf92:	d004      	beq.n	801bf9e <__swbuf_r+0x62>
 801bf94:	89a3      	ldrh	r3, [r4, #12]
 801bf96:	07db      	lsls	r3, r3, #31
 801bf98:	d506      	bpl.n	801bfa8 <__swbuf_r+0x6c>
 801bf9a:	2e0a      	cmp	r6, #10
 801bf9c:	d104      	bne.n	801bfa8 <__swbuf_r+0x6c>
 801bf9e:	4621      	mov	r1, r4
 801bfa0:	4628      	mov	r0, r5
 801bfa2:	f000 ff43 	bl	801ce2c <_fflush_r>
 801bfa6:	b988      	cbnz	r0, 801bfcc <__swbuf_r+0x90>
 801bfa8:	4638      	mov	r0, r7
 801bfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bfac:	4b0a      	ldr	r3, [pc, #40]	; (801bfd8 <__swbuf_r+0x9c>)
 801bfae:	429c      	cmp	r4, r3
 801bfb0:	d101      	bne.n	801bfb6 <__swbuf_r+0x7a>
 801bfb2:	68ac      	ldr	r4, [r5, #8]
 801bfb4:	e7cf      	b.n	801bf56 <__swbuf_r+0x1a>
 801bfb6:	4b09      	ldr	r3, [pc, #36]	; (801bfdc <__swbuf_r+0xa0>)
 801bfb8:	429c      	cmp	r4, r3
 801bfba:	bf08      	it	eq
 801bfbc:	68ec      	ldreq	r4, [r5, #12]
 801bfbe:	e7ca      	b.n	801bf56 <__swbuf_r+0x1a>
 801bfc0:	4621      	mov	r1, r4
 801bfc2:	4628      	mov	r0, r5
 801bfc4:	f000 f80c 	bl	801bfe0 <__swsetup_r>
 801bfc8:	2800      	cmp	r0, #0
 801bfca:	d0cb      	beq.n	801bf64 <__swbuf_r+0x28>
 801bfcc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bfd0:	e7ea      	b.n	801bfa8 <__swbuf_r+0x6c>
 801bfd2:	bf00      	nop
 801bfd4:	08021e44 	.word	0x08021e44
 801bfd8:	08021e64 	.word	0x08021e64
 801bfdc:	08021e24 	.word	0x08021e24

0801bfe0 <__swsetup_r>:
 801bfe0:	4b32      	ldr	r3, [pc, #200]	; (801c0ac <__swsetup_r+0xcc>)
 801bfe2:	b570      	push	{r4, r5, r6, lr}
 801bfe4:	681d      	ldr	r5, [r3, #0]
 801bfe6:	4606      	mov	r6, r0
 801bfe8:	460c      	mov	r4, r1
 801bfea:	b125      	cbz	r5, 801bff6 <__swsetup_r+0x16>
 801bfec:	69ab      	ldr	r3, [r5, #24]
 801bfee:	b913      	cbnz	r3, 801bff6 <__swsetup_r+0x16>
 801bff0:	4628      	mov	r0, r5
 801bff2:	f000 ffaf 	bl	801cf54 <__sinit>
 801bff6:	4b2e      	ldr	r3, [pc, #184]	; (801c0b0 <__swsetup_r+0xd0>)
 801bff8:	429c      	cmp	r4, r3
 801bffa:	d10f      	bne.n	801c01c <__swsetup_r+0x3c>
 801bffc:	686c      	ldr	r4, [r5, #4]
 801bffe:	89a3      	ldrh	r3, [r4, #12]
 801c000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c004:	0719      	lsls	r1, r3, #28
 801c006:	d42c      	bmi.n	801c062 <__swsetup_r+0x82>
 801c008:	06dd      	lsls	r5, r3, #27
 801c00a:	d411      	bmi.n	801c030 <__swsetup_r+0x50>
 801c00c:	2309      	movs	r3, #9
 801c00e:	6033      	str	r3, [r6, #0]
 801c010:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c014:	81a3      	strh	r3, [r4, #12]
 801c016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c01a:	e03e      	b.n	801c09a <__swsetup_r+0xba>
 801c01c:	4b25      	ldr	r3, [pc, #148]	; (801c0b4 <__swsetup_r+0xd4>)
 801c01e:	429c      	cmp	r4, r3
 801c020:	d101      	bne.n	801c026 <__swsetup_r+0x46>
 801c022:	68ac      	ldr	r4, [r5, #8]
 801c024:	e7eb      	b.n	801bffe <__swsetup_r+0x1e>
 801c026:	4b24      	ldr	r3, [pc, #144]	; (801c0b8 <__swsetup_r+0xd8>)
 801c028:	429c      	cmp	r4, r3
 801c02a:	bf08      	it	eq
 801c02c:	68ec      	ldreq	r4, [r5, #12]
 801c02e:	e7e6      	b.n	801bffe <__swsetup_r+0x1e>
 801c030:	0758      	lsls	r0, r3, #29
 801c032:	d512      	bpl.n	801c05a <__swsetup_r+0x7a>
 801c034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c036:	b141      	cbz	r1, 801c04a <__swsetup_r+0x6a>
 801c038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c03c:	4299      	cmp	r1, r3
 801c03e:	d002      	beq.n	801c046 <__swsetup_r+0x66>
 801c040:	4630      	mov	r0, r6
 801c042:	f7fe f96d 	bl	801a320 <_free_r>
 801c046:	2300      	movs	r3, #0
 801c048:	6363      	str	r3, [r4, #52]	; 0x34
 801c04a:	89a3      	ldrh	r3, [r4, #12]
 801c04c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c050:	81a3      	strh	r3, [r4, #12]
 801c052:	2300      	movs	r3, #0
 801c054:	6063      	str	r3, [r4, #4]
 801c056:	6923      	ldr	r3, [r4, #16]
 801c058:	6023      	str	r3, [r4, #0]
 801c05a:	89a3      	ldrh	r3, [r4, #12]
 801c05c:	f043 0308 	orr.w	r3, r3, #8
 801c060:	81a3      	strh	r3, [r4, #12]
 801c062:	6923      	ldr	r3, [r4, #16]
 801c064:	b94b      	cbnz	r3, 801c07a <__swsetup_r+0x9a>
 801c066:	89a3      	ldrh	r3, [r4, #12]
 801c068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c06c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c070:	d003      	beq.n	801c07a <__swsetup_r+0x9a>
 801c072:	4621      	mov	r1, r4
 801c074:	4630      	mov	r0, r6
 801c076:	f001 fbb7 	bl	801d7e8 <__smakebuf_r>
 801c07a:	89a0      	ldrh	r0, [r4, #12]
 801c07c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c080:	f010 0301 	ands.w	r3, r0, #1
 801c084:	d00a      	beq.n	801c09c <__swsetup_r+0xbc>
 801c086:	2300      	movs	r3, #0
 801c088:	60a3      	str	r3, [r4, #8]
 801c08a:	6963      	ldr	r3, [r4, #20]
 801c08c:	425b      	negs	r3, r3
 801c08e:	61a3      	str	r3, [r4, #24]
 801c090:	6923      	ldr	r3, [r4, #16]
 801c092:	b943      	cbnz	r3, 801c0a6 <__swsetup_r+0xc6>
 801c094:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c098:	d1ba      	bne.n	801c010 <__swsetup_r+0x30>
 801c09a:	bd70      	pop	{r4, r5, r6, pc}
 801c09c:	0781      	lsls	r1, r0, #30
 801c09e:	bf58      	it	pl
 801c0a0:	6963      	ldrpl	r3, [r4, #20]
 801c0a2:	60a3      	str	r3, [r4, #8]
 801c0a4:	e7f4      	b.n	801c090 <__swsetup_r+0xb0>
 801c0a6:	2000      	movs	r0, #0
 801c0a8:	e7f7      	b.n	801c09a <__swsetup_r+0xba>
 801c0aa:	bf00      	nop
 801c0ac:	24000430 	.word	0x24000430
 801c0b0:	08021e44 	.word	0x08021e44
 801c0b4:	08021e64 	.word	0x08021e64
 801c0b8:	08021e24 	.word	0x08021e24

0801c0bc <__assert_func>:
 801c0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c0be:	4614      	mov	r4, r2
 801c0c0:	461a      	mov	r2, r3
 801c0c2:	4b09      	ldr	r3, [pc, #36]	; (801c0e8 <__assert_func+0x2c>)
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	4605      	mov	r5, r0
 801c0c8:	68d8      	ldr	r0, [r3, #12]
 801c0ca:	b14c      	cbz	r4, 801c0e0 <__assert_func+0x24>
 801c0cc:	4b07      	ldr	r3, [pc, #28]	; (801c0ec <__assert_func+0x30>)
 801c0ce:	9100      	str	r1, [sp, #0]
 801c0d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c0d4:	4906      	ldr	r1, [pc, #24]	; (801c0f0 <__assert_func+0x34>)
 801c0d6:	462b      	mov	r3, r5
 801c0d8:	f000 ffba 	bl	801d050 <fiprintf>
 801c0dc:	f002 fbce 	bl	801e87c <abort>
 801c0e0:	4b04      	ldr	r3, [pc, #16]	; (801c0f4 <__assert_func+0x38>)
 801c0e2:	461c      	mov	r4, r3
 801c0e4:	e7f3      	b.n	801c0ce <__assert_func+0x12>
 801c0e6:	bf00      	nop
 801c0e8:	24000430 	.word	0x24000430
 801c0ec:	08021d68 	.word	0x08021d68
 801c0f0:	08021d75 	.word	0x08021d75
 801c0f4:	08021da3 	.word	0x08021da3

0801c0f8 <quorem>:
 801c0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0fc:	6903      	ldr	r3, [r0, #16]
 801c0fe:	690c      	ldr	r4, [r1, #16]
 801c100:	42a3      	cmp	r3, r4
 801c102:	4607      	mov	r7, r0
 801c104:	f2c0 8081 	blt.w	801c20a <quorem+0x112>
 801c108:	3c01      	subs	r4, #1
 801c10a:	f101 0814 	add.w	r8, r1, #20
 801c10e:	f100 0514 	add.w	r5, r0, #20
 801c112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c116:	9301      	str	r3, [sp, #4]
 801c118:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c11c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c120:	3301      	adds	r3, #1
 801c122:	429a      	cmp	r2, r3
 801c124:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c128:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c12c:	fbb2 f6f3 	udiv	r6, r2, r3
 801c130:	d331      	bcc.n	801c196 <quorem+0x9e>
 801c132:	f04f 0e00 	mov.w	lr, #0
 801c136:	4640      	mov	r0, r8
 801c138:	46ac      	mov	ip, r5
 801c13a:	46f2      	mov	sl, lr
 801c13c:	f850 2b04 	ldr.w	r2, [r0], #4
 801c140:	b293      	uxth	r3, r2
 801c142:	fb06 e303 	mla	r3, r6, r3, lr
 801c146:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c14a:	b29b      	uxth	r3, r3
 801c14c:	ebaa 0303 	sub.w	r3, sl, r3
 801c150:	0c12      	lsrs	r2, r2, #16
 801c152:	f8dc a000 	ldr.w	sl, [ip]
 801c156:	fb06 e202 	mla	r2, r6, r2, lr
 801c15a:	fa13 f38a 	uxtah	r3, r3, sl
 801c15e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c162:	fa1f fa82 	uxth.w	sl, r2
 801c166:	f8dc 2000 	ldr.w	r2, [ip]
 801c16a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c16e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c172:	b29b      	uxth	r3, r3
 801c174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c178:	4581      	cmp	r9, r0
 801c17a:	f84c 3b04 	str.w	r3, [ip], #4
 801c17e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c182:	d2db      	bcs.n	801c13c <quorem+0x44>
 801c184:	f855 300b 	ldr.w	r3, [r5, fp]
 801c188:	b92b      	cbnz	r3, 801c196 <quorem+0x9e>
 801c18a:	9b01      	ldr	r3, [sp, #4]
 801c18c:	3b04      	subs	r3, #4
 801c18e:	429d      	cmp	r5, r3
 801c190:	461a      	mov	r2, r3
 801c192:	d32e      	bcc.n	801c1f2 <quorem+0xfa>
 801c194:	613c      	str	r4, [r7, #16]
 801c196:	4638      	mov	r0, r7
 801c198:	f001 fe4c 	bl	801de34 <__mcmp>
 801c19c:	2800      	cmp	r0, #0
 801c19e:	db24      	blt.n	801c1ea <quorem+0xf2>
 801c1a0:	3601      	adds	r6, #1
 801c1a2:	4628      	mov	r0, r5
 801c1a4:	f04f 0c00 	mov.w	ip, #0
 801c1a8:	f858 2b04 	ldr.w	r2, [r8], #4
 801c1ac:	f8d0 e000 	ldr.w	lr, [r0]
 801c1b0:	b293      	uxth	r3, r2
 801c1b2:	ebac 0303 	sub.w	r3, ip, r3
 801c1b6:	0c12      	lsrs	r2, r2, #16
 801c1b8:	fa13 f38e 	uxtah	r3, r3, lr
 801c1bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c1c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c1c4:	b29b      	uxth	r3, r3
 801c1c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c1ca:	45c1      	cmp	r9, r8
 801c1cc:	f840 3b04 	str.w	r3, [r0], #4
 801c1d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c1d4:	d2e8      	bcs.n	801c1a8 <quorem+0xb0>
 801c1d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c1da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c1de:	b922      	cbnz	r2, 801c1ea <quorem+0xf2>
 801c1e0:	3b04      	subs	r3, #4
 801c1e2:	429d      	cmp	r5, r3
 801c1e4:	461a      	mov	r2, r3
 801c1e6:	d30a      	bcc.n	801c1fe <quorem+0x106>
 801c1e8:	613c      	str	r4, [r7, #16]
 801c1ea:	4630      	mov	r0, r6
 801c1ec:	b003      	add	sp, #12
 801c1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1f2:	6812      	ldr	r2, [r2, #0]
 801c1f4:	3b04      	subs	r3, #4
 801c1f6:	2a00      	cmp	r2, #0
 801c1f8:	d1cc      	bne.n	801c194 <quorem+0x9c>
 801c1fa:	3c01      	subs	r4, #1
 801c1fc:	e7c7      	b.n	801c18e <quorem+0x96>
 801c1fe:	6812      	ldr	r2, [r2, #0]
 801c200:	3b04      	subs	r3, #4
 801c202:	2a00      	cmp	r2, #0
 801c204:	d1f0      	bne.n	801c1e8 <quorem+0xf0>
 801c206:	3c01      	subs	r4, #1
 801c208:	e7eb      	b.n	801c1e2 <quorem+0xea>
 801c20a:	2000      	movs	r0, #0
 801c20c:	e7ee      	b.n	801c1ec <quorem+0xf4>
	...

0801c210 <_dtoa_r>:
 801c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c214:	ec59 8b10 	vmov	r8, r9, d0
 801c218:	b095      	sub	sp, #84	; 0x54
 801c21a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c21c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801c21e:	9107      	str	r1, [sp, #28]
 801c220:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801c224:	4606      	mov	r6, r0
 801c226:	9209      	str	r2, [sp, #36]	; 0x24
 801c228:	9310      	str	r3, [sp, #64]	; 0x40
 801c22a:	b975      	cbnz	r5, 801c24a <_dtoa_r+0x3a>
 801c22c:	2010      	movs	r0, #16
 801c22e:	f7fe f831 	bl	801a294 <malloc>
 801c232:	4602      	mov	r2, r0
 801c234:	6270      	str	r0, [r6, #36]	; 0x24
 801c236:	b920      	cbnz	r0, 801c242 <_dtoa_r+0x32>
 801c238:	4bab      	ldr	r3, [pc, #684]	; (801c4e8 <_dtoa_r+0x2d8>)
 801c23a:	21ea      	movs	r1, #234	; 0xea
 801c23c:	48ab      	ldr	r0, [pc, #684]	; (801c4ec <_dtoa_r+0x2dc>)
 801c23e:	f7ff ff3d 	bl	801c0bc <__assert_func>
 801c242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c246:	6005      	str	r5, [r0, #0]
 801c248:	60c5      	str	r5, [r0, #12]
 801c24a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c24c:	6819      	ldr	r1, [r3, #0]
 801c24e:	b151      	cbz	r1, 801c266 <_dtoa_r+0x56>
 801c250:	685a      	ldr	r2, [r3, #4]
 801c252:	604a      	str	r2, [r1, #4]
 801c254:	2301      	movs	r3, #1
 801c256:	4093      	lsls	r3, r2
 801c258:	608b      	str	r3, [r1, #8]
 801c25a:	4630      	mov	r0, r6
 801c25c:	f001 fb62 	bl	801d924 <_Bfree>
 801c260:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c262:	2200      	movs	r2, #0
 801c264:	601a      	str	r2, [r3, #0]
 801c266:	f1b9 0300 	subs.w	r3, r9, #0
 801c26a:	bfbb      	ittet	lt
 801c26c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c270:	9303      	strlt	r3, [sp, #12]
 801c272:	2300      	movge	r3, #0
 801c274:	2201      	movlt	r2, #1
 801c276:	bfac      	ite	ge
 801c278:	6023      	strge	r3, [r4, #0]
 801c27a:	6022      	strlt	r2, [r4, #0]
 801c27c:	4b9c      	ldr	r3, [pc, #624]	; (801c4f0 <_dtoa_r+0x2e0>)
 801c27e:	9c03      	ldr	r4, [sp, #12]
 801c280:	43a3      	bics	r3, r4
 801c282:	d11a      	bne.n	801c2ba <_dtoa_r+0xaa>
 801c284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c286:	f242 730f 	movw	r3, #9999	; 0x270f
 801c28a:	6013      	str	r3, [r2, #0]
 801c28c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c290:	ea53 0308 	orrs.w	r3, r3, r8
 801c294:	f000 8512 	beq.w	801ccbc <_dtoa_r+0xaac>
 801c298:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c29a:	b953      	cbnz	r3, 801c2b2 <_dtoa_r+0xa2>
 801c29c:	4b95      	ldr	r3, [pc, #596]	; (801c4f4 <_dtoa_r+0x2e4>)
 801c29e:	e01f      	b.n	801c2e0 <_dtoa_r+0xd0>
 801c2a0:	4b95      	ldr	r3, [pc, #596]	; (801c4f8 <_dtoa_r+0x2e8>)
 801c2a2:	9300      	str	r3, [sp, #0]
 801c2a4:	3308      	adds	r3, #8
 801c2a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c2a8:	6013      	str	r3, [r2, #0]
 801c2aa:	9800      	ldr	r0, [sp, #0]
 801c2ac:	b015      	add	sp, #84	; 0x54
 801c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b2:	4b90      	ldr	r3, [pc, #576]	; (801c4f4 <_dtoa_r+0x2e4>)
 801c2b4:	9300      	str	r3, [sp, #0]
 801c2b6:	3303      	adds	r3, #3
 801c2b8:	e7f5      	b.n	801c2a6 <_dtoa_r+0x96>
 801c2ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c2be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c2ca:	d10b      	bne.n	801c2e4 <_dtoa_r+0xd4>
 801c2cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2ce:	2301      	movs	r3, #1
 801c2d0:	6013      	str	r3, [r2, #0]
 801c2d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	f000 84ee 	beq.w	801ccb6 <_dtoa_r+0xaa6>
 801c2da:	4888      	ldr	r0, [pc, #544]	; (801c4fc <_dtoa_r+0x2ec>)
 801c2dc:	6018      	str	r0, [r3, #0]
 801c2de:	1e43      	subs	r3, r0, #1
 801c2e0:	9300      	str	r3, [sp, #0]
 801c2e2:	e7e2      	b.n	801c2aa <_dtoa_r+0x9a>
 801c2e4:	a913      	add	r1, sp, #76	; 0x4c
 801c2e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c2ea:	aa12      	add	r2, sp, #72	; 0x48
 801c2ec:	4630      	mov	r0, r6
 801c2ee:	f001 fec1 	bl	801e074 <__d2b>
 801c2f2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801c2f6:	4605      	mov	r5, r0
 801c2f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c2fa:	2900      	cmp	r1, #0
 801c2fc:	d047      	beq.n	801c38e <_dtoa_r+0x17e>
 801c2fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c300:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c308:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801c30c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c310:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c314:	2400      	movs	r4, #0
 801c316:	ec43 2b16 	vmov	d6, r2, r3
 801c31a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801c31e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801c4d0 <_dtoa_r+0x2c0>
 801c322:	ee36 7b47 	vsub.f64	d7, d6, d7
 801c326:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801c4d8 <_dtoa_r+0x2c8>
 801c32a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c32e:	eeb0 7b46 	vmov.f64	d7, d6
 801c332:	ee06 1a90 	vmov	s13, r1
 801c336:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801c33a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801c4e0 <_dtoa_r+0x2d0>
 801c33e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c342:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c346:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c34e:	ee16 ba90 	vmov	fp, s13
 801c352:	9411      	str	r4, [sp, #68]	; 0x44
 801c354:	d508      	bpl.n	801c368 <_dtoa_r+0x158>
 801c356:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c35a:	eeb4 6b47 	vcmp.f64	d6, d7
 801c35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c362:	bf18      	it	ne
 801c364:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801c368:	f1bb 0f16 	cmp.w	fp, #22
 801c36c:	d832      	bhi.n	801c3d4 <_dtoa_r+0x1c4>
 801c36e:	4b64      	ldr	r3, [pc, #400]	; (801c500 <_dtoa_r+0x2f0>)
 801c370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c374:	ed93 7b00 	vldr	d7, [r3]
 801c378:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801c37c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c384:	d501      	bpl.n	801c38a <_dtoa_r+0x17a>
 801c386:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801c38a:	2300      	movs	r3, #0
 801c38c:	e023      	b.n	801c3d6 <_dtoa_r+0x1c6>
 801c38e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c390:	4401      	add	r1, r0
 801c392:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801c396:	2b20      	cmp	r3, #32
 801c398:	bfc3      	ittte	gt
 801c39a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c39e:	fa04 f303 	lslgt.w	r3, r4, r3
 801c3a2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801c3a6:	f1c3 0320 	rsble	r3, r3, #32
 801c3aa:	bfc6      	itte	gt
 801c3ac:	fa28 f804 	lsrgt.w	r8, r8, r4
 801c3b0:	ea43 0308 	orrgt.w	r3, r3, r8
 801c3b4:	fa08 f303 	lslle.w	r3, r8, r3
 801c3b8:	ee07 3a90 	vmov	s15, r3
 801c3bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c3c0:	3901      	subs	r1, #1
 801c3c2:	ed8d 7b00 	vstr	d7, [sp]
 801c3c6:	9c01      	ldr	r4, [sp, #4]
 801c3c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c3cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801c3d0:	2401      	movs	r4, #1
 801c3d2:	e7a0      	b.n	801c316 <_dtoa_r+0x106>
 801c3d4:	2301      	movs	r3, #1
 801c3d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c3d8:	1a43      	subs	r3, r0, r1
 801c3da:	1e5a      	subs	r2, r3, #1
 801c3dc:	bf45      	ittet	mi
 801c3de:	f1c3 0301 	rsbmi	r3, r3, #1
 801c3e2:	9305      	strmi	r3, [sp, #20]
 801c3e4:	2300      	movpl	r3, #0
 801c3e6:	2300      	movmi	r3, #0
 801c3e8:	9206      	str	r2, [sp, #24]
 801c3ea:	bf54      	ite	pl
 801c3ec:	9305      	strpl	r3, [sp, #20]
 801c3ee:	9306      	strmi	r3, [sp, #24]
 801c3f0:	f1bb 0f00 	cmp.w	fp, #0
 801c3f4:	db18      	blt.n	801c428 <_dtoa_r+0x218>
 801c3f6:	9b06      	ldr	r3, [sp, #24]
 801c3f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801c3fc:	445b      	add	r3, fp
 801c3fe:	9306      	str	r3, [sp, #24]
 801c400:	2300      	movs	r3, #0
 801c402:	9a07      	ldr	r2, [sp, #28]
 801c404:	2a09      	cmp	r2, #9
 801c406:	d849      	bhi.n	801c49c <_dtoa_r+0x28c>
 801c408:	2a05      	cmp	r2, #5
 801c40a:	bfc4      	itt	gt
 801c40c:	3a04      	subgt	r2, #4
 801c40e:	9207      	strgt	r2, [sp, #28]
 801c410:	9a07      	ldr	r2, [sp, #28]
 801c412:	f1a2 0202 	sub.w	r2, r2, #2
 801c416:	bfcc      	ite	gt
 801c418:	2400      	movgt	r4, #0
 801c41a:	2401      	movle	r4, #1
 801c41c:	2a03      	cmp	r2, #3
 801c41e:	d848      	bhi.n	801c4b2 <_dtoa_r+0x2a2>
 801c420:	e8df f002 	tbb	[pc, r2]
 801c424:	3a2c2e0b 	.word	0x3a2c2e0b
 801c428:	9b05      	ldr	r3, [sp, #20]
 801c42a:	2200      	movs	r2, #0
 801c42c:	eba3 030b 	sub.w	r3, r3, fp
 801c430:	9305      	str	r3, [sp, #20]
 801c432:	920e      	str	r2, [sp, #56]	; 0x38
 801c434:	f1cb 0300 	rsb	r3, fp, #0
 801c438:	e7e3      	b.n	801c402 <_dtoa_r+0x1f2>
 801c43a:	2200      	movs	r2, #0
 801c43c:	9208      	str	r2, [sp, #32]
 801c43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c440:	2a00      	cmp	r2, #0
 801c442:	dc39      	bgt.n	801c4b8 <_dtoa_r+0x2a8>
 801c444:	f04f 0a01 	mov.w	sl, #1
 801c448:	46d1      	mov	r9, sl
 801c44a:	4652      	mov	r2, sl
 801c44c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801c450:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801c452:	2100      	movs	r1, #0
 801c454:	6079      	str	r1, [r7, #4]
 801c456:	2004      	movs	r0, #4
 801c458:	f100 0c14 	add.w	ip, r0, #20
 801c45c:	4594      	cmp	ip, r2
 801c45e:	6879      	ldr	r1, [r7, #4]
 801c460:	d92f      	bls.n	801c4c2 <_dtoa_r+0x2b2>
 801c462:	4630      	mov	r0, r6
 801c464:	930c      	str	r3, [sp, #48]	; 0x30
 801c466:	f001 fa1d 	bl	801d8a4 <_Balloc>
 801c46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c46c:	9000      	str	r0, [sp, #0]
 801c46e:	4602      	mov	r2, r0
 801c470:	2800      	cmp	r0, #0
 801c472:	d149      	bne.n	801c508 <_dtoa_r+0x2f8>
 801c474:	4b23      	ldr	r3, [pc, #140]	; (801c504 <_dtoa_r+0x2f4>)
 801c476:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c47a:	e6df      	b.n	801c23c <_dtoa_r+0x2c>
 801c47c:	2201      	movs	r2, #1
 801c47e:	e7dd      	b.n	801c43c <_dtoa_r+0x22c>
 801c480:	2200      	movs	r2, #0
 801c482:	9208      	str	r2, [sp, #32]
 801c484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c486:	eb0b 0a02 	add.w	sl, fp, r2
 801c48a:	f10a 0901 	add.w	r9, sl, #1
 801c48e:	464a      	mov	r2, r9
 801c490:	2a01      	cmp	r2, #1
 801c492:	bfb8      	it	lt
 801c494:	2201      	movlt	r2, #1
 801c496:	e7db      	b.n	801c450 <_dtoa_r+0x240>
 801c498:	2201      	movs	r2, #1
 801c49a:	e7f2      	b.n	801c482 <_dtoa_r+0x272>
 801c49c:	2401      	movs	r4, #1
 801c49e:	2200      	movs	r2, #0
 801c4a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801c4a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801c4a8:	2100      	movs	r1, #0
 801c4aa:	46d1      	mov	r9, sl
 801c4ac:	2212      	movs	r2, #18
 801c4ae:	9109      	str	r1, [sp, #36]	; 0x24
 801c4b0:	e7ce      	b.n	801c450 <_dtoa_r+0x240>
 801c4b2:	2201      	movs	r2, #1
 801c4b4:	9208      	str	r2, [sp, #32]
 801c4b6:	e7f5      	b.n	801c4a4 <_dtoa_r+0x294>
 801c4b8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801c4bc:	46d1      	mov	r9, sl
 801c4be:	4652      	mov	r2, sl
 801c4c0:	e7c6      	b.n	801c450 <_dtoa_r+0x240>
 801c4c2:	3101      	adds	r1, #1
 801c4c4:	6079      	str	r1, [r7, #4]
 801c4c6:	0040      	lsls	r0, r0, #1
 801c4c8:	e7c6      	b.n	801c458 <_dtoa_r+0x248>
 801c4ca:	bf00      	nop
 801c4cc:	f3af 8000 	nop.w
 801c4d0:	636f4361 	.word	0x636f4361
 801c4d4:	3fd287a7 	.word	0x3fd287a7
 801c4d8:	8b60c8b3 	.word	0x8b60c8b3
 801c4dc:	3fc68a28 	.word	0x3fc68a28
 801c4e0:	509f79fb 	.word	0x509f79fb
 801c4e4:	3fd34413 	.word	0x3fd34413
 801c4e8:	08021ca1 	.word	0x08021ca1
 801c4ec:	08021db1 	.word	0x08021db1
 801c4f0:	7ff00000 	.word	0x7ff00000
 801c4f4:	08021dad 	.word	0x08021dad
 801c4f8:	08021da4 	.word	0x08021da4
 801c4fc:	08021c79 	.word	0x08021c79
 801c500:	08021f90 	.word	0x08021f90
 801c504:	08021e10 	.word	0x08021e10
 801c508:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801c50a:	9900      	ldr	r1, [sp, #0]
 801c50c:	6011      	str	r1, [r2, #0]
 801c50e:	f1b9 0f0e 	cmp.w	r9, #14
 801c512:	d872      	bhi.n	801c5fa <_dtoa_r+0x3ea>
 801c514:	2c00      	cmp	r4, #0
 801c516:	d070      	beq.n	801c5fa <_dtoa_r+0x3ea>
 801c518:	f1bb 0f00 	cmp.w	fp, #0
 801c51c:	f340 80a6 	ble.w	801c66c <_dtoa_r+0x45c>
 801c520:	49ca      	ldr	r1, [pc, #808]	; (801c84c <_dtoa_r+0x63c>)
 801c522:	f00b 020f 	and.w	r2, fp, #15
 801c526:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801c52a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c52e:	ed92 7b00 	vldr	d7, [r2]
 801c532:	ea4f 112b 	mov.w	r1, fp, asr #4
 801c536:	f000 808d 	beq.w	801c654 <_dtoa_r+0x444>
 801c53a:	4ac5      	ldr	r2, [pc, #788]	; (801c850 <_dtoa_r+0x640>)
 801c53c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801c540:	ed92 6b08 	vldr	d6, [r2, #32]
 801c544:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801c548:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c54c:	f001 010f 	and.w	r1, r1, #15
 801c550:	2203      	movs	r2, #3
 801c552:	48bf      	ldr	r0, [pc, #764]	; (801c850 <_dtoa_r+0x640>)
 801c554:	2900      	cmp	r1, #0
 801c556:	d17f      	bne.n	801c658 <_dtoa_r+0x448>
 801c558:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c55c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c560:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c564:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c566:	2900      	cmp	r1, #0
 801c568:	f000 80b2 	beq.w	801c6d0 <_dtoa_r+0x4c0>
 801c56c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c570:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c574:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c57c:	f140 80a8 	bpl.w	801c6d0 <_dtoa_r+0x4c0>
 801c580:	f1b9 0f00 	cmp.w	r9, #0
 801c584:	f000 80a4 	beq.w	801c6d0 <_dtoa_r+0x4c0>
 801c588:	f1ba 0f00 	cmp.w	sl, #0
 801c58c:	dd31      	ble.n	801c5f2 <_dtoa_r+0x3e2>
 801c58e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c592:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c596:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c59a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801c59e:	3201      	adds	r2, #1
 801c5a0:	4650      	mov	r0, sl
 801c5a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c5a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c5aa:	ee07 2a90 	vmov	s15, r2
 801c5ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c5b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c5b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 801c5ba:	9c03      	ldr	r4, [sp, #12]
 801c5bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c5c0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801c5c4:	2800      	cmp	r0, #0
 801c5c6:	f040 8086 	bne.w	801c6d6 <_dtoa_r+0x4c6>
 801c5ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c5ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c5d2:	ec42 1b17 	vmov	d7, r1, r2
 801c5d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5de:	f300 8272 	bgt.w	801cac6 <_dtoa_r+0x8b6>
 801c5e2:	eeb1 7b47 	vneg.f64	d7, d7
 801c5e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5ee:	f100 8267 	bmi.w	801cac0 <_dtoa_r+0x8b0>
 801c5f2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801c5f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c5fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c5fc:	2a00      	cmp	r2, #0
 801c5fe:	f2c0 8129 	blt.w	801c854 <_dtoa_r+0x644>
 801c602:	f1bb 0f0e 	cmp.w	fp, #14
 801c606:	f300 8125 	bgt.w	801c854 <_dtoa_r+0x644>
 801c60a:	4b90      	ldr	r3, [pc, #576]	; (801c84c <_dtoa_r+0x63c>)
 801c60c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c610:	ed93 6b00 	vldr	d6, [r3]
 801c614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c616:	2b00      	cmp	r3, #0
 801c618:	f280 80c3 	bge.w	801c7a2 <_dtoa_r+0x592>
 801c61c:	f1b9 0f00 	cmp.w	r9, #0
 801c620:	f300 80bf 	bgt.w	801c7a2 <_dtoa_r+0x592>
 801c624:	f040 824c 	bne.w	801cac0 <_dtoa_r+0x8b0>
 801c628:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c62c:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c630:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c634:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c63c:	464c      	mov	r4, r9
 801c63e:	464f      	mov	r7, r9
 801c640:	f280 8222 	bge.w	801ca88 <_dtoa_r+0x878>
 801c644:	f8dd 8000 	ldr.w	r8, [sp]
 801c648:	2331      	movs	r3, #49	; 0x31
 801c64a:	f808 3b01 	strb.w	r3, [r8], #1
 801c64e:	f10b 0b01 	add.w	fp, fp, #1
 801c652:	e21e      	b.n	801ca92 <_dtoa_r+0x882>
 801c654:	2202      	movs	r2, #2
 801c656:	e77c      	b.n	801c552 <_dtoa_r+0x342>
 801c658:	07cc      	lsls	r4, r1, #31
 801c65a:	d504      	bpl.n	801c666 <_dtoa_r+0x456>
 801c65c:	ed90 6b00 	vldr	d6, [r0]
 801c660:	3201      	adds	r2, #1
 801c662:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c666:	1049      	asrs	r1, r1, #1
 801c668:	3008      	adds	r0, #8
 801c66a:	e773      	b.n	801c554 <_dtoa_r+0x344>
 801c66c:	d02e      	beq.n	801c6cc <_dtoa_r+0x4bc>
 801c66e:	f1cb 0100 	rsb	r1, fp, #0
 801c672:	4a76      	ldr	r2, [pc, #472]	; (801c84c <_dtoa_r+0x63c>)
 801c674:	f001 000f 	and.w	r0, r1, #15
 801c678:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c67c:	ed92 7b00 	vldr	d7, [r2]
 801c680:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801c684:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c688:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c68c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801c690:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801c694:	486e      	ldr	r0, [pc, #440]	; (801c850 <_dtoa_r+0x640>)
 801c696:	1109      	asrs	r1, r1, #4
 801c698:	2400      	movs	r4, #0
 801c69a:	2202      	movs	r2, #2
 801c69c:	b939      	cbnz	r1, 801c6ae <_dtoa_r+0x49e>
 801c69e:	2c00      	cmp	r4, #0
 801c6a0:	f43f af60 	beq.w	801c564 <_dtoa_r+0x354>
 801c6a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c6a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c6ac:	e75a      	b.n	801c564 <_dtoa_r+0x354>
 801c6ae:	07cf      	lsls	r7, r1, #31
 801c6b0:	d509      	bpl.n	801c6c6 <_dtoa_r+0x4b6>
 801c6b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801c6b6:	ed90 7b00 	vldr	d7, [r0]
 801c6ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c6be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c6c2:	3201      	adds	r2, #1
 801c6c4:	2401      	movs	r4, #1
 801c6c6:	1049      	asrs	r1, r1, #1
 801c6c8:	3008      	adds	r0, #8
 801c6ca:	e7e7      	b.n	801c69c <_dtoa_r+0x48c>
 801c6cc:	2202      	movs	r2, #2
 801c6ce:	e749      	b.n	801c564 <_dtoa_r+0x354>
 801c6d0:	465f      	mov	r7, fp
 801c6d2:	4648      	mov	r0, r9
 801c6d4:	e765      	b.n	801c5a2 <_dtoa_r+0x392>
 801c6d6:	ec42 1b17 	vmov	d7, r1, r2
 801c6da:	4a5c      	ldr	r2, [pc, #368]	; (801c84c <_dtoa_r+0x63c>)
 801c6dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c6e0:	ed12 4b02 	vldr	d4, [r2, #-8]
 801c6e4:	9a00      	ldr	r2, [sp, #0]
 801c6e6:	1814      	adds	r4, r2, r0
 801c6e8:	9a08      	ldr	r2, [sp, #32]
 801c6ea:	b352      	cbz	r2, 801c742 <_dtoa_r+0x532>
 801c6ec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c6f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c6f4:	f8dd 8000 	ldr.w	r8, [sp]
 801c6f8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c6fc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c700:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c704:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c708:	ee14 2a90 	vmov	r2, s9
 801c70c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c710:	3230      	adds	r2, #48	; 0x30
 801c712:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c716:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c71e:	f808 2b01 	strb.w	r2, [r8], #1
 801c722:	d439      	bmi.n	801c798 <_dtoa_r+0x588>
 801c724:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c728:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c730:	d472      	bmi.n	801c818 <_dtoa_r+0x608>
 801c732:	45a0      	cmp	r8, r4
 801c734:	f43f af5d 	beq.w	801c5f2 <_dtoa_r+0x3e2>
 801c738:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c73c:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c740:	e7e0      	b.n	801c704 <_dtoa_r+0x4f4>
 801c742:	f8dd 8000 	ldr.w	r8, [sp]
 801c746:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c74a:	4621      	mov	r1, r4
 801c74c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c750:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c754:	ee14 2a90 	vmov	r2, s9
 801c758:	3230      	adds	r2, #48	; 0x30
 801c75a:	f808 2b01 	strb.w	r2, [r8], #1
 801c75e:	45a0      	cmp	r8, r4
 801c760:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c764:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c768:	d118      	bne.n	801c79c <_dtoa_r+0x58c>
 801c76a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c76e:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c772:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c77a:	dc4d      	bgt.n	801c818 <_dtoa_r+0x608>
 801c77c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c780:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c788:	f57f af33 	bpl.w	801c5f2 <_dtoa_r+0x3e2>
 801c78c:	4688      	mov	r8, r1
 801c78e:	3901      	subs	r1, #1
 801c790:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c794:	2b30      	cmp	r3, #48	; 0x30
 801c796:	d0f9      	beq.n	801c78c <_dtoa_r+0x57c>
 801c798:	46bb      	mov	fp, r7
 801c79a:	e02a      	b.n	801c7f2 <_dtoa_r+0x5e2>
 801c79c:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c7a0:	e7d6      	b.n	801c750 <_dtoa_r+0x540>
 801c7a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c7a6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c7aa:	f8dd 8000 	ldr.w	r8, [sp]
 801c7ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c7b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c7b6:	ee15 3a10 	vmov	r3, s10
 801c7ba:	3330      	adds	r3, #48	; 0x30
 801c7bc:	f808 3b01 	strb.w	r3, [r8], #1
 801c7c0:	9b00      	ldr	r3, [sp, #0]
 801c7c2:	eba8 0303 	sub.w	r3, r8, r3
 801c7c6:	4599      	cmp	r9, r3
 801c7c8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c7cc:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c7d0:	d133      	bne.n	801c83a <_dtoa_r+0x62a>
 801c7d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c7d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7de:	dc1a      	bgt.n	801c816 <_dtoa_r+0x606>
 801c7e0:	eeb4 7b46 	vcmp.f64	d7, d6
 801c7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7e8:	d103      	bne.n	801c7f2 <_dtoa_r+0x5e2>
 801c7ea:	ee15 3a10 	vmov	r3, s10
 801c7ee:	07d9      	lsls	r1, r3, #31
 801c7f0:	d411      	bmi.n	801c816 <_dtoa_r+0x606>
 801c7f2:	4629      	mov	r1, r5
 801c7f4:	4630      	mov	r0, r6
 801c7f6:	f001 f895 	bl	801d924 <_Bfree>
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c7fe:	f888 3000 	strb.w	r3, [r8]
 801c802:	f10b 0301 	add.w	r3, fp, #1
 801c806:	6013      	str	r3, [r2, #0]
 801c808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	f43f ad4d 	beq.w	801c2aa <_dtoa_r+0x9a>
 801c810:	f8c3 8000 	str.w	r8, [r3]
 801c814:	e549      	b.n	801c2aa <_dtoa_r+0x9a>
 801c816:	465f      	mov	r7, fp
 801c818:	4643      	mov	r3, r8
 801c81a:	4698      	mov	r8, r3
 801c81c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c820:	2a39      	cmp	r2, #57	; 0x39
 801c822:	d106      	bne.n	801c832 <_dtoa_r+0x622>
 801c824:	9a00      	ldr	r2, [sp, #0]
 801c826:	429a      	cmp	r2, r3
 801c828:	d1f7      	bne.n	801c81a <_dtoa_r+0x60a>
 801c82a:	9900      	ldr	r1, [sp, #0]
 801c82c:	2230      	movs	r2, #48	; 0x30
 801c82e:	3701      	adds	r7, #1
 801c830:	700a      	strb	r2, [r1, #0]
 801c832:	781a      	ldrb	r2, [r3, #0]
 801c834:	3201      	adds	r2, #1
 801c836:	701a      	strb	r2, [r3, #0]
 801c838:	e7ae      	b.n	801c798 <_dtoa_r+0x588>
 801c83a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c83e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c846:	d1b2      	bne.n	801c7ae <_dtoa_r+0x59e>
 801c848:	e7d3      	b.n	801c7f2 <_dtoa_r+0x5e2>
 801c84a:	bf00      	nop
 801c84c:	08021f90 	.word	0x08021f90
 801c850:	08021f68 	.word	0x08021f68
 801c854:	9908      	ldr	r1, [sp, #32]
 801c856:	2900      	cmp	r1, #0
 801c858:	f000 80d1 	beq.w	801c9fe <_dtoa_r+0x7ee>
 801c85c:	9907      	ldr	r1, [sp, #28]
 801c85e:	2901      	cmp	r1, #1
 801c860:	f300 80b4 	bgt.w	801c9cc <_dtoa_r+0x7bc>
 801c864:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c866:	2900      	cmp	r1, #0
 801c868:	f000 80ac 	beq.w	801c9c4 <_dtoa_r+0x7b4>
 801c86c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c870:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c874:	461c      	mov	r4, r3
 801c876:	930a      	str	r3, [sp, #40]	; 0x28
 801c878:	9b05      	ldr	r3, [sp, #20]
 801c87a:	4413      	add	r3, r2
 801c87c:	9305      	str	r3, [sp, #20]
 801c87e:	9b06      	ldr	r3, [sp, #24]
 801c880:	2101      	movs	r1, #1
 801c882:	4413      	add	r3, r2
 801c884:	4630      	mov	r0, r6
 801c886:	9306      	str	r3, [sp, #24]
 801c888:	f001 f952 	bl	801db30 <__i2b>
 801c88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c88e:	4607      	mov	r7, r0
 801c890:	f1b8 0f00 	cmp.w	r8, #0
 801c894:	dd0d      	ble.n	801c8b2 <_dtoa_r+0x6a2>
 801c896:	9a06      	ldr	r2, [sp, #24]
 801c898:	2a00      	cmp	r2, #0
 801c89a:	dd0a      	ble.n	801c8b2 <_dtoa_r+0x6a2>
 801c89c:	4542      	cmp	r2, r8
 801c89e:	9905      	ldr	r1, [sp, #20]
 801c8a0:	bfa8      	it	ge
 801c8a2:	4642      	movge	r2, r8
 801c8a4:	1a89      	subs	r1, r1, r2
 801c8a6:	9105      	str	r1, [sp, #20]
 801c8a8:	9906      	ldr	r1, [sp, #24]
 801c8aa:	eba8 0802 	sub.w	r8, r8, r2
 801c8ae:	1a8a      	subs	r2, r1, r2
 801c8b0:	9206      	str	r2, [sp, #24]
 801c8b2:	b303      	cbz	r3, 801c8f6 <_dtoa_r+0x6e6>
 801c8b4:	9a08      	ldr	r2, [sp, #32]
 801c8b6:	2a00      	cmp	r2, #0
 801c8b8:	f000 80a6 	beq.w	801ca08 <_dtoa_r+0x7f8>
 801c8bc:	2c00      	cmp	r4, #0
 801c8be:	dd13      	ble.n	801c8e8 <_dtoa_r+0x6d8>
 801c8c0:	4639      	mov	r1, r7
 801c8c2:	4622      	mov	r2, r4
 801c8c4:	4630      	mov	r0, r6
 801c8c6:	930c      	str	r3, [sp, #48]	; 0x30
 801c8c8:	f001 f9ee 	bl	801dca8 <__pow5mult>
 801c8cc:	462a      	mov	r2, r5
 801c8ce:	4601      	mov	r1, r0
 801c8d0:	4607      	mov	r7, r0
 801c8d2:	4630      	mov	r0, r6
 801c8d4:	f001 f942 	bl	801db5c <__multiply>
 801c8d8:	4629      	mov	r1, r5
 801c8da:	900a      	str	r0, [sp, #40]	; 0x28
 801c8dc:	4630      	mov	r0, r6
 801c8de:	f001 f821 	bl	801d924 <_Bfree>
 801c8e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c8e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c8e6:	4615      	mov	r5, r2
 801c8e8:	1b1a      	subs	r2, r3, r4
 801c8ea:	d004      	beq.n	801c8f6 <_dtoa_r+0x6e6>
 801c8ec:	4629      	mov	r1, r5
 801c8ee:	4630      	mov	r0, r6
 801c8f0:	f001 f9da 	bl	801dca8 <__pow5mult>
 801c8f4:	4605      	mov	r5, r0
 801c8f6:	2101      	movs	r1, #1
 801c8f8:	4630      	mov	r0, r6
 801c8fa:	f001 f919 	bl	801db30 <__i2b>
 801c8fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c900:	2b00      	cmp	r3, #0
 801c902:	4604      	mov	r4, r0
 801c904:	f340 8082 	ble.w	801ca0c <_dtoa_r+0x7fc>
 801c908:	461a      	mov	r2, r3
 801c90a:	4601      	mov	r1, r0
 801c90c:	4630      	mov	r0, r6
 801c90e:	f001 f9cb 	bl	801dca8 <__pow5mult>
 801c912:	9b07      	ldr	r3, [sp, #28]
 801c914:	2b01      	cmp	r3, #1
 801c916:	4604      	mov	r4, r0
 801c918:	dd7b      	ble.n	801ca12 <_dtoa_r+0x802>
 801c91a:	2300      	movs	r3, #0
 801c91c:	930a      	str	r3, [sp, #40]	; 0x28
 801c91e:	6922      	ldr	r2, [r4, #16]
 801c920:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c924:	6910      	ldr	r0, [r2, #16]
 801c926:	f001 f8b3 	bl	801da90 <__hi0bits>
 801c92a:	f1c0 0020 	rsb	r0, r0, #32
 801c92e:	9b06      	ldr	r3, [sp, #24]
 801c930:	4418      	add	r0, r3
 801c932:	f010 001f 	ands.w	r0, r0, #31
 801c936:	f000 808d 	beq.w	801ca54 <_dtoa_r+0x844>
 801c93a:	f1c0 0220 	rsb	r2, r0, #32
 801c93e:	2a04      	cmp	r2, #4
 801c940:	f340 8086 	ble.w	801ca50 <_dtoa_r+0x840>
 801c944:	f1c0 001c 	rsb	r0, r0, #28
 801c948:	9b05      	ldr	r3, [sp, #20]
 801c94a:	4403      	add	r3, r0
 801c94c:	9305      	str	r3, [sp, #20]
 801c94e:	9b06      	ldr	r3, [sp, #24]
 801c950:	4403      	add	r3, r0
 801c952:	4480      	add	r8, r0
 801c954:	9306      	str	r3, [sp, #24]
 801c956:	9b05      	ldr	r3, [sp, #20]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	dd05      	ble.n	801c968 <_dtoa_r+0x758>
 801c95c:	4629      	mov	r1, r5
 801c95e:	461a      	mov	r2, r3
 801c960:	4630      	mov	r0, r6
 801c962:	f001 f9fb 	bl	801dd5c <__lshift>
 801c966:	4605      	mov	r5, r0
 801c968:	9b06      	ldr	r3, [sp, #24]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	dd05      	ble.n	801c97a <_dtoa_r+0x76a>
 801c96e:	4621      	mov	r1, r4
 801c970:	461a      	mov	r2, r3
 801c972:	4630      	mov	r0, r6
 801c974:	f001 f9f2 	bl	801dd5c <__lshift>
 801c978:	4604      	mov	r4, r0
 801c97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d06b      	beq.n	801ca58 <_dtoa_r+0x848>
 801c980:	4621      	mov	r1, r4
 801c982:	4628      	mov	r0, r5
 801c984:	f001 fa56 	bl	801de34 <__mcmp>
 801c988:	2800      	cmp	r0, #0
 801c98a:	da65      	bge.n	801ca58 <_dtoa_r+0x848>
 801c98c:	2300      	movs	r3, #0
 801c98e:	4629      	mov	r1, r5
 801c990:	220a      	movs	r2, #10
 801c992:	4630      	mov	r0, r6
 801c994:	f000 ffe8 	bl	801d968 <__multadd>
 801c998:	9b08      	ldr	r3, [sp, #32]
 801c99a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801c99e:	4605      	mov	r5, r0
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	f000 8192 	beq.w	801ccca <_dtoa_r+0xaba>
 801c9a6:	4639      	mov	r1, r7
 801c9a8:	2300      	movs	r3, #0
 801c9aa:	220a      	movs	r2, #10
 801c9ac:	4630      	mov	r0, r6
 801c9ae:	f000 ffdb 	bl	801d968 <__multadd>
 801c9b2:	f1ba 0f00 	cmp.w	sl, #0
 801c9b6:	4607      	mov	r7, r0
 801c9b8:	f300 808e 	bgt.w	801cad8 <_dtoa_r+0x8c8>
 801c9bc:	9b07      	ldr	r3, [sp, #28]
 801c9be:	2b02      	cmp	r3, #2
 801c9c0:	dc51      	bgt.n	801ca66 <_dtoa_r+0x856>
 801c9c2:	e089      	b.n	801cad8 <_dtoa_r+0x8c8>
 801c9c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c9c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801c9ca:	e751      	b.n	801c870 <_dtoa_r+0x660>
 801c9cc:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801c9d0:	42a3      	cmp	r3, r4
 801c9d2:	bfbf      	itttt	lt
 801c9d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801c9d6:	1ae3      	sublt	r3, r4, r3
 801c9d8:	18d2      	addlt	r2, r2, r3
 801c9da:	4613      	movlt	r3, r2
 801c9dc:	bfb7      	itett	lt
 801c9de:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c9e0:	1b1c      	subge	r4, r3, r4
 801c9e2:	4623      	movlt	r3, r4
 801c9e4:	2400      	movlt	r4, #0
 801c9e6:	f1b9 0f00 	cmp.w	r9, #0
 801c9ea:	bfb5      	itete	lt
 801c9ec:	9a05      	ldrlt	r2, [sp, #20]
 801c9ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801c9f2:	eba2 0809 	sublt.w	r8, r2, r9
 801c9f6:	464a      	movge	r2, r9
 801c9f8:	bfb8      	it	lt
 801c9fa:	2200      	movlt	r2, #0
 801c9fc:	e73b      	b.n	801c876 <_dtoa_r+0x666>
 801c9fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ca02:	9f08      	ldr	r7, [sp, #32]
 801ca04:	461c      	mov	r4, r3
 801ca06:	e743      	b.n	801c890 <_dtoa_r+0x680>
 801ca08:	461a      	mov	r2, r3
 801ca0a:	e76f      	b.n	801c8ec <_dtoa_r+0x6dc>
 801ca0c:	9b07      	ldr	r3, [sp, #28]
 801ca0e:	2b01      	cmp	r3, #1
 801ca10:	dc18      	bgt.n	801ca44 <_dtoa_r+0x834>
 801ca12:	9b02      	ldr	r3, [sp, #8]
 801ca14:	b9b3      	cbnz	r3, 801ca44 <_dtoa_r+0x834>
 801ca16:	9b03      	ldr	r3, [sp, #12]
 801ca18:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801ca1c:	b9a2      	cbnz	r2, 801ca48 <_dtoa_r+0x838>
 801ca1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ca22:	0d12      	lsrs	r2, r2, #20
 801ca24:	0512      	lsls	r2, r2, #20
 801ca26:	b18a      	cbz	r2, 801ca4c <_dtoa_r+0x83c>
 801ca28:	9b05      	ldr	r3, [sp, #20]
 801ca2a:	3301      	adds	r3, #1
 801ca2c:	9305      	str	r3, [sp, #20]
 801ca2e:	9b06      	ldr	r3, [sp, #24]
 801ca30:	3301      	adds	r3, #1
 801ca32:	9306      	str	r3, [sp, #24]
 801ca34:	2301      	movs	r3, #1
 801ca36:	930a      	str	r3, [sp, #40]	; 0x28
 801ca38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	f47f af6f 	bne.w	801c91e <_dtoa_r+0x70e>
 801ca40:	2001      	movs	r0, #1
 801ca42:	e774      	b.n	801c92e <_dtoa_r+0x71e>
 801ca44:	2300      	movs	r3, #0
 801ca46:	e7f6      	b.n	801ca36 <_dtoa_r+0x826>
 801ca48:	9b02      	ldr	r3, [sp, #8]
 801ca4a:	e7f4      	b.n	801ca36 <_dtoa_r+0x826>
 801ca4c:	920a      	str	r2, [sp, #40]	; 0x28
 801ca4e:	e7f3      	b.n	801ca38 <_dtoa_r+0x828>
 801ca50:	d081      	beq.n	801c956 <_dtoa_r+0x746>
 801ca52:	4610      	mov	r0, r2
 801ca54:	301c      	adds	r0, #28
 801ca56:	e777      	b.n	801c948 <_dtoa_r+0x738>
 801ca58:	f1b9 0f00 	cmp.w	r9, #0
 801ca5c:	dc37      	bgt.n	801cace <_dtoa_r+0x8be>
 801ca5e:	9b07      	ldr	r3, [sp, #28]
 801ca60:	2b02      	cmp	r3, #2
 801ca62:	dd34      	ble.n	801cace <_dtoa_r+0x8be>
 801ca64:	46ca      	mov	sl, r9
 801ca66:	f1ba 0f00 	cmp.w	sl, #0
 801ca6a:	d10d      	bne.n	801ca88 <_dtoa_r+0x878>
 801ca6c:	4621      	mov	r1, r4
 801ca6e:	4653      	mov	r3, sl
 801ca70:	2205      	movs	r2, #5
 801ca72:	4630      	mov	r0, r6
 801ca74:	f000 ff78 	bl	801d968 <__multadd>
 801ca78:	4601      	mov	r1, r0
 801ca7a:	4604      	mov	r4, r0
 801ca7c:	4628      	mov	r0, r5
 801ca7e:	f001 f9d9 	bl	801de34 <__mcmp>
 801ca82:	2800      	cmp	r0, #0
 801ca84:	f73f adde 	bgt.w	801c644 <_dtoa_r+0x434>
 801ca88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca8a:	f8dd 8000 	ldr.w	r8, [sp]
 801ca8e:	ea6f 0b03 	mvn.w	fp, r3
 801ca92:	f04f 0900 	mov.w	r9, #0
 801ca96:	4621      	mov	r1, r4
 801ca98:	4630      	mov	r0, r6
 801ca9a:	f000 ff43 	bl	801d924 <_Bfree>
 801ca9e:	2f00      	cmp	r7, #0
 801caa0:	f43f aea7 	beq.w	801c7f2 <_dtoa_r+0x5e2>
 801caa4:	f1b9 0f00 	cmp.w	r9, #0
 801caa8:	d005      	beq.n	801cab6 <_dtoa_r+0x8a6>
 801caaa:	45b9      	cmp	r9, r7
 801caac:	d003      	beq.n	801cab6 <_dtoa_r+0x8a6>
 801caae:	4649      	mov	r1, r9
 801cab0:	4630      	mov	r0, r6
 801cab2:	f000 ff37 	bl	801d924 <_Bfree>
 801cab6:	4639      	mov	r1, r7
 801cab8:	4630      	mov	r0, r6
 801caba:	f000 ff33 	bl	801d924 <_Bfree>
 801cabe:	e698      	b.n	801c7f2 <_dtoa_r+0x5e2>
 801cac0:	2400      	movs	r4, #0
 801cac2:	4627      	mov	r7, r4
 801cac4:	e7e0      	b.n	801ca88 <_dtoa_r+0x878>
 801cac6:	46bb      	mov	fp, r7
 801cac8:	4604      	mov	r4, r0
 801caca:	4607      	mov	r7, r0
 801cacc:	e5ba      	b.n	801c644 <_dtoa_r+0x434>
 801cace:	9b08      	ldr	r3, [sp, #32]
 801cad0:	46ca      	mov	sl, r9
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	f000 8100 	beq.w	801ccd8 <_dtoa_r+0xac8>
 801cad8:	f1b8 0f00 	cmp.w	r8, #0
 801cadc:	dd05      	ble.n	801caea <_dtoa_r+0x8da>
 801cade:	4639      	mov	r1, r7
 801cae0:	4642      	mov	r2, r8
 801cae2:	4630      	mov	r0, r6
 801cae4:	f001 f93a 	bl	801dd5c <__lshift>
 801cae8:	4607      	mov	r7, r0
 801caea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801caec:	2b00      	cmp	r3, #0
 801caee:	d05d      	beq.n	801cbac <_dtoa_r+0x99c>
 801caf0:	6879      	ldr	r1, [r7, #4]
 801caf2:	4630      	mov	r0, r6
 801caf4:	f000 fed6 	bl	801d8a4 <_Balloc>
 801caf8:	4680      	mov	r8, r0
 801cafa:	b928      	cbnz	r0, 801cb08 <_dtoa_r+0x8f8>
 801cafc:	4b82      	ldr	r3, [pc, #520]	; (801cd08 <_dtoa_r+0xaf8>)
 801cafe:	4602      	mov	r2, r0
 801cb00:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cb04:	f7ff bb9a 	b.w	801c23c <_dtoa_r+0x2c>
 801cb08:	693a      	ldr	r2, [r7, #16]
 801cb0a:	3202      	adds	r2, #2
 801cb0c:	0092      	lsls	r2, r2, #2
 801cb0e:	f107 010c 	add.w	r1, r7, #12
 801cb12:	300c      	adds	r0, #12
 801cb14:	f7fd fbd4 	bl	801a2c0 <memcpy>
 801cb18:	2201      	movs	r2, #1
 801cb1a:	4641      	mov	r1, r8
 801cb1c:	4630      	mov	r0, r6
 801cb1e:	f001 f91d 	bl	801dd5c <__lshift>
 801cb22:	9b00      	ldr	r3, [sp, #0]
 801cb24:	3301      	adds	r3, #1
 801cb26:	9305      	str	r3, [sp, #20]
 801cb28:	9b00      	ldr	r3, [sp, #0]
 801cb2a:	4453      	add	r3, sl
 801cb2c:	9309      	str	r3, [sp, #36]	; 0x24
 801cb2e:	9b02      	ldr	r3, [sp, #8]
 801cb30:	f003 0301 	and.w	r3, r3, #1
 801cb34:	46b9      	mov	r9, r7
 801cb36:	9308      	str	r3, [sp, #32]
 801cb38:	4607      	mov	r7, r0
 801cb3a:	9b05      	ldr	r3, [sp, #20]
 801cb3c:	4621      	mov	r1, r4
 801cb3e:	3b01      	subs	r3, #1
 801cb40:	4628      	mov	r0, r5
 801cb42:	9302      	str	r3, [sp, #8]
 801cb44:	f7ff fad8 	bl	801c0f8 <quorem>
 801cb48:	4603      	mov	r3, r0
 801cb4a:	3330      	adds	r3, #48	; 0x30
 801cb4c:	9006      	str	r0, [sp, #24]
 801cb4e:	4649      	mov	r1, r9
 801cb50:	4628      	mov	r0, r5
 801cb52:	930a      	str	r3, [sp, #40]	; 0x28
 801cb54:	f001 f96e 	bl	801de34 <__mcmp>
 801cb58:	463a      	mov	r2, r7
 801cb5a:	4682      	mov	sl, r0
 801cb5c:	4621      	mov	r1, r4
 801cb5e:	4630      	mov	r0, r6
 801cb60:	f001 f984 	bl	801de6c <__mdiff>
 801cb64:	68c2      	ldr	r2, [r0, #12]
 801cb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb68:	4680      	mov	r8, r0
 801cb6a:	bb0a      	cbnz	r2, 801cbb0 <_dtoa_r+0x9a0>
 801cb6c:	4601      	mov	r1, r0
 801cb6e:	4628      	mov	r0, r5
 801cb70:	f001 f960 	bl	801de34 <__mcmp>
 801cb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb76:	4602      	mov	r2, r0
 801cb78:	4641      	mov	r1, r8
 801cb7a:	4630      	mov	r0, r6
 801cb7c:	920e      	str	r2, [sp, #56]	; 0x38
 801cb7e:	930a      	str	r3, [sp, #40]	; 0x28
 801cb80:	f000 fed0 	bl	801d924 <_Bfree>
 801cb84:	9b07      	ldr	r3, [sp, #28]
 801cb86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb88:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cb8c:	ea43 0102 	orr.w	r1, r3, r2
 801cb90:	9b08      	ldr	r3, [sp, #32]
 801cb92:	430b      	orrs	r3, r1
 801cb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb96:	d10d      	bne.n	801cbb4 <_dtoa_r+0x9a4>
 801cb98:	2b39      	cmp	r3, #57	; 0x39
 801cb9a:	d029      	beq.n	801cbf0 <_dtoa_r+0x9e0>
 801cb9c:	f1ba 0f00 	cmp.w	sl, #0
 801cba0:	dd01      	ble.n	801cba6 <_dtoa_r+0x996>
 801cba2:	9b06      	ldr	r3, [sp, #24]
 801cba4:	3331      	adds	r3, #49	; 0x31
 801cba6:	9a02      	ldr	r2, [sp, #8]
 801cba8:	7013      	strb	r3, [r2, #0]
 801cbaa:	e774      	b.n	801ca96 <_dtoa_r+0x886>
 801cbac:	4638      	mov	r0, r7
 801cbae:	e7b8      	b.n	801cb22 <_dtoa_r+0x912>
 801cbb0:	2201      	movs	r2, #1
 801cbb2:	e7e1      	b.n	801cb78 <_dtoa_r+0x968>
 801cbb4:	f1ba 0f00 	cmp.w	sl, #0
 801cbb8:	db06      	blt.n	801cbc8 <_dtoa_r+0x9b8>
 801cbba:	9907      	ldr	r1, [sp, #28]
 801cbbc:	ea41 0a0a 	orr.w	sl, r1, sl
 801cbc0:	9908      	ldr	r1, [sp, #32]
 801cbc2:	ea5a 0101 	orrs.w	r1, sl, r1
 801cbc6:	d120      	bne.n	801cc0a <_dtoa_r+0x9fa>
 801cbc8:	2a00      	cmp	r2, #0
 801cbca:	ddec      	ble.n	801cba6 <_dtoa_r+0x996>
 801cbcc:	4629      	mov	r1, r5
 801cbce:	2201      	movs	r2, #1
 801cbd0:	4630      	mov	r0, r6
 801cbd2:	9305      	str	r3, [sp, #20]
 801cbd4:	f001 f8c2 	bl	801dd5c <__lshift>
 801cbd8:	4621      	mov	r1, r4
 801cbda:	4605      	mov	r5, r0
 801cbdc:	f001 f92a 	bl	801de34 <__mcmp>
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	9b05      	ldr	r3, [sp, #20]
 801cbe4:	dc02      	bgt.n	801cbec <_dtoa_r+0x9dc>
 801cbe6:	d1de      	bne.n	801cba6 <_dtoa_r+0x996>
 801cbe8:	07da      	lsls	r2, r3, #31
 801cbea:	d5dc      	bpl.n	801cba6 <_dtoa_r+0x996>
 801cbec:	2b39      	cmp	r3, #57	; 0x39
 801cbee:	d1d8      	bne.n	801cba2 <_dtoa_r+0x992>
 801cbf0:	9a02      	ldr	r2, [sp, #8]
 801cbf2:	2339      	movs	r3, #57	; 0x39
 801cbf4:	7013      	strb	r3, [r2, #0]
 801cbf6:	4643      	mov	r3, r8
 801cbf8:	4698      	mov	r8, r3
 801cbfa:	3b01      	subs	r3, #1
 801cbfc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801cc00:	2a39      	cmp	r2, #57	; 0x39
 801cc02:	d051      	beq.n	801cca8 <_dtoa_r+0xa98>
 801cc04:	3201      	adds	r2, #1
 801cc06:	701a      	strb	r2, [r3, #0]
 801cc08:	e745      	b.n	801ca96 <_dtoa_r+0x886>
 801cc0a:	2a00      	cmp	r2, #0
 801cc0c:	dd03      	ble.n	801cc16 <_dtoa_r+0xa06>
 801cc0e:	2b39      	cmp	r3, #57	; 0x39
 801cc10:	d0ee      	beq.n	801cbf0 <_dtoa_r+0x9e0>
 801cc12:	3301      	adds	r3, #1
 801cc14:	e7c7      	b.n	801cba6 <_dtoa_r+0x996>
 801cc16:	9a05      	ldr	r2, [sp, #20]
 801cc18:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cc1a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cc1e:	428a      	cmp	r2, r1
 801cc20:	d02b      	beq.n	801cc7a <_dtoa_r+0xa6a>
 801cc22:	4629      	mov	r1, r5
 801cc24:	2300      	movs	r3, #0
 801cc26:	220a      	movs	r2, #10
 801cc28:	4630      	mov	r0, r6
 801cc2a:	f000 fe9d 	bl	801d968 <__multadd>
 801cc2e:	45b9      	cmp	r9, r7
 801cc30:	4605      	mov	r5, r0
 801cc32:	f04f 0300 	mov.w	r3, #0
 801cc36:	f04f 020a 	mov.w	r2, #10
 801cc3a:	4649      	mov	r1, r9
 801cc3c:	4630      	mov	r0, r6
 801cc3e:	d107      	bne.n	801cc50 <_dtoa_r+0xa40>
 801cc40:	f000 fe92 	bl	801d968 <__multadd>
 801cc44:	4681      	mov	r9, r0
 801cc46:	4607      	mov	r7, r0
 801cc48:	9b05      	ldr	r3, [sp, #20]
 801cc4a:	3301      	adds	r3, #1
 801cc4c:	9305      	str	r3, [sp, #20]
 801cc4e:	e774      	b.n	801cb3a <_dtoa_r+0x92a>
 801cc50:	f000 fe8a 	bl	801d968 <__multadd>
 801cc54:	4639      	mov	r1, r7
 801cc56:	4681      	mov	r9, r0
 801cc58:	2300      	movs	r3, #0
 801cc5a:	220a      	movs	r2, #10
 801cc5c:	4630      	mov	r0, r6
 801cc5e:	f000 fe83 	bl	801d968 <__multadd>
 801cc62:	4607      	mov	r7, r0
 801cc64:	e7f0      	b.n	801cc48 <_dtoa_r+0xa38>
 801cc66:	f1ba 0f00 	cmp.w	sl, #0
 801cc6a:	9a00      	ldr	r2, [sp, #0]
 801cc6c:	bfcc      	ite	gt
 801cc6e:	46d0      	movgt	r8, sl
 801cc70:	f04f 0801 	movle.w	r8, #1
 801cc74:	4490      	add	r8, r2
 801cc76:	f04f 0900 	mov.w	r9, #0
 801cc7a:	4629      	mov	r1, r5
 801cc7c:	2201      	movs	r2, #1
 801cc7e:	4630      	mov	r0, r6
 801cc80:	9302      	str	r3, [sp, #8]
 801cc82:	f001 f86b 	bl	801dd5c <__lshift>
 801cc86:	4621      	mov	r1, r4
 801cc88:	4605      	mov	r5, r0
 801cc8a:	f001 f8d3 	bl	801de34 <__mcmp>
 801cc8e:	2800      	cmp	r0, #0
 801cc90:	dcb1      	bgt.n	801cbf6 <_dtoa_r+0x9e6>
 801cc92:	d102      	bne.n	801cc9a <_dtoa_r+0xa8a>
 801cc94:	9b02      	ldr	r3, [sp, #8]
 801cc96:	07db      	lsls	r3, r3, #31
 801cc98:	d4ad      	bmi.n	801cbf6 <_dtoa_r+0x9e6>
 801cc9a:	4643      	mov	r3, r8
 801cc9c:	4698      	mov	r8, r3
 801cc9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cca2:	2a30      	cmp	r2, #48	; 0x30
 801cca4:	d0fa      	beq.n	801cc9c <_dtoa_r+0xa8c>
 801cca6:	e6f6      	b.n	801ca96 <_dtoa_r+0x886>
 801cca8:	9a00      	ldr	r2, [sp, #0]
 801ccaa:	429a      	cmp	r2, r3
 801ccac:	d1a4      	bne.n	801cbf8 <_dtoa_r+0x9e8>
 801ccae:	f10b 0b01 	add.w	fp, fp, #1
 801ccb2:	2331      	movs	r3, #49	; 0x31
 801ccb4:	e778      	b.n	801cba8 <_dtoa_r+0x998>
 801ccb6:	4b15      	ldr	r3, [pc, #84]	; (801cd0c <_dtoa_r+0xafc>)
 801ccb8:	f7ff bb12 	b.w	801c2e0 <_dtoa_r+0xd0>
 801ccbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	f47f aaee 	bne.w	801c2a0 <_dtoa_r+0x90>
 801ccc4:	4b12      	ldr	r3, [pc, #72]	; (801cd10 <_dtoa_r+0xb00>)
 801ccc6:	f7ff bb0b 	b.w	801c2e0 <_dtoa_r+0xd0>
 801ccca:	f1ba 0f00 	cmp.w	sl, #0
 801ccce:	dc03      	bgt.n	801ccd8 <_dtoa_r+0xac8>
 801ccd0:	9b07      	ldr	r3, [sp, #28]
 801ccd2:	2b02      	cmp	r3, #2
 801ccd4:	f73f aec7 	bgt.w	801ca66 <_dtoa_r+0x856>
 801ccd8:	f8dd 8000 	ldr.w	r8, [sp]
 801ccdc:	4621      	mov	r1, r4
 801ccde:	4628      	mov	r0, r5
 801cce0:	f7ff fa0a 	bl	801c0f8 <quorem>
 801cce4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cce8:	f808 3b01 	strb.w	r3, [r8], #1
 801ccec:	9a00      	ldr	r2, [sp, #0]
 801ccee:	eba8 0202 	sub.w	r2, r8, r2
 801ccf2:	4592      	cmp	sl, r2
 801ccf4:	ddb7      	ble.n	801cc66 <_dtoa_r+0xa56>
 801ccf6:	4629      	mov	r1, r5
 801ccf8:	2300      	movs	r3, #0
 801ccfa:	220a      	movs	r2, #10
 801ccfc:	4630      	mov	r0, r6
 801ccfe:	f000 fe33 	bl	801d968 <__multadd>
 801cd02:	4605      	mov	r5, r0
 801cd04:	e7ea      	b.n	801ccdc <_dtoa_r+0xacc>
 801cd06:	bf00      	nop
 801cd08:	08021e10 	.word	0x08021e10
 801cd0c:	08021c78 	.word	0x08021c78
 801cd10:	08021da4 	.word	0x08021da4

0801cd14 <__errno>:
 801cd14:	4b01      	ldr	r3, [pc, #4]	; (801cd1c <__errno+0x8>)
 801cd16:	6818      	ldr	r0, [r3, #0]
 801cd18:	4770      	bx	lr
 801cd1a:	bf00      	nop
 801cd1c:	24000430 	.word	0x24000430

0801cd20 <__sflush_r>:
 801cd20:	898a      	ldrh	r2, [r1, #12]
 801cd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd26:	4605      	mov	r5, r0
 801cd28:	0710      	lsls	r0, r2, #28
 801cd2a:	460c      	mov	r4, r1
 801cd2c:	d458      	bmi.n	801cde0 <__sflush_r+0xc0>
 801cd2e:	684b      	ldr	r3, [r1, #4]
 801cd30:	2b00      	cmp	r3, #0
 801cd32:	dc05      	bgt.n	801cd40 <__sflush_r+0x20>
 801cd34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	dc02      	bgt.n	801cd40 <__sflush_r+0x20>
 801cd3a:	2000      	movs	r0, #0
 801cd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd42:	2e00      	cmp	r6, #0
 801cd44:	d0f9      	beq.n	801cd3a <__sflush_r+0x1a>
 801cd46:	2300      	movs	r3, #0
 801cd48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cd4c:	682f      	ldr	r7, [r5, #0]
 801cd4e:	602b      	str	r3, [r5, #0]
 801cd50:	d032      	beq.n	801cdb8 <__sflush_r+0x98>
 801cd52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cd54:	89a3      	ldrh	r3, [r4, #12]
 801cd56:	075a      	lsls	r2, r3, #29
 801cd58:	d505      	bpl.n	801cd66 <__sflush_r+0x46>
 801cd5a:	6863      	ldr	r3, [r4, #4]
 801cd5c:	1ac0      	subs	r0, r0, r3
 801cd5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cd60:	b10b      	cbz	r3, 801cd66 <__sflush_r+0x46>
 801cd62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cd64:	1ac0      	subs	r0, r0, r3
 801cd66:	2300      	movs	r3, #0
 801cd68:	4602      	mov	r2, r0
 801cd6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd6c:	6a21      	ldr	r1, [r4, #32]
 801cd6e:	4628      	mov	r0, r5
 801cd70:	47b0      	blx	r6
 801cd72:	1c43      	adds	r3, r0, #1
 801cd74:	89a3      	ldrh	r3, [r4, #12]
 801cd76:	d106      	bne.n	801cd86 <__sflush_r+0x66>
 801cd78:	6829      	ldr	r1, [r5, #0]
 801cd7a:	291d      	cmp	r1, #29
 801cd7c:	d82c      	bhi.n	801cdd8 <__sflush_r+0xb8>
 801cd7e:	4a2a      	ldr	r2, [pc, #168]	; (801ce28 <__sflush_r+0x108>)
 801cd80:	40ca      	lsrs	r2, r1
 801cd82:	07d6      	lsls	r6, r2, #31
 801cd84:	d528      	bpl.n	801cdd8 <__sflush_r+0xb8>
 801cd86:	2200      	movs	r2, #0
 801cd88:	6062      	str	r2, [r4, #4]
 801cd8a:	04d9      	lsls	r1, r3, #19
 801cd8c:	6922      	ldr	r2, [r4, #16]
 801cd8e:	6022      	str	r2, [r4, #0]
 801cd90:	d504      	bpl.n	801cd9c <__sflush_r+0x7c>
 801cd92:	1c42      	adds	r2, r0, #1
 801cd94:	d101      	bne.n	801cd9a <__sflush_r+0x7a>
 801cd96:	682b      	ldr	r3, [r5, #0]
 801cd98:	b903      	cbnz	r3, 801cd9c <__sflush_r+0x7c>
 801cd9a:	6560      	str	r0, [r4, #84]	; 0x54
 801cd9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cd9e:	602f      	str	r7, [r5, #0]
 801cda0:	2900      	cmp	r1, #0
 801cda2:	d0ca      	beq.n	801cd3a <__sflush_r+0x1a>
 801cda4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cda8:	4299      	cmp	r1, r3
 801cdaa:	d002      	beq.n	801cdb2 <__sflush_r+0x92>
 801cdac:	4628      	mov	r0, r5
 801cdae:	f7fd fab7 	bl	801a320 <_free_r>
 801cdb2:	2000      	movs	r0, #0
 801cdb4:	6360      	str	r0, [r4, #52]	; 0x34
 801cdb6:	e7c1      	b.n	801cd3c <__sflush_r+0x1c>
 801cdb8:	6a21      	ldr	r1, [r4, #32]
 801cdba:	2301      	movs	r3, #1
 801cdbc:	4628      	mov	r0, r5
 801cdbe:	47b0      	blx	r6
 801cdc0:	1c41      	adds	r1, r0, #1
 801cdc2:	d1c7      	bne.n	801cd54 <__sflush_r+0x34>
 801cdc4:	682b      	ldr	r3, [r5, #0]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d0c4      	beq.n	801cd54 <__sflush_r+0x34>
 801cdca:	2b1d      	cmp	r3, #29
 801cdcc:	d001      	beq.n	801cdd2 <__sflush_r+0xb2>
 801cdce:	2b16      	cmp	r3, #22
 801cdd0:	d101      	bne.n	801cdd6 <__sflush_r+0xb6>
 801cdd2:	602f      	str	r7, [r5, #0]
 801cdd4:	e7b1      	b.n	801cd3a <__sflush_r+0x1a>
 801cdd6:	89a3      	ldrh	r3, [r4, #12]
 801cdd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cddc:	81a3      	strh	r3, [r4, #12]
 801cdde:	e7ad      	b.n	801cd3c <__sflush_r+0x1c>
 801cde0:	690f      	ldr	r7, [r1, #16]
 801cde2:	2f00      	cmp	r7, #0
 801cde4:	d0a9      	beq.n	801cd3a <__sflush_r+0x1a>
 801cde6:	0793      	lsls	r3, r2, #30
 801cde8:	680e      	ldr	r6, [r1, #0]
 801cdea:	bf08      	it	eq
 801cdec:	694b      	ldreq	r3, [r1, #20]
 801cdee:	600f      	str	r7, [r1, #0]
 801cdf0:	bf18      	it	ne
 801cdf2:	2300      	movne	r3, #0
 801cdf4:	eba6 0807 	sub.w	r8, r6, r7
 801cdf8:	608b      	str	r3, [r1, #8]
 801cdfa:	f1b8 0f00 	cmp.w	r8, #0
 801cdfe:	dd9c      	ble.n	801cd3a <__sflush_r+0x1a>
 801ce00:	6a21      	ldr	r1, [r4, #32]
 801ce02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ce04:	4643      	mov	r3, r8
 801ce06:	463a      	mov	r2, r7
 801ce08:	4628      	mov	r0, r5
 801ce0a:	47b0      	blx	r6
 801ce0c:	2800      	cmp	r0, #0
 801ce0e:	dc06      	bgt.n	801ce1e <__sflush_r+0xfe>
 801ce10:	89a3      	ldrh	r3, [r4, #12]
 801ce12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce16:	81a3      	strh	r3, [r4, #12]
 801ce18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce1c:	e78e      	b.n	801cd3c <__sflush_r+0x1c>
 801ce1e:	4407      	add	r7, r0
 801ce20:	eba8 0800 	sub.w	r8, r8, r0
 801ce24:	e7e9      	b.n	801cdfa <__sflush_r+0xda>
 801ce26:	bf00      	nop
 801ce28:	20400001 	.word	0x20400001

0801ce2c <_fflush_r>:
 801ce2c:	b538      	push	{r3, r4, r5, lr}
 801ce2e:	690b      	ldr	r3, [r1, #16]
 801ce30:	4605      	mov	r5, r0
 801ce32:	460c      	mov	r4, r1
 801ce34:	b913      	cbnz	r3, 801ce3c <_fflush_r+0x10>
 801ce36:	2500      	movs	r5, #0
 801ce38:	4628      	mov	r0, r5
 801ce3a:	bd38      	pop	{r3, r4, r5, pc}
 801ce3c:	b118      	cbz	r0, 801ce46 <_fflush_r+0x1a>
 801ce3e:	6983      	ldr	r3, [r0, #24]
 801ce40:	b90b      	cbnz	r3, 801ce46 <_fflush_r+0x1a>
 801ce42:	f000 f887 	bl	801cf54 <__sinit>
 801ce46:	4b14      	ldr	r3, [pc, #80]	; (801ce98 <_fflush_r+0x6c>)
 801ce48:	429c      	cmp	r4, r3
 801ce4a:	d11b      	bne.n	801ce84 <_fflush_r+0x58>
 801ce4c:	686c      	ldr	r4, [r5, #4]
 801ce4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d0ef      	beq.n	801ce36 <_fflush_r+0xa>
 801ce56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ce58:	07d0      	lsls	r0, r2, #31
 801ce5a:	d404      	bmi.n	801ce66 <_fflush_r+0x3a>
 801ce5c:	0599      	lsls	r1, r3, #22
 801ce5e:	d402      	bmi.n	801ce66 <_fflush_r+0x3a>
 801ce60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce62:	f000 fc9a 	bl	801d79a <__retarget_lock_acquire_recursive>
 801ce66:	4628      	mov	r0, r5
 801ce68:	4621      	mov	r1, r4
 801ce6a:	f7ff ff59 	bl	801cd20 <__sflush_r>
 801ce6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ce70:	07da      	lsls	r2, r3, #31
 801ce72:	4605      	mov	r5, r0
 801ce74:	d4e0      	bmi.n	801ce38 <_fflush_r+0xc>
 801ce76:	89a3      	ldrh	r3, [r4, #12]
 801ce78:	059b      	lsls	r3, r3, #22
 801ce7a:	d4dd      	bmi.n	801ce38 <_fflush_r+0xc>
 801ce7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ce7e:	f000 fc8d 	bl	801d79c <__retarget_lock_release_recursive>
 801ce82:	e7d9      	b.n	801ce38 <_fflush_r+0xc>
 801ce84:	4b05      	ldr	r3, [pc, #20]	; (801ce9c <_fflush_r+0x70>)
 801ce86:	429c      	cmp	r4, r3
 801ce88:	d101      	bne.n	801ce8e <_fflush_r+0x62>
 801ce8a:	68ac      	ldr	r4, [r5, #8]
 801ce8c:	e7df      	b.n	801ce4e <_fflush_r+0x22>
 801ce8e:	4b04      	ldr	r3, [pc, #16]	; (801cea0 <_fflush_r+0x74>)
 801ce90:	429c      	cmp	r4, r3
 801ce92:	bf08      	it	eq
 801ce94:	68ec      	ldreq	r4, [r5, #12]
 801ce96:	e7da      	b.n	801ce4e <_fflush_r+0x22>
 801ce98:	08021e44 	.word	0x08021e44
 801ce9c:	08021e64 	.word	0x08021e64
 801cea0:	08021e24 	.word	0x08021e24

0801cea4 <std>:
 801cea4:	2300      	movs	r3, #0
 801cea6:	b510      	push	{r4, lr}
 801cea8:	4604      	mov	r4, r0
 801ceaa:	e9c0 3300 	strd	r3, r3, [r0]
 801ceae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ceb2:	6083      	str	r3, [r0, #8]
 801ceb4:	8181      	strh	r1, [r0, #12]
 801ceb6:	6643      	str	r3, [r0, #100]	; 0x64
 801ceb8:	81c2      	strh	r2, [r0, #14]
 801ceba:	6183      	str	r3, [r0, #24]
 801cebc:	4619      	mov	r1, r3
 801cebe:	2208      	movs	r2, #8
 801cec0:	305c      	adds	r0, #92	; 0x5c
 801cec2:	f7fd fa25 	bl	801a310 <memset>
 801cec6:	4b05      	ldr	r3, [pc, #20]	; (801cedc <std+0x38>)
 801cec8:	6263      	str	r3, [r4, #36]	; 0x24
 801ceca:	4b05      	ldr	r3, [pc, #20]	; (801cee0 <std+0x3c>)
 801cecc:	62a3      	str	r3, [r4, #40]	; 0x28
 801cece:	4b05      	ldr	r3, [pc, #20]	; (801cee4 <std+0x40>)
 801ced0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ced2:	4b05      	ldr	r3, [pc, #20]	; (801cee8 <std+0x44>)
 801ced4:	6224      	str	r4, [r4, #32]
 801ced6:	6323      	str	r3, [r4, #48]	; 0x30
 801ced8:	bd10      	pop	{r4, pc}
 801ceda:	bf00      	nop
 801cedc:	0801e7b9 	.word	0x0801e7b9
 801cee0:	0801e7db 	.word	0x0801e7db
 801cee4:	0801e813 	.word	0x0801e813
 801cee8:	0801e837 	.word	0x0801e837

0801ceec <_cleanup_r>:
 801ceec:	4901      	ldr	r1, [pc, #4]	; (801cef4 <_cleanup_r+0x8>)
 801ceee:	f000 b8c1 	b.w	801d074 <_fwalk_reent>
 801cef2:	bf00      	nop
 801cef4:	0801ce2d 	.word	0x0801ce2d

0801cef8 <__sfmoreglue>:
 801cef8:	b570      	push	{r4, r5, r6, lr}
 801cefa:	1e4a      	subs	r2, r1, #1
 801cefc:	2568      	movs	r5, #104	; 0x68
 801cefe:	4355      	muls	r5, r2
 801cf00:	460e      	mov	r6, r1
 801cf02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cf06:	f7fd fa5b 	bl	801a3c0 <_malloc_r>
 801cf0a:	4604      	mov	r4, r0
 801cf0c:	b140      	cbz	r0, 801cf20 <__sfmoreglue+0x28>
 801cf0e:	2100      	movs	r1, #0
 801cf10:	e9c0 1600 	strd	r1, r6, [r0]
 801cf14:	300c      	adds	r0, #12
 801cf16:	60a0      	str	r0, [r4, #8]
 801cf18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cf1c:	f7fd f9f8 	bl	801a310 <memset>
 801cf20:	4620      	mov	r0, r4
 801cf22:	bd70      	pop	{r4, r5, r6, pc}

0801cf24 <__sfp_lock_acquire>:
 801cf24:	4801      	ldr	r0, [pc, #4]	; (801cf2c <__sfp_lock_acquire+0x8>)
 801cf26:	f000 bc38 	b.w	801d79a <__retarget_lock_acquire_recursive>
 801cf2a:	bf00      	nop
 801cf2c:	24003e6c 	.word	0x24003e6c

0801cf30 <__sfp_lock_release>:
 801cf30:	4801      	ldr	r0, [pc, #4]	; (801cf38 <__sfp_lock_release+0x8>)
 801cf32:	f000 bc33 	b.w	801d79c <__retarget_lock_release_recursive>
 801cf36:	bf00      	nop
 801cf38:	24003e6c 	.word	0x24003e6c

0801cf3c <__sinit_lock_acquire>:
 801cf3c:	4801      	ldr	r0, [pc, #4]	; (801cf44 <__sinit_lock_acquire+0x8>)
 801cf3e:	f000 bc2c 	b.w	801d79a <__retarget_lock_acquire_recursive>
 801cf42:	bf00      	nop
 801cf44:	24003e67 	.word	0x24003e67

0801cf48 <__sinit_lock_release>:
 801cf48:	4801      	ldr	r0, [pc, #4]	; (801cf50 <__sinit_lock_release+0x8>)
 801cf4a:	f000 bc27 	b.w	801d79c <__retarget_lock_release_recursive>
 801cf4e:	bf00      	nop
 801cf50:	24003e67 	.word	0x24003e67

0801cf54 <__sinit>:
 801cf54:	b510      	push	{r4, lr}
 801cf56:	4604      	mov	r4, r0
 801cf58:	f7ff fff0 	bl	801cf3c <__sinit_lock_acquire>
 801cf5c:	69a3      	ldr	r3, [r4, #24]
 801cf5e:	b11b      	cbz	r3, 801cf68 <__sinit+0x14>
 801cf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf64:	f7ff bff0 	b.w	801cf48 <__sinit_lock_release>
 801cf68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cf6c:	6523      	str	r3, [r4, #80]	; 0x50
 801cf6e:	4b13      	ldr	r3, [pc, #76]	; (801cfbc <__sinit+0x68>)
 801cf70:	4a13      	ldr	r2, [pc, #76]	; (801cfc0 <__sinit+0x6c>)
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	62a2      	str	r2, [r4, #40]	; 0x28
 801cf76:	42a3      	cmp	r3, r4
 801cf78:	bf04      	itt	eq
 801cf7a:	2301      	moveq	r3, #1
 801cf7c:	61a3      	streq	r3, [r4, #24]
 801cf7e:	4620      	mov	r0, r4
 801cf80:	f000 f820 	bl	801cfc4 <__sfp>
 801cf84:	6060      	str	r0, [r4, #4]
 801cf86:	4620      	mov	r0, r4
 801cf88:	f000 f81c 	bl	801cfc4 <__sfp>
 801cf8c:	60a0      	str	r0, [r4, #8]
 801cf8e:	4620      	mov	r0, r4
 801cf90:	f000 f818 	bl	801cfc4 <__sfp>
 801cf94:	2200      	movs	r2, #0
 801cf96:	60e0      	str	r0, [r4, #12]
 801cf98:	2104      	movs	r1, #4
 801cf9a:	6860      	ldr	r0, [r4, #4]
 801cf9c:	f7ff ff82 	bl	801cea4 <std>
 801cfa0:	68a0      	ldr	r0, [r4, #8]
 801cfa2:	2201      	movs	r2, #1
 801cfa4:	2109      	movs	r1, #9
 801cfa6:	f7ff ff7d 	bl	801cea4 <std>
 801cfaa:	68e0      	ldr	r0, [r4, #12]
 801cfac:	2202      	movs	r2, #2
 801cfae:	2112      	movs	r1, #18
 801cfb0:	f7ff ff78 	bl	801cea4 <std>
 801cfb4:	2301      	movs	r3, #1
 801cfb6:	61a3      	str	r3, [r4, #24]
 801cfb8:	e7d2      	b.n	801cf60 <__sinit+0xc>
 801cfba:	bf00      	nop
 801cfbc:	08021c64 	.word	0x08021c64
 801cfc0:	0801ceed 	.word	0x0801ceed

0801cfc4 <__sfp>:
 801cfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfc6:	4607      	mov	r7, r0
 801cfc8:	f7ff ffac 	bl	801cf24 <__sfp_lock_acquire>
 801cfcc:	4b1e      	ldr	r3, [pc, #120]	; (801d048 <__sfp+0x84>)
 801cfce:	681e      	ldr	r6, [r3, #0]
 801cfd0:	69b3      	ldr	r3, [r6, #24]
 801cfd2:	b913      	cbnz	r3, 801cfda <__sfp+0x16>
 801cfd4:	4630      	mov	r0, r6
 801cfd6:	f7ff ffbd 	bl	801cf54 <__sinit>
 801cfda:	3648      	adds	r6, #72	; 0x48
 801cfdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cfe0:	3b01      	subs	r3, #1
 801cfe2:	d503      	bpl.n	801cfec <__sfp+0x28>
 801cfe4:	6833      	ldr	r3, [r6, #0]
 801cfe6:	b30b      	cbz	r3, 801d02c <__sfp+0x68>
 801cfe8:	6836      	ldr	r6, [r6, #0]
 801cfea:	e7f7      	b.n	801cfdc <__sfp+0x18>
 801cfec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cff0:	b9d5      	cbnz	r5, 801d028 <__sfp+0x64>
 801cff2:	4b16      	ldr	r3, [pc, #88]	; (801d04c <__sfp+0x88>)
 801cff4:	60e3      	str	r3, [r4, #12]
 801cff6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cffa:	6665      	str	r5, [r4, #100]	; 0x64
 801cffc:	f000 fbcc 	bl	801d798 <__retarget_lock_init_recursive>
 801d000:	f7ff ff96 	bl	801cf30 <__sfp_lock_release>
 801d004:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d008:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d00c:	6025      	str	r5, [r4, #0]
 801d00e:	61a5      	str	r5, [r4, #24]
 801d010:	2208      	movs	r2, #8
 801d012:	4629      	mov	r1, r5
 801d014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d018:	f7fd f97a 	bl	801a310 <memset>
 801d01c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d024:	4620      	mov	r0, r4
 801d026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d028:	3468      	adds	r4, #104	; 0x68
 801d02a:	e7d9      	b.n	801cfe0 <__sfp+0x1c>
 801d02c:	2104      	movs	r1, #4
 801d02e:	4638      	mov	r0, r7
 801d030:	f7ff ff62 	bl	801cef8 <__sfmoreglue>
 801d034:	4604      	mov	r4, r0
 801d036:	6030      	str	r0, [r6, #0]
 801d038:	2800      	cmp	r0, #0
 801d03a:	d1d5      	bne.n	801cfe8 <__sfp+0x24>
 801d03c:	f7ff ff78 	bl	801cf30 <__sfp_lock_release>
 801d040:	230c      	movs	r3, #12
 801d042:	603b      	str	r3, [r7, #0]
 801d044:	e7ee      	b.n	801d024 <__sfp+0x60>
 801d046:	bf00      	nop
 801d048:	08021c64 	.word	0x08021c64
 801d04c:	ffff0001 	.word	0xffff0001

0801d050 <fiprintf>:
 801d050:	b40e      	push	{r1, r2, r3}
 801d052:	b503      	push	{r0, r1, lr}
 801d054:	4601      	mov	r1, r0
 801d056:	ab03      	add	r3, sp, #12
 801d058:	4805      	ldr	r0, [pc, #20]	; (801d070 <fiprintf+0x20>)
 801d05a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d05e:	6800      	ldr	r0, [r0, #0]
 801d060:	9301      	str	r3, [sp, #4]
 801d062:	f001 fa6f 	bl	801e544 <_vfiprintf_r>
 801d066:	b002      	add	sp, #8
 801d068:	f85d eb04 	ldr.w	lr, [sp], #4
 801d06c:	b003      	add	sp, #12
 801d06e:	4770      	bx	lr
 801d070:	24000430 	.word	0x24000430

0801d074 <_fwalk_reent>:
 801d074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d078:	4606      	mov	r6, r0
 801d07a:	4688      	mov	r8, r1
 801d07c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d080:	2700      	movs	r7, #0
 801d082:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d086:	f1b9 0901 	subs.w	r9, r9, #1
 801d08a:	d505      	bpl.n	801d098 <_fwalk_reent+0x24>
 801d08c:	6824      	ldr	r4, [r4, #0]
 801d08e:	2c00      	cmp	r4, #0
 801d090:	d1f7      	bne.n	801d082 <_fwalk_reent+0xe>
 801d092:	4638      	mov	r0, r7
 801d094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d098:	89ab      	ldrh	r3, [r5, #12]
 801d09a:	2b01      	cmp	r3, #1
 801d09c:	d907      	bls.n	801d0ae <_fwalk_reent+0x3a>
 801d09e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d0a2:	3301      	adds	r3, #1
 801d0a4:	d003      	beq.n	801d0ae <_fwalk_reent+0x3a>
 801d0a6:	4629      	mov	r1, r5
 801d0a8:	4630      	mov	r0, r6
 801d0aa:	47c0      	blx	r8
 801d0ac:	4307      	orrs	r7, r0
 801d0ae:	3568      	adds	r5, #104	; 0x68
 801d0b0:	e7e9      	b.n	801d086 <_fwalk_reent+0x12>

0801d0b2 <rshift>:
 801d0b2:	6903      	ldr	r3, [r0, #16]
 801d0b4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d0b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0bc:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d0c0:	f100 0414 	add.w	r4, r0, #20
 801d0c4:	dd45      	ble.n	801d152 <rshift+0xa0>
 801d0c6:	f011 011f 	ands.w	r1, r1, #31
 801d0ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d0ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d0d2:	d10c      	bne.n	801d0ee <rshift+0x3c>
 801d0d4:	f100 0710 	add.w	r7, r0, #16
 801d0d8:	4629      	mov	r1, r5
 801d0da:	42b1      	cmp	r1, r6
 801d0dc:	d334      	bcc.n	801d148 <rshift+0x96>
 801d0de:	1a9b      	subs	r3, r3, r2
 801d0e0:	009b      	lsls	r3, r3, #2
 801d0e2:	1eea      	subs	r2, r5, #3
 801d0e4:	4296      	cmp	r6, r2
 801d0e6:	bf38      	it	cc
 801d0e8:	2300      	movcc	r3, #0
 801d0ea:	4423      	add	r3, r4
 801d0ec:	e015      	b.n	801d11a <rshift+0x68>
 801d0ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d0f2:	f1c1 0820 	rsb	r8, r1, #32
 801d0f6:	40cf      	lsrs	r7, r1
 801d0f8:	f105 0e04 	add.w	lr, r5, #4
 801d0fc:	46a1      	mov	r9, r4
 801d0fe:	4576      	cmp	r6, lr
 801d100:	46f4      	mov	ip, lr
 801d102:	d815      	bhi.n	801d130 <rshift+0x7e>
 801d104:	1a9b      	subs	r3, r3, r2
 801d106:	009a      	lsls	r2, r3, #2
 801d108:	3a04      	subs	r2, #4
 801d10a:	3501      	adds	r5, #1
 801d10c:	42ae      	cmp	r6, r5
 801d10e:	bf38      	it	cc
 801d110:	2200      	movcc	r2, #0
 801d112:	18a3      	adds	r3, r4, r2
 801d114:	50a7      	str	r7, [r4, r2]
 801d116:	b107      	cbz	r7, 801d11a <rshift+0x68>
 801d118:	3304      	adds	r3, #4
 801d11a:	1b1a      	subs	r2, r3, r4
 801d11c:	42a3      	cmp	r3, r4
 801d11e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d122:	bf08      	it	eq
 801d124:	2300      	moveq	r3, #0
 801d126:	6102      	str	r2, [r0, #16]
 801d128:	bf08      	it	eq
 801d12a:	6143      	streq	r3, [r0, #20]
 801d12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d130:	f8dc c000 	ldr.w	ip, [ip]
 801d134:	fa0c fc08 	lsl.w	ip, ip, r8
 801d138:	ea4c 0707 	orr.w	r7, ip, r7
 801d13c:	f849 7b04 	str.w	r7, [r9], #4
 801d140:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d144:	40cf      	lsrs	r7, r1
 801d146:	e7da      	b.n	801d0fe <rshift+0x4c>
 801d148:	f851 cb04 	ldr.w	ip, [r1], #4
 801d14c:	f847 cf04 	str.w	ip, [r7, #4]!
 801d150:	e7c3      	b.n	801d0da <rshift+0x28>
 801d152:	4623      	mov	r3, r4
 801d154:	e7e1      	b.n	801d11a <rshift+0x68>

0801d156 <__hexdig_fun>:
 801d156:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d15a:	2b09      	cmp	r3, #9
 801d15c:	d802      	bhi.n	801d164 <__hexdig_fun+0xe>
 801d15e:	3820      	subs	r0, #32
 801d160:	b2c0      	uxtb	r0, r0
 801d162:	4770      	bx	lr
 801d164:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d168:	2b05      	cmp	r3, #5
 801d16a:	d801      	bhi.n	801d170 <__hexdig_fun+0x1a>
 801d16c:	3847      	subs	r0, #71	; 0x47
 801d16e:	e7f7      	b.n	801d160 <__hexdig_fun+0xa>
 801d170:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d174:	2b05      	cmp	r3, #5
 801d176:	d801      	bhi.n	801d17c <__hexdig_fun+0x26>
 801d178:	3827      	subs	r0, #39	; 0x27
 801d17a:	e7f1      	b.n	801d160 <__hexdig_fun+0xa>
 801d17c:	2000      	movs	r0, #0
 801d17e:	4770      	bx	lr

0801d180 <__gethex>:
 801d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d184:	ed2d 8b02 	vpush	{d8}
 801d188:	b089      	sub	sp, #36	; 0x24
 801d18a:	ee08 0a10 	vmov	s16, r0
 801d18e:	9304      	str	r3, [sp, #16]
 801d190:	4bbc      	ldr	r3, [pc, #752]	; (801d484 <__gethex+0x304>)
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	9301      	str	r3, [sp, #4]
 801d196:	4618      	mov	r0, r3
 801d198:	468b      	mov	fp, r1
 801d19a:	4690      	mov	r8, r2
 801d19c:	f7e3 f8a0 	bl	80002e0 <strlen>
 801d1a0:	9b01      	ldr	r3, [sp, #4]
 801d1a2:	f8db 2000 	ldr.w	r2, [fp]
 801d1a6:	4403      	add	r3, r0
 801d1a8:	4682      	mov	sl, r0
 801d1aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d1ae:	9305      	str	r3, [sp, #20]
 801d1b0:	1c93      	adds	r3, r2, #2
 801d1b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d1b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d1ba:	32fe      	adds	r2, #254	; 0xfe
 801d1bc:	18d1      	adds	r1, r2, r3
 801d1be:	461f      	mov	r7, r3
 801d1c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d1c4:	9100      	str	r1, [sp, #0]
 801d1c6:	2830      	cmp	r0, #48	; 0x30
 801d1c8:	d0f8      	beq.n	801d1bc <__gethex+0x3c>
 801d1ca:	f7ff ffc4 	bl	801d156 <__hexdig_fun>
 801d1ce:	4604      	mov	r4, r0
 801d1d0:	2800      	cmp	r0, #0
 801d1d2:	d13a      	bne.n	801d24a <__gethex+0xca>
 801d1d4:	9901      	ldr	r1, [sp, #4]
 801d1d6:	4652      	mov	r2, sl
 801d1d8:	4638      	mov	r0, r7
 801d1da:	f7fe f821 	bl	801b220 <strncmp>
 801d1de:	4605      	mov	r5, r0
 801d1e0:	2800      	cmp	r0, #0
 801d1e2:	d168      	bne.n	801d2b6 <__gethex+0x136>
 801d1e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d1e8:	eb07 060a 	add.w	r6, r7, sl
 801d1ec:	f7ff ffb3 	bl	801d156 <__hexdig_fun>
 801d1f0:	2800      	cmp	r0, #0
 801d1f2:	d062      	beq.n	801d2ba <__gethex+0x13a>
 801d1f4:	4633      	mov	r3, r6
 801d1f6:	7818      	ldrb	r0, [r3, #0]
 801d1f8:	2830      	cmp	r0, #48	; 0x30
 801d1fa:	461f      	mov	r7, r3
 801d1fc:	f103 0301 	add.w	r3, r3, #1
 801d200:	d0f9      	beq.n	801d1f6 <__gethex+0x76>
 801d202:	f7ff ffa8 	bl	801d156 <__hexdig_fun>
 801d206:	2301      	movs	r3, #1
 801d208:	fab0 f480 	clz	r4, r0
 801d20c:	0964      	lsrs	r4, r4, #5
 801d20e:	4635      	mov	r5, r6
 801d210:	9300      	str	r3, [sp, #0]
 801d212:	463a      	mov	r2, r7
 801d214:	4616      	mov	r6, r2
 801d216:	3201      	adds	r2, #1
 801d218:	7830      	ldrb	r0, [r6, #0]
 801d21a:	f7ff ff9c 	bl	801d156 <__hexdig_fun>
 801d21e:	2800      	cmp	r0, #0
 801d220:	d1f8      	bne.n	801d214 <__gethex+0x94>
 801d222:	9901      	ldr	r1, [sp, #4]
 801d224:	4652      	mov	r2, sl
 801d226:	4630      	mov	r0, r6
 801d228:	f7fd fffa 	bl	801b220 <strncmp>
 801d22c:	b980      	cbnz	r0, 801d250 <__gethex+0xd0>
 801d22e:	b94d      	cbnz	r5, 801d244 <__gethex+0xc4>
 801d230:	eb06 050a 	add.w	r5, r6, sl
 801d234:	462a      	mov	r2, r5
 801d236:	4616      	mov	r6, r2
 801d238:	3201      	adds	r2, #1
 801d23a:	7830      	ldrb	r0, [r6, #0]
 801d23c:	f7ff ff8b 	bl	801d156 <__hexdig_fun>
 801d240:	2800      	cmp	r0, #0
 801d242:	d1f8      	bne.n	801d236 <__gethex+0xb6>
 801d244:	1bad      	subs	r5, r5, r6
 801d246:	00ad      	lsls	r5, r5, #2
 801d248:	e004      	b.n	801d254 <__gethex+0xd4>
 801d24a:	2400      	movs	r4, #0
 801d24c:	4625      	mov	r5, r4
 801d24e:	e7e0      	b.n	801d212 <__gethex+0x92>
 801d250:	2d00      	cmp	r5, #0
 801d252:	d1f7      	bne.n	801d244 <__gethex+0xc4>
 801d254:	7833      	ldrb	r3, [r6, #0]
 801d256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d25a:	2b50      	cmp	r3, #80	; 0x50
 801d25c:	d13b      	bne.n	801d2d6 <__gethex+0x156>
 801d25e:	7873      	ldrb	r3, [r6, #1]
 801d260:	2b2b      	cmp	r3, #43	; 0x2b
 801d262:	d02c      	beq.n	801d2be <__gethex+0x13e>
 801d264:	2b2d      	cmp	r3, #45	; 0x2d
 801d266:	d02e      	beq.n	801d2c6 <__gethex+0x146>
 801d268:	1c71      	adds	r1, r6, #1
 801d26a:	f04f 0900 	mov.w	r9, #0
 801d26e:	7808      	ldrb	r0, [r1, #0]
 801d270:	f7ff ff71 	bl	801d156 <__hexdig_fun>
 801d274:	1e43      	subs	r3, r0, #1
 801d276:	b2db      	uxtb	r3, r3
 801d278:	2b18      	cmp	r3, #24
 801d27a:	d82c      	bhi.n	801d2d6 <__gethex+0x156>
 801d27c:	f1a0 0210 	sub.w	r2, r0, #16
 801d280:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d284:	f7ff ff67 	bl	801d156 <__hexdig_fun>
 801d288:	1e43      	subs	r3, r0, #1
 801d28a:	b2db      	uxtb	r3, r3
 801d28c:	2b18      	cmp	r3, #24
 801d28e:	d91d      	bls.n	801d2cc <__gethex+0x14c>
 801d290:	f1b9 0f00 	cmp.w	r9, #0
 801d294:	d000      	beq.n	801d298 <__gethex+0x118>
 801d296:	4252      	negs	r2, r2
 801d298:	4415      	add	r5, r2
 801d29a:	f8cb 1000 	str.w	r1, [fp]
 801d29e:	b1e4      	cbz	r4, 801d2da <__gethex+0x15a>
 801d2a0:	9b00      	ldr	r3, [sp, #0]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	bf14      	ite	ne
 801d2a6:	2700      	movne	r7, #0
 801d2a8:	2706      	moveq	r7, #6
 801d2aa:	4638      	mov	r0, r7
 801d2ac:	b009      	add	sp, #36	; 0x24
 801d2ae:	ecbd 8b02 	vpop	{d8}
 801d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2b6:	463e      	mov	r6, r7
 801d2b8:	4625      	mov	r5, r4
 801d2ba:	2401      	movs	r4, #1
 801d2bc:	e7ca      	b.n	801d254 <__gethex+0xd4>
 801d2be:	f04f 0900 	mov.w	r9, #0
 801d2c2:	1cb1      	adds	r1, r6, #2
 801d2c4:	e7d3      	b.n	801d26e <__gethex+0xee>
 801d2c6:	f04f 0901 	mov.w	r9, #1
 801d2ca:	e7fa      	b.n	801d2c2 <__gethex+0x142>
 801d2cc:	230a      	movs	r3, #10
 801d2ce:	fb03 0202 	mla	r2, r3, r2, r0
 801d2d2:	3a10      	subs	r2, #16
 801d2d4:	e7d4      	b.n	801d280 <__gethex+0x100>
 801d2d6:	4631      	mov	r1, r6
 801d2d8:	e7df      	b.n	801d29a <__gethex+0x11a>
 801d2da:	1bf3      	subs	r3, r6, r7
 801d2dc:	3b01      	subs	r3, #1
 801d2de:	4621      	mov	r1, r4
 801d2e0:	2b07      	cmp	r3, #7
 801d2e2:	dc0b      	bgt.n	801d2fc <__gethex+0x17c>
 801d2e4:	ee18 0a10 	vmov	r0, s16
 801d2e8:	f000 fadc 	bl	801d8a4 <_Balloc>
 801d2ec:	4604      	mov	r4, r0
 801d2ee:	b940      	cbnz	r0, 801d302 <__gethex+0x182>
 801d2f0:	4b65      	ldr	r3, [pc, #404]	; (801d488 <__gethex+0x308>)
 801d2f2:	4602      	mov	r2, r0
 801d2f4:	21de      	movs	r1, #222	; 0xde
 801d2f6:	4865      	ldr	r0, [pc, #404]	; (801d48c <__gethex+0x30c>)
 801d2f8:	f7fe fee0 	bl	801c0bc <__assert_func>
 801d2fc:	3101      	adds	r1, #1
 801d2fe:	105b      	asrs	r3, r3, #1
 801d300:	e7ee      	b.n	801d2e0 <__gethex+0x160>
 801d302:	f100 0914 	add.w	r9, r0, #20
 801d306:	f04f 0b00 	mov.w	fp, #0
 801d30a:	f1ca 0301 	rsb	r3, sl, #1
 801d30e:	f8cd 9008 	str.w	r9, [sp, #8]
 801d312:	f8cd b000 	str.w	fp, [sp]
 801d316:	9306      	str	r3, [sp, #24]
 801d318:	42b7      	cmp	r7, r6
 801d31a:	d340      	bcc.n	801d39e <__gethex+0x21e>
 801d31c:	9802      	ldr	r0, [sp, #8]
 801d31e:	9b00      	ldr	r3, [sp, #0]
 801d320:	f840 3b04 	str.w	r3, [r0], #4
 801d324:	eba0 0009 	sub.w	r0, r0, r9
 801d328:	1080      	asrs	r0, r0, #2
 801d32a:	0146      	lsls	r6, r0, #5
 801d32c:	6120      	str	r0, [r4, #16]
 801d32e:	4618      	mov	r0, r3
 801d330:	f000 fbae 	bl	801da90 <__hi0bits>
 801d334:	1a30      	subs	r0, r6, r0
 801d336:	f8d8 6000 	ldr.w	r6, [r8]
 801d33a:	42b0      	cmp	r0, r6
 801d33c:	dd63      	ble.n	801d406 <__gethex+0x286>
 801d33e:	1b87      	subs	r7, r0, r6
 801d340:	4639      	mov	r1, r7
 801d342:	4620      	mov	r0, r4
 801d344:	f000 ff49 	bl	801e1da <__any_on>
 801d348:	4682      	mov	sl, r0
 801d34a:	b1a8      	cbz	r0, 801d378 <__gethex+0x1f8>
 801d34c:	1e7b      	subs	r3, r7, #1
 801d34e:	1159      	asrs	r1, r3, #5
 801d350:	f003 021f 	and.w	r2, r3, #31
 801d354:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d358:	f04f 0a01 	mov.w	sl, #1
 801d35c:	fa0a f202 	lsl.w	r2, sl, r2
 801d360:	420a      	tst	r2, r1
 801d362:	d009      	beq.n	801d378 <__gethex+0x1f8>
 801d364:	4553      	cmp	r3, sl
 801d366:	dd05      	ble.n	801d374 <__gethex+0x1f4>
 801d368:	1eb9      	subs	r1, r7, #2
 801d36a:	4620      	mov	r0, r4
 801d36c:	f000 ff35 	bl	801e1da <__any_on>
 801d370:	2800      	cmp	r0, #0
 801d372:	d145      	bne.n	801d400 <__gethex+0x280>
 801d374:	f04f 0a02 	mov.w	sl, #2
 801d378:	4639      	mov	r1, r7
 801d37a:	4620      	mov	r0, r4
 801d37c:	f7ff fe99 	bl	801d0b2 <rshift>
 801d380:	443d      	add	r5, r7
 801d382:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d386:	42ab      	cmp	r3, r5
 801d388:	da4c      	bge.n	801d424 <__gethex+0x2a4>
 801d38a:	ee18 0a10 	vmov	r0, s16
 801d38e:	4621      	mov	r1, r4
 801d390:	f000 fac8 	bl	801d924 <_Bfree>
 801d394:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d396:	2300      	movs	r3, #0
 801d398:	6013      	str	r3, [r2, #0]
 801d39a:	27a3      	movs	r7, #163	; 0xa3
 801d39c:	e785      	b.n	801d2aa <__gethex+0x12a>
 801d39e:	1e73      	subs	r3, r6, #1
 801d3a0:	9a05      	ldr	r2, [sp, #20]
 801d3a2:	9303      	str	r3, [sp, #12]
 801d3a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d3a8:	4293      	cmp	r3, r2
 801d3aa:	d019      	beq.n	801d3e0 <__gethex+0x260>
 801d3ac:	f1bb 0f20 	cmp.w	fp, #32
 801d3b0:	d107      	bne.n	801d3c2 <__gethex+0x242>
 801d3b2:	9b02      	ldr	r3, [sp, #8]
 801d3b4:	9a00      	ldr	r2, [sp, #0]
 801d3b6:	f843 2b04 	str.w	r2, [r3], #4
 801d3ba:	9302      	str	r3, [sp, #8]
 801d3bc:	2300      	movs	r3, #0
 801d3be:	9300      	str	r3, [sp, #0]
 801d3c0:	469b      	mov	fp, r3
 801d3c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d3c6:	f7ff fec6 	bl	801d156 <__hexdig_fun>
 801d3ca:	9b00      	ldr	r3, [sp, #0]
 801d3cc:	f000 000f 	and.w	r0, r0, #15
 801d3d0:	fa00 f00b 	lsl.w	r0, r0, fp
 801d3d4:	4303      	orrs	r3, r0
 801d3d6:	9300      	str	r3, [sp, #0]
 801d3d8:	f10b 0b04 	add.w	fp, fp, #4
 801d3dc:	9b03      	ldr	r3, [sp, #12]
 801d3de:	e00d      	b.n	801d3fc <__gethex+0x27c>
 801d3e0:	9b03      	ldr	r3, [sp, #12]
 801d3e2:	9a06      	ldr	r2, [sp, #24]
 801d3e4:	4413      	add	r3, r2
 801d3e6:	42bb      	cmp	r3, r7
 801d3e8:	d3e0      	bcc.n	801d3ac <__gethex+0x22c>
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	9901      	ldr	r1, [sp, #4]
 801d3ee:	9307      	str	r3, [sp, #28]
 801d3f0:	4652      	mov	r2, sl
 801d3f2:	f7fd ff15 	bl	801b220 <strncmp>
 801d3f6:	9b07      	ldr	r3, [sp, #28]
 801d3f8:	2800      	cmp	r0, #0
 801d3fa:	d1d7      	bne.n	801d3ac <__gethex+0x22c>
 801d3fc:	461e      	mov	r6, r3
 801d3fe:	e78b      	b.n	801d318 <__gethex+0x198>
 801d400:	f04f 0a03 	mov.w	sl, #3
 801d404:	e7b8      	b.n	801d378 <__gethex+0x1f8>
 801d406:	da0a      	bge.n	801d41e <__gethex+0x29e>
 801d408:	1a37      	subs	r7, r6, r0
 801d40a:	4621      	mov	r1, r4
 801d40c:	ee18 0a10 	vmov	r0, s16
 801d410:	463a      	mov	r2, r7
 801d412:	f000 fca3 	bl	801dd5c <__lshift>
 801d416:	1bed      	subs	r5, r5, r7
 801d418:	4604      	mov	r4, r0
 801d41a:	f100 0914 	add.w	r9, r0, #20
 801d41e:	f04f 0a00 	mov.w	sl, #0
 801d422:	e7ae      	b.n	801d382 <__gethex+0x202>
 801d424:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d428:	42a8      	cmp	r0, r5
 801d42a:	dd72      	ble.n	801d512 <__gethex+0x392>
 801d42c:	1b45      	subs	r5, r0, r5
 801d42e:	42ae      	cmp	r6, r5
 801d430:	dc36      	bgt.n	801d4a0 <__gethex+0x320>
 801d432:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d436:	2b02      	cmp	r3, #2
 801d438:	d02a      	beq.n	801d490 <__gethex+0x310>
 801d43a:	2b03      	cmp	r3, #3
 801d43c:	d02c      	beq.n	801d498 <__gethex+0x318>
 801d43e:	2b01      	cmp	r3, #1
 801d440:	d115      	bne.n	801d46e <__gethex+0x2ee>
 801d442:	42ae      	cmp	r6, r5
 801d444:	d113      	bne.n	801d46e <__gethex+0x2ee>
 801d446:	2e01      	cmp	r6, #1
 801d448:	d10b      	bne.n	801d462 <__gethex+0x2e2>
 801d44a:	9a04      	ldr	r2, [sp, #16]
 801d44c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d450:	6013      	str	r3, [r2, #0]
 801d452:	2301      	movs	r3, #1
 801d454:	6123      	str	r3, [r4, #16]
 801d456:	f8c9 3000 	str.w	r3, [r9]
 801d45a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d45c:	2762      	movs	r7, #98	; 0x62
 801d45e:	601c      	str	r4, [r3, #0]
 801d460:	e723      	b.n	801d2aa <__gethex+0x12a>
 801d462:	1e71      	subs	r1, r6, #1
 801d464:	4620      	mov	r0, r4
 801d466:	f000 feb8 	bl	801e1da <__any_on>
 801d46a:	2800      	cmp	r0, #0
 801d46c:	d1ed      	bne.n	801d44a <__gethex+0x2ca>
 801d46e:	ee18 0a10 	vmov	r0, s16
 801d472:	4621      	mov	r1, r4
 801d474:	f000 fa56 	bl	801d924 <_Bfree>
 801d478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d47a:	2300      	movs	r3, #0
 801d47c:	6013      	str	r3, [r2, #0]
 801d47e:	2750      	movs	r7, #80	; 0x50
 801d480:	e713      	b.n	801d2aa <__gethex+0x12a>
 801d482:	bf00      	nop
 801d484:	08021ef0 	.word	0x08021ef0
 801d488:	08021e10 	.word	0x08021e10
 801d48c:	08021e84 	.word	0x08021e84
 801d490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d492:	2b00      	cmp	r3, #0
 801d494:	d1eb      	bne.n	801d46e <__gethex+0x2ee>
 801d496:	e7d8      	b.n	801d44a <__gethex+0x2ca>
 801d498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	d1d5      	bne.n	801d44a <__gethex+0x2ca>
 801d49e:	e7e6      	b.n	801d46e <__gethex+0x2ee>
 801d4a0:	1e6f      	subs	r7, r5, #1
 801d4a2:	f1ba 0f00 	cmp.w	sl, #0
 801d4a6:	d131      	bne.n	801d50c <__gethex+0x38c>
 801d4a8:	b127      	cbz	r7, 801d4b4 <__gethex+0x334>
 801d4aa:	4639      	mov	r1, r7
 801d4ac:	4620      	mov	r0, r4
 801d4ae:	f000 fe94 	bl	801e1da <__any_on>
 801d4b2:	4682      	mov	sl, r0
 801d4b4:	117b      	asrs	r3, r7, #5
 801d4b6:	2101      	movs	r1, #1
 801d4b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d4bc:	f007 071f 	and.w	r7, r7, #31
 801d4c0:	fa01 f707 	lsl.w	r7, r1, r7
 801d4c4:	421f      	tst	r7, r3
 801d4c6:	4629      	mov	r1, r5
 801d4c8:	4620      	mov	r0, r4
 801d4ca:	bf18      	it	ne
 801d4cc:	f04a 0a02 	orrne.w	sl, sl, #2
 801d4d0:	1b76      	subs	r6, r6, r5
 801d4d2:	f7ff fdee 	bl	801d0b2 <rshift>
 801d4d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d4da:	2702      	movs	r7, #2
 801d4dc:	f1ba 0f00 	cmp.w	sl, #0
 801d4e0:	d048      	beq.n	801d574 <__gethex+0x3f4>
 801d4e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d4e6:	2b02      	cmp	r3, #2
 801d4e8:	d015      	beq.n	801d516 <__gethex+0x396>
 801d4ea:	2b03      	cmp	r3, #3
 801d4ec:	d017      	beq.n	801d51e <__gethex+0x39e>
 801d4ee:	2b01      	cmp	r3, #1
 801d4f0:	d109      	bne.n	801d506 <__gethex+0x386>
 801d4f2:	f01a 0f02 	tst.w	sl, #2
 801d4f6:	d006      	beq.n	801d506 <__gethex+0x386>
 801d4f8:	f8d9 0000 	ldr.w	r0, [r9]
 801d4fc:	ea4a 0a00 	orr.w	sl, sl, r0
 801d500:	f01a 0f01 	tst.w	sl, #1
 801d504:	d10e      	bne.n	801d524 <__gethex+0x3a4>
 801d506:	f047 0710 	orr.w	r7, r7, #16
 801d50a:	e033      	b.n	801d574 <__gethex+0x3f4>
 801d50c:	f04f 0a01 	mov.w	sl, #1
 801d510:	e7d0      	b.n	801d4b4 <__gethex+0x334>
 801d512:	2701      	movs	r7, #1
 801d514:	e7e2      	b.n	801d4dc <__gethex+0x35c>
 801d516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d518:	f1c3 0301 	rsb	r3, r3, #1
 801d51c:	9315      	str	r3, [sp, #84]	; 0x54
 801d51e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d520:	2b00      	cmp	r3, #0
 801d522:	d0f0      	beq.n	801d506 <__gethex+0x386>
 801d524:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d528:	f104 0314 	add.w	r3, r4, #20
 801d52c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d530:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d534:	f04f 0c00 	mov.w	ip, #0
 801d538:	4618      	mov	r0, r3
 801d53a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d53e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801d542:	d01c      	beq.n	801d57e <__gethex+0x3fe>
 801d544:	3201      	adds	r2, #1
 801d546:	6002      	str	r2, [r0, #0]
 801d548:	2f02      	cmp	r7, #2
 801d54a:	f104 0314 	add.w	r3, r4, #20
 801d54e:	d13f      	bne.n	801d5d0 <__gethex+0x450>
 801d550:	f8d8 2000 	ldr.w	r2, [r8]
 801d554:	3a01      	subs	r2, #1
 801d556:	42b2      	cmp	r2, r6
 801d558:	d10a      	bne.n	801d570 <__gethex+0x3f0>
 801d55a:	1171      	asrs	r1, r6, #5
 801d55c:	2201      	movs	r2, #1
 801d55e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d562:	f006 061f 	and.w	r6, r6, #31
 801d566:	fa02 f606 	lsl.w	r6, r2, r6
 801d56a:	421e      	tst	r6, r3
 801d56c:	bf18      	it	ne
 801d56e:	4617      	movne	r7, r2
 801d570:	f047 0720 	orr.w	r7, r7, #32
 801d574:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d576:	601c      	str	r4, [r3, #0]
 801d578:	9b04      	ldr	r3, [sp, #16]
 801d57a:	601d      	str	r5, [r3, #0]
 801d57c:	e695      	b.n	801d2aa <__gethex+0x12a>
 801d57e:	4299      	cmp	r1, r3
 801d580:	f843 cc04 	str.w	ip, [r3, #-4]
 801d584:	d8d8      	bhi.n	801d538 <__gethex+0x3b8>
 801d586:	68a3      	ldr	r3, [r4, #8]
 801d588:	459b      	cmp	fp, r3
 801d58a:	db19      	blt.n	801d5c0 <__gethex+0x440>
 801d58c:	6861      	ldr	r1, [r4, #4]
 801d58e:	ee18 0a10 	vmov	r0, s16
 801d592:	3101      	adds	r1, #1
 801d594:	f000 f986 	bl	801d8a4 <_Balloc>
 801d598:	4681      	mov	r9, r0
 801d59a:	b918      	cbnz	r0, 801d5a4 <__gethex+0x424>
 801d59c:	4b1a      	ldr	r3, [pc, #104]	; (801d608 <__gethex+0x488>)
 801d59e:	4602      	mov	r2, r0
 801d5a0:	2184      	movs	r1, #132	; 0x84
 801d5a2:	e6a8      	b.n	801d2f6 <__gethex+0x176>
 801d5a4:	6922      	ldr	r2, [r4, #16]
 801d5a6:	3202      	adds	r2, #2
 801d5a8:	f104 010c 	add.w	r1, r4, #12
 801d5ac:	0092      	lsls	r2, r2, #2
 801d5ae:	300c      	adds	r0, #12
 801d5b0:	f7fc fe86 	bl	801a2c0 <memcpy>
 801d5b4:	4621      	mov	r1, r4
 801d5b6:	ee18 0a10 	vmov	r0, s16
 801d5ba:	f000 f9b3 	bl	801d924 <_Bfree>
 801d5be:	464c      	mov	r4, r9
 801d5c0:	6923      	ldr	r3, [r4, #16]
 801d5c2:	1c5a      	adds	r2, r3, #1
 801d5c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d5c8:	6122      	str	r2, [r4, #16]
 801d5ca:	2201      	movs	r2, #1
 801d5cc:	615a      	str	r2, [r3, #20]
 801d5ce:	e7bb      	b.n	801d548 <__gethex+0x3c8>
 801d5d0:	6922      	ldr	r2, [r4, #16]
 801d5d2:	455a      	cmp	r2, fp
 801d5d4:	dd0b      	ble.n	801d5ee <__gethex+0x46e>
 801d5d6:	2101      	movs	r1, #1
 801d5d8:	4620      	mov	r0, r4
 801d5da:	f7ff fd6a 	bl	801d0b2 <rshift>
 801d5de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d5e2:	3501      	adds	r5, #1
 801d5e4:	42ab      	cmp	r3, r5
 801d5e6:	f6ff aed0 	blt.w	801d38a <__gethex+0x20a>
 801d5ea:	2701      	movs	r7, #1
 801d5ec:	e7c0      	b.n	801d570 <__gethex+0x3f0>
 801d5ee:	f016 061f 	ands.w	r6, r6, #31
 801d5f2:	d0fa      	beq.n	801d5ea <__gethex+0x46a>
 801d5f4:	449a      	add	sl, r3
 801d5f6:	f1c6 0620 	rsb	r6, r6, #32
 801d5fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801d5fe:	f000 fa47 	bl	801da90 <__hi0bits>
 801d602:	42b0      	cmp	r0, r6
 801d604:	dbe7      	blt.n	801d5d6 <__gethex+0x456>
 801d606:	e7f0      	b.n	801d5ea <__gethex+0x46a>
 801d608:	08021e10 	.word	0x08021e10

0801d60c <L_shift>:
 801d60c:	f1c2 0208 	rsb	r2, r2, #8
 801d610:	0092      	lsls	r2, r2, #2
 801d612:	b570      	push	{r4, r5, r6, lr}
 801d614:	f1c2 0620 	rsb	r6, r2, #32
 801d618:	6843      	ldr	r3, [r0, #4]
 801d61a:	6804      	ldr	r4, [r0, #0]
 801d61c:	fa03 f506 	lsl.w	r5, r3, r6
 801d620:	432c      	orrs	r4, r5
 801d622:	40d3      	lsrs	r3, r2
 801d624:	6004      	str	r4, [r0, #0]
 801d626:	f840 3f04 	str.w	r3, [r0, #4]!
 801d62a:	4288      	cmp	r0, r1
 801d62c:	d3f4      	bcc.n	801d618 <L_shift+0xc>
 801d62e:	bd70      	pop	{r4, r5, r6, pc}

0801d630 <__match>:
 801d630:	b530      	push	{r4, r5, lr}
 801d632:	6803      	ldr	r3, [r0, #0]
 801d634:	3301      	adds	r3, #1
 801d636:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d63a:	b914      	cbnz	r4, 801d642 <__match+0x12>
 801d63c:	6003      	str	r3, [r0, #0]
 801d63e:	2001      	movs	r0, #1
 801d640:	bd30      	pop	{r4, r5, pc}
 801d642:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d646:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d64a:	2d19      	cmp	r5, #25
 801d64c:	bf98      	it	ls
 801d64e:	3220      	addls	r2, #32
 801d650:	42a2      	cmp	r2, r4
 801d652:	d0f0      	beq.n	801d636 <__match+0x6>
 801d654:	2000      	movs	r0, #0
 801d656:	e7f3      	b.n	801d640 <__match+0x10>

0801d658 <__hexnan>:
 801d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d65c:	680b      	ldr	r3, [r1, #0]
 801d65e:	6801      	ldr	r1, [r0, #0]
 801d660:	115e      	asrs	r6, r3, #5
 801d662:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d666:	f013 031f 	ands.w	r3, r3, #31
 801d66a:	b087      	sub	sp, #28
 801d66c:	bf18      	it	ne
 801d66e:	3604      	addne	r6, #4
 801d670:	2500      	movs	r5, #0
 801d672:	1f37      	subs	r7, r6, #4
 801d674:	4682      	mov	sl, r0
 801d676:	4690      	mov	r8, r2
 801d678:	9301      	str	r3, [sp, #4]
 801d67a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d67e:	46b9      	mov	r9, r7
 801d680:	463c      	mov	r4, r7
 801d682:	9502      	str	r5, [sp, #8]
 801d684:	46ab      	mov	fp, r5
 801d686:	784a      	ldrb	r2, [r1, #1]
 801d688:	1c4b      	adds	r3, r1, #1
 801d68a:	9303      	str	r3, [sp, #12]
 801d68c:	b342      	cbz	r2, 801d6e0 <__hexnan+0x88>
 801d68e:	4610      	mov	r0, r2
 801d690:	9105      	str	r1, [sp, #20]
 801d692:	9204      	str	r2, [sp, #16]
 801d694:	f7ff fd5f 	bl	801d156 <__hexdig_fun>
 801d698:	2800      	cmp	r0, #0
 801d69a:	d14f      	bne.n	801d73c <__hexnan+0xe4>
 801d69c:	9a04      	ldr	r2, [sp, #16]
 801d69e:	9905      	ldr	r1, [sp, #20]
 801d6a0:	2a20      	cmp	r2, #32
 801d6a2:	d818      	bhi.n	801d6d6 <__hexnan+0x7e>
 801d6a4:	9b02      	ldr	r3, [sp, #8]
 801d6a6:	459b      	cmp	fp, r3
 801d6a8:	dd13      	ble.n	801d6d2 <__hexnan+0x7a>
 801d6aa:	454c      	cmp	r4, r9
 801d6ac:	d206      	bcs.n	801d6bc <__hexnan+0x64>
 801d6ae:	2d07      	cmp	r5, #7
 801d6b0:	dc04      	bgt.n	801d6bc <__hexnan+0x64>
 801d6b2:	462a      	mov	r2, r5
 801d6b4:	4649      	mov	r1, r9
 801d6b6:	4620      	mov	r0, r4
 801d6b8:	f7ff ffa8 	bl	801d60c <L_shift>
 801d6bc:	4544      	cmp	r4, r8
 801d6be:	d950      	bls.n	801d762 <__hexnan+0x10a>
 801d6c0:	2300      	movs	r3, #0
 801d6c2:	f1a4 0904 	sub.w	r9, r4, #4
 801d6c6:	f844 3c04 	str.w	r3, [r4, #-4]
 801d6ca:	f8cd b008 	str.w	fp, [sp, #8]
 801d6ce:	464c      	mov	r4, r9
 801d6d0:	461d      	mov	r5, r3
 801d6d2:	9903      	ldr	r1, [sp, #12]
 801d6d4:	e7d7      	b.n	801d686 <__hexnan+0x2e>
 801d6d6:	2a29      	cmp	r2, #41	; 0x29
 801d6d8:	d156      	bne.n	801d788 <__hexnan+0x130>
 801d6da:	3102      	adds	r1, #2
 801d6dc:	f8ca 1000 	str.w	r1, [sl]
 801d6e0:	f1bb 0f00 	cmp.w	fp, #0
 801d6e4:	d050      	beq.n	801d788 <__hexnan+0x130>
 801d6e6:	454c      	cmp	r4, r9
 801d6e8:	d206      	bcs.n	801d6f8 <__hexnan+0xa0>
 801d6ea:	2d07      	cmp	r5, #7
 801d6ec:	dc04      	bgt.n	801d6f8 <__hexnan+0xa0>
 801d6ee:	462a      	mov	r2, r5
 801d6f0:	4649      	mov	r1, r9
 801d6f2:	4620      	mov	r0, r4
 801d6f4:	f7ff ff8a 	bl	801d60c <L_shift>
 801d6f8:	4544      	cmp	r4, r8
 801d6fa:	d934      	bls.n	801d766 <__hexnan+0x10e>
 801d6fc:	f1a8 0204 	sub.w	r2, r8, #4
 801d700:	4623      	mov	r3, r4
 801d702:	f853 1b04 	ldr.w	r1, [r3], #4
 801d706:	f842 1f04 	str.w	r1, [r2, #4]!
 801d70a:	429f      	cmp	r7, r3
 801d70c:	d2f9      	bcs.n	801d702 <__hexnan+0xaa>
 801d70e:	1b3b      	subs	r3, r7, r4
 801d710:	f023 0303 	bic.w	r3, r3, #3
 801d714:	3304      	adds	r3, #4
 801d716:	3401      	adds	r4, #1
 801d718:	3e03      	subs	r6, #3
 801d71a:	42b4      	cmp	r4, r6
 801d71c:	bf88      	it	hi
 801d71e:	2304      	movhi	r3, #4
 801d720:	4443      	add	r3, r8
 801d722:	2200      	movs	r2, #0
 801d724:	f843 2b04 	str.w	r2, [r3], #4
 801d728:	429f      	cmp	r7, r3
 801d72a:	d2fb      	bcs.n	801d724 <__hexnan+0xcc>
 801d72c:	683b      	ldr	r3, [r7, #0]
 801d72e:	b91b      	cbnz	r3, 801d738 <__hexnan+0xe0>
 801d730:	4547      	cmp	r7, r8
 801d732:	d127      	bne.n	801d784 <__hexnan+0x12c>
 801d734:	2301      	movs	r3, #1
 801d736:	603b      	str	r3, [r7, #0]
 801d738:	2005      	movs	r0, #5
 801d73a:	e026      	b.n	801d78a <__hexnan+0x132>
 801d73c:	3501      	adds	r5, #1
 801d73e:	2d08      	cmp	r5, #8
 801d740:	f10b 0b01 	add.w	fp, fp, #1
 801d744:	dd06      	ble.n	801d754 <__hexnan+0xfc>
 801d746:	4544      	cmp	r4, r8
 801d748:	d9c3      	bls.n	801d6d2 <__hexnan+0x7a>
 801d74a:	2300      	movs	r3, #0
 801d74c:	f844 3c04 	str.w	r3, [r4, #-4]
 801d750:	2501      	movs	r5, #1
 801d752:	3c04      	subs	r4, #4
 801d754:	6822      	ldr	r2, [r4, #0]
 801d756:	f000 000f 	and.w	r0, r0, #15
 801d75a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d75e:	6022      	str	r2, [r4, #0]
 801d760:	e7b7      	b.n	801d6d2 <__hexnan+0x7a>
 801d762:	2508      	movs	r5, #8
 801d764:	e7b5      	b.n	801d6d2 <__hexnan+0x7a>
 801d766:	9b01      	ldr	r3, [sp, #4]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d0df      	beq.n	801d72c <__hexnan+0xd4>
 801d76c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d770:	f1c3 0320 	rsb	r3, r3, #32
 801d774:	fa22 f303 	lsr.w	r3, r2, r3
 801d778:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d77c:	401a      	ands	r2, r3
 801d77e:	f846 2c04 	str.w	r2, [r6, #-4]
 801d782:	e7d3      	b.n	801d72c <__hexnan+0xd4>
 801d784:	3f04      	subs	r7, #4
 801d786:	e7d1      	b.n	801d72c <__hexnan+0xd4>
 801d788:	2004      	movs	r0, #4
 801d78a:	b007      	add	sp, #28
 801d78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d790 <_localeconv_r>:
 801d790:	4800      	ldr	r0, [pc, #0]	; (801d794 <_localeconv_r+0x4>)
 801d792:	4770      	bx	lr
 801d794:	24000588 	.word	0x24000588

0801d798 <__retarget_lock_init_recursive>:
 801d798:	4770      	bx	lr

0801d79a <__retarget_lock_acquire_recursive>:
 801d79a:	4770      	bx	lr

0801d79c <__retarget_lock_release_recursive>:
 801d79c:	4770      	bx	lr

0801d79e <__swhatbuf_r>:
 801d79e:	b570      	push	{r4, r5, r6, lr}
 801d7a0:	460e      	mov	r6, r1
 801d7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7a6:	2900      	cmp	r1, #0
 801d7a8:	b096      	sub	sp, #88	; 0x58
 801d7aa:	4614      	mov	r4, r2
 801d7ac:	461d      	mov	r5, r3
 801d7ae:	da07      	bge.n	801d7c0 <__swhatbuf_r+0x22>
 801d7b0:	2300      	movs	r3, #0
 801d7b2:	602b      	str	r3, [r5, #0]
 801d7b4:	89b3      	ldrh	r3, [r6, #12]
 801d7b6:	061a      	lsls	r2, r3, #24
 801d7b8:	d410      	bmi.n	801d7dc <__swhatbuf_r+0x3e>
 801d7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d7be:	e00e      	b.n	801d7de <__swhatbuf_r+0x40>
 801d7c0:	466a      	mov	r2, sp
 801d7c2:	f001 f873 	bl	801e8ac <_fstat_r>
 801d7c6:	2800      	cmp	r0, #0
 801d7c8:	dbf2      	blt.n	801d7b0 <__swhatbuf_r+0x12>
 801d7ca:	9a01      	ldr	r2, [sp, #4]
 801d7cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d7d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d7d4:	425a      	negs	r2, r3
 801d7d6:	415a      	adcs	r2, r3
 801d7d8:	602a      	str	r2, [r5, #0]
 801d7da:	e7ee      	b.n	801d7ba <__swhatbuf_r+0x1c>
 801d7dc:	2340      	movs	r3, #64	; 0x40
 801d7de:	2000      	movs	r0, #0
 801d7e0:	6023      	str	r3, [r4, #0]
 801d7e2:	b016      	add	sp, #88	; 0x58
 801d7e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d7e8 <__smakebuf_r>:
 801d7e8:	898b      	ldrh	r3, [r1, #12]
 801d7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d7ec:	079d      	lsls	r5, r3, #30
 801d7ee:	4606      	mov	r6, r0
 801d7f0:	460c      	mov	r4, r1
 801d7f2:	d507      	bpl.n	801d804 <__smakebuf_r+0x1c>
 801d7f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d7f8:	6023      	str	r3, [r4, #0]
 801d7fa:	6123      	str	r3, [r4, #16]
 801d7fc:	2301      	movs	r3, #1
 801d7fe:	6163      	str	r3, [r4, #20]
 801d800:	b002      	add	sp, #8
 801d802:	bd70      	pop	{r4, r5, r6, pc}
 801d804:	ab01      	add	r3, sp, #4
 801d806:	466a      	mov	r2, sp
 801d808:	f7ff ffc9 	bl	801d79e <__swhatbuf_r>
 801d80c:	9900      	ldr	r1, [sp, #0]
 801d80e:	4605      	mov	r5, r0
 801d810:	4630      	mov	r0, r6
 801d812:	f7fc fdd5 	bl	801a3c0 <_malloc_r>
 801d816:	b948      	cbnz	r0, 801d82c <__smakebuf_r+0x44>
 801d818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d81c:	059a      	lsls	r2, r3, #22
 801d81e:	d4ef      	bmi.n	801d800 <__smakebuf_r+0x18>
 801d820:	f023 0303 	bic.w	r3, r3, #3
 801d824:	f043 0302 	orr.w	r3, r3, #2
 801d828:	81a3      	strh	r3, [r4, #12]
 801d82a:	e7e3      	b.n	801d7f4 <__smakebuf_r+0xc>
 801d82c:	4b0d      	ldr	r3, [pc, #52]	; (801d864 <__smakebuf_r+0x7c>)
 801d82e:	62b3      	str	r3, [r6, #40]	; 0x28
 801d830:	89a3      	ldrh	r3, [r4, #12]
 801d832:	6020      	str	r0, [r4, #0]
 801d834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d838:	81a3      	strh	r3, [r4, #12]
 801d83a:	9b00      	ldr	r3, [sp, #0]
 801d83c:	6163      	str	r3, [r4, #20]
 801d83e:	9b01      	ldr	r3, [sp, #4]
 801d840:	6120      	str	r0, [r4, #16]
 801d842:	b15b      	cbz	r3, 801d85c <__smakebuf_r+0x74>
 801d844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d848:	4630      	mov	r0, r6
 801d84a:	f001 f841 	bl	801e8d0 <_isatty_r>
 801d84e:	b128      	cbz	r0, 801d85c <__smakebuf_r+0x74>
 801d850:	89a3      	ldrh	r3, [r4, #12]
 801d852:	f023 0303 	bic.w	r3, r3, #3
 801d856:	f043 0301 	orr.w	r3, r3, #1
 801d85a:	81a3      	strh	r3, [r4, #12]
 801d85c:	89a0      	ldrh	r0, [r4, #12]
 801d85e:	4305      	orrs	r5, r0
 801d860:	81a5      	strh	r5, [r4, #12]
 801d862:	e7cd      	b.n	801d800 <__smakebuf_r+0x18>
 801d864:	0801ceed 	.word	0x0801ceed

0801d868 <__ascii_mbtowc>:
 801d868:	b082      	sub	sp, #8
 801d86a:	b901      	cbnz	r1, 801d86e <__ascii_mbtowc+0x6>
 801d86c:	a901      	add	r1, sp, #4
 801d86e:	b142      	cbz	r2, 801d882 <__ascii_mbtowc+0x1a>
 801d870:	b14b      	cbz	r3, 801d886 <__ascii_mbtowc+0x1e>
 801d872:	7813      	ldrb	r3, [r2, #0]
 801d874:	600b      	str	r3, [r1, #0]
 801d876:	7812      	ldrb	r2, [r2, #0]
 801d878:	1e10      	subs	r0, r2, #0
 801d87a:	bf18      	it	ne
 801d87c:	2001      	movne	r0, #1
 801d87e:	b002      	add	sp, #8
 801d880:	4770      	bx	lr
 801d882:	4610      	mov	r0, r2
 801d884:	e7fb      	b.n	801d87e <__ascii_mbtowc+0x16>
 801d886:	f06f 0001 	mvn.w	r0, #1
 801d88a:	e7f8      	b.n	801d87e <__ascii_mbtowc+0x16>

0801d88c <__malloc_lock>:
 801d88c:	4801      	ldr	r0, [pc, #4]	; (801d894 <__malloc_lock+0x8>)
 801d88e:	f7ff bf84 	b.w	801d79a <__retarget_lock_acquire_recursive>
 801d892:	bf00      	nop
 801d894:	24003e68 	.word	0x24003e68

0801d898 <__malloc_unlock>:
 801d898:	4801      	ldr	r0, [pc, #4]	; (801d8a0 <__malloc_unlock+0x8>)
 801d89a:	f7ff bf7f 	b.w	801d79c <__retarget_lock_release_recursive>
 801d89e:	bf00      	nop
 801d8a0:	24003e68 	.word	0x24003e68

0801d8a4 <_Balloc>:
 801d8a4:	b570      	push	{r4, r5, r6, lr}
 801d8a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d8a8:	4604      	mov	r4, r0
 801d8aa:	460d      	mov	r5, r1
 801d8ac:	b976      	cbnz	r6, 801d8cc <_Balloc+0x28>
 801d8ae:	2010      	movs	r0, #16
 801d8b0:	f7fc fcf0 	bl	801a294 <malloc>
 801d8b4:	4602      	mov	r2, r0
 801d8b6:	6260      	str	r0, [r4, #36]	; 0x24
 801d8b8:	b920      	cbnz	r0, 801d8c4 <_Balloc+0x20>
 801d8ba:	4b18      	ldr	r3, [pc, #96]	; (801d91c <_Balloc+0x78>)
 801d8bc:	4818      	ldr	r0, [pc, #96]	; (801d920 <_Balloc+0x7c>)
 801d8be:	2166      	movs	r1, #102	; 0x66
 801d8c0:	f7fe fbfc 	bl	801c0bc <__assert_func>
 801d8c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d8c8:	6006      	str	r6, [r0, #0]
 801d8ca:	60c6      	str	r6, [r0, #12]
 801d8cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d8ce:	68f3      	ldr	r3, [r6, #12]
 801d8d0:	b183      	cbz	r3, 801d8f4 <_Balloc+0x50>
 801d8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d8d4:	68db      	ldr	r3, [r3, #12]
 801d8d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d8da:	b9b8      	cbnz	r0, 801d90c <_Balloc+0x68>
 801d8dc:	2101      	movs	r1, #1
 801d8de:	fa01 f605 	lsl.w	r6, r1, r5
 801d8e2:	1d72      	adds	r2, r6, #5
 801d8e4:	0092      	lsls	r2, r2, #2
 801d8e6:	4620      	mov	r0, r4
 801d8e8:	f000 fc98 	bl	801e21c <_calloc_r>
 801d8ec:	b160      	cbz	r0, 801d908 <_Balloc+0x64>
 801d8ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d8f2:	e00e      	b.n	801d912 <_Balloc+0x6e>
 801d8f4:	2221      	movs	r2, #33	; 0x21
 801d8f6:	2104      	movs	r1, #4
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	f000 fc8f 	bl	801e21c <_calloc_r>
 801d8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d900:	60f0      	str	r0, [r6, #12]
 801d902:	68db      	ldr	r3, [r3, #12]
 801d904:	2b00      	cmp	r3, #0
 801d906:	d1e4      	bne.n	801d8d2 <_Balloc+0x2e>
 801d908:	2000      	movs	r0, #0
 801d90a:	bd70      	pop	{r4, r5, r6, pc}
 801d90c:	6802      	ldr	r2, [r0, #0]
 801d90e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d912:	2300      	movs	r3, #0
 801d914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d918:	e7f7      	b.n	801d90a <_Balloc+0x66>
 801d91a:	bf00      	nop
 801d91c:	08021ca1 	.word	0x08021ca1
 801d920:	08021f04 	.word	0x08021f04

0801d924 <_Bfree>:
 801d924:	b570      	push	{r4, r5, r6, lr}
 801d926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d928:	4605      	mov	r5, r0
 801d92a:	460c      	mov	r4, r1
 801d92c:	b976      	cbnz	r6, 801d94c <_Bfree+0x28>
 801d92e:	2010      	movs	r0, #16
 801d930:	f7fc fcb0 	bl	801a294 <malloc>
 801d934:	4602      	mov	r2, r0
 801d936:	6268      	str	r0, [r5, #36]	; 0x24
 801d938:	b920      	cbnz	r0, 801d944 <_Bfree+0x20>
 801d93a:	4b09      	ldr	r3, [pc, #36]	; (801d960 <_Bfree+0x3c>)
 801d93c:	4809      	ldr	r0, [pc, #36]	; (801d964 <_Bfree+0x40>)
 801d93e:	218a      	movs	r1, #138	; 0x8a
 801d940:	f7fe fbbc 	bl	801c0bc <__assert_func>
 801d944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d948:	6006      	str	r6, [r0, #0]
 801d94a:	60c6      	str	r6, [r0, #12]
 801d94c:	b13c      	cbz	r4, 801d95e <_Bfree+0x3a>
 801d94e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d950:	6862      	ldr	r2, [r4, #4]
 801d952:	68db      	ldr	r3, [r3, #12]
 801d954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d958:	6021      	str	r1, [r4, #0]
 801d95a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d95e:	bd70      	pop	{r4, r5, r6, pc}
 801d960:	08021ca1 	.word	0x08021ca1
 801d964:	08021f04 	.word	0x08021f04

0801d968 <__multadd>:
 801d968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d96c:	690e      	ldr	r6, [r1, #16]
 801d96e:	4607      	mov	r7, r0
 801d970:	4698      	mov	r8, r3
 801d972:	460c      	mov	r4, r1
 801d974:	f101 0014 	add.w	r0, r1, #20
 801d978:	2300      	movs	r3, #0
 801d97a:	6805      	ldr	r5, [r0, #0]
 801d97c:	b2a9      	uxth	r1, r5
 801d97e:	fb02 8101 	mla	r1, r2, r1, r8
 801d982:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d986:	0c2d      	lsrs	r5, r5, #16
 801d988:	fb02 c505 	mla	r5, r2, r5, ip
 801d98c:	b289      	uxth	r1, r1
 801d98e:	3301      	adds	r3, #1
 801d990:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d994:	429e      	cmp	r6, r3
 801d996:	f840 1b04 	str.w	r1, [r0], #4
 801d99a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d99e:	dcec      	bgt.n	801d97a <__multadd+0x12>
 801d9a0:	f1b8 0f00 	cmp.w	r8, #0
 801d9a4:	d022      	beq.n	801d9ec <__multadd+0x84>
 801d9a6:	68a3      	ldr	r3, [r4, #8]
 801d9a8:	42b3      	cmp	r3, r6
 801d9aa:	dc19      	bgt.n	801d9e0 <__multadd+0x78>
 801d9ac:	6861      	ldr	r1, [r4, #4]
 801d9ae:	4638      	mov	r0, r7
 801d9b0:	3101      	adds	r1, #1
 801d9b2:	f7ff ff77 	bl	801d8a4 <_Balloc>
 801d9b6:	4605      	mov	r5, r0
 801d9b8:	b928      	cbnz	r0, 801d9c6 <__multadd+0x5e>
 801d9ba:	4602      	mov	r2, r0
 801d9bc:	4b0d      	ldr	r3, [pc, #52]	; (801d9f4 <__multadd+0x8c>)
 801d9be:	480e      	ldr	r0, [pc, #56]	; (801d9f8 <__multadd+0x90>)
 801d9c0:	21b5      	movs	r1, #181	; 0xb5
 801d9c2:	f7fe fb7b 	bl	801c0bc <__assert_func>
 801d9c6:	6922      	ldr	r2, [r4, #16]
 801d9c8:	3202      	adds	r2, #2
 801d9ca:	f104 010c 	add.w	r1, r4, #12
 801d9ce:	0092      	lsls	r2, r2, #2
 801d9d0:	300c      	adds	r0, #12
 801d9d2:	f7fc fc75 	bl	801a2c0 <memcpy>
 801d9d6:	4621      	mov	r1, r4
 801d9d8:	4638      	mov	r0, r7
 801d9da:	f7ff ffa3 	bl	801d924 <_Bfree>
 801d9de:	462c      	mov	r4, r5
 801d9e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d9e4:	3601      	adds	r6, #1
 801d9e6:	f8c3 8014 	str.w	r8, [r3, #20]
 801d9ea:	6126      	str	r6, [r4, #16]
 801d9ec:	4620      	mov	r0, r4
 801d9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9f2:	bf00      	nop
 801d9f4:	08021e10 	.word	0x08021e10
 801d9f8:	08021f04 	.word	0x08021f04

0801d9fc <__s2b>:
 801d9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da00:	460c      	mov	r4, r1
 801da02:	4615      	mov	r5, r2
 801da04:	461f      	mov	r7, r3
 801da06:	2209      	movs	r2, #9
 801da08:	3308      	adds	r3, #8
 801da0a:	4606      	mov	r6, r0
 801da0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801da10:	2100      	movs	r1, #0
 801da12:	2201      	movs	r2, #1
 801da14:	429a      	cmp	r2, r3
 801da16:	db09      	blt.n	801da2c <__s2b+0x30>
 801da18:	4630      	mov	r0, r6
 801da1a:	f7ff ff43 	bl	801d8a4 <_Balloc>
 801da1e:	b940      	cbnz	r0, 801da32 <__s2b+0x36>
 801da20:	4602      	mov	r2, r0
 801da22:	4b19      	ldr	r3, [pc, #100]	; (801da88 <__s2b+0x8c>)
 801da24:	4819      	ldr	r0, [pc, #100]	; (801da8c <__s2b+0x90>)
 801da26:	21ce      	movs	r1, #206	; 0xce
 801da28:	f7fe fb48 	bl	801c0bc <__assert_func>
 801da2c:	0052      	lsls	r2, r2, #1
 801da2e:	3101      	adds	r1, #1
 801da30:	e7f0      	b.n	801da14 <__s2b+0x18>
 801da32:	9b08      	ldr	r3, [sp, #32]
 801da34:	6143      	str	r3, [r0, #20]
 801da36:	2d09      	cmp	r5, #9
 801da38:	f04f 0301 	mov.w	r3, #1
 801da3c:	6103      	str	r3, [r0, #16]
 801da3e:	dd16      	ble.n	801da6e <__s2b+0x72>
 801da40:	f104 0909 	add.w	r9, r4, #9
 801da44:	46c8      	mov	r8, r9
 801da46:	442c      	add	r4, r5
 801da48:	f818 3b01 	ldrb.w	r3, [r8], #1
 801da4c:	4601      	mov	r1, r0
 801da4e:	3b30      	subs	r3, #48	; 0x30
 801da50:	220a      	movs	r2, #10
 801da52:	4630      	mov	r0, r6
 801da54:	f7ff ff88 	bl	801d968 <__multadd>
 801da58:	45a0      	cmp	r8, r4
 801da5a:	d1f5      	bne.n	801da48 <__s2b+0x4c>
 801da5c:	f1a5 0408 	sub.w	r4, r5, #8
 801da60:	444c      	add	r4, r9
 801da62:	1b2d      	subs	r5, r5, r4
 801da64:	1963      	adds	r3, r4, r5
 801da66:	42bb      	cmp	r3, r7
 801da68:	db04      	blt.n	801da74 <__s2b+0x78>
 801da6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da6e:	340a      	adds	r4, #10
 801da70:	2509      	movs	r5, #9
 801da72:	e7f6      	b.n	801da62 <__s2b+0x66>
 801da74:	f814 3b01 	ldrb.w	r3, [r4], #1
 801da78:	4601      	mov	r1, r0
 801da7a:	3b30      	subs	r3, #48	; 0x30
 801da7c:	220a      	movs	r2, #10
 801da7e:	4630      	mov	r0, r6
 801da80:	f7ff ff72 	bl	801d968 <__multadd>
 801da84:	e7ee      	b.n	801da64 <__s2b+0x68>
 801da86:	bf00      	nop
 801da88:	08021e10 	.word	0x08021e10
 801da8c:	08021f04 	.word	0x08021f04

0801da90 <__hi0bits>:
 801da90:	0c03      	lsrs	r3, r0, #16
 801da92:	041b      	lsls	r3, r3, #16
 801da94:	b9d3      	cbnz	r3, 801dacc <__hi0bits+0x3c>
 801da96:	0400      	lsls	r0, r0, #16
 801da98:	2310      	movs	r3, #16
 801da9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801da9e:	bf04      	itt	eq
 801daa0:	0200      	lsleq	r0, r0, #8
 801daa2:	3308      	addeq	r3, #8
 801daa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801daa8:	bf04      	itt	eq
 801daaa:	0100      	lsleq	r0, r0, #4
 801daac:	3304      	addeq	r3, #4
 801daae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801dab2:	bf04      	itt	eq
 801dab4:	0080      	lsleq	r0, r0, #2
 801dab6:	3302      	addeq	r3, #2
 801dab8:	2800      	cmp	r0, #0
 801daba:	db05      	blt.n	801dac8 <__hi0bits+0x38>
 801dabc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dac0:	f103 0301 	add.w	r3, r3, #1
 801dac4:	bf08      	it	eq
 801dac6:	2320      	moveq	r3, #32
 801dac8:	4618      	mov	r0, r3
 801daca:	4770      	bx	lr
 801dacc:	2300      	movs	r3, #0
 801dace:	e7e4      	b.n	801da9a <__hi0bits+0xa>

0801dad0 <__lo0bits>:
 801dad0:	6803      	ldr	r3, [r0, #0]
 801dad2:	f013 0207 	ands.w	r2, r3, #7
 801dad6:	4601      	mov	r1, r0
 801dad8:	d00b      	beq.n	801daf2 <__lo0bits+0x22>
 801dada:	07da      	lsls	r2, r3, #31
 801dadc:	d424      	bmi.n	801db28 <__lo0bits+0x58>
 801dade:	0798      	lsls	r0, r3, #30
 801dae0:	bf49      	itett	mi
 801dae2:	085b      	lsrmi	r3, r3, #1
 801dae4:	089b      	lsrpl	r3, r3, #2
 801dae6:	2001      	movmi	r0, #1
 801dae8:	600b      	strmi	r3, [r1, #0]
 801daea:	bf5c      	itt	pl
 801daec:	600b      	strpl	r3, [r1, #0]
 801daee:	2002      	movpl	r0, #2
 801daf0:	4770      	bx	lr
 801daf2:	b298      	uxth	r0, r3
 801daf4:	b9b0      	cbnz	r0, 801db24 <__lo0bits+0x54>
 801daf6:	0c1b      	lsrs	r3, r3, #16
 801daf8:	2010      	movs	r0, #16
 801dafa:	f013 0fff 	tst.w	r3, #255	; 0xff
 801dafe:	bf04      	itt	eq
 801db00:	0a1b      	lsreq	r3, r3, #8
 801db02:	3008      	addeq	r0, #8
 801db04:	071a      	lsls	r2, r3, #28
 801db06:	bf04      	itt	eq
 801db08:	091b      	lsreq	r3, r3, #4
 801db0a:	3004      	addeq	r0, #4
 801db0c:	079a      	lsls	r2, r3, #30
 801db0e:	bf04      	itt	eq
 801db10:	089b      	lsreq	r3, r3, #2
 801db12:	3002      	addeq	r0, #2
 801db14:	07da      	lsls	r2, r3, #31
 801db16:	d403      	bmi.n	801db20 <__lo0bits+0x50>
 801db18:	085b      	lsrs	r3, r3, #1
 801db1a:	f100 0001 	add.w	r0, r0, #1
 801db1e:	d005      	beq.n	801db2c <__lo0bits+0x5c>
 801db20:	600b      	str	r3, [r1, #0]
 801db22:	4770      	bx	lr
 801db24:	4610      	mov	r0, r2
 801db26:	e7e8      	b.n	801dafa <__lo0bits+0x2a>
 801db28:	2000      	movs	r0, #0
 801db2a:	4770      	bx	lr
 801db2c:	2020      	movs	r0, #32
 801db2e:	4770      	bx	lr

0801db30 <__i2b>:
 801db30:	b510      	push	{r4, lr}
 801db32:	460c      	mov	r4, r1
 801db34:	2101      	movs	r1, #1
 801db36:	f7ff feb5 	bl	801d8a4 <_Balloc>
 801db3a:	4602      	mov	r2, r0
 801db3c:	b928      	cbnz	r0, 801db4a <__i2b+0x1a>
 801db3e:	4b05      	ldr	r3, [pc, #20]	; (801db54 <__i2b+0x24>)
 801db40:	4805      	ldr	r0, [pc, #20]	; (801db58 <__i2b+0x28>)
 801db42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801db46:	f7fe fab9 	bl	801c0bc <__assert_func>
 801db4a:	2301      	movs	r3, #1
 801db4c:	6144      	str	r4, [r0, #20]
 801db4e:	6103      	str	r3, [r0, #16]
 801db50:	bd10      	pop	{r4, pc}
 801db52:	bf00      	nop
 801db54:	08021e10 	.word	0x08021e10
 801db58:	08021f04 	.word	0x08021f04

0801db5c <__multiply>:
 801db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db60:	4614      	mov	r4, r2
 801db62:	690a      	ldr	r2, [r1, #16]
 801db64:	6923      	ldr	r3, [r4, #16]
 801db66:	429a      	cmp	r2, r3
 801db68:	bfb8      	it	lt
 801db6a:	460b      	movlt	r3, r1
 801db6c:	460d      	mov	r5, r1
 801db6e:	bfbc      	itt	lt
 801db70:	4625      	movlt	r5, r4
 801db72:	461c      	movlt	r4, r3
 801db74:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801db78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801db7c:	68ab      	ldr	r3, [r5, #8]
 801db7e:	6869      	ldr	r1, [r5, #4]
 801db80:	eb0a 0709 	add.w	r7, sl, r9
 801db84:	42bb      	cmp	r3, r7
 801db86:	b085      	sub	sp, #20
 801db88:	bfb8      	it	lt
 801db8a:	3101      	addlt	r1, #1
 801db8c:	f7ff fe8a 	bl	801d8a4 <_Balloc>
 801db90:	b930      	cbnz	r0, 801dba0 <__multiply+0x44>
 801db92:	4602      	mov	r2, r0
 801db94:	4b42      	ldr	r3, [pc, #264]	; (801dca0 <__multiply+0x144>)
 801db96:	4843      	ldr	r0, [pc, #268]	; (801dca4 <__multiply+0x148>)
 801db98:	f240 115d 	movw	r1, #349	; 0x15d
 801db9c:	f7fe fa8e 	bl	801c0bc <__assert_func>
 801dba0:	f100 0614 	add.w	r6, r0, #20
 801dba4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801dba8:	4633      	mov	r3, r6
 801dbaa:	2200      	movs	r2, #0
 801dbac:	4543      	cmp	r3, r8
 801dbae:	d31e      	bcc.n	801dbee <__multiply+0x92>
 801dbb0:	f105 0c14 	add.w	ip, r5, #20
 801dbb4:	f104 0314 	add.w	r3, r4, #20
 801dbb8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801dbbc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801dbc0:	9202      	str	r2, [sp, #8]
 801dbc2:	ebac 0205 	sub.w	r2, ip, r5
 801dbc6:	3a15      	subs	r2, #21
 801dbc8:	f022 0203 	bic.w	r2, r2, #3
 801dbcc:	3204      	adds	r2, #4
 801dbce:	f105 0115 	add.w	r1, r5, #21
 801dbd2:	458c      	cmp	ip, r1
 801dbd4:	bf38      	it	cc
 801dbd6:	2204      	movcc	r2, #4
 801dbd8:	9201      	str	r2, [sp, #4]
 801dbda:	9a02      	ldr	r2, [sp, #8]
 801dbdc:	9303      	str	r3, [sp, #12]
 801dbde:	429a      	cmp	r2, r3
 801dbe0:	d808      	bhi.n	801dbf4 <__multiply+0x98>
 801dbe2:	2f00      	cmp	r7, #0
 801dbe4:	dc55      	bgt.n	801dc92 <__multiply+0x136>
 801dbe6:	6107      	str	r7, [r0, #16]
 801dbe8:	b005      	add	sp, #20
 801dbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbee:	f843 2b04 	str.w	r2, [r3], #4
 801dbf2:	e7db      	b.n	801dbac <__multiply+0x50>
 801dbf4:	f8b3 a000 	ldrh.w	sl, [r3]
 801dbf8:	f1ba 0f00 	cmp.w	sl, #0
 801dbfc:	d020      	beq.n	801dc40 <__multiply+0xe4>
 801dbfe:	f105 0e14 	add.w	lr, r5, #20
 801dc02:	46b1      	mov	r9, r6
 801dc04:	2200      	movs	r2, #0
 801dc06:	f85e 4b04 	ldr.w	r4, [lr], #4
 801dc0a:	f8d9 b000 	ldr.w	fp, [r9]
 801dc0e:	b2a1      	uxth	r1, r4
 801dc10:	fa1f fb8b 	uxth.w	fp, fp
 801dc14:	fb0a b101 	mla	r1, sl, r1, fp
 801dc18:	4411      	add	r1, r2
 801dc1a:	f8d9 2000 	ldr.w	r2, [r9]
 801dc1e:	0c24      	lsrs	r4, r4, #16
 801dc20:	0c12      	lsrs	r2, r2, #16
 801dc22:	fb0a 2404 	mla	r4, sl, r4, r2
 801dc26:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801dc2a:	b289      	uxth	r1, r1
 801dc2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801dc30:	45f4      	cmp	ip, lr
 801dc32:	f849 1b04 	str.w	r1, [r9], #4
 801dc36:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801dc3a:	d8e4      	bhi.n	801dc06 <__multiply+0xaa>
 801dc3c:	9901      	ldr	r1, [sp, #4]
 801dc3e:	5072      	str	r2, [r6, r1]
 801dc40:	9a03      	ldr	r2, [sp, #12]
 801dc42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801dc46:	3304      	adds	r3, #4
 801dc48:	f1b9 0f00 	cmp.w	r9, #0
 801dc4c:	d01f      	beq.n	801dc8e <__multiply+0x132>
 801dc4e:	6834      	ldr	r4, [r6, #0]
 801dc50:	f105 0114 	add.w	r1, r5, #20
 801dc54:	46b6      	mov	lr, r6
 801dc56:	f04f 0a00 	mov.w	sl, #0
 801dc5a:	880a      	ldrh	r2, [r1, #0]
 801dc5c:	f8be b002 	ldrh.w	fp, [lr, #2]
 801dc60:	fb09 b202 	mla	r2, r9, r2, fp
 801dc64:	4492      	add	sl, r2
 801dc66:	b2a4      	uxth	r4, r4
 801dc68:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801dc6c:	f84e 4b04 	str.w	r4, [lr], #4
 801dc70:	f851 4b04 	ldr.w	r4, [r1], #4
 801dc74:	f8be 2000 	ldrh.w	r2, [lr]
 801dc78:	0c24      	lsrs	r4, r4, #16
 801dc7a:	fb09 2404 	mla	r4, r9, r4, r2
 801dc7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801dc82:	458c      	cmp	ip, r1
 801dc84:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801dc88:	d8e7      	bhi.n	801dc5a <__multiply+0xfe>
 801dc8a:	9a01      	ldr	r2, [sp, #4]
 801dc8c:	50b4      	str	r4, [r6, r2]
 801dc8e:	3604      	adds	r6, #4
 801dc90:	e7a3      	b.n	801dbda <__multiply+0x7e>
 801dc92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d1a5      	bne.n	801dbe6 <__multiply+0x8a>
 801dc9a:	3f01      	subs	r7, #1
 801dc9c:	e7a1      	b.n	801dbe2 <__multiply+0x86>
 801dc9e:	bf00      	nop
 801dca0:	08021e10 	.word	0x08021e10
 801dca4:	08021f04 	.word	0x08021f04

0801dca8 <__pow5mult>:
 801dca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dcac:	4615      	mov	r5, r2
 801dcae:	f012 0203 	ands.w	r2, r2, #3
 801dcb2:	4606      	mov	r6, r0
 801dcb4:	460f      	mov	r7, r1
 801dcb6:	d007      	beq.n	801dcc8 <__pow5mult+0x20>
 801dcb8:	4c25      	ldr	r4, [pc, #148]	; (801dd50 <__pow5mult+0xa8>)
 801dcba:	3a01      	subs	r2, #1
 801dcbc:	2300      	movs	r3, #0
 801dcbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dcc2:	f7ff fe51 	bl	801d968 <__multadd>
 801dcc6:	4607      	mov	r7, r0
 801dcc8:	10ad      	asrs	r5, r5, #2
 801dcca:	d03d      	beq.n	801dd48 <__pow5mult+0xa0>
 801dccc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801dcce:	b97c      	cbnz	r4, 801dcf0 <__pow5mult+0x48>
 801dcd0:	2010      	movs	r0, #16
 801dcd2:	f7fc fadf 	bl	801a294 <malloc>
 801dcd6:	4602      	mov	r2, r0
 801dcd8:	6270      	str	r0, [r6, #36]	; 0x24
 801dcda:	b928      	cbnz	r0, 801dce8 <__pow5mult+0x40>
 801dcdc:	4b1d      	ldr	r3, [pc, #116]	; (801dd54 <__pow5mult+0xac>)
 801dcde:	481e      	ldr	r0, [pc, #120]	; (801dd58 <__pow5mult+0xb0>)
 801dce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801dce4:	f7fe f9ea 	bl	801c0bc <__assert_func>
 801dce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dcec:	6004      	str	r4, [r0, #0]
 801dcee:	60c4      	str	r4, [r0, #12]
 801dcf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dcf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dcf8:	b94c      	cbnz	r4, 801dd0e <__pow5mult+0x66>
 801dcfa:	f240 2171 	movw	r1, #625	; 0x271
 801dcfe:	4630      	mov	r0, r6
 801dd00:	f7ff ff16 	bl	801db30 <__i2b>
 801dd04:	2300      	movs	r3, #0
 801dd06:	f8c8 0008 	str.w	r0, [r8, #8]
 801dd0a:	4604      	mov	r4, r0
 801dd0c:	6003      	str	r3, [r0, #0]
 801dd0e:	f04f 0900 	mov.w	r9, #0
 801dd12:	07eb      	lsls	r3, r5, #31
 801dd14:	d50a      	bpl.n	801dd2c <__pow5mult+0x84>
 801dd16:	4639      	mov	r1, r7
 801dd18:	4622      	mov	r2, r4
 801dd1a:	4630      	mov	r0, r6
 801dd1c:	f7ff ff1e 	bl	801db5c <__multiply>
 801dd20:	4639      	mov	r1, r7
 801dd22:	4680      	mov	r8, r0
 801dd24:	4630      	mov	r0, r6
 801dd26:	f7ff fdfd 	bl	801d924 <_Bfree>
 801dd2a:	4647      	mov	r7, r8
 801dd2c:	106d      	asrs	r5, r5, #1
 801dd2e:	d00b      	beq.n	801dd48 <__pow5mult+0xa0>
 801dd30:	6820      	ldr	r0, [r4, #0]
 801dd32:	b938      	cbnz	r0, 801dd44 <__pow5mult+0x9c>
 801dd34:	4622      	mov	r2, r4
 801dd36:	4621      	mov	r1, r4
 801dd38:	4630      	mov	r0, r6
 801dd3a:	f7ff ff0f 	bl	801db5c <__multiply>
 801dd3e:	6020      	str	r0, [r4, #0]
 801dd40:	f8c0 9000 	str.w	r9, [r0]
 801dd44:	4604      	mov	r4, r0
 801dd46:	e7e4      	b.n	801dd12 <__pow5mult+0x6a>
 801dd48:	4638      	mov	r0, r7
 801dd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd4e:	bf00      	nop
 801dd50:	08022058 	.word	0x08022058
 801dd54:	08021ca1 	.word	0x08021ca1
 801dd58:	08021f04 	.word	0x08021f04

0801dd5c <__lshift>:
 801dd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd60:	460c      	mov	r4, r1
 801dd62:	6849      	ldr	r1, [r1, #4]
 801dd64:	6923      	ldr	r3, [r4, #16]
 801dd66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dd6a:	68a3      	ldr	r3, [r4, #8]
 801dd6c:	4607      	mov	r7, r0
 801dd6e:	4691      	mov	r9, r2
 801dd70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dd74:	f108 0601 	add.w	r6, r8, #1
 801dd78:	42b3      	cmp	r3, r6
 801dd7a:	db0b      	blt.n	801dd94 <__lshift+0x38>
 801dd7c:	4638      	mov	r0, r7
 801dd7e:	f7ff fd91 	bl	801d8a4 <_Balloc>
 801dd82:	4605      	mov	r5, r0
 801dd84:	b948      	cbnz	r0, 801dd9a <__lshift+0x3e>
 801dd86:	4602      	mov	r2, r0
 801dd88:	4b28      	ldr	r3, [pc, #160]	; (801de2c <__lshift+0xd0>)
 801dd8a:	4829      	ldr	r0, [pc, #164]	; (801de30 <__lshift+0xd4>)
 801dd8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801dd90:	f7fe f994 	bl	801c0bc <__assert_func>
 801dd94:	3101      	adds	r1, #1
 801dd96:	005b      	lsls	r3, r3, #1
 801dd98:	e7ee      	b.n	801dd78 <__lshift+0x1c>
 801dd9a:	2300      	movs	r3, #0
 801dd9c:	f100 0114 	add.w	r1, r0, #20
 801dda0:	f100 0210 	add.w	r2, r0, #16
 801dda4:	4618      	mov	r0, r3
 801dda6:	4553      	cmp	r3, sl
 801dda8:	db33      	blt.n	801de12 <__lshift+0xb6>
 801ddaa:	6920      	ldr	r0, [r4, #16]
 801ddac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ddb0:	f104 0314 	add.w	r3, r4, #20
 801ddb4:	f019 091f 	ands.w	r9, r9, #31
 801ddb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ddbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ddc0:	d02b      	beq.n	801de1a <__lshift+0xbe>
 801ddc2:	f1c9 0e20 	rsb	lr, r9, #32
 801ddc6:	468a      	mov	sl, r1
 801ddc8:	2200      	movs	r2, #0
 801ddca:	6818      	ldr	r0, [r3, #0]
 801ddcc:	fa00 f009 	lsl.w	r0, r0, r9
 801ddd0:	4302      	orrs	r2, r0
 801ddd2:	f84a 2b04 	str.w	r2, [sl], #4
 801ddd6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddda:	459c      	cmp	ip, r3
 801dddc:	fa22 f20e 	lsr.w	r2, r2, lr
 801dde0:	d8f3      	bhi.n	801ddca <__lshift+0x6e>
 801dde2:	ebac 0304 	sub.w	r3, ip, r4
 801dde6:	3b15      	subs	r3, #21
 801dde8:	f023 0303 	bic.w	r3, r3, #3
 801ddec:	3304      	adds	r3, #4
 801ddee:	f104 0015 	add.w	r0, r4, #21
 801ddf2:	4584      	cmp	ip, r0
 801ddf4:	bf38      	it	cc
 801ddf6:	2304      	movcc	r3, #4
 801ddf8:	50ca      	str	r2, [r1, r3]
 801ddfa:	b10a      	cbz	r2, 801de00 <__lshift+0xa4>
 801ddfc:	f108 0602 	add.w	r6, r8, #2
 801de00:	3e01      	subs	r6, #1
 801de02:	4638      	mov	r0, r7
 801de04:	612e      	str	r6, [r5, #16]
 801de06:	4621      	mov	r1, r4
 801de08:	f7ff fd8c 	bl	801d924 <_Bfree>
 801de0c:	4628      	mov	r0, r5
 801de0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de12:	f842 0f04 	str.w	r0, [r2, #4]!
 801de16:	3301      	adds	r3, #1
 801de18:	e7c5      	b.n	801dda6 <__lshift+0x4a>
 801de1a:	3904      	subs	r1, #4
 801de1c:	f853 2b04 	ldr.w	r2, [r3], #4
 801de20:	f841 2f04 	str.w	r2, [r1, #4]!
 801de24:	459c      	cmp	ip, r3
 801de26:	d8f9      	bhi.n	801de1c <__lshift+0xc0>
 801de28:	e7ea      	b.n	801de00 <__lshift+0xa4>
 801de2a:	bf00      	nop
 801de2c:	08021e10 	.word	0x08021e10
 801de30:	08021f04 	.word	0x08021f04

0801de34 <__mcmp>:
 801de34:	b530      	push	{r4, r5, lr}
 801de36:	6902      	ldr	r2, [r0, #16]
 801de38:	690c      	ldr	r4, [r1, #16]
 801de3a:	1b12      	subs	r2, r2, r4
 801de3c:	d10e      	bne.n	801de5c <__mcmp+0x28>
 801de3e:	f100 0314 	add.w	r3, r0, #20
 801de42:	3114      	adds	r1, #20
 801de44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801de48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801de4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801de50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801de54:	42a5      	cmp	r5, r4
 801de56:	d003      	beq.n	801de60 <__mcmp+0x2c>
 801de58:	d305      	bcc.n	801de66 <__mcmp+0x32>
 801de5a:	2201      	movs	r2, #1
 801de5c:	4610      	mov	r0, r2
 801de5e:	bd30      	pop	{r4, r5, pc}
 801de60:	4283      	cmp	r3, r0
 801de62:	d3f3      	bcc.n	801de4c <__mcmp+0x18>
 801de64:	e7fa      	b.n	801de5c <__mcmp+0x28>
 801de66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801de6a:	e7f7      	b.n	801de5c <__mcmp+0x28>

0801de6c <__mdiff>:
 801de6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de70:	460c      	mov	r4, r1
 801de72:	4606      	mov	r6, r0
 801de74:	4611      	mov	r1, r2
 801de76:	4620      	mov	r0, r4
 801de78:	4617      	mov	r7, r2
 801de7a:	f7ff ffdb 	bl	801de34 <__mcmp>
 801de7e:	1e05      	subs	r5, r0, #0
 801de80:	d110      	bne.n	801dea4 <__mdiff+0x38>
 801de82:	4629      	mov	r1, r5
 801de84:	4630      	mov	r0, r6
 801de86:	f7ff fd0d 	bl	801d8a4 <_Balloc>
 801de8a:	b930      	cbnz	r0, 801de9a <__mdiff+0x2e>
 801de8c:	4b39      	ldr	r3, [pc, #228]	; (801df74 <__mdiff+0x108>)
 801de8e:	4602      	mov	r2, r0
 801de90:	f240 2132 	movw	r1, #562	; 0x232
 801de94:	4838      	ldr	r0, [pc, #224]	; (801df78 <__mdiff+0x10c>)
 801de96:	f7fe f911 	bl	801c0bc <__assert_func>
 801de9a:	2301      	movs	r3, #1
 801de9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801dea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dea4:	bfa4      	itt	ge
 801dea6:	463b      	movge	r3, r7
 801dea8:	4627      	movge	r7, r4
 801deaa:	4630      	mov	r0, r6
 801deac:	6879      	ldr	r1, [r7, #4]
 801deae:	bfa6      	itte	ge
 801deb0:	461c      	movge	r4, r3
 801deb2:	2500      	movge	r5, #0
 801deb4:	2501      	movlt	r5, #1
 801deb6:	f7ff fcf5 	bl	801d8a4 <_Balloc>
 801deba:	b920      	cbnz	r0, 801dec6 <__mdiff+0x5a>
 801debc:	4b2d      	ldr	r3, [pc, #180]	; (801df74 <__mdiff+0x108>)
 801debe:	4602      	mov	r2, r0
 801dec0:	f44f 7110 	mov.w	r1, #576	; 0x240
 801dec4:	e7e6      	b.n	801de94 <__mdiff+0x28>
 801dec6:	693e      	ldr	r6, [r7, #16]
 801dec8:	60c5      	str	r5, [r0, #12]
 801deca:	6925      	ldr	r5, [r4, #16]
 801decc:	f107 0114 	add.w	r1, r7, #20
 801ded0:	f104 0914 	add.w	r9, r4, #20
 801ded4:	f100 0e14 	add.w	lr, r0, #20
 801ded8:	f107 0210 	add.w	r2, r7, #16
 801dedc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801dee0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801dee4:	46f2      	mov	sl, lr
 801dee6:	2700      	movs	r7, #0
 801dee8:	f859 3b04 	ldr.w	r3, [r9], #4
 801deec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801def0:	fa1f f883 	uxth.w	r8, r3
 801def4:	fa17 f78b 	uxtah	r7, r7, fp
 801def8:	0c1b      	lsrs	r3, r3, #16
 801defa:	eba7 0808 	sub.w	r8, r7, r8
 801defe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801df02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801df06:	fa1f f888 	uxth.w	r8, r8
 801df0a:	141f      	asrs	r7, r3, #16
 801df0c:	454d      	cmp	r5, r9
 801df0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801df12:	f84a 3b04 	str.w	r3, [sl], #4
 801df16:	d8e7      	bhi.n	801dee8 <__mdiff+0x7c>
 801df18:	1b2b      	subs	r3, r5, r4
 801df1a:	3b15      	subs	r3, #21
 801df1c:	f023 0303 	bic.w	r3, r3, #3
 801df20:	3304      	adds	r3, #4
 801df22:	3415      	adds	r4, #21
 801df24:	42a5      	cmp	r5, r4
 801df26:	bf38      	it	cc
 801df28:	2304      	movcc	r3, #4
 801df2a:	4419      	add	r1, r3
 801df2c:	4473      	add	r3, lr
 801df2e:	469e      	mov	lr, r3
 801df30:	460d      	mov	r5, r1
 801df32:	4565      	cmp	r5, ip
 801df34:	d30e      	bcc.n	801df54 <__mdiff+0xe8>
 801df36:	f10c 0203 	add.w	r2, ip, #3
 801df3a:	1a52      	subs	r2, r2, r1
 801df3c:	f022 0203 	bic.w	r2, r2, #3
 801df40:	3903      	subs	r1, #3
 801df42:	458c      	cmp	ip, r1
 801df44:	bf38      	it	cc
 801df46:	2200      	movcc	r2, #0
 801df48:	441a      	add	r2, r3
 801df4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801df4e:	b17b      	cbz	r3, 801df70 <__mdiff+0x104>
 801df50:	6106      	str	r6, [r0, #16]
 801df52:	e7a5      	b.n	801dea0 <__mdiff+0x34>
 801df54:	f855 8b04 	ldr.w	r8, [r5], #4
 801df58:	fa17 f488 	uxtah	r4, r7, r8
 801df5c:	1422      	asrs	r2, r4, #16
 801df5e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801df62:	b2a4      	uxth	r4, r4
 801df64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801df68:	f84e 4b04 	str.w	r4, [lr], #4
 801df6c:	1417      	asrs	r7, r2, #16
 801df6e:	e7e0      	b.n	801df32 <__mdiff+0xc6>
 801df70:	3e01      	subs	r6, #1
 801df72:	e7ea      	b.n	801df4a <__mdiff+0xde>
 801df74:	08021e10 	.word	0x08021e10
 801df78:	08021f04 	.word	0x08021f04

0801df7c <__ulp>:
 801df7c:	b082      	sub	sp, #8
 801df7e:	ed8d 0b00 	vstr	d0, [sp]
 801df82:	9b01      	ldr	r3, [sp, #4]
 801df84:	4912      	ldr	r1, [pc, #72]	; (801dfd0 <__ulp+0x54>)
 801df86:	4019      	ands	r1, r3
 801df88:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801df8c:	2900      	cmp	r1, #0
 801df8e:	dd05      	ble.n	801df9c <__ulp+0x20>
 801df90:	2200      	movs	r2, #0
 801df92:	460b      	mov	r3, r1
 801df94:	ec43 2b10 	vmov	d0, r2, r3
 801df98:	b002      	add	sp, #8
 801df9a:	4770      	bx	lr
 801df9c:	4249      	negs	r1, r1
 801df9e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801dfa2:	ea4f 5021 	mov.w	r0, r1, asr #20
 801dfa6:	f04f 0200 	mov.w	r2, #0
 801dfaa:	f04f 0300 	mov.w	r3, #0
 801dfae:	da04      	bge.n	801dfba <__ulp+0x3e>
 801dfb0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801dfb4:	fa41 f300 	asr.w	r3, r1, r0
 801dfb8:	e7ec      	b.n	801df94 <__ulp+0x18>
 801dfba:	f1a0 0114 	sub.w	r1, r0, #20
 801dfbe:	291e      	cmp	r1, #30
 801dfc0:	bfda      	itte	le
 801dfc2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801dfc6:	fa20 f101 	lsrle.w	r1, r0, r1
 801dfca:	2101      	movgt	r1, #1
 801dfcc:	460a      	mov	r2, r1
 801dfce:	e7e1      	b.n	801df94 <__ulp+0x18>
 801dfd0:	7ff00000 	.word	0x7ff00000

0801dfd4 <__b2d>:
 801dfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfd6:	6905      	ldr	r5, [r0, #16]
 801dfd8:	f100 0714 	add.w	r7, r0, #20
 801dfdc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801dfe0:	1f2e      	subs	r6, r5, #4
 801dfe2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801dfe6:	4620      	mov	r0, r4
 801dfe8:	f7ff fd52 	bl	801da90 <__hi0bits>
 801dfec:	f1c0 0320 	rsb	r3, r0, #32
 801dff0:	280a      	cmp	r0, #10
 801dff2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e070 <__b2d+0x9c>
 801dff6:	600b      	str	r3, [r1, #0]
 801dff8:	dc14      	bgt.n	801e024 <__b2d+0x50>
 801dffa:	f1c0 0e0b 	rsb	lr, r0, #11
 801dffe:	fa24 f10e 	lsr.w	r1, r4, lr
 801e002:	42b7      	cmp	r7, r6
 801e004:	ea41 030c 	orr.w	r3, r1, ip
 801e008:	bf34      	ite	cc
 801e00a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e00e:	2100      	movcs	r1, #0
 801e010:	3015      	adds	r0, #21
 801e012:	fa04 f000 	lsl.w	r0, r4, r0
 801e016:	fa21 f10e 	lsr.w	r1, r1, lr
 801e01a:	ea40 0201 	orr.w	r2, r0, r1
 801e01e:	ec43 2b10 	vmov	d0, r2, r3
 801e022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e024:	42b7      	cmp	r7, r6
 801e026:	bf3a      	itte	cc
 801e028:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e02c:	f1a5 0608 	subcc.w	r6, r5, #8
 801e030:	2100      	movcs	r1, #0
 801e032:	380b      	subs	r0, #11
 801e034:	d017      	beq.n	801e066 <__b2d+0x92>
 801e036:	f1c0 0c20 	rsb	ip, r0, #32
 801e03a:	fa04 f500 	lsl.w	r5, r4, r0
 801e03e:	42be      	cmp	r6, r7
 801e040:	fa21 f40c 	lsr.w	r4, r1, ip
 801e044:	ea45 0504 	orr.w	r5, r5, r4
 801e048:	bf8c      	ite	hi
 801e04a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e04e:	2400      	movls	r4, #0
 801e050:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e054:	fa01 f000 	lsl.w	r0, r1, r0
 801e058:	fa24 f40c 	lsr.w	r4, r4, ip
 801e05c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e060:	ea40 0204 	orr.w	r2, r0, r4
 801e064:	e7db      	b.n	801e01e <__b2d+0x4a>
 801e066:	ea44 030c 	orr.w	r3, r4, ip
 801e06a:	460a      	mov	r2, r1
 801e06c:	e7d7      	b.n	801e01e <__b2d+0x4a>
 801e06e:	bf00      	nop
 801e070:	3ff00000 	.word	0x3ff00000

0801e074 <__d2b>:
 801e074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e078:	4689      	mov	r9, r1
 801e07a:	2101      	movs	r1, #1
 801e07c:	ec57 6b10 	vmov	r6, r7, d0
 801e080:	4690      	mov	r8, r2
 801e082:	f7ff fc0f 	bl	801d8a4 <_Balloc>
 801e086:	4604      	mov	r4, r0
 801e088:	b930      	cbnz	r0, 801e098 <__d2b+0x24>
 801e08a:	4602      	mov	r2, r0
 801e08c:	4b25      	ldr	r3, [pc, #148]	; (801e124 <__d2b+0xb0>)
 801e08e:	4826      	ldr	r0, [pc, #152]	; (801e128 <__d2b+0xb4>)
 801e090:	f240 310a 	movw	r1, #778	; 0x30a
 801e094:	f7fe f812 	bl	801c0bc <__assert_func>
 801e098:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e09c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e0a0:	bb35      	cbnz	r5, 801e0f0 <__d2b+0x7c>
 801e0a2:	2e00      	cmp	r6, #0
 801e0a4:	9301      	str	r3, [sp, #4]
 801e0a6:	d028      	beq.n	801e0fa <__d2b+0x86>
 801e0a8:	4668      	mov	r0, sp
 801e0aa:	9600      	str	r6, [sp, #0]
 801e0ac:	f7ff fd10 	bl	801dad0 <__lo0bits>
 801e0b0:	9900      	ldr	r1, [sp, #0]
 801e0b2:	b300      	cbz	r0, 801e0f6 <__d2b+0x82>
 801e0b4:	9a01      	ldr	r2, [sp, #4]
 801e0b6:	f1c0 0320 	rsb	r3, r0, #32
 801e0ba:	fa02 f303 	lsl.w	r3, r2, r3
 801e0be:	430b      	orrs	r3, r1
 801e0c0:	40c2      	lsrs	r2, r0
 801e0c2:	6163      	str	r3, [r4, #20]
 801e0c4:	9201      	str	r2, [sp, #4]
 801e0c6:	9b01      	ldr	r3, [sp, #4]
 801e0c8:	61a3      	str	r3, [r4, #24]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	bf14      	ite	ne
 801e0ce:	2202      	movne	r2, #2
 801e0d0:	2201      	moveq	r2, #1
 801e0d2:	6122      	str	r2, [r4, #16]
 801e0d4:	b1d5      	cbz	r5, 801e10c <__d2b+0x98>
 801e0d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e0da:	4405      	add	r5, r0
 801e0dc:	f8c9 5000 	str.w	r5, [r9]
 801e0e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e0e4:	f8c8 0000 	str.w	r0, [r8]
 801e0e8:	4620      	mov	r0, r4
 801e0ea:	b003      	add	sp, #12
 801e0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e0f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e0f4:	e7d5      	b.n	801e0a2 <__d2b+0x2e>
 801e0f6:	6161      	str	r1, [r4, #20]
 801e0f8:	e7e5      	b.n	801e0c6 <__d2b+0x52>
 801e0fa:	a801      	add	r0, sp, #4
 801e0fc:	f7ff fce8 	bl	801dad0 <__lo0bits>
 801e100:	9b01      	ldr	r3, [sp, #4]
 801e102:	6163      	str	r3, [r4, #20]
 801e104:	2201      	movs	r2, #1
 801e106:	6122      	str	r2, [r4, #16]
 801e108:	3020      	adds	r0, #32
 801e10a:	e7e3      	b.n	801e0d4 <__d2b+0x60>
 801e10c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e114:	f8c9 0000 	str.w	r0, [r9]
 801e118:	6918      	ldr	r0, [r3, #16]
 801e11a:	f7ff fcb9 	bl	801da90 <__hi0bits>
 801e11e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e122:	e7df      	b.n	801e0e4 <__d2b+0x70>
 801e124:	08021e10 	.word	0x08021e10
 801e128:	08021f04 	.word	0x08021f04

0801e12c <__ratio>:
 801e12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e130:	468a      	mov	sl, r1
 801e132:	4669      	mov	r1, sp
 801e134:	4683      	mov	fp, r0
 801e136:	f7ff ff4d 	bl	801dfd4 <__b2d>
 801e13a:	a901      	add	r1, sp, #4
 801e13c:	4650      	mov	r0, sl
 801e13e:	ec59 8b10 	vmov	r8, r9, d0
 801e142:	ee10 6a10 	vmov	r6, s0
 801e146:	f7ff ff45 	bl	801dfd4 <__b2d>
 801e14a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801e14e:	f8da 2010 	ldr.w	r2, [sl, #16]
 801e152:	eba3 0c02 	sub.w	ip, r3, r2
 801e156:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e15a:	1a9b      	subs	r3, r3, r2
 801e15c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e160:	ec55 4b10 	vmov	r4, r5, d0
 801e164:	2b00      	cmp	r3, #0
 801e166:	ee10 0a10 	vmov	r0, s0
 801e16a:	bfce      	itee	gt
 801e16c:	464a      	movgt	r2, r9
 801e16e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e172:	462a      	movle	r2, r5
 801e174:	464f      	mov	r7, r9
 801e176:	4629      	mov	r1, r5
 801e178:	bfcc      	ite	gt
 801e17a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e17e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801e182:	ec47 6b17 	vmov	d7, r6, r7
 801e186:	ec41 0b16 	vmov	d6, r0, r1
 801e18a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801e18e:	b003      	add	sp, #12
 801e190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e194 <__copybits>:
 801e194:	3901      	subs	r1, #1
 801e196:	b570      	push	{r4, r5, r6, lr}
 801e198:	1149      	asrs	r1, r1, #5
 801e19a:	6914      	ldr	r4, [r2, #16]
 801e19c:	3101      	adds	r1, #1
 801e19e:	f102 0314 	add.w	r3, r2, #20
 801e1a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e1a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e1aa:	1f05      	subs	r5, r0, #4
 801e1ac:	42a3      	cmp	r3, r4
 801e1ae:	d30c      	bcc.n	801e1ca <__copybits+0x36>
 801e1b0:	1aa3      	subs	r3, r4, r2
 801e1b2:	3b11      	subs	r3, #17
 801e1b4:	f023 0303 	bic.w	r3, r3, #3
 801e1b8:	3211      	adds	r2, #17
 801e1ba:	42a2      	cmp	r2, r4
 801e1bc:	bf88      	it	hi
 801e1be:	2300      	movhi	r3, #0
 801e1c0:	4418      	add	r0, r3
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	4288      	cmp	r0, r1
 801e1c6:	d305      	bcc.n	801e1d4 <__copybits+0x40>
 801e1c8:	bd70      	pop	{r4, r5, r6, pc}
 801e1ca:	f853 6b04 	ldr.w	r6, [r3], #4
 801e1ce:	f845 6f04 	str.w	r6, [r5, #4]!
 801e1d2:	e7eb      	b.n	801e1ac <__copybits+0x18>
 801e1d4:	f840 3b04 	str.w	r3, [r0], #4
 801e1d8:	e7f4      	b.n	801e1c4 <__copybits+0x30>

0801e1da <__any_on>:
 801e1da:	f100 0214 	add.w	r2, r0, #20
 801e1de:	6900      	ldr	r0, [r0, #16]
 801e1e0:	114b      	asrs	r3, r1, #5
 801e1e2:	4298      	cmp	r0, r3
 801e1e4:	b510      	push	{r4, lr}
 801e1e6:	db11      	blt.n	801e20c <__any_on+0x32>
 801e1e8:	dd0a      	ble.n	801e200 <__any_on+0x26>
 801e1ea:	f011 011f 	ands.w	r1, r1, #31
 801e1ee:	d007      	beq.n	801e200 <__any_on+0x26>
 801e1f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e1f4:	fa24 f001 	lsr.w	r0, r4, r1
 801e1f8:	fa00 f101 	lsl.w	r1, r0, r1
 801e1fc:	428c      	cmp	r4, r1
 801e1fe:	d10b      	bne.n	801e218 <__any_on+0x3e>
 801e200:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e204:	4293      	cmp	r3, r2
 801e206:	d803      	bhi.n	801e210 <__any_on+0x36>
 801e208:	2000      	movs	r0, #0
 801e20a:	bd10      	pop	{r4, pc}
 801e20c:	4603      	mov	r3, r0
 801e20e:	e7f7      	b.n	801e200 <__any_on+0x26>
 801e210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e214:	2900      	cmp	r1, #0
 801e216:	d0f5      	beq.n	801e204 <__any_on+0x2a>
 801e218:	2001      	movs	r0, #1
 801e21a:	e7f6      	b.n	801e20a <__any_on+0x30>

0801e21c <_calloc_r>:
 801e21c:	b513      	push	{r0, r1, r4, lr}
 801e21e:	434a      	muls	r2, r1
 801e220:	4611      	mov	r1, r2
 801e222:	9201      	str	r2, [sp, #4]
 801e224:	f7fc f8cc 	bl	801a3c0 <_malloc_r>
 801e228:	4604      	mov	r4, r0
 801e22a:	b118      	cbz	r0, 801e234 <_calloc_r+0x18>
 801e22c:	9a01      	ldr	r2, [sp, #4]
 801e22e:	2100      	movs	r1, #0
 801e230:	f7fc f86e 	bl	801a310 <memset>
 801e234:	4620      	mov	r0, r4
 801e236:	b002      	add	sp, #8
 801e238:	bd10      	pop	{r4, pc}

0801e23a <__ssputs_r>:
 801e23a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e23e:	688e      	ldr	r6, [r1, #8]
 801e240:	429e      	cmp	r6, r3
 801e242:	4682      	mov	sl, r0
 801e244:	460c      	mov	r4, r1
 801e246:	4690      	mov	r8, r2
 801e248:	461f      	mov	r7, r3
 801e24a:	d838      	bhi.n	801e2be <__ssputs_r+0x84>
 801e24c:	898a      	ldrh	r2, [r1, #12]
 801e24e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e252:	d032      	beq.n	801e2ba <__ssputs_r+0x80>
 801e254:	6825      	ldr	r5, [r4, #0]
 801e256:	6909      	ldr	r1, [r1, #16]
 801e258:	eba5 0901 	sub.w	r9, r5, r1
 801e25c:	6965      	ldr	r5, [r4, #20]
 801e25e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e266:	3301      	adds	r3, #1
 801e268:	444b      	add	r3, r9
 801e26a:	106d      	asrs	r5, r5, #1
 801e26c:	429d      	cmp	r5, r3
 801e26e:	bf38      	it	cc
 801e270:	461d      	movcc	r5, r3
 801e272:	0553      	lsls	r3, r2, #21
 801e274:	d531      	bpl.n	801e2da <__ssputs_r+0xa0>
 801e276:	4629      	mov	r1, r5
 801e278:	f7fc f8a2 	bl	801a3c0 <_malloc_r>
 801e27c:	4606      	mov	r6, r0
 801e27e:	b950      	cbnz	r0, 801e296 <__ssputs_r+0x5c>
 801e280:	230c      	movs	r3, #12
 801e282:	f8ca 3000 	str.w	r3, [sl]
 801e286:	89a3      	ldrh	r3, [r4, #12]
 801e288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e28c:	81a3      	strh	r3, [r4, #12]
 801e28e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e296:	6921      	ldr	r1, [r4, #16]
 801e298:	464a      	mov	r2, r9
 801e29a:	f7fc f811 	bl	801a2c0 <memcpy>
 801e29e:	89a3      	ldrh	r3, [r4, #12]
 801e2a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e2a8:	81a3      	strh	r3, [r4, #12]
 801e2aa:	6126      	str	r6, [r4, #16]
 801e2ac:	6165      	str	r5, [r4, #20]
 801e2ae:	444e      	add	r6, r9
 801e2b0:	eba5 0509 	sub.w	r5, r5, r9
 801e2b4:	6026      	str	r6, [r4, #0]
 801e2b6:	60a5      	str	r5, [r4, #8]
 801e2b8:	463e      	mov	r6, r7
 801e2ba:	42be      	cmp	r6, r7
 801e2bc:	d900      	bls.n	801e2c0 <__ssputs_r+0x86>
 801e2be:	463e      	mov	r6, r7
 801e2c0:	4632      	mov	r2, r6
 801e2c2:	6820      	ldr	r0, [r4, #0]
 801e2c4:	4641      	mov	r1, r8
 801e2c6:	f7fc f809 	bl	801a2dc <memmove>
 801e2ca:	68a3      	ldr	r3, [r4, #8]
 801e2cc:	6822      	ldr	r2, [r4, #0]
 801e2ce:	1b9b      	subs	r3, r3, r6
 801e2d0:	4432      	add	r2, r6
 801e2d2:	60a3      	str	r3, [r4, #8]
 801e2d4:	6022      	str	r2, [r4, #0]
 801e2d6:	2000      	movs	r0, #0
 801e2d8:	e7db      	b.n	801e292 <__ssputs_r+0x58>
 801e2da:	462a      	mov	r2, r5
 801e2dc:	f000 fb1a 	bl	801e914 <_realloc_r>
 801e2e0:	4606      	mov	r6, r0
 801e2e2:	2800      	cmp	r0, #0
 801e2e4:	d1e1      	bne.n	801e2aa <__ssputs_r+0x70>
 801e2e6:	6921      	ldr	r1, [r4, #16]
 801e2e8:	4650      	mov	r0, sl
 801e2ea:	f7fc f819 	bl	801a320 <_free_r>
 801e2ee:	e7c7      	b.n	801e280 <__ssputs_r+0x46>

0801e2f0 <_svfiprintf_r>:
 801e2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2f4:	4698      	mov	r8, r3
 801e2f6:	898b      	ldrh	r3, [r1, #12]
 801e2f8:	061b      	lsls	r3, r3, #24
 801e2fa:	b09d      	sub	sp, #116	; 0x74
 801e2fc:	4607      	mov	r7, r0
 801e2fe:	460d      	mov	r5, r1
 801e300:	4614      	mov	r4, r2
 801e302:	d50e      	bpl.n	801e322 <_svfiprintf_r+0x32>
 801e304:	690b      	ldr	r3, [r1, #16]
 801e306:	b963      	cbnz	r3, 801e322 <_svfiprintf_r+0x32>
 801e308:	2140      	movs	r1, #64	; 0x40
 801e30a:	f7fc f859 	bl	801a3c0 <_malloc_r>
 801e30e:	6028      	str	r0, [r5, #0]
 801e310:	6128      	str	r0, [r5, #16]
 801e312:	b920      	cbnz	r0, 801e31e <_svfiprintf_r+0x2e>
 801e314:	230c      	movs	r3, #12
 801e316:	603b      	str	r3, [r7, #0]
 801e318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e31c:	e0d1      	b.n	801e4c2 <_svfiprintf_r+0x1d2>
 801e31e:	2340      	movs	r3, #64	; 0x40
 801e320:	616b      	str	r3, [r5, #20]
 801e322:	2300      	movs	r3, #0
 801e324:	9309      	str	r3, [sp, #36]	; 0x24
 801e326:	2320      	movs	r3, #32
 801e328:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e32c:	f8cd 800c 	str.w	r8, [sp, #12]
 801e330:	2330      	movs	r3, #48	; 0x30
 801e332:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e4dc <_svfiprintf_r+0x1ec>
 801e336:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e33a:	f04f 0901 	mov.w	r9, #1
 801e33e:	4623      	mov	r3, r4
 801e340:	469a      	mov	sl, r3
 801e342:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e346:	b10a      	cbz	r2, 801e34c <_svfiprintf_r+0x5c>
 801e348:	2a25      	cmp	r2, #37	; 0x25
 801e34a:	d1f9      	bne.n	801e340 <_svfiprintf_r+0x50>
 801e34c:	ebba 0b04 	subs.w	fp, sl, r4
 801e350:	d00b      	beq.n	801e36a <_svfiprintf_r+0x7a>
 801e352:	465b      	mov	r3, fp
 801e354:	4622      	mov	r2, r4
 801e356:	4629      	mov	r1, r5
 801e358:	4638      	mov	r0, r7
 801e35a:	f7ff ff6e 	bl	801e23a <__ssputs_r>
 801e35e:	3001      	adds	r0, #1
 801e360:	f000 80aa 	beq.w	801e4b8 <_svfiprintf_r+0x1c8>
 801e364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e366:	445a      	add	r2, fp
 801e368:	9209      	str	r2, [sp, #36]	; 0x24
 801e36a:	f89a 3000 	ldrb.w	r3, [sl]
 801e36e:	2b00      	cmp	r3, #0
 801e370:	f000 80a2 	beq.w	801e4b8 <_svfiprintf_r+0x1c8>
 801e374:	2300      	movs	r3, #0
 801e376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e37a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e37e:	f10a 0a01 	add.w	sl, sl, #1
 801e382:	9304      	str	r3, [sp, #16]
 801e384:	9307      	str	r3, [sp, #28]
 801e386:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e38a:	931a      	str	r3, [sp, #104]	; 0x68
 801e38c:	4654      	mov	r4, sl
 801e38e:	2205      	movs	r2, #5
 801e390:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e394:	4851      	ldr	r0, [pc, #324]	; (801e4dc <_svfiprintf_r+0x1ec>)
 801e396:	f7e1 ffab 	bl	80002f0 <memchr>
 801e39a:	9a04      	ldr	r2, [sp, #16]
 801e39c:	b9d8      	cbnz	r0, 801e3d6 <_svfiprintf_r+0xe6>
 801e39e:	06d0      	lsls	r0, r2, #27
 801e3a0:	bf44      	itt	mi
 801e3a2:	2320      	movmi	r3, #32
 801e3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e3a8:	0711      	lsls	r1, r2, #28
 801e3aa:	bf44      	itt	mi
 801e3ac:	232b      	movmi	r3, #43	; 0x2b
 801e3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e3b2:	f89a 3000 	ldrb.w	r3, [sl]
 801e3b6:	2b2a      	cmp	r3, #42	; 0x2a
 801e3b8:	d015      	beq.n	801e3e6 <_svfiprintf_r+0xf6>
 801e3ba:	9a07      	ldr	r2, [sp, #28]
 801e3bc:	4654      	mov	r4, sl
 801e3be:	2000      	movs	r0, #0
 801e3c0:	f04f 0c0a 	mov.w	ip, #10
 801e3c4:	4621      	mov	r1, r4
 801e3c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e3ca:	3b30      	subs	r3, #48	; 0x30
 801e3cc:	2b09      	cmp	r3, #9
 801e3ce:	d94e      	bls.n	801e46e <_svfiprintf_r+0x17e>
 801e3d0:	b1b0      	cbz	r0, 801e400 <_svfiprintf_r+0x110>
 801e3d2:	9207      	str	r2, [sp, #28]
 801e3d4:	e014      	b.n	801e400 <_svfiprintf_r+0x110>
 801e3d6:	eba0 0308 	sub.w	r3, r0, r8
 801e3da:	fa09 f303 	lsl.w	r3, r9, r3
 801e3de:	4313      	orrs	r3, r2
 801e3e0:	9304      	str	r3, [sp, #16]
 801e3e2:	46a2      	mov	sl, r4
 801e3e4:	e7d2      	b.n	801e38c <_svfiprintf_r+0x9c>
 801e3e6:	9b03      	ldr	r3, [sp, #12]
 801e3e8:	1d19      	adds	r1, r3, #4
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	9103      	str	r1, [sp, #12]
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	bfbb      	ittet	lt
 801e3f2:	425b      	neglt	r3, r3
 801e3f4:	f042 0202 	orrlt.w	r2, r2, #2
 801e3f8:	9307      	strge	r3, [sp, #28]
 801e3fa:	9307      	strlt	r3, [sp, #28]
 801e3fc:	bfb8      	it	lt
 801e3fe:	9204      	strlt	r2, [sp, #16]
 801e400:	7823      	ldrb	r3, [r4, #0]
 801e402:	2b2e      	cmp	r3, #46	; 0x2e
 801e404:	d10c      	bne.n	801e420 <_svfiprintf_r+0x130>
 801e406:	7863      	ldrb	r3, [r4, #1]
 801e408:	2b2a      	cmp	r3, #42	; 0x2a
 801e40a:	d135      	bne.n	801e478 <_svfiprintf_r+0x188>
 801e40c:	9b03      	ldr	r3, [sp, #12]
 801e40e:	1d1a      	adds	r2, r3, #4
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	9203      	str	r2, [sp, #12]
 801e414:	2b00      	cmp	r3, #0
 801e416:	bfb8      	it	lt
 801e418:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e41c:	3402      	adds	r4, #2
 801e41e:	9305      	str	r3, [sp, #20]
 801e420:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e4ec <_svfiprintf_r+0x1fc>
 801e424:	7821      	ldrb	r1, [r4, #0]
 801e426:	2203      	movs	r2, #3
 801e428:	4650      	mov	r0, sl
 801e42a:	f7e1 ff61 	bl	80002f0 <memchr>
 801e42e:	b140      	cbz	r0, 801e442 <_svfiprintf_r+0x152>
 801e430:	2340      	movs	r3, #64	; 0x40
 801e432:	eba0 000a 	sub.w	r0, r0, sl
 801e436:	fa03 f000 	lsl.w	r0, r3, r0
 801e43a:	9b04      	ldr	r3, [sp, #16]
 801e43c:	4303      	orrs	r3, r0
 801e43e:	3401      	adds	r4, #1
 801e440:	9304      	str	r3, [sp, #16]
 801e442:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e446:	4826      	ldr	r0, [pc, #152]	; (801e4e0 <_svfiprintf_r+0x1f0>)
 801e448:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e44c:	2206      	movs	r2, #6
 801e44e:	f7e1 ff4f 	bl	80002f0 <memchr>
 801e452:	2800      	cmp	r0, #0
 801e454:	d038      	beq.n	801e4c8 <_svfiprintf_r+0x1d8>
 801e456:	4b23      	ldr	r3, [pc, #140]	; (801e4e4 <_svfiprintf_r+0x1f4>)
 801e458:	bb1b      	cbnz	r3, 801e4a2 <_svfiprintf_r+0x1b2>
 801e45a:	9b03      	ldr	r3, [sp, #12]
 801e45c:	3307      	adds	r3, #7
 801e45e:	f023 0307 	bic.w	r3, r3, #7
 801e462:	3308      	adds	r3, #8
 801e464:	9303      	str	r3, [sp, #12]
 801e466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e468:	4433      	add	r3, r6
 801e46a:	9309      	str	r3, [sp, #36]	; 0x24
 801e46c:	e767      	b.n	801e33e <_svfiprintf_r+0x4e>
 801e46e:	fb0c 3202 	mla	r2, ip, r2, r3
 801e472:	460c      	mov	r4, r1
 801e474:	2001      	movs	r0, #1
 801e476:	e7a5      	b.n	801e3c4 <_svfiprintf_r+0xd4>
 801e478:	2300      	movs	r3, #0
 801e47a:	3401      	adds	r4, #1
 801e47c:	9305      	str	r3, [sp, #20]
 801e47e:	4619      	mov	r1, r3
 801e480:	f04f 0c0a 	mov.w	ip, #10
 801e484:	4620      	mov	r0, r4
 801e486:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e48a:	3a30      	subs	r2, #48	; 0x30
 801e48c:	2a09      	cmp	r2, #9
 801e48e:	d903      	bls.n	801e498 <_svfiprintf_r+0x1a8>
 801e490:	2b00      	cmp	r3, #0
 801e492:	d0c5      	beq.n	801e420 <_svfiprintf_r+0x130>
 801e494:	9105      	str	r1, [sp, #20]
 801e496:	e7c3      	b.n	801e420 <_svfiprintf_r+0x130>
 801e498:	fb0c 2101 	mla	r1, ip, r1, r2
 801e49c:	4604      	mov	r4, r0
 801e49e:	2301      	movs	r3, #1
 801e4a0:	e7f0      	b.n	801e484 <_svfiprintf_r+0x194>
 801e4a2:	ab03      	add	r3, sp, #12
 801e4a4:	9300      	str	r3, [sp, #0]
 801e4a6:	462a      	mov	r2, r5
 801e4a8:	4b0f      	ldr	r3, [pc, #60]	; (801e4e8 <_svfiprintf_r+0x1f8>)
 801e4aa:	a904      	add	r1, sp, #16
 801e4ac:	4638      	mov	r0, r7
 801e4ae:	f7fc f873 	bl	801a598 <_printf_float>
 801e4b2:	1c42      	adds	r2, r0, #1
 801e4b4:	4606      	mov	r6, r0
 801e4b6:	d1d6      	bne.n	801e466 <_svfiprintf_r+0x176>
 801e4b8:	89ab      	ldrh	r3, [r5, #12]
 801e4ba:	065b      	lsls	r3, r3, #25
 801e4bc:	f53f af2c 	bmi.w	801e318 <_svfiprintf_r+0x28>
 801e4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e4c2:	b01d      	add	sp, #116	; 0x74
 801e4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4c8:	ab03      	add	r3, sp, #12
 801e4ca:	9300      	str	r3, [sp, #0]
 801e4cc:	462a      	mov	r2, r5
 801e4ce:	4b06      	ldr	r3, [pc, #24]	; (801e4e8 <_svfiprintf_r+0x1f8>)
 801e4d0:	a904      	add	r1, sp, #16
 801e4d2:	4638      	mov	r0, r7
 801e4d4:	f7fc faec 	bl	801aab0 <_printf_i>
 801e4d8:	e7eb      	b.n	801e4b2 <_svfiprintf_r+0x1c2>
 801e4da:	bf00      	nop
 801e4dc:	08022064 	.word	0x08022064
 801e4e0:	0802206e 	.word	0x0802206e
 801e4e4:	0801a599 	.word	0x0801a599
 801e4e8:	0801e23b 	.word	0x0801e23b
 801e4ec:	0802206a 	.word	0x0802206a

0801e4f0 <__sfputc_r>:
 801e4f0:	6893      	ldr	r3, [r2, #8]
 801e4f2:	3b01      	subs	r3, #1
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	b410      	push	{r4}
 801e4f8:	6093      	str	r3, [r2, #8]
 801e4fa:	da08      	bge.n	801e50e <__sfputc_r+0x1e>
 801e4fc:	6994      	ldr	r4, [r2, #24]
 801e4fe:	42a3      	cmp	r3, r4
 801e500:	db01      	blt.n	801e506 <__sfputc_r+0x16>
 801e502:	290a      	cmp	r1, #10
 801e504:	d103      	bne.n	801e50e <__sfputc_r+0x1e>
 801e506:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e50a:	f7fd bd17 	b.w	801bf3c <__swbuf_r>
 801e50e:	6813      	ldr	r3, [r2, #0]
 801e510:	1c58      	adds	r0, r3, #1
 801e512:	6010      	str	r0, [r2, #0]
 801e514:	7019      	strb	r1, [r3, #0]
 801e516:	4608      	mov	r0, r1
 801e518:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e51c:	4770      	bx	lr

0801e51e <__sfputs_r>:
 801e51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e520:	4606      	mov	r6, r0
 801e522:	460f      	mov	r7, r1
 801e524:	4614      	mov	r4, r2
 801e526:	18d5      	adds	r5, r2, r3
 801e528:	42ac      	cmp	r4, r5
 801e52a:	d101      	bne.n	801e530 <__sfputs_r+0x12>
 801e52c:	2000      	movs	r0, #0
 801e52e:	e007      	b.n	801e540 <__sfputs_r+0x22>
 801e530:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e534:	463a      	mov	r2, r7
 801e536:	4630      	mov	r0, r6
 801e538:	f7ff ffda 	bl	801e4f0 <__sfputc_r>
 801e53c:	1c43      	adds	r3, r0, #1
 801e53e:	d1f3      	bne.n	801e528 <__sfputs_r+0xa>
 801e540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e544 <_vfiprintf_r>:
 801e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e548:	460d      	mov	r5, r1
 801e54a:	b09d      	sub	sp, #116	; 0x74
 801e54c:	4614      	mov	r4, r2
 801e54e:	4698      	mov	r8, r3
 801e550:	4606      	mov	r6, r0
 801e552:	b118      	cbz	r0, 801e55c <_vfiprintf_r+0x18>
 801e554:	6983      	ldr	r3, [r0, #24]
 801e556:	b90b      	cbnz	r3, 801e55c <_vfiprintf_r+0x18>
 801e558:	f7fe fcfc 	bl	801cf54 <__sinit>
 801e55c:	4b89      	ldr	r3, [pc, #548]	; (801e784 <_vfiprintf_r+0x240>)
 801e55e:	429d      	cmp	r5, r3
 801e560:	d11b      	bne.n	801e59a <_vfiprintf_r+0x56>
 801e562:	6875      	ldr	r5, [r6, #4]
 801e564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e566:	07d9      	lsls	r1, r3, #31
 801e568:	d405      	bmi.n	801e576 <_vfiprintf_r+0x32>
 801e56a:	89ab      	ldrh	r3, [r5, #12]
 801e56c:	059a      	lsls	r2, r3, #22
 801e56e:	d402      	bmi.n	801e576 <_vfiprintf_r+0x32>
 801e570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e572:	f7ff f912 	bl	801d79a <__retarget_lock_acquire_recursive>
 801e576:	89ab      	ldrh	r3, [r5, #12]
 801e578:	071b      	lsls	r3, r3, #28
 801e57a:	d501      	bpl.n	801e580 <_vfiprintf_r+0x3c>
 801e57c:	692b      	ldr	r3, [r5, #16]
 801e57e:	b9eb      	cbnz	r3, 801e5bc <_vfiprintf_r+0x78>
 801e580:	4629      	mov	r1, r5
 801e582:	4630      	mov	r0, r6
 801e584:	f7fd fd2c 	bl	801bfe0 <__swsetup_r>
 801e588:	b1c0      	cbz	r0, 801e5bc <_vfiprintf_r+0x78>
 801e58a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e58c:	07dc      	lsls	r4, r3, #31
 801e58e:	d50e      	bpl.n	801e5ae <_vfiprintf_r+0x6a>
 801e590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e594:	b01d      	add	sp, #116	; 0x74
 801e596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e59a:	4b7b      	ldr	r3, [pc, #492]	; (801e788 <_vfiprintf_r+0x244>)
 801e59c:	429d      	cmp	r5, r3
 801e59e:	d101      	bne.n	801e5a4 <_vfiprintf_r+0x60>
 801e5a0:	68b5      	ldr	r5, [r6, #8]
 801e5a2:	e7df      	b.n	801e564 <_vfiprintf_r+0x20>
 801e5a4:	4b79      	ldr	r3, [pc, #484]	; (801e78c <_vfiprintf_r+0x248>)
 801e5a6:	429d      	cmp	r5, r3
 801e5a8:	bf08      	it	eq
 801e5aa:	68f5      	ldreq	r5, [r6, #12]
 801e5ac:	e7da      	b.n	801e564 <_vfiprintf_r+0x20>
 801e5ae:	89ab      	ldrh	r3, [r5, #12]
 801e5b0:	0598      	lsls	r0, r3, #22
 801e5b2:	d4ed      	bmi.n	801e590 <_vfiprintf_r+0x4c>
 801e5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e5b6:	f7ff f8f1 	bl	801d79c <__retarget_lock_release_recursive>
 801e5ba:	e7e9      	b.n	801e590 <_vfiprintf_r+0x4c>
 801e5bc:	2300      	movs	r3, #0
 801e5be:	9309      	str	r3, [sp, #36]	; 0x24
 801e5c0:	2320      	movs	r3, #32
 801e5c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e5c6:	f8cd 800c 	str.w	r8, [sp, #12]
 801e5ca:	2330      	movs	r3, #48	; 0x30
 801e5cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e790 <_vfiprintf_r+0x24c>
 801e5d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e5d4:	f04f 0901 	mov.w	r9, #1
 801e5d8:	4623      	mov	r3, r4
 801e5da:	469a      	mov	sl, r3
 801e5dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e5e0:	b10a      	cbz	r2, 801e5e6 <_vfiprintf_r+0xa2>
 801e5e2:	2a25      	cmp	r2, #37	; 0x25
 801e5e4:	d1f9      	bne.n	801e5da <_vfiprintf_r+0x96>
 801e5e6:	ebba 0b04 	subs.w	fp, sl, r4
 801e5ea:	d00b      	beq.n	801e604 <_vfiprintf_r+0xc0>
 801e5ec:	465b      	mov	r3, fp
 801e5ee:	4622      	mov	r2, r4
 801e5f0:	4629      	mov	r1, r5
 801e5f2:	4630      	mov	r0, r6
 801e5f4:	f7ff ff93 	bl	801e51e <__sfputs_r>
 801e5f8:	3001      	adds	r0, #1
 801e5fa:	f000 80aa 	beq.w	801e752 <_vfiprintf_r+0x20e>
 801e5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e600:	445a      	add	r2, fp
 801e602:	9209      	str	r2, [sp, #36]	; 0x24
 801e604:	f89a 3000 	ldrb.w	r3, [sl]
 801e608:	2b00      	cmp	r3, #0
 801e60a:	f000 80a2 	beq.w	801e752 <_vfiprintf_r+0x20e>
 801e60e:	2300      	movs	r3, #0
 801e610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e618:	f10a 0a01 	add.w	sl, sl, #1
 801e61c:	9304      	str	r3, [sp, #16]
 801e61e:	9307      	str	r3, [sp, #28]
 801e620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e624:	931a      	str	r3, [sp, #104]	; 0x68
 801e626:	4654      	mov	r4, sl
 801e628:	2205      	movs	r2, #5
 801e62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e62e:	4858      	ldr	r0, [pc, #352]	; (801e790 <_vfiprintf_r+0x24c>)
 801e630:	f7e1 fe5e 	bl	80002f0 <memchr>
 801e634:	9a04      	ldr	r2, [sp, #16]
 801e636:	b9d8      	cbnz	r0, 801e670 <_vfiprintf_r+0x12c>
 801e638:	06d1      	lsls	r1, r2, #27
 801e63a:	bf44      	itt	mi
 801e63c:	2320      	movmi	r3, #32
 801e63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e642:	0713      	lsls	r3, r2, #28
 801e644:	bf44      	itt	mi
 801e646:	232b      	movmi	r3, #43	; 0x2b
 801e648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e64c:	f89a 3000 	ldrb.w	r3, [sl]
 801e650:	2b2a      	cmp	r3, #42	; 0x2a
 801e652:	d015      	beq.n	801e680 <_vfiprintf_r+0x13c>
 801e654:	9a07      	ldr	r2, [sp, #28]
 801e656:	4654      	mov	r4, sl
 801e658:	2000      	movs	r0, #0
 801e65a:	f04f 0c0a 	mov.w	ip, #10
 801e65e:	4621      	mov	r1, r4
 801e660:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e664:	3b30      	subs	r3, #48	; 0x30
 801e666:	2b09      	cmp	r3, #9
 801e668:	d94e      	bls.n	801e708 <_vfiprintf_r+0x1c4>
 801e66a:	b1b0      	cbz	r0, 801e69a <_vfiprintf_r+0x156>
 801e66c:	9207      	str	r2, [sp, #28]
 801e66e:	e014      	b.n	801e69a <_vfiprintf_r+0x156>
 801e670:	eba0 0308 	sub.w	r3, r0, r8
 801e674:	fa09 f303 	lsl.w	r3, r9, r3
 801e678:	4313      	orrs	r3, r2
 801e67a:	9304      	str	r3, [sp, #16]
 801e67c:	46a2      	mov	sl, r4
 801e67e:	e7d2      	b.n	801e626 <_vfiprintf_r+0xe2>
 801e680:	9b03      	ldr	r3, [sp, #12]
 801e682:	1d19      	adds	r1, r3, #4
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	9103      	str	r1, [sp, #12]
 801e688:	2b00      	cmp	r3, #0
 801e68a:	bfbb      	ittet	lt
 801e68c:	425b      	neglt	r3, r3
 801e68e:	f042 0202 	orrlt.w	r2, r2, #2
 801e692:	9307      	strge	r3, [sp, #28]
 801e694:	9307      	strlt	r3, [sp, #28]
 801e696:	bfb8      	it	lt
 801e698:	9204      	strlt	r2, [sp, #16]
 801e69a:	7823      	ldrb	r3, [r4, #0]
 801e69c:	2b2e      	cmp	r3, #46	; 0x2e
 801e69e:	d10c      	bne.n	801e6ba <_vfiprintf_r+0x176>
 801e6a0:	7863      	ldrb	r3, [r4, #1]
 801e6a2:	2b2a      	cmp	r3, #42	; 0x2a
 801e6a4:	d135      	bne.n	801e712 <_vfiprintf_r+0x1ce>
 801e6a6:	9b03      	ldr	r3, [sp, #12]
 801e6a8:	1d1a      	adds	r2, r3, #4
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	9203      	str	r2, [sp, #12]
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	bfb8      	it	lt
 801e6b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e6b6:	3402      	adds	r4, #2
 801e6b8:	9305      	str	r3, [sp, #20]
 801e6ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e7a0 <_vfiprintf_r+0x25c>
 801e6be:	7821      	ldrb	r1, [r4, #0]
 801e6c0:	2203      	movs	r2, #3
 801e6c2:	4650      	mov	r0, sl
 801e6c4:	f7e1 fe14 	bl	80002f0 <memchr>
 801e6c8:	b140      	cbz	r0, 801e6dc <_vfiprintf_r+0x198>
 801e6ca:	2340      	movs	r3, #64	; 0x40
 801e6cc:	eba0 000a 	sub.w	r0, r0, sl
 801e6d0:	fa03 f000 	lsl.w	r0, r3, r0
 801e6d4:	9b04      	ldr	r3, [sp, #16]
 801e6d6:	4303      	orrs	r3, r0
 801e6d8:	3401      	adds	r4, #1
 801e6da:	9304      	str	r3, [sp, #16]
 801e6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6e0:	482c      	ldr	r0, [pc, #176]	; (801e794 <_vfiprintf_r+0x250>)
 801e6e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e6e6:	2206      	movs	r2, #6
 801e6e8:	f7e1 fe02 	bl	80002f0 <memchr>
 801e6ec:	2800      	cmp	r0, #0
 801e6ee:	d03f      	beq.n	801e770 <_vfiprintf_r+0x22c>
 801e6f0:	4b29      	ldr	r3, [pc, #164]	; (801e798 <_vfiprintf_r+0x254>)
 801e6f2:	bb1b      	cbnz	r3, 801e73c <_vfiprintf_r+0x1f8>
 801e6f4:	9b03      	ldr	r3, [sp, #12]
 801e6f6:	3307      	adds	r3, #7
 801e6f8:	f023 0307 	bic.w	r3, r3, #7
 801e6fc:	3308      	adds	r3, #8
 801e6fe:	9303      	str	r3, [sp, #12]
 801e700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e702:	443b      	add	r3, r7
 801e704:	9309      	str	r3, [sp, #36]	; 0x24
 801e706:	e767      	b.n	801e5d8 <_vfiprintf_r+0x94>
 801e708:	fb0c 3202 	mla	r2, ip, r2, r3
 801e70c:	460c      	mov	r4, r1
 801e70e:	2001      	movs	r0, #1
 801e710:	e7a5      	b.n	801e65e <_vfiprintf_r+0x11a>
 801e712:	2300      	movs	r3, #0
 801e714:	3401      	adds	r4, #1
 801e716:	9305      	str	r3, [sp, #20]
 801e718:	4619      	mov	r1, r3
 801e71a:	f04f 0c0a 	mov.w	ip, #10
 801e71e:	4620      	mov	r0, r4
 801e720:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e724:	3a30      	subs	r2, #48	; 0x30
 801e726:	2a09      	cmp	r2, #9
 801e728:	d903      	bls.n	801e732 <_vfiprintf_r+0x1ee>
 801e72a:	2b00      	cmp	r3, #0
 801e72c:	d0c5      	beq.n	801e6ba <_vfiprintf_r+0x176>
 801e72e:	9105      	str	r1, [sp, #20]
 801e730:	e7c3      	b.n	801e6ba <_vfiprintf_r+0x176>
 801e732:	fb0c 2101 	mla	r1, ip, r1, r2
 801e736:	4604      	mov	r4, r0
 801e738:	2301      	movs	r3, #1
 801e73a:	e7f0      	b.n	801e71e <_vfiprintf_r+0x1da>
 801e73c:	ab03      	add	r3, sp, #12
 801e73e:	9300      	str	r3, [sp, #0]
 801e740:	462a      	mov	r2, r5
 801e742:	4b16      	ldr	r3, [pc, #88]	; (801e79c <_vfiprintf_r+0x258>)
 801e744:	a904      	add	r1, sp, #16
 801e746:	4630      	mov	r0, r6
 801e748:	f7fb ff26 	bl	801a598 <_printf_float>
 801e74c:	4607      	mov	r7, r0
 801e74e:	1c78      	adds	r0, r7, #1
 801e750:	d1d6      	bne.n	801e700 <_vfiprintf_r+0x1bc>
 801e752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e754:	07d9      	lsls	r1, r3, #31
 801e756:	d405      	bmi.n	801e764 <_vfiprintf_r+0x220>
 801e758:	89ab      	ldrh	r3, [r5, #12]
 801e75a:	059a      	lsls	r2, r3, #22
 801e75c:	d402      	bmi.n	801e764 <_vfiprintf_r+0x220>
 801e75e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e760:	f7ff f81c 	bl	801d79c <__retarget_lock_release_recursive>
 801e764:	89ab      	ldrh	r3, [r5, #12]
 801e766:	065b      	lsls	r3, r3, #25
 801e768:	f53f af12 	bmi.w	801e590 <_vfiprintf_r+0x4c>
 801e76c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e76e:	e711      	b.n	801e594 <_vfiprintf_r+0x50>
 801e770:	ab03      	add	r3, sp, #12
 801e772:	9300      	str	r3, [sp, #0]
 801e774:	462a      	mov	r2, r5
 801e776:	4b09      	ldr	r3, [pc, #36]	; (801e79c <_vfiprintf_r+0x258>)
 801e778:	a904      	add	r1, sp, #16
 801e77a:	4630      	mov	r0, r6
 801e77c:	f7fc f998 	bl	801aab0 <_printf_i>
 801e780:	e7e4      	b.n	801e74c <_vfiprintf_r+0x208>
 801e782:	bf00      	nop
 801e784:	08021e44 	.word	0x08021e44
 801e788:	08021e64 	.word	0x08021e64
 801e78c:	08021e24 	.word	0x08021e24
 801e790:	08022064 	.word	0x08022064
 801e794:	0802206e 	.word	0x0802206e
 801e798:	0801a599 	.word	0x0801a599
 801e79c:	0801e51f 	.word	0x0801e51f
 801e7a0:	0802206a 	.word	0x0802206a
 801e7a4:	00000000 	.word	0x00000000

0801e7a8 <nan>:
 801e7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e7b0 <nan+0x8>
 801e7ac:	4770      	bx	lr
 801e7ae:	bf00      	nop
 801e7b0:	00000000 	.word	0x00000000
 801e7b4:	7ff80000 	.word	0x7ff80000

0801e7b8 <__sread>:
 801e7b8:	b510      	push	{r4, lr}
 801e7ba:	460c      	mov	r4, r1
 801e7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7c0:	f000 f8ce 	bl	801e960 <_read_r>
 801e7c4:	2800      	cmp	r0, #0
 801e7c6:	bfab      	itete	ge
 801e7c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e7ca:	89a3      	ldrhlt	r3, [r4, #12]
 801e7cc:	181b      	addge	r3, r3, r0
 801e7ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e7d2:	bfac      	ite	ge
 801e7d4:	6563      	strge	r3, [r4, #84]	; 0x54
 801e7d6:	81a3      	strhlt	r3, [r4, #12]
 801e7d8:	bd10      	pop	{r4, pc}

0801e7da <__swrite>:
 801e7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7de:	461f      	mov	r7, r3
 801e7e0:	898b      	ldrh	r3, [r1, #12]
 801e7e2:	05db      	lsls	r3, r3, #23
 801e7e4:	4605      	mov	r5, r0
 801e7e6:	460c      	mov	r4, r1
 801e7e8:	4616      	mov	r6, r2
 801e7ea:	d505      	bpl.n	801e7f8 <__swrite+0x1e>
 801e7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7f0:	2302      	movs	r3, #2
 801e7f2:	2200      	movs	r2, #0
 801e7f4:	f000 f87c 	bl	801e8f0 <_lseek_r>
 801e7f8:	89a3      	ldrh	r3, [r4, #12]
 801e7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e7fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e802:	81a3      	strh	r3, [r4, #12]
 801e804:	4632      	mov	r2, r6
 801e806:	463b      	mov	r3, r7
 801e808:	4628      	mov	r0, r5
 801e80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e80e:	f000 b823 	b.w	801e858 <_write_r>

0801e812 <__sseek>:
 801e812:	b510      	push	{r4, lr}
 801e814:	460c      	mov	r4, r1
 801e816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e81a:	f000 f869 	bl	801e8f0 <_lseek_r>
 801e81e:	1c43      	adds	r3, r0, #1
 801e820:	89a3      	ldrh	r3, [r4, #12]
 801e822:	bf15      	itete	ne
 801e824:	6560      	strne	r0, [r4, #84]	; 0x54
 801e826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e82a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e82e:	81a3      	strheq	r3, [r4, #12]
 801e830:	bf18      	it	ne
 801e832:	81a3      	strhne	r3, [r4, #12]
 801e834:	bd10      	pop	{r4, pc}

0801e836 <__sclose>:
 801e836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e83a:	f000 b827 	b.w	801e88c <_close_r>

0801e83e <__ascii_wctomb>:
 801e83e:	b149      	cbz	r1, 801e854 <__ascii_wctomb+0x16>
 801e840:	2aff      	cmp	r2, #255	; 0xff
 801e842:	bf85      	ittet	hi
 801e844:	238a      	movhi	r3, #138	; 0x8a
 801e846:	6003      	strhi	r3, [r0, #0]
 801e848:	700a      	strbls	r2, [r1, #0]
 801e84a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801e84e:	bf98      	it	ls
 801e850:	2001      	movls	r0, #1
 801e852:	4770      	bx	lr
 801e854:	4608      	mov	r0, r1
 801e856:	4770      	bx	lr

0801e858 <_write_r>:
 801e858:	b538      	push	{r3, r4, r5, lr}
 801e85a:	4d07      	ldr	r5, [pc, #28]	; (801e878 <_write_r+0x20>)
 801e85c:	4604      	mov	r4, r0
 801e85e:	4608      	mov	r0, r1
 801e860:	4611      	mov	r1, r2
 801e862:	2200      	movs	r2, #0
 801e864:	602a      	str	r2, [r5, #0]
 801e866:	461a      	mov	r2, r3
 801e868:	f7e3 fb1f 	bl	8001eaa <_write>
 801e86c:	1c43      	adds	r3, r0, #1
 801e86e:	d102      	bne.n	801e876 <_write_r+0x1e>
 801e870:	682b      	ldr	r3, [r5, #0]
 801e872:	b103      	cbz	r3, 801e876 <_write_r+0x1e>
 801e874:	6023      	str	r3, [r4, #0]
 801e876:	bd38      	pop	{r3, r4, r5, pc}
 801e878:	24003e60 	.word	0x24003e60

0801e87c <abort>:
 801e87c:	b508      	push	{r3, lr}
 801e87e:	2006      	movs	r0, #6
 801e880:	f000 f8a8 	bl	801e9d4 <raise>
 801e884:	2001      	movs	r0, #1
 801e886:	f7e3 fae9 	bl	8001e5c <_exit>
	...

0801e88c <_close_r>:
 801e88c:	b538      	push	{r3, r4, r5, lr}
 801e88e:	4d06      	ldr	r5, [pc, #24]	; (801e8a8 <_close_r+0x1c>)
 801e890:	2300      	movs	r3, #0
 801e892:	4604      	mov	r4, r0
 801e894:	4608      	mov	r0, r1
 801e896:	602b      	str	r3, [r5, #0]
 801e898:	f7e3 fb23 	bl	8001ee2 <_close>
 801e89c:	1c43      	adds	r3, r0, #1
 801e89e:	d102      	bne.n	801e8a6 <_close_r+0x1a>
 801e8a0:	682b      	ldr	r3, [r5, #0]
 801e8a2:	b103      	cbz	r3, 801e8a6 <_close_r+0x1a>
 801e8a4:	6023      	str	r3, [r4, #0]
 801e8a6:	bd38      	pop	{r3, r4, r5, pc}
 801e8a8:	24003e60 	.word	0x24003e60

0801e8ac <_fstat_r>:
 801e8ac:	b538      	push	{r3, r4, r5, lr}
 801e8ae:	4d07      	ldr	r5, [pc, #28]	; (801e8cc <_fstat_r+0x20>)
 801e8b0:	2300      	movs	r3, #0
 801e8b2:	4604      	mov	r4, r0
 801e8b4:	4608      	mov	r0, r1
 801e8b6:	4611      	mov	r1, r2
 801e8b8:	602b      	str	r3, [r5, #0]
 801e8ba:	f7e3 fb1e 	bl	8001efa <_fstat>
 801e8be:	1c43      	adds	r3, r0, #1
 801e8c0:	d102      	bne.n	801e8c8 <_fstat_r+0x1c>
 801e8c2:	682b      	ldr	r3, [r5, #0]
 801e8c4:	b103      	cbz	r3, 801e8c8 <_fstat_r+0x1c>
 801e8c6:	6023      	str	r3, [r4, #0]
 801e8c8:	bd38      	pop	{r3, r4, r5, pc}
 801e8ca:	bf00      	nop
 801e8cc:	24003e60 	.word	0x24003e60

0801e8d0 <_isatty_r>:
 801e8d0:	b538      	push	{r3, r4, r5, lr}
 801e8d2:	4d06      	ldr	r5, [pc, #24]	; (801e8ec <_isatty_r+0x1c>)
 801e8d4:	2300      	movs	r3, #0
 801e8d6:	4604      	mov	r4, r0
 801e8d8:	4608      	mov	r0, r1
 801e8da:	602b      	str	r3, [r5, #0]
 801e8dc:	f7e3 fb1d 	bl	8001f1a <_isatty>
 801e8e0:	1c43      	adds	r3, r0, #1
 801e8e2:	d102      	bne.n	801e8ea <_isatty_r+0x1a>
 801e8e4:	682b      	ldr	r3, [r5, #0]
 801e8e6:	b103      	cbz	r3, 801e8ea <_isatty_r+0x1a>
 801e8e8:	6023      	str	r3, [r4, #0]
 801e8ea:	bd38      	pop	{r3, r4, r5, pc}
 801e8ec:	24003e60 	.word	0x24003e60

0801e8f0 <_lseek_r>:
 801e8f0:	b538      	push	{r3, r4, r5, lr}
 801e8f2:	4d07      	ldr	r5, [pc, #28]	; (801e910 <_lseek_r+0x20>)
 801e8f4:	4604      	mov	r4, r0
 801e8f6:	4608      	mov	r0, r1
 801e8f8:	4611      	mov	r1, r2
 801e8fa:	2200      	movs	r2, #0
 801e8fc:	602a      	str	r2, [r5, #0]
 801e8fe:	461a      	mov	r2, r3
 801e900:	f7e3 fb16 	bl	8001f30 <_lseek>
 801e904:	1c43      	adds	r3, r0, #1
 801e906:	d102      	bne.n	801e90e <_lseek_r+0x1e>
 801e908:	682b      	ldr	r3, [r5, #0]
 801e90a:	b103      	cbz	r3, 801e90e <_lseek_r+0x1e>
 801e90c:	6023      	str	r3, [r4, #0]
 801e90e:	bd38      	pop	{r3, r4, r5, pc}
 801e910:	24003e60 	.word	0x24003e60

0801e914 <_realloc_r>:
 801e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e916:	4607      	mov	r7, r0
 801e918:	4614      	mov	r4, r2
 801e91a:	460e      	mov	r6, r1
 801e91c:	b921      	cbnz	r1, 801e928 <_realloc_r+0x14>
 801e91e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e922:	4611      	mov	r1, r2
 801e924:	f7fb bd4c 	b.w	801a3c0 <_malloc_r>
 801e928:	b922      	cbnz	r2, 801e934 <_realloc_r+0x20>
 801e92a:	f7fb fcf9 	bl	801a320 <_free_r>
 801e92e:	4625      	mov	r5, r4
 801e930:	4628      	mov	r0, r5
 801e932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e934:	f000 f86a 	bl	801ea0c <_malloc_usable_size_r>
 801e938:	42a0      	cmp	r0, r4
 801e93a:	d20f      	bcs.n	801e95c <_realloc_r+0x48>
 801e93c:	4621      	mov	r1, r4
 801e93e:	4638      	mov	r0, r7
 801e940:	f7fb fd3e 	bl	801a3c0 <_malloc_r>
 801e944:	4605      	mov	r5, r0
 801e946:	2800      	cmp	r0, #0
 801e948:	d0f2      	beq.n	801e930 <_realloc_r+0x1c>
 801e94a:	4631      	mov	r1, r6
 801e94c:	4622      	mov	r2, r4
 801e94e:	f7fb fcb7 	bl	801a2c0 <memcpy>
 801e952:	4631      	mov	r1, r6
 801e954:	4638      	mov	r0, r7
 801e956:	f7fb fce3 	bl	801a320 <_free_r>
 801e95a:	e7e9      	b.n	801e930 <_realloc_r+0x1c>
 801e95c:	4635      	mov	r5, r6
 801e95e:	e7e7      	b.n	801e930 <_realloc_r+0x1c>

0801e960 <_read_r>:
 801e960:	b538      	push	{r3, r4, r5, lr}
 801e962:	4d07      	ldr	r5, [pc, #28]	; (801e980 <_read_r+0x20>)
 801e964:	4604      	mov	r4, r0
 801e966:	4608      	mov	r0, r1
 801e968:	4611      	mov	r1, r2
 801e96a:	2200      	movs	r2, #0
 801e96c:	602a      	str	r2, [r5, #0]
 801e96e:	461a      	mov	r2, r3
 801e970:	f7e3 fa7e 	bl	8001e70 <_read>
 801e974:	1c43      	adds	r3, r0, #1
 801e976:	d102      	bne.n	801e97e <_read_r+0x1e>
 801e978:	682b      	ldr	r3, [r5, #0]
 801e97a:	b103      	cbz	r3, 801e97e <_read_r+0x1e>
 801e97c:	6023      	str	r3, [r4, #0]
 801e97e:	bd38      	pop	{r3, r4, r5, pc}
 801e980:	24003e60 	.word	0x24003e60

0801e984 <_raise_r>:
 801e984:	291f      	cmp	r1, #31
 801e986:	b538      	push	{r3, r4, r5, lr}
 801e988:	4604      	mov	r4, r0
 801e98a:	460d      	mov	r5, r1
 801e98c:	d904      	bls.n	801e998 <_raise_r+0x14>
 801e98e:	2316      	movs	r3, #22
 801e990:	6003      	str	r3, [r0, #0]
 801e992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e996:	bd38      	pop	{r3, r4, r5, pc}
 801e998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e99a:	b112      	cbz	r2, 801e9a2 <_raise_r+0x1e>
 801e99c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e9a0:	b94b      	cbnz	r3, 801e9b6 <_raise_r+0x32>
 801e9a2:	4620      	mov	r0, r4
 801e9a4:	f000 f830 	bl	801ea08 <_getpid_r>
 801e9a8:	462a      	mov	r2, r5
 801e9aa:	4601      	mov	r1, r0
 801e9ac:	4620      	mov	r0, r4
 801e9ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e9b2:	f000 b817 	b.w	801e9e4 <_kill_r>
 801e9b6:	2b01      	cmp	r3, #1
 801e9b8:	d00a      	beq.n	801e9d0 <_raise_r+0x4c>
 801e9ba:	1c59      	adds	r1, r3, #1
 801e9bc:	d103      	bne.n	801e9c6 <_raise_r+0x42>
 801e9be:	2316      	movs	r3, #22
 801e9c0:	6003      	str	r3, [r0, #0]
 801e9c2:	2001      	movs	r0, #1
 801e9c4:	e7e7      	b.n	801e996 <_raise_r+0x12>
 801e9c6:	2400      	movs	r4, #0
 801e9c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e9cc:	4628      	mov	r0, r5
 801e9ce:	4798      	blx	r3
 801e9d0:	2000      	movs	r0, #0
 801e9d2:	e7e0      	b.n	801e996 <_raise_r+0x12>

0801e9d4 <raise>:
 801e9d4:	4b02      	ldr	r3, [pc, #8]	; (801e9e0 <raise+0xc>)
 801e9d6:	4601      	mov	r1, r0
 801e9d8:	6818      	ldr	r0, [r3, #0]
 801e9da:	f7ff bfd3 	b.w	801e984 <_raise_r>
 801e9de:	bf00      	nop
 801e9e0:	24000430 	.word	0x24000430

0801e9e4 <_kill_r>:
 801e9e4:	b538      	push	{r3, r4, r5, lr}
 801e9e6:	4d07      	ldr	r5, [pc, #28]	; (801ea04 <_kill_r+0x20>)
 801e9e8:	2300      	movs	r3, #0
 801e9ea:	4604      	mov	r4, r0
 801e9ec:	4608      	mov	r0, r1
 801e9ee:	4611      	mov	r1, r2
 801e9f0:	602b      	str	r3, [r5, #0]
 801e9f2:	f7e3 fa21 	bl	8001e38 <_kill>
 801e9f6:	1c43      	adds	r3, r0, #1
 801e9f8:	d102      	bne.n	801ea00 <_kill_r+0x1c>
 801e9fa:	682b      	ldr	r3, [r5, #0]
 801e9fc:	b103      	cbz	r3, 801ea00 <_kill_r+0x1c>
 801e9fe:	6023      	str	r3, [r4, #0]
 801ea00:	bd38      	pop	{r3, r4, r5, pc}
 801ea02:	bf00      	nop
 801ea04:	24003e60 	.word	0x24003e60

0801ea08 <_getpid_r>:
 801ea08:	f7e3 ba0e 	b.w	8001e28 <_getpid>

0801ea0c <_malloc_usable_size_r>:
 801ea0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ea10:	1f18      	subs	r0, r3, #4
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	bfbc      	itt	lt
 801ea16:	580b      	ldrlt	r3, [r1, r0]
 801ea18:	18c0      	addlt	r0, r0, r3
 801ea1a:	4770      	bx	lr

0801ea1c <checkint>:
 801ea1c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801ea20:	2b7e      	cmp	r3, #126	; 0x7e
 801ea22:	dd10      	ble.n	801ea46 <checkint+0x2a>
 801ea24:	2b96      	cmp	r3, #150	; 0x96
 801ea26:	dc0c      	bgt.n	801ea42 <checkint+0x26>
 801ea28:	2201      	movs	r2, #1
 801ea2a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801ea2e:	fa02 f303 	lsl.w	r3, r2, r3
 801ea32:	1e5a      	subs	r2, r3, #1
 801ea34:	4202      	tst	r2, r0
 801ea36:	d106      	bne.n	801ea46 <checkint+0x2a>
 801ea38:	4203      	tst	r3, r0
 801ea3a:	bf0c      	ite	eq
 801ea3c:	2002      	moveq	r0, #2
 801ea3e:	2001      	movne	r0, #1
 801ea40:	4770      	bx	lr
 801ea42:	2002      	movs	r0, #2
 801ea44:	4770      	bx	lr
 801ea46:	2000      	movs	r0, #0
 801ea48:	4770      	bx	lr
 801ea4a:	0000      	movs	r0, r0
 801ea4c:	0000      	movs	r0, r0
	...

0801ea50 <powf>:
 801ea50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea52:	ee10 1a10 	vmov	r1, s0
 801ea56:	ee10 6a90 	vmov	r6, s1
 801ea5a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801ea5e:	0072      	lsls	r2, r6, #1
 801ea60:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801ea64:	b085      	sub	sp, #20
 801ea66:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801ea6a:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 801ea6e:	d256      	bcs.n	801eb1e <powf+0xce>
 801ea70:	4298      	cmp	r0, r3
 801ea72:	d256      	bcs.n	801eb22 <powf+0xd2>
 801ea74:	2000      	movs	r0, #0
 801ea76:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801ea7a:	4ea3      	ldr	r6, [pc, #652]	; (801ed08 <powf+0x2b8>)
 801ea7c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801ea80:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801ea84:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 801ea88:	0dd2      	lsrs	r2, r2, #23
 801ea8a:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 801ea8e:	05d2      	lsls	r2, r2, #23
 801ea90:	1a8b      	subs	r3, r1, r2
 801ea92:	ed97 5b00 	vldr	d5, [r7]
 801ea96:	ee07 3a90 	vmov	s15, r3
 801ea9a:	15d2      	asrs	r2, r2, #23
 801ea9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801eaa0:	eea5 6b07 	vfma.f64	d6, d5, d7
 801eaa4:	ed97 5b02 	vldr	d5, [r7, #8]
 801eaa8:	ee26 2b06 	vmul.f64	d2, d6, d6
 801eaac:	ee22 1b02 	vmul.f64	d1, d2, d2
 801eab0:	ee07 2a90 	vmov	s15, r2
 801eab4:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 801eab8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801eabc:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eac0:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 801eac4:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 801eac8:	eea6 5b04 	vfma.f64	d5, d6, d4
 801eacc:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 801ead0:	eea6 4b03 	vfma.f64	d4, d6, d3
 801ead4:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 801ead8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801eadc:	eea6 7b03 	vfma.f64	d7, d6, d3
 801eae0:	eea2 7b04 	vfma.f64	d7, d2, d4
 801eae4:	eea5 7b01 	vfma.f64	d7, d5, d1
 801eae8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801eaec:	ee10 1a90 	vmov	r1, s1
 801eaf0:	2300      	movs	r3, #0
 801eaf2:	2700      	movs	r7, #0
 801eaf4:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 801eaf8:	f248 06be 	movw	r6, #32958	; 0x80be
 801eafc:	429f      	cmp	r7, r3
 801eafe:	bf08      	it	eq
 801eb00:	4296      	cmpeq	r6, r2
 801eb02:	f080 80b1 	bcs.w	801ec68 <powf+0x218>
 801eb06:	ed9f 7b78 	vldr	d7, [pc, #480]	; 801ece8 <powf+0x298>
 801eb0a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801eb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb12:	dd79      	ble.n	801ec08 <powf+0x1b8>
 801eb14:	b005      	add	sp, #20
 801eb16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801eb1a:	f000 b91f 	b.w	801ed5c <__math_oflowf>
 801eb1e:	4298      	cmp	r0, r3
 801eb20:	d32d      	bcc.n	801eb7e <powf+0x12e>
 801eb22:	b952      	cbnz	r2, 801eb3a <powf+0xea>
 801eb24:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801eb28:	005b      	lsls	r3, r3, #1
 801eb2a:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801eb2e:	f240 80cd 	bls.w	801eccc <powf+0x27c>
 801eb32:	ee30 0a20 	vadd.f32	s0, s0, s1
 801eb36:	b005      	add	sp, #20
 801eb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb3a:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801eb3e:	d105      	bne.n	801eb4c <powf+0xfc>
 801eb40:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 801eb44:	0076      	lsls	r6, r6, #1
 801eb46:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 801eb4a:	e7f0      	b.n	801eb2e <powf+0xde>
 801eb4c:	004b      	lsls	r3, r1, #1
 801eb4e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801eb52:	d8ee      	bhi.n	801eb32 <powf+0xe2>
 801eb54:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801eb58:	d1eb      	bne.n	801eb32 <powf+0xe2>
 801eb5a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801eb5e:	f000 80b5 	beq.w	801eccc <powf+0x27c>
 801eb62:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801eb66:	ea6f 0606 	mvn.w	r6, r6
 801eb6a:	bf34      	ite	cc
 801eb6c:	2300      	movcc	r3, #0
 801eb6e:	2301      	movcs	r3, #1
 801eb70:	0ff6      	lsrs	r6, r6, #31
 801eb72:	42b3      	cmp	r3, r6
 801eb74:	f040 80ad 	bne.w	801ecd2 <powf+0x282>
 801eb78:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801eb7c:	e7db      	b.n	801eb36 <powf+0xe6>
 801eb7e:	004f      	lsls	r7, r1, #1
 801eb80:	1e7a      	subs	r2, r7, #1
 801eb82:	429a      	cmp	r2, r3
 801eb84:	d31c      	bcc.n	801ebc0 <powf+0x170>
 801eb86:	2900      	cmp	r1, #0
 801eb88:	ee20 0a00 	vmul.f32	s0, s0, s0
 801eb8c:	da0f      	bge.n	801ebae <powf+0x15e>
 801eb8e:	ee10 0a90 	vmov	r0, s1
 801eb92:	f7ff ff43 	bl	801ea1c <checkint>
 801eb96:	2801      	cmp	r0, #1
 801eb98:	d109      	bne.n	801ebae <powf+0x15e>
 801eb9a:	eeb1 0a40 	vneg.f32	s0, s0
 801eb9e:	b947      	cbnz	r7, 801ebb2 <powf+0x162>
 801eba0:	2e00      	cmp	r6, #0
 801eba2:	dac8      	bge.n	801eb36 <powf+0xe6>
 801eba4:	b005      	add	sp, #20
 801eba6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ebaa:	f000 b8dd 	b.w	801ed68 <__math_divzerof>
 801ebae:	2000      	movs	r0, #0
 801ebb0:	e7f5      	b.n	801eb9e <powf+0x14e>
 801ebb2:	2e00      	cmp	r6, #0
 801ebb4:	dabf      	bge.n	801eb36 <powf+0xe6>
 801ebb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ebba:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801ebbe:	e7ba      	b.n	801eb36 <powf+0xe6>
 801ebc0:	2900      	cmp	r1, #0
 801ebc2:	da1f      	bge.n	801ec04 <powf+0x1b4>
 801ebc4:	ee10 0a90 	vmov	r0, s1
 801ebc8:	f7ff ff28 	bl	801ea1c <checkint>
 801ebcc:	b920      	cbnz	r0, 801ebd8 <powf+0x188>
 801ebce:	b005      	add	sp, #20
 801ebd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ebd4:	f000 b8d8 	b.w	801ed88 <__math_invalidf>
 801ebd8:	2801      	cmp	r0, #1
 801ebda:	bf14      	ite	ne
 801ebdc:	2000      	movne	r0, #0
 801ebde:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801ebe2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ebe6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801ebea:	f4bf af44 	bcs.w	801ea76 <powf+0x26>
 801ebee:	eddf 7a47 	vldr	s15, [pc, #284]	; 801ed0c <powf+0x2bc>
 801ebf2:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ebf6:	ee10 3a10 	vmov	r3, s0
 801ebfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ebfe:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801ec02:	e738      	b.n	801ea76 <powf+0x26>
 801ec04:	2000      	movs	r0, #0
 801ec06:	e7ee      	b.n	801ebe6 <powf+0x196>
 801ec08:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801ecf0 <powf+0x2a0>
 801ec0c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801ec10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec14:	dd10      	ble.n	801ec38 <powf+0x1e8>
 801ec16:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801ec1a:	2800      	cmp	r0, #0
 801ec1c:	d15c      	bne.n	801ecd8 <powf+0x288>
 801ec1e:	9302      	str	r3, [sp, #8]
 801ec20:	eddd 7a02 	vldr	s15, [sp, #8]
 801ec24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ec28:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ec2c:	eef4 7a47 	vcmp.f32	s15, s14
 801ec30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec34:	f47f af6e 	bne.w	801eb14 <powf+0xc4>
 801ec38:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801ecf8 <powf+0x2a8>
 801ec3c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801ec40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec44:	d804      	bhi.n	801ec50 <powf+0x200>
 801ec46:	b005      	add	sp, #20
 801ec48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ec4c:	f000 b87a 	b.w	801ed44 <__math_uflowf>
 801ec50:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801ed00 <powf+0x2b0>
 801ec54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801ec58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec5c:	d504      	bpl.n	801ec68 <powf+0x218>
 801ec5e:	b005      	add	sp, #20
 801ec60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ec64:	f000 b874 	b.w	801ed50 <__math_may_uflowf>
 801ec68:	4b29      	ldr	r3, [pc, #164]	; (801ed10 <powf+0x2c0>)
 801ec6a:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 801ec6e:	ee30 6b07 	vadd.f64	d6, d0, d7
 801ec72:	ed8d 6b00 	vstr	d6, [sp]
 801ec76:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ec7a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801ec7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ec82:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801ec86:	f006 011f 	and.w	r1, r6, #31
 801ec8a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801ec8e:	e9d1 ce00 	ldrd	ip, lr, [r1]
 801ec92:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801ec96:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801ec9a:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 801ec9e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801eca2:	ee27 5b07 	vmul.f64	d5, d7, d7
 801eca6:	1836      	adds	r6, r6, r0
 801eca8:	2300      	movs	r3, #0
 801ecaa:	eb13 040c 	adds.w	r4, r3, ip
 801ecae:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 801ecb2:	eb41 050e 	adc.w	r5, r1, lr
 801ecb6:	eea7 0b04 	vfma.f64	d0, d7, d4
 801ecba:	ec45 4b17 	vmov	d7, r4, r5
 801ecbe:	eea6 0b05 	vfma.f64	d0, d6, d5
 801ecc2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ecc6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ecca:	e734      	b.n	801eb36 <powf+0xe6>
 801eccc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ecd0:	e731      	b.n	801eb36 <powf+0xe6>
 801ecd2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801ed14 <powf+0x2c4>
 801ecd6:	e72e      	b.n	801eb36 <powf+0xe6>
 801ecd8:	9303      	str	r3, [sp, #12]
 801ecda:	eddd 7a03 	vldr	s15, [sp, #12]
 801ecde:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801ece2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ece6:	e7a1      	b.n	801ec2c <powf+0x1dc>
 801ece8:	ffd1d571 	.word	0xffd1d571
 801ecec:	405fffff 	.word	0x405fffff
 801ecf0:	ffa3aae2 	.word	0xffa3aae2
 801ecf4:	405fffff 	.word	0x405fffff
 801ecf8:	00000000 	.word	0x00000000
 801ecfc:	c062c000 	.word	0xc062c000
 801ed00:	00000000 	.word	0x00000000
 801ed04:	c062a000 	.word	0xc062a000
 801ed08:	08022078 	.word	0x08022078
 801ed0c:	4b000000 	.word	0x4b000000
 801ed10:	080221a0 	.word	0x080221a0
 801ed14:	00000000 	.word	0x00000000

0801ed18 <with_errnof>:
 801ed18:	b513      	push	{r0, r1, r4, lr}
 801ed1a:	4604      	mov	r4, r0
 801ed1c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ed20:	f7fd fff8 	bl	801cd14 <__errno>
 801ed24:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ed28:	6004      	str	r4, [r0, #0]
 801ed2a:	b002      	add	sp, #8
 801ed2c:	bd10      	pop	{r4, pc}

0801ed2e <xflowf>:
 801ed2e:	b130      	cbz	r0, 801ed3e <xflowf+0x10>
 801ed30:	eef1 7a40 	vneg.f32	s15, s0
 801ed34:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ed38:	2022      	movs	r0, #34	; 0x22
 801ed3a:	f7ff bfed 	b.w	801ed18 <with_errnof>
 801ed3e:	eef0 7a40 	vmov.f32	s15, s0
 801ed42:	e7f7      	b.n	801ed34 <xflowf+0x6>

0801ed44 <__math_uflowf>:
 801ed44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ed4c <__math_uflowf+0x8>
 801ed48:	f7ff bff1 	b.w	801ed2e <xflowf>
 801ed4c:	10000000 	.word	0x10000000

0801ed50 <__math_may_uflowf>:
 801ed50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ed58 <__math_may_uflowf+0x8>
 801ed54:	f7ff bfeb 	b.w	801ed2e <xflowf>
 801ed58:	1a200000 	.word	0x1a200000

0801ed5c <__math_oflowf>:
 801ed5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ed64 <__math_oflowf+0x8>
 801ed60:	f7ff bfe5 	b.w	801ed2e <xflowf>
 801ed64:	70000000 	.word	0x70000000

0801ed68 <__math_divzerof>:
 801ed68:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ed6c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801ed70:	2800      	cmp	r0, #0
 801ed72:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801ed76:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801ed84 <__math_divzerof+0x1c>
 801ed7a:	2022      	movs	r0, #34	; 0x22
 801ed7c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801ed80:	f7ff bfca 	b.w	801ed18 <with_errnof>
 801ed84:	00000000 	.word	0x00000000

0801ed88 <__math_invalidf>:
 801ed88:	eef0 7a40 	vmov.f32	s15, s0
 801ed8c:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ed90:	eef4 7a67 	vcmp.f32	s15, s15
 801ed94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed98:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801ed9c:	d602      	bvs.n	801eda4 <__math_invalidf+0x1c>
 801ed9e:	2021      	movs	r0, #33	; 0x21
 801eda0:	f7ff bfba 	b.w	801ed18 <with_errnof>
 801eda4:	4770      	bx	lr
	...

0801eda8 <_init>:
 801eda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edaa:	bf00      	nop
 801edac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801edae:	bc08      	pop	{r3}
 801edb0:	469e      	mov	lr, r3
 801edb2:	4770      	bx	lr

0801edb4 <_fini>:
 801edb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edb6:	bf00      	nop
 801edb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801edba:	bc08      	pop	{r3}
 801edbc:	469e      	mov	lr, r3
 801edbe:	4770      	bx	lr
