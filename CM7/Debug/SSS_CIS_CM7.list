
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024a74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055c0  08024d18  08024d18  00034d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a2d8  0802a2d8  0004361c  2**0
                  CONTENTS
  4 .ARM          00000008  0802a2d8  0802a2d8  0003a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a2e0  0802a2e0  0004361c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a2e0  0802a2e0  0003a2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a2e4  0802a2e4  0003a2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000361c  24000000  0802a2e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a48  2400361c  0802d904  0004361c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400b064  0802d904  0004b064  2**0
                  ALLOC
 11 .lwip_sec     000019d0  30040000  0802d904  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004361c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00078249  00000000  00000000  0004364a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c464  00000000  00000000  000bb893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002e78  00000000  00000000  000c7cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002bd0  00000000  00000000  000cab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00052fc0  00000000  00000000  000cd740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005143c  00000000  00000000  00120700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c0631  00000000  00000000  00171b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0033216d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d7ac  00000000  00000000  003321c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400361c 	.word	0x2400361c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024cfc 	.word	0x08024cfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003620 	.word	0x24003620
 80002dc:	08024cfc 	.word	0x08024cfc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <cisynth_ifft>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int cisynth_ifft(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	ed2d 8b02 	vpush	{d8}
 8000a76:	b0c7      	sub	sp, #284	; 0x11c
 8000a78:	af02      	add	r7, sp, #8
	uint8_t FreqStr[256] = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	22fc      	movs	r2, #252	; 0xfc
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f01e fbc2 	bl	801f210 <memset>
	uint32_t cis_color = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	printf("Start BW ifft mode \n");
 8000a92:	4883      	ldr	r0, [pc, #524]	; (8000ca0 <cisynth_ifft+0x230>)
 8000a94:	f01f fb3c 	bl	8020110 <puts>

	cisynth_ifft_SetHint();
 8000a98:	f000 f90e 	bl	8000cb8 <cisynth_ifft_SetHint>
	pcm5102_Init();
 8000a9c:	f01d feda 	bl	801e854 <pcm5102_Init>
	cis_Init(IFFT_MODE);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f01d f97d 	bl	801dda0 <cis_Init>
	synth_IfftInit();
 8000aa6:	f011 fcdf 	bl	8012468 <synth_IfftInit>
	//	cis_Test();

	/* Infinite loop */
	static uint32_t start_tick;
	uint32_t latency;
	int32_t i = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
//	uint32_t note = 0;

	while (1)
	{
		start_tick = HAL_GetTick();
 8000ab0:	f003 fbec 	bl	800428c <HAL_GetTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a7b      	ldr	r2, [pc, #492]	; (8000ca4 <cisynth_ifft+0x234>)
 8000ab8:	6013      	str	r3, [r2, #0]
//		synth_SetImageData(50, 32760); //for testing
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000aba:	e002      	b.n	8000ac2 <cisynth_ifft+0x52>
		{
			synth_AudioProcess(IFFT_MODE);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f011 ff93 	bl	80129e8 <synth_AudioProcess>
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac2:	4b79      	ldr	r3, [pc, #484]	; (8000ca8 <cisynth_ifft+0x238>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000aca:	d3f7      	bcc.n	8000abc <cisynth_ifft+0x4c>
		}

		latency = HAL_GetTick() - start_tick;
 8000acc:	f003 fbde 	bl	800428c <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	4b74      	ldr	r3, [pc, #464]	; (8000ca4 <cisynth_ifft+0x234>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		sprintf((char *)FreqStr, "%dHz", (int)((synth_process_cnt * 1000) / latency));
 8000adc:	4b72      	ldr	r3, [pc, #456]	; (8000ca8 <cisynth_ifft+0x238>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae4:	fb02 f203 	mul.w	r2, r2, r3
 8000ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	496d      	ldr	r1, [pc, #436]	; (8000cac <cisynth_ifft+0x23c>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f01f fb68 	bl	80201cc <siprintf>
		synth_process_cnt = 0;
 8000afc:	4b6a      	ldr	r3, [pc, #424]	; (8000ca8 <cisynth_ifft+0x238>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]

		ssd1362_drawRect(0, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH / 2 - 1, DISPLAY_AERA1_Y2POS, 3, false);
 8000b02:	2300      	movs	r3, #0
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	2303      	movs	r3, #3
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	231c      	movs	r3, #28
 8000b0c:	227f      	movs	r2, #127	; 0x7f
 8000b0e:	210a      	movs	r1, #10
 8000b10:	2000      	movs	r0, #0
 8000b12:	f01e f83b 	bl	801eb8c <ssd1362_drawRect>
		ssd1362_drawRect(DISPLAY_MAX_X_LENGTH / 2 + 1, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA1_Y2POS, 4, false);
 8000b16:	2300      	movs	r3, #0
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	231c      	movs	r3, #28
 8000b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b24:	210a      	movs	r1, #10
 8000b26:	2081      	movs	r0, #129	; 0x81
 8000b28:	f01e f830 	bl	801eb8c <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA2_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA2_Y2POS, 3, false);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	2303      	movs	r3, #3
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	232d      	movs	r3, #45	; 0x2d
 8000b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3a:	211d      	movs	r1, #29
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f01e f825 	bl	801eb8c <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA3_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA3_Y2POS, 8, false);
 8000b42:	2300      	movs	r3, #0
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	2308      	movs	r3, #8
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2336      	movs	r3, #54	; 0x36
 8000b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b50:	212e      	movs	r1, #46	; 0x2e
 8000b52:	2000      	movs	r0, #0
 8000b54:	f01e f81a 	bl	801eb8c <ssd1362_drawRect>
//		synth_SetImageData(120, 1000); //for testing
//		synth_SetImageData(185, 5700);
//		synth_SetImageData(60, 100); //for testing
//		synth_SetImageData(105, 5700);

		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b5e:	e037      	b.n	8000bd0 <cisynth_ifft+0x160>
		{
			ssd1362_drawPixel(i, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (synth_GetAudioData(i * 2) / 4096) - 1, 10, false);
 8000b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b64:	b29c      	uxth	r4, r3
 8000b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f011 fd85 	bl	801267c <synth_GetAudioData>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da01      	bge.n	8000b7c <cisynth_ifft+0x10c>
 8000b78:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000b7c:	131b      	asrs	r3, r3, #12
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3312      	adds	r3, #18
 8000b84:	b299      	uxth	r1, r3
 8000b86:	2300      	movs	r3, #0
 8000b88:	220a      	movs	r2, #10
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f01d ff94 	bl	801eab8 <ssd1362_drawPixel>
			ssd1362_drawPixel(i + (DISPLAY_MAX_X_LENGTH / 2) + 1, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (synth_GetAudioData(i * 2 + 1) / 4096) - 1, 10, false);
 8000b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	3381      	adds	r3, #129	; 0x81
 8000b98:	b29c      	uxth	r4, r3
 8000b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f011 fd6a 	bl	801267c <synth_GetAudioData>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da01      	bge.n	8000bb2 <cisynth_ifft+0x142>
 8000bae:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bb2:	131b      	asrs	r3, r3, #12
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	3312      	adds	r3, #18
 8000bba:	b299      	uxth	r1, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	220a      	movs	r2, #10
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f01d ff79 	bl	801eab8 <ssd1362_drawPixel>
		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bca:	3301      	adds	r3, #1
 8000bcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bd4:	2b7e      	cmp	r3, #126	; 0x7e
 8000bd6:	ddc3      	ble.n	8000b60 <cisynth_ifft+0xf0>
		}

		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000bde:	e040      	b.n	8000c62 <cisynth_ifft+0x1f2>
		{
//			cis_color = cis_GetBuffData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH))) >> 10;
			cis_color = synth_GetImageData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH))) >> 10;
 8000be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000bec:	f01d f974 	bl	801ded8 <cis_GetEffectivePixelNb>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bfa:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000cb0 <cisynth_ifft+0x240>
 8000bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c02:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0a:	ee17 0a90 	vmov	r0, s15
 8000c0e:	f011 fd45 	bl	801269c <synth_GetImageData>
 8000c12:	4603      	mov	r3, r0
 8000c14:	129b      	asrs	r3, r3, #10
 8000c16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			ssd1362_drawPixel(DISPLAY_MAX_X_LENGTH - 1 - i, DISPLAY_AERA2_Y1POS + DISPLAY_AERAS2_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - (cis_color) - 1, 15, false);
 8000c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000c24:	b298      	uxth	r0, r3
 8000c26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8000c30:	b299      	uxth	r1, r3
 8000c32:	2300      	movs	r3, #0
 8000c34:	220f      	movs	r2, #15
 8000c36:	f01d ff3f 	bl	801eab8 <ssd1362_drawPixel>

			ssd1362_drawVLine(DISPLAY_MAX_X_LENGTH - 1 - i, DISPLAY_AERA3_Y1POS + 1, DISPLAY_AERAS3_HEIGHT - 2, cis_color, false);
 8000c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000c44:	b298      	uxth	r0, r3
 8000c46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	9200      	str	r2, [sp, #0]
 8000c50:	2206      	movs	r2, #6
 8000c52:	212f      	movs	r1, #47	; 0x2f
 8000c54:	f01e f80b 	bl	801ec6e <ssd1362_drawVLine>
		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c66:	2bff      	cmp	r3, #255	; 0xff
 8000c68:	ddba      	ble.n	8000be0 <cisynth_ifft+0x170>

			//			cis_color = synth_GetImageData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
			//			cis_color = cis_color >> 11;
			//			ssd1362_drawPixel(i, DISPLAY_AERA5_YPOS + DISPLAY_AERAS_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - cis_color, 15, false);
		}
		ssd1362_drawRect(200, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	2304      	movs	r3, #4
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2309      	movs	r3, #9
 8000c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c78:	2100      	movs	r1, #0
 8000c7a:	20c8      	movs	r0, #200	; 0xc8
 8000c7c:	f01d ff86 	bl	801eb8c <ssd1362_drawRect>
		ssd1362_drawString(200, 1, (int8_t*)FreqStr, 15, 8);
 8000c80:	1d3a      	adds	r2, r7, #4
 8000c82:	2308      	movs	r3, #8
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	230f      	movs	r3, #15
 8000c88:	2101      	movs	r1, #1
 8000c8a:	20c8      	movs	r0, #200	; 0xc8
 8000c8c:	f01e f8e1 	bl	801ee52 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8000c90:	f01e f9ae 	bl	801eff0 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <cisynth_ifft+0x244>)
 8000c98:	f009 fb11 	bl	800a2be <HAL_GPIO_TogglePin>
		start_tick = HAL_GetTick();
 8000c9c:	e708      	b.n	8000ab0 <cisynth_ifft+0x40>
 8000c9e:	bf00      	nop
 8000ca0:	08024d18 	.word	0x08024d18
 8000ca4:	24003638 	.word	0x24003638
 8000ca8:	24004738 	.word	0x24004738
 8000cac:	08024d2c 	.word	0x08024d2c
 8000cb0:	43800000 	.word	0x43800000
 8000cb4:	58021c00 	.word	0x58021c00

08000cb8 <cisynth_ifft_SetHint>:
 * @brief  Display Audio demo hint
 * @param  None
 * @retval None
 */
static void cisynth_ifft_SetHint(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af02      	add	r7, sp, #8
	/* Set Audio header description */
	ssd1362_clearBuffer();
 8000cbe:	f01e f969 	bl	801ef94 <ssd1362_clearBuffer>
	ssd1362_drawRect(0, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	2309      	movs	r3, #9
 8000ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f01d ff5a 	bl	801eb8c <ssd1362_drawRect>
	ssd1362_drawString(100, 1, (int8_t *)"CISYNTH 3", 0xF, 8);
 8000cd8:	2308      	movs	r3, #8
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	230f      	movs	r3, #15
 8000cde:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <cisynth_ifft_SetHint+0x4c>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2064      	movs	r0, #100	; 0x64
 8000ce4:	f01e f8b5 	bl	801ee52 <ssd1362_drawString>
	ssd1362_drawString(0, 1, (int8_t *)"BW ifft", 0xF, 8);
 8000ce8:	2308      	movs	r3, #8
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	230f      	movs	r3, #15
 8000cee:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <cisynth_ifft_SetHint+0x50>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f01e f8ad 	bl	801ee52 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8000cf8:	f01e f97a 	bl	801eff0 <ssd1362_writeFullBuffer>
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	08024d34 	.word	0x08024d34
 8000d08:	08024d40 	.word	0x08024d40

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d10:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <SystemInit+0x104>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a3e      	ldr	r2, [pc, #248]	; (8000e10 <SystemInit+0x104>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000d20:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <SystemInit+0x104>)
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	4a3a      	ldr	r2, [pc, #232]	; (8000e10 <SystemInit+0x104>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2c:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <SystemInit+0x108>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	2b06      	cmp	r3, #6
 8000d36:	d807      	bhi.n	8000d48 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <SystemInit+0x108>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 030f 	bic.w	r3, r3, #15
 8000d40:	4a34      	ldr	r2, [pc, #208]	; (8000e14 <SystemInit+0x108>)
 8000d42:	f043 0307 	orr.w	r3, r3, #7
 8000d46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d48:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <SystemInit+0x10c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a32      	ldr	r2, [pc, #200]	; (8000e18 <SystemInit+0x10c>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <SystemInit+0x10c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <SystemInit+0x10c>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	492e      	ldr	r1, [pc, #184]	; (8000e18 <SystemInit+0x10c>)
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <SystemInit+0x110>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <SystemInit+0x108>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d72:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <SystemInit+0x108>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 030f 	bic.w	r3, r3, #15
 8000d7a:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <SystemInit+0x108>)
 8000d7c:	f043 0307 	orr.w	r3, r3, #7
 8000d80:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <SystemInit+0x10c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <SystemInit+0x10c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <SystemInit+0x10c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <SystemInit+0x10c>)
 8000d96:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <SystemInit+0x114>)
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <SystemInit+0x10c>)
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <SystemInit+0x118>)
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <SystemInit+0x10c>)
 8000da2:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <SystemInit+0x11c>)
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <SystemInit+0x10c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <SystemInit+0x10c>)
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <SystemInit+0x11c>)
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <SystemInit+0x10c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <SystemInit+0x10c>)
 8000dba:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <SystemInit+0x11c>)
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <SystemInit+0x10c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <SystemInit+0x10c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <SystemInit+0x10c>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <SystemInit+0x10c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <SystemInit+0x120>)
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <SystemInit+0x120>)
 8000ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de0:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <SystemInit+0x124>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <SystemInit+0x128>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dee:	d202      	bcs.n	8000df6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <SystemInit+0x12c>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <SystemInit+0x130>)
 8000df8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dfc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SystemInit+0x104>)
 8000e00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e04:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	52002000 	.word	0x52002000
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e20:	02020200 	.word	0x02020200
 8000e24:	01ff0000 	.word	0x01ff0000
 8000e28:	01010280 	.word	0x01010280
 8000e2c:	580000c0 	.word	0x580000c0
 8000e30:	5c001000 	.word	0x5c001000
 8000e34:	ffff0000 	.word	0xffff0000
 8000e38:	51008108 	.word	0x51008108
 8000e3c:	52004000 	.word	0x52004000

08000e40 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e46:	f107 0320 	add.w	r3, r7, #32
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC1_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 8000e64:	2310      	movs	r3, #16
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e68:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e6a:	4a39      	ldr	r2, [pc, #228]	; (8000f50 <MX_ADC1_Init+0x110>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000e6e:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e78:	2208      	movs	r2, #8
 8000e7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = oversamplingRatio;
 8000eca:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ece:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_MULTI_TRIGGER;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000edc:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000ee0:	f240 4201 	movw	r2, #1025	; 0x401
 8000ee4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee6:	4819      	ldr	r0, [pc, #100]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000ee8:	f003 fc58 	bl	800479c <HAL_ADC_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000ef2:	f001 ff01 	bl	8002cf8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	4619      	mov	r1, r3
 8000f00:	4812      	ldr	r0, [pc, #72]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000f02:	f004 fd4f 	bl	80059a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000f0c:	f001 fef4 	bl	8002cf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f10:	2301      	movs	r3, #1
 8000f12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f14:	2306      	movs	r3, #6
 8000f16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f20:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f22:	2304      	movs	r3, #4
 8000f24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MX_ADC1_Init+0x10c>)
 8000f34:	f003 fea0 	bl	8004c78 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000f3e:	f001 fedb 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	; 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	24005168 	.word	0x24005168
 8000f50:	40022000 	.word	0x40022000

08000f54 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC2_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	61fb      	str	r3, [r7, #28]

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000f72:	4a32      	ldr	r2, [pc, #200]	; (800103c <MX_ADC2_Init+0xe8>)
 8000f74:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000f78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000f80:	2208      	movs	r2, #8
 8000f82:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f90:	4b29      	ldr	r3, [pc, #164]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = ENABLE;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Oversampling.Ratio = oversamplingRatio;
 8000fd2:	4a19      	ldr	r2, [pc, #100]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_MULTI_TRIGGER;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000fe8:	f240 4201 	movw	r2, #1025	; 0x401
 8000fec:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fee:	4812      	ldr	r0, [pc, #72]	; (8001038 <MX_ADC2_Init+0xe4>)
 8000ff0:	f003 fbd4 	bl	800479c <HAL_ADC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000ffa:	f001 fe7d 	bl	8002cf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_ADC2_Init+0xec>)
 8001000:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001002:	2306      	movs	r3, #6
 8001004:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8001006:	2302      	movs	r3, #2
 8001008:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800100a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800100e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001010:	2304      	movs	r3, #4
 8001012:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_ADC2_Init+0xe4>)
 8001022:	f003 fe29 	bl	8004c78 <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 800102c:	f001 fe64 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2400508c 	.word	0x2400508c
 800103c:	40022100 	.word	0x40022100
 8001040:	04300002 	.word	0x04300002

08001044 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN ADC3_Init 1 */

  uint32_t oversamplingRatio;

  oversamplingRatio = CIS_IFFT_OVERSAMPLING_RATIO;    /* Oversampling ratio */
 800105c:	2310      	movs	r3, #16
 800105e:	61fb      	str	r3, [r7, #28]

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001060:	4b31      	ldr	r3, [pc, #196]	; (8001128 <MX_ADC3_Init+0xe4>)
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <MX_ADC3_Init+0xe8>)
 8001064:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <MX_ADC3_Init+0xe4>)
 8001068:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <MX_ADC3_Init+0xe4>)
 8001070:	2208      	movs	r2, #8
 8001072:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_ADC3_Init+0xe4>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_ADC3_Init+0xe4>)
 800107c:	2204      	movs	r2, #4
 800107e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_ADC3_Init+0xe4>)
 8001082:	2200      	movs	r2, #0
 8001084:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_ADC3_Init+0xe4>)
 8001088:	2200      	movs	r2, #0
 800108a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <MX_ADC3_Init+0xe4>)
 800108e:	2201      	movs	r2, #1
 8001090:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_ADC3_Init+0xe4>)
 8001094:	2200      	movs	r2, #0
 8001096:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <MX_ADC3_Init+0xe4>)
 800109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010aa:	2203      	movs	r2, #3
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = ENABLE;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Oversampling.Ratio = oversamplingRatio;
 80010c2:	4a19      	ldr	r2, [pc, #100]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_MULTI_TRIGGER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_RESUMED_MODE;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010d8:	f240 4201 	movw	r2, #1025	; 0x401
 80010dc:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010de:	4812      	ldr	r0, [pc, #72]	; (8001128 <MX_ADC3_Init+0xe4>)
 80010e0:	f003 fb5c 	bl	800479c <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 80010ea:	f001 fe05 	bl	8002cf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_ADC3_Init+0xec>)
 80010f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f2:	2306      	movs	r3, #6
 80010f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80010f6:	2302      	movs	r3, #2
 80010f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001100:	2304      	movs	r3, #4
 8001102:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_ADC3_Init+0xe4>)
 8001112:	f003 fdb1 	bl	8004c78 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800111c:	f001 fdec 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	240051cc 	.word	0x240051cc
 800112c:	58026000 	.word	0x58026000
 8001130:	04300002 	.word	0x04300002

08001134 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a91      	ldr	r2, [pc, #580]	; (8001388 <HAL_ADC_MspInit+0x254>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d15e      	bne.n	8001204 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001146:	4b91      	ldr	r3, [pc, #580]	; (800138c <HAL_ADC_MspInit+0x258>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a8f      	ldr	r2, [pc, #572]	; (800138c <HAL_ADC_MspInit+0x258>)
 800114e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001150:	4b8e      	ldr	r3, [pc, #568]	; (800138c <HAL_ADC_MspInit+0x258>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d10e      	bne.n	8001176 <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001158:	4b8d      	ldr	r3, [pc, #564]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 800115a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800115e:	4a8c      	ldr	r2, [pc, #560]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001168:	4b89      	ldr	r3, [pc, #548]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 800116a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b86      	ldr	r3, [pc, #536]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a84      	ldr	r2, [pc, #528]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b82      	ldr	r3, [pc, #520]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8001194:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001198:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800119c:	f003 f8c6 	bl	800432c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011a0:	4b7c      	ldr	r3, [pc, #496]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011a2:	4a7d      	ldr	r2, [pc, #500]	; (8001398 <HAL_ADC_MspInit+0x264>)
 80011a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011a6:	4b7b      	ldr	r3, [pc, #492]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011a8:	2209      	movs	r2, #9
 80011aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ac:	4b79      	ldr	r3, [pc, #484]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b78      	ldr	r3, [pc, #480]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b76      	ldr	r3, [pc, #472]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c0:	4b74      	ldr	r3, [pc, #464]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c8:	4b72      	ldr	r3, [pc, #456]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d0:	4b70      	ldr	r3, [pc, #448]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011d8:	4b6e      	ldr	r3, [pc, #440]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e0:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e6:	486b      	ldr	r0, [pc, #428]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011e8:	f004 ff44 	bl	8006074 <HAL_DMA_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80011f2:	f001 fd81 	bl	8002cf8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a66      	ldr	r2, [pc, #408]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80011fc:	4a65      	ldr	r2, [pc, #404]	; (8001394 <HAL_ADC_MspInit+0x260>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001202:	e0bd      	b.n	8001380 <HAL_ADC_MspInit+0x24c>
  else if(adcHandle->Instance==ADC2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a64      	ldr	r2, [pc, #400]	; (800139c <HAL_ADC_MspInit+0x268>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d15e      	bne.n	80012cc <HAL_ADC_MspInit+0x198>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800120e:	4b5f      	ldr	r3, [pc, #380]	; (800138c <HAL_ADC_MspInit+0x258>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a5d      	ldr	r2, [pc, #372]	; (800138c <HAL_ADC_MspInit+0x258>)
 8001216:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001218:	4b5c      	ldr	r3, [pc, #368]	; (800138c <HAL_ADC_MspInit+0x258>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d10e      	bne.n	800123e <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001220:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001226:	4a5a      	ldr	r2, [pc, #360]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001230:	4b57      	ldr	r3, [pc, #348]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b54      	ldr	r3, [pc, #336]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800125c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001260:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001264:	f003 f862 	bl	800432c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc2.Instance = DMA2_Stream1;
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 800126a:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <HAL_ADC_MspInit+0x270>)
 800126c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 8001270:	220a      	movs	r2, #10
 8001272:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001280:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 8001282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001286:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 800128a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800128e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 8001292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001296:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 800129a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012a0:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 80012a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012a6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012ae:	483c      	ldr	r0, [pc, #240]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 80012b0:	f004 fee0 	bl	8006074 <HAL_DMA_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 80012ba:	f001 fd1d 	bl	8002cf8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a37      	ldr	r2, [pc, #220]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 80012c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012c4:	4a36      	ldr	r2, [pc, #216]	; (80013a0 <HAL_ADC_MspInit+0x26c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012ca:	e059      	b.n	8001380 <HAL_ADC_MspInit+0x24c>
  else if(adcHandle->Instance==ADC3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a35      	ldr	r2, [pc, #212]	; (80013a8 <HAL_ADC_MspInit+0x274>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d154      	bne.n	8001380 <HAL_ADC_MspInit+0x24c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 80012de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fa:	4a25      	ldr	r2, [pc, #148]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_ADC_MspInit+0x25c>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001312:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001316:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800131a:	f003 f807 	bl	800432c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream2;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001320:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <HAL_ADC_MspInit+0x27c>)
 8001322:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001326:	2273      	movs	r2, #115	; 0x73
 8001328:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_ADC_MspInit+0x278>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001344:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001354:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001358:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800135c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001366:	f004 fe85 	bl	8006074 <HAL_DMA_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_ADC_MspInit+0x240>
      Error_Handler();
 8001370:	f001 fcc2 	bl	8002cf8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_ADC_MspInit+0x278>)
 8001378:	64da      	str	r2, [r3, #76]	; 0x4c
 800137a:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <HAL_ADC_MspInit+0x278>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40022000 	.word	0x40022000
 800138c:	2400363c 	.word	0x2400363c
 8001390:	58024400 	.word	0x58024400
 8001394:	24005230 	.word	0x24005230
 8001398:	40020410 	.word	0x40020410
 800139c:	40022100 	.word	0x40022100
 80013a0:	240052a8 	.word	0x240052a8
 80013a4:	40020428 	.word	0x40020428
 80013a8:	58026000 	.word	0x58026000
 80013ac:	240050f0 	.word	0x240050f0
 80013b0:	40020440 	.word	0x40020440

080013b4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <MX_CRC_Init+0x3c>)
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <MX_CRC_Init+0x40>)
 80013bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_CRC_Init+0x3c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <MX_CRC_Init+0x3c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_CRC_Init+0x3c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <MX_CRC_Init+0x3c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_CRC_Init+0x3c>)
 80013d8:	2201      	movs	r2, #1
 80013da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_CRC_Init+0x3c>)
 80013de:	f004 fd5f 	bl	8005ea0 <HAL_CRC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013e8:	f001 fc86 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	24005320 	.word	0x24005320
 80013f4:	58024c00 	.word	0x58024c00

080013f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_CRC_MspInit+0x3c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10e      	bne.n	8001428 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_CRC_MspInit+0x40>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_CRC_MspInit+0x40>)
 8001412:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_CRC_MspInit+0x40>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	58024c00 	.word	0x58024c00
 8001438:	58024400 	.word	0x58024400

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_DMA_Init+0x8c>)
 8001444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <MX_DMA_Init+0x8c>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_DMA_Init+0x8c>)
 8001454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_DMA_Init+0x8c>)
 8001462:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <MX_DMA_Init+0x8c>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_DMA_Init+0x8c>)
 8001472:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	200c      	movs	r0, #12
 8001484:	f004 fc47 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001488:	200c      	movs	r0, #12
 800148a:	f004 fc5e 	bl	8005d4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2038      	movs	r0, #56	; 0x38
 8001494:	f004 fc3f 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001498:	2038      	movs	r0, #56	; 0x38
 800149a:	f004 fc56 	bl	8005d4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2039      	movs	r0, #57	; 0x39
 80014a4:	f004 fc37 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80014a8:	2039      	movs	r0, #57	; 0x39
 80014aa:	f004 fc4e 	bl	8005d4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	203a      	movs	r0, #58	; 0x3a
 80014b4:	f004 fc2f 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014b8:	203a      	movs	r0, #58	; 0x3a
 80014ba:	f004 fc46 	bl	8005d4a <HAL_NVIC_EnableIRQ>

}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	58024400 	.word	0x58024400

080014cc <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <MX_FMC_Init+0xf8>)
 80014fa:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <MX_FMC_Init+0xfc>)
 80014fc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001500:	4a32      	ldr	r2, [pc, #200]	; (80015cc <MX_FMC_Init+0x100>)
 8001502:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001504:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <MX_FMC_Init+0xf8>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001510:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <MX_FMC_Init+0xf8>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <MX_FMC_Init+0xf8>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001538:	2200      	movs	r2, #0
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <MX_FMC_Init+0xf8>)
 800153e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001546:	2200      	movs	r2, #0
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <MX_FMC_Init+0xf8>)
 800154c:	2200      	movs	r2, #0
 800154e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001552:	2200      	movs	r2, #0
 8001554:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_FMC_Init+0xf8>)
 8001558:	2200      	movs	r2, #0
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <MX_FMC_Init+0xf8>)
 800155e:	2200      	movs	r2, #0
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 8001562:	2308      	movs	r3, #8
 8001564:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001566:	230f      	movs	r3, #15
 8001568:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 800156a:	230a      	movs	r3, #10
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 800156e:	2305      	movs	r3, #5
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001572:	2310      	movs	r3, #16
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001576:	2311      	movs	r3, #17
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800157a:	2300      	movs	r3, #0
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800157e:	2308      	movs	r3, #8
 8001580:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001582:	230f      	movs	r3, #15
 8001584:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 8001586:	230a      	movs	r3, #10
 8001588:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 800158a:	2305      	movs	r3, #5
 800158c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800158e:	2310      	movs	r3, #16
 8001590:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001592:	2311      	movs	r3, #17
 8001594:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800159a:	463a      	mov	r2, r7
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <MX_FMC_Init+0xf8>)
 80015a4:	f00d ff8e 	bl	800f4c4 <HAL_SRAM_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 80015ae:	f001 fba3 	bl	8002cf8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 80015b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80015b6:	f002 fecf 	bl	8004358 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE END FMC_Init 2 */
}
 80015ba:	bf00      	nop
 80015bc:	3738      	adds	r7, #56	; 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	24005344 	.word	0x24005344
 80015c8:	52004000 	.word	0x52004000
 80015cc:	52004104 	.word	0x52004104

080015d0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0b6      	sub	sp, #216	; 0xd8
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_FMC_MspInit+0xfc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d169      	bne.n	80016c2 <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 80015ee:	4b37      	ldr	r3, [pc, #220]	; (80016cc <HAL_FMC_MspInit+0xfc>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	22bc      	movs	r2, #188	; 0xbc
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f01d fe07 	bl	801f210 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001606:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001608:	2300      	movs	r3, #0
 800160a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4618      	mov	r0, r3
 8001612:	f009 feb7 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 800161c:	f001 fb6c 	bl	8002cf8 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_FMC_MspInit+0x100>)
 8001622:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001626:	4a2a      	ldr	r2, [pc, #168]	; (80016d0 <HAL_FMC_MspInit+0x100>)
 8001628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800162c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <HAL_FMC_MspInit+0x100>)
 8001632:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 800163e:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8001642:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001658:	230c      	movs	r3, #12
 800165a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001662:	4619      	mov	r1, r3
 8001664:	481b      	ldr	r0, [pc, #108]	; (80016d4 <HAL_FMC_MspInit+0x104>)
 8001666:	f008 fc61 	bl	8009f2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166a:	2301      	movs	r3, #1
 800166c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001682:	230c      	movs	r3, #12
 8001684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001688:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800168c:	4619      	mov	r1, r3
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <HAL_FMC_MspInit+0x108>)
 8001690:	f008 fc4c 	bl	8009f2c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 8001694:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001698:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ae:	230c      	movs	r3, #12
 80016b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4808      	ldr	r0, [pc, #32]	; (80016dc <HAL_FMC_MspInit+0x10c>)
 80016bc:	f008 fc36 	bl	8009f2c <HAL_GPIO_Init>
 80016c0:	e000      	b.n	80016c4 <HAL_FMC_MspInit+0xf4>
    return;
 80016c2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016c4:	37d8      	adds	r7, #216	; 0xd8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	24003640 	.word	0x24003640
 80016d0:	58024400 	.word	0x58024400
 80016d4:	58020c00 	.word	0x58020c00
 80016d8:	58021400 	.word	0x58021400
 80016dc:	58021000 	.word	0x58021000

080016e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016e8:	f7ff ff72 	bl	80015d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08e      	sub	sp, #56	; 0x38
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b96      	ldr	r3, [pc, #600]	; (8001964 <MX_GPIO_Init+0x270>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	4a94      	ldr	r2, [pc, #592]	; (8001964 <MX_GPIO_Init+0x270>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171a:	4b92      	ldr	r3, [pc, #584]	; (8001964 <MX_GPIO_Init+0x270>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001728:	4b8e      	ldr	r3, [pc, #568]	; (8001964 <MX_GPIO_Init+0x270>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172e:	4a8d      	ldr	r2, [pc, #564]	; (8001964 <MX_GPIO_Init+0x270>)
 8001730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001738:	4b8a      	ldr	r3, [pc, #552]	; (8001964 <MX_GPIO_Init+0x270>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	4b87      	ldr	r3, [pc, #540]	; (8001964 <MX_GPIO_Init+0x270>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	4a85      	ldr	r2, [pc, #532]	; (8001964 <MX_GPIO_Init+0x270>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001756:	4b83      	ldr	r3, [pc, #524]	; (8001964 <MX_GPIO_Init+0x270>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b7f      	ldr	r3, [pc, #508]	; (8001964 <MX_GPIO_Init+0x270>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	4a7e      	ldr	r2, [pc, #504]	; (8001964 <MX_GPIO_Init+0x270>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001774:	4b7b      	ldr	r3, [pc, #492]	; (8001964 <MX_GPIO_Init+0x270>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001782:	4b78      	ldr	r3, [pc, #480]	; (8001964 <MX_GPIO_Init+0x270>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a76      	ldr	r2, [pc, #472]	; (8001964 <MX_GPIO_Init+0x270>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b74      	ldr	r3, [pc, #464]	; (8001964 <MX_GPIO_Init+0x270>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <MX_GPIO_Init+0x270>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a6:	4a6f      	ldr	r2, [pc, #444]	; (8001964 <MX_GPIO_Init+0x270>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b0:	4b6c      	ldr	r3, [pc, #432]	; (8001964 <MX_GPIO_Init+0x270>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017be:	4b69      	ldr	r3, [pc, #420]	; (8001964 <MX_GPIO_Init+0x270>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c4:	4a67      	ldr	r2, [pc, #412]	; (8001964 <MX_GPIO_Init+0x270>)
 80017c6:	f043 0320 	orr.w	r3, r3, #32
 80017ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ce:	4b65      	ldr	r3, [pc, #404]	; (8001964 <MX_GPIO_Init+0x270>)
 80017d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017dc:	4b61      	ldr	r3, [pc, #388]	; (8001964 <MX_GPIO_Init+0x270>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e2:	4a60      	ldr	r2, [pc, #384]	; (8001964 <MX_GPIO_Init+0x270>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ec:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <MX_GPIO_Init+0x270>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RESET_Pin|MEMS_CS_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001800:	4859      	ldr	r0, [pc, #356]	; (8001968 <MX_GPIO_Init+0x274>)
 8001802:	f008 fd43 	bl	800a28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800180c:	4857      	ldr	r0, [pc, #348]	; (800196c <MX_GPIO_Init+0x278>)
 800180e:	f008 fd3d 	bl	800a28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f242 0104 	movw	r1, #8196	; 0x2004
 8001818:	4855      	ldr	r0, [pc, #340]	; (8001970 <MX_GPIO_Init+0x27c>)
 800181a:	f008 fd37 	bl	800a28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2124      	movs	r1, #36	; 0x24
 8001822:	4854      	ldr	r0, [pc, #336]	; (8001974 <MX_GPIO_Init+0x280>)
 8001824:	f008 fd32 	bl	800a28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2140      	movs	r1, #64	; 0x40
 800182c:	4852      	ldr	r0, [pc, #328]	; (8001978 <MX_GPIO_Init+0x284>)
 800182e:	f008 fd2d 	bl	800a28c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2148      	movs	r1, #72	; 0x48
 8001836:	4851      	ldr	r0, [pc, #324]	; (800197c <MX_GPIO_Init+0x288>)
 8001838:	f008 fd28 	bl	800a28c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|MEMS_CS_Pin;
 800183c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	4844      	ldr	r0, [pc, #272]	; (8001968 <MX_GPIO_Init+0x274>)
 8001856:	f008 fb69 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_FSYNC_Pin;
 800185a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	4619      	mov	r1, r3
 800186e:	483f      	ldr	r0, [pc, #252]	; (800196c <MX_GPIO_Init+0x278>)
 8001870:	f008 fb5c 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_RS_Pin;
 8001874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_RS_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	4619      	mov	r1, r3
 800188c:	4837      	ldr	r0, [pc, #220]	; (800196c <MX_GPIO_Init+0x278>)
 800188e:	f008 fb4d 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 8001892:	f242 0304 	movw	r3, #8196	; 0x2004
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4831      	ldr	r0, [pc, #196]	; (8001970 <MX_GPIO_Init+0x27c>)
 80018ac:	f008 fb3e 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 80018b0:	2324      	movs	r3, #36	; 0x24
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	482b      	ldr	r0, [pc, #172]	; (8001974 <MX_GPIO_Init+0x280>)
 80018c8:	f008 fb30 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4825      	ldr	r0, [pc, #148]	; (8001978 <MX_GPIO_Init+0x284>)
 80018e4:	f008 fb22 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 80018e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ee:	4b24      	ldr	r3, [pc, #144]	; (8001980 <MX_GPIO_Init+0x28c>)
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fa:	4619      	mov	r1, r3
 80018fc:	4821      	ldr	r0, [pc, #132]	; (8001984 <MX_GPIO_Init+0x290>)
 80018fe:	f008 fb15 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 8001902:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_GPIO_Init+0x28c>)
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <MX_GPIO_Init+0x294>)
 8001918:	f008 fb08 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	4812      	ldr	r0, [pc, #72]	; (800197c <MX_GPIO_Init+0x288>)
 8001934:	f008 fafa 	bl	8009f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_DEMP_Pin;
 8001938:	2308      	movs	r3, #8
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_DEMP_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <MX_GPIO_Init+0x288>)
 8001950:	f008 faec 	bl	8009f2c <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8001954:	2040      	movs	r0, #64	; 0x40
 8001956:	f008 fcfb 	bl	800a350 <HAL_I2CEx_EnableFastModePlus>

}
 800195a:	bf00      	nop
 800195c:	3738      	adds	r7, #56	; 0x38
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	58024400 	.word	0x58024400
 8001968:	58020400 	.word	0x58020400
 800196c:	58020000 	.word	0x58020000
 8001970:	58020800 	.word	0x58020800
 8001974:	58021800 	.word	0x58021800
 8001978:	58021400 	.word	0x58021400
 800197c:	58021c00 	.word	0x58021c00
 8001980:	11110000 	.word	0x11110000
 8001984:	58020c00 	.word	0x58020c00
 8001988:	58021000 	.word	0x58021000

0800198c <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <lwiperf_list_add+0x24>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <lwiperf_list_add+0x24>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	24003644 	.word	0x24003644

080019b4 <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <lwiperf_list_remove+0x78>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	e029      	b.n	8001a1c <lwiperf_list_remove+0x68>
    if (iter == item) {
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d120      	bne.n	8001a12 <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d104      	bne.n	80019e0 <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <lwiperf_list_remove+0x78>)
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e003      	b.n	80019e8 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	e00c      	b.n	8001a0a <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d105      	bne.n	8001a04 <lwiperf_list_remove+0x50>
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <lwiperf_list_remove+0x7c>)
 80019fa:	22d0      	movs	r2, #208	; 0xd0
 80019fc:	490d      	ldr	r1, [pc, #52]	; (8001a34 <lwiperf_list_remove+0x80>)
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <lwiperf_list_remove+0x84>)
 8001a00:	f01e fb00 	bl	8020004 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ef      	bne.n	80019f0 <lwiperf_list_remove+0x3c>
      }
      break;
 8001a10:	e008      	b.n	8001a24 <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1d2      	bne.n	80019c8 <lwiperf_list_remove+0x14>
    }
  }
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	24003644 	.word	0x24003644
 8001a30:	08024d48 	.word	0x08024d48
 8001a34:	08024d60 	.word	0x08024d60
 8001a38:	08024d70 	.word	0x08024d70

08001a3c <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <lwiperf_list_find+0x38>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	e008      	b.n	8001a5e <lwiperf_list_find+0x22>
    if (iter == item) {
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d101      	bne.n	8001a58 <lwiperf_list_find+0x1c>
      return item;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	e006      	b.n	8001a66 <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f3      	bne.n	8001a4c <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	24003644 	.word	0x24003644

08001a78 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	b08d      	sub	sp, #52	; 0x34
 8001a7c:	af06      	add	r7, sp, #24
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d038      	beq.n	8001afc <lwip_tcp_conn_report+0x84>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d034      	beq.n	8001afc <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 8001a92:	f010 fc0f 	bl	80122b4 <sys_now>
 8001a96:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e006      	b.n	8001abc <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699c      	ldr	r4, [r3, #24]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	469e      	mov	lr, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 8001ace:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 8001adc:	8b12      	ldrh	r2, [r2, #24]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001ae2:	78fe      	ldrb	r6, [r7, #3]
 8001ae4:	6978      	ldr	r0, [r7, #20]
 8001ae6:	9004      	str	r0, [sp, #16]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	9003      	str	r0, [sp, #12]
 8001aec:	9102      	str	r1, [sp, #8]
 8001aee:	9201      	str	r2, [sp, #4]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4663      	mov	r3, ip
 8001af4:	4672      	mov	r2, lr
 8001af6:	4631      	mov	r1, r6
 8001af8:	4628      	mov	r0, r5
 8001afa:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b04 <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff4e 	bl	80019b4 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ffab 	bl	8001a78 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d02f      	beq.n	8001b8a <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f017 f84d 	bl	8018bd0 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f017 f8d6 	bl	8018cf0 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f017 f874 	bl	8018c38 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f017 f84c 	bl	8018bf4 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f017 f88a 	bl	8018c7c <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f015 fd8d 	bl	801768c <tcp_close>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d017      	beq.n	8001bae <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f015 fe6c 	bl	8017860 <tcp_abort>
 8001b88:	e011      	b.n	8001bae <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f015 fd7c 	bl	801768c <tcp_close>
 8001b94:	4603      	mov	r3, r0
 8001b96:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 8001b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <lwiperf_tcp_close+0xaa>
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <lwiperf_tcp_close+0xb8>)
 8001ba2:	f240 120d 	movw	r2, #269	; 0x10d
 8001ba6:	4906      	ldr	r1, [pc, #24]	; (8001bc0 <lwiperf_tcp_close+0xbc>)
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <lwiperf_tcp_close+0xc0>)
 8001baa:	f01e fa2b 	bl	8020004 <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f013 fe3a 	bl	8015828 <mem_free>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08024d48 	.word	0x08024d48
 8001bc0:	08024d98 	.word	0x08024d98
 8001bc4:	08024d70 	.word	0x08024d70

08001bc8 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <lwiperf_tcp_client_send_more+0x1e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	791b      	ldrb	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <lwiperf_tcp_client_send_more+0x1e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	795b      	ldrb	r3, [r3, #5]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <lwiperf_tcp_client_send_more+0x2c>
 8001be6:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <lwiperf_tcp_client_send_more+0x1a4>)
 8001be8:	f240 121d 	movw	r2, #285	; 0x11d
 8001bec:	4960      	ldr	r1, [pc, #384]	; (8001d70 <lwiperf_tcp_client_send_more+0x1a8>)
 8001bee:	4861      	ldr	r0, [pc, #388]	; (8001d74 <lwiperf_tcp_client_send_more+0x1ac>)
 8001bf0:	f01e fa08 	bl	8020004 <iprintf>

  do {
    send_more = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01f      	beq.n	8001c44 <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 8001c04:	f010 fb56 	bl	80122b4 <sys_now>
 8001c08:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f011 f8fa 	bl	8012e12 <lwip_htonl>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	425b      	negs	r3, r3
 8001c22:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d316      	bcc.n	8001c66 <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001c38:	2101      	movs	r1, #1
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff62 	bl	8001b04 <lwiperf_tcp_close>
        return ERR_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e08e      	b.n	8001d62 <lwiperf_tcp_client_send_more+0x19a>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f011 f8e2 	bl	8012e12 <lwip_htonl>
 8001c4e:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d305      	bcc.n	8001c66 <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff51 	bl	8001b04 <lwiperf_tcp_close>
        return ERR_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e07d      	b.n	8001d62 <lwiperf_tcp_client_send_more+0x19a>
      }
    }

    if (conn->bytes_transferred < 24) {
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	2b17      	cmp	r3, #23
 8001c6c:	d810      	bhi.n	8001c90 <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	4413      	add	r3, r2
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f1c3 0318 	rsb	r3, r3, #24
 8001c86:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001c8e:	e034      	b.n	8001cfa <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2b2f      	cmp	r3, #47	; 0x2f
 8001c96:	d813      	bhi.n	8001cc0 <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	3b18      	subs	r3, #24
 8001ca4:	4413      	add	r3, r2
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8001cb2:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbe:	e01c      	b.n	8001cfa <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <lwiperf_tcp_client_send_more+0x1b0>)
 8001cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	1aca      	subs	r2, r1, r3
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <lwiperf_tcp_client_send_more+0x1b4>)
 8001cd8:	4413      	add	r3, r2
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = TCP_MSS;
 8001cdc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ce0:	853b      	strh	r3, [r7, #40]	; 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	2b30      	cmp	r3, #48	; 0x30
 8001ce8:	d102      	bne.n	8001cf0 <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 8001cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cee:	853b      	strh	r3, [r7, #40]	; 0x28
      }
      apiflags = 0; /* no copying needed */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    txlen = txlen_max;
 8001cfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cfc:	857b      	strh	r3, [r7, #42]	; 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6918      	ldr	r0, [r3, #16]
 8001d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d06:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d0a:	f019 fe9f 	bl	801ba4c <tcp_write>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 8001d12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d1a:	d102      	bne.n	8001d22 <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8001d1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d1e:	085b      	lsrs	r3, r3, #1
 8001d20:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8001d22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d2a:	d103      	bne.n	8001d34 <lwiperf_tcp_client_send_more+0x16c>
 8001d2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d2e:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001d32:	d2e4      	bcs.n	8001cfe <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8001d34:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d106      	bne.n	8001d4a <lwiperf_tcp_client_send_more+0x182>
      conn->bytes_transferred += txlen;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d42:	441a      	add	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
 8001d48:	e001      	b.n	8001d4e <lwiperf_tcp_client_send_more+0x186>
    } else {
      send_more = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  } while (send_more);
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f47f af4f 	bne.w	8001bf4 <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f01a fc60 	bl	801c620 <tcp_output>
  return ERR_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3730      	adds	r7, #48	; 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08024d48 	.word	0x08024d48
 8001d70:	08024da0 	.word	0x08024da0
 8001d74:	08024d70 	.word	0x08024d70
 8001d78:	cccccccd 	.word	0xcccccccd
 8001d7c:	08027bcc 	.word	0x08027bcc

08001d80 <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d006      	beq.n	8001daa <lwiperf_tcp_client_sent+0x2a>
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <lwiperf_tcp_client_sent+0x44>)
 8001d9e:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8001da2:	4909      	ldr	r1, [pc, #36]	; (8001dc8 <lwiperf_tcp_client_sent+0x48>)
 8001da4:	4809      	ldr	r0, [pc, #36]	; (8001dcc <lwiperf_tcp_client_sent+0x4c>)
 8001da6:	f01e f92d 	bl	8020004 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff08 	bl	8001bc8 <lwiperf_tcp_client_send_more>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	08024d48 	.word	0x08024d48
 8001dc8:	08024db0 	.word	0x08024db0
 8001dcc:	08024d70 	.word	0x08024d70

08001dd0 <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d006      	beq.n	8001dfa <lwiperf_tcp_client_connected+0x2a>
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <lwiperf_tcp_client_connected+0x60>)
 8001dee:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8001df2:	4910      	ldr	r1, [pc, #64]	; (8001e34 <lwiperf_tcp_client_connected+0x64>)
 8001df4:	4810      	ldr	r0, [pc, #64]	; (8001e38 <lwiperf_tcp_client_connected+0x68>)
 8001df6:	f01e f905 	bl	8020004 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001e02:	2105      	movs	r1, #5
 8001e04:	6978      	ldr	r0, [r7, #20]
 8001e06:	f7ff fe7d 	bl	8001b04 <lwiperf_tcp_close>
    return ERR_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e00c      	b.n	8001e28 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 8001e16:	f010 fa4d 	bl	80122b4 <sys_now>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f7ff fed1 	bl	8001bc8 <lwiperf_tcp_client_send_more>
 8001e26:	4603      	mov	r3, r0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08024d48 	.word	0x08024d48
 8001e34:	08024db0 	.word	0x08024db0
 8001e38:	08024d70 	.word	0x08024d70

08001e3c <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <lwiperf_tx_start_impl+0x24>
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <lwiperf_tx_start_impl+0x140>)
 8001e54:	f240 128b 	movw	r2, #395	; 0x18b
 8001e58:	4949      	ldr	r1, [pc, #292]	; (8001f80 <lwiperf_tx_start_impl+0x144>)
 8001e5a:	484a      	ldr	r0, [pc, #296]	; (8001f84 <lwiperf_tx_start_impl+0x148>)
 8001e5c:	f01e f8d2 	bl	8020004 <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <lwiperf_tx_start_impl+0x38>
 8001e66:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <lwiperf_tx_start_impl+0x140>)
 8001e68:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001e6c:	4944      	ldr	r1, [pc, #272]	; (8001f80 <lwiperf_tx_start_impl+0x144>)
 8001e6e:	4845      	ldr	r0, [pc, #276]	; (8001f84 <lwiperf_tx_start_impl+0x148>)
 8001e70:	f01e f8c8 	bl	8020004 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <lwiperf_tx_start_impl+0x4c>
 8001e7a:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <lwiperf_tx_start_impl+0x140>)
 8001e7c:	f240 128d 	movw	r2, #397	; 0x18d
 8001e80:	4941      	ldr	r1, [pc, #260]	; (8001f88 <lwiperf_tx_start_impl+0x14c>)
 8001e82:	4840      	ldr	r0, [pc, #256]	; (8001f84 <lwiperf_tx_start_impl+0x148>)
 8001e84:	f01e f8be 	bl	8020004 <iprintf>
  *new_conn = NULL;
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8001e8e:	2048      	movs	r0, #72	; 0x48
 8001e90:	f013 fe30 	bl	8015af4 <mem_malloc>
 8001e94:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea0:	e067      	b.n	8001f72 <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f016 fe86 	bl	8018bb4 <tcp_new_ip_type>
 8001ea8:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8001eb0:	69f8      	ldr	r0, [r7, #28]
 8001eb2:	f013 fcb9 	bl	8015828 <mem_free>
    return ERR_MEM;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eba:	e05a      	b.n	8001f72 <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8001ebc:	2248      	movs	r2, #72	; 0x48
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	69f8      	ldr	r0, [r7, #28]
 8001ec2:	f01d f9a5 	bl	801f210 <memset>
  client_conn->base.tcp = 1;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed0:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8001ed8:	f010 f9ec 	bl	80122b4 <sys_now>
 8001edc:	4602      	mov	r2, r0
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eec:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	3328      	adds	r3, #40	; 0x28
 8001f00:	2218      	movs	r2, #24
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f01d f95b 	bl	801f1c0 <memcpy>
  client_conn->have_settings_buf = 1;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  tcp_arg(newpcb, client_conn);
 8001f12:	69f9      	ldr	r1, [r7, #28]
 8001f14:	69b8      	ldr	r0, [r7, #24]
 8001f16:	f016 fe5b 	bl	8018bd0 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8001f1a:	491c      	ldr	r1, [pc, #112]	; (8001f8c <lwiperf_tx_start_impl+0x150>)
 8001f1c:	69b8      	ldr	r0, [r7, #24]
 8001f1e:	f016 fe8b 	bl	8018c38 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8001f22:	2202      	movs	r2, #2
 8001f24:	491a      	ldr	r1, [pc, #104]	; (8001f90 <lwiperf_tx_start_impl+0x154>)
 8001f26:	69b8      	ldr	r0, [r7, #24]
 8001f28:	f016 fee2 	bl	8018cf0 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8001f2c:	4919      	ldr	r1, [pc, #100]	; (8001f94 <lwiperf_tx_start_impl+0x158>)
 8001f2e:	69b8      	ldr	r0, [r7, #24]
 8001f30:	f016 fea4 	bl	8018c7c <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8001f3a:	897a      	ldrh	r2, [r7, #10]
 8001f3c:	f107 0110 	add.w	r1, r7, #16
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <lwiperf_tx_start_impl+0x15c>)
 8001f42:	69b8      	ldr	r0, [r7, #24]
 8001f44:	f015 fefc 	bl	8017d40 <tcp_connect>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8001f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001f54:	2102      	movs	r1, #2
 8001f56:	69f8      	ldr	r0, [r7, #28]
 8001f58:	f7ff fdd4 	bl	8001b04 <lwiperf_tcp_close>
    return err;
 8001f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f60:	e007      	b.n	8001f72 <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fd11 	bl	800198c <lwiperf_list_add>
  *new_conn = client_conn;
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08024d48 	.word	0x08024d48
 8001f80:	08024dc0 	.word	0x08024dc0
 8001f84:	08024d70 	.word	0x08024d70
 8001f88:	08024dd4 	.word	0x08024dd4
 8001f8c:	08001d81 	.word	0x08001d81
 8001f90:	08002271 	.word	0x08002271
 8001f94:	08002251 	.word	0x08002251
 8001f98:	08001dd1 	.word	0x08001dd1

08001f9c <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af04      	add	r7, sp, #16
 8001fa2:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	4618      	mov	r0, r3
 8001fae:	f010 ff30 	bl	8012e12 <lwip_htonl>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	1d18      	adds	r0, r3, #4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699e      	ldr	r6, [r3, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6892      	ldr	r2, [r2, #8]
 8001fce:	89fc      	ldrh	r4, [r7, #14]
 8001fd0:	f107 0108 	add.w	r1, r7, #8
 8001fd4:	9102      	str	r1, [sp, #8]
 8001fd6:	9201      	str	r2, [sp, #4]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4633      	mov	r3, r6
 8001fdc:	462a      	mov	r2, r5
 8001fde:	4621      	mov	r1, r4
 8001fe0:	f7ff ff2c 	bl	8001e3c <lwiperf_tx_start_impl>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 8001fe8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10c      	bne.n	800200a <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <lwiperf_tx_start_passive+0x68>
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <lwiperf_tx_start_passive+0x7c>)
 8001ff8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001ffc:	4907      	ldr	r1, [pc, #28]	; (800201c <lwiperf_tx_start_passive+0x80>)
 8001ffe:	4808      	ldr	r0, [pc, #32]	; (8002020 <lwiperf_tx_start_passive+0x84>)
 8002000:	f01e f800 	bl	8020004 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return ret;
 800200a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002016:	bf00      	nop
 8002018:	08024d48 	.word	0x08024d48
 800201c:	08024dd4 	.word	0x08024dd4
 8002020:	08024d70 	.word	0x08024d70

08002024 <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	429a      	cmp	r2, r3
 800203e:	d006      	beq.n	800204e <lwiperf_tcp_recv+0x2a>
 8002040:	4b7e      	ldr	r3, [pc, #504]	; (800223c <lwiperf_tcp_recv+0x218>)
 8002042:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8002046:	497e      	ldr	r1, [pc, #504]	; (8002240 <lwiperf_tcp_recv+0x21c>)
 8002048:	487e      	ldr	r0, [pc, #504]	; (8002244 <lwiperf_tcp_recv+0x220>)
 800204a:	f01d ffdb 	bl	8020004 <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 800204e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8002056:	2105      	movs	r1, #5
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7ff fd53 	bl	8001b04 <lwiperf_tcp_close>
    return ERR_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e0e8      	b.n	8002234 <lwiperf_tcp_recv+0x210>
  }
  if (p == NULL) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d114      	bne.n	8002092 <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8002080:	6978      	ldr	r0, [r7, #20]
 8002082:	f7ff ff8b 	bl	8001f9c <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8002086:	2100      	movs	r1, #0
 8002088:	6978      	ldr	r0, [r7, #20]
 800208a:	f7ff fd3b 	bl	8001b04 <lwiperf_tcp_close>
    return ERR_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e0d0      	b.n	8002234 <lwiperf_tcp_recv+0x210>
  }
  tot_len = p->tot_len;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	891b      	ldrh	r3, [r3, #8]
 8002096:	827b      	strh	r3, [r7, #18]

  conn->poll_count = 0;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <lwiperf_tcp_recv+0x96>
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	3b18      	subs	r3, #24
 80020b0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 8090 	bne.w	80021da <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	891b      	ldrh	r3, [r3, #8]
 80020be:	2b17      	cmp	r3, #23
 80020c0:	d808      	bhi.n	80020d4 <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 80020c2:	2103      	movs	r1, #3
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7ff fd1d 	bl	8001b04 <lwiperf_tcp_close>
      pbuf_free(p);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f014 fd88 	bl	8016be0 <pbuf_free>
      return ERR_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e0af      	b.n	8002234 <lwiperf_tcp_recv+0x210>
    }
    if (!conn->have_settings_buf) {
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d135      	bne.n	800214a <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80020e4:	2300      	movs	r3, #0
 80020e6:	2218      	movs	r2, #24
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f014 ff63 	bl	8016fb4 <pbuf_copy_partial>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b18      	cmp	r3, #24
 80020f2:	d008      	beq.n	8002106 <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80020f4:	2102      	movs	r1, #2
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff fd04 	bl	8001b04 <lwiperf_tcp_close>
        pbuf_free(p);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f014 fd6f 	bl	8016be0 <pbuf_free>
        return ERR_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e096      	b.n	8002234 <lwiperf_tcp_recv+0x210>
      }
      conn->have_settings_buf = 1;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b00      	cmp	r3, #0
 8002118:	d031      	beq.n	800217e <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d02b      	beq.n	800217e <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff38 	bl	8001f9c <lwiperf_tx_start_passive>
 800212c:	4603      	mov	r3, r0
 800212e:	747b      	strb	r3, [r7, #17]
          if (err2 != ERR_OK) {
 8002130:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d022      	beq.n	800217e <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8002138:	2104      	movs	r1, #4
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff fce2 	bl	8001b04 <lwiperf_tcp_close>
            pbuf_free(p);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f014 fd4d 	bl	8016be0 <pbuf_free>
            return ERR_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e074      	b.n	8002234 <lwiperf_tcp_recv+0x210>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	2b00      	cmp	r3, #0
 8002154:	d013      	beq.n	800217e <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800215c:	2318      	movs	r3, #24
 800215e:	2100      	movs	r1, #0
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f015 f82e 	bl	80171c2 <pbuf_memcmp>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 800216c:	2103      	movs	r1, #3
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff fcc8 	bl	8001b04 <lwiperf_tcp_close>
          pbuf_free(p);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f014 fd33 	bl	8016be0 <pbuf_free>
          return ERR_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e05a      	b.n	8002234 <lwiperf_tcp_recv+0x210>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f103 0218 	add.w	r2, r3, #24
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b18      	cmp	r3, #24
 8002190:	d80f      	bhi.n	80021b2 <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8002192:	f010 f88f 	bl	80122b4 <sys_now>
 8002196:	4602      	mov	r2, r0
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	891b      	ldrh	r3, [r3, #8]
 80021a0:	4619      	mov	r1, r3
 80021a2:	68b8      	ldr	r0, [r7, #8]
 80021a4:	f015 fd36 	bl	8017c14 <tcp_recved>
      pbuf_free(p);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f014 fd19 	bl	8016be0 <pbuf_free>
      return ERR_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e040      	b.n	8002234 <lwiperf_tcp_recv+0x210>
    }
    conn->next_num = 4; /* 24 bytes received... */
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2204      	movs	r2, #4
 80021b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 80021ba:	2118      	movs	r1, #24
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f014 fc89 	bl	8016ad4 <pbuf_remove_header>
 80021c2:	4603      	mov	r3, r0
 80021c4:	743b      	strb	r3, [r7, #16]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 80021c6:	7c3b      	ldrb	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <lwiperf_tcp_recv+0x1b6>
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <lwiperf_tcp_recv+0x218>)
 80021ce:	f240 2211 	movw	r2, #529	; 0x211
 80021d2:	491d      	ldr	r1, [pc, #116]	; (8002248 <lwiperf_tcp_recv+0x224>)
 80021d4:	481b      	ldr	r0, [pc, #108]	; (8002244 <lwiperf_tcp_recv+0x220>)
 80021d6:	f01d ff15 	bl	8020004 <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	e008      	b.n	80021f6 <lwiperf_tcp_recv+0x1d2>
        pbuf_free(p);
        return ERR_OK;
      }
    }
#endif
    packet_idx += q->len;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	895b      	ldrh	r3, [r3, #10]
 80021e8:	461a      	mov	r2, r3
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f3      	bne.n	80021e4 <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	891b      	ldrh	r3, [r3, #8]
 8002200:	461a      	mov	r2, r3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4293      	cmp	r3, r2
 8002206:	d006      	beq.n	8002216 <lwiperf_tcp_recv+0x1f2>
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <lwiperf_tcp_recv+0x218>)
 800220a:	f240 222b 	movw	r2, #555	; 0x22b
 800220e:	490f      	ldr	r1, [pc, #60]	; (800224c <lwiperf_tcp_recv+0x228>)
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <lwiperf_tcp_recv+0x220>)
 8002212:	f01d fef7 	bl	8020004 <iprintf>
  conn->bytes_transferred += packet_idx;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	441a      	add	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8002222:	8a7b      	ldrh	r3, [r7, #18]
 8002224:	4619      	mov	r1, r3
 8002226:	68b8      	ldr	r0, [r7, #8]
 8002228:	f015 fcf4 	bl	8017c14 <tcp_recved>
  pbuf_free(p);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f014 fcd7 	bl	8016be0 <pbuf_free>
  return ERR_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	08024d48 	.word	0x08024d48
 8002240:	08024de8 	.word	0x08024de8
 8002244:	08024d70 	.word	0x08024d70
 8002248:	08024df8 	.word	0x08024df8
 800224c:	08024e14 	.word	0x08024e14

08002250 <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8002260:	2105      	movs	r1, #5
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7ff fc4e 	bl	8001b04 <lwiperf_tcp_close>
}
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d006      	beq.n	8002296 <lwiperf_tcp_poll+0x26>
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <lwiperf_tcp_poll+0x64>)
 800228a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800228e:	4912      	ldr	r1, [pc, #72]	; (80022d8 <lwiperf_tcp_poll+0x68>)
 8002290:	4812      	ldr	r0, [pc, #72]	; (80022dc <lwiperf_tcp_poll+0x6c>)
 8002292:	f01d feb7 	bl	8020004 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	3301      	adds	r3, #1
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f883 2020 	strb.w	r2, [r3, #32]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	d905      	bls.n	80022bc <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80022b0:	2102      	movs	r1, #2
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff fc26 	bl	8001b04 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 80022b8:	2300      	movs	r3, #0
 80022ba:	e007      	b.n	80022cc <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	795b      	ldrb	r3, [r3, #5]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff fc7f 	bl	8001bc8 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	08024d48 	.word	0x08024d48
 80022d8:	08024de8 	.word	0x08024de8
 80022dc:	08024d70 	.word	0x08024d70

080022e0 <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <lwiperf_tcp_accept+0x22>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <lwiperf_tcp_accept+0x22>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 8002302:	f06f 0305 	mvn.w	r3, #5
 8002306:	e0a3      	b.n	8002450 <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	795b      	ldrb	r3, [r3, #5]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d106      	bne.n	8002322 <lwiperf_tcp_accept+0x42>
 8002314:	4b50      	ldr	r3, [pc, #320]	; (8002458 <lwiperf_tcp_accept+0x178>)
 8002316:	f44f 7216 	mov.w	r2, #600	; 0x258
 800231a:	4950      	ldr	r1, [pc, #320]	; (800245c <lwiperf_tcp_accept+0x17c>)
 800231c:	4850      	ldr	r0, [pc, #320]	; (8002460 <lwiperf_tcp_accept+0x180>)
 800231e:	f01d fe71 	bl	8020004 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <lwiperf_tcp_accept+0x58>
 800232a:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <lwiperf_tcp_accept+0x178>)
 800232c:	f240 2259 	movw	r2, #601	; 0x259
 8002330:	494c      	ldr	r1, [pc, #304]	; (8002464 <lwiperf_tcp_accept+0x184>)
 8002332:	484b      	ldr	r0, [pc, #300]	; (8002460 <lwiperf_tcp_accept+0x180>)
 8002334:	f01d fe66 	bl	8020004 <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <lwiperf_tcp_accept+0x6e>
 8002340:	4b45      	ldr	r3, [pc, #276]	; (8002458 <lwiperf_tcp_accept+0x178>)
 8002342:	f240 225a 	movw	r2, #602	; 0x25a
 8002346:	4948      	ldr	r1, [pc, #288]	; (8002468 <lwiperf_tcp_accept+0x188>)
 8002348:	4845      	ldr	r0, [pc, #276]	; (8002460 <lwiperf_tcp_accept+0x180>)
 800234a:	f01d fe5b 	bl	8020004 <iprintf>
  if (s->specific_remote) {
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <lwiperf_tcp_accept+0x8e>
 8002360:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <lwiperf_tcp_accept+0x178>)
 8002362:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8002366:	4941      	ldr	r1, [pc, #260]	; (800246c <lwiperf_tcp_accept+0x18c>)
 8002368:	483d      	ldr	r0, [pc, #244]	; (8002460 <lwiperf_tcp_accept+0x180>)
 800236a:	f01d fe4b 	bl	8020004 <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	429a      	cmp	r2, r3
 8002378:	d00d      	beq.n	8002396 <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 800237a:	f06f 0305 	mvn.w	r3, #5
 800237e:	e067      	b.n	8002450 <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <lwiperf_tcp_accept+0xb6>
 8002388:	4b33      	ldr	r3, [pc, #204]	; (8002458 <lwiperf_tcp_accept+0x178>)
 800238a:	f240 2262 	movw	r2, #610	; 0x262
 800238e:	4938      	ldr	r1, [pc, #224]	; (8002470 <lwiperf_tcp_accept+0x190>)
 8002390:	4833      	ldr	r0, [pc, #204]	; (8002460 <lwiperf_tcp_accept+0x180>)
 8002392:	f01d fe37 	bl	8020004 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002396:	2048      	movs	r0, #72	; 0x48
 8002398:	f013 fbac 	bl	8015af4 <mem_malloc>
 800239c:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a8:	e052      	b.n	8002450 <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 80023aa:	2248      	movs	r2, #72	; 0x48
 80023ac:	2100      	movs	r1, #0
 80023ae:	6938      	ldr	r0, [r7, #16]
 80023b0:	f01c ff2e 	bl	801f210 <memset>
  conn->base.tcp = 1;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2201      	movs	r2, #1
 80023b8:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2201      	movs	r2, #1
 80023be:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 80023cc:	f00f ff72 	bl	80122b4 <sys_now>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 80023e6:	6939      	ldr	r1, [r7, #16]
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f016 fbf1 	bl	8018bd0 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <lwiperf_tcp_accept+0x194>)
 80023f0:	68b8      	ldr	r0, [r7, #8]
 80023f2:	f016 fbff 	bl	8018bf4 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 80023f6:	2202      	movs	r2, #2
 80023f8:	491f      	ldr	r1, [pc, #124]	; (8002478 <lwiperf_tcp_accept+0x198>)
 80023fa:	68b8      	ldr	r0, [r7, #8]
 80023fc:	f016 fc78 	bl	8018cf0 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	491d      	ldr	r1, [pc, #116]	; (800247c <lwiperf_tcp_accept+0x19c>)
 8002406:	4618      	mov	r0, r3
 8002408:	f016 fc38 	bl	8018c7c <tcp_err>

  if (s->specific_remote) {
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002412:	2b00      	cmp	r3, #0
 8002414:	d017      	beq.n	8002446 <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <lwiperf_tcp_accept+0x158>
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fb05 	bl	8001a3c <lwiperf_list_find>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800243e:	2102      	movs	r1, #2
 8002440:	6978      	ldr	r0, [r7, #20]
 8002442:	f7ff fb5f 	bl	8001b04 <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fa9f 	bl	800198c <lwiperf_list_add>
  return ERR_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	08024d48 	.word	0x08024d48
 800245c:	08024e24 	.word	0x08024e24
 8002460:	08024d70 	.word	0x08024d70
 8002464:	08024e34 	.word	0x08024e34
 8002468:	08024e48 	.word	0x08024e48
 800246c:	08024e5c 	.word	0x08024e5c
 8002470:	08024e84 	.word	0x08024e84
 8002474:	08002025 	.word	0x08002025
 8002478:	08002271 	.word	0x08002271
 800247c:	08002251 	.word	0x08002251

08002480 <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	f241 3189 	movw	r1, #5001	; 0x1389
 8002492:	4804      	ldr	r0, [pc, #16]	; (80024a4 <lwiperf_start_tcp_server_default+0x24>)
 8002494:	f000 f808 	bl	80024a8 <lwiperf_start_tcp_server>
 8002498:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	08028258 	.word	0x08028258

080024a8 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	460b      	mov	r3, r1
 80024b6:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 80024bc:	8979      	ldrh	r1, [r7, #10]
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2300      	movs	r3, #0
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f80d 	bl	80024ec <lwiperf_start_tcp_server_impl>
 80024d2:	4603      	mov	r3, r0
 80024d4:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 80024d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <lwiperf_start_tcp_server+0x3a>
    return state;
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	e000      	b.n	80024e4 <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <lwiperf_start_tcp_server_impl+0x24>
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <lwiperf_start_tcp_server_impl+0x100>)
 8002504:	f240 22b6 	movw	r2, #694	; 0x2b6
 8002508:	4939      	ldr	r1, [pc, #228]	; (80025f0 <lwiperf_start_tcp_server_impl+0x104>)
 800250a:	483a      	ldr	r0, [pc, #232]	; (80025f4 <lwiperf_start_tcp_server_impl+0x108>)
 800250c:	f01d fd7a 	bl	8020004 <iprintf>

  if (local_addr == NULL) {
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <lwiperf_start_tcp_server_impl+0x30>
    return ERR_ARG;
 8002516:	f06f 030f 	mvn.w	r3, #15
 800251a:	e063      	b.n	80025e4 <lwiperf_start_tcp_server_impl+0xf8>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800251c:	2048      	movs	r0, #72	; 0x48
 800251e:	f013 fae9 	bl	8015af4 <mem_malloc>
 8002522:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <lwiperf_start_tcp_server_impl+0x44>
    return ERR_MEM;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800252e:	e059      	b.n	80025e4 <lwiperf_start_tcp_server_impl+0xf8>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8002530:	2248      	movs	r2, #72	; 0x48
 8002532:	2100      	movs	r1, #0
 8002534:	69f8      	ldr	r0, [r7, #28]
 8002536:	f01c fe6b 	bl	801f210 <memset>
  s->base.tcp = 1;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2201      	movs	r2, #1
 800253e:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2201      	movs	r2, #1
 8002544:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800254a:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8002558:	202e      	movs	r0, #46	; 0x2e
 800255a:	f016 fb2b 	bl	8018bb4 <tcp_new_ip_type>
 800255e:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <lwiperf_start_tcp_server_impl+0x80>
    return ERR_MEM;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256a:	e03b      	b.n	80025e4 <lwiperf_start_tcp_server_impl+0xf8>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 800256c:	897b      	ldrh	r3, [r7, #10]
 800256e:	461a      	mov	r2, r3
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	69b8      	ldr	r0, [r7, #24]
 8002574:	f015 f980 	bl	8017878 <tcp_bind>
 8002578:	4603      	mov	r3, r0
 800257a:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800257c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <lwiperf_start_tcp_server_impl+0x9e>
    return err;
 8002584:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002588:	e02c      	b.n	80025e4 <lwiperf_start_tcp_server_impl+0xf8>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800258a:	2101      	movs	r1, #1
 800258c:	69b8      	ldr	r0, [r7, #24]
 800258e:	f015 fa2b 	bl	80179e8 <tcp_listen_with_backlog>
 8002592:	4602      	mov	r2, r0
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <lwiperf_start_tcp_server_impl+0xcc>
    if (pcb != NULL) {
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <lwiperf_start_tcp_server_impl+0xc0>
      tcp_close(pcb);
 80025a6:	69b8      	ldr	r0, [r7, #24]
 80025a8:	f015 f870 	bl	801768c <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 80025ac:	69f8      	ldr	r0, [r7, #28]
 80025ae:	f013 f93b 	bl	8015828 <mem_free>
    return ERR_MEM;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b6:	e015      	b.n	80025e4 <lwiperf_start_tcp_server_impl+0xf8>
  }
  pcb = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	69f9      	ldr	r1, [r7, #28]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f016 fb04 	bl	8018bd0 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	490a      	ldr	r1, [pc, #40]	; (80025f8 <lwiperf_start_tcp_server_impl+0x10c>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f016 fb76 	bl	8018cc0 <tcp_accept>

  lwiperf_list_add(&s->base);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f9d8 	bl	800198c <lwiperf_list_add>
  *state = s;
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	08024d48 	.word	0x08024d48
 80025f0:	08024eac 	.word	0x08024eac
 80025f4:	08024d70 	.word	0x08024d70
 80025f8:	080022e1 	.word	0x080022e1

080025fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	f5ad 5d1f 	sub.w	sp, sp, #10176	; 0x27c0
 8002602:	b085      	sub	sp, #20
 8002604:	af04      	add	r7, sp, #16
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002606:	f000 fb37 	bl	8002c78 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800260a:	4b9a      	ldr	r3, [pc, #616]	; (8002874 <main+0x278>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11b      	bne.n	800264e <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002616:	f3bf 8f4f 	dsb	sy
}
 800261a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800261c:	f3bf 8f6f 	isb	sy
}
 8002620:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002622:	4b94      	ldr	r3, [pc, #592]	; (8002874 <main+0x278>)
 8002624:	2200      	movs	r2, #0
 8002626:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800262a:	f3bf 8f4f 	dsb	sy
}
 800262e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002630:	f3bf 8f6f 	isb	sy
}
 8002634:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002636:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <main+0x278>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4a8e      	ldr	r2, [pc, #568]	; (8002874 <main+0x278>)
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002642:	f3bf 8f4f 	dsb	sy
}
 8002646:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002648:	f3bf 8f6f 	isb	sy
}
 800264c:	e000      	b.n	8002650 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800264e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002650:	4b88      	ldr	r3, [pc, #544]	; (8002874 <main+0x278>)
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d159      	bne.n	8002710 <main+0x114>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800265c:	4b85      	ldr	r3, [pc, #532]	; (8002874 <main+0x278>)
 800265e:	2200      	movs	r2, #0
 8002660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002664:	f3bf 8f4f 	dsb	sy
}
 8002668:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800266a:	4b82      	ldr	r3, [pc, #520]	; (8002874 <main+0x278>)
 800266c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002670:	f242 72a8 	movw	r2, #10152	; 0x27a8
 8002674:	443a      	add	r2, r7
 8002676:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002678:	f242 73a8 	movw	r3, #10152	; 0x27a8
 800267c:	443b      	add	r3, r7
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0b5b      	lsrs	r3, r3, #13
 8002682:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002686:	f242 72a4 	movw	r2, #10148	; 0x27a4
 800268a:	443a      	add	r2, r7
 800268c:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800268e:	f242 73a8 	movw	r3, #10152	; 0x27a8
 8002692:	443b      	add	r3, r7
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269c:	f242 72a0 	movw	r2, #10144	; 0x27a0
 80026a0:	443a      	add	r2, r7
 80026a2:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80026a4:	f242 73a4 	movw	r3, #10148	; 0x27a4
 80026a8:	443b      	add	r3, r7
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	015a      	lsls	r2, r3, #5
 80026ae:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80026b2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80026b4:	f242 72a0 	movw	r2, #10144	; 0x27a0
 80026b8:	443a      	add	r2, r7
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80026be:	496d      	ldr	r1, [pc, #436]	; (8002874 <main+0x278>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80026c6:	f242 73a0 	movw	r3, #10144	; 0x27a0
 80026ca:	443b      	add	r3, r7
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	f242 71a0 	movw	r1, #10144	; 0x27a0
 80026d4:	4439      	add	r1, r7
 80026d6:	600a      	str	r2, [r1, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e3      	bne.n	80026a4 <main+0xa8>
    } while(sets-- != 0U);
 80026dc:	f242 73a4 	movw	r3, #10148	; 0x27a4
 80026e0:	443b      	add	r3, r7
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	f242 71a4 	movw	r1, #10148	; 0x27a4
 80026ea:	4439      	add	r1, r7
 80026ec:	600a      	str	r2, [r1, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1cd      	bne.n	800268e <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 80026f2:	f3bf 8f4f 	dsb	sy
}
 80026f6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80026f8:	4b5e      	ldr	r3, [pc, #376]	; (8002874 <main+0x278>)
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	4a5d      	ldr	r2, [pc, #372]	; (8002874 <main+0x278>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002704:	f3bf 8f4f 	dsb	sy
}
 8002708:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800270a:	f3bf 8f6f 	isb	sy
}
 800270e:	e000      	b.n	8002712 <main+0x116>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002710:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8002712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002716:	f242 72bc 	movw	r2, #10172	; 0x27bc
 800271a:	443a      	add	r2, r7
 800271c:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800271e:	bf00      	nop
 8002720:	4b55      	ldr	r3, [pc, #340]	; (8002878 <main+0x27c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <main+0x146>
 800272c:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002730:	443b      	add	r3, r7
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	f242 71bc 	movw	r1, #10172	; 0x27bc
 800273a:	4439      	add	r1, r7
 800273c:	600a      	str	r2, [r1, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	dcee      	bgt.n	8002720 <main+0x124>
	if ( timeout < 0 )
 8002742:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002746:	443b      	add	r3, r7
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	da01      	bge.n	8002752 <main+0x156>
	{
		Error_Handler();
 800274e:	f000 fad3 	bl	8002cf8 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002752:	f001 fd15 	bl	8004180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002756:	f000 fa09 	bl	8002b6c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <main+0x27c>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002760:	4a45      	ldr	r2, [pc, #276]	; (8002878 <main+0x27c>)
 8002762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <main+0x27c>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002770:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8002774:	4b41      	ldr	r3, [pc, #260]	; (800287c <main+0x280>)
 8002776:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 800277a:	440b      	add	r3, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	4b3f      	ldr	r3, [pc, #252]	; (800287c <main+0x280>)
 8002780:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002784:	4413      	add	r3, r2
 8002786:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8002788:	2000      	movs	r0, #0
 800278a:	f007 fdb3 	bl	800a2f4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800278e:	2100      	movs	r1, #0
 8002790:	2000      	movs	r0, #0
 8002792:	f007 fdc9 	bl	800a328 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8002796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800279a:	f242 72bc 	movw	r2, #10172	; 0x27bc
 800279e:	443a      	add	r2, r7
 80027a0:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80027a2:	bf00      	nop
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <main+0x27c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <main+0x1ca>
 80027b0:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80027b4:	443b      	add	r3, r7
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	f242 71bc 	movw	r1, #10172	; 0x27bc
 80027be:	4439      	add	r1, r7
 80027c0:	600a      	str	r2, [r1, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	dcee      	bgt.n	80027a4 <main+0x1a8>
	if ( timeout < 0 )
 80027c6:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80027ca:	443b      	add	r3, r7
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da01      	bge.n	80027d6 <main+0x1da>
	{
		Error_Handler();
 80027d2:	f000 fa91 	bl	8002cf8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027d6:	f7fe ff8d 	bl	80016f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80027da:	f7fe fe2f 	bl	800143c <MX_DMA_Init>
  MX_ADC1_Init();
 80027de:	f7fe fb2f 	bl	8000e40 <MX_ADC1_Init>
  MX_ADC2_Init();
 80027e2:	f7fe fbb7 	bl	8000f54 <MX_ADC2_Init>
  MX_ADC3_Init();
 80027e6:	f7fe fc2d 	bl	8001044 <MX_ADC3_Init>
  MX_FMC_Init();
 80027ea:	f7fe fe6f 	bl	80014cc <MX_FMC_Init>
  MX_SAI1_Init();
 80027ee:	f000 fad7 	bl	8002da0 <MX_SAI1_Init>
  MX_SPI2_Init();
 80027f2:	f000 fbd3 	bl	8002f9c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80027f6:	f001 fa45 	bl	8003c84 <MX_USART1_UART_Init>
  MX_RNG_Init();
 80027fa:	f000 fa83 	bl	8002d04 <MX_RNG_Init>
  MX_CRC_Init();
 80027fe:	f7fe fdd9 	bl	80013b4 <MX_CRC_Init>
  MX_LWIP_Init();
 8002802:	f00f f92b 	bl	8011a5c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 8002806:	2201      	movs	r2, #1
 8002808:	2120      	movs	r1, #32
 800280a:	481d      	ldr	r0, [pc, #116]	; (8002880 <main+0x284>)
 800280c:	f007 fd3e 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 8002810:	2201      	movs	r2, #1
 8002812:	2104      	movs	r1, #4
 8002814:	481a      	ldr	r0, [pc, #104]	; (8002880 <main+0x284>)
 8002816:	f007 fd39 	bl	800a28c <HAL_GPIO_WritePin>

	//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
	//  uint32_t framecount = 0;

	ssd1362_init();
 800281a:	f01c fc1b 	bl	801f054 <ssd1362_init>

	ssd1362_clearBuffer();
 800281e:	f01c fbb9 	bl	801ef94 <ssd1362_clearBuffer>
	ssd1362_drawHLine(0, 5, 256,0xF, 0);
 8002822:	2300      	movs	r3, #0
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	230f      	movs	r3, #15
 8002828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800282c:	2105      	movs	r1, #5
 800282e:	2000      	movs	r0, #0
 8002830:	f01c f9f4 	bl	801ec1c <ssd1362_drawHLine>
	ssd1362_drawHLine(0, 40, 256,0xF, 0);
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	230f      	movs	r3, #15
 800283a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800283e:	2128      	movs	r1, #40	; 0x28
 8002840:	2000      	movs	r0, #0
 8002842:	f01c f9eb 	bl	801ec1c <ssd1362_drawHLine>
	ssd1362_drawString(16, 15, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 8002846:	2310      	movs	r3, #16
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	230f      	movs	r3, #15
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <main+0x288>)
 800284e:	210f      	movs	r1, #15
 8002850:	2010      	movs	r0, #16
 8002852:	f01c fafe 	bl	801ee52 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8002856:	f01c fbcb 	bl	801eff0 <ssd1362_writeFullBuffer>

	cisynth_ifft();  //while(1)
 800285a:	f7fe f909 	bl	8000a70 <cisynth_ifft>



	uint32_t aRandom32bit = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	f242 7290 	movw	r2, #10128	; 0x2790
 8002864:	443a      	add	r2, r7
 8002866:	6013      	str	r3, [r2, #0]
	uint8_t buff[10000];

	for (uint32_t i = 0; i < 10000; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	f242 72b8 	movw	r2, #10168	; 0x27b8
 800286e:	443a      	add	r2, r7
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e02c      	b.n	80028ce <main+0x2d2>
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	58024400 	.word	0x58024400
 800287c:	ffffd8a8 	.word	0xffffd8a8
 8002880:	58021800 	.word	0x58021800
 8002884:	08024ebc 	.word	0x08024ebc
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 8002888:	f242 7390 	movw	r3, #10128	; 0x2790
 800288c:	443b      	add	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	48a5      	ldr	r0, [pc, #660]	; (8002b28 <main+0x52c>)
 8002892:	f00a ff58 	bl	800d746 <HAL_RNG_GenerateRandomNumber>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <main+0x2a4>
		{
			/* Random number generation error */
			Error_Handler();
 800289c:	f000 fa2c 	bl	8002cf8 <Error_Handler>
		}
		buff[i] = aRandom32bit;
 80028a0:	f242 7390 	movw	r3, #10128	; 0x2790
 80028a4:	443b      	add	r3, r7
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b2d9      	uxtb	r1, r3
 80028aa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028ae:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80028b2:	443b      	add	r3, r7
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	460a      	mov	r2, r1
 80028ba:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 10000; i++)
 80028bc:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80028c0:	443b      	add	r3, r7
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	f242 72b8 	movw	r2, #10168	; 0x27b8
 80028ca:	443a      	add	r2, r7
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80028d2:	443b      	add	r3, r7
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80028da:	4293      	cmp	r3, r2
 80028dc:	d9d4      	bls.n	8002888 <main+0x28c>
	}

	Audio_Player_Play(buff, 10000);
 80028de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028e2:	f242 7110 	movw	r1, #10000	; 0x2710
 80028e6:	4618      	mov	r0, r3
 80028e8:	f01b ffd4 	bl	801e894 <Audio_Player_Play>

	//  HAL_GPIO_WritePin(MEMS_FSYNC_GPIO_Port, MEMS_FSYNC_Pin, GPIO_PIN_RESET);
	icm20602_init();
 80028ec:	f01b fd32 	bl	801e354 <icm20602_init>
	int16_t accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, tmp;


	const char* message = "Hello UDP message!\n\r";
 80028f0:	4b8e      	ldr	r3, [pc, #568]	; (8002b2c <main+0x530>)
 80028f2:	f242 72b4 	movw	r2, #10164	; 0x27b4
 80028f6:	443a      	add	r2, r7
 80028f8:	6013      	str	r3, [r2, #0]

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 80028fa:	4b8d      	ldr	r3, [pc, #564]	; (8002b30 <main+0x534>)
 80028fc:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002900:	4413      	add	r3, r2
 8002902:	4a8c      	ldr	r2, [pc, #560]	; (8002b34 <main+0x538>)
 8002904:	601a      	str	r2, [r3, #0]

	struct udp_pcb* my_udp = udp_new();
 8002906:	f01b fa03 	bl	801dd10 <udp_new>
 800290a:	f242 73b0 	movw	r3, #10160	; 0x27b0
 800290e:	443b      	add	r3, r7
 8002910:	6018      	str	r0, [r3, #0]
	udp_connect(my_udp, &PC_IPADDR, 55151);
 8002912:	4b87      	ldr	r3, [pc, #540]	; (8002b30 <main+0x534>)
 8002914:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002918:	4413      	add	r3, r2
 800291a:	f24d 726f 	movw	r2, #55151	; 0xd76f
 800291e:	4619      	mov	r1, r3
 8002920:	f242 73b0 	movw	r3, #10160	; 0x27b0
 8002924:	443b      	add	r3, r7
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	f01b f984 	bl	801dc34 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 800292c:	2300      	movs	r3, #0
 800292e:	f242 72ac 	movw	r2, #10156	; 0x27ac
 8002932:	443a      	add	r2, r7
 8002934:	6013      	str	r3, [r2, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002936:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <main+0x53c>)
 8002938:	2200      	movs	r2, #0
 800293a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800293e:	f3bf 8f4f 	dsb	sy
}
 8002942:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002944:	4b7c      	ldr	r3, [pc, #496]	; (8002b38 <main+0x53c>)
 8002946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294a:	f242 729c 	movw	r2, #10140	; 0x279c
 800294e:	443a      	add	r2, r7
 8002950:	6013      	str	r3, [r2, #0]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002952:	f242 739c 	movw	r3, #10140	; 0x279c
 8002956:	443b      	add	r3, r7
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0b5b      	lsrs	r3, r3, #13
 800295c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002960:	f242 7298 	movw	r2, #10136	; 0x2798
 8002964:	443a      	add	r2, r7
 8002966:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002968:	f242 739c 	movw	r3, #10140	; 0x279c
 800296c:	443b      	add	r3, r7
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002976:	f242 7294 	movw	r2, #10132	; 0x2794
 800297a:	443a      	add	r2, r7
 800297c:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800297e:	f242 7398 	movw	r3, #10136	; 0x2798
 8002982:	443b      	add	r3, r7
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800298c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800298e:	f242 7294 	movw	r2, #10132	; 0x2794
 8002992:	443a      	add	r2, r7
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002998:	4967      	ldr	r1, [pc, #412]	; (8002b38 <main+0x53c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80029a0:	f242 7394 	movw	r3, #10132	; 0x2794
 80029a4:	443b      	add	r3, r7
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1e5a      	subs	r2, r3, #1
 80029aa:	f242 7194 	movw	r1, #10132	; 0x2794
 80029ae:	4439      	add	r1, r7
 80029b0:	600a      	str	r2, [r1, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e3      	bne.n	800297e <main+0x382>
    } while(sets-- != 0U);
 80029b6:	f242 7398 	movw	r3, #10136	; 0x2798
 80029ba:	443b      	add	r3, r7
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	1e5a      	subs	r2, r3, #1
 80029c0:	f242 7198 	movw	r1, #10136	; 0x2798
 80029c4:	4439      	add	r1, r7
 80029c6:	600a      	str	r2, [r1, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1cd      	bne.n	8002968 <main+0x36c>
  __ASM volatile ("dsb 0xF":::"memory");
 80029cc:	f3bf 8f4f 	dsb	sy
}
 80029d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029d2:	f3bf 8f6f 	isb	sy
}
 80029d6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80029d8:	bf00      	nop

	SCB_CleanInvalidateDCache();


	lwiperf_start_tcp_server_default(NULL, NULL); // TCP Perf = iperf -c 192.168.1.1 -i1 -t60 -u -b 1000M UDP Perf = iperf -c 192.168.1.1 -i1 -t60
 80029da:	2100      	movs	r1, #0
 80029dc:	2000      	movs	r0, #0
 80029de:	f7ff fd4f 	bl	8002480 <lwiperf_start_tcp_server_default>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 80029e2:	f00f f987 	bl	8011cf4 <MX_LWIP_Process>
		//	  ssd1362_writeFullBuffer();
		//	  HAL_Delay(1);

		//	  icm20602_read_accel(&accel_x, &accel_y, &accel_z);
		//	  icm20602_read_gyro(&gyro_x, &gyro_y, &gyro_z);
		icm20602_read_data_raw(&accel_x, &accel_y, &accel_z, &gyro_x, &gyro_y, &gyro_z, &tmp);
 80029e6:	4c55      	ldr	r4, [pc, #340]	; (8002b3c <main+0x540>)
 80029e8:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80029ec:	441c      	add	r4, r3
 80029ee:	4a54      	ldr	r2, [pc, #336]	; (8002b40 <main+0x544>)
 80029f0:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80029f4:	441a      	add	r2, r3
 80029f6:	4953      	ldr	r1, [pc, #332]	; (8002b44 <main+0x548>)
 80029f8:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80029fc:	4419      	add	r1, r3
 80029fe:	4852      	ldr	r0, [pc, #328]	; (8002b48 <main+0x54c>)
 8002a00:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002a04:	4418      	add	r0, r3
 8002a06:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <main+0x550>)
 8002a08:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002a0c:	4463      	add	r3, ip
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	4b4f      	ldr	r3, [pc, #316]	; (8002b50 <main+0x554>)
 8002a12:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002a16:	4463      	add	r3, ip
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	4b4e      	ldr	r3, [pc, #312]	; (8002b54 <main+0x558>)
 8002a1c:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002a20:	4463      	add	r3, ip
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	4623      	mov	r3, r4
 8002a26:	f01b fe63 	bl	801e6f0 <icm20602_read_data_raw>

		ssd1362_clearBuffer();
 8002a2a:	f01c fab3 	bl	801ef94 <ssd1362_clearBuffer>
		char text[100] = {0};
 8002a2e:	4b4a      	ldr	r3, [pc, #296]	; (8002b58 <main+0x55c>)
 8002a30:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002a34:	4413      	add	r3, r2
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2260      	movs	r2, #96	; 0x60
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f01c fbe5 	bl	801f210 <memset>
		//	  sprintf(text,"Accel : %.2f  %.2f  %.2f", accel_x, accel_y, accel_z);
		//	  ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"Gyro  : %.2f  %.2f  %.2f", gyro_x, gyro_y, gyro_z);
		//	  ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"temp. : %.2f", tmp);
		sprintf(text,"Accel : %d  %d  %d", accel_x, accel_y, accel_z);
 8002a46:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <main+0x54c>)
 8002a48:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <main+0x548>)
 8002a56:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a60:	4619      	mov	r1, r3
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <main+0x544>)
 8002a64:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 8002a68:	4403      	add	r3, r0
 8002a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6e:	483a      	ldr	r0, [pc, #232]	; (8002b58 <main+0x55c>)
 8002a70:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 8002a74:	4420      	add	r0, r4
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4938      	ldr	r1, [pc, #224]	; (8002b5c <main+0x560>)
 8002a7c:	f01d fba6 	bl	80201cc <siprintf>
		ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
 8002a80:	4a35      	ldr	r2, [pc, #212]	; (8002b58 <main+0x55c>)
 8002a82:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002a86:	441a      	add	r2, r3
 8002a88:	2310      	movs	r3, #16
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	210a      	movs	r1, #10
 8002a90:	2000      	movs	r0, #0
 8002a92:	f01c f9de 	bl	801ee52 <ssd1362_drawString>
		sprintf(text,"Gyro  : %d  %d  %d", gyro_x, gyro_y, gyro_z);
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <main+0x540>)
 8002a98:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <main+0x558>)
 8002aa6:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002aaa:	440b      	add	r3, r1
 8002aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <main+0x554>)
 8002ab4:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 8002ab8:	4403      	add	r3, r0
 8002aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abe:	4826      	ldr	r0, [pc, #152]	; (8002b58 <main+0x55c>)
 8002ac0:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 8002ac4:	4420      	add	r0, r4
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4925      	ldr	r1, [pc, #148]	; (8002b60 <main+0x564>)
 8002acc:	f01d fb7e 	bl	80201cc <siprintf>
		ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
 8002ad0:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <main+0x55c>)
 8002ad2:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002ad6:	441a      	add	r2, r3
 8002ad8:	2310      	movs	r3, #16
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	230f      	movs	r3, #15
 8002ade:	211e      	movs	r1, #30
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f01c f9b6 	bl	801ee52 <ssd1362_drawString>
		sprintf(text,"temp. : %d", tmp);
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <main+0x550>)
 8002ae8:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002aec:	4413      	add	r3, r2
 8002aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <main+0x55c>)
 8002af6:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002afa:	440b      	add	r3, r1
 8002afc:	4919      	ldr	r1, [pc, #100]	; (8002b64 <main+0x568>)
 8002afe:	4618      	mov	r0, r3
 8002b00:	f01d fb64 	bl	80201cc <siprintf>
		ssd1362_drawString(0, 50, (int8_t *)text, 0xF, 16);
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <main+0x55c>)
 8002b06:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002b0a:	441a      	add	r2, r3
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	230f      	movs	r3, #15
 8002b12:	2132      	movs	r1, #50	; 0x32
 8002b14:	2000      	movs	r0, #0
 8002b16:	f01c f99c 	bl	801ee52 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8002b1a:	f01c fa69 	bl	801eff0 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	4811      	ldr	r0, [pc, #68]	; (8002b68 <main+0x56c>)
 8002b22:	f007 fbcc 	bl	800a2be <HAL_GPIO_TogglePin>
	{
 8002b26:	e75c      	b.n	80029e2 <main+0x3e6>
 8002b28:	24005390 	.word	0x24005390
 8002b2c:	08024edc 	.word	0x08024edc
 8002b30:	ffffd8ac 	.word	0xffffd8ac
 8002b34:	0101a8c0 	.word	0x0101a8c0
 8002b38:	e000ed00 	.word	0xe000ed00
 8002b3c:	ffffd8b8 	.word	0xffffd8b8
 8002b40:	ffffd8ba 	.word	0xffffd8ba
 8002b44:	ffffd8bc 	.word	0xffffd8bc
 8002b48:	ffffd8be 	.word	0xffffd8be
 8002b4c:	ffffd8b2 	.word	0xffffd8b2
 8002b50:	ffffd8b4 	.word	0xffffd8b4
 8002b54:	ffffd8b6 	.word	0xffffd8b6
 8002b58:	ffffd844 	.word	0xffffd844
 8002b5c:	08024ef4 	.word	0x08024ef4
 8002b60:	08024f08 	.word	0x08024f08
 8002b64:	08024f1c 	.word	0x08024f1c
 8002b68:	58021c00 	.word	0x58021c00

08002b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b09c      	sub	sp, #112	; 0x70
 8002b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b76:	224c      	movs	r2, #76	; 0x4c
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f01c fb48 	bl	801f210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	2220      	movs	r2, #32
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f01c fb42 	bl	801f210 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002b8c:	2004      	movs	r0, #4
 8002b8e:	f007 fc03 	bl	800a398 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002b92:	2300      	movs	r3, #0
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <SystemClock_Config+0x100>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <SystemClock_Config+0x100>)
 8002b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba0:	6193      	str	r3, [r2, #24]
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <SystemClock_Config+0x100>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <SystemClock_Config+0x104>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	4a2f      	ldr	r2, [pc, #188]	; (8002c70 <SystemClock_Config+0x104>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <SystemClock_Config+0x104>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002bc4:	bf00      	nop
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <SystemClock_Config+0x100>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd2:	d1f8      	bne.n	8002bc6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <SystemClock_Config+0x108>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f023 0303 	bic.w	r3, r3, #3
 8002bdc:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <SystemClock_Config+0x108>)
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002be4:	2321      	movs	r3, #33	; 0x21
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002bfa:	2305      	movs	r3, #5
 8002bfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002bfe:	23c0      	movs	r3, #192	; 0xc0
 8002c00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002c02:	2302      	movs	r3, #2
 8002c04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002c06:	2308      	movs	r3, #8
 8002c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002c0e:	2308      	movs	r3, #8
 8002c10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f007 fc14 	bl	800a44c <HAL_RCC_OscConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c2a:	f000 f865 	bl	8002cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c2e:	233f      	movs	r3, #63	; 0x3f
 8002c30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c32:	2303      	movs	r3, #3
 8002c34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002c3e:	2340      	movs	r3, #64	; 0x40
 8002c40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002c42:	2340      	movs	r3, #64	; 0x40
 8002c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002c4c:	2340      	movs	r3, #64	; 0x40
 8002c4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2104      	movs	r1, #4
 8002c54:	4618      	mov	r0, r3
 8002c56:	f008 f809 	bl	800ac6c <HAL_RCC_ClockConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002c60:	f000 f84a 	bl	8002cf8 <Error_Handler>
  }
}
 8002c64:	bf00      	nop
 8002c66:	3770      	adds	r7, #112	; 0x70
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	58024800 	.word	0x58024800
 8002c70:	58000400 	.word	0x58000400
 8002c74:	58024400 	.word	0x58024400

08002c78 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002c7e:	463b      	mov	r3, r7
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002c8a:	f003 f879 	bl	8005d80 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <MPU_Config+0x78>)
 8002c98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002cba:	463b      	mov	r3, r7
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 f897 	bl	8005df0 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <MPU_Config+0x7c>)
 8002cc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8002cca:	230d      	movs	r3, #13
 8002ccc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002cda:	463b      	mov	r3, r7
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 f887 	bl	8005df0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002ce2:	2004      	movs	r0, #4
 8002ce4:	f003 f864 	bl	8005db0 <HAL_MPU_Enable>

}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	30040000 	.word	0x30040000
 8002cf4:	30044000 	.word	0x30044000

08002cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfc:	b672      	cpsid	i
}
 8002cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002d00:	e7fe      	b.n	8002d00 <Error_Handler+0x8>
	...

08002d04 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <MX_RNG_Init+0x24>)
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <MX_RNG_Init+0x28>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <MX_RNG_Init+0x24>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002d14:	4804      	ldr	r0, [pc, #16]	; (8002d28 <MX_RNG_Init+0x24>)
 8002d16:	f00a fcbb 	bl	800d690 <HAL_RNG_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002d20:	f7ff ffea 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	24005390 	.word	0x24005390
 8002d2c:	48021800 	.word	0x48021800

08002d30 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0b2      	sub	sp, #200	; 0xc8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	22bc      	movs	r2, #188	; 0xbc
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f01c fa65 	bl	801f210 <memset>
  if(rngHandle->Instance==RNG)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <HAL_RNG_MspInit+0x68>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d11e      	bne.n	8002d8e <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d54:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d5c:	f107 030c 	add.w	r3, r7, #12
 8002d60:	4618      	mov	r0, r3
 8002d62:	f008 fb0f 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002d6c:	f7ff ffc4 	bl	8002cf8 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_RNG_MspInit+0x6c>)
 8002d72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <HAL_RNG_MspInit+0x6c>)
 8002d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d7c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RNG_MspInit+0x6c>)
 8002d82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002d8e:	bf00      	nop
 8002d90:	37c8      	adds	r7, #200	; 0xc8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	48021800 	.word	0x48021800
 8002d9c:	58024400 	.word	0x58024400

08002da0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002da4:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <MX_SAI1_Init+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002db0:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002dca:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002dce:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002de8:	2302      	movs	r3, #2
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_SAI1_Init+0x64>)
 8002df0:	f00a fcf8 	bl	800d7e4 <HAL_SAI_InitProtocol>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002dfa:	f7ff ff7d 	bl	8002cf8 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2400541c 	.word	0x2400541c
 8002e08:	40015804 	.word	0x40015804

08002e0c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b0b8      	sub	sp, #224	; 0xe0
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	22bc      	movs	r2, #188	; 0xbc
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f01c f9f7 	bl	801f210 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a56      	ldr	r2, [pc, #344]	; (8002f80 <HAL_SAI_MspInit+0x174>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	f040 80a4 	bne.w	8002f76 <HAL_SAI_MspInit+0x16a>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e32:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8002e34:	230c      	movs	r3, #12
 8002e36:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 389;
 8002e38:	f240 1385 	movw	r3, #389	; 0x185
 8002e3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 11;
 8002e3e:	230b      	movs	r3, #11
 8002e40:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 11;
 8002e42:	230b      	movs	r3, #11
 8002e44:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 11;
 8002e46:	230b      	movs	r3, #11
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002e4a:	2340      	movs	r3, #64	; 0x40
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002e56:	2301      	movs	r3, #1
 8002e58:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e5a:	f107 0310 	add.w	r3, r7, #16
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f008 fa90 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_SAI_MspInit+0x62>
    {
      Error_Handler();
 8002e6a:	f7ff ff45 	bl	8002cf8 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002e6e:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <HAL_SAI_MspInit+0x178>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10e      	bne.n	8002e94 <HAL_SAI_MspInit+0x88>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e76:	4b44      	ldr	r3, [pc, #272]	; (8002f88 <HAL_SAI_MspInit+0x17c>)
 8002e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e7c:	4a42      	ldr	r2, [pc, #264]	; (8002f88 <HAL_SAI_MspInit+0x17c>)
 8002e7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e86:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <HAL_SAI_MspInit+0x17c>)
 8002e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_SAI_MspInit+0x178>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	4a3a      	ldr	r2, [pc, #232]	; (8002f84 <HAL_SAI_MspInit+0x178>)
 8002e9c:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 8002e9e:	2334      	movs	r3, #52	; 0x34
 8002ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002eb6:	2306      	movs	r3, #6
 8002eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4832      	ldr	r0, [pc, #200]	; (8002f8c <HAL_SAI_MspInit+0x180>)
 8002ec4:	f007 f832 	bl	8009f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ec8:	2340      	movs	r3, #64	; 0x40
 8002eca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002ee0:	2306      	movs	r3, #6
 8002ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002eea:	4619      	mov	r1, r3
 8002eec:	4828      	ldr	r0, [pc, #160]	; (8002f90 <HAL_SAI_MspInit+0x184>)
 8002eee:	f007 f81d 	bl	8009f2c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002ef4:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <HAL_SAI_MspInit+0x18c>)
 8002ef6:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002ef8:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002efa:	2257      	movs	r2, #87	; 0x57
 8002efc:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002efe:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f00:	2240      	movs	r2, #64	; 0x40
 8002f02:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f04:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f10:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f18:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f1a:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f20:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f28:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f30:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f34:	2204      	movs	r2, #4
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002f4a:	4812      	ldr	r0, [pc, #72]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f4c:	f003 f892 	bl	8006074 <HAL_DMA_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_SAI_MspInit+0x14e>
    {
      Error_Handler();
 8002f56:	f7ff fecf 	bl	8002cf8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_SAI_MspInit+0x188>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002f76:	bf00      	nop
 8002f78:	37e0      	adds	r7, #224	; 0xe0
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40015804 	.word	0x40015804
 8002f84:	24003648 	.word	0x24003648
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	58021000 	.word	0x58021000
 8002f90:	58020c00 	.word	0x58020c00
 8002f94:	240053a4 	.word	0x240053a4
 8002f98:	40020028 	.word	0x40020028

08002f9c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002fa0:	4b27      	ldr	r3, [pc, #156]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <MX_SPI2_Init+0xa8>)
 8002fa4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fa8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fb6:	2207      	movs	r2, #7
 8002fb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fce:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fd0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002fd4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_SPI2_Init+0xa4>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <MX_SPI2_Init+0xa4>)
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <MX_SPI2_Init+0xa4>)
 8003008:	2200      	movs	r2, #0
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <MX_SPI2_Init+0xa4>)
 800300e:	2200      	movs	r2, #0
 8003010:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <MX_SPI2_Init+0xa4>)
 8003014:	2200      	movs	r2, #0
 8003016:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <MX_SPI2_Init+0xa4>)
 800301a:	2200      	movs	r2, #0
 800301c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <MX_SPI2_Init+0xa4>)
 8003020:	2200      	movs	r2, #0
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <MX_SPI2_Init+0xa4>)
 8003026:	2200      	movs	r2, #0
 8003028:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800302a:	4805      	ldr	r0, [pc, #20]	; (8003040 <MX_SPI2_Init+0xa4>)
 800302c:	f00b f980 	bl	800e330 <HAL_SPI_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8003036:	f7ff fe5f 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	240054b4 	.word	0x240054b4
 8003044:	40003800 	.word	0x40003800

08003048 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b0ba      	sub	sp, #232	; 0xe8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003060:	f107 0318 	add.w	r3, r7, #24
 8003064:	22bc      	movs	r2, #188	; 0xbc
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f01c f8d1 	bl	801f210 <memset>
  if(spiHandle->Instance==SPI2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a37      	ldr	r2, [pc, #220]	; (8003150 <HAL_SPI_MspInit+0x108>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d166      	bne.n	8003146 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800307c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800307e:	2300      	movs	r3, #0
 8003080:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003082:	f107 0318 	add.w	r3, r7, #24
 8003086:	4618      	mov	r0, r3
 8003088:	f008 f97c 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003092:	f7ff fe31 	bl	8002cf8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 8003098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800309c:	4a2d      	ldr	r2, [pc, #180]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 800309e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030a6:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 80030a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 80030b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ba:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 80030d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 80030da:	f043 0302 	orr.w	r3, r3, #2
 80030de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_SPI_MspInit+0x10c>)
 80030e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030f0:	2308      	movs	r3, #8
 80030f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003102:	2303      	movs	r3, #3
 8003104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003108:	2305      	movs	r3, #5
 800310a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800310e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003112:	4619      	mov	r1, r3
 8003114:	4810      	ldr	r0, [pc, #64]	; (8003158 <HAL_SPI_MspInit+0x110>)
 8003116:	f006 ff09 	bl	8009f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 800311a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800311e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003134:	2305      	movs	r3, #5
 8003136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800313e:	4619      	mov	r1, r3
 8003140:	4806      	ldr	r0, [pc, #24]	; (800315c <HAL_SPI_MspInit+0x114>)
 8003142:	f006 fef3 	bl	8009f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003146:	bf00      	nop
 8003148:	37e8      	adds	r7, #232	; 0xe8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40003800 	.word	0x40003800
 8003154:	58024400 	.word	0x58024400
 8003158:	58020c00 	.word	0x58020c00
 800315c:	58020400 	.word	0x58020400

08003160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_MspInit+0x34>)
 8003168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800316c:	4a09      	ldr	r2, [pc, #36]	; (8003194 <HAL_MspInit+0x34>)
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_MspInit+0x34>)
 8003178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003184:	2005      	movs	r0, #5
 8003186:	f002 fdbb 	bl	8005d00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	58024400 	.word	0x58024400

08003198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800319c:	e7fe      	b.n	800319c <NMI_Handler+0x4>

0800319e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031a2:	e7fe      	b.n	80031a2 <HardFault_Handler+0x4>

080031a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a8:	e7fe      	b.n	80031a8 <MemManage_Handler+0x4>

080031aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ae:	e7fe      	b.n	80031ae <BusFault_Handler+0x4>

080031b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b4:	e7fe      	b.n	80031b4 <UsageFault_Handler+0x4>

080031b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e4:	f001 f83e 	bl	8004264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}

080031ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <DMA1_Stream1_IRQHandler+0x10>)
 80031f2:	f003 fd05 	bl	8006c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	240053a4 	.word	0x240053a4

08003200 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <DMA2_Stream0_IRQHandler+0x10>)
 8003206:	f003 fcfb 	bl	8006c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	24005230 	.word	0x24005230

08003214 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <DMA2_Stream1_IRQHandler+0x10>)
 800321a:	f003 fcf1 	bl	8006c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	240052a8 	.word	0x240052a8

08003228 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <DMA2_Stream2_IRQHandler+0x10>)
 800322e:	f003 fce7 	bl	8006c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	240050f0 	.word	0x240050f0

0800323c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <ETH_IRQHandler+0x10>)
 8003242:	f005 fc83 	bl	8008b4c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	24005888 	.word	0x24005888

08003250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
	return 1;
 8003254:	2301      	movs	r3, #1
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <_kill>:

int _kill(int pid, int sig)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <_kill+0x20>)
 800326c:	2216      	movs	r2, #22
 800326e:	601a      	str	r2, [r3, #0]
	return -1;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	2400b054 	.word	0x2400b054

08003284 <_exit>:

void _exit (int status)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800328c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ffe5 	bl	8003260 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003296:	e7fe      	b.n	8003296 <_exit+0x12>

08003298 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e00a      	b.n	80032c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032aa:	f3af 8000 	nop.w
 80032ae:	4601      	mov	r1, r0
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	60ba      	str	r2, [r7, #8]
 80032b6:	b2ca      	uxtb	r2, r1
 80032b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	3301      	adds	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	dbf0      	blt.n	80032aa <_read+0x12>
	}

return len;
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	e009      	b.n	80032f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	60ba      	str	r2, [r7, #8]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	dbf1      	blt.n	80032e4 <_write+0x12>
	}
	return len;
 8003300:	687b      	ldr	r3, [r7, #4]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_close>:

int _close(int file)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
	return -1;
 8003312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003332:	605a      	str	r2, [r3, #4]
	return 0;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <_isatty>:

int _isatty(int file)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
	return 1;
 800334a:	2301      	movs	r3, #1
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
	return 0;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <_sbrk+0x5c>)
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <_sbrk+0x60>)
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <_sbrk+0x64>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <_sbrk+0x64>)
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <_sbrk+0x68>)
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <_sbrk+0x64>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d205      	bcs.n	80033b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <_sbrk+0x6c>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ae:	e009      	b.n	80033c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <_sbrk+0x64>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <_sbrk+0x64>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	4a06      	ldr	r2, [pc, #24]	; (80033d8 <_sbrk+0x64>)
 80033c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	371c      	adds	r7, #28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	24080000 	.word	0x24080000
 80033d4:	00000400 	.word	0x00000400
 80033d8:	2400364c 	.word	0x2400364c
 80033dc:	2400b068 	.word	0x2400b068
 80033e0:	2400b054 	.word	0x2400b054

080033e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b09a      	sub	sp, #104	; 0x68
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	611a      	str	r2, [r3, #16]
 8003406:	615a      	str	r2, [r3, #20]
 8003408:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	222c      	movs	r2, #44	; 0x2c
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f01b fefd 	bl	801f210 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

	uint32_t prescalerValue, counterPeriod, pulseValueCH1, pulseValueCH2;

	prescalerValue = (uint32_t)(((SystemCoreClock / 96) / (CIS_CLK_FREQ)) - 1);
 8003416:	4b48      	ldr	r3, [pc, #288]	; (8003538 <MX_TIM1_Init+0x154>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	0adb      	lsrs	r3, r3, #11
 800341c:	4a47      	ldr	r2, [pc, #284]	; (800353c <MX_TIM1_Init+0x158>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	09db      	lsrs	r3, r3, #7
 8003424:	3b01      	subs	r3, #1
 8003426:	667b      	str	r3, [r7, #100]	; 0x64
	counterPeriod = 48 - 1;
 8003428:	232f      	movs	r3, #47	; 0x2f
 800342a:	663b      	str	r3, [r7, #96]	; 0x60
	pulseValueCH2 = 24 - 1;
 800342c:	2317      	movs	r3, #23
 800342e:	65fb      	str	r3, [r7, #92]	; 0x5c
	pulseValueCH1 = 3 - 1;
 8003430:	2302      	movs	r3, #2
 8003432:	65bb      	str	r3, [r7, #88]	; 0x58

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003434:	4b42      	ldr	r3, [pc, #264]	; (8003540 <MX_TIM1_Init+0x15c>)
 8003436:	4a43      	ldr	r2, [pc, #268]	; (8003544 <MX_TIM1_Init+0x160>)
 8003438:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescalerValue;
 800343a:	4a41      	ldr	r2, [pc, #260]	; (8003540 <MX_TIM1_Init+0x15c>)
 800343c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800343e:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003440:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <MX_TIM1_Init+0x15c>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = counterPeriod;
 8003446:	4a3e      	ldr	r2, [pc, #248]	; (8003540 <MX_TIM1_Init+0x15c>)
 8003448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800344a:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344c:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <MX_TIM1_Init+0x15c>)
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <MX_TIM1_Init+0x15c>)
 8003454:	2200      	movs	r2, #0
 8003456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003458:	4b39      	ldr	r3, [pc, #228]	; (8003540 <MX_TIM1_Init+0x15c>)
 800345a:	2200      	movs	r2, #0
 800345c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800345e:	4838      	ldr	r0, [pc, #224]	; (8003540 <MX_TIM1_Init+0x15c>)
 8003460:	f00c f91b 	bl	800f69a <HAL_TIM_PWM_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800346a:	f7ff fc45 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800346e:	2330      	movs	r3, #48	; 0x30
 8003470:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800347a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800347e:	4619      	mov	r1, r3
 8003480:	482f      	ldr	r0, [pc, #188]	; (8003540 <MX_TIM1_Init+0x15c>)
 8003482:	f00d f8ad 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800348c:	f7ff fc34 	bl	8002cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003490:	2370      	movs	r3, #112	; 0x70
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValueCH1;
 8003494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003498:	2300      	movs	r3, #0
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800349c:	2300      	movs	r3, #0
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034b0:	2200      	movs	r2, #0
 80034b2:	4619      	mov	r1, r3
 80034b4:	4822      	ldr	r0, [pc, #136]	; (8003540 <MX_TIM1_Init+0x15c>)
 80034b6:	f00c fa4f 	bl	800f958 <HAL_TIM_PWM_ConfigChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 80034c0:	f7ff fc1a 	bl	8002cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034c4:	2360      	movs	r3, #96	; 0x60
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValueCH2;
 80034c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034d0:	2204      	movs	r2, #4
 80034d2:	4619      	mov	r1, r3
 80034d4:	481a      	ldr	r0, [pc, #104]	; (8003540 <MX_TIM1_Init+0x15c>)
 80034d6:	f00c fa3f 	bl	800f958 <HAL_TIM_PWM_ConfigChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80034e0:	f7ff fc0a 	bl	8002cf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	4619      	mov	r1, r3
 8003518:	4809      	ldr	r0, [pc, #36]	; (8003540 <MX_TIM1_Init+0x15c>)
 800351a:	f00d f8e9 	bl	80106f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003524:	f7ff fbe8 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003528:	4805      	ldr	r0, [pc, #20]	; (8003540 <MX_TIM1_Init+0x15c>)
 800352a:	f000 facb 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 800352e:	bf00      	nop
 8003530:	3768      	adds	r7, #104	; 0x68
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	24000000 	.word	0x24000000
 800353c:	0023ca99 	.word	0x0023ca99
 8003540:	2400566c 	.word	0x2400566c
 8003544:	40010000 	.word	0x40010000

08003548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b092      	sub	sp, #72	; 0x48
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800354e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800355e:	f107 031c 	add.w	r3, r7, #28
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800356a:	463b      	mov	r3, r7
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
 8003578:	615a      	str	r2, [r3, #20]
 800357a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 8003580:	f240 43ef 	movw	r3, #1263	; 0x4ef
 8003584:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_BLUE_OFF > 0)
	  pulseValue = CIS_LED_BLUE_OFF - 1;
 8003586:	f240 43af 	movw	r3, #1199	; 0x4af
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800358c:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <MX_TIM3_Init+0xf8>)
 800358e:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <MX_TIM3_Init+0xfc>)
 8003590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = prescalerValue;
 8003592:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <MX_TIM3_Init+0xf8>)
 8003594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003596:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <MX_TIM3_Init+0xf8>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = counterPeriod;
 800359e:	4a28      	ldr	r2, [pc, #160]	; (8003640 <MX_TIM3_Init+0xf8>)
 80035a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a2:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <MX_TIM3_Init+0xf8>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <MX_TIM3_Init+0xf8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035b0:	4823      	ldr	r0, [pc, #140]	; (8003640 <MX_TIM3_Init+0xf8>)
 80035b2:	f00c f81b 	bl	800f5ec <HAL_TIM_Base_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80035bc:	f7ff fb9c 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035c0:	481f      	ldr	r0, [pc, #124]	; (8003640 <MX_TIM3_Init+0xf8>)
 80035c2:	f00c f86a 	bl	800f69a <HAL_TIM_PWM_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80035cc:	f7ff fb94 	bl	8002cf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80035d0:	2305      	movs	r3, #5
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80035d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035dc:	4619      	mov	r1, r3
 80035de:	4818      	ldr	r0, [pc, #96]	; (8003640 <MX_TIM3_Init+0xf8>)
 80035e0:	f00c faca 	bl	800fb78 <HAL_TIM_SlaveConfigSynchro>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80035ea:	f7ff fb85 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035f6:	f107 031c 	add.w	r3, r7, #28
 80035fa:	4619      	mov	r1, r3
 80035fc:	4810      	ldr	r0, [pc, #64]	; (8003640 <MX_TIM3_Init+0xf8>)
 80035fe:	f00c ffef 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8003608:	f7ff fb76 	bl	8002cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360c:	2360      	movs	r3, #96	; 0x60
 800360e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 8003610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003612:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800361c:	463b      	mov	r3, r7
 800361e:	2200      	movs	r2, #0
 8003620:	4619      	mov	r1, r3
 8003622:	4807      	ldr	r0, [pc, #28]	; (8003640 <MX_TIM3_Init+0xf8>)
 8003624:	f00c f998 	bl	800f958 <HAL_TIM_PWM_ConfigChannel>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800362e:	f7ff fb63 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003632:	4803      	ldr	r0, [pc, #12]	; (8003640 <MX_TIM3_Init+0xf8>)
 8003634:	f000 fa46 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 8003638:	bf00      	nop
 800363a:	3748      	adds	r7, #72	; 0x48
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	24005620 	.word	0x24005620
 8003644:	40000400 	.word	0x40000400

08003648 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b092      	sub	sp, #72	; 0x48
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800364e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	60da      	str	r2, [r3, #12]
 800365c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800365e:	f107 031c 	add.w	r3, r7, #28
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800366a:	463b      	mov	r3, r7
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
 8003678:	615a      	str	r2, [r3, #20]
 800367a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 8003680:	f240 43ef 	movw	r3, #1263	; 0x4ef
 8003684:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_RED_OFF > 0)
	  pulseValue = CIS_LED_RED_OFF - 1;
 8003686:	f240 43af 	movw	r3, #1199	; 0x4af
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800368c:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <MX_TIM4_Init+0xf8>)
 800368e:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <MX_TIM4_Init+0xfc>)
 8003690:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = prescalerValue;
 8003692:	4a2b      	ldr	r2, [pc, #172]	; (8003740 <MX_TIM4_Init+0xf8>)
 8003694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003696:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003698:	4b29      	ldr	r3, [pc, #164]	; (8003740 <MX_TIM4_Init+0xf8>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = counterPeriod;
 800369e:	4a28      	ldr	r2, [pc, #160]	; (8003740 <MX_TIM4_Init+0xf8>)
 80036a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a2:	60d3      	str	r3, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036a4:	4b26      	ldr	r3, [pc, #152]	; (8003740 <MX_TIM4_Init+0xf8>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036aa:	4b25      	ldr	r3, [pc, #148]	; (8003740 <MX_TIM4_Init+0xf8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80036b0:	4823      	ldr	r0, [pc, #140]	; (8003740 <MX_TIM4_Init+0xf8>)
 80036b2:	f00b ff9b 	bl	800f5ec <HAL_TIM_Base_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80036bc:	f7ff fb1c 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80036c0:	481f      	ldr	r0, [pc, #124]	; (8003740 <MX_TIM4_Init+0xf8>)
 80036c2:	f00b ffea 	bl	800f69a <HAL_TIM_PWM_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80036cc:	f7ff fb14 	bl	8002cf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80036d0:	2305      	movs	r3, #5
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80036d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036dc:	4619      	mov	r1, r3
 80036de:	4818      	ldr	r0, [pc, #96]	; (8003740 <MX_TIM4_Init+0xf8>)
 80036e0:	f00c fa4a 	bl	800fb78 <HAL_TIM_SlaveConfigSynchro>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 80036ea:	f7ff fb05 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	4619      	mov	r1, r3
 80036fc:	4810      	ldr	r0, [pc, #64]	; (8003740 <MX_TIM4_Init+0xf8>)
 80036fe:	f00c ff6f 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8003708:	f7ff faf6 	bl	8002cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800370c:	2360      	movs	r3, #96	; 0x60
 800370e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 8003710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003712:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800371c:	463b      	mov	r3, r7
 800371e:	2204      	movs	r2, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4807      	ldr	r0, [pc, #28]	; (8003740 <MX_TIM4_Init+0xf8>)
 8003724:	f00c f918 	bl	800f958 <HAL_TIM_PWM_ConfigChannel>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800372e:	f7ff fae3 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003732:	4803      	ldr	r0, [pc, #12]	; (8003740 <MX_TIM4_Init+0xf8>)
 8003734:	f000 f9c6 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 8003738:	bf00      	nop
 800373a:	3748      	adds	r7, #72	; 0x48
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	24005588 	.word	0x24005588
 8003744:	40000800 	.word	0x40000800

08003748 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b092      	sub	sp, #72	; 0x48
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800374e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	60da      	str	r2, [r3, #12]
 800375c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375e:	f107 031c 	add.w	r3, r7, #28
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800376a:	463b      	mov	r3, r7
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]
 8003778:	615a      	str	r2, [r3, #20]
 800377a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  uint32_t prescalerValue, counterPeriod, pulseValue;

  prescalerValue = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
  counterPeriod = CIS_END_CAPTURE - 1;
 8003780:	f240 43ef 	movw	r3, #1263	; 0x4ef
 8003784:	643b      	str	r3, [r7, #64]	; 0x40
#else
  counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  if (CIS_LED_GREEN_OFF > 0)
	  pulseValue = CIS_LED_GREEN_OFF - 1;
 8003786:	f240 43af 	movw	r3, #1199	; 0x4af
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
  else
    pulseValue = 0;

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800378c:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <MX_TIM5_Init+0xf8>)
 800378e:	4a2d      	ldr	r2, [pc, #180]	; (8003844 <MX_TIM5_Init+0xfc>)
 8003790:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = prescalerValue;
 8003792:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <MX_TIM5_Init+0xf8>)
 8003794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003796:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003798:	4b29      	ldr	r3, [pc, #164]	; (8003840 <MX_TIM5_Init+0xf8>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = counterPeriod;
 800379e:	4a28      	ldr	r2, [pc, #160]	; (8003840 <MX_TIM5_Init+0xf8>)
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	60d3      	str	r3, [r2, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a4:	4b26      	ldr	r3, [pc, #152]	; (8003840 <MX_TIM5_Init+0xf8>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037aa:	4b25      	ldr	r3, [pc, #148]	; (8003840 <MX_TIM5_Init+0xf8>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80037b0:	4823      	ldr	r0, [pc, #140]	; (8003840 <MX_TIM5_Init+0xf8>)
 80037b2:	f00b ff1b 	bl	800f5ec <HAL_TIM_Base_Init>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80037bc:	f7ff fa9c 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80037c0:	481f      	ldr	r0, [pc, #124]	; (8003840 <MX_TIM5_Init+0xf8>)
 80037c2:	f00b ff6a 	bl	800f69a <HAL_TIM_PWM_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80037cc:	f7ff fa94 	bl	8002cf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80037d0:	2305      	movs	r3, #5
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80037d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037dc:	4619      	mov	r1, r3
 80037de:	4818      	ldr	r0, [pc, #96]	; (8003840 <MX_TIM5_Init+0xf8>)
 80037e0:	f00c f9ca 	bl	800fb78 <HAL_TIM_SlaveConfigSynchro>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM5_Init+0xa6>
  {
    Error_Handler();
 80037ea:	f7ff fa85 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037f6:	f107 031c 	add.w	r3, r7, #28
 80037fa:	4619      	mov	r1, r3
 80037fc:	4810      	ldr	r0, [pc, #64]	; (8003840 <MX_TIM5_Init+0xf8>)
 80037fe:	f00c feef 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM5_Init+0xc4>
  {
    Error_Handler();
 8003808:	f7ff fa76 	bl	8002cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800380c:	2360      	movs	r3, #96	; 0x60
 800380e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulseValue;
 8003810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003812:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800381c:	463b      	mov	r3, r7
 800381e:	2208      	movs	r2, #8
 8003820:	4619      	mov	r1, r3
 8003822:	4807      	ldr	r0, [pc, #28]	; (8003840 <MX_TIM5_Init+0xf8>)
 8003824:	f00c f898 	bl	800f958 <HAL_TIM_PWM_ConfigChannel>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 800382e:	f7ff fa63 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003832:	4803      	ldr	r0, [pc, #12]	; (8003840 <MX_TIM5_Init+0xf8>)
 8003834:	f000 f946 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 8003838:	bf00      	nop
 800383a:	3748      	adds	r7, #72	; 0x48
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	240055d4 	.word	0x240055d4
 8003844:	40000c00 	.word	0x40000c00

08003848 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b09e      	sub	sp, #120	; 0x78
 800384c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800384e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800386a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	60da      	str	r2, [r3, #12]
 8003878:	611a      	str	r2, [r3, #16]
 800387a:	615a      	str	r2, [r3, #20]
 800387c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800387e:	1d3b      	adds	r3, r7, #4
 8003880:	222c      	movs	r2, #44	; 0x2c
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f01b fcc3 	bl	801f210 <memset>

//	prescalerValue = (uint32_t)(((SystemCoreClock / 96) / (CIS_CLK_FREQ)) - 1);
//	counterPeriod = 480 - 1;
//	pulseValue = 240 - 1;

  prescalerValue = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	677b      	str	r3, [r7, #116]	; 0x74
  counterPeriod = CIS_END_CAPTURE - 1;
 800388e:	f240 43ef 	movw	r3, #1263	; 0x4ef
 8003892:	673b      	str	r3, [r7, #112]	; 0x70
  pulseValue = CIS_SP_OFF - 1;
 8003894:	230b      	movs	r3, #11
 8003896:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <MX_TIM8_Init+0x160>)
 800389a:	4a44      	ldr	r2, [pc, #272]	; (80039ac <MX_TIM8_Init+0x164>)
 800389c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = prescalerValue;
 800389e:	4a42      	ldr	r2, [pc, #264]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a2:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a4:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = counterPeriod;
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ae:	60d3      	str	r3, [r2, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b0:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038bc:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038be:	2200      	movs	r2, #0
 80038c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80038c2:	4839      	ldr	r0, [pc, #228]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038c4:	f00b fe92 	bl	800f5ec <HAL_TIM_Base_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80038ce:	f7ff fa13 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80038d2:	4835      	ldr	r0, [pc, #212]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038d4:	f00b fee1 	bl	800f69a <HAL_TIM_PWM_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80038de:	f7ff fa0b 	bl	8002cf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80038e2:	2305      	movs	r3, #5
 80038e4:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80038ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80038ee:	4619      	mov	r1, r3
 80038f0:	482d      	ldr	r0, [pc, #180]	; (80039a8 <MX_TIM8_Init+0x160>)
 80038f2:	f00c f941 	bl	800fb78 <HAL_TIM_SlaveConfigSynchro>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 80038fc:	f7ff f9fc 	bl	8002cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003900:	2300      	movs	r3, #0
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003904:	2300      	movs	r3, #0
 8003906:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003908:	2300      	movs	r3, #0
 800390a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800390c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003910:	4619      	mov	r1, r3
 8003912:	4825      	ldr	r0, [pc, #148]	; (80039a8 <MX_TIM8_Init+0x160>)
 8003914:	f00c fe64 	bl	80105e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM8_Init+0xda>
  {
    Error_Handler();
 800391e:	f7ff f9eb 	bl	8002cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003922:	2370      	movs	r3, #112	; 0x70
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValue;
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800392a:	2302      	movs	r3, #2
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800392e:	2300      	movs	r3, #0
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003932:	2300      	movs	r3, #0
 8003934:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800393e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003942:	2208      	movs	r2, #8
 8003944:	4619      	mov	r1, r3
 8003946:	4818      	ldr	r0, [pc, #96]	; (80039a8 <MX_TIM8_Init+0x160>)
 8003948:	f00c f806 	bl	800f958 <HAL_TIM_PWM_ConfigChannel>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8003952:	f7ff f9d1 	bl	8002cf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800396a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800396e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003978:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003982:	2300      	movs	r3, #0
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4807      	ldr	r0, [pc, #28]	; (80039a8 <MX_TIM8_Init+0x160>)
 800398c:	f00c feb0 	bl	80106f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_TIM8_Init+0x152>
  {
    Error_Handler();
 8003996:	f7ff f9af 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800399a:	4803      	ldr	r0, [pc, #12]	; (80039a8 <MX_TIM8_Init+0x160>)
 800399c:	f000 f892 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 80039a0:	bf00      	nop
 80039a2:	3778      	adds	r7, #120	; 0x78
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	2400553c 	.word	0x2400553c
 80039ac:	40010400 	.word	0x40010400

080039b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <HAL_TIM_PWM_MspInit+0x3c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10e      	bne.n	80039e0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_TIM_PWM_MspInit+0x40>)
 80039c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039c8:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <HAL_TIM_PWM_MspInit+0x40>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_TIM_PWM_MspInit+0x40>)
 80039d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	40010000 	.word	0x40010000
 80039f0:	58024400 	.word	0x58024400

080039f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <HAL_TIM_Base_MspInit+0xbc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10f      	bne.n	8003a26 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a06:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a0c:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a16:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003a24:	e03d      	b.n	8003aa2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <HAL_TIM_Base_MspInit+0xc4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d10f      	bne.n	8003a50 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a30:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
}
 8003a4e:	e028      	b.n	8003aa2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_TIM_Base_MspInit+0xc8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10f      	bne.n	8003a7a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a60:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a62:	f043 0308 	orr.w	r3, r3, #8
 8003a66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	e013      	b.n	8003aa2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM8)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a10      	ldr	r2, [pc, #64]	; (8003ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10e      	bne.n	8003aa2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a94:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <HAL_TIM_Base_MspInit+0xc0>)
 8003a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40010400 	.word	0x40010400

08003ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	; 0x30
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 031c 	add.w	r3, r7, #28
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5e      	ldr	r2, [pc, #376]	; (8003c5c <HAL_TIM_MspPostInit+0x198>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d120      	bne.n	8003b28 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae6:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aec:	4a5c      	ldr	r2, [pc, #368]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003af6:	4b5a      	ldr	r3, [pc, #360]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 8003b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b12:	2303      	movs	r3, #3
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b16:	2301      	movs	r3, #1
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 8003b1a:	f107 031c 	add.w	r3, r7, #28
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4850      	ldr	r0, [pc, #320]	; (8003c64 <HAL_TIM_MspPostInit+0x1a0>)
 8003b22:	f006 fa03 	bl	8009f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b26:	e095      	b.n	8003c54 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a4e      	ldr	r2, [pc, #312]	; (8003c68 <HAL_TIM_MspPostInit+0x1a4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d11f      	bne.n	8003b72 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b32:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b38:	4a49      	ldr	r2, [pc, #292]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003b3a:	f043 0304 	orr.w	r3, r3, #4
 8003b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b42:	4b47      	ldr	r3, [pc, #284]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 8003b50:	2340      	movs	r3, #64	; 0x40
 8003b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b60:	2302      	movs	r3, #2
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 8003b64:	f107 031c 	add.w	r3, r7, #28
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4840      	ldr	r0, [pc, #256]	; (8003c6c <HAL_TIM_MspPostInit+0x1a8>)
 8003b6c:	f006 f9de 	bl	8009f2c <HAL_GPIO_Init>
}
 8003b70:	e070      	b.n	8003c54 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a3e      	ldr	r2, [pc, #248]	; (8003c70 <HAL_TIM_MspPostInit+0x1ac>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d120      	bne.n	8003bbe <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7c:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b82:	4a37      	ldr	r2, [pc, #220]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003b84:	f043 0308 	orr.w	r3, r3, #8
 8003b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b8c:	4b34      	ldr	r3, [pc, #208]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 8003b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bac:	2302      	movs	r3, #2
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	482f      	ldr	r0, [pc, #188]	; (8003c74 <HAL_TIM_MspPostInit+0x1b0>)
 8003bb8:	f006 f9b8 	bl	8009f2c <HAL_GPIO_Init>
}
 8003bbc:	e04a      	b.n	8003c54 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_TIM_MspPostInit+0x1b4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d120      	bne.n	8003c0a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bce:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 8003be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	4619      	mov	r1, r3
 8003c02:	481e      	ldr	r0, [pc, #120]	; (8003c7c <HAL_TIM_MspPostInit+0x1b8>)
 8003c04:	f006 f992 	bl	8009f2c <HAL_GPIO_Init>
}
 8003c08:	e024      	b.n	8003c54 <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <HAL_TIM_MspPostInit+0x1bc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d11f      	bne.n	8003c54 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c1a:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003c1c:	f043 0304 	orr.w	r3, r3, #4
 8003c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <HAL_TIM_MspPostInit+0x19c>)
 8003c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 8003c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c40:	2303      	movs	r3, #3
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c44:	2303      	movs	r3, #3
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4807      	ldr	r0, [pc, #28]	; (8003c6c <HAL_TIM_MspPostInit+0x1a8>)
 8003c50:	f006 f96c 	bl	8009f2c <HAL_GPIO_Init>
}
 8003c54:	bf00      	nop
 8003c56:	3730      	adds	r7, #48	; 0x30
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	58024400 	.word	0x58024400
 8003c64:	58020000 	.word	0x58020000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	58020800 	.word	0x58020800
 8003c70:	40000800 	.word	0x40000800
 8003c74:	58020c00 	.word	0x58020c00
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	58021c00 	.word	0x58021c00
 8003c80:	40010400 	.word	0x40010400

08003c84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c88:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003c8a:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <MX_USART1_UART_Init+0x94>)
 8003c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c8e:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c96:	4b1f      	ldr	r3, [pc, #124]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003caa:	220c      	movs	r2, #12
 8003cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cae:	4b19      	ldr	r3, [pc, #100]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ccc:	4811      	ldr	r0, [pc, #68]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003cce:	f00c fd8d 	bl	80107ec <HAL_UART_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003cd8:	f7ff f80e 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cdc:	2100      	movs	r1, #0
 8003cde:	480d      	ldr	r0, [pc, #52]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003ce0:	f00d fcda 	bl	8011698 <HAL_UARTEx_SetTxFifoThreshold>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003cea:	f7ff f805 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4808      	ldr	r0, [pc, #32]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003cf2:	f00d fd0f 	bl	8011714 <HAL_UARTEx_SetRxFifoThreshold>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003cfc:	f7fe fffc 	bl	8002cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003d00:	4804      	ldr	r0, [pc, #16]	; (8003d14 <MX_USART1_UART_Init+0x90>)
 8003d02:	f00d fc90 	bl	8011626 <HAL_UARTEx_DisableFifoMode>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003d0c:	f7fe fff4 	bl	8002cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	240056b8 	.word	0x240056b8
 8003d18:	40011000 	.word	0x40011000

08003d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b0b8      	sub	sp, #224	; 0xe0
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d34:	f107 0310 	add.w	r3, r7, #16
 8003d38:	22bc      	movs	r2, #188	; 0xbc
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f01b fa67 	bl	801f210 <memset>
  if(uartHandle->Instance==USART1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a24      	ldr	r2, [pc, #144]	; (8003dd8 <HAL_UART_MspInit+0xbc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d141      	bne.n	8003dd0 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d56:	f107 0310 	add.w	r3, r7, #16
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f007 fb12 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003d66:	f7fe ffc7 	bl	8002cf8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <HAL_UART_MspInit+0xc0>)
 8003d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d70:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <HAL_UART_MspInit+0xc0>)
 8003d72:	f043 0310 	orr.w	r3, r3, #16
 8003d76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_UART_MspInit+0xc0>)
 8003d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d88:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <HAL_UART_MspInit+0xc0>)
 8003d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_UART_MspInit+0xc0>)
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <HAL_UART_MspInit+0xc0>)
 8003d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003da6:	23c0      	movs	r3, #192	; 0xc0
 8003da8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dac:	2302      	movs	r3, #2
 8003dae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4805      	ldr	r0, [pc, #20]	; (8003de0 <HAL_UART_MspInit+0xc4>)
 8003dcc:	f006 f8ae 	bl	8009f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	37e0      	adds	r7, #224	; 0xe0
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40011000 	.word	0x40011000
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	58020400 	.word	0x58020400

08003de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003de8:	f7fc ff90 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dec:	480c      	ldr	r0, [pc, #48]	; (8003e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dee:	490d      	ldr	r1, [pc, #52]	; (8003e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003df0:	4a0d      	ldr	r2, [pc, #52]	; (8003e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003df4:	e002      	b.n	8003dfc <LoopCopyDataInit>

08003df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dfa:	3304      	adds	r3, #4

08003dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e00:	d3f9      	bcc.n	8003df6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e04:	4c0a      	ldr	r4, [pc, #40]	; (8003e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e08:	e001      	b.n	8003e0e <LoopFillZerobss>

08003e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e0c:	3204      	adds	r2, #4

08003e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e10:	d3fb      	bcc.n	8003e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e12:	f01b f99b 	bl	801f14c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e16:	f7fe fbf1 	bl	80025fc <main>
  bx  lr
 8003e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003e20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e24:	2400361c 	.word	0x2400361c
  ldr r2, =_sidata
 8003e28:	0802a2e8 	.word	0x0802a2e8
  ldr r2, =_sbss
 8003e2c:	2400361c 	.word	0x2400361c
  ldr r4, =_ebss
 8003e30:	2400b064 	.word	0x2400b064

08003e34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e34:	e7fe      	b.n	8003e34 <ADC3_IRQHandler>

08003e36 <arm_copy_q15>:

void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b087      	sub	sp, #28
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003e48:	e01a      	b.n	8003e80 <arm_copy_q15+0x4a>
  {
    /* C = A */
    /* Read two inputs */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003e4a:	f107 030c 	add.w	r3, r7, #12
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	1d11      	adds	r1, r2, #4
 8003e52:	6019      	str	r1, [r3, #0]
 8003e54:	f107 0108 	add.w	r1, r7, #8
 8003e58:	680b      	ldr	r3, [r1, #0]
 8003e5a:	1d18      	adds	r0, r3, #4
 8003e5c:	6008      	str	r0, [r1, #0]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	601a      	str	r2, [r3, #0]
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003e62:	f107 030c 	add.w	r3, r7, #12
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	1d11      	adds	r1, r2, #4
 8003e6a:	6019      	str	r1, [r3, #0]
 8003e6c:	f107 0108 	add.w	r1, r7, #8
 8003e70:	680b      	ldr	r3, [r1, #0]
 8003e72:	1d18      	adds	r0, r3, #4
 8003e74:	6008      	str	r0, [r1, #0]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e1      	bne.n	8003e4a <arm_copy_q15+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8003e8e:	e00b      	b.n	8003ea8 <arm_copy_q15+0x72>
  {
    /* C = A */
    /* Copy and then store the value in the destination buffer */
    *pDst++ = *pSrc++;
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	1c93      	adds	r3, r2, #2
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1c99      	adds	r1, r3, #2
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003ea0:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <arm_copy_q15+0x5a>
  }
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00b      	beq.n	8003ee4 <LAN8742_RegisterBusIO+0x28>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <LAN8742_RegisterBusIO+0x28>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <LAN8742_RegisterBusIO+0x28>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ee8:	e014      	b.n	8003f14 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d17c      	bne.n	800403a <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e01c      	b.n	8003f94 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f107 0208 	add.w	r2, r7, #8
 8003f62:	2112      	movs	r1, #18
 8003f64:	6978      	ldr	r0, [r7, #20]
 8003f66:	4798      	blx	r3
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da03      	bge.n	8003f76 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003f6e:	f06f 0304 	mvn.w	r3, #4
 8003f72:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003f74:	e00b      	b.n	8003f8e <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d105      	bne.n	8003f8e <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
         break;
 8003f8c:	e005      	b.n	8003f9a <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b1f      	cmp	r3, #31
 8003f98:	d9df      	bls.n	8003f5a <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b1f      	cmp	r3, #31
 8003fa0:	d902      	bls.n	8003fa8 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003fa2:	f06f 0302 	mvn.w	r3, #2
 8003fa6:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d145      	bne.n	800403a <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6810      	ldr	r0, [r2, #0]
 8003fb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4798      	blx	r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	db37      	blt.n	8004034 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6810      	ldr	r0, [r2, #0]
 8003fcc:	f107 0208 	add.w	r2, r7, #8
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4798      	blx	r3
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	db28      	blt.n	800402c <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	4798      	blx	r3
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003fe4:	e01c      	b.n	8004020 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	4798      	blx	r3
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ff8:	d80e      	bhi.n	8004018 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6810      	ldr	r0, [r2, #0]
 8004002:	f107 0208 	add.w	r2, r7, #8
 8004006:	2100      	movs	r1, #0
 8004008:	4798      	blx	r3
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	da07      	bge.n	8004020 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8004010:	f06f 0304 	mvn.w	r3, #4
 8004014:	613b      	str	r3, [r7, #16]
                 break;
 8004016:	e010      	b.n	800403a <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8004018:	f06f 0301 	mvn.w	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
               break;
 800401e:	e00c      	b.n	800403a <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1dd      	bne.n	8003fe6 <LAN8742_Init+0xc6>
 800402a:	e006      	b.n	800403a <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800402c:	f06f 0304 	mvn.w	r3, #4
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	e002      	b.n	800403a <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8004034:	f06f 0303 	mvn.w	r3, #3
 8004038:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d112      	bne.n	8004066 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	4798      	blx	r3
 8004046:	4603      	mov	r3, r0
 8004048:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800404a:	bf00      	nop
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	4798      	blx	r3
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800405e:	d9f5      	bls.n	800404c <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8004066:	693b      	ldr	r3, [r7, #16]
 }
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6810      	ldr	r0, [r2, #0]
 8004084:	f107 020c 	add.w	r2, r7, #12
 8004088:	2101      	movs	r1, #1
 800408a:	4798      	blx	r3
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	da02      	bge.n	8004098 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004092:	f06f 0304 	mvn.w	r3, #4
 8004096:	e06e      	b.n	8004176 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6810      	ldr	r0, [r2, #0]
 80040a0:	f107 020c 	add.w	r2, r7, #12
 80040a4:	2101      	movs	r1, #1
 80040a6:	4798      	blx	r3
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da02      	bge.n	80040b4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80040ae:	f06f 0304 	mvn.w	r3, #4
 80040b2:	e060      	b.n	8004176 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80040be:	2301      	movs	r3, #1
 80040c0:	e059      	b.n	8004176 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6810      	ldr	r0, [r2, #0]
 80040ca:	f107 020c 	add.w	r2, r7, #12
 80040ce:	2100      	movs	r1, #0
 80040d0:	4798      	blx	r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da02      	bge.n	80040de <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80040d8:	f06f 0304 	mvn.w	r3, #4
 80040dc:	e04b      	b.n	8004176 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d11b      	bne.n	8004120 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d006      	beq.n	8004100 <LAN8742_GetLinkState+0x90>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80040fc:	2302      	movs	r3, #2
 80040fe:	e03a      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800410a:	2303      	movs	r3, #3
 800410c:	e033      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004118:	2304      	movs	r3, #4
 800411a:	e02c      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800411c:	2305      	movs	r3, #5
 800411e:	e02a      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6810      	ldr	r0, [r2, #0]
 8004128:	f107 020c 	add.w	r2, r7, #12
 800412c:	211f      	movs	r1, #31
 800412e:	4798      	blx	r3
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	da02      	bge.n	800413c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004136:	f06f 0304 	mvn.w	r3, #4
 800413a:	e01c      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8004146:	2306      	movs	r3, #6
 8004148:	e015      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 031c 	and.w	r3, r3, #28
 8004150:	2b18      	cmp	r3, #24
 8004152:	d101      	bne.n	8004158 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004154:	2302      	movs	r3, #2
 8004156:	e00e      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 031c 	and.w	r3, r3, #28
 800415e:	2b08      	cmp	r3, #8
 8004160:	d101      	bne.n	8004166 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004162:	2303      	movs	r3, #3
 8004164:	e007      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 031c 	and.w	r3, r3, #28
 800416c:	2b14      	cmp	r3, #20
 800416e:	d101      	bne.n	8004174 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004170:	2304      	movs	r3, #4
 8004172:	e000      	b.n	8004176 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004174:	2305      	movs	r3, #5
    }				
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004186:	2003      	movs	r0, #3
 8004188:	f001 fdba 	bl	8005d00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800418c:	f006 ff24 	bl	800afd8 <HAL_RCC_GetSysClockFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_Init+0x68>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	4913      	ldr	r1, [pc, #76]	; (80041ec <HAL_Init+0x6c>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
 80041a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_Init+0x68>)
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <HAL_Init+0x6c>)
 80041b4:	5cd3      	ldrb	r3, [r2, r3]
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <HAL_Init+0x70>)
 80041c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <HAL_Init+0x74>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041ca:	2000      	movs	r0, #0
 80041cc:	f000 f814 	bl	80041f8 <HAL_InitTick>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e002      	b.n	80041e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041da:	f7fe ffc1 	bl	8003160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	58024400 	.word	0x58024400
 80041ec:	08027bbc 	.word	0x08027bbc
 80041f0:	24000004 	.word	0x24000004
 80041f4:	24000000 	.word	0x24000000

080041f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004200:	4b15      	ldr	r3, [pc, #84]	; (8004258 <HAL_InitTick+0x60>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e021      	b.n	8004250 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_InitTick+0x64>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_InitTick+0x60>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4619      	mov	r1, r3
 8004216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800421a:	fbb3 f3f1 	udiv	r3, r3, r1
 800421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004222:	4618      	mov	r0, r3
 8004224:	f001 fd9f 	bl	8005d66 <HAL_SYSTICK_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00e      	b.n	8004250 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b0f      	cmp	r3, #15
 8004236:	d80a      	bhi.n	800424e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004238:	2200      	movs	r2, #0
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004240:	f001 fd69 	bl	8005d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004244:	4a06      	ldr	r2, [pc, #24]	; (8004260 <HAL_InitTick+0x68>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	e000      	b.n	8004250 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	2400000c 	.word	0x2400000c
 800425c:	24000000 	.word	0x24000000
 8004260:	24000008 	.word	0x24000008

08004264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_IncTick+0x20>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_IncTick+0x24>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4413      	add	r3, r2
 8004274:	4a04      	ldr	r2, [pc, #16]	; (8004288 <HAL_IncTick+0x24>)
 8004276:	6013      	str	r3, [r2, #0]
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	2400000c 	.word	0x2400000c
 8004288:	24005748 	.word	0x24005748

0800428c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return uwTick;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <HAL_GetTick+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	24005748 	.word	0x24005748

080042a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042ac:	f7ff ffee 	bl	800428c <HAL_GetTick>
 80042b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042bc:	d005      	beq.n	80042ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042be:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_Delay+0x44>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ca:	bf00      	nop
 80042cc:	f7ff ffde 	bl	800428c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d8f7      	bhi.n	80042cc <HAL_Delay+0x28>
  {
  }
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	2400000c 	.word	0x2400000c

080042ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <HAL_GetREVID+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0c1b      	lsrs	r3, r3, #16
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	5c001000 	.word	0x5c001000

08004304 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004314:	4904      	ldr	r1, [pc, #16]	; (8004328 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	58000400 	.word	0x58000400

0800432c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	43db      	mvns	r3, r3
 800433e:	401a      	ands	r2, r3
 8004340:	4904      	ldr	r1, [pc, #16]	; (8004354 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	58000400 	.word	0x58000400

08004358 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_SetFMCMemorySwappingConfig+0x24>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004368:	4904      	ldr	r1, [pc, #16]	; (800437c <HAL_SetFMCMemorySwappingConfig+0x24>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	52004000 	.word	0x52004000

08004380 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	609a      	str	r2, [r3, #8]
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3360      	adds	r3, #96	; 0x60
 80043fa:	461a      	mov	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	431a      	orrs	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800441c:	bf00      	nop
 800441e:	371c      	adds	r7, #28
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	611a      	str	r2, [r3, #16]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800445a:	b480      	push	{r7}
 800445c:	b087      	sub	sp, #28
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3360      	adds	r3, #96	; 0x60
 800446a:	461a      	mov	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	431a      	orrs	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	601a      	str	r2, [r3, #0]
  }
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3330      	adds	r3, #48	; 0x30
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	0a1b      	lsrs	r3, r3, #8
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	4413      	add	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	211f      	movs	r1, #31
 80044e2:	fa01 f303 	lsl.w	r3, r1, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	401a      	ands	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	f003 011f 	and.w	r1, r3, #31
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	431a      	orrs	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f023 0203 	bic.w	r2, r3, #3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3314      	adds	r3, #20
 8004544:	461a      	mov	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	0e5b      	lsrs	r3, r3, #25
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	4413      	add	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	0d1b      	lsrs	r3, r3, #20
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2107      	movs	r1, #7
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	401a      	ands	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	0d1b      	lsrs	r3, r3, #20
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	431a      	orrs	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a4:	43db      	mvns	r3, r3
 80045a6:	401a      	ands	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f003 0318 	and.w	r3, r3, #24
 80045ae:	4908      	ldr	r1, [pc, #32]	; (80045d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80045b0:	40d9      	lsrs	r1, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	400b      	ands	r3, r1
 80045b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	000fffff 	.word	0x000fffff

080045d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 031f 	and.w	r3, r3, #31
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <LL_ADC_DisableDeepPowerDown+0x20>)
 80045fe:	4013      	ands	r3, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6093      	str	r3, [r2, #8]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	5fffffc0 	.word	0x5fffffc0

08004614 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004628:	d101      	bne.n	800462e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <LL_ADC_EnableInternalRegulator+0x24>)
 800464a:	4013      	ands	r3, r2
 800464c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	6fffffc0 	.word	0x6fffffc0

08004664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004678:	d101      	bne.n	800467e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <LL_ADC_Enable+0x24>)
 800469a:	4013      	ands	r3, r2
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	7fffffc0 	.word	0x7fffffc0

080046b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <LL_ADC_Disable+0x24>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	f043 0202 	orr.w	r2, r3, #2
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	7fffffc0 	.word	0x7fffffc0

080046dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <LL_ADC_IsEnabled+0x18>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <LL_ADC_IsEnabled+0x1a>
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d101      	bne.n	800471a <LL_ADC_IsDisableOngoing+0x18>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <LL_ADC_IsDisableOngoing+0x1a>
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <LL_ADC_REG_StartConversion+0x24>)
 8004736:	4013      	ands	r3, r2
 8004738:	f043 0204 	orr.w	r2, r3, #4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	7fffffc0 	.word	0x7fffffc0

08004750 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b04      	cmp	r3, #4
 8004762:	d101      	bne.n	8004768 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b08      	cmp	r3, #8
 8004788:	d101      	bne.n	800478e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b089      	sub	sp, #36	; 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e18e      	b.n	8004ad4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fc fcb5 	bl	8001134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff ff19 	bl	8004614 <LL_ADC_IsDeepPowerDownEnabled>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff feff 	bl	80045f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff ff34 	bl	8004664 <LL_ADC_IsInternalRegulatorEnabled>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d114      	bne.n	800482c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff ff18 	bl	800463c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800480c:	4b9a      	ldr	r3, [pc, #616]	; (8004a78 <HAL_ADC_Init+0x2dc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	4a9a      	ldr	r2, [pc, #616]	; (8004a7c <HAL_ADC_Init+0x2e0>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	3301      	adds	r3, #1
 800481c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800481e:	e002      	b.n	8004826 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	3b01      	subs	r3, #1
 8004824:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f9      	bne.n	8004820 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff17 	bl	8004664 <LL_ADC_IsInternalRegulatorEnabled>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004840:	f043 0210 	orr.w	r2, r3, #16
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff77 	bl	8004750 <LL_ADC_REG_IsConversionOngoing>
 8004862:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	f040 8128 	bne.w	8004ac2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f040 8124 	bne.w	8004ac2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004882:	f043 0202 	orr.w	r2, r3, #2
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ff24 	bl	80046dc <LL_ADC_IsEnabled>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d136      	bne.n	8004908 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a78      	ldr	r2, [pc, #480]	; (8004a80 <HAL_ADC_Init+0x2e4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_ADC_Init+0x112>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a76      	ldr	r2, [pc, #472]	; (8004a84 <HAL_ADC_Init+0x2e8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10e      	bne.n	80048cc <HAL_ADC_Init+0x130>
 80048ae:	4874      	ldr	r0, [pc, #464]	; (8004a80 <HAL_ADC_Init+0x2e4>)
 80048b0:	f7ff ff14 	bl	80046dc <LL_ADC_IsEnabled>
 80048b4:	4604      	mov	r4, r0
 80048b6:	4873      	ldr	r0, [pc, #460]	; (8004a84 <HAL_ADC_Init+0x2e8>)
 80048b8:	f7ff ff10 	bl	80046dc <LL_ADC_IsEnabled>
 80048bc:	4603      	mov	r3, r0
 80048be:	4323      	orrs	r3, r4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e008      	b.n	80048de <HAL_ADC_Init+0x142>
 80048cc:	486e      	ldr	r0, [pc, #440]	; (8004a88 <HAL_ADC_Init+0x2ec>)
 80048ce:	f7ff ff05 	bl	80046dc <LL_ADC_IsEnabled>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d012      	beq.n	8004908 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a66      	ldr	r2, [pc, #408]	; (8004a80 <HAL_ADC_Init+0x2e4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_ADC_Init+0x15a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a64      	ldr	r2, [pc, #400]	; (8004a84 <HAL_ADC_Init+0x2e8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d101      	bne.n	80048fa <HAL_ADC_Init+0x15e>
 80048f6:	4a65      	ldr	r2, [pc, #404]	; (8004a8c <HAL_ADC_Init+0x2f0>)
 80048f8:	e000      	b.n	80048fc <HAL_ADC_Init+0x160>
 80048fa:	4a65      	ldr	r2, [pc, #404]	; (8004a90 <HAL_ADC_Init+0x2f4>)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f7ff fd3c 	bl	8004380 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004908:	f7ff fcf0 	bl	80042ec <HAL_GetREVID>
 800490c:	4603      	mov	r3, r0
 800490e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004912:	4293      	cmp	r3, r2
 8004914:	d914      	bls.n	8004940 <HAL_ADC_Init+0x1a4>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b10      	cmp	r3, #16
 800491c:	d110      	bne.n	8004940 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	7d5b      	ldrb	r3, [r3, #21]
 8004922:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004928:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800492e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	7f1b      	ldrb	r3, [r3, #28]
 8004934:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004936:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004938:	f043 030c 	orr.w	r3, r3, #12
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e00d      	b.n	800495c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	7d5b      	ldrb	r3, [r3, #21]
 8004944:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800494a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004950:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7f1b      	ldrb	r3, [r3, #28]
 8004956:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7f1b      	ldrb	r3, [r3, #28]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d106      	bne.n	8004972 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	3b01      	subs	r3, #1
 800496a:	045b      	lsls	r3, r3, #17
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	4b3f      	ldr	r3, [pc, #252]	; (8004a94 <HAL_ADC_Init+0x2f8>)
 8004996:	4013      	ands	r3, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	69b9      	ldr	r1, [r7, #24]
 800499e:	430b      	orrs	r3, r1
 80049a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fed2 	bl	8004750 <LL_ADC_REG_IsConversionOngoing>
 80049ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fedf 	bl	8004776 <LL_ADC_INJ_IsConversionOngoing>
 80049b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d14a      	bne.n	8004a56 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d147      	bne.n	8004a56 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	7d1b      	ldrb	r3, [r3, #20]
 80049ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_ADC_Init+0x2fc>)
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	69b9      	ldr	r1, [r7, #24]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d11b      	bne.n	8004a2a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_ADC_Init+0x300>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a06:	3a01      	subs	r2, #1
 8004a08:	0411      	lsls	r1, r2, #16
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a0e:	4311      	orrs	r1, r2
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	611a      	str	r2, [r3, #16]
 8004a28:	e007      	b.n	8004a3a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fddf 	bl	8005614 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d120      	bne.n	8004aa0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	f023 010f 	bic.w	r1, r3, #15
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
 8004a76:	e01b      	b.n	8004ab0 <HAL_ADC_Init+0x314>
 8004a78:	24000000 	.word	0x24000000
 8004a7c:	053e2d63 	.word	0x053e2d63
 8004a80:	40022000 	.word	0x40022000
 8004a84:	40022100 	.word	0x40022100
 8004a88:	58026000 	.word	0x58026000
 8004a8c:	40022300 	.word	0x40022300
 8004a90:	58026300 	.word	0x58026300
 8004a94:	fff0c003 	.word	0xfff0c003
 8004a98:	ffffbffc 	.word	0xffffbffc
 8004a9c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 020f 	bic.w	r2, r2, #15
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f023 0303 	bic.w	r3, r3, #3
 8004ab8:	f043 0201 	orr.w	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
 8004ac0:	e007      	b.n	8004ad2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	f043 0210 	orr.w	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3724      	adds	r7, #36	; 0x24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd90      	pop	{r4, r7, pc}

08004adc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a55      	ldr	r2, [pc, #340]	; (8004c44 <HAL_ADC_Start_DMA+0x168>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_ADC_Start_DMA+0x20>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a54      	ldr	r2, [pc, #336]	; (8004c48 <HAL_ADC_Start_DMA+0x16c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <HAL_ADC_Start_DMA+0x24>
 8004afc:	4b53      	ldr	r3, [pc, #332]	; (8004c4c <HAL_ADC_Start_DMA+0x170>)
 8004afe:	e000      	b.n	8004b02 <HAL_ADC_Start_DMA+0x26>
 8004b00:	4b53      	ldr	r3, [pc, #332]	; (8004c50 <HAL_ADC_Start_DMA+0x174>)
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fd66 	bl	80045d4 <LL_ADC_GetMultimode>
 8004b08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fe1e 	bl	8004750 <LL_ADC_REG_IsConversionOngoing>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f040 808c 	bne.w	8004c34 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_ADC_Start_DMA+0x4e>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e087      	b.n	8004c3a <HAL_ADC_Start_DMA+0x15e>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b05      	cmp	r3, #5
 8004b3c:	d002      	beq.n	8004b44 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	d170      	bne.n	8004c26 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fbe7 	bl	8005318 <ADC_Enable>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d163      	bne.n	8004c1c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b58:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <HAL_ADC_Start_DMA+0x178>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a37      	ldr	r2, [pc, #220]	; (8004c48 <HAL_ADC_Start_DMA+0x16c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d002      	beq.n	8004b74 <HAL_ADC_Start_DMA+0x98>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	e000      	b.n	8004b76 <HAL_ADC_Start_DMA+0x9a>
 8004b74:	4b33      	ldr	r3, [pc, #204]	; (8004c44 <HAL_ADC_Start_DMA+0x168>)
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d002      	beq.n	8004b84 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d006      	beq.n	8004baa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f023 0206 	bic.w	r2, r3, #6
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ba8:	e002      	b.n	8004bb0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb4:	4a28      	ldr	r2, [pc, #160]	; (8004c58 <HAL_ADC_Start_DMA+0x17c>)
 8004bb6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	4a27      	ldr	r2, [pc, #156]	; (8004c5c <HAL_ADC_Start_DMA+0x180>)
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc4:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <HAL_ADC_Start_DMA+0x184>)
 8004bc6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	221c      	movs	r2, #28
 8004bce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0210 	orr.w	r2, r2, #16
 8004be6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f7ff fc8b 	bl	800450e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3340      	adds	r3, #64	; 0x40
 8004c02:	4619      	mov	r1, r3
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f001 fd90 	bl	800672c <HAL_DMA_Start_IT>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fd87 	bl	8004728 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004c1a:	e00d      	b.n	8004c38 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004c24:	e008      	b.n	8004c38 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c32:	e001      	b.n	8004c38 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
 8004c36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40022000 	.word	0x40022000
 8004c48:	40022100 	.word	0x40022100
 8004c4c:	40022300 	.word	0x40022300
 8004c50:	58026300 	.word	0x58026300
 8004c54:	fffff0fe 	.word	0xfffff0fe
 8004c58:	080054eb 	.word	0x080054eb
 8004c5c:	080055c3 	.word	0x080055c3
 8004c60:	080055df 	.word	0x080055df

08004c64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c78:	b590      	push	{r4, r7, lr}
 8004c7a:	b0a1      	sub	sp, #132	; 0x84
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	4a9d      	ldr	r2, [pc, #628]	; (8004f08 <HAL_ADC_ConfigChannel+0x290>)
 8004c92:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x2a>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e321      	b.n	80052e6 <HAL_ADC_ConfigChannel+0x66e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fd4e 	bl	8004750 <LL_ADC_REG_IsConversionOngoing>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 8306 	bne.w	80052c8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d108      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x62>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0e9b      	lsrs	r3, r3, #26
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	e016      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x90>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	e003      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004cf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2201      	movs	r2, #1
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	69d1      	ldr	r1, [r2, #28]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	430b      	orrs	r3, r1
 8004d14:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f7ff fbc7 	bl	80044b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fd0f 	bl	8004750 <LL_ADC_REG_IsConversionOngoing>
 8004d32:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fd1c 	bl	8004776 <LL_ADC_INJ_IsConversionOngoing>
 8004d3e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 80b3 	bne.w	8004eae <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f040 80af 	bne.w	8004eae <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6819      	ldr	r1, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f7ff fbe9 	bl	8004534 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d62:	4b6a      	ldr	r3, [pc, #424]	; (8004f0c <HAL_ADC_ConfigChannel+0x294>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6e:	d10b      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x110>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	e01d      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x14c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x136>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	e00a      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x14c>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695a      	ldr	r2, [r3, #20]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	089b      	lsrs	r3, r3, #2
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d027      	beq.n	8004e1e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6919      	ldr	r1, [r3, #16]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ddc:	f7ff fb04 	bl	80043e8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6919      	ldr	r1, [r3, #16]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	7e5b      	ldrb	r3, [r3, #25]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d102      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x17e>
 8004df0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004df4:	e000      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x180>
 8004df6:	2300      	movs	r3, #0
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f7ff fb2e 	bl	800445a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6919      	ldr	r1, [r3, #16]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	7e1b      	ldrb	r3, [r3, #24]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d102      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x19c>
 8004e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e12:	e000      	b.n	8004e16 <HAL_ADC_ConfigChannel+0x19e>
 8004e14:	2300      	movs	r3, #0
 8004e16:	461a      	mov	r2, r3
 8004e18:	f7ff fb06 	bl	8004428 <LL_ADC_SetDataRightShift>
 8004e1c:	e047      	b.n	8004eae <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	069b      	lsls	r3, r3, #26
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d107      	bne.n	8004e42 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e40:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	069b      	lsls	r3, r3, #26
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d107      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e64:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	069b      	lsls	r3, r3, #26
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d107      	bne.n	8004e8a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e88:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	069b      	lsls	r3, r3, #26
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d107      	bne.n	8004eae <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004eac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fc12 	bl	80046dc <LL_ADC_IsEnabled>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f040 820d 	bne.w	80052da <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f7ff fb5d 	bl	800458c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	4a0c      	ldr	r2, [pc, #48]	; (8004f08 <HAL_ADC_ConfigChannel+0x290>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	f040 8133 	bne.w	8005144 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d110      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x298>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	0e9b      	lsrs	r3, r3, #26
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2b09      	cmp	r3, #9
 8004efc:	bf94      	ite	ls
 8004efe:	2301      	movls	r3, #1
 8004f00:	2300      	movhi	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	e01e      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x2cc>
 8004f06:	bf00      	nop
 8004f08:	47ff0000 	.word	0x47ff0000
 8004f0c:	5c001000 	.word	0x5c001000
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f18:	fa93 f3a3 	rbit	r3, r3
 8004f1c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004f28:	2320      	movs	r3, #32
 8004f2a:	e003      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f2e:	fab3 f383 	clz	r3, r3
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	3301      	adds	r3, #1
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	2b09      	cmp	r3, #9
 8004f3c:	bf94      	ite	ls
 8004f3e:	2301      	movls	r3, #1
 8004f40:	2300      	movhi	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d079      	beq.n	800503c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d107      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x2ec>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	0e9b      	lsrs	r3, r3, #26
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	069b      	lsls	r3, r3, #26
 8004f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f62:	e015      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x318>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6c:	fa93 f3a3 	rbit	r3, r3
 8004f70:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f74:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	e003      	b.n	8004f88 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f82:	fab3 f383 	clz	r3, r3
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	3301      	adds	r3, #1
 8004f8a:	069b      	lsls	r3, r3, #26
 8004f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x338>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	0e9b      	lsrs	r3, r3, #26
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2101      	movs	r1, #1
 8004faa:	fa01 f303 	lsl.w	r3, r1, r3
 8004fae:	e017      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x368>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb8:	fa93 f3a3 	rbit	r3, r3
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004fc8:	2320      	movs	r3, #32
 8004fca:	e003      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe0:	ea42 0103 	orr.w	r1, r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x38e>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	0e9b      	lsrs	r3, r3, #26
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f003 021f 	and.w	r2, r3, #31
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4413      	add	r3, r2
 8005002:	051b      	lsls	r3, r3, #20
 8005004:	e018      	b.n	8005038 <HAL_ADC_ConfigChannel+0x3c0>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	fa93 f3a3 	rbit	r3, r3
 8005012:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800501e:	2320      	movs	r3, #32
 8005020:	e003      	b.n	800502a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	fab3 f383 	clz	r3, r3
 8005028:	b2db      	uxtb	r3, r3
 800502a:	3301      	adds	r3, #1
 800502c:	f003 021f 	and.w	r2, r3, #31
 8005030:	4613      	mov	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005038:	430b      	orrs	r3, r1
 800503a:	e07e      	b.n	800513a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x3e0>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	0e9b      	lsrs	r3, r3, #26
 800504e:	3301      	adds	r3, #1
 8005050:	069b      	lsls	r3, r3, #26
 8005052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005056:	e015      	b.n	8005084 <HAL_ADC_ConfigChannel+0x40c>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	fa93 f3a3 	rbit	r3, r3
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005070:	2320      	movs	r3, #32
 8005072:	e003      	b.n	800507c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	3301      	adds	r3, #1
 800507e:	069b      	lsls	r3, r3, #26
 8005080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x42c>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0e9b      	lsrs	r3, r3, #26
 8005096:	3301      	adds	r3, #1
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	2101      	movs	r1, #1
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	e017      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x45c>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	61bb      	str	r3, [r7, #24]
  return result;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80050bc:	2320      	movs	r3, #32
 80050be:	e003      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3301      	adds	r3, #1
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	2101      	movs	r1, #1
 80050d0:	fa01 f303 	lsl.w	r3, r1, r3
 80050d4:	ea42 0103 	orr.w	r1, r2, r3
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10d      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x488>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	0e9b      	lsrs	r3, r3, #26
 80050ea:	3301      	adds	r3, #1
 80050ec:	f003 021f 	and.w	r2, r3, #31
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	3b1e      	subs	r3, #30
 80050f8:	051b      	lsls	r3, r3, #20
 80050fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050fe:	e01b      	b.n	8005138 <HAL_ADC_ConfigChannel+0x4c0>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	60fb      	str	r3, [r7, #12]
  return result;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005118:	2320      	movs	r3, #32
 800511a:	e003      	b.n	8005124 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3301      	adds	r3, #1
 8005126:	f003 021f 	and.w	r2, r3, #31
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	3b1e      	subs	r3, #30
 8005132:	051b      	lsls	r3, r3, #20
 8005134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005138:	430b      	orrs	r3, r1
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	4619      	mov	r1, r3
 8005140:	f7ff f9f8 	bl	8004534 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f280 80c6 	bge.w	80052da <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a67      	ldr	r2, [pc, #412]	; (80052f0 <HAL_ADC_ConfigChannel+0x678>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <HAL_ADC_ConfigChannel+0x4ea>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a65      	ldr	r2, [pc, #404]	; (80052f4 <HAL_ADC_ConfigChannel+0x67c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <HAL_ADC_ConfigChannel+0x4ee>
 8005162:	4b65      	ldr	r3, [pc, #404]	; (80052f8 <HAL_ADC_ConfigChannel+0x680>)
 8005164:	e000      	b.n	8005168 <HAL_ADC_ConfigChannel+0x4f0>
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <HAL_ADC_ConfigChannel+0x684>)
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff f92f 	bl	80043cc <LL_ADC_GetCommonPathInternalCh>
 800516e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5e      	ldr	r2, [pc, #376]	; (80052f0 <HAL_ADC_ConfigChannel+0x678>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_ADC_ConfigChannel+0x50c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5d      	ldr	r2, [pc, #372]	; (80052f4 <HAL_ADC_ConfigChannel+0x67c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d10e      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x52a>
 8005184:	485a      	ldr	r0, [pc, #360]	; (80052f0 <HAL_ADC_ConfigChannel+0x678>)
 8005186:	f7ff faa9 	bl	80046dc <LL_ADC_IsEnabled>
 800518a:	4604      	mov	r4, r0
 800518c:	4859      	ldr	r0, [pc, #356]	; (80052f4 <HAL_ADC_ConfigChannel+0x67c>)
 800518e:	f7ff faa5 	bl	80046dc <LL_ADC_IsEnabled>
 8005192:	4603      	mov	r3, r0
 8005194:	4323      	orrs	r3, r4
 8005196:	2b00      	cmp	r3, #0
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e008      	b.n	80051b4 <HAL_ADC_ConfigChannel+0x53c>
 80051a2:	4857      	ldr	r0, [pc, #348]	; (8005300 <HAL_ADC_ConfigChannel+0x688>)
 80051a4:	f7ff fa9a 	bl	80046dc <LL_ADC_IsEnabled>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d07d      	beq.n	80052b4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a51      	ldr	r2, [pc, #324]	; (8005304 <HAL_ADC_ConfigChannel+0x68c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d130      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x5ac>
 80051c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d12b      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a4b      	ldr	r2, [pc, #300]	; (8005300 <HAL_ADC_ConfigChannel+0x688>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	f040 8081 	bne.w	80052da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a44      	ldr	r2, [pc, #272]	; (80052f0 <HAL_ADC_ConfigChannel+0x678>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_ADC_ConfigChannel+0x574>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a43      	ldr	r2, [pc, #268]	; (80052f4 <HAL_ADC_ConfigChannel+0x67c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d101      	bne.n	80051f0 <HAL_ADC_ConfigChannel+0x578>
 80051ec:	4a42      	ldr	r2, [pc, #264]	; (80052f8 <HAL_ADC_ConfigChannel+0x680>)
 80051ee:	e000      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x57a>
 80051f0:	4a42      	ldr	r2, [pc, #264]	; (80052fc <HAL_ADC_ConfigChannel+0x684>)
 80051f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f7ff f8d3 	bl	80043a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005200:	4b41      	ldr	r3, [pc, #260]	; (8005308 <HAL_ADC_ConfigChannel+0x690>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	4a41      	ldr	r2, [pc, #260]	; (800530c <HAL_ADC_ConfigChannel+0x694>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	099b      	lsrs	r3, r3, #6
 800520e:	3301      	adds	r3, #1
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005214:	e002      	b.n	800521c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	3b01      	subs	r3, #1
 800521a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f9      	bne.n	8005216 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005222:	e05a      	b.n	80052da <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a39      	ldr	r2, [pc, #228]	; (8005310 <HAL_ADC_ConfigChannel+0x698>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d11e      	bne.n	800526c <HAL_ADC_ConfigChannel+0x5f4>
 800522e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d119      	bne.n	800526c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a30      	ldr	r2, [pc, #192]	; (8005300 <HAL_ADC_ConfigChannel+0x688>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d14b      	bne.n	80052da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2a      	ldr	r2, [pc, #168]	; (80052f0 <HAL_ADC_ConfigChannel+0x678>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_ADC_ConfigChannel+0x5de>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a28      	ldr	r2, [pc, #160]	; (80052f4 <HAL_ADC_ConfigChannel+0x67c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <HAL_ADC_ConfigChannel+0x5e2>
 8005256:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <HAL_ADC_ConfigChannel+0x680>)
 8005258:	e000      	b.n	800525c <HAL_ADC_ConfigChannel+0x5e4>
 800525a:	4a28      	ldr	r2, [pc, #160]	; (80052fc <HAL_ADC_ConfigChannel+0x684>)
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f7ff f89e 	bl	80043a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800526a:	e036      	b.n	80052da <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a28      	ldr	r2, [pc, #160]	; (8005314 <HAL_ADC_ConfigChannel+0x69c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d131      	bne.n	80052da <HAL_ADC_ConfigChannel+0x662>
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d12c      	bne.n	80052da <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_ADC_ConfigChannel+0x688>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d127      	bne.n	80052da <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <HAL_ADC_ConfigChannel+0x678>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_ADC_ConfigChannel+0x626>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <HAL_ADC_ConfigChannel+0x67c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d101      	bne.n	80052a2 <HAL_ADC_ConfigChannel+0x62a>
 800529e:	4a16      	ldr	r2, [pc, #88]	; (80052f8 <HAL_ADC_ConfigChannel+0x680>)
 80052a0:	e000      	b.n	80052a4 <HAL_ADC_ConfigChannel+0x62c>
 80052a2:	4a16      	ldr	r2, [pc, #88]	; (80052fc <HAL_ADC_ConfigChannel+0x684>)
 80052a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7ff f87a 	bl	80043a6 <LL_ADC_SetCommonPathInternalCh>
 80052b2:	e012      	b.n	80052da <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b8:	f043 0220 	orr.w	r2, r3, #32
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80052c6:	e008      	b.n	80052da <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052cc:	f043 0220 	orr.w	r2, r3, #32
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80052e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3784      	adds	r7, #132	; 0x84
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd90      	pop	{r4, r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40022000 	.word	0x40022000
 80052f4:	40022100 	.word	0x40022100
 80052f8:	40022300 	.word	0x40022300
 80052fc:	58026300 	.word	0x58026300
 8005300:	58026000 	.word	0x58026000
 8005304:	cb840000 	.word	0xcb840000
 8005308:	24000000 	.word	0x24000000
 800530c:	053e2d63 	.word	0x053e2d63
 8005310:	c7520000 	.word	0xc7520000
 8005314:	cfb80000 	.word	0xcfb80000

08005318 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f9d9 	bl	80046dc <LL_ADC_IsEnabled>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d16e      	bne.n	800540e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	4b38      	ldr	r3, [pc, #224]	; (8005418 <ADC_Enable+0x100>)
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f043 0210 	orr.w	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e05a      	b.n	8005410 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff f994 	bl	800468c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005364:	f7fe ff92 	bl	800428c <HAL_GetTick>
 8005368:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2b      	ldr	r2, [pc, #172]	; (800541c <ADC_Enable+0x104>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <ADC_Enable+0x66>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a29      	ldr	r2, [pc, #164]	; (8005420 <ADC_Enable+0x108>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <ADC_Enable+0x6a>
 800537e:	4b29      	ldr	r3, [pc, #164]	; (8005424 <ADC_Enable+0x10c>)
 8005380:	e000      	b.n	8005384 <ADC_Enable+0x6c>
 8005382:	4b29      	ldr	r3, [pc, #164]	; (8005428 <ADC_Enable+0x110>)
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff f925 	bl	80045d4 <LL_ADC_GetMultimode>
 800538a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a23      	ldr	r2, [pc, #140]	; (8005420 <ADC_Enable+0x108>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d002      	beq.n	800539c <ADC_Enable+0x84>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	e000      	b.n	800539e <ADC_Enable+0x86>
 800539c:	4b1f      	ldr	r3, [pc, #124]	; (800541c <ADC_Enable+0x104>)
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d02c      	beq.n	8005400 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d130      	bne.n	800540e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053ac:	e028      	b.n	8005400 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff f992 	bl	80046dc <LL_ADC_IsEnabled>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d104      	bne.n	80053c8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff f962 	bl	800468c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053c8:	f7fe ff60 	bl	800428c <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d914      	bls.n	8005400 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d00d      	beq.n	8005400 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	f043 0210 	orr.w	r2, r3, #16
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f043 0201 	orr.w	r2, r3, #1
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e007      	b.n	8005410 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b01      	cmp	r3, #1
 800540c:	d1cf      	bne.n	80053ae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	8000003f 	.word	0x8000003f
 800541c:	40022000 	.word	0x40022000
 8005420:	40022100 	.word	0x40022100
 8005424:	40022300 	.word	0x40022300
 8005428:	58026300 	.word	0x58026300

0800542c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff f962 	bl	8004702 <LL_ADC_IsDisableOngoing>
 800543e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff f949 	bl	80046dc <LL_ADC_IsEnabled>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d047      	beq.n	80054e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d144      	bne.n	80054e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 030d 	and.w	r3, r3, #13
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10c      	bne.n	800547e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff f923 	bl	80046b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2203      	movs	r2, #3
 8005474:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005476:	f7fe ff09 	bl	800428c <HAL_GetTick>
 800547a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800547c:	e029      	b.n	80054d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f043 0210 	orr.w	r2, r3, #16
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e023      	b.n	80054e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800549a:	f7fe fef7 	bl	800428c <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d914      	bls.n	80054d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00d      	beq.n	80054d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	f043 0210 	orr.w	r2, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c6:	f043 0201 	orr.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e007      	b.n	80054e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1dc      	bne.n	800549a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005500:	2b00      	cmp	r3, #0
 8005502:	d14b      	bne.n	800559c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d021      	beq.n	8005562 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe ffb4 	bl	8004490 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d032      	beq.n	8005594 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d12b      	bne.n	8005594 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d11f      	bne.n	8005594 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	f043 0201 	orr.w	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	655a      	str	r2, [r3, #84]	; 0x54
 8005560:	e018      	b.n	8005594 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d111      	bne.n	8005594 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d105      	bne.n	8005594 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	f043 0201 	orr.w	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f018 fe25 	bl	801e1e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800559a:	e00e      	b.n	80055ba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff fb5b 	bl	8004c64 <HAL_ADC_ErrorCallback>
}
 80055ae:	e004      	b.n	80055ba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f018 fddb 	bl	801e18c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fc:	f043 0204 	orr.w	r2, r3, #4
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fb2d 	bl	8004c64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a79      	ldr	r2, [pc, #484]	; (8005808 <ADC_ConfigureBoostMode+0x1f4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <ADC_ConfigureBoostMode+0x1c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a78      	ldr	r2, [pc, #480]	; (800580c <ADC_ConfigureBoostMode+0x1f8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d109      	bne.n	8005644 <ADC_ConfigureBoostMode+0x30>
 8005630:	4b77      	ldr	r3, [pc, #476]	; (8005810 <ADC_ConfigureBoostMode+0x1fc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005638:	2b00      	cmp	r3, #0
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	e008      	b.n	8005656 <ADC_ConfigureBoostMode+0x42>
 8005644:	4b73      	ldr	r3, [pc, #460]	; (8005814 <ADC_ConfigureBoostMode+0x200>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01c      	beq.n	8005694 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800565a:	f005 fe37 	bl	800b2cc <HAL_RCC_GetHCLKFreq>
 800565e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005668:	d010      	beq.n	800568c <ADC_ConfigureBoostMode+0x78>
 800566a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800566e:	d871      	bhi.n	8005754 <ADC_ConfigureBoostMode+0x140>
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005674:	d002      	beq.n	800567c <ADC_ConfigureBoostMode+0x68>
 8005676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800567a:	d16b      	bne.n	8005754 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	0c1b      	lsrs	r3, r3, #16
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	60fb      	str	r3, [r7, #12]
        break;
 800568a:	e066      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	60fb      	str	r3, [r7, #12]
        break;
 8005692:	e062      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005694:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005698:	f006 fdb4 	bl	800c204 <HAL_RCCEx_GetPeriphCLKFreq>
 800569c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80056a6:	d051      	beq.n	800574c <ADC_ConfigureBoostMode+0x138>
 80056a8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80056ac:	d854      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 80056ae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80056b2:	d047      	beq.n	8005744 <ADC_ConfigureBoostMode+0x130>
 80056b4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80056b8:	d84e      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 80056ba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80056be:	d03d      	beq.n	800573c <ADC_ConfigureBoostMode+0x128>
 80056c0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80056c4:	d848      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 80056c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ca:	d033      	beq.n	8005734 <ADC_ConfigureBoostMode+0x120>
 80056cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056d0:	d842      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 80056d2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80056d6:	d029      	beq.n	800572c <ADC_ConfigureBoostMode+0x118>
 80056d8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80056dc:	d83c      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 80056de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80056e2:	d01a      	beq.n	800571a <ADC_ConfigureBoostMode+0x106>
 80056e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80056e8:	d836      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 80056ea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80056ee:	d014      	beq.n	800571a <ADC_ConfigureBoostMode+0x106>
 80056f0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80056f4:	d830      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 80056f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fa:	d00e      	beq.n	800571a <ADC_ConfigureBoostMode+0x106>
 80056fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005700:	d82a      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 8005702:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005706:	d008      	beq.n	800571a <ADC_ConfigureBoostMode+0x106>
 8005708:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800570c:	d824      	bhi.n	8005758 <ADC_ConfigureBoostMode+0x144>
 800570e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005712:	d002      	beq.n	800571a <ADC_ConfigureBoostMode+0x106>
 8005714:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005718:	d11e      	bne.n	8005758 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	0c9b      	lsrs	r3, r3, #18
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	60fb      	str	r3, [r7, #12]
        break;
 800572a:	e016      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	60fb      	str	r3, [r7, #12]
        break;
 8005732:	e012      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	60fb      	str	r3, [r7, #12]
        break;
 800573a:	e00e      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	099b      	lsrs	r3, r3, #6
 8005740:	60fb      	str	r3, [r7, #12]
        break;
 8005742:	e00a      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	09db      	lsrs	r3, r3, #7
 8005748:	60fb      	str	r3, [r7, #12]
        break;
 800574a:	e006      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	60fb      	str	r3, [r7, #12]
        break;
 8005752:	e002      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
        break;
 8005754:	bf00      	nop
 8005756:	e000      	b.n	800575a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005758:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800575a:	f7fe fdc7 	bl	80042ec <HAL_GetREVID>
 800575e:	4603      	mov	r3, r0
 8005760:	f241 0203 	movw	r2, #4099	; 0x1003
 8005764:	4293      	cmp	r3, r2
 8005766:	d815      	bhi.n	8005794 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a2b      	ldr	r2, [pc, #172]	; (8005818 <ADC_ConfigureBoostMode+0x204>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d908      	bls.n	8005782 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005780:	e03e      	b.n	8005800 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005790:	609a      	str	r2, [r3, #8]
}
 8005792:	e035      	b.n	8005800 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <ADC_ConfigureBoostMode+0x208>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d808      	bhi.n	80057b4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057b0:	609a      	str	r2, [r3, #8]
}
 80057b2:	e025      	b.n	8005800 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <ADC_ConfigureBoostMode+0x20c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d80a      	bhi.n	80057d2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	e016      	b.n	8005800 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <ADC_ConfigureBoostMode+0x210>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d80a      	bhi.n	80057f0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ec:	609a      	str	r2, [r3, #8]
}
 80057ee:	e007      	b.n	8005800 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40022000 	.word	0x40022000
 800580c:	40022100 	.word	0x40022100
 8005810:	40022300 	.word	0x40022300
 8005814:	58026300 	.word	0x58026300
 8005818:	01312d00 	.word	0x01312d00
 800581c:	005f5e10 	.word	0x005f5e10
 8005820:	00bebc20 	.word	0x00bebc20
 8005824:	017d7840 	.word	0x017d7840

08005828 <LL_ADC_IsEnabled>:
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <LL_ADC_IsEnabled+0x18>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <LL_ADC_IsEnabled+0x1a>
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <LL_ADC_StartCalibration>:
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <LL_ADC_StartCalibration+0x38>)
 8005862:	4013      	ands	r3, r2
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005870:	430a      	orrs	r2, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	609a      	str	r2, [r3, #8]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	3ffeffc0 	.word	0x3ffeffc0

0800588c <LL_ADC_IsCalibrationOnGoing>:
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800589c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a0:	d101      	bne.n	80058a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <LL_ADC_REG_IsConversionOngoing>:
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d101      	bne.n	80058cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_ADCEx_Calibration_Start+0x1e>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e04c      	b.n	8005994 <HAL_ADCEx_Calibration_Start+0xb8>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff fd92 	bl	800542c <ADC_Disable>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d135      	bne.n	800597e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005916:	4b21      	ldr	r3, [pc, #132]	; (800599c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005918:	4013      	ands	r3, r2
 800591a:	f043 0202 	orr.w	r2, r3, #2
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff ff90 	bl	8005850 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005930:	e014      	b.n	800595c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3301      	adds	r3, #1
 8005936:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d30d      	bcc.n	800595c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	f023 0312 	bic.w	r3, r3, #18
 8005948:	f043 0210 	orr.w	r2, r3, #16
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e01b      	b.n	8005994 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff ff93 	bl	800588c <LL_ADC_IsCalibrationOnGoing>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e2      	bne.n	8005932 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005970:	f023 0303 	bic.w	r3, r3, #3
 8005974:	f043 0201 	orr.w	r2, r3, #1
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
 800597c:	e005      	b.n	800598a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	f043 0210 	orr.w	r2, r3, #16
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	ffffeefd 	.word	0xffffeefd
 80059a0:	25c3f800 	.word	0x25c3f800

080059a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80059a4:	b590      	push	{r4, r7, lr}
 80059a6:	b09f      	sub	sp, #124	; 0x7c
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e0be      	b.n	8005b40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80059ca:	2300      	movs	r3, #0
 80059cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a5c      	ldr	r2, [pc, #368]	; (8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d102      	bne.n	80059e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80059dc:	4b5b      	ldr	r3, [pc, #364]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80059de:	60bb      	str	r3, [r7, #8]
 80059e0:	e001      	b.n	80059e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e09d      	b.n	8005b40 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff ff54 	bl	80058b4 <LL_ADC_REG_IsConversionOngoing>
 8005a0c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff ff4e 	bl	80058b4 <LL_ADC_REG_IsConversionOngoing>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d17f      	bne.n	8005b1e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d17c      	bne.n	8005b1e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a47      	ldr	r2, [pc, #284]	; (8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a46      	ldr	r2, [pc, #280]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d101      	bne.n	8005a3c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005a38:	4b45      	ldr	r3, [pc, #276]	; (8005b50 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005a3a:	e000      	b.n	8005a3e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005a3c:	4b45      	ldr	r3, [pc, #276]	; (8005b54 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005a3e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d039      	beq.n	8005abc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a3a      	ldr	r2, [pc, #232]	; (8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a38      	ldr	r2, [pc, #224]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10e      	bne.n	8005a8c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005a6e:	4836      	ldr	r0, [pc, #216]	; (8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005a70:	f7ff feda 	bl	8005828 <LL_ADC_IsEnabled>
 8005a74:	4604      	mov	r4, r0
 8005a76:	4835      	ldr	r0, [pc, #212]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005a78:	f7ff fed6 	bl	8005828 <LL_ADC_IsEnabled>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	4323      	orrs	r3, r4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e008      	b.n	8005a9e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005a8c:	4832      	ldr	r0, [pc, #200]	; (8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005a8e:	f7ff fecb 	bl	8005828 <LL_ADC_IsEnabled>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d047      	beq.n	8005b32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	6811      	ldr	r1, [r2, #0]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	6892      	ldr	r2, [r2, #8]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005aba:	e03a      	b.n	8005b32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d10e      	bne.n	8005afa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005adc:	481a      	ldr	r0, [pc, #104]	; (8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005ade:	f7ff fea3 	bl	8005828 <LL_ADC_IsEnabled>
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4819      	ldr	r0, [pc, #100]	; (8005b4c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005ae6:	f7ff fe9f 	bl	8005828 <LL_ADC_IsEnabled>
 8005aea:	4603      	mov	r3, r0
 8005aec:	4323      	orrs	r3, r4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bf0c      	ite	eq
 8005af2:	2301      	moveq	r3, #1
 8005af4:	2300      	movne	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	e008      	b.n	8005b0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005afa:	4817      	ldr	r0, [pc, #92]	; (8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005afc:	f7ff fe94 	bl	8005828 <LL_ADC_IsEnabled>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d010      	beq.n	8005b32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b1a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b1c:	e009      	b.n	8005b32 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005b30:	e000      	b.n	8005b34 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b32:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005b3c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	377c      	adds	r7, #124	; 0x7c
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd90      	pop	{r4, r7, pc}
 8005b48:	40022000 	.word	0x40022000
 8005b4c:	40022100 	.word	0x40022100
 8005b50:	40022300 	.word	0x40022300
 8005b54:	58026300 	.word	0x58026300
 8005b58:	58026000 	.word	0x58026000
 8005b5c:	fffff0e0 	.word	0xfffff0e0

08005b60 <__NVIC_SetPriorityGrouping>:
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b8e:	4a04      	ldr	r2, [pc, #16]	; (8005ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	60d3      	str	r3, [r2, #12]
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	e000ed00 	.word	0xe000ed00
 8005ba4:	05fa0000 	.word	0x05fa0000

08005ba8 <__NVIC_GetPriorityGrouping>:
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	0a1b      	lsrs	r3, r3, #8
 8005bb2:	f003 0307 	and.w	r3, r3, #7
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	e000ed00 	.word	0xe000ed00

08005bc4 <__NVIC_EnableIRQ>:
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	db0b      	blt.n	8005bee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	f003 021f 	and.w	r2, r3, #31
 8005bdc:	4907      	ldr	r1, [pc, #28]	; (8005bfc <__NVIC_EnableIRQ+0x38>)
 8005bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2001      	movs	r0, #1
 8005be6:	fa00 f202 	lsl.w	r2, r0, r2
 8005bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	e000e100 	.word	0xe000e100

08005c00 <__NVIC_SetPriority>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db0a      	blt.n	8005c2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	490c      	ldr	r1, [pc, #48]	; (8005c4c <__NVIC_SetPriority+0x4c>)
 8005c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c1e:	0112      	lsls	r2, r2, #4
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	440b      	add	r3, r1
 8005c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c28:	e00a      	b.n	8005c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4908      	ldr	r1, [pc, #32]	; (8005c50 <__NVIC_SetPriority+0x50>)
 8005c30:	88fb      	ldrh	r3, [r7, #6]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	3b04      	subs	r3, #4
 8005c38:	0112      	lsls	r2, r2, #4
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	761a      	strb	r2, [r3, #24]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	e000e100 	.word	0xe000e100
 8005c50:	e000ed00 	.word	0xe000ed00

08005c54 <NVIC_EncodePriority>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	; 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f1c3 0307 	rsb	r3, r3, #7
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	bf28      	it	cs
 8005c72:	2304      	movcs	r3, #4
 8005c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d902      	bls.n	8005c84 <NVIC_EncodePriority+0x30>
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3b03      	subs	r3, #3
 8005c82:	e000      	b.n	8005c86 <NVIC_EncodePriority+0x32>
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43da      	mvns	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	401a      	ands	r2, r3
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	43d9      	mvns	r1, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cac:	4313      	orrs	r3, r2
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ccc:	d301      	bcc.n	8005cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e00f      	b.n	8005cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <SysTick_Config+0x40>)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cda:	210f      	movs	r1, #15
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ce0:	f7ff ff8e 	bl	8005c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <SysTick_Config+0x40>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cea:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <SysTick_Config+0x40>)
 8005cec:	2207      	movs	r2, #7
 8005cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	e000e010 	.word	0xe000e010

08005d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff29 	bl	8005b60 <__NVIC_SetPriorityGrouping>
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b086      	sub	sp, #24
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d24:	f7ff ff40 	bl	8005ba8 <__NVIC_GetPriorityGrouping>
 8005d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f7ff ff90 	bl	8005c54 <NVIC_EncodePriority>
 8005d34:	4602      	mov	r2, r0
 8005d36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ff5f 	bl	8005c00 <__NVIC_SetPriority>
}
 8005d42:	bf00      	nop
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	4603      	mov	r3, r0
 8005d52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff ff33 	bl	8005bc4 <__NVIC_EnableIRQ>
}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff ffa4 	bl	8005cbc <SysTick_Config>
 8005d74:	4603      	mov	r3, r0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005d84:	f3bf 8f5f 	dmb	sy
}
 8005d88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <HAL_MPU_Disable+0x28>)
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	4a06      	ldr	r2, [pc, #24]	; (8005da8 <HAL_MPU_Disable+0x28>)
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d94:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_MPU_Disable+0x2c>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	605a      	str	r2, [r3, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	e000ed00 	.word	0xe000ed00
 8005dac:	e000ed90 	.word	0xe000ed90

08005db0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005db8:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <HAL_MPU_Enable+0x38>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f043 0301 	orr.w	r3, r3, #1
 8005dc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <HAL_MPU_Enable+0x3c>)
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <HAL_MPU_Enable+0x3c>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dcc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005dce:	f3bf 8f4f 	dsb	sy
}
 8005dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005dd4:	f3bf 8f6f 	isb	sy
}
 8005dd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	e000ed90 	.word	0xe000ed90
 8005dec:	e000ed00 	.word	0xe000ed00

08005df0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	785a      	ldrb	r2, [r3, #1]
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <HAL_MPU_ConfigRegion+0x84>)
 8005dfe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d029      	beq.n	8005e5c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005e08:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <HAL_MPU_ConfigRegion+0x84>)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	7b1b      	ldrb	r3, [r3, #12]
 8005e14:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7adb      	ldrb	r3, [r3, #11]
 8005e1a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	7a9b      	ldrb	r3, [r3, #10]
 8005e22:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005e24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	7b5b      	ldrb	r3, [r3, #13]
 8005e2a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005e2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	7b9b      	ldrb	r3, [r3, #14]
 8005e32:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005e34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	7bdb      	ldrb	r3, [r3, #15]
 8005e3a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005e3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7a5b      	ldrb	r3, [r3, #9]
 8005e42:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005e44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	7a1b      	ldrb	r3, [r3, #8]
 8005e4a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005e4c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e54:	4a07      	ldr	r2, [pc, #28]	; (8005e74 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005e56:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005e58:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005e5a:	e005      	b.n	8005e68 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_MPU_ConfigRegion+0x84>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005e62:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <HAL_MPU_ConfigRegion+0x84>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	611a      	str	r2, [r3, #16]
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	e000ed90 	.word	0xe000ed90

08005e78 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8005e7c:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <HAL_GetCurrentCPUID+0x24>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	2b07      	cmp	r3, #7
 8005e88:	d101      	bne.n	8005e8e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e000      	b.n	8005e90 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8005e8e:	2301      	movs	r3, #1
  }
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000ed00 	.word	0xe000ed00

08005ea0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e054      	b.n	8005f5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	7f5b      	ldrb	r3, [r3, #29]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb fa98 	bl	80013f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <HAL_CRC_Init+0xc4>)
 8005edc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0218 	bic.w	r2, r2, #24
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	e00c      	b.n	8005f0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6899      	ldr	r1, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f834 	bl	8005f68 <HAL_CRCEx_Polynomial_Set>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e028      	b.n	8005f5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	795b      	ldrb	r3, [r3, #5]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f1a:	611a      	str	r2, [r3, #16]
 8005f1c:	e004      	b.n	8005f28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6912      	ldr	r2, [r2, #16]
 8005f26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695a      	ldr	r2, [r3, #20]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	04c11db7 	.word	0x04c11db7

08005f68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005f78:	231f      	movs	r3, #31
 8005f7a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005f7c:	bf00      	nop
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1e5a      	subs	r2, r3, #1
 8005f82:	613a      	str	r2, [r7, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <HAL_CRCEx_Polynomial_Set+0x34>
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0f0      	beq.n	8005f7e <HAL_CRCEx_Polynomial_Set+0x16>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b18      	cmp	r3, #24
 8005fa0:	d846      	bhi.n	8006030 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08006037 	.word	0x08006037
 8005fac:	08006031 	.word	0x08006031
 8005fb0:	08006031 	.word	0x08006031
 8005fb4:	08006031 	.word	0x08006031
 8005fb8:	08006031 	.word	0x08006031
 8005fbc:	08006031 	.word	0x08006031
 8005fc0:	08006031 	.word	0x08006031
 8005fc4:	08006031 	.word	0x08006031
 8005fc8:	08006025 	.word	0x08006025
 8005fcc:	08006031 	.word	0x08006031
 8005fd0:	08006031 	.word	0x08006031
 8005fd4:	08006031 	.word	0x08006031
 8005fd8:	08006031 	.word	0x08006031
 8005fdc:	08006031 	.word	0x08006031
 8005fe0:	08006031 	.word	0x08006031
 8005fe4:	08006031 	.word	0x08006031
 8005fe8:	08006019 	.word	0x08006019
 8005fec:	08006031 	.word	0x08006031
 8005ff0:	08006031 	.word	0x08006031
 8005ff4:	08006031 	.word	0x08006031
 8005ff8:	08006031 	.word	0x08006031
 8005ffc:	08006031 	.word	0x08006031
 8006000:	08006031 	.word	0x08006031
 8006004:	08006031 	.word	0x08006031
 8006008:	0800600d 	.word	0x0800600d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b06      	cmp	r3, #6
 8006010:	d913      	bls.n	800603a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006016:	e010      	b.n	800603a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b07      	cmp	r3, #7
 800601c:	d90f      	bls.n	800603e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006022:	e00c      	b.n	800603e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d90b      	bls.n	8006042 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800602e:	e008      	b.n	8006042 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	75fb      	strb	r3, [r7, #23]
      break;
 8006034:	e006      	b.n	8006044 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006036:	bf00      	nop
 8006038:	e004      	b.n	8006044 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006042:	bf00      	nop
  }
  if (status == HAL_OK)
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10d      	bne.n	8006066 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 0118 	bic.w	r1, r3, #24
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	430a      	orrs	r2, r1
 8006064:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
}
 8006068:	4618      	mov	r0, r3
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800607c:	f7fe f906 	bl	800428c <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e316      	b.n	80066ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a66      	ldr	r2, [pc, #408]	; (800622c <HAL_DMA_Init+0x1b8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d04a      	beq.n	800612c <HAL_DMA_Init+0xb8>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a65      	ldr	r2, [pc, #404]	; (8006230 <HAL_DMA_Init+0x1bc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d045      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a63      	ldr	r2, [pc, #396]	; (8006234 <HAL_DMA_Init+0x1c0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d040      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a62      	ldr	r2, [pc, #392]	; (8006238 <HAL_DMA_Init+0x1c4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d03b      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a60      	ldr	r2, [pc, #384]	; (800623c <HAL_DMA_Init+0x1c8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d036      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5f      	ldr	r2, [pc, #380]	; (8006240 <HAL_DMA_Init+0x1cc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d031      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a5d      	ldr	r2, [pc, #372]	; (8006244 <HAL_DMA_Init+0x1d0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d02c      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a5c      	ldr	r2, [pc, #368]	; (8006248 <HAL_DMA_Init+0x1d4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d027      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a5a      	ldr	r2, [pc, #360]	; (800624c <HAL_DMA_Init+0x1d8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d022      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a59      	ldr	r2, [pc, #356]	; (8006250 <HAL_DMA_Init+0x1dc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d01d      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a57      	ldr	r2, [pc, #348]	; (8006254 <HAL_DMA_Init+0x1e0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d018      	beq.n	800612c <HAL_DMA_Init+0xb8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a56      	ldr	r2, [pc, #344]	; (8006258 <HAL_DMA_Init+0x1e4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <HAL_DMA_Init+0xb8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a54      	ldr	r2, [pc, #336]	; (800625c <HAL_DMA_Init+0x1e8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00e      	beq.n	800612c <HAL_DMA_Init+0xb8>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a53      	ldr	r2, [pc, #332]	; (8006260 <HAL_DMA_Init+0x1ec>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d009      	beq.n	800612c <HAL_DMA_Init+0xb8>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a51      	ldr	r2, [pc, #324]	; (8006264 <HAL_DMA_Init+0x1f0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d004      	beq.n	800612c <HAL_DMA_Init+0xb8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a50      	ldr	r2, [pc, #320]	; (8006268 <HAL_DMA_Init+0x1f4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d101      	bne.n	8006130 <HAL_DMA_Init+0xbc>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <HAL_DMA_Init+0xbe>
 8006130:	2300      	movs	r3, #0
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 813b 	beq.w	80063ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a37      	ldr	r2, [pc, #220]	; (800622c <HAL_DMA_Init+0x1b8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d04a      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a36      	ldr	r2, [pc, #216]	; (8006230 <HAL_DMA_Init+0x1bc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d045      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a34      	ldr	r2, [pc, #208]	; (8006234 <HAL_DMA_Init+0x1c0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d040      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a33      	ldr	r2, [pc, #204]	; (8006238 <HAL_DMA_Init+0x1c4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d03b      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a31      	ldr	r2, [pc, #196]	; (800623c <HAL_DMA_Init+0x1c8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d036      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a30      	ldr	r2, [pc, #192]	; (8006240 <HAL_DMA_Init+0x1cc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d031      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2e      	ldr	r2, [pc, #184]	; (8006244 <HAL_DMA_Init+0x1d0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d02c      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2d      	ldr	r2, [pc, #180]	; (8006248 <HAL_DMA_Init+0x1d4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d027      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2b      	ldr	r2, [pc, #172]	; (800624c <HAL_DMA_Init+0x1d8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d022      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <HAL_DMA_Init+0x1dc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d01d      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a28      	ldr	r2, [pc, #160]	; (8006254 <HAL_DMA_Init+0x1e0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d018      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a27      	ldr	r2, [pc, #156]	; (8006258 <HAL_DMA_Init+0x1e4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d013      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a25      	ldr	r2, [pc, #148]	; (800625c <HAL_DMA_Init+0x1e8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00e      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a24      	ldr	r2, [pc, #144]	; (8006260 <HAL_DMA_Init+0x1ec>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a22      	ldr	r2, [pc, #136]	; (8006264 <HAL_DMA_Init+0x1f0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_DMA_Init+0x174>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a21      	ldr	r2, [pc, #132]	; (8006268 <HAL_DMA_Init+0x1f4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d108      	bne.n	80061fa <HAL_DMA_Init+0x186>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e007      	b.n	800620a <HAL_DMA_Init+0x196>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800620a:	e02f      	b.n	800626c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800620c:	f7fe f83e 	bl	800428c <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b05      	cmp	r3, #5
 8006218:	d928      	bls.n	800626c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2203      	movs	r2, #3
 8006224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e246      	b.n	80066ba <HAL_DMA_Init+0x646>
 800622c:	40020010 	.word	0x40020010
 8006230:	40020028 	.word	0x40020028
 8006234:	40020040 	.word	0x40020040
 8006238:	40020058 	.word	0x40020058
 800623c:	40020070 	.word	0x40020070
 8006240:	40020088 	.word	0x40020088
 8006244:	400200a0 	.word	0x400200a0
 8006248:	400200b8 	.word	0x400200b8
 800624c:	40020410 	.word	0x40020410
 8006250:	40020428 	.word	0x40020428
 8006254:	40020440 	.word	0x40020440
 8006258:	40020458 	.word	0x40020458
 800625c:	40020470 	.word	0x40020470
 8006260:	40020488 	.word	0x40020488
 8006264:	400204a0 	.word	0x400204a0
 8006268:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1c8      	bne.n	800620c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4b83      	ldr	r3, [pc, #524]	; (8006494 <HAL_DMA_Init+0x420>)
 8006286:	4013      	ands	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006292:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800629e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d107      	bne.n	80062d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	4313      	orrs	r3, r2
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80062d0:	4b71      	ldr	r3, [pc, #452]	; (8006498 <HAL_DMA_Init+0x424>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4b71      	ldr	r3, [pc, #452]	; (800649c <HAL_DMA_Init+0x428>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062dc:	d328      	bcc.n	8006330 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b28      	cmp	r3, #40	; 0x28
 80062e4:	d903      	bls.n	80062ee <HAL_DMA_Init+0x27a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b2e      	cmp	r3, #46	; 0x2e
 80062ec:	d917      	bls.n	800631e <HAL_DMA_Init+0x2aa>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b3e      	cmp	r3, #62	; 0x3e
 80062f4:	d903      	bls.n	80062fe <HAL_DMA_Init+0x28a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b42      	cmp	r3, #66	; 0x42
 80062fc:	d90f      	bls.n	800631e <HAL_DMA_Init+0x2aa>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b46      	cmp	r3, #70	; 0x46
 8006304:	d903      	bls.n	800630e <HAL_DMA_Init+0x29a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b48      	cmp	r3, #72	; 0x48
 800630c:	d907      	bls.n	800631e <HAL_DMA_Init+0x2aa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b4e      	cmp	r3, #78	; 0x4e
 8006314:	d905      	bls.n	8006322 <HAL_DMA_Init+0x2ae>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b52      	cmp	r3, #82	; 0x52
 800631c:	d801      	bhi.n	8006322 <HAL_DMA_Init+0x2ae>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <HAL_DMA_Init+0x2b0>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800632e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0307 	bic.w	r3, r3, #7
 8006346:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	2b04      	cmp	r3, #4
 8006358:	d117      	bne.n	800638a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00e      	beq.n	800638a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 fddb 	bl	8007f28 <DMA_CheckFifoParam>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2240      	movs	r2, #64	; 0x40
 800637c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e197      	b.n	80066ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fd16 	bl	8007dc4 <DMA_CalcBaseAndBitshift>
 8006398:	4603      	mov	r3, r0
 800639a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a0:	f003 031f 	and.w	r3, r3, #31
 80063a4:	223f      	movs	r2, #63	; 0x3f
 80063a6:	409a      	lsls	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	e0cd      	b.n	800654a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a3b      	ldr	r2, [pc, #236]	; (80064a0 <HAL_DMA_Init+0x42c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_DMA_Init+0x38a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a39      	ldr	r2, [pc, #228]	; (80064a4 <HAL_DMA_Init+0x430>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01d      	beq.n	80063fe <HAL_DMA_Init+0x38a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a38      	ldr	r2, [pc, #224]	; (80064a8 <HAL_DMA_Init+0x434>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_DMA_Init+0x38a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a36      	ldr	r2, [pc, #216]	; (80064ac <HAL_DMA_Init+0x438>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_DMA_Init+0x38a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a35      	ldr	r2, [pc, #212]	; (80064b0 <HAL_DMA_Init+0x43c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_DMA_Init+0x38a>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a33      	ldr	r2, [pc, #204]	; (80064b4 <HAL_DMA_Init+0x440>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_DMA_Init+0x38a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a32      	ldr	r2, [pc, #200]	; (80064b8 <HAL_DMA_Init+0x444>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_DMA_Init+0x38a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a30      	ldr	r2, [pc, #192]	; (80064bc <HAL_DMA_Init+0x448>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_DMA_Init+0x38e>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <HAL_DMA_Init+0x390>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 8097 	beq.w	8006538 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <HAL_DMA_Init+0x42c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d021      	beq.n	8006458 <HAL_DMA_Init+0x3e4>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <HAL_DMA_Init+0x430>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01c      	beq.n	8006458 <HAL_DMA_Init+0x3e4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <HAL_DMA_Init+0x434>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d017      	beq.n	8006458 <HAL_DMA_Init+0x3e4>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1f      	ldr	r2, [pc, #124]	; (80064ac <HAL_DMA_Init+0x438>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d012      	beq.n	8006458 <HAL_DMA_Init+0x3e4>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <HAL_DMA_Init+0x43c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00d      	beq.n	8006458 <HAL_DMA_Init+0x3e4>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <HAL_DMA_Init+0x440>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d008      	beq.n	8006458 <HAL_DMA_Init+0x3e4>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1b      	ldr	r2, [pc, #108]	; (80064b8 <HAL_DMA_Init+0x444>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <HAL_DMA_Init+0x3e4>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <HAL_DMA_Init+0x448>)
 8006456:	4293      	cmp	r3, r2
 8006458:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2202      	movs	r2, #2
 8006466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <HAL_DMA_Init+0x44c>)
 8006476:	4013      	ands	r3, r2
 8006478:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d020      	beq.n	80064c4 <HAL_DMA_Init+0x450>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d102      	bne.n	8006490 <HAL_DMA_Init+0x41c>
 800648a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800648e:	e01a      	b.n	80064c6 <HAL_DMA_Init+0x452>
 8006490:	2300      	movs	r3, #0
 8006492:	e018      	b.n	80064c6 <HAL_DMA_Init+0x452>
 8006494:	fe10803f 	.word	0xfe10803f
 8006498:	5c001000 	.word	0x5c001000
 800649c:	ffff0000 	.word	0xffff0000
 80064a0:	58025408 	.word	0x58025408
 80064a4:	5802541c 	.word	0x5802541c
 80064a8:	58025430 	.word	0x58025430
 80064ac:	58025444 	.word	0x58025444
 80064b0:	58025458 	.word	0x58025458
 80064b4:	5802546c 	.word	0x5802546c
 80064b8:	58025480 	.word	0x58025480
 80064bc:	58025494 	.word	0x58025494
 80064c0:	fffe000f 	.word	0xfffe000f
 80064c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	68d2      	ldr	r2, [r2, #12]
 80064ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80064d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	4b6e      	ldr	r3, [pc, #440]	; (80066c4 <HAL_DMA_Init+0x650>)
 800650c:	4413      	add	r3, r2
 800650e:	4a6e      	ldr	r2, [pc, #440]	; (80066c8 <HAL_DMA_Init+0x654>)
 8006510:	fba2 2303 	umull	r2, r3, r2, r3
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	009a      	lsls	r2, r3, #2
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fc51 	bl	8007dc4 <DMA_CalcBaseAndBitshift>
 8006522:	4603      	mov	r3, r0
 8006524:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	2201      	movs	r2, #1
 8006530:	409a      	lsls	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	e008      	b.n	800654a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2240      	movs	r2, #64	; 0x40
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2203      	movs	r2, #3
 8006542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0b7      	b.n	80066ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a5f      	ldr	r2, [pc, #380]	; (80066cc <HAL_DMA_Init+0x658>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d072      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a5d      	ldr	r2, [pc, #372]	; (80066d0 <HAL_DMA_Init+0x65c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d06d      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a5c      	ldr	r2, [pc, #368]	; (80066d4 <HAL_DMA_Init+0x660>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d068      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a5a      	ldr	r2, [pc, #360]	; (80066d8 <HAL_DMA_Init+0x664>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d063      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a59      	ldr	r2, [pc, #356]	; (80066dc <HAL_DMA_Init+0x668>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d05e      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a57      	ldr	r2, [pc, #348]	; (80066e0 <HAL_DMA_Init+0x66c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d059      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a56      	ldr	r2, [pc, #344]	; (80066e4 <HAL_DMA_Init+0x670>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d054      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a54      	ldr	r2, [pc, #336]	; (80066e8 <HAL_DMA_Init+0x674>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d04f      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a53      	ldr	r2, [pc, #332]	; (80066ec <HAL_DMA_Init+0x678>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d04a      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a51      	ldr	r2, [pc, #324]	; (80066f0 <HAL_DMA_Init+0x67c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d045      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a50      	ldr	r2, [pc, #320]	; (80066f4 <HAL_DMA_Init+0x680>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d040      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a4e      	ldr	r2, [pc, #312]	; (80066f8 <HAL_DMA_Init+0x684>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d03b      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a4d      	ldr	r2, [pc, #308]	; (80066fc <HAL_DMA_Init+0x688>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d036      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a4b      	ldr	r2, [pc, #300]	; (8006700 <HAL_DMA_Init+0x68c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d031      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a4a      	ldr	r2, [pc, #296]	; (8006704 <HAL_DMA_Init+0x690>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d02c      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a48      	ldr	r2, [pc, #288]	; (8006708 <HAL_DMA_Init+0x694>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d027      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a47      	ldr	r2, [pc, #284]	; (800670c <HAL_DMA_Init+0x698>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d022      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a45      	ldr	r2, [pc, #276]	; (8006710 <HAL_DMA_Init+0x69c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01d      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a44      	ldr	r2, [pc, #272]	; (8006714 <HAL_DMA_Init+0x6a0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d018      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a42      	ldr	r2, [pc, #264]	; (8006718 <HAL_DMA_Init+0x6a4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a41      	ldr	r2, [pc, #260]	; (800671c <HAL_DMA_Init+0x6a8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00e      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a3f      	ldr	r2, [pc, #252]	; (8006720 <HAL_DMA_Init+0x6ac>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d009      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a3e      	ldr	r2, [pc, #248]	; (8006724 <HAL_DMA_Init+0x6b0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d004      	beq.n	800663a <HAL_DMA_Init+0x5c6>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a3c      	ldr	r2, [pc, #240]	; (8006728 <HAL_DMA_Init+0x6b4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d101      	bne.n	800663e <HAL_DMA_Init+0x5ca>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <HAL_DMA_Init+0x5cc>
 800663e:	2300      	movs	r3, #0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d032      	beq.n	80066aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fceb 	bl	8008020 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d102      	bne.n	8006658 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800666c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d010      	beq.n	8006698 <HAL_DMA_Init+0x624>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b08      	cmp	r3, #8
 800667c:	d80c      	bhi.n	8006698 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 fd68 	bl	8008154 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006694:	605a      	str	r2, [r3, #4]
 8006696:	e008      	b.n	80066aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	a7fdabf8 	.word	0xa7fdabf8
 80066c8:	cccccccd 	.word	0xcccccccd
 80066cc:	40020010 	.word	0x40020010
 80066d0:	40020028 	.word	0x40020028
 80066d4:	40020040 	.word	0x40020040
 80066d8:	40020058 	.word	0x40020058
 80066dc:	40020070 	.word	0x40020070
 80066e0:	40020088 	.word	0x40020088
 80066e4:	400200a0 	.word	0x400200a0
 80066e8:	400200b8 	.word	0x400200b8
 80066ec:	40020410 	.word	0x40020410
 80066f0:	40020428 	.word	0x40020428
 80066f4:	40020440 	.word	0x40020440
 80066f8:	40020458 	.word	0x40020458
 80066fc:	40020470 	.word	0x40020470
 8006700:	40020488 	.word	0x40020488
 8006704:	400204a0 	.word	0x400204a0
 8006708:	400204b8 	.word	0x400204b8
 800670c:	58025408 	.word	0x58025408
 8006710:	5802541c 	.word	0x5802541c
 8006714:	58025430 	.word	0x58025430
 8006718:	58025444 	.word	0x58025444
 800671c:	58025458 	.word	0x58025458
 8006720:	5802546c 	.word	0x5802546c
 8006724:	58025480 	.word	0x58025480
 8006728:	58025494 	.word	0x58025494

0800672c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e226      	b.n	8006b96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <HAL_DMA_Start_IT+0x2a>
 8006752:	2302      	movs	r3, #2
 8006754:	e21f      	b.n	8006b96 <HAL_DMA_Start_IT+0x46a>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b01      	cmp	r3, #1
 8006768:	f040 820a 	bne.w	8006b80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a68      	ldr	r2, [pc, #416]	; (8006920 <HAL_DMA_Start_IT+0x1f4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d04a      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a66      	ldr	r2, [pc, #408]	; (8006924 <HAL_DMA_Start_IT+0x1f8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d045      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a65      	ldr	r2, [pc, #404]	; (8006928 <HAL_DMA_Start_IT+0x1fc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d040      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a63      	ldr	r2, [pc, #396]	; (800692c <HAL_DMA_Start_IT+0x200>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d03b      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a62      	ldr	r2, [pc, #392]	; (8006930 <HAL_DMA_Start_IT+0x204>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d036      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a60      	ldr	r2, [pc, #384]	; (8006934 <HAL_DMA_Start_IT+0x208>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d031      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a5f      	ldr	r2, [pc, #380]	; (8006938 <HAL_DMA_Start_IT+0x20c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d02c      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a5d      	ldr	r2, [pc, #372]	; (800693c <HAL_DMA_Start_IT+0x210>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d027      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a5c      	ldr	r2, [pc, #368]	; (8006940 <HAL_DMA_Start_IT+0x214>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d022      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a5a      	ldr	r2, [pc, #360]	; (8006944 <HAL_DMA_Start_IT+0x218>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d01d      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a59      	ldr	r2, [pc, #356]	; (8006948 <HAL_DMA_Start_IT+0x21c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d018      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a57      	ldr	r2, [pc, #348]	; (800694c <HAL_DMA_Start_IT+0x220>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d013      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a56      	ldr	r2, [pc, #344]	; (8006950 <HAL_DMA_Start_IT+0x224>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a54      	ldr	r2, [pc, #336]	; (8006954 <HAL_DMA_Start_IT+0x228>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a53      	ldr	r2, [pc, #332]	; (8006958 <HAL_DMA_Start_IT+0x22c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <HAL_DMA_Start_IT+0xee>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a51      	ldr	r2, [pc, #324]	; (800695c <HAL_DMA_Start_IT+0x230>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d108      	bne.n	800682c <HAL_DMA_Start_IT+0x100>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0201 	bic.w	r2, r2, #1
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	e007      	b.n	800683c <HAL_DMA_Start_IT+0x110>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0201 	bic.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f001 f912 	bl	8007a6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a34      	ldr	r2, [pc, #208]	; (8006920 <HAL_DMA_Start_IT+0x1f4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d04a      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a33      	ldr	r2, [pc, #204]	; (8006924 <HAL_DMA_Start_IT+0x1f8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d045      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a31      	ldr	r2, [pc, #196]	; (8006928 <HAL_DMA_Start_IT+0x1fc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d040      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a30      	ldr	r2, [pc, #192]	; (800692c <HAL_DMA_Start_IT+0x200>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d03b      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2e      	ldr	r2, [pc, #184]	; (8006930 <HAL_DMA_Start_IT+0x204>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d036      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2d      	ldr	r2, [pc, #180]	; (8006934 <HAL_DMA_Start_IT+0x208>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d031      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a2b      	ldr	r2, [pc, #172]	; (8006938 <HAL_DMA_Start_IT+0x20c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d02c      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a2a      	ldr	r2, [pc, #168]	; (800693c <HAL_DMA_Start_IT+0x210>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d027      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a28      	ldr	r2, [pc, #160]	; (8006940 <HAL_DMA_Start_IT+0x214>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d022      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a27      	ldr	r2, [pc, #156]	; (8006944 <HAL_DMA_Start_IT+0x218>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d01d      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a25      	ldr	r2, [pc, #148]	; (8006948 <HAL_DMA_Start_IT+0x21c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d018      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a24      	ldr	r2, [pc, #144]	; (800694c <HAL_DMA_Start_IT+0x220>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d013      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a22      	ldr	r2, [pc, #136]	; (8006950 <HAL_DMA_Start_IT+0x224>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00e      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a21      	ldr	r2, [pc, #132]	; (8006954 <HAL_DMA_Start_IT+0x228>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d009      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1f      	ldr	r2, [pc, #124]	; (8006958 <HAL_DMA_Start_IT+0x22c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d004      	beq.n	80068e8 <HAL_DMA_Start_IT+0x1bc>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1e      	ldr	r2, [pc, #120]	; (800695c <HAL_DMA_Start_IT+0x230>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d101      	bne.n	80068ec <HAL_DMA_Start_IT+0x1c0>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e000      	b.n	80068ee <HAL_DMA_Start_IT+0x1c2>
 80068ec:	2300      	movs	r3, #0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d036      	beq.n	8006960 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f023 021e 	bic.w	r2, r3, #30
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0216 	orr.w	r2, r2, #22
 8006904:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d03e      	beq.n	800698c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0208 	orr.w	r2, r2, #8
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e035      	b.n	800698c <HAL_DMA_Start_IT+0x260>
 8006920:	40020010 	.word	0x40020010
 8006924:	40020028 	.word	0x40020028
 8006928:	40020040 	.word	0x40020040
 800692c:	40020058 	.word	0x40020058
 8006930:	40020070 	.word	0x40020070
 8006934:	40020088 	.word	0x40020088
 8006938:	400200a0 	.word	0x400200a0
 800693c:	400200b8 	.word	0x400200b8
 8006940:	40020410 	.word	0x40020410
 8006944:	40020428 	.word	0x40020428
 8006948:	40020440 	.word	0x40020440
 800694c:	40020458 	.word	0x40020458
 8006950:	40020470 	.word	0x40020470
 8006954:	40020488 	.word	0x40020488
 8006958:	400204a0 	.word	0x400204a0
 800695c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 020e 	bic.w	r2, r3, #14
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 020a 	orr.w	r2, r2, #10
 8006972:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0204 	orr.w	r2, r2, #4
 800698a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a83      	ldr	r2, [pc, #524]	; (8006ba0 <HAL_DMA_Start_IT+0x474>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d072      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a82      	ldr	r2, [pc, #520]	; (8006ba4 <HAL_DMA_Start_IT+0x478>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d06d      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a80      	ldr	r2, [pc, #512]	; (8006ba8 <HAL_DMA_Start_IT+0x47c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d068      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a7f      	ldr	r2, [pc, #508]	; (8006bac <HAL_DMA_Start_IT+0x480>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d063      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a7d      	ldr	r2, [pc, #500]	; (8006bb0 <HAL_DMA_Start_IT+0x484>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d05e      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a7c      	ldr	r2, [pc, #496]	; (8006bb4 <HAL_DMA_Start_IT+0x488>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d059      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a7a      	ldr	r2, [pc, #488]	; (8006bb8 <HAL_DMA_Start_IT+0x48c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d054      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a79      	ldr	r2, [pc, #484]	; (8006bbc <HAL_DMA_Start_IT+0x490>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d04f      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a77      	ldr	r2, [pc, #476]	; (8006bc0 <HAL_DMA_Start_IT+0x494>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d04a      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a76      	ldr	r2, [pc, #472]	; (8006bc4 <HAL_DMA_Start_IT+0x498>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d045      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a74      	ldr	r2, [pc, #464]	; (8006bc8 <HAL_DMA_Start_IT+0x49c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d040      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a73      	ldr	r2, [pc, #460]	; (8006bcc <HAL_DMA_Start_IT+0x4a0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d03b      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a71      	ldr	r2, [pc, #452]	; (8006bd0 <HAL_DMA_Start_IT+0x4a4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d036      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a70      	ldr	r2, [pc, #448]	; (8006bd4 <HAL_DMA_Start_IT+0x4a8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d031      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a6e      	ldr	r2, [pc, #440]	; (8006bd8 <HAL_DMA_Start_IT+0x4ac>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d02c      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a6d      	ldr	r2, [pc, #436]	; (8006bdc <HAL_DMA_Start_IT+0x4b0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d027      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a6b      	ldr	r2, [pc, #428]	; (8006be0 <HAL_DMA_Start_IT+0x4b4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d022      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a6a      	ldr	r2, [pc, #424]	; (8006be4 <HAL_DMA_Start_IT+0x4b8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d01d      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a68      	ldr	r2, [pc, #416]	; (8006be8 <HAL_DMA_Start_IT+0x4bc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d018      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a67      	ldr	r2, [pc, #412]	; (8006bec <HAL_DMA_Start_IT+0x4c0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d013      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a65      	ldr	r2, [pc, #404]	; (8006bf0 <HAL_DMA_Start_IT+0x4c4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00e      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a64      	ldr	r2, [pc, #400]	; (8006bf4 <HAL_DMA_Start_IT+0x4c8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a62      	ldr	r2, [pc, #392]	; (8006bf8 <HAL_DMA_Start_IT+0x4cc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_DMA_Start_IT+0x350>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a61      	ldr	r2, [pc, #388]	; (8006bfc <HAL_DMA_Start_IT+0x4d0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d101      	bne.n	8006a80 <HAL_DMA_Start_IT+0x354>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_DMA_Start_IT+0x356>
 8006a80:	2300      	movs	r3, #0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d01a      	beq.n	8006abc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a37      	ldr	r2, [pc, #220]	; (8006ba0 <HAL_DMA_Start_IT+0x474>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d04a      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a36      	ldr	r2, [pc, #216]	; (8006ba4 <HAL_DMA_Start_IT+0x478>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d045      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a34      	ldr	r2, [pc, #208]	; (8006ba8 <HAL_DMA_Start_IT+0x47c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d040      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a33      	ldr	r2, [pc, #204]	; (8006bac <HAL_DMA_Start_IT+0x480>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d03b      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a31      	ldr	r2, [pc, #196]	; (8006bb0 <HAL_DMA_Start_IT+0x484>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d036      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a30      	ldr	r2, [pc, #192]	; (8006bb4 <HAL_DMA_Start_IT+0x488>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d031      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2e      	ldr	r2, [pc, #184]	; (8006bb8 <HAL_DMA_Start_IT+0x48c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d02c      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2d      	ldr	r2, [pc, #180]	; (8006bbc <HAL_DMA_Start_IT+0x490>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d027      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2b      	ldr	r2, [pc, #172]	; (8006bc0 <HAL_DMA_Start_IT+0x494>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d022      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2a      	ldr	r2, [pc, #168]	; (8006bc4 <HAL_DMA_Start_IT+0x498>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d01d      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a28      	ldr	r2, [pc, #160]	; (8006bc8 <HAL_DMA_Start_IT+0x49c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d018      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a27      	ldr	r2, [pc, #156]	; (8006bcc <HAL_DMA_Start_IT+0x4a0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a25      	ldr	r2, [pc, #148]	; (8006bd0 <HAL_DMA_Start_IT+0x4a4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00e      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a24      	ldr	r2, [pc, #144]	; (8006bd4 <HAL_DMA_Start_IT+0x4a8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d009      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a22      	ldr	r2, [pc, #136]	; (8006bd8 <HAL_DMA_Start_IT+0x4ac>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d004      	beq.n	8006b5c <HAL_DMA_Start_IT+0x430>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a21      	ldr	r2, [pc, #132]	; (8006bdc <HAL_DMA_Start_IT+0x4b0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d108      	bne.n	8006b6e <HAL_DMA_Start_IT+0x442>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e012      	b.n	8006b94 <HAL_DMA_Start_IT+0x468>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0201 	orr.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e009      	b.n	8006b94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40020010 	.word	0x40020010
 8006ba4:	40020028 	.word	0x40020028
 8006ba8:	40020040 	.word	0x40020040
 8006bac:	40020058 	.word	0x40020058
 8006bb0:	40020070 	.word	0x40020070
 8006bb4:	40020088 	.word	0x40020088
 8006bb8:	400200a0 	.word	0x400200a0
 8006bbc:	400200b8 	.word	0x400200b8
 8006bc0:	40020410 	.word	0x40020410
 8006bc4:	40020428 	.word	0x40020428
 8006bc8:	40020440 	.word	0x40020440
 8006bcc:	40020458 	.word	0x40020458
 8006bd0:	40020470 	.word	0x40020470
 8006bd4:	40020488 	.word	0x40020488
 8006bd8:	400204a0 	.word	0x400204a0
 8006bdc:	400204b8 	.word	0x400204b8
 8006be0:	58025408 	.word	0x58025408
 8006be4:	5802541c 	.word	0x5802541c
 8006be8:	58025430 	.word	0x58025430
 8006bec:	58025444 	.word	0x58025444
 8006bf0:	58025458 	.word	0x58025458
 8006bf4:	5802546c 	.word	0x5802546c
 8006bf8:	58025480 	.word	0x58025480
 8006bfc:	58025494 	.word	0x58025494

08006c00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	; 0x28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c0c:	4b67      	ldr	r3, [pc, #412]	; (8006dac <HAL_DMA_IRQHandler+0x1ac>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a67      	ldr	r2, [pc, #412]	; (8006db0 <HAL_DMA_IRQHandler+0x1b0>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	0a9b      	lsrs	r3, r3, #10
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5f      	ldr	r2, [pc, #380]	; (8006db4 <HAL_DMA_IRQHandler+0x1b4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d04a      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a5d      	ldr	r2, [pc, #372]	; (8006db8 <HAL_DMA_IRQHandler+0x1b8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d045      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a5c      	ldr	r2, [pc, #368]	; (8006dbc <HAL_DMA_IRQHandler+0x1bc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d040      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a5a      	ldr	r2, [pc, #360]	; (8006dc0 <HAL_DMA_IRQHandler+0x1c0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d03b      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a59      	ldr	r2, [pc, #356]	; (8006dc4 <HAL_DMA_IRQHandler+0x1c4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d036      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a57      	ldr	r2, [pc, #348]	; (8006dc8 <HAL_DMA_IRQHandler+0x1c8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d031      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a56      	ldr	r2, [pc, #344]	; (8006dcc <HAL_DMA_IRQHandler+0x1cc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d02c      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a54      	ldr	r2, [pc, #336]	; (8006dd0 <HAL_DMA_IRQHandler+0x1d0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d027      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a53      	ldr	r2, [pc, #332]	; (8006dd4 <HAL_DMA_IRQHandler+0x1d4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d022      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a51      	ldr	r2, [pc, #324]	; (8006dd8 <HAL_DMA_IRQHandler+0x1d8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d01d      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a50      	ldr	r2, [pc, #320]	; (8006ddc <HAL_DMA_IRQHandler+0x1dc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a4e      	ldr	r2, [pc, #312]	; (8006de0 <HAL_DMA_IRQHandler+0x1e0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a4d      	ldr	r2, [pc, #308]	; (8006de4 <HAL_DMA_IRQHandler+0x1e4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a4b      	ldr	r2, [pc, #300]	; (8006de8 <HAL_DMA_IRQHandler+0x1e8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a4a      	ldr	r2, [pc, #296]	; (8006dec <HAL_DMA_IRQHandler+0x1ec>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xd2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a48      	ldr	r2, [pc, #288]	; (8006df0 <HAL_DMA_IRQHandler+0x1f0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d101      	bne.n	8006cd6 <HAL_DMA_IRQHandler+0xd6>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xd8>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 842b 	beq.w	8007534 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	2208      	movs	r2, #8
 8006ce8:	409a      	lsls	r2, r3
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	4013      	ands	r3, r2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80a2 	beq.w	8006e38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a2e      	ldr	r2, [pc, #184]	; (8006db4 <HAL_DMA_IRQHandler+0x1b4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d04a      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a2d      	ldr	r2, [pc, #180]	; (8006db8 <HAL_DMA_IRQHandler+0x1b8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d045      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a2b      	ldr	r2, [pc, #172]	; (8006dbc <HAL_DMA_IRQHandler+0x1bc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d040      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2a      	ldr	r2, [pc, #168]	; (8006dc0 <HAL_DMA_IRQHandler+0x1c0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d03b      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a28      	ldr	r2, [pc, #160]	; (8006dc4 <HAL_DMA_IRQHandler+0x1c4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d036      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a27      	ldr	r2, [pc, #156]	; (8006dc8 <HAL_DMA_IRQHandler+0x1c8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d031      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <HAL_DMA_IRQHandler+0x1cc>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d02c      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <HAL_DMA_IRQHandler+0x1d0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d027      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a22      	ldr	r2, [pc, #136]	; (8006dd4 <HAL_DMA_IRQHandler+0x1d4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d022      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <HAL_DMA_IRQHandler+0x1d8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d01d      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1f      	ldr	r2, [pc, #124]	; (8006ddc <HAL_DMA_IRQHandler+0x1dc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d018      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1e      	ldr	r2, [pc, #120]	; (8006de0 <HAL_DMA_IRQHandler+0x1e0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d013      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <HAL_DMA_IRQHandler+0x1e4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00e      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1b      	ldr	r2, [pc, #108]	; (8006de8 <HAL_DMA_IRQHandler+0x1e8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d009      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a19      	ldr	r2, [pc, #100]	; (8006dec <HAL_DMA_IRQHandler+0x1ec>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d004      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x194>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <HAL_DMA_IRQHandler+0x1f0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d12f      	bne.n	8006df4 <HAL_DMA_IRQHandler+0x1f4>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0304 	and.w	r3, r3, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bf14      	ite	ne
 8006da2:	2301      	movne	r3, #1
 8006da4:	2300      	moveq	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	e02e      	b.n	8006e08 <HAL_DMA_IRQHandler+0x208>
 8006daa:	bf00      	nop
 8006dac:	24000000 	.word	0x24000000
 8006db0:	1b4e81b5 	.word	0x1b4e81b5
 8006db4:	40020010 	.word	0x40020010
 8006db8:	40020028 	.word	0x40020028
 8006dbc:	40020040 	.word	0x40020040
 8006dc0:	40020058 	.word	0x40020058
 8006dc4:	40020070 	.word	0x40020070
 8006dc8:	40020088 	.word	0x40020088
 8006dcc:	400200a0 	.word	0x400200a0
 8006dd0:	400200b8 	.word	0x400200b8
 8006dd4:	40020410 	.word	0x40020410
 8006dd8:	40020428 	.word	0x40020428
 8006ddc:	40020440 	.word	0x40020440
 8006de0:	40020458 	.word	0x40020458
 8006de4:	40020470 	.word	0x40020470
 8006de8:	40020488 	.word	0x40020488
 8006dec:	400204a0 	.word	0x400204a0
 8006df0:	400204b8 	.word	0x400204b8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf14      	ite	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	2300      	moveq	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d015      	beq.n	8006e38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0204 	bic.w	r2, r2, #4
 8006e1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	2208      	movs	r2, #8
 8006e26:	409a      	lsls	r2, r3
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	f043 0201 	orr.w	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	fa22 f303 	lsr.w	r3, r2, r3
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d06e      	beq.n	8006f2c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a69      	ldr	r2, [pc, #420]	; (8006ff8 <HAL_DMA_IRQHandler+0x3f8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d04a      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a67      	ldr	r2, [pc, #412]	; (8006ffc <HAL_DMA_IRQHandler+0x3fc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d045      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a66      	ldr	r2, [pc, #408]	; (8007000 <HAL_DMA_IRQHandler+0x400>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d040      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a64      	ldr	r2, [pc, #400]	; (8007004 <HAL_DMA_IRQHandler+0x404>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d03b      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a63      	ldr	r2, [pc, #396]	; (8007008 <HAL_DMA_IRQHandler+0x408>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d036      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a61      	ldr	r2, [pc, #388]	; (800700c <HAL_DMA_IRQHandler+0x40c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d031      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a60      	ldr	r2, [pc, #384]	; (8007010 <HAL_DMA_IRQHandler+0x410>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d02c      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a5e      	ldr	r2, [pc, #376]	; (8007014 <HAL_DMA_IRQHandler+0x414>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d027      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a5d      	ldr	r2, [pc, #372]	; (8007018 <HAL_DMA_IRQHandler+0x418>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d022      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a5b      	ldr	r2, [pc, #364]	; (800701c <HAL_DMA_IRQHandler+0x41c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01d      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a5a      	ldr	r2, [pc, #360]	; (8007020 <HAL_DMA_IRQHandler+0x420>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a58      	ldr	r2, [pc, #352]	; (8007024 <HAL_DMA_IRQHandler+0x424>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a57      	ldr	r2, [pc, #348]	; (8007028 <HAL_DMA_IRQHandler+0x428>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a55      	ldr	r2, [pc, #340]	; (800702c <HAL_DMA_IRQHandler+0x42c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a54      	ldr	r2, [pc, #336]	; (8007030 <HAL_DMA_IRQHandler+0x430>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_DMA_IRQHandler+0x2ee>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a52      	ldr	r2, [pc, #328]	; (8007034 <HAL_DMA_IRQHandler+0x434>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10a      	bne.n	8006f04 <HAL_DMA_IRQHandler+0x304>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e003      	b.n	8006f0c <HAL_DMA_IRQHandler+0x30c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f14:	f003 031f 	and.w	r3, r3, #31
 8006f18:	2201      	movs	r2, #1
 8006f1a:	409a      	lsls	r2, r3
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f24:	f043 0202 	orr.w	r2, r3, #2
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2204      	movs	r2, #4
 8006f36:	409a      	lsls	r2, r3
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 808f 	beq.w	8007060 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2c      	ldr	r2, [pc, #176]	; (8006ff8 <HAL_DMA_IRQHandler+0x3f8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d04a      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2a      	ldr	r2, [pc, #168]	; (8006ffc <HAL_DMA_IRQHandler+0x3fc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d045      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a29      	ldr	r2, [pc, #164]	; (8007000 <HAL_DMA_IRQHandler+0x400>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d040      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a27      	ldr	r2, [pc, #156]	; (8007004 <HAL_DMA_IRQHandler+0x404>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d03b      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a26      	ldr	r2, [pc, #152]	; (8007008 <HAL_DMA_IRQHandler+0x408>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d036      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a24      	ldr	r2, [pc, #144]	; (800700c <HAL_DMA_IRQHandler+0x40c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d031      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a23      	ldr	r2, [pc, #140]	; (8007010 <HAL_DMA_IRQHandler+0x410>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d02c      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a21      	ldr	r2, [pc, #132]	; (8007014 <HAL_DMA_IRQHandler+0x414>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d027      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a20      	ldr	r2, [pc, #128]	; (8007018 <HAL_DMA_IRQHandler+0x418>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d022      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1e      	ldr	r2, [pc, #120]	; (800701c <HAL_DMA_IRQHandler+0x41c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d01d      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <HAL_DMA_IRQHandler+0x420>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d018      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a1b      	ldr	r2, [pc, #108]	; (8007024 <HAL_DMA_IRQHandler+0x424>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d013      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a1a      	ldr	r2, [pc, #104]	; (8007028 <HAL_DMA_IRQHandler+0x428>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00e      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a18      	ldr	r2, [pc, #96]	; (800702c <HAL_DMA_IRQHandler+0x42c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d009      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	; (8007030 <HAL_DMA_IRQHandler+0x430>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d004      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x3e2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a15      	ldr	r2, [pc, #84]	; (8007034 <HAL_DMA_IRQHandler+0x434>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d12a      	bne.n	8007038 <HAL_DMA_IRQHandler+0x438>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf14      	ite	ne
 8006ff0:	2301      	movne	r3, #1
 8006ff2:	2300      	moveq	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	e023      	b.n	8007040 <HAL_DMA_IRQHandler+0x440>
 8006ff8:	40020010 	.word	0x40020010
 8006ffc:	40020028 	.word	0x40020028
 8007000:	40020040 	.word	0x40020040
 8007004:	40020058 	.word	0x40020058
 8007008:	40020070 	.word	0x40020070
 800700c:	40020088 	.word	0x40020088
 8007010:	400200a0 	.word	0x400200a0
 8007014:	400200b8 	.word	0x400200b8
 8007018:	40020410 	.word	0x40020410
 800701c:	40020428 	.word	0x40020428
 8007020:	40020440 	.word	0x40020440
 8007024:	40020458 	.word	0x40020458
 8007028:	40020470 	.word	0x40020470
 800702c:	40020488 	.word	0x40020488
 8007030:	400204a0 	.word	0x400204a0
 8007034:	400204b8 	.word	0x400204b8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2204      	movs	r2, #4
 800704e:	409a      	lsls	r2, r3
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007058:	f043 0204 	orr.w	r2, r3, #4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007064:	f003 031f 	and.w	r3, r3, #31
 8007068:	2210      	movs	r2, #16
 800706a:	409a      	lsls	r2, r3
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	4013      	ands	r3, r2
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80a6 	beq.w	80071c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a85      	ldr	r2, [pc, #532]	; (8007290 <HAL_DMA_IRQHandler+0x690>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d04a      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a83      	ldr	r2, [pc, #524]	; (8007294 <HAL_DMA_IRQHandler+0x694>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d045      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a82      	ldr	r2, [pc, #520]	; (8007298 <HAL_DMA_IRQHandler+0x698>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d040      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a80      	ldr	r2, [pc, #512]	; (800729c <HAL_DMA_IRQHandler+0x69c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d03b      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a7f      	ldr	r2, [pc, #508]	; (80072a0 <HAL_DMA_IRQHandler+0x6a0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d036      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a7d      	ldr	r2, [pc, #500]	; (80072a4 <HAL_DMA_IRQHandler+0x6a4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d031      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a7c      	ldr	r2, [pc, #496]	; (80072a8 <HAL_DMA_IRQHandler+0x6a8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d02c      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a7a      	ldr	r2, [pc, #488]	; (80072ac <HAL_DMA_IRQHandler+0x6ac>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d027      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a79      	ldr	r2, [pc, #484]	; (80072b0 <HAL_DMA_IRQHandler+0x6b0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d022      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a77      	ldr	r2, [pc, #476]	; (80072b4 <HAL_DMA_IRQHandler+0x6b4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01d      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a76      	ldr	r2, [pc, #472]	; (80072b8 <HAL_DMA_IRQHandler+0x6b8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d018      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a74      	ldr	r2, [pc, #464]	; (80072bc <HAL_DMA_IRQHandler+0x6bc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a73      	ldr	r2, [pc, #460]	; (80072c0 <HAL_DMA_IRQHandler+0x6c0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a71      	ldr	r2, [pc, #452]	; (80072c4 <HAL_DMA_IRQHandler+0x6c4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a70      	ldr	r2, [pc, #448]	; (80072c8 <HAL_DMA_IRQHandler+0x6c8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_DMA_IRQHandler+0x516>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a6e      	ldr	r2, [pc, #440]	; (80072cc <HAL_DMA_IRQHandler+0x6cc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d10a      	bne.n	800712c <HAL_DMA_IRQHandler+0x52c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf14      	ite	ne
 8007124:	2301      	movne	r3, #1
 8007126:	2300      	moveq	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	e009      	b.n	8007140 <HAL_DMA_IRQHandler+0x540>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	bf14      	ite	ne
 800713a:	2301      	movne	r3, #1
 800713c:	2300      	moveq	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d03e      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	2210      	movs	r2, #16
 800714e:	409a      	lsls	r2, r3
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d018      	beq.n	8007194 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d108      	bne.n	8007182 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d024      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
 8007180:	e01f      	b.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007186:	2b00      	cmp	r3, #0
 8007188:	d01b      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
 8007192:	e016      	b.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d107      	bne.n	80071b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0208 	bic.w	r2, r2, #8
 80071b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	2220      	movs	r2, #32
 80071cc:	409a      	lsls	r2, r3
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 8110 	beq.w	80073f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <HAL_DMA_IRQHandler+0x690>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d04a      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2b      	ldr	r2, [pc, #172]	; (8007294 <HAL_DMA_IRQHandler+0x694>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d045      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a29      	ldr	r2, [pc, #164]	; (8007298 <HAL_DMA_IRQHandler+0x698>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d040      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a28      	ldr	r2, [pc, #160]	; (800729c <HAL_DMA_IRQHandler+0x69c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d03b      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a26      	ldr	r2, [pc, #152]	; (80072a0 <HAL_DMA_IRQHandler+0x6a0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d036      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <HAL_DMA_IRQHandler+0x6a4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d031      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a23      	ldr	r2, [pc, #140]	; (80072a8 <HAL_DMA_IRQHandler+0x6a8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d02c      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a22      	ldr	r2, [pc, #136]	; (80072ac <HAL_DMA_IRQHandler+0x6ac>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d027      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a20      	ldr	r2, [pc, #128]	; (80072b0 <HAL_DMA_IRQHandler+0x6b0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d022      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1f      	ldr	r2, [pc, #124]	; (80072b4 <HAL_DMA_IRQHandler+0x6b4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <HAL_DMA_IRQHandler+0x6b8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1c      	ldr	r2, [pc, #112]	; (80072bc <HAL_DMA_IRQHandler+0x6bc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1a      	ldr	r2, [pc, #104]	; (80072c0 <HAL_DMA_IRQHandler+0x6c0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <HAL_DMA_IRQHandler+0x6c4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <HAL_DMA_IRQHandler+0x6c8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_DMA_IRQHandler+0x678>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a16      	ldr	r2, [pc, #88]	; (80072cc <HAL_DMA_IRQHandler+0x6cc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d12b      	bne.n	80072d0 <HAL_DMA_IRQHandler+0x6d0>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b00      	cmp	r3, #0
 8007284:	bf14      	ite	ne
 8007286:	2301      	movne	r3, #1
 8007288:	2300      	moveq	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	e02a      	b.n	80072e4 <HAL_DMA_IRQHandler+0x6e4>
 800728e:	bf00      	nop
 8007290:	40020010 	.word	0x40020010
 8007294:	40020028 	.word	0x40020028
 8007298:	40020040 	.word	0x40020040
 800729c:	40020058 	.word	0x40020058
 80072a0:	40020070 	.word	0x40020070
 80072a4:	40020088 	.word	0x40020088
 80072a8:	400200a0 	.word	0x400200a0
 80072ac:	400200b8 	.word	0x400200b8
 80072b0:	40020410 	.word	0x40020410
 80072b4:	40020428 	.word	0x40020428
 80072b8:	40020440 	.word	0x40020440
 80072bc:	40020458 	.word	0x40020458
 80072c0:	40020470 	.word	0x40020470
 80072c4:	40020488 	.word	0x40020488
 80072c8:	400204a0 	.word	0x400204a0
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bf14      	ite	ne
 80072de:	2301      	movne	r3, #1
 80072e0:	2300      	moveq	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8087 	beq.w	80073f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	2220      	movs	r2, #32
 80072f4:	409a      	lsls	r2, r3
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b04      	cmp	r3, #4
 8007304:	d139      	bne.n	800737a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0216 	bic.w	r2, r2, #22
 8007314:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695a      	ldr	r2, [r3, #20]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007324:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <HAL_DMA_IRQHandler+0x736>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0208 	bic.w	r2, r2, #8
 8007344:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	223f      	movs	r2, #63	; 0x3f
 8007350:	409a      	lsls	r2, r3
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 834a 	beq.w	8007a04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
          }
          return;
 8007378:	e344      	b.n	8007a04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d018      	beq.n	80073ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739a:	2b00      	cmp	r3, #0
 800739c:	d02c      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	4798      	blx	r3
 80073a6:	e027      	b.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d023      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
 80073b8:	e01e      	b.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10f      	bne.n	80073e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0210 	bic.w	r2, r2, #16
 80073d6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8306 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 8088 	beq.w	8007520 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2204      	movs	r2, #4
 8007414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a7a      	ldr	r2, [pc, #488]	; (8007608 <HAL_DMA_IRQHandler+0xa08>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d04a      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a79      	ldr	r2, [pc, #484]	; (800760c <HAL_DMA_IRQHandler+0xa0c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d045      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a77      	ldr	r2, [pc, #476]	; (8007610 <HAL_DMA_IRQHandler+0xa10>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d040      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a76      	ldr	r2, [pc, #472]	; (8007614 <HAL_DMA_IRQHandler+0xa14>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d03b      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a74      	ldr	r2, [pc, #464]	; (8007618 <HAL_DMA_IRQHandler+0xa18>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d036      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a73      	ldr	r2, [pc, #460]	; (800761c <HAL_DMA_IRQHandler+0xa1c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d031      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a71      	ldr	r2, [pc, #452]	; (8007620 <HAL_DMA_IRQHandler+0xa20>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d02c      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a70      	ldr	r2, [pc, #448]	; (8007624 <HAL_DMA_IRQHandler+0xa24>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d027      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a6e      	ldr	r2, [pc, #440]	; (8007628 <HAL_DMA_IRQHandler+0xa28>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d022      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a6d      	ldr	r2, [pc, #436]	; (800762c <HAL_DMA_IRQHandler+0xa2c>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d01d      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a6b      	ldr	r2, [pc, #428]	; (8007630 <HAL_DMA_IRQHandler+0xa30>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d018      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a6a      	ldr	r2, [pc, #424]	; (8007634 <HAL_DMA_IRQHandler+0xa34>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a68      	ldr	r2, [pc, #416]	; (8007638 <HAL_DMA_IRQHandler+0xa38>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00e      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a67      	ldr	r2, [pc, #412]	; (800763c <HAL_DMA_IRQHandler+0xa3c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d009      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a65      	ldr	r2, [pc, #404]	; (8007640 <HAL_DMA_IRQHandler+0xa40>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d004      	beq.n	80074b8 <HAL_DMA_IRQHandler+0x8b8>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a64      	ldr	r2, [pc, #400]	; (8007644 <HAL_DMA_IRQHandler+0xa44>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d108      	bne.n	80074ca <HAL_DMA_IRQHandler+0x8ca>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0201 	bic.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e007      	b.n	80074da <HAL_DMA_IRQHandler+0x8da>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3301      	adds	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d307      	bcc.n	80074f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f2      	bne.n	80074da <HAL_DMA_IRQHandler+0x8da>
 80074f4:	e000      	b.n	80074f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80074f6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2203      	movs	r2, #3
 8007512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007516:	e003      	b.n	8007520 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8272 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
 8007532:	e26c      	b.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a43      	ldr	r2, [pc, #268]	; (8007648 <HAL_DMA_IRQHandler+0xa48>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d022      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a42      	ldr	r2, [pc, #264]	; (800764c <HAL_DMA_IRQHandler+0xa4c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d01d      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a40      	ldr	r2, [pc, #256]	; (8007650 <HAL_DMA_IRQHandler+0xa50>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d018      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a3f      	ldr	r2, [pc, #252]	; (8007654 <HAL_DMA_IRQHandler+0xa54>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a3d      	ldr	r2, [pc, #244]	; (8007658 <HAL_DMA_IRQHandler+0xa58>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00e      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a3c      	ldr	r2, [pc, #240]	; (800765c <HAL_DMA_IRQHandler+0xa5c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a3a      	ldr	r2, [pc, #232]	; (8007660 <HAL_DMA_IRQHandler+0xa60>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_DMA_IRQHandler+0x984>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a39      	ldr	r2, [pc, #228]	; (8007664 <HAL_DMA_IRQHandler+0xa64>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d101      	bne.n	8007588 <HAL_DMA_IRQHandler+0x988>
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <HAL_DMA_IRQHandler+0x98a>
 8007588:	2300      	movs	r3, #0
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 823f 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	2204      	movs	r2, #4
 80075a2:	409a      	lsls	r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80cd 	beq.w	8007748 <HAL_DMA_IRQHandler+0xb48>
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80c7 	beq.w	8007748 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2204      	movs	r2, #4
 80075c4:	409a      	lsls	r2, r3
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d049      	beq.n	8007668 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 8210 	beq.w	8007a08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f0:	e20a      	b.n	8007a08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8206 	beq.w	8007a08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007604:	e200      	b.n	8007a08 <HAL_DMA_IRQHandler+0xe08>
 8007606:	bf00      	nop
 8007608:	40020010 	.word	0x40020010
 800760c:	40020028 	.word	0x40020028
 8007610:	40020040 	.word	0x40020040
 8007614:	40020058 	.word	0x40020058
 8007618:	40020070 	.word	0x40020070
 800761c:	40020088 	.word	0x40020088
 8007620:	400200a0 	.word	0x400200a0
 8007624:	400200b8 	.word	0x400200b8
 8007628:	40020410 	.word	0x40020410
 800762c:	40020428 	.word	0x40020428
 8007630:	40020440 	.word	0x40020440
 8007634:	40020458 	.word	0x40020458
 8007638:	40020470 	.word	0x40020470
 800763c:	40020488 	.word	0x40020488
 8007640:	400204a0 	.word	0x400204a0
 8007644:	400204b8 	.word	0x400204b8
 8007648:	58025408 	.word	0x58025408
 800764c:	5802541c 	.word	0x5802541c
 8007650:	58025430 	.word	0x58025430
 8007654:	58025444 	.word	0x58025444
 8007658:	58025458 	.word	0x58025458
 800765c:	5802546c 	.word	0x5802546c
 8007660:	58025480 	.word	0x58025480
 8007664:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d160      	bne.n	8007734 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a8c      	ldr	r2, [pc, #560]	; (80078a8 <HAL_DMA_IRQHandler+0xca8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d04a      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a8a      	ldr	r2, [pc, #552]	; (80078ac <HAL_DMA_IRQHandler+0xcac>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d045      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a89      	ldr	r2, [pc, #548]	; (80078b0 <HAL_DMA_IRQHandler+0xcb0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d040      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a87      	ldr	r2, [pc, #540]	; (80078b4 <HAL_DMA_IRQHandler+0xcb4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d03b      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a86      	ldr	r2, [pc, #536]	; (80078b8 <HAL_DMA_IRQHandler+0xcb8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d036      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a84      	ldr	r2, [pc, #528]	; (80078bc <HAL_DMA_IRQHandler+0xcbc>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d031      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a83      	ldr	r2, [pc, #524]	; (80078c0 <HAL_DMA_IRQHandler+0xcc0>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d02c      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a81      	ldr	r2, [pc, #516]	; (80078c4 <HAL_DMA_IRQHandler+0xcc4>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d027      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a80      	ldr	r2, [pc, #512]	; (80078c8 <HAL_DMA_IRQHandler+0xcc8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d022      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a7e      	ldr	r2, [pc, #504]	; (80078cc <HAL_DMA_IRQHandler+0xccc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01d      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a7d      	ldr	r2, [pc, #500]	; (80078d0 <HAL_DMA_IRQHandler+0xcd0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d018      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a7b      	ldr	r2, [pc, #492]	; (80078d4 <HAL_DMA_IRQHandler+0xcd4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a7a      	ldr	r2, [pc, #488]	; (80078d8 <HAL_DMA_IRQHandler+0xcd8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a78      	ldr	r2, [pc, #480]	; (80078dc <HAL_DMA_IRQHandler+0xcdc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d009      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a77      	ldr	r2, [pc, #476]	; (80078e0 <HAL_DMA_IRQHandler+0xce0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d004      	beq.n	8007712 <HAL_DMA_IRQHandler+0xb12>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a75      	ldr	r2, [pc, #468]	; (80078e4 <HAL_DMA_IRQHandler+0xce4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d108      	bne.n	8007724 <HAL_DMA_IRQHandler+0xb24>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0208 	bic.w	r2, r2, #8
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e007      	b.n	8007734 <HAL_DMA_IRQHandler+0xb34>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0204 	bic.w	r2, r2, #4
 8007732:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8165 	beq.w	8007a08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007746:	e15f      	b.n	8007a08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774c:	f003 031f 	and.w	r3, r3, #31
 8007750:	2202      	movs	r2, #2
 8007752:	409a      	lsls	r2, r3
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	4013      	ands	r3, r2
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80c5 	beq.w	80078e8 <HAL_DMA_IRQHandler+0xce8>
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80bf 	beq.w	80078e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2202      	movs	r2, #2
 8007774:	409a      	lsls	r2, r3
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d018      	beq.n	80077b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 813a 	beq.w	8007a0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077a0:	e134      	b.n	8007a0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8130 	beq.w	8007a0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077b4:	e12a      	b.n	8007a0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d168      	bne.n	8007892 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a38      	ldr	r2, [pc, #224]	; (80078a8 <HAL_DMA_IRQHandler+0xca8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d04a      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a37      	ldr	r2, [pc, #220]	; (80078ac <HAL_DMA_IRQHandler+0xcac>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d045      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a35      	ldr	r2, [pc, #212]	; (80078b0 <HAL_DMA_IRQHandler+0xcb0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d040      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a34      	ldr	r2, [pc, #208]	; (80078b4 <HAL_DMA_IRQHandler+0xcb4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d03b      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a32      	ldr	r2, [pc, #200]	; (80078b8 <HAL_DMA_IRQHandler+0xcb8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d036      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a31      	ldr	r2, [pc, #196]	; (80078bc <HAL_DMA_IRQHandler+0xcbc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d031      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a2f      	ldr	r2, [pc, #188]	; (80078c0 <HAL_DMA_IRQHandler+0xcc0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d02c      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a2e      	ldr	r2, [pc, #184]	; (80078c4 <HAL_DMA_IRQHandler+0xcc4>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d027      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a2c      	ldr	r2, [pc, #176]	; (80078c8 <HAL_DMA_IRQHandler+0xcc8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d022      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a2b      	ldr	r2, [pc, #172]	; (80078cc <HAL_DMA_IRQHandler+0xccc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d01d      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a29      	ldr	r2, [pc, #164]	; (80078d0 <HAL_DMA_IRQHandler+0xcd0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d018      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a28      	ldr	r2, [pc, #160]	; (80078d4 <HAL_DMA_IRQHandler+0xcd4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d013      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a26      	ldr	r2, [pc, #152]	; (80078d8 <HAL_DMA_IRQHandler+0xcd8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00e      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a25      	ldr	r2, [pc, #148]	; (80078dc <HAL_DMA_IRQHandler+0xcdc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d009      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <HAL_DMA_IRQHandler+0xce0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d004      	beq.n	8007860 <HAL_DMA_IRQHandler+0xc60>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a22      	ldr	r2, [pc, #136]	; (80078e4 <HAL_DMA_IRQHandler+0xce4>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d108      	bne.n	8007872 <HAL_DMA_IRQHandler+0xc72>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0214 	bic.w	r2, r2, #20
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e007      	b.n	8007882 <HAL_DMA_IRQHandler+0xc82>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 020a 	bic.w	r2, r2, #10
 8007880:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80b8 	beq.w	8007a0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078a4:	e0b2      	b.n	8007a0c <HAL_DMA_IRQHandler+0xe0c>
 80078a6:	bf00      	nop
 80078a8:	40020010 	.word	0x40020010
 80078ac:	40020028 	.word	0x40020028
 80078b0:	40020040 	.word	0x40020040
 80078b4:	40020058 	.word	0x40020058
 80078b8:	40020070 	.word	0x40020070
 80078bc:	40020088 	.word	0x40020088
 80078c0:	400200a0 	.word	0x400200a0
 80078c4:	400200b8 	.word	0x400200b8
 80078c8:	40020410 	.word	0x40020410
 80078cc:	40020428 	.word	0x40020428
 80078d0:	40020440 	.word	0x40020440
 80078d4:	40020458 	.word	0x40020458
 80078d8:	40020470 	.word	0x40020470
 80078dc:	40020488 	.word	0x40020488
 80078e0:	400204a0 	.word	0x400204a0
 80078e4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	2208      	movs	r2, #8
 80078f2:	409a      	lsls	r2, r3
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8088 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8082 	beq.w	8007a0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a41      	ldr	r2, [pc, #260]	; (8007a14 <HAL_DMA_IRQHandler+0xe14>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d04a      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a3f      	ldr	r2, [pc, #252]	; (8007a18 <HAL_DMA_IRQHandler+0xe18>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d045      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a3e      	ldr	r2, [pc, #248]	; (8007a1c <HAL_DMA_IRQHandler+0xe1c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d040      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a3c      	ldr	r2, [pc, #240]	; (8007a20 <HAL_DMA_IRQHandler+0xe20>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d03b      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a3b      	ldr	r2, [pc, #236]	; (8007a24 <HAL_DMA_IRQHandler+0xe24>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d036      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a39      	ldr	r2, [pc, #228]	; (8007a28 <HAL_DMA_IRQHandler+0xe28>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d031      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a38      	ldr	r2, [pc, #224]	; (8007a2c <HAL_DMA_IRQHandler+0xe2c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d02c      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a36      	ldr	r2, [pc, #216]	; (8007a30 <HAL_DMA_IRQHandler+0xe30>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d027      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a35      	ldr	r2, [pc, #212]	; (8007a34 <HAL_DMA_IRQHandler+0xe34>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d022      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a33      	ldr	r2, [pc, #204]	; (8007a38 <HAL_DMA_IRQHandler+0xe38>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01d      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a32      	ldr	r2, [pc, #200]	; (8007a3c <HAL_DMA_IRQHandler+0xe3c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d018      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a30      	ldr	r2, [pc, #192]	; (8007a40 <HAL_DMA_IRQHandler+0xe40>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d013      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a2f      	ldr	r2, [pc, #188]	; (8007a44 <HAL_DMA_IRQHandler+0xe44>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00e      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a2d      	ldr	r2, [pc, #180]	; (8007a48 <HAL_DMA_IRQHandler+0xe48>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a2c      	ldr	r2, [pc, #176]	; (8007a4c <HAL_DMA_IRQHandler+0xe4c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d004      	beq.n	80079aa <HAL_DMA_IRQHandler+0xdaa>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a2a      	ldr	r2, [pc, #168]	; (8007a50 <HAL_DMA_IRQHandler+0xe50>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d108      	bne.n	80079bc <HAL_DMA_IRQHandler+0xdbc>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 021c 	bic.w	r2, r2, #28
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	e007      	b.n	80079cc <HAL_DMA_IRQHandler+0xdcc>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 020e 	bic.w	r2, r2, #14
 80079ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	2201      	movs	r2, #1
 80079d6:	409a      	lsls	r2, r3
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	e004      	b.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a0e:	3728      	adds	r7, #40	; 0x28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	40020010 	.word	0x40020010
 8007a18:	40020028 	.word	0x40020028
 8007a1c:	40020040 	.word	0x40020040
 8007a20:	40020058 	.word	0x40020058
 8007a24:	40020070 	.word	0x40020070
 8007a28:	40020088 	.word	0x40020088
 8007a2c:	400200a0 	.word	0x400200a0
 8007a30:	400200b8 	.word	0x400200b8
 8007a34:	40020410 	.word	0x40020410
 8007a38:	40020428 	.word	0x40020428
 8007a3c:	40020440 	.word	0x40020440
 8007a40:	40020458 	.word	0x40020458
 8007a44:	40020470 	.word	0x40020470
 8007a48:	40020488 	.word	0x40020488
 8007a4c:	400204a0 	.word	0x400204a0
 8007a50:	400204b8 	.word	0x400204b8

08007a54 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a84      	ldr	r2, [pc, #528]	; (8007c9c <DMA_SetConfig+0x230>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d072      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a82      	ldr	r2, [pc, #520]	; (8007ca0 <DMA_SetConfig+0x234>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d06d      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a81      	ldr	r2, [pc, #516]	; (8007ca4 <DMA_SetConfig+0x238>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d068      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a7f      	ldr	r2, [pc, #508]	; (8007ca8 <DMA_SetConfig+0x23c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d063      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a7e      	ldr	r2, [pc, #504]	; (8007cac <DMA_SetConfig+0x240>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d05e      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a7c      	ldr	r2, [pc, #496]	; (8007cb0 <DMA_SetConfig+0x244>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d059      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a7b      	ldr	r2, [pc, #492]	; (8007cb4 <DMA_SetConfig+0x248>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d054      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a79      	ldr	r2, [pc, #484]	; (8007cb8 <DMA_SetConfig+0x24c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d04f      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a78      	ldr	r2, [pc, #480]	; (8007cbc <DMA_SetConfig+0x250>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d04a      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a76      	ldr	r2, [pc, #472]	; (8007cc0 <DMA_SetConfig+0x254>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d045      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a75      	ldr	r2, [pc, #468]	; (8007cc4 <DMA_SetConfig+0x258>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d040      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a73      	ldr	r2, [pc, #460]	; (8007cc8 <DMA_SetConfig+0x25c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d03b      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a72      	ldr	r2, [pc, #456]	; (8007ccc <DMA_SetConfig+0x260>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d036      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a70      	ldr	r2, [pc, #448]	; (8007cd0 <DMA_SetConfig+0x264>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d031      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a6f      	ldr	r2, [pc, #444]	; (8007cd4 <DMA_SetConfig+0x268>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d02c      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a6d      	ldr	r2, [pc, #436]	; (8007cd8 <DMA_SetConfig+0x26c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d027      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a6c      	ldr	r2, [pc, #432]	; (8007cdc <DMA_SetConfig+0x270>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d022      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a6a      	ldr	r2, [pc, #424]	; (8007ce0 <DMA_SetConfig+0x274>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d01d      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a69      	ldr	r2, [pc, #420]	; (8007ce4 <DMA_SetConfig+0x278>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d018      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a67      	ldr	r2, [pc, #412]	; (8007ce8 <DMA_SetConfig+0x27c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d013      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a66      	ldr	r2, [pc, #408]	; (8007cec <DMA_SetConfig+0x280>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00e      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a64      	ldr	r2, [pc, #400]	; (8007cf0 <DMA_SetConfig+0x284>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d009      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a63      	ldr	r2, [pc, #396]	; (8007cf4 <DMA_SetConfig+0x288>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d004      	beq.n	8007b76 <DMA_SetConfig+0x10a>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a61      	ldr	r2, [pc, #388]	; (8007cf8 <DMA_SetConfig+0x28c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d101      	bne.n	8007b7a <DMA_SetConfig+0x10e>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <DMA_SetConfig+0x110>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00d      	beq.n	8007b9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a3e      	ldr	r2, [pc, #248]	; (8007c9c <DMA_SetConfig+0x230>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d04a      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a3d      	ldr	r2, [pc, #244]	; (8007ca0 <DMA_SetConfig+0x234>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d045      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a3b      	ldr	r2, [pc, #236]	; (8007ca4 <DMA_SetConfig+0x238>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d040      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a3a      	ldr	r2, [pc, #232]	; (8007ca8 <DMA_SetConfig+0x23c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d03b      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a38      	ldr	r2, [pc, #224]	; (8007cac <DMA_SetConfig+0x240>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d036      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a37      	ldr	r2, [pc, #220]	; (8007cb0 <DMA_SetConfig+0x244>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d031      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a35      	ldr	r2, [pc, #212]	; (8007cb4 <DMA_SetConfig+0x248>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d02c      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a34      	ldr	r2, [pc, #208]	; (8007cb8 <DMA_SetConfig+0x24c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d027      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a32      	ldr	r2, [pc, #200]	; (8007cbc <DMA_SetConfig+0x250>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d022      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a31      	ldr	r2, [pc, #196]	; (8007cc0 <DMA_SetConfig+0x254>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d01d      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a2f      	ldr	r2, [pc, #188]	; (8007cc4 <DMA_SetConfig+0x258>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d018      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a2e      	ldr	r2, [pc, #184]	; (8007cc8 <DMA_SetConfig+0x25c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a2c      	ldr	r2, [pc, #176]	; (8007ccc <DMA_SetConfig+0x260>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00e      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a2b      	ldr	r2, [pc, #172]	; (8007cd0 <DMA_SetConfig+0x264>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d009      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a29      	ldr	r2, [pc, #164]	; (8007cd4 <DMA_SetConfig+0x268>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <DMA_SetConfig+0x1d0>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a28      	ldr	r2, [pc, #160]	; (8007cd8 <DMA_SetConfig+0x26c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d101      	bne.n	8007c40 <DMA_SetConfig+0x1d4>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <DMA_SetConfig+0x1d6>
 8007c40:	2300      	movs	r3, #0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d05a      	beq.n	8007cfc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	223f      	movs	r2, #63	; 0x3f
 8007c50:	409a      	lsls	r2, r3
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d108      	bne.n	8007c88 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c86:	e087      	b.n	8007d98 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	60da      	str	r2, [r3, #12]
}
 8007c98:	e07e      	b.n	8007d98 <DMA_SetConfig+0x32c>
 8007c9a:	bf00      	nop
 8007c9c:	40020010 	.word	0x40020010
 8007ca0:	40020028 	.word	0x40020028
 8007ca4:	40020040 	.word	0x40020040
 8007ca8:	40020058 	.word	0x40020058
 8007cac:	40020070 	.word	0x40020070
 8007cb0:	40020088 	.word	0x40020088
 8007cb4:	400200a0 	.word	0x400200a0
 8007cb8:	400200b8 	.word	0x400200b8
 8007cbc:	40020410 	.word	0x40020410
 8007cc0:	40020428 	.word	0x40020428
 8007cc4:	40020440 	.word	0x40020440
 8007cc8:	40020458 	.word	0x40020458
 8007ccc:	40020470 	.word	0x40020470
 8007cd0:	40020488 	.word	0x40020488
 8007cd4:	400204a0 	.word	0x400204a0
 8007cd8:	400204b8 	.word	0x400204b8
 8007cdc:	58025408 	.word	0x58025408
 8007ce0:	5802541c 	.word	0x5802541c
 8007ce4:	58025430 	.word	0x58025430
 8007ce8:	58025444 	.word	0x58025444
 8007cec:	58025458 	.word	0x58025458
 8007cf0:	5802546c 	.word	0x5802546c
 8007cf4:	58025480 	.word	0x58025480
 8007cf8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a28      	ldr	r2, [pc, #160]	; (8007da4 <DMA_SetConfig+0x338>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d022      	beq.n	8007d4c <DMA_SetConfig+0x2e0>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <DMA_SetConfig+0x33c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d01d      	beq.n	8007d4c <DMA_SetConfig+0x2e0>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a25      	ldr	r2, [pc, #148]	; (8007dac <DMA_SetConfig+0x340>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d018      	beq.n	8007d4c <DMA_SetConfig+0x2e0>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <DMA_SetConfig+0x344>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d013      	beq.n	8007d4c <DMA_SetConfig+0x2e0>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a22      	ldr	r2, [pc, #136]	; (8007db4 <DMA_SetConfig+0x348>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00e      	beq.n	8007d4c <DMA_SetConfig+0x2e0>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a21      	ldr	r2, [pc, #132]	; (8007db8 <DMA_SetConfig+0x34c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d009      	beq.n	8007d4c <DMA_SetConfig+0x2e0>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a1f      	ldr	r2, [pc, #124]	; (8007dbc <DMA_SetConfig+0x350>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d004      	beq.n	8007d4c <DMA_SetConfig+0x2e0>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <DMA_SetConfig+0x354>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d101      	bne.n	8007d50 <DMA_SetConfig+0x2e4>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e000      	b.n	8007d52 <DMA_SetConfig+0x2e6>
 8007d50:	2300      	movs	r3, #0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d020      	beq.n	8007d98 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5a:	f003 031f 	and.w	r3, r3, #31
 8007d5e:	2201      	movs	r2, #1
 8007d60:	409a      	lsls	r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	2b40      	cmp	r3, #64	; 0x40
 8007d74:	d108      	bne.n	8007d88 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	60da      	str	r2, [r3, #12]
}
 8007d86:	e007      	b.n	8007d98 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	60da      	str	r2, [r3, #12]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	58025408 	.word	0x58025408
 8007da8:	5802541c 	.word	0x5802541c
 8007dac:	58025430 	.word	0x58025430
 8007db0:	58025444 	.word	0x58025444
 8007db4:	58025458 	.word	0x58025458
 8007db8:	5802546c 	.word	0x5802546c
 8007dbc:	58025480 	.word	0x58025480
 8007dc0:	58025494 	.word	0x58025494

08007dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a42      	ldr	r2, [pc, #264]	; (8007edc <DMA_CalcBaseAndBitshift+0x118>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d04a      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a41      	ldr	r2, [pc, #260]	; (8007ee0 <DMA_CalcBaseAndBitshift+0x11c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d045      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a3f      	ldr	r2, [pc, #252]	; (8007ee4 <DMA_CalcBaseAndBitshift+0x120>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d040      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a3e      	ldr	r2, [pc, #248]	; (8007ee8 <DMA_CalcBaseAndBitshift+0x124>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d03b      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a3c      	ldr	r2, [pc, #240]	; (8007eec <DMA_CalcBaseAndBitshift+0x128>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d036      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a3b      	ldr	r2, [pc, #236]	; (8007ef0 <DMA_CalcBaseAndBitshift+0x12c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d031      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a39      	ldr	r2, [pc, #228]	; (8007ef4 <DMA_CalcBaseAndBitshift+0x130>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d02c      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a38      	ldr	r2, [pc, #224]	; (8007ef8 <DMA_CalcBaseAndBitshift+0x134>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d027      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a36      	ldr	r2, [pc, #216]	; (8007efc <DMA_CalcBaseAndBitshift+0x138>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d022      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a35      	ldr	r2, [pc, #212]	; (8007f00 <DMA_CalcBaseAndBitshift+0x13c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d01d      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a33      	ldr	r2, [pc, #204]	; (8007f04 <DMA_CalcBaseAndBitshift+0x140>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a32      	ldr	r2, [pc, #200]	; (8007f08 <DMA_CalcBaseAndBitshift+0x144>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a30      	ldr	r2, [pc, #192]	; (8007f0c <DMA_CalcBaseAndBitshift+0x148>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00e      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a2f      	ldr	r2, [pc, #188]	; (8007f10 <DMA_CalcBaseAndBitshift+0x14c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a2d      	ldr	r2, [pc, #180]	; (8007f14 <DMA_CalcBaseAndBitshift+0x150>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <DMA_CalcBaseAndBitshift+0xa8>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a2c      	ldr	r2, [pc, #176]	; (8007f18 <DMA_CalcBaseAndBitshift+0x154>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d101      	bne.n	8007e70 <DMA_CalcBaseAndBitshift+0xac>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <DMA_CalcBaseAndBitshift+0xae>
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d024      	beq.n	8007ec0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	3b10      	subs	r3, #16
 8007e7e:	4a27      	ldr	r2, [pc, #156]	; (8007f1c <DMA_CalcBaseAndBitshift+0x158>)
 8007e80:	fba2 2303 	umull	r2, r3, r2, r3
 8007e84:	091b      	lsrs	r3, r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	4a24      	ldr	r2, [pc, #144]	; (8007f20 <DMA_CalcBaseAndBitshift+0x15c>)
 8007e90:	5cd3      	ldrb	r3, [r2, r3]
 8007e92:	461a      	mov	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d908      	bls.n	8007eb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <DMA_CalcBaseAndBitshift+0x160>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	1d1a      	adds	r2, r3, #4
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	659a      	str	r2, [r3, #88]	; 0x58
 8007eae:	e00d      	b.n	8007ecc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4b1b      	ldr	r3, [pc, #108]	; (8007f24 <DMA_CalcBaseAndBitshift+0x160>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8007ebe:	e005      	b.n	8007ecc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	40020010 	.word	0x40020010
 8007ee0:	40020028 	.word	0x40020028
 8007ee4:	40020040 	.word	0x40020040
 8007ee8:	40020058 	.word	0x40020058
 8007eec:	40020070 	.word	0x40020070
 8007ef0:	40020088 	.word	0x40020088
 8007ef4:	400200a0 	.word	0x400200a0
 8007ef8:	400200b8 	.word	0x400200b8
 8007efc:	40020410 	.word	0x40020410
 8007f00:	40020428 	.word	0x40020428
 8007f04:	40020440 	.word	0x40020440
 8007f08:	40020458 	.word	0x40020458
 8007f0c:	40020470 	.word	0x40020470
 8007f10:	40020488 	.word	0x40020488
 8007f14:	400204a0 	.word	0x400204a0
 8007f18:	400204b8 	.word	0x400204b8
 8007f1c:	aaaaaaab 	.word	0xaaaaaaab
 8007f20:	0802820c 	.word	0x0802820c
 8007f24:	fffffc00 	.word	0xfffffc00

08007f28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d120      	bne.n	8007f7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d858      	bhi.n	8007ff6 <DMA_CheckFifoParam+0xce>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <DMA_CheckFifoParam+0x24>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f6f 	.word	0x08007f6f
 8007f54:	08007f5d 	.word	0x08007f5d
 8007f58:	08007ff7 	.word	0x08007ff7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d048      	beq.n	8007ffa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f6c:	e045      	b.n	8007ffa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f76:	d142      	bne.n	8007ffe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f7c:	e03f      	b.n	8007ffe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f86:	d123      	bne.n	8007fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d838      	bhi.n	8008002 <DMA_CheckFifoParam+0xda>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <DMA_CheckFifoParam+0x70>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007faf 	.word	0x08007faf
 8007fa0:	08007fa9 	.word	0x08007fa9
 8007fa4:	08007fc1 	.word	0x08007fc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	73fb      	strb	r3, [r7, #15]
        break;
 8007fac:	e030      	b.n	8008010 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d025      	beq.n	8008006 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fbe:	e022      	b.n	8008006 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007fc8:	d11f      	bne.n	800800a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007fce:	e01c      	b.n	800800a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d902      	bls.n	8007fde <DMA_CheckFifoParam+0xb6>
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d003      	beq.n	8007fe4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007fdc:	e018      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8007fe2:	e015      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ff4:	e00b      	b.n	800800e <DMA_CheckFifoParam+0xe6>
        break;
 8007ff6:	bf00      	nop
 8007ff8:	e00a      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 8007ffa:	bf00      	nop
 8007ffc:	e008      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 8007ffe:	bf00      	nop
 8008000:	e006      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 8008002:	bf00      	nop
 8008004:	e004      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 8008006:	bf00      	nop
 8008008:	e002      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
        break;
 800800a:	bf00      	nop
 800800c:	e000      	b.n	8008010 <DMA_CheckFifoParam+0xe8>
    break;
 800800e:	bf00      	nop
    }
  }

  return status;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop

08008020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a38      	ldr	r2, [pc, #224]	; (8008114 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d022      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a36      	ldr	r2, [pc, #216]	; (8008118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d01d      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a35      	ldr	r2, [pc, #212]	; (800811c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d018      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a33      	ldr	r2, [pc, #204]	; (8008120 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d013      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a32      	ldr	r2, [pc, #200]	; (8008124 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00e      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a30      	ldr	r2, [pc, #192]	; (8008128 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d009      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a2f      	ldr	r2, [pc, #188]	; (800812c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a2d      	ldr	r2, [pc, #180]	; (8008130 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d101      	bne.n	8008082 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01a      	beq.n	80080be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	3b08      	subs	r3, #8
 8008090:	4a28      	ldr	r2, [pc, #160]	; (8008134 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	091b      	lsrs	r3, r3, #4
 8008098:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4b26      	ldr	r3, [pc, #152]	; (8008138 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a24      	ldr	r2, [pc, #144]	; (800813c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80080ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2201      	movs	r2, #1
 80080b6:	409a      	lsls	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80080bc:	e024      	b.n	8008108 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	3b10      	subs	r3, #16
 80080c6:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4a1c      	ldr	r2, [pc, #112]	; (8008144 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d806      	bhi.n	80080e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	4a1b      	ldr	r2, [pc, #108]	; (8008148 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d902      	bls.n	80080e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3308      	adds	r3, #8
 80080e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4b18      	ldr	r3, [pc, #96]	; (800814c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a16      	ldr	r2, [pc, #88]	; (8008150 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80080f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f003 031f 	and.w	r3, r3, #31
 8008100:	2201      	movs	r2, #1
 8008102:	409a      	lsls	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	58025408 	.word	0x58025408
 8008118:	5802541c 	.word	0x5802541c
 800811c:	58025430 	.word	0x58025430
 8008120:	58025444 	.word	0x58025444
 8008124:	58025458 	.word	0x58025458
 8008128:	5802546c 	.word	0x5802546c
 800812c:	58025480 	.word	0x58025480
 8008130:	58025494 	.word	0x58025494
 8008134:	cccccccd 	.word	0xcccccccd
 8008138:	16009600 	.word	0x16009600
 800813c:	58025880 	.word	0x58025880
 8008140:	aaaaaaab 	.word	0xaaaaaaab
 8008144:	400204b8 	.word	0x400204b8
 8008148:	4002040f 	.word	0x4002040f
 800814c:	10008200 	.word	0x10008200
 8008150:	40020880 	.word	0x40020880

08008154 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d04a      	beq.n	8008200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b08      	cmp	r3, #8
 800816e:	d847      	bhi.n	8008200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a25      	ldr	r2, [pc, #148]	; (800820c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d022      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a24      	ldr	r2, [pc, #144]	; (8008210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d01d      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a22      	ldr	r2, [pc, #136]	; (8008214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d018      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a21      	ldr	r2, [pc, #132]	; (8008218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1f      	ldr	r2, [pc, #124]	; (800821c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00e      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a1e      	ldr	r2, [pc, #120]	; (8008220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d009      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a1c      	ldr	r2, [pc, #112]	; (8008224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a1b      	ldr	r2, [pc, #108]	; (8008228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d101      	bne.n	80081c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80081c4:	2300      	movs	r3, #0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4b17      	ldr	r3, [pc, #92]	; (800822c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	461a      	mov	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80081dc:	671a      	str	r2, [r3, #112]	; 0x70
 80081de:	e009      	b.n	80081f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	461a      	mov	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a11      	ldr	r2, [pc, #68]	; (8008238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80081f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	2201      	movs	r2, #1
 80081fa:	409a      	lsls	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	58025408 	.word	0x58025408
 8008210:	5802541c 	.word	0x5802541c
 8008214:	58025430 	.word	0x58025430
 8008218:	58025444 	.word	0x58025444
 800821c:	58025458 	.word	0x58025458
 8008220:	5802546c 	.word	0x5802546c
 8008224:	58025480 	.word	0x58025480
 8008228:	58025494 	.word	0x58025494
 800822c:	1600963f 	.word	0x1600963f
 8008230:	58025940 	.word	0x58025940
 8008234:	1000823f 	.word	0x1000823f
 8008238:	40020940 	.word	0x40020940

0800823c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e0c6      	b.n	80083dc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f009 fd64 	bl	8011d24 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2223      	movs	r2, #35	; 0x23
 8008260:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008262:	4b60      	ldr	r3, [pc, #384]	; (80083e4 <HAL_ETH_Init+0x1a8>)
 8008264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008268:	4a5e      	ldr	r2, [pc, #376]	; (80083e4 <HAL_ETH_Init+0x1a8>)
 800826a:	f043 0302 	orr.w	r3, r3, #2
 800826e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008272:	4b5c      	ldr	r3, [pc, #368]	; (80083e4 <HAL_ETH_Init+0x1a8>)
 8008274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	60bb      	str	r3, [r7, #8]
 800827e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	7a1b      	ldrb	r3, [r3, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8008288:	2000      	movs	r0, #0
 800828a:	f7fc f83b 	bl	8004304 <HAL_SYSCFG_ETHInterfaceSelect>
 800828e:	e003      	b.n	8008298 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8008290:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008294:	f7fc f836 	bl	8004304 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0201 	orr.w	r2, r2, #1
 80082aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082b0:	f7fb ffec 	bl	800428c <HAL_GetTick>
 80082b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80082b6:	e00f      	b.n	80082d8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80082b8:	f7fb ffe8 	bl	800428c <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80082c6:	d907      	bls.n	80082d8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2204      	movs	r2, #4
 80082cc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	22e0      	movs	r2, #224	; 0xe0
 80082d2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e081      	b.n	80083dc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e6      	bne.n	80082b8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 faa4 	bl	8009838 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80082f0:	f002 ffec 	bl	800b2cc <HAL_RCC_GetHCLKFreq>
 80082f4:	4603      	mov	r3, r0
 80082f6:	4a3c      	ldr	r2, [pc, #240]	; (80083e8 <HAL_ETH_Init+0x1ac>)
 80082f8:	fba2 2303 	umull	r2, r3, r2, r3
 80082fc:	0c9a      	lsrs	r2, r3, #18
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3a01      	subs	r2, #1
 8008304:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 f9f7 	bl	80096fc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008324:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008328:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	22e0      	movs	r2, #224	; 0xe0
 8008340:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e04a      	b.n	80083dc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	f241 1308 	movw	r3, #4360	; 0x1108
 800834e:	4413      	add	r3, r2
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	4b26      	ldr	r3, [pc, #152]	; (80083ec <HAL_ETH_Init+0x1b0>)
 8008354:	4013      	ands	r3, r2
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6952      	ldr	r2, [r2, #20]
 800835a:	0052      	lsls	r2, r2, #1
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	6809      	ldr	r1, [r1, #0]
 8008360:	431a      	orrs	r2, r3
 8008362:	f241 1308 	movw	r3, #4360	; 0x1108
 8008366:	440b      	add	r3, r1
 8008368:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 fabc 	bl	80098e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 fb00 	bl	8009976 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	3305      	adds	r3, #5
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	021a      	lsls	r2, r3, #8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	3304      	adds	r3, #4
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	4619      	mov	r1, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	3303      	adds	r3, #3
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	061a      	lsls	r2, r3, #24
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	3302      	adds	r3, #2
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	3301      	adds	r3, #1
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80083b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80083c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80083c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2210      	movs	r2, #16
 80083d2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2210      	movs	r2, #16
 80083d8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	58024400 	.word	0x58024400
 80083e8:	431bde83 	.word	0x431bde83
 80083ec:	ffff8001 	.word	0xffff8001

080083f0 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	3310      	adds	r3, #16
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <HAL_ETH_DescAssignMemory+0x28>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b03      	cmp	r3, #3
 8008416:	d904      	bls.n	8008422 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e021      	b.n	8008466 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800847e:	2b10      	cmp	r3, #16
 8008480:	d14c      	bne.n	800851c <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2223      	movs	r2, #35	; 0x23
 8008486:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0202 	orr.w	r2, r2, #2
 8008496:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0201 	orr.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0201 	orr.w	r2, r2, #1
 80084b8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	f241 1304 	movw	r3, #4356	; 0x1104
 80084c4:	4413      	add	r3, r2
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6811      	ldr	r1, [r2, #0]
 80084cc:	f043 0201 	orr.w	r2, r3, #1
 80084d0:	f241 1304 	movw	r3, #4356	; 0x1104
 80084d4:	440b      	add	r3, r1
 80084d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	f241 1308 	movw	r3, #4360	; 0x1108
 80084e0:	4413      	add	r3, r2
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	6811      	ldr	r1, [r2, #0]
 80084e8:	f043 0201 	orr.w	r2, r3, #1
 80084ec:	f241 1308 	movw	r3, #4360	; 0x1108
 80084f0:	440b      	add	r3, r1
 80084f2:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8008506:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800850a:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2210      	movs	r2, #16
 8008510:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2222      	movs	r2, #34	; 0x22
 8008516:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	e000      	b.n	800851e <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
  }
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d040      	beq.n	80085bc <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2223      	movs	r2, #35	; 0x23
 800853e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	f241 1304 	movw	r3, #4356	; 0x1104
 8008548:	4413      	add	r3, r2
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	6811      	ldr	r1, [r2, #0]
 8008550:	f023 0201 	bic.w	r2, r3, #1
 8008554:	f241 1304 	movw	r3, #4356	; 0x1104
 8008558:	440b      	add	r3, r1
 800855a:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	f241 1308 	movw	r3, #4360	; 0x1108
 8008564:	4413      	add	r3, r2
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6811      	ldr	r1, [r2, #0]
 800856c:	f023 0201 	bic.w	r2, r3, #1
 8008570:	f241 1308 	movw	r3, #4360	; 0x1108
 8008574:	440b      	add	r3, r1
 8008576:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f022 0201 	bic.w	r2, r2, #1
 8008586:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f042 0201 	orr.w	r2, r2, #1
 8008598:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0202 	bic.w	r2, r2, #2
 80085aa:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2210      	movs	r2, #16
 80085b0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2210      	movs	r2, #16
 80085b6:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	e000      	b.n	80085be <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b086      	sub	sp, #24
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d107      	bne.n	80085ec <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085e0:	f043 0201 	orr.w	r2, r3, #1
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e073      	b.n	80086d4 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f0:	2b10      	cmp	r3, #16
 80085f2:	d16e      	bne.n	80086d2 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80085f4:	2200      	movs	r2, #0
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f001 fa19 	bl	8009a30 <ETH_Prepare_Tx_Descriptors>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d007      	beq.n	8008614 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008608:	f043 0202 	orr.w	r2, r3, #2
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e05f      	b.n	80086d4 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3206      	adds	r2, #6
 800861c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008620:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	629a      	str	r2, [r3, #40]	; 0x28
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	2b03      	cmp	r3, #3
 8008632:	d904      	bls.n	800863e <HAL_ETH_Transmit+0x74>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008638:	1f1a      	subs	r2, r3, #4
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	3106      	adds	r1, #6
 800864a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800864e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8008652:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8008654:	f7fb fe1a 	bl	800428c <HAL_GetTick>
 8008658:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800865a:	e034      	b.n	80086c6 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d011      	beq.n	8008692 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008672:	f043 0208 	orr.w	r2, r3, #8
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	22e0      	movs	r2, #224	; 0xe0
 800868c:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e020      	b.n	80086d4 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008698:	d015      	beq.n	80086c6 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800869a:	f7fb fdf7 	bl	800428c <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d302      	bcc.n	80086b0 <HAL_ETH_Transmit+0xe6>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10a      	bne.n	80086c6 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b4:	f043 0204 	orr.w	r2, r3, #4
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	22e0      	movs	r2, #224	; 0xe0
 80086c0:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e006      	b.n	80086d4 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dbc6      	blt.n	800865c <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	e000      	b.n	80086d4 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
  }
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80086dc:	b480      	push	{r7}
 80086de:	b089      	sub	sp, #36	; 0x24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3344      	adds	r3, #68	; 0x44
 80086e8:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f8:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	2300      	movs	r3, #0
 8008704:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d06b      	beq.n	80087e6 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800870e:	2300      	movs	r3, #0
 8008710:	e0ce      	b.n	80088b0 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	3301      	adds	r3, #1
 8008716:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d036      	beq.n	8008792 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	3301      	adds	r3, #1
 8008728:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	3301      	adds	r3, #1
 8008738:	61fb      	str	r3, [r7, #28]
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d902      	bls.n	8008746 <HAL_ETH_IsRxDataAvailable+0x6a>
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	3b04      	subs	r3, #4
 8008744:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874e:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	db11      	blt.n	800877c <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2201      	movs	r2, #1
 8008768:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	3301      	adds	r3, #1
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	2b03      	cmp	r3, #3
 8008774:	d902      	bls.n	800877c <HAL_ETH_IsRxDataAvailable+0xa0>
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	3b04      	subs	r3, #4
 800877a:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800878e:	2301      	movs	r3, #1
 8008790:	e08e      	b.n	80088b0 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d012      	beq.n	80087c4 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80087a2:	2301      	movs	r3, #1
 80087a4:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	3301      	adds	r3, #1
 80087aa:	61fb      	str	r3, [r7, #28]
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d902      	bls.n	80087b8 <HAL_ETH_IsRxDataAvailable+0xdc>
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	3b04      	subs	r3, #4
 80087b6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	e010      	b.n	80087e6 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	3301      	adds	r3, #1
 80087c8:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	3301      	adds	r3, #1
 80087ce:	61fb      	str	r3, [r7, #28]
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d902      	bls.n	80087dc <HAL_ETH_IsRxDataAvailable+0x100>
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	3b04      	subs	r3, #4
 80087da:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e4:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	db02      	blt.n	80087f4 <HAL_ETH_IsRxDataAvailable+0x118>
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d98e      	bls.n	8008712 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d056      	beq.n	80088a8 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008812:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8008814:	2300      	movs	r3, #0
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	e03b      	b.n	8008892 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	691a      	ldr	r2, [r3, #16]
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008828:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	3b01      	subs	r3, #1
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	429a      	cmp	r2, r3
 800886e:	d20d      	bcs.n	800888c <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	3301      	adds	r3, #1
 8008874:	61fb      	str	r3, [r7, #28]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	2b03      	cmp	r3, #3
 800887a:	d902      	bls.n	8008882 <HAL_ETH_IsRxDataAvailable+0x1a6>
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	3b04      	subs	r3, #4
 8008880:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888a:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	3301      	adds	r3, #1
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	429a      	cmp	r2, r3
 8008898:	d3bf      	bcc.n	800881a <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6819      	ldr	r1, [r3, #0]
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	f241 1328 	movw	r3, #4392	; 0x1128
 80088a4:	440b      	add	r3, r1
 80088a6:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2200      	movs	r2, #0
 80088ac:	619a      	str	r2, [r3, #24]

  return 0;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3724      	adds	r7, #36	; 0x24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	; 0x28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3344      	adds	r3, #68	; 0x44
 80088ca:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	695b      	ldr	r3, [r3, #20]
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088de:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d104      	bne.n	80088f4 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e07d      	b.n	80089f0 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10f      	bne.n	800891c <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff feed 	bl	80086dc <HAL_ETH_IsRxDataAvailable>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e071      	b.n	80089f0 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891a:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800891c:	2300      	movs	r3, #0
 800891e:	623b      	str	r3, [r7, #32]
 8008920:	e031      	b.n	8008986 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	461a      	mov	r2, r3
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	695a      	ldr	r2, [r3, #20]
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	461a      	mov	r2, r3
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	695a      	ldr	r2, [r3, #20]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800895c:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	3301      	adds	r3, #1
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	2b03      	cmp	r3, #3
 8008968:	d902      	bls.n	8008970 <HAL_ETH_GetRxDataBuffer+0xb4>
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	3b04      	subs	r3, #4
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008978:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	3301      	adds	r3, #1
 8008984:	623b      	str	r3, [r7, #32]
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	3b01      	subs	r3, #1
 800898c:	6a3a      	ldr	r2, [r7, #32]
 800898e:	429a      	cmp	r2, r3
 8008990:	d3c7      	bcc.n	8008922 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	461a      	mov	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d803      	bhi.n	80089bc <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	605a      	str	r2, [r3, #4]
 80089ba:	e018      	b.n	80089ee <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d012      	beq.n	80089ea <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	695a      	ldr	r2, [r3, #20]
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	461a      	mov	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	605a      	str	r2, [r3, #4]
 80089e8:	e001      	b.n	80089ee <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3728      	adds	r7, #40	; 0x28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3344      	adds	r3, #68	; 0x44
 8008a06:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d107      	bne.n	8008a26 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff fe60 	bl	80086dc <HAL_ETH_IsRxDataAvailable>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e017      	b.n	8008a56 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	699a      	ldr	r2, [r3, #24]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d902      	bls.n	8008a3e <HAL_ETH_GetRxDataLength+0x46>
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	3b04      	subs	r3, #4
 8008a3c:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a46:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b089      	sub	sp, #36	; 0x24
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3344      	adds	r3, #68	; 0x44
 8008a6a:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7a:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e057      	b.n	8008b3e <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	e03b      	b.n	8008b1a <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	691a      	ldr	r2, [r3, #16]
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ab0:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	695a      	ldr	r2, [r3, #20]
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d005      	beq.n	8008aee <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d20d      	bcs.n	8008b14 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	3301      	adds	r3, #1
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d902      	bls.n	8008b0a <HAL_ETH_BuildRxDescriptors+0xac>
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	3b04      	subs	r3, #4
 8008b08:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	69fa      	ldr	r2, [r7, #28]
 8008b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b12:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	3301      	adds	r3, #1
 8008b18:	613b      	str	r3, [r7, #16]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d3bf      	bcc.n	8008aa2 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6819      	ldr	r1, [r3, #0]
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	f241 1328 	movw	r3, #4392	; 0x1128
 8008b2c:	440b      	add	r3, r1
 8008b2e:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3724      	adds	r7, #36	; 0x24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
	...

08008b4c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b62:	2b40      	cmp	r3, #64	; 0x40
 8008b64:	d113      	bne.n	8008b8e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	f241 1334 	movw	r3, #4404	; 0x1134
 8008b6e:	4413      	add	r3, r2
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b76:	2b40      	cmp	r3, #64	; 0x40
 8008b78:	d109      	bne.n	8008b8e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f8f2 	bl	8008d64 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008b88:	f248 0240 	movw	r2, #32832	; 0x8040
 8008b8c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d113      	bne.n	8008bc8 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	f241 1334 	movw	r3, #4404	; 0x1134
 8008ba8:	4413      	add	r3, r2
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d109      	bne.n	8008bc8 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f8cb 	bl	8008d50 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008bc2:	f248 0201 	movw	r2, #32769	; 0x8001
 8008bc6:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bda:	d149      	bne.n	8008c70 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	f241 1334 	movw	r3, #4404	; 0x1134
 8008be4:	4413      	add	r3, r2
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bf0:	d13e      	bne.n	8008c70 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bf6:	f043 0208 	orr.w	r2, r3, #8
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c10:	d11b      	bne.n	8008c4a <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	f241 1302 	movw	r3, #4354	; 0x1102
 8008c20:	4013      	ands	r3, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	f241 1334 	movw	r3, #4404	; 0x1134
 8008c2e:	4413      	add	r3, r2
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6811      	ldr	r1, [r2, #0]
 8008c36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008c3a:	f241 1334 	movw	r3, #4404	; 0x1134
 8008c3e:	440b      	add	r3, r1
 8008c40:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	22e0      	movs	r2, #224	; 0xe0
 8008c46:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c48:	e00f      	b.n	8008c6a <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8008c64:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8008c68:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f884 	bl	8008d78 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c78:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008c7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008c80:	d10e      	bne.n	8008ca0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	22e0      	movs	r2, #224	; 0xe0
 8008c92:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f879 	bl	8008d8c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	d10f      	bne.n	8008cd0 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008cb8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f86c 	bl	8008da0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	d10f      	bne.n	8008d00 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ce8:	f003 020f 	and.w	r2, r3, #15
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f85e 	bl	8008db4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8008d00:	f7fd f8ba 	bl	8005e78 <HAL_GetCurrentCPUID>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d10d      	bne.n	8008d26 <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <HAL_ETH_IRQHandler+0x1fc>)
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d014      	beq.n	8008d40 <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8008d16:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <HAL_ETH_IRQHandler+0x1fc>)
 8008d18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008d1c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f852 	bl	8008dc8 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8008d24:	e00c      	b.n	8008d40 <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8008d26:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <HAL_ETH_IRQHandler+0x200>)
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d006      	beq.n	8008d40 <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8008d32:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <HAL_ETH_IRQHandler+0x200>)
 8008d34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008d38:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f844 	bl	8008dc8 <HAL_ETH_WakeUpCallback>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	58000080 	.word	0x58000080
 8008d4c:	580000c0 	.word	0x580000c0

08008d50 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e03e      	b.n	8008e7c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e06:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	055b      	lsls	r3, r3, #21
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	041b      	lsls	r3, r3, #16
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f043 030c 	orr.w	r3, r3, #12
 8008e2a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f043 0301 	orr.w	r3, r3, #1
 8008e32:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8008e3e:	f7fb fa25 	bl	800428c <HAL_GetTick>
 8008e42:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008e44:	e009      	b.n	8008e5a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8008e46:	f7fb fa21 	bl	800428c <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e54:	d901      	bls.n	8008e5a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e010      	b.n	8008e7c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1ed      	bne.n	8008e46 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e03c      	b.n	8008f20 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008eae:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	055b      	lsls	r3, r3, #21
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	041b      	lsls	r3, r3, #16
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f023 030c 	bic.w	r3, r3, #12
 8008ed2:	f043 0304 	orr.w	r3, r3, #4
 8008ed6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	f043 0301 	orr.w	r3, r3, #1
 8008ede:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <HAL_ETH_WritePHYRegister+0xa4>)
 8008ee6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8008eea:	4a0f      	ldr	r2, [pc, #60]	; (8008f28 <HAL_ETH_WritePHYRegister+0xa4>)
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8008ef2:	f7fb f9cb 	bl	800428c <HAL_GetTick>
 8008ef6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008ef8:	e009      	b.n	8008f0e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8008efa:	f7fb f9c7 	bl	800428c <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f08:	d901      	bls.n	8008f0e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e008      	b.n	8008f20 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1ed      	bne.n	8008efa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3718      	adds	r7, #24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	40028000 	.word	0x40028000

08008f2c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e1c3      	b.n	80092c8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 020c 	and.w	r2, r3, #12
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0310 	and.w	r3, r3, #16
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bf14      	ite	ne
 8008f5c:	2301      	movne	r3, #1
 8008f5e:	2300      	moveq	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	461a      	mov	r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bf0c      	ite	eq
 8008f86:	2301      	moveq	r3, #1
 8008f88:	2300      	movne	r3, #0
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bf14      	ite	ne
 8008fa2:	2301      	movne	r3, #1
 8008fa4:	2300      	moveq	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bf0c      	ite	eq
 8008fbc:	2301      	moveq	r3, #1
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	bf14      	ite	ne
 8008fd6:	2301      	movne	r3, #1
 8008fd8:	2300      	moveq	r3, #0
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bf14      	ite	ne
 8008ff0:	2301      	movne	r3, #1
 8008ff2:	2300      	moveq	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009022:	2b00      	cmp	r3, #0
 8009024:	bf14      	ite	ne
 8009026:	2301      	movne	r3, #1
 8009028:	2300      	moveq	r3, #0
 800902a:	b2db      	uxtb	r3, r3
 800902c:	461a      	mov	r2, r3
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903c:	2b00      	cmp	r3, #0
 800903e:	bf0c      	ite	eq
 8009040:	2301      	moveq	r3, #1
 8009042:	2300      	movne	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	461a      	mov	r2, r3
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009056:	2b00      	cmp	r3, #0
 8009058:	bf0c      	ite	eq
 800905a:	2301      	moveq	r3, #1
 800905c:	2300      	movne	r3, #0
 800905e:	b2db      	uxtb	r3, r3
 8009060:	461a      	mov	r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009070:	2b00      	cmp	r3, #0
 8009072:	bf14      	ite	ne
 8009074:	2301      	movne	r3, #1
 8009076:	2300      	moveq	r3, #0
 8009078:	b2db      	uxtb	r3, r3
 800907a:	461a      	mov	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800908a:	2b00      	cmp	r3, #0
 800908c:	bf14      	ite	ne
 800908e:	2301      	movne	r3, #1
 8009090:	2300      	moveq	r3, #0
 8009092:	b2db      	uxtb	r3, r3
 8009094:	461a      	mov	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bf14      	ite	ne
 80090a8:	2301      	movne	r3, #1
 80090aa:	2300      	moveq	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	461a      	mov	r2, r3
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bf14      	ite	ne
 80090c2:	2301      	movne	r3, #1
 80090c4:	2300      	moveq	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	bf14      	ite	ne
 80090ea:	2301      	movne	r3, #1
 80090ec:	2300      	moveq	r3, #0
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	461a      	mov	r2, r3
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf0c      	ite	eq
 8009120:	2301      	moveq	r3, #1
 8009122:	2300      	movne	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009138:	2b00      	cmp	r3, #0
 800913a:	bf14      	ite	ne
 800913c:	2301      	movne	r3, #1
 800913e:	2300      	moveq	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	461a      	mov	r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009154:	2b00      	cmp	r3, #0
 8009156:	bf14      	ite	ne
 8009158:	2301      	movne	r3, #1
 800915a:	2300      	moveq	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	461a      	mov	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf14      	ite	ne
 8009174:	2301      	movne	r3, #1
 8009176:	2300      	moveq	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	461a      	mov	r2, r3
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	0e5b      	lsrs	r3, r3, #25
 800918a:	f003 021f 	and.w	r2, r3, #31
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800919c:	2b00      	cmp	r3, #0
 800919e:	bf14      	ite	ne
 80091a0:	2301      	movne	r3, #1
 80091a2:	2300      	moveq	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f003 020f 	and.w	r2, r3, #15
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	bf14      	ite	ne
 80091ca:	2301      	movne	r3, #1
 80091cc:	2300      	moveq	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bf0c      	ite	eq
 80091e6:	2301      	moveq	r3, #1
 80091e8:	2300      	movne	r3, #0
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009208:	0c1b      	lsrs	r3, r3, #16
 800920a:	b29a      	uxth	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	bf14      	ite	ne
 8009220:	2301      	movne	r3, #1
 8009222:	2300      	moveq	r3, #0
 8009224:	b2db      	uxtb	r3, r3
 8009226:	461a      	mov	r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b00      	cmp	r3, #0
 800923c:	bf14      	ite	ne
 800923e:	2301      	movne	r3, #1
 8009240:	2300      	moveq	r3, #0
 8009242:	b2db      	uxtb	r3, r3
 8009244:	461a      	mov	r2, r3
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009254:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009264:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b00      	cmp	r3, #0
 800927a:	bf14      	ite	ne
 800927c:	2301      	movne	r3, #1
 800927e:	2300      	moveq	r3, #0
 8009280:	b2db      	uxtb	r3, r3
 8009282:	461a      	mov	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009292:	f003 0310 	and.w	r3, r3, #16
 8009296:	2b00      	cmp	r3, #0
 8009298:	bf14      	ite	ne
 800929a:	2301      	movne	r3, #1
 800929c:	2300      	moveq	r3, #0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	461a      	mov	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80092b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bf0c      	ite	eq
 80092b8:	2301      	moveq	r3, #1
 80092ba:	2300      	movne	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e00a      	b.n	80092fe <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ec:	2b10      	cmp	r3, #16
 80092ee:	d105      	bne.n	80092fc <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f860 	bl	80093b8 <ETH_SetMACConfig>

    return HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	e000      	b.n	80092fe <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
  }
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009318:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009320:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009322:	f001 ffd3 	bl	800b2cc <HAL_RCC_GetHCLKFreq>
 8009326:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4a1e      	ldr	r2, [pc, #120]	; (80093a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d908      	bls.n	8009342 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4a1d      	ldr	r2, [pc, #116]	; (80093a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d804      	bhi.n	8009342 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	e027      	b.n	8009392 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	4a18      	ldr	r2, [pc, #96]	; (80093a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d908      	bls.n	800935c <HAL_ETH_SetMDIOClockRange+0x54>
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	4a17      	ldr	r2, [pc, #92]	; (80093ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d204      	bcs.n	800935c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	e01a      	b.n	8009392 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4a13      	ldr	r2, [pc, #76]	; (80093ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d303      	bcc.n	800936c <HAL_ETH_SetMDIOClockRange+0x64>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4a12      	ldr	r2, [pc, #72]	; (80093b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d911      	bls.n	8009390 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4a10      	ldr	r2, [pc, #64]	; (80093b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d908      	bls.n	8009386 <HAL_ETH_SetMDIOClockRange+0x7e>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4a0f      	ldr	r2, [pc, #60]	; (80093b4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d804      	bhi.n	8009386 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	e005      	b.n	8009392 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	e000      	b.n	8009392 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009390:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800939c:	bf00      	nop
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	01312cff 	.word	0x01312cff
 80093a8:	02160ebf 	.word	0x02160ebf
 80093ac:	03938700 	.word	0x03938700
 80093b0:	05f5e0ff 	.word	0x05f5e0ff
 80093b4:	08f0d17f 	.word	0x08f0d17f

080093b8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80093ca:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	791b      	ldrb	r3, [r3, #4]
 80093d0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80093d2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	7b1b      	ldrb	r3, [r3, #12]
 80093d8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80093da:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	7b5b      	ldrb	r3, [r3, #13]
 80093e0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80093e2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	7b9b      	ldrb	r3, [r3, #14]
 80093e8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80093ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	7bdb      	ldrb	r3, [r3, #15]
 80093f0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80093f2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80093f4:	683a      	ldr	r2, [r7, #0]
 80093f6:	7c12      	ldrb	r2, [r2, #16]
 80093f8:	2a00      	cmp	r2, #0
 80093fa:	d102      	bne.n	8009402 <ETH_SetMACConfig+0x4a>
 80093fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009400:	e000      	b.n	8009404 <ETH_SetMACConfig+0x4c>
 8009402:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009404:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	7c52      	ldrb	r2, [r2, #17]
 800940a:	2a00      	cmp	r2, #0
 800940c:	d102      	bne.n	8009414 <ETH_SetMACConfig+0x5c>
 800940e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009412:	e000      	b.n	8009416 <ETH_SetMACConfig+0x5e>
 8009414:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009416:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	7c9b      	ldrb	r3, [r3, #18]
 800941c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800941e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8009424:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800942a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	7f1b      	ldrb	r3, [r3, #28]
 8009430:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8009432:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	7f5b      	ldrb	r3, [r3, #29]
 8009438:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800943a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	7f92      	ldrb	r2, [r2, #30]
 8009440:	2a00      	cmp	r2, #0
 8009442:	d102      	bne.n	800944a <ETH_SetMACConfig+0x92>
 8009444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009448:	e000      	b.n	800944c <ETH_SetMACConfig+0x94>
 800944a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800944c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	7fdb      	ldrb	r3, [r3, #31]
 8009452:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8009454:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	f892 2020 	ldrb.w	r2, [r2, #32]
 800945c:	2a00      	cmp	r2, #0
 800945e:	d102      	bne.n	8009466 <ETH_SetMACConfig+0xae>
 8009460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009464:	e000      	b.n	8009468 <ETH_SetMACConfig+0xb0>
 8009466:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8009468:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800946e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009476:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8009478:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	4b56      	ldr	r3, [pc, #344]	; (80095e4 <ETH_SetMACConfig+0x22c>)
 800948a:	4013      	ands	r3, r2
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	6812      	ldr	r2, [r2, #0]
 8009490:	68f9      	ldr	r1, [r7, #12]
 8009492:	430b      	orrs	r3, r1
 8009494:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094a2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80094a4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094ac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80094ae:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80094b6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80094b8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80094c0:	2a00      	cmp	r2, #0
 80094c2:	d102      	bne.n	80094ca <ETH_SetMACConfig+0x112>
 80094c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094c8:	e000      	b.n	80094cc <ETH_SetMACConfig+0x114>
 80094ca:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80094cc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	4b42      	ldr	r3, [pc, #264]	; (80095e8 <ETH_SetMACConfig+0x230>)
 80094de:	4013      	ands	r3, r2
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6812      	ldr	r2, [r2, #0]
 80094e4:	68f9      	ldr	r1, [r7, #12]
 80094e6:	430b      	orrs	r3, r1
 80094e8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094f0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80094f6:	4313      	orrs	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	4b3a      	ldr	r3, [pc, #232]	; (80095ec <ETH_SetMACConfig+0x234>)
 8009502:	4013      	ands	r3, r2
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6812      	ldr	r2, [r2, #0]
 8009508:	68f9      	ldr	r1, [r7, #12]
 800950a:	430b      	orrs	r3, r1
 800950c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009514:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800951a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009522:	2a00      	cmp	r2, #0
 8009524:	d101      	bne.n	800952a <ETH_SetMACConfig+0x172>
 8009526:	2280      	movs	r2, #128	; 0x80
 8009528:	e000      	b.n	800952c <ETH_SetMACConfig+0x174>
 800952a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800952c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009532:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800953e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8009542:	4013      	ands	r3, r2
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6812      	ldr	r2, [r2, #0]
 8009548:	68f9      	ldr	r1, [r7, #12]
 800954a:	430b      	orrs	r3, r1
 800954c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009554:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800955c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800956a:	f023 0103 	bic.w	r1, r3, #3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	430a      	orrs	r2, r1
 8009576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009582:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800959e:	2a00      	cmp	r2, #0
 80095a0:	d101      	bne.n	80095a6 <ETH_SetMACConfig+0x1ee>
 80095a2:	2240      	movs	r2, #64	; 0x40
 80095a4:	e000      	b.n	80095a8 <ETH_SetMACConfig+0x1f0>
 80095a6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80095a8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80095b0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80095b2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80095ba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80095c8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80095d8:	bf00      	nop
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	00048083 	.word	0x00048083
 80095e8:	c0f88000 	.word	0xc0f88000
 80095ec:	fffffef0 	.word	0xfffffef0

080095f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	4b38      	ldr	r3, [pc, #224]	; (80096e8 <ETH_SetDMAConfig+0xf8>)
 8009606:	4013      	ands	r3, r2
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	6812      	ldr	r2, [r2, #0]
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	6809      	ldr	r1, [r1, #0]
 8009610:	431a      	orrs	r2, r3
 8009612:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8009616:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	791b      	ldrb	r3, [r3, #4]
 800961c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009622:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	7b1b      	ldrb	r3, [r3, #12]
 8009628:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	f241 0304 	movw	r3, #4100	; 0x1004
 8009636:	4413      	add	r3, r2
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b2c      	ldr	r3, [pc, #176]	; (80096ec <ETH_SetDMAConfig+0xfc>)
 800963c:	4013      	ands	r3, r2
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6811      	ldr	r1, [r2, #0]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	431a      	orrs	r2, r3
 8009646:	f241 0304 	movw	r3, #4100	; 0x1004
 800964a:	440b      	add	r3, r1
 800964c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	7b5b      	ldrb	r3, [r3, #13]
 8009652:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009658:	4313      	orrs	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	4b22      	ldr	r3, [pc, #136]	; (80096f0 <ETH_SetDMAConfig+0x100>)
 8009668:	4013      	ands	r3, r2
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	6811      	ldr	r1, [r2, #0]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	431a      	orrs	r2, r3
 8009672:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8009676:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	7d1b      	ldrb	r3, [r3, #20]
 8009680:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009682:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	7f5b      	ldrb	r3, [r3, #29]
 8009688:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	f241 1304 	movw	r3, #4356	; 0x1104
 8009696:	4413      	add	r3, r2
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <ETH_SetDMAConfig+0x104>)
 800969c:	4013      	ands	r3, r2
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6811      	ldr	r1, [r2, #0]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	431a      	orrs	r2, r3
 80096a6:	f241 1304 	movw	r3, #4356	; 0x1104
 80096aa:	440b      	add	r3, r1
 80096ac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	7f1b      	ldrb	r3, [r3, #28]
 80096b2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80096b8:	4313      	orrs	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	f241 1308 	movw	r3, #4360	; 0x1108
 80096c4:	4413      	add	r3, r2
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <ETH_SetDMAConfig+0x108>)
 80096ca:	4013      	ands	r3, r2
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6811      	ldr	r1, [r2, #0]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	431a      	orrs	r2, r3
 80096d4:	f241 1308 	movw	r3, #4360	; 0x1108
 80096d8:	440b      	add	r3, r1
 80096da:	601a      	str	r2, [r3, #0]
}
 80096dc:	bf00      	nop
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr
 80096e8:	ffff87fd 	.word	0xffff87fd
 80096ec:	ffff2ffe 	.word	0xffff2ffe
 80096f0:	fffec000 	.word	0xfffec000
 80096f4:	ffc0efef 	.word	0xffc0efef
 80096f8:	7fc0ffff 	.word	0x7fc0ffff

080096fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b0a4      	sub	sp, #144	; 0x90
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009704:	2301      	movs	r3, #1
 8009706:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800970a:	2300      	movs	r3, #0
 800970c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800970e:	2300      	movs	r3, #0
 8009710:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009714:	2300      	movs	r3, #0
 8009716:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800971a:	2301      	movs	r3, #1
 800971c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009720:	2301      	movs	r3, #1
 8009722:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009726:	2301      	movs	r3, #1
 8009728:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800972c:	2300      	movs	r3, #0
 800972e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009732:	2301      	movs	r3, #1
 8009734:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800973c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800973e:	2300      	movs	r3, #0
 8009740:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009744:	2300      	movs	r3, #0
 8009746:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009748:	2300      	movs	r3, #0
 800974a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800974e:	2300      	movs	r3, #0
 8009750:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009754:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8009758:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800975a:	2300      	movs	r3, #0
 800975c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009760:	2300      	movs	r3, #0
 8009762:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8009764:	2301      	movs	r3, #1
 8009766:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800976a:	2300      	movs	r3, #0
 800976c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009770:	2300      	movs	r3, #0
 8009772:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009776:	2300      	movs	r3, #0
 8009778:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800977a:	2300      	movs	r3, #0
 800977c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800977e:	2300      	movs	r3, #0
 8009780:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009782:	2300      	movs	r3, #0
 8009784:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009788:	2300      	movs	r3, #0
 800978a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800978e:	2301      	movs	r3, #1
 8009790:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009794:	2320      	movs	r3, #32
 8009796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800979a:	2301      	movs	r3, #1
 800979c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80097a0:	2300      	movs	r3, #0
 80097a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80097a6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80097ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80097b0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80097b8:	2302      	movs	r3, #2
 80097ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80097be:	2300      	movs	r3, #0
 80097c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80097ca:	2300      	movs	r3, #0
 80097cc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80097d0:	2301      	movs	r3, #1
 80097d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80097d6:	2300      	movs	r3, #0
 80097d8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80097da:	2301      	movs	r3, #1
 80097dc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80097e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff fde6 	bl	80093b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80097ec:	2301      	movs	r3, #1
 80097ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80097f0:	2301      	movs	r3, #1
 80097f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80097f4:	2300      	movs	r3, #0
 80097f6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80097f8:	2300      	movs	r3, #0
 80097fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80097fe:	2300      	movs	r3, #0
 8009800:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009802:	2300      	movs	r3, #0
 8009804:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009806:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800980a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800980c:	2300      	movs	r3, #0
 800980e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009810:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009814:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009816:	2300      	movs	r3, #0
 8009818:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800981c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009820:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009822:	f107 0308 	add.w	r3, r7, #8
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff fee1 	bl	80095f0 <ETH_SetDMAConfig>
}
 800982e:	bf00      	nop
 8009830:	3790      	adds	r7, #144	; 0x90
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009848:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009850:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009852:	f001 fd3b 	bl	800b2cc <HAL_RCC_GetHCLKFreq>
 8009856:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	4a1e      	ldr	r2, [pc, #120]	; (80098d4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d908      	bls.n	8009872 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4a1d      	ldr	r2, [pc, #116]	; (80098d8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d804      	bhi.n	8009872 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	e027      	b.n	80098c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	4a18      	ldr	r2, [pc, #96]	; (80098d8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d908      	bls.n	800988c <ETH_MAC_MDIO_ClkConfig+0x54>
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	4a17      	ldr	r2, [pc, #92]	; (80098dc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d204      	bcs.n	800988c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	e01a      	b.n	80098c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4a13      	ldr	r2, [pc, #76]	; (80098dc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d303      	bcc.n	800989c <ETH_MAC_MDIO_ClkConfig+0x64>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4a12      	ldr	r2, [pc, #72]	; (80098e0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d911      	bls.n	80098c0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	4a10      	ldr	r2, [pc, #64]	; (80098e0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d908      	bls.n	80098b6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	4a0f      	ldr	r2, [pc, #60]	; (80098e4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d804      	bhi.n	80098b6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e005      	b.n	80098c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	e000      	b.n	80098c2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80098c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80098cc:	bf00      	nop
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	01312cff 	.word	0x01312cff
 80098d8:	02160ebf 	.word	0x02160ebf
 80098dc:	03938700 	.word	0x03938700
 80098e0:	05f5e0ff 	.word	0x05f5e0ff
 80098e4:	08f0d17f 	.word	0x08f0d17f

080098e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	e01d      	b.n	8009932 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68d9      	ldr	r1, [r3, #12]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4613      	mov	r3, r2
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	4413      	add	r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	440b      	add	r3, r1
 8009906:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2200      	movs	r2, #0
 8009912:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2200      	movs	r2, #0
 8009918:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2200      	movs	r2, #0
 800991e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009920:	68b9      	ldr	r1, [r7, #8]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	3206      	adds	r2, #6
 8009928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b03      	cmp	r3, #3
 8009936:	d9de      	bls.n	80098f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	f241 132c 	movw	r3, #4396	; 0x112c
 8009946:	4413      	add	r3, r2
 8009948:	2203      	movs	r2, #3
 800994a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68d9      	ldr	r1, [r3, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	f241 1314 	movw	r3, #4372	; 0x1114
 8009958:	4413      	add	r3, r2
 800995a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8009968:	601a      	str	r2, [r3, #0]
}
 800996a:	bf00      	nop
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800997e:	2300      	movs	r3, #0
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e024      	b.n	80099ce <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6919      	ldr	r1, [r3, #16]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4613      	mov	r3, r2
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	4413      	add	r3, r2
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	440b      	add	r3, r1
 8009994:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2200      	movs	r2, #0
 80099a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2200      	movs	r2, #0
 80099a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	2200      	movs	r2, #0
 80099ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2200      	movs	r2, #0
 80099b2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	2200      	movs	r2, #0
 80099b8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3310      	adds	r3, #16
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3301      	adds	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d9d7      	bls.n	8009984 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	f241 1330 	movw	r3, #4400	; 0x1130
 80099fa:	4413      	add	r3, r2
 80099fc:	2203      	movs	r2, #3
 80099fe:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6919      	ldr	r1, [r3, #16]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	f241 131c 	movw	r3, #4380	; 0x111c
 8009a0c:	4413      	add	r3, r2
 8009a0e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	f241 1328 	movw	r3, #4392	; 0x1128
 8009a20:	4413      	add	r3, r2
 8009a22:	6019      	str	r1, [r3, #0]
}
 8009a24:	bf00      	nop
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b08d      	sub	sp, #52	; 0x34
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3318      	adds	r3, #24
 8009a40:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a72:	d007      	beq.n	8009a84 <ETH_Prepare_Tx_Descriptors+0x54>
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a78:	3304      	adds	r3, #4
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8009a84:	2302      	movs	r3, #2
 8009a86:	e24a      	b.n	8009f1e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d044      	beq.n	8009b1e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	4b72      	ldr	r3, [pc, #456]	; (8009c64 <ETH_Prepare_Tx_Descriptors+0x234>)
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009ac0:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0308 	and.w	r3, r3, #8
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d027      	beq.n	8009b1e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	041b      	lsls	r3, r3, #16
 8009ada:	431a      	orrs	r2, r3
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	431a      	orrs	r2, r3
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009b0c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009b1c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0310 	and.w	r3, r3, #16
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00e      	beq.n	8009b48 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	4b4e      	ldr	r3, [pc, #312]	; (8009c68 <ETH_Prepare_Tx_Descriptors+0x238>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	6992      	ldr	r2, [r2, #24]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d105      	bne.n	8009b60 <ETH_Prepare_Tx_Descriptors+0x130>
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0310 	and.w	r3, r3, #16
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d030      	beq.n	8009bc2 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d902      	bls.n	8009b8a <ETH_Prepare_Tx_Descriptors+0x15a>
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	3b04      	subs	r3, #4
 8009b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b92:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	3301      	adds	r3, #1
 8009b98:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ba6:	d10c      	bne.n	8009bc2 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb0:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e1ad      	b.n	8009f1e <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	6a3b      	ldr	r3, [r7, #32]
 8009bd0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	4b24      	ldr	r3, [pc, #144]	; (8009c68 <ETH_Prepare_Tx_Descriptors+0x238>)
 8009bd8:	4013      	ands	r3, r2
 8009bda:	69fa      	ldr	r2, [r7, #28]
 8009bdc:	6852      	ldr	r2, [r2, #4]
 8009bde:	431a      	orrs	r2, r3
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d012      	beq.n	8009c12 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	4b1a      	ldr	r3, [pc, #104]	; (8009c6c <ETH_Prepare_Tx_Descriptors+0x23c>)
 8009c02:	4013      	ands	r3, r2
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	6852      	ldr	r2, [r2, #4]
 8009c08:	0412      	lsls	r2, r2, #16
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	609a      	str	r2, [r3, #8]
 8009c10:	e008      	b.n	8009c24 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	2200      	movs	r2, #0
 8009c16:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <ETH_Prepare_Tx_Descriptors+0x23c>)
 8009c1e:	4013      	ands	r3, r2
 8009c20:	6a3a      	ldr	r2, [r7, #32]
 8009c22:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d021      	beq.n	8009c74 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	04db      	lsls	r3, r3, #19
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	68da      	ldr	r2, [r3, #12]
 8009c48:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <ETH_Prepare_Tx_Descriptors+0x240>)
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	69d2      	ldr	r2, [r2, #28]
 8009c50:	431a      	orrs	r2, r3
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	60da      	str	r2, [r3, #12]
 8009c62:	e02e      	b.n	8009cc2 <ETH_Prepare_Tx_Descriptors+0x292>
 8009c64:	ffff0000 	.word	0xffff0000
 8009c68:	ffffc000 	.word	0xffffc000
 8009c6c:	c000ffff 	.word	0xc000ffff
 8009c70:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	4b93      	ldr	r3, [pc, #588]	; (8009ec8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	6852      	ldr	r2, [r2, #4]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d008      	beq.n	8009ca4 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	6a3b      	ldr	r3, [r7, #32]
 8009ca2:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d008      	beq.n	8009cc2 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0304 	and.w	r3, r3, #4
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d008      	beq.n	8009ce0 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0302 	and.w	r3, r3, #2
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 80cb 	beq.w	8009ea8 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8009d24:	e0c0      	b.n	8009ea8 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8009d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d34:	3301      	adds	r3, #1
 8009d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d902      	bls.n	8009d44 <ETH_Prepare_Tx_Descriptors+0x314>
 8009d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d40:	3b04      	subs	r3, #4
 8009d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009d56:	6a3b      	ldr	r3, [r7, #32]
 8009d58:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d66:	d007      	beq.n	8009d78 <ETH_Prepare_Tx_Descriptors+0x348>
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d026      	beq.n	8009dc6 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d84:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8009d86:	2300      	movs	r3, #0
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8a:	e016      	b.n	8009dba <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	2b03      	cmp	r3, #3
 8009da2:	d902      	bls.n	8009daa <ETH_Prepare_Tx_Descriptors+0x37a>
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	3b04      	subs	r3, #4
 8009da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db2:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	3301      	adds	r3, #1
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d3e4      	bcc.n	8009d8c <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	e0ab      	b.n	8009f1e <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	3301      	adds	r3, #1
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	4b3a      	ldr	r3, [pc, #232]	; (8009ecc <ETH_Prepare_Tx_Descriptors+0x49c>)
 8009de2:	4013      	ands	r3, r2
 8009de4:	69fa      	ldr	r2, [r7, #28]
 8009de6:	6852      	ldr	r2, [r2, #4]
 8009de8:	431a      	orrs	r2, r3
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d012      	beq.n	8009e1c <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	461a      	mov	r2, r3
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	689a      	ldr	r2, [r3, #8]
 8009e0a:	4b31      	ldr	r3, [pc, #196]	; (8009ed0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	69fa      	ldr	r2, [r7, #28]
 8009e10:	6852      	ldr	r2, [r2, #4]
 8009e12:	0412      	lsls	r2, r2, #16
 8009e14:	431a      	orrs	r2, r3
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	609a      	str	r2, [r3, #8]
 8009e1a:	e008      	b.n	8009e2e <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	4b2a      	ldr	r3, [pc, #168]	; (8009ed0 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	6a3a      	ldr	r2, [r7, #32]
 8009e2c:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0310 	and.w	r3, r3, #16
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00f      	beq.n	8009e5a <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	4b25      	ldr	r3, [pc, #148]	; (8009ed4 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	69d2      	ldr	r2, [r2, #28]
 8009e46:	431a      	orrs	r2, r3
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	60da      	str	r2, [r3, #12]
 8009e58:	e017      	b.n	8009e8a <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	68da      	ldr	r2, [r3, #12]
 8009e5e:	4b1a      	ldr	r3, [pc, #104]	; (8009ec8 <ETH_Prepare_Tx_Descriptors+0x498>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	6852      	ldr	r2, [r2, #4]
 8009e66:	431a      	orrs	r2, r3
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d008      	beq.n	8009e8a <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	431a      	orrs	r2, r3
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f47f af3a 	bne.w	8009d26 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00f      	beq.n	8009ed8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	609a      	str	r2, [r3, #8]
 8009ec4:	e00e      	b.n	8009ee4 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8009ec6:	bf00      	nop
 8009ec8:	ffff8000 	.word	0xffff8000
 8009ecc:	ffffc000 	.word	0xffffc000
 8009ed0:	c000ffff 	.word	0xc000ffff
 8009ed4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ef4:	6979      	ldr	r1, [r7, #20]
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	3304      	adds	r3, #4
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f04:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f06:	b672      	cpsid	i
}
 8009f08:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	4413      	add	r3, r2
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8009f18:	b662      	cpsie	i
}
 8009f1a:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3734      	adds	r7, #52	; 0x34
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop

08009f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b089      	sub	sp, #36	; 0x24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009f3a:	4b89      	ldr	r3, [pc, #548]	; (800a160 <HAL_GPIO_Init+0x234>)
 8009f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009f3e:	e194      	b.n	800a26a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	2101      	movs	r1, #1
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 8186 	beq.w	800a264 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d00b      	beq.n	8009f78 <HAL_GPIO_Init+0x4c>
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d007      	beq.n	8009f78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009f6c:	2b11      	cmp	r3, #17
 8009f6e:	d003      	beq.n	8009f78 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b12      	cmp	r3, #18
 8009f76:	d130      	bne.n	8009fda <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	2203      	movs	r2, #3
 8009f84:	fa02 f303 	lsl.w	r3, r2, r3
 8009f88:	43db      	mvns	r3, r3
 8009f8a:	69ba      	ldr	r2, [r7, #24]
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9c:	69ba      	ldr	r2, [r7, #24]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fae:	2201      	movs	r2, #1
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb6:	43db      	mvns	r3, r3
 8009fb8:	69ba      	ldr	r2, [r7, #24]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	091b      	lsrs	r3, r3, #4
 8009fc4:	f003 0201 	and.w	r2, r3, #1
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	fa02 f303 	lsl.w	r3, r2, r3
 8009fce:	69ba      	ldr	r2, [r7, #24]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	2203      	movs	r2, #3
 8009fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fea:	43db      	mvns	r3, r3
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	4313      	orrs	r3, r2
 800a002:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69ba      	ldr	r2, [r7, #24]
 800a008:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d003      	beq.n	800a01a <HAL_GPIO_Init+0xee>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	2b12      	cmp	r3, #18
 800a018:	d123      	bne.n	800a062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	08da      	lsrs	r2, r3, #3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3208      	adds	r2, #8
 800a022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	f003 0307 	and.w	r3, r3, #7
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	220f      	movs	r2, #15
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	43db      	mvns	r3, r3
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	4013      	ands	r3, r2
 800a03c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	691a      	ldr	r2, [r3, #16]
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	4313      	orrs	r3, r2
 800a052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	08da      	lsrs	r2, r3, #3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3208      	adds	r2, #8
 800a05c:	69b9      	ldr	r1, [r7, #24]
 800a05e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	2203      	movs	r2, #3
 800a06e:	fa02 f303 	lsl.w	r3, r2, r3
 800a072:	43db      	mvns	r3, r3
 800a074:	69ba      	ldr	r2, [r7, #24]
 800a076:	4013      	ands	r3, r2
 800a078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f003 0203 	and.w	r2, r3, #3
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80e0 	beq.w	800a264 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0a4:	4b2f      	ldr	r3, [pc, #188]	; (800a164 <HAL_GPIO_Init+0x238>)
 800a0a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0aa:	4a2e      	ldr	r2, [pc, #184]	; (800a164 <HAL_GPIO_Init+0x238>)
 800a0ac:	f043 0302 	orr.w	r3, r3, #2
 800a0b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a0b4:	4b2b      	ldr	r3, [pc, #172]	; (800a164 <HAL_GPIO_Init+0x238>)
 800a0b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0c2:	4a29      	ldr	r2, [pc, #164]	; (800a168 <HAL_GPIO_Init+0x23c>)
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	089b      	lsrs	r3, r3, #2
 800a0c8:	3302      	adds	r3, #2
 800a0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f003 0303 	and.w	r3, r3, #3
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	220f      	movs	r2, #15
 800a0da:	fa02 f303 	lsl.w	r3, r2, r3
 800a0de:	43db      	mvns	r3, r3
 800a0e0:	69ba      	ldr	r2, [r7, #24]
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a20      	ldr	r2, [pc, #128]	; (800a16c <HAL_GPIO_Init+0x240>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d052      	beq.n	800a194 <HAL_GPIO_Init+0x268>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a1f      	ldr	r2, [pc, #124]	; (800a170 <HAL_GPIO_Init+0x244>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d031      	beq.n	800a15a <HAL_GPIO_Init+0x22e>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a1e      	ldr	r2, [pc, #120]	; (800a174 <HAL_GPIO_Init+0x248>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d02b      	beq.n	800a156 <HAL_GPIO_Init+0x22a>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a1d      	ldr	r2, [pc, #116]	; (800a178 <HAL_GPIO_Init+0x24c>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d025      	beq.n	800a152 <HAL_GPIO_Init+0x226>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a1c      	ldr	r2, [pc, #112]	; (800a17c <HAL_GPIO_Init+0x250>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d01f      	beq.n	800a14e <HAL_GPIO_Init+0x222>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a1b      	ldr	r2, [pc, #108]	; (800a180 <HAL_GPIO_Init+0x254>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d019      	beq.n	800a14a <HAL_GPIO_Init+0x21e>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a1a      	ldr	r2, [pc, #104]	; (800a184 <HAL_GPIO_Init+0x258>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d013      	beq.n	800a146 <HAL_GPIO_Init+0x21a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a19      	ldr	r2, [pc, #100]	; (800a188 <HAL_GPIO_Init+0x25c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00d      	beq.n	800a142 <HAL_GPIO_Init+0x216>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a18      	ldr	r2, [pc, #96]	; (800a18c <HAL_GPIO_Init+0x260>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d007      	beq.n	800a13e <HAL_GPIO_Init+0x212>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a17      	ldr	r2, [pc, #92]	; (800a190 <HAL_GPIO_Init+0x264>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d101      	bne.n	800a13a <HAL_GPIO_Init+0x20e>
 800a136:	2309      	movs	r3, #9
 800a138:	e02d      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a13a:	230a      	movs	r3, #10
 800a13c:	e02b      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a13e:	2308      	movs	r3, #8
 800a140:	e029      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a142:	2307      	movs	r3, #7
 800a144:	e027      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a146:	2306      	movs	r3, #6
 800a148:	e025      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a14a:	2305      	movs	r3, #5
 800a14c:	e023      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a14e:	2304      	movs	r3, #4
 800a150:	e021      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a152:	2303      	movs	r3, #3
 800a154:	e01f      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a156:	2302      	movs	r3, #2
 800a158:	e01d      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e01b      	b.n	800a196 <HAL_GPIO_Init+0x26a>
 800a15e:	bf00      	nop
 800a160:	58000080 	.word	0x58000080
 800a164:	58024400 	.word	0x58024400
 800a168:	58000400 	.word	0x58000400
 800a16c:	58020000 	.word	0x58020000
 800a170:	58020400 	.word	0x58020400
 800a174:	58020800 	.word	0x58020800
 800a178:	58020c00 	.word	0x58020c00
 800a17c:	58021000 	.word	0x58021000
 800a180:	58021400 	.word	0x58021400
 800a184:	58021800 	.word	0x58021800
 800a188:	58021c00 	.word	0x58021c00
 800a18c:	58022000 	.word	0x58022000
 800a190:	58022400 	.word	0x58022400
 800a194:	2300      	movs	r3, #0
 800a196:	69fa      	ldr	r2, [r7, #28]
 800a198:	f002 0203 	and.w	r2, r2, #3
 800a19c:	0092      	lsls	r2, r2, #2
 800a19e:	4093      	lsls	r3, r2
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1a6:	4938      	ldr	r1, [pc, #224]	; (800a288 <HAL_GPIO_Init+0x35c>)
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	089b      	lsrs	r3, r3, #2
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	69ba      	ldr	r2, [r7, #24]
 800a1b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	43db      	mvns	r3, r3
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a1d0:	69ba      	ldr	r2, [r7, #24]
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	43db      	mvns	r3, r3
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d003      	beq.n	800a202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	43db      	mvns	r3, r3
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	4013      	ands	r3, r2
 800a218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a222:	2b00      	cmp	r3, #0
 800a224:	d003      	beq.n	800a22e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a22e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	43db      	mvns	r3, r3
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	4013      	ands	r3, r2
 800a246:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d003      	beq.n	800a25c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800a254:	69ba      	ldr	r2, [r7, #24]
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a25c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	3301      	adds	r3, #1
 800a268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	fa22 f303 	lsr.w	r3, r2, r3
 800a274:	2b00      	cmp	r3, #0
 800a276:	f47f ae63 	bne.w	8009f40 <HAL_GPIO_Init+0x14>
  }
}
 800a27a:	bf00      	nop
 800a27c:	bf00      	nop
 800a27e:	3724      	adds	r7, #36	; 0x24
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	58000400 	.word	0x58000400

0800a28c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	807b      	strh	r3, [r7, #2]
 800a298:	4613      	mov	r3, r2
 800a29a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a29c:	787b      	ldrb	r3, [r7, #1]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a2a2:	887a      	ldrh	r2, [r7, #2]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a2a8:	e003      	b.n	800a2b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a2aa:	887b      	ldrh	r3, [r7, #2]
 800a2ac:	041a      	lsls	r2, r3, #16
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	619a      	str	r2, [r3, #24]
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a2d0:	887a      	ldrh	r2, [r7, #2]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	041a      	lsls	r2, r3, #16
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	43d9      	mvns	r1, r3
 800a2dc:	887b      	ldrh	r3, [r7, #2]
 800a2de:	400b      	ands	r3, r1
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	619a      	str	r2, [r3, #24]
}
 800a2e6:	bf00      	nop
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800a2fc:	4a08      	ldr	r2, [pc, #32]	; (800a320 <HAL_HSEM_FastTake+0x2c>)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3320      	adds	r3, #32
 800a302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a306:	4a07      	ldr	r2, [pc, #28]	; (800a324 <HAL_HSEM_FastTake+0x30>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d101      	bne.n	800a310 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	e000      	b.n	800a312 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	58026400 	.word	0x58026400
 800a324:	80000300 	.word	0x80000300

0800a328 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800a332:	4906      	ldr	r1, [pc, #24]	; (800a34c <HAL_HSEM_Release+0x24>)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	58026400 	.word	0x58026400

0800a350 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a358:	4b0d      	ldr	r3, [pc, #52]	; (800a390 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a35a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a35e:	4a0c      	ldr	r2, [pc, #48]	; (800a390 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a360:	f043 0302 	orr.w	r3, r3, #2
 800a364:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a368:	4b09      	ldr	r3, [pc, #36]	; (800a390 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a36a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a376:	4b07      	ldr	r3, [pc, #28]	; (800a394 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	4906      	ldr	r1, [pc, #24]	; (800a394 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4313      	orrs	r3, r2
 800a380:	604b      	str	r3, [r1, #4]
}
 800a382:	bf00      	nop
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	58024400 	.word	0x58024400
 800a394:	58000400 	.word	0x58000400

0800a398 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a3a0:	4b29      	ldr	r3, [pc, #164]	; (800a448 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	f003 0307 	and.w	r3, r3, #7
 800a3a8:	2b06      	cmp	r3, #6
 800a3aa:	d00a      	beq.n	800a3c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a3ac:	4b26      	ldr	r3, [pc, #152]	; (800a448 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d001      	beq.n	800a3be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e040      	b.n	800a440 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	e03e      	b.n	800a440 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a3c2:	4b21      	ldr	r3, [pc, #132]	; (800a448 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a3ca:	491f      	ldr	r1, [pc, #124]	; (800a448 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a3d2:	f7f9 ff5b 	bl	800428c <HAL_GetTick>
 800a3d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3d8:	e009      	b.n	800a3ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a3da:	f7f9 ff57 	bl	800428c <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3e8:	d901      	bls.n	800a3ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e028      	b.n	800a440 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3ee:	4b16      	ldr	r3, [pc, #88]	; (800a448 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fa:	d1ee      	bne.n	800a3da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b1e      	cmp	r3, #30
 800a400:	d008      	beq.n	800a414 <HAL_PWREx_ConfigSupply+0x7c>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b2e      	cmp	r3, #46	; 0x2e
 800a406:	d005      	beq.n	800a414 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b1d      	cmp	r3, #29
 800a40c:	d002      	beq.n	800a414 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b2d      	cmp	r3, #45	; 0x2d
 800a412:	d114      	bne.n	800a43e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a414:	f7f9 ff3a 	bl	800428c <HAL_GetTick>
 800a418:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a41a:	e009      	b.n	800a430 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a41c:	f7f9 ff36 	bl	800428c <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a42a:	d901      	bls.n	800a430 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e007      	b.n	800a440 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <HAL_PWREx_ConfigSupply+0xb0>)
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a43c:	d1ee      	bne.n	800a41c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	58024800 	.word	0x58024800

0800a44c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08c      	sub	sp, #48	; 0x30
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e3ff      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8087 	beq.w	800a57a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a46c:	4b99      	ldr	r3, [pc, #612]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a474:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a476:	4b97      	ldr	r3, [pc, #604]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	2b10      	cmp	r3, #16
 800a480:	d007      	beq.n	800a492 <HAL_RCC_OscConfig+0x46>
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	2b18      	cmp	r3, #24
 800a486:	d110      	bne.n	800a4aa <HAL_RCC_OscConfig+0x5e>
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	f003 0303 	and.w	r3, r3, #3
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d10b      	bne.n	800a4aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a492:	4b90      	ldr	r3, [pc, #576]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d06c      	beq.n	800a578 <HAL_RCC_OscConfig+0x12c>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d168      	bne.n	800a578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e3d9      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b2:	d106      	bne.n	800a4c2 <HAL_RCC_OscConfig+0x76>
 800a4b4:	4b87      	ldr	r3, [pc, #540]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a86      	ldr	r2, [pc, #536]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	e02e      	b.n	800a520 <HAL_RCC_OscConfig+0xd4>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10c      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x98>
 800a4ca:	4b82      	ldr	r3, [pc, #520]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a81      	ldr	r2, [pc, #516]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	4b7f      	ldr	r3, [pc, #508]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a7e      	ldr	r2, [pc, #504]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4e0:	6013      	str	r3, [r2, #0]
 800a4e2:	e01d      	b.n	800a520 <HAL_RCC_OscConfig+0xd4>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4ec:	d10c      	bne.n	800a508 <HAL_RCC_OscConfig+0xbc>
 800a4ee:	4b79      	ldr	r3, [pc, #484]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a78      	ldr	r2, [pc, #480]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	4b76      	ldr	r3, [pc, #472]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a75      	ldr	r2, [pc, #468]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	e00b      	b.n	800a520 <HAL_RCC_OscConfig+0xd4>
 800a508:	4b72      	ldr	r3, [pc, #456]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a71      	ldr	r2, [pc, #452]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a50e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	4b6f      	ldr	r3, [pc, #444]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a6e      	ldr	r2, [pc, #440]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a51a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a51e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d013      	beq.n	800a550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a528:	f7f9 feb0 	bl	800428c <HAL_GetTick>
 800a52c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a52e:	e008      	b.n	800a542 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a530:	f7f9 feac 	bl	800428c <HAL_GetTick>
 800a534:	4602      	mov	r2, r0
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	2b64      	cmp	r3, #100	; 0x64
 800a53c:	d901      	bls.n	800a542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e38d      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a542:	4b64      	ldr	r3, [pc, #400]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0f0      	beq.n	800a530 <HAL_RCC_OscConfig+0xe4>
 800a54e:	e014      	b.n	800a57a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a550:	f7f9 fe9c 	bl	800428c <HAL_GetTick>
 800a554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a556:	e008      	b.n	800a56a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a558:	f7f9 fe98 	bl	800428c <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	2b64      	cmp	r3, #100	; 0x64
 800a564:	d901      	bls.n	800a56a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e379      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a56a:	4b5a      	ldr	r3, [pc, #360]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1f0      	bne.n	800a558 <HAL_RCC_OscConfig+0x10c>
 800a576:	e000      	b.n	800a57a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 0302 	and.w	r3, r3, #2
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 80ae 	beq.w	800a6e4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a588:	4b52      	ldr	r3, [pc, #328]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a590:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a592:	4b50      	ldr	r3, [pc, #320]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d007      	beq.n	800a5ae <HAL_RCC_OscConfig+0x162>
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	2b18      	cmp	r3, #24
 800a5a2:	d13a      	bne.n	800a61a <HAL_RCC_OscConfig+0x1ce>
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d135      	bne.n	800a61a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5ae:	4b49      	ldr	r3, [pc, #292]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0304 	and.w	r3, r3, #4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d005      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x17a>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e34b      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5c6:	f7f9 fe91 	bl	80042ec <HAL_GetREVID>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d817      	bhi.n	800a604 <HAL_RCC_OscConfig+0x1b8>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	2b40      	cmp	r3, #64	; 0x40
 800a5da:	d108      	bne.n	800a5ee <HAL_RCC_OscConfig+0x1a2>
 800a5dc:	4b3d      	ldr	r3, [pc, #244]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a5e4:	4a3b      	ldr	r2, [pc, #236]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a5e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5ec:	e07a      	b.n	800a6e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5ee:	4b39      	ldr	r3, [pc, #228]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	031b      	lsls	r3, r3, #12
 800a5fc:	4935      	ldr	r1, [pc, #212]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a602:	e06f      	b.n	800a6e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a604:	4b33      	ldr	r3, [pc, #204]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	061b      	lsls	r3, r3, #24
 800a612:	4930      	ldr	r1, [pc, #192]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a614:	4313      	orrs	r3, r2
 800a616:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a618:	e064      	b.n	800a6e4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d045      	beq.n	800a6ae <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a622:	4b2c      	ldr	r3, [pc, #176]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f023 0219 	bic.w	r2, r3, #25
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	4929      	ldr	r1, [pc, #164]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a630:	4313      	orrs	r3, r2
 800a632:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a634:	f7f9 fe2a 	bl	800428c <HAL_GetTick>
 800a638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a63a:	e008      	b.n	800a64e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a63c:	f7f9 fe26 	bl	800428c <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	2b02      	cmp	r3, #2
 800a648:	d901      	bls.n	800a64e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e307      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a64e:	4b21      	ldr	r3, [pc, #132]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0f0      	beq.n	800a63c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a65a:	f7f9 fe47 	bl	80042ec <HAL_GetREVID>
 800a65e:	4603      	mov	r3, r0
 800a660:	f241 0203 	movw	r2, #4099	; 0x1003
 800a664:	4293      	cmp	r3, r2
 800a666:	d817      	bhi.n	800a698 <HAL_RCC_OscConfig+0x24c>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	2b40      	cmp	r3, #64	; 0x40
 800a66e:	d108      	bne.n	800a682 <HAL_RCC_OscConfig+0x236>
 800a670:	4b18      	ldr	r3, [pc, #96]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a678:	4a16      	ldr	r2, [pc, #88]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a67a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a67e:	6053      	str	r3, [r2, #4]
 800a680:	e030      	b.n	800a6e4 <HAL_RCC_OscConfig+0x298>
 800a682:	4b14      	ldr	r3, [pc, #80]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	031b      	lsls	r3, r3, #12
 800a690:	4910      	ldr	r1, [pc, #64]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a692:	4313      	orrs	r3, r2
 800a694:	604b      	str	r3, [r1, #4]
 800a696:	e025      	b.n	800a6e4 <HAL_RCC_OscConfig+0x298>
 800a698:	4b0e      	ldr	r3, [pc, #56]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	061b      	lsls	r3, r3, #24
 800a6a6:	490b      	ldr	r1, [pc, #44]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	604b      	str	r3, [r1, #4]
 800a6ac:	e01a      	b.n	800a6e4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6ae:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a08      	ldr	r2, [pc, #32]	; (800a6d4 <HAL_RCC_OscConfig+0x288>)
 800a6b4:	f023 0301 	bic.w	r3, r3, #1
 800a6b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ba:	f7f9 fde7 	bl	800428c <HAL_GetTick>
 800a6be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6c0:	e00a      	b.n	800a6d8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a6c2:	f7f9 fde3 	bl	800428c <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d903      	bls.n	800a6d8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e2c4      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
 800a6d4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6d8:	4ba4      	ldr	r3, [pc, #656]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0304 	and.w	r3, r3, #4
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1ee      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0310 	and.w	r3, r3, #16
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 80a9 	beq.w	800a844 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6f2:	4b9e      	ldr	r3, [pc, #632]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6fc:	4b9b      	ldr	r3, [pc, #620]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a700:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	2b08      	cmp	r3, #8
 800a706:	d007      	beq.n	800a718 <HAL_RCC_OscConfig+0x2cc>
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	2b18      	cmp	r3, #24
 800a70c:	d13a      	bne.n	800a784 <HAL_RCC_OscConfig+0x338>
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	f003 0303 	and.w	r3, r3, #3
 800a714:	2b01      	cmp	r3, #1
 800a716:	d135      	bne.n	800a784 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a718:	4b94      	ldr	r3, [pc, #592]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a720:	2b00      	cmp	r3, #0
 800a722:	d005      	beq.n	800a730 <HAL_RCC_OscConfig+0x2e4>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	2b80      	cmp	r3, #128	; 0x80
 800a72a:	d001      	beq.n	800a730 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e296      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a730:	f7f9 fddc 	bl	80042ec <HAL_GetREVID>
 800a734:	4603      	mov	r3, r0
 800a736:	f241 0203 	movw	r2, #4099	; 0x1003
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d817      	bhi.n	800a76e <HAL_RCC_OscConfig+0x322>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	2b20      	cmp	r3, #32
 800a744:	d108      	bne.n	800a758 <HAL_RCC_OscConfig+0x30c>
 800a746:	4b89      	ldr	r3, [pc, #548]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a74e:	4a87      	ldr	r2, [pc, #540]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a754:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a756:	e075      	b.n	800a844 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a758:	4b84      	ldr	r3, [pc, #528]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	069b      	lsls	r3, r3, #26
 800a766:	4981      	ldr	r1, [pc, #516]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a76c:	e06a      	b.n	800a844 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a76e:	4b7f      	ldr	r3, [pc, #508]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	061b      	lsls	r3, r3, #24
 800a77c:	497b      	ldr	r1, [pc, #492]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a782:	e05f      	b.n	800a844 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d042      	beq.n	800a812 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a78c:	4b77      	ldr	r3, [pc, #476]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a76      	ldr	r2, [pc, #472]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a798:	f7f9 fd78 	bl	800428c <HAL_GetTick>
 800a79c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a79e:	e008      	b.n	800a7b2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a7a0:	f7f9 fd74 	bl	800428c <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d901      	bls.n	800a7b2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e255      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7b2:	4b6e      	ldr	r3, [pc, #440]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0f0      	beq.n	800a7a0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a7be:	f7f9 fd95 	bl	80042ec <HAL_GetREVID>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d817      	bhi.n	800a7fc <HAL_RCC_OscConfig+0x3b0>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	d108      	bne.n	800a7e6 <HAL_RCC_OscConfig+0x39a>
 800a7d4:	4b65      	ldr	r3, [pc, #404]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a7dc:	4a63      	ldr	r2, [pc, #396]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a7de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7e2:	6053      	str	r3, [r2, #4]
 800a7e4:	e02e      	b.n	800a844 <HAL_RCC_OscConfig+0x3f8>
 800a7e6:	4b61      	ldr	r3, [pc, #388]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	069b      	lsls	r3, r3, #26
 800a7f4:	495d      	ldr	r1, [pc, #372]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	604b      	str	r3, [r1, #4]
 800a7fa:	e023      	b.n	800a844 <HAL_RCC_OscConfig+0x3f8>
 800a7fc:	4b5b      	ldr	r3, [pc, #364]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	061b      	lsls	r3, r3, #24
 800a80a:	4958      	ldr	r1, [pc, #352]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	60cb      	str	r3, [r1, #12]
 800a810:	e018      	b.n	800a844 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a812:	4b56      	ldr	r3, [pc, #344]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a55      	ldr	r2, [pc, #340]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a81c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a81e:	f7f9 fd35 	bl	800428c <HAL_GetTick>
 800a822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a824:	e008      	b.n	800a838 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a826:	f7f9 fd31 	bl	800428c <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b02      	cmp	r3, #2
 800a832:	d901      	bls.n	800a838 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e212      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a838:	4b4c      	ldr	r3, [pc, #304]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1f0      	bne.n	800a826 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0308 	and.w	r3, r3, #8
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d036      	beq.n	800a8be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d019      	beq.n	800a88c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a858:	4b44      	ldr	r3, [pc, #272]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a85a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a85c:	4a43      	ldr	r2, [pc, #268]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a85e:	f043 0301 	orr.w	r3, r3, #1
 800a862:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a864:	f7f9 fd12 	bl	800428c <HAL_GetTick>
 800a868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a86a:	e008      	b.n	800a87e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a86c:	f7f9 fd0e 	bl	800428c <HAL_GetTick>
 800a870:	4602      	mov	r2, r0
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	2b02      	cmp	r3, #2
 800a878:	d901      	bls.n	800a87e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e1ef      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a87e:	4b3b      	ldr	r3, [pc, #236]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d0f0      	beq.n	800a86c <HAL_RCC_OscConfig+0x420>
 800a88a:	e018      	b.n	800a8be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a88c:	4b37      	ldr	r3, [pc, #220]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a890:	4a36      	ldr	r2, [pc, #216]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a892:	f023 0301 	bic.w	r3, r3, #1
 800a896:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a898:	f7f9 fcf8 	bl	800428c <HAL_GetTick>
 800a89c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a89e:	e008      	b.n	800a8b2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a8a0:	f7f9 fcf4 	bl	800428c <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d901      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e1d5      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a8b2:	4b2e      	ldr	r3, [pc, #184]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1f0      	bne.n	800a8a0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0320 	and.w	r3, r3, #32
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d036      	beq.n	800a938 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d019      	beq.n	800a906 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a8d2:	4b26      	ldr	r3, [pc, #152]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a25      	ldr	r2, [pc, #148]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a8d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a8dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a8de:	f7f9 fcd5 	bl	800428c <HAL_GetTick>
 800a8e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a8e4:	e008      	b.n	800a8f8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a8e6:	f7f9 fcd1 	bl	800428c <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d901      	bls.n	800a8f8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e1b2      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a8f8:	4b1c      	ldr	r3, [pc, #112]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0f0      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x49a>
 800a904:	e018      	b.n	800a938 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a906:	4b19      	ldr	r3, [pc, #100]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a18      	ldr	r2, [pc, #96]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a90c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a910:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a912:	f7f9 fcbb 	bl	800428c <HAL_GetTick>
 800a916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a918:	e008      	b.n	800a92c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a91a:	f7f9 fcb7 	bl	800428c <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d901      	bls.n	800a92c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e198      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a92c:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <HAL_RCC_OscConfig+0x520>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1f0      	bne.n	800a91a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0304 	and.w	r3, r3, #4
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 8085 	beq.w	800aa50 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a946:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <HAL_RCC_OscConfig+0x524>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a09      	ldr	r2, [pc, #36]	; (800a970 <HAL_RCC_OscConfig+0x524>)
 800a94c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a952:	f7f9 fc9b 	bl	800428c <HAL_GetTick>
 800a956:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a958:	e00c      	b.n	800a974 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a95a:	f7f9 fc97 	bl	800428c <HAL_GetTick>
 800a95e:	4602      	mov	r2, r0
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	2b64      	cmp	r3, #100	; 0x64
 800a966:	d905      	bls.n	800a974 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e178      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
 800a96c:	58024400 	.word	0x58024400
 800a970:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a974:	4b96      	ldr	r3, [pc, #600]	; (800abd0 <HAL_RCC_OscConfig+0x784>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d0ec      	beq.n	800a95a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d106      	bne.n	800a996 <HAL_RCC_OscConfig+0x54a>
 800a988:	4b92      	ldr	r3, [pc, #584]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a98c:	4a91      	ldr	r2, [pc, #580]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a98e:	f043 0301 	orr.w	r3, r3, #1
 800a992:	6713      	str	r3, [r2, #112]	; 0x70
 800a994:	e02d      	b.n	800a9f2 <HAL_RCC_OscConfig+0x5a6>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10c      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x56c>
 800a99e:	4b8d      	ldr	r3, [pc, #564]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a2:	4a8c      	ldr	r2, [pc, #560]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9a4:	f023 0301 	bic.w	r3, r3, #1
 800a9a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a9aa:	4b8a      	ldr	r3, [pc, #552]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ae:	4a89      	ldr	r2, [pc, #548]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9b0:	f023 0304 	bic.w	r3, r3, #4
 800a9b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a9b6:	e01c      	b.n	800a9f2 <HAL_RCC_OscConfig+0x5a6>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	2b05      	cmp	r3, #5
 800a9be:	d10c      	bne.n	800a9da <HAL_RCC_OscConfig+0x58e>
 800a9c0:	4b84      	ldr	r3, [pc, #528]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c4:	4a83      	ldr	r2, [pc, #524]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9c6:	f043 0304 	orr.w	r3, r3, #4
 800a9ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a9cc:	4b81      	ldr	r3, [pc, #516]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d0:	4a80      	ldr	r2, [pc, #512]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9d2:	f043 0301 	orr.w	r3, r3, #1
 800a9d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a9d8:	e00b      	b.n	800a9f2 <HAL_RCC_OscConfig+0x5a6>
 800a9da:	4b7e      	ldr	r3, [pc, #504]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9de:	4a7d      	ldr	r2, [pc, #500]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9e0:	f023 0301 	bic.w	r3, r3, #1
 800a9e4:	6713      	str	r3, [r2, #112]	; 0x70
 800a9e6:	4b7b      	ldr	r3, [pc, #492]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ea:	4a7a      	ldr	r2, [pc, #488]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800a9ec:	f023 0304 	bic.w	r3, r3, #4
 800a9f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d015      	beq.n	800aa26 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9fa:	f7f9 fc47 	bl	800428c <HAL_GetTick>
 800a9fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa00:	e00a      	b.n	800aa18 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa02:	f7f9 fc43 	bl	800428c <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d901      	bls.n	800aa18 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e122      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa18:	4b6e      	ldr	r3, [pc, #440]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aa1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0ee      	beq.n	800aa02 <HAL_RCC_OscConfig+0x5b6>
 800aa24:	e014      	b.n	800aa50 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa26:	f7f9 fc31 	bl	800428c <HAL_GetTick>
 800aa2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa2c:	e00a      	b.n	800aa44 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa2e:	f7f9 fc2d 	bl	800428c <HAL_GetTick>
 800aa32:	4602      	mov	r2, r0
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d901      	bls.n	800aa44 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e10c      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa44:	4b63      	ldr	r3, [pc, #396]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aa46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa48:	f003 0302 	and.w	r3, r3, #2
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1ee      	bne.n	800aa2e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 8101 	beq.w	800ac5c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aa5a:	4b5e      	ldr	r3, [pc, #376]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa62:	2b18      	cmp	r3, #24
 800aa64:	f000 80bc 	beq.w	800abe0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	f040 8095 	bne.w	800ab9c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa72:	4b58      	ldr	r3, [pc, #352]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a57      	ldr	r2, [pc, #348]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aa78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa7e:	f7f9 fc05 	bl	800428c <HAL_GetTick>
 800aa82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa84:	e008      	b.n	800aa98 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa86:	f7f9 fc01 	bl	800428c <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d901      	bls.n	800aa98 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e0e2      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa98:	4b4e      	ldr	r3, [pc, #312]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1f0      	bne.n	800aa86 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aaa4:	4b4b      	ldr	r3, [pc, #300]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aaa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aaa8:	4b4b      	ldr	r3, [pc, #300]	; (800abd8 <HAL_RCC_OscConfig+0x78c>)
 800aaaa:	4013      	ands	r3, r2
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aab4:	0112      	lsls	r2, r2, #4
 800aab6:	430a      	orrs	r2, r1
 800aab8:	4946      	ldr	r1, [pc, #280]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	628b      	str	r3, [r1, #40]	; 0x28
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac2:	3b01      	subs	r3, #1
 800aac4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aacc:	3b01      	subs	r3, #1
 800aace:	025b      	lsls	r3, r3, #9
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	431a      	orrs	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad8:	3b01      	subs	r3, #1
 800aada:	041b      	lsls	r3, r3, #16
 800aadc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aae0:	431a      	orrs	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae6:	3b01      	subs	r3, #1
 800aae8:	061b      	lsls	r3, r3, #24
 800aaea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aaee:	4939      	ldr	r1, [pc, #228]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800aaf4:	4b37      	ldr	r3, [pc, #220]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	4a36      	ldr	r2, [pc, #216]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aafa:	f023 0301 	bic.w	r3, r3, #1
 800aafe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab00:	4b34      	ldr	r3, [pc, #208]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab04:	4b35      	ldr	r3, [pc, #212]	; (800abdc <HAL_RCC_OscConfig+0x790>)
 800ab06:	4013      	ands	r3, r2
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab0c:	00d2      	lsls	r2, r2, #3
 800ab0e:	4931      	ldr	r1, [pc, #196]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ab14:	4b2f      	ldr	r3, [pc, #188]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	f023 020c 	bic.w	r2, r3, #12
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab20:	492c      	ldr	r1, [pc, #176]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ab26:	4b2b      	ldr	r3, [pc, #172]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2a:	f023 0202 	bic.w	r2, r3, #2
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab32:	4928      	ldr	r1, [pc, #160]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ab38:	4b26      	ldr	r3, [pc, #152]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3c:	4a25      	ldr	r2, [pc, #148]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab44:	4b23      	ldr	r3, [pc, #140]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	4a22      	ldr	r2, [pc, #136]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ab50:	4b20      	ldr	r3, [pc, #128]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	4a1f      	ldr	r2, [pc, #124]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ab5c:	4b1d      	ldr	r3, [pc, #116]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	4a1c      	ldr	r2, [pc, #112]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab62:	f043 0301 	orr.w	r3, r3, #1
 800ab66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab68:	4b1a      	ldr	r3, [pc, #104]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a19      	ldr	r2, [pc, #100]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab74:	f7f9 fb8a 	bl	800428c <HAL_GetTick>
 800ab78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab7a:	e008      	b.n	800ab8e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab7c:	f7f9 fb86 	bl	800428c <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d901      	bls.n	800ab8e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e067      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab8e:	4b11      	ldr	r3, [pc, #68]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0f0      	beq.n	800ab7c <HAL_RCC_OscConfig+0x730>
 800ab9a:	e05f      	b.n	800ac5c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a0c      	ldr	r2, [pc, #48]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800aba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba8:	f7f9 fb70 	bl	800428c <HAL_GetTick>
 800abac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abae:	e008      	b.n	800abc2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abb0:	f7f9 fb6c 	bl	800428c <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e04d      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abc2:	4b04      	ldr	r3, [pc, #16]	; (800abd4 <HAL_RCC_OscConfig+0x788>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1f0      	bne.n	800abb0 <HAL_RCC_OscConfig+0x764>
 800abce:	e045      	b.n	800ac5c <HAL_RCC_OscConfig+0x810>
 800abd0:	58024800 	.word	0x58024800
 800abd4:	58024400 	.word	0x58024400
 800abd8:	fffffc0c 	.word	0xfffffc0c
 800abdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800abe0:	4b21      	ldr	r3, [pc, #132]	; (800ac68 <HAL_RCC_OscConfig+0x81c>)
 800abe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800abe6:	4b20      	ldr	r3, [pc, #128]	; (800ac68 <HAL_RCC_OscConfig+0x81c>)
 800abe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d031      	beq.n	800ac58 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f003 0203 	and.w	r2, r3, #3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d12a      	bne.n	800ac58 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	091b      	lsrs	r3, r3, #4
 800ac06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d122      	bne.n	800ac58 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d11a      	bne.n	800ac58 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	0a5b      	lsrs	r3, r3, #9
 800ac26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d111      	bne.n	800ac58 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	0c1b      	lsrs	r3, r3, #16
 800ac38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d108      	bne.n	800ac58 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	0e1b      	lsrs	r3, r3, #24
 800ac4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d001      	beq.n	800ac5c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e000      	b.n	800ac5e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3730      	adds	r7, #48	; 0x30
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	58024400 	.word	0x58024400

0800ac6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e19c      	b.n	800afba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ac80:	4b8a      	ldr	r3, [pc, #552]	; (800aeac <HAL_RCC_ClockConfig+0x240>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 030f 	and.w	r3, r3, #15
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d910      	bls.n	800acb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac8e:	4b87      	ldr	r3, [pc, #540]	; (800aeac <HAL_RCC_ClockConfig+0x240>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f023 020f 	bic.w	r2, r3, #15
 800ac96:	4985      	ldr	r1, [pc, #532]	; (800aeac <HAL_RCC_ClockConfig+0x240>)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac9e:	4b83      	ldr	r3, [pc, #524]	; (800aeac <HAL_RCC_ClockConfig+0x240>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 030f 	and.w	r3, r3, #15
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d001      	beq.n	800acb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e184      	b.n	800afba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d010      	beq.n	800acde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	691a      	ldr	r2, [r3, #16]
 800acc0:	4b7b      	ldr	r3, [pc, #492]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acc8:	429a      	cmp	r2, r3
 800acca:	d908      	bls.n	800acde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800accc:	4b78      	ldr	r3, [pc, #480]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	4975      	ldr	r1, [pc, #468]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0308 	and.w	r3, r3, #8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d010      	beq.n	800ad0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	695a      	ldr	r2, [r3, #20]
 800acee:	4b70      	ldr	r3, [pc, #448]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d908      	bls.n	800ad0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800acfa:	4b6d      	ldr	r3, [pc, #436]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	695b      	ldr	r3, [r3, #20]
 800ad06:	496a      	ldr	r1, [pc, #424]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0310 	and.w	r3, r3, #16
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d010      	beq.n	800ad3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	699a      	ldr	r2, [r3, #24]
 800ad1c:	4b64      	ldr	r3, [pc, #400]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d908      	bls.n	800ad3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad28:	4b61      	ldr	r3, [pc, #388]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	495e      	ldr	r1, [pc, #376]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0320 	and.w	r3, r3, #32
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d010      	beq.n	800ad68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	69da      	ldr	r2, [r3, #28]
 800ad4a:	4b59      	ldr	r3, [pc, #356]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d908      	bls.n	800ad68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ad56:	4b56      	ldr	r3, [pc, #344]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	4953      	ldr	r1, [pc, #332]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad64:	4313      	orrs	r3, r2
 800ad66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 0302 	and.w	r3, r3, #2
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d010      	beq.n	800ad96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	4b4d      	ldr	r3, [pc, #308]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d908      	bls.n	800ad96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad84:	4b4a      	ldr	r3, [pc, #296]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	f023 020f 	bic.w	r2, r3, #15
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	4947      	ldr	r1, [pc, #284]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d055      	beq.n	800ae4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ada2:	4b43      	ldr	r3, [pc, #268]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	4940      	ldr	r1, [pc, #256]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d107      	bne.n	800adcc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800adbc:	4b3c      	ldr	r3, [pc, #240]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d121      	bne.n	800ae0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e0f6      	b.n	800afba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	2b03      	cmp	r3, #3
 800add2:	d107      	bne.n	800ade4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800add4:	4b36      	ldr	r3, [pc, #216]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d115      	bne.n	800ae0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e0ea      	b.n	800afba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d107      	bne.n	800adfc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800adec:	4b30      	ldr	r3, [pc, #192]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d109      	bne.n	800ae0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e0de      	b.n	800afba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800adfc:	4b2c      	ldr	r3, [pc, #176]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 0304 	and.w	r3, r3, #4
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e0d6      	b.n	800afba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae0c:	4b28      	ldr	r3, [pc, #160]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	f023 0207 	bic.w	r2, r3, #7
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	4925      	ldr	r1, [pc, #148]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae1e:	f7f9 fa35 	bl	800428c <HAL_GetTick>
 800ae22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae24:	e00a      	b.n	800ae3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae26:	f7f9 fa31 	bl	800428c <HAL_GetTick>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d901      	bls.n	800ae3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e0be      	b.n	800afba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae3c:	4b1c      	ldr	r3, [pc, #112]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d1eb      	bne.n	800ae26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d010      	beq.n	800ae7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	68da      	ldr	r2, [r3, #12]
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d208      	bcs.n	800ae7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae6a:	4b11      	ldr	r3, [pc, #68]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	f023 020f 	bic.w	r2, r3, #15
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	490e      	ldr	r1, [pc, #56]	; (800aeb0 <HAL_RCC_ClockConfig+0x244>)
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae7c:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <HAL_RCC_ClockConfig+0x240>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d214      	bcs.n	800aeb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae8a:	4b08      	ldr	r3, [pc, #32]	; (800aeac <HAL_RCC_ClockConfig+0x240>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f023 020f 	bic.w	r2, r3, #15
 800ae92:	4906      	ldr	r1, [pc, #24]	; (800aeac <HAL_RCC_ClockConfig+0x240>)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae9a:	4b04      	ldr	r3, [pc, #16]	; (800aeac <HAL_RCC_ClockConfig+0x240>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 030f 	and.w	r3, r3, #15
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d005      	beq.n	800aeb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e086      	b.n	800afba <HAL_RCC_ClockConfig+0x34e>
 800aeac:	52002000 	.word	0x52002000
 800aeb0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d010      	beq.n	800aee2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	4b3f      	ldr	r3, [pc, #252]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aecc:	429a      	cmp	r2, r3
 800aece:	d208      	bcs.n	800aee2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aed0:	4b3c      	ldr	r3, [pc, #240]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	4939      	ldr	r1, [pc, #228]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0308 	and.w	r3, r3, #8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d010      	beq.n	800af10 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	695a      	ldr	r2, [r3, #20]
 800aef2:	4b34      	ldr	r3, [pc, #208]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d208      	bcs.n	800af10 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aefe:	4b31      	ldr	r3, [pc, #196]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af00:	69db      	ldr	r3, [r3, #28]
 800af02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	492e      	ldr	r1, [pc, #184]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af0c:	4313      	orrs	r3, r2
 800af0e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0310 	and.w	r3, r3, #16
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d010      	beq.n	800af3e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	699a      	ldr	r2, [r3, #24]
 800af20:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af28:	429a      	cmp	r2, r3
 800af2a:	d208      	bcs.n	800af3e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af2c:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af2e:	69db      	ldr	r3, [r3, #28]
 800af30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	4922      	ldr	r1, [pc, #136]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0320 	and.w	r3, r3, #32
 800af46:	2b00      	cmp	r3, #0
 800af48:	d010      	beq.n	800af6c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	69da      	ldr	r2, [r3, #28]
 800af4e:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af56:	429a      	cmp	r2, r3
 800af58:	d208      	bcs.n	800af6c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800af5a:	4b1a      	ldr	r3, [pc, #104]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	4917      	ldr	r1, [pc, #92]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af6c:	f000 f834 	bl	800afd8 <HAL_RCC_GetSysClockFreq>
 800af70:	4602      	mov	r2, r0
 800af72:	4b14      	ldr	r3, [pc, #80]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	0a1b      	lsrs	r3, r3, #8
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	4912      	ldr	r1, [pc, #72]	; (800afc8 <HAL_RCC_ClockConfig+0x35c>)
 800af7e:	5ccb      	ldrb	r3, [r1, r3]
 800af80:	f003 031f 	and.w	r3, r3, #31
 800af84:	fa22 f303 	lsr.w	r3, r2, r3
 800af88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af8a:	4b0e      	ldr	r3, [pc, #56]	; (800afc4 <HAL_RCC_ClockConfig+0x358>)
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	f003 030f 	and.w	r3, r3, #15
 800af92:	4a0d      	ldr	r2, [pc, #52]	; (800afc8 <HAL_RCC_ClockConfig+0x35c>)
 800af94:	5cd3      	ldrb	r3, [r2, r3]
 800af96:	f003 031f 	and.w	r3, r3, #31
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	fa22 f303 	lsr.w	r3, r2, r3
 800afa0:	4a0a      	ldr	r2, [pc, #40]	; (800afcc <HAL_RCC_ClockConfig+0x360>)
 800afa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afa4:	4a0a      	ldr	r2, [pc, #40]	; (800afd0 <HAL_RCC_ClockConfig+0x364>)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800afaa:	4b0a      	ldr	r3, [pc, #40]	; (800afd4 <HAL_RCC_ClockConfig+0x368>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7f9 f922 	bl	80041f8 <HAL_InitTick>
 800afb4:	4603      	mov	r3, r0
 800afb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	58024400 	.word	0x58024400
 800afc8:	08027bbc 	.word	0x08027bbc
 800afcc:	24000004 	.word	0x24000004
 800afd0:	24000000 	.word	0x24000000
 800afd4:	24000008 	.word	0x24000008

0800afd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afd8:	b480      	push	{r7}
 800afda:	b089      	sub	sp, #36	; 0x24
 800afdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afde:	4bb3      	ldr	r3, [pc, #716]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afe6:	2b18      	cmp	r3, #24
 800afe8:	f200 8155 	bhi.w	800b296 <HAL_RCC_GetSysClockFreq+0x2be>
 800afec:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b059 	.word	0x0800b059
 800aff8:	0800b297 	.word	0x0800b297
 800affc:	0800b297 	.word	0x0800b297
 800b000:	0800b297 	.word	0x0800b297
 800b004:	0800b297 	.word	0x0800b297
 800b008:	0800b297 	.word	0x0800b297
 800b00c:	0800b297 	.word	0x0800b297
 800b010:	0800b297 	.word	0x0800b297
 800b014:	0800b07f 	.word	0x0800b07f
 800b018:	0800b297 	.word	0x0800b297
 800b01c:	0800b297 	.word	0x0800b297
 800b020:	0800b297 	.word	0x0800b297
 800b024:	0800b297 	.word	0x0800b297
 800b028:	0800b297 	.word	0x0800b297
 800b02c:	0800b297 	.word	0x0800b297
 800b030:	0800b297 	.word	0x0800b297
 800b034:	0800b085 	.word	0x0800b085
 800b038:	0800b297 	.word	0x0800b297
 800b03c:	0800b297 	.word	0x0800b297
 800b040:	0800b297 	.word	0x0800b297
 800b044:	0800b297 	.word	0x0800b297
 800b048:	0800b297 	.word	0x0800b297
 800b04c:	0800b297 	.word	0x0800b297
 800b050:	0800b297 	.word	0x0800b297
 800b054:	0800b08b 	.word	0x0800b08b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b058:	4b94      	ldr	r3, [pc, #592]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0320 	and.w	r3, r3, #32
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b064:	4b91      	ldr	r3, [pc, #580]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	08db      	lsrs	r3, r3, #3
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	4a90      	ldr	r2, [pc, #576]	; (800b2b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b070:	fa22 f303 	lsr.w	r3, r2, r3
 800b074:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b076:	e111      	b.n	800b29c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b078:	4b8d      	ldr	r3, [pc, #564]	; (800b2b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b07a:	61bb      	str	r3, [r7, #24]
    break;
 800b07c:	e10e      	b.n	800b29c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b07e:	4b8d      	ldr	r3, [pc, #564]	; (800b2b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b080:	61bb      	str	r3, [r7, #24]
    break;
 800b082:	e10b      	b.n	800b29c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b084:	4b8c      	ldr	r3, [pc, #560]	; (800b2b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b086:	61bb      	str	r3, [r7, #24]
    break;
 800b088:	e108      	b.n	800b29c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b08a:	4b88      	ldr	r3, [pc, #544]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b094:	4b85      	ldr	r3, [pc, #532]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b098:	091b      	lsrs	r3, r3, #4
 800b09a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b09e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b0a0:	4b82      	ldr	r3, [pc, #520]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b0aa:	4b80      	ldr	r3, [pc, #512]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ae:	08db      	lsrs	r3, r3, #3
 800b0b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ba:	ee07 3a90 	vmov	s15, r3
 800b0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 80e1 	beq.w	800b290 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	f000 8083 	beq.w	800b1dc <HAL_RCC_GetSysClockFreq+0x204>
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	f200 80a1 	bhi.w	800b220 <HAL_RCC_GetSysClockFreq+0x248>
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d003      	beq.n	800b0ec <HAL_RCC_GetSysClockFreq+0x114>
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d056      	beq.n	800b198 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b0ea:	e099      	b.n	800b220 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ec:	4b6f      	ldr	r3, [pc, #444]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 0320 	and.w	r3, r3, #32
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d02d      	beq.n	800b154 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0f8:	4b6c      	ldr	r3, [pc, #432]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	08db      	lsrs	r3, r3, #3
 800b0fe:	f003 0303 	and.w	r3, r3, #3
 800b102:	4a6b      	ldr	r2, [pc, #428]	; (800b2b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b104:	fa22 f303 	lsr.w	r3, r2, r3
 800b108:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	ee07 3a90 	vmov	s15, r3
 800b110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b122:	4b62      	ldr	r3, [pc, #392]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b132:	ed97 6a02 	vldr	s12, [r7, #8]
 800b136:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b2bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b152:	e087      	b.n	800b264 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b2c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b166:	4b51      	ldr	r3, [pc, #324]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16e:	ee07 3a90 	vmov	s15, r3
 800b172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b176:	ed97 6a02 	vldr	s12, [r7, #8]
 800b17a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b2bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b196:	e065      	b.n	800b264 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b2c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1aa:	4b40      	ldr	r3, [pc, #256]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b2:	ee07 3a90 	vmov	s15, r3
 800b1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b2bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1da:	e043      	b.n	800b264 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b2c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ee:	4b2f      	ldr	r3, [pc, #188]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f6:	ee07 3a90 	vmov	s15, r3
 800b1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b202:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b2bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b21e:	e021      	b.n	800b264 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b2c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b232:	4b1e      	ldr	r3, [pc, #120]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23a:	ee07 3a90 	vmov	s15, r3
 800b23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b242:	ed97 6a02 	vldr	s12, [r7, #8]
 800b246:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b2bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b262:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b264:	4b11      	ldr	r3, [pc, #68]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b268:	0a5b      	lsrs	r3, r3, #9
 800b26a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b26e:	3301      	adds	r3, #1
 800b270:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	ee07 3a90 	vmov	s15, r3
 800b278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b27c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b288:	ee17 3a90 	vmov	r3, s15
 800b28c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b28e:	e005      	b.n	800b29c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	61bb      	str	r3, [r7, #24]
    break;
 800b294:	e002      	b.n	800b29c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b296:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b298:	61bb      	str	r3, [r7, #24]
    break;
 800b29a:	bf00      	nop
  }

  return sysclockfreq;
 800b29c:	69bb      	ldr	r3, [r7, #24]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3724      	adds	r7, #36	; 0x24
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	58024400 	.word	0x58024400
 800b2b0:	03d09000 	.word	0x03d09000
 800b2b4:	003d0900 	.word	0x003d0900
 800b2b8:	017d7840 	.word	0x017d7840
 800b2bc:	46000000 	.word	0x46000000
 800b2c0:	4c742400 	.word	0x4c742400
 800b2c4:	4a742400 	.word	0x4a742400
 800b2c8:	4bbebc20 	.word	0x4bbebc20

0800b2cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b2d2:	f7ff fe81 	bl	800afd8 <HAL_RCC_GetSysClockFreq>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	4b10      	ldr	r3, [pc, #64]	; (800b31c <HAL_RCC_GetHCLKFreq+0x50>)
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	0a1b      	lsrs	r3, r3, #8
 800b2de:	f003 030f 	and.w	r3, r3, #15
 800b2e2:	490f      	ldr	r1, [pc, #60]	; (800b320 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2e4:	5ccb      	ldrb	r3, [r1, r3]
 800b2e6:	f003 031f 	and.w	r3, r3, #31
 800b2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2f0:	4b0a      	ldr	r3, [pc, #40]	; (800b31c <HAL_RCC_GetHCLKFreq+0x50>)
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	f003 030f 	and.w	r3, r3, #15
 800b2f8:	4a09      	ldr	r2, [pc, #36]	; (800b320 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2fa:	5cd3      	ldrb	r3, [r2, r3]
 800b2fc:	f003 031f 	and.w	r3, r3, #31
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	fa22 f303 	lsr.w	r3, r2, r3
 800b306:	4a07      	ldr	r2, [pc, #28]	; (800b324 <HAL_RCC_GetHCLKFreq+0x58>)
 800b308:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b30a:	4a07      	ldr	r2, [pc, #28]	; (800b328 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b310:	4b04      	ldr	r3, [pc, #16]	; (800b324 <HAL_RCC_GetHCLKFreq+0x58>)
 800b312:	681b      	ldr	r3, [r3, #0]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	58024400 	.word	0x58024400
 800b320:	08027bbc 	.word	0x08027bbc
 800b324:	24000004 	.word	0x24000004
 800b328:	24000000 	.word	0x24000000

0800b32c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b330:	f7ff ffcc 	bl	800b2cc <HAL_RCC_GetHCLKFreq>
 800b334:	4602      	mov	r2, r0
 800b336:	4b06      	ldr	r3, [pc, #24]	; (800b350 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	091b      	lsrs	r3, r3, #4
 800b33c:	f003 0307 	and.w	r3, r3, #7
 800b340:	4904      	ldr	r1, [pc, #16]	; (800b354 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b342:	5ccb      	ldrb	r3, [r1, r3]
 800b344:	f003 031f 	and.w	r3, r3, #31
 800b348:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	58024400 	.word	0x58024400
 800b354:	08027bbc 	.word	0x08027bbc

0800b358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b35c:	f7ff ffb6 	bl	800b2cc <HAL_RCC_GetHCLKFreq>
 800b360:	4602      	mov	r2, r0
 800b362:	4b06      	ldr	r3, [pc, #24]	; (800b37c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	0a1b      	lsrs	r3, r3, #8
 800b368:	f003 0307 	and.w	r3, r3, #7
 800b36c:	4904      	ldr	r1, [pc, #16]	; (800b380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b36e:	5ccb      	ldrb	r3, [r1, r3]
 800b370:	f003 031f 	and.w	r3, r3, #31
 800b374:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b378:	4618      	mov	r0, r3
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	58024400 	.word	0x58024400
 800b380:	08027bbc 	.word	0x08027bbc

0800b384 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b38c:	2300      	movs	r3, #0
 800b38e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b390:	2300      	movs	r3, #0
 800b392:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d03f      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3a8:	d02a      	beq.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b3aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3ae:	d824      	bhi.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b3b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3b4:	d018      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b3b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3ba:	d81e      	bhi.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d003      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b3c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3c4:	d007      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b3c6:	e018      	b.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3c8:	4bab      	ldr	r3, [pc, #684]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3cc:	4aaa      	ldr	r2, [pc, #680]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b3d4:	e015      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	2102      	movs	r1, #2
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 fff3 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b3e6:	e00c      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3324      	adds	r3, #36	; 0x24
 800b3ec:	2102      	movs	r1, #2
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f002 f89c 	bl	800d52c <RCCEx_PLL3_Config>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b3f8:	e003      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	75fb      	strb	r3, [r7, #23]
      break;
 800b3fe:	e000      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b400:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d109      	bne.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b408:	4b9b      	ldr	r3, [pc, #620]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b40c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b414:	4998      	ldr	r1, [pc, #608]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b416:	4313      	orrs	r3, r2
 800b418:	650b      	str	r3, [r1, #80]	; 0x50
 800b41a:	e001      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
 800b41e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d03d      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b430:	2b04      	cmp	r3, #4
 800b432:	d826      	bhi.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b434:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43a:	bf00      	nop
 800b43c:	0800b451 	.word	0x0800b451
 800b440:	0800b45f 	.word	0x0800b45f
 800b444:	0800b471 	.word	0x0800b471
 800b448:	0800b489 	.word	0x0800b489
 800b44c:	0800b489 	.word	0x0800b489
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b450:	4b89      	ldr	r3, [pc, #548]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	4a88      	ldr	r2, [pc, #544]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b45a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b45c:	e015      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	3304      	adds	r3, #4
 800b462:	2100      	movs	r1, #0
 800b464:	4618      	mov	r0, r3
 800b466:	f001 ffaf 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b46a:	4603      	mov	r3, r0
 800b46c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b46e:	e00c      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	3324      	adds	r3, #36	; 0x24
 800b474:	2100      	movs	r1, #0
 800b476:	4618      	mov	r0, r3
 800b478:	f002 f858 	bl	800d52c <RCCEx_PLL3_Config>
 800b47c:	4603      	mov	r3, r0
 800b47e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b480:	e003      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	75fb      	strb	r3, [r7, #23]
      break;
 800b486:	e000      	b.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d109      	bne.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b490:	4b79      	ldr	r3, [pc, #484]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b494:	f023 0207 	bic.w	r2, r3, #7
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49c:	4976      	ldr	r1, [pc, #472]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	650b      	str	r3, [r1, #80]	; 0x50
 800b4a2:	e001      	b.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d042      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4bc:	d02b      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b4be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c2:	d825      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b4c4:	2bc0      	cmp	r3, #192	; 0xc0
 800b4c6:	d028      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b4c8:	2bc0      	cmp	r3, #192	; 0xc0
 800b4ca:	d821      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b4cc:	2b80      	cmp	r3, #128	; 0x80
 800b4ce:	d016      	beq.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b4d0:	2b80      	cmp	r3, #128	; 0x80
 800b4d2:	d81d      	bhi.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b4d8:	2b40      	cmp	r3, #64	; 0x40
 800b4da:	d007      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b4dc:	e018      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4de:	4b66      	ldr	r3, [pc, #408]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	4a65      	ldr	r2, [pc, #404]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b4ea:	e017      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	3304      	adds	r3, #4
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f001 ff68 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b4fc:	e00e      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	3324      	adds	r3, #36	; 0x24
 800b502:	2100      	movs	r1, #0
 800b504:	4618      	mov	r0, r3
 800b506:	f002 f811 	bl	800d52c <RCCEx_PLL3_Config>
 800b50a:	4603      	mov	r3, r0
 800b50c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b50e:	e005      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	75fb      	strb	r3, [r7, #23]
      break;
 800b514:	e002      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b516:	bf00      	nop
 800b518:	e000      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b51a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b522:	4b55      	ldr	r3, [pc, #340]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b526:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52e:	4952      	ldr	r1, [pc, #328]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b530:	4313      	orrs	r3, r2
 800b532:	650b      	str	r3, [r1, #80]	; 0x50
 800b534:	e001      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b536:	7dfb      	ldrb	r3, [r7, #23]
 800b538:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b542:	2b00      	cmp	r3, #0
 800b544:	d049      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b54c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b550:	d030      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b552:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b556:	d82a      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b558:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b55c:	d02c      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b55e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b562:	d824      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b568:	d018      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b56a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b56e:	d81e      	bhi.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b578:	d007      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b57a:	e018      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b57c:	4b3e      	ldr	r3, [pc, #248]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b580:	4a3d      	ldr	r2, [pc, #244]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b588:	e017      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	3304      	adds	r3, #4
 800b58e:	2100      	movs	r1, #0
 800b590:	4618      	mov	r0, r3
 800b592:	f001 ff19 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b596:	4603      	mov	r3, r0
 800b598:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b59a:	e00e      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3324      	adds	r3, #36	; 0x24
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f001 ffc2 	bl	800d52c <RCCEx_PLL3_Config>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b5ac:	e005      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b5b2:	e002      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b5b4:	bf00      	nop
 800b5b6:	e000      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b5b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10a      	bne.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b5c0:	4b2d      	ldr	r3, [pc, #180]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5ce:	492a      	ldr	r1, [pc, #168]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	658b      	str	r3, [r1, #88]	; 0x58
 800b5d4:	e001      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d6:	7dfb      	ldrb	r3, [r7, #23]
 800b5d8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d04c      	beq.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b5ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5f0:	d030      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b5f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5f6:	d82a      	bhi.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b5f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b5fc:	d02c      	beq.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b5fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b602:	d824      	bhi.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b604:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b608:	d018      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b60a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b60e:	d81e      	bhi.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b610:	2b00      	cmp	r3, #0
 800b612:	d003      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b618:	d007      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b61a:	e018      	b.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b61c:	4b16      	ldr	r3, [pc, #88]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	4a15      	ldr	r2, [pc, #84]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b626:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b628:	e017      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	3304      	adds	r3, #4
 800b62e:	2100      	movs	r1, #0
 800b630:	4618      	mov	r0, r3
 800b632:	f001 fec9 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b636:	4603      	mov	r3, r0
 800b638:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b63a:	e00e      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	3324      	adds	r3, #36	; 0x24
 800b640:	2100      	movs	r1, #0
 800b642:	4618      	mov	r0, r3
 800b644:	f001 ff72 	bl	800d52c <RCCEx_PLL3_Config>
 800b648:	4603      	mov	r3, r0
 800b64a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b64c:	e005      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	75fb      	strb	r3, [r7, #23]
      break;
 800b652:	e002      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b654:	bf00      	nop
 800b656:	e000      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b65a:	7dfb      	ldrb	r3, [r7, #23]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d10d      	bne.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b660:	4b05      	ldr	r3, [pc, #20]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b664:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b66e:	4902      	ldr	r1, [pc, #8]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b670:	4313      	orrs	r3, r2
 800b672:	658b      	str	r3, [r1, #88]	; 0x58
 800b674:	e004      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b676:	bf00      	nop
 800b678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d032      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b690:	2b30      	cmp	r3, #48	; 0x30
 800b692:	d01c      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b694:	2b30      	cmp	r3, #48	; 0x30
 800b696:	d817      	bhi.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b698:	2b20      	cmp	r3, #32
 800b69a:	d00c      	beq.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b69c:	2b20      	cmp	r3, #32
 800b69e:	d813      	bhi.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d016      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b6a4:	2b10      	cmp	r3, #16
 800b6a6:	d10f      	bne.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6a8:	4baf      	ldr	r3, [pc, #700]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ac:	4aae      	ldr	r2, [pc, #696]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b6b4:	e00e      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	2102      	movs	r1, #2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f001 fe83 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b6c6:	e005      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b6cc:	e002      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b6ce:	bf00      	nop
 800b6d0:	e000      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b6d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d109      	bne.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b6da:	4ba3      	ldr	r3, [pc, #652]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e6:	49a0      	ldr	r1, [pc, #640]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b6ec:	e001      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
 800b6f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d047      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b706:	d030      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b70c:	d82a      	bhi.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b70e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b712:	d02c      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b714:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b718:	d824      	bhi.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b71a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b71e:	d018      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b724:	d81e      	bhi.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b72a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b72e:	d007      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b730:	e018      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b732:	4b8d      	ldr	r3, [pc, #564]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b736:	4a8c      	ldr	r2, [pc, #560]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b73c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b73e:	e017      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3304      	adds	r3, #4
 800b744:	2100      	movs	r1, #0
 800b746:	4618      	mov	r0, r3
 800b748:	f001 fe3e 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b74c:	4603      	mov	r3, r0
 800b74e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b750:	e00e      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3324      	adds	r3, #36	; 0x24
 800b756:	2100      	movs	r1, #0
 800b758:	4618      	mov	r0, r3
 800b75a:	f001 fee7 	bl	800d52c <RCCEx_PLL3_Config>
 800b75e:	4603      	mov	r3, r0
 800b760:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b762:	e005      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	75fb      	strb	r3, [r7, #23]
      break;
 800b768:	e002      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b76a:	bf00      	nop
 800b76c:	e000      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b76e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d109      	bne.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b776:	4b7c      	ldr	r3, [pc, #496]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b77a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b782:	4979      	ldr	r1, [pc, #484]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b784:	4313      	orrs	r3, r2
 800b786:	650b      	str	r3, [r1, #80]	; 0x50
 800b788:	e001      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b796:	2b00      	cmp	r3, #0
 800b798:	d049      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b79e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7a2:	d02e      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b7a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7a8:	d828      	bhi.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b7aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7ae:	d02a      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b7b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7b4:	d822      	bhi.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b7b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b7ba:	d026      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b7bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b7c0:	d81c      	bhi.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b7c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7c6:	d010      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b7c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7cc:	d816      	bhi.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d01d      	beq.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b7d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d6:	d111      	bne.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	2101      	movs	r1, #1
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f001 fdf2 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b7e8:	e012      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	3324      	adds	r3, #36	; 0x24
 800b7ee:	2101      	movs	r1, #1
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f001 fe9b 	bl	800d52c <RCCEx_PLL3_Config>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b7fa:	e009      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b800:	e006      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b802:	bf00      	nop
 800b804:	e004      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b806:	bf00      	nop
 800b808:	e002      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b80a:	bf00      	nop
 800b80c:	e000      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b80e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b810:	7dfb      	ldrb	r3, [r7, #23]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d109      	bne.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b816:	4b54      	ldr	r3, [pc, #336]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b822:	4951      	ldr	r1, [pc, #324]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b824:	4313      	orrs	r3, r2
 800b826:	650b      	str	r3, [r1, #80]	; 0x50
 800b828:	e001      	b.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
 800b82c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b836:	2b00      	cmp	r3, #0
 800b838:	d04b      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b844:	d02e      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b84a:	d828      	bhi.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b850:	d02a      	beq.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b856:	d822      	bhi.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b858:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b85c:	d026      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b85e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b862:	d81c      	bhi.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b868:	d010      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b86a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b86e:	d816      	bhi.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b870:	2b00      	cmp	r3, #0
 800b872:	d01d      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b874:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b878:	d111      	bne.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	3304      	adds	r3, #4
 800b87e:	2101      	movs	r1, #1
 800b880:	4618      	mov	r0, r3
 800b882:	f001 fda1 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b886:	4603      	mov	r3, r0
 800b888:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b88a:	e012      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3324      	adds	r3, #36	; 0x24
 800b890:	2101      	movs	r1, #1
 800b892:	4618      	mov	r0, r3
 800b894:	f001 fe4a 	bl	800d52c <RCCEx_PLL3_Config>
 800b898:	4603      	mov	r3, r0
 800b89a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b89c:	e009      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b8a2:	e006      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b8a4:	bf00      	nop
 800b8a6:	e004      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b8a8:	bf00      	nop
 800b8aa:	e002      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b8ac:	bf00      	nop
 800b8ae:	e000      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b8b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b8b8:	4b2b      	ldr	r3, [pc, #172]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8bc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b8c6:	4928      	ldr	r1, [pc, #160]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	658b      	str	r3, [r1, #88]	; 0x58
 800b8cc:	e001      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
 800b8d0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d02f      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8e6:	d00e      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b8e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ec:	d814      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d015      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b8f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8f6:	d10f      	bne.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8f8:	4b1b      	ldr	r3, [pc, #108]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fc:	4a1a      	ldr	r2, [pc, #104]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b904:	e00c      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3304      	adds	r3, #4
 800b90a:	2101      	movs	r1, #1
 800b90c:	4618      	mov	r0, r3
 800b90e:	f001 fd5b 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b912:	4603      	mov	r3, r0
 800b914:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b916:	e003      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]
      break;
 800b91c:	e000      	b.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b91e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d109      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b926:	4b10      	ldr	r3, [pc, #64]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b932:	490d      	ldr	r1, [pc, #52]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b934:	4313      	orrs	r3, r2
 800b936:	650b      	str	r3, [r1, #80]	; 0x50
 800b938:	e001      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d033      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d81c      	bhi.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b952:	a201      	add	r2, pc, #4	; (adr r2, 800b958 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b958:	0800b993 	.word	0x0800b993
 800b95c:	0800b96d 	.word	0x0800b96d
 800b960:	0800b97b 	.word	0x0800b97b
 800b964:	0800b993 	.word	0x0800b993
 800b968:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b96c:	4bb8      	ldr	r3, [pc, #736]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b970:	4ab7      	ldr	r2, [pc, #732]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b978:	e00c      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3304      	adds	r3, #4
 800b97e:	2102      	movs	r1, #2
 800b980:	4618      	mov	r0, r3
 800b982:	f001 fd21 	bl	800d3c8 <RCCEx_PLL2_Config>
 800b986:	4603      	mov	r3, r0
 800b988:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b98a:	e003      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	75fb      	strb	r3, [r7, #23]
      break;
 800b990:	e000      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b992:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b994:	7dfb      	ldrb	r3, [r7, #23]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d109      	bne.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b99a:	4bad      	ldr	r3, [pc, #692]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b99c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b99e:	f023 0203 	bic.w	r2, r3, #3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a6:	49aa      	ldr	r1, [pc, #680]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b9ac:	e001      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 8086 	beq.w	800bacc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b9c0:	4ba4      	ldr	r3, [pc, #656]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4aa3      	ldr	r2, [pc, #652]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b9c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b9cc:	f7f8 fc5e 	bl	800428c <HAL_GetTick>
 800b9d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9d2:	e009      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9d4:	f7f8 fc5a 	bl	800428c <HAL_GetTick>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	2b64      	cmp	r3, #100	; 0x64
 800b9e0:	d902      	bls.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	75fb      	strb	r3, [r7, #23]
        break;
 800b9e6:	e005      	b.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9e8:	4b9a      	ldr	r3, [pc, #616]	; (800bc54 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d0ef      	beq.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d166      	bne.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b9fa:	4b95      	ldr	r3, [pc, #596]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba04:	4053      	eors	r3, r2
 800ba06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d013      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba0e:	4b90      	ldr	r3, [pc, #576]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba16:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba18:	4b8d      	ldr	r3, [pc, #564]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba1c:	4a8c      	ldr	r2, [pc, #560]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba22:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba24:	4b8a      	ldr	r3, [pc, #552]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba28:	4a89      	ldr	r2, [pc, #548]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba2e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ba30:	4a87      	ldr	r2, [pc, #540]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba40:	d115      	bne.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba42:	f7f8 fc23 	bl	800428c <HAL_GetTick>
 800ba46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba48:	e00b      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba4a:	f7f8 fc1f 	bl	800428c <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d902      	bls.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	75fb      	strb	r3, [r7, #23]
            break;
 800ba60:	e005      	b.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba62:	4b7b      	ldr	r3, [pc, #492]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba66:	f003 0302 	and.w	r3, r3, #2
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0ed      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d126      	bne.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba82:	d10d      	bne.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ba84:	4b72      	ldr	r3, [pc, #456]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba92:	0919      	lsrs	r1, r3, #4
 800ba94:	4b70      	ldr	r3, [pc, #448]	; (800bc58 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800ba96:	400b      	ands	r3, r1
 800ba98:	496d      	ldr	r1, [pc, #436]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	610b      	str	r3, [r1, #16]
 800ba9e:	e005      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x728>
 800baa0:	4b6b      	ldr	r3, [pc, #428]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	4a6a      	ldr	r2, [pc, #424]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800baa6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800baaa:	6113      	str	r3, [r2, #16]
 800baac:	4b68      	ldr	r3, [pc, #416]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800baae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800baba:	4965      	ldr	r1, [pc, #404]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800babc:	4313      	orrs	r3, r2
 800babe:	670b      	str	r3, [r1, #112]	; 0x70
 800bac0:	e004      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	75bb      	strb	r3, [r7, #22]
 800bac6:	e001      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
 800baca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d07e      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800badc:	2b28      	cmp	r3, #40	; 0x28
 800bade:	d867      	bhi.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bae0:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800bbb7 	.word	0x0800bbb7
 800baec:	0800bbb1 	.word	0x0800bbb1
 800baf0:	0800bbb1 	.word	0x0800bbb1
 800baf4:	0800bbb1 	.word	0x0800bbb1
 800baf8:	0800bbb1 	.word	0x0800bbb1
 800bafc:	0800bbb1 	.word	0x0800bbb1
 800bb00:	0800bbb1 	.word	0x0800bbb1
 800bb04:	0800bbb1 	.word	0x0800bbb1
 800bb08:	0800bb8d 	.word	0x0800bb8d
 800bb0c:	0800bbb1 	.word	0x0800bbb1
 800bb10:	0800bbb1 	.word	0x0800bbb1
 800bb14:	0800bbb1 	.word	0x0800bbb1
 800bb18:	0800bbb1 	.word	0x0800bbb1
 800bb1c:	0800bbb1 	.word	0x0800bbb1
 800bb20:	0800bbb1 	.word	0x0800bbb1
 800bb24:	0800bbb1 	.word	0x0800bbb1
 800bb28:	0800bb9f 	.word	0x0800bb9f
 800bb2c:	0800bbb1 	.word	0x0800bbb1
 800bb30:	0800bbb1 	.word	0x0800bbb1
 800bb34:	0800bbb1 	.word	0x0800bbb1
 800bb38:	0800bbb1 	.word	0x0800bbb1
 800bb3c:	0800bbb1 	.word	0x0800bbb1
 800bb40:	0800bbb1 	.word	0x0800bbb1
 800bb44:	0800bbb1 	.word	0x0800bbb1
 800bb48:	0800bbb7 	.word	0x0800bbb7
 800bb4c:	0800bbb1 	.word	0x0800bbb1
 800bb50:	0800bbb1 	.word	0x0800bbb1
 800bb54:	0800bbb1 	.word	0x0800bbb1
 800bb58:	0800bbb1 	.word	0x0800bbb1
 800bb5c:	0800bbb1 	.word	0x0800bbb1
 800bb60:	0800bbb1 	.word	0x0800bbb1
 800bb64:	0800bbb1 	.word	0x0800bbb1
 800bb68:	0800bbb7 	.word	0x0800bbb7
 800bb6c:	0800bbb1 	.word	0x0800bbb1
 800bb70:	0800bbb1 	.word	0x0800bbb1
 800bb74:	0800bbb1 	.word	0x0800bbb1
 800bb78:	0800bbb1 	.word	0x0800bbb1
 800bb7c:	0800bbb1 	.word	0x0800bbb1
 800bb80:	0800bbb1 	.word	0x0800bbb1
 800bb84:	0800bbb1 	.word	0x0800bbb1
 800bb88:	0800bbb7 	.word	0x0800bbb7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	2101      	movs	r1, #1
 800bb92:	4618      	mov	r0, r3
 800bb94:	f001 fc18 	bl	800d3c8 <RCCEx_PLL2_Config>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bb9c:	e00c      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3324      	adds	r3, #36	; 0x24
 800bba2:	2101      	movs	r1, #1
 800bba4:	4618      	mov	r0, r3
 800bba6:	f001 fcc1 	bl	800d52c <RCCEx_PLL3_Config>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bbae:	e003      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	75fb      	strb	r3, [r7, #23]
      break;
 800bbb4:	e000      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800bbb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d109      	bne.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bbbe:	4b24      	ldr	r3, [pc, #144]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbca:	4921      	ldr	r1, [pc, #132]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	654b      	str	r3, [r1, #84]	; 0x54
 800bbd0:	e001      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d03e      	beq.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbe6:	2b05      	cmp	r3, #5
 800bbe8:	d820      	bhi.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc33 	.word	0x0800bc33
 800bbf4:	0800bc09 	.word	0x0800bc09
 800bbf8:	0800bc1b 	.word	0x0800bc1b
 800bbfc:	0800bc33 	.word	0x0800bc33
 800bc00:	0800bc33 	.word	0x0800bc33
 800bc04:	0800bc33 	.word	0x0800bc33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f001 fbda 	bl	800d3c8 <RCCEx_PLL2_Config>
 800bc14:	4603      	mov	r3, r0
 800bc16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bc18:	e00c      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3324      	adds	r3, #36	; 0x24
 800bc1e:	2101      	movs	r1, #1
 800bc20:	4618      	mov	r0, r3
 800bc22:	f001 fc83 	bl	800d52c <RCCEx_PLL3_Config>
 800bc26:	4603      	mov	r3, r0
 800bc28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bc2a:	e003      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	75fb      	strb	r3, [r7, #23]
      break;
 800bc30:	e000      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800bc32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d110      	bne.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bc3a:	4b05      	ldr	r3, [pc, #20]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3e:	f023 0207 	bic.w	r2, r3, #7
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc46:	4902      	ldr	r1, [pc, #8]	; (800bc50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	654b      	str	r3, [r1, #84]	; 0x54
 800bc4c:	e008      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800bc4e:	bf00      	nop
 800bc50:	58024400 	.word	0x58024400
 800bc54:	58024800 	.word	0x58024800
 800bc58:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f003 0304 	and.w	r3, r3, #4
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d039      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc72:	2b05      	cmp	r3, #5
 800bc74:	d820      	bhi.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800bc76:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800bc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7c:	0800bcbf 	.word	0x0800bcbf
 800bc80:	0800bc95 	.word	0x0800bc95
 800bc84:	0800bca7 	.word	0x0800bca7
 800bc88:	0800bcbf 	.word	0x0800bcbf
 800bc8c:	0800bcbf 	.word	0x0800bcbf
 800bc90:	0800bcbf 	.word	0x0800bcbf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3304      	adds	r3, #4
 800bc98:	2101      	movs	r1, #1
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 fb94 	bl	800d3c8 <RCCEx_PLL2_Config>
 800bca0:	4603      	mov	r3, r0
 800bca2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bca4:	e00c      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3324      	adds	r3, #36	; 0x24
 800bcaa:	2101      	movs	r1, #1
 800bcac:	4618      	mov	r0, r3
 800bcae:	f001 fc3d 	bl	800d52c <RCCEx_PLL3_Config>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bcb6:	e003      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	75fb      	strb	r3, [r7, #23]
      break;
 800bcbc:	e000      	b.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800bcbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10a      	bne.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bcc6:	4bb7      	ldr	r3, [pc, #732]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bcc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcca:	f023 0207 	bic.w	r2, r3, #7
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd4:	49b3      	ldr	r1, [pc, #716]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	658b      	str	r3, [r1, #88]	; 0x58
 800bcda:	e001      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcdc:	7dfb      	ldrb	r3, [r7, #23]
 800bcde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0320 	and.w	r3, r3, #32
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d04b      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcf6:	d02e      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800bcf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bcfc:	d828      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bcfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd02:	d02a      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bd04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd08:	d822      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bd0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd0e:	d026      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bd10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd14:	d81c      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bd16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd1a:	d010      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bd1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd20:	d816      	bhi.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d01d      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bd26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd2a:	d111      	bne.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3304      	adds	r3, #4
 800bd30:	2100      	movs	r1, #0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f001 fb48 	bl	800d3c8 <RCCEx_PLL2_Config>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bd3c:	e012      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	3324      	adds	r3, #36	; 0x24
 800bd42:	2102      	movs	r1, #2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f001 fbf1 	bl	800d52c <RCCEx_PLL3_Config>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bd4e:	e009      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	75fb      	strb	r3, [r7, #23]
      break;
 800bd54:	e006      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bd56:	bf00      	nop
 800bd58:	e004      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bd5a:	bf00      	nop
 800bd5c:	e002      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bd5e:	bf00      	nop
 800bd60:	e000      	b.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bd62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd64:	7dfb      	ldrb	r3, [r7, #23]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10a      	bne.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd6a:	4b8e      	ldr	r3, [pc, #568]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd78:	498a      	ldr	r1, [pc, #552]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	654b      	str	r3, [r1, #84]	; 0x54
 800bd7e:	e001      	b.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d04b      	beq.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bd96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd9a:	d02e      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800bd9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bda0:	d828      	bhi.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bda2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bda6:	d02a      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bda8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdac:	d822      	bhi.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bdae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bdb2:	d026      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bdb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bdb8:	d81c      	bhi.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bdba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdbe:	d010      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800bdc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdc4:	d816      	bhi.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d01d      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bdca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdce:	d111      	bne.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f001 faf6 	bl	800d3c8 <RCCEx_PLL2_Config>
 800bddc:	4603      	mov	r3, r0
 800bdde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bde0:	e012      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	3324      	adds	r3, #36	; 0x24
 800bde6:	2102      	movs	r1, #2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f001 fb9f 	bl	800d52c <RCCEx_PLL3_Config>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bdf2:	e009      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	75fb      	strb	r3, [r7, #23]
      break;
 800bdf8:	e006      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bdfa:	bf00      	nop
 800bdfc:	e004      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bdfe:	bf00      	nop
 800be00:	e002      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800be02:	bf00      	nop
 800be04:	e000      	b.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800be06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10a      	bne.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800be0e:	4b65      	ldr	r3, [pc, #404]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800be10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be1c:	4961      	ldr	r1, [pc, #388]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	658b      	str	r3, [r1, #88]	; 0x58
 800be22:	e001      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be24:	7dfb      	ldrb	r3, [r7, #23]
 800be26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be30:	2b00      	cmp	r3, #0
 800be32:	d04b      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be3e:	d02e      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800be40:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be44:	d828      	bhi.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800be46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be4a:	d02a      	beq.n	800bea2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800be4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be50:	d822      	bhi.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800be52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be56:	d026      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800be58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be5c:	d81c      	bhi.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800be5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be62:	d010      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800be64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be68:	d816      	bhi.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d01d      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800be6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be72:	d111      	bne.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3304      	adds	r3, #4
 800be78:	2100      	movs	r1, #0
 800be7a:	4618      	mov	r0, r3
 800be7c:	f001 faa4 	bl	800d3c8 <RCCEx_PLL2_Config>
 800be80:	4603      	mov	r3, r0
 800be82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800be84:	e012      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3324      	adds	r3, #36	; 0x24
 800be8a:	2102      	movs	r1, #2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 fb4d 	bl	800d52c <RCCEx_PLL3_Config>
 800be92:	4603      	mov	r3, r0
 800be94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800be96:	e009      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	75fb      	strb	r3, [r7, #23]
      break;
 800be9c:	e006      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800be9e:	bf00      	nop
 800bea0:	e004      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bea2:	bf00      	nop
 800bea4:	e002      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bea6:	bf00      	nop
 800bea8:	e000      	b.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800beaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800beac:	7dfb      	ldrb	r3, [r7, #23]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10a      	bne.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800beb2:	4b3c      	ldr	r3, [pc, #240]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800beb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bec0:	4938      	ldr	r1, [pc, #224]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bec2:	4313      	orrs	r3, r2
 800bec4:	658b      	str	r3, [r1, #88]	; 0x58
 800bec6:	e001      	b.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
 800beca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 0308 	and.w	r3, r3, #8
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d01a      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee2:	d10a      	bne.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	3324      	adds	r3, #36	; 0x24
 800bee8:	2102      	movs	r1, #2
 800beea:	4618      	mov	r0, r3
 800beec:	f001 fb1e 	bl	800d52c <RCCEx_PLL3_Config>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d001      	beq.n	800befa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800befa:	4b2a      	ldr	r3, [pc, #168]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800befc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf08:	4926      	ldr	r1, [pc, #152]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f003 0310 	and.w	r3, r3, #16
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d01a      	beq.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf24:	d10a      	bne.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	3324      	adds	r3, #36	; 0x24
 800bf2a:	2102      	movs	r1, #2
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f001 fafd 	bl	800d52c <RCCEx_PLL3_Config>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf3c:	4b19      	ldr	r3, [pc, #100]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf4a:	4916      	ldr	r1, [pc, #88]	; (800bfa4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d036      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf66:	d01f      	beq.n	800bfa8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800bf68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf6c:	d817      	bhi.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800bf72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf76:	d009      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800bf78:	e011      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	2100      	movs	r1, #0
 800bf80:	4618      	mov	r0, r3
 800bf82:	f001 fa21 	bl	800d3c8 <RCCEx_PLL2_Config>
 800bf86:	4603      	mov	r3, r0
 800bf88:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bf8a:	e00e      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3324      	adds	r3, #36	; 0x24
 800bf90:	2102      	movs	r1, #2
 800bf92:	4618      	mov	r0, r3
 800bf94:	f001 faca 	bl	800d52c <RCCEx_PLL3_Config>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bf9c:	e005      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	75fb      	strb	r3, [r7, #23]
      break;
 800bfa2:	e002      	b.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800bfa4:	58024400 	.word	0x58024400
      break;
 800bfa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bfb0:	4b93      	ldr	r3, [pc, #588]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfbe:	4990      	ldr	r1, [pc, #576]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	658b      	str	r3, [r1, #88]	; 0x58
 800bfc4:	e001      	b.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
 800bfc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d033      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfe0:	d01c      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800bfe2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfe6:	d816      	bhi.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800bfe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfec:	d003      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800bfee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bff2:	d007      	beq.n	800c004 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800bff4:	e00f      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bff6:	4b82      	ldr	r3, [pc, #520]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffa:	4a81      	ldr	r2, [pc, #516]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c000:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c002:	e00c      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3324      	adds	r3, #36	; 0x24
 800c008:	2101      	movs	r1, #1
 800c00a:	4618      	mov	r0, r3
 800c00c:	f001 fa8e 	bl	800d52c <RCCEx_PLL3_Config>
 800c010:	4603      	mov	r3, r0
 800c012:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c014:	e003      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	75fb      	strb	r3, [r7, #23]
      break;
 800c01a:	e000      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c01c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10a      	bne.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c024:	4b76      	ldr	r3, [pc, #472]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c032:	4973      	ldr	r1, [pc, #460]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c034:	4313      	orrs	r3, r2
 800c036:	654b      	str	r3, [r1, #84]	; 0x54
 800c038:	e001      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
 800c03c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c046:	2b00      	cmp	r3, #0
 800c048:	d029      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c056:	d007      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c058:	e00f      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c05a:	4b69      	ldr	r3, [pc, #420]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05e:	4a68      	ldr	r2, [pc, #416]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c066:	e00b      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3304      	adds	r3, #4
 800c06c:	2102      	movs	r1, #2
 800c06e:	4618      	mov	r0, r3
 800c070:	f001 f9aa 	bl	800d3c8 <RCCEx_PLL2_Config>
 800c074:	4603      	mov	r3, r0
 800c076:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c078:	e002      	b.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	75fb      	strb	r3, [r7, #23]
      break;
 800c07e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c080:	7dfb      	ldrb	r3, [r7, #23]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d109      	bne.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c086:	4b5e      	ldr	r3, [pc, #376]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c08a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c092:	495b      	ldr	r1, [pc, #364]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c094:	4313      	orrs	r3, r2
 800c096:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c098:	e001      	b.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c09a:	7dfb      	ldrb	r3, [r7, #23]
 800c09c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00a      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	3324      	adds	r3, #36	; 0x24
 800c0ae:	2102      	movs	r1, #2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f001 fa3b 	bl	800d52c <RCCEx_PLL3_Config>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d030      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0d4:	d017      	beq.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c0d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0da:	d811      	bhi.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c0dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0e0:	d013      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c0e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0e6:	d80b      	bhi.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d010      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f0:	d106      	bne.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0f2:	4b43      	ldr	r3, [pc, #268]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f6:	4a42      	ldr	r2, [pc, #264]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c0f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c0fe:	e007      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	75fb      	strb	r3, [r7, #23]
      break;
 800c104:	e004      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c106:	bf00      	nop
 800c108:	e002      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c10a:	bf00      	nop
 800c10c:	e000      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c10e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c110:	7dfb      	ldrb	r3, [r7, #23]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d109      	bne.n	800c12a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c116:	4b3a      	ldr	r3, [pc, #232]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c11a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c122:	4937      	ldr	r1, [pc, #220]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c124:	4313      	orrs	r3, r2
 800c126:	654b      	str	r3, [r1, #84]	; 0x54
 800c128:	e001      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c12a:	7dfb      	ldrb	r3, [r7, #23]
 800c12c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d008      	beq.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c13a:	4b31      	ldr	r3, [pc, #196]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c13e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c146:	492e      	ldr	r1, [pc, #184]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c148:	4313      	orrs	r3, r2
 800c14a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d009      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c158:	4b29      	ldr	r3, [pc, #164]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c15a:	691b      	ldr	r3, [r3, #16]
 800c15c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c166:	4926      	ldr	r1, [pc, #152]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c168:	4313      	orrs	r3, r2
 800c16a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d008      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c178:	4b21      	ldr	r3, [pc, #132]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c184:	491e      	ldr	r1, [pc, #120]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c186:	4313      	orrs	r3, r2
 800c188:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00d      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c196:	4b1a      	ldr	r3, [pc, #104]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	4a19      	ldr	r2, [pc, #100]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c19c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1a0:	6113      	str	r3, [r2, #16]
 800c1a2:	4b17      	ldr	r3, [pc, #92]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1a4:	691a      	ldr	r2, [r3, #16]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c1ac:	4914      	ldr	r1, [pc, #80]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	da08      	bge.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c1ba:	4b11      	ldr	r3, [pc, #68]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1c6:	490e      	ldr	r1, [pc, #56]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d009      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c1d8:	4b09      	ldr	r3, [pc, #36]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1e6:	4906      	ldr	r1, [pc, #24]	; (800c200 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c1ec:	7dbb      	ldrb	r3, [r7, #22]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e000      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3718      	adds	r7, #24
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	58024400 	.word	0x58024400

0800c204 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b090      	sub	sp, #64	; 0x40
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c212:	f040 8095 	bne.w	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800c216:	4bae      	ldr	r3, [pc, #696]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	633b      	str	r3, [r7, #48]	; 0x30
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	2b04      	cmp	r3, #4
 800c224:	f200 8088 	bhi.w	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c228:	a201      	add	r2, pc, #4	; (adr r2, 800c230 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800c22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22e:	bf00      	nop
 800c230:	0800c245 	.word	0x0800c245
 800c234:	0800c26d 	.word	0x0800c26d
 800c238:	0800c295 	.word	0x0800c295
 800c23c:	0800c331 	.word	0x0800c331
 800c240:	0800c2bd 	.word	0x0800c2bd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c244:	4ba2      	ldr	r3, [pc, #648]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c24c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c250:	d108      	bne.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c256:	4618      	mov	r0, r3
 800c258:	f000 ff64 	bl	800d124 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800c25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c260:	f000 bc95 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c268:	f000 bc91 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c26c:	4b98      	ldr	r3, [pc, #608]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c278:	d108      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c27a:	f107 0318 	add.w	r3, r7, #24
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fca8 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c288:	f000 bc81 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c290:	f000 bc7d 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c294:	4b8e      	ldr	r3, [pc, #568]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c29c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2a0:	d108      	bne.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2a2:	f107 030c 	add.w	r3, r7, #12
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 fde8 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c2b0:	f000 bc6d 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c2b8:	f000 bc69 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c2bc:	4b84      	ldr	r3, [pc, #528]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2c6:	4b82      	ldr	r3, [pc, #520]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0304 	and.w	r3, r3, #4
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d10c      	bne.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800c2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d109      	bne.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c2d8:	4b7d      	ldr	r3, [pc, #500]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	08db      	lsrs	r3, r3, #3
 800c2de:	f003 0303 	and.w	r3, r3, #3
 800c2e2:	4a7c      	ldr	r2, [pc, #496]	; (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800c2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ea:	e01f      	b.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2ec:	4b78      	ldr	r3, [pc, #480]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2f8:	d106      	bne.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800c2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c300:	d102      	bne.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c302:	4b75      	ldr	r3, [pc, #468]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c306:	e011      	b.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c308:	4b71      	ldr	r3, [pc, #452]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c314:	d106      	bne.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800c316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c31c:	d102      	bne.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c31e:	4b6f      	ldr	r3, [pc, #444]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c320:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c322:	e003      	b.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c328:	f000 bc31 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c32c:	f000 bc2f 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c330:	4b6b      	ldr	r3, [pc, #428]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c334:	f000 bc2b 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c33c:	f000 bc27 	b.w	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c346:	f040 8095 	bne.w	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800c34a:	4b61      	ldr	r3, [pc, #388]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c34c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c34e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c352:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c35a:	d04d      	beq.n	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c362:	f200 8084 	bhi.w	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	2bc0      	cmp	r3, #192	; 0xc0
 800c36a:	d07d      	beq.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	2bc0      	cmp	r3, #192	; 0xc0
 800c370:	d87d      	bhi.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	2b80      	cmp	r3, #128	; 0x80
 800c376:	d02d      	beq.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	2b80      	cmp	r3, #128	; 0x80
 800c37c:	d877      	bhi.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	2b00      	cmp	r3, #0
 800c382:	d003      	beq.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	2b40      	cmp	r3, #64	; 0x40
 800c388:	d012      	beq.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800c38a:	e070      	b.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c38c:	4b50      	ldr	r3, [pc, #320]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c398:	d107      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c39a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 fec0 	bl	800d124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c3a8:	e3f1      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3ae:	e3ee      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3b0:	4b47      	ldr	r3, [pc, #284]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3bc:	d107      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3be:	f107 0318 	add.w	r3, r7, #24
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 fc06 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c3cc:	e3df      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3d2:	e3dc      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3d4:	4b3e      	ldr	r3, [pc, #248]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3e0:	d107      	bne.n	800c3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3e2:	f107 030c 	add.w	r3, r7, #12
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 fd48 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c3f0:	e3cd      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3f6:	e3ca      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c3f8:	4b35      	ldr	r3, [pc, #212]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c3fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c400:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c402:	4b33      	ldr	r3, [pc, #204]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0304 	and.w	r3, r3, #4
 800c40a:	2b04      	cmp	r3, #4
 800c40c:	d10c      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800c40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c410:	2b00      	cmp	r3, #0
 800c412:	d109      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c414:	4b2e      	ldr	r3, [pc, #184]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	08db      	lsrs	r3, r3, #3
 800c41a:	f003 0303 	and.w	r3, r3, #3
 800c41e:	4a2d      	ldr	r2, [pc, #180]	; (800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800c420:	fa22 f303 	lsr.w	r3, r2, r3
 800c424:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c426:	e01e      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c428:	4b29      	ldr	r3, [pc, #164]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c434:	d106      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800c436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c43c:	d102      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c43e:	4b26      	ldr	r3, [pc, #152]	; (800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c442:	e010      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c444:	4b22      	ldr	r3, [pc, #136]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c44c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c450:	d106      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c458:	d102      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c45a:	4b20      	ldr	r3, [pc, #128]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c45e:	e002      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c464:	e393      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c466:	e392      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c468:	4b1d      	ldr	r3, [pc, #116]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c46c:	e38f      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c46e:	2300      	movs	r3, #0
 800c470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c472:	e38c      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c47a:	f040 80a7 	bne.w	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800c47e:	4b14      	ldr	r3, [pc, #80]	; (800c4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c482:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c486:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c48e:	d05f      	beq.n	800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c496:	f200 8096 	bhi.w	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c4a0:	f000 808e 	beq.w	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c4aa:	f200 808c 	bhi.w	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4b4:	d03a      	beq.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4bc:	f200 8083 	bhi.w	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00e      	beq.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4cc:	d01c      	beq.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800c4ce:	e07a      	b.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c4d0:	58024400 	.word	0x58024400
 800c4d4:	03d09000 	.word	0x03d09000
 800c4d8:	003d0900 	.word	0x003d0900
 800c4dc:	017d7840 	.word	0x017d7840
 800c4e0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4e4:	4baa      	ldr	r3, [pc, #680]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4f0:	d107      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 fe14 	bl	800d124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c500:	e345      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c506:	e342      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c508:	4ba1      	ldr	r3, [pc, #644]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c514:	d107      	bne.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c516:	f107 0318 	add.w	r3, r7, #24
 800c51a:	4618      	mov	r0, r3
 800c51c:	f000 fb5a 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c524:	e333      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c52a:	e330      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c52c:	4b98      	ldr	r3, [pc, #608]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c538:	d107      	bne.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c53a:	f107 030c 	add.w	r3, r7, #12
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 fc9c 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c548:	e321      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c54e:	e31e      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c550:	4b8f      	ldr	r3, [pc, #572]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c558:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c55a:	4b8d      	ldr	r3, [pc, #564]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0304 	and.w	r3, r3, #4
 800c562:	2b04      	cmp	r3, #4
 800c564:	d10c      	bne.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d109      	bne.n	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c56c:	4b88      	ldr	r3, [pc, #544]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	08db      	lsrs	r3, r3, #3
 800c572:	f003 0303 	and.w	r3, r3, #3
 800c576:	4a87      	ldr	r2, [pc, #540]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c578:	fa22 f303 	lsr.w	r3, r2, r3
 800c57c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c57e:	e01e      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c580:	4b83      	ldr	r3, [pc, #524]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c58c:	d106      	bne.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800c58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c594:	d102      	bne.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c596:	4b80      	ldr	r3, [pc, #512]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c59a:	e010      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c59c:	4b7c      	ldr	r3, [pc, #496]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5a8:	d106      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800c5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5b0:	d102      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c5b2:	4b7a      	ldr	r3, [pc, #488]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5b6:	e002      	b.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c5bc:	e2e7      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c5be:	e2e6      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c5c0:	4b77      	ldr	r3, [pc, #476]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5c4:	e2e3      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5ca:	e2e0      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5d2:	f040 809c 	bne.w	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800c5d6:	4b6e      	ldr	r3, [pc, #440]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c5de:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5e6:	d054      	beq.n	800c692 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5ee:	f200 808b 	bhi.w	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5f8:	f000 8083 	beq.w	800c702 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800c5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c602:	f200 8081 	bhi.w	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c608:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c60c:	d02f      	beq.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800c60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c614:	d878      	bhi.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d004      	beq.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c622:	d012      	beq.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800c624:	e070      	b.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c626:	4b5a      	ldr	r3, [pc, #360]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c62e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c632:	d107      	bne.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fd73 	bl	800d124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c640:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c642:	e2a4      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c648:	e2a1      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c64a:	4b51      	ldr	r3, [pc, #324]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c656:	d107      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c658:	f107 0318 	add.w	r3, r7, #24
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 fab9 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800c666:	e292      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c668:	2300      	movs	r3, #0
 800c66a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c66c:	e28f      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c66e:	4b48      	ldr	r3, [pc, #288]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c67a:	d107      	bne.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c67c:	f107 030c 	add.w	r3, r7, #12
 800c680:	4618      	mov	r0, r3
 800c682:	f000 fbfb 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c68a:	e280      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c690:	e27d      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c692:	4b3f      	ldr	r3, [pc, #252]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c696:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c69a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c69c:	4b3c      	ldr	r3, [pc, #240]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b04      	cmp	r3, #4
 800c6a6:	d10c      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d109      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c6ae:	4b38      	ldr	r3, [pc, #224]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	08db      	lsrs	r3, r3, #3
 800c6b4:	f003 0303 	and.w	r3, r3, #3
 800c6b8:	4a36      	ldr	r2, [pc, #216]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c6ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6c0:	e01e      	b.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6c2:	4b33      	ldr	r3, [pc, #204]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6ce:	d106      	bne.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6d6:	d102      	bne.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c6d8:	4b2f      	ldr	r3, [pc, #188]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6dc:	e010      	b.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6de:	4b2c      	ldr	r3, [pc, #176]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ea:	d106      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800c6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f2:	d102      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c6f4:	4b29      	ldr	r3, [pc, #164]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f8:	e002      	b.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c6fe:	e246      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c700:	e245      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c702:	4b27      	ldr	r3, [pc, #156]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c706:	e242      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c70c:	e23f      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c714:	f040 80a8 	bne.w	800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800c718:	4b1d      	ldr	r3, [pc, #116]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c71c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c720:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c728:	d060      	beq.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c730:	f200 8097 	bhi.w	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c73a:	f000 808f 	beq.w	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c744:	f200 808d 	bhi.w	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c74e:	d03b      	beq.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c756:	f200 8084 	bhi.w	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d004      	beq.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c766:	d01d      	beq.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800c768:	e07b      	b.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c76a:	4b09      	ldr	r3, [pc, #36]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c772:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c776:	d107      	bne.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 fcd1 	bl	800d124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c784:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c786:	e202      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c788:	2300      	movs	r3, #0
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c78c:	e1ff      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c78e:	bf00      	nop
 800c790:	58024400 	.word	0x58024400
 800c794:	03d09000 	.word	0x03d09000
 800c798:	003d0900 	.word	0x003d0900
 800c79c:	017d7840 	.word	0x017d7840
 800c7a0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7a4:	4ba3      	ldr	r3, [pc, #652]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7b0:	d107      	bne.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7b2:	f107 0318 	add.w	r3, r7, #24
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fa0c 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c7c0:	e1e5      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7c6:	e1e2      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7c8:	4b9a      	ldr	r3, [pc, #616]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7d4:	d107      	bne.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7d6:	f107 030c 	add.w	r3, r7, #12
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 fb4e 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c7e4:	e1d3      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c7ea:	e1d0      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c7ec:	4b91      	ldr	r3, [pc, #580]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c7ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c7f4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7f6:	4b8f      	ldr	r3, [pc, #572]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 0304 	and.w	r3, r3, #4
 800c7fe:	2b04      	cmp	r3, #4
 800c800:	d10c      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800c802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c804:	2b00      	cmp	r3, #0
 800c806:	d109      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c808:	4b8a      	ldr	r3, [pc, #552]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	08db      	lsrs	r3, r3, #3
 800c80e:	f003 0303 	and.w	r3, r3, #3
 800c812:	4a89      	ldr	r2, [pc, #548]	; (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c814:	fa22 f303 	lsr.w	r3, r2, r3
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c81a:	e01e      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c81c:	4b85      	ldr	r3, [pc, #532]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c828:	d106      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800c82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c830:	d102      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c832:	4b82      	ldr	r3, [pc, #520]	; (800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c834:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c836:	e010      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c838:	4b7e      	ldr	r3, [pc, #504]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c844:	d106      	bne.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c84c:	d102      	bne.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c84e:	4b7c      	ldr	r3, [pc, #496]	; (800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c850:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c852:	e002      	b.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c858:	e199      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c85a:	e198      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c85c:	4b79      	ldr	r3, [pc, #484]	; (800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c860:	e195      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c866:	e192      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c86e:	d173      	bne.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c870:	4b70      	ldr	r3, [pc, #448]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c878:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c880:	d02f      	beq.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800c882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c888:	d863      	bhi.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800c88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d004      	beq.n	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c896:	d012      	beq.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800c898:	e05b      	b.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c89a:	4b66      	ldr	r3, [pc, #408]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8a6:	d107      	bne.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8a8:	f107 0318 	add.w	r3, r7, #24
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f000 f991 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c8b6:	e16a      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8bc:	e167      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8be:	4b5d      	ldr	r3, [pc, #372]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8ca:	d107      	bne.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8cc:	f107 030c 	add.w	r3, r7, #12
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 fad3 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c8da:	e158      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8e0:	e155      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c8e2:	4b54      	ldr	r3, [pc, #336]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8ea:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8ec:	4b51      	ldr	r3, [pc, #324]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 0304 	and.w	r3, r3, #4
 800c8f4:	2b04      	cmp	r3, #4
 800c8f6:	d10c      	bne.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800c8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d109      	bne.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c8fe:	4b4d      	ldr	r3, [pc, #308]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	08db      	lsrs	r3, r3, #3
 800c904:	f003 0303 	and.w	r3, r3, #3
 800c908:	4a4b      	ldr	r2, [pc, #300]	; (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c90a:	fa22 f303 	lsr.w	r3, r2, r3
 800c90e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c910:	e01e      	b.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c912:	4b48      	ldr	r3, [pc, #288]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c91a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c91e:	d106      	bne.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800c920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c926:	d102      	bne.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c928:	4b44      	ldr	r3, [pc, #272]	; (800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c92a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c92c:	e010      	b.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c92e:	4b41      	ldr	r3, [pc, #260]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c93a:	d106      	bne.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800c93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c942:	d102      	bne.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c944:	4b3e      	ldr	r3, [pc, #248]	; (800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800c946:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c948:	e002      	b.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c94e:	e11e      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c950:	e11d      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c956:	e11a      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c95e:	d133      	bne.n	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c960:	4b34      	ldr	r3, [pc, #208]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c968:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d004      	beq.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800c970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c976:	d012      	beq.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800c978:	e023      	b.n	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c97a:	4b2e      	ldr	r3, [pc, #184]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c986:	d107      	bne.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 fbc9 	bl	800d124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c996:	e0fa      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c99c:	e0f7      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c99e:	4b25      	ldr	r3, [pc, #148]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9aa:	d107      	bne.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ac:	f107 0318 	add.w	r3, r7, #24
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 f90f 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c9ba:	e0e8      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9c0:	e0e5      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9c6:	e0e2      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9ce:	f040 808f 	bne.w	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c9d2:	4b18      	ldr	r3, [pc, #96]	; (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c9da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9e2:	d075      	beq.n	800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9ea:	d87e      	bhi.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f2:	d060      	beq.n	800cab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9fa:	d876      	bhi.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca02:	d045      	beq.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800ca04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca0a:	d86e      	bhi.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca12:	d02b      	beq.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca1a:	d866      	bhi.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d004      	beq.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca28:	d00e      	beq.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800ca2a:	e05e      	b.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ca2c:	f000 f8bc 	bl	800cba8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ca30:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ca32:	e0ac      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca34:	58024400 	.word	0x58024400
 800ca38:	03d09000 	.word	0x03d09000
 800ca3c:	003d0900 	.word	0x003d0900
 800ca40:	017d7840 	.word	0x017d7840
 800ca44:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca48:	4b53      	ldr	r3, [pc, #332]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca54:	d107      	bne.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca56:	f107 0318 	add.w	r3, r7, #24
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f000 f8ba 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ca64:	e093      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca6a:	e090      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca6c:	4b4a      	ldr	r3, [pc, #296]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca78:	d107      	bne.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca7a:	f107 030c 	add.w	r3, r7, #12
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 f9fc 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ca88:	e081      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca8e:	e07e      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ca90:	4b41      	ldr	r3, [pc, #260]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b04      	cmp	r3, #4
 800ca9a:	d109      	bne.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ca9c:	4b3e      	ldr	r3, [pc, #248]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	08db      	lsrs	r3, r3, #3
 800caa2:	f003 0303 	and.w	r3, r3, #3
 800caa6:	4a3d      	ldr	r2, [pc, #244]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800caa8:	fa22 f303 	lsr.w	r3, r2, r3
 800caac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800caae:	e06e      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cab0:	2300      	movs	r3, #0
 800cab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cab4:	e06b      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cab6:	4b38      	ldr	r3, [pc, #224]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac2:	d102      	bne.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800cac4:	4b36      	ldr	r3, [pc, #216]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cac6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cac8:	e061      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800caca:	2300      	movs	r3, #0
 800cacc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cace:	e05e      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cad0:	4b31      	ldr	r3, [pc, #196]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cadc:	d102      	bne.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800cade:	4b31      	ldr	r3, [pc, #196]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cae0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cae2:	e054      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cae8:	e051      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800caea:	2300      	movs	r3, #0
 800caec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800caee:	e04e      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caf6:	d148      	bne.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800caf8:	4b27      	ldr	r3, [pc, #156]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cafa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cafc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb00:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb08:	d02a      	beq.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb10:	d838      	bhi.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d004      	beq.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb1e:	d00d      	beq.n	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cb20:	e030      	b.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb22:	4b1d      	ldr	r3, [pc, #116]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb2e:	d102      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800cb30:	4b1c      	ldr	r3, [pc, #112]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cb34:	e02b      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb3a:	e028      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb3c:	4b16      	ldr	r3, [pc, #88]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb48:	d107      	bne.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 fae8 	bl	800d124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cb58:	e019      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb5e:	e016      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb60:	4b0d      	ldr	r3, [pc, #52]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb6c:	d107      	bne.n	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb6e:	f107 0318 	add.w	r3, r7, #24
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 f82e 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cb7c:	e007      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb82:	e004      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb88:	e001      	b.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800cb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3740      	adds	r7, #64	; 0x40
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	58024400 	.word	0x58024400
 800cb9c:	03d09000 	.word	0x03d09000
 800cba0:	003d0900 	.word	0x003d0900
 800cba4:	017d7840 	.word	0x017d7840

0800cba8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cbac:	f7fe fb8e 	bl	800b2cc <HAL_RCC_GetHCLKFreq>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cbb4:	6a1b      	ldr	r3, [r3, #32]
 800cbb6:	091b      	lsrs	r3, r3, #4
 800cbb8:	f003 0307 	and.w	r3, r3, #7
 800cbbc:	4904      	ldr	r1, [pc, #16]	; (800cbd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cbbe:	5ccb      	ldrb	r3, [r1, r3]
 800cbc0:	f003 031f 	and.w	r3, r3, #31
 800cbc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	58024400 	.word	0x58024400
 800cbd0:	08027bbc 	.word	0x08027bbc

0800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b089      	sub	sp, #36	; 0x24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbdc:	4ba1      	ldr	r3, [pc, #644]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe0:	f003 0303 	and.w	r3, r3, #3
 800cbe4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800cbe6:	4b9f      	ldr	r3, [pc, #636]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbea:	0b1b      	lsrs	r3, r3, #12
 800cbec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cbf2:	4b9c      	ldr	r3, [pc, #624]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf6:	091b      	lsrs	r3, r3, #4
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800cbfe:	4b99      	ldr	r3, [pc, #612]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc02:	08db      	lsrs	r3, r3, #3
 800cc04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	fb02 f303 	mul.w	r3, r2, r3
 800cc0e:	ee07 3a90 	vmov	s15, r3
 800cc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 8111 	beq.w	800ce44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	f000 8083 	beq.w	800cd30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	f200 80a1 	bhi.w	800cd74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d003      	beq.n	800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d056      	beq.n	800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cc3e:	e099      	b.n	800cd74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc40:	4b88      	ldr	r3, [pc, #544]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 0320 	and.w	r3, r3, #32
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d02d      	beq.n	800cca8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc4c:	4b85      	ldr	r3, [pc, #532]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	08db      	lsrs	r3, r3, #3
 800cc52:	f003 0303 	and.w	r3, r3, #3
 800cc56:	4a84      	ldr	r2, [pc, #528]	; (800ce68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cc58:	fa22 f303 	lsr.w	r3, r2, r3
 800cc5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	ee07 3a90 	vmov	s15, r3
 800cc64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc76:	4b7b      	ldr	r3, [pc, #492]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cca2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cca6:	e087      	b.n	800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	ee07 3a90 	vmov	s15, r3
 800ccae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ccb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccba:	4b6a      	ldr	r3, [pc, #424]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccca:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ccea:	e065      	b.n	800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ccfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfe:	4b59      	ldr	r3, [pc, #356]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd2e:	e043      	b.n	800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cd3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd42:	4b48      	ldr	r3, [pc, #288]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4a:	ee07 3a90 	vmov	s15, r3
 800cd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd52:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd72:	e021      	b.n	800cdb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	ee07 3a90 	vmov	s15, r3
 800cd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd86:	4b37      	ldr	r3, [pc, #220]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cda2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cda6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800cdb8:	4b2a      	ldr	r3, [pc, #168]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdbc:	0a5b      	lsrs	r3, r3, #9
 800cdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdde:	ee17 2a90 	vmov	r2, s15
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800cde6:	4b1f      	ldr	r3, [pc, #124]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdea:	0c1b      	lsrs	r3, r3, #16
 800cdec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf0:	ee07 3a90 	vmov	s15, r3
 800cdf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce0c:	ee17 2a90 	vmov	r2, s15
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ce14:	4b13      	ldr	r3, [pc, #76]	; (800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce18:	0e1b      	lsrs	r3, r3, #24
 800ce1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce1e:	ee07 3a90 	vmov	s15, r3
 800ce22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce3a:	ee17 2a90 	vmov	r2, s15
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ce42:	e008      	b.n	800ce56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	609a      	str	r2, [r3, #8]
}
 800ce56:	bf00      	nop
 800ce58:	3724      	adds	r7, #36	; 0x24
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	58024400 	.word	0x58024400
 800ce68:	03d09000 	.word	0x03d09000
 800ce6c:	46000000 	.word	0x46000000
 800ce70:	4c742400 	.word	0x4c742400
 800ce74:	4a742400 	.word	0x4a742400
 800ce78:	4bbebc20 	.word	0x4bbebc20

0800ce7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b089      	sub	sp, #36	; 0x24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce84:	4ba1      	ldr	r3, [pc, #644]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce88:	f003 0303 	and.w	r3, r3, #3
 800ce8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ce8e:	4b9f      	ldr	r3, [pc, #636]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce92:	0d1b      	lsrs	r3, r3, #20
 800ce94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ce9a:	4b9c      	ldr	r3, [pc, #624]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9e:	0a1b      	lsrs	r3, r3, #8
 800cea0:	f003 0301 	and.w	r3, r3, #1
 800cea4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cea6:	4b99      	ldr	r3, [pc, #612]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceaa:	08db      	lsrs	r3, r3, #3
 800ceac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceb0:	693a      	ldr	r2, [r7, #16]
 800ceb2:	fb02 f303 	mul.w	r3, r2, r3
 800ceb6:	ee07 3a90 	vmov	s15, r3
 800ceba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 8111 	beq.w	800d0ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	2b02      	cmp	r3, #2
 800cece:	f000 8083 	beq.w	800cfd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	f200 80a1 	bhi.w	800d01c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d003      	beq.n	800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d056      	beq.n	800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cee6:	e099      	b.n	800d01c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cee8:	4b88      	ldr	r3, [pc, #544]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 0320 	and.w	r3, r3, #32
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d02d      	beq.n	800cf50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cef4:	4b85      	ldr	r3, [pc, #532]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	08db      	lsrs	r3, r3, #3
 800cefa:	f003 0303 	and.w	r3, r3, #3
 800cefe:	4a84      	ldr	r2, [pc, #528]	; (800d110 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cf00:	fa22 f303 	lsr.w	r3, r2, r3
 800cf04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	ee07 3a90 	vmov	s15, r3
 800cf0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	ee07 3a90 	vmov	s15, r3
 800cf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf1e:	4b7b      	ldr	r3, [pc, #492]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf26:	ee07 3a90 	vmov	s15, r3
 800cf2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf32:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cf4e:	e087      	b.n	800d060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	ee07 3a90 	vmov	s15, r3
 800cf56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d118 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cf5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf62:	4b6a      	ldr	r3, [pc, #424]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6a:	ee07 3a90 	vmov	s15, r3
 800cf6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf76:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cf92:	e065      	b.n	800d060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d11c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cfa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfa6:	4b59      	ldr	r3, [pc, #356]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfae:	ee07 3a90 	vmov	s15, r3
 800cfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cfd6:	e043      	b.n	800d060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfe2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cfe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfea:	4b48      	ldr	r3, [pc, #288]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff2:	ee07 3a90 	vmov	s15, r3
 800cff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cffa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cffe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d01a:	e021      	b.n	800d060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	ee07 3a90 	vmov	s15, r3
 800d022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d026:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d11c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d02e:	4b37      	ldr	r3, [pc, #220]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d036:	ee07 3a90 	vmov	s15, r3
 800d03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d042:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d05a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d05e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d060:	4b2a      	ldr	r3, [pc, #168]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d064:	0a5b      	lsrs	r3, r3, #9
 800d066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d06a:	ee07 3a90 	vmov	s15, r3
 800d06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d07a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d07e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d086:	ee17 2a90 	vmov	r2, s15
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d08e:	4b1f      	ldr	r3, [pc, #124]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d092:	0c1b      	lsrs	r3, r3, #16
 800d094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d098:	ee07 3a90 	vmov	s15, r3
 800d09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0b4:	ee17 2a90 	vmov	r2, s15
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d0bc:	4b13      	ldr	r3, [pc, #76]	; (800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c0:	0e1b      	lsrs	r3, r3, #24
 800d0c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c6:	ee07 3a90 	vmov	s15, r3
 800d0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0e2:	ee17 2a90 	vmov	r2, s15
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d0ea:	e008      	b.n	800d0fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	609a      	str	r2, [r3, #8]
}
 800d0fe:	bf00      	nop
 800d100:	3724      	adds	r7, #36	; 0x24
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	58024400 	.word	0x58024400
 800d110:	03d09000 	.word	0x03d09000
 800d114:	46000000 	.word	0x46000000
 800d118:	4c742400 	.word	0x4c742400
 800d11c:	4a742400 	.word	0x4a742400
 800d120:	4bbebc20 	.word	0x4bbebc20

0800d124 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800d124:	b480      	push	{r7}
 800d126:	b089      	sub	sp, #36	; 0x24
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d12c:	4ba0      	ldr	r3, [pc, #640]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d130:	f003 0303 	and.w	r3, r3, #3
 800d134:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800d136:	4b9e      	ldr	r3, [pc, #632]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d13a:	091b      	lsrs	r3, r3, #4
 800d13c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d140:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d142:	4b9b      	ldr	r3, [pc, #620]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d14c:	4b98      	ldr	r3, [pc, #608]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d150:	08db      	lsrs	r3, r3, #3
 800d152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d156:	693a      	ldr	r2, [r7, #16]
 800d158:	fb02 f303 	mul.w	r3, r2, r3
 800d15c:	ee07 3a90 	vmov	s15, r3
 800d160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d164:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f000 8111 	beq.w	800d392 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	2b02      	cmp	r3, #2
 800d174:	f000 8083 	beq.w	800d27e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	f200 80a1 	bhi.w	800d2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d003      	beq.n	800d18e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d056      	beq.n	800d23a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d18c:	e099      	b.n	800d2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d18e:	4b88      	ldr	r3, [pc, #544]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f003 0320 	and.w	r3, r3, #32
 800d196:	2b00      	cmp	r3, #0
 800d198:	d02d      	beq.n	800d1f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d19a:	4b85      	ldr	r3, [pc, #532]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	08db      	lsrs	r3, r3, #3
 800d1a0:	f003 0303 	and.w	r3, r3, #3
 800d1a4:	4a83      	ldr	r2, [pc, #524]	; (800d3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800d1aa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	ee07 3a90 	vmov	s15, r3
 800d1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	ee07 3a90 	vmov	s15, r3
 800d1bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1c4:	4b7a      	ldr	r3, [pc, #488]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1cc:	ee07 3a90 	vmov	s15, r3
 800d1d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d1dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d1f4:	e087      	b.n	800d306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	ee07 3a90 	vmov	s15, r3
 800d1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d200:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d3bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d208:	4b69      	ldr	r3, [pc, #420]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d210:	ee07 3a90 	vmov	s15, r3
 800d214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d218:	ed97 6a03 	vldr	s12, [r7, #12]
 800d21c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d22c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d230:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d234:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d238:	e065      	b.n	800d306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	ee07 3a90 	vmov	s15, r3
 800d240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d244:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d24c:	4b58      	ldr	r3, [pc, #352]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d254:	ee07 3a90 	vmov	s15, r3
 800d258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d25c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d260:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d26c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d274:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d278:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d27c:	e043      	b.n	800d306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	ee07 3a90 	vmov	s15, r3
 800d284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d288:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d28c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d290:	4b47      	ldr	r3, [pc, #284]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d298:	ee07 3a90 	vmov	s15, r3
 800d29c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d2c0:	e021      	b.n	800d306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	ee07 3a90 	vmov	s15, r3
 800d2c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d3bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d2d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2d4:	4b36      	ldr	r3, [pc, #216]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2dc:	ee07 3a90 	vmov	s15, r3
 800d2e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d300:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d304:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800d306:	4b2a      	ldr	r3, [pc, #168]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d30a:	0a5b      	lsrs	r3, r3, #9
 800d30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d310:	ee07 3a90 	vmov	s15, r3
 800d314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d31c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d320:	edd7 6a07 	vldr	s13, [r7, #28]
 800d324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d32c:	ee17 2a90 	vmov	r2, s15
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800d334:	4b1e      	ldr	r3, [pc, #120]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d338:	0c1b      	lsrs	r3, r3, #16
 800d33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d33e:	ee07 3a90 	vmov	s15, r3
 800d342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d34a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d34e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d35a:	ee17 2a90 	vmov	r2, s15
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800d362:	4b13      	ldr	r3, [pc, #76]	; (800d3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d366:	0e1b      	lsrs	r3, r3, #24
 800d368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36c:	ee07 3a90 	vmov	s15, r3
 800d370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d37c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d388:	ee17 2a90 	vmov	r2, s15
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d390:	e008      	b.n	800d3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	609a      	str	r2, [r3, #8]
}
 800d3a4:	bf00      	nop
 800d3a6:	3724      	adds	r7, #36	; 0x24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr
 800d3b0:	58024400 	.word	0x58024400
 800d3b4:	03d09000 	.word	0x03d09000
 800d3b8:	46000000 	.word	0x46000000
 800d3bc:	4c742400 	.word	0x4c742400
 800d3c0:	4a742400 	.word	0x4a742400
 800d3c4:	4bbebc20 	.word	0x4bbebc20

0800d3c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d3d6:	4b53      	ldr	r3, [pc, #332]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3da:	f003 0303 	and.w	r3, r3, #3
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d101      	bne.n	800d3e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e099      	b.n	800d51a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d3e6:	4b4f      	ldr	r3, [pc, #316]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a4e      	ldr	r2, [pc, #312]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d3ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3f2:	f7f6 ff4b 	bl	800428c <HAL_GetTick>
 800d3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d3f8:	e008      	b.n	800d40c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d3fa:	f7f6 ff47 	bl	800428c <HAL_GetTick>
 800d3fe:	4602      	mov	r2, r0
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	1ad3      	subs	r3, r2, r3
 800d404:	2b02      	cmp	r3, #2
 800d406:	d901      	bls.n	800d40c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d408:	2303      	movs	r3, #3
 800d40a:	e086      	b.n	800d51a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d40c:	4b45      	ldr	r3, [pc, #276]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1f0      	bne.n	800d3fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d418:	4b42      	ldr	r3, [pc, #264]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	031b      	lsls	r3, r3, #12
 800d426:	493f      	ldr	r1, [pc, #252]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d428:	4313      	orrs	r3, r2
 800d42a:	628b      	str	r3, [r1, #40]	; 0x28
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	3b01      	subs	r3, #1
 800d432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	3b01      	subs	r3, #1
 800d43c:	025b      	lsls	r3, r3, #9
 800d43e:	b29b      	uxth	r3, r3
 800d440:	431a      	orrs	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	3b01      	subs	r3, #1
 800d448:	041b      	lsls	r3, r3, #16
 800d44a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d44e:	431a      	orrs	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	3b01      	subs	r3, #1
 800d456:	061b      	lsls	r3, r3, #24
 800d458:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d45c:	4931      	ldr	r1, [pc, #196]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d45e:	4313      	orrs	r3, r2
 800d460:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d462:	4b30      	ldr	r3, [pc, #192]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	695b      	ldr	r3, [r3, #20]
 800d46e:	492d      	ldr	r1, [pc, #180]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d470:	4313      	orrs	r3, r2
 800d472:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d474:	4b2b      	ldr	r3, [pc, #172]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	f023 0220 	bic.w	r2, r3, #32
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	699b      	ldr	r3, [r3, #24]
 800d480:	4928      	ldr	r1, [pc, #160]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d482:	4313      	orrs	r3, r2
 800d484:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d486:	4b27      	ldr	r3, [pc, #156]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d48a:	4a26      	ldr	r2, [pc, #152]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d48c:	f023 0310 	bic.w	r3, r3, #16
 800d490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d492:	4b24      	ldr	r3, [pc, #144]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d496:	4b24      	ldr	r3, [pc, #144]	; (800d528 <RCCEx_PLL2_Config+0x160>)
 800d498:	4013      	ands	r3, r2
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	69d2      	ldr	r2, [r2, #28]
 800d49e:	00d2      	lsls	r2, r2, #3
 800d4a0:	4920      	ldr	r1, [pc, #128]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d4a6:	4b1f      	ldr	r3, [pc, #124]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4aa:	4a1e      	ldr	r2, [pc, #120]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4ac:	f043 0310 	orr.w	r3, r3, #16
 800d4b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d106      	bne.n	800d4c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d4b8:	4b1a      	ldr	r3, [pc, #104]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4bc:	4a19      	ldr	r2, [pc, #100]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4c4:	e00f      	b.n	800d4e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d106      	bne.n	800d4da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d4cc:	4b15      	ldr	r3, [pc, #84]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d0:	4a14      	ldr	r2, [pc, #80]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4d8:	e005      	b.n	800d4e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d4da:	4b12      	ldr	r3, [pc, #72]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4de:	4a11      	ldr	r2, [pc, #68]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d4e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d4e6:	4b0f      	ldr	r3, [pc, #60]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a0e      	ldr	r2, [pc, #56]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d4ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4f2:	f7f6 fecb 	bl	800428c <HAL_GetTick>
 800d4f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d4f8:	e008      	b.n	800d50c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d4fa:	f7f6 fec7 	bl	800428c <HAL_GetTick>
 800d4fe:	4602      	mov	r2, r0
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	2b02      	cmp	r3, #2
 800d506:	d901      	bls.n	800d50c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d508:	2303      	movs	r3, #3
 800d50a:	e006      	b.n	800d51a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d50c:	4b05      	ldr	r3, [pc, #20]	; (800d524 <RCCEx_PLL2_Config+0x15c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0f0      	beq.n	800d4fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	58024400 	.word	0x58024400
 800d528:	ffff0007 	.word	0xffff0007

0800d52c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d53a:	4b53      	ldr	r3, [pc, #332]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d53e:	f003 0303 	and.w	r3, r3, #3
 800d542:	2b03      	cmp	r3, #3
 800d544:	d101      	bne.n	800d54a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	e099      	b.n	800d67e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d54a:	4b4f      	ldr	r3, [pc, #316]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a4e      	ldr	r2, [pc, #312]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d556:	f7f6 fe99 	bl	800428c <HAL_GetTick>
 800d55a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d55c:	e008      	b.n	800d570 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d55e:	f7f6 fe95 	bl	800428c <HAL_GetTick>
 800d562:	4602      	mov	r2, r0
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	2b02      	cmp	r3, #2
 800d56a:	d901      	bls.n	800d570 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d56c:	2303      	movs	r3, #3
 800d56e:	e086      	b.n	800d67e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d570:	4b45      	ldr	r3, [pc, #276]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1f0      	bne.n	800d55e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d57c:	4b42      	ldr	r3, [pc, #264]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d580:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	051b      	lsls	r3, r3, #20
 800d58a:	493f      	ldr	r1, [pc, #252]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d58c:	4313      	orrs	r3, r2
 800d58e:	628b      	str	r3, [r1, #40]	; 0x28
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	3b01      	subs	r3, #1
 800d596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	3b01      	subs	r3, #1
 800d5a0:	025b      	lsls	r3, r3, #9
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	431a      	orrs	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	041b      	lsls	r3, r3, #16
 800d5ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	061b      	lsls	r3, r3, #24
 800d5bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5c0:	4931      	ldr	r1, [pc, #196]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d5c6:	4b30      	ldr	r3, [pc, #192]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	695b      	ldr	r3, [r3, #20]
 800d5d2:	492d      	ldr	r1, [pc, #180]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d5d8:	4b2b      	ldr	r3, [pc, #172]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	4928      	ldr	r1, [pc, #160]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d5ea:	4b27      	ldr	r3, [pc, #156]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ee:	4a26      	ldr	r2, [pc, #152]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d5f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d5f6:	4b24      	ldr	r3, [pc, #144]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d5f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5fa:	4b24      	ldr	r3, [pc, #144]	; (800d68c <RCCEx_PLL3_Config+0x160>)
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	69d2      	ldr	r2, [r2, #28]
 800d602:	00d2      	lsls	r2, r2, #3
 800d604:	4920      	ldr	r1, [pc, #128]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d606:	4313      	orrs	r3, r2
 800d608:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d60a:	4b1f      	ldr	r3, [pc, #124]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60e:	4a1e      	ldr	r2, [pc, #120]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d106      	bne.n	800d62a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d61c:	4b1a      	ldr	r3, [pc, #104]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d620:	4a19      	ldr	r2, [pc, #100]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d626:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d628:	e00f      	b.n	800d64a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d106      	bne.n	800d63e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d630:	4b15      	ldr	r3, [pc, #84]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d634:	4a14      	ldr	r2, [pc, #80]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d63a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d63c:	e005      	b.n	800d64a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d63e:	4b12      	ldr	r3, [pc, #72]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d642:	4a11      	ldr	r2, [pc, #68]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d648:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d64a:	4b0f      	ldr	r3, [pc, #60]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a0e      	ldr	r2, [pc, #56]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d656:	f7f6 fe19 	bl	800428c <HAL_GetTick>
 800d65a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d65c:	e008      	b.n	800d670 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d65e:	f7f6 fe15 	bl	800428c <HAL_GetTick>
 800d662:	4602      	mov	r2, r0
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	1ad3      	subs	r3, r2, r3
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d901      	bls.n	800d670 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d66c:	2303      	movs	r3, #3
 800d66e:	e006      	b.n	800d67e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d670:	4b05      	ldr	r3, [pc, #20]	; (800d688 <RCCEx_PLL3_Config+0x15c>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d0f0      	beq.n	800d65e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	58024400 	.word	0x58024400
 800d68c:	ffff0007 	.word	0xffff0007

0800d690 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e04d      	b.n	800d73e <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7a5b      	ldrb	r3, [r3, #9]
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d105      	bne.n	800d6b8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7f5 fb3c 	bl	8002d30 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2202      	movs	r2, #2
 800d6bc:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f023 0120 	bic.w	r1, r3, #32
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	430a      	orrs	r2, r1
 800d6d2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f042 0204 	orr.w	r2, r2, #4
 800d6e2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ee:	2b40      	cmp	r3, #64	; 0x40
 800d6f0:	d104      	bne.n	800d6fc <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2204      	movs	r2, #4
 800d6f6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e020      	b.n	800d73e <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d6fc:	f7f6 fdc6 	bl	800428c <HAL_GetTick>
 800d700:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d702:	e00e      	b.n	800d722 <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d704:	f7f6 fdc2 	bl	800428c <HAL_GetTick>
 800d708:	4602      	mov	r2, r0
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d907      	bls.n	800d722 <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2204      	movs	r2, #4
 800d716:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2202      	movs	r2, #2
 800d71c:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800d71e:	2301      	movs	r3, #1
 800d720:	e00d      	b.n	800d73e <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b04      	cmp	r3, #4
 800d72e:	d0e9      	beq.n	800d704 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b084      	sub	sp, #16
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
 800d74e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	7a1b      	ldrb	r3, [r3, #8]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d101      	bne.n	800d760 <HAL_RNG_GenerateRandomNumber+0x1a>
 800d75c:	2302      	movs	r3, #2
 800d75e:	e03d      	b.n	800d7dc <HAL_RNG_GenerateRandomNumber+0x96>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	7a5b      	ldrb	r3, [r3, #9]
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d12c      	bne.n	800d7ca <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2202      	movs	r2, #2
 800d774:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800d776:	f7f6 fd89 	bl	800428c <HAL_GetTick>
 800d77a:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d77c:	e011      	b.n	800d7a2 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d77e:	f7f6 fd85 	bl	800428c <HAL_GetTick>
 800d782:	4602      	mov	r2, r0
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d90a      	bls.n	800d7a2 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2202      	movs	r2, #2
 800d796:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e01c      	b.n	800d7dc <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	f003 0301 	and.w	r3, r3, #1
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d1e6      	bne.n	800d77e <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	689a      	ldr	r2, [r3, #8]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	691a      	ldr	r2, [r3, #16]
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	725a      	strb	r2, [r3, #9]
 800d7c8:	e004      	b.n	800d7d4 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2204      	movs	r2, #4
 800d7ce:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	721a      	strb	r2, [r3, #8]

  return status;
 800d7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d904      	bls.n	800d802 <HAL_SAI_InitProtocol+0x1e>
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	3b03      	subs	r3, #3
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d812      	bhi.n	800d826 <HAL_SAI_InitProtocol+0x42>
 800d800:	e008      	b.n	800d814 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	68b9      	ldr	r1, [r7, #8]
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f000 fb7d 	bl	800df08 <SAI_InitI2S>
 800d80e:	4603      	mov	r3, r0
 800d810:	75fb      	strb	r3, [r7, #23]
      break;
 800d812:	e00b      	b.n	800d82c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	68b9      	ldr	r1, [r7, #8]
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f000 fc26 	bl	800e06c <SAI_InitPCM>
 800d820:	4603      	mov	r3, r0
 800d822:	75fb      	strb	r3, [r7, #23]
      break;
 800d824:	e002      	b.n	800d82c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	75fb      	strb	r3, [r7, #23]
      break;
 800d82a:	bf00      	nop
  }

  if (status == HAL_OK)
 800d82c:	7dfb      	ldrb	r3, [r7, #23]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d104      	bne.n	800d83c <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f000 f808 	bl	800d848 <HAL_SAI_Init>
 800d838:	4603      	mov	r3, r0
 800d83a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3718      	adds	r7, #24
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08a      	sub	sp, #40	; 0x28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d101      	bne.n	800d85a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e283      	b.n	800dd62 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d85a:	f7f6 fd47 	bl	80042ec <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d864:	2b01      	cmp	r3, #1
 800d866:	d113      	bne.n	800d890 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a94      	ldr	r2, [pc, #592]	; (800dac0 <HAL_SAI_Init+0x278>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d004      	beq.n	800d87c <HAL_SAI_Init+0x34>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a93      	ldr	r2, [pc, #588]	; (800dac4 <HAL_SAI_Init+0x27c>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d107      	bne.n	800d88c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800d880:	2b01      	cmp	r3, #1
 800d882:	d103      	bne.n	800d88c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e268      	b.n	800dd62 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a8a      	ldr	r2, [pc, #552]	; (800dac0 <HAL_SAI_Init+0x278>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d004      	beq.n	800d8a4 <HAL_SAI_Init+0x5c>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a8a      	ldr	r2, [pc, #552]	; (800dac8 <HAL_SAI_Init+0x280>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d102      	bne.n	800d8aa <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800d8a4:	4b89      	ldr	r3, [pc, #548]	; (800dacc <HAL_SAI_Init+0x284>)
 800d8a6:	61bb      	str	r3, [r7, #24]
 800d8a8:	e028      	b.n	800d8fc <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a88      	ldr	r2, [pc, #544]	; (800dad0 <HAL_SAI_Init+0x288>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d004      	beq.n	800d8be <HAL_SAI_Init+0x76>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a86      	ldr	r2, [pc, #536]	; (800dad4 <HAL_SAI_Init+0x28c>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d102      	bne.n	800d8c4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800d8be:	4b86      	ldr	r3, [pc, #536]	; (800dad8 <HAL_SAI_Init+0x290>)
 800d8c0:	61bb      	str	r3, [r7, #24]
 800d8c2:	e01b      	b.n	800d8fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a84      	ldr	r2, [pc, #528]	; (800dadc <HAL_SAI_Init+0x294>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d004      	beq.n	800d8d8 <HAL_SAI_Init+0x90>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a83      	ldr	r2, [pc, #524]	; (800dae0 <HAL_SAI_Init+0x298>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d102      	bne.n	800d8de <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800d8d8:	4b82      	ldr	r3, [pc, #520]	; (800dae4 <HAL_SAI_Init+0x29c>)
 800d8da:	61bb      	str	r3, [r7, #24]
 800d8dc:	e00e      	b.n	800d8fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a78      	ldr	r2, [pc, #480]	; (800dac4 <HAL_SAI_Init+0x27c>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d004      	beq.n	800d8f2 <HAL_SAI_Init+0xaa>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a7e      	ldr	r2, [pc, #504]	; (800dae8 <HAL_SAI_Init+0x2a0>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d102      	bne.n	800d8f8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800d8f2:	4b7e      	ldr	r3, [pc, #504]	; (800daec <HAL_SAI_Init+0x2a4>)
 800d8f4:	61bb      	str	r3, [r7, #24]
 800d8f6:	e001      	b.n	800d8fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e232      	b.n	800dd62 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d106      	bne.n	800d916 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7f5 fa7b 	bl	8002e0c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fc62 	bl	800e1e0 <SAI_Disable>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d001      	beq.n	800d926 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e21d      	b.n	800dd62 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2202      	movs	r2, #2
 800d92a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	2b02      	cmp	r3, #2
 800d934:	d00c      	beq.n	800d950 <HAL_SAI_Init+0x108>
 800d936:	2b02      	cmp	r3, #2
 800d938:	d80d      	bhi.n	800d956 <HAL_SAI_Init+0x10e>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d002      	beq.n	800d944 <HAL_SAI_Init+0xfc>
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d003      	beq.n	800d94a <HAL_SAI_Init+0x102>
 800d942:	e008      	b.n	800d956 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d944:	2300      	movs	r3, #0
 800d946:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d948:	e008      	b.n	800d95c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d94a:	2310      	movs	r3, #16
 800d94c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d94e:	e005      	b.n	800d95c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d950:	2320      	movs	r3, #32
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d954:	e002      	b.n	800d95c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800d956:	2300      	movs	r3, #0
 800d958:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d95a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	2b05      	cmp	r3, #5
 800d962:	d832      	bhi.n	800d9ca <HAL_SAI_Init+0x182>
 800d964:	a201      	add	r2, pc, #4	; (adr r2, 800d96c <HAL_SAI_Init+0x124>)
 800d966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96a:	bf00      	nop
 800d96c:	0800d985 	.word	0x0800d985
 800d970:	0800d98b 	.word	0x0800d98b
 800d974:	0800d993 	.word	0x0800d993
 800d978:	0800d99b 	.word	0x0800d99b
 800d97c:	0800d9ab 	.word	0x0800d9ab
 800d980:	0800d9bb 	.word	0x0800d9bb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	61fb      	str	r3, [r7, #28]
      break;
 800d988:	e022      	b.n	800d9d0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d98a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d98e:	61fb      	str	r3, [r7, #28]
      break;
 800d990:	e01e      	b.n	800d9d0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d996:	61fb      	str	r3, [r7, #28]
      break;
 800d998:	e01a      	b.n	800d9d0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d99a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d99e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	f043 0301 	orr.w	r3, r3, #1
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d9a8:	e012      	b.n	800d9d0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d9aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9ae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	f043 0302 	orr.w	r3, r3, #2
 800d9b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d9b8:	e00a      	b.n	800d9d0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d9ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9be:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	f043 0303 	orr.w	r3, r3, #3
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d9c8:	e002      	b.n	800d9d0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61fb      	str	r3, [r7, #28]
      break;
 800d9ce:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9d4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f000 80ba 	beq.w	800db54 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a35      	ldr	r2, [pc, #212]	; (800dac0 <HAL_SAI_Init+0x278>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d004      	beq.n	800d9f8 <HAL_SAI_Init+0x1b0>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a35      	ldr	r2, [pc, #212]	; (800dac8 <HAL_SAI_Init+0x280>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d104      	bne.n	800da02 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d9f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d9fc:	f7fe fc02 	bl	800c204 <HAL_RCCEx_GetPeriphCLKFreq>
 800da00:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a32      	ldr	r2, [pc, #200]	; (800dad0 <HAL_SAI_Init+0x288>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d004      	beq.n	800da16 <HAL_SAI_Init+0x1ce>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a30      	ldr	r2, [pc, #192]	; (800dad4 <HAL_SAI_Init+0x28c>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d104      	bne.n	800da20 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800da16:	f44f 7000 	mov.w	r0, #512	; 0x200
 800da1a:	f7fe fbf3 	bl	800c204 <HAL_RCCEx_GetPeriphCLKFreq>
 800da1e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a2d      	ldr	r2, [pc, #180]	; (800dadc <HAL_SAI_Init+0x294>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d004      	beq.n	800da34 <HAL_SAI_Init+0x1ec>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a2c      	ldr	r2, [pc, #176]	; (800dae0 <HAL_SAI_Init+0x298>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d104      	bne.n	800da3e <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800da34:	f44f 7000 	mov.w	r0, #512	; 0x200
 800da38:	f7fe fbe4 	bl	800c204 <HAL_RCCEx_GetPeriphCLKFreq>
 800da3c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a20      	ldr	r2, [pc, #128]	; (800dac4 <HAL_SAI_Init+0x27c>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d104      	bne.n	800da52 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800da48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800da4c:	f7fe fbda 	bl	800c204 <HAL_RCCEx_GetPeriphCLKFreq>
 800da50:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a24      	ldr	r2, [pc, #144]	; (800dae8 <HAL_SAI_Init+0x2a0>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d104      	bne.n	800da66 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800da5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800da60:	f7fe fbd0 	bl	800c204 <HAL_RCCEx_GetPeriphCLKFreq>
 800da64:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800da6e:	d120      	bne.n	800dab2 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da74:	2b04      	cmp	r3, #4
 800da76:	d102      	bne.n	800da7e <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800da78:	2340      	movs	r3, #64	; 0x40
 800da7a:	60fb      	str	r3, [r7, #12]
 800da7c:	e00a      	b.n	800da94 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da82:	2b08      	cmp	r3, #8
 800da84:	d103      	bne.n	800da8e <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800da86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	e002      	b.n	800da94 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da92:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800da94:	697a      	ldr	r2, [r7, #20]
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	005b      	lsls	r3, r3, #1
 800da9e:	4619      	mov	r1, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a1b      	ldr	r3, [r3, #32]
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	fb02 f303 	mul.w	r3, r2, r3
 800daaa:	fbb1 f3f3 	udiv	r3, r1, r3
 800daae:	613b      	str	r3, [r7, #16]
 800dab0:	e02f      	b.n	800db12 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800daba:	d119      	bne.n	800daf0 <HAL_SAI_Init+0x2a8>
 800dabc:	2302      	movs	r3, #2
 800dabe:	e018      	b.n	800daf2 <HAL_SAI_Init+0x2aa>
 800dac0:	40015804 	.word	0x40015804
 800dac4:	58005404 	.word	0x58005404
 800dac8:	40015824 	.word	0x40015824
 800dacc:	40015800 	.word	0x40015800
 800dad0:	40015c04 	.word	0x40015c04
 800dad4:	40015c24 	.word	0x40015c24
 800dad8:	40015c00 	.word	0x40015c00
 800dadc:	40016004 	.word	0x40016004
 800dae0:	40016024 	.word	0x40016024
 800dae4:	40016000 	.word	0x40016000
 800dae8:	58005424 	.word	0x58005424
 800daec:	58005400 	.word	0x58005400
 800daf0:	2301      	movs	r3, #1
 800daf2:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800daf4:	697a      	ldr	r2, [r7, #20]
 800daf6:	4613      	mov	r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4413      	add	r3, r2
 800dafc:	005b      	lsls	r3, r3, #1
 800dafe:	4619      	mov	r1, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a1b      	ldr	r3, [r3, #32]
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	fb02 f303 	mul.w	r3, r2, r3
 800db0a:	021b      	lsls	r3, r3, #8
 800db0c:	fbb1 f3f3 	udiv	r3, r1, r3
 800db10:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	4a95      	ldr	r2, [pc, #596]	; (800dd6c <HAL_SAI_Init+0x524>)
 800db16:	fba2 2303 	umull	r2, r3, r2, r3
 800db1a:	08da      	lsrs	r2, r3, #3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800db20:	6939      	ldr	r1, [r7, #16]
 800db22:	4b92      	ldr	r3, [pc, #584]	; (800dd6c <HAL_SAI_Init+0x524>)
 800db24:	fba3 2301 	umull	r2, r3, r3, r1
 800db28:	08da      	lsrs	r2, r3, #3
 800db2a:	4613      	mov	r3, r2
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4413      	add	r3, r2
 800db30:	005b      	lsls	r3, r3, #1
 800db32:	1aca      	subs	r2, r1, r3
 800db34:	2a08      	cmp	r2, #8
 800db36:	d904      	bls.n	800db42 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	1c5a      	adds	r2, r3, #1
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db46:	2b04      	cmp	r3, #4
 800db48:	d104      	bne.n	800db54 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4e:	085a      	lsrs	r2, r3, #1
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <HAL_SAI_Init+0x31c>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	2b02      	cmp	r3, #2
 800db62:	d109      	bne.n	800db78 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d101      	bne.n	800db70 <HAL_SAI_Init+0x328>
 800db6c:	2300      	movs	r3, #0
 800db6e:	e001      	b.n	800db74 <HAL_SAI_Init+0x32c>
 800db70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db74:	623b      	str	r3, [r7, #32]
 800db76:	e008      	b.n	800db8a <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d102      	bne.n	800db86 <HAL_SAI_Init+0x33e>
 800db80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db84:	e000      	b.n	800db88 <HAL_SAI_Init+0x340>
 800db86:	2300      	movs	r3, #0
 800db88:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800db8a:	f7f6 fbaf 	bl	80042ec <HAL_GetREVID>
 800db8e:	4603      	mov	r3, r0
 800db90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db94:	d331      	bcc.n	800dbfa <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	6819      	ldr	r1, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	4b73      	ldr	r3, [pc, #460]	; (800dd70 <HAL_SAI_Init+0x528>)
 800dba2:	400b      	ands	r3, r1
 800dba4:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	6819      	ldr	r1, [r3, #0]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbb4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dbba:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbc0:	431a      	orrs	r2, r3
 800dbc2:	6a3b      	ldr	r3, [r7, #32]
 800dbc4:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800dbce:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dbda:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe0:	051b      	lsls	r3, r3, #20
 800dbe2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dbe8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	601a      	str	r2, [r3, #0]
 800dbf8:	e02d      	b.n	800dc56 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	6819      	ldr	r1, [r3, #0]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	4b5b      	ldr	r3, [pc, #364]	; (800dd74 <HAL_SAI_Init+0x52c>)
 800dc06:	400b      	ands	r3, r1
 800dc08:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	6819      	ldr	r1, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc18:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc1e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc24:	431a      	orrs	r2, r3
 800dc26:	6a3b      	ldr	r3, [r7, #32]
 800dc28:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800dc32:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800dc3e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc44:	051b      	lsls	r3, r3, #20
 800dc46:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dc4c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	6859      	ldr	r1, [r3, #4]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	4b45      	ldr	r3, [pc, #276]	; (800dd78 <HAL_SAI_Init+0x530>)
 800dc62:	400b      	ands	r3, r1
 800dc64:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	6859      	ldr	r1, [r3, #4]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	69da      	ldr	r2, [r3, #28]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc74:	431a      	orrs	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc7a:	431a      	orrs	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	430a      	orrs	r2, r1
 800dc82:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	6899      	ldr	r1, [r3, #8]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	4b3b      	ldr	r3, [pc, #236]	; (800dd7c <HAL_SAI_Init+0x534>)
 800dc90:	400b      	ands	r3, r1
 800dc92:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6899      	ldr	r1, [r3, #8]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc9e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dca4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800dcaa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800dcb0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800dcba:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	430a      	orrs	r2, r1
 800dcc2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	68d9      	ldr	r1, [r3, #12]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	f24f 0320 	movw	r3, #61472	; 0xf020
 800dcd2:	400b      	ands	r3, r1
 800dcd4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	68d9      	ldr	r1, [r3, #12]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcea:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dcec:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	021b      	lsls	r3, r3, #8
 800dcf6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	430a      	orrs	r2, r1
 800dcfe:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a1e      	ldr	r2, [pc, #120]	; (800dd80 <HAL_SAI_Init+0x538>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d004      	beq.n	800dd14 <HAL_SAI_Init+0x4cc>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a1d      	ldr	r2, [pc, #116]	; (800dd84 <HAL_SAI_Init+0x53c>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d119      	bne.n	800dd48 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd18:	f023 0201 	bic.w	r2, r3, #1
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d10e      	bne.n	800dd48 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd32:	3b01      	subs	r3, #1
 800dd34:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800dd36:	431a      	orrs	r2, r3
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd40:	f043 0201 	orr.w	r2, r3, #1
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3728      	adds	r7, #40	; 0x28
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	cccccccd 	.word	0xcccccccd
 800dd70:	f005c010 	.word	0xf005c010
 800dd74:	f805c010 	.word	0xf805c010
 800dd78:	ffff1ff0 	.word	0xffff1ff0
 800dd7c:	fff88000 	.word	0xfff88000
 800dd80:	40015804 	.word	0x40015804
 800dd84:	58005404 	.word	0x58005404

0800dd88 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	4613      	mov	r3, r2
 800dd94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800dd96:	f7f6 fa79 	bl	800428c <HAL_GetTick>
 800dd9a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d002      	beq.n	800dda8 <HAL_SAI_Transmit_DMA+0x20>
 800dda2:	88fb      	ldrh	r3, [r7, #6]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e098      	b.n	800dede <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	f040 8091 	bne.w	800dedc <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d101      	bne.n	800ddc8 <HAL_SAI_Transmit_DMA+0x40>
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	e08a      	b.n	800dede <HAL_SAI_Transmit_DMA+0x156>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	68ba      	ldr	r2, [r7, #8]
 800ddd4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	88fa      	ldrh	r2, [r7, #6]
 800ddda:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	88fa      	ldrh	r2, [r7, #6]
 800dde2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2212      	movs	r2, #18
 800ddf2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddfc:	4a3a      	ldr	r2, [pc, #232]	; (800dee8 <HAL_SAI_Transmit_DMA+0x160>)
 800ddfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de06:	4a39      	ldr	r2, [pc, #228]	; (800deec <HAL_SAI_Transmit_DMA+0x164>)
 800de08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de10:	4a37      	ldr	r2, [pc, #220]	; (800def0 <HAL_SAI_Transmit_DMA+0x168>)
 800de12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de1a:	2200      	movs	r2, #0
 800de1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de28:	4619      	mov	r1, r3
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	331c      	adds	r3, #28
 800de30:	461a      	mov	r2, r3
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800de38:	f7f8 fc78 	bl	800672c <HAL_DMA_Start_IT>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d005      	beq.n	800de4e <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e047      	b.n	800dede <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800de4e:	2100      	movs	r1, #0
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 f98d 	bl	800e170 <SAI_InterruptFlag>
 800de56:	4601      	mov	r1, r0
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	691a      	ldr	r2, [r3, #16]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	430a      	orrs	r2, r1
 800de64:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800de74:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800de76:	e015      	b.n	800dea4 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800de78:	f7f6 fa08 	bl	800428c <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de86:	d90d      	bls.n	800dea4 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800dea0:	2303      	movs	r3, #3
 800dea2:	e01c      	b.n	800dede <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	695b      	ldr	r3, [r3, #20]
 800deaa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d0e2      	beq.n	800de78 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800debc:	2b00      	cmp	r3, #0
 800debe:	d107      	bne.n	800ded0 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dece:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2200      	movs	r2, #0
 800ded4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800ded8:	2300      	movs	r3, #0
 800deda:	e000      	b.n	800dede <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800dedc:	2302      	movs	r3, #2
  }
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3718      	adds	r7, #24
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	0800e2b5 	.word	0x0800e2b5
 800deec:	0800e255 	.word	0x0800e255
 800def0:	0800e2d1 	.word	0x0800e2d1

0800def4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800defc:	bf00      	nop
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800df08:	b480      	push	{r7}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
 800df14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df16:	2300      	movs	r3, #0
 800df18:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d003      	beq.n	800df36 <SAI_InitI2S+0x2e>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	2b02      	cmp	r3, #2
 800df34:	d103      	bne.n	800df3e <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2200      	movs	r2, #0
 800df3a:	651a      	str	r2, [r3, #80]	; 0x50
 800df3c:	e002      	b.n	800df44 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2201      	movs	r2, #1
 800df42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800df4a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df52:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2200      	movs	r2, #0
 800df58:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	683a      	ldr	r2, [r7, #0]
 800df5e:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	2b00      	cmp	r3, #0
 800df68:	d001      	beq.n	800df6e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e077      	b.n	800e05e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d107      	bne.n	800df84 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2200      	movs	r2, #0
 800df78:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800df80:	665a      	str	r2, [r3, #100]	; 0x64
 800df82:	e006      	b.n	800df92 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800df8a:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2200      	movs	r2, #0
 800df90:	665a      	str	r2, [r3, #100]	; 0x64
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b03      	cmp	r3, #3
 800df96:	d84f      	bhi.n	800e038 <SAI_InitI2S+0x130>
 800df98:	a201      	add	r2, pc, #4	; (adr r2, 800dfa0 <SAI_InitI2S+0x98>)
 800df9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9e:	bf00      	nop
 800dfa0:	0800dfb1 	.word	0x0800dfb1
 800dfa4:	0800dfd3 	.word	0x0800dfd3
 800dfa8:	0800dff5 	.word	0x0800dff5
 800dfac:	0800e017 	.word	0x0800e017

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2280      	movs	r2, #128	; 0x80
 800dfb4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	085b      	lsrs	r3, r3, #1
 800dfba:	015a      	lsls	r2, r3, #5
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	085b      	lsrs	r3, r3, #1
 800dfc4:	011a      	lsls	r2, r3, #4
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2240      	movs	r2, #64	; 0x40
 800dfce:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dfd0:	e035      	b.n	800e03e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2280      	movs	r2, #128	; 0x80
 800dfd6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	085b      	lsrs	r3, r3, #1
 800dfdc:	019a      	lsls	r2, r3, #6
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	085b      	lsrs	r3, r3, #1
 800dfe6:	015a      	lsls	r2, r3, #5
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2280      	movs	r2, #128	; 0x80
 800dff0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800dff2:	e024      	b.n	800e03e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	22c0      	movs	r2, #192	; 0xc0
 800dff8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	085b      	lsrs	r3, r3, #1
 800dffe:	019a      	lsls	r2, r3, #6
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	085b      	lsrs	r3, r3, #1
 800e008:	015a      	lsls	r2, r3, #5
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2280      	movs	r2, #128	; 0x80
 800e012:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e014:	e013      	b.n	800e03e <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	22e0      	movs	r2, #224	; 0xe0
 800e01a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	085b      	lsrs	r3, r3, #1
 800e020:	019a      	lsls	r2, r3, #6
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	085b      	lsrs	r3, r3, #1
 800e02a:	015a      	lsls	r2, r3, #5
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2280      	movs	r2, #128	; 0x80
 800e034:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e036:	e002      	b.n	800e03e <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800e038:	2301      	movs	r3, #1
 800e03a:	75fb      	strb	r3, [r7, #23]
      break;
 800e03c:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b02      	cmp	r3, #2
 800e042:	d10b      	bne.n	800e05c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2b01      	cmp	r3, #1
 800e048:	d102      	bne.n	800e050 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2210      	movs	r2, #16
 800e04e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b02      	cmp	r3, #2
 800e054:	d102      	bne.n	800e05c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2208      	movs	r2, #8
 800e05a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800e05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e05e:	4618      	mov	r0, r3
 800e060:	371c      	adds	r7, #28
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop

0800e06c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b087      	sub	sp, #28
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
 800e078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e07a:	2300      	movs	r3, #0
 800e07c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <SAI_InitPCM+0x2e>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	2b02      	cmp	r3, #2
 800e098:	d103      	bne.n	800e0a2 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2201      	movs	r2, #1
 800e09e:	651a      	str	r2, [r3, #80]	; 0x50
 800e0a0:	e002      	b.n	800e0a8 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e0b4:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e0bc:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	683a      	ldr	r2, [r7, #0]
 800e0c8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0d0:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	2b04      	cmp	r3, #4
 800e0d6:	d103      	bne.n	800e0e0 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	659a      	str	r2, [r3, #88]	; 0x58
 800e0de:	e002      	b.n	800e0e6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	220d      	movs	r2, #13
 800e0e4:	659a      	str	r2, [r3, #88]	; 0x58
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d837      	bhi.n	800e15c <SAI_InitPCM+0xf0>
 800e0ec:	a201      	add	r2, pc, #4	; (adr r2, 800e0f4 <SAI_InitPCM+0x88>)
 800e0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f2:	bf00      	nop
 800e0f4:	0800e105 	.word	0x0800e105
 800e0f8:	0800e11b 	.word	0x0800e11b
 800e0fc:	0800e131 	.word	0x0800e131
 800e100:	0800e147 	.word	0x0800e147
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2280      	movs	r2, #128	; 0x80
 800e108:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	011a      	lsls	r2, r3, #4
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2240      	movs	r2, #64	; 0x40
 800e116:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e118:	e023      	b.n	800e162 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2280      	movs	r2, #128	; 0x80
 800e11e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	015a      	lsls	r2, r3, #5
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2280      	movs	r2, #128	; 0x80
 800e12c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e12e:	e018      	b.n	800e162 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	22c0      	movs	r2, #192	; 0xc0
 800e134:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	015a      	lsls	r2, r3, #5
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2280      	movs	r2, #128	; 0x80
 800e142:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e144:	e00d      	b.n	800e162 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	22e0      	movs	r2, #224	; 0xe0
 800e14a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	015a      	lsls	r2, r3, #5
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2280      	movs	r2, #128	; 0x80
 800e158:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800e15a:	e002      	b.n	800e162 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800e15c:	2301      	movs	r3, #1
 800e15e:	75fb      	strb	r3, [r7, #23]
      break;
 800e160:	bf00      	nop
  }

  return status;
 800e162:	7dfb      	ldrb	r3, [r7, #23]
}
 800e164:	4618      	mov	r0, r3
 800e166:	371c      	adds	r7, #28
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e180:	78fb      	ldrb	r3, [r7, #3]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d103      	bne.n	800e18e <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f043 0308 	orr.w	r3, r3, #8
 800e18c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e192:	2b08      	cmp	r3, #8
 800e194:	d10b      	bne.n	800e1ae <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e19a:	2b03      	cmp	r3, #3
 800e19c:	d003      	beq.n	800e1a6 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d103      	bne.n	800e1ae <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f043 0310 	orr.w	r3, r3, #16
 800e1ac:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	2b03      	cmp	r3, #3
 800e1b4:	d003      	beq.n	800e1be <SAI_InterruptFlag+0x4e>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d104      	bne.n	800e1c8 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e1c4:	60fb      	str	r3, [r7, #12]
 800e1c6:	e003      	b.n	800e1d0 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f043 0304 	orr.w	r3, r3, #4
 800e1ce:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3714      	adds	r7, #20
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
	...

0800e1e0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e1e8:	4b18      	ldr	r3, [pc, #96]	; (800e24c <SAI_Disable+0x6c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a18      	ldr	r2, [pc, #96]	; (800e250 <SAI_Disable+0x70>)
 800e1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f2:	0b1b      	lsrs	r3, r3, #12
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e20a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10a      	bne.n	800e228 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e218:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800e222:	2303      	movs	r3, #3
 800e224:	72fb      	strb	r3, [r7, #11]
      break;
 800e226:	e009      	b.n	800e23c <SAI_Disable+0x5c>
    }
    count--;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	3b01      	subs	r3, #1
 800e22c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1e7      	bne.n	800e20c <SAI_Disable+0x2c>

  return status;
 800e23c:	7afb      	ldrb	r3, [r7, #11]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop
 800e24c:	24000000 	.word	0x24000000
 800e250:	95cbec1b 	.word	0x95cbec1b

0800e254 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e260:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	69db      	ldr	r3, [r3, #28]
 800e266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e26a:	d01c      	beq.n	800e2a6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e282:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e284:	2100      	movs	r1, #0
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f7ff ff72 	bl	800e170 <SAI_InterruptFlag>
 800e28c:	4603      	mov	r3, r0
 800e28e:	43d9      	mvns	r1, r3
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	691a      	ldr	r2, [r3, #16]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	400a      	ands	r2, r1
 800e29c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f004 fc3c 	bl	8012b24 <HAL_SAI_TxCpltCallback>
#endif
}
 800e2ac:	bf00      	nop
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f004 fc18 	bl	8012af8 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800e2c8:	bf00      	nop
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2dc:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7f9 fbb8 	bl	8007a54 <HAL_DMA_GetError>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d01d      	beq.n	800e326 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e308:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f7ff ff68 	bl	800e1e0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800e320:	68f8      	ldr	r0, [r7, #12]
 800e322:	f7ff fde7 	bl	800def4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800e326:	bf00      	nop
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
	...

0800e330 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800e338:	2300      	movs	r3, #0
 800e33a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	e0eb      	b.n	800e51e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a75      	ldr	r2, [pc, #468]	; (800e528 <HAL_SPI_Init+0x1f8>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d00f      	beq.n	800e376 <HAL_SPI_Init+0x46>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a74      	ldr	r2, [pc, #464]	; (800e52c <HAL_SPI_Init+0x1fc>)
 800e35c:	4293      	cmp	r3, r2
 800e35e:	d00a      	beq.n	800e376 <HAL_SPI_Init+0x46>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a72      	ldr	r2, [pc, #456]	; (800e530 <HAL_SPI_Init+0x200>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d005      	beq.n	800e376 <HAL_SPI_Init+0x46>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	2b0f      	cmp	r3, #15
 800e370:	d901      	bls.n	800e376 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800e372:	2301      	movs	r3, #1
 800e374:	e0d3      	b.n	800e51e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f001 f888 	bl	800f48c <SPI_GetPacketSize>
 800e37c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a69      	ldr	r2, [pc, #420]	; (800e528 <HAL_SPI_Init+0x1f8>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d00c      	beq.n	800e3a2 <HAL_SPI_Init+0x72>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a67      	ldr	r2, [pc, #412]	; (800e52c <HAL_SPI_Init+0x1fc>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d007      	beq.n	800e3a2 <HAL_SPI_Init+0x72>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a66      	ldr	r2, [pc, #408]	; (800e530 <HAL_SPI_Init+0x200>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d002      	beq.n	800e3a2 <HAL_SPI_Init+0x72>
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2b08      	cmp	r3, #8
 800e3a0:	d811      	bhi.n	800e3c6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e3a6:	4a60      	ldr	r2, [pc, #384]	; (800e528 <HAL_SPI_Init+0x1f8>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d009      	beq.n	800e3c0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a5e      	ldr	r2, [pc, #376]	; (800e52c <HAL_SPI_Init+0x1fc>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d004      	beq.n	800e3c0 <HAL_SPI_Init+0x90>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a5d      	ldr	r2, [pc, #372]	; (800e530 <HAL_SPI_Init+0x200>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d104      	bne.n	800e3ca <HAL_SPI_Init+0x9a>
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b10      	cmp	r3, #16
 800e3c4:	d901      	bls.n	800e3ca <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e0a9      	b.n	800e51e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d106      	bne.n	800e3e4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7f4 fe32 	bl	8003048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f022 0201 	bic.w	r2, r2, #1
 800e3fa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e404:	d119      	bne.n	800e43a <HAL_SPI_Init+0x10a>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e40e:	d103      	bne.n	800e418 <HAL_SPI_Init+0xe8>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e414:	2b00      	cmp	r3, #0
 800e416:	d008      	beq.n	800e42a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10c      	bne.n	800e43a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e428:	d107      	bne.n	800e43a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e438:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	69da      	ldr	r2, [r3, #28]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e442:	431a      	orrs	r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	431a      	orrs	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e44c:	ea42 0103 	orr.w	r1, r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	68da      	ldr	r2, [r3, #12]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	430a      	orrs	r2, r1
 800e45a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e464:	431a      	orrs	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e46a:	431a      	orrs	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	699b      	ldr	r3, [r3, #24]
 800e470:	431a      	orrs	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	431a      	orrs	r2, r3
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	695b      	ldr	r3, [r3, #20]
 800e47c:	431a      	orrs	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6a1b      	ldr	r3, [r3, #32]
 800e482:	431a      	orrs	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	431a      	orrs	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e48e:	431a      	orrs	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	431a      	orrs	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e49a:	ea42 0103 	orr.w	r1, r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	430a      	orrs	r2, r1
 800e4a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d113      	bne.n	800e4da <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e4c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e4d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	f022 0201 	bic.w	r2, r2, #1
 800e4e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00a      	beq.n	800e50c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	430a      	orrs	r2, r1
 800e50a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2201      	movs	r2, #1
 800e518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	40013000 	.word	0x40013000
 800e52c:	40003800 	.word	0x40003800
 800e530:	40003c00 	.word	0x40003c00

0800e534 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b08a      	sub	sp, #40	; 0x28
 800e538:	af02      	add	r7, sp, #8
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	603b      	str	r3, [r7, #0]
 800e540:	4613      	mov	r3, r2
 800e542:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	3320      	adds	r3, #32
 800e54a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e54c:	2300      	movs	r3, #0
 800e54e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e556:	2b01      	cmp	r3, #1
 800e558:	d101      	bne.n	800e55e <HAL_SPI_Transmit+0x2a>
 800e55a:	2302      	movs	r3, #2
 800e55c:	e1d7      	b.n	800e90e <HAL_SPI_Transmit+0x3da>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2201      	movs	r2, #1
 800e562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e566:	f7f5 fe91 	bl	800428c <HAL_GetTick>
 800e56a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b01      	cmp	r3, #1
 800e576:	d007      	beq.n	800e588 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e578:	2302      	movs	r3, #2
 800e57a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e584:	7efb      	ldrb	r3, [r7, #27]
 800e586:	e1c2      	b.n	800e90e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d002      	beq.n	800e594 <HAL_SPI_Transmit+0x60>
 800e58e:	88fb      	ldrh	r3, [r7, #6]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d107      	bne.n	800e5a4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e594:	2301      	movs	r3, #1
 800e596:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e5a0:	7efb      	ldrb	r3, [r7, #27]
 800e5a2:	e1b4      	b.n	800e90e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2203      	movs	r2, #3
 800e5a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	88fa      	ldrh	r2, [r7, #6]
 800e5be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	88fa      	ldrh	r2, [r7, #6]
 800e5c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e5f4:	d107      	bne.n	800e606 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e604:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	4b96      	ldr	r3, [pc, #600]	; (800e868 <HAL_SPI_Transmit+0x334>)
 800e60e:	4013      	ands	r3, r2
 800e610:	88f9      	ldrh	r1, [r7, #6]
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	6812      	ldr	r2, [r2, #0]
 800e616:	430b      	orrs	r3, r1
 800e618:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f042 0201 	orr.w	r2, r2, #1
 800e628:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e632:	d107      	bne.n	800e644 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	2b0f      	cmp	r3, #15
 800e64a:	d947      	bls.n	800e6dc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e64c:	e03f      	b.n	800e6ce <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	695b      	ldr	r3, [r3, #20]
 800e654:	f003 0302 	and.w	r3, r3, #2
 800e658:	2b02      	cmp	r3, #2
 800e65a:	d114      	bne.n	800e686 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6812      	ldr	r2, [r2, #0]
 800e666:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e66c:	1d1a      	adds	r2, r3, #4
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e678:	b29b      	uxth	r3, r3
 800e67a:	3b01      	subs	r3, #1
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e684:	e023      	b.n	800e6ce <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e686:	f7f5 fe01 	bl	800428c <HAL_GetTick>
 800e68a:	4602      	mov	r2, r0
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	429a      	cmp	r2, r3
 800e694:	d803      	bhi.n	800e69e <HAL_SPI_Transmit+0x16a>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e69c:	d102      	bne.n	800e6a4 <HAL_SPI_Transmit+0x170>
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d114      	bne.n	800e6ce <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f000 fe23 	bl	800f2f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e11f      	b.n	800e90e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1b9      	bne.n	800e64e <HAL_SPI_Transmit+0x11a>
 800e6da:	e0f2      	b.n	800e8c2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	2b07      	cmp	r3, #7
 800e6e2:	f240 80e7 	bls.w	800e8b4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e6e6:	e05d      	b.n	800e7a4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	695b      	ldr	r3, [r3, #20]
 800e6ee:	f003 0302 	and.w	r3, r3, #2
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d132      	bne.n	800e75c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d918      	bls.n	800e734 <HAL_SPI_Transmit+0x200>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e706:	2b00      	cmp	r3, #0
 800e708:	d014      	beq.n	800e734 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6812      	ldr	r2, [r2, #0]
 800e714:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e71a:	1d1a      	adds	r2, r3, #4
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e726:	b29b      	uxth	r3, r3
 800e728:	3b02      	subs	r3, #2
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e732:	e037      	b.n	800e7a4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e738:	881a      	ldrh	r2, [r3, #0]
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e742:	1c9a      	adds	r2, r3, #2
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e74e:	b29b      	uxth	r3, r3
 800e750:	3b01      	subs	r3, #1
 800e752:	b29a      	uxth	r2, r3
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e75a:	e023      	b.n	800e7a4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e75c:	f7f5 fd96 	bl	800428c <HAL_GetTick>
 800e760:	4602      	mov	r2, r0
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d803      	bhi.n	800e774 <HAL_SPI_Transmit+0x240>
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e772:	d102      	bne.n	800e77a <HAL_SPI_Transmit+0x246>
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d114      	bne.n	800e7a4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f000 fdb8 	bl	800f2f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e78e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	e0b4      	b.n	800e90e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d19b      	bne.n	800e6e8 <HAL_SPI_Transmit+0x1b4>
 800e7b0:	e087      	b.n	800e8c2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	f003 0302 	and.w	r3, r3, #2
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	d155      	bne.n	800e86c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	2b03      	cmp	r3, #3
 800e7ca:	d918      	bls.n	800e7fe <HAL_SPI_Transmit+0x2ca>
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7d0:	2b40      	cmp	r3, #64	; 0x40
 800e7d2:	d914      	bls.n	800e7fe <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6812      	ldr	r2, [r2, #0]
 800e7de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7e4:	1d1a      	adds	r2, r3, #4
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	3b04      	subs	r3, #4
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e7fc:	e05a      	b.n	800e8b4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e804:	b29b      	uxth	r3, r3
 800e806:	2b01      	cmp	r3, #1
 800e808:	d917      	bls.n	800e83a <HAL_SPI_Transmit+0x306>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d013      	beq.n	800e83a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e816:	881a      	ldrh	r2, [r3, #0]
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e820:	1c9a      	adds	r2, r3, #2
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	3b02      	subs	r3, #2
 800e830:	b29a      	uxth	r2, r3
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e838:	e03c      	b.n	800e8b4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3320      	adds	r3, #32
 800e844:	7812      	ldrb	r2, [r2, #0]
 800e846:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e858:	b29b      	uxth	r3, r3
 800e85a:	3b01      	subs	r3, #1
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e864:	e026      	b.n	800e8b4 <HAL_SPI_Transmit+0x380>
 800e866:	bf00      	nop
 800e868:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e86c:	f7f5 fd0e 	bl	800428c <HAL_GetTick>
 800e870:	4602      	mov	r2, r0
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	683a      	ldr	r2, [r7, #0]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d803      	bhi.n	800e884 <HAL_SPI_Transmit+0x350>
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e882:	d102      	bne.n	800e88a <HAL_SPI_Transmit+0x356>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d114      	bne.n	800e8b4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f000 fd30 	bl	800f2f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2200      	movs	r2, #0
 800e894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e89e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e02c      	b.n	800e90e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f47f af78 	bne.w	800e7b2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	2108      	movs	r1, #8
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f000 fdaf 	bl	800f430 <SPI_WaitOnFlagUntilTimeout>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d007      	beq.n	800e8e8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8de:	f043 0220 	orr.w	r2, r3, #32
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f000 fd01 	bl	800f2f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	e000      	b.n	800e90e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e90c:	7efb      	ldrb	r3, [r7, #27]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3720      	adds	r7, #32
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop

0800e918 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08a      	sub	sp, #40	; 0x28
 800e91c:	af02      	add	r7, sp, #8
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	603b      	str	r3, [r7, #0]
 800e924:	4613      	mov	r3, r2
 800e926:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e928:	2300      	movs	r3, #0
 800e92a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3330      	adds	r3, #48	; 0x30
 800e932:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e93c:	d112      	bne.n	800e964 <HAL_SPI_Receive+0x4c>
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10e      	bne.n	800e964 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2204      	movs	r2, #4
 800e94a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e94e:	88fa      	ldrh	r2, [r7, #6]
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	4613      	mov	r3, r2
 800e956:	68ba      	ldr	r2, [r7, #8]
 800e958:	68b9      	ldr	r1, [r7, #8]
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f000 f9ce 	bl	800ecfc <HAL_SPI_TransmitReceive>
 800e960:	4603      	mov	r3, r0
 800e962:	e1c7      	b.n	800ecf4 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d101      	bne.n	800e972 <HAL_SPI_Receive+0x5a>
 800e96e:	2302      	movs	r3, #2
 800e970:	e1c0      	b.n	800ecf4 <HAL_SPI_Receive+0x3dc>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2201      	movs	r2, #1
 800e976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e97a:	f7f5 fc87 	bl	800428c <HAL_GetTick>
 800e97e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e986:	b2db      	uxtb	r3, r3
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d007      	beq.n	800e99c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800e98c:	2302      	movs	r3, #2
 800e98e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e998:	7ffb      	ldrb	r3, [r7, #31]
 800e99a:	e1ab      	b.n	800ecf4 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d002      	beq.n	800e9a8 <HAL_SPI_Receive+0x90>
 800e9a2:	88fb      	ldrh	r3, [r7, #6]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d107      	bne.n	800e9b8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e9b4:	7ffb      	ldrb	r3, [r7, #31]
 800e9b6:	e19d      	b.n	800ecf4 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2204      	movs	r2, #4
 800e9bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	88fa      	ldrh	r2, [r7, #6]
 800e9d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	88fa      	ldrh	r2, [r7, #6]
 800e9da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ea08:	d107      	bne.n	800ea1a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ea18:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	4b94      	ldr	r3, [pc, #592]	; (800ec74 <HAL_SPI_Receive+0x35c>)
 800ea22:	4013      	ands	r3, r2
 800ea24:	88f9      	ldrh	r1, [r7, #6]
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	6812      	ldr	r2, [r2, #0]
 800ea2a:	430b      	orrs	r3, r1
 800ea2c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f042 0201 	orr.w	r2, r2, #1
 800ea3c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea46:	d107      	bne.n	800ea58 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ea56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	2b0f      	cmp	r3, #15
 800ea5e:	d948      	bls.n	800eaf2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ea60:	e040      	b.n	800eae4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	695a      	ldr	r2, [r3, #20]
 800ea68:	f248 0308 	movw	r3, #32776	; 0x8008
 800ea6c:	4013      	ands	r3, r2
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d014      	beq.n	800ea9c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ea7c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea82:	1d1a      	adds	r2, r3, #4
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	3b01      	subs	r3, #1
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ea9a:	e023      	b.n	800eae4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea9c:	f7f5 fbf6 	bl	800428c <HAL_GetTick>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	683a      	ldr	r2, [r7, #0]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d803      	bhi.n	800eab4 <HAL_SPI_Receive+0x19c>
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eab2:	d102      	bne.n	800eaba <HAL_SPI_Receive+0x1a2>
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d114      	bne.n	800eae4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f000 fc18 	bl	800f2f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800eae0:	2301      	movs	r3, #1
 800eae2:	e107      	b.n	800ecf4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d1b8      	bne.n	800ea62 <HAL_SPI_Receive+0x14a>
 800eaf0:	e0ed      	b.n	800ecce <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	2b07      	cmp	r3, #7
 800eaf8:	f240 80e2 	bls.w	800ecc0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800eafc:	e05b      	b.n	800ebb6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	695b      	ldr	r3, [r3, #20]
 800eb04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d030      	beq.n	800eb6e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	695b      	ldr	r3, [r3, #20]
 800eb12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d014      	beq.n	800eb44 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800eb24:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb2a:	1d1a      	adds	r2, r3, #4
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	3b02      	subs	r3, #2
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eb42:	e038      	b.n	800ebb6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb48:	69ba      	ldr	r2, [r7, #24]
 800eb4a:	8812      	ldrh	r2, [r2, #0]
 800eb4c:	b292      	uxth	r2, r2
 800eb4e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb54:	1c9a      	adds	r2, r3, #2
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	3b01      	subs	r3, #1
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eb6c:	e023      	b.n	800ebb6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb6e:	f7f5 fb8d 	bl	800428c <HAL_GetTick>
 800eb72:	4602      	mov	r2, r0
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	1ad3      	subs	r3, r2, r3
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d803      	bhi.n	800eb86 <HAL_SPI_Receive+0x26e>
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb84:	d102      	bne.n	800eb8c <HAL_SPI_Receive+0x274>
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d114      	bne.n	800ebb6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f000 fbaf 	bl	800f2f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eba0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e09e      	b.n	800ecf4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d19d      	bne.n	800eafe <HAL_SPI_Receive+0x1e6>
 800ebc2:	e084      	b.n	800ecce <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	695b      	ldr	r3, [r3, #20]
 800ebca:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d052      	beq.n	800ec78 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	695b      	ldr	r3, [r3, #20]
 800ebd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d014      	beq.n	800ec0a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebe8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ebea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebf0:	1d1a      	adds	r2, r3, #4
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	3b04      	subs	r3, #4
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ec08:	e05a      	b.n	800ecc0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	695b      	ldr	r3, [r3, #20]
 800ec10:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ec14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec18:	d914      	bls.n	800ec44 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec1e:	69ba      	ldr	r2, [r7, #24]
 800ec20:	8812      	ldrh	r2, [r2, #0]
 800ec22:	b292      	uxth	r2, r2
 800ec24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec2a:	1c9a      	adds	r2, r3, #2
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	3b02      	subs	r3, #2
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ec42:	e03d      	b.n	800ecc0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec50:	7812      	ldrb	r2, [r2, #0]
 800ec52:	b2d2      	uxtb	r2, r2
 800ec54:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec5a:	1c5a      	adds	r2, r3, #1
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ec72:	e025      	b.n	800ecc0 <HAL_SPI_Receive+0x3a8>
 800ec74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec78:	f7f5 fb08 	bl	800428c <HAL_GetTick>
 800ec7c:	4602      	mov	r2, r0
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d803      	bhi.n	800ec90 <HAL_SPI_Receive+0x378>
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec8e:	d102      	bne.n	800ec96 <HAL_SPI_Receive+0x37e>
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d114      	bne.n	800ecc0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f000 fb2a 	bl	800f2f0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e019      	b.n	800ecf4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f47f af7b 	bne.w	800ebc4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ecce:	68f8      	ldr	r0, [r7, #12]
 800ecd0:	f000 fb0e 	bl	800f2f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d001      	beq.n	800ecf2 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e000      	b.n	800ecf4 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800ecf2:	7ffb      	ldrb	r3, [r7, #31]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3720      	adds	r7, #32
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08e      	sub	sp, #56	; 0x38
 800ed00:	af02      	add	r7, sp, #8
 800ed02:	60f8      	str	r0, [r7, #12]
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
 800ed08:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	3320      	adds	r3, #32
 800ed16:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	3330      	adds	r3, #48	; 0x30
 800ed1e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d101      	bne.n	800ed2e <HAL_SPI_TransmitReceive+0x32>
 800ed2a:	2302      	movs	r3, #2
 800ed2c:	e2ce      	b.n	800f2cc <HAL_SPI_TransmitReceive+0x5d0>
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2201      	movs	r2, #1
 800ed32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed36:	f7f5 faa9 	bl	800428c <HAL_GetTick>
 800ed3a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800ed3c:	887b      	ldrh	r3, [r7, #2]
 800ed3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800ed40:	887b      	ldrh	r3, [r7, #2]
 800ed42:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ed4a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ed52:	7efb      	ldrb	r3, [r7, #27]
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d014      	beq.n	800ed82 <HAL_SPI_TransmitReceive+0x86>
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed5e:	d106      	bne.n	800ed6e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d102      	bne.n	800ed6e <HAL_SPI_TransmitReceive+0x72>
 800ed68:	7efb      	ldrb	r3, [r7, #27]
 800ed6a:	2b04      	cmp	r3, #4
 800ed6c:	d009      	beq.n	800ed82 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800ed6e:	2302      	movs	r3, #2
 800ed70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ed7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed80:	e2a4      	b.n	800f2cc <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d005      	beq.n	800ed94 <HAL_SPI_TransmitReceive+0x98>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d002      	beq.n	800ed94 <HAL_SPI_TransmitReceive+0x98>
 800ed8e:	887b      	ldrh	r3, [r7, #2]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d109      	bne.n	800eda8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800ed94:	2301      	movs	r3, #1
 800ed96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eda2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eda6:	e291      	b.n	800f2cc <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	2b04      	cmp	r3, #4
 800edb2:	d003      	beq.n	800edbc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2205      	movs	r2, #5
 800edb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2200      	movs	r2, #0
 800edc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	887a      	ldrh	r2, [r7, #2]
 800edce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	887a      	ldrh	r2, [r7, #2]
 800edd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	68ba      	ldr	r2, [r7, #8]
 800edde:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	887a      	ldrh	r2, [r7, #2]
 800ede4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	887a      	ldrh	r2, [r7, #2]
 800edec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2200      	movs	r2, #0
 800edf4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	685a      	ldr	r2, [r3, #4]
 800ee02:	4b9f      	ldr	r3, [pc, #636]	; (800f080 <HAL_SPI_TransmitReceive+0x384>)
 800ee04:	4013      	ands	r3, r2
 800ee06:	8879      	ldrh	r1, [r7, #2]
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	6812      	ldr	r2, [r2, #0]
 800ee0c:	430b      	orrs	r3, r1
 800ee0e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f042 0201 	orr.w	r2, r2, #1
 800ee1e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee28:	d107      	bne.n	800ee3a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	2b0f      	cmp	r3, #15
 800ee40:	d970      	bls.n	800ef24 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ee42:	e068      	b.n	800ef16 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	695b      	ldr	r3, [r3, #20]
 800ee4a:	f003 0302 	and.w	r3, r3, #2
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	d11a      	bne.n	800ee88 <HAL_SPI_TransmitReceive+0x18c>
 800ee52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d017      	beq.n	800ee88 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	6812      	ldr	r2, [r2, #0]
 800ee62:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee68:	1d1a      	adds	r2, r3, #4
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	3b01      	subs	r3, #1
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee86:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	695a      	ldr	r2, [r3, #20]
 800ee8e:	f248 0308 	movw	r3, #32776	; 0x8008
 800ee92:	4013      	ands	r3, r2
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d01a      	beq.n	800eece <HAL_SPI_TransmitReceive+0x1d2>
 800ee98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d017      	beq.n	800eece <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eea6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800eea8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eeae:	1d1a      	adds	r2, r3, #4
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	3b01      	subs	r3, #1
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eecc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eece:	f7f5 f9dd 	bl	800428c <HAL_GetTick>
 800eed2:	4602      	mov	r2, r0
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d803      	bhi.n	800eee6 <HAL_SPI_TransmitReceive+0x1ea>
 800eede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eee4:	d102      	bne.n	800eeec <HAL_SPI_TransmitReceive+0x1f0>
 800eee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d114      	bne.n	800ef16 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f000 f9ff 	bl	800f2f0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800ef12:	2301      	movs	r3, #1
 800ef14:	e1da      	b.n	800f2cc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ef16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d193      	bne.n	800ee44 <HAL_SPI_TransmitReceive+0x148>
 800ef1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d190      	bne.n	800ee44 <HAL_SPI_TransmitReceive+0x148>
 800ef22:	e1ac      	b.n	800f27e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	2b07      	cmp	r3, #7
 800ef2a:	f240 81a0 	bls.w	800f26e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ef2e:	e0a9      	b.n	800f084 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	695b      	ldr	r3, [r3, #20]
 800ef36:	f003 0302 	and.w	r3, r3, #2
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d139      	bne.n	800efb2 <HAL_SPI_TransmitReceive+0x2b6>
 800ef3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d036      	beq.n	800efb2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ef44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d91c      	bls.n	800ef84 <HAL_SPI_TransmitReceive+0x288>
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d018      	beq.n	800ef84 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	6812      	ldr	r2, [r2, #0]
 800ef5c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef62:	1d1a      	adds	r2, r3, #4
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	3b02      	subs	r3, #2
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ef82:	e016      	b.n	800efb2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef88:	881a      	ldrh	r2, [r3, #0]
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef92:	1c9a      	adds	r2, r3, #2
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	3b01      	subs	r3, #1
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800efb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	695b      	ldr	r3, [r3, #20]
 800efb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d03a      	beq.n	800f036 <HAL_SPI_TransmitReceive+0x33a>
 800efc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d037      	beq.n	800f036 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	695b      	ldr	r3, [r3, #20]
 800efcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d018      	beq.n	800f006 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800efde:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efe4:	1d1a      	adds	r2, r3, #4
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	3b02      	subs	r3, #2
 800eff4:	b29a      	uxth	r2, r3
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f002:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f004:	e017      	b.n	800f036 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f00a:	6a3a      	ldr	r2, [r7, #32]
 800f00c:	8812      	ldrh	r2, [r2, #0]
 800f00e:	b292      	uxth	r2, r2
 800f010:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f016:	1c9a      	adds	r2, r3, #2
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f022:	b29b      	uxth	r3, r3
 800f024:	3b01      	subs	r3, #1
 800f026:	b29a      	uxth	r2, r3
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f034:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f036:	f7f5 f929 	bl	800428c <HAL_GetTick>
 800f03a:	4602      	mov	r2, r0
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f042:	429a      	cmp	r2, r3
 800f044:	d803      	bhi.n	800f04e <HAL_SPI_TransmitReceive+0x352>
 800f046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f04c:	d102      	bne.n	800f054 <HAL_SPI_TransmitReceive+0x358>
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	2b00      	cmp	r3, #0
 800f052:	d117      	bne.n	800f084 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f000 f94b 	bl	800f2f0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f068:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2201      	movs	r2, #1
 800f076:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f07a:	2301      	movs	r3, #1
 800f07c:	e126      	b.n	800f2cc <HAL_SPI_TransmitReceive+0x5d0>
 800f07e:	bf00      	nop
 800f080:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f084:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f086:	2b00      	cmp	r3, #0
 800f088:	f47f af52 	bne.w	800ef30 <HAL_SPI_TransmitReceive+0x234>
 800f08c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f08e:	2b00      	cmp	r3, #0
 800f090:	f47f af4e 	bne.w	800ef30 <HAL_SPI_TransmitReceive+0x234>
 800f094:	e0f3      	b.n	800f27e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	695b      	ldr	r3, [r3, #20]
 800f09c:	f003 0302 	and.w	r3, r3, #2
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d15a      	bne.n	800f15a <HAL_SPI_TransmitReceive+0x45e>
 800f0a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d057      	beq.n	800f15a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f0aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0ac:	2b03      	cmp	r3, #3
 800f0ae:	d91c      	bls.n	800f0ea <HAL_SPI_TransmitReceive+0x3ee>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0b4:	2b40      	cmp	r3, #64	; 0x40
 800f0b6:	d918      	bls.n	800f0ea <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6812      	ldr	r2, [r2, #0]
 800f0c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0c8:	1d1a      	adds	r2, r3, #4
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	3b04      	subs	r3, #4
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f0e8:	e037      	b.n	800f15a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f0ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d91b      	bls.n	800f128 <HAL_SPI_TransmitReceive+0x42c>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d017      	beq.n	800f128 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0fc:	881a      	ldrh	r2, [r3, #0]
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f100:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f106:	1c9a      	adds	r2, r3, #2
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f112:	b29b      	uxth	r3, r3
 800f114:	3b02      	subs	r3, #2
 800f116:	b29a      	uxth	r2, r3
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f124:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f126:	e018      	b.n	800f15a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	3320      	adds	r3, #32
 800f132:	7812      	ldrb	r2, [r2, #0]
 800f134:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f13a:	1c5a      	adds	r2, r3, #1
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f146:	b29b      	uxth	r3, r3
 800f148:	3b01      	subs	r3, #1
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f158:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	695b      	ldr	r3, [r3, #20]
 800f160:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f164:	2b00      	cmp	r3, #0
 800f166:	d05e      	beq.n	800f226 <HAL_SPI_TransmitReceive+0x52a>
 800f168:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d05b      	beq.n	800f226 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	695b      	ldr	r3, [r3, #20]
 800f174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d018      	beq.n	800f1ae <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f184:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f186:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f18c:	1d1a      	adds	r2, r3, #4
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f198:	b29b      	uxth	r3, r3
 800f19a:	3b04      	subs	r3, #4
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f1ac:	e03b      	b.n	800f226 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	695b      	ldr	r3, [r3, #20]
 800f1b4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f1b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1bc:	d918      	bls.n	800f1f0 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1c2:	6a3a      	ldr	r2, [r7, #32]
 800f1c4:	8812      	ldrh	r2, [r2, #0]
 800f1c6:	b292      	uxth	r2, r2
 800f1c8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1ce:	1c9a      	adds	r2, r3, #2
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	3b02      	subs	r3, #2
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f1ee:	e01a      	b.n	800f226 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1fc:	7812      	ldrb	r2, [r2, #0]
 800f1fe:	b2d2      	uxtb	r2, r2
 800f200:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f206:	1c5a      	adds	r2, r3, #1
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f212:	b29b      	uxth	r3, r3
 800f214:	3b01      	subs	r3, #1
 800f216:	b29a      	uxth	r2, r3
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f224:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f226:	f7f5 f831 	bl	800428c <HAL_GetTick>
 800f22a:	4602      	mov	r2, r0
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f232:	429a      	cmp	r2, r3
 800f234:	d803      	bhi.n	800f23e <HAL_SPI_TransmitReceive+0x542>
 800f236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f23c:	d102      	bne.n	800f244 <HAL_SPI_TransmitReceive+0x548>
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	2b00      	cmp	r3, #0
 800f242:	d114      	bne.n	800f26e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 f853 	bl	800f2f0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2201      	movs	r2, #1
 800f266:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	e02e      	b.n	800f2cc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f26e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f270:	2b00      	cmp	r3, #0
 800f272:	f47f af10 	bne.w	800f096 <HAL_SPI_TransmitReceive+0x39a>
 800f276:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f47f af0c 	bne.w	800f096 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	2200      	movs	r2, #0
 800f286:	2108      	movs	r1, #8
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f000 f8d1 	bl	800f430 <SPI_WaitOnFlagUntilTimeout>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d007      	beq.n	800f2a4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f29a:	f043 0220 	orr.w	r2, r3, #32
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 f823 	bl	800f2f0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e001      	b.n	800f2cc <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800f2c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3730      	adds	r7, #48	; 0x30
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2e2:	b2db      	uxtb	r3, r3
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	699a      	ldr	r2, [r3, #24]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f042 0208 	orr.w	r2, r2, #8
 800f30e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	699a      	ldr	r2, [r3, #24]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f042 0210 	orr.w	r2, r2, #16
 800f31e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f022 0201 	bic.w	r2, r2, #1
 800f32e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6919      	ldr	r1, [r3, #16]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	4b3c      	ldr	r3, [pc, #240]	; (800f42c <SPI_CloseTransfer+0x13c>)
 800f33c:	400b      	ands	r3, r1
 800f33e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	689a      	ldr	r2, [r3, #8]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f34e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f356:	b2db      	uxtb	r3, r3
 800f358:	2b04      	cmp	r3, #4
 800f35a:	d014      	beq.n	800f386 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f003 0320 	and.w	r3, r3, #32
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00f      	beq.n	800f386 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f36c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	699a      	ldr	r2, [r3, #24]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f042 0220 	orr.w	r2, r2, #32
 800f384:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	2b03      	cmp	r3, #3
 800f390:	d014      	beq.n	800f3bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00f      	beq.n	800f3bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3a2:	f043 0204 	orr.w	r2, r3, #4
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	699a      	ldr	r2, [r3, #24]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f3ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00f      	beq.n	800f3e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3cc:	f043 0201 	orr.w	r2, r3, #1
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	699a      	ldr	r2, [r3, #24]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00f      	beq.n	800f410 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3f6:	f043 0208 	orr.w	r2, r3, #8
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	699a      	ldr	r2, [r3, #24]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f40e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f420:	bf00      	nop
 800f422:	3714      	adds	r7, #20
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr
 800f42c:	fffffc90 	.word	0xfffffc90

0800f430 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	603b      	str	r3, [r7, #0]
 800f43c:	4613      	mov	r3, r2
 800f43e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f440:	e010      	b.n	800f464 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f442:	f7f4 ff23 	bl	800428c <HAL_GetTick>
 800f446:	4602      	mov	r2, r0
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	69ba      	ldr	r2, [r7, #24]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d803      	bhi.n	800f45a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f458:	d102      	bne.n	800f460 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d101      	bne.n	800f464 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f460:	2303      	movs	r3, #3
 800f462:	e00f      	b.n	800f484 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	695a      	ldr	r2, [r3, #20]
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	4013      	ands	r3, r2
 800f46e:	68ba      	ldr	r2, [r7, #8]
 800f470:	429a      	cmp	r2, r3
 800f472:	bf0c      	ite	eq
 800f474:	2301      	moveq	r3, #1
 800f476:	2300      	movne	r3, #0
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	461a      	mov	r2, r3
 800f47c:	79fb      	ldrb	r3, [r7, #7]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d0df      	beq.n	800f442 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3710      	adds	r7, #16
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b085      	sub	sp, #20
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f498:	095b      	lsrs	r3, r3, #5
 800f49a:	3301      	adds	r3, #1
 800f49c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	3307      	adds	r3, #7
 800f4aa:	08db      	lsrs	r3, r3, #3
 800f4ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	fb02 f303 	mul.w	r3, r2, r3
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3714      	adds	r7, #20
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr
	...

0800f4c4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d101      	bne.n	800f4da <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e03e      	b.n	800f558 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f7f2 f8f6 	bl	80016e0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	3308      	adds	r3, #8
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4610      	mov	r0, r2
 800f500:	f002 f994 	bl	801182c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	6818      	ldr	r0, [r3, #0]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	461a      	mov	r2, r3
 800f50e:	68b9      	ldr	r1, [r7, #8]
 800f510:	f002 fa1c 	bl	801194c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	6858      	ldr	r0, [r3, #4]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	689a      	ldr	r2, [r3, #8]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f520:	6879      	ldr	r1, [r7, #4]
 800f522:	f002 fa63 	bl	80119ec <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	6892      	ldr	r2, [r2, #8]
 800f52e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	68fa      	ldr	r2, [r7, #12]
 800f538:	6892      	ldr	r2, [r2, #8]
 800f53a:	f041 0101 	orr.w	r1, r1, #1
 800f53e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f542:	4b07      	ldr	r3, [pc, #28]	; (800f560 <HAL_SRAM_Init+0x9c>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a06      	ldr	r2, [pc, #24]	; (800f560 <HAL_SRAM_Init+0x9c>)
 800f548:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f54c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2201      	movs	r2, #1
 800f552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800f556:	2300      	movs	r3, #0
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	52004000 	.word	0x52004000

0800f564 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800f564:	b480      	push	{r7}
 800f566:	b089      	sub	sp, #36	; 0x24
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
 800f570:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f580:	b2db      	uxtb	r3, r3
 800f582:	2b01      	cmp	r3, #1
 800f584:	d12b      	bne.n	800f5de <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d101      	bne.n	800f594 <HAL_SRAM_Write_8b+0x30>
 800f590:	2302      	movs	r3, #2
 800f592:	e025      	b.n	800f5e0 <HAL_SRAM_Write_8b+0x7c>
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2201      	movs	r2, #1
 800f598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2202      	movs	r2, #2
 800f5a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	61fb      	str	r3, [r7, #28]
 800f5a8:	e00c      	b.n	800f5c4 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	781a      	ldrb	r2, [r3, #0]
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800f5be:	69fb      	ldr	r3, [r7, #28]
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	61fb      	str	r3, [r7, #28]
 800f5c4:	69fb      	ldr	r3, [r7, #28]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1ef      	bne.n	800f5aa <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	e000      	b.n	800f5e0 <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800f5de:	2301      	movs	r3, #1
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3724      	adds	r7, #36	; 0x24
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d101      	bne.n	800f5fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	e049      	b.n	800f692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f604:	b2db      	uxtb	r3, r3
 800f606:	2b00      	cmp	r3, #0
 800f608:	d106      	bne.n	800f618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f7f4 f9ee 	bl	80039f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2202      	movs	r2, #2
 800f61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	3304      	adds	r3, #4
 800f628:	4619      	mov	r1, r3
 800f62a:	4610      	mov	r0, r2
 800f62c:	f000 fae6 	bl	800fbfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2201      	movs	r2, #1
 800f634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2201      	movs	r2, #1
 800f63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2201      	movs	r2, #1
 800f644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2201      	movs	r2, #1
 800f64c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2201      	movs	r2, #1
 800f65c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2201      	movs	r2, #1
 800f664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2201      	movs	r2, #1
 800f67c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2201      	movs	r2, #1
 800f684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2201      	movs	r2, #1
 800f68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b082      	sub	sp, #8
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d101      	bne.n	800f6ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e049      	b.n	800f740 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d106      	bne.n	800f6c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f7f4 f975 	bl	80039b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2202      	movs	r2, #2
 800f6ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	3304      	adds	r3, #4
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	4610      	mov	r0, r2
 800f6da:	f000 fa8f 	bl	800fbfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2201      	movs	r2, #1
 800f702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2201      	movs	r2, #1
 800f70a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2201      	movs	r2, #1
 800f712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2201      	movs	r2, #1
 800f71a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2201      	movs	r2, #1
 800f722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2201      	movs	r2, #1
 800f72a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2201      	movs	r2, #1
 800f732:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2201      	movs	r2, #1
 800f73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d109      	bne.n	800f76c <HAL_TIM_PWM_Start+0x24>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b01      	cmp	r3, #1
 800f762:	bf14      	ite	ne
 800f764:	2301      	movne	r3, #1
 800f766:	2300      	moveq	r3, #0
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	e03c      	b.n	800f7e6 <HAL_TIM_PWM_Start+0x9e>
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2b04      	cmp	r3, #4
 800f770:	d109      	bne.n	800f786 <HAL_TIM_PWM_Start+0x3e>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	bf14      	ite	ne
 800f77e:	2301      	movne	r3, #1
 800f780:	2300      	moveq	r3, #0
 800f782:	b2db      	uxtb	r3, r3
 800f784:	e02f      	b.n	800f7e6 <HAL_TIM_PWM_Start+0x9e>
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2b08      	cmp	r3, #8
 800f78a:	d109      	bne.n	800f7a0 <HAL_TIM_PWM_Start+0x58>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b01      	cmp	r3, #1
 800f796:	bf14      	ite	ne
 800f798:	2301      	movne	r3, #1
 800f79a:	2300      	moveq	r3, #0
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	e022      	b.n	800f7e6 <HAL_TIM_PWM_Start+0x9e>
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	2b0c      	cmp	r3, #12
 800f7a4:	d109      	bne.n	800f7ba <HAL_TIM_PWM_Start+0x72>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	bf14      	ite	ne
 800f7b2:	2301      	movne	r3, #1
 800f7b4:	2300      	moveq	r3, #0
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	e015      	b.n	800f7e6 <HAL_TIM_PWM_Start+0x9e>
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	2b10      	cmp	r3, #16
 800f7be:	d109      	bne.n	800f7d4 <HAL_TIM_PWM_Start+0x8c>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	bf14      	ite	ne
 800f7cc:	2301      	movne	r3, #1
 800f7ce:	2300      	moveq	r3, #0
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	e008      	b.n	800f7e6 <HAL_TIM_PWM_Start+0x9e>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	bf14      	ite	ne
 800f7e0:	2301      	movne	r3, #1
 800f7e2:	2300      	moveq	r3, #0
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	e09c      	b.n	800f928 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d104      	bne.n	800f7fe <HAL_TIM_PWM_Start+0xb6>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2202      	movs	r2, #2
 800f7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f7fc:	e023      	b.n	800f846 <HAL_TIM_PWM_Start+0xfe>
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	2b04      	cmp	r3, #4
 800f802:	d104      	bne.n	800f80e <HAL_TIM_PWM_Start+0xc6>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2202      	movs	r2, #2
 800f808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f80c:	e01b      	b.n	800f846 <HAL_TIM_PWM_Start+0xfe>
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	2b08      	cmp	r3, #8
 800f812:	d104      	bne.n	800f81e <HAL_TIM_PWM_Start+0xd6>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2202      	movs	r2, #2
 800f818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f81c:	e013      	b.n	800f846 <HAL_TIM_PWM_Start+0xfe>
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	2b0c      	cmp	r3, #12
 800f822:	d104      	bne.n	800f82e <HAL_TIM_PWM_Start+0xe6>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2202      	movs	r2, #2
 800f828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f82c:	e00b      	b.n	800f846 <HAL_TIM_PWM_Start+0xfe>
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	2b10      	cmp	r3, #16
 800f832:	d104      	bne.n	800f83e <HAL_TIM_PWM_Start+0xf6>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2202      	movs	r2, #2
 800f838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f83c:	e003      	b.n	800f846 <HAL_TIM_PWM_Start+0xfe>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2202      	movs	r2, #2
 800f842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2201      	movs	r2, #1
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	4618      	mov	r0, r3
 800f850:	f000 fea1 	bl	8010596 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a35      	ldr	r2, [pc, #212]	; (800f930 <HAL_TIM_PWM_Start+0x1e8>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d013      	beq.n	800f886 <HAL_TIM_PWM_Start+0x13e>
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4a34      	ldr	r2, [pc, #208]	; (800f934 <HAL_TIM_PWM_Start+0x1ec>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d00e      	beq.n	800f886 <HAL_TIM_PWM_Start+0x13e>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a32      	ldr	r2, [pc, #200]	; (800f938 <HAL_TIM_PWM_Start+0x1f0>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d009      	beq.n	800f886 <HAL_TIM_PWM_Start+0x13e>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4a31      	ldr	r2, [pc, #196]	; (800f93c <HAL_TIM_PWM_Start+0x1f4>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d004      	beq.n	800f886 <HAL_TIM_PWM_Start+0x13e>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a2f      	ldr	r2, [pc, #188]	; (800f940 <HAL_TIM_PWM_Start+0x1f8>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d101      	bne.n	800f88a <HAL_TIM_PWM_Start+0x142>
 800f886:	2301      	movs	r3, #1
 800f888:	e000      	b.n	800f88c <HAL_TIM_PWM_Start+0x144>
 800f88a:	2300      	movs	r3, #0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d007      	beq.n	800f8a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f89e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4a22      	ldr	r2, [pc, #136]	; (800f930 <HAL_TIM_PWM_Start+0x1e8>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d01d      	beq.n	800f8e6 <HAL_TIM_PWM_Start+0x19e>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8b2:	d018      	beq.n	800f8e6 <HAL_TIM_PWM_Start+0x19e>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a22      	ldr	r2, [pc, #136]	; (800f944 <HAL_TIM_PWM_Start+0x1fc>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d013      	beq.n	800f8e6 <HAL_TIM_PWM_Start+0x19e>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4a21      	ldr	r2, [pc, #132]	; (800f948 <HAL_TIM_PWM_Start+0x200>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d00e      	beq.n	800f8e6 <HAL_TIM_PWM_Start+0x19e>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a1f      	ldr	r2, [pc, #124]	; (800f94c <HAL_TIM_PWM_Start+0x204>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d009      	beq.n	800f8e6 <HAL_TIM_PWM_Start+0x19e>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a17      	ldr	r2, [pc, #92]	; (800f934 <HAL_TIM_PWM_Start+0x1ec>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d004      	beq.n	800f8e6 <HAL_TIM_PWM_Start+0x19e>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a1b      	ldr	r2, [pc, #108]	; (800f950 <HAL_TIM_PWM_Start+0x208>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d115      	bne.n	800f912 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	689a      	ldr	r2, [r3, #8]
 800f8ec:	4b19      	ldr	r3, [pc, #100]	; (800f954 <HAL_TIM_PWM_Start+0x20c>)
 800f8ee:	4013      	ands	r3, r2
 800f8f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2b06      	cmp	r3, #6
 800f8f6:	d015      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1dc>
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8fe:	d011      	beq.n	800f924 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f042 0201 	orr.w	r2, r2, #1
 800f90e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f910:	e008      	b.n	800f924 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f042 0201 	orr.w	r2, r2, #1
 800f920:	601a      	str	r2, [r3, #0]
 800f922:	e000      	b.n	800f926 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f924:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3710      	adds	r7, #16
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	40010000 	.word	0x40010000
 800f934:	40010400 	.word	0x40010400
 800f938:	40014000 	.word	0x40014000
 800f93c:	40014400 	.word	0x40014400
 800f940:	40014800 	.word	0x40014800
 800f944:	40000400 	.word	0x40000400
 800f948:	40000800 	.word	0x40000800
 800f94c:	40000c00 	.word	0x40000c00
 800f950:	40001800 	.word	0x40001800
 800f954:	00010007 	.word	0x00010007

0800f958 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d101      	bne.n	800f972 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f96e:	2302      	movs	r3, #2
 800f970:	e0fd      	b.n	800fb6e <HAL_TIM_PWM_ConfigChannel+0x216>
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2201      	movs	r2, #1
 800f976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b14      	cmp	r3, #20
 800f97e:	f200 80f0 	bhi.w	800fb62 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f982:	a201      	add	r2, pc, #4	; (adr r2, 800f988 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f988:	0800f9dd 	.word	0x0800f9dd
 800f98c:	0800fb63 	.word	0x0800fb63
 800f990:	0800fb63 	.word	0x0800fb63
 800f994:	0800fb63 	.word	0x0800fb63
 800f998:	0800fa1d 	.word	0x0800fa1d
 800f99c:	0800fb63 	.word	0x0800fb63
 800f9a0:	0800fb63 	.word	0x0800fb63
 800f9a4:	0800fb63 	.word	0x0800fb63
 800f9a8:	0800fa5f 	.word	0x0800fa5f
 800f9ac:	0800fb63 	.word	0x0800fb63
 800f9b0:	0800fb63 	.word	0x0800fb63
 800f9b4:	0800fb63 	.word	0x0800fb63
 800f9b8:	0800fa9f 	.word	0x0800fa9f
 800f9bc:	0800fb63 	.word	0x0800fb63
 800f9c0:	0800fb63 	.word	0x0800fb63
 800f9c4:	0800fb63 	.word	0x0800fb63
 800f9c8:	0800fae1 	.word	0x0800fae1
 800f9cc:	0800fb63 	.word	0x0800fb63
 800f9d0:	0800fb63 	.word	0x0800fb63
 800f9d4:	0800fb63 	.word	0x0800fb63
 800f9d8:	0800fb21 	.word	0x0800fb21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	68b9      	ldr	r1, [r7, #8]
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f000 f9a4 	bl	800fd30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	699a      	ldr	r2, [r3, #24]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f042 0208 	orr.w	r2, r2, #8
 800f9f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	699a      	ldr	r2, [r3, #24]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f022 0204 	bic.w	r2, r2, #4
 800fa06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	6999      	ldr	r1, [r3, #24]
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	691a      	ldr	r2, [r3, #16]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	430a      	orrs	r2, r1
 800fa18:	619a      	str	r2, [r3, #24]
      break;
 800fa1a:	e0a3      	b.n	800fb64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	68b9      	ldr	r1, [r7, #8]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f000 fa14 	bl	800fe50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	699a      	ldr	r2, [r3, #24]
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	699a      	ldr	r2, [r3, #24]
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6999      	ldr	r1, [r3, #24]
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	691b      	ldr	r3, [r3, #16]
 800fa52:	021a      	lsls	r2, r3, #8
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	430a      	orrs	r2, r1
 800fa5a:	619a      	str	r2, [r3, #24]
      break;
 800fa5c:	e082      	b.n	800fb64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	68b9      	ldr	r1, [r7, #8]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f000 fa7d 	bl	800ff64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	69da      	ldr	r2, [r3, #28]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f042 0208 	orr.w	r2, r2, #8
 800fa78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	69da      	ldr	r2, [r3, #28]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f022 0204 	bic.w	r2, r2, #4
 800fa88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	69d9      	ldr	r1, [r3, #28]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	691a      	ldr	r2, [r3, #16]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	430a      	orrs	r2, r1
 800fa9a:	61da      	str	r2, [r3, #28]
      break;
 800fa9c:	e062      	b.n	800fb64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	68b9      	ldr	r1, [r7, #8]
 800faa4:	4618      	mov	r0, r3
 800faa6:	f000 fae3 	bl	8010070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	69da      	ldr	r2, [r3, #28]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	69da      	ldr	r2, [r3, #28]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	69d9      	ldr	r1, [r3, #28]
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	691b      	ldr	r3, [r3, #16]
 800fad4:	021a      	lsls	r2, r3, #8
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	430a      	orrs	r2, r1
 800fadc:	61da      	str	r2, [r3, #28]
      break;
 800fade:	e041      	b.n	800fb64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	68b9      	ldr	r1, [r7, #8]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f000 fb2a 	bl	8010140 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f042 0208 	orr.w	r2, r2, #8
 800fafa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f022 0204 	bic.w	r2, r2, #4
 800fb0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	691a      	ldr	r2, [r3, #16]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	430a      	orrs	r2, r1
 800fb1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fb1e:	e021      	b.n	800fb64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	68b9      	ldr	r1, [r7, #8]
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 fb6c 	bl	8010204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	021a      	lsls	r2, r3, #8
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	430a      	orrs	r2, r1
 800fb5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fb60:	e000      	b.n	800fb64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800fb62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop

0800fb78 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d101      	bne.n	800fb90 <HAL_TIM_SlaveConfigSynchro+0x18>
 800fb8c:	2302      	movs	r3, #2
 800fb8e:	e031      	b.n	800fbf4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2201      	movs	r2, #1
 800fb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 fb92 	bl	80102cc <TIM_SlaveTimer_SetConfig>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d009      	beq.n	800fbc2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	e018      	b.n	800fbf4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	68da      	ldr	r2, [r3, #12]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbd0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	68da      	ldr	r2, [r3, #12]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fbe0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b085      	sub	sp, #20
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4a40      	ldr	r2, [pc, #256]	; (800fd10 <TIM_Base_SetConfig+0x114>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d013      	beq.n	800fc3c <TIM_Base_SetConfig+0x40>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc1a:	d00f      	beq.n	800fc3c <TIM_Base_SetConfig+0x40>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	4a3d      	ldr	r2, [pc, #244]	; (800fd14 <TIM_Base_SetConfig+0x118>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d00b      	beq.n	800fc3c <TIM_Base_SetConfig+0x40>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4a3c      	ldr	r2, [pc, #240]	; (800fd18 <TIM_Base_SetConfig+0x11c>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d007      	beq.n	800fc3c <TIM_Base_SetConfig+0x40>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a3b      	ldr	r2, [pc, #236]	; (800fd1c <TIM_Base_SetConfig+0x120>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d003      	beq.n	800fc3c <TIM_Base_SetConfig+0x40>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a3a      	ldr	r2, [pc, #232]	; (800fd20 <TIM_Base_SetConfig+0x124>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d108      	bne.n	800fc4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4a2f      	ldr	r2, [pc, #188]	; (800fd10 <TIM_Base_SetConfig+0x114>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d01f      	beq.n	800fc96 <TIM_Base_SetConfig+0x9a>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc5c:	d01b      	beq.n	800fc96 <TIM_Base_SetConfig+0x9a>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4a2c      	ldr	r2, [pc, #176]	; (800fd14 <TIM_Base_SetConfig+0x118>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d017      	beq.n	800fc96 <TIM_Base_SetConfig+0x9a>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	4a2b      	ldr	r2, [pc, #172]	; (800fd18 <TIM_Base_SetConfig+0x11c>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d013      	beq.n	800fc96 <TIM_Base_SetConfig+0x9a>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4a2a      	ldr	r2, [pc, #168]	; (800fd1c <TIM_Base_SetConfig+0x120>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d00f      	beq.n	800fc96 <TIM_Base_SetConfig+0x9a>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4a29      	ldr	r2, [pc, #164]	; (800fd20 <TIM_Base_SetConfig+0x124>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d00b      	beq.n	800fc96 <TIM_Base_SetConfig+0x9a>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4a28      	ldr	r2, [pc, #160]	; (800fd24 <TIM_Base_SetConfig+0x128>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d007      	beq.n	800fc96 <TIM_Base_SetConfig+0x9a>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4a27      	ldr	r2, [pc, #156]	; (800fd28 <TIM_Base_SetConfig+0x12c>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d003      	beq.n	800fc96 <TIM_Base_SetConfig+0x9a>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4a26      	ldr	r2, [pc, #152]	; (800fd2c <TIM_Base_SetConfig+0x130>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d108      	bne.n	800fca8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	695b      	ldr	r3, [r3, #20]
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	689a      	ldr	r2, [r3, #8]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	4a10      	ldr	r2, [pc, #64]	; (800fd10 <TIM_Base_SetConfig+0x114>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	d00f      	beq.n	800fcf4 <TIM_Base_SetConfig+0xf8>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	4a12      	ldr	r2, [pc, #72]	; (800fd20 <TIM_Base_SetConfig+0x124>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d00b      	beq.n	800fcf4 <TIM_Base_SetConfig+0xf8>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4a11      	ldr	r2, [pc, #68]	; (800fd24 <TIM_Base_SetConfig+0x128>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d007      	beq.n	800fcf4 <TIM_Base_SetConfig+0xf8>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	4a10      	ldr	r2, [pc, #64]	; (800fd28 <TIM_Base_SetConfig+0x12c>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d003      	beq.n	800fcf4 <TIM_Base_SetConfig+0xf8>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	4a0f      	ldr	r2, [pc, #60]	; (800fd2c <TIM_Base_SetConfig+0x130>)
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	d103      	bne.n	800fcfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	691a      	ldr	r2, [r3, #16]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	615a      	str	r2, [r3, #20]
}
 800fd02:	bf00      	nop
 800fd04:	3714      	adds	r7, #20
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	40010000 	.word	0x40010000
 800fd14:	40000400 	.word	0x40000400
 800fd18:	40000800 	.word	0x40000800
 800fd1c:	40000c00 	.word	0x40000c00
 800fd20:	40010400 	.word	0x40010400
 800fd24:	40014000 	.word	0x40014000
 800fd28:	40014400 	.word	0x40014400
 800fd2c:	40014800 	.word	0x40014800

0800fd30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fd30:	b480      	push	{r7}
 800fd32:	b087      	sub	sp, #28
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6a1b      	ldr	r3, [r3, #32]
 800fd3e:	f023 0201 	bic.w	r2, r3, #1
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6a1b      	ldr	r3, [r3, #32]
 800fd4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	699b      	ldr	r3, [r3, #24]
 800fd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fd58:	68fa      	ldr	r2, [r7, #12]
 800fd5a:	4b37      	ldr	r3, [pc, #220]	; (800fe38 <TIM_OC1_SetConfig+0x108>)
 800fd5c:	4013      	ands	r3, r2
 800fd5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f023 0303 	bic.w	r3, r3, #3
 800fd66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68fa      	ldr	r2, [r7, #12]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	f023 0302 	bic.w	r3, r3, #2
 800fd78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	4313      	orrs	r3, r2
 800fd82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	4a2d      	ldr	r2, [pc, #180]	; (800fe3c <TIM_OC1_SetConfig+0x10c>)
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d00f      	beq.n	800fdac <TIM_OC1_SetConfig+0x7c>
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4a2c      	ldr	r2, [pc, #176]	; (800fe40 <TIM_OC1_SetConfig+0x110>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d00b      	beq.n	800fdac <TIM_OC1_SetConfig+0x7c>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4a2b      	ldr	r2, [pc, #172]	; (800fe44 <TIM_OC1_SetConfig+0x114>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d007      	beq.n	800fdac <TIM_OC1_SetConfig+0x7c>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	4a2a      	ldr	r2, [pc, #168]	; (800fe48 <TIM_OC1_SetConfig+0x118>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d003      	beq.n	800fdac <TIM_OC1_SetConfig+0x7c>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	4a29      	ldr	r2, [pc, #164]	; (800fe4c <TIM_OC1_SetConfig+0x11c>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d10c      	bne.n	800fdc6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	f023 0308 	bic.w	r3, r3, #8
 800fdb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	f023 0304 	bic.w	r3, r3, #4
 800fdc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4a1c      	ldr	r2, [pc, #112]	; (800fe3c <TIM_OC1_SetConfig+0x10c>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d00f      	beq.n	800fdee <TIM_OC1_SetConfig+0xbe>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4a1b      	ldr	r2, [pc, #108]	; (800fe40 <TIM_OC1_SetConfig+0x110>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d00b      	beq.n	800fdee <TIM_OC1_SetConfig+0xbe>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4a1a      	ldr	r2, [pc, #104]	; (800fe44 <TIM_OC1_SetConfig+0x114>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d007      	beq.n	800fdee <TIM_OC1_SetConfig+0xbe>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	4a19      	ldr	r2, [pc, #100]	; (800fe48 <TIM_OC1_SetConfig+0x118>)
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d003      	beq.n	800fdee <TIM_OC1_SetConfig+0xbe>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4a18      	ldr	r2, [pc, #96]	; (800fe4c <TIM_OC1_SetConfig+0x11c>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d111      	bne.n	800fe12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fdfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	695b      	ldr	r3, [r3, #20]
 800fe02:	693a      	ldr	r2, [r7, #16]
 800fe04:	4313      	orrs	r3, r2
 800fe06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	693a      	ldr	r2, [r7, #16]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	693a      	ldr	r2, [r7, #16]
 800fe16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	68fa      	ldr	r2, [r7, #12]
 800fe1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	685a      	ldr	r2, [r3, #4]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	697a      	ldr	r2, [r7, #20]
 800fe2a:	621a      	str	r2, [r3, #32]
}
 800fe2c:	bf00      	nop
 800fe2e:	371c      	adds	r7, #28
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr
 800fe38:	fffeff8f 	.word	0xfffeff8f
 800fe3c:	40010000 	.word	0x40010000
 800fe40:	40010400 	.word	0x40010400
 800fe44:	40014000 	.word	0x40014000
 800fe48:	40014400 	.word	0x40014400
 800fe4c:	40014800 	.word	0x40014800

0800fe50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b087      	sub	sp, #28
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a1b      	ldr	r3, [r3, #32]
 800fe5e:	f023 0210 	bic.w	r2, r3, #16
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	699b      	ldr	r3, [r3, #24]
 800fe76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	4b34      	ldr	r3, [pc, #208]	; (800ff4c <TIM_OC2_SetConfig+0xfc>)
 800fe7c:	4013      	ands	r3, r2
 800fe7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	021b      	lsls	r3, r3, #8
 800fe8e:	68fa      	ldr	r2, [r7, #12]
 800fe90:	4313      	orrs	r3, r2
 800fe92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	f023 0320 	bic.w	r3, r3, #32
 800fe9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	689b      	ldr	r3, [r3, #8]
 800fea0:	011b      	lsls	r3, r3, #4
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	4313      	orrs	r3, r2
 800fea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4a29      	ldr	r2, [pc, #164]	; (800ff50 <TIM_OC2_SetConfig+0x100>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d003      	beq.n	800feb8 <TIM_OC2_SetConfig+0x68>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	4a28      	ldr	r2, [pc, #160]	; (800ff54 <TIM_OC2_SetConfig+0x104>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d10d      	bne.n	800fed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800febe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	011b      	lsls	r3, r3, #4
 800fec6:	697a      	ldr	r2, [r7, #20]
 800fec8:	4313      	orrs	r3, r2
 800feca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4a1e      	ldr	r2, [pc, #120]	; (800ff50 <TIM_OC2_SetConfig+0x100>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d00f      	beq.n	800fefc <TIM_OC2_SetConfig+0xac>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	4a1d      	ldr	r2, [pc, #116]	; (800ff54 <TIM_OC2_SetConfig+0x104>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d00b      	beq.n	800fefc <TIM_OC2_SetConfig+0xac>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	4a1c      	ldr	r2, [pc, #112]	; (800ff58 <TIM_OC2_SetConfig+0x108>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d007      	beq.n	800fefc <TIM_OC2_SetConfig+0xac>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4a1b      	ldr	r2, [pc, #108]	; (800ff5c <TIM_OC2_SetConfig+0x10c>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d003      	beq.n	800fefc <TIM_OC2_SetConfig+0xac>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	4a1a      	ldr	r2, [pc, #104]	; (800ff60 <TIM_OC2_SetConfig+0x110>)
 800fef8:	4293      	cmp	r3, r2
 800fefa:	d113      	bne.n	800ff24 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ff02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	695b      	ldr	r3, [r3, #20]
 800ff10:	009b      	lsls	r3, r3, #2
 800ff12:	693a      	ldr	r2, [r7, #16]
 800ff14:	4313      	orrs	r3, r2
 800ff16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	699b      	ldr	r3, [r3, #24]
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	693a      	ldr	r2, [r7, #16]
 800ff20:	4313      	orrs	r3, r2
 800ff22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	693a      	ldr	r2, [r7, #16]
 800ff28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	697a      	ldr	r2, [r7, #20]
 800ff3c:	621a      	str	r2, [r3, #32]
}
 800ff3e:	bf00      	nop
 800ff40:	371c      	adds	r7, #28
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	feff8fff 	.word	0xfeff8fff
 800ff50:	40010000 	.word	0x40010000
 800ff54:	40010400 	.word	0x40010400
 800ff58:	40014000 	.word	0x40014000
 800ff5c:	40014400 	.word	0x40014400
 800ff60:	40014800 	.word	0x40014800

0800ff64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b087      	sub	sp, #28
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a1b      	ldr	r3, [r3, #32]
 800ff72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a1b      	ldr	r3, [r3, #32]
 800ff7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	69db      	ldr	r3, [r3, #28]
 800ff8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f023 0303 	bic.w	r3, r3, #3
 800ff9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ffac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	021b      	lsls	r3, r3, #8
 800ffb4:	697a      	ldr	r2, [r7, #20]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	4a27      	ldr	r2, [pc, #156]	; (801005c <TIM_OC3_SetConfig+0xf8>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d003      	beq.n	800ffca <TIM_OC3_SetConfig+0x66>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4a26      	ldr	r2, [pc, #152]	; (8010060 <TIM_OC3_SetConfig+0xfc>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d10d      	bne.n	800ffe6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ffd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	021b      	lsls	r3, r3, #8
 800ffd8:	697a      	ldr	r2, [r7, #20]
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4a1c      	ldr	r2, [pc, #112]	; (801005c <TIM_OC3_SetConfig+0xf8>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d00f      	beq.n	801000e <TIM_OC3_SetConfig+0xaa>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	4a1b      	ldr	r2, [pc, #108]	; (8010060 <TIM_OC3_SetConfig+0xfc>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d00b      	beq.n	801000e <TIM_OC3_SetConfig+0xaa>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4a1a      	ldr	r2, [pc, #104]	; (8010064 <TIM_OC3_SetConfig+0x100>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d007      	beq.n	801000e <TIM_OC3_SetConfig+0xaa>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	4a19      	ldr	r2, [pc, #100]	; (8010068 <TIM_OC3_SetConfig+0x104>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d003      	beq.n	801000e <TIM_OC3_SetConfig+0xaa>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4a18      	ldr	r2, [pc, #96]	; (801006c <TIM_OC3_SetConfig+0x108>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d113      	bne.n	8010036 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801001c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	695b      	ldr	r3, [r3, #20]
 8010022:	011b      	lsls	r3, r3, #4
 8010024:	693a      	ldr	r2, [r7, #16]
 8010026:	4313      	orrs	r3, r2
 8010028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	699b      	ldr	r3, [r3, #24]
 801002e:	011b      	lsls	r3, r3, #4
 8010030:	693a      	ldr	r2, [r7, #16]
 8010032:	4313      	orrs	r3, r2
 8010034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	693a      	ldr	r2, [r7, #16]
 801003a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	68fa      	ldr	r2, [r7, #12]
 8010040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	685a      	ldr	r2, [r3, #4]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	697a      	ldr	r2, [r7, #20]
 801004e:	621a      	str	r2, [r3, #32]
}
 8010050:	bf00      	nop
 8010052:	371c      	adds	r7, #28
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr
 801005c:	40010000 	.word	0x40010000
 8010060:	40010400 	.word	0x40010400
 8010064:	40014000 	.word	0x40014000
 8010068:	40014400 	.word	0x40014400
 801006c:	40014800 	.word	0x40014800

08010070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010070:	b480      	push	{r7}
 8010072:	b087      	sub	sp, #28
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6a1b      	ldr	r3, [r3, #32]
 801007e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	69db      	ldr	r3, [r3, #28]
 8010096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801009e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	021b      	lsls	r3, r3, #8
 80100ae:	68fa      	ldr	r2, [r7, #12]
 80100b0:	4313      	orrs	r3, r2
 80100b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80100ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	031b      	lsls	r3, r3, #12
 80100c2:	693a      	ldr	r2, [r7, #16]
 80100c4:	4313      	orrs	r3, r2
 80100c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	4a18      	ldr	r2, [pc, #96]	; (801012c <TIM_OC4_SetConfig+0xbc>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d00f      	beq.n	80100f0 <TIM_OC4_SetConfig+0x80>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	4a17      	ldr	r2, [pc, #92]	; (8010130 <TIM_OC4_SetConfig+0xc0>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d00b      	beq.n	80100f0 <TIM_OC4_SetConfig+0x80>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	4a16      	ldr	r2, [pc, #88]	; (8010134 <TIM_OC4_SetConfig+0xc4>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d007      	beq.n	80100f0 <TIM_OC4_SetConfig+0x80>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	4a15      	ldr	r2, [pc, #84]	; (8010138 <TIM_OC4_SetConfig+0xc8>)
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d003      	beq.n	80100f0 <TIM_OC4_SetConfig+0x80>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	4a14      	ldr	r2, [pc, #80]	; (801013c <TIM_OC4_SetConfig+0xcc>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d109      	bne.n	8010104 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80100f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	695b      	ldr	r3, [r3, #20]
 80100fc:	019b      	lsls	r3, r3, #6
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	4313      	orrs	r3, r2
 8010102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	68fa      	ldr	r2, [r7, #12]
 801010e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	685a      	ldr	r2, [r3, #4]
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	693a      	ldr	r2, [r7, #16]
 801011c:	621a      	str	r2, [r3, #32]
}
 801011e:	bf00      	nop
 8010120:	371c      	adds	r7, #28
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr
 801012a:	bf00      	nop
 801012c:	40010000 	.word	0x40010000
 8010130:	40010400 	.word	0x40010400
 8010134:	40014000 	.word	0x40014000
 8010138:	40014400 	.word	0x40014400
 801013c:	40014800 	.word	0x40014800

08010140 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010140:	b480      	push	{r7}
 8010142:	b087      	sub	sp, #28
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6a1b      	ldr	r3, [r3, #32]
 801015a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801016e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	4313      	orrs	r3, r2
 8010178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010180:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	041b      	lsls	r3, r3, #16
 8010188:	693a      	ldr	r2, [r7, #16]
 801018a:	4313      	orrs	r3, r2
 801018c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a17      	ldr	r2, [pc, #92]	; (80101f0 <TIM_OC5_SetConfig+0xb0>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d00f      	beq.n	80101b6 <TIM_OC5_SetConfig+0x76>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4a16      	ldr	r2, [pc, #88]	; (80101f4 <TIM_OC5_SetConfig+0xb4>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d00b      	beq.n	80101b6 <TIM_OC5_SetConfig+0x76>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a15      	ldr	r2, [pc, #84]	; (80101f8 <TIM_OC5_SetConfig+0xb8>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d007      	beq.n	80101b6 <TIM_OC5_SetConfig+0x76>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a14      	ldr	r2, [pc, #80]	; (80101fc <TIM_OC5_SetConfig+0xbc>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d003      	beq.n	80101b6 <TIM_OC5_SetConfig+0x76>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4a13      	ldr	r2, [pc, #76]	; (8010200 <TIM_OC5_SetConfig+0xc0>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d109      	bne.n	80101ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80101bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	695b      	ldr	r3, [r3, #20]
 80101c2:	021b      	lsls	r3, r3, #8
 80101c4:	697a      	ldr	r2, [r7, #20]
 80101c6:	4313      	orrs	r3, r2
 80101c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	697a      	ldr	r2, [r7, #20]
 80101ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	685a      	ldr	r2, [r3, #4]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	693a      	ldr	r2, [r7, #16]
 80101e2:	621a      	str	r2, [r3, #32]
}
 80101e4:	bf00      	nop
 80101e6:	371c      	adds	r7, #28
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr
 80101f0:	40010000 	.word	0x40010000
 80101f4:	40010400 	.word	0x40010400
 80101f8:	40014000 	.word	0x40014000
 80101fc:	40014400 	.word	0x40014400
 8010200:	40014800 	.word	0x40014800

08010204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010204:	b480      	push	{r7}
 8010206:	b087      	sub	sp, #28
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6a1b      	ldr	r3, [r3, #32]
 8010212:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6a1b      	ldr	r3, [r3, #32]
 801021e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801022a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	021b      	lsls	r3, r3, #8
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	4313      	orrs	r3, r2
 801023e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	689b      	ldr	r3, [r3, #8]
 801024c:	051b      	lsls	r3, r3, #20
 801024e:	693a      	ldr	r2, [r7, #16]
 8010250:	4313      	orrs	r3, r2
 8010252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	4a18      	ldr	r2, [pc, #96]	; (80102b8 <TIM_OC6_SetConfig+0xb4>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d00f      	beq.n	801027c <TIM_OC6_SetConfig+0x78>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4a17      	ldr	r2, [pc, #92]	; (80102bc <TIM_OC6_SetConfig+0xb8>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d00b      	beq.n	801027c <TIM_OC6_SetConfig+0x78>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4a16      	ldr	r2, [pc, #88]	; (80102c0 <TIM_OC6_SetConfig+0xbc>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d007      	beq.n	801027c <TIM_OC6_SetConfig+0x78>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	4a15      	ldr	r2, [pc, #84]	; (80102c4 <TIM_OC6_SetConfig+0xc0>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d003      	beq.n	801027c <TIM_OC6_SetConfig+0x78>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4a14      	ldr	r2, [pc, #80]	; (80102c8 <TIM_OC6_SetConfig+0xc4>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d109      	bne.n	8010290 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	695b      	ldr	r3, [r3, #20]
 8010288:	029b      	lsls	r3, r3, #10
 801028a:	697a      	ldr	r2, [r7, #20]
 801028c:	4313      	orrs	r3, r2
 801028e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	697a      	ldr	r2, [r7, #20]
 8010294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	685a      	ldr	r2, [r3, #4]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	693a      	ldr	r2, [r7, #16]
 80102a8:	621a      	str	r2, [r3, #32]
}
 80102aa:	bf00      	nop
 80102ac:	371c      	adds	r7, #28
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop
 80102b8:	40010000 	.word	0x40010000
 80102bc:	40010400 	.word	0x40010400
 80102c0:	40014000 	.word	0x40014000
 80102c4:	40014400 	.word	0x40014400
 80102c8:	40014800 	.word	0x40014800

080102cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80102de:	697a      	ldr	r2, [r7, #20]
 80102e0:	4b64      	ldr	r3, [pc, #400]	; (8010474 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80102e2:	4013      	ands	r3, r2
 80102e4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	697a      	ldr	r2, [r7, #20]
 80102ec:	4313      	orrs	r3, r2
 80102ee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80102f0:	697a      	ldr	r2, [r7, #20]
 80102f2:	4b61      	ldr	r3, [pc, #388]	; (8010478 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80102f4:	4013      	ands	r3, r2
 80102f6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	697a      	ldr	r2, [r7, #20]
 80102fe:	4313      	orrs	r3, r2
 8010300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	697a      	ldr	r2, [r7, #20]
 8010308:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	4a5b      	ldr	r2, [pc, #364]	; (801047c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8010310:	4293      	cmp	r3, r2
 8010312:	f000 80a7 	beq.w	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010316:	4a59      	ldr	r2, [pc, #356]	; (801047c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8010318:	4293      	cmp	r3, r2
 801031a:	f200 80a5 	bhi.w	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 801031e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010322:	f000 809f 	beq.w	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801032a:	f200 809d 	bhi.w	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 801032e:	4a54      	ldr	r2, [pc, #336]	; (8010480 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8010330:	4293      	cmp	r3, r2
 8010332:	f000 8097 	beq.w	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010336:	4a52      	ldr	r2, [pc, #328]	; (8010480 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8010338:	4293      	cmp	r3, r2
 801033a:	f200 8095 	bhi.w	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 801033e:	4a51      	ldr	r2, [pc, #324]	; (8010484 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010340:	4293      	cmp	r3, r2
 8010342:	f000 808f 	beq.w	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010346:	4a4f      	ldr	r2, [pc, #316]	; (8010484 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010348:	4293      	cmp	r3, r2
 801034a:	f200 808d 	bhi.w	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 801034e:	4a4e      	ldr	r2, [pc, #312]	; (8010488 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010350:	4293      	cmp	r3, r2
 8010352:	f000 8087 	beq.w	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010356:	4a4c      	ldr	r2, [pc, #304]	; (8010488 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010358:	4293      	cmp	r3, r2
 801035a:	f200 8085 	bhi.w	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 801035e:	4a4b      	ldr	r2, [pc, #300]	; (801048c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d07f      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010364:	4a49      	ldr	r2, [pc, #292]	; (801048c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d87e      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 801036a:	4a49      	ldr	r2, [pc, #292]	; (8010490 <TIM_SlaveTimer_SetConfig+0x1c4>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d079      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010370:	4a47      	ldr	r2, [pc, #284]	; (8010490 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d878      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 8010376:	4a47      	ldr	r2, [pc, #284]	; (8010494 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d073      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 801037c:	4a45      	ldr	r2, [pc, #276]	; (8010494 <TIM_SlaveTimer_SetConfig+0x1c8>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d872      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 8010382:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010386:	d06d      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010388:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801038c:	d86c      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 801038e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010392:	d067      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 8010394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010398:	d866      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 801039a:	2b70      	cmp	r3, #112	; 0x70
 801039c:	d01a      	beq.n	80103d4 <TIM_SlaveTimer_SetConfig+0x108>
 801039e:	2b70      	cmp	r3, #112	; 0x70
 80103a0:	d862      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 80103a2:	2b60      	cmp	r3, #96	; 0x60
 80103a4:	d054      	beq.n	8010450 <TIM_SlaveTimer_SetConfig+0x184>
 80103a6:	2b60      	cmp	r3, #96	; 0x60
 80103a8:	d85e      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 80103aa:	2b50      	cmp	r3, #80	; 0x50
 80103ac:	d046      	beq.n	801043c <TIM_SlaveTimer_SetConfig+0x170>
 80103ae:	2b50      	cmp	r3, #80	; 0x50
 80103b0:	d85a      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 80103b2:	2b40      	cmp	r3, #64	; 0x40
 80103b4:	d019      	beq.n	80103ea <TIM_SlaveTimer_SetConfig+0x11e>
 80103b6:	2b40      	cmp	r3, #64	; 0x40
 80103b8:	d856      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 80103ba:	2b30      	cmp	r3, #48	; 0x30
 80103bc:	d052      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 80103be:	2b30      	cmp	r3, #48	; 0x30
 80103c0:	d852      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 80103c2:	2b20      	cmp	r3, #32
 80103c4:	d04e      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 80103c6:	2b20      	cmp	r3, #32
 80103c8:	d84e      	bhi.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d04a      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
 80103ce:	2b10      	cmp	r3, #16
 80103d0:	d048      	beq.n	8010464 <TIM_SlaveTimer_SetConfig+0x198>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80103d2:	e049      	b.n	8010468 <TIM_SlaveTimer_SetConfig+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6818      	ldr	r0, [r3, #0]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	68d9      	ldr	r1, [r3, #12]
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	689a      	ldr	r2, [r3, #8]
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	f000 f8b7 	bl	8010556 <TIM_ETR_SetConfig>
      break;
 80103e8:	e03f      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x19e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2b05      	cmp	r3, #5
 80103f0:	d101      	bne.n	80103f6 <TIM_SlaveTimer_SetConfig+0x12a>
        return HAL_ERROR;
 80103f2:	2301      	movs	r3, #1
 80103f4:	e03a      	b.n	801046c <TIM_SlaveTimer_SetConfig+0x1a0>
      tmpccer = htim->Instance->CCER;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	6a1b      	ldr	r3, [r3, #32]
 80103fc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	6a1a      	ldr	r2, [r3, #32]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f022 0201 	bic.w	r2, r2, #1
 801040c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	699b      	ldr	r3, [r3, #24]
 8010414:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801041c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	011b      	lsls	r3, r3, #4
 8010424:	68fa      	ldr	r2, [r7, #12]
 8010426:	4313      	orrs	r3, r2
 8010428:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	68fa      	ldr	r2, [r7, #12]
 8010430:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	693a      	ldr	r2, [r7, #16]
 8010438:	621a      	str	r2, [r3, #32]
      break;
 801043a:	e016      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6818      	ldr	r0, [r3, #0]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	6899      	ldr	r1, [r3, #8]
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	691b      	ldr	r3, [r3, #16]
 8010448:	461a      	mov	r2, r3
 801044a:	f000 f825 	bl	8010498 <TIM_TI1_ConfigInputStage>
      break;
 801044e:	e00c      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6818      	ldr	r0, [r3, #0]
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	6899      	ldr	r1, [r3, #8]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	691b      	ldr	r3, [r3, #16]
 801045c:	461a      	mov	r2, r3
 801045e:	f000 f84a 	bl	80104f6 <TIM_TI2_ConfigInputStage>
      break;
 8010462:	e002      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x19e>
        break;
 8010464:	bf00      	nop
 8010466:	e000      	b.n	801046a <TIM_SlaveTimer_SetConfig+0x19e>
      break;
 8010468:	bf00      	nop
  }
  return HAL_OK;
 801046a:	2300      	movs	r3, #0
}
 801046c:	4618      	mov	r0, r3
 801046e:	3718      	adds	r7, #24
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	ffcfff8f 	.word	0xffcfff8f
 8010478:	fffefff8 	.word	0xfffefff8
 801047c:	00200010 	.word	0x00200010
 8010480:	00100070 	.word	0x00100070
 8010484:	00100060 	.word	0x00100060
 8010488:	00100050 	.word	0x00100050
 801048c:	00100040 	.word	0x00100040
 8010490:	00100030 	.word	0x00100030
 8010494:	00100020 	.word	0x00100020

08010498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010498:	b480      	push	{r7}
 801049a:	b087      	sub	sp, #28
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	6a1b      	ldr	r3, [r3, #32]
 80104a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	6a1b      	ldr	r3, [r3, #32]
 80104ae:	f023 0201 	bic.w	r2, r3, #1
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	699b      	ldr	r3, [r3, #24]
 80104ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80104c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	011b      	lsls	r3, r3, #4
 80104c8:	693a      	ldr	r2, [r7, #16]
 80104ca:	4313      	orrs	r3, r2
 80104cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	f023 030a 	bic.w	r3, r3, #10
 80104d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80104d6:	697a      	ldr	r2, [r7, #20]
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	4313      	orrs	r3, r2
 80104dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	693a      	ldr	r2, [r7, #16]
 80104e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	697a      	ldr	r2, [r7, #20]
 80104e8:	621a      	str	r2, [r3, #32]
}
 80104ea:	bf00      	nop
 80104ec:	371c      	adds	r7, #28
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80104f6:	b480      	push	{r7}
 80104f8:	b087      	sub	sp, #28
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	60f8      	str	r0, [r7, #12]
 80104fe:	60b9      	str	r1, [r7, #8]
 8010500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6a1b      	ldr	r3, [r3, #32]
 8010506:	f023 0210 	bic.w	r2, r3, #16
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	699b      	ldr	r3, [r3, #24]
 8010512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6a1b      	ldr	r3, [r3, #32]
 8010518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	031b      	lsls	r3, r3, #12
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	4313      	orrs	r3, r2
 801052a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	011b      	lsls	r3, r3, #4
 8010538:	693a      	ldr	r2, [r7, #16]
 801053a:	4313      	orrs	r3, r2
 801053c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	693a      	ldr	r2, [r7, #16]
 8010548:	621a      	str	r2, [r3, #32]
}
 801054a:	bf00      	nop
 801054c:	371c      	adds	r7, #28
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr

08010556 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010556:	b480      	push	{r7}
 8010558:	b087      	sub	sp, #28
 801055a:	af00      	add	r7, sp, #0
 801055c:	60f8      	str	r0, [r7, #12]
 801055e:	60b9      	str	r1, [r7, #8]
 8010560:	607a      	str	r2, [r7, #4]
 8010562:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010570:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	021a      	lsls	r2, r3, #8
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	431a      	orrs	r2, r3
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	4313      	orrs	r3, r2
 801057e:	697a      	ldr	r2, [r7, #20]
 8010580:	4313      	orrs	r3, r2
 8010582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	697a      	ldr	r2, [r7, #20]
 8010588:	609a      	str	r2, [r3, #8]
}
 801058a:	bf00      	nop
 801058c:	371c      	adds	r7, #28
 801058e:	46bd      	mov	sp, r7
 8010590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010594:	4770      	bx	lr

08010596 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010596:	b480      	push	{r7}
 8010598:	b087      	sub	sp, #28
 801059a:	af00      	add	r7, sp, #0
 801059c:	60f8      	str	r0, [r7, #12]
 801059e:	60b9      	str	r1, [r7, #8]
 80105a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	f003 031f 	and.w	r3, r3, #31
 80105a8:	2201      	movs	r2, #1
 80105aa:	fa02 f303 	lsl.w	r3, r2, r3
 80105ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6a1a      	ldr	r2, [r3, #32]
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	43db      	mvns	r3, r3
 80105b8:	401a      	ands	r2, r3
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6a1a      	ldr	r2, [r3, #32]
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	f003 031f 	and.w	r3, r3, #31
 80105c8:	6879      	ldr	r1, [r7, #4]
 80105ca:	fa01 f303 	lsl.w	r3, r1, r3
 80105ce:	431a      	orrs	r2, r3
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	621a      	str	r2, [r3, #32]
}
 80105d4:	bf00      	nop
 80105d6:	371c      	adds	r7, #28
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b085      	sub	sp, #20
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105f0:	2b01      	cmp	r3, #1
 80105f2:	d101      	bne.n	80105f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80105f4:	2302      	movs	r3, #2
 80105f6:	e068      	b.n	80106ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2202      	movs	r2, #2
 8010604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a2e      	ldr	r2, [pc, #184]	; (80106d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d004      	beq.n	801062c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	4a2d      	ldr	r2, [pc, #180]	; (80106dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d108      	bne.n	801063e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010632:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	68fa      	ldr	r2, [r7, #12]
 801063a:	4313      	orrs	r3, r2
 801063c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010644:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	4313      	orrs	r3, r2
 801064e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4a1e      	ldr	r2, [pc, #120]	; (80106d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d01d      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801066a:	d018      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a1b      	ldr	r2, [pc, #108]	; (80106e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d013      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a1a      	ldr	r2, [pc, #104]	; (80106e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d00e      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a18      	ldr	r2, [pc, #96]	; (80106e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d009      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a13      	ldr	r2, [pc, #76]	; (80106dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d004      	beq.n	801069e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4a14      	ldr	r2, [pc, #80]	; (80106ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d10c      	bne.n	80106b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	689b      	ldr	r3, [r3, #8]
 80106aa:	68ba      	ldr	r2, [r7, #8]
 80106ac:	4313      	orrs	r3, r2
 80106ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2201      	movs	r2, #1
 80106bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2200      	movs	r2, #0
 80106c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106c8:	2300      	movs	r3, #0
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3714      	adds	r7, #20
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop
 80106d8:	40010000 	.word	0x40010000
 80106dc:	40010400 	.word	0x40010400
 80106e0:	40000400 	.word	0x40000400
 80106e4:	40000800 	.word	0x40000800
 80106e8:	40000c00 	.word	0x40000c00
 80106ec:	40001800 	.word	0x40001800

080106f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b085      	sub	sp, #20
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80106fa:	2300      	movs	r3, #0
 80106fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010704:	2b01      	cmp	r3, #1
 8010706:	d101      	bne.n	801070c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010708:	2302      	movs	r3, #2
 801070a:	e065      	b.n	80107d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2201      	movs	r2, #1
 8010710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	4313      	orrs	r3, r2
 8010720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	689b      	ldr	r3, [r3, #8]
 801072c:	4313      	orrs	r3, r2
 801072e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	4313      	orrs	r3, r2
 801073c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	4313      	orrs	r3, r2
 801074a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	4313      	orrs	r3, r2
 8010758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	695b      	ldr	r3, [r3, #20]
 8010764:	4313      	orrs	r3, r2
 8010766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010772:	4313      	orrs	r3, r2
 8010774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	699b      	ldr	r3, [r3, #24]
 8010780:	041b      	lsls	r3, r3, #16
 8010782:	4313      	orrs	r3, r2
 8010784:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4a16      	ldr	r2, [pc, #88]	; (80107e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d004      	beq.n	801079a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a14      	ldr	r2, [pc, #80]	; (80107e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d115      	bne.n	80107c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a4:	051b      	lsls	r3, r3, #20
 80107a6:	4313      	orrs	r3, r2
 80107a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	69db      	ldr	r3, [r3, #28]
 80107b4:	4313      	orrs	r3, r2
 80107b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	6a1b      	ldr	r3, [r3, #32]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	68fa      	ldr	r2, [r7, #12]
 80107cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3714      	adds	r7, #20
 80107dc:	46bd      	mov	sp, r7
 80107de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e2:	4770      	bx	lr
 80107e4:	40010000 	.word	0x40010000
 80107e8:	40010400 	.word	0x40010400

080107ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80107fa:	2301      	movs	r3, #1
 80107fc:	e042      	b.n	8010884 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010804:	2b00      	cmp	r3, #0
 8010806:	d106      	bne.n	8010816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	f7f3 fa83 	bl	8003d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2224      	movs	r2, #36	; 0x24
 801081a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f022 0201 	bic.w	r2, r2, #1
 801082c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f82c 	bl	801088c <UART_SetConfig>
 8010834:	4603      	mov	r3, r0
 8010836:	2b01      	cmp	r3, #1
 8010838:	d101      	bne.n	801083e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801083a:	2301      	movs	r3, #1
 801083c:	e022      	b.n	8010884 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010842:	2b00      	cmp	r3, #0
 8010844:	d002      	beq.n	801084c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 fd80 	bl	801134c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	685a      	ldr	r2, [r3, #4]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801085a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	689a      	ldr	r2, [r3, #8]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801086a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f042 0201 	orr.w	r2, r2, #1
 801087a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 fe07 	bl	8011490 <UART_CheckIdleState>
 8010882:	4603      	mov	r3, r0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801088c:	b5b0      	push	{r4, r5, r7, lr}
 801088e:	b08e      	sub	sp, #56	; 0x38
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010894:	2300      	movs	r3, #0
 8010896:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	689a      	ldr	r2, [r3, #8]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	691b      	ldr	r3, [r3, #16]
 80108a2:	431a      	orrs	r2, r3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	695b      	ldr	r3, [r3, #20]
 80108a8:	431a      	orrs	r2, r3
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	69db      	ldr	r3, [r3, #28]
 80108ae:	4313      	orrs	r3, r2
 80108b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	4bbf      	ldr	r3, [pc, #764]	; (8010bb8 <UART_SetConfig+0x32c>)
 80108ba:	4013      	ands	r3, r2
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	6812      	ldr	r2, [r2, #0]
 80108c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80108c2:	430b      	orrs	r3, r1
 80108c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	68da      	ldr	r2, [r3, #12]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	430a      	orrs	r2, r1
 80108da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	699b      	ldr	r3, [r3, #24]
 80108e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4ab5      	ldr	r2, [pc, #724]	; (8010bbc <UART_SetConfig+0x330>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d004      	beq.n	80108f6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6a1b      	ldr	r3, [r3, #32]
 80108f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108f2:	4313      	orrs	r3, r2
 80108f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	689a      	ldr	r2, [r3, #8]
 80108fc:	4bb0      	ldr	r3, [pc, #704]	; (8010bc0 <UART_SetConfig+0x334>)
 80108fe:	4013      	ands	r3, r2
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	6812      	ldr	r2, [r2, #0]
 8010904:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010906:	430b      	orrs	r3, r1
 8010908:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010910:	f023 010f 	bic.w	r1, r3, #15
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	430a      	orrs	r2, r1
 801091e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4aa7      	ldr	r2, [pc, #668]	; (8010bc4 <UART_SetConfig+0x338>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d176      	bne.n	8010a18 <UART_SetConfig+0x18c>
 801092a:	4ba7      	ldr	r3, [pc, #668]	; (8010bc8 <UART_SetConfig+0x33c>)
 801092c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801092e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010932:	2b28      	cmp	r3, #40	; 0x28
 8010934:	d86c      	bhi.n	8010a10 <UART_SetConfig+0x184>
 8010936:	a201      	add	r2, pc, #4	; (adr r2, 801093c <UART_SetConfig+0xb0>)
 8010938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093c:	080109e1 	.word	0x080109e1
 8010940:	08010a11 	.word	0x08010a11
 8010944:	08010a11 	.word	0x08010a11
 8010948:	08010a11 	.word	0x08010a11
 801094c:	08010a11 	.word	0x08010a11
 8010950:	08010a11 	.word	0x08010a11
 8010954:	08010a11 	.word	0x08010a11
 8010958:	08010a11 	.word	0x08010a11
 801095c:	080109e9 	.word	0x080109e9
 8010960:	08010a11 	.word	0x08010a11
 8010964:	08010a11 	.word	0x08010a11
 8010968:	08010a11 	.word	0x08010a11
 801096c:	08010a11 	.word	0x08010a11
 8010970:	08010a11 	.word	0x08010a11
 8010974:	08010a11 	.word	0x08010a11
 8010978:	08010a11 	.word	0x08010a11
 801097c:	080109f1 	.word	0x080109f1
 8010980:	08010a11 	.word	0x08010a11
 8010984:	08010a11 	.word	0x08010a11
 8010988:	08010a11 	.word	0x08010a11
 801098c:	08010a11 	.word	0x08010a11
 8010990:	08010a11 	.word	0x08010a11
 8010994:	08010a11 	.word	0x08010a11
 8010998:	08010a11 	.word	0x08010a11
 801099c:	080109f9 	.word	0x080109f9
 80109a0:	08010a11 	.word	0x08010a11
 80109a4:	08010a11 	.word	0x08010a11
 80109a8:	08010a11 	.word	0x08010a11
 80109ac:	08010a11 	.word	0x08010a11
 80109b0:	08010a11 	.word	0x08010a11
 80109b4:	08010a11 	.word	0x08010a11
 80109b8:	08010a11 	.word	0x08010a11
 80109bc:	08010a01 	.word	0x08010a01
 80109c0:	08010a11 	.word	0x08010a11
 80109c4:	08010a11 	.word	0x08010a11
 80109c8:	08010a11 	.word	0x08010a11
 80109cc:	08010a11 	.word	0x08010a11
 80109d0:	08010a11 	.word	0x08010a11
 80109d4:	08010a11 	.word	0x08010a11
 80109d8:	08010a11 	.word	0x08010a11
 80109dc:	08010a09 	.word	0x08010a09
 80109e0:	2301      	movs	r3, #1
 80109e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109e6:	e222      	b.n	8010e2e <UART_SetConfig+0x5a2>
 80109e8:	2304      	movs	r3, #4
 80109ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109ee:	e21e      	b.n	8010e2e <UART_SetConfig+0x5a2>
 80109f0:	2308      	movs	r3, #8
 80109f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109f6:	e21a      	b.n	8010e2e <UART_SetConfig+0x5a2>
 80109f8:	2310      	movs	r3, #16
 80109fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80109fe:	e216      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a00:	2320      	movs	r3, #32
 8010a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a06:	e212      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a08:	2340      	movs	r3, #64	; 0x40
 8010a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a0e:	e20e      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a10:	2380      	movs	r3, #128	; 0x80
 8010a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a16:	e20a      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	4a6b      	ldr	r2, [pc, #428]	; (8010bcc <UART_SetConfig+0x340>)
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d130      	bne.n	8010a84 <UART_SetConfig+0x1f8>
 8010a22:	4b69      	ldr	r3, [pc, #420]	; (8010bc8 <UART_SetConfig+0x33c>)
 8010a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a26:	f003 0307 	and.w	r3, r3, #7
 8010a2a:	2b05      	cmp	r3, #5
 8010a2c:	d826      	bhi.n	8010a7c <UART_SetConfig+0x1f0>
 8010a2e:	a201      	add	r2, pc, #4	; (adr r2, 8010a34 <UART_SetConfig+0x1a8>)
 8010a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a34:	08010a4d 	.word	0x08010a4d
 8010a38:	08010a55 	.word	0x08010a55
 8010a3c:	08010a5d 	.word	0x08010a5d
 8010a40:	08010a65 	.word	0x08010a65
 8010a44:	08010a6d 	.word	0x08010a6d
 8010a48:	08010a75 	.word	0x08010a75
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a52:	e1ec      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a54:	2304      	movs	r3, #4
 8010a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a5a:	e1e8      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a5c:	2308      	movs	r3, #8
 8010a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a62:	e1e4      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a64:	2310      	movs	r3, #16
 8010a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a6a:	e1e0      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a6c:	2320      	movs	r3, #32
 8010a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a72:	e1dc      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a74:	2340      	movs	r3, #64	; 0x40
 8010a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a7a:	e1d8      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a7c:	2380      	movs	r3, #128	; 0x80
 8010a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a82:	e1d4      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a51      	ldr	r2, [pc, #324]	; (8010bd0 <UART_SetConfig+0x344>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d130      	bne.n	8010af0 <UART_SetConfig+0x264>
 8010a8e:	4b4e      	ldr	r3, [pc, #312]	; (8010bc8 <UART_SetConfig+0x33c>)
 8010a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a92:	f003 0307 	and.w	r3, r3, #7
 8010a96:	2b05      	cmp	r3, #5
 8010a98:	d826      	bhi.n	8010ae8 <UART_SetConfig+0x25c>
 8010a9a:	a201      	add	r2, pc, #4	; (adr r2, 8010aa0 <UART_SetConfig+0x214>)
 8010a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa0:	08010ab9 	.word	0x08010ab9
 8010aa4:	08010ac1 	.word	0x08010ac1
 8010aa8:	08010ac9 	.word	0x08010ac9
 8010aac:	08010ad1 	.word	0x08010ad1
 8010ab0:	08010ad9 	.word	0x08010ad9
 8010ab4:	08010ae1 	.word	0x08010ae1
 8010ab8:	2300      	movs	r3, #0
 8010aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010abe:	e1b6      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ac0:	2304      	movs	r3, #4
 8010ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ac6:	e1b2      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ac8:	2308      	movs	r3, #8
 8010aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ace:	e1ae      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ad0:	2310      	movs	r3, #16
 8010ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ad6:	e1aa      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ad8:	2320      	movs	r3, #32
 8010ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ade:	e1a6      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ae0:	2340      	movs	r3, #64	; 0x40
 8010ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ae6:	e1a2      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ae8:	2380      	movs	r3, #128	; 0x80
 8010aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aee:	e19e      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a37      	ldr	r2, [pc, #220]	; (8010bd4 <UART_SetConfig+0x348>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d130      	bne.n	8010b5c <UART_SetConfig+0x2d0>
 8010afa:	4b33      	ldr	r3, [pc, #204]	; (8010bc8 <UART_SetConfig+0x33c>)
 8010afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010afe:	f003 0307 	and.w	r3, r3, #7
 8010b02:	2b05      	cmp	r3, #5
 8010b04:	d826      	bhi.n	8010b54 <UART_SetConfig+0x2c8>
 8010b06:	a201      	add	r2, pc, #4	; (adr r2, 8010b0c <UART_SetConfig+0x280>)
 8010b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b0c:	08010b25 	.word	0x08010b25
 8010b10:	08010b2d 	.word	0x08010b2d
 8010b14:	08010b35 	.word	0x08010b35
 8010b18:	08010b3d 	.word	0x08010b3d
 8010b1c:	08010b45 	.word	0x08010b45
 8010b20:	08010b4d 	.word	0x08010b4d
 8010b24:	2300      	movs	r3, #0
 8010b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b2a:	e180      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010b2c:	2304      	movs	r3, #4
 8010b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b32:	e17c      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010b34:	2308      	movs	r3, #8
 8010b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b3a:	e178      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010b3c:	2310      	movs	r3, #16
 8010b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b42:	e174      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010b44:	2320      	movs	r3, #32
 8010b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b4a:	e170      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010b4c:	2340      	movs	r3, #64	; 0x40
 8010b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b52:	e16c      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010b54:	2380      	movs	r3, #128	; 0x80
 8010b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b5a:	e168      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a1d      	ldr	r2, [pc, #116]	; (8010bd8 <UART_SetConfig+0x34c>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d142      	bne.n	8010bec <UART_SetConfig+0x360>
 8010b66:	4b18      	ldr	r3, [pc, #96]	; (8010bc8 <UART_SetConfig+0x33c>)
 8010b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b6a:	f003 0307 	and.w	r3, r3, #7
 8010b6e:	2b05      	cmp	r3, #5
 8010b70:	d838      	bhi.n	8010be4 <UART_SetConfig+0x358>
 8010b72:	a201      	add	r2, pc, #4	; (adr r2, 8010b78 <UART_SetConfig+0x2ec>)
 8010b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b78:	08010b91 	.word	0x08010b91
 8010b7c:	08010b99 	.word	0x08010b99
 8010b80:	08010ba1 	.word	0x08010ba1
 8010b84:	08010ba9 	.word	0x08010ba9
 8010b88:	08010bb1 	.word	0x08010bb1
 8010b8c:	08010bdd 	.word	0x08010bdd
 8010b90:	2300      	movs	r3, #0
 8010b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b96:	e14a      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010b98:	2304      	movs	r3, #4
 8010b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b9e:	e146      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ba0:	2308      	movs	r3, #8
 8010ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ba6:	e142      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ba8:	2310      	movs	r3, #16
 8010baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bae:	e13e      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010bb0:	2320      	movs	r3, #32
 8010bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bb6:	e13a      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010bb8:	cfff69f3 	.word	0xcfff69f3
 8010bbc:	58000c00 	.word	0x58000c00
 8010bc0:	11fff4ff 	.word	0x11fff4ff
 8010bc4:	40011000 	.word	0x40011000
 8010bc8:	58024400 	.word	0x58024400
 8010bcc:	40004400 	.word	0x40004400
 8010bd0:	40004800 	.word	0x40004800
 8010bd4:	40004c00 	.word	0x40004c00
 8010bd8:	40005000 	.word	0x40005000
 8010bdc:	2340      	movs	r3, #64	; 0x40
 8010bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010be2:	e124      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010be4:	2380      	movs	r3, #128	; 0x80
 8010be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bea:	e120      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	4acc      	ldr	r2, [pc, #816]	; (8010f24 <UART_SetConfig+0x698>)
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d176      	bne.n	8010ce4 <UART_SetConfig+0x458>
 8010bf6:	4bcc      	ldr	r3, [pc, #816]	; (8010f28 <UART_SetConfig+0x69c>)
 8010bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bfe:	2b28      	cmp	r3, #40	; 0x28
 8010c00:	d86c      	bhi.n	8010cdc <UART_SetConfig+0x450>
 8010c02:	a201      	add	r2, pc, #4	; (adr r2, 8010c08 <UART_SetConfig+0x37c>)
 8010c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c08:	08010cad 	.word	0x08010cad
 8010c0c:	08010cdd 	.word	0x08010cdd
 8010c10:	08010cdd 	.word	0x08010cdd
 8010c14:	08010cdd 	.word	0x08010cdd
 8010c18:	08010cdd 	.word	0x08010cdd
 8010c1c:	08010cdd 	.word	0x08010cdd
 8010c20:	08010cdd 	.word	0x08010cdd
 8010c24:	08010cdd 	.word	0x08010cdd
 8010c28:	08010cb5 	.word	0x08010cb5
 8010c2c:	08010cdd 	.word	0x08010cdd
 8010c30:	08010cdd 	.word	0x08010cdd
 8010c34:	08010cdd 	.word	0x08010cdd
 8010c38:	08010cdd 	.word	0x08010cdd
 8010c3c:	08010cdd 	.word	0x08010cdd
 8010c40:	08010cdd 	.word	0x08010cdd
 8010c44:	08010cdd 	.word	0x08010cdd
 8010c48:	08010cbd 	.word	0x08010cbd
 8010c4c:	08010cdd 	.word	0x08010cdd
 8010c50:	08010cdd 	.word	0x08010cdd
 8010c54:	08010cdd 	.word	0x08010cdd
 8010c58:	08010cdd 	.word	0x08010cdd
 8010c5c:	08010cdd 	.word	0x08010cdd
 8010c60:	08010cdd 	.word	0x08010cdd
 8010c64:	08010cdd 	.word	0x08010cdd
 8010c68:	08010cc5 	.word	0x08010cc5
 8010c6c:	08010cdd 	.word	0x08010cdd
 8010c70:	08010cdd 	.word	0x08010cdd
 8010c74:	08010cdd 	.word	0x08010cdd
 8010c78:	08010cdd 	.word	0x08010cdd
 8010c7c:	08010cdd 	.word	0x08010cdd
 8010c80:	08010cdd 	.word	0x08010cdd
 8010c84:	08010cdd 	.word	0x08010cdd
 8010c88:	08010ccd 	.word	0x08010ccd
 8010c8c:	08010cdd 	.word	0x08010cdd
 8010c90:	08010cdd 	.word	0x08010cdd
 8010c94:	08010cdd 	.word	0x08010cdd
 8010c98:	08010cdd 	.word	0x08010cdd
 8010c9c:	08010cdd 	.word	0x08010cdd
 8010ca0:	08010cdd 	.word	0x08010cdd
 8010ca4:	08010cdd 	.word	0x08010cdd
 8010ca8:	08010cd5 	.word	0x08010cd5
 8010cac:	2301      	movs	r3, #1
 8010cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cb2:	e0bc      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010cb4:	2304      	movs	r3, #4
 8010cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cba:	e0b8      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010cbc:	2308      	movs	r3, #8
 8010cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cc2:	e0b4      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010cc4:	2310      	movs	r3, #16
 8010cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cca:	e0b0      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ccc:	2320      	movs	r3, #32
 8010cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cd2:	e0ac      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010cd4:	2340      	movs	r3, #64	; 0x40
 8010cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010cda:	e0a8      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010cdc:	2380      	movs	r3, #128	; 0x80
 8010cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ce2:	e0a4      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	4a90      	ldr	r2, [pc, #576]	; (8010f2c <UART_SetConfig+0x6a0>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d130      	bne.n	8010d50 <UART_SetConfig+0x4c4>
 8010cee:	4b8e      	ldr	r3, [pc, #568]	; (8010f28 <UART_SetConfig+0x69c>)
 8010cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cf2:	f003 0307 	and.w	r3, r3, #7
 8010cf6:	2b05      	cmp	r3, #5
 8010cf8:	d826      	bhi.n	8010d48 <UART_SetConfig+0x4bc>
 8010cfa:	a201      	add	r2, pc, #4	; (adr r2, 8010d00 <UART_SetConfig+0x474>)
 8010cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d00:	08010d19 	.word	0x08010d19
 8010d04:	08010d21 	.word	0x08010d21
 8010d08:	08010d29 	.word	0x08010d29
 8010d0c:	08010d31 	.word	0x08010d31
 8010d10:	08010d39 	.word	0x08010d39
 8010d14:	08010d41 	.word	0x08010d41
 8010d18:	2300      	movs	r3, #0
 8010d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d1e:	e086      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d20:	2304      	movs	r3, #4
 8010d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d26:	e082      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d28:	2308      	movs	r3, #8
 8010d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d2e:	e07e      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d30:	2310      	movs	r3, #16
 8010d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d36:	e07a      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d38:	2320      	movs	r3, #32
 8010d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d3e:	e076      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d40:	2340      	movs	r3, #64	; 0x40
 8010d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d46:	e072      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d48:	2380      	movs	r3, #128	; 0x80
 8010d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d4e:	e06e      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a76      	ldr	r2, [pc, #472]	; (8010f30 <UART_SetConfig+0x6a4>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d130      	bne.n	8010dbc <UART_SetConfig+0x530>
 8010d5a:	4b73      	ldr	r3, [pc, #460]	; (8010f28 <UART_SetConfig+0x69c>)
 8010d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d5e:	f003 0307 	and.w	r3, r3, #7
 8010d62:	2b05      	cmp	r3, #5
 8010d64:	d826      	bhi.n	8010db4 <UART_SetConfig+0x528>
 8010d66:	a201      	add	r2, pc, #4	; (adr r2, 8010d6c <UART_SetConfig+0x4e0>)
 8010d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d6c:	08010d85 	.word	0x08010d85
 8010d70:	08010d8d 	.word	0x08010d8d
 8010d74:	08010d95 	.word	0x08010d95
 8010d78:	08010d9d 	.word	0x08010d9d
 8010d7c:	08010da5 	.word	0x08010da5
 8010d80:	08010dad 	.word	0x08010dad
 8010d84:	2300      	movs	r3, #0
 8010d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d8a:	e050      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d8c:	2304      	movs	r3, #4
 8010d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d92:	e04c      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d94:	2308      	movs	r3, #8
 8010d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d9a:	e048      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010d9c:	2310      	movs	r3, #16
 8010d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010da2:	e044      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010da4:	2320      	movs	r3, #32
 8010da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010daa:	e040      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010dac:	2340      	movs	r3, #64	; 0x40
 8010dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010db2:	e03c      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010db4:	2380      	movs	r3, #128	; 0x80
 8010db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dba:	e038      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a5c      	ldr	r2, [pc, #368]	; (8010f34 <UART_SetConfig+0x6a8>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d130      	bne.n	8010e28 <UART_SetConfig+0x59c>
 8010dc6:	4b58      	ldr	r3, [pc, #352]	; (8010f28 <UART_SetConfig+0x69c>)
 8010dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dca:	f003 0307 	and.w	r3, r3, #7
 8010dce:	2b05      	cmp	r3, #5
 8010dd0:	d826      	bhi.n	8010e20 <UART_SetConfig+0x594>
 8010dd2:	a201      	add	r2, pc, #4	; (adr r2, 8010dd8 <UART_SetConfig+0x54c>)
 8010dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dd8:	08010df1 	.word	0x08010df1
 8010ddc:	08010df9 	.word	0x08010df9
 8010de0:	08010e01 	.word	0x08010e01
 8010de4:	08010e09 	.word	0x08010e09
 8010de8:	08010e11 	.word	0x08010e11
 8010dec:	08010e19 	.word	0x08010e19
 8010df0:	2302      	movs	r3, #2
 8010df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010df6:	e01a      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010df8:	2304      	movs	r3, #4
 8010dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dfe:	e016      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010e00:	2308      	movs	r3, #8
 8010e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e06:	e012      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010e08:	2310      	movs	r3, #16
 8010e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e0e:	e00e      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010e10:	2320      	movs	r3, #32
 8010e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e16:	e00a      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010e18:	2340      	movs	r3, #64	; 0x40
 8010e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e1e:	e006      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010e20:	2380      	movs	r3, #128	; 0x80
 8010e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e26:	e002      	b.n	8010e2e <UART_SetConfig+0x5a2>
 8010e28:	2380      	movs	r3, #128	; 0x80
 8010e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4a40      	ldr	r2, [pc, #256]	; (8010f34 <UART_SetConfig+0x6a8>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	f040 80ef 	bne.w	8011018 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010e3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010e3e:	2b20      	cmp	r3, #32
 8010e40:	dc46      	bgt.n	8010ed0 <UART_SetConfig+0x644>
 8010e42:	2b02      	cmp	r3, #2
 8010e44:	f2c0 8081 	blt.w	8010f4a <UART_SetConfig+0x6be>
 8010e48:	3b02      	subs	r3, #2
 8010e4a:	2b1e      	cmp	r3, #30
 8010e4c:	d87d      	bhi.n	8010f4a <UART_SetConfig+0x6be>
 8010e4e:	a201      	add	r2, pc, #4	; (adr r2, 8010e54 <UART_SetConfig+0x5c8>)
 8010e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e54:	08010ed7 	.word	0x08010ed7
 8010e58:	08010f4b 	.word	0x08010f4b
 8010e5c:	08010edf 	.word	0x08010edf
 8010e60:	08010f4b 	.word	0x08010f4b
 8010e64:	08010f4b 	.word	0x08010f4b
 8010e68:	08010f4b 	.word	0x08010f4b
 8010e6c:	08010eef 	.word	0x08010eef
 8010e70:	08010f4b 	.word	0x08010f4b
 8010e74:	08010f4b 	.word	0x08010f4b
 8010e78:	08010f4b 	.word	0x08010f4b
 8010e7c:	08010f4b 	.word	0x08010f4b
 8010e80:	08010f4b 	.word	0x08010f4b
 8010e84:	08010f4b 	.word	0x08010f4b
 8010e88:	08010f4b 	.word	0x08010f4b
 8010e8c:	08010eff 	.word	0x08010eff
 8010e90:	08010f4b 	.word	0x08010f4b
 8010e94:	08010f4b 	.word	0x08010f4b
 8010e98:	08010f4b 	.word	0x08010f4b
 8010e9c:	08010f4b 	.word	0x08010f4b
 8010ea0:	08010f4b 	.word	0x08010f4b
 8010ea4:	08010f4b 	.word	0x08010f4b
 8010ea8:	08010f4b 	.word	0x08010f4b
 8010eac:	08010f4b 	.word	0x08010f4b
 8010eb0:	08010f4b 	.word	0x08010f4b
 8010eb4:	08010f4b 	.word	0x08010f4b
 8010eb8:	08010f4b 	.word	0x08010f4b
 8010ebc:	08010f4b 	.word	0x08010f4b
 8010ec0:	08010f4b 	.word	0x08010f4b
 8010ec4:	08010f4b 	.word	0x08010f4b
 8010ec8:	08010f4b 	.word	0x08010f4b
 8010ecc:	08010f3d 	.word	0x08010f3d
 8010ed0:	2b40      	cmp	r3, #64	; 0x40
 8010ed2:	d036      	beq.n	8010f42 <UART_SetConfig+0x6b6>
 8010ed4:	e039      	b.n	8010f4a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010ed6:	f7fb fe67 	bl	800cba8 <HAL_RCCEx_GetD3PCLK1Freq>
 8010eda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010edc:	e03b      	b.n	8010f56 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ede:	f107 0314 	add.w	r3, r7, #20
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fb fe76 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ee8:	69bb      	ldr	r3, [r7, #24]
 8010eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010eec:	e033      	b.n	8010f56 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010eee:	f107 0308 	add.w	r3, r7, #8
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fb ffc2 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010efc:	e02b      	b.n	8010f56 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010efe:	4b0a      	ldr	r3, [pc, #40]	; (8010f28 <UART_SetConfig+0x69c>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	f003 0320 	and.w	r3, r3, #32
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d009      	beq.n	8010f1e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f0a:	4b07      	ldr	r3, [pc, #28]	; (8010f28 <UART_SetConfig+0x69c>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	08db      	lsrs	r3, r3, #3
 8010f10:	f003 0303 	and.w	r3, r3, #3
 8010f14:	4a08      	ldr	r2, [pc, #32]	; (8010f38 <UART_SetConfig+0x6ac>)
 8010f16:	fa22 f303 	lsr.w	r3, r2, r3
 8010f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f1c:	e01b      	b.n	8010f56 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8010f1e:	4b06      	ldr	r3, [pc, #24]	; (8010f38 <UART_SetConfig+0x6ac>)
 8010f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f22:	e018      	b.n	8010f56 <UART_SetConfig+0x6ca>
 8010f24:	40011400 	.word	0x40011400
 8010f28:	58024400 	.word	0x58024400
 8010f2c:	40007800 	.word	0x40007800
 8010f30:	40007c00 	.word	0x40007c00
 8010f34:	58000c00 	.word	0x58000c00
 8010f38:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f3c:	4bc4      	ldr	r3, [pc, #784]	; (8011250 <UART_SetConfig+0x9c4>)
 8010f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f40:	e009      	b.n	8010f56 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010f48:	e005      	b.n	8010f56 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010f54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f000 81da 	beq.w	8011312 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f62:	4abc      	ldr	r2, [pc, #752]	; (8011254 <UART_SetConfig+0x9c8>)
 8010f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f68:	461a      	mov	r2, r3
 8010f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f70:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	685a      	ldr	r2, [r3, #4]
 8010f76:	4613      	mov	r3, r2
 8010f78:	005b      	lsls	r3, r3, #1
 8010f7a:	4413      	add	r3, r2
 8010f7c:	6a3a      	ldr	r2, [r7, #32]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d305      	bcc.n	8010f8e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f88:	6a3a      	ldr	r2, [r7, #32]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d903      	bls.n	8010f96 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010f94:	e1bd      	b.n	8011312 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f04f 0100 	mov.w	r1, #0
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa2:	4aac      	ldr	r2, [pc, #688]	; (8011254 <UART_SetConfig+0x9c8>)
 8010fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	f04f 0300 	mov.w	r3, #0
 8010fae:	f7ef fbab 	bl	8000708 <__aeabi_uldivmod>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	460b      	mov	r3, r1
 8010fb6:	4610      	mov	r0, r2
 8010fb8:	4619      	mov	r1, r3
 8010fba:	f04f 0200 	mov.w	r2, #0
 8010fbe:	f04f 0300 	mov.w	r3, #0
 8010fc2:	020b      	lsls	r3, r1, #8
 8010fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010fc8:	0202      	lsls	r2, r0, #8
 8010fca:	6879      	ldr	r1, [r7, #4]
 8010fcc:	6849      	ldr	r1, [r1, #4]
 8010fce:	0849      	lsrs	r1, r1, #1
 8010fd0:	4608      	mov	r0, r1
 8010fd2:	f04f 0100 	mov.w	r1, #0
 8010fd6:	1814      	adds	r4, r2, r0
 8010fd8:	eb43 0501 	adc.w	r5, r3, r1
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	f04f 0300 	mov.w	r3, #0
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	4629      	mov	r1, r5
 8010fea:	f7ef fb8d 	bl	8000708 <__aeabi_uldivmod>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ffc:	d308      	bcc.n	8011010 <UART_SetConfig+0x784>
 8010ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011004:	d204      	bcs.n	8011010 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801100c:	60da      	str	r2, [r3, #12]
 801100e:	e180      	b.n	8011312 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8011010:	2301      	movs	r3, #1
 8011012:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011016:	e17c      	b.n	8011312 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	69db      	ldr	r3, [r3, #28]
 801101c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011020:	f040 80bf 	bne.w	80111a2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8011024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011028:	2b20      	cmp	r3, #32
 801102a:	dc49      	bgt.n	80110c0 <UART_SetConfig+0x834>
 801102c:	2b00      	cmp	r3, #0
 801102e:	db7c      	blt.n	801112a <UART_SetConfig+0x89e>
 8011030:	2b20      	cmp	r3, #32
 8011032:	d87a      	bhi.n	801112a <UART_SetConfig+0x89e>
 8011034:	a201      	add	r2, pc, #4	; (adr r2, 801103c <UART_SetConfig+0x7b0>)
 8011036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801103a:	bf00      	nop
 801103c:	080110c7 	.word	0x080110c7
 8011040:	080110cf 	.word	0x080110cf
 8011044:	0801112b 	.word	0x0801112b
 8011048:	0801112b 	.word	0x0801112b
 801104c:	080110d7 	.word	0x080110d7
 8011050:	0801112b 	.word	0x0801112b
 8011054:	0801112b 	.word	0x0801112b
 8011058:	0801112b 	.word	0x0801112b
 801105c:	080110e7 	.word	0x080110e7
 8011060:	0801112b 	.word	0x0801112b
 8011064:	0801112b 	.word	0x0801112b
 8011068:	0801112b 	.word	0x0801112b
 801106c:	0801112b 	.word	0x0801112b
 8011070:	0801112b 	.word	0x0801112b
 8011074:	0801112b 	.word	0x0801112b
 8011078:	0801112b 	.word	0x0801112b
 801107c:	080110f7 	.word	0x080110f7
 8011080:	0801112b 	.word	0x0801112b
 8011084:	0801112b 	.word	0x0801112b
 8011088:	0801112b 	.word	0x0801112b
 801108c:	0801112b 	.word	0x0801112b
 8011090:	0801112b 	.word	0x0801112b
 8011094:	0801112b 	.word	0x0801112b
 8011098:	0801112b 	.word	0x0801112b
 801109c:	0801112b 	.word	0x0801112b
 80110a0:	0801112b 	.word	0x0801112b
 80110a4:	0801112b 	.word	0x0801112b
 80110a8:	0801112b 	.word	0x0801112b
 80110ac:	0801112b 	.word	0x0801112b
 80110b0:	0801112b 	.word	0x0801112b
 80110b4:	0801112b 	.word	0x0801112b
 80110b8:	0801112b 	.word	0x0801112b
 80110bc:	0801111d 	.word	0x0801111d
 80110c0:	2b40      	cmp	r3, #64	; 0x40
 80110c2:	d02e      	beq.n	8011122 <UART_SetConfig+0x896>
 80110c4:	e031      	b.n	801112a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110c6:	f7fa f931 	bl	800b32c <HAL_RCC_GetPCLK1Freq>
 80110ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80110cc:	e033      	b.n	8011136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80110ce:	f7fa f943 	bl	800b358 <HAL_RCC_GetPCLK2Freq>
 80110d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80110d4:	e02f      	b.n	8011136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110d6:	f107 0314 	add.w	r3, r7, #20
 80110da:	4618      	mov	r0, r3
 80110dc:	f7fb fd7a 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110e0:	69bb      	ldr	r3, [r7, #24]
 80110e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110e4:	e027      	b.n	8011136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110e6:	f107 0308 	add.w	r3, r7, #8
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fb fec6 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110f4:	e01f      	b.n	8011136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110f6:	4b58      	ldr	r3, [pc, #352]	; (8011258 <UART_SetConfig+0x9cc>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f003 0320 	and.w	r3, r3, #32
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d009      	beq.n	8011116 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011102:	4b55      	ldr	r3, [pc, #340]	; (8011258 <UART_SetConfig+0x9cc>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	08db      	lsrs	r3, r3, #3
 8011108:	f003 0303 	and.w	r3, r3, #3
 801110c:	4a53      	ldr	r2, [pc, #332]	; (801125c <UART_SetConfig+0x9d0>)
 801110e:	fa22 f303 	lsr.w	r3, r2, r3
 8011112:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011114:	e00f      	b.n	8011136 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8011116:	4b51      	ldr	r3, [pc, #324]	; (801125c <UART_SetConfig+0x9d0>)
 8011118:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801111a:	e00c      	b.n	8011136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801111c:	4b4c      	ldr	r3, [pc, #304]	; (8011250 <UART_SetConfig+0x9c4>)
 801111e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011120:	e009      	b.n	8011136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011128:	e005      	b.n	8011136 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 801112a:	2300      	movs	r3, #0
 801112c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801112e:	2301      	movs	r3, #1
 8011130:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011138:	2b00      	cmp	r3, #0
 801113a:	f000 80ea 	beq.w	8011312 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011142:	4a44      	ldr	r2, [pc, #272]	; (8011254 <UART_SetConfig+0x9c8>)
 8011144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011148:	461a      	mov	r2, r3
 801114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011150:	005a      	lsls	r2, r3, #1
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	085b      	lsrs	r3, r3, #1
 8011158:	441a      	add	r2, r3
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011162:	b29b      	uxth	r3, r3
 8011164:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011168:	2b0f      	cmp	r3, #15
 801116a:	d916      	bls.n	801119a <UART_SetConfig+0x90e>
 801116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011172:	d212      	bcs.n	801119a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011176:	b29b      	uxth	r3, r3
 8011178:	f023 030f 	bic.w	r3, r3, #15
 801117c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011180:	085b      	lsrs	r3, r3, #1
 8011182:	b29b      	uxth	r3, r3
 8011184:	f003 0307 	and.w	r3, r3, #7
 8011188:	b29a      	uxth	r2, r3
 801118a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801118c:	4313      	orrs	r3, r2
 801118e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011196:	60da      	str	r2, [r3, #12]
 8011198:	e0bb      	b.n	8011312 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801119a:	2301      	movs	r3, #1
 801119c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80111a0:	e0b7      	b.n	8011312 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80111a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80111a6:	2b20      	cmp	r3, #32
 80111a8:	dc4a      	bgt.n	8011240 <UART_SetConfig+0x9b4>
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f2c0 8086 	blt.w	80112bc <UART_SetConfig+0xa30>
 80111b0:	2b20      	cmp	r3, #32
 80111b2:	f200 8083 	bhi.w	80112bc <UART_SetConfig+0xa30>
 80111b6:	a201      	add	r2, pc, #4	; (adr r2, 80111bc <UART_SetConfig+0x930>)
 80111b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111bc:	08011247 	.word	0x08011247
 80111c0:	08011261 	.word	0x08011261
 80111c4:	080112bd 	.word	0x080112bd
 80111c8:	080112bd 	.word	0x080112bd
 80111cc:	08011269 	.word	0x08011269
 80111d0:	080112bd 	.word	0x080112bd
 80111d4:	080112bd 	.word	0x080112bd
 80111d8:	080112bd 	.word	0x080112bd
 80111dc:	08011279 	.word	0x08011279
 80111e0:	080112bd 	.word	0x080112bd
 80111e4:	080112bd 	.word	0x080112bd
 80111e8:	080112bd 	.word	0x080112bd
 80111ec:	080112bd 	.word	0x080112bd
 80111f0:	080112bd 	.word	0x080112bd
 80111f4:	080112bd 	.word	0x080112bd
 80111f8:	080112bd 	.word	0x080112bd
 80111fc:	08011289 	.word	0x08011289
 8011200:	080112bd 	.word	0x080112bd
 8011204:	080112bd 	.word	0x080112bd
 8011208:	080112bd 	.word	0x080112bd
 801120c:	080112bd 	.word	0x080112bd
 8011210:	080112bd 	.word	0x080112bd
 8011214:	080112bd 	.word	0x080112bd
 8011218:	080112bd 	.word	0x080112bd
 801121c:	080112bd 	.word	0x080112bd
 8011220:	080112bd 	.word	0x080112bd
 8011224:	080112bd 	.word	0x080112bd
 8011228:	080112bd 	.word	0x080112bd
 801122c:	080112bd 	.word	0x080112bd
 8011230:	080112bd 	.word	0x080112bd
 8011234:	080112bd 	.word	0x080112bd
 8011238:	080112bd 	.word	0x080112bd
 801123c:	080112af 	.word	0x080112af
 8011240:	2b40      	cmp	r3, #64	; 0x40
 8011242:	d037      	beq.n	80112b4 <UART_SetConfig+0xa28>
 8011244:	e03a      	b.n	80112bc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011246:	f7fa f871 	bl	800b32c <HAL_RCC_GetPCLK1Freq>
 801124a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801124c:	e03c      	b.n	80112c8 <UART_SetConfig+0xa3c>
 801124e:	bf00      	nop
 8011250:	003d0900 	.word	0x003d0900
 8011254:	08028214 	.word	0x08028214
 8011258:	58024400 	.word	0x58024400
 801125c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011260:	f7fa f87a 	bl	800b358 <HAL_RCC_GetPCLK2Freq>
 8011264:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011266:	e02f      	b.n	80112c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011268:	f107 0314 	add.w	r3, r7, #20
 801126c:	4618      	mov	r0, r3
 801126e:	f7fb fcb1 	bl	800cbd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011276:	e027      	b.n	80112c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011278:	f107 0308 	add.w	r3, r7, #8
 801127c:	4618      	mov	r0, r3
 801127e:	f7fb fdfd 	bl	800ce7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011286:	e01f      	b.n	80112c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011288:	4b2c      	ldr	r3, [pc, #176]	; (801133c <UART_SetConfig+0xab0>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f003 0320 	and.w	r3, r3, #32
 8011290:	2b00      	cmp	r3, #0
 8011292:	d009      	beq.n	80112a8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011294:	4b29      	ldr	r3, [pc, #164]	; (801133c <UART_SetConfig+0xab0>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	08db      	lsrs	r3, r3, #3
 801129a:	f003 0303 	and.w	r3, r3, #3
 801129e:	4a28      	ldr	r2, [pc, #160]	; (8011340 <UART_SetConfig+0xab4>)
 80112a0:	fa22 f303 	lsr.w	r3, r2, r3
 80112a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112a6:	e00f      	b.n	80112c8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80112a8:	4b25      	ldr	r3, [pc, #148]	; (8011340 <UART_SetConfig+0xab4>)
 80112aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80112ac:	e00c      	b.n	80112c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112ae:	4b25      	ldr	r3, [pc, #148]	; (8011344 <UART_SetConfig+0xab8>)
 80112b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80112b2:	e009      	b.n	80112c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80112ba:	e005      	b.n	80112c8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80112bc:	2300      	movs	r3, #0
 80112be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80112c0:	2301      	movs	r3, #1
 80112c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80112c6:	bf00      	nop
    }

    if (pclk != 0U)
 80112c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d021      	beq.n	8011312 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d2:	4a1d      	ldr	r2, [pc, #116]	; (8011348 <UART_SetConfig+0xabc>)
 80112d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112d8:	461a      	mov	r2, r3
 80112da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	085b      	lsrs	r3, r3, #1
 80112e6:	441a      	add	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f6:	2b0f      	cmp	r3, #15
 80112f8:	d908      	bls.n	801130c <UART_SetConfig+0xa80>
 80112fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011300:	d204      	bcs.n	801130c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011308:	60da      	str	r2, [r3, #12]
 801130a:	e002      	b.n	8011312 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801130c:	2301      	movs	r3, #1
 801130e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2201      	movs	r2, #1
 8011316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2201      	movs	r2, #1
 801131e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801132e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8011332:	4618      	mov	r0, r3
 8011334:	3738      	adds	r7, #56	; 0x38
 8011336:	46bd      	mov	sp, r7
 8011338:	bdb0      	pop	{r4, r5, r7, pc}
 801133a:	bf00      	nop
 801133c:	58024400 	.word	0x58024400
 8011340:	03d09000 	.word	0x03d09000
 8011344:	003d0900 	.word	0x003d0900
 8011348:	08028214 	.word	0x08028214

0801134c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011358:	f003 0301 	and.w	r3, r3, #1
 801135c:	2b00      	cmp	r3, #0
 801135e:	d00a      	beq.n	8011376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	430a      	orrs	r2, r1
 8011374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801137a:	f003 0302 	and.w	r3, r3, #2
 801137e:	2b00      	cmp	r3, #0
 8011380:	d00a      	beq.n	8011398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	430a      	orrs	r2, r1
 8011396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801139c:	f003 0304 	and.w	r3, r3, #4
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d00a      	beq.n	80113ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	430a      	orrs	r2, r1
 80113b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113be:	f003 0308 	and.w	r3, r3, #8
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00a      	beq.n	80113dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	430a      	orrs	r2, r1
 80113da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113e0:	f003 0310 	and.w	r3, r3, #16
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d00a      	beq.n	80113fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	430a      	orrs	r2, r1
 80113fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011402:	f003 0320 	and.w	r3, r3, #32
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00a      	beq.n	8011420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	689b      	ldr	r3, [r3, #8]
 8011410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	430a      	orrs	r2, r1
 801141e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011428:	2b00      	cmp	r3, #0
 801142a:	d01a      	beq.n	8011462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	430a      	orrs	r2, r1
 8011440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801144a:	d10a      	bne.n	8011462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	430a      	orrs	r2, r1
 8011460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801146a:	2b00      	cmp	r3, #0
 801146c:	d00a      	beq.n	8011484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	430a      	orrs	r2, r1
 8011482:	605a      	str	r2, [r3, #4]
  }
}
 8011484:	bf00      	nop
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b086      	sub	sp, #24
 8011494:	af02      	add	r7, sp, #8
 8011496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80114a0:	f7f2 fef4 	bl	800428c <HAL_GetTick>
 80114a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f003 0308 	and.w	r3, r3, #8
 80114b0:	2b08      	cmp	r3, #8
 80114b2:	d10e      	bne.n	80114d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80114b8:	9300      	str	r3, [sp, #0]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2200      	movs	r2, #0
 80114be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f000 f82f 	bl	8011526 <UART_WaitOnFlagUntilTimeout>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d001      	beq.n	80114d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114ce:	2303      	movs	r3, #3
 80114d0:	e025      	b.n	801151e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f003 0304 	and.w	r3, r3, #4
 80114dc:	2b04      	cmp	r3, #4
 80114de:	d10e      	bne.n	80114fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2200      	movs	r2, #0
 80114ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 f819 	bl	8011526 <UART_WaitOnFlagUntilTimeout>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d001      	beq.n	80114fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80114fa:	2303      	movs	r3, #3
 80114fc:	e00f      	b.n	801151e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2220      	movs	r2, #32
 8011502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2220      	movs	r2, #32
 801150a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2200      	movs	r2, #0
 8011512:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2200      	movs	r2, #0
 8011518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}

08011526 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011526:	b580      	push	{r7, lr}
 8011528:	b084      	sub	sp, #16
 801152a:	af00      	add	r7, sp, #0
 801152c:	60f8      	str	r0, [r7, #12]
 801152e:	60b9      	str	r1, [r7, #8]
 8011530:	603b      	str	r3, [r7, #0]
 8011532:	4613      	mov	r3, r2
 8011534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011536:	e062      	b.n	80115fe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801153e:	d05e      	beq.n	80115fe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011540:	f7f2 fea4 	bl	800428c <HAL_GetTick>
 8011544:	4602      	mov	r2, r0
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	69ba      	ldr	r2, [r7, #24]
 801154c:	429a      	cmp	r2, r3
 801154e:	d302      	bcc.n	8011556 <UART_WaitOnFlagUntilTimeout+0x30>
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d11d      	bne.n	8011592 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011564:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	689a      	ldr	r2, [r3, #8]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f022 0201 	bic.w	r2, r2, #1
 8011574:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	2220      	movs	r2, #32
 801157a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2220      	movs	r2, #32
 8011582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2200      	movs	r2, #0
 801158a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801158e:	2303      	movs	r3, #3
 8011590:	e045      	b.n	801161e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f003 0304 	and.w	r3, r3, #4
 801159c:	2b00      	cmp	r3, #0
 801159e:	d02e      	beq.n	80115fe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	69db      	ldr	r3, [r3, #28]
 80115a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80115aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80115ae:	d126      	bne.n	80115fe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80115b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80115c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	689a      	ldr	r2, [r3, #8]
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f022 0201 	bic.w	r2, r2, #1
 80115d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2220      	movs	r2, #32
 80115de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2220      	movs	r2, #32
 80115e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2220      	movs	r2, #32
 80115ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80115fa:	2303      	movs	r3, #3
 80115fc:	e00f      	b.n	801161e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	69da      	ldr	r2, [r3, #28]
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	4013      	ands	r3, r2
 8011608:	68ba      	ldr	r2, [r7, #8]
 801160a:	429a      	cmp	r2, r3
 801160c:	bf0c      	ite	eq
 801160e:	2301      	moveq	r3, #1
 8011610:	2300      	movne	r3, #0
 8011612:	b2db      	uxtb	r3, r3
 8011614:	461a      	mov	r2, r3
 8011616:	79fb      	ldrb	r3, [r7, #7]
 8011618:	429a      	cmp	r2, r3
 801161a:	d08d      	beq.n	8011538 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801161c:	2300      	movs	r3, #0
}
 801161e:	4618      	mov	r0, r3
 8011620:	3710      	adds	r7, #16
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}

08011626 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011626:	b480      	push	{r7}
 8011628:	b085      	sub	sp, #20
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011634:	2b01      	cmp	r3, #1
 8011636:	d101      	bne.n	801163c <HAL_UARTEx_DisableFifoMode+0x16>
 8011638:	2302      	movs	r3, #2
 801163a:	e027      	b.n	801168c <HAL_UARTEx_DisableFifoMode+0x66>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2201      	movs	r2, #1
 8011640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2224      	movs	r2, #36	; 0x24
 8011648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f022 0201 	bic.w	r2, r2, #1
 8011662:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801166a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2200      	movs	r2, #0
 8011670:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	68fa      	ldr	r2, [r7, #12]
 8011678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2220      	movs	r2, #32
 801167e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801168a:	2300      	movs	r3, #0
}
 801168c:	4618      	mov	r0, r3
 801168e:	3714      	adds	r7, #20
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d101      	bne.n	80116b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80116ac:	2302      	movs	r3, #2
 80116ae:	e02d      	b.n	801170c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2201      	movs	r2, #1
 80116b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2224      	movs	r2, #36	; 0x24
 80116bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f022 0201 	bic.w	r2, r2, #1
 80116d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	689b      	ldr	r3, [r3, #8]
 80116de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	683a      	ldr	r2, [r7, #0]
 80116e8:	430a      	orrs	r2, r1
 80116ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f000 f84f 	bl	8011790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	68fa      	ldr	r2, [r7, #12]
 80116f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2220      	movs	r2, #32
 80116fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2200      	movs	r2, #0
 8011706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011724:	2b01      	cmp	r3, #1
 8011726:	d101      	bne.n	801172c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011728:	2302      	movs	r3, #2
 801172a:	e02d      	b.n	8011788 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2201      	movs	r2, #1
 8011730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2224      	movs	r2, #36	; 0x24
 8011738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f022 0201 	bic.w	r2, r2, #1
 8011752:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	689b      	ldr	r3, [r3, #8]
 801175a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	683a      	ldr	r2, [r7, #0]
 8011764:	430a      	orrs	r2, r1
 8011766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f000 f811 	bl	8011790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2220      	movs	r2, #32
 801177a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3710      	adds	r7, #16
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801179c:	2b00      	cmp	r3, #0
 801179e:	d108      	bne.n	80117b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2201      	movs	r2, #1
 80117a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2201      	movs	r2, #1
 80117ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80117b0:	e031      	b.n	8011816 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80117b2:	2310      	movs	r3, #16
 80117b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80117b6:	2310      	movs	r3, #16
 80117b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	689b      	ldr	r3, [r3, #8]
 80117c0:	0e5b      	lsrs	r3, r3, #25
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	f003 0307 	and.w	r3, r3, #7
 80117c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	0f5b      	lsrs	r3, r3, #29
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	f003 0307 	and.w	r3, r3, #7
 80117d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80117da:	7bbb      	ldrb	r3, [r7, #14]
 80117dc:	7b3a      	ldrb	r2, [r7, #12]
 80117de:	4911      	ldr	r1, [pc, #68]	; (8011824 <UARTEx_SetNbDataToProcess+0x94>)
 80117e0:	5c8a      	ldrb	r2, [r1, r2]
 80117e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80117e6:	7b3a      	ldrb	r2, [r7, #12]
 80117e8:	490f      	ldr	r1, [pc, #60]	; (8011828 <UARTEx_SetNbDataToProcess+0x98>)
 80117ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80117ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80117f0:	b29a      	uxth	r2, r3
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80117f8:	7bfb      	ldrb	r3, [r7, #15]
 80117fa:	7b7a      	ldrb	r2, [r7, #13]
 80117fc:	4909      	ldr	r1, [pc, #36]	; (8011824 <UARTEx_SetNbDataToProcess+0x94>)
 80117fe:	5c8a      	ldrb	r2, [r1, r2]
 8011800:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011804:	7b7a      	ldrb	r2, [r7, #13]
 8011806:	4908      	ldr	r1, [pc, #32]	; (8011828 <UARTEx_SetNbDataToProcess+0x98>)
 8011808:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801180a:	fb93 f3f2 	sdiv	r3, r3, r2
 801180e:	b29a      	uxth	r2, r3
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011816:	bf00      	nop
 8011818:	3714      	adds	r7, #20
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	0802822c 	.word	0x0802822c
 8011828:	08028234 	.word	0x08028234

0801182c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 801182c:	b480      	push	{r7}
 801182e:	b087      	sub	sp, #28
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011840:	683a      	ldr	r2, [r7, #0]
 8011842:	6812      	ldr	r2, [r2, #0]
 8011844:	f023 0101 	bic.w	r1, r3, #1
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	2b08      	cmp	r3, #8
 8011854:	d102      	bne.n	801185c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8011856:	2340      	movs	r3, #64	; 0x40
 8011858:	617b      	str	r3, [r7, #20]
 801185a:	e001      	b.n	8011860 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 801185c:	2300      	movs	r3, #0
 801185e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 801186c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8011872:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8011878:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 801187e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8011884:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 801188a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8011890:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8011896:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 801189c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80118a2:	4313      	orrs	r3, r2
 80118a4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118aa:	693a      	ldr	r2, [r7, #16]
 80118ac:	4313      	orrs	r3, r2
 80118ae:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b4:	693a      	ldr	r2, [r7, #16]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118be:	693a      	ldr	r2, [r7, #16]
 80118c0:	4313      	orrs	r3, r2
 80118c2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80118c4:	4b20      	ldr	r3, [pc, #128]	; (8011948 <FMC_NORSRAM_Init+0x11c>)
 80118c6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118ce:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80118d6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80118de:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	43db      	mvns	r3, r3
 80118ee:	ea02 0103 	and.w	r1, r2, r3
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	4319      	orrs	r1, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011908:	d10c      	bne.n	8011924 <FMC_NORSRAM_Init+0xf8>
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d008      	beq.n	8011924 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801191e:	431a      	orrs	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d006      	beq.n	801193a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011934:	431a      	orrs	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	371c      	adds	r7, #28
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr
 8011948:	0008fb7f 	.word	0x0008fb7f

0801194c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801194c:	b480      	push	{r7}
 801194e:	b087      	sub	sp, #28
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	1c5a      	adds	r2, r3, #1
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011962:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	011b      	lsls	r3, r3, #4
 8011970:	431a      	orrs	r2, r3
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	689b      	ldr	r3, [r3, #8]
 8011976:	021b      	lsls	r3, r3, #8
 8011978:	431a      	orrs	r2, r3
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	041b      	lsls	r3, r3, #16
 8011980:	431a      	orrs	r2, r3
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	3b01      	subs	r3, #1
 8011988:	051b      	lsls	r3, r3, #20
 801198a:	431a      	orrs	r2, r3
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	695b      	ldr	r3, [r3, #20]
 8011990:	3b02      	subs	r3, #2
 8011992:	061b      	lsls	r3, r3, #24
 8011994:	431a      	orrs	r2, r3
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	699b      	ldr	r3, [r3, #24]
 801199a:	4313      	orrs	r3, r2
 801199c:	687a      	ldr	r2, [r7, #4]
 801199e:	3201      	adds	r2, #1
 80119a0:	4319      	orrs	r1, r3
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80119b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119b4:	d113      	bne.n	80119de <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80119be:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	691b      	ldr	r3, [r3, #16]
 80119c4:	3b01      	subs	r3, #1
 80119c6:	051b      	lsls	r3, r3, #20
 80119c8:	697a      	ldr	r2, [r7, #20]
 80119ca:	4313      	orrs	r3, r2
 80119cc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	431a      	orrs	r2, r3
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80119de:	2300      	movs	r3, #0
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	371c      	adds	r7, #28
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr

080119ec <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b085      	sub	sp, #20
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	607a      	str	r2, [r7, #4]
 80119f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a00:	d11d      	bne.n	8011a3e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011a0a:	4b13      	ldr	r3, [pc, #76]	; (8011a58 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8011a0c:	4013      	ands	r3, r2
 8011a0e:	68ba      	ldr	r2, [r7, #8]
 8011a10:	6811      	ldr	r1, [r2, #0]
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	6852      	ldr	r2, [r2, #4]
 8011a16:	0112      	lsls	r2, r2, #4
 8011a18:	4311      	orrs	r1, r2
 8011a1a:	68ba      	ldr	r2, [r7, #8]
 8011a1c:	6892      	ldr	r2, [r2, #8]
 8011a1e:	0212      	lsls	r2, r2, #8
 8011a20:	4311      	orrs	r1, r2
 8011a22:	68ba      	ldr	r2, [r7, #8]
 8011a24:	6992      	ldr	r2, [r2, #24]
 8011a26:	4311      	orrs	r1, r2
 8011a28:	68ba      	ldr	r2, [r7, #8]
 8011a2a:	68d2      	ldr	r2, [r2, #12]
 8011a2c:	0412      	lsls	r2, r2, #16
 8011a2e:	430a      	orrs	r2, r1
 8011a30:	ea43 0102 	orr.w	r1, r3, r2
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011a3c:	e005      	b.n	8011a4a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8011a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8011a4a:	2300      	movs	r3, #0
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3714      	adds	r7, #20
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr
 8011a58:	cff00000 	.word	0xcff00000

08011a5c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b084      	sub	sp, #16
 8011a60:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8011a62:	4b8d      	ldr	r3, [pc, #564]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011a64:	22c0      	movs	r2, #192	; 0xc0
 8011a66:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8011a68:	4b8b      	ldr	r3, [pc, #556]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011a6a:	22a8      	movs	r2, #168	; 0xa8
 8011a6c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8011a6e:	4b8a      	ldr	r3, [pc, #552]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011a70:	2201      	movs	r2, #1
 8011a72:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8011a74:	4b88      	ldr	r3, [pc, #544]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011a76:	2201      	movs	r2, #1
 8011a78:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8011a7a:	4b88      	ldr	r3, [pc, #544]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011a7c:	22ff      	movs	r2, #255	; 0xff
 8011a7e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8011a80:	4b86      	ldr	r3, [pc, #536]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011a82:	22ff      	movs	r2, #255	; 0xff
 8011a84:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8011a86:	4b85      	ldr	r3, [pc, #532]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011a88:	22ff      	movs	r2, #255	; 0xff
 8011a8a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8011a8c:	4b83      	ldr	r3, [pc, #524]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011a8e:	2200      	movs	r2, #0
 8011a90:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8011a92:	4b83      	ldr	r3, [pc, #524]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8011a98:	4b81      	ldr	r3, [pc, #516]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8011a9e:	4b80      	ldr	r3, [pc, #512]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8011aa4:	4b7e      	ldr	r3, [pc, #504]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8011aaa:	f002 fc5d 	bl	8014368 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8011aae:	4b7a      	ldr	r3, [pc, #488]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011ab0:	781b      	ldrb	r3, [r3, #0]
 8011ab2:	061a      	lsls	r2, r3, #24
 8011ab4:	4b78      	ldr	r3, [pc, #480]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011ab6:	785b      	ldrb	r3, [r3, #1]
 8011ab8:	041b      	lsls	r3, r3, #16
 8011aba:	431a      	orrs	r2, r3
 8011abc:	4b76      	ldr	r3, [pc, #472]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011abe:	789b      	ldrb	r3, [r3, #2]
 8011ac0:	021b      	lsls	r3, r3, #8
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	4a74      	ldr	r2, [pc, #464]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011ac6:	78d2      	ldrb	r2, [r2, #3]
 8011ac8:	4313      	orrs	r3, r2
 8011aca:	061a      	lsls	r2, r3, #24
 8011acc:	4b72      	ldr	r3, [pc, #456]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	0619      	lsls	r1, r3, #24
 8011ad2:	4b71      	ldr	r3, [pc, #452]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011ad4:	785b      	ldrb	r3, [r3, #1]
 8011ad6:	041b      	lsls	r3, r3, #16
 8011ad8:	4319      	orrs	r1, r3
 8011ada:	4b6f      	ldr	r3, [pc, #444]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011adc:	789b      	ldrb	r3, [r3, #2]
 8011ade:	021b      	lsls	r3, r3, #8
 8011ae0:	430b      	orrs	r3, r1
 8011ae2:	496d      	ldr	r1, [pc, #436]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011ae4:	78c9      	ldrb	r1, [r1, #3]
 8011ae6:	430b      	orrs	r3, r1
 8011ae8:	021b      	lsls	r3, r3, #8
 8011aea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011aee:	431a      	orrs	r2, r3
 8011af0:	4b69      	ldr	r3, [pc, #420]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	0619      	lsls	r1, r3, #24
 8011af6:	4b68      	ldr	r3, [pc, #416]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011af8:	785b      	ldrb	r3, [r3, #1]
 8011afa:	041b      	lsls	r3, r3, #16
 8011afc:	4319      	orrs	r1, r3
 8011afe:	4b66      	ldr	r3, [pc, #408]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011b00:	789b      	ldrb	r3, [r3, #2]
 8011b02:	021b      	lsls	r3, r3, #8
 8011b04:	430b      	orrs	r3, r1
 8011b06:	4964      	ldr	r1, [pc, #400]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011b08:	78c9      	ldrb	r1, [r1, #3]
 8011b0a:	430b      	orrs	r3, r1
 8011b0c:	0a1b      	lsrs	r3, r3, #8
 8011b0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011b12:	431a      	orrs	r2, r3
 8011b14:	4b60      	ldr	r3, [pc, #384]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	0619      	lsls	r1, r3, #24
 8011b1a:	4b5f      	ldr	r3, [pc, #380]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011b1c:	785b      	ldrb	r3, [r3, #1]
 8011b1e:	041b      	lsls	r3, r3, #16
 8011b20:	4319      	orrs	r1, r3
 8011b22:	4b5d      	ldr	r3, [pc, #372]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011b24:	789b      	ldrb	r3, [r3, #2]
 8011b26:	021b      	lsls	r3, r3, #8
 8011b28:	430b      	orrs	r3, r1
 8011b2a:	495b      	ldr	r1, [pc, #364]	; (8011c98 <MX_LWIP_Init+0x23c>)
 8011b2c:	78c9      	ldrb	r1, [r1, #3]
 8011b2e:	430b      	orrs	r3, r1
 8011b30:	0e1b      	lsrs	r3, r3, #24
 8011b32:	4313      	orrs	r3, r2
 8011b34:	4a5b      	ldr	r2, [pc, #364]	; (8011ca4 <MX_LWIP_Init+0x248>)
 8011b36:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8011b38:	4b58      	ldr	r3, [pc, #352]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	061a      	lsls	r2, r3, #24
 8011b3e:	4b57      	ldr	r3, [pc, #348]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b40:	785b      	ldrb	r3, [r3, #1]
 8011b42:	041b      	lsls	r3, r3, #16
 8011b44:	431a      	orrs	r2, r3
 8011b46:	4b55      	ldr	r3, [pc, #340]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b48:	789b      	ldrb	r3, [r3, #2]
 8011b4a:	021b      	lsls	r3, r3, #8
 8011b4c:	4313      	orrs	r3, r2
 8011b4e:	4a53      	ldr	r2, [pc, #332]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b50:	78d2      	ldrb	r2, [r2, #3]
 8011b52:	4313      	orrs	r3, r2
 8011b54:	061a      	lsls	r2, r3, #24
 8011b56:	4b51      	ldr	r3, [pc, #324]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	0619      	lsls	r1, r3, #24
 8011b5c:	4b4f      	ldr	r3, [pc, #316]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b5e:	785b      	ldrb	r3, [r3, #1]
 8011b60:	041b      	lsls	r3, r3, #16
 8011b62:	4319      	orrs	r1, r3
 8011b64:	4b4d      	ldr	r3, [pc, #308]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b66:	789b      	ldrb	r3, [r3, #2]
 8011b68:	021b      	lsls	r3, r3, #8
 8011b6a:	430b      	orrs	r3, r1
 8011b6c:	494b      	ldr	r1, [pc, #300]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b6e:	78c9      	ldrb	r1, [r1, #3]
 8011b70:	430b      	orrs	r3, r1
 8011b72:	021b      	lsls	r3, r3, #8
 8011b74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011b78:	431a      	orrs	r2, r3
 8011b7a:	4b48      	ldr	r3, [pc, #288]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	0619      	lsls	r1, r3, #24
 8011b80:	4b46      	ldr	r3, [pc, #280]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b82:	785b      	ldrb	r3, [r3, #1]
 8011b84:	041b      	lsls	r3, r3, #16
 8011b86:	4319      	orrs	r1, r3
 8011b88:	4b44      	ldr	r3, [pc, #272]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b8a:	789b      	ldrb	r3, [r3, #2]
 8011b8c:	021b      	lsls	r3, r3, #8
 8011b8e:	430b      	orrs	r3, r1
 8011b90:	4942      	ldr	r1, [pc, #264]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011b92:	78c9      	ldrb	r1, [r1, #3]
 8011b94:	430b      	orrs	r3, r1
 8011b96:	0a1b      	lsrs	r3, r3, #8
 8011b98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011b9c:	431a      	orrs	r2, r3
 8011b9e:	4b3f      	ldr	r3, [pc, #252]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	0619      	lsls	r1, r3, #24
 8011ba4:	4b3d      	ldr	r3, [pc, #244]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011ba6:	785b      	ldrb	r3, [r3, #1]
 8011ba8:	041b      	lsls	r3, r3, #16
 8011baa:	4319      	orrs	r1, r3
 8011bac:	4b3b      	ldr	r3, [pc, #236]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011bae:	789b      	ldrb	r3, [r3, #2]
 8011bb0:	021b      	lsls	r3, r3, #8
 8011bb2:	430b      	orrs	r3, r1
 8011bb4:	4939      	ldr	r1, [pc, #228]	; (8011c9c <MX_LWIP_Init+0x240>)
 8011bb6:	78c9      	ldrb	r1, [r1, #3]
 8011bb8:	430b      	orrs	r3, r1
 8011bba:	0e1b      	lsrs	r3, r3, #24
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	4a3a      	ldr	r2, [pc, #232]	; (8011ca8 <MX_LWIP_Init+0x24c>)
 8011bc0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8011bc2:	4b37      	ldr	r3, [pc, #220]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	061a      	lsls	r2, r3, #24
 8011bc8:	4b35      	ldr	r3, [pc, #212]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011bca:	785b      	ldrb	r3, [r3, #1]
 8011bcc:	041b      	lsls	r3, r3, #16
 8011bce:	431a      	orrs	r2, r3
 8011bd0:	4b33      	ldr	r3, [pc, #204]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011bd2:	789b      	ldrb	r3, [r3, #2]
 8011bd4:	021b      	lsls	r3, r3, #8
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	4a31      	ldr	r2, [pc, #196]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011bda:	78d2      	ldrb	r2, [r2, #3]
 8011bdc:	4313      	orrs	r3, r2
 8011bde:	061a      	lsls	r2, r3, #24
 8011be0:	4b2f      	ldr	r3, [pc, #188]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	0619      	lsls	r1, r3, #24
 8011be6:	4b2e      	ldr	r3, [pc, #184]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011be8:	785b      	ldrb	r3, [r3, #1]
 8011bea:	041b      	lsls	r3, r3, #16
 8011bec:	4319      	orrs	r1, r3
 8011bee:	4b2c      	ldr	r3, [pc, #176]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011bf0:	789b      	ldrb	r3, [r3, #2]
 8011bf2:	021b      	lsls	r3, r3, #8
 8011bf4:	430b      	orrs	r3, r1
 8011bf6:	492a      	ldr	r1, [pc, #168]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011bf8:	78c9      	ldrb	r1, [r1, #3]
 8011bfa:	430b      	orrs	r3, r1
 8011bfc:	021b      	lsls	r3, r3, #8
 8011bfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011c02:	431a      	orrs	r2, r3
 8011c04:	4b26      	ldr	r3, [pc, #152]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	0619      	lsls	r1, r3, #24
 8011c0a:	4b25      	ldr	r3, [pc, #148]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011c0c:	785b      	ldrb	r3, [r3, #1]
 8011c0e:	041b      	lsls	r3, r3, #16
 8011c10:	4319      	orrs	r1, r3
 8011c12:	4b23      	ldr	r3, [pc, #140]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011c14:	789b      	ldrb	r3, [r3, #2]
 8011c16:	021b      	lsls	r3, r3, #8
 8011c18:	430b      	orrs	r3, r1
 8011c1a:	4921      	ldr	r1, [pc, #132]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011c1c:	78c9      	ldrb	r1, [r1, #3]
 8011c1e:	430b      	orrs	r3, r1
 8011c20:	0a1b      	lsrs	r3, r3, #8
 8011c22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011c26:	431a      	orrs	r2, r3
 8011c28:	4b1d      	ldr	r3, [pc, #116]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	0619      	lsls	r1, r3, #24
 8011c2e:	4b1c      	ldr	r3, [pc, #112]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011c30:	785b      	ldrb	r3, [r3, #1]
 8011c32:	041b      	lsls	r3, r3, #16
 8011c34:	4319      	orrs	r1, r3
 8011c36:	4b1a      	ldr	r3, [pc, #104]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011c38:	789b      	ldrb	r3, [r3, #2]
 8011c3a:	021b      	lsls	r3, r3, #8
 8011c3c:	430b      	orrs	r3, r1
 8011c3e:	4918      	ldr	r1, [pc, #96]	; (8011ca0 <MX_LWIP_Init+0x244>)
 8011c40:	78c9      	ldrb	r1, [r1, #3]
 8011c42:	430b      	orrs	r3, r1
 8011c44:	0e1b      	lsrs	r3, r3, #24
 8011c46:	4313      	orrs	r3, r2
 8011c48:	4a18      	ldr	r2, [pc, #96]	; (8011cac <MX_LWIP_Init+0x250>)
 8011c4a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8011c4c:	4b18      	ldr	r3, [pc, #96]	; (8011cb0 <MX_LWIP_Init+0x254>)
 8011c4e:	9302      	str	r3, [sp, #8]
 8011c50:	4b18      	ldr	r3, [pc, #96]	; (8011cb4 <MX_LWIP_Init+0x258>)
 8011c52:	9301      	str	r3, [sp, #4]
 8011c54:	2300      	movs	r3, #0
 8011c56:	9300      	str	r3, [sp, #0]
 8011c58:	4b14      	ldr	r3, [pc, #80]	; (8011cac <MX_LWIP_Init+0x250>)
 8011c5a:	4a13      	ldr	r2, [pc, #76]	; (8011ca8 <MX_LWIP_Init+0x24c>)
 8011c5c:	4911      	ldr	r1, [pc, #68]	; (8011ca4 <MX_LWIP_Init+0x248>)
 8011c5e:	4816      	ldr	r0, [pc, #88]	; (8011cb8 <MX_LWIP_Init+0x25c>)
 8011c60:	f004 f97a 	bl	8015f58 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011c64:	4814      	ldr	r0, [pc, #80]	; (8011cb8 <MX_LWIP_Init+0x25c>)
 8011c66:	f004 fb29 	bl	80162bc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8011c6a:	4b13      	ldr	r3, [pc, #76]	; (8011cb8 <MX_LWIP_Init+0x25c>)
 8011c6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c70:	089b      	lsrs	r3, r3, #2
 8011c72:	f003 0301 	and.w	r3, r3, #1
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d003      	beq.n	8011c84 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8011c7c:	480e      	ldr	r0, [pc, #56]	; (8011cb8 <MX_LWIP_Init+0x25c>)
 8011c7e:	f004 fb2d 	bl	80162dc <netif_set_up>
 8011c82:	e002      	b.n	8011c8a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8011c84:	480c      	ldr	r0, [pc, #48]	; (8011cb8 <MX_LWIP_Init+0x25c>)
 8011c86:	f004 fb95 	bl	80163b4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8011c8a:	490c      	ldr	r1, [pc, #48]	; (8011cbc <MX_LWIP_Init+0x260>)
 8011c8c:	480a      	ldr	r0, [pc, #40]	; (8011cb8 <MX_LWIP_Init+0x25c>)
 8011c8e:	f004 fc27 	bl	80164e0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8011c92:	bf00      	nop
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	24005790 	.word	0x24005790
 8011c9c:	2400578c 	.word	0x2400578c
 8011ca0:	2400574c 	.word	0x2400574c
 8011ca4:	24005784 	.word	0x24005784
 8011ca8:	24005794 	.word	0x24005794
 8011cac:	24005798 	.word	0x24005798
 8011cb0:	08013cdd 	.word	0x08013cdd
 8011cb4:	08012239 	.word	0x08012239
 8011cb8:	24005750 	.word	0x24005750
 8011cbc:	08011d11 	.word	0x08011d11

08011cc0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8011cc8:	f7f2 fae0 	bl	800428c <HAL_GetTick>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	4b08      	ldr	r3, [pc, #32]	; (8011cf0 <Ethernet_Link_Periodic_Handle+0x30>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	2b63      	cmp	r3, #99	; 0x63
 8011cd6:	d907      	bls.n	8011ce8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8011cd8:	f7f2 fad8 	bl	800428c <HAL_GetTick>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	4a04      	ldr	r2, [pc, #16]	; (8011cf0 <Ethernet_Link_Periodic_Handle+0x30>)
 8011ce0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 fb3c 	bl	8012360 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8011ce8:	bf00      	nop
 8011cea:	3708      	adds	r7, #8
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	24005788 	.word	0x24005788

08011cf4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8011cf8:	4804      	ldr	r0, [pc, #16]	; (8011d0c <MX_LWIP_Process+0x18>)
 8011cfa:	f000 fa7d 	bl	80121f8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8011cfe:	f00b fd0d 	bl	801d71c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8011d02:	4802      	ldr	r0, [pc, #8]	; (8011d0c <MX_LWIP_Process+0x18>)
 8011d04:	f7ff ffdc 	bl	8011cc0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8011d08:	bf00      	nop
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	24005750 	.word	0x24005750

08011d10 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8011d18:	bf00      	nop
 8011d1a:	370c      	adds	r7, #12
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b08e      	sub	sp, #56	; 0x38
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011d30:	2200      	movs	r2, #0
 8011d32:	601a      	str	r2, [r3, #0]
 8011d34:	605a      	str	r2, [r3, #4]
 8011d36:	609a      	str	r2, [r3, #8]
 8011d38:	60da      	str	r2, [r3, #12]
 8011d3a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4a4d      	ldr	r2, [pc, #308]	; (8011e78 <HAL_ETH_MspInit+0x154>)
 8011d42:	4293      	cmp	r3, r2
 8011d44:	f040 8093 	bne.w	8011e6e <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8011d48:	4b4c      	ldr	r3, [pc, #304]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d4e:	4a4b      	ldr	r2, [pc, #300]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d58:	4b48      	ldr	r3, [pc, #288]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d62:	623b      	str	r3, [r7, #32]
 8011d64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8011d66:	4b45      	ldr	r3, [pc, #276]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d6c:	4a43      	ldr	r2, [pc, #268]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d76:	4b41      	ldr	r3, [pc, #260]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011d80:	61fb      	str	r3, [r7, #28]
 8011d82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8011d84:	4b3d      	ldr	r3, [pc, #244]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d8a:	4a3c      	ldr	r2, [pc, #240]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d94:	4b39      	ldr	r3, [pc, #228]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d9e:	61bb      	str	r3, [r7, #24]
 8011da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011da2:	4b36      	ldr	r3, [pc, #216]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011da8:	4a34      	ldr	r2, [pc, #208]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011db2:	4b32      	ldr	r3, [pc, #200]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dbc:	617b      	str	r3, [r7, #20]
 8011dbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011dc0:	4b2e      	ldr	r3, [pc, #184]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011dc6:	4a2d      	ldr	r2, [pc, #180]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011dc8:	f043 0304 	orr.w	r3, r3, #4
 8011dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011dd0:	4b2a      	ldr	r3, [pc, #168]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011dd6:	f003 0304 	and.w	r3, r3, #4
 8011dda:	613b      	str	r3, [r7, #16]
 8011ddc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011dde:	4b27      	ldr	r3, [pc, #156]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011de4:	4a25      	ldr	r2, [pc, #148]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011de6:	f043 0301 	orr.w	r3, r3, #1
 8011dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011dee:	4b23      	ldr	r3, [pc, #140]	; (8011e7c <HAL_ETH_MspInit+0x158>)
 8011df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011df4:	f003 0301 	and.w	r3, r3, #1
 8011df8:	60fb      	str	r3, [r7, #12]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8011dfc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8011e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e02:	2302      	movs	r3, #2
 8011e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e06:	2300      	movs	r3, #0
 8011e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e0a:	2303      	movs	r3, #3
 8011e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011e0e:	230b      	movs	r3, #11
 8011e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e16:	4619      	mov	r1, r3
 8011e18:	4819      	ldr	r0, [pc, #100]	; (8011e80 <HAL_ETH_MspInit+0x15c>)
 8011e1a:	f7f8 f887 	bl	8009f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8011e1e:	2332      	movs	r3, #50	; 0x32
 8011e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e22:	2302      	movs	r3, #2
 8011e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e26:	2300      	movs	r3, #0
 8011e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e2a:	2303      	movs	r3, #3
 8011e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011e2e:	230b      	movs	r3, #11
 8011e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e36:	4619      	mov	r1, r3
 8011e38:	4812      	ldr	r0, [pc, #72]	; (8011e84 <HAL_ETH_MspInit+0x160>)
 8011e3a:	f7f8 f877 	bl	8009f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8011e3e:	2386      	movs	r3, #134	; 0x86
 8011e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e42:	2302      	movs	r3, #2
 8011e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e46:	2300      	movs	r3, #0
 8011e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011e4e:	230b      	movs	r3, #11
 8011e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e56:	4619      	mov	r1, r3
 8011e58:	480b      	ldr	r0, [pc, #44]	; (8011e88 <HAL_ETH_MspInit+0x164>)
 8011e5a:	f7f8 f867 	bl	8009f2c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8011e5e:	2200      	movs	r2, #0
 8011e60:	2101      	movs	r1, #1
 8011e62:	203d      	movs	r0, #61	; 0x3d
 8011e64:	f7f3 ff57 	bl	8005d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8011e68:	203d      	movs	r0, #61	; 0x3d
 8011e6a:	f7f3 ff6e 	bl	8005d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011e6e:	bf00      	nop
 8011e70:	3738      	adds	r7, #56	; 0x38
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	40028000 	.word	0x40028000
 8011e7c:	58024400 	.word	0x58024400
 8011e80:	58021800 	.word	0x58021800
 8011e84:	58020800 	.word	0x58020800
 8011e88:	58020000 	.word	0x58020000

08011e8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b086      	sub	sp, #24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8011e94:	2300      	movs	r3, #0
 8011e96:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011e9c:	4b4a      	ldr	r3, [pc, #296]	; (8011fc8 <low_level_init+0x13c>)
 8011e9e:	4a4b      	ldr	r2, [pc, #300]	; (8011fcc <low_level_init+0x140>)
 8011ea0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8011ea6:	2380      	movs	r3, #128	; 0x80
 8011ea8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8011eaa:	23e1      	movs	r3, #225	; 0xe1
 8011eac:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8011eba:	4a43      	ldr	r2, [pc, #268]	; (8011fc8 <low_level_init+0x13c>)
 8011ebc:	f107 030c 	add.w	r3, r7, #12
 8011ec0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8011ec2:	4b41      	ldr	r3, [pc, #260]	; (8011fc8 <low_level_init+0x13c>)
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8011ec8:	4b3f      	ldr	r3, [pc, #252]	; (8011fc8 <low_level_init+0x13c>)
 8011eca:	4a41      	ldr	r2, [pc, #260]	; (8011fd0 <low_level_init+0x144>)
 8011ecc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8011ece:	4b3e      	ldr	r3, [pc, #248]	; (8011fc8 <low_level_init+0x13c>)
 8011ed0:	4a40      	ldr	r2, [pc, #256]	; (8011fd4 <low_level_init+0x148>)
 8011ed2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8011ed4:	4b3c      	ldr	r3, [pc, #240]	; (8011fc8 <low_level_init+0x13c>)
 8011ed6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011eda:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011edc:	483a      	ldr	r0, [pc, #232]	; (8011fc8 <low_level_init+0x13c>)
 8011ede:	f7f6 f9ad 	bl	800823c <HAL_ETH_Init>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8011ee6:	2234      	movs	r2, #52	; 0x34
 8011ee8:	2100      	movs	r1, #0
 8011eea:	483b      	ldr	r0, [pc, #236]	; (8011fd8 <low_level_init+0x14c>)
 8011eec:	f00d f990 	bl	801f210 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8011ef0:	4b39      	ldr	r3, [pc, #228]	; (8011fd8 <low_level_init+0x14c>)
 8011ef2:	2221      	movs	r2, #33	; 0x21
 8011ef4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8011ef6:	4b38      	ldr	r3, [pc, #224]	; (8011fd8 <low_level_init+0x14c>)
 8011ef8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011efc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8011efe:	4b36      	ldr	r3, [pc, #216]	; (8011fd8 <low_level_init+0x14c>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8011f04:	4835      	ldr	r0, [pc, #212]	; (8011fdc <low_level_init+0x150>)
 8011f06:	f003 feef 	bl	8015ce8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2206      	movs	r2, #6
 8011f0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011f12:	4b2d      	ldr	r3, [pc, #180]	; (8011fc8 <low_level_init+0x13c>)
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	781a      	ldrb	r2, [r3, #0]
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011f1e:	4b2a      	ldr	r3, [pc, #168]	; (8011fc8 <low_level_init+0x13c>)
 8011f20:	685b      	ldr	r3, [r3, #4]
 8011f22:	785a      	ldrb	r2, [r3, #1]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011f2a:	4b27      	ldr	r3, [pc, #156]	; (8011fc8 <low_level_init+0x13c>)
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	789a      	ldrb	r2, [r3, #2]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011f36:	4b24      	ldr	r3, [pc, #144]	; (8011fc8 <low_level_init+0x13c>)
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	78da      	ldrb	r2, [r3, #3]
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011f42:	4b21      	ldr	r3, [pc, #132]	; (8011fc8 <low_level_init+0x13c>)
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	791a      	ldrb	r2, [r3, #4]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011f4e:	4b1e      	ldr	r3, [pc, #120]	; (8011fc8 <low_level_init+0x13c>)
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	795a      	ldrb	r2, [r3, #5]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011f60:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f68:	f043 030a 	orr.w	r3, r3, #10
 8011f6c:	b2da      	uxtb	r2, r3
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8011f74:	2300      	movs	r3, #0
 8011f76:	617b      	str	r3, [r7, #20]
 8011f78:	e00e      	b.n	8011f98 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011f80:	fb02 f303 	mul.w	r3, r2, r3
 8011f84:	4a16      	ldr	r2, [pc, #88]	; (8011fe0 <low_level_init+0x154>)
 8011f86:	441a      	add	r2, r3
 8011f88:	2300      	movs	r3, #0
 8011f8a:	6979      	ldr	r1, [r7, #20]
 8011f8c:	480e      	ldr	r0, [pc, #56]	; (8011fc8 <low_level_init+0x13c>)
 8011f8e:	f7f6 fa2f 	bl	80083f0 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	3301      	adds	r3, #1
 8011f96:	617b      	str	r3, [r7, #20]
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	2b03      	cmp	r3, #3
 8011f9c:	d9ed      	bls.n	8011f7a <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8011f9e:	4911      	ldr	r1, [pc, #68]	; (8011fe4 <low_level_init+0x158>)
 8011fa0:	4811      	ldr	r0, [pc, #68]	; (8011fe8 <low_level_init+0x15c>)
 8011fa2:	f7f1 ff8b 	bl	8003ebc <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8011fa6:	4810      	ldr	r0, [pc, #64]	; (8011fe8 <low_level_init+0x15c>)
 8011fa8:	f7f1 ffba 	bl	8003f20 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8011fac:	7cfb      	ldrb	r3, [r7, #19]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d103      	bne.n	8011fba <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f9d4 	bl	8012360 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011fb8:	e001      	b.n	8011fbe <low_level_init+0x132>
    Error_Handler();
 8011fba:	f7f0 fe9d 	bl	8002cf8 <Error_Handler>
}
 8011fbe:	bf00      	nop
 8011fc0:	3718      	adds	r7, #24
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	24005888 	.word	0x24005888
 8011fcc:	40028000 	.word	0x40028000
 8011fd0:	30040060 	.word	0x30040060
 8011fd4:	30040000 	.word	0x30040000
 8011fd8:	24005910 	.word	0x24005910
 8011fdc:	0802823c 	.word	0x0802823c
 8011fe0:	30040200 	.word	0x30040200
 8011fe4:	24000010 	.word	0x24000010
 8011fe8:	24005868 	.word	0x24005868

08011fec <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b092      	sub	sp, #72	; 0x48
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8012000:	f107 030c 	add.w	r3, r7, #12
 8012004:	2230      	movs	r2, #48	; 0x30
 8012006:	2100      	movs	r1, #0
 8012008:	4618      	mov	r0, r3
 801200a:	f00d f901 	bl	801f210 <memset>

  for(q = p; q != NULL; q = q->next)
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	643b      	str	r3, [r7, #64]	; 0x40
 8012012:	e049      	b.n	80120a8 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8012014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012016:	2b03      	cmp	r3, #3
 8012018:	d902      	bls.n	8012020 <low_level_output+0x34>
      return ERR_IF;
 801201a:	f06f 030b 	mvn.w	r3, #11
 801201e:	e056      	b.n	80120ce <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 8012020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012022:	6859      	ldr	r1, [r3, #4]
 8012024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012026:	4613      	mov	r3, r2
 8012028:	005b      	lsls	r3, r3, #1
 801202a:	4413      	add	r3, r2
 801202c:	009b      	lsls	r3, r3, #2
 801202e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012032:	4413      	add	r3, r2
 8012034:	3b3c      	subs	r3, #60	; 0x3c
 8012036:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8012038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801203a:	895b      	ldrh	r3, [r3, #10]
 801203c:	4619      	mov	r1, r3
 801203e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012040:	4613      	mov	r3, r2
 8012042:	005b      	lsls	r3, r3, #1
 8012044:	4413      	add	r3, r2
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801204c:	4413      	add	r3, r2
 801204e:	3b38      	subs	r3, #56	; 0x38
 8012050:	6019      	str	r1, [r3, #0]

    if(i>0)
 8012052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012054:	2b00      	cmp	r3, #0
 8012056:	d012      	beq.n	801207e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8012058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801205a:	1e5a      	subs	r2, r3, #1
 801205c:	f107 000c 	add.w	r0, r7, #12
 8012060:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012062:	460b      	mov	r3, r1
 8012064:	005b      	lsls	r3, r3, #1
 8012066:	440b      	add	r3, r1
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	18c1      	adds	r1, r0, r3
 801206c:	4613      	mov	r3, r2
 801206e:	005b      	lsls	r3, r3, #1
 8012070:	4413      	add	r3, r2
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012078:	4413      	add	r3, r2
 801207a:	3b34      	subs	r3, #52	; 0x34
 801207c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801207e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d10a      	bne.n	801209c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8012086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012088:	4613      	mov	r3, r2
 801208a:	005b      	lsls	r3, r3, #1
 801208c:	4413      	add	r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012094:	4413      	add	r3, r2
 8012096:	3b34      	subs	r3, #52	; 0x34
 8012098:	2200      	movs	r2, #0
 801209a:	601a      	str	r2, [r3, #0]
    }

    i++;
 801209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801209e:	3301      	adds	r3, #1
 80120a0:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80120a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	643b      	str	r3, [r7, #64]	; 0x40
 80120a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d1b2      	bne.n	8012014 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	891b      	ldrh	r3, [r3, #8]
 80120b2:	461a      	mov	r2, r3
 80120b4:	4b08      	ldr	r3, [pc, #32]	; (80120d8 <low_level_output+0xec>)
 80120b6:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80120b8:	4a07      	ldr	r2, [pc, #28]	; (80120d8 <low_level_output+0xec>)
 80120ba:	f107 030c 	add.w	r3, r7, #12
 80120be:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80120c0:	2214      	movs	r2, #20
 80120c2:	4905      	ldr	r1, [pc, #20]	; (80120d8 <low_level_output+0xec>)
 80120c4:	4805      	ldr	r0, [pc, #20]	; (80120dc <low_level_output+0xf0>)
 80120c6:	f7f6 fa80 	bl	80085ca <HAL_ETH_Transmit>

  return errval;
 80120ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3748      	adds	r7, #72	; 0x48
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	24005910 	.word	0x24005910
 80120dc:	24005888 	.word	0x24005888

080120e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b098      	sub	sp, #96	; 0x60
 80120e4:	af02      	add	r7, sp, #8
 80120e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80120e8:	2300      	movs	r3, #0
 80120ea:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 80120ec:	2300      	movs	r3, #0
 80120ee:	60bb      	str	r3, [r7, #8]
 80120f0:	2300      	movs	r3, #0
 80120f2:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80120f4:	f107 030c 	add.w	r3, r7, #12
 80120f8:	2230      	movs	r2, #48	; 0x30
 80120fa:	2100      	movs	r1, #0
 80120fc:	4618      	mov	r0, r3
 80120fe:	f00d f887 	bl	801f210 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8012102:	2300      	movs	r3, #0
 8012104:	657b      	str	r3, [r7, #84]	; 0x54
 8012106:	e015      	b.n	8012134 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8012108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801210a:	1c5a      	adds	r2, r3, #1
 801210c:	f107 010c 	add.w	r1, r7, #12
 8012110:	4613      	mov	r3, r2
 8012112:	005b      	lsls	r3, r3, #1
 8012114:	4413      	add	r3, r2
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	4419      	add	r1, r3
 801211a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801211c:	4613      	mov	r3, r2
 801211e:	005b      	lsls	r3, r3, #1
 8012120:	4413      	add	r3, r2
 8012122:	009b      	lsls	r3, r3, #2
 8012124:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012128:	4413      	add	r3, r2
 801212a:	3b44      	subs	r3, #68	; 0x44
 801212c:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 801212e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012130:	3301      	adds	r3, #1
 8012132:	657b      	str	r3, [r7, #84]	; 0x54
 8012134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012136:	2b02      	cmp	r3, #2
 8012138:	d9e6      	bls.n	8012108 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 801213a:	482b      	ldr	r0, [pc, #172]	; (80121e8 <low_level_input+0x108>)
 801213c:	f7f6 face 	bl	80086dc <HAL_ETH_IsRxDataAvailable>
 8012140:	4603      	mov	r3, r0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d04a      	beq.n	80121dc <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 8012146:	f107 030c 	add.w	r3, r7, #12
 801214a:	4619      	mov	r1, r3
 801214c:	4826      	ldr	r0, [pc, #152]	; (80121e8 <low_level_input+0x108>)
 801214e:	f7f6 fbb5 	bl	80088bc <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8012152:	f107 0308 	add.w	r3, r7, #8
 8012156:	4619      	mov	r1, r3
 8012158:	4823      	ldr	r0, [pc, #140]	; (80121e8 <low_level_input+0x108>)
 801215a:	f7f6 fc4d 	bl	80089f8 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 801215e:	4822      	ldr	r0, [pc, #136]	; (80121e8 <low_level_input+0x108>)
 8012160:	f7f6 fc7d 	bl	8008a5e <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	68ba      	ldr	r2, [r7, #8]
 8012168:	64bb      	str	r3, [r7, #72]	; 0x48
 801216a:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 801216c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801216e:	2b00      	cmp	r3, #0
 8012170:	dd1d      	ble.n	80121ae <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012174:	f003 021f 	and.w	r2, r3, #31
 8012178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801217a:	4413      	add	r3, r2
 801217c:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801217e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012180:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8012182:	f3bf 8f4f 	dsb	sy
}
 8012186:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012188:	4a18      	ldr	r2, [pc, #96]	; (80121ec <low_level_input+0x10c>)
 801218a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801218c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012192:	3320      	adds	r3, #32
 8012194:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012198:	3b20      	subs	r3, #32
 801219a:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 801219c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801219e:	2b00      	cmp	r3, #0
 80121a0:	dcf2      	bgt.n	8012188 <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 80121a2:	f3bf 8f4f 	dsb	sy
}
 80121a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80121a8:	f3bf 8f6f 	isb	sy
}
 80121ac:	bf00      	nop
}
 80121ae:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80121b0:	480f      	ldr	r0, [pc, #60]	; (80121f0 <low_level_input+0x110>)
 80121b2:	f003 fe0d 	bl	8015dd0 <memp_malloc_pool>
 80121b6:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 80121b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ba:	4a0e      	ldr	r2, [pc, #56]	; (80121f4 <low_level_input+0x114>)
 80121bc:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	b299      	uxth	r1, r3
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	68ba      	ldr	r2, [r7, #8]
 80121c6:	b292      	uxth	r2, r2
 80121c8:	9201      	str	r2, [sp, #4]
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ce:	2241      	movs	r2, #65	; 0x41
 80121d0:	2000      	movs	r0, #0
 80121d2:	f004 fb4b 	bl	801686c <pbuf_alloced_custom>
 80121d6:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 80121d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121da:	e000      	b.n	80121de <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 80121dc:	2300      	movs	r3, #0
  }
}
 80121de:	4618      	mov	r0, r3
 80121e0:	3758      	adds	r7, #88	; 0x58
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	bf00      	nop
 80121e8:	24005888 	.word	0x24005888
 80121ec:	e000ed00 	.word	0xe000ed00
 80121f0:	0802823c 	.word	0x0802823c
 80121f4:	08012295 	.word	0x08012295

080121f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7ff ff6d 	bl	80120e0 <low_level_input>
 8012206:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d010      	beq.n	8012230 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	691b      	ldr	r3, [r3, #16]
 8012212:	6879      	ldr	r1, [r7, #4]
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	4798      	blx	r3
 8012218:	4603      	mov	r3, r0
 801221a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 801221c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d006      	beq.n	8012232 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f004 fcdb 	bl	8016be0 <pbuf_free>
    p = NULL;
 801222a:	2300      	movs	r3, #0
 801222c:	60fb      	str	r3, [r7, #12]
 801222e:	e000      	b.n	8012232 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8012230:	bf00      	nop
  }

}
 8012232:	3710      	adds	r7, #16
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}

08012238 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d106      	bne.n	8012254 <ethernetif_init+0x1c>
 8012246:	4b0e      	ldr	r3, [pc, #56]	; (8012280 <ethernetif_init+0x48>)
 8012248:	f240 12f3 	movw	r2, #499	; 0x1f3
 801224c:	490d      	ldr	r1, [pc, #52]	; (8012284 <ethernetif_init+0x4c>)
 801224e:	480e      	ldr	r0, [pc, #56]	; (8012288 <ethernetif_init+0x50>)
 8012250:	f00d fed8 	bl	8020004 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2273      	movs	r2, #115	; 0x73
 8012258:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2274      	movs	r2, #116	; 0x74
 8012260:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	4a09      	ldr	r2, [pc, #36]	; (801228c <ethernetif_init+0x54>)
 8012268:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	4a08      	ldr	r2, [pc, #32]	; (8012290 <ethernetif_init+0x58>)
 801226e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f7ff fe0b 	bl	8011e8c <low_level_init>

  return ERR_OK;
 8012276:	2300      	movs	r3, #0
}
 8012278:	4618      	mov	r0, r3
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	08024f28 	.word	0x08024f28
 8012284:	08024f44 	.word	0x08024f44
 8012288:	08024f54 	.word	0x08024f54
 801228c:	080136dd 	.word	0x080136dd
 8012290:	08011fed 	.word	0x08011fed

08012294 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80122a0:	68f9      	ldr	r1, [r7, #12]
 80122a2:	4803      	ldr	r0, [pc, #12]	; (80122b0 <pbuf_free_custom+0x1c>)
 80122a4:	f003 fe02 	bl	8015eac <memp_free_pool>
}
 80122a8:	bf00      	nop
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}
 80122b0:	0802823c 	.word	0x0802823c

080122b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80122b8:	f7f1 ffe8 	bl	800428c <HAL_GetTick>
 80122bc:	4603      	mov	r3, r0
}
 80122be:	4618      	mov	r0, r3
 80122c0:	bd80      	pop	{r7, pc}
	...

080122c4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80122c8:	4802      	ldr	r0, [pc, #8]	; (80122d4 <ETH_PHY_IO_Init+0x10>)
 80122ca:	f7f7 f81d 	bl	8009308 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80122ce:	2300      	movs	r3, #0
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	24005888 	.word	0x24005888

080122d8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80122d8:	b480      	push	{r7}
 80122da:	af00      	add	r7, sp, #0
  return 0;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr

080122e8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	60f8      	str	r0, [r7, #12]
 80122f0:	60b9      	str	r1, [r7, #8]
 80122f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	68ba      	ldr	r2, [r7, #8]
 80122f8:	68f9      	ldr	r1, [r7, #12]
 80122fa:	4807      	ldr	r0, [pc, #28]	; (8012318 <ETH_PHY_IO_ReadReg+0x30>)
 80122fc:	f7f6 fd6e 	bl	8008ddc <HAL_ETH_ReadPHYRegister>
 8012300:	4603      	mov	r3, r0
 8012302:	2b00      	cmp	r3, #0
 8012304:	d002      	beq.n	801230c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8012306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801230a:	e000      	b.n	801230e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	24005888 	.word	0x24005888

0801231c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	68ba      	ldr	r2, [r7, #8]
 801232c:	68f9      	ldr	r1, [r7, #12]
 801232e:	4807      	ldr	r0, [pc, #28]	; (801234c <ETH_PHY_IO_WriteReg+0x30>)
 8012330:	f7f6 fda8 	bl	8008e84 <HAL_ETH_WritePHYRegister>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d002      	beq.n	8012340 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801233a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801233e:	e000      	b.n	8012342 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8012340:	2300      	movs	r3, #0
}
 8012342:	4618      	mov	r0, r3
 8012344:	3710      	adds	r7, #16
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	24005888 	.word	0x24005888

08012350 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8012354:	f7f1 ff9a 	bl	800428c <HAL_GetTick>
 8012358:	4603      	mov	r3, r0
}
 801235a:	4618      	mov	r0, r3
 801235c:	bd80      	pop	{r7, pc}
	...

08012360 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b0a0      	sub	sp, #128	; 0x80
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8012368:	2300      	movs	r3, #0
 801236a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801236c:	2300      	movs	r3, #0
 801236e:	67bb      	str	r3, [r7, #120]	; 0x78
 8012370:	2300      	movs	r3, #0
 8012372:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8012374:	483a      	ldr	r0, [pc, #232]	; (8012460 <ethernet_link_check_state+0x100>)
 8012376:	f7f1 fe7b 	bl	8004070 <LAN8742_GetLinkState>
 801237a:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012382:	089b      	lsrs	r3, r3, #2
 8012384:	f003 0301 	and.w	r3, r3, #1
 8012388:	b2db      	uxtb	r3, r3
 801238a:	2b00      	cmp	r3, #0
 801238c:	d00c      	beq.n	80123a8 <ethernet_link_check_state+0x48>
 801238e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012390:	2b01      	cmp	r3, #1
 8012392:	dc09      	bgt.n	80123a8 <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 8012394:	4833      	ldr	r0, [pc, #204]	; (8012464 <ethernet_link_check_state+0x104>)
 8012396:	f7f6 f8c8 	bl	800852a <HAL_ETH_Stop>
    netif_set_down(netif);
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f004 f80a 	bl	80163b4 <netif_set_down>
    netif_set_link_down(netif);
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f004 f86d 	bl	8016480 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80123a6:	e056      	b.n	8012456 <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123ae:	f003 0304 	and.w	r3, r3, #4
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d14f      	bne.n	8012456 <ethernet_link_check_state+0xf6>
 80123b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	dd4c      	ble.n	8012456 <ethernet_link_check_state+0xf6>
 80123bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80123be:	3b02      	subs	r3, #2
 80123c0:	2b03      	cmp	r3, #3
 80123c2:	d82b      	bhi.n	801241c <ethernet_link_check_state+0xbc>
 80123c4:	a201      	add	r2, pc, #4	; (adr r2, 80123cc <ethernet_link_check_state+0x6c>)
 80123c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ca:	bf00      	nop
 80123cc:	080123dd 	.word	0x080123dd
 80123d0:	080123ef 	.word	0x080123ef
 80123d4:	080123ff 	.word	0x080123ff
 80123d8:	0801240f 	.word	0x0801240f
      duplex = ETH_FULLDUPLEX_MODE;
 80123dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80123e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80123e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80123e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80123e8:	2301      	movs	r3, #1
 80123ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80123ec:	e017      	b.n	801241e <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80123ee:	2300      	movs	r3, #0
 80123f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80123f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80123f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80123f8:	2301      	movs	r3, #1
 80123fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80123fc:	e00f      	b.n	801241e <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 80123fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012402:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8012404:	2300      	movs	r3, #0
 8012406:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8012408:	2301      	movs	r3, #1
 801240a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801240c:	e007      	b.n	801241e <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 801240e:	2300      	movs	r3, #0
 8012410:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8012412:	2300      	movs	r3, #0
 8012414:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8012416:	2301      	movs	r3, #1
 8012418:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801241a:	e000      	b.n	801241e <ethernet_link_check_state+0xbe>
      break;
 801241c:	bf00      	nop
    if(linkchanged)
 801241e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012420:	2b00      	cmp	r3, #0
 8012422:	d018      	beq.n	8012456 <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8012424:	f107 030c 	add.w	r3, r7, #12
 8012428:	4619      	mov	r1, r3
 801242a:	480e      	ldr	r0, [pc, #56]	; (8012464 <ethernet_link_check_state+0x104>)
 801242c:	f7f6 fd7e 	bl	8008f2c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8012430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012432:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8012434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012436:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8012438:	f107 030c 	add.w	r3, r7, #12
 801243c:	4619      	mov	r1, r3
 801243e:	4809      	ldr	r0, [pc, #36]	; (8012464 <ethernet_link_check_state+0x104>)
 8012440:	f7f6 ff48 	bl	80092d4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8012444:	4807      	ldr	r0, [pc, #28]	; (8012464 <ethernet_link_check_state+0x104>)
 8012446:	f7f6 f814 	bl	8008472 <HAL_ETH_Start>
      netif_set_up(netif);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f003 ff46 	bl	80162dc <netif_set_up>
      netif_set_link_up(netif);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f003 ffe1 	bl	8016418 <netif_set_link_up>
}
 8012456:	bf00      	nop
 8012458:	3780      	adds	r7, #128	; 0x80
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	24005868 	.word	0x24005868
 8012464:	24005888 	.word	0x24005888

08012468 <synth_IfftInit>:
 * @brief  synth ifft init.
 * @param
 * @retval Error
 */
int32_t synth_IfftInit(void)
{
 8012468:	b590      	push	{r4, r7, lr}
 801246a:	ed2d 8b02 	vpush	{d8}
 801246e:	b0c7      	sub	sp, #284	; 0x11c
 8012470:	af02      	add	r7, sp, #8
	int32_t buffer_len = 0;
 8012472:	2300      	movs	r3, #0
 8012474:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t aRandom32bit = 0;
 8012478:	2300      	movs	r3, #0
 801247a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint8_t FreqStr[256] = {0};
 801247e:	1d3b      	adds	r3, r7, #4
 8012480:	2200      	movs	r2, #0
 8012482:	601a      	str	r2, [r3, #0]
 8012484:	3304      	adds	r3, #4
 8012486:	22fc      	movs	r2, #252	; 0xfc
 8012488:	2100      	movs	r1, #0
 801248a:	4618      	mov	r0, r3
 801248c:	f00c fec0 	bl	801f210 <memset>
//		Error_Handler();
//	}
//
//	memset(imageData, 0, cis_GetEffectivePixelNb() * sizeof(uint16_t*));

	buffer_len = init_waves(&unitary_waveform, waves);
 8012490:	4969      	ldr	r1, [pc, #420]	; (8012638 <synth_IfftInit+0x1d0>)
 8012492:	486a      	ldr	r0, [pc, #424]	; (801263c <synth_IfftInit+0x1d4>)
 8012494:	f000 fb8c 	bl	8012bb0 <init_waves>
 8012498:	4603      	mov	r3, r0
 801249a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	// start with random index
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 801249e:	2300      	movs	r3, #0
 80124a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80124a4:	e037      	b.n	8012516 <synth_IfftInit+0xae>
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 80124a6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80124aa:	4619      	mov	r1, r3
 80124ac:	4864      	ldr	r0, [pc, #400]	; (8012640 <synth_IfftInit+0x1d8>)
 80124ae:	f7fb f94a 	bl	800d746 <HAL_RNG_GenerateRandomNumber>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d001      	beq.n	80124bc <synth_IfftInit+0x54>
		{
			/* Random number generation error */
			Error_Handler();
 80124b8:	f7f0 fc1e 	bl	8002cf8 <Error_Handler>
		}
		waves[i].current_idx = aRandom32bit % waves[i].aera_size;
 80124bc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80124c0:	485d      	ldr	r0, [pc, #372]	; (8012638 <synth_IfftInit+0x1d0>)
 80124c2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80124c6:	460b      	mov	r3, r1
 80124c8:	009b      	lsls	r3, r3, #2
 80124ca:	440b      	add	r3, r1
 80124cc:	009b      	lsls	r3, r3, #2
 80124ce:	4403      	add	r3, r0
 80124d0:	3306      	adds	r3, #6
 80124d2:	881b      	ldrh	r3, [r3, #0]
 80124d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80124d8:	fb03 f301 	mul.w	r3, r3, r1
 80124dc:	1ad3      	subs	r3, r2, r3
 80124de:	b298      	uxth	r0, r3
 80124e0:	4955      	ldr	r1, [pc, #340]	; (8012638 <synth_IfftInit+0x1d0>)
 80124e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80124e6:	4613      	mov	r3, r2
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	4413      	add	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	440b      	add	r3, r1
 80124f0:	3304      	adds	r3, #4
 80124f2:	4602      	mov	r2, r0
 80124f4:	801a      	strh	r2, [r3, #0]
		waves[i].current_volume = 0;
 80124f6:	4950      	ldr	r1, [pc, #320]	; (8012638 <synth_IfftInit+0x1d0>)
 80124f8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80124fc:	4613      	mov	r3, r2
 80124fe:	009b      	lsls	r3, r3, #2
 8012500:	4413      	add	r3, r2
 8012502:	009b      	lsls	r3, r3, #2
 8012504:	440b      	add	r3, r1
 8012506:	330c      	adds	r3, #12
 8012508:	2200      	movs	r2, #0
 801250a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 801250c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012510:	3301      	adds	r3, #1
 8012512:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801251a:	2bd7      	cmp	r3, #215	; 0xd7
 801251c:	d9c3      	bls.n	80124a6 <synth_IfftInit+0x3e>
	}

	if (buffer_len < 0)
 801251e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8012522:	2b00      	cmp	r3, #0
 8012524:	da05      	bge.n	8012532 <synth_IfftInit+0xca>
	{
		printf("RAM overflow");
 8012526:	4847      	ldr	r0, [pc, #284]	; (8012644 <synth_IfftInit+0x1dc>)
 8012528:	f00d fd6c 	bl	8020004 <iprintf>
		return -1;
 801252c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012530:	e07a      	b.n	8012628 <synth_IfftInit+0x1c0>
	}

	printf("Buffer lengh = %d\n", (int)buffer_len);
 8012532:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8012536:	4844      	ldr	r0, [pc, #272]	; (8012648 <synth_IfftInit+0x1e0>)
 8012538:	f00d fd64 	bl	8020004 <iprintf>

#ifdef PRINT_FREQUENCY
	ssd1362_drawRect(0, 57, 256, 64, 5, false);
 801253c:	2300      	movs	r3, #0
 801253e:	9301      	str	r3, [sp, #4]
 8012540:	2305      	movs	r3, #5
 8012542:	9300      	str	r3, [sp, #0]
 8012544:	2340      	movs	r3, #64	; 0x40
 8012546:	f44f 7280 	mov.w	r2, #256	; 0x100
 801254a:	2139      	movs	r1, #57	; 0x39
 801254c:	2000      	movs	r0, #0
 801254e:	f00c fb1d 	bl	801eb8c <ssd1362_drawRect>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[0].frequency, (int)waves[0].aera_size, (int)waves[0].octave_coeff);
 8012552:	4b39      	ldr	r3, [pc, #228]	; (8012638 <synth_IfftInit+0x1d0>)
 8012554:	edd3 7a04 	vldr	s15, [r3, #16]
 8012558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801255c:	4b36      	ldr	r3, [pc, #216]	; (8012638 <synth_IfftInit+0x1d0>)
 801255e:	88db      	ldrh	r3, [r3, #6]
 8012560:	461a      	mov	r2, r3
 8012562:	4b35      	ldr	r3, [pc, #212]	; (8012638 <synth_IfftInit+0x1d0>)
 8012564:	891b      	ldrh	r3, [r3, #8]
 8012566:	1d38      	adds	r0, r7, #4
 8012568:	9300      	str	r3, [sp, #0]
 801256a:	4613      	mov	r3, r2
 801256c:	ee17 2a90 	vmov	r2, s15
 8012570:	4936      	ldr	r1, [pc, #216]	; (801264c <synth_IfftInit+0x1e4>)
 8012572:	f00d fe2b 	bl	80201cc <siprintf>
	ssd1362_drawString(0, 57, (int8_t*)FreqStr, 0, 8);
 8012576:	1d3a      	adds	r2, r7, #4
 8012578:	2308      	movs	r3, #8
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	2300      	movs	r3, #0
 801257e:	2139      	movs	r1, #57	; 0x39
 8012580:	2000      	movs	r0, #0
 8012582:	f00c fc66 	bl	801ee52 <ssd1362_drawString>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[NUMBER_OF_NOTES - 1].frequency, (int)waves[NUMBER_OF_NOTES - 1].aera_size / (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff), (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff));
 8012586:	4a2c      	ldr	r2, [pc, #176]	; (8012638 <synth_IfftInit+0x1d0>)
 8012588:	f241 03dc 	movw	r3, #4316	; 0x10dc
 801258c:	4413      	add	r3, r2
 801258e:	edd3 7a00 	vldr	s15, [r3]
 8012592:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8012596:	4a28      	ldr	r2, [pc, #160]	; (8012638 <synth_IfftInit+0x1d0>)
 8012598:	f241 03d2 	movw	r3, #4306	; 0x10d2
 801259c:	4413      	add	r3, r2
 801259e:	881b      	ldrh	r3, [r3, #0]
 80125a0:	461c      	mov	r4, r3
 80125a2:	4a25      	ldr	r2, [pc, #148]	; (8012638 <synth_IfftInit+0x1d0>)
 80125a4:	f241 03d4 	movw	r3, #4308	; 0x10d4
 80125a8:	4413      	add	r3, r2
 80125aa:	881b      	ldrh	r3, [r3, #0]
 80125ac:	ee07 3a90 	vmov	s15, r3
 80125b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80125b4:	eeb0 0b47 	vmov.f64	d0, d7
 80125b8:	f011 fd6a 	bl	8024090 <sqrt>
 80125bc:	eeb0 7b40 	vmov.f64	d7, d0
 80125c0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80125c4:	ee17 3a90 	vmov	r3, s15
 80125c8:	fb94 f4f3 	sdiv	r4, r4, r3
 80125cc:	4a1a      	ldr	r2, [pc, #104]	; (8012638 <synth_IfftInit+0x1d0>)
 80125ce:	f241 03d4 	movw	r3, #4308	; 0x10d4
 80125d2:	4413      	add	r3, r2
 80125d4:	881b      	ldrh	r3, [r3, #0]
 80125d6:	ee07 3a90 	vmov	s15, r3
 80125da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80125de:	eeb0 0b47 	vmov.f64	d0, d7
 80125e2:	f011 fd55 	bl	8024090 <sqrt>
 80125e6:	eeb0 7b40 	vmov.f64	d7, d0
 80125ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80125ee:	ee17 3a90 	vmov	r3, s15
 80125f2:	1d38      	adds	r0, r7, #4
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	4623      	mov	r3, r4
 80125f8:	ee18 2a10 	vmov	r2, s16
 80125fc:	4913      	ldr	r1, [pc, #76]	; (801264c <synth_IfftInit+0x1e4>)
 80125fe:	f00d fde5 	bl	80201cc <siprintf>
	ssd1362_drawString(128, 57, (int8_t*)FreqStr, 0, 8);
 8012602:	1d3a      	adds	r2, r7, #4
 8012604:	2308      	movs	r3, #8
 8012606:	9300      	str	r3, [sp, #0]
 8012608:	2300      	movs	r3, #0
 801260a:	2139      	movs	r1, #57	; 0x39
 801260c:	2080      	movs	r0, #128	; 0x80
 801260e:	f00c fc20 	bl	801ee52 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8012612:	f00c fced 	bl	801eff0 <ssd1362_writeFullBuffer>
	//		//				HAL_Delay(1);
	//	}
	//	printf("---- END ----");
#endif

	if (synth_AudioInit() == 0)
 8012616:	f000 f81b 	bl	8012650 <synth_AudioInit>
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d101      	bne.n	8012624 <synth_IfftInit+0x1bc>
		return 0;
 8012620:	2300      	movs	r3, #0
 8012622:	e001      	b.n	8012628 <synth_IfftInit+0x1c0>
	else
		return -1;
 8012624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012628:	4618      	mov	r0, r3
 801262a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 801262e:	46bd      	mov	sp, r7
 8012630:	ecbd 8b02 	vpop	{d8}
 8012634:	bd90      	pop	{r4, r7, pc}
 8012636:	bf00      	nop
 8012638:	24003658 	.word	0x24003658
 801263c:	24003654 	.word	0x24003654
 8012640:	24005390 	.word	0x24005390
 8012644:	08024f7c 	.word	0x08024f7c
 8012648:	08024f8c 	.word	0x08024f8c
 801264c:	08024fa0 	.word	0x08024fa0

08012650 <synth_AudioInit>:

int32_t synth_AudioInit(void)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	af00      	add	r7, sp, #0
	bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 8012654:	4b06      	ldr	r3, [pc, #24]	; (8012670 <synth_AudioInit+0x20>)
 8012656:	2200      	movs	r2, #0
 8012658:	701a      	strb	r2, [r3, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
 801265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801265e:	4905      	ldr	r1, [pc, #20]	; (8012674 <synth_AudioInit+0x24>)
 8012660:	4805      	ldr	r0, [pc, #20]	; (8012678 <synth_AudioInit+0x28>)
 8012662:	f7fb fb91 	bl	800dd88 <HAL_SAI_Transmit_DMA>

	return -1;
 8012666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801266a:	4618      	mov	r0, r3
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	24005944 	.word	0x24005944
 8012674:	24004918 	.word	0x24004918
 8012678:	2400541c 	.word	0x2400541c

0801267c <synth_GetAudioData>:
 * @brief  Get RFFT buffer data
 * @param  Index
 * @retval Value
 */
int16_t synth_GetAudioData(uint32_t index)
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	return audioBuff[index];
 8012684:	4a04      	ldr	r2, [pc, #16]	; (8012698 <synth_GetAudioData+0x1c>)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 801268c:	4618      	mov	r0, r3
 801268e:	370c      	adds	r7, #12
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr
 8012698:	24004918 	.word	0x24004918

0801269c <synth_GetImageData>:
 * @brief  Get Image buffer data
 * @param  Index
 * @retval Value
 */
int32_t synth_GetImageData(uint32_t index)
{
 801269c:	b480      	push	{r7}
 801269e:	b083      	sub	sp, #12
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	return imageData[index];
 80126a4:	4a04      	ldr	r2, [pc, #16]	; (80126b8 <synth_GetImageData+0x1c>)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	370c      	adds	r7, #12
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr
 80126b8:	2400473c 	.word	0x2400473c

080126bc <synth_IfftMode>:
 * @retval None
 */
#pragma GCC push_options
#pragma GCC optimize ("unroll-loops")
void synth_IfftMode(uint16_t *imageData, int16_t *audioData, uint32_t NbrOfData)
{
 80126bc:	b480      	push	{r7}
 80126be:	b087      	sub	sp, #28
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	607a      	str	r2, [r7, #4]
	static uint16_t new_idx;
	static uint32_t write_data_nbr;
	static int32_t max_volume;
	static int32_t current_image_data;

	write_data_nbr = 0;
 80126c8:	4b50      	ldr	r3, [pc, #320]	; (801280c <synth_IfftMode+0x150>)
 80126ca:	2200      	movs	r2, #0
 80126cc:	601a      	str	r2, [r3, #0]

	while(write_data_nbr < NbrOfData)
 80126ce:	e166      	b.n	801299e <synth_IfftMode+0x2e2>
	{
		signal_summation = 0;
 80126d0:	4b4f      	ldr	r3, [pc, #316]	; (8012810 <synth_IfftMode+0x154>)
 80126d2:	2200      	movs	r2, #0
 80126d4:	601a      	str	r2, [r3, #0]
		signal_power_summation = 0;
 80126d6:	4b4f      	ldr	r3, [pc, #316]	; (8012814 <synth_IfftMode+0x158>)
 80126d8:	2200      	movs	r2, #0
 80126da:	601a      	str	r2, [r3, #0]
		max_volume = 0;
 80126dc:	4b4e      	ldr	r3, [pc, #312]	; (8012818 <synth_IfftMode+0x15c>)
 80126de:	2200      	movs	r2, #0
 80126e0:	601a      	str	r2, [r3, #0]

		//Summation for all pixel
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 80126e2:	23d8      	movs	r3, #216	; 0xd8
 80126e4:	617b      	str	r3, [r7, #20]
 80126e6:	e11e      	b.n	8012926 <synth_IfftMode+0x26a>
		{
			//octave_coeff jump current pointer into the fundamental waveform, for example : the 3th octave increment the current pointer 8 per 8 (2^3)
			//example for 17 cell waveform and 3th octave : [X][Y][Z][X][Y][Z][X][Y][Z][X][Y][[Z][X][Y][[Z][X][Y], X for the first pass, Y for second etc...
			new_idx = (waves[note].current_idx + waves[note].octave_coeff);
 80126e8:	494c      	ldr	r1, [pc, #304]	; (801281c <synth_IfftMode+0x160>)
 80126ea:	697a      	ldr	r2, [r7, #20]
 80126ec:	4613      	mov	r3, r2
 80126ee:	009b      	lsls	r3, r3, #2
 80126f0:	4413      	add	r3, r2
 80126f2:	009b      	lsls	r3, r3, #2
 80126f4:	440b      	add	r3, r1
 80126f6:	3304      	adds	r3, #4
 80126f8:	8819      	ldrh	r1, [r3, #0]
 80126fa:	4848      	ldr	r0, [pc, #288]	; (801281c <synth_IfftMode+0x160>)
 80126fc:	697a      	ldr	r2, [r7, #20]
 80126fe:	4613      	mov	r3, r2
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	4413      	add	r3, r2
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	4403      	add	r3, r0
 8012708:	3308      	adds	r3, #8
 801270a:	881b      	ldrh	r3, [r3, #0]
 801270c:	440b      	add	r3, r1
 801270e:	b29a      	uxth	r2, r3
 8012710:	4b43      	ldr	r3, [pc, #268]	; (8012820 <synth_IfftMode+0x164>)
 8012712:	801a      	strh	r2, [r3, #0]
			if (new_idx >= waves[note].aera_size)
 8012714:	4941      	ldr	r1, [pc, #260]	; (801281c <synth_IfftMode+0x160>)
 8012716:	697a      	ldr	r2, [r7, #20]
 8012718:	4613      	mov	r3, r2
 801271a:	009b      	lsls	r3, r3, #2
 801271c:	4413      	add	r3, r2
 801271e:	009b      	lsls	r3, r3, #2
 8012720:	440b      	add	r3, r1
 8012722:	3306      	adds	r3, #6
 8012724:	881a      	ldrh	r2, [r3, #0]
 8012726:	4b3e      	ldr	r3, [pc, #248]	; (8012820 <synth_IfftMode+0x164>)
 8012728:	881b      	ldrh	r3, [r3, #0]
 801272a:	429a      	cmp	r2, r3
 801272c:	d80e      	bhi.n	801274c <synth_IfftMode+0x90>
				new_idx -= waves[note].aera_size;
 801272e:	4b3c      	ldr	r3, [pc, #240]	; (8012820 <synth_IfftMode+0x164>)
 8012730:	8819      	ldrh	r1, [r3, #0]
 8012732:	483a      	ldr	r0, [pc, #232]	; (801281c <synth_IfftMode+0x160>)
 8012734:	697a      	ldr	r2, [r7, #20]
 8012736:	4613      	mov	r3, r2
 8012738:	009b      	lsls	r3, r3, #2
 801273a:	4413      	add	r3, r2
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	4403      	add	r3, r0
 8012740:	3306      	adds	r3, #6
 8012742:	881b      	ldrh	r3, [r3, #0]
 8012744:	1acb      	subs	r3, r1, r3
 8012746:	b29a      	uxth	r2, r3
 8012748:	4b35      	ldr	r3, [pc, #212]	; (8012820 <synth_IfftMode+0x164>)
 801274a:	801a      	strh	r2, [r3, #0]

			if (imageData[note - 1] - imageData[note] > 0)
 801274c:	697a      	ldr	r2, [r7, #20]
 801274e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012752:	4413      	add	r3, r2
 8012754:	005b      	lsls	r3, r3, #1
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	4413      	add	r3, r2
 801275a:	881b      	ldrh	r3, [r3, #0]
 801275c:	4619      	mov	r1, r3
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	005b      	lsls	r3, r3, #1
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	4413      	add	r3, r2
 8012766:	881b      	ldrh	r3, [r3, #0]
 8012768:	1acb      	subs	r3, r1, r3
 801276a:	2b00      	cmp	r3, #0
 801276c:	dd11      	ble.n	8012792 <synth_IfftMode+0xd6>
				current_image_data = imageData[note - 1] - imageData[note];
 801276e:	697a      	ldr	r2, [r7, #20]
 8012770:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012774:	4413      	add	r3, r2
 8012776:	005b      	lsls	r3, r3, #1
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	4413      	add	r3, r2
 801277c:	881b      	ldrh	r3, [r3, #0]
 801277e:	4619      	mov	r1, r3
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	4413      	add	r3, r2
 8012788:	881b      	ldrh	r3, [r3, #0]
 801278a:	1acb      	subs	r3, r1, r3
 801278c:	4a25      	ldr	r2, [pc, #148]	; (8012824 <synth_IfftMode+0x168>)
 801278e:	6013      	str	r3, [r2, #0]
 8012790:	e002      	b.n	8012798 <synth_IfftMode+0xdc>
			else
				current_image_data = 0;//imageData[note] - imageData[note - 1];
 8012792:	4b24      	ldr	r3, [pc, #144]	; (8012824 <synth_IfftMode+0x168>)
 8012794:	2200      	movs	r2, #0
 8012796:	601a      	str	r2, [r3, #0]

			if (waves[note].current_volume < current_image_data)
 8012798:	4920      	ldr	r1, [pc, #128]	; (801281c <synth_IfftMode+0x160>)
 801279a:	697a      	ldr	r2, [r7, #20]
 801279c:	4613      	mov	r3, r2
 801279e:	009b      	lsls	r3, r3, #2
 80127a0:	4413      	add	r3, r2
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	440b      	add	r3, r1
 80127a6:	330c      	adds	r3, #12
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	4b1e      	ldr	r3, [pc, #120]	; (8012824 <synth_IfftMode+0x168>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	429a      	cmp	r2, r3
 80127b0:	da3a      	bge.n	8012828 <synth_IfftMode+0x16c>
			{
				waves[note].current_volume += IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 80127b2:	491a      	ldr	r1, [pc, #104]	; (801281c <synth_IfftMode+0x160>)
 80127b4:	697a      	ldr	r2, [r7, #20]
 80127b6:	4613      	mov	r3, r2
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	4413      	add	r3, r2
 80127bc:	009b      	lsls	r3, r3, #2
 80127be:	440b      	add	r3, r1
 80127c0:	330c      	adds	r3, #12
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80127c8:	4814      	ldr	r0, [pc, #80]	; (801281c <synth_IfftMode+0x160>)
 80127ca:	697a      	ldr	r2, [r7, #20]
 80127cc:	4613      	mov	r3, r2
 80127ce:	009b      	lsls	r3, r3, #2
 80127d0:	4413      	add	r3, r2
 80127d2:	009b      	lsls	r3, r3, #2
 80127d4:	4403      	add	r3, r0
 80127d6:	330c      	adds	r3, #12
 80127d8:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume > current_image_data)
 80127da:	4910      	ldr	r1, [pc, #64]	; (801281c <synth_IfftMode+0x160>)
 80127dc:	697a      	ldr	r2, [r7, #20]
 80127de:	4613      	mov	r3, r2
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	4413      	add	r3, r2
 80127e4:	009b      	lsls	r3, r3, #2
 80127e6:	440b      	add	r3, r1
 80127e8:	330c      	adds	r3, #12
 80127ea:	681a      	ldr	r2, [r3, #0]
 80127ec:	4b0d      	ldr	r3, [pc, #52]	; (8012824 <synth_IfftMode+0x168>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	dd45      	ble.n	8012880 <synth_IfftMode+0x1c4>
					waves[note].current_volume = current_image_data;
 80127f4:	4b0b      	ldr	r3, [pc, #44]	; (8012824 <synth_IfftMode+0x168>)
 80127f6:	6819      	ldr	r1, [r3, #0]
 80127f8:	4808      	ldr	r0, [pc, #32]	; (801281c <synth_IfftMode+0x160>)
 80127fa:	697a      	ldr	r2, [r7, #20]
 80127fc:	4613      	mov	r3, r2
 80127fe:	009b      	lsls	r3, r3, #2
 8012800:	4413      	add	r3, r2
 8012802:	009b      	lsls	r3, r3, #2
 8012804:	4403      	add	r3, r0
 8012806:	330c      	adds	r3, #12
 8012808:	6019      	str	r1, [r3, #0]
 801280a:	e039      	b.n	8012880 <synth_IfftMode+0x1c4>
 801280c:	24004d18 	.word	0x24004d18
 8012810:	24004d1c 	.word	0x24004d1c
 8012814:	24004d20 	.word	0x24004d20
 8012818:	24004d24 	.word	0x24004d24
 801281c:	24003658 	.word	0x24003658
 8012820:	24004d28 	.word	0x24004d28
 8012824:	24004d2c 	.word	0x24004d2c
			}
			else
			{
				waves[note].current_volume -= IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 8012828:	4966      	ldr	r1, [pc, #408]	; (80129c4 <synth_IfftMode+0x308>)
 801282a:	697a      	ldr	r2, [r7, #20]
 801282c:	4613      	mov	r3, r2
 801282e:	009b      	lsls	r3, r3, #2
 8012830:	4413      	add	r3, r2
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	440b      	add	r3, r1
 8012836:	330c      	adds	r3, #12
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	f1a3 0129 	sub.w	r1, r3, #41	; 0x29
 801283e:	4861      	ldr	r0, [pc, #388]	; (80129c4 <synth_IfftMode+0x308>)
 8012840:	697a      	ldr	r2, [r7, #20]
 8012842:	4613      	mov	r3, r2
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	4413      	add	r3, r2
 8012848:	009b      	lsls	r3, r3, #2
 801284a:	4403      	add	r3, r0
 801284c:	330c      	adds	r3, #12
 801284e:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume < current_image_data)
 8012850:	495c      	ldr	r1, [pc, #368]	; (80129c4 <synth_IfftMode+0x308>)
 8012852:	697a      	ldr	r2, [r7, #20]
 8012854:	4613      	mov	r3, r2
 8012856:	009b      	lsls	r3, r3, #2
 8012858:	4413      	add	r3, r2
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	440b      	add	r3, r1
 801285e:	330c      	adds	r3, #12
 8012860:	681a      	ldr	r2, [r3, #0]
 8012862:	4b59      	ldr	r3, [pc, #356]	; (80129c8 <synth_IfftMode+0x30c>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	429a      	cmp	r2, r3
 8012868:	da0a      	bge.n	8012880 <synth_IfftMode+0x1c4>
					waves[note].current_volume = current_image_data;
 801286a:	4b57      	ldr	r3, [pc, #348]	; (80129c8 <synth_IfftMode+0x30c>)
 801286c:	6819      	ldr	r1, [r3, #0]
 801286e:	4855      	ldr	r0, [pc, #340]	; (80129c4 <synth_IfftMode+0x308>)
 8012870:	697a      	ldr	r2, [r7, #20]
 8012872:	4613      	mov	r3, r2
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	4413      	add	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	4403      	add	r3, r0
 801287c:	330c      	adds	r3, #12
 801287e:	6019      	str	r1, [r3, #0]
			}

			if (waves[note].current_volume > max_volume)
 8012880:	4950      	ldr	r1, [pc, #320]	; (80129c4 <synth_IfftMode+0x308>)
 8012882:	697a      	ldr	r2, [r7, #20]
 8012884:	4613      	mov	r3, r2
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	4413      	add	r3, r2
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	440b      	add	r3, r1
 801288e:	330c      	adds	r3, #12
 8012890:	681a      	ldr	r2, [r3, #0]
 8012892:	4b4e      	ldr	r3, [pc, #312]	; (80129cc <synth_IfftMode+0x310>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	429a      	cmp	r2, r3
 8012898:	dd0a      	ble.n	80128b0 <synth_IfftMode+0x1f4>
				max_volume = waves[note].current_volume;
 801289a:	494a      	ldr	r1, [pc, #296]	; (80129c4 <synth_IfftMode+0x308>)
 801289c:	697a      	ldr	r2, [r7, #20]
 801289e:	4613      	mov	r3, r2
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	4413      	add	r3, r2
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	440b      	add	r3, r1
 80128a8:	330c      	adds	r3, #12
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	4a47      	ldr	r2, [pc, #284]	; (80129cc <synth_IfftMode+0x310>)
 80128ae:	6013      	str	r3, [r2, #0]

			//current audio point summation
			signal_summation += ((*(waves[note].start_ptr + new_idx)) * waves[note].current_volume) >> 16;
 80128b0:	4944      	ldr	r1, [pc, #272]	; (80129c4 <synth_IfftMode+0x308>)
 80128b2:	697a      	ldr	r2, [r7, #20]
 80128b4:	4613      	mov	r3, r2
 80128b6:	009b      	lsls	r3, r3, #2
 80128b8:	4413      	add	r3, r2
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	440b      	add	r3, r1
 80128be:	681a      	ldr	r2, [r3, #0]
 80128c0:	4b43      	ldr	r3, [pc, #268]	; (80129d0 <synth_IfftMode+0x314>)
 80128c2:	881b      	ldrh	r3, [r3, #0]
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	4413      	add	r3, r2
 80128c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128cc:	4618      	mov	r0, r3
 80128ce:	493d      	ldr	r1, [pc, #244]	; (80129c4 <synth_IfftMode+0x308>)
 80128d0:	697a      	ldr	r2, [r7, #20]
 80128d2:	4613      	mov	r3, r2
 80128d4:	009b      	lsls	r3, r3, #2
 80128d6:	4413      	add	r3, r2
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	440b      	add	r3, r1
 80128dc:	330c      	adds	r3, #12
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	fb03 f300 	mul.w	r3, r3, r0
 80128e4:	141a      	asrs	r2, r3, #16
 80128e6:	4b3b      	ldr	r3, [pc, #236]	; (80129d4 <synth_IfftMode+0x318>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4413      	add	r3, r2
 80128ec:	4a39      	ldr	r2, [pc, #228]	; (80129d4 <synth_IfftMode+0x318>)
 80128ee:	6013      	str	r3, [r2, #0]

			//read equivalent power of current pixel
			signal_power_summation += waves[note].current_volume;
 80128f0:	4934      	ldr	r1, [pc, #208]	; (80129c4 <synth_IfftMode+0x308>)
 80128f2:	697a      	ldr	r2, [r7, #20]
 80128f4:	4613      	mov	r3, r2
 80128f6:	009b      	lsls	r3, r3, #2
 80128f8:	4413      	add	r3, r2
 80128fa:	009b      	lsls	r3, r3, #2
 80128fc:	440b      	add	r3, r1
 80128fe:	330c      	adds	r3, #12
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	461a      	mov	r2, r3
 8012904:	4b34      	ldr	r3, [pc, #208]	; (80129d8 <synth_IfftMode+0x31c>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	4413      	add	r3, r2
 801290a:	4a33      	ldr	r2, [pc, #204]	; (80129d8 <synth_IfftMode+0x31c>)
 801290c:	6013      	str	r3, [r2, #0]

			waves[note].current_idx = new_idx;
 801290e:	4b30      	ldr	r3, [pc, #192]	; (80129d0 <synth_IfftMode+0x314>)
 8012910:	8818      	ldrh	r0, [r3, #0]
 8012912:	492c      	ldr	r1, [pc, #176]	; (80129c4 <synth_IfftMode+0x308>)
 8012914:	697a      	ldr	r2, [r7, #20]
 8012916:	4613      	mov	r3, r2
 8012918:	009b      	lsls	r3, r3, #2
 801291a:	4413      	add	r3, r2
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	440b      	add	r3, r1
 8012920:	3304      	adds	r3, #4
 8012922:	4602      	mov	r2, r0
 8012924:	801a      	strh	r2, [r3, #0]
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	3b01      	subs	r3, #1
 801292a:	617b      	str	r3, [r7, #20]
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	2b00      	cmp	r3, #0
 8012930:	f73f aeda 	bgt.w	80126e8 <synth_IfftMode+0x2c>
		}

		rfft = (signal_summation * ((double)max_volume) / (double)signal_power_summation);
 8012934:	4b27      	ldr	r3, [pc, #156]	; (80129d4 <synth_IfftMode+0x318>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	ee07 3a90 	vmov	s15, r3
 801293c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012940:	4b22      	ldr	r3, [pc, #136]	; (80129cc <synth_IfftMode+0x310>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	ee07 3a90 	vmov	s15, r3
 8012948:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801294c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8012950:	4b21      	ldr	r3, [pc, #132]	; (80129d8 <synth_IfftMode+0x31c>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	ee07 3a90 	vmov	s15, r3
 8012958:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 801295c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8012960:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012964:	ee17 3a90 	vmov	r3, s15
 8012968:	b21a      	sxth	r2, r3
 801296a:	4b1c      	ldr	r3, [pc, #112]	; (80129dc <synth_IfftMode+0x320>)
 801296c:	801a      	strh	r2, [r3, #0]

		audioData[write_data_nbr] = rfft;		//L
 801296e:	4b1c      	ldr	r3, [pc, #112]	; (80129e0 <synth_IfftMode+0x324>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	005b      	lsls	r3, r3, #1
 8012974:	68ba      	ldr	r2, [r7, #8]
 8012976:	4413      	add	r3, r2
 8012978:	4a18      	ldr	r2, [pc, #96]	; (80129dc <synth_IfftMode+0x320>)
 801297a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801297e:	801a      	strh	r2, [r3, #0]
		audioData[write_data_nbr + 1] = rfft;	//R
 8012980:	4b17      	ldr	r3, [pc, #92]	; (80129e0 <synth_IfftMode+0x324>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	3301      	adds	r3, #1
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	68ba      	ldr	r2, [r7, #8]
 801298a:	4413      	add	r3, r2
 801298c:	4a13      	ldr	r2, [pc, #76]	; (80129dc <synth_IfftMode+0x320>)
 801298e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012992:	801a      	strh	r2, [r3, #0]
		write_data_nbr += 2;
 8012994:	4b12      	ldr	r3, [pc, #72]	; (80129e0 <synth_IfftMode+0x324>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3302      	adds	r3, #2
 801299a:	4a11      	ldr	r2, [pc, #68]	; (80129e0 <synth_IfftMode+0x324>)
 801299c:	6013      	str	r3, [r2, #0]
	while(write_data_nbr < NbrOfData)
 801299e:	4b10      	ldr	r3, [pc, #64]	; (80129e0 <synth_IfftMode+0x324>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	f63f ae93 	bhi.w	80126d0 <synth_IfftMode+0x14>
	}

	synth_process_cnt += NbrOfData / 2;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	085a      	lsrs	r2, r3, #1
 80129ae:	4b0d      	ldr	r3, [pc, #52]	; (80129e4 <synth_IfftMode+0x328>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4413      	add	r3, r2
 80129b4:	4a0b      	ldr	r2, [pc, #44]	; (80129e4 <synth_IfftMode+0x328>)
 80129b6:	6013      	str	r3, [r2, #0]
}
 80129b8:	bf00      	nop
 80129ba:	371c      	adds	r7, #28
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr
 80129c4:	24003658 	.word	0x24003658
 80129c8:	24004d2c 	.word	0x24004d2c
 80129cc:	24004d24 	.word	0x24004d24
 80129d0:	24004d28 	.word	0x24004d28
 80129d4:	24004d1c 	.word	0x24004d1c
 80129d8:	24004d20 	.word	0x24004d20
 80129dc:	24004d30 	.word	0x24004d30
 80129e0:	24004d18 	.word	0x24004d18
 80129e4:	24004738 	.word	0x24004738

080129e8 <synth_AudioProcess>:
 *                                                                                 ^
 *                                                                                FULL
 *                                                                              COMPLETE
 */
void synth_AudioProcess(synthModeTypeDef mode)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b08a      	sub	sp, #40	; 0x28
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	4603      	mov	r3, r0
 80129f0:	71fb      	strb	r3, [r7, #7]
	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(bufferAudioState == AUDIO_BUFFER_OFFSET_HALF)
 80129f2:	4b3c      	ldr	r3, [pc, #240]	; (8012ae4 <synth_AudioProcess+0xfc>)
 80129f4:	781b      	ldrb	r3, [r3, #0]
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d135      	bne.n	8012a66 <synth_AudioProcess+0x7e>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 80129fa:	4b3a      	ldr	r3, [pc, #232]	; (8012ae4 <synth_AudioProcess+0xfc>)
 80129fc:	2200      	movs	r2, #0
 80129fe:	701a      	strb	r2, [r3, #0]
		cis_ImageProcessBW(imageData);
 8012a00:	4839      	ldr	r0, [pc, #228]	; (8012ae8 <synth_AudioProcess+0x100>)
 8012a02:	f00b fa75 	bl	801def0 <cis_ImageProcessBW>
		if (mode == IFFT_MODE)
 8012a06:	79fb      	ldrb	r3, [r7, #7]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d105      	bne.n	8012a18 <synth_AudioProcess+0x30>
			synth_IfftMode(imageData, &audioBuff[0], AUDIO_BUFFER_SIZE / 2);
 8012a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a10:	4936      	ldr	r1, [pc, #216]	; (8012aec <synth_AudioProcess+0x104>)
 8012a12:	4835      	ldr	r0, [pc, #212]	; (8012ae8 <synth_AudioProcess+0x100>)
 8012a14:	f7ff fe52 	bl	80126bc <synth_IfftMode>
 8012a18:	4b34      	ldr	r3, [pc, #208]	; (8012aec <synth_AudioProcess+0x104>)
 8012a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8012a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a20:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8012a22:	6a3b      	ldr	r3, [r7, #32]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	dd1d      	ble.n	8012a64 <synth_AudioProcess+0x7c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2a:	f003 021f 	and.w	r2, r3, #31
 8012a2e:	6a3b      	ldr	r3, [r7, #32]
 8012a30:	4413      	add	r3, r2
 8012a32:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8012a38:	f3bf 8f4f 	dsb	sy
}
 8012a3c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012a3e:	4a2c      	ldr	r2, [pc, #176]	; (8012af0 <synth_AudioProcess+0x108>)
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012a46:	69bb      	ldr	r3, [r7, #24]
 8012a48:	3320      	adds	r3, #32
 8012a4a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	3b20      	subs	r3, #32
 8012a50:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	dcf2      	bgt.n	8012a3e <synth_AudioProcess+0x56>
  __ASM volatile ("dsb 0xF":::"memory");
 8012a58:	f3bf 8f4f 	dsb	sy
}
 8012a5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012a5e:	f3bf 8f6f 	isb	sy
}
 8012a62:	bf00      	nop
}
 8012a64:	bf00      	nop
		/* Clean Data Cache to update the content of the SRAM */
		SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(bufferAudioState == AUDIO_BUFFER_OFFSET_FULL)
 8012a66:	4b1f      	ldr	r3, [pc, #124]	; (8012ae4 <synth_AudioProcess+0xfc>)
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	2b02      	cmp	r3, #2
 8012a6c:	d136      	bne.n	8012adc <synth_AudioProcess+0xf4>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 8012a6e:	4b1d      	ldr	r3, [pc, #116]	; (8012ae4 <synth_AudioProcess+0xfc>)
 8012a70:	2200      	movs	r2, #0
 8012a72:	701a      	strb	r2, [r3, #0]
		cis_ImageProcessBW(imageData);
 8012a74:	481c      	ldr	r0, [pc, #112]	; (8012ae8 <synth_AudioProcess+0x100>)
 8012a76:	f00b fa3b 	bl	801def0 <cis_ImageProcessBW>
		if (mode == IFFT_MODE)
 8012a7a:	79fb      	ldrb	r3, [r7, #7]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d105      	bne.n	8012a8c <synth_AudioProcess+0xa4>
			synth_IfftMode(imageData, &audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2);
 8012a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a84:	491b      	ldr	r1, [pc, #108]	; (8012af4 <synth_AudioProcess+0x10c>)
 8012a86:	4818      	ldr	r0, [pc, #96]	; (8012ae8 <synth_AudioProcess+0x100>)
 8012a88:	f7ff fe18 	bl	80126bc <synth_IfftMode>
 8012a8c:	4b19      	ldr	r3, [pc, #100]	; (8012af4 <synth_AudioProcess+0x10c>)
 8012a8e:	617b      	str	r3, [r7, #20]
 8012a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a94:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	dd1d      	ble.n	8012ad8 <synth_AudioProcess+0xf0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	f003 021f 	and.w	r2, r3, #31
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8012aac:	f3bf 8f4f 	dsb	sy
}
 8012ab0:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8012ab2:	4a0f      	ldr	r2, [pc, #60]	; (8012af0 <synth_AudioProcess+0x108>)
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	3320      	adds	r3, #32
 8012abe:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	3b20      	subs	r3, #32
 8012ac4:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	dcf2      	bgt.n	8012ab2 <synth_AudioProcess+0xca>
  __ASM volatile ("dsb 0xF":::"memory");
 8012acc:	f3bf 8f4f 	dsb	sy
}
 8012ad0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012ad2:	f3bf 8f6f 	isb	sy
}
 8012ad6:	bf00      	nop
}
 8012ad8:	bf00      	nop
		//			else
		//				synth_PlayMode(imageData, (int16_t*)&audioBuff[AUDIO_QUARTER_BUFFER_SIZE / 2], (AUDIO_QUARTER_BUFFER_SIZE / 2));
		/* Clean Data Cache to update the content of the SRAM */
		SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE);
	}
	return;
 8012ada:	bf00      	nop
 8012adc:	bf00      	nop
}
 8012ade:	3728      	adds	r7, #40	; 0x28
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	24005944 	.word	0x24005944
 8012ae8:	2400473c 	.word	0x2400473c
 8012aec:	24004918 	.word	0x24004918
 8012af0:	e000ed00 	.word	0xe000ed00
 8012af4:	24004b18 	.word	0x24004b18

08012af8 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	4a05      	ldr	r2, [pc, #20]	; (8012b1c <HAL_SAI_TxHalfCpltCallback+0x24>)
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d102      	bne.n	8012b10 <HAL_SAI_TxHalfCpltCallback+0x18>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_HALF;
 8012b0a:	4b05      	ldr	r3, [pc, #20]	; (8012b20 <HAL_SAI_TxHalfCpltCallback+0x28>)
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	701a      	strb	r2, [r3, #0]
	}
}
 8012b10:	bf00      	nop
 8012b12:	370c      	adds	r7, #12
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr
 8012b1c:	40015804 	.word	0x40015804
 8012b20:	24005944 	.word	0x24005944

08012b24 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8012b24:	b480      	push	{r7}
 8012b26:	b083      	sub	sp, #12
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a05      	ldr	r2, [pc, #20]	; (8012b48 <HAL_SAI_TxCpltCallback+0x24>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d102      	bne.n	8012b3c <HAL_SAI_TxCpltCallback+0x18>
	{
		/* allows AUDIO_Process() to refill 2nd part of the buffer  */
		bufferAudioState = AUDIO_BUFFER_OFFSET_FULL;
 8012b36:	4b05      	ldr	r3, [pc, #20]	; (8012b4c <HAL_SAI_TxCpltCallback+0x28>)
 8012b38:	2202      	movs	r2, #2
 8012b3a:	701a      	strb	r2, [r3, #0]
	}
}
 8012b3c:	bf00      	nop
 8012b3e:	370c      	adds	r7, #12
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr
 8012b48:	40015804 	.word	0x40015804
 8012b4c:	24005944 	.word	0x24005944

08012b50 <calculate_frequency>:
 * @brief  calculate frequency,
 * @param  comma cnt
 * @retval frequency
 */
static float calculate_frequency(uint32_t comma_cnt)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
	float frequency = 0.0;
 8012b58:	f04f 0300 	mov.w	r3, #0
 8012b5c:	60fb      	str	r3, [r7, #12]
	frequency = START_FREQUENCY * pow(2, (comma_cnt / (12.0 * (COMMA_PER_OCTAVE / (12.0 / (log(2)) * log((START_FREQUENCY * 2.0) / START_FREQUENCY))))));
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	ee07 3a90 	vmov	s15, r3
 8012b64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012b68:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8012ba0 <calculate_frequency+0x50>
 8012b6c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8012b70:	eeb0 1b46 	vmov.f64	d1, d6
 8012b74:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8012b78:	f010 ff7e 	bl	8023a78 <pow>
 8012b7c:	eeb0 7b40 	vmov.f64	d7, d0
 8012b80:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8012ba8 <calculate_frequency+0x58>
 8012b84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012b88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012b8c:	edc7 7a03 	vstr	s15, [r7, #12]

	return frequency;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	ee07 3a90 	vmov	s15, r3
}
 8012b96:	eeb0 0a67 	vmov.f32	s0, s15
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	00000000 	.word	0x00000000
 8012ba4:	404e0000 	.word	0x404e0000
 8012ba8:	00000000 	.word	0x00000000
 8012bac:	40518000 	.word	0x40518000

08012bb0 <init_waves>:
 * @param  unitary_waveform pointer,
 * @param  waves structure pointer,
 * @retval buffer length on success, negative value otherwise
 */
uint32_t init_waves(int16_t **unitary_waveform, struct wave *waves)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	ed2d 8b02 	vpush	{d8}
 8012bb6:	b08c      	sub	sp, #48	; 0x30
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
	uint32_t buffer_len = 0;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t current_unitary_waveform_cell = 0;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t note = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	627b      	str	r3, [r7, #36]	; 0x24

	//compute cell number for storage all oscillators waveform
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8012bca:	2300      	movs	r3, #0
 8012bcc:	623b      	str	r3, [r7, #32]
 8012bce:	e014      	b.n	8012bfa <init_waves+0x4a>
	{
		//store only first octave_coeff frequencies ---- logarithmic distribution
		float frequency = calculate_frequency(comma_cnt);
 8012bd0:	6a38      	ldr	r0, [r7, #32]
 8012bd2:	f7ff ffbd 	bl	8012b50 <calculate_frequency>
 8012bd6:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_len += (uint32_t)(SAMPLING_FREQUENCY / frequency);
 8012bda:	eddf 6a81 	vldr	s13, [pc, #516]	; 8012de0 <init_waves+0x230>
 8012bde:	ed97 7a02 	vldr	s14, [r7, #8]
 8012be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012bea:	ee17 2a90 	vmov	r2, s15
 8012bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf0:	4413      	add	r3, r2
 8012bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8012bf4:	6a3b      	ldr	r3, [r7, #32]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	623b      	str	r3, [r7, #32]
 8012bfa:	6a3b      	ldr	r3, [r7, #32]
 8012bfc:	2b3b      	cmp	r3, #59	; 0x3b
 8012bfe:	d9e7      	bls.n	8012bd0 <init_waves+0x20>
	}

	//allocate the contiguous memory area for storage all waveforms for the first octave_coeff
	*unitary_waveform = malloc(buffer_len * sizeof(uint16_t*));
 8012c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	4618      	mov	r0, r3
 8012c06:	f00c fac5 	bl	801f194 <malloc>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	601a      	str	r2, [r3, #0]
	if (*unitary_waveform == NULL)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d101      	bne.n	8012c1e <init_waves+0x6e>
	{
		Error_Handler();
 8012c1a:	f7f0 f86d 	bl	8002cf8 <Error_Handler>
	}

	//compute and store the waveform into unitary_waveform only for the first octave_coeff
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 8012c1e:	2300      	movs	r3, #0
 8012c20:	61fb      	str	r3, [r7, #28]
 8012c22:	e0be      	b.n	8012da2 <init_waves+0x1f2>
	{
		//compute frequency for each comma into the first octave_coeff
		float frequency = calculate_frequency(current_comma_first_octave);
 8012c24:	69f8      	ldr	r0, [r7, #28]
 8012c26:	f7ff ff93 	bl	8012b50 <calculate_frequency>
 8012c2a:	ed87 0a04 	vstr	s0, [r7, #16]

		//current aera size is the number of char cell for storage a waveform at the current frequency (one pixel per frequency oscillator)
		uint32_t current_aera_size = (uint32_t)(SAMPLING_FREQUENCY / frequency);
 8012c2e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8012de0 <init_waves+0x230>
 8012c32:	ed97 7a04 	vldr	s14, [r7, #16]
 8012c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c3e:	ee17 3a90 	vmov	r3, s15
 8012c42:	60fb      	str	r3, [r7, #12]

		//fill unitary_waveform buffer with sinusoidal waveform for each comma
		for (uint32_t x = 0; x < current_aera_size; x++)
 8012c44:	2300      	movs	r3, #0
 8012c46:	61bb      	str	r3, [r7, #24]
 8012c48:	e030      	b.n	8012cac <init_waves+0xfc>
		{
			//sanity check
			if (current_unitary_waveform_cell < buffer_len)
 8012c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d229      	bcs.n	8012ca6 <init_waves+0xf6>
			{
				(*unitary_waveform)[current_unitary_waveform_cell] = ((sin((x * 2.00 * PI )/ (double)current_aera_size))) * (WAVE_AMP_RESOLUTION / 2.00);
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	ee07 3a90 	vmov	s15, r3
 8012c58:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012c5c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012c60:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8012dd0 <init_waves+0x220>
 8012c64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	ee07 3a90 	vmov	s15, r3
 8012c6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012c72:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8012c76:	eeb0 0b45 	vmov.f64	d0, d5
 8012c7a:	f011 f9c1 	bl	8024000 <sin>
 8012c7e:	eeb0 7b40 	vmov.f64	d7, d0
 8012c82:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8012dd8 <init_waves+0x228>
 8012c86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681a      	ldr	r2, [r3, #0]
 8012c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c90:	005b      	lsls	r3, r3, #1
 8012c92:	4413      	add	r3, r2
 8012c94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012c98:	ee17 2a90 	vmov	r2, s15
 8012c9c:	b212      	sxth	r2, r2
 8012c9e:	801a      	strh	r2, [r3, #0]
				current_unitary_waveform_cell++;
 8012ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	62bb      	str	r3, [r7, #40]	; 0x28
		for (uint32_t x = 0; x < current_aera_size; x++)
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	61bb      	str	r3, [r7, #24]
 8012cac:	69ba      	ldr	r2, [r7, #24]
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d3ca      	bcc.n	8012c4a <init_waves+0x9a>
			}
		}

		//for each octave (only the first octave_coeff stay in RAM, for multiple octave_coeff start_ptr stay on first octave waveform but current_ptr jump cell according to multiple frequencies)
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	617b      	str	r3, [r7, #20]
 8012cb8:	e06d      	b.n	8012d96 <init_waves+0x1e6>
			// *** is current pix, --- octave separation
			// *---------*---------*---------*---------*---------*---------*---------*--------- for current comma at each octave
			// ---*---------*---------*---------*---------*---------*---------*---------*------ for the second comma...
			// ------*---------*---------*---------*---------*---------*---------*---------*---
			// ---------*---------*---------*---------*---------*---------*---------*---------*
			note = current_comma_first_octave + COMMA_PER_OCTAVE * octave;
 8012cba:	697a      	ldr	r2, [r7, #20]
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	011b      	lsls	r3, r3, #4
 8012cc0:	1a9b      	subs	r3, r3, r2
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	4413      	add	r3, r2
 8012cca:	627b      	str	r3, [r7, #36]	; 0x24
			//sanity check, if user demand is't possible
			if (note < NUMBER_OF_NOTES)
 8012ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cce:	2bd7      	cmp	r3, #215	; 0xd7
 8012cd0:	d85e      	bhi.n	8012d90 <init_waves+0x1e0>
			{
#ifdef PRINT_FREQUENCY
				//store frequencies
				waves[note].frequency = frequency * pow(2, octave);
 8012cd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8012cd6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	ee07 3a90 	vmov	s15, r3
 8012ce0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012ce4:	eeb0 1b47 	vmov.f64	d1, d7
 8012ce8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8012cec:	f010 fec4 	bl	8023a78 <pow>
 8012cf0:	eeb0 7b40 	vmov.f64	d7, d0
 8012cf4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	461a      	mov	r2, r3
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	4413      	add	r3, r2
 8012d08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8012d0c:	edc3 7a04 	vstr	s15, [r3, #16]
#endif
				//store octave number
				waves[note].octave_coeff = pow(2, octave);
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	ee07 3a90 	vmov	s15, r3
 8012d16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012d1a:	eeb0 1b47 	vmov.f64	d1, d7
 8012d1e:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8012d22:	f010 fea9 	bl	8023a78 <pow>
 8012d26:	eeb0 7b40 	vmov.f64	d7, d0
 8012d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d2c:	4613      	mov	r3, r2
 8012d2e:	009b      	lsls	r3, r3, #2
 8012d30:	4413      	add	r3, r2
 8012d32:	009b      	lsls	r3, r3, #2
 8012d34:	461a      	mov	r2, r3
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	4413      	add	r3, r2
 8012d3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8012d3e:	ee17 2a90 	vmov	r2, s15
 8012d42:	b292      	uxth	r2, r2
 8012d44:	811a      	strh	r2, [r3, #8]
				//store aera size
				waves[note].aera_size = current_aera_size;
 8012d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d48:	4613      	mov	r3, r2
 8012d4a:	009b      	lsls	r3, r3, #2
 8012d4c:	4413      	add	r3, r2
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	461a      	mov	r2, r3
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	4413      	add	r3, r2
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	b292      	uxth	r2, r2
 8012d5a:	80da      	strh	r2, [r3, #6]
				//store pointer address
				waves[note].start_ptr = &(*unitary_waveform)[current_unitary_waveform_cell - current_aera_size];
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6818      	ldr	r0, [r3, #0]
 8012d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	1ad3      	subs	r3, r2, r3
 8012d66:	0059      	lsls	r1, r3, #1
 8012d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	009b      	lsls	r3, r3, #2
 8012d6e:	4413      	add	r3, r2
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	461a      	mov	r2, r3
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	4413      	add	r3, r2
 8012d78:	1842      	adds	r2, r0, r1
 8012d7a:	601a      	str	r2, [r3, #0]
				//set current pointer at the same address
				waves[note].current_idx = 0;
 8012d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d7e:	4613      	mov	r3, r2
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	4413      	add	r3, r2
 8012d84:	009b      	lsls	r3, r3, #2
 8012d86:	461a      	mov	r2, r3
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	4413      	add	r3, r2
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	809a      	strh	r2, [r3, #4]
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8012d90:	697b      	ldr	r3, [r7, #20]
 8012d92:	3301      	adds	r3, #1
 8012d94:	617b      	str	r3, [r7, #20]
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	2b0a      	cmp	r3, #10
 8012d9a:	d98e      	bls.n	8012cba <init_waves+0x10a>
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	61fb      	str	r3, [r7, #28]
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	2b3b      	cmp	r3, #59	; 0x3b
 8012da6:	f67f af3d 	bls.w	8012c24 <init_waves+0x74>
			}
		}
	}

	if (note < NUMBER_OF_NOTES)
 8012daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dac:	2bd7      	cmp	r3, #215	; 0xd7
 8012dae:	d806      	bhi.n	8012dbe <init_waves+0x20e>
	{
		printf("Configuration fail, current pix : %d\n", (int)note);
 8012db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db2:	4619      	mov	r1, r3
 8012db4:	480b      	ldr	r0, [pc, #44]	; (8012de4 <init_waves+0x234>)
 8012db6:	f00d f925 	bl	8020004 <iprintf>
		Error_Handler();
 8012dba:	f7ef ff9d 	bl	8002cf8 <Error_Handler>
	}

	return buffer_len;
 8012dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3730      	adds	r7, #48	; 0x30
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	ecbd 8b02 	vpop	{d8}
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	f3af 8000 	nop.w
 8012dd0:	54442eea 	.word	0x54442eea
 8012dd4:	400921fb 	.word	0x400921fb
 8012dd8:	00000000 	.word	0x00000000
 8012ddc:	40dfffe0 	.word	0x40dfffe0
 8012de0:	473b8000 	.word	0x473b8000
 8012de4:	08024fb0 	.word	0x08024fb0

08012de8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	4603      	mov	r3, r0
 8012df0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012df2:	88fb      	ldrh	r3, [r7, #6]
 8012df4:	021b      	lsls	r3, r3, #8
 8012df6:	b21a      	sxth	r2, r3
 8012df8:	88fb      	ldrh	r3, [r7, #6]
 8012dfa:	0a1b      	lsrs	r3, r3, #8
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	b21b      	sxth	r3, r3
 8012e00:	4313      	orrs	r3, r2
 8012e02:	b21b      	sxth	r3, r3
 8012e04:	b29b      	uxth	r3, r3
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	370c      	adds	r7, #12
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr

08012e12 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012e12:	b480      	push	{r7}
 8012e14:	b083      	sub	sp, #12
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	061a      	lsls	r2, r3, #24
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	021b      	lsls	r3, r3, #8
 8012e22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012e26:	431a      	orrs	r2, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	0a1b      	lsrs	r3, r3, #8
 8012e2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012e30:	431a      	orrs	r2, r3
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	0e1b      	lsrs	r3, r3, #24
 8012e36:	4313      	orrs	r3, r2
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	370c      	adds	r7, #12
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr

08012e44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012e4c:	4915      	ldr	r1, [pc, #84]	; (8012ea4 <etharp_free_entry+0x60>)
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	4613      	mov	r3, r2
 8012e52:	005b      	lsls	r3, r3, #1
 8012e54:	4413      	add	r3, r2
 8012e56:	00db      	lsls	r3, r3, #3
 8012e58:	440b      	add	r3, r1
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d013      	beq.n	8012e88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012e60:	4910      	ldr	r1, [pc, #64]	; (8012ea4 <etharp_free_entry+0x60>)
 8012e62:	687a      	ldr	r2, [r7, #4]
 8012e64:	4613      	mov	r3, r2
 8012e66:	005b      	lsls	r3, r3, #1
 8012e68:	4413      	add	r3, r2
 8012e6a:	00db      	lsls	r3, r3, #3
 8012e6c:	440b      	add	r3, r1
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4618      	mov	r0, r3
 8012e72:	f003 feb5 	bl	8016be0 <pbuf_free>
    arp_table[i].q = NULL;
 8012e76:	490b      	ldr	r1, [pc, #44]	; (8012ea4 <etharp_free_entry+0x60>)
 8012e78:	687a      	ldr	r2, [r7, #4]
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	005b      	lsls	r3, r3, #1
 8012e7e:	4413      	add	r3, r2
 8012e80:	00db      	lsls	r3, r3, #3
 8012e82:	440b      	add	r3, r1
 8012e84:	2200      	movs	r2, #0
 8012e86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012e88:	4906      	ldr	r1, [pc, #24]	; (8012ea4 <etharp_free_entry+0x60>)
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	4413      	add	r3, r2
 8012e92:	00db      	lsls	r3, r3, #3
 8012e94:	440b      	add	r3, r1
 8012e96:	3314      	adds	r3, #20
 8012e98:	2200      	movs	r2, #0
 8012e9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012e9c:	bf00      	nop
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	24004d34 	.word	0x24004d34

08012ea8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012eae:	2300      	movs	r3, #0
 8012eb0:	607b      	str	r3, [r7, #4]
 8012eb2:	e096      	b.n	8012fe2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012eb4:	494f      	ldr	r1, [pc, #316]	; (8012ff4 <etharp_tmr+0x14c>)
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	4613      	mov	r3, r2
 8012eba:	005b      	lsls	r3, r3, #1
 8012ebc:	4413      	add	r3, r2
 8012ebe:	00db      	lsls	r3, r3, #3
 8012ec0:	440b      	add	r3, r1
 8012ec2:	3314      	adds	r3, #20
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012ec8:	78fb      	ldrb	r3, [r7, #3]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f000 8086 	beq.w	8012fdc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012ed0:	4948      	ldr	r1, [pc, #288]	; (8012ff4 <etharp_tmr+0x14c>)
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	4613      	mov	r3, r2
 8012ed6:	005b      	lsls	r3, r3, #1
 8012ed8:	4413      	add	r3, r2
 8012eda:	00db      	lsls	r3, r3, #3
 8012edc:	440b      	add	r3, r1
 8012ede:	3312      	adds	r3, #18
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	b298      	uxth	r0, r3
 8012ee6:	4943      	ldr	r1, [pc, #268]	; (8012ff4 <etharp_tmr+0x14c>)
 8012ee8:	687a      	ldr	r2, [r7, #4]
 8012eea:	4613      	mov	r3, r2
 8012eec:	005b      	lsls	r3, r3, #1
 8012eee:	4413      	add	r3, r2
 8012ef0:	00db      	lsls	r3, r3, #3
 8012ef2:	440b      	add	r3, r1
 8012ef4:	3312      	adds	r3, #18
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012efa:	493e      	ldr	r1, [pc, #248]	; (8012ff4 <etharp_tmr+0x14c>)
 8012efc:	687a      	ldr	r2, [r7, #4]
 8012efe:	4613      	mov	r3, r2
 8012f00:	005b      	lsls	r3, r3, #1
 8012f02:	4413      	add	r3, r2
 8012f04:	00db      	lsls	r3, r3, #3
 8012f06:	440b      	add	r3, r1
 8012f08:	3312      	adds	r3, #18
 8012f0a:	881b      	ldrh	r3, [r3, #0]
 8012f0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012f10:	d215      	bcs.n	8012f3e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012f12:	4938      	ldr	r1, [pc, #224]	; (8012ff4 <etharp_tmr+0x14c>)
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	4613      	mov	r3, r2
 8012f18:	005b      	lsls	r3, r3, #1
 8012f1a:	4413      	add	r3, r2
 8012f1c:	00db      	lsls	r3, r3, #3
 8012f1e:	440b      	add	r3, r1
 8012f20:	3314      	adds	r3, #20
 8012f22:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d10e      	bne.n	8012f46 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012f28:	4932      	ldr	r1, [pc, #200]	; (8012ff4 <etharp_tmr+0x14c>)
 8012f2a:	687a      	ldr	r2, [r7, #4]
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	005b      	lsls	r3, r3, #1
 8012f30:	4413      	add	r3, r2
 8012f32:	00db      	lsls	r3, r3, #3
 8012f34:	440b      	add	r3, r1
 8012f36:	3312      	adds	r3, #18
 8012f38:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012f3a:	2b04      	cmp	r3, #4
 8012f3c:	d903      	bls.n	8012f46 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7ff ff80 	bl	8012e44 <etharp_free_entry>
 8012f44:	e04a      	b.n	8012fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012f46:	492b      	ldr	r1, [pc, #172]	; (8012ff4 <etharp_tmr+0x14c>)
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	4613      	mov	r3, r2
 8012f4c:	005b      	lsls	r3, r3, #1
 8012f4e:	4413      	add	r3, r2
 8012f50:	00db      	lsls	r3, r3, #3
 8012f52:	440b      	add	r3, r1
 8012f54:	3314      	adds	r3, #20
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	2b03      	cmp	r3, #3
 8012f5a:	d10a      	bne.n	8012f72 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012f5c:	4925      	ldr	r1, [pc, #148]	; (8012ff4 <etharp_tmr+0x14c>)
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	4613      	mov	r3, r2
 8012f62:	005b      	lsls	r3, r3, #1
 8012f64:	4413      	add	r3, r2
 8012f66:	00db      	lsls	r3, r3, #3
 8012f68:	440b      	add	r3, r1
 8012f6a:	3314      	adds	r3, #20
 8012f6c:	2204      	movs	r2, #4
 8012f6e:	701a      	strb	r2, [r3, #0]
 8012f70:	e034      	b.n	8012fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012f72:	4920      	ldr	r1, [pc, #128]	; (8012ff4 <etharp_tmr+0x14c>)
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	4613      	mov	r3, r2
 8012f78:	005b      	lsls	r3, r3, #1
 8012f7a:	4413      	add	r3, r2
 8012f7c:	00db      	lsls	r3, r3, #3
 8012f7e:	440b      	add	r3, r1
 8012f80:	3314      	adds	r3, #20
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	2b04      	cmp	r3, #4
 8012f86:	d10a      	bne.n	8012f9e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012f88:	491a      	ldr	r1, [pc, #104]	; (8012ff4 <etharp_tmr+0x14c>)
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	005b      	lsls	r3, r3, #1
 8012f90:	4413      	add	r3, r2
 8012f92:	00db      	lsls	r3, r3, #3
 8012f94:	440b      	add	r3, r1
 8012f96:	3314      	adds	r3, #20
 8012f98:	2202      	movs	r2, #2
 8012f9a:	701a      	strb	r2, [r3, #0]
 8012f9c:	e01e      	b.n	8012fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012f9e:	4915      	ldr	r1, [pc, #84]	; (8012ff4 <etharp_tmr+0x14c>)
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	005b      	lsls	r3, r3, #1
 8012fa6:	4413      	add	r3, r2
 8012fa8:	00db      	lsls	r3, r3, #3
 8012faa:	440b      	add	r3, r1
 8012fac:	3314      	adds	r3, #20
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d113      	bne.n	8012fdc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012fb4:	490f      	ldr	r1, [pc, #60]	; (8012ff4 <etharp_tmr+0x14c>)
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	4613      	mov	r3, r2
 8012fba:	005b      	lsls	r3, r3, #1
 8012fbc:	4413      	add	r3, r2
 8012fbe:	00db      	lsls	r3, r3, #3
 8012fc0:	440b      	add	r3, r1
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	6818      	ldr	r0, [r3, #0]
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	4613      	mov	r3, r2
 8012fca:	005b      	lsls	r3, r3, #1
 8012fcc:	4413      	add	r3, r2
 8012fce:	00db      	lsls	r3, r3, #3
 8012fd0:	4a08      	ldr	r2, [pc, #32]	; (8012ff4 <etharp_tmr+0x14c>)
 8012fd2:	4413      	add	r3, r2
 8012fd4:	3304      	adds	r3, #4
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	f000 fe6e 	bl	8013cb8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	3301      	adds	r3, #1
 8012fe0:	607b      	str	r3, [r7, #4]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b09      	cmp	r3, #9
 8012fe6:	f77f af65 	ble.w	8012eb4 <etharp_tmr+0xc>
      }
    }
  }
}
 8012fea:	bf00      	nop
 8012fec:	bf00      	nop
 8012fee:	3708      	adds	r7, #8
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}
 8012ff4:	24004d34 	.word	0x24004d34

08012ff8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b08a      	sub	sp, #40	; 0x28
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	60f8      	str	r0, [r7, #12]
 8013000:	460b      	mov	r3, r1
 8013002:	607a      	str	r2, [r7, #4]
 8013004:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013006:	230a      	movs	r3, #10
 8013008:	84fb      	strh	r3, [r7, #38]	; 0x26
 801300a:	230a      	movs	r3, #10
 801300c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801300e:	230a      	movs	r3, #10
 8013010:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013012:	2300      	movs	r3, #0
 8013014:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013016:	230a      	movs	r3, #10
 8013018:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801301a:	2300      	movs	r3, #0
 801301c:	83bb      	strh	r3, [r7, #28]
 801301e:	2300      	movs	r3, #0
 8013020:	837b      	strh	r3, [r7, #26]
 8013022:	2300      	movs	r3, #0
 8013024:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013026:	2300      	movs	r3, #0
 8013028:	843b      	strh	r3, [r7, #32]
 801302a:	e0ae      	b.n	801318a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801302c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013030:	49a6      	ldr	r1, [pc, #664]	; (80132cc <etharp_find_entry+0x2d4>)
 8013032:	4613      	mov	r3, r2
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	4413      	add	r3, r2
 8013038:	00db      	lsls	r3, r3, #3
 801303a:	440b      	add	r3, r1
 801303c:	3314      	adds	r3, #20
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013046:	2b0a      	cmp	r3, #10
 8013048:	d105      	bne.n	8013056 <etharp_find_entry+0x5e>
 801304a:	7dfb      	ldrb	r3, [r7, #23]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d102      	bne.n	8013056 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013050:	8c3b      	ldrh	r3, [r7, #32]
 8013052:	847b      	strh	r3, [r7, #34]	; 0x22
 8013054:	e095      	b.n	8013182 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013056:	7dfb      	ldrb	r3, [r7, #23]
 8013058:	2b00      	cmp	r3, #0
 801305a:	f000 8092 	beq.w	8013182 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801305e:	7dfb      	ldrb	r3, [r7, #23]
 8013060:	2b01      	cmp	r3, #1
 8013062:	d009      	beq.n	8013078 <etharp_find_entry+0x80>
 8013064:	7dfb      	ldrb	r3, [r7, #23]
 8013066:	2b01      	cmp	r3, #1
 8013068:	d806      	bhi.n	8013078 <etharp_find_entry+0x80>
 801306a:	4b99      	ldr	r3, [pc, #612]	; (80132d0 <etharp_find_entry+0x2d8>)
 801306c:	f240 1223 	movw	r2, #291	; 0x123
 8013070:	4998      	ldr	r1, [pc, #608]	; (80132d4 <etharp_find_entry+0x2dc>)
 8013072:	4899      	ldr	r0, [pc, #612]	; (80132d8 <etharp_find_entry+0x2e0>)
 8013074:	f00c ffc6 	bl	8020004 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d020      	beq.n	80130c0 <etharp_find_entry+0xc8>
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6819      	ldr	r1, [r3, #0]
 8013082:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013086:	4891      	ldr	r0, [pc, #580]	; (80132cc <etharp_find_entry+0x2d4>)
 8013088:	4613      	mov	r3, r2
 801308a:	005b      	lsls	r3, r3, #1
 801308c:	4413      	add	r3, r2
 801308e:	00db      	lsls	r3, r3, #3
 8013090:	4403      	add	r3, r0
 8013092:	3304      	adds	r3, #4
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	4299      	cmp	r1, r3
 8013098:	d112      	bne.n	80130c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00c      	beq.n	80130ba <etharp_find_entry+0xc2>
 80130a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130a4:	4989      	ldr	r1, [pc, #548]	; (80132cc <etharp_find_entry+0x2d4>)
 80130a6:	4613      	mov	r3, r2
 80130a8:	005b      	lsls	r3, r3, #1
 80130aa:	4413      	add	r3, r2
 80130ac:	00db      	lsls	r3, r3, #3
 80130ae:	440b      	add	r3, r1
 80130b0:	3308      	adds	r3, #8
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	687a      	ldr	r2, [r7, #4]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d102      	bne.n	80130c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80130ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80130be:	e100      	b.n	80132c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80130c0:	7dfb      	ldrb	r3, [r7, #23]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d140      	bne.n	8013148 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80130c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130ca:	4980      	ldr	r1, [pc, #512]	; (80132cc <etharp_find_entry+0x2d4>)
 80130cc:	4613      	mov	r3, r2
 80130ce:	005b      	lsls	r3, r3, #1
 80130d0:	4413      	add	r3, r2
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	440b      	add	r3, r1
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d01a      	beq.n	8013112 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80130dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130e0:	497a      	ldr	r1, [pc, #488]	; (80132cc <etharp_find_entry+0x2d4>)
 80130e2:	4613      	mov	r3, r2
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	4413      	add	r3, r2
 80130e8:	00db      	lsls	r3, r3, #3
 80130ea:	440b      	add	r3, r1
 80130ec:	3312      	adds	r3, #18
 80130ee:	881b      	ldrh	r3, [r3, #0]
 80130f0:	8bba      	ldrh	r2, [r7, #28]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d845      	bhi.n	8013182 <etharp_find_entry+0x18a>
            old_queue = i;
 80130f6:	8c3b      	ldrh	r3, [r7, #32]
 80130f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80130fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130fe:	4973      	ldr	r1, [pc, #460]	; (80132cc <etharp_find_entry+0x2d4>)
 8013100:	4613      	mov	r3, r2
 8013102:	005b      	lsls	r3, r3, #1
 8013104:	4413      	add	r3, r2
 8013106:	00db      	lsls	r3, r3, #3
 8013108:	440b      	add	r3, r1
 801310a:	3312      	adds	r3, #18
 801310c:	881b      	ldrh	r3, [r3, #0]
 801310e:	83bb      	strh	r3, [r7, #28]
 8013110:	e037      	b.n	8013182 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013116:	496d      	ldr	r1, [pc, #436]	; (80132cc <etharp_find_entry+0x2d4>)
 8013118:	4613      	mov	r3, r2
 801311a:	005b      	lsls	r3, r3, #1
 801311c:	4413      	add	r3, r2
 801311e:	00db      	lsls	r3, r3, #3
 8013120:	440b      	add	r3, r1
 8013122:	3312      	adds	r3, #18
 8013124:	881b      	ldrh	r3, [r3, #0]
 8013126:	8b7a      	ldrh	r2, [r7, #26]
 8013128:	429a      	cmp	r2, r3
 801312a:	d82a      	bhi.n	8013182 <etharp_find_entry+0x18a>
            old_pending = i;
 801312c:	8c3b      	ldrh	r3, [r7, #32]
 801312e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013134:	4965      	ldr	r1, [pc, #404]	; (80132cc <etharp_find_entry+0x2d4>)
 8013136:	4613      	mov	r3, r2
 8013138:	005b      	lsls	r3, r3, #1
 801313a:	4413      	add	r3, r2
 801313c:	00db      	lsls	r3, r3, #3
 801313e:	440b      	add	r3, r1
 8013140:	3312      	adds	r3, #18
 8013142:	881b      	ldrh	r3, [r3, #0]
 8013144:	837b      	strh	r3, [r7, #26]
 8013146:	e01c      	b.n	8013182 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013148:	7dfb      	ldrb	r3, [r7, #23]
 801314a:	2b01      	cmp	r3, #1
 801314c:	d919      	bls.n	8013182 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801314e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013152:	495e      	ldr	r1, [pc, #376]	; (80132cc <etharp_find_entry+0x2d4>)
 8013154:	4613      	mov	r3, r2
 8013156:	005b      	lsls	r3, r3, #1
 8013158:	4413      	add	r3, r2
 801315a:	00db      	lsls	r3, r3, #3
 801315c:	440b      	add	r3, r1
 801315e:	3312      	adds	r3, #18
 8013160:	881b      	ldrh	r3, [r3, #0]
 8013162:	8b3a      	ldrh	r2, [r7, #24]
 8013164:	429a      	cmp	r2, r3
 8013166:	d80c      	bhi.n	8013182 <etharp_find_entry+0x18a>
            old_stable = i;
 8013168:	8c3b      	ldrh	r3, [r7, #32]
 801316a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801316c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013170:	4956      	ldr	r1, [pc, #344]	; (80132cc <etharp_find_entry+0x2d4>)
 8013172:	4613      	mov	r3, r2
 8013174:	005b      	lsls	r3, r3, #1
 8013176:	4413      	add	r3, r2
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	440b      	add	r3, r1
 801317c:	3312      	adds	r3, #18
 801317e:	881b      	ldrh	r3, [r3, #0]
 8013180:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013182:	8c3b      	ldrh	r3, [r7, #32]
 8013184:	3301      	adds	r3, #1
 8013186:	b29b      	uxth	r3, r3
 8013188:	843b      	strh	r3, [r7, #32]
 801318a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801318e:	2b09      	cmp	r3, #9
 8013190:	f77f af4c 	ble.w	801302c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013194:	7afb      	ldrb	r3, [r7, #11]
 8013196:	f003 0302 	and.w	r3, r3, #2
 801319a:	2b00      	cmp	r3, #0
 801319c:	d108      	bne.n	80131b0 <etharp_find_entry+0x1b8>
 801319e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80131a2:	2b0a      	cmp	r3, #10
 80131a4:	d107      	bne.n	80131b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80131a6:	7afb      	ldrb	r3, [r7, #11]
 80131a8:	f003 0301 	and.w	r3, r3, #1
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d102      	bne.n	80131b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80131b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131b4:	e085      	b.n	80132c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80131b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80131ba:	2b09      	cmp	r3, #9
 80131bc:	dc02      	bgt.n	80131c4 <etharp_find_entry+0x1cc>
    i = empty;
 80131be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131c0:	843b      	strh	r3, [r7, #32]
 80131c2:	e039      	b.n	8013238 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80131c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80131c8:	2b09      	cmp	r3, #9
 80131ca:	dc14      	bgt.n	80131f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80131cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80131d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131d4:	493d      	ldr	r1, [pc, #244]	; (80132cc <etharp_find_entry+0x2d4>)
 80131d6:	4613      	mov	r3, r2
 80131d8:	005b      	lsls	r3, r3, #1
 80131da:	4413      	add	r3, r2
 80131dc:	00db      	lsls	r3, r3, #3
 80131de:	440b      	add	r3, r1
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d018      	beq.n	8013218 <etharp_find_entry+0x220>
 80131e6:	4b3a      	ldr	r3, [pc, #232]	; (80132d0 <etharp_find_entry+0x2d8>)
 80131e8:	f240 126d 	movw	r2, #365	; 0x16d
 80131ec:	493b      	ldr	r1, [pc, #236]	; (80132dc <etharp_find_entry+0x2e4>)
 80131ee:	483a      	ldr	r0, [pc, #232]	; (80132d8 <etharp_find_entry+0x2e0>)
 80131f0:	f00c ff08 	bl	8020004 <iprintf>
 80131f4:	e010      	b.n	8013218 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80131f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80131fa:	2b09      	cmp	r3, #9
 80131fc:	dc02      	bgt.n	8013204 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80131fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013200:	843b      	strh	r3, [r7, #32]
 8013202:	e009      	b.n	8013218 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013204:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013208:	2b09      	cmp	r3, #9
 801320a:	dc02      	bgt.n	8013212 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801320c:	8bfb      	ldrh	r3, [r7, #30]
 801320e:	843b      	strh	r3, [r7, #32]
 8013210:	e002      	b.n	8013218 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013216:	e054      	b.n	80132c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013218:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801321c:	2b09      	cmp	r3, #9
 801321e:	dd06      	ble.n	801322e <etharp_find_entry+0x236>
 8013220:	4b2b      	ldr	r3, [pc, #172]	; (80132d0 <etharp_find_entry+0x2d8>)
 8013222:	f240 127f 	movw	r2, #383	; 0x17f
 8013226:	492e      	ldr	r1, [pc, #184]	; (80132e0 <etharp_find_entry+0x2e8>)
 8013228:	482b      	ldr	r0, [pc, #172]	; (80132d8 <etharp_find_entry+0x2e0>)
 801322a:	f00c feeb 	bl	8020004 <iprintf>
    etharp_free_entry(i);
 801322e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013232:	4618      	mov	r0, r3
 8013234:	f7ff fe06 	bl	8012e44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013238:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801323c:	2b09      	cmp	r3, #9
 801323e:	dd06      	ble.n	801324e <etharp_find_entry+0x256>
 8013240:	4b23      	ldr	r3, [pc, #140]	; (80132d0 <etharp_find_entry+0x2d8>)
 8013242:	f240 1283 	movw	r2, #387	; 0x183
 8013246:	4926      	ldr	r1, [pc, #152]	; (80132e0 <etharp_find_entry+0x2e8>)
 8013248:	4823      	ldr	r0, [pc, #140]	; (80132d8 <etharp_find_entry+0x2e0>)
 801324a:	f00c fedb 	bl	8020004 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801324e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013252:	491e      	ldr	r1, [pc, #120]	; (80132cc <etharp_find_entry+0x2d4>)
 8013254:	4613      	mov	r3, r2
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	4413      	add	r3, r2
 801325a:	00db      	lsls	r3, r3, #3
 801325c:	440b      	add	r3, r1
 801325e:	3314      	adds	r3, #20
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d006      	beq.n	8013274 <etharp_find_entry+0x27c>
 8013266:	4b1a      	ldr	r3, [pc, #104]	; (80132d0 <etharp_find_entry+0x2d8>)
 8013268:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801326c:	491d      	ldr	r1, [pc, #116]	; (80132e4 <etharp_find_entry+0x2ec>)
 801326e:	481a      	ldr	r0, [pc, #104]	; (80132d8 <etharp_find_entry+0x2e0>)
 8013270:	f00c fec8 	bl	8020004 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d00b      	beq.n	8013292 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801327a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	6819      	ldr	r1, [r3, #0]
 8013282:	4812      	ldr	r0, [pc, #72]	; (80132cc <etharp_find_entry+0x2d4>)
 8013284:	4613      	mov	r3, r2
 8013286:	005b      	lsls	r3, r3, #1
 8013288:	4413      	add	r3, r2
 801328a:	00db      	lsls	r3, r3, #3
 801328c:	4403      	add	r3, r0
 801328e:	3304      	adds	r3, #4
 8013290:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013296:	490d      	ldr	r1, [pc, #52]	; (80132cc <etharp_find_entry+0x2d4>)
 8013298:	4613      	mov	r3, r2
 801329a:	005b      	lsls	r3, r3, #1
 801329c:	4413      	add	r3, r2
 801329e:	00db      	lsls	r3, r3, #3
 80132a0:	440b      	add	r3, r1
 80132a2:	3312      	adds	r3, #18
 80132a4:	2200      	movs	r2, #0
 80132a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80132a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132ac:	4907      	ldr	r1, [pc, #28]	; (80132cc <etharp_find_entry+0x2d4>)
 80132ae:	4613      	mov	r3, r2
 80132b0:	005b      	lsls	r3, r3, #1
 80132b2:	4413      	add	r3, r2
 80132b4:	00db      	lsls	r3, r3, #3
 80132b6:	440b      	add	r3, r1
 80132b8:	3308      	adds	r3, #8
 80132ba:	687a      	ldr	r2, [r7, #4]
 80132bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80132be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3728      	adds	r7, #40	; 0x28
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	24004d34 	.word	0x24004d34
 80132d0:	08024fd8 	.word	0x08024fd8
 80132d4:	0802503c 	.word	0x0802503c
 80132d8:	0802507c 	.word	0x0802507c
 80132dc:	080250a4 	.word	0x080250a4
 80132e0:	080250bc 	.word	0x080250bc
 80132e4:	080250d0 	.word	0x080250d0

080132e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b088      	sub	sp, #32
 80132ec:	af02      	add	r7, sp, #8
 80132ee:	60f8      	str	r0, [r7, #12]
 80132f0:	60b9      	str	r1, [r7, #8]
 80132f2:	607a      	str	r2, [r7, #4]
 80132f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80132fc:	2b06      	cmp	r3, #6
 80132fe:	d006      	beq.n	801330e <etharp_update_arp_entry+0x26>
 8013300:	4b48      	ldr	r3, [pc, #288]	; (8013424 <etharp_update_arp_entry+0x13c>)
 8013302:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013306:	4948      	ldr	r1, [pc, #288]	; (8013428 <etharp_update_arp_entry+0x140>)
 8013308:	4848      	ldr	r0, [pc, #288]	; (801342c <etharp_update_arp_entry+0x144>)
 801330a:	f00c fe7b 	bl	8020004 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d012      	beq.n	801333a <etharp_update_arp_entry+0x52>
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d00e      	beq.n	801333a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	68f9      	ldr	r1, [r7, #12]
 8013322:	4618      	mov	r0, r3
 8013324:	f001 facc 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 8013328:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801332a:	2b00      	cmp	r3, #0
 801332c:	d105      	bne.n	801333a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013336:	2be0      	cmp	r3, #224	; 0xe0
 8013338:	d102      	bne.n	8013340 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801333a:	f06f 030f 	mvn.w	r3, #15
 801333e:	e06c      	b.n	801341a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013340:	78fb      	ldrb	r3, [r7, #3]
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	4619      	mov	r1, r3
 8013346:	68b8      	ldr	r0, [r7, #8]
 8013348:	f7ff fe56 	bl	8012ff8 <etharp_find_entry>
 801334c:	4603      	mov	r3, r0
 801334e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013350:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013354:	2b00      	cmp	r3, #0
 8013356:	da02      	bge.n	801335e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013358:	8afb      	ldrh	r3, [r7, #22]
 801335a:	b25b      	sxtb	r3, r3
 801335c:	e05d      	b.n	801341a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801335e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013362:	4933      	ldr	r1, [pc, #204]	; (8013430 <etharp_update_arp_entry+0x148>)
 8013364:	4613      	mov	r3, r2
 8013366:	005b      	lsls	r3, r3, #1
 8013368:	4413      	add	r3, r2
 801336a:	00db      	lsls	r3, r3, #3
 801336c:	440b      	add	r3, r1
 801336e:	3314      	adds	r3, #20
 8013370:	2202      	movs	r2, #2
 8013372:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013378:	492d      	ldr	r1, [pc, #180]	; (8013430 <etharp_update_arp_entry+0x148>)
 801337a:	4613      	mov	r3, r2
 801337c:	005b      	lsls	r3, r3, #1
 801337e:	4413      	add	r3, r2
 8013380:	00db      	lsls	r3, r3, #3
 8013382:	440b      	add	r3, r1
 8013384:	3308      	adds	r3, #8
 8013386:	68fa      	ldr	r2, [r7, #12]
 8013388:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801338a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801338e:	4613      	mov	r3, r2
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	4413      	add	r3, r2
 8013394:	00db      	lsls	r3, r3, #3
 8013396:	3308      	adds	r3, #8
 8013398:	4a25      	ldr	r2, [pc, #148]	; (8013430 <etharp_update_arp_entry+0x148>)
 801339a:	4413      	add	r3, r2
 801339c:	3304      	adds	r3, #4
 801339e:	2206      	movs	r2, #6
 80133a0:	6879      	ldr	r1, [r7, #4]
 80133a2:	4618      	mov	r0, r3
 80133a4:	f00b ff0c 	bl	801f1c0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80133a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133ac:	4920      	ldr	r1, [pc, #128]	; (8013430 <etharp_update_arp_entry+0x148>)
 80133ae:	4613      	mov	r3, r2
 80133b0:	005b      	lsls	r3, r3, #1
 80133b2:	4413      	add	r3, r2
 80133b4:	00db      	lsls	r3, r3, #3
 80133b6:	440b      	add	r3, r1
 80133b8:	3312      	adds	r3, #18
 80133ba:	2200      	movs	r2, #0
 80133bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80133be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133c2:	491b      	ldr	r1, [pc, #108]	; (8013430 <etharp_update_arp_entry+0x148>)
 80133c4:	4613      	mov	r3, r2
 80133c6:	005b      	lsls	r3, r3, #1
 80133c8:	4413      	add	r3, r2
 80133ca:	00db      	lsls	r3, r3, #3
 80133cc:	440b      	add	r3, r1
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d021      	beq.n	8013418 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80133d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133d8:	4915      	ldr	r1, [pc, #84]	; (8013430 <etharp_update_arp_entry+0x148>)
 80133da:	4613      	mov	r3, r2
 80133dc:	005b      	lsls	r3, r3, #1
 80133de:	4413      	add	r3, r2
 80133e0:	00db      	lsls	r3, r3, #3
 80133e2:	440b      	add	r3, r1
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80133e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133ec:	4910      	ldr	r1, [pc, #64]	; (8013430 <etharp_update_arp_entry+0x148>)
 80133ee:	4613      	mov	r3, r2
 80133f0:	005b      	lsls	r3, r3, #1
 80133f2:	4413      	add	r3, r2
 80133f4:	00db      	lsls	r3, r3, #3
 80133f6:	440b      	add	r3, r1
 80133f8:	2200      	movs	r2, #0
 80133fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013406:	9300      	str	r3, [sp, #0]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6939      	ldr	r1, [r7, #16]
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f000 fcf3 	bl	8013df8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013412:	6938      	ldr	r0, [r7, #16]
 8013414:	f003 fbe4 	bl	8016be0 <pbuf_free>
  }
  return ERR_OK;
 8013418:	2300      	movs	r3, #0
}
 801341a:	4618      	mov	r0, r3
 801341c:	3718      	adds	r7, #24
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	08024fd8 	.word	0x08024fd8
 8013428:	080250fc 	.word	0x080250fc
 801342c:	0802507c 	.word	0x0802507c
 8013430:	24004d34 	.word	0x24004d34

08013434 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b084      	sub	sp, #16
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801343c:	2300      	movs	r3, #0
 801343e:	60fb      	str	r3, [r7, #12]
 8013440:	e01e      	b.n	8013480 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013442:	4913      	ldr	r1, [pc, #76]	; (8013490 <etharp_cleanup_netif+0x5c>)
 8013444:	68fa      	ldr	r2, [r7, #12]
 8013446:	4613      	mov	r3, r2
 8013448:	005b      	lsls	r3, r3, #1
 801344a:	4413      	add	r3, r2
 801344c:	00db      	lsls	r3, r3, #3
 801344e:	440b      	add	r3, r1
 8013450:	3314      	adds	r3, #20
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013456:	7afb      	ldrb	r3, [r7, #11]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d00e      	beq.n	801347a <etharp_cleanup_netif+0x46>
 801345c:	490c      	ldr	r1, [pc, #48]	; (8013490 <etharp_cleanup_netif+0x5c>)
 801345e:	68fa      	ldr	r2, [r7, #12]
 8013460:	4613      	mov	r3, r2
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	4413      	add	r3, r2
 8013466:	00db      	lsls	r3, r3, #3
 8013468:	440b      	add	r3, r1
 801346a:	3308      	adds	r3, #8
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	687a      	ldr	r2, [r7, #4]
 8013470:	429a      	cmp	r2, r3
 8013472:	d102      	bne.n	801347a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f7ff fce5 	bl	8012e44 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	3301      	adds	r3, #1
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	2b09      	cmp	r3, #9
 8013484:	dddd      	ble.n	8013442 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013486:	bf00      	nop
 8013488:	bf00      	nop
 801348a:	3710      	adds	r7, #16
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}
 8013490:	24004d34 	.word	0x24004d34

08013494 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013494:	b5b0      	push	{r4, r5, r7, lr}
 8013496:	b08a      	sub	sp, #40	; 0x28
 8013498:	af04      	add	r7, sp, #16
 801349a:	6078      	str	r0, [r7, #4]
 801349c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d107      	bne.n	80134b4 <etharp_input+0x20>
 80134a4:	4b3d      	ldr	r3, [pc, #244]	; (801359c <etharp_input+0x108>)
 80134a6:	f240 228a 	movw	r2, #650	; 0x28a
 80134aa:	493d      	ldr	r1, [pc, #244]	; (80135a0 <etharp_input+0x10c>)
 80134ac:	483d      	ldr	r0, [pc, #244]	; (80135a4 <etharp_input+0x110>)
 80134ae:	f00c fda9 	bl	8020004 <iprintf>
 80134b2:	e06f      	b.n	8013594 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	685b      	ldr	r3, [r3, #4]
 80134b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	b29b      	uxth	r3, r3
 80134c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134c4:	d10c      	bne.n	80134e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80134ca:	2b06      	cmp	r3, #6
 80134cc:	d108      	bne.n	80134e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80134d2:	2b04      	cmp	r3, #4
 80134d4:	d104      	bne.n	80134e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	885b      	ldrh	r3, [r3, #2]
 80134da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80134dc:	2b08      	cmp	r3, #8
 80134de:	d003      	beq.n	80134e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f003 fb7d 	bl	8016be0 <pbuf_free>
    return;
 80134e6:	e055      	b.n	8013594 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	330e      	adds	r3, #14
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	3318      	adds	r3, #24
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	3304      	adds	r3, #4
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d102      	bne.n	8013508 <etharp_input+0x74>
    for_us = 0;
 8013502:	2300      	movs	r3, #0
 8013504:	75fb      	strb	r3, [r7, #23]
 8013506:	e009      	b.n	801351c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013508:	68ba      	ldr	r2, [r7, #8]
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	3304      	adds	r3, #4
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	429a      	cmp	r2, r3
 8013512:	bf0c      	ite	eq
 8013514:	2301      	moveq	r3, #1
 8013516:	2300      	movne	r3, #0
 8013518:	b2db      	uxtb	r3, r3
 801351a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	f103 0208 	add.w	r2, r3, #8
 8013522:	7dfb      	ldrb	r3, [r7, #23]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d001      	beq.n	801352c <etharp_input+0x98>
 8013528:	2301      	movs	r3, #1
 801352a:	e000      	b.n	801352e <etharp_input+0x9a>
 801352c:	2302      	movs	r3, #2
 801352e:	f107 010c 	add.w	r1, r7, #12
 8013532:	6838      	ldr	r0, [r7, #0]
 8013534:	f7ff fed8 	bl	80132e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	88db      	ldrh	r3, [r3, #6]
 801353c:	b29b      	uxth	r3, r3
 801353e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013542:	d003      	beq.n	801354c <etharp_input+0xb8>
 8013544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013548:	d01e      	beq.n	8013588 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801354a:	e020      	b.n	801358e <etharp_input+0xfa>
      if (for_us) {
 801354c:	7dfb      	ldrb	r3, [r7, #23]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d01c      	beq.n	801358c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013568:	693a      	ldr	r2, [r7, #16]
 801356a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801356c:	2102      	movs	r1, #2
 801356e:	9103      	str	r1, [sp, #12]
 8013570:	f107 010c 	add.w	r1, r7, #12
 8013574:	9102      	str	r1, [sp, #8]
 8013576:	9201      	str	r2, [sp, #4]
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	462b      	mov	r3, r5
 801357c:	4622      	mov	r2, r4
 801357e:	4601      	mov	r1, r0
 8013580:	6838      	ldr	r0, [r7, #0]
 8013582:	f000 faeb 	bl	8013b5c <etharp_raw>
      break;
 8013586:	e001      	b.n	801358c <etharp_input+0xf8>
      break;
 8013588:	bf00      	nop
 801358a:	e000      	b.n	801358e <etharp_input+0xfa>
      break;
 801358c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f003 fb26 	bl	8016be0 <pbuf_free>
}
 8013594:	3718      	adds	r7, #24
 8013596:	46bd      	mov	sp, r7
 8013598:	bdb0      	pop	{r4, r5, r7, pc}
 801359a:	bf00      	nop
 801359c:	08024fd8 	.word	0x08024fd8
 80135a0:	08025154 	.word	0x08025154
 80135a4:	0802507c 	.word	0x0802507c

080135a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b086      	sub	sp, #24
 80135ac:	af02      	add	r7, sp, #8
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	4613      	mov	r3, r2
 80135b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80135b6:	79fa      	ldrb	r2, [r7, #7]
 80135b8:	4944      	ldr	r1, [pc, #272]	; (80136cc <etharp_output_to_arp_index+0x124>)
 80135ba:	4613      	mov	r3, r2
 80135bc:	005b      	lsls	r3, r3, #1
 80135be:	4413      	add	r3, r2
 80135c0:	00db      	lsls	r3, r3, #3
 80135c2:	440b      	add	r3, r1
 80135c4:	3314      	adds	r3, #20
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d806      	bhi.n	80135da <etharp_output_to_arp_index+0x32>
 80135cc:	4b40      	ldr	r3, [pc, #256]	; (80136d0 <etharp_output_to_arp_index+0x128>)
 80135ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80135d2:	4940      	ldr	r1, [pc, #256]	; (80136d4 <etharp_output_to_arp_index+0x12c>)
 80135d4:	4840      	ldr	r0, [pc, #256]	; (80136d8 <etharp_output_to_arp_index+0x130>)
 80135d6:	f00c fd15 	bl	8020004 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80135da:	79fa      	ldrb	r2, [r7, #7]
 80135dc:	493b      	ldr	r1, [pc, #236]	; (80136cc <etharp_output_to_arp_index+0x124>)
 80135de:	4613      	mov	r3, r2
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	4413      	add	r3, r2
 80135e4:	00db      	lsls	r3, r3, #3
 80135e6:	440b      	add	r3, r1
 80135e8:	3314      	adds	r3, #20
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	2b02      	cmp	r3, #2
 80135ee:	d153      	bne.n	8013698 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80135f0:	79fa      	ldrb	r2, [r7, #7]
 80135f2:	4936      	ldr	r1, [pc, #216]	; (80136cc <etharp_output_to_arp_index+0x124>)
 80135f4:	4613      	mov	r3, r2
 80135f6:	005b      	lsls	r3, r3, #1
 80135f8:	4413      	add	r3, r2
 80135fa:	00db      	lsls	r3, r3, #3
 80135fc:	440b      	add	r3, r1
 80135fe:	3312      	adds	r3, #18
 8013600:	881b      	ldrh	r3, [r3, #0]
 8013602:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013606:	d919      	bls.n	801363c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013608:	79fa      	ldrb	r2, [r7, #7]
 801360a:	4613      	mov	r3, r2
 801360c:	005b      	lsls	r3, r3, #1
 801360e:	4413      	add	r3, r2
 8013610:	00db      	lsls	r3, r3, #3
 8013612:	4a2e      	ldr	r2, [pc, #184]	; (80136cc <etharp_output_to_arp_index+0x124>)
 8013614:	4413      	add	r3, r2
 8013616:	3304      	adds	r3, #4
 8013618:	4619      	mov	r1, r3
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f000 fb4c 	bl	8013cb8 <etharp_request>
 8013620:	4603      	mov	r3, r0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d138      	bne.n	8013698 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013626:	79fa      	ldrb	r2, [r7, #7]
 8013628:	4928      	ldr	r1, [pc, #160]	; (80136cc <etharp_output_to_arp_index+0x124>)
 801362a:	4613      	mov	r3, r2
 801362c:	005b      	lsls	r3, r3, #1
 801362e:	4413      	add	r3, r2
 8013630:	00db      	lsls	r3, r3, #3
 8013632:	440b      	add	r3, r1
 8013634:	3314      	adds	r3, #20
 8013636:	2203      	movs	r2, #3
 8013638:	701a      	strb	r2, [r3, #0]
 801363a:	e02d      	b.n	8013698 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801363c:	79fa      	ldrb	r2, [r7, #7]
 801363e:	4923      	ldr	r1, [pc, #140]	; (80136cc <etharp_output_to_arp_index+0x124>)
 8013640:	4613      	mov	r3, r2
 8013642:	005b      	lsls	r3, r3, #1
 8013644:	4413      	add	r3, r2
 8013646:	00db      	lsls	r3, r3, #3
 8013648:	440b      	add	r3, r1
 801364a:	3312      	adds	r3, #18
 801364c:	881b      	ldrh	r3, [r3, #0]
 801364e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013652:	d321      	bcc.n	8013698 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013654:	79fa      	ldrb	r2, [r7, #7]
 8013656:	4613      	mov	r3, r2
 8013658:	005b      	lsls	r3, r3, #1
 801365a:	4413      	add	r3, r2
 801365c:	00db      	lsls	r3, r3, #3
 801365e:	4a1b      	ldr	r2, [pc, #108]	; (80136cc <etharp_output_to_arp_index+0x124>)
 8013660:	4413      	add	r3, r2
 8013662:	1d19      	adds	r1, r3, #4
 8013664:	79fa      	ldrb	r2, [r7, #7]
 8013666:	4613      	mov	r3, r2
 8013668:	005b      	lsls	r3, r3, #1
 801366a:	4413      	add	r3, r2
 801366c:	00db      	lsls	r3, r3, #3
 801366e:	3308      	adds	r3, #8
 8013670:	4a16      	ldr	r2, [pc, #88]	; (80136cc <etharp_output_to_arp_index+0x124>)
 8013672:	4413      	add	r3, r2
 8013674:	3304      	adds	r3, #4
 8013676:	461a      	mov	r2, r3
 8013678:	68f8      	ldr	r0, [r7, #12]
 801367a:	f000 fafb 	bl	8013c74 <etharp_request_dst>
 801367e:	4603      	mov	r3, r0
 8013680:	2b00      	cmp	r3, #0
 8013682:	d109      	bne.n	8013698 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013684:	79fa      	ldrb	r2, [r7, #7]
 8013686:	4911      	ldr	r1, [pc, #68]	; (80136cc <etharp_output_to_arp_index+0x124>)
 8013688:	4613      	mov	r3, r2
 801368a:	005b      	lsls	r3, r3, #1
 801368c:	4413      	add	r3, r2
 801368e:	00db      	lsls	r3, r3, #3
 8013690:	440b      	add	r3, r1
 8013692:	3314      	adds	r3, #20
 8013694:	2203      	movs	r2, #3
 8013696:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801369e:	79fa      	ldrb	r2, [r7, #7]
 80136a0:	4613      	mov	r3, r2
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	4413      	add	r3, r2
 80136a6:	00db      	lsls	r3, r3, #3
 80136a8:	3308      	adds	r3, #8
 80136aa:	4a08      	ldr	r2, [pc, #32]	; (80136cc <etharp_output_to_arp_index+0x124>)
 80136ac:	4413      	add	r3, r2
 80136ae:	3304      	adds	r3, #4
 80136b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80136b4:	9200      	str	r2, [sp, #0]
 80136b6:	460a      	mov	r2, r1
 80136b8:	68b9      	ldr	r1, [r7, #8]
 80136ba:	68f8      	ldr	r0, [r7, #12]
 80136bc:	f000 fb9c 	bl	8013df8 <ethernet_output>
 80136c0:	4603      	mov	r3, r0
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3710      	adds	r7, #16
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	24004d34 	.word	0x24004d34
 80136d0:	08024fd8 	.word	0x08024fd8
 80136d4:	08025174 	.word	0x08025174
 80136d8:	0802507c 	.word	0x0802507c

080136dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b08a      	sub	sp, #40	; 0x28
 80136e0:	af02      	add	r7, sp, #8
 80136e2:	60f8      	str	r0, [r7, #12]
 80136e4:	60b9      	str	r1, [r7, #8]
 80136e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d106      	bne.n	8013700 <etharp_output+0x24>
 80136f2:	4b73      	ldr	r3, [pc, #460]	; (80138c0 <etharp_output+0x1e4>)
 80136f4:	f240 321e 	movw	r2, #798	; 0x31e
 80136f8:	4972      	ldr	r1, [pc, #456]	; (80138c4 <etharp_output+0x1e8>)
 80136fa:	4873      	ldr	r0, [pc, #460]	; (80138c8 <etharp_output+0x1ec>)
 80136fc:	f00c fc82 	bl	8020004 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d106      	bne.n	8013714 <etharp_output+0x38>
 8013706:	4b6e      	ldr	r3, [pc, #440]	; (80138c0 <etharp_output+0x1e4>)
 8013708:	f240 321f 	movw	r2, #799	; 0x31f
 801370c:	496f      	ldr	r1, [pc, #444]	; (80138cc <etharp_output+0x1f0>)
 801370e:	486e      	ldr	r0, [pc, #440]	; (80138c8 <etharp_output+0x1ec>)
 8013710:	f00c fc78 	bl	8020004 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d106      	bne.n	8013728 <etharp_output+0x4c>
 801371a:	4b69      	ldr	r3, [pc, #420]	; (80138c0 <etharp_output+0x1e4>)
 801371c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013720:	496b      	ldr	r1, [pc, #428]	; (80138d0 <etharp_output+0x1f4>)
 8013722:	4869      	ldr	r0, [pc, #420]	; (80138c8 <etharp_output+0x1ec>)
 8013724:	f00c fc6e 	bl	8020004 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	68f9      	ldr	r1, [r7, #12]
 801372e:	4618      	mov	r0, r3
 8013730:	f001 f8c6 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 8013734:	4603      	mov	r3, r0
 8013736:	2b00      	cmp	r3, #0
 8013738:	d002      	beq.n	8013740 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801373a:	4b66      	ldr	r3, [pc, #408]	; (80138d4 <etharp_output+0x1f8>)
 801373c:	61fb      	str	r3, [r7, #28]
 801373e:	e0af      	b.n	80138a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013748:	2be0      	cmp	r3, #224	; 0xe0
 801374a:	d118      	bne.n	801377e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801374c:	2301      	movs	r3, #1
 801374e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013750:	2300      	movs	r3, #0
 8013752:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013754:	235e      	movs	r3, #94	; 0x5e
 8013756:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	3301      	adds	r3, #1
 801375c:	781b      	ldrb	r3, [r3, #0]
 801375e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013762:	b2db      	uxtb	r3, r3
 8013764:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	3302      	adds	r3, #2
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	3303      	adds	r3, #3
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013776:	f107 0310 	add.w	r3, r7, #16
 801377a:	61fb      	str	r3, [r7, #28]
 801377c:	e090      	b.n	80138a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681a      	ldr	r2, [r3, #0]
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	3304      	adds	r3, #4
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	405a      	eors	r2, r3
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	3308      	adds	r3, #8
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4013      	ands	r3, r2
 8013792:	2b00      	cmp	r3, #0
 8013794:	d012      	beq.n	80137bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801379c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80137a0:	4293      	cmp	r3, r2
 80137a2:	d00b      	beq.n	80137bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	330c      	adds	r3, #12
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d003      	beq.n	80137b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	330c      	adds	r3, #12
 80137b2:	61bb      	str	r3, [r7, #24]
 80137b4:	e002      	b.n	80137bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80137b6:	f06f 0303 	mvn.w	r3, #3
 80137ba:	e07d      	b.n	80138b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80137bc:	4b46      	ldr	r3, [pc, #280]	; (80138d8 <etharp_output+0x1fc>)
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	4619      	mov	r1, r3
 80137c2:	4a46      	ldr	r2, [pc, #280]	; (80138dc <etharp_output+0x200>)
 80137c4:	460b      	mov	r3, r1
 80137c6:	005b      	lsls	r3, r3, #1
 80137c8:	440b      	add	r3, r1
 80137ca:	00db      	lsls	r3, r3, #3
 80137cc:	4413      	add	r3, r2
 80137ce:	3314      	adds	r3, #20
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	2b01      	cmp	r3, #1
 80137d4:	d925      	bls.n	8013822 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80137d6:	4b40      	ldr	r3, [pc, #256]	; (80138d8 <etharp_output+0x1fc>)
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	4619      	mov	r1, r3
 80137dc:	4a3f      	ldr	r2, [pc, #252]	; (80138dc <etharp_output+0x200>)
 80137de:	460b      	mov	r3, r1
 80137e0:	005b      	lsls	r3, r3, #1
 80137e2:	440b      	add	r3, r1
 80137e4:	00db      	lsls	r3, r3, #3
 80137e6:	4413      	add	r3, r2
 80137e8:	3308      	adds	r3, #8
 80137ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80137ec:	68fa      	ldr	r2, [r7, #12]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d117      	bne.n	8013822 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	681a      	ldr	r2, [r3, #0]
 80137f6:	4b38      	ldr	r3, [pc, #224]	; (80138d8 <etharp_output+0x1fc>)
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	4618      	mov	r0, r3
 80137fc:	4937      	ldr	r1, [pc, #220]	; (80138dc <etharp_output+0x200>)
 80137fe:	4603      	mov	r3, r0
 8013800:	005b      	lsls	r3, r3, #1
 8013802:	4403      	add	r3, r0
 8013804:	00db      	lsls	r3, r3, #3
 8013806:	440b      	add	r3, r1
 8013808:	3304      	adds	r3, #4
 801380a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801380c:	429a      	cmp	r2, r3
 801380e:	d108      	bne.n	8013822 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013810:	4b31      	ldr	r3, [pc, #196]	; (80138d8 <etharp_output+0x1fc>)
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	461a      	mov	r2, r3
 8013816:	68b9      	ldr	r1, [r7, #8]
 8013818:	68f8      	ldr	r0, [r7, #12]
 801381a:	f7ff fec5 	bl	80135a8 <etharp_output_to_arp_index>
 801381e:	4603      	mov	r3, r0
 8013820:	e04a      	b.n	80138b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013822:	2300      	movs	r3, #0
 8013824:	75fb      	strb	r3, [r7, #23]
 8013826:	e031      	b.n	801388c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013828:	7dfa      	ldrb	r2, [r7, #23]
 801382a:	492c      	ldr	r1, [pc, #176]	; (80138dc <etharp_output+0x200>)
 801382c:	4613      	mov	r3, r2
 801382e:	005b      	lsls	r3, r3, #1
 8013830:	4413      	add	r3, r2
 8013832:	00db      	lsls	r3, r3, #3
 8013834:	440b      	add	r3, r1
 8013836:	3314      	adds	r3, #20
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	2b01      	cmp	r3, #1
 801383c:	d923      	bls.n	8013886 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801383e:	7dfa      	ldrb	r2, [r7, #23]
 8013840:	4926      	ldr	r1, [pc, #152]	; (80138dc <etharp_output+0x200>)
 8013842:	4613      	mov	r3, r2
 8013844:	005b      	lsls	r3, r3, #1
 8013846:	4413      	add	r3, r2
 8013848:	00db      	lsls	r3, r3, #3
 801384a:	440b      	add	r3, r1
 801384c:	3308      	adds	r3, #8
 801384e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013850:	68fa      	ldr	r2, [r7, #12]
 8013852:	429a      	cmp	r2, r3
 8013854:	d117      	bne.n	8013886 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	6819      	ldr	r1, [r3, #0]
 801385a:	7dfa      	ldrb	r2, [r7, #23]
 801385c:	481f      	ldr	r0, [pc, #124]	; (80138dc <etharp_output+0x200>)
 801385e:	4613      	mov	r3, r2
 8013860:	005b      	lsls	r3, r3, #1
 8013862:	4413      	add	r3, r2
 8013864:	00db      	lsls	r3, r3, #3
 8013866:	4403      	add	r3, r0
 8013868:	3304      	adds	r3, #4
 801386a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801386c:	4299      	cmp	r1, r3
 801386e:	d10a      	bne.n	8013886 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013870:	4a19      	ldr	r2, [pc, #100]	; (80138d8 <etharp_output+0x1fc>)
 8013872:	7dfb      	ldrb	r3, [r7, #23]
 8013874:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013876:	7dfb      	ldrb	r3, [r7, #23]
 8013878:	461a      	mov	r2, r3
 801387a:	68b9      	ldr	r1, [r7, #8]
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f7ff fe93 	bl	80135a8 <etharp_output_to_arp_index>
 8013882:	4603      	mov	r3, r0
 8013884:	e018      	b.n	80138b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013886:	7dfb      	ldrb	r3, [r7, #23]
 8013888:	3301      	adds	r3, #1
 801388a:	75fb      	strb	r3, [r7, #23]
 801388c:	7dfb      	ldrb	r3, [r7, #23]
 801388e:	2b09      	cmp	r3, #9
 8013890:	d9ca      	bls.n	8013828 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013892:	68ba      	ldr	r2, [r7, #8]
 8013894:	69b9      	ldr	r1, [r7, #24]
 8013896:	68f8      	ldr	r0, [r7, #12]
 8013898:	f000 f822 	bl	80138e0 <etharp_query>
 801389c:	4603      	mov	r3, r0
 801389e:	e00b      	b.n	80138b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80138a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138aa:	9300      	str	r3, [sp, #0]
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	68b9      	ldr	r1, [r7, #8]
 80138b0:	68f8      	ldr	r0, [r7, #12]
 80138b2:	f000 faa1 	bl	8013df8 <ethernet_output>
 80138b6:	4603      	mov	r3, r0
}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3720      	adds	r7, #32
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}
 80138c0:	08024fd8 	.word	0x08024fd8
 80138c4:	08025154 	.word	0x08025154
 80138c8:	0802507c 	.word	0x0802507c
 80138cc:	080251a4 	.word	0x080251a4
 80138d0:	08025144 	.word	0x08025144
 80138d4:	08028248 	.word	0x08028248
 80138d8:	24004e24 	.word	0x24004e24
 80138dc:	24004d34 	.word	0x24004d34

080138e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b08c      	sub	sp, #48	; 0x30
 80138e4:	af02      	add	r7, sp, #8
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	3326      	adds	r3, #38	; 0x26
 80138f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80138f2:	23ff      	movs	r3, #255	; 0xff
 80138f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80138f8:	2300      	movs	r3, #0
 80138fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	68f9      	ldr	r1, [r7, #12]
 8013902:	4618      	mov	r0, r3
 8013904:	f000 ffdc 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 8013908:	4603      	mov	r3, r0
 801390a:	2b00      	cmp	r3, #0
 801390c:	d10c      	bne.n	8013928 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013916:	2be0      	cmp	r3, #224	; 0xe0
 8013918:	d006      	beq.n	8013928 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d003      	beq.n	8013928 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d102      	bne.n	801392e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013928:	f06f 030f 	mvn.w	r3, #15
 801392c:	e101      	b.n	8013b32 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801392e:	68fa      	ldr	r2, [r7, #12]
 8013930:	2101      	movs	r1, #1
 8013932:	68b8      	ldr	r0, [r7, #8]
 8013934:	f7ff fb60 	bl	8012ff8 <etharp_find_entry>
 8013938:	4603      	mov	r3, r0
 801393a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801393c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013940:	2b00      	cmp	r3, #0
 8013942:	da02      	bge.n	801394a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013944:	8a7b      	ldrh	r3, [r7, #18]
 8013946:	b25b      	sxtb	r3, r3
 8013948:	e0f3      	b.n	8013b32 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801394a:	8a7b      	ldrh	r3, [r7, #18]
 801394c:	2b7e      	cmp	r3, #126	; 0x7e
 801394e:	d906      	bls.n	801395e <etharp_query+0x7e>
 8013950:	4b7a      	ldr	r3, [pc, #488]	; (8013b3c <etharp_query+0x25c>)
 8013952:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013956:	497a      	ldr	r1, [pc, #488]	; (8013b40 <etharp_query+0x260>)
 8013958:	487a      	ldr	r0, [pc, #488]	; (8013b44 <etharp_query+0x264>)
 801395a:	f00c fb53 	bl	8020004 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801395e:	8a7b      	ldrh	r3, [r7, #18]
 8013960:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013962:	7c7a      	ldrb	r2, [r7, #17]
 8013964:	4978      	ldr	r1, [pc, #480]	; (8013b48 <etharp_query+0x268>)
 8013966:	4613      	mov	r3, r2
 8013968:	005b      	lsls	r3, r3, #1
 801396a:	4413      	add	r3, r2
 801396c:	00db      	lsls	r3, r3, #3
 801396e:	440b      	add	r3, r1
 8013970:	3314      	adds	r3, #20
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d115      	bne.n	80139a4 <etharp_query+0xc4>
    is_new_entry = 1;
 8013978:	2301      	movs	r3, #1
 801397a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801397c:	7c7a      	ldrb	r2, [r7, #17]
 801397e:	4972      	ldr	r1, [pc, #456]	; (8013b48 <etharp_query+0x268>)
 8013980:	4613      	mov	r3, r2
 8013982:	005b      	lsls	r3, r3, #1
 8013984:	4413      	add	r3, r2
 8013986:	00db      	lsls	r3, r3, #3
 8013988:	440b      	add	r3, r1
 801398a:	3314      	adds	r3, #20
 801398c:	2201      	movs	r2, #1
 801398e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013990:	7c7a      	ldrb	r2, [r7, #17]
 8013992:	496d      	ldr	r1, [pc, #436]	; (8013b48 <etharp_query+0x268>)
 8013994:	4613      	mov	r3, r2
 8013996:	005b      	lsls	r3, r3, #1
 8013998:	4413      	add	r3, r2
 801399a:	00db      	lsls	r3, r3, #3
 801399c:	440b      	add	r3, r1
 801399e:	3308      	adds	r3, #8
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80139a4:	7c7a      	ldrb	r2, [r7, #17]
 80139a6:	4968      	ldr	r1, [pc, #416]	; (8013b48 <etharp_query+0x268>)
 80139a8:	4613      	mov	r3, r2
 80139aa:	005b      	lsls	r3, r3, #1
 80139ac:	4413      	add	r3, r2
 80139ae:	00db      	lsls	r3, r3, #3
 80139b0:	440b      	add	r3, r1
 80139b2:	3314      	adds	r3, #20
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d011      	beq.n	80139de <etharp_query+0xfe>
 80139ba:	7c7a      	ldrb	r2, [r7, #17]
 80139bc:	4962      	ldr	r1, [pc, #392]	; (8013b48 <etharp_query+0x268>)
 80139be:	4613      	mov	r3, r2
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	4413      	add	r3, r2
 80139c4:	00db      	lsls	r3, r3, #3
 80139c6:	440b      	add	r3, r1
 80139c8:	3314      	adds	r3, #20
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d806      	bhi.n	80139de <etharp_query+0xfe>
 80139d0:	4b5a      	ldr	r3, [pc, #360]	; (8013b3c <etharp_query+0x25c>)
 80139d2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80139d6:	495d      	ldr	r1, [pc, #372]	; (8013b4c <etharp_query+0x26c>)
 80139d8:	485a      	ldr	r0, [pc, #360]	; (8013b44 <etharp_query+0x264>)
 80139da:	f00c fb13 	bl	8020004 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80139de:	6a3b      	ldr	r3, [r7, #32]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d102      	bne.n	80139ea <etharp_query+0x10a>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d10c      	bne.n	8013a04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80139ea:	68b9      	ldr	r1, [r7, #8]
 80139ec:	68f8      	ldr	r0, [r7, #12]
 80139ee:	f000 f963 	bl	8013cb8 <etharp_request>
 80139f2:	4603      	mov	r3, r0
 80139f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d102      	bne.n	8013a04 <etharp_query+0x124>
      return result;
 80139fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013a02:	e096      	b.n	8013b32 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d106      	bne.n	8013a18 <etharp_query+0x138>
 8013a0a:	4b4c      	ldr	r3, [pc, #304]	; (8013b3c <etharp_query+0x25c>)
 8013a0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013a10:	494f      	ldr	r1, [pc, #316]	; (8013b50 <etharp_query+0x270>)
 8013a12:	484c      	ldr	r0, [pc, #304]	; (8013b44 <etharp_query+0x264>)
 8013a14:	f00c faf6 	bl	8020004 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013a18:	7c7a      	ldrb	r2, [r7, #17]
 8013a1a:	494b      	ldr	r1, [pc, #300]	; (8013b48 <etharp_query+0x268>)
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	005b      	lsls	r3, r3, #1
 8013a20:	4413      	add	r3, r2
 8013a22:	00db      	lsls	r3, r3, #3
 8013a24:	440b      	add	r3, r1
 8013a26:	3314      	adds	r3, #20
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	2b01      	cmp	r3, #1
 8013a2c:	d917      	bls.n	8013a5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013a2e:	4a49      	ldr	r2, [pc, #292]	; (8013b54 <etharp_query+0x274>)
 8013a30:	7c7b      	ldrb	r3, [r7, #17]
 8013a32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013a34:	7c7a      	ldrb	r2, [r7, #17]
 8013a36:	4613      	mov	r3, r2
 8013a38:	005b      	lsls	r3, r3, #1
 8013a3a:	4413      	add	r3, r2
 8013a3c:	00db      	lsls	r3, r3, #3
 8013a3e:	3308      	adds	r3, #8
 8013a40:	4a41      	ldr	r2, [pc, #260]	; (8013b48 <etharp_query+0x268>)
 8013a42:	4413      	add	r3, r2
 8013a44:	3304      	adds	r3, #4
 8013a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013a4a:	9200      	str	r2, [sp, #0]
 8013a4c:	697a      	ldr	r2, [r7, #20]
 8013a4e:	6879      	ldr	r1, [r7, #4]
 8013a50:	68f8      	ldr	r0, [r7, #12]
 8013a52:	f000 f9d1 	bl	8013df8 <ethernet_output>
 8013a56:	4603      	mov	r3, r0
 8013a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a5c:	e067      	b.n	8013b2e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013a5e:	7c7a      	ldrb	r2, [r7, #17]
 8013a60:	4939      	ldr	r1, [pc, #228]	; (8013b48 <etharp_query+0x268>)
 8013a62:	4613      	mov	r3, r2
 8013a64:	005b      	lsls	r3, r3, #1
 8013a66:	4413      	add	r3, r2
 8013a68:	00db      	lsls	r3, r3, #3
 8013a6a:	440b      	add	r3, r1
 8013a6c:	3314      	adds	r3, #20
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d15c      	bne.n	8013b2e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013a74:	2300      	movs	r3, #0
 8013a76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013a7c:	e01c      	b.n	8013ab8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013a7e:	69fb      	ldr	r3, [r7, #28]
 8013a80:	895a      	ldrh	r2, [r3, #10]
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	891b      	ldrh	r3, [r3, #8]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d10a      	bne.n	8013aa0 <etharp_query+0x1c0>
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d006      	beq.n	8013aa0 <etharp_query+0x1c0>
 8013a92:	4b2a      	ldr	r3, [pc, #168]	; (8013b3c <etharp_query+0x25c>)
 8013a94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013a98:	492f      	ldr	r1, [pc, #188]	; (8013b58 <etharp_query+0x278>)
 8013a9a:	482a      	ldr	r0, [pc, #168]	; (8013b44 <etharp_query+0x264>)
 8013a9c:	f00c fab2 	bl	8020004 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	7b1b      	ldrb	r3, [r3, #12]
 8013aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d002      	beq.n	8013ab2 <etharp_query+0x1d2>
        copy_needed = 1;
 8013aac:	2301      	movs	r3, #1
 8013aae:	61bb      	str	r3, [r7, #24]
        break;
 8013ab0:	e005      	b.n	8013abe <etharp_query+0x1de>
      }
      p = p->next;
 8013ab2:	69fb      	ldr	r3, [r7, #28]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d1df      	bne.n	8013a7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d007      	beq.n	8013ad4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013aca:	200e      	movs	r0, #14
 8013acc:	f003 fb0e 	bl	80170ec <pbuf_clone>
 8013ad0:	61f8      	str	r0, [r7, #28]
 8013ad2:	e004      	b.n	8013ade <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ad8:	69f8      	ldr	r0, [r7, #28]
 8013ada:	f003 f921 	bl	8016d20 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d021      	beq.n	8013b28 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013ae4:	7c7a      	ldrb	r2, [r7, #17]
 8013ae6:	4918      	ldr	r1, [pc, #96]	; (8013b48 <etharp_query+0x268>)
 8013ae8:	4613      	mov	r3, r2
 8013aea:	005b      	lsls	r3, r3, #1
 8013aec:	4413      	add	r3, r2
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	440b      	add	r3, r1
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d00a      	beq.n	8013b0e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013af8:	7c7a      	ldrb	r2, [r7, #17]
 8013afa:	4913      	ldr	r1, [pc, #76]	; (8013b48 <etharp_query+0x268>)
 8013afc:	4613      	mov	r3, r2
 8013afe:	005b      	lsls	r3, r3, #1
 8013b00:	4413      	add	r3, r2
 8013b02:	00db      	lsls	r3, r3, #3
 8013b04:	440b      	add	r3, r1
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f003 f869 	bl	8016be0 <pbuf_free>
      }
      arp_table[i].q = p;
 8013b0e:	7c7a      	ldrb	r2, [r7, #17]
 8013b10:	490d      	ldr	r1, [pc, #52]	; (8013b48 <etharp_query+0x268>)
 8013b12:	4613      	mov	r3, r2
 8013b14:	005b      	lsls	r3, r3, #1
 8013b16:	4413      	add	r3, r2
 8013b18:	00db      	lsls	r3, r3, #3
 8013b1a:	440b      	add	r3, r1
 8013b1c:	69fa      	ldr	r2, [r7, #28]
 8013b1e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013b20:	2300      	movs	r3, #0
 8013b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b26:	e002      	b.n	8013b2e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013b28:	23ff      	movs	r3, #255	; 0xff
 8013b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013b2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3728      	adds	r7, #40	; 0x28
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}
 8013b3a:	bf00      	nop
 8013b3c:	08024fd8 	.word	0x08024fd8
 8013b40:	080251b0 	.word	0x080251b0
 8013b44:	0802507c 	.word	0x0802507c
 8013b48:	24004d34 	.word	0x24004d34
 8013b4c:	080251c0 	.word	0x080251c0
 8013b50:	080251a4 	.word	0x080251a4
 8013b54:	24004e24 	.word	0x24004e24
 8013b58:	080251e8 	.word	0x080251e8

08013b5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b08a      	sub	sp, #40	; 0x28
 8013b60:	af02      	add	r7, sp, #8
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	607a      	str	r2, [r7, #4]
 8013b68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d106      	bne.n	8013b82 <etharp_raw+0x26>
 8013b74:	4b3a      	ldr	r3, [pc, #232]	; (8013c60 <etharp_raw+0x104>)
 8013b76:	f240 4257 	movw	r2, #1111	; 0x457
 8013b7a:	493a      	ldr	r1, [pc, #232]	; (8013c64 <etharp_raw+0x108>)
 8013b7c:	483a      	ldr	r0, [pc, #232]	; (8013c68 <etharp_raw+0x10c>)
 8013b7e:	f00c fa41 	bl	8020004 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013b82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b86:	211c      	movs	r1, #28
 8013b88:	200e      	movs	r0, #14
 8013b8a:	f002 fd45 	bl	8016618 <pbuf_alloc>
 8013b8e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013b90:	69bb      	ldr	r3, [r7, #24]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d102      	bne.n	8013b9c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b9a:	e05d      	b.n	8013c58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013b9c:	69bb      	ldr	r3, [r7, #24]
 8013b9e:	895b      	ldrh	r3, [r3, #10]
 8013ba0:	2b1b      	cmp	r3, #27
 8013ba2:	d806      	bhi.n	8013bb2 <etharp_raw+0x56>
 8013ba4:	4b2e      	ldr	r3, [pc, #184]	; (8013c60 <etharp_raw+0x104>)
 8013ba6:	f240 4262 	movw	r2, #1122	; 0x462
 8013baa:	4930      	ldr	r1, [pc, #192]	; (8013c6c <etharp_raw+0x110>)
 8013bac:	482e      	ldr	r0, [pc, #184]	; (8013c68 <etharp_raw+0x10c>)
 8013bae:	f00c fa29 	bl	8020004 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013bb2:	69bb      	ldr	r3, [r7, #24]
 8013bb4:	685b      	ldr	r3, [r3, #4]
 8013bb6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013bb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7ff f914 	bl	8012de8 <lwip_htons>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	461a      	mov	r2, r3
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013bce:	2b06      	cmp	r3, #6
 8013bd0:	d006      	beq.n	8013be0 <etharp_raw+0x84>
 8013bd2:	4b23      	ldr	r3, [pc, #140]	; (8013c60 <etharp_raw+0x104>)
 8013bd4:	f240 4269 	movw	r2, #1129	; 0x469
 8013bd8:	4925      	ldr	r1, [pc, #148]	; (8013c70 <etharp_raw+0x114>)
 8013bda:	4823      	ldr	r0, [pc, #140]	; (8013c68 <etharp_raw+0x10c>)
 8013bdc:	f00c fa12 	bl	8020004 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	3308      	adds	r3, #8
 8013be4:	2206      	movs	r2, #6
 8013be6:	6839      	ldr	r1, [r7, #0]
 8013be8:	4618      	mov	r0, r3
 8013bea:	f00b fae9 	bl	801f1c0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	3312      	adds	r3, #18
 8013bf2:	2206      	movs	r2, #6
 8013bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f00b fae2 	bl	801f1c0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013bfc:	697b      	ldr	r3, [r7, #20]
 8013bfe:	330e      	adds	r3, #14
 8013c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c02:	6812      	ldr	r2, [r2, #0]
 8013c04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	3318      	adds	r3, #24
 8013c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c0c:	6812      	ldr	r2, [r2, #0]
 8013c0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	2200      	movs	r2, #0
 8013c14:	701a      	strb	r2, [r3, #0]
 8013c16:	2200      	movs	r2, #0
 8013c18:	f042 0201 	orr.w	r2, r2, #1
 8013c1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	2200      	movs	r2, #0
 8013c22:	f042 0208 	orr.w	r2, r2, #8
 8013c26:	709a      	strb	r2, [r3, #2]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	2206      	movs	r2, #6
 8013c30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	2204      	movs	r2, #4
 8013c36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013c38:	f640 0306 	movw	r3, #2054	; 0x806
 8013c3c:	9300      	str	r3, [sp, #0]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	68ba      	ldr	r2, [r7, #8]
 8013c42:	69b9      	ldr	r1, [r7, #24]
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	f000 f8d7 	bl	8013df8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013c4a:	69b8      	ldr	r0, [r7, #24]
 8013c4c:	f002 ffc8 	bl	8016be0 <pbuf_free>
  p = NULL;
 8013c50:	2300      	movs	r3, #0
 8013c52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3720      	adds	r7, #32
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	08024fd8 	.word	0x08024fd8
 8013c64:	08025154 	.word	0x08025154
 8013c68:	0802507c 	.word	0x0802507c
 8013c6c:	08025204 	.word	0x08025204
 8013c70:	08025238 	.word	0x08025238

08013c74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b088      	sub	sp, #32
 8013c78:	af04      	add	r7, sp, #16
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c90:	2201      	movs	r2, #1
 8013c92:	9203      	str	r2, [sp, #12]
 8013c94:	68ba      	ldr	r2, [r7, #8]
 8013c96:	9202      	str	r2, [sp, #8]
 8013c98:	4a06      	ldr	r2, [pc, #24]	; (8013cb4 <etharp_request_dst+0x40>)
 8013c9a:	9201      	str	r2, [sp, #4]
 8013c9c:	9300      	str	r3, [sp, #0]
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	687a      	ldr	r2, [r7, #4]
 8013ca2:	68f8      	ldr	r0, [r7, #12]
 8013ca4:	f7ff ff5a 	bl	8013b5c <etharp_raw>
 8013ca8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3710      	adds	r7, #16
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	08028250 	.word	0x08028250

08013cb8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013cc2:	4a05      	ldr	r2, [pc, #20]	; (8013cd8 <etharp_request+0x20>)
 8013cc4:	6839      	ldr	r1, [r7, #0]
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f7ff ffd4 	bl	8013c74 <etharp_request_dst>
 8013ccc:	4603      	mov	r3, r0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3708      	adds	r7, #8
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	08028248 	.word	0x08028248

08013cdc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013ce6:	230e      	movs	r3, #14
 8013ce8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	895b      	ldrh	r3, [r3, #10]
 8013cee:	2b0e      	cmp	r3, #14
 8013cf0:	d96e      	bls.n	8013dd0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	7bdb      	ldrb	r3, [r3, #15]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d106      	bne.n	8013d08 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013cfa:	683b      	ldr	r3, [r7, #0]
 8013cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d00:	3301      	adds	r3, #1
 8013d02:	b2da      	uxtb	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	7b1a      	ldrb	r2, [r3, #12]
 8013d12:	7b5b      	ldrb	r3, [r3, #13]
 8013d14:	021b      	lsls	r3, r3, #8
 8013d16:	4313      	orrs	r3, r2
 8013d18:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	f003 0301 	and.w	r3, r3, #1
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d023      	beq.n	8013d6e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	781b      	ldrb	r3, [r3, #0]
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	d10f      	bne.n	8013d4e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	785b      	ldrb	r3, [r3, #1]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d11b      	bne.n	8013d6e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013d3a:	2b5e      	cmp	r3, #94	; 0x5e
 8013d3c:	d117      	bne.n	8013d6e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	7b5b      	ldrb	r3, [r3, #13]
 8013d42:	f043 0310 	orr.w	r3, r3, #16
 8013d46:	b2da      	uxtb	r2, r3
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	735a      	strb	r2, [r3, #13]
 8013d4c:	e00f      	b.n	8013d6e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	2206      	movs	r2, #6
 8013d52:	4928      	ldr	r1, [pc, #160]	; (8013df4 <ethernet_input+0x118>)
 8013d54:	4618      	mov	r0, r3
 8013d56:	f00b fa25 	bl	801f1a4 <memcmp>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d106      	bne.n	8013d6e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	7b5b      	ldrb	r3, [r3, #13]
 8013d64:	f043 0308 	orr.w	r3, r3, #8
 8013d68:	b2da      	uxtb	r2, r3
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013d6e:	89fb      	ldrh	r3, [r7, #14]
 8013d70:	2b08      	cmp	r3, #8
 8013d72:	d003      	beq.n	8013d7c <ethernet_input+0xa0>
 8013d74:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013d78:	d014      	beq.n	8013da4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013d7a:	e032      	b.n	8013de2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d82:	f003 0308 	and.w	r3, r3, #8
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d024      	beq.n	8013dd4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013d8a:	8afb      	ldrh	r3, [r7, #22]
 8013d8c:	4619      	mov	r1, r3
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f002 fea0 	bl	8016ad4 <pbuf_remove_header>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d11e      	bne.n	8013dd8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013d9a:	6839      	ldr	r1, [r7, #0]
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f000 fb93 	bl	80144c8 <ip4_input>
      break;
 8013da2:	e013      	b.n	8013dcc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013daa:	f003 0308 	and.w	r3, r3, #8
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d014      	beq.n	8013ddc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013db2:	8afb      	ldrh	r3, [r7, #22]
 8013db4:	4619      	mov	r1, r3
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f002 fe8c 	bl	8016ad4 <pbuf_remove_header>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d10e      	bne.n	8013de0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013dc2:	6839      	ldr	r1, [r7, #0]
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f7ff fb65 	bl	8013494 <etharp_input>
      break;
 8013dca:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	e00c      	b.n	8013dea <ethernet_input+0x10e>
    goto free_and_return;
 8013dd0:	bf00      	nop
 8013dd2:	e006      	b.n	8013de2 <ethernet_input+0x106>
        goto free_and_return;
 8013dd4:	bf00      	nop
 8013dd6:	e004      	b.n	8013de2 <ethernet_input+0x106>
        goto free_and_return;
 8013dd8:	bf00      	nop
 8013dda:	e002      	b.n	8013de2 <ethernet_input+0x106>
        goto free_and_return;
 8013ddc:	bf00      	nop
 8013dde:	e000      	b.n	8013de2 <ethernet_input+0x106>
        goto free_and_return;
 8013de0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f002 fefc 	bl	8016be0 <pbuf_free>
  return ERR_OK;
 8013de8:	2300      	movs	r3, #0
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3718      	adds	r7, #24
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	08028248 	.word	0x08028248

08013df8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b086      	sub	sp, #24
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013e06:	8c3b      	ldrh	r3, [r7, #32]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7fe ffed 	bl	8012de8 <lwip_htons>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013e12:	210e      	movs	r1, #14
 8013e14:	68b8      	ldr	r0, [r7, #8]
 8013e16:	f002 fe4d 	bl	8016ab4 <pbuf_add_header>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d125      	bne.n	8013e6c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013e20:	68bb      	ldr	r3, [r7, #8]
 8013e22:	685b      	ldr	r3, [r3, #4]
 8013e24:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	8afa      	ldrh	r2, [r7, #22]
 8013e2a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	2206      	movs	r2, #6
 8013e30:	6839      	ldr	r1, [r7, #0]
 8013e32:	4618      	mov	r0, r3
 8013e34:	f00b f9c4 	bl	801f1c0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	3306      	adds	r3, #6
 8013e3c:	2206      	movs	r2, #6
 8013e3e:	6879      	ldr	r1, [r7, #4]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f00b f9bd 	bl	801f1c0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013e4c:	2b06      	cmp	r3, #6
 8013e4e:	d006      	beq.n	8013e5e <ethernet_output+0x66>
 8013e50:	4b0a      	ldr	r3, [pc, #40]	; (8013e7c <ethernet_output+0x84>)
 8013e52:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013e56:	490a      	ldr	r1, [pc, #40]	; (8013e80 <ethernet_output+0x88>)
 8013e58:	480a      	ldr	r0, [pc, #40]	; (8013e84 <ethernet_output+0x8c>)
 8013e5a:	f00c f8d3 	bl	8020004 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	699b      	ldr	r3, [r3, #24]
 8013e62:	68b9      	ldr	r1, [r7, #8]
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	4798      	blx	r3
 8013e68:	4603      	mov	r3, r0
 8013e6a:	e002      	b.n	8013e72 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013e6c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013e6e:	f06f 0301 	mvn.w	r3, #1
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3718      	adds	r7, #24
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	0802527c 	.word	0x0802527c
 8013e80:	080252dc 	.word	0x080252dc
 8013e84:	08025310 	.word	0x08025310

08013e88 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b08e      	sub	sp, #56	; 0x38
 8013e8c:	af04      	add	r7, sp, #16
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013e92:	4b87      	ldr	r3, [pc, #540]	; (80140b0 <icmp_input+0x228>)
 8013e94:	689b      	ldr	r3, [r3, #8]
 8013e96:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	f003 030f 	and.w	r3, r3, #15
 8013ea0:	b2db      	uxtb	r3, r3
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	b2db      	uxtb	r3, r3
 8013ea6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013ea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013eaa:	2b13      	cmp	r3, #19
 8013eac:	f240 80e8 	bls.w	8014080 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	895b      	ldrh	r3, [r3, #10]
 8013eb4:	2b03      	cmp	r3, #3
 8013eb6:	f240 80e5 	bls.w	8014084 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013ec4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	f000 80d2 	beq.w	8014072 <icmp_input+0x1ea>
 8013ece:	2b08      	cmp	r3, #8
 8013ed0:	f040 80d2 	bne.w	8014078 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013ed4:	4b77      	ldr	r3, [pc, #476]	; (80140b4 <icmp_input+0x22c>)
 8013ed6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013ed8:	4b75      	ldr	r3, [pc, #468]	; (80140b0 <icmp_input+0x228>)
 8013eda:	695b      	ldr	r3, [r3, #20]
 8013edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ee0:	2be0      	cmp	r3, #224	; 0xe0
 8013ee2:	f000 80d6 	beq.w	8014092 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013ee6:	4b72      	ldr	r3, [pc, #456]	; (80140b0 <icmp_input+0x228>)
 8013ee8:	695b      	ldr	r3, [r3, #20]
 8013eea:	4a71      	ldr	r2, [pc, #452]	; (80140b0 <icmp_input+0x228>)
 8013eec:	6812      	ldr	r2, [r2, #0]
 8013eee:	4611      	mov	r1, r2
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f000 fce5 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	f040 80cc 	bne.w	8014096 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	891b      	ldrh	r3, [r3, #8]
 8013f02:	2b07      	cmp	r3, #7
 8013f04:	f240 80c0 	bls.w	8014088 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f000 f9e0 	bl	80142ce <inet_chksum_pbuf>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d003      	beq.n	8013f1c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f002 fe63 	bl	8016be0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013f1a:	e0c5      	b.n	80140a8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f1e:	330e      	adds	r3, #14
 8013f20:	4619      	mov	r1, r3
 8013f22:	6878      	ldr	r0, [r7, #4]
 8013f24:	f002 fdc6 	bl	8016ab4 <pbuf_add_header>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d04b      	beq.n	8013fc6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	891a      	ldrh	r2, [r3, #8]
 8013f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f34:	4413      	add	r3, r2
 8013f36:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	891b      	ldrh	r3, [r3, #8]
 8013f3c:	8b7a      	ldrh	r2, [r7, #26]
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	f0c0 80ab 	bcc.w	801409a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013f44:	8b7b      	ldrh	r3, [r7, #26]
 8013f46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	200e      	movs	r0, #14
 8013f4e:	f002 fb63 	bl	8016618 <pbuf_alloc>
 8013f52:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	f000 80a1 	beq.w	801409e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	895b      	ldrh	r3, [r3, #10]
 8013f60:	461a      	mov	r2, r3
 8013f62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f64:	3308      	adds	r3, #8
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d203      	bcs.n	8013f72 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013f6a:	6978      	ldr	r0, [r7, #20]
 8013f6c:	f002 fe38 	bl	8016be0 <pbuf_free>
          goto icmperr;
 8013f70:	e096      	b.n	80140a0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f00b f920 	bl	801f1c0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f82:	4619      	mov	r1, r3
 8013f84:	6978      	ldr	r0, [r7, #20]
 8013f86:	f002 fda5 	bl	8016ad4 <pbuf_remove_header>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d009      	beq.n	8013fa4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013f90:	4b49      	ldr	r3, [pc, #292]	; (80140b8 <icmp_input+0x230>)
 8013f92:	22b6      	movs	r2, #182	; 0xb6
 8013f94:	4949      	ldr	r1, [pc, #292]	; (80140bc <icmp_input+0x234>)
 8013f96:	484a      	ldr	r0, [pc, #296]	; (80140c0 <icmp_input+0x238>)
 8013f98:	f00c f834 	bl	8020004 <iprintf>
          pbuf_free(r);
 8013f9c:	6978      	ldr	r0, [r7, #20]
 8013f9e:	f002 fe1f 	bl	8016be0 <pbuf_free>
          goto icmperr;
 8013fa2:	e07d      	b.n	80140a0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013fa4:	6879      	ldr	r1, [r7, #4]
 8013fa6:	6978      	ldr	r0, [r7, #20]
 8013fa8:	f002 ff32 	bl	8016e10 <pbuf_copy>
 8013fac:	4603      	mov	r3, r0
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d003      	beq.n	8013fba <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013fb2:	6978      	ldr	r0, [r7, #20]
 8013fb4:	f002 fe14 	bl	8016be0 <pbuf_free>
          goto icmperr;
 8013fb8:	e072      	b.n	80140a0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f002 fe10 	bl	8016be0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	607b      	str	r3, [r7, #4]
 8013fc4:	e00f      	b.n	8013fe6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013fc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fc8:	330e      	adds	r3, #14
 8013fca:	4619      	mov	r1, r3
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f002 fd81 	bl	8016ad4 <pbuf_remove_header>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d006      	beq.n	8013fe6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013fd8:	4b37      	ldr	r3, [pc, #220]	; (80140b8 <icmp_input+0x230>)
 8013fda:	22c7      	movs	r2, #199	; 0xc7
 8013fdc:	4939      	ldr	r1, [pc, #228]	; (80140c4 <icmp_input+0x23c>)
 8013fde:	4838      	ldr	r0, [pc, #224]	; (80140c0 <icmp_input+0x238>)
 8013fe0:	f00c f810 	bl	8020004 <iprintf>
          goto icmperr;
 8013fe4:	e05c      	b.n	80140a0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013fec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fee:	4619      	mov	r1, r3
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f002 fd5f 	bl	8016ab4 <pbuf_add_header>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d13c      	bne.n	8014076 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014002:	69fb      	ldr	r3, [r7, #28]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801400a:	4b29      	ldr	r3, [pc, #164]	; (80140b0 <icmp_input+0x228>)
 801400c:	691a      	ldr	r2, [r3, #16]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	2200      	movs	r2, #0
 8014016:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	885b      	ldrh	r3, [r3, #2]
 801401c:	b29b      	uxth	r3, r3
 801401e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014022:	4293      	cmp	r3, r2
 8014024:	d907      	bls.n	8014036 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	885b      	ldrh	r3, [r3, #2]
 801402a:	b29b      	uxth	r3, r3
 801402c:	3309      	adds	r3, #9
 801402e:	b29a      	uxth	r2, r3
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	805a      	strh	r2, [r3, #2]
 8014034:	e006      	b.n	8014044 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014036:	693b      	ldr	r3, [r7, #16]
 8014038:	885b      	ldrh	r3, [r3, #2]
 801403a:	b29b      	uxth	r3, r3
 801403c:	3308      	adds	r3, #8
 801403e:	b29a      	uxth	r2, r3
 8014040:	693b      	ldr	r3, [r7, #16]
 8014042:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	22ff      	movs	r2, #255	; 0xff
 8014048:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2200      	movs	r2, #0
 801404e:	729a      	strb	r2, [r3, #10]
 8014050:	2200      	movs	r2, #0
 8014052:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	9302      	str	r3, [sp, #8]
 8014058:	2301      	movs	r3, #1
 801405a:	9301      	str	r3, [sp, #4]
 801405c:	2300      	movs	r3, #0
 801405e:	9300      	str	r3, [sp, #0]
 8014060:	23ff      	movs	r3, #255	; 0xff
 8014062:	2200      	movs	r2, #0
 8014064:	69f9      	ldr	r1, [r7, #28]
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 fb52 	bl	8014710 <ip4_output_if>
 801406c:	4603      	mov	r3, r0
 801406e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014070:	e001      	b.n	8014076 <icmp_input+0x1ee>
      break;
 8014072:	bf00      	nop
 8014074:	e000      	b.n	8014078 <icmp_input+0x1f0>
      break;
 8014076:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f002 fdb1 	bl	8016be0 <pbuf_free>
  return;
 801407e:	e013      	b.n	80140a8 <icmp_input+0x220>
    goto lenerr;
 8014080:	bf00      	nop
 8014082:	e002      	b.n	801408a <icmp_input+0x202>
    goto lenerr;
 8014084:	bf00      	nop
 8014086:	e000      	b.n	801408a <icmp_input+0x202>
        goto lenerr;
 8014088:	bf00      	nop
lenerr:
  pbuf_free(p);
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f002 fda8 	bl	8016be0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014090:	e00a      	b.n	80140a8 <icmp_input+0x220>
        goto icmperr;
 8014092:	bf00      	nop
 8014094:	e004      	b.n	80140a0 <icmp_input+0x218>
        goto icmperr;
 8014096:	bf00      	nop
 8014098:	e002      	b.n	80140a0 <icmp_input+0x218>
          goto icmperr;
 801409a:	bf00      	nop
 801409c:	e000      	b.n	80140a0 <icmp_input+0x218>
          goto icmperr;
 801409e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f002 fd9d 	bl	8016be0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80140a6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80140a8:	3728      	adds	r7, #40	; 0x28
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	24005948 	.word	0x24005948
 80140b4:	2400595c 	.word	0x2400595c
 80140b8:	08025338 	.word	0x08025338
 80140bc:	08025398 	.word	0x08025398
 80140c0:	080253d0 	.word	0x080253d0
 80140c4:	080253f8 	.word	0x080253f8

080140c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	460b      	mov	r3, r1
 80140d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80140d4:	78fb      	ldrb	r3, [r7, #3]
 80140d6:	461a      	mov	r2, r3
 80140d8:	2103      	movs	r1, #3
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f000 f814 	bl	8014108 <icmp_send_response>
}
 80140e0:	bf00      	nop
 80140e2:	3708      	adds	r7, #8
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	460b      	mov	r3, r1
 80140f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80140f4:	78fb      	ldrb	r3, [r7, #3]
 80140f6:	461a      	mov	r2, r3
 80140f8:	210b      	movs	r1, #11
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f000 f804 	bl	8014108 <icmp_send_response>
}
 8014100:	bf00      	nop
 8014102:	3708      	adds	r7, #8
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}

08014108 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b08c      	sub	sp, #48	; 0x30
 801410c:	af04      	add	r7, sp, #16
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	460b      	mov	r3, r1
 8014112:	70fb      	strb	r3, [r7, #3]
 8014114:	4613      	mov	r3, r2
 8014116:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014118:	f44f 7220 	mov.w	r2, #640	; 0x280
 801411c:	2124      	movs	r1, #36	; 0x24
 801411e:	2022      	movs	r0, #34	; 0x22
 8014120:	f002 fa7a 	bl	8016618 <pbuf_alloc>
 8014124:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014126:	69fb      	ldr	r3, [r7, #28]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d056      	beq.n	80141da <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	895b      	ldrh	r3, [r3, #10]
 8014130:	2b23      	cmp	r3, #35	; 0x23
 8014132:	d806      	bhi.n	8014142 <icmp_send_response+0x3a>
 8014134:	4b2b      	ldr	r3, [pc, #172]	; (80141e4 <icmp_send_response+0xdc>)
 8014136:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801413a:	492b      	ldr	r1, [pc, #172]	; (80141e8 <icmp_send_response+0xe0>)
 801413c:	482b      	ldr	r0, [pc, #172]	; (80141ec <icmp_send_response+0xe4>)
 801413e:	f00b ff61 	bl	8020004 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	685b      	ldr	r3, [r3, #4]
 8014146:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	78fa      	ldrb	r2, [r7, #3]
 8014152:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014154:	697b      	ldr	r3, [r7, #20]
 8014156:	78ba      	ldrb	r2, [r7, #2]
 8014158:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	2200      	movs	r2, #0
 801415e:	711a      	strb	r2, [r3, #4]
 8014160:	2200      	movs	r2, #0
 8014162:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	2200      	movs	r2, #0
 8014168:	719a      	strb	r2, [r3, #6]
 801416a:	2200      	movs	r2, #0
 801416c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	685b      	ldr	r3, [r3, #4]
 8014172:	f103 0008 	add.w	r0, r3, #8
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	685b      	ldr	r3, [r3, #4]
 801417a:	221c      	movs	r2, #28
 801417c:	4619      	mov	r1, r3
 801417e:	f00b f81f 	bl	801f1c0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	68db      	ldr	r3, [r3, #12]
 8014186:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014188:	f107 030c 	add.w	r3, r7, #12
 801418c:	4618      	mov	r0, r3
 801418e:	f000 f901 	bl	8014394 <ip4_route>
 8014192:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d01b      	beq.n	80141d2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	2200      	movs	r2, #0
 801419e:	709a      	strb	r2, [r3, #2]
 80141a0:	2200      	movs	r2, #0
 80141a2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	895b      	ldrh	r3, [r3, #10]
 80141a8:	4619      	mov	r1, r3
 80141aa:	6978      	ldr	r0, [r7, #20]
 80141ac:	f000 f87d 	bl	80142aa <inet_chksum>
 80141b0:	4603      	mov	r3, r0
 80141b2:	461a      	mov	r2, r3
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80141b8:	f107 020c 	add.w	r2, r7, #12
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	9302      	str	r3, [sp, #8]
 80141c0:	2301      	movs	r3, #1
 80141c2:	9301      	str	r3, [sp, #4]
 80141c4:	2300      	movs	r3, #0
 80141c6:	9300      	str	r3, [sp, #0]
 80141c8:	23ff      	movs	r3, #255	; 0xff
 80141ca:	2100      	movs	r1, #0
 80141cc:	69f8      	ldr	r0, [r7, #28]
 80141ce:	f000 fa9f 	bl	8014710 <ip4_output_if>
  }
  pbuf_free(q);
 80141d2:	69f8      	ldr	r0, [r7, #28]
 80141d4:	f002 fd04 	bl	8016be0 <pbuf_free>
 80141d8:	e000      	b.n	80141dc <icmp_send_response+0xd4>
    return;
 80141da:	bf00      	nop
}
 80141dc:	3720      	adds	r7, #32
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	08025338 	.word	0x08025338
 80141e8:	0802542c 	.word	0x0802542c
 80141ec:	080253d0 	.word	0x080253d0

080141f0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80141f0:	b480      	push	{r7}
 80141f2:	b089      	sub	sp, #36	; 0x24
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80141fe:	2300      	movs	r3, #0
 8014200:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8014202:	2300      	movs	r3, #0
 8014204:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	f003 0301 	and.w	r3, r3, #1
 801420c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d00d      	beq.n	8014230 <lwip_standard_chksum+0x40>
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	dd0a      	ble.n	8014230 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801421a:	69fa      	ldr	r2, [r7, #28]
 801421c:	1c53      	adds	r3, r2, #1
 801421e:	61fb      	str	r3, [r7, #28]
 8014220:	f107 030e 	add.w	r3, r7, #14
 8014224:	3301      	adds	r3, #1
 8014226:	7812      	ldrb	r2, [r2, #0]
 8014228:	701a      	strb	r2, [r3, #0]
    len--;
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	3b01      	subs	r3, #1
 801422e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8014230:	69fb      	ldr	r3, [r7, #28]
 8014232:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8014234:	e00a      	b.n	801424c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8014236:	69bb      	ldr	r3, [r7, #24]
 8014238:	1c9a      	adds	r2, r3, #2
 801423a:	61ba      	str	r2, [r7, #24]
 801423c:	881b      	ldrh	r3, [r3, #0]
 801423e:	461a      	mov	r2, r3
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	4413      	add	r3, r2
 8014244:	617b      	str	r3, [r7, #20]
    len -= 2;
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	3b02      	subs	r3, #2
 801424a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	2b01      	cmp	r3, #1
 8014250:	dcf1      	bgt.n	8014236 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	dd04      	ble.n	8014262 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8014258:	f107 030e 	add.w	r3, r7, #14
 801425c:	69ba      	ldr	r2, [r7, #24]
 801425e:	7812      	ldrb	r2, [r2, #0]
 8014260:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8014262:	89fb      	ldrh	r3, [r7, #14]
 8014264:	461a      	mov	r2, r3
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	4413      	add	r3, r2
 801426a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	0c1a      	lsrs	r2, r3, #16
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	b29b      	uxth	r3, r3
 8014274:	4413      	add	r3, r2
 8014276:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	0c1a      	lsrs	r2, r3, #16
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	b29b      	uxth	r3, r3
 8014280:	4413      	add	r3, r2
 8014282:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d007      	beq.n	801429a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	021b      	lsls	r3, r3, #8
 801428e:	b29a      	uxth	r2, r3
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	0a1b      	lsrs	r3, r3, #8
 8014294:	b2db      	uxtb	r3, r3
 8014296:	4313      	orrs	r3, r2
 8014298:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	b29b      	uxth	r3, r3
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3724      	adds	r7, #36	; 0x24
 80142a2:	46bd      	mov	sp, r7
 80142a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a8:	4770      	bx	lr

080142aa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80142aa:	b580      	push	{r7, lr}
 80142ac:	b082      	sub	sp, #8
 80142ae:	af00      	add	r7, sp, #0
 80142b0:	6078      	str	r0, [r7, #4]
 80142b2:	460b      	mov	r3, r1
 80142b4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80142b6:	887b      	ldrh	r3, [r7, #2]
 80142b8:	4619      	mov	r1, r3
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f7ff ff98 	bl	80141f0 <lwip_standard_chksum>
 80142c0:	4603      	mov	r3, r0
 80142c2:	43db      	mvns	r3, r3
 80142c4:	b29b      	uxth	r3, r3
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3708      	adds	r7, #8
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}

080142ce <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80142ce:	b580      	push	{r7, lr}
 80142d0:	b086      	sub	sp, #24
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80142d6:	2300      	movs	r3, #0
 80142d8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	613b      	str	r3, [r7, #16]
 80142e2:	e02b      	b.n	801433c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80142e4:	693b      	ldr	r3, [r7, #16]
 80142e6:	685a      	ldr	r2, [r3, #4]
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	895b      	ldrh	r3, [r3, #10]
 80142ec:	4619      	mov	r1, r3
 80142ee:	4610      	mov	r0, r2
 80142f0:	f7ff ff7e 	bl	80141f0 <lwip_standard_chksum>
 80142f4:	4603      	mov	r3, r0
 80142f6:	461a      	mov	r2, r3
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	4413      	add	r3, r2
 80142fc:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	0c1a      	lsrs	r2, r3, #16
 8014302:	697b      	ldr	r3, [r7, #20]
 8014304:	b29b      	uxth	r3, r3
 8014306:	4413      	add	r3, r2
 8014308:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	895b      	ldrh	r3, [r3, #10]
 801430e:	f003 0301 	and.w	r3, r3, #1
 8014312:	b29b      	uxth	r3, r3
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00e      	beq.n	8014336 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2b00      	cmp	r3, #0
 801431c:	bf0c      	ite	eq
 801431e:	2301      	moveq	r3, #1
 8014320:	2300      	movne	r3, #0
 8014322:	b2db      	uxtb	r3, r3
 8014324:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8014326:	697b      	ldr	r3, [r7, #20]
 8014328:	021b      	lsls	r3, r3, #8
 801432a:	b29a      	uxth	r2, r3
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	0a1b      	lsrs	r3, r3, #8
 8014330:	b2db      	uxtb	r3, r3
 8014332:	4313      	orrs	r3, r2
 8014334:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	613b      	str	r3, [r7, #16]
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d1d0      	bne.n	80142e4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d007      	beq.n	8014358 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	021b      	lsls	r3, r3, #8
 801434c:	b29a      	uxth	r2, r3
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	0a1b      	lsrs	r3, r3, #8
 8014352:	b2db      	uxtb	r3, r3
 8014354:	4313      	orrs	r3, r2
 8014356:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	b29b      	uxth	r3, r3
 801435c:	43db      	mvns	r3, r3
 801435e:	b29b      	uxth	r3, r3
}
 8014360:	4618      	mov	r0, r3
 8014362:	3718      	adds	r7, #24
 8014364:	46bd      	mov	sp, r7
 8014366:	bd80      	pop	{r7, pc}

08014368 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801436e:	2300      	movs	r3, #0
 8014370:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8014372:	f001 f9e5 	bl	8015740 <mem_init>
  memp_init();
 8014376:	f001 fce7 	bl	8015d48 <memp_init>
  pbuf_init();
  netif_init();
 801437a:	f001 fde5 	bl	8015f48 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801437e:	f009 fa0f 	bl	801d7a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8014382:	f002 ff73 	bl	801726c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8014386:	f009 f981 	bl	801d68c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801438a:	bf00      	nop
 801438c:	3708      	adds	r7, #8
 801438e:	46bd      	mov	sp, r7
 8014390:	bd80      	pop	{r7, pc}
	...

08014394 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014394:	b480      	push	{r7}
 8014396:	b085      	sub	sp, #20
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801439c:	4b33      	ldr	r3, [pc, #204]	; (801446c <ip4_route+0xd8>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	60fb      	str	r3, [r7, #12]
 80143a2:	e036      	b.n	8014412 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143aa:	f003 0301 	and.w	r3, r3, #1
 80143ae:	b2db      	uxtb	r3, r3
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d02b      	beq.n	801440c <ip4_route+0x78>
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143ba:	089b      	lsrs	r3, r3, #2
 80143bc:	f003 0301 	and.w	r3, r3, #1
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d022      	beq.n	801440c <ip4_route+0x78>
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	3304      	adds	r3, #4
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d01d      	beq.n	801440c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681a      	ldr	r2, [r3, #0]
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	3304      	adds	r3, #4
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	405a      	eors	r2, r3
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	3308      	adds	r3, #8
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	4013      	ands	r3, r2
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d101      	bne.n	80143ec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	e038      	b.n	801445e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143f2:	f003 0302 	and.w	r3, r3, #2
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d108      	bne.n	801440c <ip4_route+0x78>
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681a      	ldr	r2, [r3, #0]
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	330c      	adds	r3, #12
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	429a      	cmp	r2, r3
 8014406:	d101      	bne.n	801440c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	e028      	b.n	801445e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	60fb      	str	r3, [r7, #12]
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d1c5      	bne.n	80143a4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014418:	4b15      	ldr	r3, [pc, #84]	; (8014470 <ip4_route+0xdc>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d01a      	beq.n	8014456 <ip4_route+0xc2>
 8014420:	4b13      	ldr	r3, [pc, #76]	; (8014470 <ip4_route+0xdc>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014428:	f003 0301 	and.w	r3, r3, #1
 801442c:	2b00      	cmp	r3, #0
 801442e:	d012      	beq.n	8014456 <ip4_route+0xc2>
 8014430:	4b0f      	ldr	r3, [pc, #60]	; (8014470 <ip4_route+0xdc>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014438:	f003 0304 	and.w	r3, r3, #4
 801443c:	2b00      	cmp	r3, #0
 801443e:	d00a      	beq.n	8014456 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014440:	4b0b      	ldr	r3, [pc, #44]	; (8014470 <ip4_route+0xdc>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	3304      	adds	r3, #4
 8014446:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014448:	2b00      	cmp	r3, #0
 801444a:	d004      	beq.n	8014456 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	b2db      	uxtb	r3, r3
 8014452:	2b7f      	cmp	r3, #127	; 0x7f
 8014454:	d101      	bne.n	801445a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014456:	2300      	movs	r3, #0
 8014458:	e001      	b.n	801445e <ip4_route+0xca>
  }

  return netif_default;
 801445a:	4b05      	ldr	r3, [pc, #20]	; (8014470 <ip4_route+0xdc>)
 801445c:	681b      	ldr	r3, [r3, #0]
}
 801445e:	4618      	mov	r0, r3
 8014460:	3714      	adds	r7, #20
 8014462:	46bd      	mov	sp, r7
 8014464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014468:	4770      	bx	lr
 801446a:	bf00      	nop
 801446c:	24008828 	.word	0x24008828
 8014470:	2400882c 	.word	0x2400882c

08014474 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014482:	f003 0301 	and.w	r3, r3, #1
 8014486:	b2db      	uxtb	r3, r3
 8014488:	2b00      	cmp	r3, #0
 801448a:	d016      	beq.n	80144ba <ip4_input_accept+0x46>
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	3304      	adds	r3, #4
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d011      	beq.n	80144ba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014496:	4b0b      	ldr	r3, [pc, #44]	; (80144c4 <ip4_input_accept+0x50>)
 8014498:	695a      	ldr	r2, [r3, #20]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	3304      	adds	r3, #4
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d008      	beq.n	80144b6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80144a4:	4b07      	ldr	r3, [pc, #28]	; (80144c4 <ip4_input_accept+0x50>)
 80144a6:	695b      	ldr	r3, [r3, #20]
 80144a8:	6879      	ldr	r1, [r7, #4]
 80144aa:	4618      	mov	r0, r3
 80144ac:	f000 fa08 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 80144b0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d001      	beq.n	80144ba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80144b6:	2301      	movs	r3, #1
 80144b8:	e000      	b.n	80144bc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80144ba:	2300      	movs	r3, #0
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3708      	adds	r7, #8
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	24005948 	.word	0x24005948

080144c8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b086      	sub	sp, #24
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	685b      	ldr	r3, [r3, #4]
 80144d6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	091b      	lsrs	r3, r3, #4
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	2b04      	cmp	r3, #4
 80144e2:	d004      	beq.n	80144ee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f002 fb7b 	bl	8016be0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80144ea:	2300      	movs	r3, #0
 80144ec:	e107      	b.n	80146fe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	f003 030f 	and.w	r3, r3, #15
 80144f6:	b2db      	uxtb	r3, r3
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	b2db      	uxtb	r3, r3
 80144fc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	885b      	ldrh	r3, [r3, #2]
 8014502:	b29b      	uxth	r3, r3
 8014504:	4618      	mov	r0, r3
 8014506:	f7fe fc6f 	bl	8012de8 <lwip_htons>
 801450a:	4603      	mov	r3, r0
 801450c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	891b      	ldrh	r3, [r3, #8]
 8014512:	89ba      	ldrh	r2, [r7, #12]
 8014514:	429a      	cmp	r2, r3
 8014516:	d204      	bcs.n	8014522 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014518:	89bb      	ldrh	r3, [r7, #12]
 801451a:	4619      	mov	r1, r3
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f002 f9d9 	bl	80168d4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	895b      	ldrh	r3, [r3, #10]
 8014526:	89fa      	ldrh	r2, [r7, #14]
 8014528:	429a      	cmp	r2, r3
 801452a:	d807      	bhi.n	801453c <ip4_input+0x74>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	891b      	ldrh	r3, [r3, #8]
 8014530:	89ba      	ldrh	r2, [r7, #12]
 8014532:	429a      	cmp	r2, r3
 8014534:	d802      	bhi.n	801453c <ip4_input+0x74>
 8014536:	89fb      	ldrh	r3, [r7, #14]
 8014538:	2b13      	cmp	r3, #19
 801453a:	d804      	bhi.n	8014546 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f002 fb4f 	bl	8016be0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014542:	2300      	movs	r3, #0
 8014544:	e0db      	b.n	80146fe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	691b      	ldr	r3, [r3, #16]
 801454a:	4a6f      	ldr	r2, [pc, #444]	; (8014708 <ip4_input+0x240>)
 801454c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801454e:	697b      	ldr	r3, [r7, #20]
 8014550:	68db      	ldr	r3, [r3, #12]
 8014552:	4a6d      	ldr	r2, [pc, #436]	; (8014708 <ip4_input+0x240>)
 8014554:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014556:	4b6c      	ldr	r3, [pc, #432]	; (8014708 <ip4_input+0x240>)
 8014558:	695b      	ldr	r3, [r3, #20]
 801455a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801455e:	2be0      	cmp	r3, #224	; 0xe0
 8014560:	d112      	bne.n	8014588 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014568:	f003 0301 	and.w	r3, r3, #1
 801456c:	b2db      	uxtb	r3, r3
 801456e:	2b00      	cmp	r3, #0
 8014570:	d007      	beq.n	8014582 <ip4_input+0xba>
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	3304      	adds	r3, #4
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d002      	beq.n	8014582 <ip4_input+0xba>
      netif = inp;
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	613b      	str	r3, [r7, #16]
 8014580:	e02a      	b.n	80145d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014582:	2300      	movs	r3, #0
 8014584:	613b      	str	r3, [r7, #16]
 8014586:	e027      	b.n	80145d8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014588:	6838      	ldr	r0, [r7, #0]
 801458a:	f7ff ff73 	bl	8014474 <ip4_input_accept>
 801458e:	4603      	mov	r3, r0
 8014590:	2b00      	cmp	r3, #0
 8014592:	d002      	beq.n	801459a <ip4_input+0xd2>
      netif = inp;
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	613b      	str	r3, [r7, #16]
 8014598:	e01e      	b.n	80145d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801459a:	2300      	movs	r3, #0
 801459c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801459e:	4b5a      	ldr	r3, [pc, #360]	; (8014708 <ip4_input+0x240>)
 80145a0:	695b      	ldr	r3, [r3, #20]
 80145a2:	b2db      	uxtb	r3, r3
 80145a4:	2b7f      	cmp	r3, #127	; 0x7f
 80145a6:	d017      	beq.n	80145d8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80145a8:	4b58      	ldr	r3, [pc, #352]	; (801470c <ip4_input+0x244>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	613b      	str	r3, [r7, #16]
 80145ae:	e00e      	b.n	80145ce <ip4_input+0x106>
          if (netif == inp) {
 80145b0:	693a      	ldr	r2, [r7, #16]
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d006      	beq.n	80145c6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80145b8:	6938      	ldr	r0, [r7, #16]
 80145ba:	f7ff ff5b 	bl	8014474 <ip4_input_accept>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d108      	bne.n	80145d6 <ip4_input+0x10e>
 80145c4:	e000      	b.n	80145c8 <ip4_input+0x100>
            continue;
 80145c6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	613b      	str	r3, [r7, #16]
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d1ed      	bne.n	80145b0 <ip4_input+0xe8>
 80145d4:	e000      	b.n	80145d8 <ip4_input+0x110>
            break;
 80145d6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80145d8:	4b4b      	ldr	r3, [pc, #300]	; (8014708 <ip4_input+0x240>)
 80145da:	691b      	ldr	r3, [r3, #16]
 80145dc:	6839      	ldr	r1, [r7, #0]
 80145de:	4618      	mov	r0, r3
 80145e0:	f000 f96e 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 80145e4:	4603      	mov	r3, r0
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d105      	bne.n	80145f6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80145ea:	4b47      	ldr	r3, [pc, #284]	; (8014708 <ip4_input+0x240>)
 80145ec:	691b      	ldr	r3, [r3, #16]
 80145ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80145f2:	2be0      	cmp	r3, #224	; 0xe0
 80145f4:	d104      	bne.n	8014600 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f002 faf2 	bl	8016be0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80145fc:	2300      	movs	r3, #0
 80145fe:	e07e      	b.n	80146fe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d104      	bne.n	8014610 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f002 faea 	bl	8016be0 <pbuf_free>
    return ERR_OK;
 801460c:	2300      	movs	r3, #0
 801460e:	e076      	b.n	80146fe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	88db      	ldrh	r3, [r3, #6]
 8014614:	b29b      	uxth	r3, r3
 8014616:	461a      	mov	r2, r3
 8014618:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801461c:	4013      	ands	r3, r2
 801461e:	2b00      	cmp	r3, #0
 8014620:	d00b      	beq.n	801463a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f000 fc92 	bl	8014f4c <ip4_reass>
 8014628:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d101      	bne.n	8014634 <ip4_input+0x16c>
      return ERR_OK;
 8014630:	2300      	movs	r3, #0
 8014632:	e064      	b.n	80146fe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	685b      	ldr	r3, [r3, #4]
 8014638:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801463a:	4a33      	ldr	r2, [pc, #204]	; (8014708 <ip4_input+0x240>)
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014640:	4a31      	ldr	r2, [pc, #196]	; (8014708 <ip4_input+0x240>)
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014646:	4a30      	ldr	r2, [pc, #192]	; (8014708 <ip4_input+0x240>)
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801464c:	697b      	ldr	r3, [r7, #20]
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	f003 030f 	and.w	r3, r3, #15
 8014654:	b2db      	uxtb	r3, r3
 8014656:	009b      	lsls	r3, r3, #2
 8014658:	b2db      	uxtb	r3, r3
 801465a:	b29a      	uxth	r2, r3
 801465c:	4b2a      	ldr	r3, [pc, #168]	; (8014708 <ip4_input+0x240>)
 801465e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014660:	89fb      	ldrh	r3, [r7, #14]
 8014662:	4619      	mov	r1, r3
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f002 fa35 	bl	8016ad4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	7a5b      	ldrb	r3, [r3, #9]
 801466e:	2b11      	cmp	r3, #17
 8014670:	d006      	beq.n	8014680 <ip4_input+0x1b8>
 8014672:	2b11      	cmp	r3, #17
 8014674:	dc13      	bgt.n	801469e <ip4_input+0x1d6>
 8014676:	2b01      	cmp	r3, #1
 8014678:	d00c      	beq.n	8014694 <ip4_input+0x1cc>
 801467a:	2b06      	cmp	r3, #6
 801467c:	d005      	beq.n	801468a <ip4_input+0x1c2>
 801467e:	e00e      	b.n	801469e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014680:	6839      	ldr	r1, [r7, #0]
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f009 f93a 	bl	801d8fc <udp_input>
        break;
 8014688:	e026      	b.n	80146d8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801468a:	6839      	ldr	r1, [r7, #0]
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f004 fd27 	bl	80190e0 <tcp_input>
        break;
 8014692:	e021      	b.n	80146d8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014694:	6839      	ldr	r1, [r7, #0]
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f7ff fbf6 	bl	8013e88 <icmp_input>
        break;
 801469c:	e01c      	b.n	80146d8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801469e:	4b1a      	ldr	r3, [pc, #104]	; (8014708 <ip4_input+0x240>)
 80146a0:	695b      	ldr	r3, [r3, #20]
 80146a2:	6939      	ldr	r1, [r7, #16]
 80146a4:	4618      	mov	r0, r3
 80146a6:	f000 f90b 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 80146aa:	4603      	mov	r3, r0
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d10f      	bne.n	80146d0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80146b0:	4b15      	ldr	r3, [pc, #84]	; (8014708 <ip4_input+0x240>)
 80146b2:	695b      	ldr	r3, [r3, #20]
 80146b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80146b8:	2be0      	cmp	r3, #224	; 0xe0
 80146ba:	d009      	beq.n	80146d0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80146bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80146c0:	4619      	mov	r1, r3
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f002 fa79 	bl	8016bba <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80146c8:	2102      	movs	r1, #2
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f7ff fcfc 	bl	80140c8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f002 fa85 	bl	8016be0 <pbuf_free>
        break;
 80146d6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80146d8:	4b0b      	ldr	r3, [pc, #44]	; (8014708 <ip4_input+0x240>)
 80146da:	2200      	movs	r2, #0
 80146dc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80146de:	4b0a      	ldr	r3, [pc, #40]	; (8014708 <ip4_input+0x240>)
 80146e0:	2200      	movs	r2, #0
 80146e2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80146e4:	4b08      	ldr	r3, [pc, #32]	; (8014708 <ip4_input+0x240>)
 80146e6:	2200      	movs	r2, #0
 80146e8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80146ea:	4b07      	ldr	r3, [pc, #28]	; (8014708 <ip4_input+0x240>)
 80146ec:	2200      	movs	r2, #0
 80146ee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80146f0:	4b05      	ldr	r3, [pc, #20]	; (8014708 <ip4_input+0x240>)
 80146f2:	2200      	movs	r2, #0
 80146f4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80146f6:	4b04      	ldr	r3, [pc, #16]	; (8014708 <ip4_input+0x240>)
 80146f8:	2200      	movs	r2, #0
 80146fa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80146fc:	2300      	movs	r3, #0
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3718      	adds	r7, #24
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	24005948 	.word	0x24005948
 801470c:	24008828 	.word	0x24008828

08014710 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b08a      	sub	sp, #40	; 0x28
 8014714:	af04      	add	r7, sp, #16
 8014716:	60f8      	str	r0, [r7, #12]
 8014718:	60b9      	str	r1, [r7, #8]
 801471a:	607a      	str	r2, [r7, #4]
 801471c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d009      	beq.n	801473c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d003      	beq.n	8014736 <ip4_output_if+0x26>
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d102      	bne.n	801473c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014738:	3304      	adds	r3, #4
 801473a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801473c:	78fa      	ldrb	r2, [r7, #3]
 801473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014740:	9302      	str	r3, [sp, #8]
 8014742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014746:	9301      	str	r3, [sp, #4]
 8014748:	f897 3020 	ldrb.w	r3, [r7, #32]
 801474c:	9300      	str	r3, [sp, #0]
 801474e:	4613      	mov	r3, r2
 8014750:	687a      	ldr	r2, [r7, #4]
 8014752:	6979      	ldr	r1, [r7, #20]
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	f000 f805 	bl	8014764 <ip4_output_if_src>
 801475a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801475c:	4618      	mov	r0, r3
 801475e:	3718      	adds	r7, #24
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}

08014764 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b088      	sub	sp, #32
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
 8014770:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	7b9b      	ldrb	r3, [r3, #14]
 8014776:	2b01      	cmp	r3, #1
 8014778:	d006      	beq.n	8014788 <ip4_output_if_src+0x24>
 801477a:	4b4b      	ldr	r3, [pc, #300]	; (80148a8 <ip4_output_if_src+0x144>)
 801477c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014780:	494a      	ldr	r1, [pc, #296]	; (80148ac <ip4_output_if_src+0x148>)
 8014782:	484b      	ldr	r0, [pc, #300]	; (80148b0 <ip4_output_if_src+0x14c>)
 8014784:	f00b fc3e 	bl	8020004 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d060      	beq.n	8014850 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801478e:	2314      	movs	r3, #20
 8014790:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014792:	2114      	movs	r1, #20
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	f002 f98d 	bl	8016ab4 <pbuf_add_header>
 801479a:	4603      	mov	r3, r0
 801479c:	2b00      	cmp	r3, #0
 801479e:	d002      	beq.n	80147a6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80147a0:	f06f 0301 	mvn.w	r3, #1
 80147a4:	e07c      	b.n	80148a0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	685b      	ldr	r3, [r3, #4]
 80147aa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	895b      	ldrh	r3, [r3, #10]
 80147b0:	2b13      	cmp	r3, #19
 80147b2:	d806      	bhi.n	80147c2 <ip4_output_if_src+0x5e>
 80147b4:	4b3c      	ldr	r3, [pc, #240]	; (80148a8 <ip4_output_if_src+0x144>)
 80147b6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80147ba:	493e      	ldr	r1, [pc, #248]	; (80148b4 <ip4_output_if_src+0x150>)
 80147bc:	483c      	ldr	r0, [pc, #240]	; (80148b0 <ip4_output_if_src+0x14c>)
 80147be:	f00b fc21 	bl	8020004 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80147c2:	69fb      	ldr	r3, [r7, #28]
 80147c4:	78fa      	ldrb	r2, [r7, #3]
 80147c6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80147c8:	69fb      	ldr	r3, [r7, #28]
 80147ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80147ce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681a      	ldr	r2, [r3, #0]
 80147d4:	69fb      	ldr	r3, [r7, #28]
 80147d6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80147d8:	8b7b      	ldrh	r3, [r7, #26]
 80147da:	089b      	lsrs	r3, r3, #2
 80147dc:	b29b      	uxth	r3, r3
 80147de:	b2db      	uxtb	r3, r3
 80147e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147e4:	b2da      	uxtb	r2, r3
 80147e6:	69fb      	ldr	r3, [r7, #28]
 80147e8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80147f0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	891b      	ldrh	r3, [r3, #8]
 80147f6:	4618      	mov	r0, r3
 80147f8:	f7fe faf6 	bl	8012de8 <lwip_htons>
 80147fc:	4603      	mov	r3, r0
 80147fe:	461a      	mov	r2, r3
 8014800:	69fb      	ldr	r3, [r7, #28]
 8014802:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	2200      	movs	r2, #0
 8014808:	719a      	strb	r2, [r3, #6]
 801480a:	2200      	movs	r2, #0
 801480c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801480e:	4b2a      	ldr	r3, [pc, #168]	; (80148b8 <ip4_output_if_src+0x154>)
 8014810:	881b      	ldrh	r3, [r3, #0]
 8014812:	4618      	mov	r0, r3
 8014814:	f7fe fae8 	bl	8012de8 <lwip_htons>
 8014818:	4603      	mov	r3, r0
 801481a:	461a      	mov	r2, r3
 801481c:	69fb      	ldr	r3, [r7, #28]
 801481e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014820:	4b25      	ldr	r3, [pc, #148]	; (80148b8 <ip4_output_if_src+0x154>)
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	3301      	adds	r3, #1
 8014826:	b29a      	uxth	r2, r3
 8014828:	4b23      	ldr	r3, [pc, #140]	; (80148b8 <ip4_output_if_src+0x154>)
 801482a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d104      	bne.n	801483c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014832:	4b22      	ldr	r3, [pc, #136]	; (80148bc <ip4_output_if_src+0x158>)
 8014834:	681a      	ldr	r2, [r3, #0]
 8014836:	69fb      	ldr	r3, [r7, #28]
 8014838:	60da      	str	r2, [r3, #12]
 801483a:	e003      	b.n	8014844 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	681a      	ldr	r2, [r3, #0]
 8014840:	69fb      	ldr	r3, [r7, #28]
 8014842:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014844:	69fb      	ldr	r3, [r7, #28]
 8014846:	2200      	movs	r2, #0
 8014848:	729a      	strb	r2, [r3, #10]
 801484a:	2200      	movs	r2, #0
 801484c:	72da      	strb	r2, [r3, #11]
 801484e:	e00f      	b.n	8014870 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	895b      	ldrh	r3, [r3, #10]
 8014854:	2b13      	cmp	r3, #19
 8014856:	d802      	bhi.n	801485e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014858:	f06f 0301 	mvn.w	r3, #1
 801485c:	e020      	b.n	80148a0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014864:	69fb      	ldr	r3, [r7, #28]
 8014866:	691b      	ldr	r3, [r3, #16]
 8014868:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801486a:	f107 0314 	add.w	r3, r7, #20
 801486e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014872:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014874:	2b00      	cmp	r3, #0
 8014876:	d00c      	beq.n	8014892 <ip4_output_if_src+0x12e>
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	891a      	ldrh	r2, [r3, #8]
 801487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801487e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014880:	429a      	cmp	r2, r3
 8014882:	d906      	bls.n	8014892 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014888:	68f8      	ldr	r0, [r7, #12]
 801488a:	f000 fd4d 	bl	8015328 <ip4_frag>
 801488e:	4603      	mov	r3, r0
 8014890:	e006      	b.n	80148a0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014894:	695b      	ldr	r3, [r3, #20]
 8014896:	687a      	ldr	r2, [r7, #4]
 8014898:	68f9      	ldr	r1, [r7, #12]
 801489a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801489c:	4798      	blx	r3
 801489e:	4603      	mov	r3, r0
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	3720      	adds	r7, #32
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}
 80148a8:	08025458 	.word	0x08025458
 80148ac:	080254b8 	.word	0x080254b8
 80148b0:	080254c4 	.word	0x080254c4
 80148b4:	080254ec 	.word	0x080254ec
 80148b8:	24004e26 	.word	0x24004e26
 80148bc:	08028258 	.word	0x08028258

080148c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80148c0:	b480      	push	{r7}
 80148c2:	b085      	sub	sp, #20
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148d4:	d002      	beq.n	80148dc <ip4_addr_isbroadcast_u32+0x1c>
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d101      	bne.n	80148e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80148dc:	2301      	movs	r3, #1
 80148de:	e02a      	b.n	8014936 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80148e6:	f003 0302 	and.w	r3, r3, #2
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d101      	bne.n	80148f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80148ee:	2300      	movs	r3, #0
 80148f0:	e021      	b.n	8014936 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	3304      	adds	r3, #4
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	687a      	ldr	r2, [r7, #4]
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d101      	bne.n	8014902 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80148fe:	2300      	movs	r3, #0
 8014900:	e019      	b.n	8014936 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014902:	68fa      	ldr	r2, [r7, #12]
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	3304      	adds	r3, #4
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	405a      	eors	r2, r3
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	3308      	adds	r3, #8
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	4013      	ands	r3, r2
 8014914:	2b00      	cmp	r3, #0
 8014916:	d10d      	bne.n	8014934 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	3308      	adds	r3, #8
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	43da      	mvns	r2, r3
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	3308      	adds	r3, #8
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801492c:	429a      	cmp	r2, r3
 801492e:	d101      	bne.n	8014934 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014930:	2301      	movs	r3, #1
 8014932:	e000      	b.n	8014936 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014934:	2300      	movs	r3, #0
  }
}
 8014936:	4618      	mov	r0, r3
 8014938:	3714      	adds	r7, #20
 801493a:	46bd      	mov	sp, r7
 801493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014940:	4770      	bx	lr
	...

08014944 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801494a:	2300      	movs	r3, #0
 801494c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801494e:	4b12      	ldr	r3, [pc, #72]	; (8014998 <ip_reass_tmr+0x54>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014954:	e018      	b.n	8014988 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	7fdb      	ldrb	r3, [r3, #31]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d00b      	beq.n	8014976 <ip_reass_tmr+0x32>
      r->timer--;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	7fdb      	ldrb	r3, [r3, #31]
 8014962:	3b01      	subs	r3, #1
 8014964:	b2da      	uxtb	r2, r3
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	60fb      	str	r3, [r7, #12]
 8014974:	e008      	b.n	8014988 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014980:	68b9      	ldr	r1, [r7, #8]
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f000 f80a 	bl	801499c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d1e3      	bne.n	8014956 <ip_reass_tmr+0x12>
    }
  }
}
 801498e:	bf00      	nop
 8014990:	bf00      	nop
 8014992:	3710      	adds	r7, #16
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	24004e28 	.word	0x24004e28

0801499c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b088      	sub	sp, #32
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80149a6:	2300      	movs	r3, #0
 80149a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80149aa:	683a      	ldr	r2, [r7, #0]
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d105      	bne.n	80149be <ip_reass_free_complete_datagram+0x22>
 80149b2:	4b45      	ldr	r3, [pc, #276]	; (8014ac8 <ip_reass_free_complete_datagram+0x12c>)
 80149b4:	22ab      	movs	r2, #171	; 0xab
 80149b6:	4945      	ldr	r1, [pc, #276]	; (8014acc <ip_reass_free_complete_datagram+0x130>)
 80149b8:	4845      	ldr	r0, [pc, #276]	; (8014ad0 <ip_reass_free_complete_datagram+0x134>)
 80149ba:	f00b fb23 	bl	8020004 <iprintf>
  if (prev != NULL) {
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d00a      	beq.n	80149da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	687a      	ldr	r2, [r7, #4]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d005      	beq.n	80149da <ip_reass_free_complete_datagram+0x3e>
 80149ce:	4b3e      	ldr	r3, [pc, #248]	; (8014ac8 <ip_reass_free_complete_datagram+0x12c>)
 80149d0:	22ad      	movs	r2, #173	; 0xad
 80149d2:	4940      	ldr	r1, [pc, #256]	; (8014ad4 <ip_reass_free_complete_datagram+0x138>)
 80149d4:	483e      	ldr	r0, [pc, #248]	; (8014ad0 <ip_reass_free_complete_datagram+0x134>)
 80149d6:	f00b fb15 	bl	8020004 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	889b      	ldrh	r3, [r3, #4]
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d12a      	bne.n	8014a42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	685b      	ldr	r3, [r3, #4]
 80149f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	681a      	ldr	r2, [r3, #0]
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80149fa:	69bb      	ldr	r3, [r7, #24]
 80149fc:	6858      	ldr	r0, [r3, #4]
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	3308      	adds	r3, #8
 8014a02:	2214      	movs	r2, #20
 8014a04:	4619      	mov	r1, r3
 8014a06:	f00a fbdb 	bl	801f1c0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014a0a:	2101      	movs	r1, #1
 8014a0c:	69b8      	ldr	r0, [r7, #24]
 8014a0e:	f7ff fb6b 	bl	80140e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014a12:	69b8      	ldr	r0, [r7, #24]
 8014a14:	f002 f96c 	bl	8016cf0 <pbuf_clen>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014a1c:	8bfa      	ldrh	r2, [r7, #30]
 8014a1e:	8a7b      	ldrh	r3, [r7, #18]
 8014a20:	4413      	add	r3, r2
 8014a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a26:	db05      	blt.n	8014a34 <ip_reass_free_complete_datagram+0x98>
 8014a28:	4b27      	ldr	r3, [pc, #156]	; (8014ac8 <ip_reass_free_complete_datagram+0x12c>)
 8014a2a:	22bc      	movs	r2, #188	; 0xbc
 8014a2c:	492a      	ldr	r1, [pc, #168]	; (8014ad8 <ip_reass_free_complete_datagram+0x13c>)
 8014a2e:	4828      	ldr	r0, [pc, #160]	; (8014ad0 <ip_reass_free_complete_datagram+0x134>)
 8014a30:	f00b fae8 	bl	8020004 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014a34:	8bfa      	ldrh	r2, [r7, #30]
 8014a36:	8a7b      	ldrh	r3, [r7, #18]
 8014a38:	4413      	add	r3, r2
 8014a3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014a3c:	69b8      	ldr	r0, [r7, #24]
 8014a3e:	f002 f8cf 	bl	8016be0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014a48:	e01f      	b.n	8014a8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014a4a:	69bb      	ldr	r3, [r7, #24]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014a50:	69bb      	ldr	r3, [r7, #24]
 8014a52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014a5a:	68f8      	ldr	r0, [r7, #12]
 8014a5c:	f002 f948 	bl	8016cf0 <pbuf_clen>
 8014a60:	4603      	mov	r3, r0
 8014a62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014a64:	8bfa      	ldrh	r2, [r7, #30]
 8014a66:	8a7b      	ldrh	r3, [r7, #18]
 8014a68:	4413      	add	r3, r2
 8014a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a6e:	db05      	blt.n	8014a7c <ip_reass_free_complete_datagram+0xe0>
 8014a70:	4b15      	ldr	r3, [pc, #84]	; (8014ac8 <ip_reass_free_complete_datagram+0x12c>)
 8014a72:	22cc      	movs	r2, #204	; 0xcc
 8014a74:	4918      	ldr	r1, [pc, #96]	; (8014ad8 <ip_reass_free_complete_datagram+0x13c>)
 8014a76:	4816      	ldr	r0, [pc, #88]	; (8014ad0 <ip_reass_free_complete_datagram+0x134>)
 8014a78:	f00b fac4 	bl	8020004 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014a7c:	8bfa      	ldrh	r2, [r7, #30]
 8014a7e:	8a7b      	ldrh	r3, [r7, #18]
 8014a80:	4413      	add	r3, r2
 8014a82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014a84:	68f8      	ldr	r0, [r7, #12]
 8014a86:	f002 f8ab 	bl	8016be0 <pbuf_free>
  while (p != NULL) {
 8014a8a:	69bb      	ldr	r3, [r7, #24]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d1dc      	bne.n	8014a4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014a90:	6839      	ldr	r1, [r7, #0]
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 f8c2 	bl	8014c1c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014a98:	4b10      	ldr	r3, [pc, #64]	; (8014adc <ip_reass_free_complete_datagram+0x140>)
 8014a9a:	881b      	ldrh	r3, [r3, #0]
 8014a9c:	8bfa      	ldrh	r2, [r7, #30]
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d905      	bls.n	8014aae <ip_reass_free_complete_datagram+0x112>
 8014aa2:	4b09      	ldr	r3, [pc, #36]	; (8014ac8 <ip_reass_free_complete_datagram+0x12c>)
 8014aa4:	22d2      	movs	r2, #210	; 0xd2
 8014aa6:	490e      	ldr	r1, [pc, #56]	; (8014ae0 <ip_reass_free_complete_datagram+0x144>)
 8014aa8:	4809      	ldr	r0, [pc, #36]	; (8014ad0 <ip_reass_free_complete_datagram+0x134>)
 8014aaa:	f00b faab 	bl	8020004 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014aae:	4b0b      	ldr	r3, [pc, #44]	; (8014adc <ip_reass_free_complete_datagram+0x140>)
 8014ab0:	881a      	ldrh	r2, [r3, #0]
 8014ab2:	8bfb      	ldrh	r3, [r7, #30]
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	4b08      	ldr	r3, [pc, #32]	; (8014adc <ip_reass_free_complete_datagram+0x140>)
 8014aba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014abc:	8bfb      	ldrh	r3, [r7, #30]
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3720      	adds	r7, #32
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	0802551c 	.word	0x0802551c
 8014acc:	08025580 	.word	0x08025580
 8014ad0:	0802558c 	.word	0x0802558c
 8014ad4:	080255b4 	.word	0x080255b4
 8014ad8:	080255c8 	.word	0x080255c8
 8014adc:	24004e2c 	.word	0x24004e2c
 8014ae0:	080255e8 	.word	0x080255e8

08014ae4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b08a      	sub	sp, #40	; 0x28
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014aee:	2300      	movs	r3, #0
 8014af0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014af2:	2300      	movs	r3, #0
 8014af4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014af6:	2300      	movs	r3, #0
 8014af8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014afa:	2300      	movs	r3, #0
 8014afc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014afe:	2300      	movs	r3, #0
 8014b00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014b02:	4b28      	ldr	r3, [pc, #160]	; (8014ba4 <ip_reass_remove_oldest_datagram+0xc0>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014b08:	e030      	b.n	8014b6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0c:	695a      	ldr	r2, [r3, #20]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	68db      	ldr	r3, [r3, #12]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d10c      	bne.n	8014b30 <ip_reass_remove_oldest_datagram+0x4c>
 8014b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b18:	699a      	ldr	r2, [r3, #24]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	691b      	ldr	r3, [r3, #16]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d106      	bne.n	8014b30 <ip_reass_remove_oldest_datagram+0x4c>
 8014b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b24:	899a      	ldrh	r2, [r3, #12]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	889b      	ldrh	r3, [r3, #4]
 8014b2a:	b29b      	uxth	r3, r3
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d014      	beq.n	8014b5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014b30:	693b      	ldr	r3, [r7, #16]
 8014b32:	3301      	adds	r3, #1
 8014b34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014b36:	6a3b      	ldr	r3, [r7, #32]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d104      	bne.n	8014b46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	61bb      	str	r3, [r7, #24]
 8014b44:	e009      	b.n	8014b5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b48:	7fda      	ldrb	r2, [r3, #31]
 8014b4a:	6a3b      	ldr	r3, [r7, #32]
 8014b4c:	7fdb      	ldrb	r3, [r3, #31]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d803      	bhi.n	8014b5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014b56:	69fb      	ldr	r3, [r7, #28]
 8014b58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d001      	beq.n	8014b66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d1cb      	bne.n	8014b0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014b72:	6a3b      	ldr	r3, [r7, #32]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d008      	beq.n	8014b8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014b78:	69b9      	ldr	r1, [r7, #24]
 8014b7a:	6a38      	ldr	r0, [r7, #32]
 8014b7c:	f7ff ff0e 	bl	801499c <ip_reass_free_complete_datagram>
 8014b80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014b82:	697a      	ldr	r2, [r7, #20]
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	4413      	add	r3, r2
 8014b88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014b8a:	697a      	ldr	r2, [r7, #20]
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	da02      	bge.n	8014b98 <ip_reass_remove_oldest_datagram+0xb4>
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	2b01      	cmp	r3, #1
 8014b96:	dcac      	bgt.n	8014af2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014b98:	697b      	ldr	r3, [r7, #20]
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3728      	adds	r7, #40	; 0x28
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	24004e28 	.word	0x24004e28

08014ba8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014bb2:	2004      	movs	r0, #4
 8014bb4:	f001 f92e 	bl	8015e14 <memp_malloc>
 8014bb8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d110      	bne.n	8014be2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014bc0:	6839      	ldr	r1, [r7, #0]
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f7ff ff8e 	bl	8014ae4 <ip_reass_remove_oldest_datagram>
 8014bc8:	4602      	mov	r2, r0
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	dc03      	bgt.n	8014bd8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014bd0:	2004      	movs	r0, #4
 8014bd2:	f001 f91f 	bl	8015e14 <memp_malloc>
 8014bd6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d101      	bne.n	8014be2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014bde:	2300      	movs	r3, #0
 8014be0:	e016      	b.n	8014c10 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014be2:	2220      	movs	r2, #32
 8014be4:	2100      	movs	r1, #0
 8014be6:	68f8      	ldr	r0, [r7, #12]
 8014be8:	f00a fb12 	bl	801f210 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	220f      	movs	r2, #15
 8014bf0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014bf2:	4b09      	ldr	r3, [pc, #36]	; (8014c18 <ip_reass_enqueue_new_datagram+0x70>)
 8014bf4:	681a      	ldr	r2, [r3, #0]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014bfa:	4a07      	ldr	r2, [pc, #28]	; (8014c18 <ip_reass_enqueue_new_datagram+0x70>)
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	3308      	adds	r3, #8
 8014c04:	2214      	movs	r2, #20
 8014c06:	6879      	ldr	r1, [r7, #4]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f00a fad9 	bl	801f1c0 <memcpy>
  return ipr;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3710      	adds	r7, #16
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	24004e28 	.word	0x24004e28

08014c1c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
 8014c24:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014c26:	4b10      	ldr	r3, [pc, #64]	; (8014c68 <ip_reass_dequeue_datagram+0x4c>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d104      	bne.n	8014c3a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	4a0c      	ldr	r2, [pc, #48]	; (8014c68 <ip_reass_dequeue_datagram+0x4c>)
 8014c36:	6013      	str	r3, [r2, #0]
 8014c38:	e00d      	b.n	8014c56 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d106      	bne.n	8014c4e <ip_reass_dequeue_datagram+0x32>
 8014c40:	4b0a      	ldr	r3, [pc, #40]	; (8014c6c <ip_reass_dequeue_datagram+0x50>)
 8014c42:	f240 1245 	movw	r2, #325	; 0x145
 8014c46:	490a      	ldr	r1, [pc, #40]	; (8014c70 <ip_reass_dequeue_datagram+0x54>)
 8014c48:	480a      	ldr	r0, [pc, #40]	; (8014c74 <ip_reass_dequeue_datagram+0x58>)
 8014c4a:	f00b f9db 	bl	8020004 <iprintf>
    prev->next = ipr->next;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	681a      	ldr	r2, [r3, #0]
 8014c52:	683b      	ldr	r3, [r7, #0]
 8014c54:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014c56:	6879      	ldr	r1, [r7, #4]
 8014c58:	2004      	movs	r0, #4
 8014c5a:	f001 f94b 	bl	8015ef4 <memp_free>
}
 8014c5e:	bf00      	nop
 8014c60:	3708      	adds	r7, #8
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	24004e28 	.word	0x24004e28
 8014c6c:	0802551c 	.word	0x0802551c
 8014c70:	0802560c 	.word	0x0802560c
 8014c74:	0802558c 	.word	0x0802558c

08014c78 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b08c      	sub	sp, #48	; 0x30
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	60b9      	str	r1, [r7, #8]
 8014c82:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014c84:	2300      	movs	r3, #0
 8014c86:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014c88:	2301      	movs	r3, #1
 8014c8a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014c92:	69fb      	ldr	r3, [r7, #28]
 8014c94:	885b      	ldrh	r3, [r3, #2]
 8014c96:	b29b      	uxth	r3, r3
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f7fe f8a5 	bl	8012de8 <lwip_htons>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014ca2:	69fb      	ldr	r3, [r7, #28]
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	f003 030f 	and.w	r3, r3, #15
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	009b      	lsls	r3, r3, #2
 8014cae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014cb0:	7e7b      	ldrb	r3, [r7, #25]
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	8b7a      	ldrh	r2, [r7, #26]
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d202      	bcs.n	8014cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cbe:	e135      	b.n	8014f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014cc0:	7e7b      	ldrb	r3, [r7, #25]
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	8b7a      	ldrh	r2, [r7, #26]
 8014cc6:	1ad3      	subs	r3, r2, r3
 8014cc8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	88db      	ldrh	r3, [r3, #6]
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f7fe f889 	bl	8012de8 <lwip_htons>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	00db      	lsls	r3, r3, #3
 8014ce0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	685b      	ldr	r3, [r3, #4]
 8014ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cea:	2200      	movs	r2, #0
 8014cec:	701a      	strb	r2, [r3, #0]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	705a      	strb	r2, [r3, #1]
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	709a      	strb	r2, [r3, #2]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cfc:	8afa      	ldrh	r2, [r7, #22]
 8014cfe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014d00:	8afa      	ldrh	r2, [r7, #22]
 8014d02:	8b7b      	ldrh	r3, [r7, #26]
 8014d04:	4413      	add	r3, r2
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0e:	88db      	ldrh	r3, [r3, #6]
 8014d10:	b29b      	uxth	r3, r3
 8014d12:	8afa      	ldrh	r2, [r7, #22]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d902      	bls.n	8014d1e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d1c:	e106      	b.n	8014f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	627b      	str	r3, [r7, #36]	; 0x24
 8014d24:	e068      	b.n	8014df8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d2e:	889b      	ldrh	r3, [r3, #4]
 8014d30:	b29a      	uxth	r2, r3
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	889b      	ldrh	r3, [r3, #4]
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d235      	bcs.n	8014da8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d40:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d020      	beq.n	8014d8a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d4a:	889b      	ldrh	r3, [r3, #4]
 8014d4c:	b29a      	uxth	r2, r3
 8014d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d50:	88db      	ldrh	r3, [r3, #6]
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d307      	bcc.n	8014d68 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d5a:	88db      	ldrh	r3, [r3, #6]
 8014d5c:	b29a      	uxth	r2, r3
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	889b      	ldrh	r3, [r3, #4]
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d902      	bls.n	8014d6e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d6c:	e0de      	b.n	8014f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d70:	68ba      	ldr	r2, [r7, #8]
 8014d72:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d76:	88db      	ldrh	r3, [r3, #6]
 8014d78:	b29a      	uxth	r2, r3
 8014d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d7c:	889b      	ldrh	r3, [r3, #4]
 8014d7e:	b29b      	uxth	r3, r3
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d03d      	beq.n	8014e00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014d84:	2300      	movs	r3, #0
 8014d86:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014d88:	e03a      	b.n	8014e00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d8c:	88db      	ldrh	r3, [r3, #6]
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	889b      	ldrh	r3, [r3, #4]
 8014d94:	b29b      	uxth	r3, r3
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d902      	bls.n	8014da0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d9e:	e0c5      	b.n	8014f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	68ba      	ldr	r2, [r7, #8]
 8014da4:	605a      	str	r2, [r3, #4]
      break;
 8014da6:	e02b      	b.n	8014e00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014daa:	889b      	ldrh	r3, [r3, #4]
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	889b      	ldrh	r3, [r3, #4]
 8014db2:	b29b      	uxth	r3, r3
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d102      	bne.n	8014dbe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dbc:	e0b6      	b.n	8014f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc0:	889b      	ldrh	r3, [r3, #4]
 8014dc2:	b29a      	uxth	r2, r3
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	88db      	ldrh	r3, [r3, #6]
 8014dc8:	b29b      	uxth	r3, r3
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d202      	bcs.n	8014dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dd2:	e0ab      	b.n	8014f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d009      	beq.n	8014dee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ddc:	88db      	ldrh	r3, [r3, #6]
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	693b      	ldr	r3, [r7, #16]
 8014de2:	889b      	ldrh	r3, [r3, #4]
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d001      	beq.n	8014dee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014dea:	2300      	movs	r3, #0
 8014dec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014df4:	693b      	ldr	r3, [r7, #16]
 8014df6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d193      	bne.n	8014d26 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014dfe:	e000      	b.n	8014e02 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014e00:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d12d      	bne.n	8014e64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d01c      	beq.n	8014e48 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e10:	88db      	ldrh	r3, [r3, #6]
 8014e12:	b29a      	uxth	r2, r3
 8014e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e16:	889b      	ldrh	r3, [r3, #4]
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d906      	bls.n	8014e2c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014e1e:	4b45      	ldr	r3, [pc, #276]	; (8014f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014e20:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014e24:	4944      	ldr	r1, [pc, #272]	; (8014f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014e26:	4845      	ldr	r0, [pc, #276]	; (8014f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014e28:	f00b f8ec 	bl	8020004 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e2e:	68ba      	ldr	r2, [r7, #8]
 8014e30:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e34:	88db      	ldrh	r3, [r3, #6]
 8014e36:	b29a      	uxth	r2, r3
 8014e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e3a:	889b      	ldrh	r3, [r3, #4]
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d010      	beq.n	8014e64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014e42:	2300      	movs	r3, #0
 8014e44:	623b      	str	r3, [r7, #32]
 8014e46:	e00d      	b.n	8014e64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d006      	beq.n	8014e5e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014e50:	4b38      	ldr	r3, [pc, #224]	; (8014f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014e52:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014e56:	493a      	ldr	r1, [pc, #232]	; (8014f40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014e58:	4838      	ldr	r0, [pc, #224]	; (8014f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014e5a:	f00b f8d3 	bl	8020004 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d105      	bne.n	8014e76 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	7f9b      	ldrb	r3, [r3, #30]
 8014e6e:	f003 0301 	and.w	r3, r3, #1
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d059      	beq.n	8014f2a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014e76:	6a3b      	ldr	r3, [r7, #32]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d04f      	beq.n	8014f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	685b      	ldr	r3, [r3, #4]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d006      	beq.n	8014e92 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	889b      	ldrh	r3, [r3, #4]
 8014e8c:	b29b      	uxth	r3, r3
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d002      	beq.n	8014e98 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014e92:	2300      	movs	r3, #0
 8014e94:	623b      	str	r3, [r7, #32]
 8014e96:	e041      	b.n	8014f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e9a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014ea2:	e012      	b.n	8014eca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea6:	685b      	ldr	r3, [r3, #4]
 8014ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eac:	88db      	ldrh	r3, [r3, #6]
 8014eae:	b29a      	uxth	r2, r3
 8014eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb2:	889b      	ldrh	r3, [r3, #4]
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d002      	beq.n	8014ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	623b      	str	r3, [r7, #32]
            break;
 8014ebe:	e007      	b.n	8014ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d1e9      	bne.n	8014ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014ed0:	6a3b      	ldr	r3, [r7, #32]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d022      	beq.n	8014f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d106      	bne.n	8014eec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014ede:	4b15      	ldr	r3, [pc, #84]	; (8014f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ee0:	f240 12df 	movw	r2, #479	; 0x1df
 8014ee4:	4917      	ldr	r1, [pc, #92]	; (8014f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014ee6:	4815      	ldr	r0, [pc, #84]	; (8014f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014ee8:	f00b f88c 	bl	8020004 <iprintf>
          LWIP_ASSERT("sanity check",
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	685b      	ldr	r3, [r3, #4]
 8014ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ef4:	429a      	cmp	r2, r3
 8014ef6:	d106      	bne.n	8014f06 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014ef8:	4b0e      	ldr	r3, [pc, #56]	; (8014f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014efa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014efe:	4911      	ldr	r1, [pc, #68]	; (8014f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014f00:	480e      	ldr	r0, [pc, #56]	; (8014f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f02:	f00b f87f 	bl	8020004 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d006      	beq.n	8014f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014f0e:	4b09      	ldr	r3, [pc, #36]	; (8014f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014f10:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014f14:	490c      	ldr	r1, [pc, #48]	; (8014f48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014f16:	4809      	ldr	r0, [pc, #36]	; (8014f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014f18:	f00b f874 	bl	8020004 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014f1c:	6a3b      	ldr	r3, [r7, #32]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	bf14      	ite	ne
 8014f22:	2301      	movne	r3, #1
 8014f24:	2300      	moveq	r3, #0
 8014f26:	b2db      	uxtb	r3, r3
 8014f28:	e000      	b.n	8014f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014f2a:	2300      	movs	r3, #0
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3730      	adds	r7, #48	; 0x30
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}
 8014f34:	0802551c 	.word	0x0802551c
 8014f38:	08025628 	.word	0x08025628
 8014f3c:	0802558c 	.word	0x0802558c
 8014f40:	08025648 	.word	0x08025648
 8014f44:	08025680 	.word	0x08025680
 8014f48:	08025690 	.word	0x08025690

08014f4c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b08e      	sub	sp, #56	; 0x38
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	f003 030f 	and.w	r3, r3, #15
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	b2db      	uxtb	r3, r3
 8014f68:	2b14      	cmp	r3, #20
 8014f6a:	f040 8167 	bne.w	801523c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f70:	88db      	ldrh	r3, [r3, #6]
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7fd ff37 	bl	8012de8 <lwip_htons>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	00db      	lsls	r3, r3, #3
 8014f84:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f88:	885b      	ldrh	r3, [r3, #2]
 8014f8a:	b29b      	uxth	r3, r3
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7fd ff2b 	bl	8012de8 <lwip_htons>
 8014f92:	4603      	mov	r3, r0
 8014f94:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	f003 030f 	and.w	r3, r3, #15
 8014f9e:	b2db      	uxtb	r3, r3
 8014fa0:	009b      	lsls	r3, r3, #2
 8014fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	f0c0 8146 	bcc.w	8015240 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014fbc:	1ad3      	subs	r3, r2, r3
 8014fbe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f001 fe95 	bl	8016cf0 <pbuf_clen>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014fca:	4b9f      	ldr	r3, [pc, #636]	; (8015248 <ip4_reass+0x2fc>)
 8014fcc:	881b      	ldrh	r3, [r3, #0]
 8014fce:	461a      	mov	r2, r3
 8014fd0:	8c3b      	ldrh	r3, [r7, #32]
 8014fd2:	4413      	add	r3, r2
 8014fd4:	2b0a      	cmp	r3, #10
 8014fd6:	dd10      	ble.n	8014ffa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014fd8:	8c3b      	ldrh	r3, [r7, #32]
 8014fda:	4619      	mov	r1, r3
 8014fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014fde:	f7ff fd81 	bl	8014ae4 <ip_reass_remove_oldest_datagram>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	f000 812d 	beq.w	8015244 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014fea:	4b97      	ldr	r3, [pc, #604]	; (8015248 <ip4_reass+0x2fc>)
 8014fec:	881b      	ldrh	r3, [r3, #0]
 8014fee:	461a      	mov	r2, r3
 8014ff0:	8c3b      	ldrh	r3, [r7, #32]
 8014ff2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014ff4:	2b0a      	cmp	r3, #10
 8014ff6:	f300 8125 	bgt.w	8015244 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014ffa:	4b94      	ldr	r3, [pc, #592]	; (801524c <ip4_reass+0x300>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8015000:	e015      	b.n	801502e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015004:	695a      	ldr	r2, [r3, #20]
 8015006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015008:	68db      	ldr	r3, [r3, #12]
 801500a:	429a      	cmp	r2, r3
 801500c:	d10c      	bne.n	8015028 <ip4_reass+0xdc>
 801500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015010:	699a      	ldr	r2, [r3, #24]
 8015012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015014:	691b      	ldr	r3, [r3, #16]
 8015016:	429a      	cmp	r2, r3
 8015018:	d106      	bne.n	8015028 <ip4_reass+0xdc>
 801501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501c:	899a      	ldrh	r2, [r3, #12]
 801501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015020:	889b      	ldrh	r3, [r3, #4]
 8015022:	b29b      	uxth	r3, r3
 8015024:	429a      	cmp	r2, r3
 8015026:	d006      	beq.n	8015036 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	633b      	str	r3, [r7, #48]	; 0x30
 801502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015030:	2b00      	cmp	r3, #0
 8015032:	d1e6      	bne.n	8015002 <ip4_reass+0xb6>
 8015034:	e000      	b.n	8015038 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015036:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503a:	2b00      	cmp	r3, #0
 801503c:	d109      	bne.n	8015052 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801503e:	8c3b      	ldrh	r3, [r7, #32]
 8015040:	4619      	mov	r1, r3
 8015042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015044:	f7ff fdb0 	bl	8014ba8 <ip_reass_enqueue_new_datagram>
 8015048:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801504c:	2b00      	cmp	r3, #0
 801504e:	d11c      	bne.n	801508a <ip4_reass+0x13e>
      goto nullreturn;
 8015050:	e109      	b.n	8015266 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015054:	88db      	ldrh	r3, [r3, #6]
 8015056:	b29b      	uxth	r3, r3
 8015058:	4618      	mov	r0, r3
 801505a:	f7fd fec5 	bl	8012de8 <lwip_htons>
 801505e:	4603      	mov	r3, r0
 8015060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015064:	2b00      	cmp	r3, #0
 8015066:	d110      	bne.n	801508a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801506a:	89db      	ldrh	r3, [r3, #14]
 801506c:	4618      	mov	r0, r3
 801506e:	f7fd febb 	bl	8012de8 <lwip_htons>
 8015072:	4603      	mov	r3, r0
 8015074:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015078:	2b00      	cmp	r3, #0
 801507a:	d006      	beq.n	801508a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801507e:	3308      	adds	r3, #8
 8015080:	2214      	movs	r2, #20
 8015082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015084:	4618      	mov	r0, r3
 8015086:	f00a f89b 	bl	801f1c0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801508c:	88db      	ldrh	r3, [r3, #6]
 801508e:	b29b      	uxth	r3, r3
 8015090:	f003 0320 	and.w	r3, r3, #32
 8015094:	2b00      	cmp	r3, #0
 8015096:	bf0c      	ite	eq
 8015098:	2301      	moveq	r3, #1
 801509a:	2300      	movne	r3, #0
 801509c:	b2db      	uxtb	r3, r3
 801509e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d00e      	beq.n	80150c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80150a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80150a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150aa:	4413      	add	r3, r2
 80150ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80150ae:	8b7a      	ldrh	r2, [r7, #26]
 80150b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80150b2:	429a      	cmp	r2, r3
 80150b4:	f0c0 80a0 	bcc.w	80151f8 <ip4_reass+0x2ac>
 80150b8:	8b7b      	ldrh	r3, [r7, #26]
 80150ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80150be:	4293      	cmp	r3, r2
 80150c0:	f200 809a 	bhi.w	80151f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80150c4:	69fa      	ldr	r2, [r7, #28]
 80150c6:	6879      	ldr	r1, [r7, #4]
 80150c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150ca:	f7ff fdd5 	bl	8014c78 <ip_reass_chain_frag_into_datagram_and_validate>
 80150ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150d6:	f000 8091 	beq.w	80151fc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80150da:	4b5b      	ldr	r3, [pc, #364]	; (8015248 <ip4_reass+0x2fc>)
 80150dc:	881a      	ldrh	r2, [r3, #0]
 80150de:	8c3b      	ldrh	r3, [r7, #32]
 80150e0:	4413      	add	r3, r2
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	4b58      	ldr	r3, [pc, #352]	; (8015248 <ip4_reass+0x2fc>)
 80150e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80150e8:	69fb      	ldr	r3, [r7, #28]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d00d      	beq.n	801510a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80150ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80150f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150f2:	4413      	add	r3, r2
 80150f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80150f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150f8:	8a7a      	ldrh	r2, [r7, #18]
 80150fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80150fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fe:	7f9b      	ldrb	r3, [r3, #30]
 8015100:	f043 0301 	orr.w	r3, r3, #1
 8015104:	b2da      	uxtb	r2, r3
 8015106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015108:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2b01      	cmp	r3, #1
 801510e:	d171      	bne.n	80151f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015112:	8b9b      	ldrh	r3, [r3, #28]
 8015114:	3314      	adds	r3, #20
 8015116:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801512c:	3308      	adds	r3, #8
 801512e:	2214      	movs	r2, #20
 8015130:	4619      	mov	r1, r3
 8015132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015134:	f00a f844 	bl	801f1c0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015138:	8a3b      	ldrh	r3, [r7, #16]
 801513a:	4618      	mov	r0, r3
 801513c:	f7fd fe54 	bl	8012de8 <lwip_htons>
 8015140:	4603      	mov	r3, r0
 8015142:	461a      	mov	r2, r3
 8015144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015146:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514a:	2200      	movs	r2, #0
 801514c:	719a      	strb	r2, [r3, #6]
 801514e:	2200      	movs	r2, #0
 8015150:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015154:	2200      	movs	r2, #0
 8015156:	729a      	strb	r2, [r3, #10]
 8015158:	2200      	movs	r2, #0
 801515a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015162:	e00d      	b.n	8015180 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801516a:	2114      	movs	r1, #20
 801516c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801516e:	f001 fcb1 	bl	8016ad4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015172:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f001 fdf5 	bl	8016d64 <pbuf_cat>
      r = iprh->next_pbuf;
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015182:	2b00      	cmp	r3, #0
 8015184:	d1ee      	bne.n	8015164 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015186:	4b31      	ldr	r3, [pc, #196]	; (801524c <ip4_reass+0x300>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801518c:	429a      	cmp	r2, r3
 801518e:	d102      	bne.n	8015196 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015190:	2300      	movs	r3, #0
 8015192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015194:	e010      	b.n	80151b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015196:	4b2d      	ldr	r3, [pc, #180]	; (801524c <ip4_reass+0x300>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801519c:	e007      	b.n	80151ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d006      	beq.n	80151b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80151a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80151ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d1f4      	bne.n	801519e <ip4_reass+0x252>
 80151b4:	e000      	b.n	80151b8 <ip4_reass+0x26c>
          break;
 80151b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80151b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80151ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151bc:	f7ff fd2e 	bl	8014c1c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80151c0:	6878      	ldr	r0, [r7, #4]
 80151c2:	f001 fd95 	bl	8016cf0 <pbuf_clen>
 80151c6:	4603      	mov	r3, r0
 80151c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80151ca:	4b1f      	ldr	r3, [pc, #124]	; (8015248 <ip4_reass+0x2fc>)
 80151cc:	881b      	ldrh	r3, [r3, #0]
 80151ce:	8c3a      	ldrh	r2, [r7, #32]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d906      	bls.n	80151e2 <ip4_reass+0x296>
 80151d4:	4b1e      	ldr	r3, [pc, #120]	; (8015250 <ip4_reass+0x304>)
 80151d6:	f240 229b 	movw	r2, #667	; 0x29b
 80151da:	491e      	ldr	r1, [pc, #120]	; (8015254 <ip4_reass+0x308>)
 80151dc:	481e      	ldr	r0, [pc, #120]	; (8015258 <ip4_reass+0x30c>)
 80151de:	f00a ff11 	bl	8020004 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80151e2:	4b19      	ldr	r3, [pc, #100]	; (8015248 <ip4_reass+0x2fc>)
 80151e4:	881a      	ldrh	r2, [r3, #0]
 80151e6:	8c3b      	ldrh	r3, [r7, #32]
 80151e8:	1ad3      	subs	r3, r2, r3
 80151ea:	b29a      	uxth	r2, r3
 80151ec:	4b16      	ldr	r3, [pc, #88]	; (8015248 <ip4_reass+0x2fc>)
 80151ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	e03c      	b.n	801526e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80151f4:	2300      	movs	r3, #0
 80151f6:	e03a      	b.n	801526e <ip4_reass+0x322>
      goto nullreturn_ipr;
 80151f8:	bf00      	nop
 80151fa:	e000      	b.n	80151fe <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80151fc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80151fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015200:	2b00      	cmp	r3, #0
 8015202:	d106      	bne.n	8015212 <ip4_reass+0x2c6>
 8015204:	4b12      	ldr	r3, [pc, #72]	; (8015250 <ip4_reass+0x304>)
 8015206:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801520a:	4914      	ldr	r1, [pc, #80]	; (801525c <ip4_reass+0x310>)
 801520c:	4812      	ldr	r0, [pc, #72]	; (8015258 <ip4_reass+0x30c>)
 801520e:	f00a fef9 	bl	8020004 <iprintf>
  if (ipr->p == NULL) {
 8015212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015214:	685b      	ldr	r3, [r3, #4]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d124      	bne.n	8015264 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801521a:	4b0c      	ldr	r3, [pc, #48]	; (801524c <ip4_reass+0x300>)
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015220:	429a      	cmp	r2, r3
 8015222:	d006      	beq.n	8015232 <ip4_reass+0x2e6>
 8015224:	4b0a      	ldr	r3, [pc, #40]	; (8015250 <ip4_reass+0x304>)
 8015226:	f240 22ab 	movw	r2, #683	; 0x2ab
 801522a:	490d      	ldr	r1, [pc, #52]	; (8015260 <ip4_reass+0x314>)
 801522c:	480a      	ldr	r0, [pc, #40]	; (8015258 <ip4_reass+0x30c>)
 801522e:	f00a fee9 	bl	8020004 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015232:	2100      	movs	r1, #0
 8015234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015236:	f7ff fcf1 	bl	8014c1c <ip_reass_dequeue_datagram>
 801523a:	e014      	b.n	8015266 <ip4_reass+0x31a>
    goto nullreturn;
 801523c:	bf00      	nop
 801523e:	e012      	b.n	8015266 <ip4_reass+0x31a>
    goto nullreturn;
 8015240:	bf00      	nop
 8015242:	e010      	b.n	8015266 <ip4_reass+0x31a>
      goto nullreturn;
 8015244:	bf00      	nop
 8015246:	e00e      	b.n	8015266 <ip4_reass+0x31a>
 8015248:	24004e2c 	.word	0x24004e2c
 801524c:	24004e28 	.word	0x24004e28
 8015250:	0802551c 	.word	0x0802551c
 8015254:	080256b4 	.word	0x080256b4
 8015258:	0802558c 	.word	0x0802558c
 801525c:	080256d0 	.word	0x080256d0
 8015260:	080256dc 	.word	0x080256dc
  }

nullreturn:
 8015264:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015266:	6878      	ldr	r0, [r7, #4]
 8015268:	f001 fcba 	bl	8016be0 <pbuf_free>
  return NULL;
 801526c:	2300      	movs	r3, #0
}
 801526e:	4618      	mov	r0, r3
 8015270:	3738      	adds	r7, #56	; 0x38
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}
 8015276:	bf00      	nop

08015278 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801527c:	2005      	movs	r0, #5
 801527e:	f000 fdc9 	bl	8015e14 <memp_malloc>
 8015282:	4603      	mov	r3, r0
}
 8015284:	4618      	mov	r0, r3
 8015286:	bd80      	pop	{r7, pc}

08015288 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d106      	bne.n	80152a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015296:	4b07      	ldr	r3, [pc, #28]	; (80152b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015298:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801529c:	4906      	ldr	r1, [pc, #24]	; (80152b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801529e:	4807      	ldr	r0, [pc, #28]	; (80152bc <ip_frag_free_pbuf_custom_ref+0x34>)
 80152a0:	f00a feb0 	bl	8020004 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80152a4:	6879      	ldr	r1, [r7, #4]
 80152a6:	2005      	movs	r0, #5
 80152a8:	f000 fe24 	bl	8015ef4 <memp_free>
}
 80152ac:	bf00      	nop
 80152ae:	3708      	adds	r7, #8
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd80      	pop	{r7, pc}
 80152b4:	0802551c 	.word	0x0802551c
 80152b8:	080256fc 	.word	0x080256fc
 80152bc:	0802558c 	.word	0x0802558c

080152c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b084      	sub	sp, #16
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d106      	bne.n	80152e0 <ipfrag_free_pbuf_custom+0x20>
 80152d2:	4b11      	ldr	r3, [pc, #68]	; (8015318 <ipfrag_free_pbuf_custom+0x58>)
 80152d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80152d8:	4910      	ldr	r1, [pc, #64]	; (801531c <ipfrag_free_pbuf_custom+0x5c>)
 80152da:	4811      	ldr	r0, [pc, #68]	; (8015320 <ipfrag_free_pbuf_custom+0x60>)
 80152dc:	f00a fe92 	bl	8020004 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80152e0:	68fa      	ldr	r2, [r7, #12]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d006      	beq.n	80152f6 <ipfrag_free_pbuf_custom+0x36>
 80152e8:	4b0b      	ldr	r3, [pc, #44]	; (8015318 <ipfrag_free_pbuf_custom+0x58>)
 80152ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 80152ee:	490d      	ldr	r1, [pc, #52]	; (8015324 <ipfrag_free_pbuf_custom+0x64>)
 80152f0:	480b      	ldr	r0, [pc, #44]	; (8015320 <ipfrag_free_pbuf_custom+0x60>)
 80152f2:	f00a fe87 	bl	8020004 <iprintf>
  if (pcr->original != NULL) {
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	695b      	ldr	r3, [r3, #20]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d004      	beq.n	8015308 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	695b      	ldr	r3, [r3, #20]
 8015302:	4618      	mov	r0, r3
 8015304:	f001 fc6c 	bl	8016be0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015308:	68f8      	ldr	r0, [r7, #12]
 801530a:	f7ff ffbd 	bl	8015288 <ip_frag_free_pbuf_custom_ref>
}
 801530e:	bf00      	nop
 8015310:	3710      	adds	r7, #16
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	0802551c 	.word	0x0802551c
 801531c:	08025708 	.word	0x08025708
 8015320:	0802558c 	.word	0x0802558c
 8015324:	08025714 	.word	0x08025714

08015328 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b094      	sub	sp, #80	; 0x50
 801532c:	af02      	add	r7, sp, #8
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015334:	2300      	movs	r3, #0
 8015336:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801533e:	3b14      	subs	r3, #20
 8015340:	2b00      	cmp	r3, #0
 8015342:	da00      	bge.n	8015346 <ip4_frag+0x1e>
 8015344:	3307      	adds	r3, #7
 8015346:	10db      	asrs	r3, r3, #3
 8015348:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801534a:	2314      	movs	r3, #20
 801534c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015356:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	f003 030f 	and.w	r3, r3, #15
 8015360:	b2db      	uxtb	r3, r3
 8015362:	009b      	lsls	r3, r3, #2
 8015364:	b2db      	uxtb	r3, r3
 8015366:	2b14      	cmp	r3, #20
 8015368:	d002      	beq.n	8015370 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801536a:	f06f 0305 	mvn.w	r3, #5
 801536e:	e110      	b.n	8015592 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	895b      	ldrh	r3, [r3, #10]
 8015374:	2b13      	cmp	r3, #19
 8015376:	d809      	bhi.n	801538c <ip4_frag+0x64>
 8015378:	4b88      	ldr	r3, [pc, #544]	; (801559c <ip4_frag+0x274>)
 801537a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801537e:	4988      	ldr	r1, [pc, #544]	; (80155a0 <ip4_frag+0x278>)
 8015380:	4888      	ldr	r0, [pc, #544]	; (80155a4 <ip4_frag+0x27c>)
 8015382:	f00a fe3f 	bl	8020004 <iprintf>
 8015386:	f06f 0305 	mvn.w	r3, #5
 801538a:	e102      	b.n	8015592 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538e:	88db      	ldrh	r3, [r3, #6]
 8015390:	b29b      	uxth	r3, r3
 8015392:	4618      	mov	r0, r3
 8015394:	f7fd fd28 	bl	8012de8 <lwip_htons>
 8015398:	4603      	mov	r3, r0
 801539a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801539c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801539e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80153a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80153a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80153ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	891b      	ldrh	r3, [r3, #8]
 80153b2:	3b14      	subs	r3, #20
 80153b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80153b8:	e0e1      	b.n	801557e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80153ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80153bc:	00db      	lsls	r3, r3, #3
 80153be:	b29b      	uxth	r3, r3
 80153c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80153c4:	4293      	cmp	r3, r2
 80153c6:	bf28      	it	cs
 80153c8:	4613      	movcs	r3, r2
 80153ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80153cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153d0:	2114      	movs	r1, #20
 80153d2:	200e      	movs	r0, #14
 80153d4:	f001 f920 	bl	8016618 <pbuf_alloc>
 80153d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80153da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153dc:	2b00      	cmp	r3, #0
 80153de:	f000 80d5 	beq.w	801558c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80153e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e4:	895b      	ldrh	r3, [r3, #10]
 80153e6:	2b13      	cmp	r3, #19
 80153e8:	d806      	bhi.n	80153f8 <ip4_frag+0xd0>
 80153ea:	4b6c      	ldr	r3, [pc, #432]	; (801559c <ip4_frag+0x274>)
 80153ec:	f44f 7249 	mov.w	r2, #804	; 0x324
 80153f0:	496d      	ldr	r1, [pc, #436]	; (80155a8 <ip4_frag+0x280>)
 80153f2:	486c      	ldr	r0, [pc, #432]	; (80155a4 <ip4_frag+0x27c>)
 80153f4:	f00a fe06 	bl	8020004 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80153f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fa:	685b      	ldr	r3, [r3, #4]
 80153fc:	2214      	movs	r2, #20
 80153fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015400:	4618      	mov	r0, r3
 8015402:	f009 fedd 	bl	801f1c0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801540c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801540e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015412:	e064      	b.n	80154de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	895a      	ldrh	r2, [r3, #10]
 8015418:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801541a:	1ad3      	subs	r3, r2, r3
 801541c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	895b      	ldrh	r3, [r3, #10]
 8015422:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015424:	429a      	cmp	r2, r3
 8015426:	d906      	bls.n	8015436 <ip4_frag+0x10e>
 8015428:	4b5c      	ldr	r3, [pc, #368]	; (801559c <ip4_frag+0x274>)
 801542a:	f240 322d 	movw	r2, #813	; 0x32d
 801542e:	495f      	ldr	r1, [pc, #380]	; (80155ac <ip4_frag+0x284>)
 8015430:	485c      	ldr	r0, [pc, #368]	; (80155a4 <ip4_frag+0x27c>)
 8015432:	f00a fde7 	bl	8020004 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015436:	8bfa      	ldrh	r2, [r7, #30]
 8015438:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801543c:	4293      	cmp	r3, r2
 801543e:	bf28      	it	cs
 8015440:	4613      	movcs	r3, r2
 8015442:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801544a:	2b00      	cmp	r3, #0
 801544c:	d105      	bne.n	801545a <ip4_frag+0x132>
        poff = 0;
 801544e:	2300      	movs	r3, #0
 8015450:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	60fb      	str	r3, [r7, #12]
        continue;
 8015458:	e041      	b.n	80154de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801545a:	f7ff ff0d 	bl	8015278 <ip_frag_alloc_pbuf_custom_ref>
 801545e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015460:	69bb      	ldr	r3, [r7, #24]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d103      	bne.n	801546e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015466:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015468:	f001 fbba 	bl	8016be0 <pbuf_free>
        goto memerr;
 801546c:	e08f      	b.n	801558e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801546e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015474:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015476:	4413      	add	r3, r2
 8015478:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801547c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015480:	9201      	str	r2, [sp, #4]
 8015482:	9300      	str	r3, [sp, #0]
 8015484:	4603      	mov	r3, r0
 8015486:	2241      	movs	r2, #65	; 0x41
 8015488:	2000      	movs	r0, #0
 801548a:	f001 f9ef 	bl	801686c <pbuf_alloced_custom>
 801548e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d106      	bne.n	80154a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015496:	69b8      	ldr	r0, [r7, #24]
 8015498:	f7ff fef6 	bl	8015288 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801549c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801549e:	f001 fb9f 	bl	8016be0 <pbuf_free>
        goto memerr;
 80154a2:	e074      	b.n	801558e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	f001 fc3b 	bl	8016d20 <pbuf_ref>
      pcr->original = p;
 80154aa:	69bb      	ldr	r3, [r7, #24]
 80154ac:	68fa      	ldr	r2, [r7, #12]
 80154ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80154b0:	69bb      	ldr	r3, [r7, #24]
 80154b2:	4a3f      	ldr	r2, [pc, #252]	; (80155b0 <ip4_frag+0x288>)
 80154b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80154b6:	6979      	ldr	r1, [r7, #20]
 80154b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80154ba:	f001 fc53 	bl	8016d64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80154be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80154c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80154c6:	1ad3      	subs	r3, r2, r3
 80154c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80154cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d004      	beq.n	80154de <ip4_frag+0x1b6>
        poff = 0;
 80154d4:	2300      	movs	r3, #0
 80154d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80154de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d196      	bne.n	8015414 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80154e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80154e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80154ec:	4413      	add	r3, r2
 80154ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80154f4:	f1a3 0213 	sub.w	r2, r3, #19
 80154f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154fc:	429a      	cmp	r2, r3
 80154fe:	bfcc      	ite	gt
 8015500:	2301      	movgt	r3, #1
 8015502:	2300      	movle	r3, #0
 8015504:	b2db      	uxtb	r3, r3
 8015506:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015508:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801550c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015510:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015512:	6a3b      	ldr	r3, [r7, #32]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d002      	beq.n	801551e <ip4_frag+0x1f6>
 8015518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801551a:	2b00      	cmp	r3, #0
 801551c:	d003      	beq.n	8015526 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801551e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015524:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015526:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015528:	4618      	mov	r0, r3
 801552a:	f7fd fc5d 	bl	8012de8 <lwip_htons>
 801552e:	4603      	mov	r3, r0
 8015530:	461a      	mov	r2, r3
 8015532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015534:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015536:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015538:	3314      	adds	r3, #20
 801553a:	b29b      	uxth	r3, r3
 801553c:	4618      	mov	r0, r3
 801553e:	f7fd fc53 	bl	8012de8 <lwip_htons>
 8015542:	4603      	mov	r3, r0
 8015544:	461a      	mov	r2, r3
 8015546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015548:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801554c:	2200      	movs	r2, #0
 801554e:	729a      	strb	r2, [r3, #10]
 8015550:	2200      	movs	r2, #0
 8015552:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	695b      	ldr	r3, [r3, #20]
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801555c:	68b8      	ldr	r0, [r7, #8]
 801555e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015562:	f001 fb3d 	bl	8016be0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015566:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801556a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801556c:	1ad3      	subs	r3, r2, r3
 801556e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015572:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015576:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015578:	4413      	add	r3, r2
 801557a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801557e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015582:	2b00      	cmp	r3, #0
 8015584:	f47f af19 	bne.w	80153ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015588:	2300      	movs	r3, #0
 801558a:	e002      	b.n	8015592 <ip4_frag+0x26a>
      goto memerr;
 801558c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801558e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015592:	4618      	mov	r0, r3
 8015594:	3748      	adds	r7, #72	; 0x48
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	0802551c 	.word	0x0802551c
 80155a0:	08025720 	.word	0x08025720
 80155a4:	0802558c 	.word	0x0802558c
 80155a8:	0802573c 	.word	0x0802573c
 80155ac:	0802575c 	.word	0x0802575c
 80155b0:	080152c1 	.word	0x080152c1

080155b4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80155b4:	b480      	push	{r7}
 80155b6:	b083      	sub	sp, #12
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	4603      	mov	r3, r0
 80155bc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80155be:	4b05      	ldr	r3, [pc, #20]	; (80155d4 <ptr_to_mem+0x20>)
 80155c0:	681a      	ldr	r2, [r3, #0]
 80155c2:	88fb      	ldrh	r3, [r7, #6]
 80155c4:	4413      	add	r3, r2
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	370c      	adds	r7, #12
 80155ca:	46bd      	mov	sp, r7
 80155cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d0:	4770      	bx	lr
 80155d2:	bf00      	nop
 80155d4:	24004e30 	.word	0x24004e30

080155d8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80155d8:	b480      	push	{r7}
 80155da:	b083      	sub	sp, #12
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80155e0:	4b05      	ldr	r3, [pc, #20]	; (80155f8 <mem_to_ptr+0x20>)
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	1ad3      	subs	r3, r2, r3
 80155e8:	b29b      	uxth	r3, r3
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	370c      	adds	r7, #12
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr
 80155f6:	bf00      	nop
 80155f8:	24004e30 	.word	0x24004e30

080155fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80155fc:	b590      	push	{r4, r7, lr}
 80155fe:	b085      	sub	sp, #20
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015604:	4b45      	ldr	r3, [pc, #276]	; (801571c <plug_holes+0x120>)
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	687a      	ldr	r2, [r7, #4]
 801560a:	429a      	cmp	r2, r3
 801560c:	d206      	bcs.n	801561c <plug_holes+0x20>
 801560e:	4b44      	ldr	r3, [pc, #272]	; (8015720 <plug_holes+0x124>)
 8015610:	f240 12df 	movw	r2, #479	; 0x1df
 8015614:	4943      	ldr	r1, [pc, #268]	; (8015724 <plug_holes+0x128>)
 8015616:	4844      	ldr	r0, [pc, #272]	; (8015728 <plug_holes+0x12c>)
 8015618:	f00a fcf4 	bl	8020004 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801561c:	4b43      	ldr	r3, [pc, #268]	; (801572c <plug_holes+0x130>)
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	687a      	ldr	r2, [r7, #4]
 8015622:	429a      	cmp	r2, r3
 8015624:	d306      	bcc.n	8015634 <plug_holes+0x38>
 8015626:	4b3e      	ldr	r3, [pc, #248]	; (8015720 <plug_holes+0x124>)
 8015628:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801562c:	4940      	ldr	r1, [pc, #256]	; (8015730 <plug_holes+0x134>)
 801562e:	483e      	ldr	r0, [pc, #248]	; (8015728 <plug_holes+0x12c>)
 8015630:	f00a fce8 	bl	8020004 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	791b      	ldrb	r3, [r3, #4]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d006      	beq.n	801564a <plug_holes+0x4e>
 801563c:	4b38      	ldr	r3, [pc, #224]	; (8015720 <plug_holes+0x124>)
 801563e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015642:	493c      	ldr	r1, [pc, #240]	; (8015734 <plug_holes+0x138>)
 8015644:	4838      	ldr	r0, [pc, #224]	; (8015728 <plug_holes+0x12c>)
 8015646:	f00a fcdd 	bl	8020004 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	881b      	ldrh	r3, [r3, #0]
 801564e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015652:	d906      	bls.n	8015662 <plug_holes+0x66>
 8015654:	4b32      	ldr	r3, [pc, #200]	; (8015720 <plug_holes+0x124>)
 8015656:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801565a:	4937      	ldr	r1, [pc, #220]	; (8015738 <plug_holes+0x13c>)
 801565c:	4832      	ldr	r0, [pc, #200]	; (8015728 <plug_holes+0x12c>)
 801565e:	f00a fcd1 	bl	8020004 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	881b      	ldrh	r3, [r3, #0]
 8015666:	4618      	mov	r0, r3
 8015668:	f7ff ffa4 	bl	80155b4 <ptr_to_mem>
 801566c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	429a      	cmp	r2, r3
 8015674:	d024      	beq.n	80156c0 <plug_holes+0xc4>
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	791b      	ldrb	r3, [r3, #4]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d120      	bne.n	80156c0 <plug_holes+0xc4>
 801567e:	4b2b      	ldr	r3, [pc, #172]	; (801572c <plug_holes+0x130>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	68fa      	ldr	r2, [r7, #12]
 8015684:	429a      	cmp	r2, r3
 8015686:	d01b      	beq.n	80156c0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8015688:	4b2c      	ldr	r3, [pc, #176]	; (801573c <plug_holes+0x140>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	68fa      	ldr	r2, [r7, #12]
 801568e:	429a      	cmp	r2, r3
 8015690:	d102      	bne.n	8015698 <plug_holes+0x9c>
      lfree = mem;
 8015692:	4a2a      	ldr	r2, [pc, #168]	; (801573c <plug_holes+0x140>)
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	881a      	ldrh	r2, [r3, #0]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	881b      	ldrh	r3, [r3, #0]
 80156a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80156a8:	d00a      	beq.n	80156c0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	881b      	ldrh	r3, [r3, #0]
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7ff ff80 	bl	80155b4 <ptr_to_mem>
 80156b4:	4604      	mov	r4, r0
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	f7ff ff8e 	bl	80155d8 <mem_to_ptr>
 80156bc:	4603      	mov	r3, r0
 80156be:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	885b      	ldrh	r3, [r3, #2]
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7ff ff75 	bl	80155b4 <ptr_to_mem>
 80156ca:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80156cc:	68ba      	ldr	r2, [r7, #8]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d01f      	beq.n	8015714 <plug_holes+0x118>
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	791b      	ldrb	r3, [r3, #4]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d11b      	bne.n	8015714 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80156dc:	4b17      	ldr	r3, [pc, #92]	; (801573c <plug_holes+0x140>)
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	687a      	ldr	r2, [r7, #4]
 80156e2:	429a      	cmp	r2, r3
 80156e4:	d102      	bne.n	80156ec <plug_holes+0xf0>
      lfree = pmem;
 80156e6:	4a15      	ldr	r2, [pc, #84]	; (801573c <plug_holes+0x140>)
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	881a      	ldrh	r2, [r3, #0]
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	881b      	ldrh	r3, [r3, #0]
 80156f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80156fc:	d00a      	beq.n	8015714 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	881b      	ldrh	r3, [r3, #0]
 8015702:	4618      	mov	r0, r3
 8015704:	f7ff ff56 	bl	80155b4 <ptr_to_mem>
 8015708:	4604      	mov	r4, r0
 801570a:	68b8      	ldr	r0, [r7, #8]
 801570c:	f7ff ff64 	bl	80155d8 <mem_to_ptr>
 8015710:	4603      	mov	r3, r0
 8015712:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8015714:	bf00      	nop
 8015716:	3714      	adds	r7, #20
 8015718:	46bd      	mov	sp, r7
 801571a:	bd90      	pop	{r4, r7, pc}
 801571c:	24004e30 	.word	0x24004e30
 8015720:	0802576c 	.word	0x0802576c
 8015724:	080257c8 	.word	0x080257c8
 8015728:	080257e0 	.word	0x080257e0
 801572c:	24004e34 	.word	0x24004e34
 8015730:	08025808 	.word	0x08025808
 8015734:	08025824 	.word	0x08025824
 8015738:	08025840 	.word	0x08025840
 801573c:	24004e38 	.word	0x24004e38

08015740 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8015746:	4b16      	ldr	r3, [pc, #88]	; (80157a0 <mem_init+0x60>)
 8015748:	4a16      	ldr	r2, [pc, #88]	; (80157a4 <mem_init+0x64>)
 801574a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801574c:	4b14      	ldr	r3, [pc, #80]	; (80157a0 <mem_init+0x60>)
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015758:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2200      	movs	r2, #0
 801575e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2200      	movs	r2, #0
 8015764:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015766:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801576a:	f7ff ff23 	bl	80155b4 <ptr_to_mem>
 801576e:	4603      	mov	r3, r0
 8015770:	4a0d      	ldr	r2, [pc, #52]	; (80157a8 <mem_init+0x68>)
 8015772:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8015774:	4b0c      	ldr	r3, [pc, #48]	; (80157a8 <mem_init+0x68>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2201      	movs	r2, #1
 801577a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801577c:	4b0a      	ldr	r3, [pc, #40]	; (80157a8 <mem_init+0x68>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015784:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015786:	4b08      	ldr	r3, [pc, #32]	; (80157a8 <mem_init+0x68>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801578e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8015790:	4b03      	ldr	r3, [pc, #12]	; (80157a0 <mem_init+0x60>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4a05      	ldr	r2, [pc, #20]	; (80157ac <mem_init+0x6c>)
 8015796:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8015798:	bf00      	nop
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	24004e30 	.word	0x24004e30
 80157a4:	30044000 	.word	0x30044000
 80157a8:	24004e34 	.word	0x24004e34
 80157ac:	24004e38 	.word	0x24004e38

080157b0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b086      	sub	sp, #24
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f7ff ff0d 	bl	80155d8 <mem_to_ptr>
 80157be:	4603      	mov	r3, r0
 80157c0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	881b      	ldrh	r3, [r3, #0]
 80157c6:	4618      	mov	r0, r3
 80157c8:	f7ff fef4 	bl	80155b4 <ptr_to_mem>
 80157cc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	885b      	ldrh	r3, [r3, #2]
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7ff feee 	bl	80155b4 <ptr_to_mem>
 80157d8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	881b      	ldrh	r3, [r3, #0]
 80157de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80157e2:	d818      	bhi.n	8015816 <mem_link_valid+0x66>
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	885b      	ldrh	r3, [r3, #2]
 80157e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80157ec:	d813      	bhi.n	8015816 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80157f2:	8afa      	ldrh	r2, [r7, #22]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d004      	beq.n	8015802 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	881b      	ldrh	r3, [r3, #0]
 80157fc:	8afa      	ldrh	r2, [r7, #22]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d109      	bne.n	8015816 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015802:	4b08      	ldr	r3, [pc, #32]	; (8015824 <mem_link_valid+0x74>)
 8015804:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015806:	693a      	ldr	r2, [r7, #16]
 8015808:	429a      	cmp	r2, r3
 801580a:	d006      	beq.n	801581a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	885b      	ldrh	r3, [r3, #2]
 8015810:	8afa      	ldrh	r2, [r7, #22]
 8015812:	429a      	cmp	r2, r3
 8015814:	d001      	beq.n	801581a <mem_link_valid+0x6a>
    return 0;
 8015816:	2300      	movs	r3, #0
 8015818:	e000      	b.n	801581c <mem_link_valid+0x6c>
  }
  return 1;
 801581a:	2301      	movs	r3, #1
}
 801581c:	4618      	mov	r0, r3
 801581e:	3718      	adds	r7, #24
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}
 8015824:	24004e34 	.word	0x24004e34

08015828 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b084      	sub	sp, #16
 801582c:	af00      	add	r7, sp, #0
 801582e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d04c      	beq.n	80158d0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f003 0303 	and.w	r3, r3, #3
 801583c:	2b00      	cmp	r3, #0
 801583e:	d007      	beq.n	8015850 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015840:	4b25      	ldr	r3, [pc, #148]	; (80158d8 <mem_free+0xb0>)
 8015842:	f240 2273 	movw	r2, #627	; 0x273
 8015846:	4925      	ldr	r1, [pc, #148]	; (80158dc <mem_free+0xb4>)
 8015848:	4825      	ldr	r0, [pc, #148]	; (80158e0 <mem_free+0xb8>)
 801584a:	f00a fbdb 	bl	8020004 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801584e:	e040      	b.n	80158d2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	3b08      	subs	r3, #8
 8015854:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8015856:	4b23      	ldr	r3, [pc, #140]	; (80158e4 <mem_free+0xbc>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	68fa      	ldr	r2, [r7, #12]
 801585c:	429a      	cmp	r2, r3
 801585e:	d306      	bcc.n	801586e <mem_free+0x46>
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f103 020c 	add.w	r2, r3, #12
 8015866:	4b20      	ldr	r3, [pc, #128]	; (80158e8 <mem_free+0xc0>)
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	429a      	cmp	r2, r3
 801586c:	d907      	bls.n	801587e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801586e:	4b1a      	ldr	r3, [pc, #104]	; (80158d8 <mem_free+0xb0>)
 8015870:	f240 227f 	movw	r2, #639	; 0x27f
 8015874:	491d      	ldr	r1, [pc, #116]	; (80158ec <mem_free+0xc4>)
 8015876:	481a      	ldr	r0, [pc, #104]	; (80158e0 <mem_free+0xb8>)
 8015878:	f00a fbc4 	bl	8020004 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801587c:	e029      	b.n	80158d2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	791b      	ldrb	r3, [r3, #4]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d107      	bne.n	8015896 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8015886:	4b14      	ldr	r3, [pc, #80]	; (80158d8 <mem_free+0xb0>)
 8015888:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801588c:	4918      	ldr	r1, [pc, #96]	; (80158f0 <mem_free+0xc8>)
 801588e:	4814      	ldr	r0, [pc, #80]	; (80158e0 <mem_free+0xb8>)
 8015890:	f00a fbb8 	bl	8020004 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015894:	e01d      	b.n	80158d2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8015896:	68f8      	ldr	r0, [r7, #12]
 8015898:	f7ff ff8a 	bl	80157b0 <mem_link_valid>
 801589c:	4603      	mov	r3, r0
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d107      	bne.n	80158b2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80158a2:	4b0d      	ldr	r3, [pc, #52]	; (80158d8 <mem_free+0xb0>)
 80158a4:	f240 2295 	movw	r2, #661	; 0x295
 80158a8:	4912      	ldr	r1, [pc, #72]	; (80158f4 <mem_free+0xcc>)
 80158aa:	480d      	ldr	r0, [pc, #52]	; (80158e0 <mem_free+0xb8>)
 80158ac:	f00a fbaa 	bl	8020004 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80158b0:	e00f      	b.n	80158d2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	2200      	movs	r2, #0
 80158b6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80158b8:	4b0f      	ldr	r3, [pc, #60]	; (80158f8 <mem_free+0xd0>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	68fa      	ldr	r2, [r7, #12]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d202      	bcs.n	80158c8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80158c2:	4a0d      	ldr	r2, [pc, #52]	; (80158f8 <mem_free+0xd0>)
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80158c8:	68f8      	ldr	r0, [r7, #12]
 80158ca:	f7ff fe97 	bl	80155fc <plug_holes>
 80158ce:	e000      	b.n	80158d2 <mem_free+0xaa>
    return;
 80158d0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80158d2:	3710      	adds	r7, #16
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	0802576c 	.word	0x0802576c
 80158dc:	0802586c 	.word	0x0802586c
 80158e0:	080257e0 	.word	0x080257e0
 80158e4:	24004e30 	.word	0x24004e30
 80158e8:	24004e34 	.word	0x24004e34
 80158ec:	08025890 	.word	0x08025890
 80158f0:	080258ac 	.word	0x080258ac
 80158f4:	080258d4 	.word	0x080258d4
 80158f8:	24004e38 	.word	0x24004e38

080158fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b088      	sub	sp, #32
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	460b      	mov	r3, r1
 8015906:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015908:	887b      	ldrh	r3, [r7, #2]
 801590a:	3303      	adds	r3, #3
 801590c:	b29b      	uxth	r3, r3
 801590e:	f023 0303 	bic.w	r3, r3, #3
 8015912:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015914:	8bfb      	ldrh	r3, [r7, #30]
 8015916:	2b0b      	cmp	r3, #11
 8015918:	d801      	bhi.n	801591e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801591a:	230c      	movs	r3, #12
 801591c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801591e:	8bfb      	ldrh	r3, [r7, #30]
 8015920:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015924:	d803      	bhi.n	801592e <mem_trim+0x32>
 8015926:	8bfa      	ldrh	r2, [r7, #30]
 8015928:	887b      	ldrh	r3, [r7, #2]
 801592a:	429a      	cmp	r2, r3
 801592c:	d201      	bcs.n	8015932 <mem_trim+0x36>
    return NULL;
 801592e:	2300      	movs	r3, #0
 8015930:	e0cc      	b.n	8015acc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015932:	4b68      	ldr	r3, [pc, #416]	; (8015ad4 <mem_trim+0x1d8>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	429a      	cmp	r2, r3
 801593a:	d304      	bcc.n	8015946 <mem_trim+0x4a>
 801593c:	4b66      	ldr	r3, [pc, #408]	; (8015ad8 <mem_trim+0x1dc>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	429a      	cmp	r2, r3
 8015944:	d306      	bcc.n	8015954 <mem_trim+0x58>
 8015946:	4b65      	ldr	r3, [pc, #404]	; (8015adc <mem_trim+0x1e0>)
 8015948:	f240 22d1 	movw	r2, #721	; 0x2d1
 801594c:	4964      	ldr	r1, [pc, #400]	; (8015ae0 <mem_trim+0x1e4>)
 801594e:	4865      	ldr	r0, [pc, #404]	; (8015ae4 <mem_trim+0x1e8>)
 8015950:	f00a fb58 	bl	8020004 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015954:	4b5f      	ldr	r3, [pc, #380]	; (8015ad4 <mem_trim+0x1d8>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	429a      	cmp	r2, r3
 801595c:	d304      	bcc.n	8015968 <mem_trim+0x6c>
 801595e:	4b5e      	ldr	r3, [pc, #376]	; (8015ad8 <mem_trim+0x1dc>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	687a      	ldr	r2, [r7, #4]
 8015964:	429a      	cmp	r2, r3
 8015966:	d301      	bcc.n	801596c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	e0af      	b.n	8015acc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	3b08      	subs	r3, #8
 8015970:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8015972:	69b8      	ldr	r0, [r7, #24]
 8015974:	f7ff fe30 	bl	80155d8 <mem_to_ptr>
 8015978:	4603      	mov	r3, r0
 801597a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	881a      	ldrh	r2, [r3, #0]
 8015980:	8afb      	ldrh	r3, [r7, #22]
 8015982:	1ad3      	subs	r3, r2, r3
 8015984:	b29b      	uxth	r3, r3
 8015986:	3b08      	subs	r3, #8
 8015988:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801598a:	8bfa      	ldrh	r2, [r7, #30]
 801598c:	8abb      	ldrh	r3, [r7, #20]
 801598e:	429a      	cmp	r2, r3
 8015990:	d906      	bls.n	80159a0 <mem_trim+0xa4>
 8015992:	4b52      	ldr	r3, [pc, #328]	; (8015adc <mem_trim+0x1e0>)
 8015994:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8015998:	4953      	ldr	r1, [pc, #332]	; (8015ae8 <mem_trim+0x1ec>)
 801599a:	4852      	ldr	r0, [pc, #328]	; (8015ae4 <mem_trim+0x1e8>)
 801599c:	f00a fb32 	bl	8020004 <iprintf>
  if (newsize > size) {
 80159a0:	8bfa      	ldrh	r2, [r7, #30]
 80159a2:	8abb      	ldrh	r3, [r7, #20]
 80159a4:	429a      	cmp	r2, r3
 80159a6:	d901      	bls.n	80159ac <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80159a8:	2300      	movs	r3, #0
 80159aa:	e08f      	b.n	8015acc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80159ac:	8bfa      	ldrh	r2, [r7, #30]
 80159ae:	8abb      	ldrh	r3, [r7, #20]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d101      	bne.n	80159b8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	e089      	b.n	8015acc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80159b8:	69bb      	ldr	r3, [r7, #24]
 80159ba:	881b      	ldrh	r3, [r3, #0]
 80159bc:	4618      	mov	r0, r3
 80159be:	f7ff fdf9 	bl	80155b4 <ptr_to_mem>
 80159c2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	791b      	ldrb	r3, [r3, #4]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d13f      	bne.n	8015a4c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	881b      	ldrh	r3, [r3, #0]
 80159d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80159d4:	d106      	bne.n	80159e4 <mem_trim+0xe8>
 80159d6:	4b41      	ldr	r3, [pc, #260]	; (8015adc <mem_trim+0x1e0>)
 80159d8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80159dc:	4943      	ldr	r1, [pc, #268]	; (8015aec <mem_trim+0x1f0>)
 80159de:	4841      	ldr	r0, [pc, #260]	; (8015ae4 <mem_trim+0x1e8>)
 80159e0:	f00a fb10 	bl	8020004 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	881b      	ldrh	r3, [r3, #0]
 80159e8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80159ea:	8afa      	ldrh	r2, [r7, #22]
 80159ec:	8bfb      	ldrh	r3, [r7, #30]
 80159ee:	4413      	add	r3, r2
 80159f0:	b29b      	uxth	r3, r3
 80159f2:	3308      	adds	r3, #8
 80159f4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80159f6:	4b3e      	ldr	r3, [pc, #248]	; (8015af0 <mem_trim+0x1f4>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	693a      	ldr	r2, [r7, #16]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d106      	bne.n	8015a0e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8015a00:	89fb      	ldrh	r3, [r7, #14]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7ff fdd6 	bl	80155b4 <ptr_to_mem>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	4a39      	ldr	r2, [pc, #228]	; (8015af0 <mem_trim+0x1f4>)
 8015a0c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8015a0e:	89fb      	ldrh	r3, [r7, #14]
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7ff fdcf 	bl	80155b4 <ptr_to_mem>
 8015a16:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8015a1e:	693b      	ldr	r3, [r7, #16]
 8015a20:	89ba      	ldrh	r2, [r7, #12]
 8015a22:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015a24:	693b      	ldr	r3, [r7, #16]
 8015a26:	8afa      	ldrh	r2, [r7, #22]
 8015a28:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015a2a:	69bb      	ldr	r3, [r7, #24]
 8015a2c:	89fa      	ldrh	r2, [r7, #14]
 8015a2e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015a30:	693b      	ldr	r3, [r7, #16]
 8015a32:	881b      	ldrh	r3, [r3, #0]
 8015a34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015a38:	d047      	beq.n	8015aca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	881b      	ldrh	r3, [r3, #0]
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7ff fdb8 	bl	80155b4 <ptr_to_mem>
 8015a44:	4602      	mov	r2, r0
 8015a46:	89fb      	ldrh	r3, [r7, #14]
 8015a48:	8053      	strh	r3, [r2, #2]
 8015a4a:	e03e      	b.n	8015aca <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015a4c:	8bfb      	ldrh	r3, [r7, #30]
 8015a4e:	f103 0214 	add.w	r2, r3, #20
 8015a52:	8abb      	ldrh	r3, [r7, #20]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d838      	bhi.n	8015aca <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015a58:	8afa      	ldrh	r2, [r7, #22]
 8015a5a:	8bfb      	ldrh	r3, [r7, #30]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	3308      	adds	r3, #8
 8015a62:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015a64:	69bb      	ldr	r3, [r7, #24]
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015a6c:	d106      	bne.n	8015a7c <mem_trim+0x180>
 8015a6e:	4b1b      	ldr	r3, [pc, #108]	; (8015adc <mem_trim+0x1e0>)
 8015a70:	f240 3216 	movw	r2, #790	; 0x316
 8015a74:	491d      	ldr	r1, [pc, #116]	; (8015aec <mem_trim+0x1f0>)
 8015a76:	481b      	ldr	r0, [pc, #108]	; (8015ae4 <mem_trim+0x1e8>)
 8015a78:	f00a fac4 	bl	8020004 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8015a7c:	89fb      	ldrh	r3, [r7, #14]
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f7ff fd98 	bl	80155b4 <ptr_to_mem>
 8015a84:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8015a86:	4b1a      	ldr	r3, [pc, #104]	; (8015af0 <mem_trim+0x1f4>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	693a      	ldr	r2, [r7, #16]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d202      	bcs.n	8015a96 <mem_trim+0x19a>
      lfree = mem2;
 8015a90:	4a17      	ldr	r2, [pc, #92]	; (8015af0 <mem_trim+0x1f4>)
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8015a9c:	69bb      	ldr	r3, [r7, #24]
 8015a9e:	881a      	ldrh	r2, [r3, #0]
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	8afa      	ldrh	r2, [r7, #22]
 8015aa8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8015aaa:	69bb      	ldr	r3, [r7, #24]
 8015aac:	89fa      	ldrh	r2, [r7, #14]
 8015aae:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	881b      	ldrh	r3, [r3, #0]
 8015ab4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015ab8:	d007      	beq.n	8015aca <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	881b      	ldrh	r3, [r3, #0]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7ff fd78 	bl	80155b4 <ptr_to_mem>
 8015ac4:	4602      	mov	r2, r0
 8015ac6:	89fb      	ldrh	r3, [r7, #14]
 8015ac8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8015aca:	687b      	ldr	r3, [r7, #4]
}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3720      	adds	r7, #32
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}
 8015ad4:	24004e30 	.word	0x24004e30
 8015ad8:	24004e34 	.word	0x24004e34
 8015adc:	0802576c 	.word	0x0802576c
 8015ae0:	08025908 	.word	0x08025908
 8015ae4:	080257e0 	.word	0x080257e0
 8015ae8:	08025920 	.word	0x08025920
 8015aec:	08025940 	.word	0x08025940
 8015af0:	24004e38 	.word	0x24004e38

08015af4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b088      	sub	sp, #32
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	4603      	mov	r3, r0
 8015afc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8015afe:	88fb      	ldrh	r3, [r7, #6]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d101      	bne.n	8015b08 <mem_malloc+0x14>
    return NULL;
 8015b04:	2300      	movs	r3, #0
 8015b06:	e0d9      	b.n	8015cbc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015b08:	88fb      	ldrh	r3, [r7, #6]
 8015b0a:	3303      	adds	r3, #3
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	f023 0303 	bic.w	r3, r3, #3
 8015b12:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8015b14:	8bbb      	ldrh	r3, [r7, #28]
 8015b16:	2b0b      	cmp	r3, #11
 8015b18:	d801      	bhi.n	8015b1e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8015b1a:	230c      	movs	r3, #12
 8015b1c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8015b1e:	8bbb      	ldrh	r3, [r7, #28]
 8015b20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015b24:	d803      	bhi.n	8015b2e <mem_malloc+0x3a>
 8015b26:	8bba      	ldrh	r2, [r7, #28]
 8015b28:	88fb      	ldrh	r3, [r7, #6]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d201      	bcs.n	8015b32 <mem_malloc+0x3e>
    return NULL;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	e0c4      	b.n	8015cbc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015b32:	4b64      	ldr	r3, [pc, #400]	; (8015cc4 <mem_malloc+0x1d0>)
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ff fd4e 	bl	80155d8 <mem_to_ptr>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	83fb      	strh	r3, [r7, #30]
 8015b40:	e0b4      	b.n	8015cac <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8015b42:	8bfb      	ldrh	r3, [r7, #30]
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7ff fd35 	bl	80155b4 <ptr_to_mem>
 8015b4a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	791b      	ldrb	r3, [r3, #4]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	f040 80a4 	bne.w	8015c9e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	881b      	ldrh	r3, [r3, #0]
 8015b5a:	461a      	mov	r2, r3
 8015b5c:	8bfb      	ldrh	r3, [r7, #30]
 8015b5e:	1ad3      	subs	r3, r2, r3
 8015b60:	f1a3 0208 	sub.w	r2, r3, #8
 8015b64:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8015b66:	429a      	cmp	r2, r3
 8015b68:	f0c0 8099 	bcc.w	8015c9e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	881b      	ldrh	r3, [r3, #0]
 8015b70:	461a      	mov	r2, r3
 8015b72:	8bfb      	ldrh	r3, [r7, #30]
 8015b74:	1ad3      	subs	r3, r2, r3
 8015b76:	f1a3 0208 	sub.w	r2, r3, #8
 8015b7a:	8bbb      	ldrh	r3, [r7, #28]
 8015b7c:	3314      	adds	r3, #20
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d333      	bcc.n	8015bea <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8015b82:	8bfa      	ldrh	r2, [r7, #30]
 8015b84:	8bbb      	ldrh	r3, [r7, #28]
 8015b86:	4413      	add	r3, r2
 8015b88:	b29b      	uxth	r3, r3
 8015b8a:	3308      	adds	r3, #8
 8015b8c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8015b8e:	8a7b      	ldrh	r3, [r7, #18]
 8015b90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015b94:	d106      	bne.n	8015ba4 <mem_malloc+0xb0>
 8015b96:	4b4c      	ldr	r3, [pc, #304]	; (8015cc8 <mem_malloc+0x1d4>)
 8015b98:	f240 3287 	movw	r2, #903	; 0x387
 8015b9c:	494b      	ldr	r1, [pc, #300]	; (8015ccc <mem_malloc+0x1d8>)
 8015b9e:	484c      	ldr	r0, [pc, #304]	; (8015cd0 <mem_malloc+0x1dc>)
 8015ba0:	f00a fa30 	bl	8020004 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8015ba4:	8a7b      	ldrh	r3, [r7, #18]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7ff fd04 	bl	80155b4 <ptr_to_mem>
 8015bac:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	881a      	ldrh	r2, [r3, #0]
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	8bfa      	ldrh	r2, [r7, #30]
 8015bc0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	8a7a      	ldrh	r2, [r7, #18]
 8015bc6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8015bc8:	697b      	ldr	r3, [r7, #20]
 8015bca:	2201      	movs	r2, #1
 8015bcc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	881b      	ldrh	r3, [r3, #0]
 8015bd2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015bd6:	d00b      	beq.n	8015bf0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	881b      	ldrh	r3, [r3, #0]
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7ff fce9 	bl	80155b4 <ptr_to_mem>
 8015be2:	4602      	mov	r2, r0
 8015be4:	8a7b      	ldrh	r3, [r7, #18]
 8015be6:	8053      	strh	r3, [r2, #2]
 8015be8:	e002      	b.n	8015bf0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8015bea:	697b      	ldr	r3, [r7, #20]
 8015bec:	2201      	movs	r2, #1
 8015bee:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8015bf0:	4b34      	ldr	r3, [pc, #208]	; (8015cc4 <mem_malloc+0x1d0>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	697a      	ldr	r2, [r7, #20]
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d127      	bne.n	8015c4a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8015bfa:	4b32      	ldr	r3, [pc, #200]	; (8015cc4 <mem_malloc+0x1d0>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8015c00:	e005      	b.n	8015c0e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8015c02:	69bb      	ldr	r3, [r7, #24]
 8015c04:	881b      	ldrh	r3, [r3, #0]
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7ff fcd4 	bl	80155b4 <ptr_to_mem>
 8015c0c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	791b      	ldrb	r3, [r3, #4]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d004      	beq.n	8015c20 <mem_malloc+0x12c>
 8015c16:	4b2f      	ldr	r3, [pc, #188]	; (8015cd4 <mem_malloc+0x1e0>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	69ba      	ldr	r2, [r7, #24]
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	d1f0      	bne.n	8015c02 <mem_malloc+0x10e>
          }
          lfree = cur;
 8015c20:	4a28      	ldr	r2, [pc, #160]	; (8015cc4 <mem_malloc+0x1d0>)
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015c26:	4b27      	ldr	r3, [pc, #156]	; (8015cc4 <mem_malloc+0x1d0>)
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	4b2a      	ldr	r3, [pc, #168]	; (8015cd4 <mem_malloc+0x1e0>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d00b      	beq.n	8015c4a <mem_malloc+0x156>
 8015c32:	4b24      	ldr	r3, [pc, #144]	; (8015cc4 <mem_malloc+0x1d0>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	791b      	ldrb	r3, [r3, #4]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d006      	beq.n	8015c4a <mem_malloc+0x156>
 8015c3c:	4b22      	ldr	r3, [pc, #136]	; (8015cc8 <mem_malloc+0x1d4>)
 8015c3e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8015c42:	4925      	ldr	r1, [pc, #148]	; (8015cd8 <mem_malloc+0x1e4>)
 8015c44:	4822      	ldr	r0, [pc, #136]	; (8015cd0 <mem_malloc+0x1dc>)
 8015c46:	f00a f9dd 	bl	8020004 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8015c4a:	8bba      	ldrh	r2, [r7, #28]
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	4413      	add	r3, r2
 8015c50:	3308      	adds	r3, #8
 8015c52:	4a20      	ldr	r2, [pc, #128]	; (8015cd4 <mem_malloc+0x1e0>)
 8015c54:	6812      	ldr	r2, [r2, #0]
 8015c56:	4293      	cmp	r3, r2
 8015c58:	d906      	bls.n	8015c68 <mem_malloc+0x174>
 8015c5a:	4b1b      	ldr	r3, [pc, #108]	; (8015cc8 <mem_malloc+0x1d4>)
 8015c5c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8015c60:	491e      	ldr	r1, [pc, #120]	; (8015cdc <mem_malloc+0x1e8>)
 8015c62:	481b      	ldr	r0, [pc, #108]	; (8015cd0 <mem_malloc+0x1dc>)
 8015c64:	f00a f9ce 	bl	8020004 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	f003 0303 	and.w	r3, r3, #3
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d006      	beq.n	8015c80 <mem_malloc+0x18c>
 8015c72:	4b15      	ldr	r3, [pc, #84]	; (8015cc8 <mem_malloc+0x1d4>)
 8015c74:	f240 32bb 	movw	r2, #955	; 0x3bb
 8015c78:	4919      	ldr	r1, [pc, #100]	; (8015ce0 <mem_malloc+0x1ec>)
 8015c7a:	4815      	ldr	r0, [pc, #84]	; (8015cd0 <mem_malloc+0x1dc>)
 8015c7c:	f00a f9c2 	bl	8020004 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	f003 0303 	and.w	r3, r3, #3
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d006      	beq.n	8015c98 <mem_malloc+0x1a4>
 8015c8a:	4b0f      	ldr	r3, [pc, #60]	; (8015cc8 <mem_malloc+0x1d4>)
 8015c8c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8015c90:	4914      	ldr	r1, [pc, #80]	; (8015ce4 <mem_malloc+0x1f0>)
 8015c92:	480f      	ldr	r0, [pc, #60]	; (8015cd0 <mem_malloc+0x1dc>)
 8015c94:	f00a f9b6 	bl	8020004 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8015c98:	697b      	ldr	r3, [r7, #20]
 8015c9a:	3308      	adds	r3, #8
 8015c9c:	e00e      	b.n	8015cbc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8015c9e:	8bfb      	ldrh	r3, [r7, #30]
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f7ff fc87 	bl	80155b4 <ptr_to_mem>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	881b      	ldrh	r3, [r3, #0]
 8015caa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015cac:	8bfa      	ldrh	r2, [r7, #30]
 8015cae:	8bbb      	ldrh	r3, [r7, #28]
 8015cb0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	f4ff af44 	bcc.w	8015b42 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8015cba:	2300      	movs	r3, #0
}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3720      	adds	r7, #32
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	24004e38 	.word	0x24004e38
 8015cc8:	0802576c 	.word	0x0802576c
 8015ccc:	08025940 	.word	0x08025940
 8015cd0:	080257e0 	.word	0x080257e0
 8015cd4:	24004e34 	.word	0x24004e34
 8015cd8:	08025954 	.word	0x08025954
 8015cdc:	08025970 	.word	0x08025970
 8015ce0:	080259a0 	.word	0x080259a0
 8015ce4:	080259d0 	.word	0x080259d0

08015ce8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015ce8:	b480      	push	{r7}
 8015cea:	b085      	sub	sp, #20
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	689b      	ldr	r3, [r3, #8]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	3303      	adds	r3, #3
 8015cfe:	f023 0303 	bic.w	r3, r3, #3
 8015d02:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015d04:	2300      	movs	r3, #0
 8015d06:	60fb      	str	r3, [r7, #12]
 8015d08:	e011      	b.n	8015d2e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	689b      	ldr	r3, [r3, #8]
 8015d0e:	681a      	ldr	r2, [r3, #0]
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	689b      	ldr	r3, [r3, #8]
 8015d18:	68ba      	ldr	r2, [r7, #8]
 8015d1a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	881b      	ldrh	r3, [r3, #0]
 8015d20:	461a      	mov	r2, r3
 8015d22:	68bb      	ldr	r3, [r7, #8]
 8015d24:	4413      	add	r3, r2
 8015d26:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	3301      	adds	r3, #1
 8015d2c:	60fb      	str	r3, [r7, #12]
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	885b      	ldrh	r3, [r3, #2]
 8015d32:	461a      	mov	r2, r3
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	4293      	cmp	r3, r2
 8015d38:	dbe7      	blt.n	8015d0a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015d3a:	bf00      	nop
 8015d3c:	bf00      	nop
 8015d3e:	3714      	adds	r7, #20
 8015d40:	46bd      	mov	sp, r7
 8015d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d46:	4770      	bx	lr

08015d48 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015d4e:	2300      	movs	r3, #0
 8015d50:	80fb      	strh	r3, [r7, #6]
 8015d52:	e009      	b.n	8015d68 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015d54:	88fb      	ldrh	r3, [r7, #6]
 8015d56:	4a08      	ldr	r2, [pc, #32]	; (8015d78 <memp_init+0x30>)
 8015d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f7ff ffc3 	bl	8015ce8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015d62:	88fb      	ldrh	r3, [r7, #6]
 8015d64:	3301      	adds	r3, #1
 8015d66:	80fb      	strh	r3, [r7, #6]
 8015d68:	88fb      	ldrh	r3, [r7, #6]
 8015d6a:	2b08      	cmp	r3, #8
 8015d6c:	d9f2      	bls.n	8015d54 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8015d6e:	bf00      	nop
 8015d70:	bf00      	nop
 8015d72:	3708      	adds	r7, #8
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	080282c8 	.word	0x080282c8

08015d7c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b084      	sub	sp, #16
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	689b      	ldr	r3, [r3, #8]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d012      	beq.n	8015db8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	689b      	ldr	r3, [r3, #8]
 8015d96:	68fa      	ldr	r2, [r7, #12]
 8015d98:	6812      	ldr	r2, [r2, #0]
 8015d9a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	f003 0303 	and.w	r3, r3, #3
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d006      	beq.n	8015db4 <do_memp_malloc_pool+0x38>
 8015da6:	4b07      	ldr	r3, [pc, #28]	; (8015dc4 <do_memp_malloc_pool+0x48>)
 8015da8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8015dac:	4906      	ldr	r1, [pc, #24]	; (8015dc8 <do_memp_malloc_pool+0x4c>)
 8015dae:	4807      	ldr	r0, [pc, #28]	; (8015dcc <do_memp_malloc_pool+0x50>)
 8015db0:	f00a f928 	bl	8020004 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	e000      	b.n	8015dba <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015db8:	2300      	movs	r3, #0
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3710      	adds	r7, #16
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}
 8015dc2:	bf00      	nop
 8015dc4:	080259f4 	.word	0x080259f4
 8015dc8:	08025a50 	.word	0x08025a50
 8015dcc:	08025a74 	.word	0x08025a74

08015dd0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d106      	bne.n	8015dec <memp_malloc_pool+0x1c>
 8015dde:	4b0a      	ldr	r3, [pc, #40]	; (8015e08 <memp_malloc_pool+0x38>)
 8015de0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8015de4:	4909      	ldr	r1, [pc, #36]	; (8015e0c <memp_malloc_pool+0x3c>)
 8015de6:	480a      	ldr	r0, [pc, #40]	; (8015e10 <memp_malloc_pool+0x40>)
 8015de8:	f00a f90c 	bl	8020004 <iprintf>
  if (desc == NULL) {
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d101      	bne.n	8015df6 <memp_malloc_pool+0x26>
    return NULL;
 8015df2:	2300      	movs	r3, #0
 8015df4:	e003      	b.n	8015dfe <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f7ff ffc0 	bl	8015d7c <do_memp_malloc_pool>
 8015dfc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3708      	adds	r7, #8
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	080259f4 	.word	0x080259f4
 8015e0c:	08025a9c 	.word	0x08025a9c
 8015e10:	08025a74 	.word	0x08025a74

08015e14 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b084      	sub	sp, #16
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015e1e:	79fb      	ldrb	r3, [r7, #7]
 8015e20:	2b08      	cmp	r3, #8
 8015e22:	d908      	bls.n	8015e36 <memp_malloc+0x22>
 8015e24:	4b0a      	ldr	r3, [pc, #40]	; (8015e50 <memp_malloc+0x3c>)
 8015e26:	f240 1257 	movw	r2, #343	; 0x157
 8015e2a:	490a      	ldr	r1, [pc, #40]	; (8015e54 <memp_malloc+0x40>)
 8015e2c:	480a      	ldr	r0, [pc, #40]	; (8015e58 <memp_malloc+0x44>)
 8015e2e:	f00a f8e9 	bl	8020004 <iprintf>
 8015e32:	2300      	movs	r3, #0
 8015e34:	e008      	b.n	8015e48 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015e36:	79fb      	ldrb	r3, [r7, #7]
 8015e38:	4a08      	ldr	r2, [pc, #32]	; (8015e5c <memp_malloc+0x48>)
 8015e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7ff ff9c 	bl	8015d7c <do_memp_malloc_pool>
 8015e44:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015e46:	68fb      	ldr	r3, [r7, #12]
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3710      	adds	r7, #16
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}
 8015e50:	080259f4 	.word	0x080259f4
 8015e54:	08025ab0 	.word	0x08025ab0
 8015e58:	08025a74 	.word	0x08025a74
 8015e5c:	080282c8 	.word	0x080282c8

08015e60 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b084      	sub	sp, #16
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	f003 0303 	and.w	r3, r3, #3
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d006      	beq.n	8015e82 <do_memp_free_pool+0x22>
 8015e74:	4b0a      	ldr	r3, [pc, #40]	; (8015ea0 <do_memp_free_pool+0x40>)
 8015e76:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8015e7a:	490a      	ldr	r1, [pc, #40]	; (8015ea4 <do_memp_free_pool+0x44>)
 8015e7c:	480a      	ldr	r0, [pc, #40]	; (8015ea8 <do_memp_free_pool+0x48>)
 8015e7e:	f00a f8c1 	bl	8020004 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	689b      	ldr	r3, [r3, #8]
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	689b      	ldr	r3, [r3, #8]
 8015e94:	68fa      	ldr	r2, [r7, #12]
 8015e96:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8015e98:	bf00      	nop
 8015e9a:	3710      	adds	r7, #16
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}
 8015ea0:	080259f4 	.word	0x080259f4
 8015ea4:	08025ad0 	.word	0x08025ad0
 8015ea8:	08025a74 	.word	0x08025a74

08015eac <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b082      	sub	sp, #8
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d106      	bne.n	8015eca <memp_free_pool+0x1e>
 8015ebc:	4b0a      	ldr	r3, [pc, #40]	; (8015ee8 <memp_free_pool+0x3c>)
 8015ebe:	f240 1295 	movw	r2, #405	; 0x195
 8015ec2:	490a      	ldr	r1, [pc, #40]	; (8015eec <memp_free_pool+0x40>)
 8015ec4:	480a      	ldr	r0, [pc, #40]	; (8015ef0 <memp_free_pool+0x44>)
 8015ec6:	f00a f89d 	bl	8020004 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d007      	beq.n	8015ee0 <memp_free_pool+0x34>
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d004      	beq.n	8015ee0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8015ed6:	6839      	ldr	r1, [r7, #0]
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f7ff ffc1 	bl	8015e60 <do_memp_free_pool>
 8015ede:	e000      	b.n	8015ee2 <memp_free_pool+0x36>
    return;
 8015ee0:	bf00      	nop
}
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	080259f4 	.word	0x080259f4
 8015eec:	08025a9c 	.word	0x08025a9c
 8015ef0:	08025a74 	.word	0x08025a74

08015ef4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b082      	sub	sp, #8
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	4603      	mov	r3, r0
 8015efc:	6039      	str	r1, [r7, #0]
 8015efe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015f00:	79fb      	ldrb	r3, [r7, #7]
 8015f02:	2b08      	cmp	r3, #8
 8015f04:	d907      	bls.n	8015f16 <memp_free+0x22>
 8015f06:	4b0c      	ldr	r3, [pc, #48]	; (8015f38 <memp_free+0x44>)
 8015f08:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015f0c:	490b      	ldr	r1, [pc, #44]	; (8015f3c <memp_free+0x48>)
 8015f0e:	480c      	ldr	r0, [pc, #48]	; (8015f40 <memp_free+0x4c>)
 8015f10:	f00a f878 	bl	8020004 <iprintf>
 8015f14:	e00c      	b.n	8015f30 <memp_free+0x3c>

  if (mem == NULL) {
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d008      	beq.n	8015f2e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015f1c:	79fb      	ldrb	r3, [r7, #7]
 8015f1e:	4a09      	ldr	r2, [pc, #36]	; (8015f44 <memp_free+0x50>)
 8015f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f24:	6839      	ldr	r1, [r7, #0]
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7ff ff9a 	bl	8015e60 <do_memp_free_pool>
 8015f2c:	e000      	b.n	8015f30 <memp_free+0x3c>
    return;
 8015f2e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015f30:	3708      	adds	r7, #8
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}
 8015f36:	bf00      	nop
 8015f38:	080259f4 	.word	0x080259f4
 8015f3c:	08025af0 	.word	0x08025af0
 8015f40:	08025a74 	.word	0x08025a74
 8015f44:	080282c8 	.word	0x080282c8

08015f48 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015f48:	b480      	push	{r7}
 8015f4a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015f4c:	bf00      	nop
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f54:	4770      	bx	lr
	...

08015f58 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b086      	sub	sp, #24
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	60f8      	str	r0, [r7, #12]
 8015f60:	60b9      	str	r1, [r7, #8]
 8015f62:	607a      	str	r2, [r7, #4]
 8015f64:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d108      	bne.n	8015f7e <netif_add+0x26>
 8015f6c:	4b57      	ldr	r3, [pc, #348]	; (80160cc <netif_add+0x174>)
 8015f6e:	f240 1227 	movw	r2, #295	; 0x127
 8015f72:	4957      	ldr	r1, [pc, #348]	; (80160d0 <netif_add+0x178>)
 8015f74:	4857      	ldr	r0, [pc, #348]	; (80160d4 <netif_add+0x17c>)
 8015f76:	f00a f845 	bl	8020004 <iprintf>
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	e0a2      	b.n	80160c4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d108      	bne.n	8015f96 <netif_add+0x3e>
 8015f84:	4b51      	ldr	r3, [pc, #324]	; (80160cc <netif_add+0x174>)
 8015f86:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015f8a:	4953      	ldr	r1, [pc, #332]	; (80160d8 <netif_add+0x180>)
 8015f8c:	4851      	ldr	r0, [pc, #324]	; (80160d4 <netif_add+0x17c>)
 8015f8e:	f00a f839 	bl	8020004 <iprintf>
 8015f92:	2300      	movs	r3, #0
 8015f94:	e096      	b.n	80160c4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d101      	bne.n	8015fa0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015f9c:	4b4f      	ldr	r3, [pc, #316]	; (80160dc <netif_add+0x184>)
 8015f9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d101      	bne.n	8015faa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015fa6:	4b4d      	ldr	r3, [pc, #308]	; (80160dc <netif_add+0x184>)
 8015fa8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d101      	bne.n	8015fb4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8015fb0:	4b4a      	ldr	r3, [pc, #296]	; (80160dc <netif_add+0x184>)
 8015fb2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	4a45      	ldr	r2, [pc, #276]	; (80160e0 <netif_add+0x188>)
 8015fca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	2200      	movs	r2, #0
 8015fd0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	2200      	movs	r2, #0
 8015fde:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	6a3a      	ldr	r2, [r7, #32]
 8015fe4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015fe6:	4b3f      	ldr	r3, [pc, #252]	; (80160e4 <netif_add+0x18c>)
 8015fe8:	781a      	ldrb	r2, [r3, #0]
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ff4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	68b9      	ldr	r1, [r7, #8]
 8015ffc:	68f8      	ldr	r0, [r7, #12]
 8015ffe:	f000 f913 	bl	8016228 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016004:	68f8      	ldr	r0, [r7, #12]
 8016006:	4798      	blx	r3
 8016008:	4603      	mov	r3, r0
 801600a:	2b00      	cmp	r3, #0
 801600c:	d001      	beq.n	8016012 <netif_add+0xba>
    return NULL;
 801600e:	2300      	movs	r3, #0
 8016010:	e058      	b.n	80160c4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016018:	2bff      	cmp	r3, #255	; 0xff
 801601a:	d103      	bne.n	8016024 <netif_add+0xcc>
        netif->num = 0;
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	2200      	movs	r2, #0
 8016020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8016024:	2300      	movs	r3, #0
 8016026:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016028:	4b2f      	ldr	r3, [pc, #188]	; (80160e8 <netif_add+0x190>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	617b      	str	r3, [r7, #20]
 801602e:	e02b      	b.n	8016088 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016030:	697a      	ldr	r2, [r7, #20]
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	429a      	cmp	r2, r3
 8016036:	d106      	bne.n	8016046 <netif_add+0xee>
 8016038:	4b24      	ldr	r3, [pc, #144]	; (80160cc <netif_add+0x174>)
 801603a:	f240 128b 	movw	r2, #395	; 0x18b
 801603e:	492b      	ldr	r1, [pc, #172]	; (80160ec <netif_add+0x194>)
 8016040:	4824      	ldr	r0, [pc, #144]	; (80160d4 <netif_add+0x17c>)
 8016042:	f009 ffdf 	bl	8020004 <iprintf>
        num_netifs++;
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	3301      	adds	r3, #1
 801604a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	2bff      	cmp	r3, #255	; 0xff
 8016050:	dd06      	ble.n	8016060 <netif_add+0x108>
 8016052:	4b1e      	ldr	r3, [pc, #120]	; (80160cc <netif_add+0x174>)
 8016054:	f240 128d 	movw	r2, #397	; 0x18d
 8016058:	4925      	ldr	r1, [pc, #148]	; (80160f0 <netif_add+0x198>)
 801605a:	481e      	ldr	r0, [pc, #120]	; (80160d4 <netif_add+0x17c>)
 801605c:	f009 ffd2 	bl	8020004 <iprintf>
        if (netif2->num == netif->num) {
 8016060:	697b      	ldr	r3, [r7, #20]
 8016062:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801606c:	429a      	cmp	r2, r3
 801606e:	d108      	bne.n	8016082 <netif_add+0x12a>
          netif->num++;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016076:	3301      	adds	r3, #1
 8016078:	b2da      	uxtb	r2, r3
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8016080:	e005      	b.n	801608e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016082:	697b      	ldr	r3, [r7, #20]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	617b      	str	r3, [r7, #20]
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d1d0      	bne.n	8016030 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d1be      	bne.n	8016012 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801609a:	2bfe      	cmp	r3, #254	; 0xfe
 801609c:	d103      	bne.n	80160a6 <netif_add+0x14e>
    netif_num = 0;
 801609e:	4b11      	ldr	r3, [pc, #68]	; (80160e4 <netif_add+0x18c>)
 80160a0:	2200      	movs	r2, #0
 80160a2:	701a      	strb	r2, [r3, #0]
 80160a4:	e006      	b.n	80160b4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80160ac:	3301      	adds	r3, #1
 80160ae:	b2da      	uxtb	r2, r3
 80160b0:	4b0c      	ldr	r3, [pc, #48]	; (80160e4 <netif_add+0x18c>)
 80160b2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80160b4:	4b0c      	ldr	r3, [pc, #48]	; (80160e8 <netif_add+0x190>)
 80160b6:	681a      	ldr	r2, [r3, #0]
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80160bc:	4a0a      	ldr	r2, [pc, #40]	; (80160e8 <netif_add+0x190>)
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80160c2:	68fb      	ldr	r3, [r7, #12]
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3718      	adds	r7, #24
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	08025b0c 	.word	0x08025b0c
 80160d0:	08025bc8 	.word	0x08025bc8
 80160d4:	08025b84 	.word	0x08025b84
 80160d8:	08025be4 	.word	0x08025be4
 80160dc:	08028258 	.word	0x08028258
 80160e0:	08016503 	.word	0x08016503
 80160e4:	24004e60 	.word	0x24004e60
 80160e8:	24008828 	.word	0x24008828
 80160ec:	08025c08 	.word	0x08025c08
 80160f0:	08025c1c 	.word	0x08025c1c

080160f4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b082      	sub	sp, #8
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80160fe:	6839      	ldr	r1, [r7, #0]
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f002 ff9b 	bl	801903c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016106:	6839      	ldr	r1, [r7, #0]
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f007 fe19 	bl	801dd40 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801610e:	bf00      	nop
 8016110:	3708      	adds	r7, #8
 8016112:	46bd      	mov	sp, r7
 8016114:	bd80      	pop	{r7, pc}
	...

08016118 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b086      	sub	sp, #24
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d106      	bne.n	8016138 <netif_do_set_ipaddr+0x20>
 801612a:	4b1d      	ldr	r3, [pc, #116]	; (80161a0 <netif_do_set_ipaddr+0x88>)
 801612c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8016130:	491c      	ldr	r1, [pc, #112]	; (80161a4 <netif_do_set_ipaddr+0x8c>)
 8016132:	481d      	ldr	r0, [pc, #116]	; (80161a8 <netif_do_set_ipaddr+0x90>)
 8016134:	f009 ff66 	bl	8020004 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d106      	bne.n	801614c <netif_do_set_ipaddr+0x34>
 801613e:	4b18      	ldr	r3, [pc, #96]	; (80161a0 <netif_do_set_ipaddr+0x88>)
 8016140:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8016144:	4917      	ldr	r1, [pc, #92]	; (80161a4 <netif_do_set_ipaddr+0x8c>)
 8016146:	4818      	ldr	r0, [pc, #96]	; (80161a8 <netif_do_set_ipaddr+0x90>)
 8016148:	f009 ff5c 	bl	8020004 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	681a      	ldr	r2, [r3, #0]
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	3304      	adds	r3, #4
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	429a      	cmp	r2, r3
 8016158:	d01c      	beq.n	8016194 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	3304      	adds	r3, #4
 8016164:	681a      	ldr	r2, [r3, #0]
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801616a:	f107 0314 	add.w	r3, r7, #20
 801616e:	4619      	mov	r1, r3
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f7ff ffbf 	bl	80160f4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8016176:	68bb      	ldr	r3, [r7, #8]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d002      	beq.n	8016182 <netif_do_set_ipaddr+0x6a>
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	e000      	b.n	8016184 <netif_do_set_ipaddr+0x6c>
 8016182:	2300      	movs	r3, #0
 8016184:	68fa      	ldr	r2, [r7, #12]
 8016186:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8016188:	2101      	movs	r1, #1
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	f000 f8d2 	bl	8016334 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8016190:	2301      	movs	r3, #1
 8016192:	e000      	b.n	8016196 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8016194:	2300      	movs	r3, #0
}
 8016196:	4618      	mov	r0, r3
 8016198:	3718      	adds	r7, #24
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	08025b0c 	.word	0x08025b0c
 80161a4:	08025c4c 	.word	0x08025c4c
 80161a8:	08025b84 	.word	0x08025b84

080161ac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80161ac:	b480      	push	{r7}
 80161ae:	b085      	sub	sp, #20
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	60f8      	str	r0, [r7, #12]
 80161b4:	60b9      	str	r1, [r7, #8]
 80161b6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80161b8:	68bb      	ldr	r3, [r7, #8]
 80161ba:	681a      	ldr	r2, [r3, #0]
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	3308      	adds	r3, #8
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d00a      	beq.n	80161dc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d002      	beq.n	80161d2 <netif_do_set_netmask+0x26>
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	e000      	b.n	80161d4 <netif_do_set_netmask+0x28>
 80161d2:	2300      	movs	r3, #0
 80161d4:	68fa      	ldr	r2, [r7, #12]
 80161d6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80161d8:	2301      	movs	r3, #1
 80161da:	e000      	b.n	80161de <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80161dc:	2300      	movs	r3, #0
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3714      	adds	r7, #20
 80161e2:	46bd      	mov	sp, r7
 80161e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e8:	4770      	bx	lr

080161ea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80161ea:	b480      	push	{r7}
 80161ec:	b085      	sub	sp, #20
 80161ee:	af00      	add	r7, sp, #0
 80161f0:	60f8      	str	r0, [r7, #12]
 80161f2:	60b9      	str	r1, [r7, #8]
 80161f4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80161f6:	68bb      	ldr	r3, [r7, #8]
 80161f8:	681a      	ldr	r2, [r3, #0]
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	330c      	adds	r3, #12
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	429a      	cmp	r2, r3
 8016202:	d00a      	beq.n	801621a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d002      	beq.n	8016210 <netif_do_set_gw+0x26>
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	e000      	b.n	8016212 <netif_do_set_gw+0x28>
 8016210:	2300      	movs	r3, #0
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8016216:	2301      	movs	r3, #1
 8016218:	e000      	b.n	801621c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801621a:	2300      	movs	r3, #0
}
 801621c:	4618      	mov	r0, r3
 801621e:	3714      	adds	r7, #20
 8016220:	46bd      	mov	sp, r7
 8016222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016226:	4770      	bx	lr

08016228 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b088      	sub	sp, #32
 801622c:	af00      	add	r7, sp, #0
 801622e:	60f8      	str	r0, [r7, #12]
 8016230:	60b9      	str	r1, [r7, #8]
 8016232:	607a      	str	r2, [r7, #4]
 8016234:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8016236:	2300      	movs	r3, #0
 8016238:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801623a:	2300      	movs	r3, #0
 801623c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801623e:	68bb      	ldr	r3, [r7, #8]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d101      	bne.n	8016248 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8016244:	4b1c      	ldr	r3, [pc, #112]	; (80162b8 <netif_set_addr+0x90>)
 8016246:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d101      	bne.n	8016252 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801624e:	4b1a      	ldr	r3, [pc, #104]	; (80162b8 <netif_set_addr+0x90>)
 8016250:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d101      	bne.n	801625c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8016258:	4b17      	ldr	r3, [pc, #92]	; (80162b8 <netif_set_addr+0x90>)
 801625a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801625c:	68bb      	ldr	r3, [r7, #8]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d003      	beq.n	801626a <netif_set_addr+0x42>
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d101      	bne.n	801626e <netif_set_addr+0x46>
 801626a:	2301      	movs	r3, #1
 801626c:	e000      	b.n	8016270 <netif_set_addr+0x48>
 801626e:	2300      	movs	r3, #0
 8016270:	617b      	str	r3, [r7, #20]
  if (remove) {
 8016272:	697b      	ldr	r3, [r7, #20]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d006      	beq.n	8016286 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016278:	f107 0310 	add.w	r3, r7, #16
 801627c:	461a      	mov	r2, r3
 801627e:	68b9      	ldr	r1, [r7, #8]
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	f7ff ff49 	bl	8016118 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8016286:	69fa      	ldr	r2, [r7, #28]
 8016288:	6879      	ldr	r1, [r7, #4]
 801628a:	68f8      	ldr	r0, [r7, #12]
 801628c:	f7ff ff8e 	bl	80161ac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8016290:	69ba      	ldr	r2, [r7, #24]
 8016292:	6839      	ldr	r1, [r7, #0]
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	f7ff ffa8 	bl	80161ea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d106      	bne.n	80162ae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80162a0:	f107 0310 	add.w	r3, r7, #16
 80162a4:	461a      	mov	r2, r3
 80162a6:	68b9      	ldr	r1, [r7, #8]
 80162a8:	68f8      	ldr	r0, [r7, #12]
 80162aa:	f7ff ff35 	bl	8016118 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80162ae:	bf00      	nop
 80162b0:	3720      	adds	r7, #32
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	08028258 	.word	0x08028258

080162bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80162bc:	b480      	push	{r7}
 80162be:	b083      	sub	sp, #12
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80162c4:	4a04      	ldr	r2, [pc, #16]	; (80162d8 <netif_set_default+0x1c>)
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80162ca:	bf00      	nop
 80162cc:	370c      	adds	r7, #12
 80162ce:	46bd      	mov	sp, r7
 80162d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d4:	4770      	bx	lr
 80162d6:	bf00      	nop
 80162d8:	2400882c 	.word	0x2400882c

080162dc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b082      	sub	sp, #8
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d107      	bne.n	80162fa <netif_set_up+0x1e>
 80162ea:	4b0f      	ldr	r3, [pc, #60]	; (8016328 <netif_set_up+0x4c>)
 80162ec:	f44f 7254 	mov.w	r2, #848	; 0x350
 80162f0:	490e      	ldr	r1, [pc, #56]	; (801632c <netif_set_up+0x50>)
 80162f2:	480f      	ldr	r0, [pc, #60]	; (8016330 <netif_set_up+0x54>)
 80162f4:	f009 fe86 	bl	8020004 <iprintf>
 80162f8:	e013      	b.n	8016322 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016300:	f003 0301 	and.w	r3, r3, #1
 8016304:	2b00      	cmp	r3, #0
 8016306:	d10c      	bne.n	8016322 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801630e:	f043 0301 	orr.w	r3, r3, #1
 8016312:	b2da      	uxtb	r2, r3
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801631a:	2103      	movs	r1, #3
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 f809 	bl	8016334 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016322:	3708      	adds	r7, #8
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}
 8016328:	08025b0c 	.word	0x08025b0c
 801632c:	08025cbc 	.word	0x08025cbc
 8016330:	08025b84 	.word	0x08025b84

08016334 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b082      	sub	sp, #8
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
 801633c:	460b      	mov	r3, r1
 801633e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d106      	bne.n	8016354 <netif_issue_reports+0x20>
 8016346:	4b18      	ldr	r3, [pc, #96]	; (80163a8 <netif_issue_reports+0x74>)
 8016348:	f240 326d 	movw	r2, #877	; 0x36d
 801634c:	4917      	ldr	r1, [pc, #92]	; (80163ac <netif_issue_reports+0x78>)
 801634e:	4818      	ldr	r0, [pc, #96]	; (80163b0 <netif_issue_reports+0x7c>)
 8016350:	f009 fe58 	bl	8020004 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801635a:	f003 0304 	and.w	r3, r3, #4
 801635e:	2b00      	cmp	r3, #0
 8016360:	d01e      	beq.n	80163a0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016368:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801636c:	2b00      	cmp	r3, #0
 801636e:	d017      	beq.n	80163a0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016370:	78fb      	ldrb	r3, [r7, #3]
 8016372:	f003 0301 	and.w	r3, r3, #1
 8016376:	2b00      	cmp	r3, #0
 8016378:	d013      	beq.n	80163a2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	3304      	adds	r3, #4
 801637e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016380:	2b00      	cmp	r3, #0
 8016382:	d00e      	beq.n	80163a2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801638a:	f003 0308 	and.w	r3, r3, #8
 801638e:	2b00      	cmp	r3, #0
 8016390:	d007      	beq.n	80163a2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	3304      	adds	r3, #4
 8016396:	4619      	mov	r1, r3
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f7fd fc8d 	bl	8013cb8 <etharp_request>
 801639e:	e000      	b.n	80163a2 <netif_issue_reports+0x6e>
    return;
 80163a0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80163a2:	3708      	adds	r7, #8
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	08025b0c 	.word	0x08025b0c
 80163ac:	08025cd8 	.word	0x08025cd8
 80163b0:	08025b84 	.word	0x08025b84

080163b4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d107      	bne.n	80163d2 <netif_set_down+0x1e>
 80163c2:	4b12      	ldr	r3, [pc, #72]	; (801640c <netif_set_down+0x58>)
 80163c4:	f240 329b 	movw	r2, #923	; 0x39b
 80163c8:	4911      	ldr	r1, [pc, #68]	; (8016410 <netif_set_down+0x5c>)
 80163ca:	4812      	ldr	r0, [pc, #72]	; (8016414 <netif_set_down+0x60>)
 80163cc:	f009 fe1a 	bl	8020004 <iprintf>
 80163d0:	e019      	b.n	8016406 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163d8:	f003 0301 	and.w	r3, r3, #1
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d012      	beq.n	8016406 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163e6:	f023 0301 	bic.w	r3, r3, #1
 80163ea:	b2da      	uxtb	r2, r3
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163f8:	f003 0308 	and.w	r3, r3, #8
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d002      	beq.n	8016406 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f7fd f817 	bl	8013434 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8016406:	3708      	adds	r7, #8
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	08025b0c 	.word	0x08025b0c
 8016410:	08025cfc 	.word	0x08025cfc
 8016414:	08025b84 	.word	0x08025b84

08016418 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b082      	sub	sp, #8
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d107      	bne.n	8016436 <netif_set_link_up+0x1e>
 8016426:	4b13      	ldr	r3, [pc, #76]	; (8016474 <netif_set_link_up+0x5c>)
 8016428:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801642c:	4912      	ldr	r1, [pc, #72]	; (8016478 <netif_set_link_up+0x60>)
 801642e:	4813      	ldr	r0, [pc, #76]	; (801647c <netif_set_link_up+0x64>)
 8016430:	f009 fde8 	bl	8020004 <iprintf>
 8016434:	e01b      	b.n	801646e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801643c:	f003 0304 	and.w	r3, r3, #4
 8016440:	2b00      	cmp	r3, #0
 8016442:	d114      	bne.n	801646e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801644a:	f043 0304 	orr.w	r3, r3, #4
 801644e:	b2da      	uxtb	r2, r3
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016456:	2103      	movs	r1, #3
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f7ff ff6b 	bl	8016334 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	69db      	ldr	r3, [r3, #28]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d003      	beq.n	801646e <netif_set_link_up+0x56>
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	69db      	ldr	r3, [r3, #28]
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801646e:	3708      	adds	r7, #8
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	08025b0c 	.word	0x08025b0c
 8016478:	08025d1c 	.word	0x08025d1c
 801647c:	08025b84 	.word	0x08025b84

08016480 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b082      	sub	sp, #8
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d107      	bne.n	801649e <netif_set_link_down+0x1e>
 801648e:	4b11      	ldr	r3, [pc, #68]	; (80164d4 <netif_set_link_down+0x54>)
 8016490:	f240 4206 	movw	r2, #1030	; 0x406
 8016494:	4910      	ldr	r1, [pc, #64]	; (80164d8 <netif_set_link_down+0x58>)
 8016496:	4811      	ldr	r0, [pc, #68]	; (80164dc <netif_set_link_down+0x5c>)
 8016498:	f009 fdb4 	bl	8020004 <iprintf>
 801649c:	e017      	b.n	80164ce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164a4:	f003 0304 	and.w	r3, r3, #4
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d010      	beq.n	80164ce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164b2:	f023 0304 	bic.w	r3, r3, #4
 80164b6:	b2da      	uxtb	r2, r3
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	69db      	ldr	r3, [r3, #28]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d003      	beq.n	80164ce <netif_set_link_down+0x4e>
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	69db      	ldr	r3, [r3, #28]
 80164ca:	6878      	ldr	r0, [r7, #4]
 80164cc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80164ce:	3708      	adds	r7, #8
 80164d0:	46bd      	mov	sp, r7
 80164d2:	bd80      	pop	{r7, pc}
 80164d4:	08025b0c 	.word	0x08025b0c
 80164d8:	08025d40 	.word	0x08025d40
 80164dc:	08025b84 	.word	0x08025b84

080164e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80164e0:	b480      	push	{r7}
 80164e2:	b083      	sub	sp, #12
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d002      	beq.n	80164f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	683a      	ldr	r2, [r7, #0]
 80164f4:	61da      	str	r2, [r3, #28]
  }
}
 80164f6:	bf00      	nop
 80164f8:	370c      	adds	r7, #12
 80164fa:	46bd      	mov	sp, r7
 80164fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016500:	4770      	bx	lr

08016502 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016502:	b480      	push	{r7}
 8016504:	b085      	sub	sp, #20
 8016506:	af00      	add	r7, sp, #0
 8016508:	60f8      	str	r0, [r7, #12]
 801650a:	60b9      	str	r1, [r7, #8]
 801650c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801650e:	f06f 030b 	mvn.w	r3, #11
}
 8016512:	4618      	mov	r0, r3
 8016514:	3714      	adds	r7, #20
 8016516:	46bd      	mov	sp, r7
 8016518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651c:	4770      	bx	lr
	...

08016520 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016520:	b480      	push	{r7}
 8016522:	b085      	sub	sp, #20
 8016524:	af00      	add	r7, sp, #0
 8016526:	4603      	mov	r3, r0
 8016528:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801652a:	79fb      	ldrb	r3, [r7, #7]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d013      	beq.n	8016558 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8016530:	4b0d      	ldr	r3, [pc, #52]	; (8016568 <netif_get_by_index+0x48>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	60fb      	str	r3, [r7, #12]
 8016536:	e00c      	b.n	8016552 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801653e:	3301      	adds	r3, #1
 8016540:	b2db      	uxtb	r3, r3
 8016542:	79fa      	ldrb	r2, [r7, #7]
 8016544:	429a      	cmp	r2, r3
 8016546:	d101      	bne.n	801654c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	e006      	b.n	801655a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	60fb      	str	r3, [r7, #12]
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d1ef      	bne.n	8016538 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8016558:	2300      	movs	r3, #0
}
 801655a:	4618      	mov	r0, r3
 801655c:	3714      	adds	r7, #20
 801655e:	46bd      	mov	sp, r7
 8016560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016564:	4770      	bx	lr
 8016566:	bf00      	nop
 8016568:	24008828 	.word	0x24008828

0801656c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b082      	sub	sp, #8
 8016570:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016572:	4b0c      	ldr	r3, [pc, #48]	; (80165a4 <pbuf_free_ooseq+0x38>)
 8016574:	2200      	movs	r2, #0
 8016576:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016578:	4b0b      	ldr	r3, [pc, #44]	; (80165a8 <pbuf_free_ooseq+0x3c>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	607b      	str	r3, [r7, #4]
 801657e:	e00a      	b.n	8016596 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016584:	2b00      	cmp	r3, #0
 8016586:	d003      	beq.n	8016590 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8016588:	6878      	ldr	r0, [r7, #4]
 801658a:	f002 fd95 	bl	80190b8 <tcp_free_ooseq>
      return;
 801658e:	e005      	b.n	801659c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	68db      	ldr	r3, [r3, #12]
 8016594:	607b      	str	r3, [r7, #4]
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d1f1      	bne.n	8016580 <pbuf_free_ooseq+0x14>
    }
  }
}
 801659c:	3708      	adds	r7, #8
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	24008830 	.word	0x24008830
 80165a8:	24008838 	.word	0x24008838

080165ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80165ac:	b480      	push	{r7}
 80165ae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80165b0:	4b03      	ldr	r3, [pc, #12]	; (80165c0 <pbuf_pool_is_empty+0x14>)
 80165b2:	2201      	movs	r2, #1
 80165b4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80165b6:	bf00      	nop
 80165b8:	46bd      	mov	sp, r7
 80165ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165be:	4770      	bx	lr
 80165c0:	24008830 	.word	0x24008830

080165c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80165c4:	b480      	push	{r7}
 80165c6:	b085      	sub	sp, #20
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	60f8      	str	r0, [r7, #12]
 80165cc:	60b9      	str	r1, [r7, #8]
 80165ce:	4611      	mov	r1, r2
 80165d0:	461a      	mov	r2, r3
 80165d2:	460b      	mov	r3, r1
 80165d4:	80fb      	strh	r3, [r7, #6]
 80165d6:	4613      	mov	r3, r2
 80165d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	2200      	movs	r2, #0
 80165de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	68ba      	ldr	r2, [r7, #8]
 80165e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	88fa      	ldrh	r2, [r7, #6]
 80165ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	88ba      	ldrh	r2, [r7, #4]
 80165f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80165f2:	8b3b      	ldrh	r3, [r7, #24]
 80165f4:	b2da      	uxtb	r2, r3
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	7f3a      	ldrb	r2, [r7, #28]
 80165fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	2201      	movs	r2, #1
 8016604:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	2200      	movs	r2, #0
 801660a:	73da      	strb	r2, [r3, #15]
}
 801660c:	bf00      	nop
 801660e:	3714      	adds	r7, #20
 8016610:	46bd      	mov	sp, r7
 8016612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016616:	4770      	bx	lr

08016618 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b08c      	sub	sp, #48	; 0x30
 801661c:	af02      	add	r7, sp, #8
 801661e:	4603      	mov	r3, r0
 8016620:	71fb      	strb	r3, [r7, #7]
 8016622:	460b      	mov	r3, r1
 8016624:	80bb      	strh	r3, [r7, #4]
 8016626:	4613      	mov	r3, r2
 8016628:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801662a:	79fb      	ldrb	r3, [r7, #7]
 801662c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801662e:	887b      	ldrh	r3, [r7, #2]
 8016630:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016634:	d07f      	beq.n	8016736 <pbuf_alloc+0x11e>
 8016636:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801663a:	f300 80c8 	bgt.w	80167ce <pbuf_alloc+0x1b6>
 801663e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016642:	d010      	beq.n	8016666 <pbuf_alloc+0x4e>
 8016644:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016648:	f300 80c1 	bgt.w	80167ce <pbuf_alloc+0x1b6>
 801664c:	2b01      	cmp	r3, #1
 801664e:	d002      	beq.n	8016656 <pbuf_alloc+0x3e>
 8016650:	2b41      	cmp	r3, #65	; 0x41
 8016652:	f040 80bc 	bne.w	80167ce <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8016656:	887a      	ldrh	r2, [r7, #2]
 8016658:	88bb      	ldrh	r3, [r7, #4]
 801665a:	4619      	mov	r1, r3
 801665c:	2000      	movs	r0, #0
 801665e:	f000 f8d1 	bl	8016804 <pbuf_alloc_reference>
 8016662:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8016664:	e0bd      	b.n	80167e2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8016666:	2300      	movs	r3, #0
 8016668:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801666a:	2300      	movs	r3, #0
 801666c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801666e:	88bb      	ldrh	r3, [r7, #4]
 8016670:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016672:	2008      	movs	r0, #8
 8016674:	f7ff fbce 	bl	8015e14 <memp_malloc>
 8016678:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801667a:	693b      	ldr	r3, [r7, #16]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d109      	bne.n	8016694 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8016680:	f7ff ff94 	bl	80165ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8016684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016686:	2b00      	cmp	r3, #0
 8016688:	d002      	beq.n	8016690 <pbuf_alloc+0x78>
            pbuf_free(p);
 801668a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801668c:	f000 faa8 	bl	8016be0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8016690:	2300      	movs	r3, #0
 8016692:	e0a7      	b.n	80167e4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016696:	3303      	adds	r3, #3
 8016698:	b29b      	uxth	r3, r3
 801669a:	f023 0303 	bic.w	r3, r3, #3
 801669e:	b29b      	uxth	r3, r3
 80166a0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80166a4:	b29b      	uxth	r3, r3
 80166a6:	8b7a      	ldrh	r2, [r7, #26]
 80166a8:	4293      	cmp	r3, r2
 80166aa:	bf28      	it	cs
 80166ac:	4613      	movcs	r3, r2
 80166ae:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80166b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166b2:	3310      	adds	r3, #16
 80166b4:	693a      	ldr	r2, [r7, #16]
 80166b6:	4413      	add	r3, r2
 80166b8:	3303      	adds	r3, #3
 80166ba:	f023 0303 	bic.w	r3, r3, #3
 80166be:	4618      	mov	r0, r3
 80166c0:	89f9      	ldrh	r1, [r7, #14]
 80166c2:	8b7a      	ldrh	r2, [r7, #26]
 80166c4:	2300      	movs	r3, #0
 80166c6:	9301      	str	r3, [sp, #4]
 80166c8:	887b      	ldrh	r3, [r7, #2]
 80166ca:	9300      	str	r3, [sp, #0]
 80166cc:	460b      	mov	r3, r1
 80166ce:	4601      	mov	r1, r0
 80166d0:	6938      	ldr	r0, [r7, #16]
 80166d2:	f7ff ff77 	bl	80165c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80166d6:	693b      	ldr	r3, [r7, #16]
 80166d8:	685b      	ldr	r3, [r3, #4]
 80166da:	f003 0303 	and.w	r3, r3, #3
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d006      	beq.n	80166f0 <pbuf_alloc+0xd8>
 80166e2:	4b42      	ldr	r3, [pc, #264]	; (80167ec <pbuf_alloc+0x1d4>)
 80166e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80166e8:	4941      	ldr	r1, [pc, #260]	; (80167f0 <pbuf_alloc+0x1d8>)
 80166ea:	4842      	ldr	r0, [pc, #264]	; (80167f4 <pbuf_alloc+0x1dc>)
 80166ec:	f009 fc8a 	bl	8020004 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80166f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166f2:	3303      	adds	r3, #3
 80166f4:	f023 0303 	bic.w	r3, r3, #3
 80166f8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80166fc:	d106      	bne.n	801670c <pbuf_alloc+0xf4>
 80166fe:	4b3b      	ldr	r3, [pc, #236]	; (80167ec <pbuf_alloc+0x1d4>)
 8016700:	f44f 7281 	mov.w	r2, #258	; 0x102
 8016704:	493c      	ldr	r1, [pc, #240]	; (80167f8 <pbuf_alloc+0x1e0>)
 8016706:	483b      	ldr	r0, [pc, #236]	; (80167f4 <pbuf_alloc+0x1dc>)
 8016708:	f009 fc7c 	bl	8020004 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670e:	2b00      	cmp	r3, #0
 8016710:	d102      	bne.n	8016718 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	627b      	str	r3, [r7, #36]	; 0x24
 8016716:	e002      	b.n	801671e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8016718:	69fb      	ldr	r3, [r7, #28]
 801671a:	693a      	ldr	r2, [r7, #16]
 801671c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8016722:	8b7a      	ldrh	r2, [r7, #26]
 8016724:	89fb      	ldrh	r3, [r7, #14]
 8016726:	1ad3      	subs	r3, r2, r3
 8016728:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801672a:	2300      	movs	r3, #0
 801672c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801672e:	8b7b      	ldrh	r3, [r7, #26]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d19e      	bne.n	8016672 <pbuf_alloc+0x5a>
      break;
 8016734:	e055      	b.n	80167e2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016736:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016738:	3303      	adds	r3, #3
 801673a:	b29b      	uxth	r3, r3
 801673c:	f023 0303 	bic.w	r3, r3, #3
 8016740:	b29a      	uxth	r2, r3
 8016742:	88bb      	ldrh	r3, [r7, #4]
 8016744:	3303      	adds	r3, #3
 8016746:	b29b      	uxth	r3, r3
 8016748:	f023 0303 	bic.w	r3, r3, #3
 801674c:	b29b      	uxth	r3, r3
 801674e:	4413      	add	r3, r2
 8016750:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016752:	8b3b      	ldrh	r3, [r7, #24]
 8016754:	3310      	adds	r3, #16
 8016756:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016758:	8b3a      	ldrh	r2, [r7, #24]
 801675a:	88bb      	ldrh	r3, [r7, #4]
 801675c:	3303      	adds	r3, #3
 801675e:	f023 0303 	bic.w	r3, r3, #3
 8016762:	429a      	cmp	r2, r3
 8016764:	d306      	bcc.n	8016774 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8016766:	8afa      	ldrh	r2, [r7, #22]
 8016768:	88bb      	ldrh	r3, [r7, #4]
 801676a:	3303      	adds	r3, #3
 801676c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016770:	429a      	cmp	r2, r3
 8016772:	d201      	bcs.n	8016778 <pbuf_alloc+0x160>
        return NULL;
 8016774:	2300      	movs	r3, #0
 8016776:	e035      	b.n	80167e4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016778:	8afb      	ldrh	r3, [r7, #22]
 801677a:	4618      	mov	r0, r3
 801677c:	f7ff f9ba 	bl	8015af4 <mem_malloc>
 8016780:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8016782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016784:	2b00      	cmp	r3, #0
 8016786:	d101      	bne.n	801678c <pbuf_alloc+0x174>
        return NULL;
 8016788:	2300      	movs	r3, #0
 801678a:	e02b      	b.n	80167e4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801678c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801678e:	3310      	adds	r3, #16
 8016790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016792:	4413      	add	r3, r2
 8016794:	3303      	adds	r3, #3
 8016796:	f023 0303 	bic.w	r3, r3, #3
 801679a:	4618      	mov	r0, r3
 801679c:	88b9      	ldrh	r1, [r7, #4]
 801679e:	88ba      	ldrh	r2, [r7, #4]
 80167a0:	2300      	movs	r3, #0
 80167a2:	9301      	str	r3, [sp, #4]
 80167a4:	887b      	ldrh	r3, [r7, #2]
 80167a6:	9300      	str	r3, [sp, #0]
 80167a8:	460b      	mov	r3, r1
 80167aa:	4601      	mov	r1, r0
 80167ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167ae:	f7ff ff09 	bl	80165c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80167b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b4:	685b      	ldr	r3, [r3, #4]
 80167b6:	f003 0303 	and.w	r3, r3, #3
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d010      	beq.n	80167e0 <pbuf_alloc+0x1c8>
 80167be:	4b0b      	ldr	r3, [pc, #44]	; (80167ec <pbuf_alloc+0x1d4>)
 80167c0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80167c4:	490d      	ldr	r1, [pc, #52]	; (80167fc <pbuf_alloc+0x1e4>)
 80167c6:	480b      	ldr	r0, [pc, #44]	; (80167f4 <pbuf_alloc+0x1dc>)
 80167c8:	f009 fc1c 	bl	8020004 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80167cc:	e008      	b.n	80167e0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80167ce:	4b07      	ldr	r3, [pc, #28]	; (80167ec <pbuf_alloc+0x1d4>)
 80167d0:	f240 1227 	movw	r2, #295	; 0x127
 80167d4:	490a      	ldr	r1, [pc, #40]	; (8016800 <pbuf_alloc+0x1e8>)
 80167d6:	4807      	ldr	r0, [pc, #28]	; (80167f4 <pbuf_alloc+0x1dc>)
 80167d8:	f009 fc14 	bl	8020004 <iprintf>
      return NULL;
 80167dc:	2300      	movs	r3, #0
 80167de:	e001      	b.n	80167e4 <pbuf_alloc+0x1cc>
      break;
 80167e0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80167e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	3728      	adds	r7, #40	; 0x28
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	08025d64 	.word	0x08025d64
 80167f0:	08025dc0 	.word	0x08025dc0
 80167f4:	08025df0 	.word	0x08025df0
 80167f8:	08025e18 	.word	0x08025e18
 80167fc:	08025e4c 	.word	0x08025e4c
 8016800:	08025e78 	.word	0x08025e78

08016804 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b086      	sub	sp, #24
 8016808:	af02      	add	r7, sp, #8
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	460b      	mov	r3, r1
 801680e:	807b      	strh	r3, [r7, #2]
 8016810:	4613      	mov	r3, r2
 8016812:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8016814:	883b      	ldrh	r3, [r7, #0]
 8016816:	2b41      	cmp	r3, #65	; 0x41
 8016818:	d009      	beq.n	801682e <pbuf_alloc_reference+0x2a>
 801681a:	883b      	ldrh	r3, [r7, #0]
 801681c:	2b01      	cmp	r3, #1
 801681e:	d006      	beq.n	801682e <pbuf_alloc_reference+0x2a>
 8016820:	4b0f      	ldr	r3, [pc, #60]	; (8016860 <pbuf_alloc_reference+0x5c>)
 8016822:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8016826:	490f      	ldr	r1, [pc, #60]	; (8016864 <pbuf_alloc_reference+0x60>)
 8016828:	480f      	ldr	r0, [pc, #60]	; (8016868 <pbuf_alloc_reference+0x64>)
 801682a:	f009 fbeb 	bl	8020004 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801682e:	2007      	movs	r0, #7
 8016830:	f7ff faf0 	bl	8015e14 <memp_malloc>
 8016834:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d101      	bne.n	8016840 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801683c:	2300      	movs	r3, #0
 801683e:	e00b      	b.n	8016858 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8016840:	8879      	ldrh	r1, [r7, #2]
 8016842:	887a      	ldrh	r2, [r7, #2]
 8016844:	2300      	movs	r3, #0
 8016846:	9301      	str	r3, [sp, #4]
 8016848:	883b      	ldrh	r3, [r7, #0]
 801684a:	9300      	str	r3, [sp, #0]
 801684c:	460b      	mov	r3, r1
 801684e:	6879      	ldr	r1, [r7, #4]
 8016850:	68f8      	ldr	r0, [r7, #12]
 8016852:	f7ff feb7 	bl	80165c4 <pbuf_init_alloced_pbuf>
  return p;
 8016856:	68fb      	ldr	r3, [r7, #12]
}
 8016858:	4618      	mov	r0, r3
 801685a:	3710      	adds	r7, #16
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}
 8016860:	08025d64 	.word	0x08025d64
 8016864:	08025e94 	.word	0x08025e94
 8016868:	08025df0 	.word	0x08025df0

0801686c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b088      	sub	sp, #32
 8016870:	af02      	add	r7, sp, #8
 8016872:	607b      	str	r3, [r7, #4]
 8016874:	4603      	mov	r3, r0
 8016876:	73fb      	strb	r3, [r7, #15]
 8016878:	460b      	mov	r3, r1
 801687a:	81bb      	strh	r3, [r7, #12]
 801687c:	4613      	mov	r3, r2
 801687e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8016880:	7bfb      	ldrb	r3, [r7, #15]
 8016882:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016884:	8a7b      	ldrh	r3, [r7, #18]
 8016886:	3303      	adds	r3, #3
 8016888:	f023 0203 	bic.w	r2, r3, #3
 801688c:	89bb      	ldrh	r3, [r7, #12]
 801688e:	441a      	add	r2, r3
 8016890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016892:	429a      	cmp	r2, r3
 8016894:	d901      	bls.n	801689a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8016896:	2300      	movs	r3, #0
 8016898:	e018      	b.n	80168cc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801689a:	6a3b      	ldr	r3, [r7, #32]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d007      	beq.n	80168b0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80168a0:	8a7b      	ldrh	r3, [r7, #18]
 80168a2:	3303      	adds	r3, #3
 80168a4:	f023 0303 	bic.w	r3, r3, #3
 80168a8:	6a3a      	ldr	r2, [r7, #32]
 80168aa:	4413      	add	r3, r2
 80168ac:	617b      	str	r3, [r7, #20]
 80168ae:	e001      	b.n	80168b4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80168b0:	2300      	movs	r3, #0
 80168b2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	89b9      	ldrh	r1, [r7, #12]
 80168b8:	89ba      	ldrh	r2, [r7, #12]
 80168ba:	2302      	movs	r3, #2
 80168bc:	9301      	str	r3, [sp, #4]
 80168be:	897b      	ldrh	r3, [r7, #10]
 80168c0:	9300      	str	r3, [sp, #0]
 80168c2:	460b      	mov	r3, r1
 80168c4:	6979      	ldr	r1, [r7, #20]
 80168c6:	f7ff fe7d 	bl	80165c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80168ca:	687b      	ldr	r3, [r7, #4]
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3718      	adds	r7, #24
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b084      	sub	sp, #16
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	460b      	mov	r3, r1
 80168de:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d106      	bne.n	80168f4 <pbuf_realloc+0x20>
 80168e6:	4b3a      	ldr	r3, [pc, #232]	; (80169d0 <pbuf_realloc+0xfc>)
 80168e8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80168ec:	4939      	ldr	r1, [pc, #228]	; (80169d4 <pbuf_realloc+0x100>)
 80168ee:	483a      	ldr	r0, [pc, #232]	; (80169d8 <pbuf_realloc+0x104>)
 80168f0:	f009 fb88 	bl	8020004 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	891b      	ldrh	r3, [r3, #8]
 80168f8:	887a      	ldrh	r2, [r7, #2]
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d263      	bcs.n	80169c6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	891a      	ldrh	r2, [r3, #8]
 8016902:	887b      	ldrh	r3, [r7, #2]
 8016904:	1ad3      	subs	r3, r2, r3
 8016906:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8016908:	887b      	ldrh	r3, [r7, #2]
 801690a:	817b      	strh	r3, [r7, #10]
  q = p;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8016910:	e018      	b.n	8016944 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	895b      	ldrh	r3, [r3, #10]
 8016916:	897a      	ldrh	r2, [r7, #10]
 8016918:	1ad3      	subs	r3, r2, r3
 801691a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	891a      	ldrh	r2, [r3, #8]
 8016920:	893b      	ldrh	r3, [r7, #8]
 8016922:	1ad3      	subs	r3, r2, r3
 8016924:	b29a      	uxth	r2, r3
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d106      	bne.n	8016944 <pbuf_realloc+0x70>
 8016936:	4b26      	ldr	r3, [pc, #152]	; (80169d0 <pbuf_realloc+0xfc>)
 8016938:	f240 12af 	movw	r2, #431	; 0x1af
 801693c:	4927      	ldr	r1, [pc, #156]	; (80169dc <pbuf_realloc+0x108>)
 801693e:	4826      	ldr	r0, [pc, #152]	; (80169d8 <pbuf_realloc+0x104>)
 8016940:	f009 fb60 	bl	8020004 <iprintf>
  while (rem_len > q->len) {
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	895b      	ldrh	r3, [r3, #10]
 8016948:	897a      	ldrh	r2, [r7, #10]
 801694a:	429a      	cmp	r2, r3
 801694c:	d8e1      	bhi.n	8016912 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	7b1b      	ldrb	r3, [r3, #12]
 8016952:	f003 030f 	and.w	r3, r3, #15
 8016956:	2b00      	cmp	r3, #0
 8016958:	d121      	bne.n	801699e <pbuf_realloc+0xca>
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	895b      	ldrh	r3, [r3, #10]
 801695e:	897a      	ldrh	r2, [r7, #10]
 8016960:	429a      	cmp	r2, r3
 8016962:	d01c      	beq.n	801699e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	7b5b      	ldrb	r3, [r3, #13]
 8016968:	f003 0302 	and.w	r3, r3, #2
 801696c:	2b00      	cmp	r3, #0
 801696e:	d116      	bne.n	801699e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	685a      	ldr	r2, [r3, #4]
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	1ad3      	subs	r3, r2, r3
 8016978:	b29a      	uxth	r2, r3
 801697a:	897b      	ldrh	r3, [r7, #10]
 801697c:	4413      	add	r3, r2
 801697e:	b29b      	uxth	r3, r3
 8016980:	4619      	mov	r1, r3
 8016982:	68f8      	ldr	r0, [r7, #12]
 8016984:	f7fe ffba 	bl	80158fc <mem_trim>
 8016988:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d106      	bne.n	801699e <pbuf_realloc+0xca>
 8016990:	4b0f      	ldr	r3, [pc, #60]	; (80169d0 <pbuf_realloc+0xfc>)
 8016992:	f240 12bd 	movw	r2, #445	; 0x1bd
 8016996:	4912      	ldr	r1, [pc, #72]	; (80169e0 <pbuf_realloc+0x10c>)
 8016998:	480f      	ldr	r0, [pc, #60]	; (80169d8 <pbuf_realloc+0x104>)
 801699a:	f009 fb33 	bl	8020004 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	897a      	ldrh	r2, [r7, #10]
 80169a2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	895a      	ldrh	r2, [r3, #10]
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d004      	beq.n	80169be <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	4618      	mov	r0, r3
 80169ba:	f000 f911 	bl	8016be0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2200      	movs	r2, #0
 80169c2:	601a      	str	r2, [r3, #0]
 80169c4:	e000      	b.n	80169c8 <pbuf_realloc+0xf4>
    return;
 80169c6:	bf00      	nop

}
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	08025d64 	.word	0x08025d64
 80169d4:	08025ea8 	.word	0x08025ea8
 80169d8:	08025df0 	.word	0x08025df0
 80169dc:	08025ec0 	.word	0x08025ec0
 80169e0:	08025ed8 	.word	0x08025ed8

080169e4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b086      	sub	sp, #24
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	4613      	mov	r3, r2
 80169f0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d106      	bne.n	8016a06 <pbuf_add_header_impl+0x22>
 80169f8:	4b2b      	ldr	r3, [pc, #172]	; (8016aa8 <pbuf_add_header_impl+0xc4>)
 80169fa:	f240 12df 	movw	r2, #479	; 0x1df
 80169fe:	492b      	ldr	r1, [pc, #172]	; (8016aac <pbuf_add_header_impl+0xc8>)
 8016a00:	482b      	ldr	r0, [pc, #172]	; (8016ab0 <pbuf_add_header_impl+0xcc>)
 8016a02:	f009 faff 	bl	8020004 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d003      	beq.n	8016a14 <pbuf_add_header_impl+0x30>
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a12:	d301      	bcc.n	8016a18 <pbuf_add_header_impl+0x34>
    return 1;
 8016a14:	2301      	movs	r3, #1
 8016a16:	e043      	b.n	8016aa0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d101      	bne.n	8016a22 <pbuf_add_header_impl+0x3e>
    return 0;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	e03e      	b.n	8016aa0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	891a      	ldrh	r2, [r3, #8]
 8016a2a:	8a7b      	ldrh	r3, [r7, #18]
 8016a2c:	4413      	add	r3, r2
 8016a2e:	b29b      	uxth	r3, r3
 8016a30:	8a7a      	ldrh	r2, [r7, #18]
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d901      	bls.n	8016a3a <pbuf_add_header_impl+0x56>
    return 1;
 8016a36:	2301      	movs	r3, #1
 8016a38:	e032      	b.n	8016aa0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	7b1b      	ldrb	r3, [r3, #12]
 8016a3e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8016a40:	8a3b      	ldrh	r3, [r7, #16]
 8016a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d00c      	beq.n	8016a64 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	685a      	ldr	r2, [r3, #4]
 8016a4e:	68bb      	ldr	r3, [r7, #8]
 8016a50:	425b      	negs	r3, r3
 8016a52:	4413      	add	r3, r2
 8016a54:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	3310      	adds	r3, #16
 8016a5a:	697a      	ldr	r2, [r7, #20]
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d20d      	bcs.n	8016a7c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8016a60:	2301      	movs	r3, #1
 8016a62:	e01d      	b.n	8016aa0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8016a64:	79fb      	ldrb	r3, [r7, #7]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d006      	beq.n	8016a78 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	685a      	ldr	r2, [r3, #4]
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	425b      	negs	r3, r3
 8016a72:	4413      	add	r3, r2
 8016a74:	617b      	str	r3, [r7, #20]
 8016a76:	e001      	b.n	8016a7c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8016a78:	2301      	movs	r3, #1
 8016a7a:	e011      	b.n	8016aa0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	697a      	ldr	r2, [r7, #20]
 8016a80:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	895a      	ldrh	r2, [r3, #10]
 8016a86:	8a7b      	ldrh	r3, [r7, #18]
 8016a88:	4413      	add	r3, r2
 8016a8a:	b29a      	uxth	r2, r3
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	891a      	ldrh	r2, [r3, #8]
 8016a94:	8a7b      	ldrh	r3, [r7, #18]
 8016a96:	4413      	add	r3, r2
 8016a98:	b29a      	uxth	r2, r3
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	811a      	strh	r2, [r3, #8]


  return 0;
 8016a9e:	2300      	movs	r3, #0
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3718      	adds	r7, #24
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	08025d64 	.word	0x08025d64
 8016aac:	08025ef4 	.word	0x08025ef4
 8016ab0:	08025df0 	.word	0x08025df0

08016ab4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b082      	sub	sp, #8
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8016abe:	2200      	movs	r2, #0
 8016ac0:	6839      	ldr	r1, [r7, #0]
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f7ff ff8e 	bl	80169e4 <pbuf_add_header_impl>
 8016ac8:	4603      	mov	r3, r0
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3708      	adds	r7, #8
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}
	...

08016ad4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b084      	sub	sp, #16
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d106      	bne.n	8016af2 <pbuf_remove_header+0x1e>
 8016ae4:	4b20      	ldr	r3, [pc, #128]	; (8016b68 <pbuf_remove_header+0x94>)
 8016ae6:	f240 224b 	movw	r2, #587	; 0x24b
 8016aea:	4920      	ldr	r1, [pc, #128]	; (8016b6c <pbuf_remove_header+0x98>)
 8016aec:	4820      	ldr	r0, [pc, #128]	; (8016b70 <pbuf_remove_header+0x9c>)
 8016aee:	f009 fa89 	bl	8020004 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d003      	beq.n	8016b00 <pbuf_remove_header+0x2c>
 8016af8:	683b      	ldr	r3, [r7, #0]
 8016afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016afe:	d301      	bcc.n	8016b04 <pbuf_remove_header+0x30>
    return 1;
 8016b00:	2301      	movs	r3, #1
 8016b02:	e02c      	b.n	8016b5e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d101      	bne.n	8016b0e <pbuf_remove_header+0x3a>
    return 0;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	e027      	b.n	8016b5e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	895b      	ldrh	r3, [r3, #10]
 8016b16:	89fa      	ldrh	r2, [r7, #14]
 8016b18:	429a      	cmp	r2, r3
 8016b1a:	d908      	bls.n	8016b2e <pbuf_remove_header+0x5a>
 8016b1c:	4b12      	ldr	r3, [pc, #72]	; (8016b68 <pbuf_remove_header+0x94>)
 8016b1e:	f240 2255 	movw	r2, #597	; 0x255
 8016b22:	4914      	ldr	r1, [pc, #80]	; (8016b74 <pbuf_remove_header+0xa0>)
 8016b24:	4812      	ldr	r0, [pc, #72]	; (8016b70 <pbuf_remove_header+0x9c>)
 8016b26:	f009 fa6d 	bl	8020004 <iprintf>
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	e017      	b.n	8016b5e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	685b      	ldr	r3, [r3, #4]
 8016b32:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	685a      	ldr	r2, [r3, #4]
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	441a      	add	r2, r3
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	895a      	ldrh	r2, [r3, #10]
 8016b44:	89fb      	ldrh	r3, [r7, #14]
 8016b46:	1ad3      	subs	r3, r2, r3
 8016b48:	b29a      	uxth	r2, r3
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	891a      	ldrh	r2, [r3, #8]
 8016b52:	89fb      	ldrh	r3, [r7, #14]
 8016b54:	1ad3      	subs	r3, r2, r3
 8016b56:	b29a      	uxth	r2, r3
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8016b5c:	2300      	movs	r3, #0
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3710      	adds	r7, #16
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	08025d64 	.word	0x08025d64
 8016b6c:	08025ef4 	.word	0x08025ef4
 8016b70:	08025df0 	.word	0x08025df0
 8016b74:	08025f00 	.word	0x08025f00

08016b78 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b082      	sub	sp, #8
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	460b      	mov	r3, r1
 8016b82:	807b      	strh	r3, [r7, #2]
 8016b84:	4613      	mov	r3, r2
 8016b86:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8016b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	da08      	bge.n	8016ba2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016b90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016b94:	425b      	negs	r3, r3
 8016b96:	4619      	mov	r1, r3
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	f7ff ff9b 	bl	8016ad4 <pbuf_remove_header>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	e007      	b.n	8016bb2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8016ba2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016ba6:	787a      	ldrb	r2, [r7, #1]
 8016ba8:	4619      	mov	r1, r3
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f7ff ff1a 	bl	80169e4 <pbuf_add_header_impl>
 8016bb0:	4603      	mov	r3, r0
  }
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3708      	adds	r7, #8
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}

08016bba <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8016bba:	b580      	push	{r7, lr}
 8016bbc:	b082      	sub	sp, #8
 8016bbe:	af00      	add	r7, sp, #0
 8016bc0:	6078      	str	r0, [r7, #4]
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8016bc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016bca:	2201      	movs	r2, #1
 8016bcc:	4619      	mov	r1, r3
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f7ff ffd2 	bl	8016b78 <pbuf_header_impl>
 8016bd4:	4603      	mov	r3, r0
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3708      	adds	r7, #8
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}
	...

08016be0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b086      	sub	sp, #24
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d10b      	bne.n	8016c06 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d106      	bne.n	8016c02 <pbuf_free+0x22>
 8016bf4:	4b38      	ldr	r3, [pc, #224]	; (8016cd8 <pbuf_free+0xf8>)
 8016bf6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8016bfa:	4938      	ldr	r1, [pc, #224]	; (8016cdc <pbuf_free+0xfc>)
 8016bfc:	4838      	ldr	r0, [pc, #224]	; (8016ce0 <pbuf_free+0x100>)
 8016bfe:	f009 fa01 	bl	8020004 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8016c02:	2300      	movs	r3, #0
 8016c04:	e063      	b.n	8016cce <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8016c06:	2300      	movs	r3, #0
 8016c08:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8016c0a:	e05c      	b.n	8016cc6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	7b9b      	ldrb	r3, [r3, #14]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d106      	bne.n	8016c22 <pbuf_free+0x42>
 8016c14:	4b30      	ldr	r3, [pc, #192]	; (8016cd8 <pbuf_free+0xf8>)
 8016c16:	f240 22f1 	movw	r2, #753	; 0x2f1
 8016c1a:	4932      	ldr	r1, [pc, #200]	; (8016ce4 <pbuf_free+0x104>)
 8016c1c:	4830      	ldr	r0, [pc, #192]	; (8016ce0 <pbuf_free+0x100>)
 8016c1e:	f009 f9f1 	bl	8020004 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	7b9b      	ldrb	r3, [r3, #14]
 8016c26:	3b01      	subs	r3, #1
 8016c28:	b2da      	uxtb	r2, r3
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	739a      	strb	r2, [r3, #14]
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	7b9b      	ldrb	r3, [r3, #14]
 8016c32:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016c34:	7dbb      	ldrb	r3, [r7, #22]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d143      	bne.n	8016cc2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	7b1b      	ldrb	r3, [r3, #12]
 8016c44:	f003 030f 	and.w	r3, r3, #15
 8016c48:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	7b5b      	ldrb	r3, [r3, #13]
 8016c4e:	f003 0302 	and.w	r3, r3, #2
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d011      	beq.n	8016c7a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016c5a:	68bb      	ldr	r3, [r7, #8]
 8016c5c:	691b      	ldr	r3, [r3, #16]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d106      	bne.n	8016c70 <pbuf_free+0x90>
 8016c62:	4b1d      	ldr	r3, [pc, #116]	; (8016cd8 <pbuf_free+0xf8>)
 8016c64:	f240 22ff 	movw	r2, #767	; 0x2ff
 8016c68:	491f      	ldr	r1, [pc, #124]	; (8016ce8 <pbuf_free+0x108>)
 8016c6a:	481d      	ldr	r0, [pc, #116]	; (8016ce0 <pbuf_free+0x100>)
 8016c6c:	f009 f9ca 	bl	8020004 <iprintf>
        pc->custom_free_function(p);
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	691b      	ldr	r3, [r3, #16]
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	4798      	blx	r3
 8016c78:	e01d      	b.n	8016cb6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8016c7a:	7bfb      	ldrb	r3, [r7, #15]
 8016c7c:	2b02      	cmp	r3, #2
 8016c7e:	d104      	bne.n	8016c8a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8016c80:	6879      	ldr	r1, [r7, #4]
 8016c82:	2008      	movs	r0, #8
 8016c84:	f7ff f936 	bl	8015ef4 <memp_free>
 8016c88:	e015      	b.n	8016cb6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016c8a:	7bfb      	ldrb	r3, [r7, #15]
 8016c8c:	2b01      	cmp	r3, #1
 8016c8e:	d104      	bne.n	8016c9a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8016c90:	6879      	ldr	r1, [r7, #4]
 8016c92:	2007      	movs	r0, #7
 8016c94:	f7ff f92e 	bl	8015ef4 <memp_free>
 8016c98:	e00d      	b.n	8016cb6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016c9a:	7bfb      	ldrb	r3, [r7, #15]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d103      	bne.n	8016ca8 <pbuf_free+0xc8>
          mem_free(p);
 8016ca0:	6878      	ldr	r0, [r7, #4]
 8016ca2:	f7fe fdc1 	bl	8015828 <mem_free>
 8016ca6:	e006      	b.n	8016cb6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8016ca8:	4b0b      	ldr	r3, [pc, #44]	; (8016cd8 <pbuf_free+0xf8>)
 8016caa:	f240 320f 	movw	r2, #783	; 0x30f
 8016cae:	490f      	ldr	r1, [pc, #60]	; (8016cec <pbuf_free+0x10c>)
 8016cb0:	480b      	ldr	r0, [pc, #44]	; (8016ce0 <pbuf_free+0x100>)
 8016cb2:	f009 f9a7 	bl	8020004 <iprintf>
        }
      }
      count++;
 8016cb6:	7dfb      	ldrb	r3, [r7, #23]
 8016cb8:	3301      	adds	r3, #1
 8016cba:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	607b      	str	r3, [r7, #4]
 8016cc0:	e001      	b.n	8016cc6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d19f      	bne.n	8016c0c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cce:	4618      	mov	r0, r3
 8016cd0:	3718      	adds	r7, #24
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	bd80      	pop	{r7, pc}
 8016cd6:	bf00      	nop
 8016cd8:	08025d64 	.word	0x08025d64
 8016cdc:	08025ef4 	.word	0x08025ef4
 8016ce0:	08025df0 	.word	0x08025df0
 8016ce4:	08025f20 	.word	0x08025f20
 8016ce8:	08025f38 	.word	0x08025f38
 8016cec:	08025f5c 	.word	0x08025f5c

08016cf0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016cf0:	b480      	push	{r7}
 8016cf2:	b085      	sub	sp, #20
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016cfc:	e005      	b.n	8016d0a <pbuf_clen+0x1a>
    ++len;
 8016cfe:	89fb      	ldrh	r3, [r7, #14]
 8016d00:	3301      	adds	r3, #1
 8016d02:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d1f6      	bne.n	8016cfe <pbuf_clen+0xe>
  }
  return len;
 8016d10:	89fb      	ldrh	r3, [r7, #14]
}
 8016d12:	4618      	mov	r0, r3
 8016d14:	3714      	adds	r7, #20
 8016d16:	46bd      	mov	sp, r7
 8016d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1c:	4770      	bx	lr
	...

08016d20 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d010      	beq.n	8016d50 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	7b9b      	ldrb	r3, [r3, #14]
 8016d32:	3301      	adds	r3, #1
 8016d34:	b2da      	uxtb	r2, r3
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	7b9b      	ldrb	r3, [r3, #14]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d106      	bne.n	8016d50 <pbuf_ref+0x30>
 8016d42:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <pbuf_ref+0x38>)
 8016d44:	f240 3242 	movw	r2, #834	; 0x342
 8016d48:	4904      	ldr	r1, [pc, #16]	; (8016d5c <pbuf_ref+0x3c>)
 8016d4a:	4805      	ldr	r0, [pc, #20]	; (8016d60 <pbuf_ref+0x40>)
 8016d4c:	f009 f95a 	bl	8020004 <iprintf>
  }
}
 8016d50:	bf00      	nop
 8016d52:	3708      	adds	r7, #8
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	08025d64 	.word	0x08025d64
 8016d5c:	08025f70 	.word	0x08025f70
 8016d60:	08025df0 	.word	0x08025df0

08016d64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b084      	sub	sp, #16
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
 8016d6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d002      	beq.n	8016d7a <pbuf_cat+0x16>
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d107      	bne.n	8016d8a <pbuf_cat+0x26>
 8016d7a:	4b20      	ldr	r3, [pc, #128]	; (8016dfc <pbuf_cat+0x98>)
 8016d7c:	f240 3259 	movw	r2, #857	; 0x359
 8016d80:	491f      	ldr	r1, [pc, #124]	; (8016e00 <pbuf_cat+0x9c>)
 8016d82:	4820      	ldr	r0, [pc, #128]	; (8016e04 <pbuf_cat+0xa0>)
 8016d84:	f009 f93e 	bl	8020004 <iprintf>
 8016d88:	e034      	b.n	8016df4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	60fb      	str	r3, [r7, #12]
 8016d8e:	e00a      	b.n	8016da6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	891a      	ldrh	r2, [r3, #8]
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	891b      	ldrh	r3, [r3, #8]
 8016d98:	4413      	add	r3, r2
 8016d9a:	b29a      	uxth	r2, r3
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	60fb      	str	r3, [r7, #12]
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d1f0      	bne.n	8016d90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	891a      	ldrh	r2, [r3, #8]
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	895b      	ldrh	r3, [r3, #10]
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d006      	beq.n	8016dc8 <pbuf_cat+0x64>
 8016dba:	4b10      	ldr	r3, [pc, #64]	; (8016dfc <pbuf_cat+0x98>)
 8016dbc:	f240 3262 	movw	r2, #866	; 0x362
 8016dc0:	4911      	ldr	r1, [pc, #68]	; (8016e08 <pbuf_cat+0xa4>)
 8016dc2:	4810      	ldr	r0, [pc, #64]	; (8016e04 <pbuf_cat+0xa0>)
 8016dc4:	f009 f91e 	bl	8020004 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d006      	beq.n	8016dde <pbuf_cat+0x7a>
 8016dd0:	4b0a      	ldr	r3, [pc, #40]	; (8016dfc <pbuf_cat+0x98>)
 8016dd2:	f240 3263 	movw	r2, #867	; 0x363
 8016dd6:	490d      	ldr	r1, [pc, #52]	; (8016e0c <pbuf_cat+0xa8>)
 8016dd8:	480a      	ldr	r0, [pc, #40]	; (8016e04 <pbuf_cat+0xa0>)
 8016dda:	f009 f913 	bl	8020004 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	891a      	ldrh	r2, [r3, #8]
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	891b      	ldrh	r3, [r3, #8]
 8016de6:	4413      	add	r3, r2
 8016de8:	b29a      	uxth	r2, r3
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	683a      	ldr	r2, [r7, #0]
 8016df2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016df4:	3710      	adds	r7, #16
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	08025d64 	.word	0x08025d64
 8016e00:	08025f84 	.word	0x08025f84
 8016e04:	08025df0 	.word	0x08025df0
 8016e08:	08025fbc 	.word	0x08025fbc
 8016e0c:	08025fec 	.word	0x08025fec

08016e10 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b086      	sub	sp, #24
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
 8016e18:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	617b      	str	r3, [r7, #20]
 8016e1e:	2300      	movs	r3, #0
 8016e20:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d008      	beq.n	8016e3a <pbuf_copy+0x2a>
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d005      	beq.n	8016e3a <pbuf_copy+0x2a>
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	891a      	ldrh	r2, [r3, #8]
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	891b      	ldrh	r3, [r3, #8]
 8016e36:	429a      	cmp	r2, r3
 8016e38:	d209      	bcs.n	8016e4e <pbuf_copy+0x3e>
 8016e3a:	4b57      	ldr	r3, [pc, #348]	; (8016f98 <pbuf_copy+0x188>)
 8016e3c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016e40:	4956      	ldr	r1, [pc, #344]	; (8016f9c <pbuf_copy+0x18c>)
 8016e42:	4857      	ldr	r0, [pc, #348]	; (8016fa0 <pbuf_copy+0x190>)
 8016e44:	f009 f8de 	bl	8020004 <iprintf>
 8016e48:	f06f 030f 	mvn.w	r3, #15
 8016e4c:	e09f      	b.n	8016f8e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	895b      	ldrh	r3, [r3, #10]
 8016e52:	461a      	mov	r2, r3
 8016e54:	697b      	ldr	r3, [r7, #20]
 8016e56:	1ad2      	subs	r2, r2, r3
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	895b      	ldrh	r3, [r3, #10]
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	693b      	ldr	r3, [r7, #16]
 8016e60:	1acb      	subs	r3, r1, r3
 8016e62:	429a      	cmp	r2, r3
 8016e64:	d306      	bcc.n	8016e74 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	895b      	ldrh	r3, [r3, #10]
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	60fb      	str	r3, [r7, #12]
 8016e72:	e005      	b.n	8016e80 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	895b      	ldrh	r3, [r3, #10]
 8016e78:	461a      	mov	r2, r3
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	1ad3      	subs	r3, r2, r3
 8016e7e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	685a      	ldr	r2, [r3, #4]
 8016e84:	697b      	ldr	r3, [r7, #20]
 8016e86:	18d0      	adds	r0, r2, r3
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	685a      	ldr	r2, [r3, #4]
 8016e8c:	693b      	ldr	r3, [r7, #16]
 8016e8e:	4413      	add	r3, r2
 8016e90:	68fa      	ldr	r2, [r7, #12]
 8016e92:	4619      	mov	r1, r3
 8016e94:	f008 f994 	bl	801f1c0 <memcpy>
    offset_to += len;
 8016e98:	697a      	ldr	r2, [r7, #20]
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016ea0:	693a      	ldr	r2, [r7, #16]
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	4413      	add	r3, r2
 8016ea6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	895b      	ldrh	r3, [r3, #10]
 8016eac:	461a      	mov	r2, r3
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	4293      	cmp	r3, r2
 8016eb2:	d906      	bls.n	8016ec2 <pbuf_copy+0xb2>
 8016eb4:	4b38      	ldr	r3, [pc, #224]	; (8016f98 <pbuf_copy+0x188>)
 8016eb6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8016eba:	493a      	ldr	r1, [pc, #232]	; (8016fa4 <pbuf_copy+0x194>)
 8016ebc:	4838      	ldr	r0, [pc, #224]	; (8016fa0 <pbuf_copy+0x190>)
 8016ebe:	f009 f8a1 	bl	8020004 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016ec2:	683b      	ldr	r3, [r7, #0]
 8016ec4:	895b      	ldrh	r3, [r3, #10]
 8016ec6:	461a      	mov	r2, r3
 8016ec8:	693b      	ldr	r3, [r7, #16]
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	d906      	bls.n	8016edc <pbuf_copy+0xcc>
 8016ece:	4b32      	ldr	r3, [pc, #200]	; (8016f98 <pbuf_copy+0x188>)
 8016ed0:	f240 32da 	movw	r2, #986	; 0x3da
 8016ed4:	4934      	ldr	r1, [pc, #208]	; (8016fa8 <pbuf_copy+0x198>)
 8016ed6:	4832      	ldr	r0, [pc, #200]	; (8016fa0 <pbuf_copy+0x190>)
 8016ed8:	f009 f894 	bl	8020004 <iprintf>
    if (offset_from >= p_from->len) {
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	895b      	ldrh	r3, [r3, #10]
 8016ee0:	461a      	mov	r2, r3
 8016ee2:	693b      	ldr	r3, [r7, #16]
 8016ee4:	4293      	cmp	r3, r2
 8016ee6:	d304      	bcc.n	8016ef2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016eec:	683b      	ldr	r3, [r7, #0]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	895b      	ldrh	r3, [r3, #10]
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	4293      	cmp	r3, r2
 8016efc:	d114      	bne.n	8016f28 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016efe:	2300      	movs	r3, #0
 8016f00:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d10c      	bne.n	8016f28 <pbuf_copy+0x118>
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d009      	beq.n	8016f28 <pbuf_copy+0x118>
 8016f14:	4b20      	ldr	r3, [pc, #128]	; (8016f98 <pbuf_copy+0x188>)
 8016f16:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016f1a:	4924      	ldr	r1, [pc, #144]	; (8016fac <pbuf_copy+0x19c>)
 8016f1c:	4820      	ldr	r0, [pc, #128]	; (8016fa0 <pbuf_copy+0x190>)
 8016f1e:	f009 f871 	bl	8020004 <iprintf>
 8016f22:	f06f 030f 	mvn.w	r3, #15
 8016f26:	e032      	b.n	8016f8e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016f28:	683b      	ldr	r3, [r7, #0]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d013      	beq.n	8016f56 <pbuf_copy+0x146>
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	895a      	ldrh	r2, [r3, #10]
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	891b      	ldrh	r3, [r3, #8]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d10d      	bne.n	8016f56 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d009      	beq.n	8016f56 <pbuf_copy+0x146>
 8016f42:	4b15      	ldr	r3, [pc, #84]	; (8016f98 <pbuf_copy+0x188>)
 8016f44:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8016f48:	4919      	ldr	r1, [pc, #100]	; (8016fb0 <pbuf_copy+0x1a0>)
 8016f4a:	4815      	ldr	r0, [pc, #84]	; (8016fa0 <pbuf_copy+0x190>)
 8016f4c:	f009 f85a 	bl	8020004 <iprintf>
 8016f50:	f06f 0305 	mvn.w	r3, #5
 8016f54:	e01b      	b.n	8016f8e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d013      	beq.n	8016f84 <pbuf_copy+0x174>
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	895a      	ldrh	r2, [r3, #10]
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	891b      	ldrh	r3, [r3, #8]
 8016f64:	429a      	cmp	r2, r3
 8016f66:	d10d      	bne.n	8016f84 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d009      	beq.n	8016f84 <pbuf_copy+0x174>
 8016f70:	4b09      	ldr	r3, [pc, #36]	; (8016f98 <pbuf_copy+0x188>)
 8016f72:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8016f76:	490e      	ldr	r1, [pc, #56]	; (8016fb0 <pbuf_copy+0x1a0>)
 8016f78:	4809      	ldr	r0, [pc, #36]	; (8016fa0 <pbuf_copy+0x190>)
 8016f7a:	f009 f843 	bl	8020004 <iprintf>
 8016f7e:	f06f 0305 	mvn.w	r3, #5
 8016f82:	e004      	b.n	8016f8e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	f47f af61 	bne.w	8016e4e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016f8c:	2300      	movs	r3, #0
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3718      	adds	r7, #24
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	08025d64 	.word	0x08025d64
 8016f9c:	08026038 	.word	0x08026038
 8016fa0:	08025df0 	.word	0x08025df0
 8016fa4:	08026068 	.word	0x08026068
 8016fa8:	08026080 	.word	0x08026080
 8016fac:	0802609c 	.word	0x0802609c
 8016fb0:	080260ac 	.word	0x080260ac

08016fb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b088      	sub	sp, #32
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	60f8      	str	r0, [r7, #12]
 8016fbc:	60b9      	str	r1, [r7, #8]
 8016fbe:	4611      	mov	r1, r2
 8016fc0:	461a      	mov	r2, r3
 8016fc2:	460b      	mov	r3, r1
 8016fc4:	80fb      	strh	r3, [r7, #6]
 8016fc6:	4613      	mov	r3, r2
 8016fc8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d108      	bne.n	8016fea <pbuf_copy_partial+0x36>
 8016fd8:	4b2b      	ldr	r3, [pc, #172]	; (8017088 <pbuf_copy_partial+0xd4>)
 8016fda:	f240 420a 	movw	r2, #1034	; 0x40a
 8016fde:	492b      	ldr	r1, [pc, #172]	; (801708c <pbuf_copy_partial+0xd8>)
 8016fe0:	482b      	ldr	r0, [pc, #172]	; (8017090 <pbuf_copy_partial+0xdc>)
 8016fe2:	f009 f80f 	bl	8020004 <iprintf>
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	e04a      	b.n	8017080 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d108      	bne.n	8017002 <pbuf_copy_partial+0x4e>
 8016ff0:	4b25      	ldr	r3, [pc, #148]	; (8017088 <pbuf_copy_partial+0xd4>)
 8016ff2:	f240 420b 	movw	r2, #1035	; 0x40b
 8016ff6:	4927      	ldr	r1, [pc, #156]	; (8017094 <pbuf_copy_partial+0xe0>)
 8016ff8:	4825      	ldr	r0, [pc, #148]	; (8017090 <pbuf_copy_partial+0xdc>)
 8016ffa:	f009 f803 	bl	8020004 <iprintf>
 8016ffe:	2300      	movs	r3, #0
 8017000:	e03e      	b.n	8017080 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	61fb      	str	r3, [r7, #28]
 8017006:	e034      	b.n	8017072 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8017008:	88bb      	ldrh	r3, [r7, #4]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d00a      	beq.n	8017024 <pbuf_copy_partial+0x70>
 801700e:	69fb      	ldr	r3, [r7, #28]
 8017010:	895b      	ldrh	r3, [r3, #10]
 8017012:	88ba      	ldrh	r2, [r7, #4]
 8017014:	429a      	cmp	r2, r3
 8017016:	d305      	bcc.n	8017024 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	895b      	ldrh	r3, [r3, #10]
 801701c:	88ba      	ldrh	r2, [r7, #4]
 801701e:	1ad3      	subs	r3, r2, r3
 8017020:	80bb      	strh	r3, [r7, #4]
 8017022:	e023      	b.n	801706c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8017024:	69fb      	ldr	r3, [r7, #28]
 8017026:	895a      	ldrh	r2, [r3, #10]
 8017028:	88bb      	ldrh	r3, [r7, #4]
 801702a:	1ad3      	subs	r3, r2, r3
 801702c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801702e:	8b3a      	ldrh	r2, [r7, #24]
 8017030:	88fb      	ldrh	r3, [r7, #6]
 8017032:	429a      	cmp	r2, r3
 8017034:	d901      	bls.n	801703a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8017036:	88fb      	ldrh	r3, [r7, #6]
 8017038:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801703a:	8b7b      	ldrh	r3, [r7, #26]
 801703c:	68ba      	ldr	r2, [r7, #8]
 801703e:	18d0      	adds	r0, r2, r3
 8017040:	69fb      	ldr	r3, [r7, #28]
 8017042:	685a      	ldr	r2, [r3, #4]
 8017044:	88bb      	ldrh	r3, [r7, #4]
 8017046:	4413      	add	r3, r2
 8017048:	8b3a      	ldrh	r2, [r7, #24]
 801704a:	4619      	mov	r1, r3
 801704c:	f008 f8b8 	bl	801f1c0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017050:	8afa      	ldrh	r2, [r7, #22]
 8017052:	8b3b      	ldrh	r3, [r7, #24]
 8017054:	4413      	add	r3, r2
 8017056:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8017058:	8b7a      	ldrh	r2, [r7, #26]
 801705a:	8b3b      	ldrh	r3, [r7, #24]
 801705c:	4413      	add	r3, r2
 801705e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8017060:	88fa      	ldrh	r2, [r7, #6]
 8017062:	8b3b      	ldrh	r3, [r7, #24]
 8017064:	1ad3      	subs	r3, r2, r3
 8017066:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8017068:	2300      	movs	r3, #0
 801706a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801706c:	69fb      	ldr	r3, [r7, #28]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	61fb      	str	r3, [r7, #28]
 8017072:	88fb      	ldrh	r3, [r7, #6]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d002      	beq.n	801707e <pbuf_copy_partial+0xca>
 8017078:	69fb      	ldr	r3, [r7, #28]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d1c4      	bne.n	8017008 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801707e:	8afb      	ldrh	r3, [r7, #22]
}
 8017080:	4618      	mov	r0, r3
 8017082:	3720      	adds	r7, #32
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}
 8017088:	08025d64 	.word	0x08025d64
 801708c:	080260d8 	.word	0x080260d8
 8017090:	08025df0 	.word	0x08025df0
 8017094:	080260f8 	.word	0x080260f8

08017098 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8017098:	b480      	push	{r7}
 801709a:	b087      	sub	sp, #28
 801709c:	af00      	add	r7, sp, #0
 801709e:	60f8      	str	r0, [r7, #12]
 80170a0:	460b      	mov	r3, r1
 80170a2:	607a      	str	r2, [r7, #4]
 80170a4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80170a6:	897b      	ldrh	r3, [r7, #10]
 80170a8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80170ae:	e007      	b.n	80170c0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80170b0:	693b      	ldr	r3, [r7, #16]
 80170b2:	895b      	ldrh	r3, [r3, #10]
 80170b4:	8afa      	ldrh	r2, [r7, #22]
 80170b6:	1ad3      	subs	r3, r2, r3
 80170b8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80170c0:	693b      	ldr	r3, [r7, #16]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d004      	beq.n	80170d0 <pbuf_skip_const+0x38>
 80170c6:	693b      	ldr	r3, [r7, #16]
 80170c8:	895b      	ldrh	r3, [r3, #10]
 80170ca:	8afa      	ldrh	r2, [r7, #22]
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d2ef      	bcs.n	80170b0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d002      	beq.n	80170dc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	8afa      	ldrh	r2, [r7, #22]
 80170da:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80170dc:	693b      	ldr	r3, [r7, #16]
}
 80170de:	4618      	mov	r0, r3
 80170e0:	371c      	adds	r7, #28
 80170e2:	46bd      	mov	sp, r7
 80170e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e8:	4770      	bx	lr
	...

080170ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b084      	sub	sp, #16
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	4603      	mov	r3, r0
 80170f4:	603a      	str	r2, [r7, #0]
 80170f6:	71fb      	strb	r3, [r7, #7]
 80170f8:	460b      	mov	r3, r1
 80170fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	8919      	ldrh	r1, [r3, #8]
 8017100:	88ba      	ldrh	r2, [r7, #4]
 8017102:	79fb      	ldrb	r3, [r7, #7]
 8017104:	4618      	mov	r0, r3
 8017106:	f7ff fa87 	bl	8016618 <pbuf_alloc>
 801710a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d101      	bne.n	8017116 <pbuf_clone+0x2a>
    return NULL;
 8017112:	2300      	movs	r3, #0
 8017114:	e011      	b.n	801713a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8017116:	6839      	ldr	r1, [r7, #0]
 8017118:	68f8      	ldr	r0, [r7, #12]
 801711a:	f7ff fe79 	bl	8016e10 <pbuf_copy>
 801711e:	4603      	mov	r3, r0
 8017120:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017122:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d006      	beq.n	8017138 <pbuf_clone+0x4c>
 801712a:	4b06      	ldr	r3, [pc, #24]	; (8017144 <pbuf_clone+0x58>)
 801712c:	f240 5224 	movw	r2, #1316	; 0x524
 8017130:	4905      	ldr	r1, [pc, #20]	; (8017148 <pbuf_clone+0x5c>)
 8017132:	4806      	ldr	r0, [pc, #24]	; (801714c <pbuf_clone+0x60>)
 8017134:	f008 ff66 	bl	8020004 <iprintf>
  return q;
 8017138:	68fb      	ldr	r3, [r7, #12]
}
 801713a:	4618      	mov	r0, r3
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
 8017142:	bf00      	nop
 8017144:	08025d64 	.word	0x08025d64
 8017148:	08026204 	.word	0x08026204
 801714c:	08025df0 	.word	0x08025df0

08017150 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b084      	sub	sp, #16
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	460b      	mov	r3, r1
 801715a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 801715c:	887b      	ldrh	r3, [r7, #2]
 801715e:	4619      	mov	r1, r3
 8017160:	6878      	ldr	r0, [r7, #4]
 8017162:	f000 f80c 	bl	801717e <pbuf_try_get_at>
 8017166:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	2b00      	cmp	r3, #0
 801716c:	db02      	blt.n	8017174 <pbuf_get_at+0x24>
    return (u8_t)ret;
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	b2db      	uxtb	r3, r3
 8017172:	e000      	b.n	8017176 <pbuf_get_at+0x26>
  }
  return 0;
 8017174:	2300      	movs	r3, #0
}
 8017176:	4618      	mov	r0, r3
 8017178:	3710      	adds	r7, #16
 801717a:	46bd      	mov	sp, r7
 801717c:	bd80      	pop	{r7, pc}

0801717e <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 801717e:	b580      	push	{r7, lr}
 8017180:	b084      	sub	sp, #16
 8017182:	af00      	add	r7, sp, #0
 8017184:	6078      	str	r0, [r7, #4]
 8017186:	460b      	mov	r3, r1
 8017188:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 801718a:	f107 020a 	add.w	r2, r7, #10
 801718e:	887b      	ldrh	r3, [r7, #2]
 8017190:	4619      	mov	r1, r3
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f7ff ff80 	bl	8017098 <pbuf_skip_const>
 8017198:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d00a      	beq.n	80171b6 <pbuf_try_get_at+0x38>
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	895a      	ldrh	r2, [r3, #10]
 80171a4:	897b      	ldrh	r3, [r7, #10]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d905      	bls.n	80171b6 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	685b      	ldr	r3, [r3, #4]
 80171ae:	897a      	ldrh	r2, [r7, #10]
 80171b0:	4413      	add	r3, r2
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	e001      	b.n	80171ba <pbuf_try_get_at+0x3c>
  }
  return -1;
 80171b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80171ba:	4618      	mov	r0, r3
 80171bc:	3710      	adds	r7, #16
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}

080171c2 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 80171c2:	b580      	push	{r7, lr}
 80171c4:	b088      	sub	sp, #32
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	60f8      	str	r0, [r7, #12]
 80171ca:	607a      	str	r2, [r7, #4]
 80171cc:	461a      	mov	r2, r3
 80171ce:	460b      	mov	r3, r1
 80171d0:	817b      	strh	r3, [r7, #10]
 80171d2:	4613      	mov	r3, r2
 80171d4:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 80171d6:	897b      	ldrh	r3, [r7, #10]
 80171d8:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	891b      	ldrh	r3, [r3, #8]
 80171e2:	4619      	mov	r1, r3
 80171e4:	897a      	ldrh	r2, [r7, #10]
 80171e6:	893b      	ldrh	r3, [r7, #8]
 80171e8:	4413      	add	r3, r2
 80171ea:	4299      	cmp	r1, r3
 80171ec:	da0a      	bge.n	8017204 <pbuf_memcmp+0x42>
    return 0xffff;
 80171ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171f2:	e037      	b.n	8017264 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 80171f4:	69bb      	ldr	r3, [r7, #24]
 80171f6:	895b      	ldrh	r3, [r3, #10]
 80171f8:	8bfa      	ldrh	r2, [r7, #30]
 80171fa:	1ad3      	subs	r3, r2, r3
 80171fc:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 80171fe:	69bb      	ldr	r3, [r7, #24]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 8017204:	69bb      	ldr	r3, [r7, #24]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d004      	beq.n	8017214 <pbuf_memcmp+0x52>
 801720a:	69bb      	ldr	r3, [r7, #24]
 801720c:	895b      	ldrh	r3, [r3, #10]
 801720e:	8bfa      	ldrh	r2, [r7, #30]
 8017210:	429a      	cmp	r2, r3
 8017212:	d2ef      	bcs.n	80171f4 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8017214:	2300      	movs	r3, #0
 8017216:	82fb      	strh	r3, [r7, #22]
 8017218:	e01f      	b.n	801725a <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801721a:	8bfa      	ldrh	r2, [r7, #30]
 801721c:	8afb      	ldrh	r3, [r7, #22]
 801721e:	4413      	add	r3, r2
 8017220:	b29b      	uxth	r3, r3
 8017222:	4619      	mov	r1, r3
 8017224:	69b8      	ldr	r0, [r7, #24]
 8017226:	f7ff ff93 	bl	8017150 <pbuf_get_at>
 801722a:	4603      	mov	r3, r0
 801722c:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 801722e:	8afb      	ldrh	r3, [r7, #22]
 8017230:	687a      	ldr	r2, [r7, #4]
 8017232:	4413      	add	r3, r2
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8017238:	7d7a      	ldrb	r2, [r7, #21]
 801723a:	7d3b      	ldrb	r3, [r7, #20]
 801723c:	429a      	cmp	r2, r3
 801723e:	d009      	beq.n	8017254 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8017240:	8afb      	ldrh	r3, [r7, #22]
 8017242:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017246:	4293      	cmp	r3, r2
 8017248:	bf28      	it	cs
 801724a:	4613      	movcs	r3, r2
 801724c:	b29b      	uxth	r3, r3
 801724e:	3301      	adds	r3, #1
 8017250:	b29b      	uxth	r3, r3
 8017252:	e007      	b.n	8017264 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 8017254:	8afb      	ldrh	r3, [r7, #22]
 8017256:	3301      	adds	r3, #1
 8017258:	82fb      	strh	r3, [r7, #22]
 801725a:	8afa      	ldrh	r2, [r7, #22]
 801725c:	893b      	ldrh	r3, [r7, #8]
 801725e:	429a      	cmp	r2, r3
 8017260:	d3db      	bcc.n	801721a <pbuf_memcmp+0x58>
    }
  }
  return 0;
 8017262:	2300      	movs	r3, #0
}
 8017264:	4618      	mov	r0, r3
 8017266:	3720      	adds	r7, #32
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}

0801726c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017270:	f008 ff56 	bl	8020120 <rand>
 8017274:	4603      	mov	r3, r0
 8017276:	b29b      	uxth	r3, r3
 8017278:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801727c:	b29b      	uxth	r3, r3
 801727e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017282:	b29a      	uxth	r2, r3
 8017284:	4b01      	ldr	r3, [pc, #4]	; (801728c <tcp_init+0x20>)
 8017286:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017288:	bf00      	nop
 801728a:	bd80      	pop	{r7, pc}
 801728c:	24000024 	.word	0x24000024

08017290 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b082      	sub	sp, #8
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	7d1b      	ldrb	r3, [r3, #20]
 801729c:	2b01      	cmp	r3, #1
 801729e:	d105      	bne.n	80172ac <tcp_free+0x1c>
 80172a0:	4b06      	ldr	r3, [pc, #24]	; (80172bc <tcp_free+0x2c>)
 80172a2:	22d4      	movs	r2, #212	; 0xd4
 80172a4:	4906      	ldr	r1, [pc, #24]	; (80172c0 <tcp_free+0x30>)
 80172a6:	4807      	ldr	r0, [pc, #28]	; (80172c4 <tcp_free+0x34>)
 80172a8:	f008 feac 	bl	8020004 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80172ac:	6879      	ldr	r1, [r7, #4]
 80172ae:	2001      	movs	r0, #1
 80172b0:	f7fe fe20 	bl	8015ef4 <memp_free>
}
 80172b4:	bf00      	nop
 80172b6:	3708      	adds	r7, #8
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}
 80172bc:	08026290 	.word	0x08026290
 80172c0:	080262ec 	.word	0x080262ec
 80172c4:	08026300 	.word	0x08026300

080172c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b082      	sub	sp, #8
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	7d1b      	ldrb	r3, [r3, #20]
 80172d4:	2b01      	cmp	r3, #1
 80172d6:	d105      	bne.n	80172e4 <tcp_free_listen+0x1c>
 80172d8:	4b06      	ldr	r3, [pc, #24]	; (80172f4 <tcp_free_listen+0x2c>)
 80172da:	22df      	movs	r2, #223	; 0xdf
 80172dc:	4906      	ldr	r1, [pc, #24]	; (80172f8 <tcp_free_listen+0x30>)
 80172de:	4807      	ldr	r0, [pc, #28]	; (80172fc <tcp_free_listen+0x34>)
 80172e0:	f008 fe90 	bl	8020004 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80172e4:	6879      	ldr	r1, [r7, #4]
 80172e6:	2002      	movs	r0, #2
 80172e8:	f7fe fe04 	bl	8015ef4 <memp_free>
}
 80172ec:	bf00      	nop
 80172ee:	3708      	adds	r7, #8
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}
 80172f4:	08026290 	.word	0x08026290
 80172f8:	08026328 	.word	0x08026328
 80172fc:	08026300 	.word	0x08026300

08017300 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8017304:	f001 f974 	bl	80185f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8017308:	4b07      	ldr	r3, [pc, #28]	; (8017328 <tcp_tmr+0x28>)
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	3301      	adds	r3, #1
 801730e:	b2da      	uxtb	r2, r3
 8017310:	4b05      	ldr	r3, [pc, #20]	; (8017328 <tcp_tmr+0x28>)
 8017312:	701a      	strb	r2, [r3, #0]
 8017314:	4b04      	ldr	r3, [pc, #16]	; (8017328 <tcp_tmr+0x28>)
 8017316:	781b      	ldrb	r3, [r3, #0]
 8017318:	f003 0301 	and.w	r3, r3, #1
 801731c:	2b00      	cmp	r3, #0
 801731e:	d001      	beq.n	8017324 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8017320:	f000 fe26 	bl	8017f70 <tcp_slowtmr>
  }
}
 8017324:	bf00      	nop
 8017326:	bd80      	pop	{r7, pc}
 8017328:	24004e61 	.word	0x24004e61

0801732c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d105      	bne.n	8017348 <tcp_remove_listener+0x1c>
 801733c:	4b0d      	ldr	r3, [pc, #52]	; (8017374 <tcp_remove_listener+0x48>)
 801733e:	22ff      	movs	r2, #255	; 0xff
 8017340:	490d      	ldr	r1, [pc, #52]	; (8017378 <tcp_remove_listener+0x4c>)
 8017342:	480e      	ldr	r0, [pc, #56]	; (801737c <tcp_remove_listener+0x50>)
 8017344:	f008 fe5e 	bl	8020004 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	60fb      	str	r3, [r7, #12]
 801734c:	e00a      	b.n	8017364 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017352:	683a      	ldr	r2, [r7, #0]
 8017354:	429a      	cmp	r2, r3
 8017356:	d102      	bne.n	801735e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	2200      	movs	r2, #0
 801735c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	68db      	ldr	r3, [r3, #12]
 8017362:	60fb      	str	r3, [r7, #12]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d1f1      	bne.n	801734e <tcp_remove_listener+0x22>
    }
  }
}
 801736a:	bf00      	nop
 801736c:	bf00      	nop
 801736e:	3710      	adds	r7, #16
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	08026290 	.word	0x08026290
 8017378:	08026344 	.word	0x08026344
 801737c:	08026300 	.word	0x08026300

08017380 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b084      	sub	sp, #16
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d106      	bne.n	801739c <tcp_listen_closed+0x1c>
 801738e:	4b14      	ldr	r3, [pc, #80]	; (80173e0 <tcp_listen_closed+0x60>)
 8017390:	f240 1211 	movw	r2, #273	; 0x111
 8017394:	4913      	ldr	r1, [pc, #76]	; (80173e4 <tcp_listen_closed+0x64>)
 8017396:	4814      	ldr	r0, [pc, #80]	; (80173e8 <tcp_listen_closed+0x68>)
 8017398:	f008 fe34 	bl	8020004 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	7d1b      	ldrb	r3, [r3, #20]
 80173a0:	2b01      	cmp	r3, #1
 80173a2:	d006      	beq.n	80173b2 <tcp_listen_closed+0x32>
 80173a4:	4b0e      	ldr	r3, [pc, #56]	; (80173e0 <tcp_listen_closed+0x60>)
 80173a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80173aa:	4910      	ldr	r1, [pc, #64]	; (80173ec <tcp_listen_closed+0x6c>)
 80173ac:	480e      	ldr	r0, [pc, #56]	; (80173e8 <tcp_listen_closed+0x68>)
 80173ae:	f008 fe29 	bl	8020004 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80173b2:	2301      	movs	r3, #1
 80173b4:	60fb      	str	r3, [r7, #12]
 80173b6:	e00b      	b.n	80173d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80173b8:	4a0d      	ldr	r2, [pc, #52]	; (80173f0 <tcp_listen_closed+0x70>)
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	6879      	ldr	r1, [r7, #4]
 80173c4:	4618      	mov	r0, r3
 80173c6:	f7ff ffb1 	bl	801732c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	3301      	adds	r3, #1
 80173ce:	60fb      	str	r3, [r7, #12]
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	2b03      	cmp	r3, #3
 80173d4:	d9f0      	bls.n	80173b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80173d6:	bf00      	nop
 80173d8:	bf00      	nop
 80173da:	3710      	adds	r7, #16
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	08026290 	.word	0x08026290
 80173e4:	0802636c 	.word	0x0802636c
 80173e8:	08026300 	.word	0x08026300
 80173ec:	08026378 	.word	0x08026378
 80173f0:	08028304 	.word	0x08028304

080173f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80173f4:	b5b0      	push	{r4, r5, r7, lr}
 80173f6:	b088      	sub	sp, #32
 80173f8:	af04      	add	r7, sp, #16
 80173fa:	6078      	str	r0, [r7, #4]
 80173fc:	460b      	mov	r3, r1
 80173fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d106      	bne.n	8017414 <tcp_close_shutdown+0x20>
 8017406:	4b63      	ldr	r3, [pc, #396]	; (8017594 <tcp_close_shutdown+0x1a0>)
 8017408:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801740c:	4962      	ldr	r1, [pc, #392]	; (8017598 <tcp_close_shutdown+0x1a4>)
 801740e:	4863      	ldr	r0, [pc, #396]	; (801759c <tcp_close_shutdown+0x1a8>)
 8017410:	f008 fdf8 	bl	8020004 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017414:	78fb      	ldrb	r3, [r7, #3]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d066      	beq.n	80174e8 <tcp_close_shutdown+0xf4>
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	7d1b      	ldrb	r3, [r3, #20]
 801741e:	2b04      	cmp	r3, #4
 8017420:	d003      	beq.n	801742a <tcp_close_shutdown+0x36>
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	7d1b      	ldrb	r3, [r3, #20]
 8017426:	2b07      	cmp	r3, #7
 8017428:	d15e      	bne.n	80174e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801742e:	2b00      	cmp	r3, #0
 8017430:	d104      	bne.n	801743c <tcp_close_shutdown+0x48>
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017436:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801743a:	d055      	beq.n	80174e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	8b5b      	ldrh	r3, [r3, #26]
 8017440:	f003 0310 	and.w	r3, r3, #16
 8017444:	2b00      	cmp	r3, #0
 8017446:	d106      	bne.n	8017456 <tcp_close_shutdown+0x62>
 8017448:	4b52      	ldr	r3, [pc, #328]	; (8017594 <tcp_close_shutdown+0x1a0>)
 801744a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801744e:	4954      	ldr	r1, [pc, #336]	; (80175a0 <tcp_close_shutdown+0x1ac>)
 8017450:	4852      	ldr	r0, [pc, #328]	; (801759c <tcp_close_shutdown+0x1a8>)
 8017452:	f008 fdd7 	bl	8020004 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801745e:	687d      	ldr	r5, [r7, #4]
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	3304      	adds	r3, #4
 8017464:	687a      	ldr	r2, [r7, #4]
 8017466:	8ad2      	ldrh	r2, [r2, #22]
 8017468:	6879      	ldr	r1, [r7, #4]
 801746a:	8b09      	ldrh	r1, [r1, #24]
 801746c:	9102      	str	r1, [sp, #8]
 801746e:	9201      	str	r2, [sp, #4]
 8017470:	9300      	str	r3, [sp, #0]
 8017472:	462b      	mov	r3, r5
 8017474:	4622      	mov	r2, r4
 8017476:	4601      	mov	r1, r0
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f005 fe85 	bl	801d188 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f001 fc66 	bl	8018d50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017484:	4b47      	ldr	r3, [pc, #284]	; (80175a4 <tcp_close_shutdown+0x1b0>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	687a      	ldr	r2, [r7, #4]
 801748a:	429a      	cmp	r2, r3
 801748c:	d105      	bne.n	801749a <tcp_close_shutdown+0xa6>
 801748e:	4b45      	ldr	r3, [pc, #276]	; (80175a4 <tcp_close_shutdown+0x1b0>)
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	68db      	ldr	r3, [r3, #12]
 8017494:	4a43      	ldr	r2, [pc, #268]	; (80175a4 <tcp_close_shutdown+0x1b0>)
 8017496:	6013      	str	r3, [r2, #0]
 8017498:	e013      	b.n	80174c2 <tcp_close_shutdown+0xce>
 801749a:	4b42      	ldr	r3, [pc, #264]	; (80175a4 <tcp_close_shutdown+0x1b0>)
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	60fb      	str	r3, [r7, #12]
 80174a0:	e00c      	b.n	80174bc <tcp_close_shutdown+0xc8>
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	68db      	ldr	r3, [r3, #12]
 80174a6:	687a      	ldr	r2, [r7, #4]
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d104      	bne.n	80174b6 <tcp_close_shutdown+0xc2>
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	68da      	ldr	r2, [r3, #12]
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	60da      	str	r2, [r3, #12]
 80174b4:	e005      	b.n	80174c2 <tcp_close_shutdown+0xce>
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	68db      	ldr	r3, [r3, #12]
 80174ba:	60fb      	str	r3, [r7, #12]
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d1ef      	bne.n	80174a2 <tcp_close_shutdown+0xae>
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2200      	movs	r2, #0
 80174c6:	60da      	str	r2, [r3, #12]
 80174c8:	4b37      	ldr	r3, [pc, #220]	; (80175a8 <tcp_close_shutdown+0x1b4>)
 80174ca:	2201      	movs	r2, #1
 80174cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80174ce:	4b37      	ldr	r3, [pc, #220]	; (80175ac <tcp_close_shutdown+0x1b8>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	687a      	ldr	r2, [r7, #4]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d102      	bne.n	80174de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80174d8:	f004 f8fa 	bl	801b6d0 <tcp_trigger_input_pcb_close>
 80174dc:	e002      	b.n	80174e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80174de:	6878      	ldr	r0, [r7, #4]
 80174e0:	f7ff fed6 	bl	8017290 <tcp_free>
      }
      return ERR_OK;
 80174e4:	2300      	movs	r3, #0
 80174e6:	e050      	b.n	801758a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	7d1b      	ldrb	r3, [r3, #20]
 80174ec:	2b02      	cmp	r3, #2
 80174ee:	d03b      	beq.n	8017568 <tcp_close_shutdown+0x174>
 80174f0:	2b02      	cmp	r3, #2
 80174f2:	dc44      	bgt.n	801757e <tcp_close_shutdown+0x18a>
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d002      	beq.n	80174fe <tcp_close_shutdown+0x10a>
 80174f8:	2b01      	cmp	r3, #1
 80174fa:	d02a      	beq.n	8017552 <tcp_close_shutdown+0x15e>
 80174fc:	e03f      	b.n	801757e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	8adb      	ldrh	r3, [r3, #22]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d021      	beq.n	801754a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017506:	4b2a      	ldr	r3, [pc, #168]	; (80175b0 <tcp_close_shutdown+0x1bc>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	687a      	ldr	r2, [r7, #4]
 801750c:	429a      	cmp	r2, r3
 801750e:	d105      	bne.n	801751c <tcp_close_shutdown+0x128>
 8017510:	4b27      	ldr	r3, [pc, #156]	; (80175b0 <tcp_close_shutdown+0x1bc>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	4a26      	ldr	r2, [pc, #152]	; (80175b0 <tcp_close_shutdown+0x1bc>)
 8017518:	6013      	str	r3, [r2, #0]
 801751a:	e013      	b.n	8017544 <tcp_close_shutdown+0x150>
 801751c:	4b24      	ldr	r3, [pc, #144]	; (80175b0 <tcp_close_shutdown+0x1bc>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	60bb      	str	r3, [r7, #8]
 8017522:	e00c      	b.n	801753e <tcp_close_shutdown+0x14a>
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	68db      	ldr	r3, [r3, #12]
 8017528:	687a      	ldr	r2, [r7, #4]
 801752a:	429a      	cmp	r2, r3
 801752c:	d104      	bne.n	8017538 <tcp_close_shutdown+0x144>
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	68da      	ldr	r2, [r3, #12]
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	60da      	str	r2, [r3, #12]
 8017536:	e005      	b.n	8017544 <tcp_close_shutdown+0x150>
 8017538:	68bb      	ldr	r3, [r7, #8]
 801753a:	68db      	ldr	r3, [r3, #12]
 801753c:	60bb      	str	r3, [r7, #8]
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d1ef      	bne.n	8017524 <tcp_close_shutdown+0x130>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2200      	movs	r2, #0
 8017548:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801754a:	6878      	ldr	r0, [r7, #4]
 801754c:	f7ff fea0 	bl	8017290 <tcp_free>
      break;
 8017550:	e01a      	b.n	8017588 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f7ff ff14 	bl	8017380 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8017558:	6879      	ldr	r1, [r7, #4]
 801755a:	4816      	ldr	r0, [pc, #88]	; (80175b4 <tcp_close_shutdown+0x1c0>)
 801755c:	f001 fc48 	bl	8018df0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f7ff feb1 	bl	80172c8 <tcp_free_listen>
      break;
 8017566:	e00f      	b.n	8017588 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017568:	6879      	ldr	r1, [r7, #4]
 801756a:	480e      	ldr	r0, [pc, #56]	; (80175a4 <tcp_close_shutdown+0x1b0>)
 801756c:	f001 fc40 	bl	8018df0 <tcp_pcb_remove>
 8017570:	4b0d      	ldr	r3, [pc, #52]	; (80175a8 <tcp_close_shutdown+0x1b4>)
 8017572:	2201      	movs	r2, #1
 8017574:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8017576:	6878      	ldr	r0, [r7, #4]
 8017578:	f7ff fe8a 	bl	8017290 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801757c:	e004      	b.n	8017588 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f000 f81a 	bl	80175b8 <tcp_close_shutdown_fin>
 8017584:	4603      	mov	r3, r0
 8017586:	e000      	b.n	801758a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8017588:	2300      	movs	r3, #0
}
 801758a:	4618      	mov	r0, r3
 801758c:	3710      	adds	r7, #16
 801758e:	46bd      	mov	sp, r7
 8017590:	bdb0      	pop	{r4, r5, r7, pc}
 8017592:	bf00      	nop
 8017594:	08026290 	.word	0x08026290
 8017598:	08026390 	.word	0x08026390
 801759c:	08026300 	.word	0x08026300
 80175a0:	080263b0 	.word	0x080263b0
 80175a4:	24008838 	.word	0x24008838
 80175a8:	24008834 	.word	0x24008834
 80175ac:	2400884c 	.word	0x2400884c
 80175b0:	24008844 	.word	0x24008844
 80175b4:	24008840 	.word	0x24008840

080175b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b084      	sub	sp, #16
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d106      	bne.n	80175d4 <tcp_close_shutdown_fin+0x1c>
 80175c6:	4b2e      	ldr	r3, [pc, #184]	; (8017680 <tcp_close_shutdown_fin+0xc8>)
 80175c8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80175cc:	492d      	ldr	r1, [pc, #180]	; (8017684 <tcp_close_shutdown_fin+0xcc>)
 80175ce:	482e      	ldr	r0, [pc, #184]	; (8017688 <tcp_close_shutdown_fin+0xd0>)
 80175d0:	f008 fd18 	bl	8020004 <iprintf>

  switch (pcb->state) {
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	7d1b      	ldrb	r3, [r3, #20]
 80175d8:	2b07      	cmp	r3, #7
 80175da:	d020      	beq.n	801761e <tcp_close_shutdown_fin+0x66>
 80175dc:	2b07      	cmp	r3, #7
 80175de:	dc2b      	bgt.n	8017638 <tcp_close_shutdown_fin+0x80>
 80175e0:	2b03      	cmp	r3, #3
 80175e2:	d002      	beq.n	80175ea <tcp_close_shutdown_fin+0x32>
 80175e4:	2b04      	cmp	r3, #4
 80175e6:	d00d      	beq.n	8017604 <tcp_close_shutdown_fin+0x4c>
 80175e8:	e026      	b.n	8017638 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80175ea:	6878      	ldr	r0, [r7, #4]
 80175ec:	f004 feda 	bl	801c3a4 <tcp_send_fin>
 80175f0:	4603      	mov	r3, r0
 80175f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80175f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d11f      	bne.n	801763c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2205      	movs	r2, #5
 8017600:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017602:	e01b      	b.n	801763c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f004 fecd 	bl	801c3a4 <tcp_send_fin>
 801760a:	4603      	mov	r3, r0
 801760c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801760e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d114      	bne.n	8017640 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	2205      	movs	r2, #5
 801761a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801761c:	e010      	b.n	8017640 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	f004 fec0 	bl	801c3a4 <tcp_send_fin>
 8017624:	4603      	mov	r3, r0
 8017626:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d109      	bne.n	8017644 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2209      	movs	r2, #9
 8017634:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017636:	e005      	b.n	8017644 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8017638:	2300      	movs	r3, #0
 801763a:	e01c      	b.n	8017676 <tcp_close_shutdown_fin+0xbe>
      break;
 801763c:	bf00      	nop
 801763e:	e002      	b.n	8017646 <tcp_close_shutdown_fin+0x8e>
      break;
 8017640:	bf00      	nop
 8017642:	e000      	b.n	8017646 <tcp_close_shutdown_fin+0x8e>
      break;
 8017644:	bf00      	nop
  }

  if (err == ERR_OK) {
 8017646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d103      	bne.n	8017656 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f004 ffe6 	bl	801c620 <tcp_output>
 8017654:	e00d      	b.n	8017672 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8017656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801765a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801765e:	d108      	bne.n	8017672 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	8b5b      	ldrh	r3, [r3, #26]
 8017664:	f043 0308 	orr.w	r3, r3, #8
 8017668:	b29a      	uxth	r2, r3
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801766e:	2300      	movs	r3, #0
 8017670:	e001      	b.n	8017676 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8017672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017676:	4618      	mov	r0, r3
 8017678:	3710      	adds	r7, #16
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
 801767e:	bf00      	nop
 8017680:	08026290 	.word	0x08026290
 8017684:	0802636c 	.word	0x0802636c
 8017688:	08026300 	.word	0x08026300

0801768c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b082      	sub	sp, #8
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d109      	bne.n	80176ae <tcp_close+0x22>
 801769a:	4b0f      	ldr	r3, [pc, #60]	; (80176d8 <tcp_close+0x4c>)
 801769c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80176a0:	490e      	ldr	r1, [pc, #56]	; (80176dc <tcp_close+0x50>)
 80176a2:	480f      	ldr	r0, [pc, #60]	; (80176e0 <tcp_close+0x54>)
 80176a4:	f008 fcae 	bl	8020004 <iprintf>
 80176a8:	f06f 030f 	mvn.w	r3, #15
 80176ac:	e00f      	b.n	80176ce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	7d1b      	ldrb	r3, [r3, #20]
 80176b2:	2b01      	cmp	r3, #1
 80176b4:	d006      	beq.n	80176c4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	8b5b      	ldrh	r3, [r3, #26]
 80176ba:	f043 0310 	orr.w	r3, r3, #16
 80176be:	b29a      	uxth	r2, r3
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80176c4:	2101      	movs	r1, #1
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f7ff fe94 	bl	80173f4 <tcp_close_shutdown>
 80176cc:	4603      	mov	r3, r0
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3708      	adds	r7, #8
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}
 80176d6:	bf00      	nop
 80176d8:	08026290 	.word	0x08026290
 80176dc:	080263cc 	.word	0x080263cc
 80176e0:	08026300 	.word	0x08026300

080176e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b08e      	sub	sp, #56	; 0x38
 80176e8:	af04      	add	r7, sp, #16
 80176ea:	6078      	str	r0, [r7, #4]
 80176ec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d107      	bne.n	8017704 <tcp_abandon+0x20>
 80176f4:	4b52      	ldr	r3, [pc, #328]	; (8017840 <tcp_abandon+0x15c>)
 80176f6:	f240 223d 	movw	r2, #573	; 0x23d
 80176fa:	4952      	ldr	r1, [pc, #328]	; (8017844 <tcp_abandon+0x160>)
 80176fc:	4852      	ldr	r0, [pc, #328]	; (8017848 <tcp_abandon+0x164>)
 80176fe:	f008 fc81 	bl	8020004 <iprintf>
 8017702:	e099      	b.n	8017838 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	7d1b      	ldrb	r3, [r3, #20]
 8017708:	2b01      	cmp	r3, #1
 801770a:	d106      	bne.n	801771a <tcp_abandon+0x36>
 801770c:	4b4c      	ldr	r3, [pc, #304]	; (8017840 <tcp_abandon+0x15c>)
 801770e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017712:	494e      	ldr	r1, [pc, #312]	; (801784c <tcp_abandon+0x168>)
 8017714:	484c      	ldr	r0, [pc, #304]	; (8017848 <tcp_abandon+0x164>)
 8017716:	f008 fc75 	bl	8020004 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	7d1b      	ldrb	r3, [r3, #20]
 801771e:	2b0a      	cmp	r3, #10
 8017720:	d107      	bne.n	8017732 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8017722:	6879      	ldr	r1, [r7, #4]
 8017724:	484a      	ldr	r0, [pc, #296]	; (8017850 <tcp_abandon+0x16c>)
 8017726:	f001 fb63 	bl	8018df0 <tcp_pcb_remove>
    tcp_free(pcb);
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	f7ff fdb0 	bl	8017290 <tcp_free>
 8017730:	e082      	b.n	8017838 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8017732:	2300      	movs	r3, #0
 8017734:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8017736:	2300      	movs	r3, #0
 8017738:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801773e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017744:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801774c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	691b      	ldr	r3, [r3, #16]
 8017752:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	7d1b      	ldrb	r3, [r3, #20]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d126      	bne.n	80177aa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	8adb      	ldrh	r3, [r3, #22]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d02e      	beq.n	80177c2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017764:	4b3b      	ldr	r3, [pc, #236]	; (8017854 <tcp_abandon+0x170>)
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	687a      	ldr	r2, [r7, #4]
 801776a:	429a      	cmp	r2, r3
 801776c:	d105      	bne.n	801777a <tcp_abandon+0x96>
 801776e:	4b39      	ldr	r3, [pc, #228]	; (8017854 <tcp_abandon+0x170>)
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	68db      	ldr	r3, [r3, #12]
 8017774:	4a37      	ldr	r2, [pc, #220]	; (8017854 <tcp_abandon+0x170>)
 8017776:	6013      	str	r3, [r2, #0]
 8017778:	e013      	b.n	80177a2 <tcp_abandon+0xbe>
 801777a:	4b36      	ldr	r3, [pc, #216]	; (8017854 <tcp_abandon+0x170>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	61fb      	str	r3, [r7, #28]
 8017780:	e00c      	b.n	801779c <tcp_abandon+0xb8>
 8017782:	69fb      	ldr	r3, [r7, #28]
 8017784:	68db      	ldr	r3, [r3, #12]
 8017786:	687a      	ldr	r2, [r7, #4]
 8017788:	429a      	cmp	r2, r3
 801778a:	d104      	bne.n	8017796 <tcp_abandon+0xb2>
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	68da      	ldr	r2, [r3, #12]
 8017790:	69fb      	ldr	r3, [r7, #28]
 8017792:	60da      	str	r2, [r3, #12]
 8017794:	e005      	b.n	80177a2 <tcp_abandon+0xbe>
 8017796:	69fb      	ldr	r3, [r7, #28]
 8017798:	68db      	ldr	r3, [r3, #12]
 801779a:	61fb      	str	r3, [r7, #28]
 801779c:	69fb      	ldr	r3, [r7, #28]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d1ef      	bne.n	8017782 <tcp_abandon+0x9e>
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2200      	movs	r2, #0
 80177a6:	60da      	str	r2, [r3, #12]
 80177a8:	e00b      	b.n	80177c2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	8adb      	ldrh	r3, [r3, #22]
 80177b2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80177b4:	6879      	ldr	r1, [r7, #4]
 80177b6:	4828      	ldr	r0, [pc, #160]	; (8017858 <tcp_abandon+0x174>)
 80177b8:	f001 fb1a 	bl	8018df0 <tcp_pcb_remove>
 80177bc:	4b27      	ldr	r3, [pc, #156]	; (801785c <tcp_abandon+0x178>)
 80177be:	2201      	movs	r2, #1
 80177c0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d004      	beq.n	80177d4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177ce:	4618      	mov	r0, r3
 80177d0:	f000 ffee 	bl	80187b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d004      	beq.n	80177e6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177e0:	4618      	mov	r0, r3
 80177e2:	f000 ffe5 	bl	80187b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d004      	beq.n	80177f8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80177f2:	4618      	mov	r0, r3
 80177f4:	f000 ffdc 	bl	80187b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80177f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d00e      	beq.n	801781c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80177fe:	6879      	ldr	r1, [r7, #4]
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	3304      	adds	r3, #4
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	8b12      	ldrh	r2, [r2, #24]
 8017808:	9202      	str	r2, [sp, #8]
 801780a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801780c:	9201      	str	r2, [sp, #4]
 801780e:	9300      	str	r3, [sp, #0]
 8017810:	460b      	mov	r3, r1
 8017812:	697a      	ldr	r2, [r7, #20]
 8017814:	69b9      	ldr	r1, [r7, #24]
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f005 fcb6 	bl	801d188 <tcp_rst>
    }
    last_state = pcb->state;
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	7d1b      	ldrb	r3, [r3, #20]
 8017820:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8017822:	6878      	ldr	r0, [r7, #4]
 8017824:	f7ff fd34 	bl	8017290 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d004      	beq.n	8017838 <tcp_abandon+0x154>
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	f06f 010c 	mvn.w	r1, #12
 8017834:	68f8      	ldr	r0, [r7, #12]
 8017836:	4798      	blx	r3
  }
}
 8017838:	3728      	adds	r7, #40	; 0x28
 801783a:	46bd      	mov	sp, r7
 801783c:	bd80      	pop	{r7, pc}
 801783e:	bf00      	nop
 8017840:	08026290 	.word	0x08026290
 8017844:	08026400 	.word	0x08026400
 8017848:	08026300 	.word	0x08026300
 801784c:	0802641c 	.word	0x0802641c
 8017850:	24008848 	.word	0x24008848
 8017854:	24008844 	.word	0x24008844
 8017858:	24008838 	.word	0x24008838
 801785c:	24008834 	.word	0x24008834

08017860 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8017868:	2101      	movs	r1, #1
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7ff ff3a 	bl	80176e4 <tcp_abandon>
}
 8017870:	bf00      	nop
 8017872:	3708      	adds	r7, #8
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}

08017878 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b088      	sub	sp, #32
 801787c:	af00      	add	r7, sp, #0
 801787e:	60f8      	str	r0, [r7, #12]
 8017880:	60b9      	str	r1, [r7, #8]
 8017882:	4613      	mov	r3, r2
 8017884:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8017886:	2304      	movs	r3, #4
 8017888:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801788a:	68bb      	ldr	r3, [r7, #8]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d101      	bne.n	8017894 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8017890:	4b3e      	ldr	r3, [pc, #248]	; (801798c <tcp_bind+0x114>)
 8017892:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d109      	bne.n	80178ae <tcp_bind+0x36>
 801789a:	4b3d      	ldr	r3, [pc, #244]	; (8017990 <tcp_bind+0x118>)
 801789c:	f240 22a9 	movw	r2, #681	; 0x2a9
 80178a0:	493c      	ldr	r1, [pc, #240]	; (8017994 <tcp_bind+0x11c>)
 80178a2:	483d      	ldr	r0, [pc, #244]	; (8017998 <tcp_bind+0x120>)
 80178a4:	f008 fbae 	bl	8020004 <iprintf>
 80178a8:	f06f 030f 	mvn.w	r3, #15
 80178ac:	e06a      	b.n	8017984 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	7d1b      	ldrb	r3, [r3, #20]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d009      	beq.n	80178ca <tcp_bind+0x52>
 80178b6:	4b36      	ldr	r3, [pc, #216]	; (8017990 <tcp_bind+0x118>)
 80178b8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80178bc:	4937      	ldr	r1, [pc, #220]	; (801799c <tcp_bind+0x124>)
 80178be:	4836      	ldr	r0, [pc, #216]	; (8017998 <tcp_bind+0x120>)
 80178c0:	f008 fba0 	bl	8020004 <iprintf>
 80178c4:	f06f 0305 	mvn.w	r3, #5
 80178c8:	e05c      	b.n	8017984 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80178ca:	88fb      	ldrh	r3, [r7, #6]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d109      	bne.n	80178e4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80178d0:	f000 f9f0 	bl	8017cb4 <tcp_new_port>
 80178d4:	4603      	mov	r3, r0
 80178d6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80178d8:	88fb      	ldrh	r3, [r7, #6]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d135      	bne.n	801794a <tcp_bind+0xd2>
      return ERR_BUF;
 80178de:	f06f 0301 	mvn.w	r3, #1
 80178e2:	e04f      	b.n	8017984 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80178e4:	2300      	movs	r3, #0
 80178e6:	61fb      	str	r3, [r7, #28]
 80178e8:	e02b      	b.n	8017942 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80178ea:	4a2d      	ldr	r2, [pc, #180]	; (80179a0 <tcp_bind+0x128>)
 80178ec:	69fb      	ldr	r3, [r7, #28]
 80178ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	61bb      	str	r3, [r7, #24]
 80178f6:	e01e      	b.n	8017936 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80178f8:	69bb      	ldr	r3, [r7, #24]
 80178fa:	8adb      	ldrh	r3, [r3, #22]
 80178fc:	88fa      	ldrh	r2, [r7, #6]
 80178fe:	429a      	cmp	r2, r3
 8017900:	d116      	bne.n	8017930 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8017902:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017904:	2b00      	cmp	r3, #0
 8017906:	d010      	beq.n	801792a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017908:	69bb      	ldr	r3, [r7, #24]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d00c      	beq.n	801792a <tcp_bind+0xb2>
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d009      	beq.n	801792a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d005      	beq.n	801792a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801791e:	69bb      	ldr	r3, [r7, #24]
 8017920:	681a      	ldr	r2, [r3, #0]
 8017922:	68bb      	ldr	r3, [r7, #8]
 8017924:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017926:	429a      	cmp	r2, r3
 8017928:	d102      	bne.n	8017930 <tcp_bind+0xb8>
              return ERR_USE;
 801792a:	f06f 0307 	mvn.w	r3, #7
 801792e:	e029      	b.n	8017984 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017930:	69bb      	ldr	r3, [r7, #24]
 8017932:	68db      	ldr	r3, [r3, #12]
 8017934:	61bb      	str	r3, [r7, #24]
 8017936:	69bb      	ldr	r3, [r7, #24]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d1dd      	bne.n	80178f8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801793c:	69fb      	ldr	r3, [r7, #28]
 801793e:	3301      	adds	r3, #1
 8017940:	61fb      	str	r3, [r7, #28]
 8017942:	69fa      	ldr	r2, [r7, #28]
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	429a      	cmp	r2, r3
 8017948:	dbcf      	blt.n	80178ea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801794a:	68bb      	ldr	r3, [r7, #8]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d00c      	beq.n	801796a <tcp_bind+0xf2>
 8017950:	68bb      	ldr	r3, [r7, #8]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d008      	beq.n	801796a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8017958:	68bb      	ldr	r3, [r7, #8]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d002      	beq.n	8017964 <tcp_bind+0xec>
 801795e:	68bb      	ldr	r3, [r7, #8]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	e000      	b.n	8017966 <tcp_bind+0xee>
 8017964:	2300      	movs	r3, #0
 8017966:	68fa      	ldr	r2, [r7, #12]
 8017968:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	88fa      	ldrh	r2, [r7, #6]
 801796e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017970:	4b0c      	ldr	r3, [pc, #48]	; (80179a4 <tcp_bind+0x12c>)
 8017972:	681a      	ldr	r2, [r3, #0]
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	60da      	str	r2, [r3, #12]
 8017978:	4a0a      	ldr	r2, [pc, #40]	; (80179a4 <tcp_bind+0x12c>)
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	6013      	str	r3, [r2, #0]
 801797e:	f005 fdc5 	bl	801d50c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8017982:	2300      	movs	r3, #0
}
 8017984:	4618      	mov	r0, r3
 8017986:	3720      	adds	r7, #32
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}
 801798c:	08028258 	.word	0x08028258
 8017990:	08026290 	.word	0x08026290
 8017994:	08026450 	.word	0x08026450
 8017998:	08026300 	.word	0x08026300
 801799c:	08026468 	.word	0x08026468
 80179a0:	08028304 	.word	0x08028304
 80179a4:	24008844 	.word	0x24008844

080179a8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	4613      	mov	r3, r2
 80179b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80179b6:	68bb      	ldr	r3, [r7, #8]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d106      	bne.n	80179ca <tcp_accept_null+0x22>
 80179bc:	4b07      	ldr	r3, [pc, #28]	; (80179dc <tcp_accept_null+0x34>)
 80179be:	f240 320f 	movw	r2, #783	; 0x30f
 80179c2:	4907      	ldr	r1, [pc, #28]	; (80179e0 <tcp_accept_null+0x38>)
 80179c4:	4807      	ldr	r0, [pc, #28]	; (80179e4 <tcp_accept_null+0x3c>)
 80179c6:	f008 fb1d 	bl	8020004 <iprintf>

  tcp_abort(pcb);
 80179ca:	68b8      	ldr	r0, [r7, #8]
 80179cc:	f7ff ff48 	bl	8017860 <tcp_abort>

  return ERR_ABRT;
 80179d0:	f06f 030c 	mvn.w	r3, #12
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3710      	adds	r7, #16
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}
 80179dc:	08026290 	.word	0x08026290
 80179e0:	08026490 	.word	0x08026490
 80179e4:	08026300 	.word	0x08026300

080179e8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b082      	sub	sp, #8
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
 80179f0:	460b      	mov	r3, r1
 80179f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80179f4:	78fb      	ldrb	r3, [r7, #3]
 80179f6:	2200      	movs	r2, #0
 80179f8:	4619      	mov	r1, r3
 80179fa:	6878      	ldr	r0, [r7, #4]
 80179fc:	f000 f806 	bl	8017a0c <tcp_listen_with_backlog_and_err>
 8017a00:	4603      	mov	r3, r0
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3708      	adds	r7, #8
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
	...

08017a0c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b088      	sub	sp, #32
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	60f8      	str	r0, [r7, #12]
 8017a14:	460b      	mov	r3, r1
 8017a16:	607a      	str	r2, [r7, #4]
 8017a18:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d109      	bne.n	8017a38 <tcp_listen_with_backlog_and_err+0x2c>
 8017a24:	4b47      	ldr	r3, [pc, #284]	; (8017b44 <tcp_listen_with_backlog_and_err+0x138>)
 8017a26:	f240 3259 	movw	r2, #857	; 0x359
 8017a2a:	4947      	ldr	r1, [pc, #284]	; (8017b48 <tcp_listen_with_backlog_and_err+0x13c>)
 8017a2c:	4847      	ldr	r0, [pc, #284]	; (8017b4c <tcp_listen_with_backlog_and_err+0x140>)
 8017a2e:	f008 fae9 	bl	8020004 <iprintf>
 8017a32:	23f0      	movs	r3, #240	; 0xf0
 8017a34:	76fb      	strb	r3, [r7, #27]
 8017a36:	e079      	b.n	8017b2c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	7d1b      	ldrb	r3, [r3, #20]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d009      	beq.n	8017a54 <tcp_listen_with_backlog_and_err+0x48>
 8017a40:	4b40      	ldr	r3, [pc, #256]	; (8017b44 <tcp_listen_with_backlog_and_err+0x138>)
 8017a42:	f240 325a 	movw	r2, #858	; 0x35a
 8017a46:	4942      	ldr	r1, [pc, #264]	; (8017b50 <tcp_listen_with_backlog_and_err+0x144>)
 8017a48:	4840      	ldr	r0, [pc, #256]	; (8017b4c <tcp_listen_with_backlog_and_err+0x140>)
 8017a4a:	f008 fadb 	bl	8020004 <iprintf>
 8017a4e:	23f1      	movs	r3, #241	; 0xf1
 8017a50:	76fb      	strb	r3, [r7, #27]
 8017a52:	e06b      	b.n	8017b2c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	7d1b      	ldrb	r3, [r3, #20]
 8017a58:	2b01      	cmp	r3, #1
 8017a5a:	d104      	bne.n	8017a66 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8017a60:	23f7      	movs	r3, #247	; 0xf7
 8017a62:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017a64:	e062      	b.n	8017b2c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8017a66:	2002      	movs	r0, #2
 8017a68:	f7fe f9d4 	bl	8015e14 <memp_malloc>
 8017a6c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d102      	bne.n	8017a7a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8017a74:	23ff      	movs	r3, #255	; 0xff
 8017a76:	76fb      	strb	r3, [r7, #27]
    goto done;
 8017a78:	e058      	b.n	8017b2c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	691a      	ldr	r2, [r3, #16]
 8017a7e:	69fb      	ldr	r3, [r7, #28]
 8017a80:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	8ada      	ldrh	r2, [r3, #22]
 8017a86:	69fb      	ldr	r3, [r7, #28]
 8017a88:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8017a8a:	69fb      	ldr	r3, [r7, #28]
 8017a8c:	2201      	movs	r2, #1
 8017a8e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	7d5a      	ldrb	r2, [r3, #21]
 8017a94:	69fb      	ldr	r3, [r7, #28]
 8017a96:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	7a5a      	ldrb	r2, [r3, #9]
 8017a9c:	69fb      	ldr	r3, [r7, #28]
 8017a9e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8017aa0:	69fb      	ldr	r3, [r7, #28]
 8017aa2:	2200      	movs	r2, #0
 8017aa4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	7ada      	ldrb	r2, [r3, #11]
 8017aaa:	69fb      	ldr	r3, [r7, #28]
 8017aac:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	7a9a      	ldrb	r2, [r3, #10]
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	681a      	ldr	r2, [r3, #0]
 8017aba:	69fb      	ldr	r3, [r7, #28]
 8017abc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	8adb      	ldrh	r3, [r3, #22]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d021      	beq.n	8017b0a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8017ac6:	4b23      	ldr	r3, [pc, #140]	; (8017b54 <tcp_listen_with_backlog_and_err+0x148>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	68fa      	ldr	r2, [r7, #12]
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d105      	bne.n	8017adc <tcp_listen_with_backlog_and_err+0xd0>
 8017ad0:	4b20      	ldr	r3, [pc, #128]	; (8017b54 <tcp_listen_with_backlog_and_err+0x148>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	68db      	ldr	r3, [r3, #12]
 8017ad6:	4a1f      	ldr	r2, [pc, #124]	; (8017b54 <tcp_listen_with_backlog_and_err+0x148>)
 8017ad8:	6013      	str	r3, [r2, #0]
 8017ada:	e013      	b.n	8017b04 <tcp_listen_with_backlog_and_err+0xf8>
 8017adc:	4b1d      	ldr	r3, [pc, #116]	; (8017b54 <tcp_listen_with_backlog_and_err+0x148>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	617b      	str	r3, [r7, #20]
 8017ae2:	e00c      	b.n	8017afe <tcp_listen_with_backlog_and_err+0xf2>
 8017ae4:	697b      	ldr	r3, [r7, #20]
 8017ae6:	68db      	ldr	r3, [r3, #12]
 8017ae8:	68fa      	ldr	r2, [r7, #12]
 8017aea:	429a      	cmp	r2, r3
 8017aec:	d104      	bne.n	8017af8 <tcp_listen_with_backlog_and_err+0xec>
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	68da      	ldr	r2, [r3, #12]
 8017af2:	697b      	ldr	r3, [r7, #20]
 8017af4:	60da      	str	r2, [r3, #12]
 8017af6:	e005      	b.n	8017b04 <tcp_listen_with_backlog_and_err+0xf8>
 8017af8:	697b      	ldr	r3, [r7, #20]
 8017afa:	68db      	ldr	r3, [r3, #12]
 8017afc:	617b      	str	r3, [r7, #20]
 8017afe:	697b      	ldr	r3, [r7, #20]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d1ef      	bne.n	8017ae4 <tcp_listen_with_backlog_and_err+0xd8>
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	2200      	movs	r2, #0
 8017b08:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8017b0a:	68f8      	ldr	r0, [r7, #12]
 8017b0c:	f7ff fbc0 	bl	8017290 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8017b10:	69fb      	ldr	r3, [r7, #28]
 8017b12:	4a11      	ldr	r2, [pc, #68]	; (8017b58 <tcp_listen_with_backlog_and_err+0x14c>)
 8017b14:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8017b16:	4b11      	ldr	r3, [pc, #68]	; (8017b5c <tcp_listen_with_backlog_and_err+0x150>)
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	69fb      	ldr	r3, [r7, #28]
 8017b1c:	60da      	str	r2, [r3, #12]
 8017b1e:	4a0f      	ldr	r2, [pc, #60]	; (8017b5c <tcp_listen_with_backlog_and_err+0x150>)
 8017b20:	69fb      	ldr	r3, [r7, #28]
 8017b22:	6013      	str	r3, [r2, #0]
 8017b24:	f005 fcf2 	bl	801d50c <tcp_timer_needed>
  res = ERR_OK;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d002      	beq.n	8017b38 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	7efa      	ldrb	r2, [r7, #27]
 8017b36:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8017b38:	69fb      	ldr	r3, [r7, #28]
}
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	3720      	adds	r7, #32
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	bd80      	pop	{r7, pc}
 8017b42:	bf00      	nop
 8017b44:	08026290 	.word	0x08026290
 8017b48:	080264b0 	.word	0x080264b0
 8017b4c:	08026300 	.word	0x08026300
 8017b50:	080264e0 	.word	0x080264e0
 8017b54:	24008844 	.word	0x24008844
 8017b58:	080179a9 	.word	0x080179a9
 8017b5c:	24008840 	.word	0x24008840

08017b60 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d106      	bne.n	8017b7c <tcp_update_rcv_ann_wnd+0x1c>
 8017b6e:	4b25      	ldr	r3, [pc, #148]	; (8017c04 <tcp_update_rcv_ann_wnd+0xa4>)
 8017b70:	f240 32a6 	movw	r2, #934	; 0x3a6
 8017b74:	4924      	ldr	r1, [pc, #144]	; (8017c08 <tcp_update_rcv_ann_wnd+0xa8>)
 8017b76:	4825      	ldr	r0, [pc, #148]	; (8017c0c <tcp_update_rcv_ann_wnd+0xac>)
 8017b78:	f008 fa44 	bl	8020004 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b80:	687a      	ldr	r2, [r7, #4]
 8017b82:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8017b84:	4413      	add	r3, r2
 8017b86:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b8c:	687a      	ldr	r2, [r7, #4]
 8017b8e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8017b90:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8017b94:	bf28      	it	cs
 8017b96:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8017b9a:	b292      	uxth	r2, r2
 8017b9c:	4413      	add	r3, r2
 8017b9e:	68fa      	ldr	r2, [r7, #12]
 8017ba0:	1ad3      	subs	r3, r2, r3
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	db08      	blt.n	8017bb8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bb2:	68fa      	ldr	r2, [r7, #12]
 8017bb4:	1ad3      	subs	r3, r2, r3
 8017bb6:	e020      	b.n	8017bfa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bc0:	1ad3      	subs	r3, r2, r3
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	dd03      	ble.n	8017bce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	2200      	movs	r2, #0
 8017bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017bcc:	e014      	b.n	8017bf8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bd6:	1ad3      	subs	r3, r2, r3
 8017bd8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8017bda:	68bb      	ldr	r3, [r7, #8]
 8017bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017be0:	d306      	bcc.n	8017bf0 <tcp_update_rcv_ann_wnd+0x90>
 8017be2:	4b08      	ldr	r3, [pc, #32]	; (8017c04 <tcp_update_rcv_ann_wnd+0xa4>)
 8017be4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8017be8:	4909      	ldr	r1, [pc, #36]	; (8017c10 <tcp_update_rcv_ann_wnd+0xb0>)
 8017bea:	4808      	ldr	r0, [pc, #32]	; (8017c0c <tcp_update_rcv_ann_wnd+0xac>)
 8017bec:	f008 fa0a 	bl	8020004 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8017bf0:	68bb      	ldr	r3, [r7, #8]
 8017bf2:	b29a      	uxth	r2, r3
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8017bf8:	2300      	movs	r3, #0
  }
}
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	3710      	adds	r7, #16
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}
 8017c02:	bf00      	nop
 8017c04:	08026290 	.word	0x08026290
 8017c08:	08026518 	.word	0x08026518
 8017c0c:	08026300 	.word	0x08026300
 8017c10:	0802653c 	.word	0x0802653c

08017c14 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b084      	sub	sp, #16
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d107      	bne.n	8017c36 <tcp_recved+0x22>
 8017c26:	4b1f      	ldr	r3, [pc, #124]	; (8017ca4 <tcp_recved+0x90>)
 8017c28:	f240 32cf 	movw	r2, #975	; 0x3cf
 8017c2c:	491e      	ldr	r1, [pc, #120]	; (8017ca8 <tcp_recved+0x94>)
 8017c2e:	481f      	ldr	r0, [pc, #124]	; (8017cac <tcp_recved+0x98>)
 8017c30:	f008 f9e8 	bl	8020004 <iprintf>
 8017c34:	e032      	b.n	8017c9c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	7d1b      	ldrb	r3, [r3, #20]
 8017c3a:	2b01      	cmp	r3, #1
 8017c3c:	d106      	bne.n	8017c4c <tcp_recved+0x38>
 8017c3e:	4b19      	ldr	r3, [pc, #100]	; (8017ca4 <tcp_recved+0x90>)
 8017c40:	f240 32d2 	movw	r2, #978	; 0x3d2
 8017c44:	491a      	ldr	r1, [pc, #104]	; (8017cb0 <tcp_recved+0x9c>)
 8017c46:	4819      	ldr	r0, [pc, #100]	; (8017cac <tcp_recved+0x98>)
 8017c48:	f008 f9dc 	bl	8020004 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017c50:	887b      	ldrh	r3, [r7, #2]
 8017c52:	4413      	add	r3, r2
 8017c54:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8017c56:	89fb      	ldrh	r3, [r7, #14]
 8017c58:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017c5c:	d804      	bhi.n	8017c68 <tcp_recved+0x54>
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c62:	89fa      	ldrh	r2, [r7, #14]
 8017c64:	429a      	cmp	r2, r3
 8017c66:	d204      	bcs.n	8017c72 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017c6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8017c70:	e002      	b.n	8017c78 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	89fa      	ldrh	r2, [r7, #14]
 8017c76:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017c78:	6878      	ldr	r0, [r7, #4]
 8017c7a:	f7ff ff71 	bl	8017b60 <tcp_update_rcv_ann_wnd>
 8017c7e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017c86:	d309      	bcc.n	8017c9c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	8b5b      	ldrh	r3, [r3, #26]
 8017c8c:	f043 0302 	orr.w	r3, r3, #2
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f004 fcc2 	bl	801c620 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8017c9c:	3710      	adds	r7, #16
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	08026290 	.word	0x08026290
 8017ca8:	08026558 	.word	0x08026558
 8017cac:	08026300 	.word	0x08026300
 8017cb0:	08026570 	.word	0x08026570

08017cb4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8017cb4:	b480      	push	{r7}
 8017cb6:	b083      	sub	sp, #12
 8017cb8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8017cbe:	4b1e      	ldr	r3, [pc, #120]	; (8017d38 <tcp_new_port+0x84>)
 8017cc0:	881b      	ldrh	r3, [r3, #0]
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	b29a      	uxth	r2, r3
 8017cc6:	4b1c      	ldr	r3, [pc, #112]	; (8017d38 <tcp_new_port+0x84>)
 8017cc8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8017cca:	4b1b      	ldr	r3, [pc, #108]	; (8017d38 <tcp_new_port+0x84>)
 8017ccc:	881b      	ldrh	r3, [r3, #0]
 8017cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	d103      	bne.n	8017cde <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017cd6:	4b18      	ldr	r3, [pc, #96]	; (8017d38 <tcp_new_port+0x84>)
 8017cd8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017cdc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8017cde:	2300      	movs	r3, #0
 8017ce0:	71fb      	strb	r3, [r7, #7]
 8017ce2:	e01e      	b.n	8017d22 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017ce4:	79fb      	ldrb	r3, [r7, #7]
 8017ce6:	4a15      	ldr	r2, [pc, #84]	; (8017d3c <tcp_new_port+0x88>)
 8017ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	603b      	str	r3, [r7, #0]
 8017cf0:	e011      	b.n	8017d16 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	8ada      	ldrh	r2, [r3, #22]
 8017cf6:	4b10      	ldr	r3, [pc, #64]	; (8017d38 <tcp_new_port+0x84>)
 8017cf8:	881b      	ldrh	r3, [r3, #0]
 8017cfa:	429a      	cmp	r2, r3
 8017cfc:	d108      	bne.n	8017d10 <tcp_new_port+0x5c>
        n++;
 8017cfe:	88bb      	ldrh	r3, [r7, #4]
 8017d00:	3301      	adds	r3, #1
 8017d02:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8017d04:	88bb      	ldrh	r3, [r7, #4]
 8017d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017d0a:	d3d8      	bcc.n	8017cbe <tcp_new_port+0xa>
          return 0;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	e00d      	b.n	8017d2c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	68db      	ldr	r3, [r3, #12]
 8017d14:	603b      	str	r3, [r7, #0]
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d1ea      	bne.n	8017cf2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8017d1c:	79fb      	ldrb	r3, [r7, #7]
 8017d1e:	3301      	adds	r3, #1
 8017d20:	71fb      	strb	r3, [r7, #7]
 8017d22:	79fb      	ldrb	r3, [r7, #7]
 8017d24:	2b03      	cmp	r3, #3
 8017d26:	d9dd      	bls.n	8017ce4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8017d28:	4b03      	ldr	r3, [pc, #12]	; (8017d38 <tcp_new_port+0x84>)
 8017d2a:	881b      	ldrh	r3, [r3, #0]
}
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	370c      	adds	r7, #12
 8017d30:	46bd      	mov	sp, r7
 8017d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d36:	4770      	bx	lr
 8017d38:	24000024 	.word	0x24000024
 8017d3c:	08028304 	.word	0x08028304

08017d40 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b08a      	sub	sp, #40	; 0x28
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	60f8      	str	r0, [r7, #12]
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	603b      	str	r3, [r7, #0]
 8017d4c:	4613      	mov	r3, r2
 8017d4e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8017d50:	2300      	movs	r3, #0
 8017d52:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d109      	bne.n	8017d6e <tcp_connect+0x2e>
 8017d5a:	4b7d      	ldr	r3, [pc, #500]	; (8017f50 <tcp_connect+0x210>)
 8017d5c:	f240 4235 	movw	r2, #1077	; 0x435
 8017d60:	497c      	ldr	r1, [pc, #496]	; (8017f54 <tcp_connect+0x214>)
 8017d62:	487d      	ldr	r0, [pc, #500]	; (8017f58 <tcp_connect+0x218>)
 8017d64:	f008 f94e 	bl	8020004 <iprintf>
 8017d68:	f06f 030f 	mvn.w	r3, #15
 8017d6c:	e0ec      	b.n	8017f48 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8017d6e:	68bb      	ldr	r3, [r7, #8]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d109      	bne.n	8017d88 <tcp_connect+0x48>
 8017d74:	4b76      	ldr	r3, [pc, #472]	; (8017f50 <tcp_connect+0x210>)
 8017d76:	f240 4236 	movw	r2, #1078	; 0x436
 8017d7a:	4978      	ldr	r1, [pc, #480]	; (8017f5c <tcp_connect+0x21c>)
 8017d7c:	4876      	ldr	r0, [pc, #472]	; (8017f58 <tcp_connect+0x218>)
 8017d7e:	f008 f941 	bl	8020004 <iprintf>
 8017d82:	f06f 030f 	mvn.w	r3, #15
 8017d86:	e0df      	b.n	8017f48 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	7d1b      	ldrb	r3, [r3, #20]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d009      	beq.n	8017da4 <tcp_connect+0x64>
 8017d90:	4b6f      	ldr	r3, [pc, #444]	; (8017f50 <tcp_connect+0x210>)
 8017d92:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8017d96:	4972      	ldr	r1, [pc, #456]	; (8017f60 <tcp_connect+0x220>)
 8017d98:	486f      	ldr	r0, [pc, #444]	; (8017f58 <tcp_connect+0x218>)
 8017d9a:	f008 f933 	bl	8020004 <iprintf>
 8017d9e:	f06f 0309 	mvn.w	r3, #9
 8017da2:	e0d1      	b.n	8017f48 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8017da4:	68bb      	ldr	r3, [r7, #8]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d002      	beq.n	8017db0 <tcp_connect+0x70>
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	e000      	b.n	8017db2 <tcp_connect+0x72>
 8017db0:	2300      	movs	r3, #0
 8017db2:	68fa      	ldr	r2, [r7, #12]
 8017db4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	88fa      	ldrh	r2, [r7, #6]
 8017dba:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	7a1b      	ldrb	r3, [r3, #8]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d006      	beq.n	8017dd2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	7a1b      	ldrb	r3, [r3, #8]
 8017dc8:	4618      	mov	r0, r3
 8017dca:	f7fe fba9 	bl	8016520 <netif_get_by_index>
 8017dce:	6278      	str	r0, [r7, #36]	; 0x24
 8017dd0:	e005      	b.n	8017dde <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	3304      	adds	r3, #4
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7fc fadc 	bl	8014394 <ip4_route>
 8017ddc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8017dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d102      	bne.n	8017dea <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8017de4:	f06f 0303 	mvn.w	r3, #3
 8017de8:	e0ae      	b.n	8017f48 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d003      	beq.n	8017df8 <tcp_connect+0xb8>
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d111      	bne.n	8017e1c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d002      	beq.n	8017e04 <tcp_connect+0xc4>
 8017dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e00:	3304      	adds	r3, #4
 8017e02:	e000      	b.n	8017e06 <tcp_connect+0xc6>
 8017e04:	2300      	movs	r3, #0
 8017e06:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8017e08:	69fb      	ldr	r3, [r7, #28]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d102      	bne.n	8017e14 <tcp_connect+0xd4>
      return ERR_RTE;
 8017e0e:	f06f 0303 	mvn.w	r3, #3
 8017e12:	e099      	b.n	8017f48 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017e14:	69fb      	ldr	r3, [r7, #28]
 8017e16:	681a      	ldr	r2, [r3, #0]
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	8adb      	ldrh	r3, [r3, #22]
 8017e20:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	8adb      	ldrh	r3, [r3, #22]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d10c      	bne.n	8017e44 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8017e2a:	f7ff ff43 	bl	8017cb4 <tcp_new_port>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	461a      	mov	r2, r3
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	8adb      	ldrh	r3, [r3, #22]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d102      	bne.n	8017e44 <tcp_connect+0x104>
      return ERR_BUF;
 8017e3e:	f06f 0301 	mvn.w	r3, #1
 8017e42:	e081      	b.n	8017f48 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8017e44:	68f8      	ldr	r0, [r7, #12]
 8017e46:	f001 f867 	bl	8018f18 <tcp_next_iss>
 8017e4a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	697a      	ldr	r2, [r7, #20]
 8017e56:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	1e5a      	subs	r2, r3, #1
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8017e60:	697b      	ldr	r3, [r7, #20]
 8017e62:	1e5a      	subs	r2, r3, #1
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	1e5a      	subs	r2, r3, #1
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017e8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017e98:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	3304      	adds	r3, #4
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ea6:	f001 f85d 	bl	8018f64 <tcp_eff_send_mss_netif>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	461a      	mov	r2, r3
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	2201      	movs	r2, #1
 8017eb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	683a      	ldr	r2, [r7, #0]
 8017ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8017ec2:	2102      	movs	r1, #2
 8017ec4:	68f8      	ldr	r0, [r7, #12]
 8017ec6:	f004 fabd 	bl	801c444 <tcp_enqueue_flags>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8017ece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d136      	bne.n	8017f44 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	2202      	movs	r2, #2
 8017eda:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8017edc:	8b7b      	ldrh	r3, [r7, #26]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d021      	beq.n	8017f26 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8017ee2:	4b20      	ldr	r3, [pc, #128]	; (8017f64 <tcp_connect+0x224>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	68fa      	ldr	r2, [r7, #12]
 8017ee8:	429a      	cmp	r2, r3
 8017eea:	d105      	bne.n	8017ef8 <tcp_connect+0x1b8>
 8017eec:	4b1d      	ldr	r3, [pc, #116]	; (8017f64 <tcp_connect+0x224>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	68db      	ldr	r3, [r3, #12]
 8017ef2:	4a1c      	ldr	r2, [pc, #112]	; (8017f64 <tcp_connect+0x224>)
 8017ef4:	6013      	str	r3, [r2, #0]
 8017ef6:	e013      	b.n	8017f20 <tcp_connect+0x1e0>
 8017ef8:	4b1a      	ldr	r3, [pc, #104]	; (8017f64 <tcp_connect+0x224>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	623b      	str	r3, [r7, #32]
 8017efe:	e00c      	b.n	8017f1a <tcp_connect+0x1da>
 8017f00:	6a3b      	ldr	r3, [r7, #32]
 8017f02:	68db      	ldr	r3, [r3, #12]
 8017f04:	68fa      	ldr	r2, [r7, #12]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d104      	bne.n	8017f14 <tcp_connect+0x1d4>
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	68da      	ldr	r2, [r3, #12]
 8017f0e:	6a3b      	ldr	r3, [r7, #32]
 8017f10:	60da      	str	r2, [r3, #12]
 8017f12:	e005      	b.n	8017f20 <tcp_connect+0x1e0>
 8017f14:	6a3b      	ldr	r3, [r7, #32]
 8017f16:	68db      	ldr	r3, [r3, #12]
 8017f18:	623b      	str	r3, [r7, #32]
 8017f1a:	6a3b      	ldr	r3, [r7, #32]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d1ef      	bne.n	8017f00 <tcp_connect+0x1c0>
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	2200      	movs	r2, #0
 8017f24:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8017f26:	4b10      	ldr	r3, [pc, #64]	; (8017f68 <tcp_connect+0x228>)
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	60da      	str	r2, [r3, #12]
 8017f2e:	4a0e      	ldr	r2, [pc, #56]	; (8017f68 <tcp_connect+0x228>)
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	6013      	str	r3, [r2, #0]
 8017f34:	f005 faea 	bl	801d50c <tcp_timer_needed>
 8017f38:	4b0c      	ldr	r3, [pc, #48]	; (8017f6c <tcp_connect+0x22c>)
 8017f3a:	2201      	movs	r2, #1
 8017f3c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8017f3e:	68f8      	ldr	r0, [r7, #12]
 8017f40:	f004 fb6e 	bl	801c620 <tcp_output>
  }
  return ret;
 8017f44:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	3728      	adds	r7, #40	; 0x28
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}
 8017f50:	08026290 	.word	0x08026290
 8017f54:	08026598 	.word	0x08026598
 8017f58:	08026300 	.word	0x08026300
 8017f5c:	080265b4 	.word	0x080265b4
 8017f60:	080265d0 	.word	0x080265d0
 8017f64:	24008844 	.word	0x24008844
 8017f68:	24008838 	.word	0x24008838
 8017f6c:	24008834 	.word	0x24008834

08017f70 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017f70:	b5b0      	push	{r4, r5, r7, lr}
 8017f72:	b090      	sub	sp, #64	; 0x40
 8017f74:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8017f76:	2300      	movs	r3, #0
 8017f78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8017f7c:	4b94      	ldr	r3, [pc, #592]	; (80181d0 <tcp_slowtmr+0x260>)
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	3301      	adds	r3, #1
 8017f82:	4a93      	ldr	r2, [pc, #588]	; (80181d0 <tcp_slowtmr+0x260>)
 8017f84:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8017f86:	4b93      	ldr	r3, [pc, #588]	; (80181d4 <tcp_slowtmr+0x264>)
 8017f88:	781b      	ldrb	r3, [r3, #0]
 8017f8a:	3301      	adds	r3, #1
 8017f8c:	b2da      	uxtb	r2, r3
 8017f8e:	4b91      	ldr	r3, [pc, #580]	; (80181d4 <tcp_slowtmr+0x264>)
 8017f90:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8017f92:	2300      	movs	r3, #0
 8017f94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8017f96:	4b90      	ldr	r3, [pc, #576]	; (80181d8 <tcp_slowtmr+0x268>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8017f9c:	e29d      	b.n	80184da <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8017f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa0:	7d1b      	ldrb	r3, [r3, #20]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d106      	bne.n	8017fb4 <tcp_slowtmr+0x44>
 8017fa6:	4b8d      	ldr	r3, [pc, #564]	; (80181dc <tcp_slowtmr+0x26c>)
 8017fa8:	f240 42be 	movw	r2, #1214	; 0x4be
 8017fac:	498c      	ldr	r1, [pc, #560]	; (80181e0 <tcp_slowtmr+0x270>)
 8017fae:	488d      	ldr	r0, [pc, #564]	; (80181e4 <tcp_slowtmr+0x274>)
 8017fb0:	f008 f828 	bl	8020004 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb6:	7d1b      	ldrb	r3, [r3, #20]
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d106      	bne.n	8017fca <tcp_slowtmr+0x5a>
 8017fbc:	4b87      	ldr	r3, [pc, #540]	; (80181dc <tcp_slowtmr+0x26c>)
 8017fbe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8017fc2:	4989      	ldr	r1, [pc, #548]	; (80181e8 <tcp_slowtmr+0x278>)
 8017fc4:	4887      	ldr	r0, [pc, #540]	; (80181e4 <tcp_slowtmr+0x274>)
 8017fc6:	f008 f81d 	bl	8020004 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8017fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fcc:	7d1b      	ldrb	r3, [r3, #20]
 8017fce:	2b0a      	cmp	r3, #10
 8017fd0:	d106      	bne.n	8017fe0 <tcp_slowtmr+0x70>
 8017fd2:	4b82      	ldr	r3, [pc, #520]	; (80181dc <tcp_slowtmr+0x26c>)
 8017fd4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8017fd8:	4984      	ldr	r1, [pc, #528]	; (80181ec <tcp_slowtmr+0x27c>)
 8017fda:	4882      	ldr	r0, [pc, #520]	; (80181e4 <tcp_slowtmr+0x274>)
 8017fdc:	f008 f812 	bl	8020004 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8017fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe2:	7f9a      	ldrb	r2, [r3, #30]
 8017fe4:	4b7b      	ldr	r3, [pc, #492]	; (80181d4 <tcp_slowtmr+0x264>)
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	429a      	cmp	r2, r3
 8017fea:	d105      	bne.n	8017ff8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8017fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff2:	68db      	ldr	r3, [r3, #12]
 8017ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8017ff6:	e270      	b.n	80184da <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8017ff8:	4b76      	ldr	r3, [pc, #472]	; (80181d4 <tcp_slowtmr+0x264>)
 8017ffa:	781a      	ldrb	r2, [r3, #0]
 8017ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ffe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8018000:	2300      	movs	r3, #0
 8018002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8018006:	2300      	movs	r3, #0
 8018008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801800e:	7d1b      	ldrb	r3, [r3, #20]
 8018010:	2b02      	cmp	r3, #2
 8018012:	d10a      	bne.n	801802a <tcp_slowtmr+0xba>
 8018014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801801a:	2b05      	cmp	r3, #5
 801801c:	d905      	bls.n	801802a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801801e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018022:	3301      	adds	r3, #1
 8018024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018028:	e11e      	b.n	8018268 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018030:	2b0b      	cmp	r3, #11
 8018032:	d905      	bls.n	8018040 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8018034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018038:	3301      	adds	r3, #1
 801803a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801803e:	e113      	b.n	8018268 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8018040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018042:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018046:	2b00      	cmp	r3, #0
 8018048:	d075      	beq.n	8018136 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801804e:	2b00      	cmp	r3, #0
 8018050:	d006      	beq.n	8018060 <tcp_slowtmr+0xf0>
 8018052:	4b62      	ldr	r3, [pc, #392]	; (80181dc <tcp_slowtmr+0x26c>)
 8018054:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8018058:	4965      	ldr	r1, [pc, #404]	; (80181f0 <tcp_slowtmr+0x280>)
 801805a:	4862      	ldr	r0, [pc, #392]	; (80181e4 <tcp_slowtmr+0x274>)
 801805c:	f007 ffd2 	bl	8020004 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8018060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018064:	2b00      	cmp	r3, #0
 8018066:	d106      	bne.n	8018076 <tcp_slowtmr+0x106>
 8018068:	4b5c      	ldr	r3, [pc, #368]	; (80181dc <tcp_slowtmr+0x26c>)
 801806a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801806e:	4961      	ldr	r1, [pc, #388]	; (80181f4 <tcp_slowtmr+0x284>)
 8018070:	485c      	ldr	r0, [pc, #368]	; (80181e4 <tcp_slowtmr+0x274>)
 8018072:	f007 ffc7 	bl	8020004 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8018076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018078:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801807c:	2b0b      	cmp	r3, #11
 801807e:	d905      	bls.n	801808c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8018080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018084:	3301      	adds	r3, #1
 8018086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801808a:	e0ed      	b.n	8018268 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801808e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018092:	3b01      	subs	r3, #1
 8018094:	4a58      	ldr	r2, [pc, #352]	; (80181f8 <tcp_slowtmr+0x288>)
 8018096:	5cd3      	ldrb	r3, [r2, r3]
 8018098:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801809c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80180a0:	7c7a      	ldrb	r2, [r7, #17]
 80180a2:	429a      	cmp	r2, r3
 80180a4:	d907      	bls.n	80180b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80180a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80180ac:	3301      	adds	r3, #1
 80180ae:	b2da      	uxtb	r2, r3
 80180b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80180b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80180bc:	7c7a      	ldrb	r2, [r7, #17]
 80180be:	429a      	cmp	r2, r3
 80180c0:	f200 80d2 	bhi.w	8018268 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80180c4:	2301      	movs	r3, #1
 80180c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80180c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d108      	bne.n	80180e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80180d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80180d4:	f005 f94c 	bl	801d370 <tcp_zero_window_probe>
 80180d8:	4603      	mov	r3, r0
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d014      	beq.n	8018108 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80180de:	2300      	movs	r3, #0
 80180e0:	623b      	str	r3, [r7, #32]
 80180e2:	e011      	b.n	8018108 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80180e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80180ea:	4619      	mov	r1, r3
 80180ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80180ee:	f004 f811 	bl	801c114 <tcp_split_unsent_seg>
 80180f2:	4603      	mov	r3, r0
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d107      	bne.n	8018108 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80180f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80180fa:	f004 fa91 	bl	801c620 <tcp_output>
 80180fe:	4603      	mov	r3, r0
 8018100:	2b00      	cmp	r3, #0
 8018102:	d101      	bne.n	8018108 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8018104:	2300      	movs	r3, #0
 8018106:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8018108:	6a3b      	ldr	r3, [r7, #32]
 801810a:	2b00      	cmp	r3, #0
 801810c:	f000 80ac 	beq.w	8018268 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8018110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018112:	2200      	movs	r2, #0
 8018114:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801811a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801811e:	2b06      	cmp	r3, #6
 8018120:	f200 80a2 	bhi.w	8018268 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8018124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018126:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801812a:	3301      	adds	r3, #1
 801812c:	b2da      	uxtb	r2, r3
 801812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018130:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8018134:	e098      	b.n	8018268 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8018136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018138:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801813c:	2b00      	cmp	r3, #0
 801813e:	db0f      	blt.n	8018160 <tcp_slowtmr+0x1f0>
 8018140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018142:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018146:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801814a:	4293      	cmp	r3, r2
 801814c:	d008      	beq.n	8018160 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018150:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018154:	b29b      	uxth	r3, r3
 8018156:	3301      	adds	r3, #1
 8018158:	b29b      	uxth	r3, r3
 801815a:	b21a      	sxth	r2, r3
 801815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801815e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8018160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018162:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8018166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018168:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801816c:	429a      	cmp	r2, r3
 801816e:	db7b      	blt.n	8018268 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8018170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018172:	f004 fd47 	bl	801cc04 <tcp_rexmit_rto_prepare>
 8018176:	4603      	mov	r3, r0
 8018178:	2b00      	cmp	r3, #0
 801817a:	d007      	beq.n	801818c <tcp_slowtmr+0x21c>
 801817c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801817e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018180:	2b00      	cmp	r3, #0
 8018182:	d171      	bne.n	8018268 <tcp_slowtmr+0x2f8>
 8018184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018188:	2b00      	cmp	r3, #0
 801818a:	d06d      	beq.n	8018268 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801818e:	7d1b      	ldrb	r3, [r3, #20]
 8018190:	2b02      	cmp	r3, #2
 8018192:	d03a      	beq.n	801820a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8018194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801819a:	2b0c      	cmp	r3, #12
 801819c:	bf28      	it	cs
 801819e:	230c      	movcs	r3, #12
 80181a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80181a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80181a8:	10db      	asrs	r3, r3, #3
 80181aa:	b21b      	sxth	r3, r3
 80181ac:	461a      	mov	r2, r3
 80181ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80181b4:	4413      	add	r3, r2
 80181b6:	7efa      	ldrb	r2, [r7, #27]
 80181b8:	4910      	ldr	r1, [pc, #64]	; (80181fc <tcp_slowtmr+0x28c>)
 80181ba:	5c8a      	ldrb	r2, [r1, r2]
 80181bc:	4093      	lsls	r3, r2
 80181be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80181c0:	697b      	ldr	r3, [r7, #20]
 80181c2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80181c6:	4293      	cmp	r3, r2
 80181c8:	dc1a      	bgt.n	8018200 <tcp_slowtmr+0x290>
 80181ca:	697b      	ldr	r3, [r7, #20]
 80181cc:	b21a      	sxth	r2, r3
 80181ce:	e019      	b.n	8018204 <tcp_slowtmr+0x294>
 80181d0:	2400883c 	.word	0x2400883c
 80181d4:	24004e62 	.word	0x24004e62
 80181d8:	24008838 	.word	0x24008838
 80181dc:	08026290 	.word	0x08026290
 80181e0:	08026600 	.word	0x08026600
 80181e4:	08026300 	.word	0x08026300
 80181e8:	0802662c 	.word	0x0802662c
 80181ec:	08026658 	.word	0x08026658
 80181f0:	08026688 	.word	0x08026688
 80181f4:	080266bc 	.word	0x080266bc
 80181f8:	080282fc 	.word	0x080282fc
 80181fc:	080282ec 	.word	0x080282ec
 8018200:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820c:	2200      	movs	r2, #0
 801820e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801821c:	4293      	cmp	r3, r2
 801821e:	bf28      	it	cs
 8018220:	4613      	movcs	r3, r2
 8018222:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8018224:	8a7b      	ldrh	r3, [r7, #18]
 8018226:	085b      	lsrs	r3, r3, #1
 8018228:	b29a      	uxth	r2, r3
 801822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801822c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018232:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801823a:	005b      	lsls	r3, r3, #1
 801823c:	b29b      	uxth	r3, r3
 801823e:	429a      	cmp	r2, r3
 8018240:	d206      	bcs.n	8018250 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8018242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018246:	005b      	lsls	r3, r3, #1
 8018248:	b29a      	uxth	r2, r3
 801824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801824c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8018250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018252:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8018254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018256:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801825c:	2200      	movs	r2, #0
 801825e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8018262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018264:	f004 fd3e 	bl	801cce4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8018268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801826a:	7d1b      	ldrb	r3, [r3, #20]
 801826c:	2b06      	cmp	r3, #6
 801826e:	d111      	bne.n	8018294 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8018270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018272:	8b5b      	ldrh	r3, [r3, #26]
 8018274:	f003 0310 	and.w	r3, r3, #16
 8018278:	2b00      	cmp	r3, #0
 801827a:	d00b      	beq.n	8018294 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801827c:	4b9c      	ldr	r3, [pc, #624]	; (80184f0 <tcp_slowtmr+0x580>)
 801827e:	681a      	ldr	r2, [r3, #0]
 8018280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018282:	6a1b      	ldr	r3, [r3, #32]
 8018284:	1ad3      	subs	r3, r2, r3
 8018286:	2b28      	cmp	r3, #40	; 0x28
 8018288:	d904      	bls.n	8018294 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801828a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801828e:	3301      	adds	r3, #1
 8018290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018296:	7a5b      	ldrb	r3, [r3, #9]
 8018298:	f003 0308 	and.w	r3, r3, #8
 801829c:	2b00      	cmp	r3, #0
 801829e:	d04a      	beq.n	8018336 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80182a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80182a4:	2b04      	cmp	r3, #4
 80182a6:	d003      	beq.n	80182b0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80182a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80182ac:	2b07      	cmp	r3, #7
 80182ae:	d142      	bne.n	8018336 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80182b0:	4b8f      	ldr	r3, [pc, #572]	; (80184f0 <tcp_slowtmr+0x580>)
 80182b2:	681a      	ldr	r2, [r3, #0]
 80182b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182b6:	6a1b      	ldr	r3, [r3, #32]
 80182b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80182ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182bc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80182c0:	4b8c      	ldr	r3, [pc, #560]	; (80184f4 <tcp_slowtmr+0x584>)
 80182c2:	440b      	add	r3, r1
 80182c4:	498c      	ldr	r1, [pc, #560]	; (80184f8 <tcp_slowtmr+0x588>)
 80182c6:	fba1 1303 	umull	r1, r3, r1, r3
 80182ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d90a      	bls.n	80182e6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80182d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80182d4:	3301      	adds	r3, #1
 80182d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80182da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80182de:	3301      	adds	r3, #1
 80182e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80182e4:	e027      	b.n	8018336 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80182e6:	4b82      	ldr	r3, [pc, #520]	; (80184f0 <tcp_slowtmr+0x580>)
 80182e8:	681a      	ldr	r2, [r3, #0]
 80182ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182ec:	6a1b      	ldr	r3, [r3, #32]
 80182ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80182f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80182f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80182fc:	4618      	mov	r0, r3
 80182fe:	4b7f      	ldr	r3, [pc, #508]	; (80184fc <tcp_slowtmr+0x58c>)
 8018300:	fb03 f300 	mul.w	r3, r3, r0
 8018304:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8018306:	497c      	ldr	r1, [pc, #496]	; (80184f8 <tcp_slowtmr+0x588>)
 8018308:	fba1 1303 	umull	r1, r3, r1, r3
 801830c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801830e:	429a      	cmp	r2, r3
 8018310:	d911      	bls.n	8018336 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8018312:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018314:	f004 ffec 	bl	801d2f0 <tcp_keepalive>
 8018318:	4603      	mov	r3, r0
 801831a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801831e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018322:	2b00      	cmp	r3, #0
 8018324:	d107      	bne.n	8018336 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8018326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018328:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801832c:	3301      	adds	r3, #1
 801832e:	b2da      	uxtb	r2, r3
 8018330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018332:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8018336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801833a:	2b00      	cmp	r3, #0
 801833c:	d011      	beq.n	8018362 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801833e:	4b6c      	ldr	r3, [pc, #432]	; (80184f0 <tcp_slowtmr+0x580>)
 8018340:	681a      	ldr	r2, [r3, #0]
 8018342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018344:	6a1b      	ldr	r3, [r3, #32]
 8018346:	1ad2      	subs	r2, r2, r3
 8018348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801834a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801834e:	4619      	mov	r1, r3
 8018350:	460b      	mov	r3, r1
 8018352:	005b      	lsls	r3, r3, #1
 8018354:	440b      	add	r3, r1
 8018356:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8018358:	429a      	cmp	r2, r3
 801835a:	d302      	bcc.n	8018362 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801835c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801835e:	f000 feab 	bl	80190b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8018362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018364:	7d1b      	ldrb	r3, [r3, #20]
 8018366:	2b03      	cmp	r3, #3
 8018368:	d10b      	bne.n	8018382 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801836a:	4b61      	ldr	r3, [pc, #388]	; (80184f0 <tcp_slowtmr+0x580>)
 801836c:	681a      	ldr	r2, [r3, #0]
 801836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018370:	6a1b      	ldr	r3, [r3, #32]
 8018372:	1ad3      	subs	r3, r2, r3
 8018374:	2b28      	cmp	r3, #40	; 0x28
 8018376:	d904      	bls.n	8018382 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8018378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801837c:	3301      	adds	r3, #1
 801837e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8018382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018384:	7d1b      	ldrb	r3, [r3, #20]
 8018386:	2b09      	cmp	r3, #9
 8018388:	d10b      	bne.n	80183a2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801838a:	4b59      	ldr	r3, [pc, #356]	; (80184f0 <tcp_slowtmr+0x580>)
 801838c:	681a      	ldr	r2, [r3, #0]
 801838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018390:	6a1b      	ldr	r3, [r3, #32]
 8018392:	1ad3      	subs	r3, r2, r3
 8018394:	2bf0      	cmp	r3, #240	; 0xf0
 8018396:	d904      	bls.n	80183a2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8018398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801839c:	3301      	adds	r3, #1
 801839e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80183a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d060      	beq.n	801846c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80183aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80183b0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80183b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80183b4:	f000 fccc 	bl	8018d50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80183b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d010      	beq.n	80183e0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80183be:	4b50      	ldr	r3, [pc, #320]	; (8018500 <tcp_slowtmr+0x590>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183c4:	429a      	cmp	r2, r3
 80183c6:	d106      	bne.n	80183d6 <tcp_slowtmr+0x466>
 80183c8:	4b4e      	ldr	r3, [pc, #312]	; (8018504 <tcp_slowtmr+0x594>)
 80183ca:	f240 526d 	movw	r2, #1389	; 0x56d
 80183ce:	494e      	ldr	r1, [pc, #312]	; (8018508 <tcp_slowtmr+0x598>)
 80183d0:	484e      	ldr	r0, [pc, #312]	; (801850c <tcp_slowtmr+0x59c>)
 80183d2:	f007 fe17 	bl	8020004 <iprintf>
        prev->next = pcb->next;
 80183d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183d8:	68da      	ldr	r2, [r3, #12]
 80183da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183dc:	60da      	str	r2, [r3, #12]
 80183de:	e00f      	b.n	8018400 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80183e0:	4b47      	ldr	r3, [pc, #284]	; (8018500 <tcp_slowtmr+0x590>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80183e6:	429a      	cmp	r2, r3
 80183e8:	d006      	beq.n	80183f8 <tcp_slowtmr+0x488>
 80183ea:	4b46      	ldr	r3, [pc, #280]	; (8018504 <tcp_slowtmr+0x594>)
 80183ec:	f240 5271 	movw	r2, #1393	; 0x571
 80183f0:	4947      	ldr	r1, [pc, #284]	; (8018510 <tcp_slowtmr+0x5a0>)
 80183f2:	4846      	ldr	r0, [pc, #280]	; (801850c <tcp_slowtmr+0x59c>)
 80183f4:	f007 fe06 	bl	8020004 <iprintf>
        tcp_active_pcbs = pcb->next;
 80183f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183fa:	68db      	ldr	r3, [r3, #12]
 80183fc:	4a40      	ldr	r2, [pc, #256]	; (8018500 <tcp_slowtmr+0x590>)
 80183fe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8018400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018404:	2b00      	cmp	r3, #0
 8018406:	d013      	beq.n	8018430 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018410:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8018412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018414:	3304      	adds	r3, #4
 8018416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018418:	8ad2      	ldrh	r2, [r2, #22]
 801841a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801841c:	8b09      	ldrh	r1, [r1, #24]
 801841e:	9102      	str	r1, [sp, #8]
 8018420:	9201      	str	r2, [sp, #4]
 8018422:	9300      	str	r3, [sp, #0]
 8018424:	462b      	mov	r3, r5
 8018426:	4622      	mov	r2, r4
 8018428:	4601      	mov	r1, r0
 801842a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801842c:	f004 feac 	bl	801d188 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8018430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018432:	691b      	ldr	r3, [r3, #16]
 8018434:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8018436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018438:	7d1b      	ldrb	r3, [r3, #20]
 801843a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801843e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8018440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018442:	68db      	ldr	r3, [r3, #12]
 8018444:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018446:	6838      	ldr	r0, [r7, #0]
 8018448:	f7fe ff22 	bl	8017290 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801844c:	4b31      	ldr	r3, [pc, #196]	; (8018514 <tcp_slowtmr+0x5a4>)
 801844e:	2200      	movs	r2, #0
 8018450:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d004      	beq.n	8018462 <tcp_slowtmr+0x4f2>
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	f06f 010c 	mvn.w	r1, #12
 801845e:	68b8      	ldr	r0, [r7, #8]
 8018460:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8018462:	4b2c      	ldr	r3, [pc, #176]	; (8018514 <tcp_slowtmr+0x5a4>)
 8018464:	781b      	ldrb	r3, [r3, #0]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d037      	beq.n	80184da <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801846a:	e592      	b.n	8017f92 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801846c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801846e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018472:	68db      	ldr	r3, [r3, #12]
 8018474:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8018476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018478:	7f1b      	ldrb	r3, [r3, #28]
 801847a:	3301      	adds	r3, #1
 801847c:	b2da      	uxtb	r2, r3
 801847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018480:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8018482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018484:	7f1a      	ldrb	r2, [r3, #28]
 8018486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018488:	7f5b      	ldrb	r3, [r3, #29]
 801848a:	429a      	cmp	r2, r3
 801848c:	d325      	bcc.n	80184da <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018490:	2200      	movs	r2, #0
 8018492:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8018494:	4b1f      	ldr	r3, [pc, #124]	; (8018514 <tcp_slowtmr+0x5a4>)
 8018496:	2200      	movs	r2, #0
 8018498:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d00b      	beq.n	80184bc <tcp_slowtmr+0x54c>
 80184a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80184aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184ac:	6912      	ldr	r2, [r2, #16]
 80184ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80184b0:	4610      	mov	r0, r2
 80184b2:	4798      	blx	r3
 80184b4:	4603      	mov	r3, r0
 80184b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80184ba:	e002      	b.n	80184c2 <tcp_slowtmr+0x552>
 80184bc:	2300      	movs	r3, #0
 80184be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80184c2:	4b14      	ldr	r3, [pc, #80]	; (8018514 <tcp_slowtmr+0x5a4>)
 80184c4:	781b      	ldrb	r3, [r3, #0]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d000      	beq.n	80184cc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80184ca:	e562      	b.n	8017f92 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80184cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d102      	bne.n	80184da <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80184d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184d6:	f004 f8a3 	bl	801c620 <tcp_output>
  while (pcb != NULL) {
 80184da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184dc:	2b00      	cmp	r3, #0
 80184de:	f47f ad5e 	bne.w	8017f9e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80184e2:	2300      	movs	r3, #0
 80184e4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80184e6:	4b0c      	ldr	r3, [pc, #48]	; (8018518 <tcp_slowtmr+0x5a8>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80184ec:	e069      	b.n	80185c2 <tcp_slowtmr+0x652>
 80184ee:	bf00      	nop
 80184f0:	2400883c 	.word	0x2400883c
 80184f4:	000a4cb8 	.word	0x000a4cb8
 80184f8:	10624dd3 	.word	0x10624dd3
 80184fc:	000124f8 	.word	0x000124f8
 8018500:	24008838 	.word	0x24008838
 8018504:	08026290 	.word	0x08026290
 8018508:	080266f4 	.word	0x080266f4
 801850c:	08026300 	.word	0x08026300
 8018510:	08026720 	.word	0x08026720
 8018514:	24008834 	.word	0x24008834
 8018518:	24008848 	.word	0x24008848
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801851e:	7d1b      	ldrb	r3, [r3, #20]
 8018520:	2b0a      	cmp	r3, #10
 8018522:	d006      	beq.n	8018532 <tcp_slowtmr+0x5c2>
 8018524:	4b2b      	ldr	r3, [pc, #172]	; (80185d4 <tcp_slowtmr+0x664>)
 8018526:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801852a:	492b      	ldr	r1, [pc, #172]	; (80185d8 <tcp_slowtmr+0x668>)
 801852c:	482b      	ldr	r0, [pc, #172]	; (80185dc <tcp_slowtmr+0x66c>)
 801852e:	f007 fd69 	bl	8020004 <iprintf>
    pcb_remove = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018538:	4b29      	ldr	r3, [pc, #164]	; (80185e0 <tcp_slowtmr+0x670>)
 801853a:	681a      	ldr	r2, [r3, #0]
 801853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853e:	6a1b      	ldr	r3, [r3, #32]
 8018540:	1ad3      	subs	r3, r2, r3
 8018542:	2bf0      	cmp	r3, #240	; 0xf0
 8018544:	d904      	bls.n	8018550 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8018546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801854a:	3301      	adds	r3, #1
 801854c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018554:	2b00      	cmp	r3, #0
 8018556:	d02f      	beq.n	80185b8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8018558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801855a:	f000 fbf9 	bl	8018d50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018560:	2b00      	cmp	r3, #0
 8018562:	d010      	beq.n	8018586 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8018564:	4b1f      	ldr	r3, [pc, #124]	; (80185e4 <tcp_slowtmr+0x674>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801856a:	429a      	cmp	r2, r3
 801856c:	d106      	bne.n	801857c <tcp_slowtmr+0x60c>
 801856e:	4b19      	ldr	r3, [pc, #100]	; (80185d4 <tcp_slowtmr+0x664>)
 8018570:	f240 52af 	movw	r2, #1455	; 0x5af
 8018574:	491c      	ldr	r1, [pc, #112]	; (80185e8 <tcp_slowtmr+0x678>)
 8018576:	4819      	ldr	r0, [pc, #100]	; (80185dc <tcp_slowtmr+0x66c>)
 8018578:	f007 fd44 	bl	8020004 <iprintf>
        prev->next = pcb->next;
 801857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801857e:	68da      	ldr	r2, [r3, #12]
 8018580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018582:	60da      	str	r2, [r3, #12]
 8018584:	e00f      	b.n	80185a6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8018586:	4b17      	ldr	r3, [pc, #92]	; (80185e4 <tcp_slowtmr+0x674>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801858c:	429a      	cmp	r2, r3
 801858e:	d006      	beq.n	801859e <tcp_slowtmr+0x62e>
 8018590:	4b10      	ldr	r3, [pc, #64]	; (80185d4 <tcp_slowtmr+0x664>)
 8018592:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8018596:	4915      	ldr	r1, [pc, #84]	; (80185ec <tcp_slowtmr+0x67c>)
 8018598:	4810      	ldr	r0, [pc, #64]	; (80185dc <tcp_slowtmr+0x66c>)
 801859a:	f007 fd33 	bl	8020004 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185a0:	68db      	ldr	r3, [r3, #12]
 80185a2:	4a10      	ldr	r2, [pc, #64]	; (80185e4 <tcp_slowtmr+0x674>)
 80185a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80185a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80185aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ac:	68db      	ldr	r3, [r3, #12]
 80185ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80185b0:	69f8      	ldr	r0, [r7, #28]
 80185b2:	f7fe fe6d 	bl	8017290 <tcp_free>
 80185b6:	e004      	b.n	80185c2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80185b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80185bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185be:	68db      	ldr	r3, [r3, #12]
 80185c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80185c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d1a9      	bne.n	801851c <tcp_slowtmr+0x5ac>
    }
  }
}
 80185c8:	bf00      	nop
 80185ca:	bf00      	nop
 80185cc:	3730      	adds	r7, #48	; 0x30
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bdb0      	pop	{r4, r5, r7, pc}
 80185d2:	bf00      	nop
 80185d4:	08026290 	.word	0x08026290
 80185d8:	0802674c 	.word	0x0802674c
 80185dc:	08026300 	.word	0x08026300
 80185e0:	2400883c 	.word	0x2400883c
 80185e4:	24008848 	.word	0x24008848
 80185e8:	0802677c 	.word	0x0802677c
 80185ec:	080267a4 	.word	0x080267a4

080185f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b082      	sub	sp, #8
 80185f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80185f6:	4b2d      	ldr	r3, [pc, #180]	; (80186ac <tcp_fasttmr+0xbc>)
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	3301      	adds	r3, #1
 80185fc:	b2da      	uxtb	r2, r3
 80185fe:	4b2b      	ldr	r3, [pc, #172]	; (80186ac <tcp_fasttmr+0xbc>)
 8018600:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8018602:	4b2b      	ldr	r3, [pc, #172]	; (80186b0 <tcp_fasttmr+0xc0>)
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018608:	e048      	b.n	801869c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	7f9a      	ldrb	r2, [r3, #30]
 801860e:	4b27      	ldr	r3, [pc, #156]	; (80186ac <tcp_fasttmr+0xbc>)
 8018610:	781b      	ldrb	r3, [r3, #0]
 8018612:	429a      	cmp	r2, r3
 8018614:	d03f      	beq.n	8018696 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8018616:	4b25      	ldr	r3, [pc, #148]	; (80186ac <tcp_fasttmr+0xbc>)
 8018618:	781a      	ldrb	r2, [r3, #0]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	8b5b      	ldrh	r3, [r3, #26]
 8018622:	f003 0301 	and.w	r3, r3, #1
 8018626:	2b00      	cmp	r3, #0
 8018628:	d010      	beq.n	801864c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	8b5b      	ldrh	r3, [r3, #26]
 801862e:	f043 0302 	orr.w	r3, r3, #2
 8018632:	b29a      	uxth	r2, r3
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8018638:	6878      	ldr	r0, [r7, #4]
 801863a:	f003 fff1 	bl	801c620 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	8b5b      	ldrh	r3, [r3, #26]
 8018642:	f023 0303 	bic.w	r3, r3, #3
 8018646:	b29a      	uxth	r2, r3
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	8b5b      	ldrh	r3, [r3, #26]
 8018650:	f003 0308 	and.w	r3, r3, #8
 8018654:	2b00      	cmp	r3, #0
 8018656:	d009      	beq.n	801866c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	8b5b      	ldrh	r3, [r3, #26]
 801865c:	f023 0308 	bic.w	r3, r3, #8
 8018660:	b29a      	uxth	r2, r3
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	f7fe ffa6 	bl	80175b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	68db      	ldr	r3, [r3, #12]
 8018670:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018676:	2b00      	cmp	r3, #0
 8018678:	d00a      	beq.n	8018690 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801867a:	4b0e      	ldr	r3, [pc, #56]	; (80186b4 <tcp_fasttmr+0xc4>)
 801867c:	2200      	movs	r2, #0
 801867e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8018680:	6878      	ldr	r0, [r7, #4]
 8018682:	f000 f819 	bl	80186b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8018686:	4b0b      	ldr	r3, [pc, #44]	; (80186b4 <tcp_fasttmr+0xc4>)
 8018688:	781b      	ldrb	r3, [r3, #0]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d000      	beq.n	8018690 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801868e:	e7b8      	b.n	8018602 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	607b      	str	r3, [r7, #4]
 8018694:	e002      	b.n	801869c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	68db      	ldr	r3, [r3, #12]
 801869a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d1b3      	bne.n	801860a <tcp_fasttmr+0x1a>
    }
  }
}
 80186a2:	bf00      	nop
 80186a4:	bf00      	nop
 80186a6:	3708      	adds	r7, #8
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd80      	pop	{r7, pc}
 80186ac:	24004e62 	.word	0x24004e62
 80186b0:	24008838 	.word	0x24008838
 80186b4:	24008834 	.word	0x24008834

080186b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80186b8:	b590      	push	{r4, r7, lr}
 80186ba:	b085      	sub	sp, #20
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d109      	bne.n	80186da <tcp_process_refused_data+0x22>
 80186c6:	4b37      	ldr	r3, [pc, #220]	; (80187a4 <tcp_process_refused_data+0xec>)
 80186c8:	f240 6209 	movw	r2, #1545	; 0x609
 80186cc:	4936      	ldr	r1, [pc, #216]	; (80187a8 <tcp_process_refused_data+0xf0>)
 80186ce:	4837      	ldr	r0, [pc, #220]	; (80187ac <tcp_process_refused_data+0xf4>)
 80186d0:	f007 fc98 	bl	8020004 <iprintf>
 80186d4:	f06f 030f 	mvn.w	r3, #15
 80186d8:	e060      	b.n	801879c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186de:	7b5b      	ldrb	r3, [r3, #13]
 80186e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2200      	movs	r2, #0
 80186ec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d00b      	beq.n	8018710 <tcp_process_refused_data+0x58>
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	6918      	ldr	r0, [r3, #16]
 8018702:	2300      	movs	r3, #0
 8018704:	68ba      	ldr	r2, [r7, #8]
 8018706:	6879      	ldr	r1, [r7, #4]
 8018708:	47a0      	blx	r4
 801870a:	4603      	mov	r3, r0
 801870c:	73fb      	strb	r3, [r7, #15]
 801870e:	e007      	b.n	8018720 <tcp_process_refused_data+0x68>
 8018710:	2300      	movs	r3, #0
 8018712:	68ba      	ldr	r2, [r7, #8]
 8018714:	6879      	ldr	r1, [r7, #4]
 8018716:	2000      	movs	r0, #0
 8018718:	f000 f8a4 	bl	8018864 <tcp_recv_null>
 801871c:	4603      	mov	r3, r0
 801871e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8018720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d12a      	bne.n	801877e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018728:	7bbb      	ldrb	r3, [r7, #14]
 801872a:	f003 0320 	and.w	r3, r3, #32
 801872e:	2b00      	cmp	r3, #0
 8018730:	d033      	beq.n	801879a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018736:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801873a:	d005      	beq.n	8018748 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018740:	3301      	adds	r3, #1
 8018742:	b29a      	uxth	r2, r3
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801874e:	2b00      	cmp	r3, #0
 8018750:	d00b      	beq.n	801876a <tcp_process_refused_data+0xb2>
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	6918      	ldr	r0, [r3, #16]
 801875c:	2300      	movs	r3, #0
 801875e:	2200      	movs	r2, #0
 8018760:	6879      	ldr	r1, [r7, #4]
 8018762:	47a0      	blx	r4
 8018764:	4603      	mov	r3, r0
 8018766:	73fb      	strb	r3, [r7, #15]
 8018768:	e001      	b.n	801876e <tcp_process_refused_data+0xb6>
 801876a:	2300      	movs	r3, #0
 801876c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801876e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018772:	f113 0f0d 	cmn.w	r3, #13
 8018776:	d110      	bne.n	801879a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8018778:	f06f 030c 	mvn.w	r3, #12
 801877c:	e00e      	b.n	801879c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801877e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018782:	f113 0f0d 	cmn.w	r3, #13
 8018786:	d102      	bne.n	801878e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8018788:	f06f 030c 	mvn.w	r3, #12
 801878c:	e006      	b.n	801879c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	68ba      	ldr	r2, [r7, #8]
 8018792:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8018794:	f06f 0304 	mvn.w	r3, #4
 8018798:	e000      	b.n	801879c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801879a:	2300      	movs	r3, #0
}
 801879c:	4618      	mov	r0, r3
 801879e:	3714      	adds	r7, #20
 80187a0:	46bd      	mov	sp, r7
 80187a2:	bd90      	pop	{r4, r7, pc}
 80187a4:	08026290 	.word	0x08026290
 80187a8:	080267cc 	.word	0x080267cc
 80187ac:	08026300 	.word	0x08026300

080187b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b084      	sub	sp, #16
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80187b8:	e007      	b.n	80187ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80187c0:	6878      	ldr	r0, [r7, #4]
 80187c2:	f000 f80a 	bl	80187da <tcp_seg_free>
    seg = next;
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d1f4      	bne.n	80187ba <tcp_segs_free+0xa>
  }
}
 80187d0:	bf00      	nop
 80187d2:	bf00      	nop
 80187d4:	3710      	adds	r7, #16
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}

080187da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80187da:	b580      	push	{r7, lr}
 80187dc:	b082      	sub	sp, #8
 80187de:	af00      	add	r7, sp, #0
 80187e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d00c      	beq.n	8018802 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	685b      	ldr	r3, [r3, #4]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d004      	beq.n	80187fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	685b      	ldr	r3, [r3, #4]
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7fe f9f3 	bl	8016be0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80187fa:	6879      	ldr	r1, [r7, #4]
 80187fc:	2003      	movs	r0, #3
 80187fe:	f7fd fb79 	bl	8015ef4 <memp_free>
  }
}
 8018802:	bf00      	nop
 8018804:	3708      	adds	r7, #8
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}
	...

0801880c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b084      	sub	sp, #16
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d106      	bne.n	8018828 <tcp_seg_copy+0x1c>
 801881a:	4b0f      	ldr	r3, [pc, #60]	; (8018858 <tcp_seg_copy+0x4c>)
 801881c:	f240 6282 	movw	r2, #1666	; 0x682
 8018820:	490e      	ldr	r1, [pc, #56]	; (801885c <tcp_seg_copy+0x50>)
 8018822:	480f      	ldr	r0, [pc, #60]	; (8018860 <tcp_seg_copy+0x54>)
 8018824:	f007 fbee 	bl	8020004 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018828:	2003      	movs	r0, #3
 801882a:	f7fd faf3 	bl	8015e14 <memp_malloc>
 801882e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d101      	bne.n	801883a <tcp_seg_copy+0x2e>
    return NULL;
 8018836:	2300      	movs	r3, #0
 8018838:	e00a      	b.n	8018850 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801883a:	2210      	movs	r2, #16
 801883c:	6879      	ldr	r1, [r7, #4]
 801883e:	68f8      	ldr	r0, [r7, #12]
 8018840:	f006 fcbe 	bl	801f1c0 <memcpy>
  pbuf_ref(cseg->p);
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	685b      	ldr	r3, [r3, #4]
 8018848:	4618      	mov	r0, r3
 801884a:	f7fe fa69 	bl	8016d20 <pbuf_ref>
  return cseg;
 801884e:	68fb      	ldr	r3, [r7, #12]
}
 8018850:	4618      	mov	r0, r3
 8018852:	3710      	adds	r7, #16
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}
 8018858:	08026290 	.word	0x08026290
 801885c:	08026810 	.word	0x08026810
 8018860:	08026300 	.word	0x08026300

08018864 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b084      	sub	sp, #16
 8018868:	af00      	add	r7, sp, #0
 801886a:	60f8      	str	r0, [r7, #12]
 801886c:	60b9      	str	r1, [r7, #8]
 801886e:	607a      	str	r2, [r7, #4]
 8018870:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018872:	68bb      	ldr	r3, [r7, #8]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d109      	bne.n	801888c <tcp_recv_null+0x28>
 8018878:	4b12      	ldr	r3, [pc, #72]	; (80188c4 <tcp_recv_null+0x60>)
 801887a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801887e:	4912      	ldr	r1, [pc, #72]	; (80188c8 <tcp_recv_null+0x64>)
 8018880:	4812      	ldr	r0, [pc, #72]	; (80188cc <tcp_recv_null+0x68>)
 8018882:	f007 fbbf 	bl	8020004 <iprintf>
 8018886:	f06f 030f 	mvn.w	r3, #15
 801888a:	e016      	b.n	80188ba <tcp_recv_null+0x56>

  if (p != NULL) {
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d009      	beq.n	80188a6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	891b      	ldrh	r3, [r3, #8]
 8018896:	4619      	mov	r1, r3
 8018898:	68b8      	ldr	r0, [r7, #8]
 801889a:	f7ff f9bb 	bl	8017c14 <tcp_recved>
    pbuf_free(p);
 801889e:	6878      	ldr	r0, [r7, #4]
 80188a0:	f7fe f99e 	bl	8016be0 <pbuf_free>
 80188a4:	e008      	b.n	80188b8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80188a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d104      	bne.n	80188b8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80188ae:	68b8      	ldr	r0, [r7, #8]
 80188b0:	f7fe feec 	bl	801768c <tcp_close>
 80188b4:	4603      	mov	r3, r0
 80188b6:	e000      	b.n	80188ba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80188b8:	2300      	movs	r3, #0
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	3710      	adds	r7, #16
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd80      	pop	{r7, pc}
 80188c2:	bf00      	nop
 80188c4:	08026290 	.word	0x08026290
 80188c8:	0802682c 	.word	0x0802682c
 80188cc:	08026300 	.word	0x08026300

080188d0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b086      	sub	sp, #24
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	4603      	mov	r3, r0
 80188d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80188da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	db01      	blt.n	80188e6 <tcp_kill_prio+0x16>
 80188e2:	79fb      	ldrb	r3, [r7, #7]
 80188e4:	e000      	b.n	80188e8 <tcp_kill_prio+0x18>
 80188e6:	237f      	movs	r3, #127	; 0x7f
 80188e8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80188ea:	7afb      	ldrb	r3, [r7, #11]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d034      	beq.n	801895a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80188f0:	7afb      	ldrb	r3, [r7, #11]
 80188f2:	3b01      	subs	r3, #1
 80188f4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80188f6:	2300      	movs	r3, #0
 80188f8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80188fa:	2300      	movs	r3, #0
 80188fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80188fe:	4b19      	ldr	r3, [pc, #100]	; (8018964 <tcp_kill_prio+0x94>)
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	617b      	str	r3, [r7, #20]
 8018904:	e01f      	b.n	8018946 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	7d5b      	ldrb	r3, [r3, #21]
 801890a:	7afa      	ldrb	r2, [r7, #11]
 801890c:	429a      	cmp	r2, r3
 801890e:	d80c      	bhi.n	801892a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018910:	697b      	ldr	r3, [r7, #20]
 8018912:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8018914:	7afa      	ldrb	r2, [r7, #11]
 8018916:	429a      	cmp	r2, r3
 8018918:	d112      	bne.n	8018940 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801891a:	4b13      	ldr	r3, [pc, #76]	; (8018968 <tcp_kill_prio+0x98>)
 801891c:	681a      	ldr	r2, [r3, #0]
 801891e:	697b      	ldr	r3, [r7, #20]
 8018920:	6a1b      	ldr	r3, [r3, #32]
 8018922:	1ad3      	subs	r3, r2, r3
 8018924:	68fa      	ldr	r2, [r7, #12]
 8018926:	429a      	cmp	r2, r3
 8018928:	d80a      	bhi.n	8018940 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801892a:	4b0f      	ldr	r3, [pc, #60]	; (8018968 <tcp_kill_prio+0x98>)
 801892c:	681a      	ldr	r2, [r3, #0]
 801892e:	697b      	ldr	r3, [r7, #20]
 8018930:	6a1b      	ldr	r3, [r3, #32]
 8018932:	1ad3      	subs	r3, r2, r3
 8018934:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8018936:	697b      	ldr	r3, [r7, #20]
 8018938:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801893a:	697b      	ldr	r3, [r7, #20]
 801893c:	7d5b      	ldrb	r3, [r3, #21]
 801893e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	68db      	ldr	r3, [r3, #12]
 8018944:	617b      	str	r3, [r7, #20]
 8018946:	697b      	ldr	r3, [r7, #20]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d1dc      	bne.n	8018906 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801894c:	693b      	ldr	r3, [r7, #16]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d004      	beq.n	801895c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018952:	6938      	ldr	r0, [r7, #16]
 8018954:	f7fe ff84 	bl	8017860 <tcp_abort>
 8018958:	e000      	b.n	801895c <tcp_kill_prio+0x8c>
    return;
 801895a:	bf00      	nop
  }
}
 801895c:	3718      	adds	r7, #24
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	24008838 	.word	0x24008838
 8018968:	2400883c 	.word	0x2400883c

0801896c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b086      	sub	sp, #24
 8018970:	af00      	add	r7, sp, #0
 8018972:	4603      	mov	r3, r0
 8018974:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8018976:	79fb      	ldrb	r3, [r7, #7]
 8018978:	2b08      	cmp	r3, #8
 801897a:	d009      	beq.n	8018990 <tcp_kill_state+0x24>
 801897c:	79fb      	ldrb	r3, [r7, #7]
 801897e:	2b09      	cmp	r3, #9
 8018980:	d006      	beq.n	8018990 <tcp_kill_state+0x24>
 8018982:	4b1a      	ldr	r3, [pc, #104]	; (80189ec <tcp_kill_state+0x80>)
 8018984:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8018988:	4919      	ldr	r1, [pc, #100]	; (80189f0 <tcp_kill_state+0x84>)
 801898a:	481a      	ldr	r0, [pc, #104]	; (80189f4 <tcp_kill_state+0x88>)
 801898c:	f007 fb3a 	bl	8020004 <iprintf>

  inactivity = 0;
 8018990:	2300      	movs	r3, #0
 8018992:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018994:	2300      	movs	r3, #0
 8018996:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018998:	4b17      	ldr	r3, [pc, #92]	; (80189f8 <tcp_kill_state+0x8c>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	617b      	str	r3, [r7, #20]
 801899e:	e017      	b.n	80189d0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80189a0:	697b      	ldr	r3, [r7, #20]
 80189a2:	7d1b      	ldrb	r3, [r3, #20]
 80189a4:	79fa      	ldrb	r2, [r7, #7]
 80189a6:	429a      	cmp	r2, r3
 80189a8:	d10f      	bne.n	80189ca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80189aa:	4b14      	ldr	r3, [pc, #80]	; (80189fc <tcp_kill_state+0x90>)
 80189ac:	681a      	ldr	r2, [r3, #0]
 80189ae:	697b      	ldr	r3, [r7, #20]
 80189b0:	6a1b      	ldr	r3, [r3, #32]
 80189b2:	1ad3      	subs	r3, r2, r3
 80189b4:	68fa      	ldr	r2, [r7, #12]
 80189b6:	429a      	cmp	r2, r3
 80189b8:	d807      	bhi.n	80189ca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80189ba:	4b10      	ldr	r3, [pc, #64]	; (80189fc <tcp_kill_state+0x90>)
 80189bc:	681a      	ldr	r2, [r3, #0]
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	6a1b      	ldr	r3, [r3, #32]
 80189c2:	1ad3      	subs	r3, r2, r3
 80189c4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80189c6:	697b      	ldr	r3, [r7, #20]
 80189c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80189ca:	697b      	ldr	r3, [r7, #20]
 80189cc:	68db      	ldr	r3, [r3, #12]
 80189ce:	617b      	str	r3, [r7, #20]
 80189d0:	697b      	ldr	r3, [r7, #20]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d1e4      	bne.n	80189a0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80189d6:	693b      	ldr	r3, [r7, #16]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d003      	beq.n	80189e4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80189dc:	2100      	movs	r1, #0
 80189de:	6938      	ldr	r0, [r7, #16]
 80189e0:	f7fe fe80 	bl	80176e4 <tcp_abandon>
  }
}
 80189e4:	bf00      	nop
 80189e6:	3718      	adds	r7, #24
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}
 80189ec:	08026290 	.word	0x08026290
 80189f0:	08026848 	.word	0x08026848
 80189f4:	08026300 	.word	0x08026300
 80189f8:	24008838 	.word	0x24008838
 80189fc:	2400883c 	.word	0x2400883c

08018a00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b084      	sub	sp, #16
 8018a04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8018a06:	2300      	movs	r3, #0
 8018a08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a0e:	4b12      	ldr	r3, [pc, #72]	; (8018a58 <tcp_kill_timewait+0x58>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	60fb      	str	r3, [r7, #12]
 8018a14:	e012      	b.n	8018a3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018a16:	4b11      	ldr	r3, [pc, #68]	; (8018a5c <tcp_kill_timewait+0x5c>)
 8018a18:	681a      	ldr	r2, [r3, #0]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	6a1b      	ldr	r3, [r3, #32]
 8018a1e:	1ad3      	subs	r3, r2, r3
 8018a20:	687a      	ldr	r2, [r7, #4]
 8018a22:	429a      	cmp	r2, r3
 8018a24:	d807      	bhi.n	8018a36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8018a26:	4b0d      	ldr	r3, [pc, #52]	; (8018a5c <tcp_kill_timewait+0x5c>)
 8018a28:	681a      	ldr	r2, [r3, #0]
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	6a1b      	ldr	r3, [r3, #32]
 8018a2e:	1ad3      	subs	r3, r2, r3
 8018a30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	68db      	ldr	r3, [r3, #12]
 8018a3a:	60fb      	str	r3, [r7, #12]
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d1e9      	bne.n	8018a16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d002      	beq.n	8018a4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018a48:	68b8      	ldr	r0, [r7, #8]
 8018a4a:	f7fe ff09 	bl	8017860 <tcp_abort>
  }
}
 8018a4e:	bf00      	nop
 8018a50:	3710      	adds	r7, #16
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bd80      	pop	{r7, pc}
 8018a56:	bf00      	nop
 8018a58:	24008848 	.word	0x24008848
 8018a5c:	2400883c 	.word	0x2400883c

08018a60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b082      	sub	sp, #8
 8018a64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8018a66:	4b10      	ldr	r3, [pc, #64]	; (8018aa8 <tcp_handle_closepend+0x48>)
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018a6c:	e014      	b.n	8018a98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	68db      	ldr	r3, [r3, #12]
 8018a72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	8b5b      	ldrh	r3, [r3, #26]
 8018a78:	f003 0308 	and.w	r3, r3, #8
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d009      	beq.n	8018a94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	8b5b      	ldrh	r3, [r3, #26]
 8018a84:	f023 0308 	bic.w	r3, r3, #8
 8018a88:	b29a      	uxth	r2, r3
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8018a8e:	6878      	ldr	r0, [r7, #4]
 8018a90:	f7fe fd92 	bl	80175b8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8018a94:	683b      	ldr	r3, [r7, #0]
 8018a96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d1e7      	bne.n	8018a6e <tcp_handle_closepend+0xe>
  }
}
 8018a9e:	bf00      	nop
 8018aa0:	bf00      	nop
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	24008838 	.word	0x24008838

08018aac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b084      	sub	sp, #16
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018ab6:	2001      	movs	r0, #1
 8018ab8:	f7fd f9ac 	bl	8015e14 <memp_malloc>
 8018abc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d126      	bne.n	8018b12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8018ac4:	f7ff ffcc 	bl	8018a60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8018ac8:	f7ff ff9a 	bl	8018a00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018acc:	2001      	movs	r0, #1
 8018ace:	f7fd f9a1 	bl	8015e14 <memp_malloc>
 8018ad2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d11b      	bne.n	8018b12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8018ada:	2009      	movs	r0, #9
 8018adc:	f7ff ff46 	bl	801896c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018ae0:	2001      	movs	r0, #1
 8018ae2:	f7fd f997 	bl	8015e14 <memp_malloc>
 8018ae6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d111      	bne.n	8018b12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8018aee:	2008      	movs	r0, #8
 8018af0:	f7ff ff3c 	bl	801896c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018af4:	2001      	movs	r0, #1
 8018af6:	f7fd f98d 	bl	8015e14 <memp_malloc>
 8018afa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d107      	bne.n	8018b12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8018b02:	79fb      	ldrb	r3, [r7, #7]
 8018b04:	4618      	mov	r0, r3
 8018b06:	f7ff fee3 	bl	80188d0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018b0a:	2001      	movs	r0, #1
 8018b0c:	f7fd f982 	bl	8015e14 <memp_malloc>
 8018b10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d03f      	beq.n	8018b98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8018b18:	229c      	movs	r2, #156	; 0x9c
 8018b1a:	2100      	movs	r1, #0
 8018b1c:	68f8      	ldr	r0, [r7, #12]
 8018b1e:	f006 fb77 	bl	801f210 <memset>
    pcb->prio = prio;
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	79fa      	ldrb	r2, [r7, #7]
 8018b26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8018b2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8018b38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	22ff      	movs	r2, #255	; 0xff
 8018b46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018b4e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	2206      	movs	r2, #6
 8018b54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	2206      	movs	r2, #6
 8018b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b64:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	2201      	movs	r2, #1
 8018b6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8018b6e:	4b0d      	ldr	r3, [pc, #52]	; (8018ba4 <tcp_alloc+0xf8>)
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8018b76:	4b0c      	ldr	r3, [pc, #48]	; (8018ba8 <tcp_alloc+0xfc>)
 8018b78:	781a      	ldrb	r2, [r3, #0]
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8018b84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	4a08      	ldr	r2, [pc, #32]	; (8018bac <tcp_alloc+0x100>)
 8018b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	4a07      	ldr	r2, [pc, #28]	; (8018bb0 <tcp_alloc+0x104>)
 8018b94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8018b98:	68fb      	ldr	r3, [r7, #12]
}
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	3710      	adds	r7, #16
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bd80      	pop	{r7, pc}
 8018ba2:	bf00      	nop
 8018ba4:	2400883c 	.word	0x2400883c
 8018ba8:	24004e62 	.word	0x24004e62
 8018bac:	08018865 	.word	0x08018865
 8018bb0:	006ddd00 	.word	0x006ddd00

08018bb4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b084      	sub	sp, #16
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	4603      	mov	r3, r0
 8018bbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8018bbe:	2040      	movs	r0, #64	; 0x40
 8018bc0:	f7ff ff74 	bl	8018aac <tcp_alloc>
 8018bc4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
}
 8018bc8:	4618      	mov	r0, r3
 8018bca:	3710      	adds	r7, #16
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}

08018bd0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8018bd0:	b480      	push	{r7}
 8018bd2:	b083      	sub	sp, #12
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
 8018bd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d002      	beq.n	8018be6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	683a      	ldr	r2, [r7, #0]
 8018be4:	611a      	str	r2, [r3, #16]
  }
}
 8018be6:	bf00      	nop
 8018be8:	370c      	adds	r7, #12
 8018bea:	46bd      	mov	sp, r7
 8018bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf0:	4770      	bx	lr
	...

08018bf4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
 8018bfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d00e      	beq.n	8018c22 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	7d1b      	ldrb	r3, [r3, #20]
 8018c08:	2b01      	cmp	r3, #1
 8018c0a:	d106      	bne.n	8018c1a <tcp_recv+0x26>
 8018c0c:	4b07      	ldr	r3, [pc, #28]	; (8018c2c <tcp_recv+0x38>)
 8018c0e:	f240 72df 	movw	r2, #2015	; 0x7df
 8018c12:	4907      	ldr	r1, [pc, #28]	; (8018c30 <tcp_recv+0x3c>)
 8018c14:	4807      	ldr	r0, [pc, #28]	; (8018c34 <tcp_recv+0x40>)
 8018c16:	f007 f9f5 	bl	8020004 <iprintf>
    pcb->recv = recv;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	683a      	ldr	r2, [r7, #0]
 8018c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8018c22:	bf00      	nop
 8018c24:	3708      	adds	r7, #8
 8018c26:	46bd      	mov	sp, r7
 8018c28:	bd80      	pop	{r7, pc}
 8018c2a:	bf00      	nop
 8018c2c:	08026290 	.word	0x08026290
 8018c30:	08026858 	.word	0x08026858
 8018c34:	08026300 	.word	0x08026300

08018c38 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b082      	sub	sp, #8
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
 8018c40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d00e      	beq.n	8018c66 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	7d1b      	ldrb	r3, [r3, #20]
 8018c4c:	2b01      	cmp	r3, #1
 8018c4e:	d106      	bne.n	8018c5e <tcp_sent+0x26>
 8018c50:	4b07      	ldr	r3, [pc, #28]	; (8018c70 <tcp_sent+0x38>)
 8018c52:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8018c56:	4907      	ldr	r1, [pc, #28]	; (8018c74 <tcp_sent+0x3c>)
 8018c58:	4807      	ldr	r0, [pc, #28]	; (8018c78 <tcp_sent+0x40>)
 8018c5a:	f007 f9d3 	bl	8020004 <iprintf>
    pcb->sent = sent;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	683a      	ldr	r2, [r7, #0]
 8018c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8018c66:	bf00      	nop
 8018c68:	3708      	adds	r7, #8
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	bd80      	pop	{r7, pc}
 8018c6e:	bf00      	nop
 8018c70:	08026290 	.word	0x08026290
 8018c74:	08026880 	.word	0x08026880
 8018c78:	08026300 	.word	0x08026300

08018c7c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
 8018c84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d00e      	beq.n	8018caa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	7d1b      	ldrb	r3, [r3, #20]
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d106      	bne.n	8018ca2 <tcp_err+0x26>
 8018c94:	4b07      	ldr	r3, [pc, #28]	; (8018cb4 <tcp_err+0x38>)
 8018c96:	f640 020d 	movw	r2, #2061	; 0x80d
 8018c9a:	4907      	ldr	r1, [pc, #28]	; (8018cb8 <tcp_err+0x3c>)
 8018c9c:	4807      	ldr	r0, [pc, #28]	; (8018cbc <tcp_err+0x40>)
 8018c9e:	f007 f9b1 	bl	8020004 <iprintf>
    pcb->errf = err;
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	683a      	ldr	r2, [r7, #0]
 8018ca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8018caa:	bf00      	nop
 8018cac:	3708      	adds	r7, #8
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}
 8018cb2:	bf00      	nop
 8018cb4:	08026290 	.word	0x08026290
 8018cb8:	080268a8 	.word	0x080268a8
 8018cbc:	08026300 	.word	0x08026300

08018cc0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b085      	sub	sp, #20
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
 8018cc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d008      	beq.n	8018ce2 <tcp_accept+0x22>
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	7d1b      	ldrb	r3, [r3, #20]
 8018cd4:	2b01      	cmp	r3, #1
 8018cd6:	d104      	bne.n	8018ce2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	683a      	ldr	r2, [r7, #0]
 8018ce0:	619a      	str	r2, [r3, #24]
  }
}
 8018ce2:	bf00      	nop
 8018ce4:	3714      	adds	r7, #20
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cec:	4770      	bx	lr
	...

08018cf0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b084      	sub	sp, #16
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	60f8      	str	r0, [r7, #12]
 8018cf8:	60b9      	str	r1, [r7, #8]
 8018cfa:	4613      	mov	r3, r2
 8018cfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d107      	bne.n	8018d14 <tcp_poll+0x24>
 8018d04:	4b0e      	ldr	r3, [pc, #56]	; (8018d40 <tcp_poll+0x50>)
 8018d06:	f640 023d 	movw	r2, #2109	; 0x83d
 8018d0a:	490e      	ldr	r1, [pc, #56]	; (8018d44 <tcp_poll+0x54>)
 8018d0c:	480e      	ldr	r0, [pc, #56]	; (8018d48 <tcp_poll+0x58>)
 8018d0e:	f007 f979 	bl	8020004 <iprintf>
 8018d12:	e011      	b.n	8018d38 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	7d1b      	ldrb	r3, [r3, #20]
 8018d18:	2b01      	cmp	r3, #1
 8018d1a:	d106      	bne.n	8018d2a <tcp_poll+0x3a>
 8018d1c:	4b08      	ldr	r3, [pc, #32]	; (8018d40 <tcp_poll+0x50>)
 8018d1e:	f640 023e 	movw	r2, #2110	; 0x83e
 8018d22:	490a      	ldr	r1, [pc, #40]	; (8018d4c <tcp_poll+0x5c>)
 8018d24:	4808      	ldr	r0, [pc, #32]	; (8018d48 <tcp_poll+0x58>)
 8018d26:	f007 f96d 	bl	8020004 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	68ba      	ldr	r2, [r7, #8]
 8018d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	79fa      	ldrb	r2, [r7, #7]
 8018d36:	775a      	strb	r2, [r3, #29]
}
 8018d38:	3710      	adds	r7, #16
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	bd80      	pop	{r7, pc}
 8018d3e:	bf00      	nop
 8018d40:	08026290 	.word	0x08026290
 8018d44:	080268d0 	.word	0x080268d0
 8018d48:	08026300 	.word	0x08026300
 8018d4c:	080268e8 	.word	0x080268e8

08018d50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d107      	bne.n	8018d6e <tcp_pcb_purge+0x1e>
 8018d5e:	4b21      	ldr	r3, [pc, #132]	; (8018de4 <tcp_pcb_purge+0x94>)
 8018d60:	f640 0251 	movw	r2, #2129	; 0x851
 8018d64:	4920      	ldr	r1, [pc, #128]	; (8018de8 <tcp_pcb_purge+0x98>)
 8018d66:	4821      	ldr	r0, [pc, #132]	; (8018dec <tcp_pcb_purge+0x9c>)
 8018d68:	f007 f94c 	bl	8020004 <iprintf>
 8018d6c:	e037      	b.n	8018dde <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	7d1b      	ldrb	r3, [r3, #20]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d033      	beq.n	8018dde <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8018d7a:	2b0a      	cmp	r3, #10
 8018d7c:	d02f      	beq.n	8018dde <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8018d82:	2b01      	cmp	r3, #1
 8018d84:	d02b      	beq.n	8018dde <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d007      	beq.n	8018d9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018d92:	4618      	mov	r0, r3
 8018d94:	f7fd ff24 	bl	8016be0 <pbuf_free>
      pcb->refused_data = NULL;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d002      	beq.n	8018dac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8018da6:	6878      	ldr	r0, [r7, #4]
 8018da8:	f000 f986 	bl	80190b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018db2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7ff fcf9 	bl	80187b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f7ff fcf4 	bl	80187b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	66da      	str	r2, [r3, #108]	; 0x6c
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	2200      	movs	r2, #0
 8018dda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}
 8018de4:	08026290 	.word	0x08026290
 8018de8:	08026908 	.word	0x08026908
 8018dec:	08026300 	.word	0x08026300

08018df0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b084      	sub	sp, #16
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8018dfa:	683b      	ldr	r3, [r7, #0]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d106      	bne.n	8018e0e <tcp_pcb_remove+0x1e>
 8018e00:	4b3e      	ldr	r3, [pc, #248]	; (8018efc <tcp_pcb_remove+0x10c>)
 8018e02:	f640 0283 	movw	r2, #2179	; 0x883
 8018e06:	493e      	ldr	r1, [pc, #248]	; (8018f00 <tcp_pcb_remove+0x110>)
 8018e08:	483e      	ldr	r0, [pc, #248]	; (8018f04 <tcp_pcb_remove+0x114>)
 8018e0a:	f007 f8fb 	bl	8020004 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d106      	bne.n	8018e22 <tcp_pcb_remove+0x32>
 8018e14:	4b39      	ldr	r3, [pc, #228]	; (8018efc <tcp_pcb_remove+0x10c>)
 8018e16:	f640 0284 	movw	r2, #2180	; 0x884
 8018e1a:	493b      	ldr	r1, [pc, #236]	; (8018f08 <tcp_pcb_remove+0x118>)
 8018e1c:	4839      	ldr	r0, [pc, #228]	; (8018f04 <tcp_pcb_remove+0x114>)
 8018e1e:	f007 f8f1 	bl	8020004 <iprintf>

  TCP_RMV(pcblist, pcb);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	683a      	ldr	r2, [r7, #0]
 8018e28:	429a      	cmp	r2, r3
 8018e2a:	d105      	bne.n	8018e38 <tcp_pcb_remove+0x48>
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	68da      	ldr	r2, [r3, #12]
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	601a      	str	r2, [r3, #0]
 8018e36:	e013      	b.n	8018e60 <tcp_pcb_remove+0x70>
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	60fb      	str	r3, [r7, #12]
 8018e3e:	e00c      	b.n	8018e5a <tcp_pcb_remove+0x6a>
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	68db      	ldr	r3, [r3, #12]
 8018e44:	683a      	ldr	r2, [r7, #0]
 8018e46:	429a      	cmp	r2, r3
 8018e48:	d104      	bne.n	8018e54 <tcp_pcb_remove+0x64>
 8018e4a:	683b      	ldr	r3, [r7, #0]
 8018e4c:	68da      	ldr	r2, [r3, #12]
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	60da      	str	r2, [r3, #12]
 8018e52:	e005      	b.n	8018e60 <tcp_pcb_remove+0x70>
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	68db      	ldr	r3, [r3, #12]
 8018e58:	60fb      	str	r3, [r7, #12]
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d1ef      	bne.n	8018e40 <tcp_pcb_remove+0x50>
 8018e60:	683b      	ldr	r3, [r7, #0]
 8018e62:	2200      	movs	r2, #0
 8018e64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8018e66:	6838      	ldr	r0, [r7, #0]
 8018e68:	f7ff ff72 	bl	8018d50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	7d1b      	ldrb	r3, [r3, #20]
 8018e70:	2b0a      	cmp	r3, #10
 8018e72:	d013      	beq.n	8018e9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8018e78:	2b01      	cmp	r3, #1
 8018e7a:	d00f      	beq.n	8018e9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	8b5b      	ldrh	r3, [r3, #26]
 8018e80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d009      	beq.n	8018e9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	8b5b      	ldrh	r3, [r3, #26]
 8018e8c:	f043 0302 	orr.w	r3, r3, #2
 8018e90:	b29a      	uxth	r2, r3
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018e96:	6838      	ldr	r0, [r7, #0]
 8018e98:	f003 fbc2 	bl	801c620 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8018e9c:	683b      	ldr	r3, [r7, #0]
 8018e9e:	7d1b      	ldrb	r3, [r3, #20]
 8018ea0:	2b01      	cmp	r3, #1
 8018ea2:	d020      	beq.n	8018ee6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8018ea4:	683b      	ldr	r3, [r7, #0]
 8018ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d006      	beq.n	8018eba <tcp_pcb_remove+0xca>
 8018eac:	4b13      	ldr	r3, [pc, #76]	; (8018efc <tcp_pcb_remove+0x10c>)
 8018eae:	f640 0293 	movw	r2, #2195	; 0x893
 8018eb2:	4916      	ldr	r1, [pc, #88]	; (8018f0c <tcp_pcb_remove+0x11c>)
 8018eb4:	4813      	ldr	r0, [pc, #76]	; (8018f04 <tcp_pcb_remove+0x114>)
 8018eb6:	f007 f8a5 	bl	8020004 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d006      	beq.n	8018ed0 <tcp_pcb_remove+0xe0>
 8018ec2:	4b0e      	ldr	r3, [pc, #56]	; (8018efc <tcp_pcb_remove+0x10c>)
 8018ec4:	f640 0294 	movw	r2, #2196	; 0x894
 8018ec8:	4911      	ldr	r1, [pc, #68]	; (8018f10 <tcp_pcb_remove+0x120>)
 8018eca:	480e      	ldr	r0, [pc, #56]	; (8018f04 <tcp_pcb_remove+0x114>)
 8018ecc:	f007 f89a 	bl	8020004 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8018ed0:	683b      	ldr	r3, [r7, #0]
 8018ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d006      	beq.n	8018ee6 <tcp_pcb_remove+0xf6>
 8018ed8:	4b08      	ldr	r3, [pc, #32]	; (8018efc <tcp_pcb_remove+0x10c>)
 8018eda:	f640 0296 	movw	r2, #2198	; 0x896
 8018ede:	490d      	ldr	r1, [pc, #52]	; (8018f14 <tcp_pcb_remove+0x124>)
 8018ee0:	4808      	ldr	r0, [pc, #32]	; (8018f04 <tcp_pcb_remove+0x114>)
 8018ee2:	f007 f88f 	bl	8020004 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	2200      	movs	r2, #0
 8018eea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8018ef2:	bf00      	nop
 8018ef4:	3710      	adds	r7, #16
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}
 8018efa:	bf00      	nop
 8018efc:	08026290 	.word	0x08026290
 8018f00:	08026924 	.word	0x08026924
 8018f04:	08026300 	.word	0x08026300
 8018f08:	08026940 	.word	0x08026940
 8018f0c:	08026960 	.word	0x08026960
 8018f10:	08026978 	.word	0x08026978
 8018f14:	08026994 	.word	0x08026994

08018f18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b082      	sub	sp, #8
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d106      	bne.n	8018f34 <tcp_next_iss+0x1c>
 8018f26:	4b0a      	ldr	r3, [pc, #40]	; (8018f50 <tcp_next_iss+0x38>)
 8018f28:	f640 02af 	movw	r2, #2223	; 0x8af
 8018f2c:	4909      	ldr	r1, [pc, #36]	; (8018f54 <tcp_next_iss+0x3c>)
 8018f2e:	480a      	ldr	r0, [pc, #40]	; (8018f58 <tcp_next_iss+0x40>)
 8018f30:	f007 f868 	bl	8020004 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8018f34:	4b09      	ldr	r3, [pc, #36]	; (8018f5c <tcp_next_iss+0x44>)
 8018f36:	681a      	ldr	r2, [r3, #0]
 8018f38:	4b09      	ldr	r3, [pc, #36]	; (8018f60 <tcp_next_iss+0x48>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	4413      	add	r3, r2
 8018f3e:	4a07      	ldr	r2, [pc, #28]	; (8018f5c <tcp_next_iss+0x44>)
 8018f40:	6013      	str	r3, [r2, #0]
  return iss;
 8018f42:	4b06      	ldr	r3, [pc, #24]	; (8018f5c <tcp_next_iss+0x44>)
 8018f44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8018f46:	4618      	mov	r0, r3
 8018f48:	3708      	adds	r7, #8
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}
 8018f4e:	bf00      	nop
 8018f50:	08026290 	.word	0x08026290
 8018f54:	080269ac 	.word	0x080269ac
 8018f58:	08026300 	.word	0x08026300
 8018f5c:	24000028 	.word	0x24000028
 8018f60:	2400883c 	.word	0x2400883c

08018f64 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b086      	sub	sp, #24
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	60b9      	str	r1, [r7, #8]
 8018f6e:	607a      	str	r2, [r7, #4]
 8018f70:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d106      	bne.n	8018f86 <tcp_eff_send_mss_netif+0x22>
 8018f78:	4b14      	ldr	r3, [pc, #80]	; (8018fcc <tcp_eff_send_mss_netif+0x68>)
 8018f7a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8018f7e:	4914      	ldr	r1, [pc, #80]	; (8018fd0 <tcp_eff_send_mss_netif+0x6c>)
 8018f80:	4814      	ldr	r0, [pc, #80]	; (8018fd4 <tcp_eff_send_mss_netif+0x70>)
 8018f82:	f007 f83f 	bl	8020004 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8018f86:	68bb      	ldr	r3, [r7, #8]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d101      	bne.n	8018f90 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8018f8c:	89fb      	ldrh	r3, [r7, #14]
 8018f8e:	e019      	b.n	8018fc4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8018f90:	68bb      	ldr	r3, [r7, #8]
 8018f92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018f94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8018f96:	8afb      	ldrh	r3, [r7, #22]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d012      	beq.n	8018fc2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8018f9c:	2328      	movs	r3, #40	; 0x28
 8018f9e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8018fa0:	8afa      	ldrh	r2, [r7, #22]
 8018fa2:	8abb      	ldrh	r3, [r7, #20]
 8018fa4:	429a      	cmp	r2, r3
 8018fa6:	d904      	bls.n	8018fb2 <tcp_eff_send_mss_netif+0x4e>
 8018fa8:	8afa      	ldrh	r2, [r7, #22]
 8018faa:	8abb      	ldrh	r3, [r7, #20]
 8018fac:	1ad3      	subs	r3, r2, r3
 8018fae:	b29b      	uxth	r3, r3
 8018fb0:	e000      	b.n	8018fb4 <tcp_eff_send_mss_netif+0x50>
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8018fb6:	8a7a      	ldrh	r2, [r7, #18]
 8018fb8:	89fb      	ldrh	r3, [r7, #14]
 8018fba:	4293      	cmp	r3, r2
 8018fbc:	bf28      	it	cs
 8018fbe:	4613      	movcs	r3, r2
 8018fc0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8018fc2:	89fb      	ldrh	r3, [r7, #14]
}
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	3718      	adds	r7, #24
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	bd80      	pop	{r7, pc}
 8018fcc:	08026290 	.word	0x08026290
 8018fd0:	080269c8 	.word	0x080269c8
 8018fd4:	08026300 	.word	0x08026300

08018fd8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b084      	sub	sp, #16
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
 8018fe0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8018fe2:	683b      	ldr	r3, [r7, #0]
 8018fe4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d119      	bne.n	8019020 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018fec:	4b10      	ldr	r3, [pc, #64]	; (8019030 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8018fee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8018ff2:	4910      	ldr	r1, [pc, #64]	; (8019034 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8018ff4:	4810      	ldr	r0, [pc, #64]	; (8019038 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8018ff6:	f007 f805 	bl	8020004 <iprintf>

  while (pcb != NULL) {
 8018ffa:	e011      	b.n	8019020 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	681a      	ldr	r2, [r3, #0]
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	429a      	cmp	r2, r3
 8019006:	d108      	bne.n	801901a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	68db      	ldr	r3, [r3, #12]
 801900c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801900e:	68f8      	ldr	r0, [r7, #12]
 8019010:	f7fe fc26 	bl	8017860 <tcp_abort>
      pcb = next;
 8019014:	68bb      	ldr	r3, [r7, #8]
 8019016:	60fb      	str	r3, [r7, #12]
 8019018:	e002      	b.n	8019020 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	68db      	ldr	r3, [r3, #12]
 801901e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d1ea      	bne.n	8018ffc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8019026:	bf00      	nop
 8019028:	bf00      	nop
 801902a:	3710      	adds	r7, #16
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}
 8019030:	08026290 	.word	0x08026290
 8019034:	080269f0 	.word	0x080269f0
 8019038:	08026300 	.word	0x08026300

0801903c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b084      	sub	sp, #16
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d02a      	beq.n	80190a2 <tcp_netif_ip_addr_changed+0x66>
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d026      	beq.n	80190a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019054:	4b15      	ldr	r3, [pc, #84]	; (80190ac <tcp_netif_ip_addr_changed+0x70>)
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	4619      	mov	r1, r3
 801905a:	6878      	ldr	r0, [r7, #4]
 801905c:	f7ff ffbc 	bl	8018fd8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8019060:	4b13      	ldr	r3, [pc, #76]	; (80190b0 <tcp_netif_ip_addr_changed+0x74>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	4619      	mov	r1, r3
 8019066:	6878      	ldr	r0, [r7, #4]
 8019068:	f7ff ffb6 	bl	8018fd8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801906c:	683b      	ldr	r3, [r7, #0]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d017      	beq.n	80190a2 <tcp_netif_ip_addr_changed+0x66>
 8019072:	683b      	ldr	r3, [r7, #0]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d013      	beq.n	80190a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801907a:	4b0e      	ldr	r3, [pc, #56]	; (80190b4 <tcp_netif_ip_addr_changed+0x78>)
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	60fb      	str	r3, [r7, #12]
 8019080:	e00c      	b.n	801909c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	681a      	ldr	r2, [r3, #0]
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	429a      	cmp	r2, r3
 801908c:	d103      	bne.n	8019096 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	681a      	ldr	r2, [r3, #0]
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	68db      	ldr	r3, [r3, #12]
 801909a:	60fb      	str	r3, [r7, #12]
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d1ef      	bne.n	8019082 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80190a2:	bf00      	nop
 80190a4:	3710      	adds	r7, #16
 80190a6:	46bd      	mov	sp, r7
 80190a8:	bd80      	pop	{r7, pc}
 80190aa:	bf00      	nop
 80190ac:	24008838 	.word	0x24008838
 80190b0:	24008844 	.word	0x24008844
 80190b4:	24008840 	.word	0x24008840

080190b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b082      	sub	sp, #8
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d007      	beq.n	80190d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80190cc:	4618      	mov	r0, r3
 80190ce:	f7ff fb6f 	bl	80187b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	2200      	movs	r2, #0
 80190d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80190d8:	bf00      	nop
 80190da:	3708      	adds	r7, #8
 80190dc:	46bd      	mov	sp, r7
 80190de:	bd80      	pop	{r7, pc}

080190e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80190e0:	b590      	push	{r4, r7, lr}
 80190e2:	b08d      	sub	sp, #52	; 0x34
 80190e4:	af04      	add	r7, sp, #16
 80190e6:	6078      	str	r0, [r7, #4]
 80190e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d105      	bne.n	80190fc <tcp_input+0x1c>
 80190f0:	4b9b      	ldr	r3, [pc, #620]	; (8019360 <tcp_input+0x280>)
 80190f2:	2283      	movs	r2, #131	; 0x83
 80190f4:	499b      	ldr	r1, [pc, #620]	; (8019364 <tcp_input+0x284>)
 80190f6:	489c      	ldr	r0, [pc, #624]	; (8019368 <tcp_input+0x288>)
 80190f8:	f006 ff84 	bl	8020004 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	685b      	ldr	r3, [r3, #4]
 8019100:	4a9a      	ldr	r2, [pc, #616]	; (801936c <tcp_input+0x28c>)
 8019102:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	895b      	ldrh	r3, [r3, #10]
 8019108:	2b13      	cmp	r3, #19
 801910a:	f240 83c4 	bls.w	8019896 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801910e:	4b98      	ldr	r3, [pc, #608]	; (8019370 <tcp_input+0x290>)
 8019110:	695b      	ldr	r3, [r3, #20]
 8019112:	4a97      	ldr	r2, [pc, #604]	; (8019370 <tcp_input+0x290>)
 8019114:	6812      	ldr	r2, [r2, #0]
 8019116:	4611      	mov	r1, r2
 8019118:	4618      	mov	r0, r3
 801911a:	f7fb fbd1 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 801911e:	4603      	mov	r3, r0
 8019120:	2b00      	cmp	r3, #0
 8019122:	f040 83ba 	bne.w	801989a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8019126:	4b92      	ldr	r3, [pc, #584]	; (8019370 <tcp_input+0x290>)
 8019128:	695b      	ldr	r3, [r3, #20]
 801912a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801912e:	2be0      	cmp	r3, #224	; 0xe0
 8019130:	f000 83b3 	beq.w	801989a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019134:	4b8d      	ldr	r3, [pc, #564]	; (801936c <tcp_input+0x28c>)
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	899b      	ldrh	r3, [r3, #12]
 801913a:	b29b      	uxth	r3, r3
 801913c:	4618      	mov	r0, r3
 801913e:	f7f9 fe53 	bl	8012de8 <lwip_htons>
 8019142:	4603      	mov	r3, r0
 8019144:	0b1b      	lsrs	r3, r3, #12
 8019146:	b29b      	uxth	r3, r3
 8019148:	b2db      	uxtb	r3, r3
 801914a:	009b      	lsls	r3, r3, #2
 801914c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801914e:	7cbb      	ldrb	r3, [r7, #18]
 8019150:	2b13      	cmp	r3, #19
 8019152:	f240 83a4 	bls.w	801989e <tcp_input+0x7be>
 8019156:	7cbb      	ldrb	r3, [r7, #18]
 8019158:	b29a      	uxth	r2, r3
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	891b      	ldrh	r3, [r3, #8]
 801915e:	429a      	cmp	r2, r3
 8019160:	f200 839d 	bhi.w	801989e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019164:	7cbb      	ldrb	r3, [r7, #18]
 8019166:	b29b      	uxth	r3, r3
 8019168:	3b14      	subs	r3, #20
 801916a:	b29a      	uxth	r2, r3
 801916c:	4b81      	ldr	r3, [pc, #516]	; (8019374 <tcp_input+0x294>)
 801916e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8019170:	4b81      	ldr	r3, [pc, #516]	; (8019378 <tcp_input+0x298>)
 8019172:	2200      	movs	r2, #0
 8019174:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	895a      	ldrh	r2, [r3, #10]
 801917a:	7cbb      	ldrb	r3, [r7, #18]
 801917c:	b29b      	uxth	r3, r3
 801917e:	429a      	cmp	r2, r3
 8019180:	d309      	bcc.n	8019196 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8019182:	4b7c      	ldr	r3, [pc, #496]	; (8019374 <tcp_input+0x294>)
 8019184:	881a      	ldrh	r2, [r3, #0]
 8019186:	4b7d      	ldr	r3, [pc, #500]	; (801937c <tcp_input+0x29c>)
 8019188:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801918a:	7cbb      	ldrb	r3, [r7, #18]
 801918c:	4619      	mov	r1, r3
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f7fd fca0 	bl	8016ad4 <pbuf_remove_header>
 8019194:	e04e      	b.n	8019234 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d105      	bne.n	80191aa <tcp_input+0xca>
 801919e:	4b70      	ldr	r3, [pc, #448]	; (8019360 <tcp_input+0x280>)
 80191a0:	22c2      	movs	r2, #194	; 0xc2
 80191a2:	4977      	ldr	r1, [pc, #476]	; (8019380 <tcp_input+0x2a0>)
 80191a4:	4870      	ldr	r0, [pc, #448]	; (8019368 <tcp_input+0x288>)
 80191a6:	f006 ff2d 	bl	8020004 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80191aa:	2114      	movs	r1, #20
 80191ac:	6878      	ldr	r0, [r7, #4]
 80191ae:	f7fd fc91 	bl	8016ad4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	895a      	ldrh	r2, [r3, #10]
 80191b6:	4b71      	ldr	r3, [pc, #452]	; (801937c <tcp_input+0x29c>)
 80191b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80191ba:	4b6e      	ldr	r3, [pc, #440]	; (8019374 <tcp_input+0x294>)
 80191bc:	881a      	ldrh	r2, [r3, #0]
 80191be:	4b6f      	ldr	r3, [pc, #444]	; (801937c <tcp_input+0x29c>)
 80191c0:	881b      	ldrh	r3, [r3, #0]
 80191c2:	1ad3      	subs	r3, r2, r3
 80191c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80191c6:	4b6d      	ldr	r3, [pc, #436]	; (801937c <tcp_input+0x29c>)
 80191c8:	881b      	ldrh	r3, [r3, #0]
 80191ca:	4619      	mov	r1, r3
 80191cc:	6878      	ldr	r0, [r7, #4]
 80191ce:	f7fd fc81 	bl	8016ad4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	895b      	ldrh	r3, [r3, #10]
 80191d8:	8a3a      	ldrh	r2, [r7, #16]
 80191da:	429a      	cmp	r2, r3
 80191dc:	f200 8361 	bhi.w	80198a2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	685b      	ldr	r3, [r3, #4]
 80191e6:	4a64      	ldr	r2, [pc, #400]	; (8019378 <tcp_input+0x298>)
 80191e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	8a3a      	ldrh	r2, [r7, #16]
 80191f0:	4611      	mov	r1, r2
 80191f2:	4618      	mov	r0, r3
 80191f4:	f7fd fc6e 	bl	8016ad4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	891a      	ldrh	r2, [r3, #8]
 80191fc:	8a3b      	ldrh	r3, [r7, #16]
 80191fe:	1ad3      	subs	r3, r2, r3
 8019200:	b29a      	uxth	r2, r3
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	895b      	ldrh	r3, [r3, #10]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d005      	beq.n	801921a <tcp_input+0x13a>
 801920e:	4b54      	ldr	r3, [pc, #336]	; (8019360 <tcp_input+0x280>)
 8019210:	22df      	movs	r2, #223	; 0xdf
 8019212:	495c      	ldr	r1, [pc, #368]	; (8019384 <tcp_input+0x2a4>)
 8019214:	4854      	ldr	r0, [pc, #336]	; (8019368 <tcp_input+0x288>)
 8019216:	f006 fef5 	bl	8020004 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	891a      	ldrh	r2, [r3, #8]
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	891b      	ldrh	r3, [r3, #8]
 8019224:	429a      	cmp	r2, r3
 8019226:	d005      	beq.n	8019234 <tcp_input+0x154>
 8019228:	4b4d      	ldr	r3, [pc, #308]	; (8019360 <tcp_input+0x280>)
 801922a:	22e0      	movs	r2, #224	; 0xe0
 801922c:	4956      	ldr	r1, [pc, #344]	; (8019388 <tcp_input+0x2a8>)
 801922e:	484e      	ldr	r0, [pc, #312]	; (8019368 <tcp_input+0x288>)
 8019230:	f006 fee8 	bl	8020004 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8019234:	4b4d      	ldr	r3, [pc, #308]	; (801936c <tcp_input+0x28c>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	881b      	ldrh	r3, [r3, #0]
 801923a:	b29b      	uxth	r3, r3
 801923c:	4a4b      	ldr	r2, [pc, #300]	; (801936c <tcp_input+0x28c>)
 801923e:	6814      	ldr	r4, [r2, #0]
 8019240:	4618      	mov	r0, r3
 8019242:	f7f9 fdd1 	bl	8012de8 <lwip_htons>
 8019246:	4603      	mov	r3, r0
 8019248:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801924a:	4b48      	ldr	r3, [pc, #288]	; (801936c <tcp_input+0x28c>)
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	885b      	ldrh	r3, [r3, #2]
 8019250:	b29b      	uxth	r3, r3
 8019252:	4a46      	ldr	r2, [pc, #280]	; (801936c <tcp_input+0x28c>)
 8019254:	6814      	ldr	r4, [r2, #0]
 8019256:	4618      	mov	r0, r3
 8019258:	f7f9 fdc6 	bl	8012de8 <lwip_htons>
 801925c:	4603      	mov	r3, r0
 801925e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8019260:	4b42      	ldr	r3, [pc, #264]	; (801936c <tcp_input+0x28c>)
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	685b      	ldr	r3, [r3, #4]
 8019266:	4a41      	ldr	r2, [pc, #260]	; (801936c <tcp_input+0x28c>)
 8019268:	6814      	ldr	r4, [r2, #0]
 801926a:	4618      	mov	r0, r3
 801926c:	f7f9 fdd1 	bl	8012e12 <lwip_htonl>
 8019270:	4603      	mov	r3, r0
 8019272:	6063      	str	r3, [r4, #4]
 8019274:	6863      	ldr	r3, [r4, #4]
 8019276:	4a45      	ldr	r2, [pc, #276]	; (801938c <tcp_input+0x2ac>)
 8019278:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801927a:	4b3c      	ldr	r3, [pc, #240]	; (801936c <tcp_input+0x28c>)
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	689b      	ldr	r3, [r3, #8]
 8019280:	4a3a      	ldr	r2, [pc, #232]	; (801936c <tcp_input+0x28c>)
 8019282:	6814      	ldr	r4, [r2, #0]
 8019284:	4618      	mov	r0, r3
 8019286:	f7f9 fdc4 	bl	8012e12 <lwip_htonl>
 801928a:	4603      	mov	r3, r0
 801928c:	60a3      	str	r3, [r4, #8]
 801928e:	68a3      	ldr	r3, [r4, #8]
 8019290:	4a3f      	ldr	r2, [pc, #252]	; (8019390 <tcp_input+0x2b0>)
 8019292:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8019294:	4b35      	ldr	r3, [pc, #212]	; (801936c <tcp_input+0x28c>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	89db      	ldrh	r3, [r3, #14]
 801929a:	b29b      	uxth	r3, r3
 801929c:	4a33      	ldr	r2, [pc, #204]	; (801936c <tcp_input+0x28c>)
 801929e:	6814      	ldr	r4, [r2, #0]
 80192a0:	4618      	mov	r0, r3
 80192a2:	f7f9 fda1 	bl	8012de8 <lwip_htons>
 80192a6:	4603      	mov	r3, r0
 80192a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80192aa:	4b30      	ldr	r3, [pc, #192]	; (801936c <tcp_input+0x28c>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	899b      	ldrh	r3, [r3, #12]
 80192b0:	b29b      	uxth	r3, r3
 80192b2:	4618      	mov	r0, r3
 80192b4:	f7f9 fd98 	bl	8012de8 <lwip_htons>
 80192b8:	4603      	mov	r3, r0
 80192ba:	b2db      	uxtb	r3, r3
 80192bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80192c0:	b2da      	uxtb	r2, r3
 80192c2:	4b34      	ldr	r3, [pc, #208]	; (8019394 <tcp_input+0x2b4>)
 80192c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	891a      	ldrh	r2, [r3, #8]
 80192ca:	4b33      	ldr	r3, [pc, #204]	; (8019398 <tcp_input+0x2b8>)
 80192cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80192ce:	4b31      	ldr	r3, [pc, #196]	; (8019394 <tcp_input+0x2b4>)
 80192d0:	781b      	ldrb	r3, [r3, #0]
 80192d2:	f003 0303 	and.w	r3, r3, #3
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d00c      	beq.n	80192f4 <tcp_input+0x214>
    tcplen++;
 80192da:	4b2f      	ldr	r3, [pc, #188]	; (8019398 <tcp_input+0x2b8>)
 80192dc:	881b      	ldrh	r3, [r3, #0]
 80192de:	3301      	adds	r3, #1
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	4b2d      	ldr	r3, [pc, #180]	; (8019398 <tcp_input+0x2b8>)
 80192e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	891a      	ldrh	r2, [r3, #8]
 80192ea:	4b2b      	ldr	r3, [pc, #172]	; (8019398 <tcp_input+0x2b8>)
 80192ec:	881b      	ldrh	r3, [r3, #0]
 80192ee:	429a      	cmp	r2, r3
 80192f0:	f200 82d9 	bhi.w	80198a6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80192f4:	2300      	movs	r3, #0
 80192f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80192f8:	4b28      	ldr	r3, [pc, #160]	; (801939c <tcp_input+0x2bc>)
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	61fb      	str	r3, [r7, #28]
 80192fe:	e09d      	b.n	801943c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8019300:	69fb      	ldr	r3, [r7, #28]
 8019302:	7d1b      	ldrb	r3, [r3, #20]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d105      	bne.n	8019314 <tcp_input+0x234>
 8019308:	4b15      	ldr	r3, [pc, #84]	; (8019360 <tcp_input+0x280>)
 801930a:	22fb      	movs	r2, #251	; 0xfb
 801930c:	4924      	ldr	r1, [pc, #144]	; (80193a0 <tcp_input+0x2c0>)
 801930e:	4816      	ldr	r0, [pc, #88]	; (8019368 <tcp_input+0x288>)
 8019310:	f006 fe78 	bl	8020004 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8019314:	69fb      	ldr	r3, [r7, #28]
 8019316:	7d1b      	ldrb	r3, [r3, #20]
 8019318:	2b0a      	cmp	r3, #10
 801931a:	d105      	bne.n	8019328 <tcp_input+0x248>
 801931c:	4b10      	ldr	r3, [pc, #64]	; (8019360 <tcp_input+0x280>)
 801931e:	22fc      	movs	r2, #252	; 0xfc
 8019320:	4920      	ldr	r1, [pc, #128]	; (80193a4 <tcp_input+0x2c4>)
 8019322:	4811      	ldr	r0, [pc, #68]	; (8019368 <tcp_input+0x288>)
 8019324:	f006 fe6e 	bl	8020004 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8019328:	69fb      	ldr	r3, [r7, #28]
 801932a:	7d1b      	ldrb	r3, [r3, #20]
 801932c:	2b01      	cmp	r3, #1
 801932e:	d105      	bne.n	801933c <tcp_input+0x25c>
 8019330:	4b0b      	ldr	r3, [pc, #44]	; (8019360 <tcp_input+0x280>)
 8019332:	22fd      	movs	r2, #253	; 0xfd
 8019334:	491c      	ldr	r1, [pc, #112]	; (80193a8 <tcp_input+0x2c8>)
 8019336:	480c      	ldr	r0, [pc, #48]	; (8019368 <tcp_input+0x288>)
 8019338:	f006 fe64 	bl	8020004 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801933c:	69fb      	ldr	r3, [r7, #28]
 801933e:	7a1b      	ldrb	r3, [r3, #8]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d033      	beq.n	80193ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019344:	69fb      	ldr	r3, [r7, #28]
 8019346:	7a1a      	ldrb	r2, [r3, #8]
 8019348:	4b09      	ldr	r3, [pc, #36]	; (8019370 <tcp_input+0x290>)
 801934a:	685b      	ldr	r3, [r3, #4]
 801934c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019350:	3301      	adds	r3, #1
 8019352:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019354:	429a      	cmp	r2, r3
 8019356:	d029      	beq.n	80193ac <tcp_input+0x2cc>
      prev = pcb;
 8019358:	69fb      	ldr	r3, [r7, #28]
 801935a:	61bb      	str	r3, [r7, #24]
      continue;
 801935c:	e06b      	b.n	8019436 <tcp_input+0x356>
 801935e:	bf00      	nop
 8019360:	08026a24 	.word	0x08026a24
 8019364:	08026a84 	.word	0x08026a84
 8019368:	08026a9c 	.word	0x08026a9c
 801936c:	24004e74 	.word	0x24004e74
 8019370:	24005948 	.word	0x24005948
 8019374:	24004e78 	.word	0x24004e78
 8019378:	24004e7c 	.word	0x24004e7c
 801937c:	24004e7a 	.word	0x24004e7a
 8019380:	08026ac4 	.word	0x08026ac4
 8019384:	08026ad4 	.word	0x08026ad4
 8019388:	08026ae0 	.word	0x08026ae0
 801938c:	24004e84 	.word	0x24004e84
 8019390:	24004e88 	.word	0x24004e88
 8019394:	24004e90 	.word	0x24004e90
 8019398:	24004e8e 	.word	0x24004e8e
 801939c:	24008838 	.word	0x24008838
 80193a0:	08026b00 	.word	0x08026b00
 80193a4:	08026b28 	.word	0x08026b28
 80193a8:	08026b54 	.word	0x08026b54
    }

    if (pcb->remote_port == tcphdr->src &&
 80193ac:	69fb      	ldr	r3, [r7, #28]
 80193ae:	8b1a      	ldrh	r2, [r3, #24]
 80193b0:	4b94      	ldr	r3, [pc, #592]	; (8019604 <tcp_input+0x524>)
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	881b      	ldrh	r3, [r3, #0]
 80193b6:	b29b      	uxth	r3, r3
 80193b8:	429a      	cmp	r2, r3
 80193ba:	d13a      	bne.n	8019432 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80193bc:	69fb      	ldr	r3, [r7, #28]
 80193be:	8ada      	ldrh	r2, [r3, #22]
 80193c0:	4b90      	ldr	r3, [pc, #576]	; (8019604 <tcp_input+0x524>)
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	885b      	ldrh	r3, [r3, #2]
 80193c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80193c8:	429a      	cmp	r2, r3
 80193ca:	d132      	bne.n	8019432 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80193cc:	69fb      	ldr	r3, [r7, #28]
 80193ce:	685a      	ldr	r2, [r3, #4]
 80193d0:	4b8d      	ldr	r3, [pc, #564]	; (8019608 <tcp_input+0x528>)
 80193d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80193d4:	429a      	cmp	r2, r3
 80193d6:	d12c      	bne.n	8019432 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80193d8:	69fb      	ldr	r3, [r7, #28]
 80193da:	681a      	ldr	r2, [r3, #0]
 80193dc:	4b8a      	ldr	r3, [pc, #552]	; (8019608 <tcp_input+0x528>)
 80193de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d126      	bne.n	8019432 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80193e4:	69fb      	ldr	r3, [r7, #28]
 80193e6:	68db      	ldr	r3, [r3, #12]
 80193e8:	69fa      	ldr	r2, [r7, #28]
 80193ea:	429a      	cmp	r2, r3
 80193ec:	d106      	bne.n	80193fc <tcp_input+0x31c>
 80193ee:	4b87      	ldr	r3, [pc, #540]	; (801960c <tcp_input+0x52c>)
 80193f0:	f240 120d 	movw	r2, #269	; 0x10d
 80193f4:	4986      	ldr	r1, [pc, #536]	; (8019610 <tcp_input+0x530>)
 80193f6:	4887      	ldr	r0, [pc, #540]	; (8019614 <tcp_input+0x534>)
 80193f8:	f006 fe04 	bl	8020004 <iprintf>
      if (prev != NULL) {
 80193fc:	69bb      	ldr	r3, [r7, #24]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d00a      	beq.n	8019418 <tcp_input+0x338>
        prev->next = pcb->next;
 8019402:	69fb      	ldr	r3, [r7, #28]
 8019404:	68da      	ldr	r2, [r3, #12]
 8019406:	69bb      	ldr	r3, [r7, #24]
 8019408:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801940a:	4b83      	ldr	r3, [pc, #524]	; (8019618 <tcp_input+0x538>)
 801940c:	681a      	ldr	r2, [r3, #0]
 801940e:	69fb      	ldr	r3, [r7, #28]
 8019410:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8019412:	4a81      	ldr	r2, [pc, #516]	; (8019618 <tcp_input+0x538>)
 8019414:	69fb      	ldr	r3, [r7, #28]
 8019416:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8019418:	69fb      	ldr	r3, [r7, #28]
 801941a:	68db      	ldr	r3, [r3, #12]
 801941c:	69fa      	ldr	r2, [r7, #28]
 801941e:	429a      	cmp	r2, r3
 8019420:	d111      	bne.n	8019446 <tcp_input+0x366>
 8019422:	4b7a      	ldr	r3, [pc, #488]	; (801960c <tcp_input+0x52c>)
 8019424:	f240 1215 	movw	r2, #277	; 0x115
 8019428:	497c      	ldr	r1, [pc, #496]	; (801961c <tcp_input+0x53c>)
 801942a:	487a      	ldr	r0, [pc, #488]	; (8019614 <tcp_input+0x534>)
 801942c:	f006 fdea 	bl	8020004 <iprintf>
      break;
 8019430:	e009      	b.n	8019446 <tcp_input+0x366>
    }
    prev = pcb;
 8019432:	69fb      	ldr	r3, [r7, #28]
 8019434:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019436:	69fb      	ldr	r3, [r7, #28]
 8019438:	68db      	ldr	r3, [r3, #12]
 801943a:	61fb      	str	r3, [r7, #28]
 801943c:	69fb      	ldr	r3, [r7, #28]
 801943e:	2b00      	cmp	r3, #0
 8019440:	f47f af5e 	bne.w	8019300 <tcp_input+0x220>
 8019444:	e000      	b.n	8019448 <tcp_input+0x368>
      break;
 8019446:	bf00      	nop
  }

  if (pcb == NULL) {
 8019448:	69fb      	ldr	r3, [r7, #28]
 801944a:	2b00      	cmp	r3, #0
 801944c:	f040 8095 	bne.w	801957a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019450:	4b73      	ldr	r3, [pc, #460]	; (8019620 <tcp_input+0x540>)
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	61fb      	str	r3, [r7, #28]
 8019456:	e03f      	b.n	80194d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019458:	69fb      	ldr	r3, [r7, #28]
 801945a:	7d1b      	ldrb	r3, [r3, #20]
 801945c:	2b0a      	cmp	r3, #10
 801945e:	d006      	beq.n	801946e <tcp_input+0x38e>
 8019460:	4b6a      	ldr	r3, [pc, #424]	; (801960c <tcp_input+0x52c>)
 8019462:	f240 121f 	movw	r2, #287	; 0x11f
 8019466:	496f      	ldr	r1, [pc, #444]	; (8019624 <tcp_input+0x544>)
 8019468:	486a      	ldr	r0, [pc, #424]	; (8019614 <tcp_input+0x534>)
 801946a:	f006 fdcb 	bl	8020004 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801946e:	69fb      	ldr	r3, [r7, #28]
 8019470:	7a1b      	ldrb	r3, [r3, #8]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d009      	beq.n	801948a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019476:	69fb      	ldr	r3, [r7, #28]
 8019478:	7a1a      	ldrb	r2, [r3, #8]
 801947a:	4b63      	ldr	r3, [pc, #396]	; (8019608 <tcp_input+0x528>)
 801947c:	685b      	ldr	r3, [r3, #4]
 801947e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019482:	3301      	adds	r3, #1
 8019484:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019486:	429a      	cmp	r2, r3
 8019488:	d122      	bne.n	80194d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801948a:	69fb      	ldr	r3, [r7, #28]
 801948c:	8b1a      	ldrh	r2, [r3, #24]
 801948e:	4b5d      	ldr	r3, [pc, #372]	; (8019604 <tcp_input+0x524>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	881b      	ldrh	r3, [r3, #0]
 8019494:	b29b      	uxth	r3, r3
 8019496:	429a      	cmp	r2, r3
 8019498:	d11b      	bne.n	80194d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801949a:	69fb      	ldr	r3, [r7, #28]
 801949c:	8ada      	ldrh	r2, [r3, #22]
 801949e:	4b59      	ldr	r3, [pc, #356]	; (8019604 <tcp_input+0x524>)
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	885b      	ldrh	r3, [r3, #2]
 80194a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80194a6:	429a      	cmp	r2, r3
 80194a8:	d113      	bne.n	80194d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80194aa:	69fb      	ldr	r3, [r7, #28]
 80194ac:	685a      	ldr	r2, [r3, #4]
 80194ae:	4b56      	ldr	r3, [pc, #344]	; (8019608 <tcp_input+0x528>)
 80194b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80194b2:	429a      	cmp	r2, r3
 80194b4:	d10d      	bne.n	80194d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80194b6:	69fb      	ldr	r3, [r7, #28]
 80194b8:	681a      	ldr	r2, [r3, #0]
 80194ba:	4b53      	ldr	r3, [pc, #332]	; (8019608 <tcp_input+0x528>)
 80194bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80194be:	429a      	cmp	r2, r3
 80194c0:	d107      	bne.n	80194d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80194c2:	69f8      	ldr	r0, [r7, #28]
 80194c4:	f000 fb54 	bl	8019b70 <tcp_timewait_input>
        }
        pbuf_free(p);
 80194c8:	6878      	ldr	r0, [r7, #4]
 80194ca:	f7fd fb89 	bl	8016be0 <pbuf_free>
        return;
 80194ce:	e1f0      	b.n	80198b2 <tcp_input+0x7d2>
        continue;
 80194d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80194d2:	69fb      	ldr	r3, [r7, #28]
 80194d4:	68db      	ldr	r3, [r3, #12]
 80194d6:	61fb      	str	r3, [r7, #28]
 80194d8:	69fb      	ldr	r3, [r7, #28]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d1bc      	bne.n	8019458 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80194de:	2300      	movs	r3, #0
 80194e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80194e2:	4b51      	ldr	r3, [pc, #324]	; (8019628 <tcp_input+0x548>)
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	617b      	str	r3, [r7, #20]
 80194e8:	e02a      	b.n	8019540 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80194ea:	697b      	ldr	r3, [r7, #20]
 80194ec:	7a1b      	ldrb	r3, [r3, #8]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d00c      	beq.n	801950c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	7a1a      	ldrb	r2, [r3, #8]
 80194f6:	4b44      	ldr	r3, [pc, #272]	; (8019608 <tcp_input+0x528>)
 80194f8:	685b      	ldr	r3, [r3, #4]
 80194fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80194fe:	3301      	adds	r3, #1
 8019500:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019502:	429a      	cmp	r2, r3
 8019504:	d002      	beq.n	801950c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	61bb      	str	r3, [r7, #24]
        continue;
 801950a:	e016      	b.n	801953a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	8ada      	ldrh	r2, [r3, #22]
 8019510:	4b3c      	ldr	r3, [pc, #240]	; (8019604 <tcp_input+0x524>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	885b      	ldrh	r3, [r3, #2]
 8019516:	b29b      	uxth	r3, r3
 8019518:	429a      	cmp	r2, r3
 801951a:	d10c      	bne.n	8019536 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801951c:	697b      	ldr	r3, [r7, #20]
 801951e:	681a      	ldr	r2, [r3, #0]
 8019520:	4b39      	ldr	r3, [pc, #228]	; (8019608 <tcp_input+0x528>)
 8019522:	695b      	ldr	r3, [r3, #20]
 8019524:	429a      	cmp	r2, r3
 8019526:	d00f      	beq.n	8019548 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8019528:	697b      	ldr	r3, [r7, #20]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d00d      	beq.n	801954a <tcp_input+0x46a>
 801952e:	697b      	ldr	r3, [r7, #20]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d009      	beq.n	801954a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8019536:	697b      	ldr	r3, [r7, #20]
 8019538:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801953a:	697b      	ldr	r3, [r7, #20]
 801953c:	68db      	ldr	r3, [r3, #12]
 801953e:	617b      	str	r3, [r7, #20]
 8019540:	697b      	ldr	r3, [r7, #20]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d1d1      	bne.n	80194ea <tcp_input+0x40a>
 8019546:	e000      	b.n	801954a <tcp_input+0x46a>
            break;
 8019548:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801954a:	697b      	ldr	r3, [r7, #20]
 801954c:	2b00      	cmp	r3, #0
 801954e:	d014      	beq.n	801957a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8019550:	69bb      	ldr	r3, [r7, #24]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d00a      	beq.n	801956c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	68da      	ldr	r2, [r3, #12]
 801955a:	69bb      	ldr	r3, [r7, #24]
 801955c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801955e:	4b32      	ldr	r3, [pc, #200]	; (8019628 <tcp_input+0x548>)
 8019560:	681a      	ldr	r2, [r3, #0]
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8019566:	4a30      	ldr	r2, [pc, #192]	; (8019628 <tcp_input+0x548>)
 8019568:	697b      	ldr	r3, [r7, #20]
 801956a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801956c:	6978      	ldr	r0, [r7, #20]
 801956e:	f000 fa01 	bl	8019974 <tcp_listen_input>
      }
      pbuf_free(p);
 8019572:	6878      	ldr	r0, [r7, #4]
 8019574:	f7fd fb34 	bl	8016be0 <pbuf_free>
      return;
 8019578:	e19b      	b.n	80198b2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801957a:	69fb      	ldr	r3, [r7, #28]
 801957c:	2b00      	cmp	r3, #0
 801957e:	f000 8160 	beq.w	8019842 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8019582:	4b2a      	ldr	r3, [pc, #168]	; (801962c <tcp_input+0x54c>)
 8019584:	2200      	movs	r2, #0
 8019586:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	891a      	ldrh	r2, [r3, #8]
 801958c:	4b27      	ldr	r3, [pc, #156]	; (801962c <tcp_input+0x54c>)
 801958e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8019590:	4a26      	ldr	r2, [pc, #152]	; (801962c <tcp_input+0x54c>)
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8019596:	4b1b      	ldr	r3, [pc, #108]	; (8019604 <tcp_input+0x524>)
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	4a24      	ldr	r2, [pc, #144]	; (801962c <tcp_input+0x54c>)
 801959c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801959e:	4b24      	ldr	r3, [pc, #144]	; (8019630 <tcp_input+0x550>)
 80195a0:	2200      	movs	r2, #0
 80195a2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80195a4:	4b23      	ldr	r3, [pc, #140]	; (8019634 <tcp_input+0x554>)
 80195a6:	2200      	movs	r2, #0
 80195a8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80195aa:	4b23      	ldr	r3, [pc, #140]	; (8019638 <tcp_input+0x558>)
 80195ac:	2200      	movs	r2, #0
 80195ae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80195b0:	4b22      	ldr	r3, [pc, #136]	; (801963c <tcp_input+0x55c>)
 80195b2:	781b      	ldrb	r3, [r3, #0]
 80195b4:	f003 0308 	and.w	r3, r3, #8
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d006      	beq.n	80195ca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	7b5b      	ldrb	r3, [r3, #13]
 80195c0:	f043 0301 	orr.w	r3, r3, #1
 80195c4:	b2da      	uxtb	r2, r3
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80195ca:	69fb      	ldr	r3, [r7, #28]
 80195cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d038      	beq.n	8019644 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80195d2:	69f8      	ldr	r0, [r7, #28]
 80195d4:	f7ff f870 	bl	80186b8 <tcp_process_refused_data>
 80195d8:	4603      	mov	r3, r0
 80195da:	f113 0f0d 	cmn.w	r3, #13
 80195de:	d007      	beq.n	80195f0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80195e0:	69fb      	ldr	r3, [r7, #28]
 80195e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d02d      	beq.n	8019644 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80195e8:	4b15      	ldr	r3, [pc, #84]	; (8019640 <tcp_input+0x560>)
 80195ea:	881b      	ldrh	r3, [r3, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d029      	beq.n	8019644 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80195f0:	69fb      	ldr	r3, [r7, #28]
 80195f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	f040 8104 	bne.w	8019802 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80195fa:	69f8      	ldr	r0, [r7, #28]
 80195fc:	f003 fe16 	bl	801d22c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8019600:	e0ff      	b.n	8019802 <tcp_input+0x722>
 8019602:	bf00      	nop
 8019604:	24004e74 	.word	0x24004e74
 8019608:	24005948 	.word	0x24005948
 801960c:	08026a24 	.word	0x08026a24
 8019610:	08026b7c 	.word	0x08026b7c
 8019614:	08026a9c 	.word	0x08026a9c
 8019618:	24008838 	.word	0x24008838
 801961c:	08026ba8 	.word	0x08026ba8
 8019620:	24008848 	.word	0x24008848
 8019624:	08026bd4 	.word	0x08026bd4
 8019628:	24008840 	.word	0x24008840
 801962c:	24004e64 	.word	0x24004e64
 8019630:	24004e94 	.word	0x24004e94
 8019634:	24004e91 	.word	0x24004e91
 8019638:	24004e8c 	.word	0x24004e8c
 801963c:	24004e90 	.word	0x24004e90
 8019640:	24004e8e 	.word	0x24004e8e
      }
    }
    tcp_input_pcb = pcb;
 8019644:	4a9c      	ldr	r2, [pc, #624]	; (80198b8 <tcp_input+0x7d8>)
 8019646:	69fb      	ldr	r3, [r7, #28]
 8019648:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801964a:	69f8      	ldr	r0, [r7, #28]
 801964c:	f000 fb0a 	bl	8019c64 <tcp_process>
 8019650:	4603      	mov	r3, r0
 8019652:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8019654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019658:	f113 0f0d 	cmn.w	r3, #13
 801965c:	f000 80d3 	beq.w	8019806 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8019660:	4b96      	ldr	r3, [pc, #600]	; (80198bc <tcp_input+0x7dc>)
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	f003 0308 	and.w	r3, r3, #8
 8019668:	2b00      	cmp	r3, #0
 801966a:	d015      	beq.n	8019698 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801966c:	69fb      	ldr	r3, [r7, #28]
 801966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019672:	2b00      	cmp	r3, #0
 8019674:	d008      	beq.n	8019688 <tcp_input+0x5a8>
 8019676:	69fb      	ldr	r3, [r7, #28]
 8019678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801967c:	69fa      	ldr	r2, [r7, #28]
 801967e:	6912      	ldr	r2, [r2, #16]
 8019680:	f06f 010d 	mvn.w	r1, #13
 8019684:	4610      	mov	r0, r2
 8019686:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019688:	69f9      	ldr	r1, [r7, #28]
 801968a:	488d      	ldr	r0, [pc, #564]	; (80198c0 <tcp_input+0x7e0>)
 801968c:	f7ff fbb0 	bl	8018df0 <tcp_pcb_remove>
        tcp_free(pcb);
 8019690:	69f8      	ldr	r0, [r7, #28]
 8019692:	f7fd fdfd 	bl	8017290 <tcp_free>
 8019696:	e0c1      	b.n	801981c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8019698:	2300      	movs	r3, #0
 801969a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801969c:	4b89      	ldr	r3, [pc, #548]	; (80198c4 <tcp_input+0x7e4>)
 801969e:	881b      	ldrh	r3, [r3, #0]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d01d      	beq.n	80196e0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80196a4:	4b87      	ldr	r3, [pc, #540]	; (80198c4 <tcp_input+0x7e4>)
 80196a6:	881b      	ldrh	r3, [r3, #0]
 80196a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80196aa:	69fb      	ldr	r3, [r7, #28]
 80196ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d00a      	beq.n	80196ca <tcp_input+0x5ea>
 80196b4:	69fb      	ldr	r3, [r7, #28]
 80196b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80196ba:	69fa      	ldr	r2, [r7, #28]
 80196bc:	6910      	ldr	r0, [r2, #16]
 80196be:	89fa      	ldrh	r2, [r7, #14]
 80196c0:	69f9      	ldr	r1, [r7, #28]
 80196c2:	4798      	blx	r3
 80196c4:	4603      	mov	r3, r0
 80196c6:	74fb      	strb	r3, [r7, #19]
 80196c8:	e001      	b.n	80196ce <tcp_input+0x5ee>
 80196ca:	2300      	movs	r3, #0
 80196cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80196ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80196d2:	f113 0f0d 	cmn.w	r3, #13
 80196d6:	f000 8098 	beq.w	801980a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80196da:	4b7a      	ldr	r3, [pc, #488]	; (80198c4 <tcp_input+0x7e4>)
 80196dc:	2200      	movs	r2, #0
 80196de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80196e0:	69f8      	ldr	r0, [r7, #28]
 80196e2:	f000 f907 	bl	80198f4 <tcp_input_delayed_close>
 80196e6:	4603      	mov	r3, r0
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	f040 8090 	bne.w	801980e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80196ee:	4b76      	ldr	r3, [pc, #472]	; (80198c8 <tcp_input+0x7e8>)
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d041      	beq.n	801977a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80196f6:	69fb      	ldr	r3, [r7, #28]
 80196f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d006      	beq.n	801970c <tcp_input+0x62c>
 80196fe:	4b73      	ldr	r3, [pc, #460]	; (80198cc <tcp_input+0x7ec>)
 8019700:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019704:	4972      	ldr	r1, [pc, #456]	; (80198d0 <tcp_input+0x7f0>)
 8019706:	4873      	ldr	r0, [pc, #460]	; (80198d4 <tcp_input+0x7f4>)
 8019708:	f006 fc7c 	bl	8020004 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801970c:	69fb      	ldr	r3, [r7, #28]
 801970e:	8b5b      	ldrh	r3, [r3, #26]
 8019710:	f003 0310 	and.w	r3, r3, #16
 8019714:	2b00      	cmp	r3, #0
 8019716:	d008      	beq.n	801972a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8019718:	4b6b      	ldr	r3, [pc, #428]	; (80198c8 <tcp_input+0x7e8>)
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	4618      	mov	r0, r3
 801971e:	f7fd fa5f 	bl	8016be0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8019722:	69f8      	ldr	r0, [r7, #28]
 8019724:	f7fe f89c 	bl	8017860 <tcp_abort>
            goto aborted;
 8019728:	e078      	b.n	801981c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801972a:	69fb      	ldr	r3, [r7, #28]
 801972c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019730:	2b00      	cmp	r3, #0
 8019732:	d00c      	beq.n	801974e <tcp_input+0x66e>
 8019734:	69fb      	ldr	r3, [r7, #28]
 8019736:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801973a:	69fb      	ldr	r3, [r7, #28]
 801973c:	6918      	ldr	r0, [r3, #16]
 801973e:	4b62      	ldr	r3, [pc, #392]	; (80198c8 <tcp_input+0x7e8>)
 8019740:	681a      	ldr	r2, [r3, #0]
 8019742:	2300      	movs	r3, #0
 8019744:	69f9      	ldr	r1, [r7, #28]
 8019746:	47a0      	blx	r4
 8019748:	4603      	mov	r3, r0
 801974a:	74fb      	strb	r3, [r7, #19]
 801974c:	e008      	b.n	8019760 <tcp_input+0x680>
 801974e:	4b5e      	ldr	r3, [pc, #376]	; (80198c8 <tcp_input+0x7e8>)
 8019750:	681a      	ldr	r2, [r3, #0]
 8019752:	2300      	movs	r3, #0
 8019754:	69f9      	ldr	r1, [r7, #28]
 8019756:	2000      	movs	r0, #0
 8019758:	f7ff f884 	bl	8018864 <tcp_recv_null>
 801975c:	4603      	mov	r3, r0
 801975e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8019760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019764:	f113 0f0d 	cmn.w	r3, #13
 8019768:	d053      	beq.n	8019812 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801976a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d003      	beq.n	801977a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8019772:	4b55      	ldr	r3, [pc, #340]	; (80198c8 <tcp_input+0x7e8>)
 8019774:	681a      	ldr	r2, [r3, #0]
 8019776:	69fb      	ldr	r3, [r7, #28]
 8019778:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801977a:	4b50      	ldr	r3, [pc, #320]	; (80198bc <tcp_input+0x7dc>)
 801977c:	781b      	ldrb	r3, [r3, #0]
 801977e:	f003 0320 	and.w	r3, r3, #32
 8019782:	2b00      	cmp	r3, #0
 8019784:	d030      	beq.n	80197e8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8019786:	69fb      	ldr	r3, [r7, #28]
 8019788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801978a:	2b00      	cmp	r3, #0
 801978c:	d009      	beq.n	80197a2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019792:	7b5a      	ldrb	r2, [r3, #13]
 8019794:	69fb      	ldr	r3, [r7, #28]
 8019796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019798:	f042 0220 	orr.w	r2, r2, #32
 801979c:	b2d2      	uxtb	r2, r2
 801979e:	735a      	strb	r2, [r3, #13]
 80197a0:	e022      	b.n	80197e8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80197a2:	69fb      	ldr	r3, [r7, #28]
 80197a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80197a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80197aa:	d005      	beq.n	80197b8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80197ac:	69fb      	ldr	r3, [r7, #28]
 80197ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80197b0:	3301      	adds	r3, #1
 80197b2:	b29a      	uxth	r2, r3
 80197b4:	69fb      	ldr	r3, [r7, #28]
 80197b6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80197b8:	69fb      	ldr	r3, [r7, #28]
 80197ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d00b      	beq.n	80197da <tcp_input+0x6fa>
 80197c2:	69fb      	ldr	r3, [r7, #28]
 80197c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80197c8:	69fb      	ldr	r3, [r7, #28]
 80197ca:	6918      	ldr	r0, [r3, #16]
 80197cc:	2300      	movs	r3, #0
 80197ce:	2200      	movs	r2, #0
 80197d0:	69f9      	ldr	r1, [r7, #28]
 80197d2:	47a0      	blx	r4
 80197d4:	4603      	mov	r3, r0
 80197d6:	74fb      	strb	r3, [r7, #19]
 80197d8:	e001      	b.n	80197de <tcp_input+0x6fe>
 80197da:	2300      	movs	r3, #0
 80197dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80197de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80197e2:	f113 0f0d 	cmn.w	r3, #13
 80197e6:	d016      	beq.n	8019816 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80197e8:	4b33      	ldr	r3, [pc, #204]	; (80198b8 <tcp_input+0x7d8>)
 80197ea:	2200      	movs	r2, #0
 80197ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80197ee:	69f8      	ldr	r0, [r7, #28]
 80197f0:	f000 f880 	bl	80198f4 <tcp_input_delayed_close>
 80197f4:	4603      	mov	r3, r0
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d10f      	bne.n	801981a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80197fa:	69f8      	ldr	r0, [r7, #28]
 80197fc:	f002 ff10 	bl	801c620 <tcp_output>
 8019800:	e00c      	b.n	801981c <tcp_input+0x73c>
        goto aborted;
 8019802:	bf00      	nop
 8019804:	e00a      	b.n	801981c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8019806:	bf00      	nop
 8019808:	e008      	b.n	801981c <tcp_input+0x73c>
              goto aborted;
 801980a:	bf00      	nop
 801980c:	e006      	b.n	801981c <tcp_input+0x73c>
          goto aborted;
 801980e:	bf00      	nop
 8019810:	e004      	b.n	801981c <tcp_input+0x73c>
            goto aborted;
 8019812:	bf00      	nop
 8019814:	e002      	b.n	801981c <tcp_input+0x73c>
              goto aborted;
 8019816:	bf00      	nop
 8019818:	e000      	b.n	801981c <tcp_input+0x73c>
          goto aborted;
 801981a:	bf00      	nop
    tcp_input_pcb = NULL;
 801981c:	4b26      	ldr	r3, [pc, #152]	; (80198b8 <tcp_input+0x7d8>)
 801981e:	2200      	movs	r2, #0
 8019820:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8019822:	4b29      	ldr	r3, [pc, #164]	; (80198c8 <tcp_input+0x7e8>)
 8019824:	2200      	movs	r2, #0
 8019826:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8019828:	4b2b      	ldr	r3, [pc, #172]	; (80198d8 <tcp_input+0x7f8>)
 801982a:	685b      	ldr	r3, [r3, #4]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d03f      	beq.n	80198b0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8019830:	4b29      	ldr	r3, [pc, #164]	; (80198d8 <tcp_input+0x7f8>)
 8019832:	685b      	ldr	r3, [r3, #4]
 8019834:	4618      	mov	r0, r3
 8019836:	f7fd f9d3 	bl	8016be0 <pbuf_free>
      inseg.p = NULL;
 801983a:	4b27      	ldr	r3, [pc, #156]	; (80198d8 <tcp_input+0x7f8>)
 801983c:	2200      	movs	r2, #0
 801983e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8019840:	e036      	b.n	80198b0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8019842:	4b26      	ldr	r3, [pc, #152]	; (80198dc <tcp_input+0x7fc>)
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	899b      	ldrh	r3, [r3, #12]
 8019848:	b29b      	uxth	r3, r3
 801984a:	4618      	mov	r0, r3
 801984c:	f7f9 facc 	bl	8012de8 <lwip_htons>
 8019850:	4603      	mov	r3, r0
 8019852:	b2db      	uxtb	r3, r3
 8019854:	f003 0304 	and.w	r3, r3, #4
 8019858:	2b00      	cmp	r3, #0
 801985a:	d118      	bne.n	801988e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801985c:	4b20      	ldr	r3, [pc, #128]	; (80198e0 <tcp_input+0x800>)
 801985e:	6819      	ldr	r1, [r3, #0]
 8019860:	4b20      	ldr	r3, [pc, #128]	; (80198e4 <tcp_input+0x804>)
 8019862:	881b      	ldrh	r3, [r3, #0]
 8019864:	461a      	mov	r2, r3
 8019866:	4b20      	ldr	r3, [pc, #128]	; (80198e8 <tcp_input+0x808>)
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801986c:	4b1b      	ldr	r3, [pc, #108]	; (80198dc <tcp_input+0x7fc>)
 801986e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019870:	885b      	ldrh	r3, [r3, #2]
 8019872:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019874:	4a19      	ldr	r2, [pc, #100]	; (80198dc <tcp_input+0x7fc>)
 8019876:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019878:	8812      	ldrh	r2, [r2, #0]
 801987a:	b292      	uxth	r2, r2
 801987c:	9202      	str	r2, [sp, #8]
 801987e:	9301      	str	r3, [sp, #4]
 8019880:	4b1a      	ldr	r3, [pc, #104]	; (80198ec <tcp_input+0x80c>)
 8019882:	9300      	str	r3, [sp, #0]
 8019884:	4b1a      	ldr	r3, [pc, #104]	; (80198f0 <tcp_input+0x810>)
 8019886:	4602      	mov	r2, r0
 8019888:	2000      	movs	r0, #0
 801988a:	f003 fc7d 	bl	801d188 <tcp_rst>
    pbuf_free(p);
 801988e:	6878      	ldr	r0, [r7, #4]
 8019890:	f7fd f9a6 	bl	8016be0 <pbuf_free>
  return;
 8019894:	e00c      	b.n	80198b0 <tcp_input+0x7d0>
    goto dropped;
 8019896:	bf00      	nop
 8019898:	e006      	b.n	80198a8 <tcp_input+0x7c8>
    goto dropped;
 801989a:	bf00      	nop
 801989c:	e004      	b.n	80198a8 <tcp_input+0x7c8>
    goto dropped;
 801989e:	bf00      	nop
 80198a0:	e002      	b.n	80198a8 <tcp_input+0x7c8>
      goto dropped;
 80198a2:	bf00      	nop
 80198a4:	e000      	b.n	80198a8 <tcp_input+0x7c8>
      goto dropped;
 80198a6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80198a8:	6878      	ldr	r0, [r7, #4]
 80198aa:	f7fd f999 	bl	8016be0 <pbuf_free>
 80198ae:	e000      	b.n	80198b2 <tcp_input+0x7d2>
  return;
 80198b0:	bf00      	nop
}
 80198b2:	3724      	adds	r7, #36	; 0x24
 80198b4:	46bd      	mov	sp, r7
 80198b6:	bd90      	pop	{r4, r7, pc}
 80198b8:	2400884c 	.word	0x2400884c
 80198bc:	24004e91 	.word	0x24004e91
 80198c0:	24008838 	.word	0x24008838
 80198c4:	24004e8c 	.word	0x24004e8c
 80198c8:	24004e94 	.word	0x24004e94
 80198cc:	08026a24 	.word	0x08026a24
 80198d0:	08026c04 	.word	0x08026c04
 80198d4:	08026a9c 	.word	0x08026a9c
 80198d8:	24004e64 	.word	0x24004e64
 80198dc:	24004e74 	.word	0x24004e74
 80198e0:	24004e88 	.word	0x24004e88
 80198e4:	24004e8e 	.word	0x24004e8e
 80198e8:	24004e84 	.word	0x24004e84
 80198ec:	24005958 	.word	0x24005958
 80198f0:	2400595c 	.word	0x2400595c

080198f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b082      	sub	sp, #8
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d106      	bne.n	8019910 <tcp_input_delayed_close+0x1c>
 8019902:	4b17      	ldr	r3, [pc, #92]	; (8019960 <tcp_input_delayed_close+0x6c>)
 8019904:	f240 225a 	movw	r2, #602	; 0x25a
 8019908:	4916      	ldr	r1, [pc, #88]	; (8019964 <tcp_input_delayed_close+0x70>)
 801990a:	4817      	ldr	r0, [pc, #92]	; (8019968 <tcp_input_delayed_close+0x74>)
 801990c:	f006 fb7a 	bl	8020004 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8019910:	4b16      	ldr	r3, [pc, #88]	; (801996c <tcp_input_delayed_close+0x78>)
 8019912:	781b      	ldrb	r3, [r3, #0]
 8019914:	f003 0310 	and.w	r3, r3, #16
 8019918:	2b00      	cmp	r3, #0
 801991a:	d01c      	beq.n	8019956 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	8b5b      	ldrh	r3, [r3, #26]
 8019920:	f003 0310 	and.w	r3, r3, #16
 8019924:	2b00      	cmp	r3, #0
 8019926:	d10d      	bne.n	8019944 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801992e:	2b00      	cmp	r3, #0
 8019930:	d008      	beq.n	8019944 <tcp_input_delayed_close+0x50>
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019938:	687a      	ldr	r2, [r7, #4]
 801993a:	6912      	ldr	r2, [r2, #16]
 801993c:	f06f 010e 	mvn.w	r1, #14
 8019940:	4610      	mov	r0, r2
 8019942:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019944:	6879      	ldr	r1, [r7, #4]
 8019946:	480a      	ldr	r0, [pc, #40]	; (8019970 <tcp_input_delayed_close+0x7c>)
 8019948:	f7ff fa52 	bl	8018df0 <tcp_pcb_remove>
    tcp_free(pcb);
 801994c:	6878      	ldr	r0, [r7, #4]
 801994e:	f7fd fc9f 	bl	8017290 <tcp_free>
    return 1;
 8019952:	2301      	movs	r3, #1
 8019954:	e000      	b.n	8019958 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8019956:	2300      	movs	r3, #0
}
 8019958:	4618      	mov	r0, r3
 801995a:	3708      	adds	r7, #8
 801995c:	46bd      	mov	sp, r7
 801995e:	bd80      	pop	{r7, pc}
 8019960:	08026a24 	.word	0x08026a24
 8019964:	08026c20 	.word	0x08026c20
 8019968:	08026a9c 	.word	0x08026a9c
 801996c:	24004e91 	.word	0x24004e91
 8019970:	24008838 	.word	0x24008838

08019974 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8019974:	b590      	push	{r4, r7, lr}
 8019976:	b08b      	sub	sp, #44	; 0x2c
 8019978:	af04      	add	r7, sp, #16
 801997a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801997c:	4b6f      	ldr	r3, [pc, #444]	; (8019b3c <tcp_listen_input+0x1c8>)
 801997e:	781b      	ldrb	r3, [r3, #0]
 8019980:	f003 0304 	and.w	r3, r3, #4
 8019984:	2b00      	cmp	r3, #0
 8019986:	f040 80d2 	bne.w	8019b2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d106      	bne.n	801999e <tcp_listen_input+0x2a>
 8019990:	4b6b      	ldr	r3, [pc, #428]	; (8019b40 <tcp_listen_input+0x1cc>)
 8019992:	f240 2281 	movw	r2, #641	; 0x281
 8019996:	496b      	ldr	r1, [pc, #428]	; (8019b44 <tcp_listen_input+0x1d0>)
 8019998:	486b      	ldr	r0, [pc, #428]	; (8019b48 <tcp_listen_input+0x1d4>)
 801999a:	f006 fb33 	bl	8020004 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801999e:	4b67      	ldr	r3, [pc, #412]	; (8019b3c <tcp_listen_input+0x1c8>)
 80199a0:	781b      	ldrb	r3, [r3, #0]
 80199a2:	f003 0310 	and.w	r3, r3, #16
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d019      	beq.n	80199de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199aa:	4b68      	ldr	r3, [pc, #416]	; (8019b4c <tcp_listen_input+0x1d8>)
 80199ac:	6819      	ldr	r1, [r3, #0]
 80199ae:	4b68      	ldr	r3, [pc, #416]	; (8019b50 <tcp_listen_input+0x1dc>)
 80199b0:	881b      	ldrh	r3, [r3, #0]
 80199b2:	461a      	mov	r2, r3
 80199b4:	4b67      	ldr	r3, [pc, #412]	; (8019b54 <tcp_listen_input+0x1e0>)
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80199ba:	4b67      	ldr	r3, [pc, #412]	; (8019b58 <tcp_listen_input+0x1e4>)
 80199bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199be:	885b      	ldrh	r3, [r3, #2]
 80199c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80199c2:	4a65      	ldr	r2, [pc, #404]	; (8019b58 <tcp_listen_input+0x1e4>)
 80199c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80199c6:	8812      	ldrh	r2, [r2, #0]
 80199c8:	b292      	uxth	r2, r2
 80199ca:	9202      	str	r2, [sp, #8]
 80199cc:	9301      	str	r3, [sp, #4]
 80199ce:	4b63      	ldr	r3, [pc, #396]	; (8019b5c <tcp_listen_input+0x1e8>)
 80199d0:	9300      	str	r3, [sp, #0]
 80199d2:	4b63      	ldr	r3, [pc, #396]	; (8019b60 <tcp_listen_input+0x1ec>)
 80199d4:	4602      	mov	r2, r0
 80199d6:	6878      	ldr	r0, [r7, #4]
 80199d8:	f003 fbd6 	bl	801d188 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80199dc:	e0a9      	b.n	8019b32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80199de:	4b57      	ldr	r3, [pc, #348]	; (8019b3c <tcp_listen_input+0x1c8>)
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	f003 0302 	and.w	r3, r3, #2
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	f000 80a3 	beq.w	8019b32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	7d5b      	ldrb	r3, [r3, #21]
 80199f0:	4618      	mov	r0, r3
 80199f2:	f7ff f85b 	bl	8018aac <tcp_alloc>
 80199f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80199f8:	697b      	ldr	r3, [r7, #20]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d111      	bne.n	8019a22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	699b      	ldr	r3, [r3, #24]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d00a      	beq.n	8019a1c <tcp_listen_input+0xa8>
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	699b      	ldr	r3, [r3, #24]
 8019a0a:	687a      	ldr	r2, [r7, #4]
 8019a0c:	6910      	ldr	r0, [r2, #16]
 8019a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019a12:	2100      	movs	r1, #0
 8019a14:	4798      	blx	r3
 8019a16:	4603      	mov	r3, r0
 8019a18:	73bb      	strb	r3, [r7, #14]
      return;
 8019a1a:	e08b      	b.n	8019b34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019a1c:	23f0      	movs	r3, #240	; 0xf0
 8019a1e:	73bb      	strb	r3, [r7, #14]
      return;
 8019a20:	e088      	b.n	8019b34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8019a22:	4b50      	ldr	r3, [pc, #320]	; (8019b64 <tcp_listen_input+0x1f0>)
 8019a24:	695a      	ldr	r2, [r3, #20]
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019a2a:	4b4e      	ldr	r3, [pc, #312]	; (8019b64 <tcp_listen_input+0x1f0>)
 8019a2c:	691a      	ldr	r2, [r3, #16]
 8019a2e:	697b      	ldr	r3, [r7, #20]
 8019a30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	8ada      	ldrh	r2, [r3, #22]
 8019a36:	697b      	ldr	r3, [r7, #20]
 8019a38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8019a3a:	4b47      	ldr	r3, [pc, #284]	; (8019b58 <tcp_listen_input+0x1e4>)
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	881b      	ldrh	r3, [r3, #0]
 8019a40:	b29a      	uxth	r2, r3
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8019a46:	697b      	ldr	r3, [r7, #20]
 8019a48:	2203      	movs	r2, #3
 8019a4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8019a4c:	4b41      	ldr	r3, [pc, #260]	; (8019b54 <tcp_listen_input+0x1e0>)
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	1c5a      	adds	r2, r3, #1
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8019a56:	697b      	ldr	r3, [r7, #20]
 8019a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019a5a:	697b      	ldr	r3, [r7, #20]
 8019a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8019a5e:	6978      	ldr	r0, [r7, #20]
 8019a60:	f7ff fa5a 	bl	8018f18 <tcp_next_iss>
 8019a64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8019a66:	697b      	ldr	r3, [r7, #20]
 8019a68:	693a      	ldr	r2, [r7, #16]
 8019a6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8019a6c:	697b      	ldr	r3, [r7, #20]
 8019a6e:	693a      	ldr	r2, [r7, #16]
 8019a70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8019a72:	697b      	ldr	r3, [r7, #20]
 8019a74:	693a      	ldr	r2, [r7, #16]
 8019a76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8019a78:	697b      	ldr	r3, [r7, #20]
 8019a7a:	693a      	ldr	r2, [r7, #16]
 8019a7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8019a7e:	4b35      	ldr	r3, [pc, #212]	; (8019b54 <tcp_listen_input+0x1e0>)
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	1e5a      	subs	r2, r3, #1
 8019a84:	697b      	ldr	r3, [r7, #20]
 8019a86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	691a      	ldr	r2, [r3, #16]
 8019a8c:	697b      	ldr	r3, [r7, #20]
 8019a8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8019a90:	697b      	ldr	r3, [r7, #20]
 8019a92:	687a      	ldr	r2, [r7, #4]
 8019a94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	7a5b      	ldrb	r3, [r3, #9]
 8019a9a:	f003 030c 	and.w	r3, r3, #12
 8019a9e:	b2da      	uxtb	r2, r3
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	7a1a      	ldrb	r2, [r3, #8]
 8019aa8:	697b      	ldr	r3, [r7, #20]
 8019aaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8019aac:	4b2e      	ldr	r3, [pc, #184]	; (8019b68 <tcp_listen_input+0x1f4>)
 8019aae:	681a      	ldr	r2, [r3, #0]
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	60da      	str	r2, [r3, #12]
 8019ab4:	4a2c      	ldr	r2, [pc, #176]	; (8019b68 <tcp_listen_input+0x1f4>)
 8019ab6:	697b      	ldr	r3, [r7, #20]
 8019ab8:	6013      	str	r3, [r2, #0]
 8019aba:	f003 fd27 	bl	801d50c <tcp_timer_needed>
 8019abe:	4b2b      	ldr	r3, [pc, #172]	; (8019b6c <tcp_listen_input+0x1f8>)
 8019ac0:	2201      	movs	r2, #1
 8019ac2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019ac4:	6978      	ldr	r0, [r7, #20]
 8019ac6:	f001 fd8d 	bl	801b5e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019aca:	4b23      	ldr	r3, [pc, #140]	; (8019b58 <tcp_listen_input+0x1e4>)
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	89db      	ldrh	r3, [r3, #14]
 8019ad0:	b29a      	uxth	r2, r3
 8019ad2:	697b      	ldr	r3, [r7, #20]
 8019ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019ad8:	697b      	ldr	r3, [r7, #20]
 8019ada:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019ade:	697b      	ldr	r3, [r7, #20]
 8019ae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019ae4:	697b      	ldr	r3, [r7, #20]
 8019ae6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019ae8:	697b      	ldr	r3, [r7, #20]
 8019aea:	3304      	adds	r3, #4
 8019aec:	4618      	mov	r0, r3
 8019aee:	f7fa fc51 	bl	8014394 <ip4_route>
 8019af2:	4601      	mov	r1, r0
 8019af4:	697b      	ldr	r3, [r7, #20]
 8019af6:	3304      	adds	r3, #4
 8019af8:	461a      	mov	r2, r3
 8019afa:	4620      	mov	r0, r4
 8019afc:	f7ff fa32 	bl	8018f64 <tcp_eff_send_mss_netif>
 8019b00:	4603      	mov	r3, r0
 8019b02:	461a      	mov	r2, r3
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019b08:	2112      	movs	r1, #18
 8019b0a:	6978      	ldr	r0, [r7, #20]
 8019b0c:	f002 fc9a 	bl	801c444 <tcp_enqueue_flags>
 8019b10:	4603      	mov	r3, r0
 8019b12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8019b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d004      	beq.n	8019b26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8019b1c:	2100      	movs	r1, #0
 8019b1e:	6978      	ldr	r0, [r7, #20]
 8019b20:	f7fd fde0 	bl	80176e4 <tcp_abandon>
      return;
 8019b24:	e006      	b.n	8019b34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8019b26:	6978      	ldr	r0, [r7, #20]
 8019b28:	f002 fd7a 	bl	801c620 <tcp_output>
  return;
 8019b2c:	e001      	b.n	8019b32 <tcp_listen_input+0x1be>
    return;
 8019b2e:	bf00      	nop
 8019b30:	e000      	b.n	8019b34 <tcp_listen_input+0x1c0>
  return;
 8019b32:	bf00      	nop
}
 8019b34:	371c      	adds	r7, #28
 8019b36:	46bd      	mov	sp, r7
 8019b38:	bd90      	pop	{r4, r7, pc}
 8019b3a:	bf00      	nop
 8019b3c:	24004e90 	.word	0x24004e90
 8019b40:	08026a24 	.word	0x08026a24
 8019b44:	08026c48 	.word	0x08026c48
 8019b48:	08026a9c 	.word	0x08026a9c
 8019b4c:	24004e88 	.word	0x24004e88
 8019b50:	24004e8e 	.word	0x24004e8e
 8019b54:	24004e84 	.word	0x24004e84
 8019b58:	24004e74 	.word	0x24004e74
 8019b5c:	24005958 	.word	0x24005958
 8019b60:	2400595c 	.word	0x2400595c
 8019b64:	24005948 	.word	0x24005948
 8019b68:	24008838 	.word	0x24008838
 8019b6c:	24008834 	.word	0x24008834

08019b70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b086      	sub	sp, #24
 8019b74:	af04      	add	r7, sp, #16
 8019b76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8019b78:	4b2f      	ldr	r3, [pc, #188]	; (8019c38 <tcp_timewait_input+0xc8>)
 8019b7a:	781b      	ldrb	r3, [r3, #0]
 8019b7c:	f003 0304 	and.w	r3, r3, #4
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d153      	bne.n	8019c2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d106      	bne.n	8019b98 <tcp_timewait_input+0x28>
 8019b8a:	4b2c      	ldr	r3, [pc, #176]	; (8019c3c <tcp_timewait_input+0xcc>)
 8019b8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8019b90:	492b      	ldr	r1, [pc, #172]	; (8019c40 <tcp_timewait_input+0xd0>)
 8019b92:	482c      	ldr	r0, [pc, #176]	; (8019c44 <tcp_timewait_input+0xd4>)
 8019b94:	f006 fa36 	bl	8020004 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8019b98:	4b27      	ldr	r3, [pc, #156]	; (8019c38 <tcp_timewait_input+0xc8>)
 8019b9a:	781b      	ldrb	r3, [r3, #0]
 8019b9c:	f003 0302 	and.w	r3, r3, #2
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d02a      	beq.n	8019bfa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8019ba4:	4b28      	ldr	r3, [pc, #160]	; (8019c48 <tcp_timewait_input+0xd8>)
 8019ba6:	681a      	ldr	r2, [r3, #0]
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bac:	1ad3      	subs	r3, r2, r3
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	db2d      	blt.n	8019c0e <tcp_timewait_input+0x9e>
 8019bb2:	4b25      	ldr	r3, [pc, #148]	; (8019c48 <tcp_timewait_input+0xd8>)
 8019bb4:	681a      	ldr	r2, [r3, #0]
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bba:	6879      	ldr	r1, [r7, #4]
 8019bbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019bbe:	440b      	add	r3, r1
 8019bc0:	1ad3      	subs	r3, r2, r3
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	dc23      	bgt.n	8019c0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019bc6:	4b21      	ldr	r3, [pc, #132]	; (8019c4c <tcp_timewait_input+0xdc>)
 8019bc8:	6819      	ldr	r1, [r3, #0]
 8019bca:	4b21      	ldr	r3, [pc, #132]	; (8019c50 <tcp_timewait_input+0xe0>)
 8019bcc:	881b      	ldrh	r3, [r3, #0]
 8019bce:	461a      	mov	r2, r3
 8019bd0:	4b1d      	ldr	r3, [pc, #116]	; (8019c48 <tcp_timewait_input+0xd8>)
 8019bd2:	681b      	ldr	r3, [r3, #0]
 8019bd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019bd6:	4b1f      	ldr	r3, [pc, #124]	; (8019c54 <tcp_timewait_input+0xe4>)
 8019bd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019bda:	885b      	ldrh	r3, [r3, #2]
 8019bdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019bde:	4a1d      	ldr	r2, [pc, #116]	; (8019c54 <tcp_timewait_input+0xe4>)
 8019be0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019be2:	8812      	ldrh	r2, [r2, #0]
 8019be4:	b292      	uxth	r2, r2
 8019be6:	9202      	str	r2, [sp, #8]
 8019be8:	9301      	str	r3, [sp, #4]
 8019bea:	4b1b      	ldr	r3, [pc, #108]	; (8019c58 <tcp_timewait_input+0xe8>)
 8019bec:	9300      	str	r3, [sp, #0]
 8019bee:	4b1b      	ldr	r3, [pc, #108]	; (8019c5c <tcp_timewait_input+0xec>)
 8019bf0:	4602      	mov	r2, r0
 8019bf2:	6878      	ldr	r0, [r7, #4]
 8019bf4:	f003 fac8 	bl	801d188 <tcp_rst>
      return;
 8019bf8:	e01b      	b.n	8019c32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8019bfa:	4b0f      	ldr	r3, [pc, #60]	; (8019c38 <tcp_timewait_input+0xc8>)
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	f003 0301 	and.w	r3, r3, #1
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d003      	beq.n	8019c0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8019c06:	4b16      	ldr	r3, [pc, #88]	; (8019c60 <tcp_timewait_input+0xf0>)
 8019c08:	681a      	ldr	r2, [r3, #0]
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8019c0e:	4b10      	ldr	r3, [pc, #64]	; (8019c50 <tcp_timewait_input+0xe0>)
 8019c10:	881b      	ldrh	r3, [r3, #0]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d00c      	beq.n	8019c30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	8b5b      	ldrh	r3, [r3, #26]
 8019c1a:	f043 0302 	orr.w	r3, r3, #2
 8019c1e:	b29a      	uxth	r2, r3
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019c24:	6878      	ldr	r0, [r7, #4]
 8019c26:	f002 fcfb 	bl	801c620 <tcp_output>
  }
  return;
 8019c2a:	e001      	b.n	8019c30 <tcp_timewait_input+0xc0>
    return;
 8019c2c:	bf00      	nop
 8019c2e:	e000      	b.n	8019c32 <tcp_timewait_input+0xc2>
  return;
 8019c30:	bf00      	nop
}
 8019c32:	3708      	adds	r7, #8
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}
 8019c38:	24004e90 	.word	0x24004e90
 8019c3c:	08026a24 	.word	0x08026a24
 8019c40:	08026c68 	.word	0x08026c68
 8019c44:	08026a9c 	.word	0x08026a9c
 8019c48:	24004e84 	.word	0x24004e84
 8019c4c:	24004e88 	.word	0x24004e88
 8019c50:	24004e8e 	.word	0x24004e8e
 8019c54:	24004e74 	.word	0x24004e74
 8019c58:	24005958 	.word	0x24005958
 8019c5c:	2400595c 	.word	0x2400595c
 8019c60:	2400883c 	.word	0x2400883c

08019c64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8019c64:	b590      	push	{r4, r7, lr}
 8019c66:	b08d      	sub	sp, #52	; 0x34
 8019c68:	af04      	add	r7, sp, #16
 8019c6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8019c70:	2300      	movs	r3, #0
 8019c72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d106      	bne.n	8019c88 <tcp_process+0x24>
 8019c7a:	4ba5      	ldr	r3, [pc, #660]	; (8019f10 <tcp_process+0x2ac>)
 8019c7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8019c80:	49a4      	ldr	r1, [pc, #656]	; (8019f14 <tcp_process+0x2b0>)
 8019c82:	48a5      	ldr	r0, [pc, #660]	; (8019f18 <tcp_process+0x2b4>)
 8019c84:	f006 f9be 	bl	8020004 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8019c88:	4ba4      	ldr	r3, [pc, #656]	; (8019f1c <tcp_process+0x2b8>)
 8019c8a:	781b      	ldrb	r3, [r3, #0]
 8019c8c:	f003 0304 	and.w	r3, r3, #4
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d04e      	beq.n	8019d32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	7d1b      	ldrb	r3, [r3, #20]
 8019c98:	2b02      	cmp	r3, #2
 8019c9a:	d108      	bne.n	8019cae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019ca0:	4b9f      	ldr	r3, [pc, #636]	; (8019f20 <tcp_process+0x2bc>)
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	429a      	cmp	r2, r3
 8019ca6:	d123      	bne.n	8019cf0 <tcp_process+0x8c>
        acceptable = 1;
 8019ca8:	2301      	movs	r3, #1
 8019caa:	76fb      	strb	r3, [r7, #27]
 8019cac:	e020      	b.n	8019cf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019cb2:	4b9c      	ldr	r3, [pc, #624]	; (8019f24 <tcp_process+0x2c0>)
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	429a      	cmp	r2, r3
 8019cb8:	d102      	bne.n	8019cc0 <tcp_process+0x5c>
        acceptable = 1;
 8019cba:	2301      	movs	r3, #1
 8019cbc:	76fb      	strb	r3, [r7, #27]
 8019cbe:	e017      	b.n	8019cf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019cc0:	4b98      	ldr	r3, [pc, #608]	; (8019f24 <tcp_process+0x2c0>)
 8019cc2:	681a      	ldr	r2, [r3, #0]
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cc8:	1ad3      	subs	r3, r2, r3
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	db10      	blt.n	8019cf0 <tcp_process+0x8c>
 8019cce:	4b95      	ldr	r3, [pc, #596]	; (8019f24 <tcp_process+0x2c0>)
 8019cd0:	681a      	ldr	r2, [r3, #0]
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cd6:	6879      	ldr	r1, [r7, #4]
 8019cd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019cda:	440b      	add	r3, r1
 8019cdc:	1ad3      	subs	r3, r2, r3
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	dc06      	bgt.n	8019cf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	8b5b      	ldrh	r3, [r3, #26]
 8019ce6:	f043 0302 	orr.w	r3, r3, #2
 8019cea:	b29a      	uxth	r2, r3
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8019cf0:	7efb      	ldrb	r3, [r7, #27]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d01b      	beq.n	8019d2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	7d1b      	ldrb	r3, [r3, #20]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d106      	bne.n	8019d0c <tcp_process+0xa8>
 8019cfe:	4b84      	ldr	r3, [pc, #528]	; (8019f10 <tcp_process+0x2ac>)
 8019d00:	f44f 724e 	mov.w	r2, #824	; 0x338
 8019d04:	4988      	ldr	r1, [pc, #544]	; (8019f28 <tcp_process+0x2c4>)
 8019d06:	4884      	ldr	r0, [pc, #528]	; (8019f18 <tcp_process+0x2b4>)
 8019d08:	f006 f97c 	bl	8020004 <iprintf>
      recv_flags |= TF_RESET;
 8019d0c:	4b87      	ldr	r3, [pc, #540]	; (8019f2c <tcp_process+0x2c8>)
 8019d0e:	781b      	ldrb	r3, [r3, #0]
 8019d10:	f043 0308 	orr.w	r3, r3, #8
 8019d14:	b2da      	uxtb	r2, r3
 8019d16:	4b85      	ldr	r3, [pc, #532]	; (8019f2c <tcp_process+0x2c8>)
 8019d18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	8b5b      	ldrh	r3, [r3, #26]
 8019d1e:	f023 0301 	bic.w	r3, r3, #1
 8019d22:	b29a      	uxth	r2, r3
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8019d28:	f06f 030d 	mvn.w	r3, #13
 8019d2c:	e37a      	b.n	801a424 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	e378      	b.n	801a424 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8019d32:	4b7a      	ldr	r3, [pc, #488]	; (8019f1c <tcp_process+0x2b8>)
 8019d34:	781b      	ldrb	r3, [r3, #0]
 8019d36:	f003 0302 	and.w	r3, r3, #2
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d010      	beq.n	8019d60 <tcp_process+0xfc>
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	7d1b      	ldrb	r3, [r3, #20]
 8019d42:	2b02      	cmp	r3, #2
 8019d44:	d00c      	beq.n	8019d60 <tcp_process+0xfc>
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	7d1b      	ldrb	r3, [r3, #20]
 8019d4a:	2b03      	cmp	r3, #3
 8019d4c:	d008      	beq.n	8019d60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	8b5b      	ldrh	r3, [r3, #26]
 8019d52:	f043 0302 	orr.w	r3, r3, #2
 8019d56:	b29a      	uxth	r2, r3
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	e361      	b.n	801a424 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	8b5b      	ldrh	r3, [r3, #26]
 8019d64:	f003 0310 	and.w	r3, r3, #16
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d103      	bne.n	8019d74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8019d6c:	4b70      	ldr	r3, [pc, #448]	; (8019f30 <tcp_process+0x2cc>)
 8019d6e:	681a      	ldr	r2, [r3, #0]
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	2200      	movs	r2, #0
 8019d78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	2200      	movs	r2, #0
 8019d80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8019d84:	6878      	ldr	r0, [r7, #4]
 8019d86:	f001 fc2d 	bl	801b5e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	7d1b      	ldrb	r3, [r3, #20]
 8019d8e:	3b02      	subs	r3, #2
 8019d90:	2b07      	cmp	r3, #7
 8019d92:	f200 8337 	bhi.w	801a404 <tcp_process+0x7a0>
 8019d96:	a201      	add	r2, pc, #4	; (adr r2, 8019d9c <tcp_process+0x138>)
 8019d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d9c:	08019dbd 	.word	0x08019dbd
 8019da0:	08019fed 	.word	0x08019fed
 8019da4:	0801a165 	.word	0x0801a165
 8019da8:	0801a18f 	.word	0x0801a18f
 8019dac:	0801a2b3 	.word	0x0801a2b3
 8019db0:	0801a165 	.word	0x0801a165
 8019db4:	0801a33f 	.word	0x0801a33f
 8019db8:	0801a3cf 	.word	0x0801a3cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8019dbc:	4b57      	ldr	r3, [pc, #348]	; (8019f1c <tcp_process+0x2b8>)
 8019dbe:	781b      	ldrb	r3, [r3, #0]
 8019dc0:	f003 0310 	and.w	r3, r3, #16
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	f000 80e4 	beq.w	8019f92 <tcp_process+0x32e>
 8019dca:	4b54      	ldr	r3, [pc, #336]	; (8019f1c <tcp_process+0x2b8>)
 8019dcc:	781b      	ldrb	r3, [r3, #0]
 8019dce:	f003 0302 	and.w	r3, r3, #2
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	f000 80dd 	beq.w	8019f92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ddc:	1c5a      	adds	r2, r3, #1
 8019dde:	4b50      	ldr	r3, [pc, #320]	; (8019f20 <tcp_process+0x2bc>)
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	429a      	cmp	r2, r3
 8019de4:	f040 80d5 	bne.w	8019f92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8019de8:	4b4e      	ldr	r3, [pc, #312]	; (8019f24 <tcp_process+0x2c0>)
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	1c5a      	adds	r2, r3, #1
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8019dfa:	4b49      	ldr	r3, [pc, #292]	; (8019f20 <tcp_process+0x2bc>)
 8019dfc:	681a      	ldr	r2, [r3, #0]
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8019e02:	4b4c      	ldr	r3, [pc, #304]	; (8019f34 <tcp_process+0x2d0>)
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	89db      	ldrh	r3, [r3, #14]
 8019e08:	b29a      	uxth	r2, r3
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019e1c:	4b41      	ldr	r3, [pc, #260]	; (8019f24 <tcp_process+0x2c0>)
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	1e5a      	subs	r2, r3, #1
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2204      	movs	r2, #4
 8019e2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	3304      	adds	r3, #4
 8019e34:	4618      	mov	r0, r3
 8019e36:	f7fa faad 	bl	8014394 <ip4_route>
 8019e3a:	4601      	mov	r1, r0
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	3304      	adds	r3, #4
 8019e40:	461a      	mov	r2, r3
 8019e42:	4620      	mov	r0, r4
 8019e44:	f7ff f88e 	bl	8018f64 <tcp_eff_send_mss_netif>
 8019e48:	4603      	mov	r3, r0
 8019e4a:	461a      	mov	r2, r3
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e54:	009a      	lsls	r2, r3, #2
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e5a:	005b      	lsls	r3, r3, #1
 8019e5c:	f241 111c 	movw	r1, #4380	; 0x111c
 8019e60:	428b      	cmp	r3, r1
 8019e62:	bf38      	it	cc
 8019e64:	460b      	movcc	r3, r1
 8019e66:	429a      	cmp	r2, r3
 8019e68:	d204      	bcs.n	8019e74 <tcp_process+0x210>
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e6e:	009b      	lsls	r3, r3, #2
 8019e70:	b29b      	uxth	r3, r3
 8019e72:	e00d      	b.n	8019e90 <tcp_process+0x22c>
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e78:	005b      	lsls	r3, r3, #1
 8019e7a:	f241 121c 	movw	r2, #4380	; 0x111c
 8019e7e:	4293      	cmp	r3, r2
 8019e80:	d904      	bls.n	8019e8c <tcp_process+0x228>
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019e86:	005b      	lsls	r3, r3, #1
 8019e88:	b29b      	uxth	r3, r3
 8019e8a:	e001      	b.n	8019e90 <tcp_process+0x22c>
 8019e8c:	f241 131c 	movw	r3, #4380	; 0x111c
 8019e90:	687a      	ldr	r2, [r7, #4]
 8019e92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d106      	bne.n	8019eae <tcp_process+0x24a>
 8019ea0:	4b1b      	ldr	r3, [pc, #108]	; (8019f10 <tcp_process+0x2ac>)
 8019ea2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8019ea6:	4924      	ldr	r1, [pc, #144]	; (8019f38 <tcp_process+0x2d4>)
 8019ea8:	481b      	ldr	r0, [pc, #108]	; (8019f18 <tcp_process+0x2b4>)
 8019eaa:	f006 f8ab 	bl	8020004 <iprintf>
        --pcb->snd_queuelen;
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019eb4:	3b01      	subs	r3, #1
 8019eb6:	b29a      	uxth	r2, r3
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ec2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8019ec4:	69fb      	ldr	r3, [r7, #28]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d111      	bne.n	8019eee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ece:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8019ed0:	69fb      	ldr	r3, [r7, #28]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d106      	bne.n	8019ee4 <tcp_process+0x280>
 8019ed6:	4b0e      	ldr	r3, [pc, #56]	; (8019f10 <tcp_process+0x2ac>)
 8019ed8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019edc:	4917      	ldr	r1, [pc, #92]	; (8019f3c <tcp_process+0x2d8>)
 8019ede:	480e      	ldr	r0, [pc, #56]	; (8019f18 <tcp_process+0x2b4>)
 8019ee0:	f006 f890 	bl	8020004 <iprintf>
          pcb->unsent = rseg->next;
 8019ee4:	69fb      	ldr	r3, [r7, #28]
 8019ee6:	681a      	ldr	r2, [r3, #0]
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	66da      	str	r2, [r3, #108]	; 0x6c
 8019eec:	e003      	b.n	8019ef6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8019eee:	69fb      	ldr	r3, [r7, #28]
 8019ef0:	681a      	ldr	r2, [r3, #0]
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8019ef6:	69f8      	ldr	r0, [r7, #28]
 8019ef8:	f7fe fc6f 	bl	80187da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d11d      	bne.n	8019f40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f0a:	861a      	strh	r2, [r3, #48]	; 0x30
 8019f0c:	e01f      	b.n	8019f4e <tcp_process+0x2ea>
 8019f0e:	bf00      	nop
 8019f10:	08026a24 	.word	0x08026a24
 8019f14:	08026c88 	.word	0x08026c88
 8019f18:	08026a9c 	.word	0x08026a9c
 8019f1c:	24004e90 	.word	0x24004e90
 8019f20:	24004e88 	.word	0x24004e88
 8019f24:	24004e84 	.word	0x24004e84
 8019f28:	08026ca4 	.word	0x08026ca4
 8019f2c:	24004e91 	.word	0x24004e91
 8019f30:	2400883c 	.word	0x2400883c
 8019f34:	24004e74 	.word	0x24004e74
 8019f38:	08026cc4 	.word	0x08026cc4
 8019f3c:	08026cdc 	.word	0x08026cdc
        } else {
          pcb->rtime = 0;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	2200      	movs	r2, #0
 8019f44:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	2200      	movs	r2, #0
 8019f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d00a      	beq.n	8019f6e <tcp_process+0x30a>
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019f5e:	687a      	ldr	r2, [r7, #4]
 8019f60:	6910      	ldr	r0, [r2, #16]
 8019f62:	2200      	movs	r2, #0
 8019f64:	6879      	ldr	r1, [r7, #4]
 8019f66:	4798      	blx	r3
 8019f68:	4603      	mov	r3, r0
 8019f6a:	76bb      	strb	r3, [r7, #26]
 8019f6c:	e001      	b.n	8019f72 <tcp_process+0x30e>
 8019f6e:	2300      	movs	r3, #0
 8019f70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8019f72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019f76:	f113 0f0d 	cmn.w	r3, #13
 8019f7a:	d102      	bne.n	8019f82 <tcp_process+0x31e>
          return ERR_ABRT;
 8019f7c:	f06f 030c 	mvn.w	r3, #12
 8019f80:	e250      	b.n	801a424 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	8b5b      	ldrh	r3, [r3, #26]
 8019f86:	f043 0302 	orr.w	r3, r3, #2
 8019f8a:	b29a      	uxth	r2, r3
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8019f90:	e23a      	b.n	801a408 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8019f92:	4b9d      	ldr	r3, [pc, #628]	; (801a208 <tcp_process+0x5a4>)
 8019f94:	781b      	ldrb	r3, [r3, #0]
 8019f96:	f003 0310 	and.w	r3, r3, #16
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	f000 8234 	beq.w	801a408 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019fa0:	4b9a      	ldr	r3, [pc, #616]	; (801a20c <tcp_process+0x5a8>)
 8019fa2:	6819      	ldr	r1, [r3, #0]
 8019fa4:	4b9a      	ldr	r3, [pc, #616]	; (801a210 <tcp_process+0x5ac>)
 8019fa6:	881b      	ldrh	r3, [r3, #0]
 8019fa8:	461a      	mov	r2, r3
 8019faa:	4b9a      	ldr	r3, [pc, #616]	; (801a214 <tcp_process+0x5b0>)
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019fb0:	4b99      	ldr	r3, [pc, #612]	; (801a218 <tcp_process+0x5b4>)
 8019fb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019fb4:	885b      	ldrh	r3, [r3, #2]
 8019fb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019fb8:	4a97      	ldr	r2, [pc, #604]	; (801a218 <tcp_process+0x5b4>)
 8019fba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019fbc:	8812      	ldrh	r2, [r2, #0]
 8019fbe:	b292      	uxth	r2, r2
 8019fc0:	9202      	str	r2, [sp, #8]
 8019fc2:	9301      	str	r3, [sp, #4]
 8019fc4:	4b95      	ldr	r3, [pc, #596]	; (801a21c <tcp_process+0x5b8>)
 8019fc6:	9300      	str	r3, [sp, #0]
 8019fc8:	4b95      	ldr	r3, [pc, #596]	; (801a220 <tcp_process+0x5bc>)
 8019fca:	4602      	mov	r2, r0
 8019fcc:	6878      	ldr	r0, [r7, #4]
 8019fce:	f003 f8db 	bl	801d188 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019fd8:	2b05      	cmp	r3, #5
 8019fda:	f200 8215 	bhi.w	801a408 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	2200      	movs	r2, #0
 8019fe2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8019fe4:	6878      	ldr	r0, [r7, #4]
 8019fe6:	f002 fea5 	bl	801cd34 <tcp_rexmit_rto>
      break;
 8019fea:	e20d      	b.n	801a408 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019fec:	4b86      	ldr	r3, [pc, #536]	; (801a208 <tcp_process+0x5a4>)
 8019fee:	781b      	ldrb	r3, [r3, #0]
 8019ff0:	f003 0310 	and.w	r3, r3, #16
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	f000 80a1 	beq.w	801a13c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019ffa:	4b84      	ldr	r3, [pc, #528]	; (801a20c <tcp_process+0x5a8>)
 8019ffc:	681a      	ldr	r2, [r3, #0]
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a002:	1ad3      	subs	r3, r2, r3
 801a004:	3b01      	subs	r3, #1
 801a006:	2b00      	cmp	r3, #0
 801a008:	db7e      	blt.n	801a108 <tcp_process+0x4a4>
 801a00a:	4b80      	ldr	r3, [pc, #512]	; (801a20c <tcp_process+0x5a8>)
 801a00c:	681a      	ldr	r2, [r3, #0]
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a012:	1ad3      	subs	r3, r2, r3
 801a014:	2b00      	cmp	r3, #0
 801a016:	dc77      	bgt.n	801a108 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	2204      	movs	r2, #4
 801a01c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a022:	2b00      	cmp	r3, #0
 801a024:	d102      	bne.n	801a02c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801a026:	23fa      	movs	r3, #250	; 0xfa
 801a028:	76bb      	strb	r3, [r7, #26]
 801a02a:	e01d      	b.n	801a068 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a030:	699b      	ldr	r3, [r3, #24]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d106      	bne.n	801a044 <tcp_process+0x3e0>
 801a036:	4b7b      	ldr	r3, [pc, #492]	; (801a224 <tcp_process+0x5c0>)
 801a038:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801a03c:	497a      	ldr	r1, [pc, #488]	; (801a228 <tcp_process+0x5c4>)
 801a03e:	487b      	ldr	r0, [pc, #492]	; (801a22c <tcp_process+0x5c8>)
 801a040:	f005 ffe0 	bl	8020004 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a048:	699b      	ldr	r3, [r3, #24]
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d00a      	beq.n	801a064 <tcp_process+0x400>
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a052:	699b      	ldr	r3, [r3, #24]
 801a054:	687a      	ldr	r2, [r7, #4]
 801a056:	6910      	ldr	r0, [r2, #16]
 801a058:	2200      	movs	r2, #0
 801a05a:	6879      	ldr	r1, [r7, #4]
 801a05c:	4798      	blx	r3
 801a05e:	4603      	mov	r3, r0
 801a060:	76bb      	strb	r3, [r7, #26]
 801a062:	e001      	b.n	801a068 <tcp_process+0x404>
 801a064:	23f0      	movs	r3, #240	; 0xf0
 801a066:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801a068:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d00a      	beq.n	801a086 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801a070:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a074:	f113 0f0d 	cmn.w	r3, #13
 801a078:	d002      	beq.n	801a080 <tcp_process+0x41c>
              tcp_abort(pcb);
 801a07a:	6878      	ldr	r0, [r7, #4]
 801a07c:	f7fd fbf0 	bl	8017860 <tcp_abort>
            }
            return ERR_ABRT;
 801a080:	f06f 030c 	mvn.w	r3, #12
 801a084:	e1ce      	b.n	801a424 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801a086:	6878      	ldr	r0, [r7, #4]
 801a088:	f000 fae0 	bl	801a64c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801a08c:	4b68      	ldr	r3, [pc, #416]	; (801a230 <tcp_process+0x5cc>)
 801a08e:	881b      	ldrh	r3, [r3, #0]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d005      	beq.n	801a0a0 <tcp_process+0x43c>
            recv_acked--;
 801a094:	4b66      	ldr	r3, [pc, #408]	; (801a230 <tcp_process+0x5cc>)
 801a096:	881b      	ldrh	r3, [r3, #0]
 801a098:	3b01      	subs	r3, #1
 801a09a:	b29a      	uxth	r2, r3
 801a09c:	4b64      	ldr	r3, [pc, #400]	; (801a230 <tcp_process+0x5cc>)
 801a09e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a0a4:	009a      	lsls	r2, r3, #2
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a0aa:	005b      	lsls	r3, r3, #1
 801a0ac:	f241 111c 	movw	r1, #4380	; 0x111c
 801a0b0:	428b      	cmp	r3, r1
 801a0b2:	bf38      	it	cc
 801a0b4:	460b      	movcc	r3, r1
 801a0b6:	429a      	cmp	r2, r3
 801a0b8:	d204      	bcs.n	801a0c4 <tcp_process+0x460>
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a0be:	009b      	lsls	r3, r3, #2
 801a0c0:	b29b      	uxth	r3, r3
 801a0c2:	e00d      	b.n	801a0e0 <tcp_process+0x47c>
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a0c8:	005b      	lsls	r3, r3, #1
 801a0ca:	f241 121c 	movw	r2, #4380	; 0x111c
 801a0ce:	4293      	cmp	r3, r2
 801a0d0:	d904      	bls.n	801a0dc <tcp_process+0x478>
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a0d6:	005b      	lsls	r3, r3, #1
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	e001      	b.n	801a0e0 <tcp_process+0x47c>
 801a0dc:	f241 131c 	movw	r3, #4380	; 0x111c
 801a0e0:	687a      	ldr	r2, [r7, #4]
 801a0e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801a0e6:	4b53      	ldr	r3, [pc, #332]	; (801a234 <tcp_process+0x5d0>)
 801a0e8:	781b      	ldrb	r3, [r3, #0]
 801a0ea:	f003 0320 	and.w	r3, r3, #32
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d037      	beq.n	801a162 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	8b5b      	ldrh	r3, [r3, #26]
 801a0f6:	f043 0302 	orr.w	r3, r3, #2
 801a0fa:	b29a      	uxth	r2, r3
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	2207      	movs	r2, #7
 801a104:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801a106:	e02c      	b.n	801a162 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a108:	4b40      	ldr	r3, [pc, #256]	; (801a20c <tcp_process+0x5a8>)
 801a10a:	6819      	ldr	r1, [r3, #0]
 801a10c:	4b40      	ldr	r3, [pc, #256]	; (801a210 <tcp_process+0x5ac>)
 801a10e:	881b      	ldrh	r3, [r3, #0]
 801a110:	461a      	mov	r2, r3
 801a112:	4b40      	ldr	r3, [pc, #256]	; (801a214 <tcp_process+0x5b0>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a118:	4b3f      	ldr	r3, [pc, #252]	; (801a218 <tcp_process+0x5b4>)
 801a11a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a11c:	885b      	ldrh	r3, [r3, #2]
 801a11e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a120:	4a3d      	ldr	r2, [pc, #244]	; (801a218 <tcp_process+0x5b4>)
 801a122:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a124:	8812      	ldrh	r2, [r2, #0]
 801a126:	b292      	uxth	r2, r2
 801a128:	9202      	str	r2, [sp, #8]
 801a12a:	9301      	str	r3, [sp, #4]
 801a12c:	4b3b      	ldr	r3, [pc, #236]	; (801a21c <tcp_process+0x5b8>)
 801a12e:	9300      	str	r3, [sp, #0]
 801a130:	4b3b      	ldr	r3, [pc, #236]	; (801a220 <tcp_process+0x5bc>)
 801a132:	4602      	mov	r2, r0
 801a134:	6878      	ldr	r0, [r7, #4]
 801a136:	f003 f827 	bl	801d188 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801a13a:	e167      	b.n	801a40c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801a13c:	4b32      	ldr	r3, [pc, #200]	; (801a208 <tcp_process+0x5a4>)
 801a13e:	781b      	ldrb	r3, [r3, #0]
 801a140:	f003 0302 	and.w	r3, r3, #2
 801a144:	2b00      	cmp	r3, #0
 801a146:	f000 8161 	beq.w	801a40c <tcp_process+0x7a8>
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a14e:	1e5a      	subs	r2, r3, #1
 801a150:	4b30      	ldr	r3, [pc, #192]	; (801a214 <tcp_process+0x5b0>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	429a      	cmp	r2, r3
 801a156:	f040 8159 	bne.w	801a40c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801a15a:	6878      	ldr	r0, [r7, #4]
 801a15c:	f002 fe0c 	bl	801cd78 <tcp_rexmit>
      break;
 801a160:	e154      	b.n	801a40c <tcp_process+0x7a8>
 801a162:	e153      	b.n	801a40c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801a164:	6878      	ldr	r0, [r7, #4]
 801a166:	f000 fa71 	bl	801a64c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801a16a:	4b32      	ldr	r3, [pc, #200]	; (801a234 <tcp_process+0x5d0>)
 801a16c:	781b      	ldrb	r3, [r3, #0]
 801a16e:	f003 0320 	and.w	r3, r3, #32
 801a172:	2b00      	cmp	r3, #0
 801a174:	f000 814c 	beq.w	801a410 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	8b5b      	ldrh	r3, [r3, #26]
 801a17c:	f043 0302 	orr.w	r3, r3, #2
 801a180:	b29a      	uxth	r2, r3
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	2207      	movs	r2, #7
 801a18a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a18c:	e140      	b.n	801a410 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801a18e:	6878      	ldr	r0, [r7, #4]
 801a190:	f000 fa5c 	bl	801a64c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a194:	4b27      	ldr	r3, [pc, #156]	; (801a234 <tcp_process+0x5d0>)
 801a196:	781b      	ldrb	r3, [r3, #0]
 801a198:	f003 0320 	and.w	r3, r3, #32
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d071      	beq.n	801a284 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a1a0:	4b19      	ldr	r3, [pc, #100]	; (801a208 <tcp_process+0x5a4>)
 801a1a2:	781b      	ldrb	r3, [r3, #0]
 801a1a4:	f003 0310 	and.w	r3, r3, #16
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d060      	beq.n	801a26e <tcp_process+0x60a>
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a1b0:	4b16      	ldr	r3, [pc, #88]	; (801a20c <tcp_process+0x5a8>)
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	429a      	cmp	r2, r3
 801a1b6:	d15a      	bne.n	801a26e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d156      	bne.n	801a26e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	8b5b      	ldrh	r3, [r3, #26]
 801a1c4:	f043 0302 	orr.w	r3, r3, #2
 801a1c8:	b29a      	uxth	r2, r3
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801a1ce:	6878      	ldr	r0, [r7, #4]
 801a1d0:	f7fe fdbe 	bl	8018d50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801a1d4:	4b18      	ldr	r3, [pc, #96]	; (801a238 <tcp_process+0x5d4>)
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	687a      	ldr	r2, [r7, #4]
 801a1da:	429a      	cmp	r2, r3
 801a1dc:	d105      	bne.n	801a1ea <tcp_process+0x586>
 801a1de:	4b16      	ldr	r3, [pc, #88]	; (801a238 <tcp_process+0x5d4>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	68db      	ldr	r3, [r3, #12]
 801a1e4:	4a14      	ldr	r2, [pc, #80]	; (801a238 <tcp_process+0x5d4>)
 801a1e6:	6013      	str	r3, [r2, #0]
 801a1e8:	e02e      	b.n	801a248 <tcp_process+0x5e4>
 801a1ea:	4b13      	ldr	r3, [pc, #76]	; (801a238 <tcp_process+0x5d4>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	617b      	str	r3, [r7, #20]
 801a1f0:	e027      	b.n	801a242 <tcp_process+0x5de>
 801a1f2:	697b      	ldr	r3, [r7, #20]
 801a1f4:	68db      	ldr	r3, [r3, #12]
 801a1f6:	687a      	ldr	r2, [r7, #4]
 801a1f8:	429a      	cmp	r2, r3
 801a1fa:	d11f      	bne.n	801a23c <tcp_process+0x5d8>
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	68da      	ldr	r2, [r3, #12]
 801a200:	697b      	ldr	r3, [r7, #20]
 801a202:	60da      	str	r2, [r3, #12]
 801a204:	e020      	b.n	801a248 <tcp_process+0x5e4>
 801a206:	bf00      	nop
 801a208:	24004e90 	.word	0x24004e90
 801a20c:	24004e88 	.word	0x24004e88
 801a210:	24004e8e 	.word	0x24004e8e
 801a214:	24004e84 	.word	0x24004e84
 801a218:	24004e74 	.word	0x24004e74
 801a21c:	24005958 	.word	0x24005958
 801a220:	2400595c 	.word	0x2400595c
 801a224:	08026a24 	.word	0x08026a24
 801a228:	08026cf0 	.word	0x08026cf0
 801a22c:	08026a9c 	.word	0x08026a9c
 801a230:	24004e8c 	.word	0x24004e8c
 801a234:	24004e91 	.word	0x24004e91
 801a238:	24008838 	.word	0x24008838
 801a23c:	697b      	ldr	r3, [r7, #20]
 801a23e:	68db      	ldr	r3, [r3, #12]
 801a240:	617b      	str	r3, [r7, #20]
 801a242:	697b      	ldr	r3, [r7, #20]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d1d4      	bne.n	801a1f2 <tcp_process+0x58e>
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	2200      	movs	r2, #0
 801a24c:	60da      	str	r2, [r3, #12]
 801a24e:	4b77      	ldr	r3, [pc, #476]	; (801a42c <tcp_process+0x7c8>)
 801a250:	2201      	movs	r2, #1
 801a252:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	220a      	movs	r2, #10
 801a258:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801a25a:	4b75      	ldr	r3, [pc, #468]	; (801a430 <tcp_process+0x7cc>)
 801a25c:	681a      	ldr	r2, [r3, #0]
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	60da      	str	r2, [r3, #12]
 801a262:	4a73      	ldr	r2, [pc, #460]	; (801a430 <tcp_process+0x7cc>)
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6013      	str	r3, [r2, #0]
 801a268:	f003 f950 	bl	801d50c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801a26c:	e0d2      	b.n	801a414 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	8b5b      	ldrh	r3, [r3, #26]
 801a272:	f043 0302 	orr.w	r3, r3, #2
 801a276:	b29a      	uxth	r2, r3
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	2208      	movs	r2, #8
 801a280:	751a      	strb	r2, [r3, #20]
      break;
 801a282:	e0c7      	b.n	801a414 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a284:	4b6b      	ldr	r3, [pc, #428]	; (801a434 <tcp_process+0x7d0>)
 801a286:	781b      	ldrb	r3, [r3, #0]
 801a288:	f003 0310 	and.w	r3, r3, #16
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	f000 80c1 	beq.w	801a414 <tcp_process+0x7b0>
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a296:	4b68      	ldr	r3, [pc, #416]	; (801a438 <tcp_process+0x7d4>)
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	429a      	cmp	r2, r3
 801a29c:	f040 80ba 	bne.w	801a414 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	f040 80b5 	bne.w	801a414 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	2206      	movs	r2, #6
 801a2ae:	751a      	strb	r2, [r3, #20]
      break;
 801a2b0:	e0b0      	b.n	801a414 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f000 f9ca 	bl	801a64c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a2b8:	4b60      	ldr	r3, [pc, #384]	; (801a43c <tcp_process+0x7d8>)
 801a2ba:	781b      	ldrb	r3, [r3, #0]
 801a2bc:	f003 0320 	and.w	r3, r3, #32
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	f000 80a9 	beq.w	801a418 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	8b5b      	ldrh	r3, [r3, #26]
 801a2ca:	f043 0302 	orr.w	r3, r3, #2
 801a2ce:	b29a      	uxth	r2, r3
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801a2d4:	6878      	ldr	r0, [r7, #4]
 801a2d6:	f7fe fd3b 	bl	8018d50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a2da:	4b59      	ldr	r3, [pc, #356]	; (801a440 <tcp_process+0x7dc>)
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	687a      	ldr	r2, [r7, #4]
 801a2e0:	429a      	cmp	r2, r3
 801a2e2:	d105      	bne.n	801a2f0 <tcp_process+0x68c>
 801a2e4:	4b56      	ldr	r3, [pc, #344]	; (801a440 <tcp_process+0x7dc>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	68db      	ldr	r3, [r3, #12]
 801a2ea:	4a55      	ldr	r2, [pc, #340]	; (801a440 <tcp_process+0x7dc>)
 801a2ec:	6013      	str	r3, [r2, #0]
 801a2ee:	e013      	b.n	801a318 <tcp_process+0x6b4>
 801a2f0:	4b53      	ldr	r3, [pc, #332]	; (801a440 <tcp_process+0x7dc>)
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	613b      	str	r3, [r7, #16]
 801a2f6:	e00c      	b.n	801a312 <tcp_process+0x6ae>
 801a2f8:	693b      	ldr	r3, [r7, #16]
 801a2fa:	68db      	ldr	r3, [r3, #12]
 801a2fc:	687a      	ldr	r2, [r7, #4]
 801a2fe:	429a      	cmp	r2, r3
 801a300:	d104      	bne.n	801a30c <tcp_process+0x6a8>
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	68da      	ldr	r2, [r3, #12]
 801a306:	693b      	ldr	r3, [r7, #16]
 801a308:	60da      	str	r2, [r3, #12]
 801a30a:	e005      	b.n	801a318 <tcp_process+0x6b4>
 801a30c:	693b      	ldr	r3, [r7, #16]
 801a30e:	68db      	ldr	r3, [r3, #12]
 801a310:	613b      	str	r3, [r7, #16]
 801a312:	693b      	ldr	r3, [r7, #16]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d1ef      	bne.n	801a2f8 <tcp_process+0x694>
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	2200      	movs	r2, #0
 801a31c:	60da      	str	r2, [r3, #12]
 801a31e:	4b43      	ldr	r3, [pc, #268]	; (801a42c <tcp_process+0x7c8>)
 801a320:	2201      	movs	r2, #1
 801a322:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	220a      	movs	r2, #10
 801a328:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a32a:	4b41      	ldr	r3, [pc, #260]	; (801a430 <tcp_process+0x7cc>)
 801a32c:	681a      	ldr	r2, [r3, #0]
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	60da      	str	r2, [r3, #12]
 801a332:	4a3f      	ldr	r2, [pc, #252]	; (801a430 <tcp_process+0x7cc>)
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	6013      	str	r3, [r2, #0]
 801a338:	f003 f8e8 	bl	801d50c <tcp_timer_needed>
      }
      break;
 801a33c:	e06c      	b.n	801a418 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801a33e:	6878      	ldr	r0, [r7, #4]
 801a340:	f000 f984 	bl	801a64c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a344:	4b3b      	ldr	r3, [pc, #236]	; (801a434 <tcp_process+0x7d0>)
 801a346:	781b      	ldrb	r3, [r3, #0]
 801a348:	f003 0310 	and.w	r3, r3, #16
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d065      	beq.n	801a41c <tcp_process+0x7b8>
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a354:	4b38      	ldr	r3, [pc, #224]	; (801a438 <tcp_process+0x7d4>)
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	429a      	cmp	r2, r3
 801a35a:	d15f      	bne.n	801a41c <tcp_process+0x7b8>
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a360:	2b00      	cmp	r3, #0
 801a362:	d15b      	bne.n	801a41c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801a364:	6878      	ldr	r0, [r7, #4]
 801a366:	f7fe fcf3 	bl	8018d50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a36a:	4b35      	ldr	r3, [pc, #212]	; (801a440 <tcp_process+0x7dc>)
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	687a      	ldr	r2, [r7, #4]
 801a370:	429a      	cmp	r2, r3
 801a372:	d105      	bne.n	801a380 <tcp_process+0x71c>
 801a374:	4b32      	ldr	r3, [pc, #200]	; (801a440 <tcp_process+0x7dc>)
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	68db      	ldr	r3, [r3, #12]
 801a37a:	4a31      	ldr	r2, [pc, #196]	; (801a440 <tcp_process+0x7dc>)
 801a37c:	6013      	str	r3, [r2, #0]
 801a37e:	e013      	b.n	801a3a8 <tcp_process+0x744>
 801a380:	4b2f      	ldr	r3, [pc, #188]	; (801a440 <tcp_process+0x7dc>)
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	60fb      	str	r3, [r7, #12]
 801a386:	e00c      	b.n	801a3a2 <tcp_process+0x73e>
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	68db      	ldr	r3, [r3, #12]
 801a38c:	687a      	ldr	r2, [r7, #4]
 801a38e:	429a      	cmp	r2, r3
 801a390:	d104      	bne.n	801a39c <tcp_process+0x738>
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	68da      	ldr	r2, [r3, #12]
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	60da      	str	r2, [r3, #12]
 801a39a:	e005      	b.n	801a3a8 <tcp_process+0x744>
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	68db      	ldr	r3, [r3, #12]
 801a3a0:	60fb      	str	r3, [r7, #12]
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d1ef      	bne.n	801a388 <tcp_process+0x724>
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	60da      	str	r2, [r3, #12]
 801a3ae:	4b1f      	ldr	r3, [pc, #124]	; (801a42c <tcp_process+0x7c8>)
 801a3b0:	2201      	movs	r2, #1
 801a3b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	220a      	movs	r2, #10
 801a3b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a3ba:	4b1d      	ldr	r3, [pc, #116]	; (801a430 <tcp_process+0x7cc>)
 801a3bc:	681a      	ldr	r2, [r3, #0]
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	60da      	str	r2, [r3, #12]
 801a3c2:	4a1b      	ldr	r2, [pc, #108]	; (801a430 <tcp_process+0x7cc>)
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	6013      	str	r3, [r2, #0]
 801a3c8:	f003 f8a0 	bl	801d50c <tcp_timer_needed>
      }
      break;
 801a3cc:	e026      	b.n	801a41c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801a3ce:	6878      	ldr	r0, [r7, #4]
 801a3d0:	f000 f93c 	bl	801a64c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a3d4:	4b17      	ldr	r3, [pc, #92]	; (801a434 <tcp_process+0x7d0>)
 801a3d6:	781b      	ldrb	r3, [r3, #0]
 801a3d8:	f003 0310 	and.w	r3, r3, #16
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d01f      	beq.n	801a420 <tcp_process+0x7bc>
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a3e4:	4b14      	ldr	r3, [pc, #80]	; (801a438 <tcp_process+0x7d4>)
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	429a      	cmp	r2, r3
 801a3ea:	d119      	bne.n	801a420 <tcp_process+0x7bc>
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d115      	bne.n	801a420 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801a3f4:	4b11      	ldr	r3, [pc, #68]	; (801a43c <tcp_process+0x7d8>)
 801a3f6:	781b      	ldrb	r3, [r3, #0]
 801a3f8:	f043 0310 	orr.w	r3, r3, #16
 801a3fc:	b2da      	uxtb	r2, r3
 801a3fe:	4b0f      	ldr	r3, [pc, #60]	; (801a43c <tcp_process+0x7d8>)
 801a400:	701a      	strb	r2, [r3, #0]
      }
      break;
 801a402:	e00d      	b.n	801a420 <tcp_process+0x7bc>
    default:
      break;
 801a404:	bf00      	nop
 801a406:	e00c      	b.n	801a422 <tcp_process+0x7be>
      break;
 801a408:	bf00      	nop
 801a40a:	e00a      	b.n	801a422 <tcp_process+0x7be>
      break;
 801a40c:	bf00      	nop
 801a40e:	e008      	b.n	801a422 <tcp_process+0x7be>
      break;
 801a410:	bf00      	nop
 801a412:	e006      	b.n	801a422 <tcp_process+0x7be>
      break;
 801a414:	bf00      	nop
 801a416:	e004      	b.n	801a422 <tcp_process+0x7be>
      break;
 801a418:	bf00      	nop
 801a41a:	e002      	b.n	801a422 <tcp_process+0x7be>
      break;
 801a41c:	bf00      	nop
 801a41e:	e000      	b.n	801a422 <tcp_process+0x7be>
      break;
 801a420:	bf00      	nop
  }
  return ERR_OK;
 801a422:	2300      	movs	r3, #0
}
 801a424:	4618      	mov	r0, r3
 801a426:	3724      	adds	r7, #36	; 0x24
 801a428:	46bd      	mov	sp, r7
 801a42a:	bd90      	pop	{r4, r7, pc}
 801a42c:	24008834 	.word	0x24008834
 801a430:	24008848 	.word	0x24008848
 801a434:	24004e90 	.word	0x24004e90
 801a438:	24004e88 	.word	0x24004e88
 801a43c:	24004e91 	.word	0x24004e91
 801a440:	24008838 	.word	0x24008838

0801a444 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801a444:	b590      	push	{r4, r7, lr}
 801a446:	b085      	sub	sp, #20
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
 801a44c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d106      	bne.n	801a462 <tcp_oos_insert_segment+0x1e>
 801a454:	4b3b      	ldr	r3, [pc, #236]	; (801a544 <tcp_oos_insert_segment+0x100>)
 801a456:	f240 421f 	movw	r2, #1055	; 0x41f
 801a45a:	493b      	ldr	r1, [pc, #236]	; (801a548 <tcp_oos_insert_segment+0x104>)
 801a45c:	483b      	ldr	r0, [pc, #236]	; (801a54c <tcp_oos_insert_segment+0x108>)
 801a45e:	f005 fdd1 	bl	8020004 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	68db      	ldr	r3, [r3, #12]
 801a466:	899b      	ldrh	r3, [r3, #12]
 801a468:	b29b      	uxth	r3, r3
 801a46a:	4618      	mov	r0, r3
 801a46c:	f7f8 fcbc 	bl	8012de8 <lwip_htons>
 801a470:	4603      	mov	r3, r0
 801a472:	b2db      	uxtb	r3, r3
 801a474:	f003 0301 	and.w	r3, r3, #1
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d028      	beq.n	801a4ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801a47c:	6838      	ldr	r0, [r7, #0]
 801a47e:	f7fe f997 	bl	80187b0 <tcp_segs_free>
    next = NULL;
 801a482:	2300      	movs	r3, #0
 801a484:	603b      	str	r3, [r7, #0]
 801a486:	e056      	b.n	801a536 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a488:	683b      	ldr	r3, [r7, #0]
 801a48a:	68db      	ldr	r3, [r3, #12]
 801a48c:	899b      	ldrh	r3, [r3, #12]
 801a48e:	b29b      	uxth	r3, r3
 801a490:	4618      	mov	r0, r3
 801a492:	f7f8 fca9 	bl	8012de8 <lwip_htons>
 801a496:	4603      	mov	r3, r0
 801a498:	b2db      	uxtb	r3, r3
 801a49a:	f003 0301 	and.w	r3, r3, #1
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d00d      	beq.n	801a4be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	68db      	ldr	r3, [r3, #12]
 801a4a6:	899b      	ldrh	r3, [r3, #12]
 801a4a8:	b29c      	uxth	r4, r3
 801a4aa:	2001      	movs	r0, #1
 801a4ac:	f7f8 fc9c 	bl	8012de8 <lwip_htons>
 801a4b0:	4603      	mov	r3, r0
 801a4b2:	461a      	mov	r2, r3
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	68db      	ldr	r3, [r3, #12]
 801a4b8:	4322      	orrs	r2, r4
 801a4ba:	b292      	uxth	r2, r2
 801a4bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801a4be:	683b      	ldr	r3, [r7, #0]
 801a4c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801a4c2:	683b      	ldr	r3, [r7, #0]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801a4c8:	68f8      	ldr	r0, [r7, #12]
 801a4ca:	f7fe f986 	bl	80187da <tcp_seg_free>
    while (next &&
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d00e      	beq.n	801a4f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	891b      	ldrh	r3, [r3, #8]
 801a4d8:	461a      	mov	r2, r3
 801a4da:	4b1d      	ldr	r3, [pc, #116]	; (801a550 <tcp_oos_insert_segment+0x10c>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	441a      	add	r2, r3
 801a4e0:	683b      	ldr	r3, [r7, #0]
 801a4e2:	68db      	ldr	r3, [r3, #12]
 801a4e4:	685b      	ldr	r3, [r3, #4]
 801a4e6:	6839      	ldr	r1, [r7, #0]
 801a4e8:	8909      	ldrh	r1, [r1, #8]
 801a4ea:	440b      	add	r3, r1
 801a4ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	daca      	bge.n	801a488 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801a4f2:	683b      	ldr	r3, [r7, #0]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d01e      	beq.n	801a536 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	891b      	ldrh	r3, [r3, #8]
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	4b14      	ldr	r3, [pc, #80]	; (801a550 <tcp_oos_insert_segment+0x10c>)
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	441a      	add	r2, r3
 801a504:	683b      	ldr	r3, [r7, #0]
 801a506:	68db      	ldr	r3, [r3, #12]
 801a508:	685b      	ldr	r3, [r3, #4]
 801a50a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	dd12      	ble.n	801a536 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801a510:	683b      	ldr	r3, [r7, #0]
 801a512:	68db      	ldr	r3, [r3, #12]
 801a514:	685b      	ldr	r3, [r3, #4]
 801a516:	b29a      	uxth	r2, r3
 801a518:	4b0d      	ldr	r3, [pc, #52]	; (801a550 <tcp_oos_insert_segment+0x10c>)
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	b29b      	uxth	r3, r3
 801a51e:	1ad3      	subs	r3, r2, r3
 801a520:	b29a      	uxth	r2, r3
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	685a      	ldr	r2, [r3, #4]
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	891b      	ldrh	r3, [r3, #8]
 801a52e:	4619      	mov	r1, r3
 801a530:	4610      	mov	r0, r2
 801a532:	f7fc f9cf 	bl	80168d4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	683a      	ldr	r2, [r7, #0]
 801a53a:	601a      	str	r2, [r3, #0]
}
 801a53c:	bf00      	nop
 801a53e:	3714      	adds	r7, #20
 801a540:	46bd      	mov	sp, r7
 801a542:	bd90      	pop	{r4, r7, pc}
 801a544:	08026a24 	.word	0x08026a24
 801a548:	08026d10 	.word	0x08026d10
 801a54c:	08026a9c 	.word	0x08026a9c
 801a550:	24004e84 	.word	0x24004e84

0801a554 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801a554:	b5b0      	push	{r4, r5, r7, lr}
 801a556:	b086      	sub	sp, #24
 801a558:	af00      	add	r7, sp, #0
 801a55a:	60f8      	str	r0, [r7, #12]
 801a55c:	60b9      	str	r1, [r7, #8]
 801a55e:	607a      	str	r2, [r7, #4]
 801a560:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801a562:	e03e      	b.n	801a5e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801a568:	68bb      	ldr	r3, [r7, #8]
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801a56e:	697b      	ldr	r3, [r7, #20]
 801a570:	685b      	ldr	r3, [r3, #4]
 801a572:	4618      	mov	r0, r3
 801a574:	f7fc fbbc 	bl	8016cf0 <pbuf_clen>
 801a578:	4603      	mov	r3, r0
 801a57a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a582:	8a7a      	ldrh	r2, [r7, #18]
 801a584:	429a      	cmp	r2, r3
 801a586:	d906      	bls.n	801a596 <tcp_free_acked_segments+0x42>
 801a588:	4b2a      	ldr	r3, [pc, #168]	; (801a634 <tcp_free_acked_segments+0xe0>)
 801a58a:	f240 4257 	movw	r2, #1111	; 0x457
 801a58e:	492a      	ldr	r1, [pc, #168]	; (801a638 <tcp_free_acked_segments+0xe4>)
 801a590:	482a      	ldr	r0, [pc, #168]	; (801a63c <tcp_free_acked_segments+0xe8>)
 801a592:	f005 fd37 	bl	8020004 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801a59c:	8a7b      	ldrh	r3, [r7, #18]
 801a59e:	1ad3      	subs	r3, r2, r3
 801a5a0:	b29a      	uxth	r2, r3
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801a5a8:	697b      	ldr	r3, [r7, #20]
 801a5aa:	891a      	ldrh	r2, [r3, #8]
 801a5ac:	4b24      	ldr	r3, [pc, #144]	; (801a640 <tcp_free_acked_segments+0xec>)
 801a5ae:	881b      	ldrh	r3, [r3, #0]
 801a5b0:	4413      	add	r3, r2
 801a5b2:	b29a      	uxth	r2, r3
 801a5b4:	4b22      	ldr	r3, [pc, #136]	; (801a640 <tcp_free_acked_segments+0xec>)
 801a5b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801a5b8:	6978      	ldr	r0, [r7, #20]
 801a5ba:	f7fe f90e 	bl	80187da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d00c      	beq.n	801a5e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801a5c8:	68bb      	ldr	r3, [r7, #8]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d109      	bne.n	801a5e2 <tcp_free_acked_segments+0x8e>
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d106      	bne.n	801a5e2 <tcp_free_acked_segments+0x8e>
 801a5d4:	4b17      	ldr	r3, [pc, #92]	; (801a634 <tcp_free_acked_segments+0xe0>)
 801a5d6:	f240 4261 	movw	r2, #1121	; 0x461
 801a5da:	491a      	ldr	r1, [pc, #104]	; (801a644 <tcp_free_acked_segments+0xf0>)
 801a5dc:	4817      	ldr	r0, [pc, #92]	; (801a63c <tcp_free_acked_segments+0xe8>)
 801a5de:	f005 fd11 	bl	8020004 <iprintf>
  while (seg_list != NULL &&
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d020      	beq.n	801a62a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801a5e8:	68bb      	ldr	r3, [r7, #8]
 801a5ea:	68db      	ldr	r3, [r3, #12]
 801a5ec:	685b      	ldr	r3, [r3, #4]
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f7f8 fc0f 	bl	8012e12 <lwip_htonl>
 801a5f4:	4604      	mov	r4, r0
 801a5f6:	68bb      	ldr	r3, [r7, #8]
 801a5f8:	891b      	ldrh	r3, [r3, #8]
 801a5fa:	461d      	mov	r5, r3
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	68db      	ldr	r3, [r3, #12]
 801a600:	899b      	ldrh	r3, [r3, #12]
 801a602:	b29b      	uxth	r3, r3
 801a604:	4618      	mov	r0, r3
 801a606:	f7f8 fbef 	bl	8012de8 <lwip_htons>
 801a60a:	4603      	mov	r3, r0
 801a60c:	b2db      	uxtb	r3, r3
 801a60e:	f003 0303 	and.w	r3, r3, #3
 801a612:	2b00      	cmp	r3, #0
 801a614:	d001      	beq.n	801a61a <tcp_free_acked_segments+0xc6>
 801a616:	2301      	movs	r3, #1
 801a618:	e000      	b.n	801a61c <tcp_free_acked_segments+0xc8>
 801a61a:	2300      	movs	r3, #0
 801a61c:	442b      	add	r3, r5
 801a61e:	18e2      	adds	r2, r4, r3
 801a620:	4b09      	ldr	r3, [pc, #36]	; (801a648 <tcp_free_acked_segments+0xf4>)
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801a626:	2b00      	cmp	r3, #0
 801a628:	dd9c      	ble.n	801a564 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801a62a:	68bb      	ldr	r3, [r7, #8]
}
 801a62c:	4618      	mov	r0, r3
 801a62e:	3718      	adds	r7, #24
 801a630:	46bd      	mov	sp, r7
 801a632:	bdb0      	pop	{r4, r5, r7, pc}
 801a634:	08026a24 	.word	0x08026a24
 801a638:	08026d38 	.word	0x08026d38
 801a63c:	08026a9c 	.word	0x08026a9c
 801a640:	24004e8c 	.word	0x24004e8c
 801a644:	08026d60 	.word	0x08026d60
 801a648:	24004e88 	.word	0x24004e88

0801a64c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801a64c:	b5b0      	push	{r4, r5, r7, lr}
 801a64e:	b094      	sub	sp, #80	; 0x50
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801a654:	2300      	movs	r3, #0
 801a656:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d106      	bne.n	801a66c <tcp_receive+0x20>
 801a65e:	4ba6      	ldr	r3, [pc, #664]	; (801a8f8 <tcp_receive+0x2ac>)
 801a660:	f240 427b 	movw	r2, #1147	; 0x47b
 801a664:	49a5      	ldr	r1, [pc, #660]	; (801a8fc <tcp_receive+0x2b0>)
 801a666:	48a6      	ldr	r0, [pc, #664]	; (801a900 <tcp_receive+0x2b4>)
 801a668:	f005 fccc 	bl	8020004 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	7d1b      	ldrb	r3, [r3, #20]
 801a670:	2b03      	cmp	r3, #3
 801a672:	d806      	bhi.n	801a682 <tcp_receive+0x36>
 801a674:	4ba0      	ldr	r3, [pc, #640]	; (801a8f8 <tcp_receive+0x2ac>)
 801a676:	f240 427c 	movw	r2, #1148	; 0x47c
 801a67a:	49a2      	ldr	r1, [pc, #648]	; (801a904 <tcp_receive+0x2b8>)
 801a67c:	48a0      	ldr	r0, [pc, #640]	; (801a900 <tcp_receive+0x2b4>)
 801a67e:	f005 fcc1 	bl	8020004 <iprintf>

  if (flags & TCP_ACK) {
 801a682:	4ba1      	ldr	r3, [pc, #644]	; (801a908 <tcp_receive+0x2bc>)
 801a684:	781b      	ldrb	r3, [r3, #0]
 801a686:	f003 0310 	and.w	r3, r3, #16
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	f000 8263 	beq.w	801ab56 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a696:	461a      	mov	r2, r3
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a69c:	4413      	add	r3, r2
 801a69e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a6a4:	4b99      	ldr	r3, [pc, #612]	; (801a90c <tcp_receive+0x2c0>)
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	1ad3      	subs	r3, r2, r3
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	db1b      	blt.n	801a6e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a6b2:	4b96      	ldr	r3, [pc, #600]	; (801a90c <tcp_receive+0x2c0>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801a6b6:	429a      	cmp	r2, r3
 801a6b8:	d106      	bne.n	801a6c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a6be:	4b94      	ldr	r3, [pc, #592]	; (801a910 <tcp_receive+0x2c4>)
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	1ad3      	subs	r3, r2, r3
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	db0e      	blt.n	801a6e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a6cc:	4b90      	ldr	r3, [pc, #576]	; (801a910 <tcp_receive+0x2c4>)
 801a6ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801a6d0:	429a      	cmp	r2, r3
 801a6d2:	d125      	bne.n	801a720 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801a6d4:	4b8f      	ldr	r3, [pc, #572]	; (801a914 <tcp_receive+0x2c8>)
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	89db      	ldrh	r3, [r3, #14]
 801a6da:	b29a      	uxth	r2, r3
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a6e2:	429a      	cmp	r2, r3
 801a6e4:	d91c      	bls.n	801a720 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801a6e6:	4b8b      	ldr	r3, [pc, #556]	; (801a914 <tcp_receive+0x2c8>)
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	89db      	ldrh	r3, [r3, #14]
 801a6ec:	b29a      	uxth	r2, r3
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a700:	429a      	cmp	r2, r3
 801a702:	d205      	bcs.n	801a710 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801a710:	4b7e      	ldr	r3, [pc, #504]	; (801a90c <tcp_receive+0x2c0>)
 801a712:	681a      	ldr	r2, [r3, #0]
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801a718:	4b7d      	ldr	r3, [pc, #500]	; (801a910 <tcp_receive+0x2c4>)
 801a71a:	681a      	ldr	r2, [r3, #0]
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801a720:	4b7b      	ldr	r3, [pc, #492]	; (801a910 <tcp_receive+0x2c4>)
 801a722:	681a      	ldr	r2, [r3, #0]
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a728:	1ad3      	subs	r3, r2, r3
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	dc58      	bgt.n	801a7e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801a72e:	4b7a      	ldr	r3, [pc, #488]	; (801a918 <tcp_receive+0x2cc>)
 801a730:	881b      	ldrh	r3, [r3, #0]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d14b      	bne.n	801a7ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a73a:	687a      	ldr	r2, [r7, #4]
 801a73c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801a740:	4413      	add	r3, r2
 801a742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a744:	429a      	cmp	r2, r3
 801a746:	d142      	bne.n	801a7ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a74e:	2b00      	cmp	r3, #0
 801a750:	db3d      	blt.n	801a7ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a756:	4b6e      	ldr	r3, [pc, #440]	; (801a910 <tcp_receive+0x2c4>)
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	429a      	cmp	r2, r3
 801a75c:	d137      	bne.n	801a7ce <tcp_receive+0x182>
              found_dupack = 1;
 801a75e:	2301      	movs	r3, #1
 801a760:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a768:	2bff      	cmp	r3, #255	; 0xff
 801a76a:	d007      	beq.n	801a77c <tcp_receive+0x130>
                ++pcb->dupacks;
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a772:	3301      	adds	r3, #1
 801a774:	b2da      	uxtb	r2, r3
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a782:	2b03      	cmp	r3, #3
 801a784:	d91b      	bls.n	801a7be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a790:	4413      	add	r3, r2
 801a792:	b29a      	uxth	r2, r3
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a79a:	429a      	cmp	r2, r3
 801a79c:	d30a      	bcc.n	801a7b4 <tcp_receive+0x168>
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7a8:	4413      	add	r3, r2
 801a7aa:	b29a      	uxth	r2, r3
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a7b2:	e004      	b.n	801a7be <tcp_receive+0x172>
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a7ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a7c4:	2b02      	cmp	r3, #2
 801a7c6:	d902      	bls.n	801a7ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801a7c8:	6878      	ldr	r0, [r7, #4]
 801a7ca:	f002 fb41 	bl	801ce50 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801a7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	f040 8160 	bne.w	801aa96 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	2200      	movs	r2, #0
 801a7da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a7de:	e15a      	b.n	801aa96 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a7e0:	4b4b      	ldr	r3, [pc, #300]	; (801a910 <tcp_receive+0x2c4>)
 801a7e2:	681a      	ldr	r2, [r3, #0]
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a7e8:	1ad3      	subs	r3, r2, r3
 801a7ea:	3b01      	subs	r3, #1
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	f2c0 814d 	blt.w	801aa8c <tcp_receive+0x440>
 801a7f2:	4b47      	ldr	r3, [pc, #284]	; (801a910 <tcp_receive+0x2c4>)
 801a7f4:	681a      	ldr	r2, [r3, #0]
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a7fa:	1ad3      	subs	r3, r2, r3
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	f300 8145 	bgt.w	801aa8c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	8b5b      	ldrh	r3, [r3, #26]
 801a806:	f003 0304 	and.w	r3, r3, #4
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d010      	beq.n	801a830 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	8b5b      	ldrh	r3, [r3, #26]
 801a812:	f023 0304 	bic.w	r3, r3, #4
 801a816:	b29a      	uxth	r2, r3
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	2200      	movs	r2, #0
 801a82c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	2200      	movs	r2, #0
 801a834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a83e:	10db      	asrs	r3, r3, #3
 801a840:	b21b      	sxth	r3, r3
 801a842:	b29a      	uxth	r2, r3
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a84a:	b29b      	uxth	r3, r3
 801a84c:	4413      	add	r3, r2
 801a84e:	b29b      	uxth	r3, r3
 801a850:	b21a      	sxth	r2, r3
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801a858:	4b2d      	ldr	r3, [pc, #180]	; (801a910 <tcp_receive+0x2c4>)
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	b29a      	uxth	r2, r3
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a862:	b29b      	uxth	r3, r3
 801a864:	1ad3      	subs	r3, r2, r3
 801a866:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	2200      	movs	r2, #0
 801a86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801a870:	4b27      	ldr	r3, [pc, #156]	; (801a910 <tcp_receive+0x2c4>)
 801a872:	681a      	ldr	r2, [r3, #0]
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	7d1b      	ldrb	r3, [r3, #20]
 801a87c:	2b03      	cmp	r3, #3
 801a87e:	f240 8096 	bls.w	801a9ae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a88e:	429a      	cmp	r2, r3
 801a890:	d244      	bcs.n	801a91c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	8b5b      	ldrh	r3, [r3, #26]
 801a896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d001      	beq.n	801a8a2 <tcp_receive+0x256>
 801a89e:	2301      	movs	r3, #1
 801a8a0:	e000      	b.n	801a8a4 <tcp_receive+0x258>
 801a8a2:	2302      	movs	r3, #2
 801a8a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801a8a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801a8ac:	b29a      	uxth	r2, r3
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a8b2:	fb12 f303 	smulbb	r3, r2, r3
 801a8b6:	b29b      	uxth	r3, r3
 801a8b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801a8ba:	4293      	cmp	r3, r2
 801a8bc:	bf28      	it	cs
 801a8be:	4613      	movcs	r3, r2
 801a8c0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a8c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a8ca:	4413      	add	r3, r2
 801a8cc:	b29a      	uxth	r2, r3
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a8d4:	429a      	cmp	r2, r3
 801a8d6:	d309      	bcc.n	801a8ec <tcp_receive+0x2a0>
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a8de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a8e0:	4413      	add	r3, r2
 801a8e2:	b29a      	uxth	r2, r3
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a8ea:	e060      	b.n	801a9ae <tcp_receive+0x362>
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a8f6:	e05a      	b.n	801a9ae <tcp_receive+0x362>
 801a8f8:	08026a24 	.word	0x08026a24
 801a8fc:	08026d80 	.word	0x08026d80
 801a900:	08026a9c 	.word	0x08026a9c
 801a904:	08026d9c 	.word	0x08026d9c
 801a908:	24004e90 	.word	0x24004e90
 801a90c:	24004e84 	.word	0x24004e84
 801a910:	24004e88 	.word	0x24004e88
 801a914:	24004e74 	.word	0x24004e74
 801a918:	24004e8e 	.word	0x24004e8e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a924:	4413      	add	r3, r2
 801a926:	b29a      	uxth	r2, r3
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801a92e:	429a      	cmp	r2, r3
 801a930:	d309      	bcc.n	801a946 <tcp_receive+0x2fa>
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a938:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801a93a:	4413      	add	r3, r2
 801a93c:	b29a      	uxth	r2, r3
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801a944:	e004      	b.n	801a950 <tcp_receive+0x304>
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a94c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a95c:	429a      	cmp	r2, r3
 801a95e:	d326      	bcc.n	801a9ae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a96c:	1ad3      	subs	r3, r2, r3
 801a96e:	b29a      	uxth	r2, r3
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a980:	4413      	add	r3, r2
 801a982:	b29a      	uxth	r2, r3
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a98a:	429a      	cmp	r2, r3
 801a98c:	d30a      	bcc.n	801a9a4 <tcp_receive+0x358>
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a998:	4413      	add	r3, r2
 801a99a:	b29a      	uxth	r2, r3
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801a9a2:	e004      	b.n	801a9ae <tcp_receive+0x362>
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a9aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9b6:	4a98      	ldr	r2, [pc, #608]	; (801ac18 <tcp_receive+0x5cc>)
 801a9b8:	6878      	ldr	r0, [r7, #4]
 801a9ba:	f7ff fdcb 	bl	801a554 <tcp_free_acked_segments>
 801a9be:	4602      	mov	r2, r0
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9cc:	4a93      	ldr	r2, [pc, #588]	; (801ac1c <tcp_receive+0x5d0>)
 801a9ce:	6878      	ldr	r0, [r7, #4]
 801a9d0:	f7ff fdc0 	bl	801a554 <tcp_free_acked_segments>
 801a9d4:	4602      	mov	r2, r0
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d104      	bne.n	801a9ec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a9e8:	861a      	strh	r2, [r3, #48]	; 0x30
 801a9ea:	e002      	b.n	801a9f2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d103      	bne.n	801aa08 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	2200      	movs	r2, #0
 801aa04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801aa0e:	4b84      	ldr	r3, [pc, #528]	; (801ac20 <tcp_receive+0x5d4>)
 801aa10:	881b      	ldrh	r3, [r3, #0]
 801aa12:	4413      	add	r3, r2
 801aa14:	b29a      	uxth	r2, r3
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	8b5b      	ldrh	r3, [r3, #26]
 801aa20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d035      	beq.n	801aa94 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d118      	bne.n	801aa62 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d00c      	beq.n	801aa52 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa40:	68db      	ldr	r3, [r3, #12]
 801aa42:	685b      	ldr	r3, [r3, #4]
 801aa44:	4618      	mov	r0, r3
 801aa46:	f7f8 f9e4 	bl	8012e12 <lwip_htonl>
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	dc20      	bgt.n	801aa94 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	8b5b      	ldrh	r3, [r3, #26]
 801aa56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801aa5a:	b29a      	uxth	r2, r3
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801aa60:	e018      	b.n	801aa94 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa6a:	68db      	ldr	r3, [r3, #12]
 801aa6c:	685b      	ldr	r3, [r3, #4]
 801aa6e:	4618      	mov	r0, r3
 801aa70:	f7f8 f9cf 	bl	8012e12 <lwip_htonl>
 801aa74:	4603      	mov	r3, r0
 801aa76:	1ae3      	subs	r3, r4, r3
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	dc0b      	bgt.n	801aa94 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	8b5b      	ldrh	r3, [r3, #26]
 801aa80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801aa84:	b29a      	uxth	r2, r3
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801aa8a:	e003      	b.n	801aa94 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801aa8c:	6878      	ldr	r0, [r7, #4]
 801aa8e:	f002 fbcd 	bl	801d22c <tcp_send_empty_ack>
 801aa92:	e000      	b.n	801aa96 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801aa94:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d05b      	beq.n	801ab56 <tcp_receive+0x50a>
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801aaa2:	4b60      	ldr	r3, [pc, #384]	; (801ac24 <tcp_receive+0x5d8>)
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	1ad3      	subs	r3, r2, r3
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	da54      	bge.n	801ab56 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801aaac:	4b5e      	ldr	r3, [pc, #376]	; (801ac28 <tcp_receive+0x5dc>)
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	b29a      	uxth	r2, r3
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aab6:	b29b      	uxth	r3, r3
 801aab8:	1ad3      	subs	r3, r2, r3
 801aaba:	b29b      	uxth	r3, r3
 801aabc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801aac0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801aaca:	10db      	asrs	r3, r3, #3
 801aacc:	b21b      	sxth	r3, r3
 801aace:	b29b      	uxth	r3, r3
 801aad0:	1ad3      	subs	r3, r2, r3
 801aad2:	b29b      	uxth	r3, r3
 801aad4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801aade:	b29a      	uxth	r2, r3
 801aae0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801aae4:	4413      	add	r3, r2
 801aae6:	b29b      	uxth	r3, r3
 801aae8:	b21a      	sxth	r2, r3
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801aaee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	da05      	bge.n	801ab02 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801aaf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801aafa:	425b      	negs	r3, r3
 801aafc:	b29b      	uxth	r3, r3
 801aafe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801ab02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ab0c:	109b      	asrs	r3, r3, #2
 801ab0e:	b21b      	sxth	r3, r3
 801ab10:	b29b      	uxth	r3, r3
 801ab12:	1ad3      	subs	r3, r2, r3
 801ab14:	b29b      	uxth	r3, r3
 801ab16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ab20:	b29a      	uxth	r2, r3
 801ab22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ab26:	4413      	add	r3, r2
 801ab28:	b29b      	uxth	r3, r3
 801ab2a:	b21a      	sxth	r2, r3
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ab36:	10db      	asrs	r3, r3, #3
 801ab38:	b21b      	sxth	r3, r3
 801ab3a:	b29a      	uxth	r2, r3
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ab42:	b29b      	uxth	r3, r3
 801ab44:	4413      	add	r3, r2
 801ab46:	b29b      	uxth	r3, r3
 801ab48:	b21a      	sxth	r2, r3
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	2200      	movs	r2, #0
 801ab54:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ab56:	4b35      	ldr	r3, [pc, #212]	; (801ac2c <tcp_receive+0x5e0>)
 801ab58:	881b      	ldrh	r3, [r3, #0]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	f000 84e1 	beq.w	801b522 <tcp_receive+0xed6>
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	7d1b      	ldrb	r3, [r3, #20]
 801ab64:	2b06      	cmp	r3, #6
 801ab66:	f200 84dc 	bhi.w	801b522 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ab6e:	4b30      	ldr	r3, [pc, #192]	; (801ac30 <tcp_receive+0x5e4>)
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	1ad3      	subs	r3, r2, r3
 801ab74:	3b01      	subs	r3, #1
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	f2c0 808e 	blt.w	801ac98 <tcp_receive+0x64c>
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ab80:	4b2a      	ldr	r3, [pc, #168]	; (801ac2c <tcp_receive+0x5e0>)
 801ab82:	881b      	ldrh	r3, [r3, #0]
 801ab84:	4619      	mov	r1, r3
 801ab86:	4b2a      	ldr	r3, [pc, #168]	; (801ac30 <tcp_receive+0x5e4>)
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	440b      	add	r3, r1
 801ab8c:	1ad3      	subs	r3, r2, r3
 801ab8e:	3301      	adds	r3, #1
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	f300 8081 	bgt.w	801ac98 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801ab96:	4b27      	ldr	r3, [pc, #156]	; (801ac34 <tcp_receive+0x5e8>)
 801ab98:	685b      	ldr	r3, [r3, #4]
 801ab9a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801aba0:	4b23      	ldr	r3, [pc, #140]	; (801ac30 <tcp_receive+0x5e4>)
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	1ad3      	subs	r3, r2, r3
 801aba6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801aba8:	4b22      	ldr	r3, [pc, #136]	; (801ac34 <tcp_receive+0x5e8>)
 801abaa:	685b      	ldr	r3, [r3, #4]
 801abac:	2b00      	cmp	r3, #0
 801abae:	d106      	bne.n	801abbe <tcp_receive+0x572>
 801abb0:	4b21      	ldr	r3, [pc, #132]	; (801ac38 <tcp_receive+0x5ec>)
 801abb2:	f240 5294 	movw	r2, #1428	; 0x594
 801abb6:	4921      	ldr	r1, [pc, #132]	; (801ac3c <tcp_receive+0x5f0>)
 801abb8:	4821      	ldr	r0, [pc, #132]	; (801ac40 <tcp_receive+0x5f4>)
 801abba:	f005 fa23 	bl	8020004 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801abc4:	4293      	cmp	r3, r2
 801abc6:	d906      	bls.n	801abd6 <tcp_receive+0x58a>
 801abc8:	4b1b      	ldr	r3, [pc, #108]	; (801ac38 <tcp_receive+0x5ec>)
 801abca:	f240 5295 	movw	r2, #1429	; 0x595
 801abce:	491d      	ldr	r1, [pc, #116]	; (801ac44 <tcp_receive+0x5f8>)
 801abd0:	481b      	ldr	r0, [pc, #108]	; (801ac40 <tcp_receive+0x5f4>)
 801abd2:	f005 fa17 	bl	8020004 <iprintf>
      off = (u16_t)off32;
 801abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801abd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801abdc:	4b15      	ldr	r3, [pc, #84]	; (801ac34 <tcp_receive+0x5e8>)
 801abde:	685b      	ldr	r3, [r3, #4]
 801abe0:	891b      	ldrh	r3, [r3, #8]
 801abe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801abe6:	429a      	cmp	r2, r3
 801abe8:	d906      	bls.n	801abf8 <tcp_receive+0x5ac>
 801abea:	4b13      	ldr	r3, [pc, #76]	; (801ac38 <tcp_receive+0x5ec>)
 801abec:	f240 5297 	movw	r2, #1431	; 0x597
 801abf0:	4915      	ldr	r1, [pc, #84]	; (801ac48 <tcp_receive+0x5fc>)
 801abf2:	4813      	ldr	r0, [pc, #76]	; (801ac40 <tcp_receive+0x5f4>)
 801abf4:	f005 fa06 	bl	8020004 <iprintf>
      inseg.len -= off;
 801abf8:	4b0e      	ldr	r3, [pc, #56]	; (801ac34 <tcp_receive+0x5e8>)
 801abfa:	891a      	ldrh	r2, [r3, #8]
 801abfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac00:	1ad3      	subs	r3, r2, r3
 801ac02:	b29a      	uxth	r2, r3
 801ac04:	4b0b      	ldr	r3, [pc, #44]	; (801ac34 <tcp_receive+0x5e8>)
 801ac06:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801ac08:	4b0a      	ldr	r3, [pc, #40]	; (801ac34 <tcp_receive+0x5e8>)
 801ac0a:	685b      	ldr	r3, [r3, #4]
 801ac0c:	891a      	ldrh	r2, [r3, #8]
 801ac0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac12:	1ad3      	subs	r3, r2, r3
 801ac14:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801ac16:	e029      	b.n	801ac6c <tcp_receive+0x620>
 801ac18:	08026db8 	.word	0x08026db8
 801ac1c:	08026dc0 	.word	0x08026dc0
 801ac20:	24004e8c 	.word	0x24004e8c
 801ac24:	24004e88 	.word	0x24004e88
 801ac28:	2400883c 	.word	0x2400883c
 801ac2c:	24004e8e 	.word	0x24004e8e
 801ac30:	24004e84 	.word	0x24004e84
 801ac34:	24004e64 	.word	0x24004e64
 801ac38:	08026a24 	.word	0x08026a24
 801ac3c:	08026dc8 	.word	0x08026dc8
 801ac40:	08026a9c 	.word	0x08026a9c
 801ac44:	08026dd8 	.word	0x08026dd8
 801ac48:	08026de8 	.word	0x08026de8
        off -= p->len;
 801ac4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac4e:	895b      	ldrh	r3, [r3, #10]
 801ac50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac54:	1ad3      	subs	r3, r2, r3
 801ac56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801ac5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ac5e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ac60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac62:	2200      	movs	r2, #0
 801ac64:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801ac66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801ac6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac6e:	895b      	ldrh	r3, [r3, #10]
 801ac70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac74:	429a      	cmp	r2, r3
 801ac76:	d8e9      	bhi.n	801ac4c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801ac78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac7c:	4619      	mov	r1, r3
 801ac7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ac80:	f7fb ff28 	bl	8016ad4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac88:	4a91      	ldr	r2, [pc, #580]	; (801aed0 <tcp_receive+0x884>)
 801ac8a:	6013      	str	r3, [r2, #0]
 801ac8c:	4b91      	ldr	r3, [pc, #580]	; (801aed4 <tcp_receive+0x888>)
 801ac8e:	68db      	ldr	r3, [r3, #12]
 801ac90:	4a8f      	ldr	r2, [pc, #572]	; (801aed0 <tcp_receive+0x884>)
 801ac92:	6812      	ldr	r2, [r2, #0]
 801ac94:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ac96:	e00d      	b.n	801acb4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801ac98:	4b8d      	ldr	r3, [pc, #564]	; (801aed0 <tcp_receive+0x884>)
 801ac9a:	681a      	ldr	r2, [r3, #0]
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aca0:	1ad3      	subs	r3, r2, r3
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	da06      	bge.n	801acb4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	8b5b      	ldrh	r3, [r3, #26]
 801acaa:	f043 0302 	orr.w	r3, r3, #2
 801acae:	b29a      	uxth	r2, r3
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801acb4:	4b86      	ldr	r3, [pc, #536]	; (801aed0 <tcp_receive+0x884>)
 801acb6:	681a      	ldr	r2, [r3, #0]
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acbc:	1ad3      	subs	r3, r2, r3
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	f2c0 842a 	blt.w	801b518 <tcp_receive+0xecc>
 801acc4:	4b82      	ldr	r3, [pc, #520]	; (801aed0 <tcp_receive+0x884>)
 801acc6:	681a      	ldr	r2, [r3, #0]
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801accc:	6879      	ldr	r1, [r7, #4]
 801acce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801acd0:	440b      	add	r3, r1
 801acd2:	1ad3      	subs	r3, r2, r3
 801acd4:	3301      	adds	r3, #1
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	f300 841e 	bgt.w	801b518 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ace0:	4b7b      	ldr	r3, [pc, #492]	; (801aed0 <tcp_receive+0x884>)
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	429a      	cmp	r2, r3
 801ace6:	f040 829a 	bne.w	801b21e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801acea:	4b7a      	ldr	r3, [pc, #488]	; (801aed4 <tcp_receive+0x888>)
 801acec:	891c      	ldrh	r4, [r3, #8]
 801acee:	4b79      	ldr	r3, [pc, #484]	; (801aed4 <tcp_receive+0x888>)
 801acf0:	68db      	ldr	r3, [r3, #12]
 801acf2:	899b      	ldrh	r3, [r3, #12]
 801acf4:	b29b      	uxth	r3, r3
 801acf6:	4618      	mov	r0, r3
 801acf8:	f7f8 f876 	bl	8012de8 <lwip_htons>
 801acfc:	4603      	mov	r3, r0
 801acfe:	b2db      	uxtb	r3, r3
 801ad00:	f003 0303 	and.w	r3, r3, #3
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d001      	beq.n	801ad0c <tcp_receive+0x6c0>
 801ad08:	2301      	movs	r3, #1
 801ad0a:	e000      	b.n	801ad0e <tcp_receive+0x6c2>
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	4423      	add	r3, r4
 801ad10:	b29a      	uxth	r2, r3
 801ad12:	4b71      	ldr	r3, [pc, #452]	; (801aed8 <tcp_receive+0x88c>)
 801ad14:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ad1a:	4b6f      	ldr	r3, [pc, #444]	; (801aed8 <tcp_receive+0x88c>)
 801ad1c:	881b      	ldrh	r3, [r3, #0]
 801ad1e:	429a      	cmp	r2, r3
 801ad20:	d275      	bcs.n	801ae0e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ad22:	4b6c      	ldr	r3, [pc, #432]	; (801aed4 <tcp_receive+0x888>)
 801ad24:	68db      	ldr	r3, [r3, #12]
 801ad26:	899b      	ldrh	r3, [r3, #12]
 801ad28:	b29b      	uxth	r3, r3
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	f7f8 f85c 	bl	8012de8 <lwip_htons>
 801ad30:	4603      	mov	r3, r0
 801ad32:	b2db      	uxtb	r3, r3
 801ad34:	f003 0301 	and.w	r3, r3, #1
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d01f      	beq.n	801ad7c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801ad3c:	4b65      	ldr	r3, [pc, #404]	; (801aed4 <tcp_receive+0x888>)
 801ad3e:	68db      	ldr	r3, [r3, #12]
 801ad40:	899b      	ldrh	r3, [r3, #12]
 801ad42:	b29b      	uxth	r3, r3
 801ad44:	b21b      	sxth	r3, r3
 801ad46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ad4a:	b21c      	sxth	r4, r3
 801ad4c:	4b61      	ldr	r3, [pc, #388]	; (801aed4 <tcp_receive+0x888>)
 801ad4e:	68db      	ldr	r3, [r3, #12]
 801ad50:	899b      	ldrh	r3, [r3, #12]
 801ad52:	b29b      	uxth	r3, r3
 801ad54:	4618      	mov	r0, r3
 801ad56:	f7f8 f847 	bl	8012de8 <lwip_htons>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	b2db      	uxtb	r3, r3
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801ad64:	b29b      	uxth	r3, r3
 801ad66:	4618      	mov	r0, r3
 801ad68:	f7f8 f83e 	bl	8012de8 <lwip_htons>
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	b21b      	sxth	r3, r3
 801ad70:	4323      	orrs	r3, r4
 801ad72:	b21a      	sxth	r2, r3
 801ad74:	4b57      	ldr	r3, [pc, #348]	; (801aed4 <tcp_receive+0x888>)
 801ad76:	68db      	ldr	r3, [r3, #12]
 801ad78:	b292      	uxth	r2, r2
 801ad7a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ad80:	4b54      	ldr	r3, [pc, #336]	; (801aed4 <tcp_receive+0x888>)
 801ad82:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ad84:	4b53      	ldr	r3, [pc, #332]	; (801aed4 <tcp_receive+0x888>)
 801ad86:	68db      	ldr	r3, [r3, #12]
 801ad88:	899b      	ldrh	r3, [r3, #12]
 801ad8a:	b29b      	uxth	r3, r3
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	f7f8 f82b 	bl	8012de8 <lwip_htons>
 801ad92:	4603      	mov	r3, r0
 801ad94:	b2db      	uxtb	r3, r3
 801ad96:	f003 0302 	and.w	r3, r3, #2
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d005      	beq.n	801adaa <tcp_receive+0x75e>
            inseg.len -= 1;
 801ad9e:	4b4d      	ldr	r3, [pc, #308]	; (801aed4 <tcp_receive+0x888>)
 801ada0:	891b      	ldrh	r3, [r3, #8]
 801ada2:	3b01      	subs	r3, #1
 801ada4:	b29a      	uxth	r2, r3
 801ada6:	4b4b      	ldr	r3, [pc, #300]	; (801aed4 <tcp_receive+0x888>)
 801ada8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801adaa:	4b4a      	ldr	r3, [pc, #296]	; (801aed4 <tcp_receive+0x888>)
 801adac:	685b      	ldr	r3, [r3, #4]
 801adae:	4a49      	ldr	r2, [pc, #292]	; (801aed4 <tcp_receive+0x888>)
 801adb0:	8912      	ldrh	r2, [r2, #8]
 801adb2:	4611      	mov	r1, r2
 801adb4:	4618      	mov	r0, r3
 801adb6:	f7fb fd8d 	bl	80168d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801adba:	4b46      	ldr	r3, [pc, #280]	; (801aed4 <tcp_receive+0x888>)
 801adbc:	891c      	ldrh	r4, [r3, #8]
 801adbe:	4b45      	ldr	r3, [pc, #276]	; (801aed4 <tcp_receive+0x888>)
 801adc0:	68db      	ldr	r3, [r3, #12]
 801adc2:	899b      	ldrh	r3, [r3, #12]
 801adc4:	b29b      	uxth	r3, r3
 801adc6:	4618      	mov	r0, r3
 801adc8:	f7f8 f80e 	bl	8012de8 <lwip_htons>
 801adcc:	4603      	mov	r3, r0
 801adce:	b2db      	uxtb	r3, r3
 801add0:	f003 0303 	and.w	r3, r3, #3
 801add4:	2b00      	cmp	r3, #0
 801add6:	d001      	beq.n	801addc <tcp_receive+0x790>
 801add8:	2301      	movs	r3, #1
 801adda:	e000      	b.n	801adde <tcp_receive+0x792>
 801addc:	2300      	movs	r3, #0
 801adde:	4423      	add	r3, r4
 801ade0:	b29a      	uxth	r2, r3
 801ade2:	4b3d      	ldr	r3, [pc, #244]	; (801aed8 <tcp_receive+0x88c>)
 801ade4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ade6:	4b3c      	ldr	r3, [pc, #240]	; (801aed8 <tcp_receive+0x88c>)
 801ade8:	881b      	ldrh	r3, [r3, #0]
 801adea:	461a      	mov	r2, r3
 801adec:	4b38      	ldr	r3, [pc, #224]	; (801aed0 <tcp_receive+0x884>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	441a      	add	r2, r3
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adf6:	6879      	ldr	r1, [r7, #4]
 801adf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801adfa:	440b      	add	r3, r1
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d006      	beq.n	801ae0e <tcp_receive+0x7c2>
 801ae00:	4b36      	ldr	r3, [pc, #216]	; (801aedc <tcp_receive+0x890>)
 801ae02:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801ae06:	4936      	ldr	r1, [pc, #216]	; (801aee0 <tcp_receive+0x894>)
 801ae08:	4836      	ldr	r0, [pc, #216]	; (801aee4 <tcp_receive+0x898>)
 801ae0a:	f005 f8fb 	bl	8020004 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	f000 80e7 	beq.w	801afe6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ae18:	4b2e      	ldr	r3, [pc, #184]	; (801aed4 <tcp_receive+0x888>)
 801ae1a:	68db      	ldr	r3, [r3, #12]
 801ae1c:	899b      	ldrh	r3, [r3, #12]
 801ae1e:	b29b      	uxth	r3, r3
 801ae20:	4618      	mov	r0, r3
 801ae22:	f7f7 ffe1 	bl	8012de8 <lwip_htons>
 801ae26:	4603      	mov	r3, r0
 801ae28:	b2db      	uxtb	r3, r3
 801ae2a:	f003 0301 	and.w	r3, r3, #1
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d010      	beq.n	801ae54 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801ae32:	e00a      	b.n	801ae4a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae38:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae3e:	681a      	ldr	r2, [r3, #0]
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801ae44:	68f8      	ldr	r0, [r7, #12]
 801ae46:	f7fd fcc8 	bl	80187da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d1f0      	bne.n	801ae34 <tcp_receive+0x7e8>
 801ae52:	e0c8      	b.n	801afe6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ae58:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801ae5a:	e052      	b.n	801af02 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801ae5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ae5e:	68db      	ldr	r3, [r3, #12]
 801ae60:	899b      	ldrh	r3, [r3, #12]
 801ae62:	b29b      	uxth	r3, r3
 801ae64:	4618      	mov	r0, r3
 801ae66:	f7f7 ffbf 	bl	8012de8 <lwip_htons>
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	b2db      	uxtb	r3, r3
 801ae6e:	f003 0301 	and.w	r3, r3, #1
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d03d      	beq.n	801aef2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801ae76:	4b17      	ldr	r3, [pc, #92]	; (801aed4 <tcp_receive+0x888>)
 801ae78:	68db      	ldr	r3, [r3, #12]
 801ae7a:	899b      	ldrh	r3, [r3, #12]
 801ae7c:	b29b      	uxth	r3, r3
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7f7 ffb2 	bl	8012de8 <lwip_htons>
 801ae84:	4603      	mov	r3, r0
 801ae86:	b2db      	uxtb	r3, r3
 801ae88:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d130      	bne.n	801aef2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801ae90:	4b10      	ldr	r3, [pc, #64]	; (801aed4 <tcp_receive+0x888>)
 801ae92:	68db      	ldr	r3, [r3, #12]
 801ae94:	899b      	ldrh	r3, [r3, #12]
 801ae96:	b29c      	uxth	r4, r3
 801ae98:	2001      	movs	r0, #1
 801ae9a:	f7f7 ffa5 	bl	8012de8 <lwip_htons>
 801ae9e:	4603      	mov	r3, r0
 801aea0:	461a      	mov	r2, r3
 801aea2:	4b0c      	ldr	r3, [pc, #48]	; (801aed4 <tcp_receive+0x888>)
 801aea4:	68db      	ldr	r3, [r3, #12]
 801aea6:	4322      	orrs	r2, r4
 801aea8:	b292      	uxth	r2, r2
 801aeaa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801aeac:	4b09      	ldr	r3, [pc, #36]	; (801aed4 <tcp_receive+0x888>)
 801aeae:	891c      	ldrh	r4, [r3, #8]
 801aeb0:	4b08      	ldr	r3, [pc, #32]	; (801aed4 <tcp_receive+0x888>)
 801aeb2:	68db      	ldr	r3, [r3, #12]
 801aeb4:	899b      	ldrh	r3, [r3, #12]
 801aeb6:	b29b      	uxth	r3, r3
 801aeb8:	4618      	mov	r0, r3
 801aeba:	f7f7 ff95 	bl	8012de8 <lwip_htons>
 801aebe:	4603      	mov	r3, r0
 801aec0:	b2db      	uxtb	r3, r3
 801aec2:	f003 0303 	and.w	r3, r3, #3
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d00e      	beq.n	801aee8 <tcp_receive+0x89c>
 801aeca:	2301      	movs	r3, #1
 801aecc:	e00d      	b.n	801aeea <tcp_receive+0x89e>
 801aece:	bf00      	nop
 801aed0:	24004e84 	.word	0x24004e84
 801aed4:	24004e64 	.word	0x24004e64
 801aed8:	24004e8e 	.word	0x24004e8e
 801aedc:	08026a24 	.word	0x08026a24
 801aee0:	08026df8 	.word	0x08026df8
 801aee4:	08026a9c 	.word	0x08026a9c
 801aee8:	2300      	movs	r3, #0
 801aeea:	4423      	add	r3, r4
 801aeec:	b29a      	uxth	r2, r3
 801aeee:	4b98      	ldr	r3, [pc, #608]	; (801b150 <tcp_receive+0xb04>)
 801aef0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801aef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aef4:	613b      	str	r3, [r7, #16]
              next = next->next;
 801aef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801aefc:	6938      	ldr	r0, [r7, #16]
 801aefe:	f7fd fc6c 	bl	80187da <tcp_seg_free>
            while (next &&
 801af02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af04:	2b00      	cmp	r3, #0
 801af06:	d00e      	beq.n	801af26 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801af08:	4b91      	ldr	r3, [pc, #580]	; (801b150 <tcp_receive+0xb04>)
 801af0a:	881b      	ldrh	r3, [r3, #0]
 801af0c:	461a      	mov	r2, r3
 801af0e:	4b91      	ldr	r3, [pc, #580]	; (801b154 <tcp_receive+0xb08>)
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	441a      	add	r2, r3
 801af14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af16:	68db      	ldr	r3, [r3, #12]
 801af18:	685b      	ldr	r3, [r3, #4]
 801af1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801af1c:	8909      	ldrh	r1, [r1, #8]
 801af1e:	440b      	add	r3, r1
 801af20:	1ad3      	subs	r3, r2, r3
            while (next &&
 801af22:	2b00      	cmp	r3, #0
 801af24:	da9a      	bge.n	801ae5c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801af26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d059      	beq.n	801afe0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801af2c:	4b88      	ldr	r3, [pc, #544]	; (801b150 <tcp_receive+0xb04>)
 801af2e:	881b      	ldrh	r3, [r3, #0]
 801af30:	461a      	mov	r2, r3
 801af32:	4b88      	ldr	r3, [pc, #544]	; (801b154 <tcp_receive+0xb08>)
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	441a      	add	r2, r3
 801af38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af3a:	68db      	ldr	r3, [r3, #12]
 801af3c:	685b      	ldr	r3, [r3, #4]
 801af3e:	1ad3      	subs	r3, r2, r3
            if (next &&
 801af40:	2b00      	cmp	r3, #0
 801af42:	dd4d      	ble.n	801afe0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801af44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801af46:	68db      	ldr	r3, [r3, #12]
 801af48:	685b      	ldr	r3, [r3, #4]
 801af4a:	b29a      	uxth	r2, r3
 801af4c:	4b81      	ldr	r3, [pc, #516]	; (801b154 <tcp_receive+0xb08>)
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	b29b      	uxth	r3, r3
 801af52:	1ad3      	subs	r3, r2, r3
 801af54:	b29a      	uxth	r2, r3
 801af56:	4b80      	ldr	r3, [pc, #512]	; (801b158 <tcp_receive+0xb0c>)
 801af58:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801af5a:	4b7f      	ldr	r3, [pc, #508]	; (801b158 <tcp_receive+0xb0c>)
 801af5c:	68db      	ldr	r3, [r3, #12]
 801af5e:	899b      	ldrh	r3, [r3, #12]
 801af60:	b29b      	uxth	r3, r3
 801af62:	4618      	mov	r0, r3
 801af64:	f7f7 ff40 	bl	8012de8 <lwip_htons>
 801af68:	4603      	mov	r3, r0
 801af6a:	b2db      	uxtb	r3, r3
 801af6c:	f003 0302 	and.w	r3, r3, #2
 801af70:	2b00      	cmp	r3, #0
 801af72:	d005      	beq.n	801af80 <tcp_receive+0x934>
                inseg.len -= 1;
 801af74:	4b78      	ldr	r3, [pc, #480]	; (801b158 <tcp_receive+0xb0c>)
 801af76:	891b      	ldrh	r3, [r3, #8]
 801af78:	3b01      	subs	r3, #1
 801af7a:	b29a      	uxth	r2, r3
 801af7c:	4b76      	ldr	r3, [pc, #472]	; (801b158 <tcp_receive+0xb0c>)
 801af7e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801af80:	4b75      	ldr	r3, [pc, #468]	; (801b158 <tcp_receive+0xb0c>)
 801af82:	685b      	ldr	r3, [r3, #4]
 801af84:	4a74      	ldr	r2, [pc, #464]	; (801b158 <tcp_receive+0xb0c>)
 801af86:	8912      	ldrh	r2, [r2, #8]
 801af88:	4611      	mov	r1, r2
 801af8a:	4618      	mov	r0, r3
 801af8c:	f7fb fca2 	bl	80168d4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801af90:	4b71      	ldr	r3, [pc, #452]	; (801b158 <tcp_receive+0xb0c>)
 801af92:	891c      	ldrh	r4, [r3, #8]
 801af94:	4b70      	ldr	r3, [pc, #448]	; (801b158 <tcp_receive+0xb0c>)
 801af96:	68db      	ldr	r3, [r3, #12]
 801af98:	899b      	ldrh	r3, [r3, #12]
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	4618      	mov	r0, r3
 801af9e:	f7f7 ff23 	bl	8012de8 <lwip_htons>
 801afa2:	4603      	mov	r3, r0
 801afa4:	b2db      	uxtb	r3, r3
 801afa6:	f003 0303 	and.w	r3, r3, #3
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d001      	beq.n	801afb2 <tcp_receive+0x966>
 801afae:	2301      	movs	r3, #1
 801afb0:	e000      	b.n	801afb4 <tcp_receive+0x968>
 801afb2:	2300      	movs	r3, #0
 801afb4:	4423      	add	r3, r4
 801afb6:	b29a      	uxth	r2, r3
 801afb8:	4b65      	ldr	r3, [pc, #404]	; (801b150 <tcp_receive+0xb04>)
 801afba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801afbc:	4b64      	ldr	r3, [pc, #400]	; (801b150 <tcp_receive+0xb04>)
 801afbe:	881b      	ldrh	r3, [r3, #0]
 801afc0:	461a      	mov	r2, r3
 801afc2:	4b64      	ldr	r3, [pc, #400]	; (801b154 <tcp_receive+0xb08>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	441a      	add	r2, r3
 801afc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afca:	68db      	ldr	r3, [r3, #12]
 801afcc:	685b      	ldr	r3, [r3, #4]
 801afce:	429a      	cmp	r2, r3
 801afd0:	d006      	beq.n	801afe0 <tcp_receive+0x994>
 801afd2:	4b62      	ldr	r3, [pc, #392]	; (801b15c <tcp_receive+0xb10>)
 801afd4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801afd8:	4961      	ldr	r1, [pc, #388]	; (801b160 <tcp_receive+0xb14>)
 801afda:	4862      	ldr	r0, [pc, #392]	; (801b164 <tcp_receive+0xb18>)
 801afdc:	f005 f812 	bl	8020004 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801afe4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801afe6:	4b5a      	ldr	r3, [pc, #360]	; (801b150 <tcp_receive+0xb04>)
 801afe8:	881b      	ldrh	r3, [r3, #0]
 801afea:	461a      	mov	r2, r3
 801afec:	4b59      	ldr	r3, [pc, #356]	; (801b154 <tcp_receive+0xb08>)
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	441a      	add	r2, r3
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801affa:	4b55      	ldr	r3, [pc, #340]	; (801b150 <tcp_receive+0xb04>)
 801affc:	881b      	ldrh	r3, [r3, #0]
 801affe:	429a      	cmp	r2, r3
 801b000:	d206      	bcs.n	801b010 <tcp_receive+0x9c4>
 801b002:	4b56      	ldr	r3, [pc, #344]	; (801b15c <tcp_receive+0xb10>)
 801b004:	f240 6207 	movw	r2, #1543	; 0x607
 801b008:	4957      	ldr	r1, [pc, #348]	; (801b168 <tcp_receive+0xb1c>)
 801b00a:	4856      	ldr	r0, [pc, #344]	; (801b164 <tcp_receive+0xb18>)
 801b00c:	f004 fffa 	bl	8020004 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b014:	4b4e      	ldr	r3, [pc, #312]	; (801b150 <tcp_receive+0xb04>)
 801b016:	881b      	ldrh	r3, [r3, #0]
 801b018:	1ad3      	subs	r3, r2, r3
 801b01a:	b29a      	uxth	r2, r3
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801b020:	6878      	ldr	r0, [r7, #4]
 801b022:	f7fc fd9d 	bl	8017b60 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801b026:	4b4c      	ldr	r3, [pc, #304]	; (801b158 <tcp_receive+0xb0c>)
 801b028:	685b      	ldr	r3, [r3, #4]
 801b02a:	891b      	ldrh	r3, [r3, #8]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d006      	beq.n	801b03e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801b030:	4b49      	ldr	r3, [pc, #292]	; (801b158 <tcp_receive+0xb0c>)
 801b032:	685b      	ldr	r3, [r3, #4]
 801b034:	4a4d      	ldr	r2, [pc, #308]	; (801b16c <tcp_receive+0xb20>)
 801b036:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801b038:	4b47      	ldr	r3, [pc, #284]	; (801b158 <tcp_receive+0xb0c>)
 801b03a:	2200      	movs	r2, #0
 801b03c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b03e:	4b46      	ldr	r3, [pc, #280]	; (801b158 <tcp_receive+0xb0c>)
 801b040:	68db      	ldr	r3, [r3, #12]
 801b042:	899b      	ldrh	r3, [r3, #12]
 801b044:	b29b      	uxth	r3, r3
 801b046:	4618      	mov	r0, r3
 801b048:	f7f7 fece 	bl	8012de8 <lwip_htons>
 801b04c:	4603      	mov	r3, r0
 801b04e:	b2db      	uxtb	r3, r3
 801b050:	f003 0301 	and.w	r3, r3, #1
 801b054:	2b00      	cmp	r3, #0
 801b056:	f000 80b8 	beq.w	801b1ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801b05a:	4b45      	ldr	r3, [pc, #276]	; (801b170 <tcp_receive+0xb24>)
 801b05c:	781b      	ldrb	r3, [r3, #0]
 801b05e:	f043 0320 	orr.w	r3, r3, #32
 801b062:	b2da      	uxtb	r2, r3
 801b064:	4b42      	ldr	r3, [pc, #264]	; (801b170 <tcp_receive+0xb24>)
 801b066:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801b068:	e0af      	b.n	801b1ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b06e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b074:	68db      	ldr	r3, [r3, #12]
 801b076:	685b      	ldr	r3, [r3, #4]
 801b078:	4a36      	ldr	r2, [pc, #216]	; (801b154 <tcp_receive+0xb08>)
 801b07a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b07c:	68bb      	ldr	r3, [r7, #8]
 801b07e:	891b      	ldrh	r3, [r3, #8]
 801b080:	461c      	mov	r4, r3
 801b082:	68bb      	ldr	r3, [r7, #8]
 801b084:	68db      	ldr	r3, [r3, #12]
 801b086:	899b      	ldrh	r3, [r3, #12]
 801b088:	b29b      	uxth	r3, r3
 801b08a:	4618      	mov	r0, r3
 801b08c:	f7f7 feac 	bl	8012de8 <lwip_htons>
 801b090:	4603      	mov	r3, r0
 801b092:	b2db      	uxtb	r3, r3
 801b094:	f003 0303 	and.w	r3, r3, #3
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d001      	beq.n	801b0a0 <tcp_receive+0xa54>
 801b09c:	2301      	movs	r3, #1
 801b09e:	e000      	b.n	801b0a2 <tcp_receive+0xa56>
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	191a      	adds	r2, r3, r4
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0a8:	441a      	add	r2, r3
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b0b2:	461c      	mov	r4, r3
 801b0b4:	68bb      	ldr	r3, [r7, #8]
 801b0b6:	891b      	ldrh	r3, [r3, #8]
 801b0b8:	461d      	mov	r5, r3
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	68db      	ldr	r3, [r3, #12]
 801b0be:	899b      	ldrh	r3, [r3, #12]
 801b0c0:	b29b      	uxth	r3, r3
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	f7f7 fe90 	bl	8012de8 <lwip_htons>
 801b0c8:	4603      	mov	r3, r0
 801b0ca:	b2db      	uxtb	r3, r3
 801b0cc:	f003 0303 	and.w	r3, r3, #3
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d001      	beq.n	801b0d8 <tcp_receive+0xa8c>
 801b0d4:	2301      	movs	r3, #1
 801b0d6:	e000      	b.n	801b0da <tcp_receive+0xa8e>
 801b0d8:	2300      	movs	r3, #0
 801b0da:	442b      	add	r3, r5
 801b0dc:	429c      	cmp	r4, r3
 801b0de:	d206      	bcs.n	801b0ee <tcp_receive+0xaa2>
 801b0e0:	4b1e      	ldr	r3, [pc, #120]	; (801b15c <tcp_receive+0xb10>)
 801b0e2:	f240 622b 	movw	r2, #1579	; 0x62b
 801b0e6:	4923      	ldr	r1, [pc, #140]	; (801b174 <tcp_receive+0xb28>)
 801b0e8:	481e      	ldr	r0, [pc, #120]	; (801b164 <tcp_receive+0xb18>)
 801b0ea:	f004 ff8b 	bl	8020004 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801b0ee:	68bb      	ldr	r3, [r7, #8]
 801b0f0:	891b      	ldrh	r3, [r3, #8]
 801b0f2:	461c      	mov	r4, r3
 801b0f4:	68bb      	ldr	r3, [r7, #8]
 801b0f6:	68db      	ldr	r3, [r3, #12]
 801b0f8:	899b      	ldrh	r3, [r3, #12]
 801b0fa:	b29b      	uxth	r3, r3
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7f7 fe73 	bl	8012de8 <lwip_htons>
 801b102:	4603      	mov	r3, r0
 801b104:	b2db      	uxtb	r3, r3
 801b106:	f003 0303 	and.w	r3, r3, #3
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d001      	beq.n	801b112 <tcp_receive+0xac6>
 801b10e:	2301      	movs	r3, #1
 801b110:	e000      	b.n	801b114 <tcp_receive+0xac8>
 801b112:	2300      	movs	r3, #0
 801b114:	1919      	adds	r1, r3, r4
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b11a:	b28b      	uxth	r3, r1
 801b11c:	1ad3      	subs	r3, r2, r3
 801b11e:	b29a      	uxth	r2, r3
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801b124:	6878      	ldr	r0, [r7, #4]
 801b126:	f7fc fd1b 	bl	8017b60 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	685b      	ldr	r3, [r3, #4]
 801b12e:	891b      	ldrh	r3, [r3, #8]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d028      	beq.n	801b186 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801b134:	4b0d      	ldr	r3, [pc, #52]	; (801b16c <tcp_receive+0xb20>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d01d      	beq.n	801b178 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801b13c:	4b0b      	ldr	r3, [pc, #44]	; (801b16c <tcp_receive+0xb20>)
 801b13e:	681a      	ldr	r2, [r3, #0]
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	685b      	ldr	r3, [r3, #4]
 801b144:	4619      	mov	r1, r3
 801b146:	4610      	mov	r0, r2
 801b148:	f7fb fe0c 	bl	8016d64 <pbuf_cat>
 801b14c:	e018      	b.n	801b180 <tcp_receive+0xb34>
 801b14e:	bf00      	nop
 801b150:	24004e8e 	.word	0x24004e8e
 801b154:	24004e84 	.word	0x24004e84
 801b158:	24004e64 	.word	0x24004e64
 801b15c:	08026a24 	.word	0x08026a24
 801b160:	08026e30 	.word	0x08026e30
 801b164:	08026a9c 	.word	0x08026a9c
 801b168:	08026e6c 	.word	0x08026e6c
 801b16c:	24004e94 	.word	0x24004e94
 801b170:	24004e91 	.word	0x24004e91
 801b174:	08026e8c 	.word	0x08026e8c
            } else {
              recv_data = cseg->p;
 801b178:	68bb      	ldr	r3, [r7, #8]
 801b17a:	685b      	ldr	r3, [r3, #4]
 801b17c:	4a70      	ldr	r2, [pc, #448]	; (801b340 <tcp_receive+0xcf4>)
 801b17e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801b180:	68bb      	ldr	r3, [r7, #8]
 801b182:	2200      	movs	r2, #0
 801b184:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b186:	68bb      	ldr	r3, [r7, #8]
 801b188:	68db      	ldr	r3, [r3, #12]
 801b18a:	899b      	ldrh	r3, [r3, #12]
 801b18c:	b29b      	uxth	r3, r3
 801b18e:	4618      	mov	r0, r3
 801b190:	f7f7 fe2a 	bl	8012de8 <lwip_htons>
 801b194:	4603      	mov	r3, r0
 801b196:	b2db      	uxtb	r3, r3
 801b198:	f003 0301 	and.w	r3, r3, #1
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d00d      	beq.n	801b1bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801b1a0:	4b68      	ldr	r3, [pc, #416]	; (801b344 <tcp_receive+0xcf8>)
 801b1a2:	781b      	ldrb	r3, [r3, #0]
 801b1a4:	f043 0320 	orr.w	r3, r3, #32
 801b1a8:	b2da      	uxtb	r2, r3
 801b1aa:	4b66      	ldr	r3, [pc, #408]	; (801b344 <tcp_receive+0xcf8>)
 801b1ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	7d1b      	ldrb	r3, [r3, #20]
 801b1b2:	2b04      	cmp	r3, #4
 801b1b4:	d102      	bne.n	801b1bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	2207      	movs	r2, #7
 801b1ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801b1bc:	68bb      	ldr	r3, [r7, #8]
 801b1be:	681a      	ldr	r2, [r3, #0]
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801b1c4:	68b8      	ldr	r0, [r7, #8]
 801b1c6:	f7fd fb08 	bl	80187da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d008      	beq.n	801b1e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1d6:	68db      	ldr	r3, [r3, #12]
 801b1d8:	685a      	ldr	r2, [r3, #4]
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801b1de:	429a      	cmp	r2, r3
 801b1e0:	f43f af43 	beq.w	801b06a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	8b5b      	ldrh	r3, [r3, #26]
 801b1e8:	f003 0301 	and.w	r3, r3, #1
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d00e      	beq.n	801b20e <tcp_receive+0xbc2>
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	8b5b      	ldrh	r3, [r3, #26]
 801b1f4:	f023 0301 	bic.w	r3, r3, #1
 801b1f8:	b29a      	uxth	r2, r3
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	835a      	strh	r2, [r3, #26]
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	8b5b      	ldrh	r3, [r3, #26]
 801b202:	f043 0302 	orr.w	r3, r3, #2
 801b206:	b29a      	uxth	r2, r3
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b20c:	e188      	b.n	801b520 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	8b5b      	ldrh	r3, [r3, #26]
 801b212:	f043 0301 	orr.w	r3, r3, #1
 801b216:	b29a      	uxth	r2, r3
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b21c:	e180      	b.n	801b520 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b222:	2b00      	cmp	r3, #0
 801b224:	d106      	bne.n	801b234 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801b226:	4848      	ldr	r0, [pc, #288]	; (801b348 <tcp_receive+0xcfc>)
 801b228:	f7fd faf0 	bl	801880c <tcp_seg_copy>
 801b22c:	4602      	mov	r2, r0
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	675a      	str	r2, [r3, #116]	; 0x74
 801b232:	e16d      	b.n	801b510 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801b234:	2300      	movs	r3, #0
 801b236:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b23c:	63bb      	str	r3, [r7, #56]	; 0x38
 801b23e:	e157      	b.n	801b4f0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801b240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b242:	68db      	ldr	r3, [r3, #12]
 801b244:	685a      	ldr	r2, [r3, #4]
 801b246:	4b41      	ldr	r3, [pc, #260]	; (801b34c <tcp_receive+0xd00>)
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	429a      	cmp	r2, r3
 801b24c:	d11d      	bne.n	801b28a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801b24e:	4b3e      	ldr	r3, [pc, #248]	; (801b348 <tcp_receive+0xcfc>)
 801b250:	891a      	ldrh	r2, [r3, #8]
 801b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b254:	891b      	ldrh	r3, [r3, #8]
 801b256:	429a      	cmp	r2, r3
 801b258:	f240 814f 	bls.w	801b4fa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b25c:	483a      	ldr	r0, [pc, #232]	; (801b348 <tcp_receive+0xcfc>)
 801b25e:	f7fd fad5 	bl	801880c <tcp_seg_copy>
 801b262:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801b264:	697b      	ldr	r3, [r7, #20]
 801b266:	2b00      	cmp	r3, #0
 801b268:	f000 8149 	beq.w	801b4fe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801b26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d003      	beq.n	801b27a <tcp_receive+0xc2e>
                    prev->next = cseg;
 801b272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b274:	697a      	ldr	r2, [r7, #20]
 801b276:	601a      	str	r2, [r3, #0]
 801b278:	e002      	b.n	801b280 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	697a      	ldr	r2, [r7, #20]
 801b27e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801b280:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b282:	6978      	ldr	r0, [r7, #20]
 801b284:	f7ff f8de 	bl	801a444 <tcp_oos_insert_segment>
                }
                break;
 801b288:	e139      	b.n	801b4fe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801b28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d117      	bne.n	801b2c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801b290:	4b2e      	ldr	r3, [pc, #184]	; (801b34c <tcp_receive+0xd00>)
 801b292:	681a      	ldr	r2, [r3, #0]
 801b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b296:	68db      	ldr	r3, [r3, #12]
 801b298:	685b      	ldr	r3, [r3, #4]
 801b29a:	1ad3      	subs	r3, r2, r3
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	da57      	bge.n	801b350 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b2a0:	4829      	ldr	r0, [pc, #164]	; (801b348 <tcp_receive+0xcfc>)
 801b2a2:	f7fd fab3 	bl	801880c <tcp_seg_copy>
 801b2a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801b2a8:	69bb      	ldr	r3, [r7, #24]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	f000 8129 	beq.w	801b502 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	69ba      	ldr	r2, [r7, #24]
 801b2b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801b2b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b2b8:	69b8      	ldr	r0, [r7, #24]
 801b2ba:	f7ff f8c3 	bl	801a444 <tcp_oos_insert_segment>
                  }
                  break;
 801b2be:	e120      	b.n	801b502 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801b2c0:	4b22      	ldr	r3, [pc, #136]	; (801b34c <tcp_receive+0xd00>)
 801b2c2:	681a      	ldr	r2, [r3, #0]
 801b2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2c6:	68db      	ldr	r3, [r3, #12]
 801b2c8:	685b      	ldr	r3, [r3, #4]
 801b2ca:	1ad3      	subs	r3, r2, r3
 801b2cc:	3b01      	subs	r3, #1
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	db3e      	blt.n	801b350 <tcp_receive+0xd04>
 801b2d2:	4b1e      	ldr	r3, [pc, #120]	; (801b34c <tcp_receive+0xd00>)
 801b2d4:	681a      	ldr	r2, [r3, #0]
 801b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b2d8:	68db      	ldr	r3, [r3, #12]
 801b2da:	685b      	ldr	r3, [r3, #4]
 801b2dc:	1ad3      	subs	r3, r2, r3
 801b2de:	3301      	adds	r3, #1
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	dc35      	bgt.n	801b350 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b2e4:	4818      	ldr	r0, [pc, #96]	; (801b348 <tcp_receive+0xcfc>)
 801b2e6:	f7fd fa91 	bl	801880c <tcp_seg_copy>
 801b2ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801b2ec:	69fb      	ldr	r3, [r7, #28]
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	f000 8109 	beq.w	801b506 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801b2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2f6:	68db      	ldr	r3, [r3, #12]
 801b2f8:	685b      	ldr	r3, [r3, #4]
 801b2fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b2fc:	8912      	ldrh	r2, [r2, #8]
 801b2fe:	441a      	add	r2, r3
 801b300:	4b12      	ldr	r3, [pc, #72]	; (801b34c <tcp_receive+0xd00>)
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	1ad3      	subs	r3, r2, r3
 801b306:	2b00      	cmp	r3, #0
 801b308:	dd12      	ble.n	801b330 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801b30a:	4b10      	ldr	r3, [pc, #64]	; (801b34c <tcp_receive+0xd00>)
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	b29a      	uxth	r2, r3
 801b310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b312:	68db      	ldr	r3, [r3, #12]
 801b314:	685b      	ldr	r3, [r3, #4]
 801b316:	b29b      	uxth	r3, r3
 801b318:	1ad3      	subs	r3, r2, r3
 801b31a:	b29a      	uxth	r2, r3
 801b31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b31e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801b320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b322:	685a      	ldr	r2, [r3, #4]
 801b324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b326:	891b      	ldrh	r3, [r3, #8]
 801b328:	4619      	mov	r1, r3
 801b32a:	4610      	mov	r0, r2
 801b32c:	f7fb fad2 	bl	80168d4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801b330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b332:	69fa      	ldr	r2, [r7, #28]
 801b334:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801b336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b338:	69f8      	ldr	r0, [r7, #28]
 801b33a:	f7ff f883 	bl	801a444 <tcp_oos_insert_segment>
                  }
                  break;
 801b33e:	e0e2      	b.n	801b506 <tcp_receive+0xeba>
 801b340:	24004e94 	.word	0x24004e94
 801b344:	24004e91 	.word	0x24004e91
 801b348:	24004e64 	.word	0x24004e64
 801b34c:	24004e84 	.word	0x24004e84
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b352:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801b354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	f040 80c6 	bne.w	801b4ea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801b35e:	4b80      	ldr	r3, [pc, #512]	; (801b560 <tcp_receive+0xf14>)
 801b360:	681a      	ldr	r2, [r3, #0]
 801b362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b364:	68db      	ldr	r3, [r3, #12]
 801b366:	685b      	ldr	r3, [r3, #4]
 801b368:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	f340 80bd 	ble.w	801b4ea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b372:	68db      	ldr	r3, [r3, #12]
 801b374:	899b      	ldrh	r3, [r3, #12]
 801b376:	b29b      	uxth	r3, r3
 801b378:	4618      	mov	r0, r3
 801b37a:	f7f7 fd35 	bl	8012de8 <lwip_htons>
 801b37e:	4603      	mov	r3, r0
 801b380:	b2db      	uxtb	r3, r3
 801b382:	f003 0301 	and.w	r3, r3, #1
 801b386:	2b00      	cmp	r3, #0
 801b388:	f040 80bf 	bne.w	801b50a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801b38c:	4875      	ldr	r0, [pc, #468]	; (801b564 <tcp_receive+0xf18>)
 801b38e:	f7fd fa3d 	bl	801880c <tcp_seg_copy>
 801b392:	4602      	mov	r2, r0
 801b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b396:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	f000 80b6 	beq.w	801b50e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801b3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3a4:	68db      	ldr	r3, [r3, #12]
 801b3a6:	685b      	ldr	r3, [r3, #4]
 801b3a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3aa:	8912      	ldrh	r2, [r2, #8]
 801b3ac:	441a      	add	r2, r3
 801b3ae:	4b6c      	ldr	r3, [pc, #432]	; (801b560 <tcp_receive+0xf14>)
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	1ad3      	subs	r3, r2, r3
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	dd12      	ble.n	801b3de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801b3b8:	4b69      	ldr	r3, [pc, #420]	; (801b560 <tcp_receive+0xf14>)
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	b29a      	uxth	r2, r3
 801b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3c0:	68db      	ldr	r3, [r3, #12]
 801b3c2:	685b      	ldr	r3, [r3, #4]
 801b3c4:	b29b      	uxth	r3, r3
 801b3c6:	1ad3      	subs	r3, r2, r3
 801b3c8:	b29a      	uxth	r2, r3
 801b3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3d0:	685a      	ldr	r2, [r3, #4]
 801b3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3d4:	891b      	ldrh	r3, [r3, #8]
 801b3d6:	4619      	mov	r1, r3
 801b3d8:	4610      	mov	r0, r2
 801b3da:	f7fb fa7b 	bl	80168d4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801b3de:	4b62      	ldr	r3, [pc, #392]	; (801b568 <tcp_receive+0xf1c>)
 801b3e0:	881b      	ldrh	r3, [r3, #0]
 801b3e2:	461a      	mov	r2, r3
 801b3e4:	4b5e      	ldr	r3, [pc, #376]	; (801b560 <tcp_receive+0xf14>)
 801b3e6:	681b      	ldr	r3, [r3, #0]
 801b3e8:	441a      	add	r2, r3
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3ee:	6879      	ldr	r1, [r7, #4]
 801b3f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b3f2:	440b      	add	r3, r1
 801b3f4:	1ad3      	subs	r3, r2, r3
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	f340 8089 	ble.w	801b50e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	68db      	ldr	r3, [r3, #12]
 801b402:	899b      	ldrh	r3, [r3, #12]
 801b404:	b29b      	uxth	r3, r3
 801b406:	4618      	mov	r0, r3
 801b408:	f7f7 fcee 	bl	8012de8 <lwip_htons>
 801b40c:	4603      	mov	r3, r0
 801b40e:	b2db      	uxtb	r3, r3
 801b410:	f003 0301 	and.w	r3, r3, #1
 801b414:	2b00      	cmp	r3, #0
 801b416:	d022      	beq.n	801b45e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	68db      	ldr	r3, [r3, #12]
 801b41e:	899b      	ldrh	r3, [r3, #12]
 801b420:	b29b      	uxth	r3, r3
 801b422:	b21b      	sxth	r3, r3
 801b424:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b428:	b21c      	sxth	r4, r3
 801b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	68db      	ldr	r3, [r3, #12]
 801b430:	899b      	ldrh	r3, [r3, #12]
 801b432:	b29b      	uxth	r3, r3
 801b434:	4618      	mov	r0, r3
 801b436:	f7f7 fcd7 	bl	8012de8 <lwip_htons>
 801b43a:	4603      	mov	r3, r0
 801b43c:	b2db      	uxtb	r3, r3
 801b43e:	b29b      	uxth	r3, r3
 801b440:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801b444:	b29b      	uxth	r3, r3
 801b446:	4618      	mov	r0, r3
 801b448:	f7f7 fcce 	bl	8012de8 <lwip_htons>
 801b44c:	4603      	mov	r3, r0
 801b44e:	b21b      	sxth	r3, r3
 801b450:	4323      	orrs	r3, r4
 801b452:	b21a      	sxth	r2, r3
 801b454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	68db      	ldr	r3, [r3, #12]
 801b45a:	b292      	uxth	r2, r2
 801b45c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b462:	b29a      	uxth	r2, r3
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b468:	4413      	add	r3, r2
 801b46a:	b299      	uxth	r1, r3
 801b46c:	4b3c      	ldr	r3, [pc, #240]	; (801b560 <tcp_receive+0xf14>)
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	b29a      	uxth	r2, r3
 801b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	1a8a      	subs	r2, r1, r2
 801b478:	b292      	uxth	r2, r2
 801b47a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801b47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	685a      	ldr	r2, [r3, #4]
 801b482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	891b      	ldrh	r3, [r3, #8]
 801b488:	4619      	mov	r1, r3
 801b48a:	4610      	mov	r0, r2
 801b48c:	f7fb fa22 	bl	80168d4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801b490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	891c      	ldrh	r4, [r3, #8]
 801b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	68db      	ldr	r3, [r3, #12]
 801b49c:	899b      	ldrh	r3, [r3, #12]
 801b49e:	b29b      	uxth	r3, r3
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	f7f7 fca1 	bl	8012de8 <lwip_htons>
 801b4a6:	4603      	mov	r3, r0
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	f003 0303 	and.w	r3, r3, #3
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d001      	beq.n	801b4b6 <tcp_receive+0xe6a>
 801b4b2:	2301      	movs	r3, #1
 801b4b4:	e000      	b.n	801b4b8 <tcp_receive+0xe6c>
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	4423      	add	r3, r4
 801b4ba:	b29a      	uxth	r2, r3
 801b4bc:	4b2a      	ldr	r3, [pc, #168]	; (801b568 <tcp_receive+0xf1c>)
 801b4be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b4c0:	4b29      	ldr	r3, [pc, #164]	; (801b568 <tcp_receive+0xf1c>)
 801b4c2:	881b      	ldrh	r3, [r3, #0]
 801b4c4:	461a      	mov	r2, r3
 801b4c6:	4b26      	ldr	r3, [pc, #152]	; (801b560 <tcp_receive+0xf14>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	441a      	add	r2, r3
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4d0:	6879      	ldr	r1, [r7, #4]
 801b4d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b4d4:	440b      	add	r3, r1
 801b4d6:	429a      	cmp	r2, r3
 801b4d8:	d019      	beq.n	801b50e <tcp_receive+0xec2>
 801b4da:	4b24      	ldr	r3, [pc, #144]	; (801b56c <tcp_receive+0xf20>)
 801b4dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801b4e0:	4923      	ldr	r1, [pc, #140]	; (801b570 <tcp_receive+0xf24>)
 801b4e2:	4824      	ldr	r0, [pc, #144]	; (801b574 <tcp_receive+0xf28>)
 801b4e4:	f004 fd8e 	bl	8020004 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801b4e8:	e011      	b.n	801b50e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	63bb      	str	r3, [r7, #56]	; 0x38
 801b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	f47f aea4 	bne.w	801b240 <tcp_receive+0xbf4>
 801b4f8:	e00a      	b.n	801b510 <tcp_receive+0xec4>
                break;
 801b4fa:	bf00      	nop
 801b4fc:	e008      	b.n	801b510 <tcp_receive+0xec4>
                break;
 801b4fe:	bf00      	nop
 801b500:	e006      	b.n	801b510 <tcp_receive+0xec4>
                  break;
 801b502:	bf00      	nop
 801b504:	e004      	b.n	801b510 <tcp_receive+0xec4>
                  break;
 801b506:	bf00      	nop
 801b508:	e002      	b.n	801b510 <tcp_receive+0xec4>
                  break;
 801b50a:	bf00      	nop
 801b50c:	e000      	b.n	801b510 <tcp_receive+0xec4>
                break;
 801b50e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801b510:	6878      	ldr	r0, [r7, #4]
 801b512:	f001 fe8b 	bl	801d22c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801b516:	e003      	b.n	801b520 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801b518:	6878      	ldr	r0, [r7, #4]
 801b51a:	f001 fe87 	bl	801d22c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b51e:	e01a      	b.n	801b556 <tcp_receive+0xf0a>
 801b520:	e019      	b.n	801b556 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801b522:	4b0f      	ldr	r3, [pc, #60]	; (801b560 <tcp_receive+0xf14>)
 801b524:	681a      	ldr	r2, [r3, #0]
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b52a:	1ad3      	subs	r3, r2, r3
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	db0a      	blt.n	801b546 <tcp_receive+0xefa>
 801b530:	4b0b      	ldr	r3, [pc, #44]	; (801b560 <tcp_receive+0xf14>)
 801b532:	681a      	ldr	r2, [r3, #0]
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b538:	6879      	ldr	r1, [r7, #4]
 801b53a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b53c:	440b      	add	r3, r1
 801b53e:	1ad3      	subs	r3, r2, r3
 801b540:	3301      	adds	r3, #1
 801b542:	2b00      	cmp	r3, #0
 801b544:	dd07      	ble.n	801b556 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	8b5b      	ldrh	r3, [r3, #26]
 801b54a:	f043 0302 	orr.w	r3, r3, #2
 801b54e:	b29a      	uxth	r2, r3
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801b554:	e7ff      	b.n	801b556 <tcp_receive+0xf0a>
 801b556:	bf00      	nop
 801b558:	3750      	adds	r7, #80	; 0x50
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bdb0      	pop	{r4, r5, r7, pc}
 801b55e:	bf00      	nop
 801b560:	24004e84 	.word	0x24004e84
 801b564:	24004e64 	.word	0x24004e64
 801b568:	24004e8e 	.word	0x24004e8e
 801b56c:	08026a24 	.word	0x08026a24
 801b570:	08026df8 	.word	0x08026df8
 801b574:	08026a9c 	.word	0x08026a9c

0801b578 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801b578:	b480      	push	{r7}
 801b57a:	b083      	sub	sp, #12
 801b57c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801b57e:	4b15      	ldr	r3, [pc, #84]	; (801b5d4 <tcp_get_next_optbyte+0x5c>)
 801b580:	881b      	ldrh	r3, [r3, #0]
 801b582:	1c5a      	adds	r2, r3, #1
 801b584:	b291      	uxth	r1, r2
 801b586:	4a13      	ldr	r2, [pc, #76]	; (801b5d4 <tcp_get_next_optbyte+0x5c>)
 801b588:	8011      	strh	r1, [r2, #0]
 801b58a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801b58c:	4b12      	ldr	r3, [pc, #72]	; (801b5d8 <tcp_get_next_optbyte+0x60>)
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	2b00      	cmp	r3, #0
 801b592:	d004      	beq.n	801b59e <tcp_get_next_optbyte+0x26>
 801b594:	4b11      	ldr	r3, [pc, #68]	; (801b5dc <tcp_get_next_optbyte+0x64>)
 801b596:	881b      	ldrh	r3, [r3, #0]
 801b598:	88fa      	ldrh	r2, [r7, #6]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d208      	bcs.n	801b5b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801b59e:	4b10      	ldr	r3, [pc, #64]	; (801b5e0 <tcp_get_next_optbyte+0x68>)
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	3314      	adds	r3, #20
 801b5a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801b5a6:	88fb      	ldrh	r3, [r7, #6]
 801b5a8:	683a      	ldr	r2, [r7, #0]
 801b5aa:	4413      	add	r3, r2
 801b5ac:	781b      	ldrb	r3, [r3, #0]
 801b5ae:	e00b      	b.n	801b5c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801b5b0:	88fb      	ldrh	r3, [r7, #6]
 801b5b2:	b2da      	uxtb	r2, r3
 801b5b4:	4b09      	ldr	r3, [pc, #36]	; (801b5dc <tcp_get_next_optbyte+0x64>)
 801b5b6:	881b      	ldrh	r3, [r3, #0]
 801b5b8:	b2db      	uxtb	r3, r3
 801b5ba:	1ad3      	subs	r3, r2, r3
 801b5bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801b5be:	4b06      	ldr	r3, [pc, #24]	; (801b5d8 <tcp_get_next_optbyte+0x60>)
 801b5c0:	681a      	ldr	r2, [r3, #0]
 801b5c2:	797b      	ldrb	r3, [r7, #5]
 801b5c4:	4413      	add	r3, r2
 801b5c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	370c      	adds	r7, #12
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5d2:	4770      	bx	lr
 801b5d4:	24004e80 	.word	0x24004e80
 801b5d8:	24004e7c 	.word	0x24004e7c
 801b5dc:	24004e7a 	.word	0x24004e7a
 801b5e0:	24004e74 	.word	0x24004e74

0801b5e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b084      	sub	sp, #16
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d106      	bne.n	801b600 <tcp_parseopt+0x1c>
 801b5f2:	4b32      	ldr	r3, [pc, #200]	; (801b6bc <tcp_parseopt+0xd8>)
 801b5f4:	f240 727d 	movw	r2, #1917	; 0x77d
 801b5f8:	4931      	ldr	r1, [pc, #196]	; (801b6c0 <tcp_parseopt+0xdc>)
 801b5fa:	4832      	ldr	r0, [pc, #200]	; (801b6c4 <tcp_parseopt+0xe0>)
 801b5fc:	f004 fd02 	bl	8020004 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801b600:	4b31      	ldr	r3, [pc, #196]	; (801b6c8 <tcp_parseopt+0xe4>)
 801b602:	881b      	ldrh	r3, [r3, #0]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d055      	beq.n	801b6b4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b608:	4b30      	ldr	r3, [pc, #192]	; (801b6cc <tcp_parseopt+0xe8>)
 801b60a:	2200      	movs	r2, #0
 801b60c:	801a      	strh	r2, [r3, #0]
 801b60e:	e045      	b.n	801b69c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801b610:	f7ff ffb2 	bl	801b578 <tcp_get_next_optbyte>
 801b614:	4603      	mov	r3, r0
 801b616:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801b618:	7bfb      	ldrb	r3, [r7, #15]
 801b61a:	2b02      	cmp	r3, #2
 801b61c:	d006      	beq.n	801b62c <tcp_parseopt+0x48>
 801b61e:	2b02      	cmp	r3, #2
 801b620:	dc2b      	bgt.n	801b67a <tcp_parseopt+0x96>
 801b622:	2b00      	cmp	r3, #0
 801b624:	d041      	beq.n	801b6aa <tcp_parseopt+0xc6>
 801b626:	2b01      	cmp	r3, #1
 801b628:	d127      	bne.n	801b67a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801b62a:	e037      	b.n	801b69c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801b62c:	f7ff ffa4 	bl	801b578 <tcp_get_next_optbyte>
 801b630:	4603      	mov	r3, r0
 801b632:	2b04      	cmp	r3, #4
 801b634:	d13b      	bne.n	801b6ae <tcp_parseopt+0xca>
 801b636:	4b25      	ldr	r3, [pc, #148]	; (801b6cc <tcp_parseopt+0xe8>)
 801b638:	881b      	ldrh	r3, [r3, #0]
 801b63a:	3301      	adds	r3, #1
 801b63c:	4a22      	ldr	r2, [pc, #136]	; (801b6c8 <tcp_parseopt+0xe4>)
 801b63e:	8812      	ldrh	r2, [r2, #0]
 801b640:	4293      	cmp	r3, r2
 801b642:	da34      	bge.n	801b6ae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801b644:	f7ff ff98 	bl	801b578 <tcp_get_next_optbyte>
 801b648:	4603      	mov	r3, r0
 801b64a:	b29b      	uxth	r3, r3
 801b64c:	021b      	lsls	r3, r3, #8
 801b64e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801b650:	f7ff ff92 	bl	801b578 <tcp_get_next_optbyte>
 801b654:	4603      	mov	r3, r0
 801b656:	b29a      	uxth	r2, r3
 801b658:	89bb      	ldrh	r3, [r7, #12]
 801b65a:	4313      	orrs	r3, r2
 801b65c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801b65e:	89bb      	ldrh	r3, [r7, #12]
 801b660:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801b664:	d804      	bhi.n	801b670 <tcp_parseopt+0x8c>
 801b666:	89bb      	ldrh	r3, [r7, #12]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d001      	beq.n	801b670 <tcp_parseopt+0x8c>
 801b66c:	89ba      	ldrh	r2, [r7, #12]
 801b66e:	e001      	b.n	801b674 <tcp_parseopt+0x90>
 801b670:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801b678:	e010      	b.n	801b69c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801b67a:	f7ff ff7d 	bl	801b578 <tcp_get_next_optbyte>
 801b67e:	4603      	mov	r3, r0
 801b680:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801b682:	7afb      	ldrb	r3, [r7, #11]
 801b684:	2b01      	cmp	r3, #1
 801b686:	d914      	bls.n	801b6b2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801b688:	7afb      	ldrb	r3, [r7, #11]
 801b68a:	b29a      	uxth	r2, r3
 801b68c:	4b0f      	ldr	r3, [pc, #60]	; (801b6cc <tcp_parseopt+0xe8>)
 801b68e:	881b      	ldrh	r3, [r3, #0]
 801b690:	4413      	add	r3, r2
 801b692:	b29b      	uxth	r3, r3
 801b694:	3b02      	subs	r3, #2
 801b696:	b29a      	uxth	r2, r3
 801b698:	4b0c      	ldr	r3, [pc, #48]	; (801b6cc <tcp_parseopt+0xe8>)
 801b69a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801b69c:	4b0b      	ldr	r3, [pc, #44]	; (801b6cc <tcp_parseopt+0xe8>)
 801b69e:	881a      	ldrh	r2, [r3, #0]
 801b6a0:	4b09      	ldr	r3, [pc, #36]	; (801b6c8 <tcp_parseopt+0xe4>)
 801b6a2:	881b      	ldrh	r3, [r3, #0]
 801b6a4:	429a      	cmp	r2, r3
 801b6a6:	d3b3      	bcc.n	801b610 <tcp_parseopt+0x2c>
 801b6a8:	e004      	b.n	801b6b4 <tcp_parseopt+0xd0>
          return;
 801b6aa:	bf00      	nop
 801b6ac:	e002      	b.n	801b6b4 <tcp_parseopt+0xd0>
            return;
 801b6ae:	bf00      	nop
 801b6b0:	e000      	b.n	801b6b4 <tcp_parseopt+0xd0>
            return;
 801b6b2:	bf00      	nop
      }
    }
  }
}
 801b6b4:	3710      	adds	r7, #16
 801b6b6:	46bd      	mov	sp, r7
 801b6b8:	bd80      	pop	{r7, pc}
 801b6ba:	bf00      	nop
 801b6bc:	08026a24 	.word	0x08026a24
 801b6c0:	08026eb4 	.word	0x08026eb4
 801b6c4:	08026a9c 	.word	0x08026a9c
 801b6c8:	24004e78 	.word	0x24004e78
 801b6cc:	24004e80 	.word	0x24004e80

0801b6d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801b6d0:	b480      	push	{r7}
 801b6d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801b6d4:	4b05      	ldr	r3, [pc, #20]	; (801b6ec <tcp_trigger_input_pcb_close+0x1c>)
 801b6d6:	781b      	ldrb	r3, [r3, #0]
 801b6d8:	f043 0310 	orr.w	r3, r3, #16
 801b6dc:	b2da      	uxtb	r2, r3
 801b6de:	4b03      	ldr	r3, [pc, #12]	; (801b6ec <tcp_trigger_input_pcb_close+0x1c>)
 801b6e0:	701a      	strb	r2, [r3, #0]
}
 801b6e2:	bf00      	nop
 801b6e4:	46bd      	mov	sp, r7
 801b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ea:	4770      	bx	lr
 801b6ec:	24004e91 	.word	0x24004e91

0801b6f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801b6f0:	b580      	push	{r7, lr}
 801b6f2:	b084      	sub	sp, #16
 801b6f4:	af00      	add	r7, sp, #0
 801b6f6:	60f8      	str	r0, [r7, #12]
 801b6f8:	60b9      	str	r1, [r7, #8]
 801b6fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d00a      	beq.n	801b718 <tcp_route+0x28>
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	7a1b      	ldrb	r3, [r3, #8]
 801b706:	2b00      	cmp	r3, #0
 801b708:	d006      	beq.n	801b718 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	7a1b      	ldrb	r3, [r3, #8]
 801b70e:	4618      	mov	r0, r3
 801b710:	f7fa ff06 	bl	8016520 <netif_get_by_index>
 801b714:	4603      	mov	r3, r0
 801b716:	e003      	b.n	801b720 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801b718:	6878      	ldr	r0, [r7, #4]
 801b71a:	f7f8 fe3b 	bl	8014394 <ip4_route>
 801b71e:	4603      	mov	r3, r0
  }
}
 801b720:	4618      	mov	r0, r3
 801b722:	3710      	adds	r7, #16
 801b724:	46bd      	mov	sp, r7
 801b726:	bd80      	pop	{r7, pc}

0801b728 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801b728:	b590      	push	{r4, r7, lr}
 801b72a:	b087      	sub	sp, #28
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	60f8      	str	r0, [r7, #12]
 801b730:	60b9      	str	r1, [r7, #8]
 801b732:	603b      	str	r3, [r7, #0]
 801b734:	4613      	mov	r3, r2
 801b736:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d105      	bne.n	801b74a <tcp_create_segment+0x22>
 801b73e:	4b44      	ldr	r3, [pc, #272]	; (801b850 <tcp_create_segment+0x128>)
 801b740:	22a3      	movs	r2, #163	; 0xa3
 801b742:	4944      	ldr	r1, [pc, #272]	; (801b854 <tcp_create_segment+0x12c>)
 801b744:	4844      	ldr	r0, [pc, #272]	; (801b858 <tcp_create_segment+0x130>)
 801b746:	f004 fc5d 	bl	8020004 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801b74a:	68bb      	ldr	r3, [r7, #8]
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d105      	bne.n	801b75c <tcp_create_segment+0x34>
 801b750:	4b3f      	ldr	r3, [pc, #252]	; (801b850 <tcp_create_segment+0x128>)
 801b752:	22a4      	movs	r2, #164	; 0xa4
 801b754:	4941      	ldr	r1, [pc, #260]	; (801b85c <tcp_create_segment+0x134>)
 801b756:	4840      	ldr	r0, [pc, #256]	; (801b858 <tcp_create_segment+0x130>)
 801b758:	f004 fc54 	bl	8020004 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b75c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b760:	009b      	lsls	r3, r3, #2
 801b762:	b2db      	uxtb	r3, r3
 801b764:	f003 0304 	and.w	r3, r3, #4
 801b768:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801b76a:	2003      	movs	r0, #3
 801b76c:	f7fa fb52 	bl	8015e14 <memp_malloc>
 801b770:	6138      	str	r0, [r7, #16]
 801b772:	693b      	ldr	r3, [r7, #16]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d104      	bne.n	801b782 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801b778:	68b8      	ldr	r0, [r7, #8]
 801b77a:	f7fb fa31 	bl	8016be0 <pbuf_free>
    return NULL;
 801b77e:	2300      	movs	r3, #0
 801b780:	e061      	b.n	801b846 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801b782:	693b      	ldr	r3, [r7, #16]
 801b784:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b788:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801b78a:	693b      	ldr	r3, [r7, #16]
 801b78c:	2200      	movs	r2, #0
 801b78e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801b790:	693b      	ldr	r3, [r7, #16]
 801b792:	68ba      	ldr	r2, [r7, #8]
 801b794:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801b796:	68bb      	ldr	r3, [r7, #8]
 801b798:	891a      	ldrh	r2, [r3, #8]
 801b79a:	7dfb      	ldrb	r3, [r7, #23]
 801b79c:	b29b      	uxth	r3, r3
 801b79e:	429a      	cmp	r2, r3
 801b7a0:	d205      	bcs.n	801b7ae <tcp_create_segment+0x86>
 801b7a2:	4b2b      	ldr	r3, [pc, #172]	; (801b850 <tcp_create_segment+0x128>)
 801b7a4:	22b0      	movs	r2, #176	; 0xb0
 801b7a6:	492e      	ldr	r1, [pc, #184]	; (801b860 <tcp_create_segment+0x138>)
 801b7a8:	482b      	ldr	r0, [pc, #172]	; (801b858 <tcp_create_segment+0x130>)
 801b7aa:	f004 fc2b 	bl	8020004 <iprintf>
  seg->len = p->tot_len - optlen;
 801b7ae:	68bb      	ldr	r3, [r7, #8]
 801b7b0:	891a      	ldrh	r2, [r3, #8]
 801b7b2:	7dfb      	ldrb	r3, [r7, #23]
 801b7b4:	b29b      	uxth	r3, r3
 801b7b6:	1ad3      	subs	r3, r2, r3
 801b7b8:	b29a      	uxth	r2, r3
 801b7ba:	693b      	ldr	r3, [r7, #16]
 801b7bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801b7be:	2114      	movs	r1, #20
 801b7c0:	68b8      	ldr	r0, [r7, #8]
 801b7c2:	f7fb f977 	bl	8016ab4 <pbuf_add_header>
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d004      	beq.n	801b7d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801b7cc:	6938      	ldr	r0, [r7, #16]
 801b7ce:	f7fd f804 	bl	80187da <tcp_seg_free>
    return NULL;
 801b7d2:	2300      	movs	r3, #0
 801b7d4:	e037      	b.n	801b846 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801b7d6:	693b      	ldr	r3, [r7, #16]
 801b7d8:	685b      	ldr	r3, [r3, #4]
 801b7da:	685a      	ldr	r2, [r3, #4]
 801b7dc:	693b      	ldr	r3, [r7, #16]
 801b7de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	8ada      	ldrh	r2, [r3, #22]
 801b7e4:	693b      	ldr	r3, [r7, #16]
 801b7e6:	68dc      	ldr	r4, [r3, #12]
 801b7e8:	4610      	mov	r0, r2
 801b7ea:	f7f7 fafd 	bl	8012de8 <lwip_htons>
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801b7f2:	68fb      	ldr	r3, [r7, #12]
 801b7f4:	8b1a      	ldrh	r2, [r3, #24]
 801b7f6:	693b      	ldr	r3, [r7, #16]
 801b7f8:	68dc      	ldr	r4, [r3, #12]
 801b7fa:	4610      	mov	r0, r2
 801b7fc:	f7f7 faf4 	bl	8012de8 <lwip_htons>
 801b800:	4603      	mov	r3, r0
 801b802:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801b804:	693b      	ldr	r3, [r7, #16]
 801b806:	68dc      	ldr	r4, [r3, #12]
 801b808:	6838      	ldr	r0, [r7, #0]
 801b80a:	f7f7 fb02 	bl	8012e12 <lwip_htonl>
 801b80e:	4603      	mov	r3, r0
 801b810:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801b812:	7dfb      	ldrb	r3, [r7, #23]
 801b814:	089b      	lsrs	r3, r3, #2
 801b816:	b2db      	uxtb	r3, r3
 801b818:	b29b      	uxth	r3, r3
 801b81a:	3305      	adds	r3, #5
 801b81c:	b29b      	uxth	r3, r3
 801b81e:	031b      	lsls	r3, r3, #12
 801b820:	b29a      	uxth	r2, r3
 801b822:	79fb      	ldrb	r3, [r7, #7]
 801b824:	b29b      	uxth	r3, r3
 801b826:	4313      	orrs	r3, r2
 801b828:	b29a      	uxth	r2, r3
 801b82a:	693b      	ldr	r3, [r7, #16]
 801b82c:	68dc      	ldr	r4, [r3, #12]
 801b82e:	4610      	mov	r0, r2
 801b830:	f7f7 fada 	bl	8012de8 <lwip_htons>
 801b834:	4603      	mov	r3, r0
 801b836:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801b838:	693b      	ldr	r3, [r7, #16]
 801b83a:	68db      	ldr	r3, [r3, #12]
 801b83c:	2200      	movs	r2, #0
 801b83e:	749a      	strb	r2, [r3, #18]
 801b840:	2200      	movs	r2, #0
 801b842:	74da      	strb	r2, [r3, #19]
  return seg;
 801b844:	693b      	ldr	r3, [r7, #16]
}
 801b846:	4618      	mov	r0, r3
 801b848:	371c      	adds	r7, #28
 801b84a:	46bd      	mov	sp, r7
 801b84c:	bd90      	pop	{r4, r7, pc}
 801b84e:	bf00      	nop
 801b850:	08026ed0 	.word	0x08026ed0
 801b854:	08026f30 	.word	0x08026f30
 801b858:	08026f50 	.word	0x08026f50
 801b85c:	08026f78 	.word	0x08026f78
 801b860:	08026f9c 	.word	0x08026f9c

0801b864 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b086      	sub	sp, #24
 801b868:	af00      	add	r7, sp, #0
 801b86a:	607b      	str	r3, [r7, #4]
 801b86c:	4603      	mov	r3, r0
 801b86e:	73fb      	strb	r3, [r7, #15]
 801b870:	460b      	mov	r3, r1
 801b872:	81bb      	strh	r3, [r7, #12]
 801b874:	4613      	mov	r3, r2
 801b876:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801b878:	89bb      	ldrh	r3, [r7, #12]
 801b87a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d105      	bne.n	801b88e <tcp_pbuf_prealloc+0x2a>
 801b882:	4b30      	ldr	r3, [pc, #192]	; (801b944 <tcp_pbuf_prealloc+0xe0>)
 801b884:	22e8      	movs	r2, #232	; 0xe8
 801b886:	4930      	ldr	r1, [pc, #192]	; (801b948 <tcp_pbuf_prealloc+0xe4>)
 801b888:	4830      	ldr	r0, [pc, #192]	; (801b94c <tcp_pbuf_prealloc+0xe8>)
 801b88a:	f004 fbbb 	bl	8020004 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801b88e:	6a3b      	ldr	r3, [r7, #32]
 801b890:	2b00      	cmp	r3, #0
 801b892:	d105      	bne.n	801b8a0 <tcp_pbuf_prealloc+0x3c>
 801b894:	4b2b      	ldr	r3, [pc, #172]	; (801b944 <tcp_pbuf_prealloc+0xe0>)
 801b896:	22e9      	movs	r2, #233	; 0xe9
 801b898:	492d      	ldr	r1, [pc, #180]	; (801b950 <tcp_pbuf_prealloc+0xec>)
 801b89a:	482c      	ldr	r0, [pc, #176]	; (801b94c <tcp_pbuf_prealloc+0xe8>)
 801b89c:	f004 fbb2 	bl	8020004 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801b8a0:	89ba      	ldrh	r2, [r7, #12]
 801b8a2:	897b      	ldrh	r3, [r7, #10]
 801b8a4:	429a      	cmp	r2, r3
 801b8a6:	d221      	bcs.n	801b8ec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b8a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b8ac:	f003 0302 	and.w	r3, r3, #2
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d111      	bne.n	801b8d8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801b8b4:	6a3b      	ldr	r3, [r7, #32]
 801b8b6:	8b5b      	ldrh	r3, [r3, #26]
 801b8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d115      	bne.n	801b8ec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801b8c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d007      	beq.n	801b8d8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801b8c8:	6a3b      	ldr	r3, [r7, #32]
 801b8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d103      	bne.n	801b8d8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801b8d0:	6a3b      	ldr	r3, [r7, #32]
 801b8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d009      	beq.n	801b8ec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801b8d8:	89bb      	ldrh	r3, [r7, #12]
 801b8da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801b8de:	f023 0203 	bic.w	r2, r3, #3
 801b8e2:	897b      	ldrh	r3, [r7, #10]
 801b8e4:	4293      	cmp	r3, r2
 801b8e6:	bf28      	it	cs
 801b8e8:	4613      	movcs	r3, r2
 801b8ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801b8ec:	8af9      	ldrh	r1, [r7, #22]
 801b8ee:	7bfb      	ldrb	r3, [r7, #15]
 801b8f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	f7fa fe8f 	bl	8016618 <pbuf_alloc>
 801b8fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b8fc:	693b      	ldr	r3, [r7, #16]
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d101      	bne.n	801b906 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801b902:	2300      	movs	r3, #0
 801b904:	e019      	b.n	801b93a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801b906:	693b      	ldr	r3, [r7, #16]
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d006      	beq.n	801b91c <tcp_pbuf_prealloc+0xb8>
 801b90e:	4b0d      	ldr	r3, [pc, #52]	; (801b944 <tcp_pbuf_prealloc+0xe0>)
 801b910:	f240 120b 	movw	r2, #267	; 0x10b
 801b914:	490f      	ldr	r1, [pc, #60]	; (801b954 <tcp_pbuf_prealloc+0xf0>)
 801b916:	480d      	ldr	r0, [pc, #52]	; (801b94c <tcp_pbuf_prealloc+0xe8>)
 801b918:	f004 fb74 	bl	8020004 <iprintf>
  *oversize = p->len - length;
 801b91c:	693b      	ldr	r3, [r7, #16]
 801b91e:	895a      	ldrh	r2, [r3, #10]
 801b920:	89bb      	ldrh	r3, [r7, #12]
 801b922:	1ad3      	subs	r3, r2, r3
 801b924:	b29a      	uxth	r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801b92a:	693b      	ldr	r3, [r7, #16]
 801b92c:	89ba      	ldrh	r2, [r7, #12]
 801b92e:	811a      	strh	r2, [r3, #8]
 801b930:	693b      	ldr	r3, [r7, #16]
 801b932:	891a      	ldrh	r2, [r3, #8]
 801b934:	693b      	ldr	r3, [r7, #16]
 801b936:	815a      	strh	r2, [r3, #10]
  return p;
 801b938:	693b      	ldr	r3, [r7, #16]
}
 801b93a:	4618      	mov	r0, r3
 801b93c:	3718      	adds	r7, #24
 801b93e:	46bd      	mov	sp, r7
 801b940:	bd80      	pop	{r7, pc}
 801b942:	bf00      	nop
 801b944:	08026ed0 	.word	0x08026ed0
 801b948:	08026fb4 	.word	0x08026fb4
 801b94c:	08026f50 	.word	0x08026f50
 801b950:	08026fd8 	.word	0x08026fd8
 801b954:	08026ff8 	.word	0x08026ff8

0801b958 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b082      	sub	sp, #8
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
 801b960:	460b      	mov	r3, r1
 801b962:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d106      	bne.n	801b978 <tcp_write_checks+0x20>
 801b96a:	4b33      	ldr	r3, [pc, #204]	; (801ba38 <tcp_write_checks+0xe0>)
 801b96c:	f240 1233 	movw	r2, #307	; 0x133
 801b970:	4932      	ldr	r1, [pc, #200]	; (801ba3c <tcp_write_checks+0xe4>)
 801b972:	4833      	ldr	r0, [pc, #204]	; (801ba40 <tcp_write_checks+0xe8>)
 801b974:	f004 fb46 	bl	8020004 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	7d1b      	ldrb	r3, [r3, #20]
 801b97c:	2b04      	cmp	r3, #4
 801b97e:	d00e      	beq.n	801b99e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801b984:	2b07      	cmp	r3, #7
 801b986:	d00a      	beq.n	801b99e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801b98c:	2b02      	cmp	r3, #2
 801b98e:	d006      	beq.n	801b99e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801b994:	2b03      	cmp	r3, #3
 801b996:	d002      	beq.n	801b99e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801b998:	f06f 030a 	mvn.w	r3, #10
 801b99c:	e048      	b.n	801ba30 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801b99e:	887b      	ldrh	r3, [r7, #2]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d101      	bne.n	801b9a8 <tcp_write_checks+0x50>
    return ERR_OK;
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	e043      	b.n	801ba30 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b9ae:	887a      	ldrh	r2, [r7, #2]
 801b9b0:	429a      	cmp	r2, r3
 801b9b2:	d909      	bls.n	801b9c8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	8b5b      	ldrh	r3, [r3, #26]
 801b9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b9bc:	b29a      	uxth	r2, r3
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b9c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b9c6:	e033      	b.n	801ba30 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b9ce:	2b08      	cmp	r3, #8
 801b9d0:	d909      	bls.n	801b9e6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	8b5b      	ldrh	r3, [r3, #26]
 801b9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b9da:	b29a      	uxth	r2, r3
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801b9e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b9e4:	e024      	b.n	801ba30 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d00f      	beq.n	801ba10 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d11a      	bne.n	801ba2e <tcp_write_checks+0xd6>
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d116      	bne.n	801ba2e <tcp_write_checks+0xd6>
 801ba00:	4b0d      	ldr	r3, [pc, #52]	; (801ba38 <tcp_write_checks+0xe0>)
 801ba02:	f240 1255 	movw	r2, #341	; 0x155
 801ba06:	490f      	ldr	r1, [pc, #60]	; (801ba44 <tcp_write_checks+0xec>)
 801ba08:	480d      	ldr	r0, [pc, #52]	; (801ba40 <tcp_write_checks+0xe8>)
 801ba0a:	f004 fafb 	bl	8020004 <iprintf>
 801ba0e:	e00e      	b.n	801ba2e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d103      	bne.n	801ba20 <tcp_write_checks+0xc8>
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d006      	beq.n	801ba2e <tcp_write_checks+0xd6>
 801ba20:	4b05      	ldr	r3, [pc, #20]	; (801ba38 <tcp_write_checks+0xe0>)
 801ba22:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801ba26:	4908      	ldr	r1, [pc, #32]	; (801ba48 <tcp_write_checks+0xf0>)
 801ba28:	4805      	ldr	r0, [pc, #20]	; (801ba40 <tcp_write_checks+0xe8>)
 801ba2a:	f004 faeb 	bl	8020004 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ba2e:	2300      	movs	r3, #0
}
 801ba30:	4618      	mov	r0, r3
 801ba32:	3708      	adds	r7, #8
 801ba34:	46bd      	mov	sp, r7
 801ba36:	bd80      	pop	{r7, pc}
 801ba38:	08026ed0 	.word	0x08026ed0
 801ba3c:	0802700c 	.word	0x0802700c
 801ba40:	08026f50 	.word	0x08026f50
 801ba44:	0802702c 	.word	0x0802702c
 801ba48:	08027068 	.word	0x08027068

0801ba4c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801ba4c:	b590      	push	{r4, r7, lr}
 801ba4e:	b09b      	sub	sp, #108	; 0x6c
 801ba50:	af04      	add	r7, sp, #16
 801ba52:	60f8      	str	r0, [r7, #12]
 801ba54:	60b9      	str	r1, [r7, #8]
 801ba56:	4611      	mov	r1, r2
 801ba58:	461a      	mov	r2, r3
 801ba5a:	460b      	mov	r3, r1
 801ba5c:	80fb      	strh	r3, [r7, #6]
 801ba5e:	4613      	mov	r3, r2
 801ba60:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801ba62:	2300      	movs	r3, #0
 801ba64:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ba66:	2300      	movs	r3, #0
 801ba68:	653b      	str	r3, [r7, #80]	; 0x50
 801ba6a:	2300      	movs	r3, #0
 801ba6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ba6e:	2300      	movs	r3, #0
 801ba70:	64bb      	str	r3, [r7, #72]	; 0x48
 801ba72:	2300      	movs	r3, #0
 801ba74:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801ba76:	2300      	movs	r3, #0
 801ba78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801ba82:	2300      	movs	r3, #0
 801ba84:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801ba86:	2300      	movs	r3, #0
 801ba88:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d109      	bne.n	801baa8 <tcp_write+0x5c>
 801ba94:	4ba4      	ldr	r3, [pc, #656]	; (801bd28 <tcp_write+0x2dc>)
 801ba96:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801ba9a:	49a4      	ldr	r1, [pc, #656]	; (801bd2c <tcp_write+0x2e0>)
 801ba9c:	48a4      	ldr	r0, [pc, #656]	; (801bd30 <tcp_write+0x2e4>)
 801ba9e:	f004 fab1 	bl	8020004 <iprintf>
 801baa2:	f06f 030f 	mvn.w	r3, #15
 801baa6:	e32a      	b.n	801c0fe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801baae:	085b      	lsrs	r3, r3, #1
 801bab0:	b29a      	uxth	r2, r3
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bab6:	4293      	cmp	r3, r2
 801bab8:	bf28      	it	cs
 801baba:	4613      	movcs	r3, r2
 801babc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801babe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d102      	bne.n	801baca <tcp_write+0x7e>
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bac8:	e000      	b.n	801bacc <tcp_write+0x80>
 801baca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bacc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801bace:	68bb      	ldr	r3, [r7, #8]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d109      	bne.n	801bae8 <tcp_write+0x9c>
 801bad4:	4b94      	ldr	r3, [pc, #592]	; (801bd28 <tcp_write+0x2dc>)
 801bad6:	f240 12ad 	movw	r2, #429	; 0x1ad
 801bada:	4996      	ldr	r1, [pc, #600]	; (801bd34 <tcp_write+0x2e8>)
 801badc:	4894      	ldr	r0, [pc, #592]	; (801bd30 <tcp_write+0x2e4>)
 801bade:	f004 fa91 	bl	8020004 <iprintf>
 801bae2:	f06f 030f 	mvn.w	r3, #15
 801bae6:	e30a      	b.n	801c0fe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801bae8:	88fb      	ldrh	r3, [r7, #6]
 801baea:	4619      	mov	r1, r3
 801baec:	68f8      	ldr	r0, [r7, #12]
 801baee:	f7ff ff33 	bl	801b958 <tcp_write_checks>
 801baf2:	4603      	mov	r3, r0
 801baf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801baf8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d002      	beq.n	801bb06 <tcp_write+0xba>
    return err;
 801bb00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801bb04:	e2fb      	b.n	801c0fe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bb10:	2300      	movs	r3, #0
 801bb12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	f000 80f6 	beq.w	801bd0c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb24:	653b      	str	r3, [r7, #80]	; 0x50
 801bb26:	e002      	b.n	801bb2e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801bb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801bb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d1f8      	bne.n	801bb28 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801bb36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb38:	7a9b      	ldrb	r3, [r3, #10]
 801bb3a:	009b      	lsls	r3, r3, #2
 801bb3c:	b29b      	uxth	r3, r3
 801bb3e:	f003 0304 	and.w	r3, r3, #4
 801bb42:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801bb44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb48:	891b      	ldrh	r3, [r3, #8]
 801bb4a:	4619      	mov	r1, r3
 801bb4c:	8c3b      	ldrh	r3, [r7, #32]
 801bb4e:	440b      	add	r3, r1
 801bb50:	429a      	cmp	r2, r3
 801bb52:	da06      	bge.n	801bb62 <tcp_write+0x116>
 801bb54:	4b74      	ldr	r3, [pc, #464]	; (801bd28 <tcp_write+0x2dc>)
 801bb56:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801bb5a:	4977      	ldr	r1, [pc, #476]	; (801bd38 <tcp_write+0x2ec>)
 801bb5c:	4874      	ldr	r0, [pc, #464]	; (801bd30 <tcp_write+0x2e4>)
 801bb5e:	f004 fa51 	bl	8020004 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801bb62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb64:	891a      	ldrh	r2, [r3, #8]
 801bb66:	8c3b      	ldrh	r3, [r7, #32]
 801bb68:	4413      	add	r3, r2
 801bb6a:	b29b      	uxth	r3, r3
 801bb6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bb6e:	1ad3      	subs	r3, r2, r3
 801bb70:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801bb78:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801bb7a:	8a7b      	ldrh	r3, [r7, #18]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d026      	beq.n	801bbce <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801bb80:	8a7b      	ldrh	r3, [r7, #18]
 801bb82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bb84:	429a      	cmp	r2, r3
 801bb86:	d206      	bcs.n	801bb96 <tcp_write+0x14a>
 801bb88:	4b67      	ldr	r3, [pc, #412]	; (801bd28 <tcp_write+0x2dc>)
 801bb8a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801bb8e:	496b      	ldr	r1, [pc, #428]	; (801bd3c <tcp_write+0x2f0>)
 801bb90:	4867      	ldr	r0, [pc, #412]	; (801bd30 <tcp_write+0x2e4>)
 801bb92:	f004 fa37 	bl	8020004 <iprintf>
      seg = last_unsent;
 801bb96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bb98:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801bb9a:	8a7b      	ldrh	r3, [r7, #18]
 801bb9c:	88fa      	ldrh	r2, [r7, #6]
 801bb9e:	4293      	cmp	r3, r2
 801bba0:	bf28      	it	cs
 801bba2:	4613      	movcs	r3, r2
 801bba4:	b29b      	uxth	r3, r3
 801bba6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bba8:	4293      	cmp	r3, r2
 801bbaa:	bf28      	it	cs
 801bbac:	4613      	movcs	r3, r2
 801bbae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801bbb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bbb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bbb6:	4413      	add	r3, r2
 801bbb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801bbbc:	8a7a      	ldrh	r2, [r7, #18]
 801bbbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bbc0:	1ad3      	subs	r3, r2, r3
 801bbc2:	b29b      	uxth	r3, r3
 801bbc4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801bbc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bbc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bbca:	1ad3      	subs	r3, r2, r3
 801bbcc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801bbce:	8a7b      	ldrh	r3, [r7, #18]
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d00b      	beq.n	801bbec <tcp_write+0x1a0>
 801bbd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bbd8:	88fb      	ldrh	r3, [r7, #6]
 801bbda:	429a      	cmp	r2, r3
 801bbdc:	d006      	beq.n	801bbec <tcp_write+0x1a0>
 801bbde:	4b52      	ldr	r3, [pc, #328]	; (801bd28 <tcp_write+0x2dc>)
 801bbe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bbe4:	4956      	ldr	r1, [pc, #344]	; (801bd40 <tcp_write+0x2f4>)
 801bbe6:	4852      	ldr	r0, [pc, #328]	; (801bd30 <tcp_write+0x2e4>)
 801bbe8:	f004 fa0c 	bl	8020004 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801bbec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bbf0:	88fb      	ldrh	r3, [r7, #6]
 801bbf2:	429a      	cmp	r2, r3
 801bbf4:	f080 8167 	bcs.w	801bec6 <tcp_write+0x47a>
 801bbf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	f000 8163 	beq.w	801bec6 <tcp_write+0x47a>
 801bc00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc02:	891b      	ldrh	r3, [r3, #8]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	f000 815e 	beq.w	801bec6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801bc0a:	88fa      	ldrh	r2, [r7, #6]
 801bc0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bc10:	1ad2      	subs	r2, r2, r3
 801bc12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bc14:	4293      	cmp	r3, r2
 801bc16:	bfa8      	it	ge
 801bc18:	4613      	movge	r3, r2
 801bc1a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801bc1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc1e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801bc20:	797b      	ldrb	r3, [r7, #5]
 801bc22:	f003 0301 	and.w	r3, r3, #1
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d027      	beq.n	801bc7a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801bc2a:	f107 0012 	add.w	r0, r7, #18
 801bc2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801bc30:	8bf9      	ldrh	r1, [r7, #30]
 801bc32:	2301      	movs	r3, #1
 801bc34:	9302      	str	r3, [sp, #8]
 801bc36:	797b      	ldrb	r3, [r7, #5]
 801bc38:	9301      	str	r3, [sp, #4]
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	9300      	str	r3, [sp, #0]
 801bc3e:	4603      	mov	r3, r0
 801bc40:	2000      	movs	r0, #0
 801bc42:	f7ff fe0f 	bl	801b864 <tcp_pbuf_prealloc>
 801bc46:	6578      	str	r0, [r7, #84]	; 0x54
 801bc48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	f000 8225 	beq.w	801c09a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801bc50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc52:	6858      	ldr	r0, [r3, #4]
 801bc54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bc58:	68ba      	ldr	r2, [r7, #8]
 801bc5a:	4413      	add	r3, r2
 801bc5c:	8bfa      	ldrh	r2, [r7, #30]
 801bc5e:	4619      	mov	r1, r3
 801bc60:	f003 faae 	bl	801f1c0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801bc64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801bc66:	f7fb f843 	bl	8016cf0 <pbuf_clen>
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	461a      	mov	r2, r3
 801bc6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bc72:	4413      	add	r3, r2
 801bc74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801bc78:	e041      	b.n	801bcfe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801bc7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bc7c:	685b      	ldr	r3, [r3, #4]
 801bc7e:	637b      	str	r3, [r7, #52]	; 0x34
 801bc80:	e002      	b.n	801bc88 <tcp_write+0x23c>
 801bc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	637b      	str	r3, [r7, #52]	; 0x34
 801bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d1f8      	bne.n	801bc82 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801bc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc92:	7b1b      	ldrb	r3, [r3, #12]
 801bc94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d115      	bne.n	801bcc8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801bc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc9e:	685b      	ldr	r3, [r3, #4]
 801bca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bca2:	8952      	ldrh	r2, [r2, #10]
 801bca4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801bca6:	68ba      	ldr	r2, [r7, #8]
 801bca8:	429a      	cmp	r2, r3
 801bcaa:	d10d      	bne.n	801bcc8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801bcac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d006      	beq.n	801bcc2 <tcp_write+0x276>
 801bcb4:	4b1c      	ldr	r3, [pc, #112]	; (801bd28 <tcp_write+0x2dc>)
 801bcb6:	f240 2231 	movw	r2, #561	; 0x231
 801bcba:	4922      	ldr	r1, [pc, #136]	; (801bd44 <tcp_write+0x2f8>)
 801bcbc:	481c      	ldr	r0, [pc, #112]	; (801bd30 <tcp_write+0x2e4>)
 801bcbe:	f004 f9a1 	bl	8020004 <iprintf>
          extendlen = seglen;
 801bcc2:	8bfb      	ldrh	r3, [r7, #30]
 801bcc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801bcc6:	e01a      	b.n	801bcfe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801bcc8:	8bfb      	ldrh	r3, [r7, #30]
 801bcca:	2201      	movs	r2, #1
 801bccc:	4619      	mov	r1, r3
 801bcce:	2000      	movs	r0, #0
 801bcd0:	f7fa fca2 	bl	8016618 <pbuf_alloc>
 801bcd4:	6578      	str	r0, [r7, #84]	; 0x54
 801bcd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	f000 81e0 	beq.w	801c09e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801bcde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bce2:	68ba      	ldr	r2, [r7, #8]
 801bce4:	441a      	add	r2, r3
 801bce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bce8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801bcea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801bcec:	f7fb f800 	bl	8016cf0 <pbuf_clen>
 801bcf0:	4603      	mov	r3, r0
 801bcf2:	461a      	mov	r2, r3
 801bcf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bcf8:	4413      	add	r3, r2
 801bcfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801bcfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bd02:	8bfb      	ldrh	r3, [r7, #30]
 801bd04:	4413      	add	r3, r2
 801bd06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801bd0a:	e0dc      	b.n	801bec6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	f000 80d7 	beq.w	801bec6 <tcp_write+0x47a>
 801bd18:	4b03      	ldr	r3, [pc, #12]	; (801bd28 <tcp_write+0x2dc>)
 801bd1a:	f240 224a 	movw	r2, #586	; 0x24a
 801bd1e:	490a      	ldr	r1, [pc, #40]	; (801bd48 <tcp_write+0x2fc>)
 801bd20:	4803      	ldr	r0, [pc, #12]	; (801bd30 <tcp_write+0x2e4>)
 801bd22:	f004 f96f 	bl	8020004 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801bd26:	e0ce      	b.n	801bec6 <tcp_write+0x47a>
 801bd28:	08026ed0 	.word	0x08026ed0
 801bd2c:	0802709c 	.word	0x0802709c
 801bd30:	08026f50 	.word	0x08026f50
 801bd34:	080270b4 	.word	0x080270b4
 801bd38:	080270e8 	.word	0x080270e8
 801bd3c:	08027100 	.word	0x08027100
 801bd40:	08027120 	.word	0x08027120
 801bd44:	08027140 	.word	0x08027140
 801bd48:	0802716c 	.word	0x0802716c
    struct pbuf *p;
    u16_t left = len - pos;
 801bd4c:	88fa      	ldrh	r2, [r7, #6]
 801bd4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bd52:	1ad3      	subs	r3, r2, r3
 801bd54:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801bd56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bd5a:	b29b      	uxth	r3, r3
 801bd5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bd5e:	1ad3      	subs	r3, r2, r3
 801bd60:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801bd62:	8b7a      	ldrh	r2, [r7, #26]
 801bd64:	8bbb      	ldrh	r3, [r7, #28]
 801bd66:	4293      	cmp	r3, r2
 801bd68:	bf28      	it	cs
 801bd6a:	4613      	movcs	r3, r2
 801bd6c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801bd6e:	797b      	ldrb	r3, [r7, #5]
 801bd70:	f003 0301 	and.w	r3, r3, #1
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d036      	beq.n	801bde6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801bd78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bd7c:	b29a      	uxth	r2, r3
 801bd7e:	8b3b      	ldrh	r3, [r7, #24]
 801bd80:	4413      	add	r3, r2
 801bd82:	b299      	uxth	r1, r3
 801bd84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	bf0c      	ite	eq
 801bd8a:	2301      	moveq	r3, #1
 801bd8c:	2300      	movne	r3, #0
 801bd8e:	b2db      	uxtb	r3, r3
 801bd90:	f107 0012 	add.w	r0, r7, #18
 801bd94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bd96:	9302      	str	r3, [sp, #8]
 801bd98:	797b      	ldrb	r3, [r7, #5]
 801bd9a:	9301      	str	r3, [sp, #4]
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	9300      	str	r3, [sp, #0]
 801bda0:	4603      	mov	r3, r0
 801bda2:	2036      	movs	r0, #54	; 0x36
 801bda4:	f7ff fd5e 	bl	801b864 <tcp_pbuf_prealloc>
 801bda8:	6338      	str	r0, [r7, #48]	; 0x30
 801bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	f000 8178 	beq.w	801c0a2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdb4:	895b      	ldrh	r3, [r3, #10]
 801bdb6:	8b3a      	ldrh	r2, [r7, #24]
 801bdb8:	429a      	cmp	r2, r3
 801bdba:	d906      	bls.n	801bdca <tcp_write+0x37e>
 801bdbc:	4b8c      	ldr	r3, [pc, #560]	; (801bff0 <tcp_write+0x5a4>)
 801bdbe:	f240 2266 	movw	r2, #614	; 0x266
 801bdc2:	498c      	ldr	r1, [pc, #560]	; (801bff4 <tcp_write+0x5a8>)
 801bdc4:	488c      	ldr	r0, [pc, #560]	; (801bff8 <tcp_write+0x5ac>)
 801bdc6:	f004 f91d 	bl	8020004 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdcc:	685a      	ldr	r2, [r3, #4]
 801bdce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801bdd2:	18d0      	adds	r0, r2, r3
 801bdd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bdd8:	68ba      	ldr	r2, [r7, #8]
 801bdda:	4413      	add	r3, r2
 801bddc:	8b3a      	ldrh	r2, [r7, #24]
 801bdde:	4619      	mov	r1, r3
 801bde0:	f003 f9ee 	bl	801f1c0 <memcpy>
 801bde4:	e02f      	b.n	801be46 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801bde6:	8a7b      	ldrh	r3, [r7, #18]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d006      	beq.n	801bdfa <tcp_write+0x3ae>
 801bdec:	4b80      	ldr	r3, [pc, #512]	; (801bff0 <tcp_write+0x5a4>)
 801bdee:	f240 2271 	movw	r2, #625	; 0x271
 801bdf2:	4982      	ldr	r1, [pc, #520]	; (801bffc <tcp_write+0x5b0>)
 801bdf4:	4880      	ldr	r0, [pc, #512]	; (801bff8 <tcp_write+0x5ac>)
 801bdf6:	f004 f905 	bl	8020004 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801bdfa:	8b3b      	ldrh	r3, [r7, #24]
 801bdfc:	2201      	movs	r2, #1
 801bdfe:	4619      	mov	r1, r3
 801be00:	2036      	movs	r0, #54	; 0x36
 801be02:	f7fa fc09 	bl	8016618 <pbuf_alloc>
 801be06:	6178      	str	r0, [r7, #20]
 801be08:	697b      	ldr	r3, [r7, #20]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	f000 814b 	beq.w	801c0a6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801be10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801be14:	68ba      	ldr	r2, [r7, #8]
 801be16:	441a      	add	r2, r3
 801be18:	697b      	ldr	r3, [r7, #20]
 801be1a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801be1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801be20:	b29b      	uxth	r3, r3
 801be22:	f44f 7220 	mov.w	r2, #640	; 0x280
 801be26:	4619      	mov	r1, r3
 801be28:	2036      	movs	r0, #54	; 0x36
 801be2a:	f7fa fbf5 	bl	8016618 <pbuf_alloc>
 801be2e:	6338      	str	r0, [r7, #48]	; 0x30
 801be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801be32:	2b00      	cmp	r3, #0
 801be34:	d103      	bne.n	801be3e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801be36:	6978      	ldr	r0, [r7, #20]
 801be38:	f7fa fed2 	bl	8016be0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801be3c:	e136      	b.n	801c0ac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801be3e:	6979      	ldr	r1, [r7, #20]
 801be40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801be42:	f7fa ff8f 	bl	8016d64 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801be46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801be48:	f7fa ff52 	bl	8016cf0 <pbuf_clen>
 801be4c:	4603      	mov	r3, r0
 801be4e:	461a      	mov	r2, r3
 801be50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801be54:	4413      	add	r3, r2
 801be56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801be5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801be5e:	2b09      	cmp	r3, #9
 801be60:	d903      	bls.n	801be6a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801be62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801be64:	f7fa febc 	bl	8016be0 <pbuf_free>
      goto memerr;
 801be68:	e120      	b.n	801c0ac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801be6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801be72:	441a      	add	r2, r3
 801be74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be78:	9300      	str	r3, [sp, #0]
 801be7a:	4613      	mov	r3, r2
 801be7c:	2200      	movs	r2, #0
 801be7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801be80:	68f8      	ldr	r0, [r7, #12]
 801be82:	f7ff fc51 	bl	801b728 <tcp_create_segment>
 801be86:	64f8      	str	r0, [r7, #76]	; 0x4c
 801be88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	f000 810d 	beq.w	801c0aa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801be90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801be92:	2b00      	cmp	r3, #0
 801be94:	d102      	bne.n	801be9c <tcp_write+0x450>
      queue = seg;
 801be96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801be98:	647b      	str	r3, [r7, #68]	; 0x44
 801be9a:	e00c      	b.n	801beb6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801be9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d106      	bne.n	801beb0 <tcp_write+0x464>
 801bea2:	4b53      	ldr	r3, [pc, #332]	; (801bff0 <tcp_write+0x5a4>)
 801bea4:	f240 22ab 	movw	r2, #683	; 0x2ab
 801bea8:	4955      	ldr	r1, [pc, #340]	; (801c000 <tcp_write+0x5b4>)
 801beaa:	4853      	ldr	r0, [pc, #332]	; (801bff8 <tcp_write+0x5ac>)
 801beac:	f004 f8aa 	bl	8020004 <iprintf>
      prev_seg->next = seg;
 801beb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801beb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801beb4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801beb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801beb8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801beba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bebe:	8b3b      	ldrh	r3, [r7, #24]
 801bec0:	4413      	add	r3, r2
 801bec2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801bec6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801beca:	88fb      	ldrh	r3, [r7, #6]
 801becc:	429a      	cmp	r2, r3
 801bece:	f4ff af3d 	bcc.w	801bd4c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801bed2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d02c      	beq.n	801bf32 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801bed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801beda:	685b      	ldr	r3, [r3, #4]
 801bedc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bede:	e01e      	b.n	801bf1e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801bee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bee2:	891a      	ldrh	r2, [r3, #8]
 801bee4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bee6:	4413      	add	r3, r2
 801bee8:	b29a      	uxth	r2, r3
 801beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801beee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d110      	bne.n	801bf18 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bef8:	685b      	ldr	r3, [r3, #4]
 801befa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801befc:	8952      	ldrh	r2, [r2, #10]
 801befe:	4413      	add	r3, r2
 801bf00:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bf02:	68b9      	ldr	r1, [r7, #8]
 801bf04:	4618      	mov	r0, r3
 801bf06:	f003 f95b 	bl	801f1c0 <memcpy>
        p->len += oversize_used;
 801bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf0c:	895a      	ldrh	r2, [r3, #10]
 801bf0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bf10:	4413      	add	r3, r2
 801bf12:	b29a      	uxth	r2, r3
 801bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf16:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d1dd      	bne.n	801bee0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801bf24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf26:	891a      	ldrh	r2, [r3, #8]
 801bf28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bf2a:	4413      	add	r3, r2
 801bf2c:	b29a      	uxth	r2, r3
 801bf2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf30:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801bf32:	8a7a      	ldrh	r2, [r7, #18]
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801bf3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d018      	beq.n	801bf72 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801bf40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d106      	bne.n	801bf54 <tcp_write+0x508>
 801bf46:	4b2a      	ldr	r3, [pc, #168]	; (801bff0 <tcp_write+0x5a4>)
 801bf48:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801bf4c:	492d      	ldr	r1, [pc, #180]	; (801c004 <tcp_write+0x5b8>)
 801bf4e:	482a      	ldr	r0, [pc, #168]	; (801bff8 <tcp_write+0x5ac>)
 801bf50:	f004 f858 	bl	8020004 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801bf54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf56:	685b      	ldr	r3, [r3, #4]
 801bf58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	f7fa ff02 	bl	8016d64 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801bf60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf62:	891a      	ldrh	r2, [r3, #8]
 801bf64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bf66:	891b      	ldrh	r3, [r3, #8]
 801bf68:	4413      	add	r3, r2
 801bf6a:	b29a      	uxth	r2, r3
 801bf6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf6e:	811a      	strh	r2, [r3, #8]
 801bf70:	e037      	b.n	801bfe2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801bf72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d034      	beq.n	801bfe2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801bf78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d003      	beq.n	801bf86 <tcp_write+0x53a>
 801bf7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf80:	685b      	ldr	r3, [r3, #4]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d106      	bne.n	801bf94 <tcp_write+0x548>
 801bf86:	4b1a      	ldr	r3, [pc, #104]	; (801bff0 <tcp_write+0x5a4>)
 801bf88:	f240 22e6 	movw	r2, #742	; 0x2e6
 801bf8c:	491e      	ldr	r1, [pc, #120]	; (801c008 <tcp_write+0x5bc>)
 801bf8e:	481a      	ldr	r0, [pc, #104]	; (801bff8 <tcp_write+0x5ac>)
 801bf90:	f004 f838 	bl	8020004 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bf94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf96:	685b      	ldr	r3, [r3, #4]
 801bf98:	62bb      	str	r3, [r7, #40]	; 0x28
 801bf9a:	e009      	b.n	801bfb0 <tcp_write+0x564>
      p->tot_len += extendlen;
 801bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf9e:	891a      	ldrh	r2, [r3, #8]
 801bfa0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bfa2:	4413      	add	r3, r2
 801bfa4:	b29a      	uxth	r2, r3
 801bfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfa8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	62bb      	str	r3, [r7, #40]	; 0x28
 801bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d1f1      	bne.n	801bf9c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfba:	891a      	ldrh	r2, [r3, #8]
 801bfbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bfbe:	4413      	add	r3, r2
 801bfc0:	b29a      	uxth	r2, r3
 801bfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfc4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801bfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfc8:	895a      	ldrh	r2, [r3, #10]
 801bfca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bfcc:	4413      	add	r3, r2
 801bfce:	b29a      	uxth	r2, r3
 801bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfd2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801bfd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bfd6:	891a      	ldrh	r2, [r3, #8]
 801bfd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bfda:	4413      	add	r3, r2
 801bfdc:	b29a      	uxth	r2, r3
 801bfde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bfe0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801bfe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d111      	bne.n	801c00c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801bfe8:	68fb      	ldr	r3, [r7, #12]
 801bfea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bfec:	66da      	str	r2, [r3, #108]	; 0x6c
 801bfee:	e010      	b.n	801c012 <tcp_write+0x5c6>
 801bff0:	08026ed0 	.word	0x08026ed0
 801bff4:	0802719c 	.word	0x0802719c
 801bff8:	08026f50 	.word	0x08026f50
 801bffc:	080271dc 	.word	0x080271dc
 801c000:	080271ec 	.word	0x080271ec
 801c004:	08027200 	.word	0x08027200
 801c008:	08027238 	.word	0x08027238
  } else {
    last_unsent->next = queue;
 801c00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c00e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c010:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c016:	88fb      	ldrh	r3, [r7, #6]
 801c018:	441a      	add	r2, r3
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c024:	88fb      	ldrh	r3, [r7, #6]
 801c026:	1ad3      	subs	r3, r2, r3
 801c028:	b29a      	uxth	r2, r3
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c036:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c040:	2b00      	cmp	r3, #0
 801c042:	d00e      	beq.n	801c062 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d10a      	bne.n	801c062 <tcp_write+0x616>
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c050:	2b00      	cmp	r3, #0
 801c052:	d106      	bne.n	801c062 <tcp_write+0x616>
 801c054:	4b2c      	ldr	r3, [pc, #176]	; (801c108 <tcp_write+0x6bc>)
 801c056:	f240 3212 	movw	r2, #786	; 0x312
 801c05a:	492c      	ldr	r1, [pc, #176]	; (801c10c <tcp_write+0x6c0>)
 801c05c:	482c      	ldr	r0, [pc, #176]	; (801c110 <tcp_write+0x6c4>)
 801c05e:	f003 ffd1 	bl	8020004 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801c062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c064:	2b00      	cmp	r3, #0
 801c066:	d016      	beq.n	801c096 <tcp_write+0x64a>
 801c068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c06a:	68db      	ldr	r3, [r3, #12]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d012      	beq.n	801c096 <tcp_write+0x64a>
 801c070:	797b      	ldrb	r3, [r7, #5]
 801c072:	f003 0302 	and.w	r3, r3, #2
 801c076:	2b00      	cmp	r3, #0
 801c078:	d10d      	bne.n	801c096 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801c07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c07c:	68db      	ldr	r3, [r3, #12]
 801c07e:	899b      	ldrh	r3, [r3, #12]
 801c080:	b29c      	uxth	r4, r3
 801c082:	2008      	movs	r0, #8
 801c084:	f7f6 feb0 	bl	8012de8 <lwip_htons>
 801c088:	4603      	mov	r3, r0
 801c08a:	461a      	mov	r2, r3
 801c08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c08e:	68db      	ldr	r3, [r3, #12]
 801c090:	4322      	orrs	r2, r4
 801c092:	b292      	uxth	r2, r2
 801c094:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801c096:	2300      	movs	r3, #0
 801c098:	e031      	b.n	801c0fe <tcp_write+0x6b2>
          goto memerr;
 801c09a:	bf00      	nop
 801c09c:	e006      	b.n	801c0ac <tcp_write+0x660>
            goto memerr;
 801c09e:	bf00      	nop
 801c0a0:	e004      	b.n	801c0ac <tcp_write+0x660>
        goto memerr;
 801c0a2:	bf00      	nop
 801c0a4:	e002      	b.n	801c0ac <tcp_write+0x660>
        goto memerr;
 801c0a6:	bf00      	nop
 801c0a8:	e000      	b.n	801c0ac <tcp_write+0x660>
      goto memerr;
 801c0aa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	8b5b      	ldrh	r3, [r3, #26]
 801c0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0b4:	b29a      	uxth	r2, r3
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801c0ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d002      	beq.n	801c0c6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801c0c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c0c2:	f7fa fd8d 	bl	8016be0 <pbuf_free>
  }
  if (queue != NULL) {
 801c0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d002      	beq.n	801c0d2 <tcp_write+0x686>
    tcp_segs_free(queue);
 801c0cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c0ce:	f7fc fb6f 	bl	80187b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d00e      	beq.n	801c0fa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d10a      	bne.n	801c0fa <tcp_write+0x6ae>
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d106      	bne.n	801c0fa <tcp_write+0x6ae>
 801c0ec:	4b06      	ldr	r3, [pc, #24]	; (801c108 <tcp_write+0x6bc>)
 801c0ee:	f240 3227 	movw	r2, #807	; 0x327
 801c0f2:	4906      	ldr	r1, [pc, #24]	; (801c10c <tcp_write+0x6c0>)
 801c0f4:	4806      	ldr	r0, [pc, #24]	; (801c110 <tcp_write+0x6c4>)
 801c0f6:	f003 ff85 	bl	8020004 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801c0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801c0fe:	4618      	mov	r0, r3
 801c100:	375c      	adds	r7, #92	; 0x5c
 801c102:	46bd      	mov	sp, r7
 801c104:	bd90      	pop	{r4, r7, pc}
 801c106:	bf00      	nop
 801c108:	08026ed0 	.word	0x08026ed0
 801c10c:	08027270 	.word	0x08027270
 801c110:	08026f50 	.word	0x08026f50

0801c114 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801c114:	b590      	push	{r4, r7, lr}
 801c116:	b08b      	sub	sp, #44	; 0x2c
 801c118:	af02      	add	r7, sp, #8
 801c11a:	6078      	str	r0, [r7, #4]
 801c11c:	460b      	mov	r3, r1
 801c11e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801c120:	2300      	movs	r3, #0
 801c122:	61fb      	str	r3, [r7, #28]
 801c124:	2300      	movs	r3, #0
 801c126:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801c128:	2300      	movs	r3, #0
 801c12a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d106      	bne.n	801c140 <tcp_split_unsent_seg+0x2c>
 801c132:	4b95      	ldr	r3, [pc, #596]	; (801c388 <tcp_split_unsent_seg+0x274>)
 801c134:	f240 324b 	movw	r2, #843	; 0x34b
 801c138:	4994      	ldr	r1, [pc, #592]	; (801c38c <tcp_split_unsent_seg+0x278>)
 801c13a:	4895      	ldr	r0, [pc, #596]	; (801c390 <tcp_split_unsent_seg+0x27c>)
 801c13c:	f003 ff62 	bl	8020004 <iprintf>

  useg = pcb->unsent;
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c144:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801c146:	697b      	ldr	r3, [r7, #20]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d102      	bne.n	801c152 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801c14c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c150:	e116      	b.n	801c380 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801c152:	887b      	ldrh	r3, [r7, #2]
 801c154:	2b00      	cmp	r3, #0
 801c156:	d109      	bne.n	801c16c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801c158:	4b8b      	ldr	r3, [pc, #556]	; (801c388 <tcp_split_unsent_seg+0x274>)
 801c15a:	f240 3253 	movw	r2, #851	; 0x353
 801c15e:	498d      	ldr	r1, [pc, #564]	; (801c394 <tcp_split_unsent_seg+0x280>)
 801c160:	488b      	ldr	r0, [pc, #556]	; (801c390 <tcp_split_unsent_seg+0x27c>)
 801c162:	f003 ff4f 	bl	8020004 <iprintf>
    return ERR_VAL;
 801c166:	f06f 0305 	mvn.w	r3, #5
 801c16a:	e109      	b.n	801c380 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801c16c:	697b      	ldr	r3, [r7, #20]
 801c16e:	891b      	ldrh	r3, [r3, #8]
 801c170:	887a      	ldrh	r2, [r7, #2]
 801c172:	429a      	cmp	r2, r3
 801c174:	d301      	bcc.n	801c17a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801c176:	2300      	movs	r3, #0
 801c178:	e102      	b.n	801c380 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c17e:	887a      	ldrh	r2, [r7, #2]
 801c180:	429a      	cmp	r2, r3
 801c182:	d906      	bls.n	801c192 <tcp_split_unsent_seg+0x7e>
 801c184:	4b80      	ldr	r3, [pc, #512]	; (801c388 <tcp_split_unsent_seg+0x274>)
 801c186:	f240 325b 	movw	r2, #859	; 0x35b
 801c18a:	4983      	ldr	r1, [pc, #524]	; (801c398 <tcp_split_unsent_seg+0x284>)
 801c18c:	4880      	ldr	r0, [pc, #512]	; (801c390 <tcp_split_unsent_seg+0x27c>)
 801c18e:	f003 ff39 	bl	8020004 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801c192:	697b      	ldr	r3, [r7, #20]
 801c194:	891b      	ldrh	r3, [r3, #8]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d106      	bne.n	801c1a8 <tcp_split_unsent_seg+0x94>
 801c19a:	4b7b      	ldr	r3, [pc, #492]	; (801c388 <tcp_split_unsent_seg+0x274>)
 801c19c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801c1a0:	497e      	ldr	r1, [pc, #504]	; (801c39c <tcp_split_unsent_seg+0x288>)
 801c1a2:	487b      	ldr	r0, [pc, #492]	; (801c390 <tcp_split_unsent_seg+0x27c>)
 801c1a4:	f003 ff2e 	bl	8020004 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801c1a8:	697b      	ldr	r3, [r7, #20]
 801c1aa:	7a9b      	ldrb	r3, [r3, #10]
 801c1ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801c1ae:	7bfb      	ldrb	r3, [r7, #15]
 801c1b0:	009b      	lsls	r3, r3, #2
 801c1b2:	b2db      	uxtb	r3, r3
 801c1b4:	f003 0304 	and.w	r3, r3, #4
 801c1b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801c1ba:	697b      	ldr	r3, [r7, #20]
 801c1bc:	891a      	ldrh	r2, [r3, #8]
 801c1be:	887b      	ldrh	r3, [r7, #2]
 801c1c0:	1ad3      	subs	r3, r2, r3
 801c1c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801c1c4:	7bbb      	ldrb	r3, [r7, #14]
 801c1c6:	b29a      	uxth	r2, r3
 801c1c8:	89bb      	ldrh	r3, [r7, #12]
 801c1ca:	4413      	add	r3, r2
 801c1cc:	b29b      	uxth	r3, r3
 801c1ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c1d2:	4619      	mov	r1, r3
 801c1d4:	2036      	movs	r0, #54	; 0x36
 801c1d6:	f7fa fa1f 	bl	8016618 <pbuf_alloc>
 801c1da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c1dc:	693b      	ldr	r3, [r7, #16]
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	f000 80b7 	beq.w	801c352 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801c1e4:	697b      	ldr	r3, [r7, #20]
 801c1e6:	685b      	ldr	r3, [r3, #4]
 801c1e8:	891a      	ldrh	r2, [r3, #8]
 801c1ea:	697b      	ldr	r3, [r7, #20]
 801c1ec:	891b      	ldrh	r3, [r3, #8]
 801c1ee:	1ad3      	subs	r3, r2, r3
 801c1f0:	b29a      	uxth	r2, r3
 801c1f2:	887b      	ldrh	r3, [r7, #2]
 801c1f4:	4413      	add	r3, r2
 801c1f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c1f8:	697b      	ldr	r3, [r7, #20]
 801c1fa:	6858      	ldr	r0, [r3, #4]
 801c1fc:	693b      	ldr	r3, [r7, #16]
 801c1fe:	685a      	ldr	r2, [r3, #4]
 801c200:	7bbb      	ldrb	r3, [r7, #14]
 801c202:	18d1      	adds	r1, r2, r3
 801c204:	897b      	ldrh	r3, [r7, #10]
 801c206:	89ba      	ldrh	r2, [r7, #12]
 801c208:	f7fa fed4 	bl	8016fb4 <pbuf_copy_partial>
 801c20c:	4603      	mov	r3, r0
 801c20e:	461a      	mov	r2, r3
 801c210:	89bb      	ldrh	r3, [r7, #12]
 801c212:	4293      	cmp	r3, r2
 801c214:	f040 809f 	bne.w	801c356 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c218:	697b      	ldr	r3, [r7, #20]
 801c21a:	68db      	ldr	r3, [r3, #12]
 801c21c:	899b      	ldrh	r3, [r3, #12]
 801c21e:	b29b      	uxth	r3, r3
 801c220:	4618      	mov	r0, r3
 801c222:	f7f6 fde1 	bl	8012de8 <lwip_htons>
 801c226:	4603      	mov	r3, r0
 801c228:	b2db      	uxtb	r3, r3
 801c22a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c22e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801c230:	2300      	movs	r3, #0
 801c232:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801c234:	7efb      	ldrb	r3, [r7, #27]
 801c236:	f003 0308 	and.w	r3, r3, #8
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d007      	beq.n	801c24e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801c23e:	7efb      	ldrb	r3, [r7, #27]
 801c240:	f023 0308 	bic.w	r3, r3, #8
 801c244:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801c246:	7ebb      	ldrb	r3, [r7, #26]
 801c248:	f043 0308 	orr.w	r3, r3, #8
 801c24c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801c24e:	7efb      	ldrb	r3, [r7, #27]
 801c250:	f003 0301 	and.w	r3, r3, #1
 801c254:	2b00      	cmp	r3, #0
 801c256:	d007      	beq.n	801c268 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801c258:	7efb      	ldrb	r3, [r7, #27]
 801c25a:	f023 0301 	bic.w	r3, r3, #1
 801c25e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801c260:	7ebb      	ldrb	r3, [r7, #26]
 801c262:	f043 0301 	orr.w	r3, r3, #1
 801c266:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801c268:	697b      	ldr	r3, [r7, #20]
 801c26a:	68db      	ldr	r3, [r3, #12]
 801c26c:	685b      	ldr	r3, [r3, #4]
 801c26e:	4618      	mov	r0, r3
 801c270:	f7f6 fdcf 	bl	8012e12 <lwip_htonl>
 801c274:	4602      	mov	r2, r0
 801c276:	887b      	ldrh	r3, [r7, #2]
 801c278:	18d1      	adds	r1, r2, r3
 801c27a:	7eba      	ldrb	r2, [r7, #26]
 801c27c:	7bfb      	ldrb	r3, [r7, #15]
 801c27e:	9300      	str	r3, [sp, #0]
 801c280:	460b      	mov	r3, r1
 801c282:	6939      	ldr	r1, [r7, #16]
 801c284:	6878      	ldr	r0, [r7, #4]
 801c286:	f7ff fa4f 	bl	801b728 <tcp_create_segment>
 801c28a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801c28c:	69fb      	ldr	r3, [r7, #28]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d063      	beq.n	801c35a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c292:	697b      	ldr	r3, [r7, #20]
 801c294:	685b      	ldr	r3, [r3, #4]
 801c296:	4618      	mov	r0, r3
 801c298:	f7fa fd2a 	bl	8016cf0 <pbuf_clen>
 801c29c:	4603      	mov	r3, r0
 801c29e:	461a      	mov	r2, r3
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c2a6:	1a9b      	subs	r3, r3, r2
 801c2a8:	b29a      	uxth	r2, r3
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c2b0:	697b      	ldr	r3, [r7, #20]
 801c2b2:	6858      	ldr	r0, [r3, #4]
 801c2b4:	697b      	ldr	r3, [r7, #20]
 801c2b6:	685b      	ldr	r3, [r3, #4]
 801c2b8:	891a      	ldrh	r2, [r3, #8]
 801c2ba:	89bb      	ldrh	r3, [r7, #12]
 801c2bc:	1ad3      	subs	r3, r2, r3
 801c2be:	b29b      	uxth	r3, r3
 801c2c0:	4619      	mov	r1, r3
 801c2c2:	f7fa fb07 	bl	80168d4 <pbuf_realloc>
  useg->len -= remainder;
 801c2c6:	697b      	ldr	r3, [r7, #20]
 801c2c8:	891a      	ldrh	r2, [r3, #8]
 801c2ca:	89bb      	ldrh	r3, [r7, #12]
 801c2cc:	1ad3      	subs	r3, r2, r3
 801c2ce:	b29a      	uxth	r2, r3
 801c2d0:	697b      	ldr	r3, [r7, #20]
 801c2d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801c2d4:	697b      	ldr	r3, [r7, #20]
 801c2d6:	68db      	ldr	r3, [r3, #12]
 801c2d8:	899b      	ldrh	r3, [r3, #12]
 801c2da:	b29c      	uxth	r4, r3
 801c2dc:	7efb      	ldrb	r3, [r7, #27]
 801c2de:	b29b      	uxth	r3, r3
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	f7f6 fd81 	bl	8012de8 <lwip_htons>
 801c2e6:	4603      	mov	r3, r0
 801c2e8:	461a      	mov	r2, r3
 801c2ea:	697b      	ldr	r3, [r7, #20]
 801c2ec:	68db      	ldr	r3, [r3, #12]
 801c2ee:	4322      	orrs	r2, r4
 801c2f0:	b292      	uxth	r2, r2
 801c2f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801c2f4:	697b      	ldr	r3, [r7, #20]
 801c2f6:	685b      	ldr	r3, [r3, #4]
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	f7fa fcf9 	bl	8016cf0 <pbuf_clen>
 801c2fe:	4603      	mov	r3, r0
 801c300:	461a      	mov	r2, r3
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c308:	4413      	add	r3, r2
 801c30a:	b29a      	uxth	r2, r3
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c312:	69fb      	ldr	r3, [r7, #28]
 801c314:	685b      	ldr	r3, [r3, #4]
 801c316:	4618      	mov	r0, r3
 801c318:	f7fa fcea 	bl	8016cf0 <pbuf_clen>
 801c31c:	4603      	mov	r3, r0
 801c31e:	461a      	mov	r2, r3
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c326:	4413      	add	r3, r2
 801c328:	b29a      	uxth	r2, r3
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801c330:	697b      	ldr	r3, [r7, #20]
 801c332:	681a      	ldr	r2, [r3, #0]
 801c334:	69fb      	ldr	r3, [r7, #28]
 801c336:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801c338:	697b      	ldr	r3, [r7, #20]
 801c33a:	69fa      	ldr	r2, [r7, #28]
 801c33c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801c33e:	69fb      	ldr	r3, [r7, #28]
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	2b00      	cmp	r3, #0
 801c344:	d103      	bne.n	801c34e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	2200      	movs	r2, #0
 801c34a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801c34e:	2300      	movs	r3, #0
 801c350:	e016      	b.n	801c380 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801c352:	bf00      	nop
 801c354:	e002      	b.n	801c35c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801c356:	bf00      	nop
 801c358:	e000      	b.n	801c35c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801c35a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801c35c:	69fb      	ldr	r3, [r7, #28]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d006      	beq.n	801c370 <tcp_split_unsent_seg+0x25c>
 801c362:	4b09      	ldr	r3, [pc, #36]	; (801c388 <tcp_split_unsent_seg+0x274>)
 801c364:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801c368:	490d      	ldr	r1, [pc, #52]	; (801c3a0 <tcp_split_unsent_seg+0x28c>)
 801c36a:	4809      	ldr	r0, [pc, #36]	; (801c390 <tcp_split_unsent_seg+0x27c>)
 801c36c:	f003 fe4a 	bl	8020004 <iprintf>
  if (p != NULL) {
 801c370:	693b      	ldr	r3, [r7, #16]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d002      	beq.n	801c37c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801c376:	6938      	ldr	r0, [r7, #16]
 801c378:	f7fa fc32 	bl	8016be0 <pbuf_free>
  }

  return ERR_MEM;
 801c37c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801c380:	4618      	mov	r0, r3
 801c382:	3724      	adds	r7, #36	; 0x24
 801c384:	46bd      	mov	sp, r7
 801c386:	bd90      	pop	{r4, r7, pc}
 801c388:	08026ed0 	.word	0x08026ed0
 801c38c:	08027290 	.word	0x08027290
 801c390:	08026f50 	.word	0x08026f50
 801c394:	080272b4 	.word	0x080272b4
 801c398:	080272d8 	.word	0x080272d8
 801c39c:	080272e8 	.word	0x080272e8
 801c3a0:	080272f8 	.word	0x080272f8

0801c3a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801c3a4:	b590      	push	{r4, r7, lr}
 801c3a6:	b085      	sub	sp, #20
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d106      	bne.n	801c3c0 <tcp_send_fin+0x1c>
 801c3b2:	4b21      	ldr	r3, [pc, #132]	; (801c438 <tcp_send_fin+0x94>)
 801c3b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801c3b8:	4920      	ldr	r1, [pc, #128]	; (801c43c <tcp_send_fin+0x98>)
 801c3ba:	4821      	ldr	r0, [pc, #132]	; (801c440 <tcp_send_fin+0x9c>)
 801c3bc:	f003 fe22 	bl	8020004 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d02e      	beq.n	801c426 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c3cc:	60fb      	str	r3, [r7, #12]
 801c3ce:	e002      	b.n	801c3d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d1f8      	bne.n	801c3d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	68db      	ldr	r3, [r3, #12]
 801c3e2:	899b      	ldrh	r3, [r3, #12]
 801c3e4:	b29b      	uxth	r3, r3
 801c3e6:	4618      	mov	r0, r3
 801c3e8:	f7f6 fcfe 	bl	8012de8 <lwip_htons>
 801c3ec:	4603      	mov	r3, r0
 801c3ee:	b2db      	uxtb	r3, r3
 801c3f0:	f003 0307 	and.w	r3, r3, #7
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d116      	bne.n	801c426 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	68db      	ldr	r3, [r3, #12]
 801c3fc:	899b      	ldrh	r3, [r3, #12]
 801c3fe:	b29c      	uxth	r4, r3
 801c400:	2001      	movs	r0, #1
 801c402:	f7f6 fcf1 	bl	8012de8 <lwip_htons>
 801c406:	4603      	mov	r3, r0
 801c408:	461a      	mov	r2, r3
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	68db      	ldr	r3, [r3, #12]
 801c40e:	4322      	orrs	r2, r4
 801c410:	b292      	uxth	r2, r2
 801c412:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	8b5b      	ldrh	r3, [r3, #26]
 801c418:	f043 0320 	orr.w	r3, r3, #32
 801c41c:	b29a      	uxth	r2, r3
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801c422:	2300      	movs	r3, #0
 801c424:	e004      	b.n	801c430 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801c426:	2101      	movs	r1, #1
 801c428:	6878      	ldr	r0, [r7, #4]
 801c42a:	f000 f80b 	bl	801c444 <tcp_enqueue_flags>
 801c42e:	4603      	mov	r3, r0
}
 801c430:	4618      	mov	r0, r3
 801c432:	3714      	adds	r7, #20
 801c434:	46bd      	mov	sp, r7
 801c436:	bd90      	pop	{r4, r7, pc}
 801c438:	08026ed0 	.word	0x08026ed0
 801c43c:	08027304 	.word	0x08027304
 801c440:	08026f50 	.word	0x08026f50

0801c444 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801c444:	b580      	push	{r7, lr}
 801c446:	b08a      	sub	sp, #40	; 0x28
 801c448:	af02      	add	r7, sp, #8
 801c44a:	6078      	str	r0, [r7, #4]
 801c44c:	460b      	mov	r3, r1
 801c44e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801c450:	2300      	movs	r3, #0
 801c452:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801c454:	2300      	movs	r3, #0
 801c456:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801c458:	78fb      	ldrb	r3, [r7, #3]
 801c45a:	f003 0303 	and.w	r3, r3, #3
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d106      	bne.n	801c470 <tcp_enqueue_flags+0x2c>
 801c462:	4b67      	ldr	r3, [pc, #412]	; (801c600 <tcp_enqueue_flags+0x1bc>)
 801c464:	f240 4211 	movw	r2, #1041	; 0x411
 801c468:	4966      	ldr	r1, [pc, #408]	; (801c604 <tcp_enqueue_flags+0x1c0>)
 801c46a:	4867      	ldr	r0, [pc, #412]	; (801c608 <tcp_enqueue_flags+0x1c4>)
 801c46c:	f003 fdca 	bl	8020004 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d106      	bne.n	801c484 <tcp_enqueue_flags+0x40>
 801c476:	4b62      	ldr	r3, [pc, #392]	; (801c600 <tcp_enqueue_flags+0x1bc>)
 801c478:	f240 4213 	movw	r2, #1043	; 0x413
 801c47c:	4963      	ldr	r1, [pc, #396]	; (801c60c <tcp_enqueue_flags+0x1c8>)
 801c47e:	4862      	ldr	r0, [pc, #392]	; (801c608 <tcp_enqueue_flags+0x1c4>)
 801c480:	f003 fdc0 	bl	8020004 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801c484:	78fb      	ldrb	r3, [r7, #3]
 801c486:	f003 0302 	and.w	r3, r3, #2
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d001      	beq.n	801c492 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801c48e:	2301      	movs	r3, #1
 801c490:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c492:	7ffb      	ldrb	r3, [r7, #31]
 801c494:	009b      	lsls	r3, r3, #2
 801c496:	b2db      	uxtb	r3, r3
 801c498:	f003 0304 	and.w	r3, r3, #4
 801c49c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c49e:	7dfb      	ldrb	r3, [r7, #23]
 801c4a0:	b29b      	uxth	r3, r3
 801c4a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c4a6:	4619      	mov	r1, r3
 801c4a8:	2036      	movs	r0, #54	; 0x36
 801c4aa:	f7fa f8b5 	bl	8016618 <pbuf_alloc>
 801c4ae:	6138      	str	r0, [r7, #16]
 801c4b0:	693b      	ldr	r3, [r7, #16]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d109      	bne.n	801c4ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	8b5b      	ldrh	r3, [r3, #26]
 801c4ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c4be:	b29a      	uxth	r2, r3
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c4c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c4c8:	e095      	b.n	801c5f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801c4ca:	693b      	ldr	r3, [r7, #16]
 801c4cc:	895a      	ldrh	r2, [r3, #10]
 801c4ce:	7dfb      	ldrb	r3, [r7, #23]
 801c4d0:	b29b      	uxth	r3, r3
 801c4d2:	429a      	cmp	r2, r3
 801c4d4:	d206      	bcs.n	801c4e4 <tcp_enqueue_flags+0xa0>
 801c4d6:	4b4a      	ldr	r3, [pc, #296]	; (801c600 <tcp_enqueue_flags+0x1bc>)
 801c4d8:	f240 4239 	movw	r2, #1081	; 0x439
 801c4dc:	494c      	ldr	r1, [pc, #304]	; (801c610 <tcp_enqueue_flags+0x1cc>)
 801c4de:	484a      	ldr	r0, [pc, #296]	; (801c608 <tcp_enqueue_flags+0x1c4>)
 801c4e0:	f003 fd90 	bl	8020004 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801c4e8:	78fa      	ldrb	r2, [r7, #3]
 801c4ea:	7ffb      	ldrb	r3, [r7, #31]
 801c4ec:	9300      	str	r3, [sp, #0]
 801c4ee:	460b      	mov	r3, r1
 801c4f0:	6939      	ldr	r1, [r7, #16]
 801c4f2:	6878      	ldr	r0, [r7, #4]
 801c4f4:	f7ff f918 	bl	801b728 <tcp_create_segment>
 801c4f8:	60f8      	str	r0, [r7, #12]
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d109      	bne.n	801c514 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	8b5b      	ldrh	r3, [r3, #26]
 801c504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c508:	b29a      	uxth	r2, r3
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801c50e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c512:	e070      	b.n	801c5f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	68db      	ldr	r3, [r3, #12]
 801c518:	f003 0303 	and.w	r3, r3, #3
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d006      	beq.n	801c52e <tcp_enqueue_flags+0xea>
 801c520:	4b37      	ldr	r3, [pc, #220]	; (801c600 <tcp_enqueue_flags+0x1bc>)
 801c522:	f240 4242 	movw	r2, #1090	; 0x442
 801c526:	493b      	ldr	r1, [pc, #236]	; (801c614 <tcp_enqueue_flags+0x1d0>)
 801c528:	4837      	ldr	r0, [pc, #220]	; (801c608 <tcp_enqueue_flags+0x1c4>)
 801c52a:	f003 fd6b 	bl	8020004 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	891b      	ldrh	r3, [r3, #8]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d006      	beq.n	801c544 <tcp_enqueue_flags+0x100>
 801c536:	4b32      	ldr	r3, [pc, #200]	; (801c600 <tcp_enqueue_flags+0x1bc>)
 801c538:	f240 4243 	movw	r2, #1091	; 0x443
 801c53c:	4936      	ldr	r1, [pc, #216]	; (801c618 <tcp_enqueue_flags+0x1d4>)
 801c53e:	4832      	ldr	r0, [pc, #200]	; (801c608 <tcp_enqueue_flags+0x1c4>)
 801c540:	f003 fd60 	bl	8020004 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d103      	bne.n	801c554 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	68fa      	ldr	r2, [r7, #12]
 801c550:	66da      	str	r2, [r3, #108]	; 0x6c
 801c552:	e00d      	b.n	801c570 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c558:	61bb      	str	r3, [r7, #24]
 801c55a:	e002      	b.n	801c562 <tcp_enqueue_flags+0x11e>
 801c55c:	69bb      	ldr	r3, [r7, #24]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	61bb      	str	r3, [r7, #24]
 801c562:	69bb      	ldr	r3, [r7, #24]
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d1f8      	bne.n	801c55c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801c56a:	69bb      	ldr	r3, [r7, #24]
 801c56c:	68fa      	ldr	r2, [r7, #12]
 801c56e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	2200      	movs	r2, #0
 801c574:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801c578:	78fb      	ldrb	r3, [r7, #3]
 801c57a:	f003 0302 	and.w	r3, r3, #2
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d104      	bne.n	801c58c <tcp_enqueue_flags+0x148>
 801c582:	78fb      	ldrb	r3, [r7, #3]
 801c584:	f003 0301 	and.w	r3, r3, #1
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d004      	beq.n	801c596 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c590:	1c5a      	adds	r2, r3, #1
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801c596:	78fb      	ldrb	r3, [r7, #3]
 801c598:	f003 0301 	and.w	r3, r3, #1
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d006      	beq.n	801c5ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	8b5b      	ldrh	r3, [r3, #26]
 801c5a4:	f043 0320 	orr.w	r3, r3, #32
 801c5a8:	b29a      	uxth	r2, r3
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	685b      	ldr	r3, [r3, #4]
 801c5b2:	4618      	mov	r0, r3
 801c5b4:	f7fa fb9c 	bl	8016cf0 <pbuf_clen>
 801c5b8:	4603      	mov	r3, r0
 801c5ba:	461a      	mov	r2, r3
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c5c2:	4413      	add	r3, r2
 801c5c4:	b29a      	uxth	r2, r3
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d00e      	beq.n	801c5f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d10a      	bne.n	801c5f4 <tcp_enqueue_flags+0x1b0>
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d106      	bne.n	801c5f4 <tcp_enqueue_flags+0x1b0>
 801c5e6:	4b06      	ldr	r3, [pc, #24]	; (801c600 <tcp_enqueue_flags+0x1bc>)
 801c5e8:	f240 4265 	movw	r2, #1125	; 0x465
 801c5ec:	490b      	ldr	r1, [pc, #44]	; (801c61c <tcp_enqueue_flags+0x1d8>)
 801c5ee:	4806      	ldr	r0, [pc, #24]	; (801c608 <tcp_enqueue_flags+0x1c4>)
 801c5f0:	f003 fd08 	bl	8020004 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801c5f4:	2300      	movs	r3, #0
}
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	3720      	adds	r7, #32
 801c5fa:	46bd      	mov	sp, r7
 801c5fc:	bd80      	pop	{r7, pc}
 801c5fe:	bf00      	nop
 801c600:	08026ed0 	.word	0x08026ed0
 801c604:	08027320 	.word	0x08027320
 801c608:	08026f50 	.word	0x08026f50
 801c60c:	08027378 	.word	0x08027378
 801c610:	08027398 	.word	0x08027398
 801c614:	080273d4 	.word	0x080273d4
 801c618:	080273ec 	.word	0x080273ec
 801c61c:	08027418 	.word	0x08027418

0801c620 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801c620:	b5b0      	push	{r4, r5, r7, lr}
 801c622:	b08a      	sub	sp, #40	; 0x28
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d106      	bne.n	801c63c <tcp_output+0x1c>
 801c62e:	4b9e      	ldr	r3, [pc, #632]	; (801c8a8 <tcp_output+0x288>)
 801c630:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801c634:	499d      	ldr	r1, [pc, #628]	; (801c8ac <tcp_output+0x28c>)
 801c636:	489e      	ldr	r0, [pc, #632]	; (801c8b0 <tcp_output+0x290>)
 801c638:	f003 fce4 	bl	8020004 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	7d1b      	ldrb	r3, [r3, #20]
 801c640:	2b01      	cmp	r3, #1
 801c642:	d106      	bne.n	801c652 <tcp_output+0x32>
 801c644:	4b98      	ldr	r3, [pc, #608]	; (801c8a8 <tcp_output+0x288>)
 801c646:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801c64a:	499a      	ldr	r1, [pc, #616]	; (801c8b4 <tcp_output+0x294>)
 801c64c:	4898      	ldr	r0, [pc, #608]	; (801c8b0 <tcp_output+0x290>)
 801c64e:	f003 fcd9 	bl	8020004 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801c652:	4b99      	ldr	r3, [pc, #612]	; (801c8b8 <tcp_output+0x298>)
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	687a      	ldr	r2, [r7, #4]
 801c658:	429a      	cmp	r2, r3
 801c65a:	d101      	bne.n	801c660 <tcp_output+0x40>
    return ERR_OK;
 801c65c:	2300      	movs	r3, #0
 801c65e:	e1ce      	b.n	801c9fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c66c:	4293      	cmp	r3, r2
 801c66e:	bf28      	it	cs
 801c670:	4613      	movcs	r3, r2
 801c672:	b29b      	uxth	r3, r3
 801c674:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c67a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d10b      	bne.n	801c69a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	8b5b      	ldrh	r3, [r3, #26]
 801c686:	f003 0302 	and.w	r3, r3, #2
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	f000 81aa 	beq.w	801c9e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801c690:	6878      	ldr	r0, [r7, #4]
 801c692:	f000 fdcb 	bl	801d22c <tcp_send_empty_ack>
 801c696:	4603      	mov	r3, r0
 801c698:	e1b1      	b.n	801c9fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801c69a:	6879      	ldr	r1, [r7, #4]
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	3304      	adds	r3, #4
 801c6a0:	461a      	mov	r2, r3
 801c6a2:	6878      	ldr	r0, [r7, #4]
 801c6a4:	f7ff f824 	bl	801b6f0 <tcp_route>
 801c6a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801c6aa:	697b      	ldr	r3, [r7, #20]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d102      	bne.n	801c6b6 <tcp_output+0x96>
    return ERR_RTE;
 801c6b0:	f06f 0303 	mvn.w	r3, #3
 801c6b4:	e1a3      	b.n	801c9fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d003      	beq.n	801c6c4 <tcp_output+0xa4>
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d111      	bne.n	801c6e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801c6c4:	697b      	ldr	r3, [r7, #20]
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d002      	beq.n	801c6d0 <tcp_output+0xb0>
 801c6ca:	697b      	ldr	r3, [r7, #20]
 801c6cc:	3304      	adds	r3, #4
 801c6ce:	e000      	b.n	801c6d2 <tcp_output+0xb2>
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801c6d4:	693b      	ldr	r3, [r7, #16]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d102      	bne.n	801c6e0 <tcp_output+0xc0>
      return ERR_RTE;
 801c6da:	f06f 0303 	mvn.w	r3, #3
 801c6de:	e18e      	b.n	801c9fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801c6e0:	693b      	ldr	r3, [r7, #16]
 801c6e2:	681a      	ldr	r2, [r3, #0]
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6ea:	68db      	ldr	r3, [r3, #12]
 801c6ec:	685b      	ldr	r3, [r3, #4]
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f7f6 fb8f 	bl	8012e12 <lwip_htonl>
 801c6f4:	4602      	mov	r2, r0
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6fa:	1ad3      	subs	r3, r2, r3
 801c6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c6fe:	8912      	ldrh	r2, [r2, #8]
 801c700:	4413      	add	r3, r2
 801c702:	69ba      	ldr	r2, [r7, #24]
 801c704:	429a      	cmp	r2, r3
 801c706:	d227      	bcs.n	801c758 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c70e:	461a      	mov	r2, r3
 801c710:	69bb      	ldr	r3, [r7, #24]
 801c712:	4293      	cmp	r3, r2
 801c714:	d114      	bne.n	801c740 <tcp_output+0x120>
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d110      	bne.n	801c740 <tcp_output+0x120>
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c724:	2b00      	cmp	r3, #0
 801c726:	d10b      	bne.n	801c740 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	2200      	movs	r2, #0
 801c72c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801c730:	687b      	ldr	r3, [r7, #4]
 801c732:	2201      	movs	r2, #1
 801c734:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	2200      	movs	r2, #0
 801c73c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	8b5b      	ldrh	r3, [r3, #26]
 801c744:	f003 0302 	and.w	r3, r3, #2
 801c748:	2b00      	cmp	r3, #0
 801c74a:	f000 814d 	beq.w	801c9e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801c74e:	6878      	ldr	r0, [r7, #4]
 801c750:	f000 fd6c 	bl	801d22c <tcp_send_empty_ack>
 801c754:	4603      	mov	r3, r0
 801c756:	e152      	b.n	801c9fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	2200      	movs	r2, #0
 801c75c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c764:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801c766:	6a3b      	ldr	r3, [r7, #32]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	f000 811c 	beq.w	801c9a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801c76e:	e002      	b.n	801c776 <tcp_output+0x156>
 801c770:	6a3b      	ldr	r3, [r7, #32]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	623b      	str	r3, [r7, #32]
 801c776:	6a3b      	ldr	r3, [r7, #32]
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d1f8      	bne.n	801c770 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801c77e:	e112      	b.n	801c9a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c782:	68db      	ldr	r3, [r3, #12]
 801c784:	899b      	ldrh	r3, [r3, #12]
 801c786:	b29b      	uxth	r3, r3
 801c788:	4618      	mov	r0, r3
 801c78a:	f7f6 fb2d 	bl	8012de8 <lwip_htons>
 801c78e:	4603      	mov	r3, r0
 801c790:	b2db      	uxtb	r3, r3
 801c792:	f003 0304 	and.w	r3, r3, #4
 801c796:	2b00      	cmp	r3, #0
 801c798:	d006      	beq.n	801c7a8 <tcp_output+0x188>
 801c79a:	4b43      	ldr	r3, [pc, #268]	; (801c8a8 <tcp_output+0x288>)
 801c79c:	f240 5236 	movw	r2, #1334	; 0x536
 801c7a0:	4946      	ldr	r1, [pc, #280]	; (801c8bc <tcp_output+0x29c>)
 801c7a2:	4843      	ldr	r0, [pc, #268]	; (801c8b0 <tcp_output+0x290>)
 801c7a4:	f003 fc2e 	bl	8020004 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d01f      	beq.n	801c7f0 <tcp_output+0x1d0>
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	8b5b      	ldrh	r3, [r3, #26]
 801c7b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d119      	bne.n	801c7f0 <tcp_output+0x1d0>
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d00b      	beq.n	801c7dc <tcp_output+0x1bc>
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d110      	bne.n	801c7f0 <tcp_output+0x1d0>
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c7d2:	891a      	ldrh	r2, [r3, #8]
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c7d8:	429a      	cmp	r2, r3
 801c7da:	d209      	bcs.n	801c7f0 <tcp_output+0x1d0>
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d004      	beq.n	801c7f0 <tcp_output+0x1d0>
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c7ec:	2b08      	cmp	r3, #8
 801c7ee:	d901      	bls.n	801c7f4 <tcp_output+0x1d4>
 801c7f0:	2301      	movs	r3, #1
 801c7f2:	e000      	b.n	801c7f6 <tcp_output+0x1d6>
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d106      	bne.n	801c808 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	8b5b      	ldrh	r3, [r3, #26]
 801c7fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801c802:	2b00      	cmp	r3, #0
 801c804:	f000 80e4 	beq.w	801c9d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	7d1b      	ldrb	r3, [r3, #20]
 801c80c:	2b02      	cmp	r3, #2
 801c80e:	d00d      	beq.n	801c82c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c812:	68db      	ldr	r3, [r3, #12]
 801c814:	899b      	ldrh	r3, [r3, #12]
 801c816:	b29c      	uxth	r4, r3
 801c818:	2010      	movs	r0, #16
 801c81a:	f7f6 fae5 	bl	8012de8 <lwip_htons>
 801c81e:	4603      	mov	r3, r0
 801c820:	461a      	mov	r2, r3
 801c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c824:	68db      	ldr	r3, [r3, #12]
 801c826:	4322      	orrs	r2, r4
 801c828:	b292      	uxth	r2, r2
 801c82a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801c82c:	697a      	ldr	r2, [r7, #20]
 801c82e:	6879      	ldr	r1, [r7, #4]
 801c830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c832:	f000 f909 	bl	801ca48 <tcp_output_segment>
 801c836:	4603      	mov	r3, r0
 801c838:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801c83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d009      	beq.n	801c856 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	8b5b      	ldrh	r3, [r3, #26]
 801c846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c84a:	b29a      	uxth	r2, r3
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	835a      	strh	r2, [r3, #26]
      return err;
 801c850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c854:	e0d3      	b.n	801c9fe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c858:	681a      	ldr	r2, [r3, #0]
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	7d1b      	ldrb	r3, [r3, #20]
 801c862:	2b02      	cmp	r3, #2
 801c864:	d006      	beq.n	801c874 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	8b5b      	ldrh	r3, [r3, #26]
 801c86a:	f023 0303 	bic.w	r3, r3, #3
 801c86e:	b29a      	uxth	r2, r3
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c876:	68db      	ldr	r3, [r3, #12]
 801c878:	685b      	ldr	r3, [r3, #4]
 801c87a:	4618      	mov	r0, r3
 801c87c:	f7f6 fac9 	bl	8012e12 <lwip_htonl>
 801c880:	4604      	mov	r4, r0
 801c882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c884:	891b      	ldrh	r3, [r3, #8]
 801c886:	461d      	mov	r5, r3
 801c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c88a:	68db      	ldr	r3, [r3, #12]
 801c88c:	899b      	ldrh	r3, [r3, #12]
 801c88e:	b29b      	uxth	r3, r3
 801c890:	4618      	mov	r0, r3
 801c892:	f7f6 faa9 	bl	8012de8 <lwip_htons>
 801c896:	4603      	mov	r3, r0
 801c898:	b2db      	uxtb	r3, r3
 801c89a:	f003 0303 	and.w	r3, r3, #3
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d00e      	beq.n	801c8c0 <tcp_output+0x2a0>
 801c8a2:	2301      	movs	r3, #1
 801c8a4:	e00d      	b.n	801c8c2 <tcp_output+0x2a2>
 801c8a6:	bf00      	nop
 801c8a8:	08026ed0 	.word	0x08026ed0
 801c8ac:	08027440 	.word	0x08027440
 801c8b0:	08026f50 	.word	0x08026f50
 801c8b4:	08027458 	.word	0x08027458
 801c8b8:	2400884c 	.word	0x2400884c
 801c8bc:	08027480 	.word	0x08027480
 801c8c0:	2300      	movs	r3, #0
 801c8c2:	442b      	add	r3, r5
 801c8c4:	4423      	add	r3, r4
 801c8c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c8cc:	68bb      	ldr	r3, [r7, #8]
 801c8ce:	1ad3      	subs	r3, r2, r3
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	da02      	bge.n	801c8da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	68ba      	ldr	r2, [r7, #8]
 801c8d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8dc:	891b      	ldrh	r3, [r3, #8]
 801c8de:	461c      	mov	r4, r3
 801c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8e2:	68db      	ldr	r3, [r3, #12]
 801c8e4:	899b      	ldrh	r3, [r3, #12]
 801c8e6:	b29b      	uxth	r3, r3
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f7f6 fa7d 	bl	8012de8 <lwip_htons>
 801c8ee:	4603      	mov	r3, r0
 801c8f0:	b2db      	uxtb	r3, r3
 801c8f2:	f003 0303 	and.w	r3, r3, #3
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d001      	beq.n	801c8fe <tcp_output+0x2de>
 801c8fa:	2301      	movs	r3, #1
 801c8fc:	e000      	b.n	801c900 <tcp_output+0x2e0>
 801c8fe:	2300      	movs	r3, #0
 801c900:	4423      	add	r3, r4
 801c902:	2b00      	cmp	r3, #0
 801c904:	d049      	beq.n	801c99a <tcp_output+0x37a>
      seg->next = NULL;
 801c906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c908:	2200      	movs	r2, #0
 801c90a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c910:	2b00      	cmp	r3, #0
 801c912:	d105      	bne.n	801c920 <tcp_output+0x300>
        pcb->unacked = seg;
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c918:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c91c:	623b      	str	r3, [r7, #32]
 801c91e:	e03f      	b.n	801c9a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c922:	68db      	ldr	r3, [r3, #12]
 801c924:	685b      	ldr	r3, [r3, #4]
 801c926:	4618      	mov	r0, r3
 801c928:	f7f6 fa73 	bl	8012e12 <lwip_htonl>
 801c92c:	4604      	mov	r4, r0
 801c92e:	6a3b      	ldr	r3, [r7, #32]
 801c930:	68db      	ldr	r3, [r3, #12]
 801c932:	685b      	ldr	r3, [r3, #4]
 801c934:	4618      	mov	r0, r3
 801c936:	f7f6 fa6c 	bl	8012e12 <lwip_htonl>
 801c93a:	4603      	mov	r3, r0
 801c93c:	1ae3      	subs	r3, r4, r3
 801c93e:	2b00      	cmp	r3, #0
 801c940:	da24      	bge.n	801c98c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	3370      	adds	r3, #112	; 0x70
 801c946:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c948:	e002      	b.n	801c950 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801c94a:	69fb      	ldr	r3, [r7, #28]
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801c950:	69fb      	ldr	r3, [r7, #28]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d011      	beq.n	801c97c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c958:	69fb      	ldr	r3, [r7, #28]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	68db      	ldr	r3, [r3, #12]
 801c95e:	685b      	ldr	r3, [r3, #4]
 801c960:	4618      	mov	r0, r3
 801c962:	f7f6 fa56 	bl	8012e12 <lwip_htonl>
 801c966:	4604      	mov	r4, r0
 801c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96a:	68db      	ldr	r3, [r3, #12]
 801c96c:	685b      	ldr	r3, [r3, #4]
 801c96e:	4618      	mov	r0, r3
 801c970:	f7f6 fa4f 	bl	8012e12 <lwip_htonl>
 801c974:	4603      	mov	r3, r0
 801c976:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801c978:	2b00      	cmp	r3, #0
 801c97a:	dbe6      	blt.n	801c94a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801c97c:	69fb      	ldr	r3, [r7, #28]
 801c97e:	681a      	ldr	r2, [r3, #0]
 801c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c982:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801c984:	69fb      	ldr	r3, [r7, #28]
 801c986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c988:	601a      	str	r2, [r3, #0]
 801c98a:	e009      	b.n	801c9a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801c98c:	6a3b      	ldr	r3, [r7, #32]
 801c98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c990:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801c992:	6a3b      	ldr	r3, [r7, #32]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	623b      	str	r3, [r7, #32]
 801c998:	e002      	b.n	801c9a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801c99a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c99c:	f7fb ff1d 	bl	80187da <tcp_seg_free>
    }
    seg = pcb->unsent;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c9a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801c9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d012      	beq.n	801c9d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801c9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	685b      	ldr	r3, [r3, #4]
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	f7f6 fa2d 	bl	8012e12 <lwip_htonl>
 801c9b8:	4602      	mov	r2, r0
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9be:	1ad3      	subs	r3, r2, r3
 801c9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c9c2:	8912      	ldrh	r2, [r2, #8]
 801c9c4:	4413      	add	r3, r2
  while (seg != NULL &&
 801c9c6:	69ba      	ldr	r2, [r7, #24]
 801c9c8:	429a      	cmp	r2, r3
 801c9ca:	f4bf aed9 	bcs.w	801c780 <tcp_output+0x160>
 801c9ce:	e000      	b.n	801c9d2 <tcp_output+0x3b2>
      break;
 801c9d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d108      	bne.n	801c9ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	2200      	movs	r2, #0
 801c9de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801c9e2:	e004      	b.n	801c9ee <tcp_output+0x3ce>
    goto output_done;
 801c9e4:	bf00      	nop
 801c9e6:	e002      	b.n	801c9ee <tcp_output+0x3ce>
    goto output_done;
 801c9e8:	bf00      	nop
 801c9ea:	e000      	b.n	801c9ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801c9ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	8b5b      	ldrh	r3, [r3, #26]
 801c9f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c9f6:	b29a      	uxth	r2, r3
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801c9fc:	2300      	movs	r3, #0
}
 801c9fe:	4618      	mov	r0, r3
 801ca00:	3728      	adds	r7, #40	; 0x28
 801ca02:	46bd      	mov	sp, r7
 801ca04:	bdb0      	pop	{r4, r5, r7, pc}
 801ca06:	bf00      	nop

0801ca08 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ca08:	b580      	push	{r7, lr}
 801ca0a:	b082      	sub	sp, #8
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d106      	bne.n	801ca24 <tcp_output_segment_busy+0x1c>
 801ca16:	4b09      	ldr	r3, [pc, #36]	; (801ca3c <tcp_output_segment_busy+0x34>)
 801ca18:	f240 529a 	movw	r2, #1434	; 0x59a
 801ca1c:	4908      	ldr	r1, [pc, #32]	; (801ca40 <tcp_output_segment_busy+0x38>)
 801ca1e:	4809      	ldr	r0, [pc, #36]	; (801ca44 <tcp_output_segment_busy+0x3c>)
 801ca20:	f003 faf0 	bl	8020004 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	685b      	ldr	r3, [r3, #4]
 801ca28:	7b9b      	ldrb	r3, [r3, #14]
 801ca2a:	2b01      	cmp	r3, #1
 801ca2c:	d001      	beq.n	801ca32 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ca2e:	2301      	movs	r3, #1
 801ca30:	e000      	b.n	801ca34 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ca32:	2300      	movs	r3, #0
}
 801ca34:	4618      	mov	r0, r3
 801ca36:	3708      	adds	r7, #8
 801ca38:	46bd      	mov	sp, r7
 801ca3a:	bd80      	pop	{r7, pc}
 801ca3c:	08026ed0 	.word	0x08026ed0
 801ca40:	08027498 	.word	0x08027498
 801ca44:	08026f50 	.word	0x08026f50

0801ca48 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ca48:	b5b0      	push	{r4, r5, r7, lr}
 801ca4a:	b08c      	sub	sp, #48	; 0x30
 801ca4c:	af04      	add	r7, sp, #16
 801ca4e:	60f8      	str	r0, [r7, #12]
 801ca50:	60b9      	str	r1, [r7, #8]
 801ca52:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	d106      	bne.n	801ca68 <tcp_output_segment+0x20>
 801ca5a:	4b63      	ldr	r3, [pc, #396]	; (801cbe8 <tcp_output_segment+0x1a0>)
 801ca5c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801ca60:	4962      	ldr	r1, [pc, #392]	; (801cbec <tcp_output_segment+0x1a4>)
 801ca62:	4863      	ldr	r0, [pc, #396]	; (801cbf0 <tcp_output_segment+0x1a8>)
 801ca64:	f003 face 	bl	8020004 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801ca68:	68bb      	ldr	r3, [r7, #8]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d106      	bne.n	801ca7c <tcp_output_segment+0x34>
 801ca6e:	4b5e      	ldr	r3, [pc, #376]	; (801cbe8 <tcp_output_segment+0x1a0>)
 801ca70:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801ca74:	495f      	ldr	r1, [pc, #380]	; (801cbf4 <tcp_output_segment+0x1ac>)
 801ca76:	485e      	ldr	r0, [pc, #376]	; (801cbf0 <tcp_output_segment+0x1a8>)
 801ca78:	f003 fac4 	bl	8020004 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d106      	bne.n	801ca90 <tcp_output_segment+0x48>
 801ca82:	4b59      	ldr	r3, [pc, #356]	; (801cbe8 <tcp_output_segment+0x1a0>)
 801ca84:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ca88:	495b      	ldr	r1, [pc, #364]	; (801cbf8 <tcp_output_segment+0x1b0>)
 801ca8a:	4859      	ldr	r0, [pc, #356]	; (801cbf0 <tcp_output_segment+0x1a8>)
 801ca8c:	f003 faba 	bl	8020004 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ca90:	68f8      	ldr	r0, [r7, #12]
 801ca92:	f7ff ffb9 	bl	801ca08 <tcp_output_segment_busy>
 801ca96:	4603      	mov	r3, r0
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d001      	beq.n	801caa0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ca9c:	2300      	movs	r3, #0
 801ca9e:	e09f      	b.n	801cbe0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801caa0:	68bb      	ldr	r3, [r7, #8]
 801caa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801caa4:	68fb      	ldr	r3, [r7, #12]
 801caa6:	68dc      	ldr	r4, [r3, #12]
 801caa8:	4610      	mov	r0, r2
 801caaa:	f7f6 f9b2 	bl	8012e12 <lwip_htonl>
 801caae:	4603      	mov	r3, r0
 801cab0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801cab2:	68bb      	ldr	r3, [r7, #8]
 801cab4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	68dc      	ldr	r4, [r3, #12]
 801caba:	4610      	mov	r0, r2
 801cabc:	f7f6 f994 	bl	8012de8 <lwip_htons>
 801cac0:	4603      	mov	r3, r0
 801cac2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801cac4:	68bb      	ldr	r3, [r7, #8]
 801cac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cac8:	68ba      	ldr	r2, [r7, #8]
 801caca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801cacc:	441a      	add	r2, r3
 801cace:	68bb      	ldr	r3, [r7, #8]
 801cad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	68db      	ldr	r3, [r3, #12]
 801cad6:	3314      	adds	r3, #20
 801cad8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801cada:	68fb      	ldr	r3, [r7, #12]
 801cadc:	7a9b      	ldrb	r3, [r3, #10]
 801cade:	f003 0301 	and.w	r3, r3, #1
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d015      	beq.n	801cb12 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801cae6:	68bb      	ldr	r3, [r7, #8]
 801cae8:	3304      	adds	r3, #4
 801caea:	461a      	mov	r2, r3
 801caec:	6879      	ldr	r1, [r7, #4]
 801caee:	f44f 7006 	mov.w	r0, #536	; 0x218
 801caf2:	f7fc fa37 	bl	8018f64 <tcp_eff_send_mss_netif>
 801caf6:	4603      	mov	r3, r0
 801caf8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801cafa:	8b7b      	ldrh	r3, [r7, #26]
 801cafc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801cb00:	4618      	mov	r0, r3
 801cb02:	f7f6 f986 	bl	8012e12 <lwip_htonl>
 801cb06:	4602      	mov	r2, r0
 801cb08:	69fb      	ldr	r3, [r7, #28]
 801cb0a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801cb0c:	69fb      	ldr	r3, [r7, #28]
 801cb0e:	3304      	adds	r3, #4
 801cb10:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801cb12:	68bb      	ldr	r3, [r7, #8]
 801cb14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	da02      	bge.n	801cb22 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801cb1c:	68bb      	ldr	r3, [r7, #8]
 801cb1e:	2200      	movs	r2, #0
 801cb20:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801cb22:	68bb      	ldr	r3, [r7, #8]
 801cb24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d10c      	bne.n	801cb44 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801cb2a:	4b34      	ldr	r3, [pc, #208]	; (801cbfc <tcp_output_segment+0x1b4>)
 801cb2c:	681a      	ldr	r2, [r3, #0]
 801cb2e:	68bb      	ldr	r3, [r7, #8]
 801cb30:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	68db      	ldr	r3, [r3, #12]
 801cb36:	685b      	ldr	r3, [r3, #4]
 801cb38:	4618      	mov	r0, r3
 801cb3a:	f7f6 f96a 	bl	8012e12 <lwip_htonl>
 801cb3e:	4602      	mov	r2, r0
 801cb40:	68bb      	ldr	r3, [r7, #8]
 801cb42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	68da      	ldr	r2, [r3, #12]
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	685b      	ldr	r3, [r3, #4]
 801cb4c:	685b      	ldr	r3, [r3, #4]
 801cb4e:	1ad3      	subs	r3, r2, r3
 801cb50:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	685b      	ldr	r3, [r3, #4]
 801cb56:	8959      	ldrh	r1, [r3, #10]
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	685b      	ldr	r3, [r3, #4]
 801cb5c:	8b3a      	ldrh	r2, [r7, #24]
 801cb5e:	1a8a      	subs	r2, r1, r2
 801cb60:	b292      	uxth	r2, r2
 801cb62:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	685b      	ldr	r3, [r3, #4]
 801cb68:	8919      	ldrh	r1, [r3, #8]
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	685b      	ldr	r3, [r3, #4]
 801cb6e:	8b3a      	ldrh	r2, [r7, #24]
 801cb70:	1a8a      	subs	r2, r1, r2
 801cb72:	b292      	uxth	r2, r2
 801cb74:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	685b      	ldr	r3, [r3, #4]
 801cb7a:	68fa      	ldr	r2, [r7, #12]
 801cb7c:	68d2      	ldr	r2, [r2, #12]
 801cb7e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	68db      	ldr	r3, [r3, #12]
 801cb84:	2200      	movs	r2, #0
 801cb86:	741a      	strb	r2, [r3, #16]
 801cb88:	2200      	movs	r2, #0
 801cb8a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	68db      	ldr	r3, [r3, #12]
 801cb90:	f103 0214 	add.w	r2, r3, #20
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	7a9b      	ldrb	r3, [r3, #10]
 801cb98:	009b      	lsls	r3, r3, #2
 801cb9a:	f003 0304 	and.w	r3, r3, #4
 801cb9e:	4413      	add	r3, r2
 801cba0:	69fa      	ldr	r2, [r7, #28]
 801cba2:	429a      	cmp	r2, r3
 801cba4:	d006      	beq.n	801cbb4 <tcp_output_segment+0x16c>
 801cba6:	4b10      	ldr	r3, [pc, #64]	; (801cbe8 <tcp_output_segment+0x1a0>)
 801cba8:	f240 621c 	movw	r2, #1564	; 0x61c
 801cbac:	4914      	ldr	r1, [pc, #80]	; (801cc00 <tcp_output_segment+0x1b8>)
 801cbae:	4810      	ldr	r0, [pc, #64]	; (801cbf0 <tcp_output_segment+0x1a8>)
 801cbb0:	f003 fa28 	bl	8020004 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	6858      	ldr	r0, [r3, #4]
 801cbb8:	68b9      	ldr	r1, [r7, #8]
 801cbba:	68bb      	ldr	r3, [r7, #8]
 801cbbc:	1d1c      	adds	r4, r3, #4
 801cbbe:	68bb      	ldr	r3, [r7, #8]
 801cbc0:	7add      	ldrb	r5, [r3, #11]
 801cbc2:	68bb      	ldr	r3, [r7, #8]
 801cbc4:	7a9b      	ldrb	r3, [r3, #10]
 801cbc6:	687a      	ldr	r2, [r7, #4]
 801cbc8:	9202      	str	r2, [sp, #8]
 801cbca:	2206      	movs	r2, #6
 801cbcc:	9201      	str	r2, [sp, #4]
 801cbce:	9300      	str	r3, [sp, #0]
 801cbd0:	462b      	mov	r3, r5
 801cbd2:	4622      	mov	r2, r4
 801cbd4:	f7f7 fd9c 	bl	8014710 <ip4_output_if>
 801cbd8:	4603      	mov	r3, r0
 801cbda:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801cbdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	3720      	adds	r7, #32
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bdb0      	pop	{r4, r5, r7, pc}
 801cbe8:	08026ed0 	.word	0x08026ed0
 801cbec:	080274c0 	.word	0x080274c0
 801cbf0:	08026f50 	.word	0x08026f50
 801cbf4:	080274e0 	.word	0x080274e0
 801cbf8:	08027500 	.word	0x08027500
 801cbfc:	2400883c 	.word	0x2400883c
 801cc00:	08027524 	.word	0x08027524

0801cc04 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801cc04:	b5b0      	push	{r4, r5, r7, lr}
 801cc06:	b084      	sub	sp, #16
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d106      	bne.n	801cc20 <tcp_rexmit_rto_prepare+0x1c>
 801cc12:	4b31      	ldr	r3, [pc, #196]	; (801ccd8 <tcp_rexmit_rto_prepare+0xd4>)
 801cc14:	f240 6263 	movw	r2, #1635	; 0x663
 801cc18:	4930      	ldr	r1, [pc, #192]	; (801ccdc <tcp_rexmit_rto_prepare+0xd8>)
 801cc1a:	4831      	ldr	r0, [pc, #196]	; (801cce0 <tcp_rexmit_rto_prepare+0xdc>)
 801cc1c:	f003 f9f2 	bl	8020004 <iprintf>

  if (pcb->unacked == NULL) {
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d102      	bne.n	801cc2e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801cc28:	f06f 0305 	mvn.w	r3, #5
 801cc2c:	e050      	b.n	801ccd0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc32:	60fb      	str	r3, [r7, #12]
 801cc34:	e00b      	b.n	801cc4e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801cc36:	68f8      	ldr	r0, [r7, #12]
 801cc38:	f7ff fee6 	bl	801ca08 <tcp_output_segment_busy>
 801cc3c:	4603      	mov	r3, r0
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d002      	beq.n	801cc48 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801cc42:	f06f 0305 	mvn.w	r3, #5
 801cc46:	e043      	b.n	801ccd0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	60fb      	str	r3, [r7, #12]
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d1ef      	bne.n	801cc36 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801cc56:	68f8      	ldr	r0, [r7, #12]
 801cc58:	f7ff fed6 	bl	801ca08 <tcp_output_segment_busy>
 801cc5c:	4603      	mov	r3, r0
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d002      	beq.n	801cc68 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801cc62:	f06f 0305 	mvn.w	r3, #5
 801cc66:	e033      	b.n	801ccd0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801cc6c:	68fb      	ldr	r3, [r7, #12]
 801cc6e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	2200      	movs	r2, #0
 801cc7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801cc7e:	687b      	ldr	r3, [r7, #4]
 801cc80:	8b5b      	ldrh	r3, [r3, #26]
 801cc82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801cc86:	b29a      	uxth	r2, r3
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	68db      	ldr	r3, [r3, #12]
 801cc90:	685b      	ldr	r3, [r3, #4]
 801cc92:	4618      	mov	r0, r3
 801cc94:	f7f6 f8bd 	bl	8012e12 <lwip_htonl>
 801cc98:	4604      	mov	r4, r0
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	891b      	ldrh	r3, [r3, #8]
 801cc9e:	461d      	mov	r5, r3
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	68db      	ldr	r3, [r3, #12]
 801cca4:	899b      	ldrh	r3, [r3, #12]
 801cca6:	b29b      	uxth	r3, r3
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f7f6 f89d 	bl	8012de8 <lwip_htons>
 801ccae:	4603      	mov	r3, r0
 801ccb0:	b2db      	uxtb	r3, r3
 801ccb2:	f003 0303 	and.w	r3, r3, #3
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d001      	beq.n	801ccbe <tcp_rexmit_rto_prepare+0xba>
 801ccba:	2301      	movs	r3, #1
 801ccbc:	e000      	b.n	801ccc0 <tcp_rexmit_rto_prepare+0xbc>
 801ccbe:	2300      	movs	r3, #0
 801ccc0:	442b      	add	r3, r5
 801ccc2:	18e2      	adds	r2, r4, r3
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	2200      	movs	r2, #0
 801cccc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801ccce:	2300      	movs	r3, #0
}
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	3710      	adds	r7, #16
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bdb0      	pop	{r4, r5, r7, pc}
 801ccd8:	08026ed0 	.word	0x08026ed0
 801ccdc:	08027538 	.word	0x08027538
 801cce0:	08026f50 	.word	0x08026f50

0801cce4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b082      	sub	sp, #8
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d106      	bne.n	801cd00 <tcp_rexmit_rto_commit+0x1c>
 801ccf2:	4b0d      	ldr	r3, [pc, #52]	; (801cd28 <tcp_rexmit_rto_commit+0x44>)
 801ccf4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ccf8:	490c      	ldr	r1, [pc, #48]	; (801cd2c <tcp_rexmit_rto_commit+0x48>)
 801ccfa:	480d      	ldr	r0, [pc, #52]	; (801cd30 <tcp_rexmit_rto_commit+0x4c>)
 801ccfc:	f003 f982 	bl	8020004 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cd06:	2bff      	cmp	r3, #255	; 0xff
 801cd08:	d007      	beq.n	801cd1a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cd10:	3301      	adds	r3, #1
 801cd12:	b2da      	uxtb	r2, r3
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801cd1a:	6878      	ldr	r0, [r7, #4]
 801cd1c:	f7ff fc80 	bl	801c620 <tcp_output>
}
 801cd20:	bf00      	nop
 801cd22:	3708      	adds	r7, #8
 801cd24:	46bd      	mov	sp, r7
 801cd26:	bd80      	pop	{r7, pc}
 801cd28:	08026ed0 	.word	0x08026ed0
 801cd2c:	0802755c 	.word	0x0802755c
 801cd30:	08026f50 	.word	0x08026f50

0801cd34 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	b082      	sub	sp, #8
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d106      	bne.n	801cd50 <tcp_rexmit_rto+0x1c>
 801cd42:	4b0a      	ldr	r3, [pc, #40]	; (801cd6c <tcp_rexmit_rto+0x38>)
 801cd44:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801cd48:	4909      	ldr	r1, [pc, #36]	; (801cd70 <tcp_rexmit_rto+0x3c>)
 801cd4a:	480a      	ldr	r0, [pc, #40]	; (801cd74 <tcp_rexmit_rto+0x40>)
 801cd4c:	f003 f95a 	bl	8020004 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801cd50:	6878      	ldr	r0, [r7, #4]
 801cd52:	f7ff ff57 	bl	801cc04 <tcp_rexmit_rto_prepare>
 801cd56:	4603      	mov	r3, r0
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d102      	bne.n	801cd62 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801cd5c:	6878      	ldr	r0, [r7, #4]
 801cd5e:	f7ff ffc1 	bl	801cce4 <tcp_rexmit_rto_commit>
  }
}
 801cd62:	bf00      	nop
 801cd64:	3708      	adds	r7, #8
 801cd66:	46bd      	mov	sp, r7
 801cd68:	bd80      	pop	{r7, pc}
 801cd6a:	bf00      	nop
 801cd6c:	08026ed0 	.word	0x08026ed0
 801cd70:	08027580 	.word	0x08027580
 801cd74:	08026f50 	.word	0x08026f50

0801cd78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801cd78:	b590      	push	{r4, r7, lr}
 801cd7a:	b085      	sub	sp, #20
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d106      	bne.n	801cd94 <tcp_rexmit+0x1c>
 801cd86:	4b2f      	ldr	r3, [pc, #188]	; (801ce44 <tcp_rexmit+0xcc>)
 801cd88:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801cd8c:	492e      	ldr	r1, [pc, #184]	; (801ce48 <tcp_rexmit+0xd0>)
 801cd8e:	482f      	ldr	r0, [pc, #188]	; (801ce4c <tcp_rexmit+0xd4>)
 801cd90:	f003 f938 	bl	8020004 <iprintf>

  if (pcb->unacked == NULL) {
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d102      	bne.n	801cda2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801cd9c:	f06f 0305 	mvn.w	r3, #5
 801cda0:	e04c      	b.n	801ce3c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cda6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801cda8:	68b8      	ldr	r0, [r7, #8]
 801cdaa:	f7ff fe2d 	bl	801ca08 <tcp_output_segment_busy>
 801cdae:	4603      	mov	r3, r0
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d002      	beq.n	801cdba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801cdb4:	f06f 0305 	mvn.w	r3, #5
 801cdb8:	e040      	b.n	801ce3c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801cdba:	68bb      	ldr	r3, [r7, #8]
 801cdbc:	681a      	ldr	r2, [r3, #0]
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	336c      	adds	r3, #108	; 0x6c
 801cdc6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801cdc8:	e002      	b.n	801cdd0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801cdca:	68fb      	ldr	r3, [r7, #12]
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d011      	beq.n	801cdfc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801cdd8:	68fb      	ldr	r3, [r7, #12]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	68db      	ldr	r3, [r3, #12]
 801cdde:	685b      	ldr	r3, [r3, #4]
 801cde0:	4618      	mov	r0, r3
 801cde2:	f7f6 f816 	bl	8012e12 <lwip_htonl>
 801cde6:	4604      	mov	r4, r0
 801cde8:	68bb      	ldr	r3, [r7, #8]
 801cdea:	68db      	ldr	r3, [r3, #12]
 801cdec:	685b      	ldr	r3, [r3, #4]
 801cdee:	4618      	mov	r0, r3
 801cdf0:	f7f6 f80f 	bl	8012e12 <lwip_htonl>
 801cdf4:	4603      	mov	r3, r0
 801cdf6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	dbe6      	blt.n	801cdca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	681a      	ldr	r2, [r3, #0]
 801ce00:	68bb      	ldr	r3, [r7, #8]
 801ce02:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	68ba      	ldr	r2, [r7, #8]
 801ce08:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ce0a:	68bb      	ldr	r3, [r7, #8]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d103      	bne.n	801ce1a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	2200      	movs	r2, #0
 801ce16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ce20:	2bff      	cmp	r3, #255	; 0xff
 801ce22:	d007      	beq.n	801ce34 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ce2a:	3301      	adds	r3, #1
 801ce2c:	b2da      	uxtb	r2, r3
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2200      	movs	r2, #0
 801ce38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ce3a:	2300      	movs	r3, #0
}
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	3714      	adds	r7, #20
 801ce40:	46bd      	mov	sp, r7
 801ce42:	bd90      	pop	{r4, r7, pc}
 801ce44:	08026ed0 	.word	0x08026ed0
 801ce48:	0802759c 	.word	0x0802759c
 801ce4c:	08026f50 	.word	0x08026f50

0801ce50 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ce50:	b580      	push	{r7, lr}
 801ce52:	b082      	sub	sp, #8
 801ce54:	af00      	add	r7, sp, #0
 801ce56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d106      	bne.n	801ce6c <tcp_rexmit_fast+0x1c>
 801ce5e:	4b2a      	ldr	r3, [pc, #168]	; (801cf08 <tcp_rexmit_fast+0xb8>)
 801ce60:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ce64:	4929      	ldr	r1, [pc, #164]	; (801cf0c <tcp_rexmit_fast+0xbc>)
 801ce66:	482a      	ldr	r0, [pc, #168]	; (801cf10 <tcp_rexmit_fast+0xc0>)
 801ce68:	f003 f8cc 	bl	8020004 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d045      	beq.n	801cf00 <tcp_rexmit_fast+0xb0>
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	8b5b      	ldrh	r3, [r3, #26]
 801ce78:	f003 0304 	and.w	r3, r3, #4
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d13f      	bne.n	801cf00 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ce80:	6878      	ldr	r0, [r7, #4]
 801ce82:	f7ff ff79 	bl	801cd78 <tcp_rexmit>
 801ce86:	4603      	mov	r3, r0
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d139      	bne.n	801cf00 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ce98:	4293      	cmp	r3, r2
 801ce9a:	bf28      	it	cs
 801ce9c:	4613      	movcs	r3, r2
 801ce9e:	b29b      	uxth	r3, r3
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	da00      	bge.n	801cea6 <tcp_rexmit_fast+0x56>
 801cea4:	3301      	adds	r3, #1
 801cea6:	105b      	asrs	r3, r3, #1
 801cea8:	b29a      	uxth	r2, r3
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ceb6:	461a      	mov	r2, r3
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cebc:	005b      	lsls	r3, r3, #1
 801cebe:	429a      	cmp	r2, r3
 801cec0:	d206      	bcs.n	801ced0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cec6:	005b      	lsls	r3, r3, #1
 801cec8:	b29a      	uxth	r2, r3
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ceda:	4619      	mov	r1, r3
 801cedc:	0049      	lsls	r1, r1, #1
 801cede:	440b      	add	r3, r1
 801cee0:	b29b      	uxth	r3, r3
 801cee2:	4413      	add	r3, r2
 801cee4:	b29a      	uxth	r2, r3
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	8b5b      	ldrh	r3, [r3, #26]
 801cef0:	f043 0304 	orr.w	r3, r3, #4
 801cef4:	b29a      	uxth	r2, r3
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	2200      	movs	r2, #0
 801cefe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801cf00:	bf00      	nop
 801cf02:	3708      	adds	r7, #8
 801cf04:	46bd      	mov	sp, r7
 801cf06:	bd80      	pop	{r7, pc}
 801cf08:	08026ed0 	.word	0x08026ed0
 801cf0c:	080275b4 	.word	0x080275b4
 801cf10:	08026f50 	.word	0x08026f50

0801cf14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	b086      	sub	sp, #24
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	60f8      	str	r0, [r7, #12]
 801cf1c:	607b      	str	r3, [r7, #4]
 801cf1e:	460b      	mov	r3, r1
 801cf20:	817b      	strh	r3, [r7, #10]
 801cf22:	4613      	mov	r3, r2
 801cf24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801cf26:	897a      	ldrh	r2, [r7, #10]
 801cf28:	893b      	ldrh	r3, [r7, #8]
 801cf2a:	4413      	add	r3, r2
 801cf2c:	b29b      	uxth	r3, r3
 801cf2e:	3314      	adds	r3, #20
 801cf30:	b29b      	uxth	r3, r3
 801cf32:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cf36:	4619      	mov	r1, r3
 801cf38:	2022      	movs	r0, #34	; 0x22
 801cf3a:	f7f9 fb6d 	bl	8016618 <pbuf_alloc>
 801cf3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801cf40:	697b      	ldr	r3, [r7, #20]
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d04d      	beq.n	801cfe2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801cf46:	897b      	ldrh	r3, [r7, #10]
 801cf48:	3313      	adds	r3, #19
 801cf4a:	697a      	ldr	r2, [r7, #20]
 801cf4c:	8952      	ldrh	r2, [r2, #10]
 801cf4e:	4293      	cmp	r3, r2
 801cf50:	db06      	blt.n	801cf60 <tcp_output_alloc_header_common+0x4c>
 801cf52:	4b26      	ldr	r3, [pc, #152]	; (801cfec <tcp_output_alloc_header_common+0xd8>)
 801cf54:	f240 7223 	movw	r2, #1827	; 0x723
 801cf58:	4925      	ldr	r1, [pc, #148]	; (801cff0 <tcp_output_alloc_header_common+0xdc>)
 801cf5a:	4826      	ldr	r0, [pc, #152]	; (801cff4 <tcp_output_alloc_header_common+0xe0>)
 801cf5c:	f003 f852 	bl	8020004 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801cf60:	697b      	ldr	r3, [r7, #20]
 801cf62:	685b      	ldr	r3, [r3, #4]
 801cf64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801cf66:	8c3b      	ldrh	r3, [r7, #32]
 801cf68:	4618      	mov	r0, r3
 801cf6a:	f7f5 ff3d 	bl	8012de8 <lwip_htons>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	461a      	mov	r2, r3
 801cf72:	693b      	ldr	r3, [r7, #16]
 801cf74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801cf76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cf78:	4618      	mov	r0, r3
 801cf7a:	f7f5 ff35 	bl	8012de8 <lwip_htons>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	461a      	mov	r2, r3
 801cf82:	693b      	ldr	r3, [r7, #16]
 801cf84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801cf86:	693b      	ldr	r3, [r7, #16]
 801cf88:	687a      	ldr	r2, [r7, #4]
 801cf8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801cf8c:	68f8      	ldr	r0, [r7, #12]
 801cf8e:	f7f5 ff40 	bl	8012e12 <lwip_htonl>
 801cf92:	4602      	mov	r2, r0
 801cf94:	693b      	ldr	r3, [r7, #16]
 801cf96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801cf98:	897b      	ldrh	r3, [r7, #10]
 801cf9a:	089b      	lsrs	r3, r3, #2
 801cf9c:	b29b      	uxth	r3, r3
 801cf9e:	3305      	adds	r3, #5
 801cfa0:	b29b      	uxth	r3, r3
 801cfa2:	031b      	lsls	r3, r3, #12
 801cfa4:	b29a      	uxth	r2, r3
 801cfa6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cfaa:	b29b      	uxth	r3, r3
 801cfac:	4313      	orrs	r3, r2
 801cfae:	b29b      	uxth	r3, r3
 801cfb0:	4618      	mov	r0, r3
 801cfb2:	f7f5 ff19 	bl	8012de8 <lwip_htons>
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	461a      	mov	r2, r3
 801cfba:	693b      	ldr	r3, [r7, #16]
 801cfbc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801cfbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	f7f5 ff11 	bl	8012de8 <lwip_htons>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	461a      	mov	r2, r3
 801cfca:	693b      	ldr	r3, [r7, #16]
 801cfcc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801cfce:	693b      	ldr	r3, [r7, #16]
 801cfd0:	2200      	movs	r2, #0
 801cfd2:	741a      	strb	r2, [r3, #16]
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801cfd8:	693b      	ldr	r3, [r7, #16]
 801cfda:	2200      	movs	r2, #0
 801cfdc:	749a      	strb	r2, [r3, #18]
 801cfde:	2200      	movs	r2, #0
 801cfe0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801cfe2:	697b      	ldr	r3, [r7, #20]
}
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	3718      	adds	r7, #24
 801cfe8:	46bd      	mov	sp, r7
 801cfea:	bd80      	pop	{r7, pc}
 801cfec:	08026ed0 	.word	0x08026ed0
 801cff0:	080275d4 	.word	0x080275d4
 801cff4:	08026f50 	.word	0x08026f50

0801cff8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801cff8:	b5b0      	push	{r4, r5, r7, lr}
 801cffa:	b08a      	sub	sp, #40	; 0x28
 801cffc:	af04      	add	r7, sp, #16
 801cffe:	60f8      	str	r0, [r7, #12]
 801d000:	607b      	str	r3, [r7, #4]
 801d002:	460b      	mov	r3, r1
 801d004:	817b      	strh	r3, [r7, #10]
 801d006:	4613      	mov	r3, r2
 801d008:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d106      	bne.n	801d01e <tcp_output_alloc_header+0x26>
 801d010:	4b15      	ldr	r3, [pc, #84]	; (801d068 <tcp_output_alloc_header+0x70>)
 801d012:	f240 7242 	movw	r2, #1858	; 0x742
 801d016:	4915      	ldr	r1, [pc, #84]	; (801d06c <tcp_output_alloc_header+0x74>)
 801d018:	4815      	ldr	r0, [pc, #84]	; (801d070 <tcp_output_alloc_header+0x78>)
 801d01a:	f002 fff3 	bl	8020004 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801d01e:	68fb      	ldr	r3, [r7, #12]
 801d020:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	8adb      	ldrh	r3, [r3, #22]
 801d026:	68fa      	ldr	r2, [r7, #12]
 801d028:	8b12      	ldrh	r2, [r2, #24]
 801d02a:	68f9      	ldr	r1, [r7, #12]
 801d02c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801d02e:	893d      	ldrh	r5, [r7, #8]
 801d030:	897c      	ldrh	r4, [r7, #10]
 801d032:	9103      	str	r1, [sp, #12]
 801d034:	2110      	movs	r1, #16
 801d036:	9102      	str	r1, [sp, #8]
 801d038:	9201      	str	r2, [sp, #4]
 801d03a:	9300      	str	r3, [sp, #0]
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	462a      	mov	r2, r5
 801d040:	4621      	mov	r1, r4
 801d042:	f7ff ff67 	bl	801cf14 <tcp_output_alloc_header_common>
 801d046:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801d048:	697b      	ldr	r3, [r7, #20]
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d006      	beq.n	801d05c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d052:	68fa      	ldr	r2, [r7, #12]
 801d054:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d056:	441a      	add	r2, r3
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801d05c:	697b      	ldr	r3, [r7, #20]
}
 801d05e:	4618      	mov	r0, r3
 801d060:	3718      	adds	r7, #24
 801d062:	46bd      	mov	sp, r7
 801d064:	bdb0      	pop	{r4, r5, r7, pc}
 801d066:	bf00      	nop
 801d068:	08026ed0 	.word	0x08026ed0
 801d06c:	08027604 	.word	0x08027604
 801d070:	08026f50 	.word	0x08026f50

0801d074 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801d074:	b580      	push	{r7, lr}
 801d076:	b088      	sub	sp, #32
 801d078:	af00      	add	r7, sp, #0
 801d07a:	60f8      	str	r0, [r7, #12]
 801d07c:	60b9      	str	r1, [r7, #8]
 801d07e:	4611      	mov	r1, r2
 801d080:	461a      	mov	r2, r3
 801d082:	460b      	mov	r3, r1
 801d084:	71fb      	strb	r3, [r7, #7]
 801d086:	4613      	mov	r3, r2
 801d088:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801d08a:	2300      	movs	r3, #0
 801d08c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801d08e:	68bb      	ldr	r3, [r7, #8]
 801d090:	2b00      	cmp	r3, #0
 801d092:	d106      	bne.n	801d0a2 <tcp_output_fill_options+0x2e>
 801d094:	4b13      	ldr	r3, [pc, #76]	; (801d0e4 <tcp_output_fill_options+0x70>)
 801d096:	f240 7256 	movw	r2, #1878	; 0x756
 801d09a:	4913      	ldr	r1, [pc, #76]	; (801d0e8 <tcp_output_fill_options+0x74>)
 801d09c:	4813      	ldr	r0, [pc, #76]	; (801d0ec <tcp_output_fill_options+0x78>)
 801d09e:	f002 ffb1 	bl	8020004 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801d0a2:	68bb      	ldr	r3, [r7, #8]
 801d0a4:	685b      	ldr	r3, [r3, #4]
 801d0a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801d0a8:	69bb      	ldr	r3, [r7, #24]
 801d0aa:	3314      	adds	r3, #20
 801d0ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801d0ae:	69bb      	ldr	r3, [r7, #24]
 801d0b0:	f103 0214 	add.w	r2, r3, #20
 801d0b4:	8bfb      	ldrh	r3, [r7, #30]
 801d0b6:	009b      	lsls	r3, r3, #2
 801d0b8:	4619      	mov	r1, r3
 801d0ba:	79fb      	ldrb	r3, [r7, #7]
 801d0bc:	009b      	lsls	r3, r3, #2
 801d0be:	f003 0304 	and.w	r3, r3, #4
 801d0c2:	440b      	add	r3, r1
 801d0c4:	4413      	add	r3, r2
 801d0c6:	697a      	ldr	r2, [r7, #20]
 801d0c8:	429a      	cmp	r2, r3
 801d0ca:	d006      	beq.n	801d0da <tcp_output_fill_options+0x66>
 801d0cc:	4b05      	ldr	r3, [pc, #20]	; (801d0e4 <tcp_output_fill_options+0x70>)
 801d0ce:	f240 7275 	movw	r2, #1909	; 0x775
 801d0d2:	4907      	ldr	r1, [pc, #28]	; (801d0f0 <tcp_output_fill_options+0x7c>)
 801d0d4:	4805      	ldr	r0, [pc, #20]	; (801d0ec <tcp_output_fill_options+0x78>)
 801d0d6:	f002 ff95 	bl	8020004 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801d0da:	bf00      	nop
 801d0dc:	3720      	adds	r7, #32
 801d0de:	46bd      	mov	sp, r7
 801d0e0:	bd80      	pop	{r7, pc}
 801d0e2:	bf00      	nop
 801d0e4:	08026ed0 	.word	0x08026ed0
 801d0e8:	0802762c 	.word	0x0802762c
 801d0ec:	08026f50 	.word	0x08026f50
 801d0f0:	08027524 	.word	0x08027524

0801d0f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801d0f4:	b580      	push	{r7, lr}
 801d0f6:	b08a      	sub	sp, #40	; 0x28
 801d0f8:	af04      	add	r7, sp, #16
 801d0fa:	60f8      	str	r0, [r7, #12]
 801d0fc:	60b9      	str	r1, [r7, #8]
 801d0fe:	607a      	str	r2, [r7, #4]
 801d100:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d102:	68bb      	ldr	r3, [r7, #8]
 801d104:	2b00      	cmp	r3, #0
 801d106:	d106      	bne.n	801d116 <tcp_output_control_segment+0x22>
 801d108:	4b1c      	ldr	r3, [pc, #112]	; (801d17c <tcp_output_control_segment+0x88>)
 801d10a:	f240 7287 	movw	r2, #1927	; 0x787
 801d10e:	491c      	ldr	r1, [pc, #112]	; (801d180 <tcp_output_control_segment+0x8c>)
 801d110:	481c      	ldr	r0, [pc, #112]	; (801d184 <tcp_output_control_segment+0x90>)
 801d112:	f002 ff77 	bl	8020004 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801d116:	683a      	ldr	r2, [r7, #0]
 801d118:	6879      	ldr	r1, [r7, #4]
 801d11a:	68f8      	ldr	r0, [r7, #12]
 801d11c:	f7fe fae8 	bl	801b6f0 <tcp_route>
 801d120:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801d122:	693b      	ldr	r3, [r7, #16]
 801d124:	2b00      	cmp	r3, #0
 801d126:	d102      	bne.n	801d12e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801d128:	23fc      	movs	r3, #252	; 0xfc
 801d12a:	75fb      	strb	r3, [r7, #23]
 801d12c:	e01c      	b.n	801d168 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d006      	beq.n	801d142 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801d134:	68fb      	ldr	r3, [r7, #12]
 801d136:	7adb      	ldrb	r3, [r3, #11]
 801d138:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	7a9b      	ldrb	r3, [r3, #10]
 801d13e:	757b      	strb	r3, [r7, #21]
 801d140:	e003      	b.n	801d14a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801d142:	23ff      	movs	r3, #255	; 0xff
 801d144:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801d146:	2300      	movs	r3, #0
 801d148:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d14a:	7dba      	ldrb	r2, [r7, #22]
 801d14c:	693b      	ldr	r3, [r7, #16]
 801d14e:	9302      	str	r3, [sp, #8]
 801d150:	2306      	movs	r3, #6
 801d152:	9301      	str	r3, [sp, #4]
 801d154:	7d7b      	ldrb	r3, [r7, #21]
 801d156:	9300      	str	r3, [sp, #0]
 801d158:	4613      	mov	r3, r2
 801d15a:	683a      	ldr	r2, [r7, #0]
 801d15c:	6879      	ldr	r1, [r7, #4]
 801d15e:	68b8      	ldr	r0, [r7, #8]
 801d160:	f7f7 fad6 	bl	8014710 <ip4_output_if>
 801d164:	4603      	mov	r3, r0
 801d166:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801d168:	68b8      	ldr	r0, [r7, #8]
 801d16a:	f7f9 fd39 	bl	8016be0 <pbuf_free>
  return err;
 801d16e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d172:	4618      	mov	r0, r3
 801d174:	3718      	adds	r7, #24
 801d176:	46bd      	mov	sp, r7
 801d178:	bd80      	pop	{r7, pc}
 801d17a:	bf00      	nop
 801d17c:	08026ed0 	.word	0x08026ed0
 801d180:	08027654 	.word	0x08027654
 801d184:	08026f50 	.word	0x08026f50

0801d188 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801d188:	b590      	push	{r4, r7, lr}
 801d18a:	b08b      	sub	sp, #44	; 0x2c
 801d18c:	af04      	add	r7, sp, #16
 801d18e:	60f8      	str	r0, [r7, #12]
 801d190:	60b9      	str	r1, [r7, #8]
 801d192:	607a      	str	r2, [r7, #4]
 801d194:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801d196:	683b      	ldr	r3, [r7, #0]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d106      	bne.n	801d1aa <tcp_rst+0x22>
 801d19c:	4b1f      	ldr	r3, [pc, #124]	; (801d21c <tcp_rst+0x94>)
 801d19e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801d1a2:	491f      	ldr	r1, [pc, #124]	; (801d220 <tcp_rst+0x98>)
 801d1a4:	481f      	ldr	r0, [pc, #124]	; (801d224 <tcp_rst+0x9c>)
 801d1a6:	f002 ff2d 	bl	8020004 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d106      	bne.n	801d1be <tcp_rst+0x36>
 801d1b0:	4b1a      	ldr	r3, [pc, #104]	; (801d21c <tcp_rst+0x94>)
 801d1b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801d1b6:	491c      	ldr	r1, [pc, #112]	; (801d228 <tcp_rst+0xa0>)
 801d1b8:	481a      	ldr	r0, [pc, #104]	; (801d224 <tcp_rst+0x9c>)
 801d1ba:	f002 ff23 	bl	8020004 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d1be:	2300      	movs	r3, #0
 801d1c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801d1c2:	f246 0308 	movw	r3, #24584	; 0x6008
 801d1c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801d1c8:	7dfb      	ldrb	r3, [r7, #23]
 801d1ca:	b29c      	uxth	r4, r3
 801d1cc:	68b8      	ldr	r0, [r7, #8]
 801d1ce:	f7f5 fe20 	bl	8012e12 <lwip_htonl>
 801d1d2:	4602      	mov	r2, r0
 801d1d4:	8abb      	ldrh	r3, [r7, #20]
 801d1d6:	9303      	str	r3, [sp, #12]
 801d1d8:	2314      	movs	r3, #20
 801d1da:	9302      	str	r3, [sp, #8]
 801d1dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801d1de:	9301      	str	r3, [sp, #4]
 801d1e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d1e2:	9300      	str	r3, [sp, #0]
 801d1e4:	4613      	mov	r3, r2
 801d1e6:	2200      	movs	r2, #0
 801d1e8:	4621      	mov	r1, r4
 801d1ea:	6878      	ldr	r0, [r7, #4]
 801d1ec:	f7ff fe92 	bl	801cf14 <tcp_output_alloc_header_common>
 801d1f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801d1f2:	693b      	ldr	r3, [r7, #16]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d00c      	beq.n	801d212 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d1f8:	7dfb      	ldrb	r3, [r7, #23]
 801d1fa:	2200      	movs	r2, #0
 801d1fc:	6939      	ldr	r1, [r7, #16]
 801d1fe:	68f8      	ldr	r0, [r7, #12]
 801d200:	f7ff ff38 	bl	801d074 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d206:	683a      	ldr	r2, [r7, #0]
 801d208:	6939      	ldr	r1, [r7, #16]
 801d20a:	68f8      	ldr	r0, [r7, #12]
 801d20c:	f7ff ff72 	bl	801d0f4 <tcp_output_control_segment>
 801d210:	e000      	b.n	801d214 <tcp_rst+0x8c>
    return;
 801d212:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801d214:	371c      	adds	r7, #28
 801d216:	46bd      	mov	sp, r7
 801d218:	bd90      	pop	{r4, r7, pc}
 801d21a:	bf00      	nop
 801d21c:	08026ed0 	.word	0x08026ed0
 801d220:	08027680 	.word	0x08027680
 801d224:	08026f50 	.word	0x08026f50
 801d228:	0802769c 	.word	0x0802769c

0801d22c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801d22c:	b590      	push	{r4, r7, lr}
 801d22e:	b087      	sub	sp, #28
 801d230:	af00      	add	r7, sp, #0
 801d232:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801d234:	2300      	movs	r3, #0
 801d236:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801d238:	2300      	movs	r3, #0
 801d23a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d106      	bne.n	801d250 <tcp_send_empty_ack+0x24>
 801d242:	4b28      	ldr	r3, [pc, #160]	; (801d2e4 <tcp_send_empty_ack+0xb8>)
 801d244:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801d248:	4927      	ldr	r1, [pc, #156]	; (801d2e8 <tcp_send_empty_ack+0xbc>)
 801d24a:	4828      	ldr	r0, [pc, #160]	; (801d2ec <tcp_send_empty_ack+0xc0>)
 801d24c:	f002 feda 	bl	8020004 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d250:	7dfb      	ldrb	r3, [r7, #23]
 801d252:	009b      	lsls	r3, r3, #2
 801d254:	b2db      	uxtb	r3, r3
 801d256:	f003 0304 	and.w	r3, r3, #4
 801d25a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801d25c:	7d7b      	ldrb	r3, [r7, #21]
 801d25e:	b29c      	uxth	r4, r3
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d264:	4618      	mov	r0, r3
 801d266:	f7f5 fdd4 	bl	8012e12 <lwip_htonl>
 801d26a:	4603      	mov	r3, r0
 801d26c:	2200      	movs	r2, #0
 801d26e:	4621      	mov	r1, r4
 801d270:	6878      	ldr	r0, [r7, #4]
 801d272:	f7ff fec1 	bl	801cff8 <tcp_output_alloc_header>
 801d276:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d278:	693b      	ldr	r3, [r7, #16]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d109      	bne.n	801d292 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	8b5b      	ldrh	r3, [r3, #26]
 801d282:	f043 0303 	orr.w	r3, r3, #3
 801d286:	b29a      	uxth	r2, r3
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801d28c:	f06f 0301 	mvn.w	r3, #1
 801d290:	e023      	b.n	801d2da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801d292:	7dbb      	ldrb	r3, [r7, #22]
 801d294:	7dfa      	ldrb	r2, [r7, #23]
 801d296:	6939      	ldr	r1, [r7, #16]
 801d298:	6878      	ldr	r0, [r7, #4]
 801d29a:	f7ff feeb 	bl	801d074 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d29e:	687a      	ldr	r2, [r7, #4]
 801d2a0:	687b      	ldr	r3, [r7, #4]
 801d2a2:	3304      	adds	r3, #4
 801d2a4:	6939      	ldr	r1, [r7, #16]
 801d2a6:	6878      	ldr	r0, [r7, #4]
 801d2a8:	f7ff ff24 	bl	801d0f4 <tcp_output_control_segment>
 801d2ac:	4603      	mov	r3, r0
 801d2ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801d2b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d007      	beq.n	801d2c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d2b8:	687b      	ldr	r3, [r7, #4]
 801d2ba:	8b5b      	ldrh	r3, [r3, #26]
 801d2bc:	f043 0303 	orr.w	r3, r3, #3
 801d2c0:	b29a      	uxth	r2, r3
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	835a      	strh	r2, [r3, #26]
 801d2c6:	e006      	b.n	801d2d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	8b5b      	ldrh	r3, [r3, #26]
 801d2cc:	f023 0303 	bic.w	r3, r3, #3
 801d2d0:	b29a      	uxth	r2, r3
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801d2d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d2da:	4618      	mov	r0, r3
 801d2dc:	371c      	adds	r7, #28
 801d2de:	46bd      	mov	sp, r7
 801d2e0:	bd90      	pop	{r4, r7, pc}
 801d2e2:	bf00      	nop
 801d2e4:	08026ed0 	.word	0x08026ed0
 801d2e8:	080276b8 	.word	0x080276b8
 801d2ec:	08026f50 	.word	0x08026f50

0801d2f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801d2f0:	b590      	push	{r4, r7, lr}
 801d2f2:	b087      	sub	sp, #28
 801d2f4:	af00      	add	r7, sp, #0
 801d2f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d106      	bne.n	801d310 <tcp_keepalive+0x20>
 801d302:	4b18      	ldr	r3, [pc, #96]	; (801d364 <tcp_keepalive+0x74>)
 801d304:	f640 0224 	movw	r2, #2084	; 0x824
 801d308:	4917      	ldr	r1, [pc, #92]	; (801d368 <tcp_keepalive+0x78>)
 801d30a:	4818      	ldr	r0, [pc, #96]	; (801d36c <tcp_keepalive+0x7c>)
 801d30c:	f002 fe7a 	bl	8020004 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801d310:	7dfb      	ldrb	r3, [r7, #23]
 801d312:	b29c      	uxth	r4, r3
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d318:	3b01      	subs	r3, #1
 801d31a:	4618      	mov	r0, r3
 801d31c:	f7f5 fd79 	bl	8012e12 <lwip_htonl>
 801d320:	4603      	mov	r3, r0
 801d322:	2200      	movs	r2, #0
 801d324:	4621      	mov	r1, r4
 801d326:	6878      	ldr	r0, [r7, #4]
 801d328:	f7ff fe66 	bl	801cff8 <tcp_output_alloc_header>
 801d32c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d32e:	693b      	ldr	r3, [r7, #16]
 801d330:	2b00      	cmp	r3, #0
 801d332:	d102      	bne.n	801d33a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801d334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d338:	e010      	b.n	801d35c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d33a:	7dfb      	ldrb	r3, [r7, #23]
 801d33c:	2200      	movs	r2, #0
 801d33e:	6939      	ldr	r1, [r7, #16]
 801d340:	6878      	ldr	r0, [r7, #4]
 801d342:	f7ff fe97 	bl	801d074 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d346:	687a      	ldr	r2, [r7, #4]
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	3304      	adds	r3, #4
 801d34c:	6939      	ldr	r1, [r7, #16]
 801d34e:	6878      	ldr	r0, [r7, #4]
 801d350:	f7ff fed0 	bl	801d0f4 <tcp_output_control_segment>
 801d354:	4603      	mov	r3, r0
 801d356:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801d358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d35c:	4618      	mov	r0, r3
 801d35e:	371c      	adds	r7, #28
 801d360:	46bd      	mov	sp, r7
 801d362:	bd90      	pop	{r4, r7, pc}
 801d364:	08026ed0 	.word	0x08026ed0
 801d368:	080276d8 	.word	0x080276d8
 801d36c:	08026f50 	.word	0x08026f50

0801d370 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801d370:	b590      	push	{r4, r7, lr}
 801d372:	b08b      	sub	sp, #44	; 0x2c
 801d374:	af00      	add	r7, sp, #0
 801d376:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d378:	2300      	movs	r3, #0
 801d37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	2b00      	cmp	r3, #0
 801d382:	d106      	bne.n	801d392 <tcp_zero_window_probe+0x22>
 801d384:	4b4c      	ldr	r3, [pc, #304]	; (801d4b8 <tcp_zero_window_probe+0x148>)
 801d386:	f640 024f 	movw	r2, #2127	; 0x84f
 801d38a:	494c      	ldr	r1, [pc, #304]	; (801d4bc <tcp_zero_window_probe+0x14c>)
 801d38c:	484c      	ldr	r0, [pc, #304]	; (801d4c0 <tcp_zero_window_probe+0x150>)
 801d38e:	f002 fe39 	bl	8020004 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d396:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801d398:	6a3b      	ldr	r3, [r7, #32]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d101      	bne.n	801d3a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801d39e:	2300      	movs	r3, #0
 801d3a0:	e086      	b.n	801d4b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801d3a8:	2bff      	cmp	r3, #255	; 0xff
 801d3aa:	d007      	beq.n	801d3bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801d3b2:	3301      	adds	r3, #1
 801d3b4:	b2da      	uxtb	r2, r3
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801d3bc:	6a3b      	ldr	r3, [r7, #32]
 801d3be:	68db      	ldr	r3, [r3, #12]
 801d3c0:	899b      	ldrh	r3, [r3, #12]
 801d3c2:	b29b      	uxth	r3, r3
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	f7f5 fd0f 	bl	8012de8 <lwip_htons>
 801d3ca:	4603      	mov	r3, r0
 801d3cc:	b2db      	uxtb	r3, r3
 801d3ce:	f003 0301 	and.w	r3, r3, #1
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d005      	beq.n	801d3e2 <tcp_zero_window_probe+0x72>
 801d3d6:	6a3b      	ldr	r3, [r7, #32]
 801d3d8:	891b      	ldrh	r3, [r3, #8]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d101      	bne.n	801d3e2 <tcp_zero_window_probe+0x72>
 801d3de:	2301      	movs	r3, #1
 801d3e0:	e000      	b.n	801d3e4 <tcp_zero_window_probe+0x74>
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801d3e6:	7ffb      	ldrb	r3, [r7, #31]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	bf0c      	ite	eq
 801d3ec:	2301      	moveq	r3, #1
 801d3ee:	2300      	movne	r3, #0
 801d3f0:	b2db      	uxtb	r3, r3
 801d3f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801d3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d3f8:	b299      	uxth	r1, r3
 801d3fa:	6a3b      	ldr	r3, [r7, #32]
 801d3fc:	68db      	ldr	r3, [r3, #12]
 801d3fe:	685b      	ldr	r3, [r3, #4]
 801d400:	8bba      	ldrh	r2, [r7, #28]
 801d402:	6878      	ldr	r0, [r7, #4]
 801d404:	f7ff fdf8 	bl	801cff8 <tcp_output_alloc_header>
 801d408:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801d40a:	69bb      	ldr	r3, [r7, #24]
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d102      	bne.n	801d416 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801d410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d414:	e04c      	b.n	801d4b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801d416:	69bb      	ldr	r3, [r7, #24]
 801d418:	685b      	ldr	r3, [r3, #4]
 801d41a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801d41c:	7ffb      	ldrb	r3, [r7, #31]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d011      	beq.n	801d446 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801d422:	697b      	ldr	r3, [r7, #20]
 801d424:	899b      	ldrh	r3, [r3, #12]
 801d426:	b29b      	uxth	r3, r3
 801d428:	b21b      	sxth	r3, r3
 801d42a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d42e:	b21c      	sxth	r4, r3
 801d430:	2011      	movs	r0, #17
 801d432:	f7f5 fcd9 	bl	8012de8 <lwip_htons>
 801d436:	4603      	mov	r3, r0
 801d438:	b21b      	sxth	r3, r3
 801d43a:	4323      	orrs	r3, r4
 801d43c:	b21b      	sxth	r3, r3
 801d43e:	b29a      	uxth	r2, r3
 801d440:	697b      	ldr	r3, [r7, #20]
 801d442:	819a      	strh	r2, [r3, #12]
 801d444:	e010      	b.n	801d468 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801d446:	69bb      	ldr	r3, [r7, #24]
 801d448:	685b      	ldr	r3, [r3, #4]
 801d44a:	3314      	adds	r3, #20
 801d44c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801d44e:	6a3b      	ldr	r3, [r7, #32]
 801d450:	6858      	ldr	r0, [r3, #4]
 801d452:	6a3b      	ldr	r3, [r7, #32]
 801d454:	685b      	ldr	r3, [r3, #4]
 801d456:	891a      	ldrh	r2, [r3, #8]
 801d458:	6a3b      	ldr	r3, [r7, #32]
 801d45a:	891b      	ldrh	r3, [r3, #8]
 801d45c:	1ad3      	subs	r3, r2, r3
 801d45e:	b29b      	uxth	r3, r3
 801d460:	2201      	movs	r2, #1
 801d462:	6939      	ldr	r1, [r7, #16]
 801d464:	f7f9 fda6 	bl	8016fb4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801d468:	6a3b      	ldr	r3, [r7, #32]
 801d46a:	68db      	ldr	r3, [r3, #12]
 801d46c:	685b      	ldr	r3, [r3, #4]
 801d46e:	4618      	mov	r0, r3
 801d470:	f7f5 fccf 	bl	8012e12 <lwip_htonl>
 801d474:	4603      	mov	r3, r0
 801d476:	3301      	adds	r3, #1
 801d478:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	1ad3      	subs	r3, r2, r3
 801d482:	2b00      	cmp	r3, #0
 801d484:	da02      	bge.n	801d48c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	68fa      	ldr	r2, [r7, #12]
 801d48a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d490:	2200      	movs	r2, #0
 801d492:	69b9      	ldr	r1, [r7, #24]
 801d494:	6878      	ldr	r0, [r7, #4]
 801d496:	f7ff fded 	bl	801d074 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d49a:	687a      	ldr	r2, [r7, #4]
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	3304      	adds	r3, #4
 801d4a0:	69b9      	ldr	r1, [r7, #24]
 801d4a2:	6878      	ldr	r0, [r7, #4]
 801d4a4:	f7ff fe26 	bl	801d0f4 <tcp_output_control_segment>
 801d4a8:	4603      	mov	r3, r0
 801d4aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801d4ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	372c      	adds	r7, #44	; 0x2c
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd90      	pop	{r4, r7, pc}
 801d4b8:	08026ed0 	.word	0x08026ed0
 801d4bc:	080276f4 	.word	0x080276f4
 801d4c0:	08026f50 	.word	0x08026f50

0801d4c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b082      	sub	sp, #8
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801d4cc:	f7f9 ff18 	bl	8017300 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801d4d0:	4b0a      	ldr	r3, [pc, #40]	; (801d4fc <tcpip_tcp_timer+0x38>)
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d103      	bne.n	801d4e0 <tcpip_tcp_timer+0x1c>
 801d4d8:	4b09      	ldr	r3, [pc, #36]	; (801d500 <tcpip_tcp_timer+0x3c>)
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d005      	beq.n	801d4ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	4908      	ldr	r1, [pc, #32]	; (801d504 <tcpip_tcp_timer+0x40>)
 801d4e4:	20fa      	movs	r0, #250	; 0xfa
 801d4e6:	f000 f8f3 	bl	801d6d0 <sys_timeout>
 801d4ea:	e003      	b.n	801d4f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801d4ec:	4b06      	ldr	r3, [pc, #24]	; (801d508 <tcpip_tcp_timer+0x44>)
 801d4ee:	2200      	movs	r2, #0
 801d4f0:	601a      	str	r2, [r3, #0]
  }
}
 801d4f2:	bf00      	nop
 801d4f4:	bf00      	nop
 801d4f6:	3708      	adds	r7, #8
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	bd80      	pop	{r7, pc}
 801d4fc:	24008838 	.word	0x24008838
 801d500:	24008848 	.word	0x24008848
 801d504:	0801d4c5 	.word	0x0801d4c5
 801d508:	24004ea0 	.word	0x24004ea0

0801d50c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801d50c:	b580      	push	{r7, lr}
 801d50e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801d510:	4b0a      	ldr	r3, [pc, #40]	; (801d53c <tcp_timer_needed+0x30>)
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	2b00      	cmp	r3, #0
 801d516:	d10f      	bne.n	801d538 <tcp_timer_needed+0x2c>
 801d518:	4b09      	ldr	r3, [pc, #36]	; (801d540 <tcp_timer_needed+0x34>)
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d103      	bne.n	801d528 <tcp_timer_needed+0x1c>
 801d520:	4b08      	ldr	r3, [pc, #32]	; (801d544 <tcp_timer_needed+0x38>)
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	2b00      	cmp	r3, #0
 801d526:	d007      	beq.n	801d538 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801d528:	4b04      	ldr	r3, [pc, #16]	; (801d53c <tcp_timer_needed+0x30>)
 801d52a:	2201      	movs	r2, #1
 801d52c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801d52e:	2200      	movs	r2, #0
 801d530:	4905      	ldr	r1, [pc, #20]	; (801d548 <tcp_timer_needed+0x3c>)
 801d532:	20fa      	movs	r0, #250	; 0xfa
 801d534:	f000 f8cc 	bl	801d6d0 <sys_timeout>
  }
}
 801d538:	bf00      	nop
 801d53a:	bd80      	pop	{r7, pc}
 801d53c:	24004ea0 	.word	0x24004ea0
 801d540:	24008838 	.word	0x24008838
 801d544:	24008848 	.word	0x24008848
 801d548:	0801d4c5 	.word	0x0801d4c5

0801d54c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801d54c:	b580      	push	{r7, lr}
 801d54e:	b086      	sub	sp, #24
 801d550:	af00      	add	r7, sp, #0
 801d552:	60f8      	str	r0, [r7, #12]
 801d554:	60b9      	str	r1, [r7, #8]
 801d556:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801d558:	2006      	movs	r0, #6
 801d55a:	f7f8 fc5b 	bl	8015e14 <memp_malloc>
 801d55e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801d560:	693b      	ldr	r3, [r7, #16]
 801d562:	2b00      	cmp	r3, #0
 801d564:	d109      	bne.n	801d57a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801d566:	693b      	ldr	r3, [r7, #16]
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d151      	bne.n	801d610 <sys_timeout_abs+0xc4>
 801d56c:	4b2a      	ldr	r3, [pc, #168]	; (801d618 <sys_timeout_abs+0xcc>)
 801d56e:	22be      	movs	r2, #190	; 0xbe
 801d570:	492a      	ldr	r1, [pc, #168]	; (801d61c <sys_timeout_abs+0xd0>)
 801d572:	482b      	ldr	r0, [pc, #172]	; (801d620 <sys_timeout_abs+0xd4>)
 801d574:	f002 fd46 	bl	8020004 <iprintf>
    return;
 801d578:	e04a      	b.n	801d610 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801d57a:	693b      	ldr	r3, [r7, #16]
 801d57c:	2200      	movs	r2, #0
 801d57e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801d580:	693b      	ldr	r3, [r7, #16]
 801d582:	68ba      	ldr	r2, [r7, #8]
 801d584:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801d586:	693b      	ldr	r3, [r7, #16]
 801d588:	687a      	ldr	r2, [r7, #4]
 801d58a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801d58c:	693b      	ldr	r3, [r7, #16]
 801d58e:	68fa      	ldr	r2, [r7, #12]
 801d590:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801d592:	4b24      	ldr	r3, [pc, #144]	; (801d624 <sys_timeout_abs+0xd8>)
 801d594:	681b      	ldr	r3, [r3, #0]
 801d596:	2b00      	cmp	r3, #0
 801d598:	d103      	bne.n	801d5a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801d59a:	4a22      	ldr	r2, [pc, #136]	; (801d624 <sys_timeout_abs+0xd8>)
 801d59c:	693b      	ldr	r3, [r7, #16]
 801d59e:	6013      	str	r3, [r2, #0]
    return;
 801d5a0:	e037      	b.n	801d612 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801d5a2:	693b      	ldr	r3, [r7, #16]
 801d5a4:	685a      	ldr	r2, [r3, #4]
 801d5a6:	4b1f      	ldr	r3, [pc, #124]	; (801d624 <sys_timeout_abs+0xd8>)
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	685b      	ldr	r3, [r3, #4]
 801d5ac:	1ad3      	subs	r3, r2, r3
 801d5ae:	0fdb      	lsrs	r3, r3, #31
 801d5b0:	f003 0301 	and.w	r3, r3, #1
 801d5b4:	b2db      	uxtb	r3, r3
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	d007      	beq.n	801d5ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801d5ba:	4b1a      	ldr	r3, [pc, #104]	; (801d624 <sys_timeout_abs+0xd8>)
 801d5bc:	681a      	ldr	r2, [r3, #0]
 801d5be:	693b      	ldr	r3, [r7, #16]
 801d5c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801d5c2:	4a18      	ldr	r2, [pc, #96]	; (801d624 <sys_timeout_abs+0xd8>)
 801d5c4:	693b      	ldr	r3, [r7, #16]
 801d5c6:	6013      	str	r3, [r2, #0]
 801d5c8:	e023      	b.n	801d612 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801d5ca:	4b16      	ldr	r3, [pc, #88]	; (801d624 <sys_timeout_abs+0xd8>)
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	617b      	str	r3, [r7, #20]
 801d5d0:	e01a      	b.n	801d608 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801d5d2:	697b      	ldr	r3, [r7, #20]
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d00b      	beq.n	801d5f2 <sys_timeout_abs+0xa6>
 801d5da:	693b      	ldr	r3, [r7, #16]
 801d5dc:	685a      	ldr	r2, [r3, #4]
 801d5de:	697b      	ldr	r3, [r7, #20]
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	685b      	ldr	r3, [r3, #4]
 801d5e4:	1ad3      	subs	r3, r2, r3
 801d5e6:	0fdb      	lsrs	r3, r3, #31
 801d5e8:	f003 0301 	and.w	r3, r3, #1
 801d5ec:	b2db      	uxtb	r3, r3
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d007      	beq.n	801d602 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801d5f2:	697b      	ldr	r3, [r7, #20]
 801d5f4:	681a      	ldr	r2, [r3, #0]
 801d5f6:	693b      	ldr	r3, [r7, #16]
 801d5f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801d5fa:	697b      	ldr	r3, [r7, #20]
 801d5fc:	693a      	ldr	r2, [r7, #16]
 801d5fe:	601a      	str	r2, [r3, #0]
        break;
 801d600:	e007      	b.n	801d612 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801d602:	697b      	ldr	r3, [r7, #20]
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	617b      	str	r3, [r7, #20]
 801d608:	697b      	ldr	r3, [r7, #20]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d1e1      	bne.n	801d5d2 <sys_timeout_abs+0x86>
 801d60e:	e000      	b.n	801d612 <sys_timeout_abs+0xc6>
    return;
 801d610:	bf00      	nop
      }
    }
  }
}
 801d612:	3718      	adds	r7, #24
 801d614:	46bd      	mov	sp, r7
 801d616:	bd80      	pop	{r7, pc}
 801d618:	08027718 	.word	0x08027718
 801d61c:	08027778 	.word	0x08027778
 801d620:	080277b8 	.word	0x080277b8
 801d624:	24004e98 	.word	0x24004e98

0801d628 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801d628:	b580      	push	{r7, lr}
 801d62a:	b086      	sub	sp, #24
 801d62c:	af00      	add	r7, sp, #0
 801d62e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801d634:	697b      	ldr	r3, [r7, #20]
 801d636:	685b      	ldr	r3, [r3, #4]
 801d638:	4798      	blx	r3

  now = sys_now();
 801d63a:	f7f4 fe3b 	bl	80122b4 <sys_now>
 801d63e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801d640:	697b      	ldr	r3, [r7, #20]
 801d642:	681a      	ldr	r2, [r3, #0]
 801d644:	4b0f      	ldr	r3, [pc, #60]	; (801d684 <lwip_cyclic_timer+0x5c>)
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	4413      	add	r3, r2
 801d64a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801d64c:	68fa      	ldr	r2, [r7, #12]
 801d64e:	693b      	ldr	r3, [r7, #16]
 801d650:	1ad3      	subs	r3, r2, r3
 801d652:	0fdb      	lsrs	r3, r3, #31
 801d654:	f003 0301 	and.w	r3, r3, #1
 801d658:	b2db      	uxtb	r3, r3
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d009      	beq.n	801d672 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801d65e:	697b      	ldr	r3, [r7, #20]
 801d660:	681a      	ldr	r2, [r3, #0]
 801d662:	693b      	ldr	r3, [r7, #16]
 801d664:	4413      	add	r3, r2
 801d666:	687a      	ldr	r2, [r7, #4]
 801d668:	4907      	ldr	r1, [pc, #28]	; (801d688 <lwip_cyclic_timer+0x60>)
 801d66a:	4618      	mov	r0, r3
 801d66c:	f7ff ff6e 	bl	801d54c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801d670:	e004      	b.n	801d67c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801d672:	687a      	ldr	r2, [r7, #4]
 801d674:	4904      	ldr	r1, [pc, #16]	; (801d688 <lwip_cyclic_timer+0x60>)
 801d676:	68f8      	ldr	r0, [r7, #12]
 801d678:	f7ff ff68 	bl	801d54c <sys_timeout_abs>
}
 801d67c:	bf00      	nop
 801d67e:	3718      	adds	r7, #24
 801d680:	46bd      	mov	sp, r7
 801d682:	bd80      	pop	{r7, pc}
 801d684:	24004e9c 	.word	0x24004e9c
 801d688:	0801d629 	.word	0x0801d629

0801d68c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801d68c:	b580      	push	{r7, lr}
 801d68e:	b082      	sub	sp, #8
 801d690:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d692:	2301      	movs	r3, #1
 801d694:	607b      	str	r3, [r7, #4]
 801d696:	e00e      	b.n	801d6b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801d698:	4a0b      	ldr	r2, [pc, #44]	; (801d6c8 <sys_timeouts_init+0x3c>)
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	00db      	lsls	r3, r3, #3
 801d6a4:	4a08      	ldr	r2, [pc, #32]	; (801d6c8 <sys_timeouts_init+0x3c>)
 801d6a6:	4413      	add	r3, r2
 801d6a8:	461a      	mov	r2, r3
 801d6aa:	4908      	ldr	r1, [pc, #32]	; (801d6cc <sys_timeouts_init+0x40>)
 801d6ac:	f000 f810 	bl	801d6d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	3301      	adds	r3, #1
 801d6b4:	607b      	str	r3, [r7, #4]
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	2b02      	cmp	r3, #2
 801d6ba:	d9ed      	bls.n	801d698 <sys_timeouts_init+0xc>
  }
}
 801d6bc:	bf00      	nop
 801d6be:	bf00      	nop
 801d6c0:	3708      	adds	r7, #8
 801d6c2:	46bd      	mov	sp, r7
 801d6c4:	bd80      	pop	{r7, pc}
 801d6c6:	bf00      	nop
 801d6c8:	08028314 	.word	0x08028314
 801d6cc:	0801d629 	.word	0x0801d629

0801d6d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801d6d0:	b580      	push	{r7, lr}
 801d6d2:	b086      	sub	sp, #24
 801d6d4:	af00      	add	r7, sp, #0
 801d6d6:	60f8      	str	r0, [r7, #12]
 801d6d8:	60b9      	str	r1, [r7, #8]
 801d6da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d6e2:	d306      	bcc.n	801d6f2 <sys_timeout+0x22>
 801d6e4:	4b0a      	ldr	r3, [pc, #40]	; (801d710 <sys_timeout+0x40>)
 801d6e6:	f240 1229 	movw	r2, #297	; 0x129
 801d6ea:	490a      	ldr	r1, [pc, #40]	; (801d714 <sys_timeout+0x44>)
 801d6ec:	480a      	ldr	r0, [pc, #40]	; (801d718 <sys_timeout+0x48>)
 801d6ee:	f002 fc89 	bl	8020004 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801d6f2:	f7f4 fddf 	bl	80122b4 <sys_now>
 801d6f6:	4602      	mov	r2, r0
 801d6f8:	68fb      	ldr	r3, [r7, #12]
 801d6fa:	4413      	add	r3, r2
 801d6fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801d6fe:	687a      	ldr	r2, [r7, #4]
 801d700:	68b9      	ldr	r1, [r7, #8]
 801d702:	6978      	ldr	r0, [r7, #20]
 801d704:	f7ff ff22 	bl	801d54c <sys_timeout_abs>
#endif
}
 801d708:	bf00      	nop
 801d70a:	3718      	adds	r7, #24
 801d70c:	46bd      	mov	sp, r7
 801d70e:	bd80      	pop	{r7, pc}
 801d710:	08027718 	.word	0x08027718
 801d714:	080277e0 	.word	0x080277e0
 801d718:	080277b8 	.word	0x080277b8

0801d71c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b084      	sub	sp, #16
 801d720:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801d722:	f7f4 fdc7 	bl	80122b4 <sys_now>
 801d726:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801d728:	4b1a      	ldr	r3, [pc, #104]	; (801d794 <sys_check_timeouts+0x78>)
 801d72a:	781b      	ldrb	r3, [r3, #0]
 801d72c:	b2db      	uxtb	r3, r3
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d001      	beq.n	801d736 <sys_check_timeouts+0x1a>
 801d732:	f7f8 ff1b 	bl	801656c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801d736:	4b18      	ldr	r3, [pc, #96]	; (801d798 <sys_check_timeouts+0x7c>)
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801d73c:	68bb      	ldr	r3, [r7, #8]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d022      	beq.n	801d788 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801d742:	68bb      	ldr	r3, [r7, #8]
 801d744:	685b      	ldr	r3, [r3, #4]
 801d746:	68fa      	ldr	r2, [r7, #12]
 801d748:	1ad3      	subs	r3, r2, r3
 801d74a:	0fdb      	lsrs	r3, r3, #31
 801d74c:	f003 0301 	and.w	r3, r3, #1
 801d750:	b2db      	uxtb	r3, r3
 801d752:	2b00      	cmp	r3, #0
 801d754:	d11a      	bne.n	801d78c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801d756:	68bb      	ldr	r3, [r7, #8]
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	4a0f      	ldr	r2, [pc, #60]	; (801d798 <sys_check_timeouts+0x7c>)
 801d75c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801d75e:	68bb      	ldr	r3, [r7, #8]
 801d760:	689b      	ldr	r3, [r3, #8]
 801d762:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801d764:	68bb      	ldr	r3, [r7, #8]
 801d766:	68db      	ldr	r3, [r3, #12]
 801d768:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801d76a:	68bb      	ldr	r3, [r7, #8]
 801d76c:	685b      	ldr	r3, [r3, #4]
 801d76e:	4a0b      	ldr	r2, [pc, #44]	; (801d79c <sys_check_timeouts+0x80>)
 801d770:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801d772:	68b9      	ldr	r1, [r7, #8]
 801d774:	2006      	movs	r0, #6
 801d776:	f7f8 fbbd 	bl	8015ef4 <memp_free>
    if (handler != NULL) {
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d0d3      	beq.n	801d728 <sys_check_timeouts+0xc>
      handler(arg);
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	6838      	ldr	r0, [r7, #0]
 801d784:	4798      	blx	r3
  do {
 801d786:	e7cf      	b.n	801d728 <sys_check_timeouts+0xc>
      return;
 801d788:	bf00      	nop
 801d78a:	e000      	b.n	801d78e <sys_check_timeouts+0x72>
      return;
 801d78c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801d78e:	3710      	adds	r7, #16
 801d790:	46bd      	mov	sp, r7
 801d792:	bd80      	pop	{r7, pc}
 801d794:	24008830 	.word	0x24008830
 801d798:	24004e98 	.word	0x24004e98
 801d79c:	24004e9c 	.word	0x24004e9c

0801d7a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801d7a0:	b580      	push	{r7, lr}
 801d7a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801d7a4:	f002 fcbc 	bl	8020120 <rand>
 801d7a8:	4603      	mov	r3, r0
 801d7aa:	b29b      	uxth	r3, r3
 801d7ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801d7b0:	b29b      	uxth	r3, r3
 801d7b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801d7b6:	b29a      	uxth	r2, r3
 801d7b8:	4b01      	ldr	r3, [pc, #4]	; (801d7c0 <udp_init+0x20>)
 801d7ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801d7bc:	bf00      	nop
 801d7be:	bd80      	pop	{r7, pc}
 801d7c0:	2400002c 	.word	0x2400002c

0801d7c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801d7c4:	b480      	push	{r7}
 801d7c6:	b083      	sub	sp, #12
 801d7c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801d7ce:	4b17      	ldr	r3, [pc, #92]	; (801d82c <udp_new_port+0x68>)
 801d7d0:	881b      	ldrh	r3, [r3, #0]
 801d7d2:	1c5a      	adds	r2, r3, #1
 801d7d4:	b291      	uxth	r1, r2
 801d7d6:	4a15      	ldr	r2, [pc, #84]	; (801d82c <udp_new_port+0x68>)
 801d7d8:	8011      	strh	r1, [r2, #0]
 801d7da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d7de:	4293      	cmp	r3, r2
 801d7e0:	d103      	bne.n	801d7ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801d7e2:	4b12      	ldr	r3, [pc, #72]	; (801d82c <udp_new_port+0x68>)
 801d7e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801d7e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d7ea:	4b11      	ldr	r3, [pc, #68]	; (801d830 <udp_new_port+0x6c>)
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	603b      	str	r3, [r7, #0]
 801d7f0:	e011      	b.n	801d816 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801d7f2:	683b      	ldr	r3, [r7, #0]
 801d7f4:	8a5a      	ldrh	r2, [r3, #18]
 801d7f6:	4b0d      	ldr	r3, [pc, #52]	; (801d82c <udp_new_port+0x68>)
 801d7f8:	881b      	ldrh	r3, [r3, #0]
 801d7fa:	429a      	cmp	r2, r3
 801d7fc:	d108      	bne.n	801d810 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801d7fe:	88fb      	ldrh	r3, [r7, #6]
 801d800:	3301      	adds	r3, #1
 801d802:	80fb      	strh	r3, [r7, #6]
 801d804:	88fb      	ldrh	r3, [r7, #6]
 801d806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d80a:	d3e0      	bcc.n	801d7ce <udp_new_port+0xa>
        return 0;
 801d80c:	2300      	movs	r3, #0
 801d80e:	e007      	b.n	801d820 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d810:	683b      	ldr	r3, [r7, #0]
 801d812:	68db      	ldr	r3, [r3, #12]
 801d814:	603b      	str	r3, [r7, #0]
 801d816:	683b      	ldr	r3, [r7, #0]
 801d818:	2b00      	cmp	r3, #0
 801d81a:	d1ea      	bne.n	801d7f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801d81c:	4b03      	ldr	r3, [pc, #12]	; (801d82c <udp_new_port+0x68>)
 801d81e:	881b      	ldrh	r3, [r3, #0]
}
 801d820:	4618      	mov	r0, r3
 801d822:	370c      	adds	r7, #12
 801d824:	46bd      	mov	sp, r7
 801d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d82a:	4770      	bx	lr
 801d82c:	2400002c 	.word	0x2400002c
 801d830:	24008850 	.word	0x24008850

0801d834 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801d834:	b580      	push	{r7, lr}
 801d836:	b084      	sub	sp, #16
 801d838:	af00      	add	r7, sp, #0
 801d83a:	60f8      	str	r0, [r7, #12]
 801d83c:	60b9      	str	r1, [r7, #8]
 801d83e:	4613      	mov	r3, r2
 801d840:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	2b00      	cmp	r3, #0
 801d846:	d105      	bne.n	801d854 <udp_input_local_match+0x20>
 801d848:	4b27      	ldr	r3, [pc, #156]	; (801d8e8 <udp_input_local_match+0xb4>)
 801d84a:	2287      	movs	r2, #135	; 0x87
 801d84c:	4927      	ldr	r1, [pc, #156]	; (801d8ec <udp_input_local_match+0xb8>)
 801d84e:	4828      	ldr	r0, [pc, #160]	; (801d8f0 <udp_input_local_match+0xbc>)
 801d850:	f002 fbd8 	bl	8020004 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801d854:	68bb      	ldr	r3, [r7, #8]
 801d856:	2b00      	cmp	r3, #0
 801d858:	d105      	bne.n	801d866 <udp_input_local_match+0x32>
 801d85a:	4b23      	ldr	r3, [pc, #140]	; (801d8e8 <udp_input_local_match+0xb4>)
 801d85c:	2288      	movs	r2, #136	; 0x88
 801d85e:	4925      	ldr	r1, [pc, #148]	; (801d8f4 <udp_input_local_match+0xc0>)
 801d860:	4823      	ldr	r0, [pc, #140]	; (801d8f0 <udp_input_local_match+0xbc>)
 801d862:	f002 fbcf 	bl	8020004 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	7a1b      	ldrb	r3, [r3, #8]
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d00b      	beq.n	801d886 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	7a1a      	ldrb	r2, [r3, #8]
 801d872:	4b21      	ldr	r3, [pc, #132]	; (801d8f8 <udp_input_local_match+0xc4>)
 801d874:	685b      	ldr	r3, [r3, #4]
 801d876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d87a:	3301      	adds	r3, #1
 801d87c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d87e:	429a      	cmp	r2, r3
 801d880:	d001      	beq.n	801d886 <udp_input_local_match+0x52>
    return 0;
 801d882:	2300      	movs	r3, #0
 801d884:	e02b      	b.n	801d8de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801d886:	79fb      	ldrb	r3, [r7, #7]
 801d888:	2b00      	cmp	r3, #0
 801d88a:	d018      	beq.n	801d8be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d013      	beq.n	801d8ba <udp_input_local_match+0x86>
 801d892:	68fb      	ldr	r3, [r7, #12]
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	2b00      	cmp	r3, #0
 801d898:	d00f      	beq.n	801d8ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d89a:	4b17      	ldr	r3, [pc, #92]	; (801d8f8 <udp_input_local_match+0xc4>)
 801d89c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801d89e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d8a2:	d00a      	beq.n	801d8ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	681a      	ldr	r2, [r3, #0]
 801d8a8:	4b13      	ldr	r3, [pc, #76]	; (801d8f8 <udp_input_local_match+0xc4>)
 801d8aa:	695b      	ldr	r3, [r3, #20]
 801d8ac:	405a      	eors	r2, r3
 801d8ae:	68bb      	ldr	r3, [r7, #8]
 801d8b0:	3308      	adds	r3, #8
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d110      	bne.n	801d8dc <udp_input_local_match+0xa8>
          return 1;
 801d8ba:	2301      	movs	r3, #1
 801d8bc:	e00f      	b.n	801d8de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d009      	beq.n	801d8d8 <udp_input_local_match+0xa4>
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d005      	beq.n	801d8d8 <udp_input_local_match+0xa4>
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	681a      	ldr	r2, [r3, #0]
 801d8d0:	4b09      	ldr	r3, [pc, #36]	; (801d8f8 <udp_input_local_match+0xc4>)
 801d8d2:	695b      	ldr	r3, [r3, #20]
 801d8d4:	429a      	cmp	r2, r3
 801d8d6:	d101      	bne.n	801d8dc <udp_input_local_match+0xa8>
        return 1;
 801d8d8:	2301      	movs	r3, #1
 801d8da:	e000      	b.n	801d8de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801d8dc:	2300      	movs	r3, #0
}
 801d8de:	4618      	mov	r0, r3
 801d8e0:	3710      	adds	r7, #16
 801d8e2:	46bd      	mov	sp, r7
 801d8e4:	bd80      	pop	{r7, pc}
 801d8e6:	bf00      	nop
 801d8e8:	0802782c 	.word	0x0802782c
 801d8ec:	08027888 	.word	0x08027888
 801d8f0:	080278ac 	.word	0x080278ac
 801d8f4:	080278d4 	.word	0x080278d4
 801d8f8:	24005948 	.word	0x24005948

0801d8fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801d8fc:	b590      	push	{r4, r7, lr}
 801d8fe:	b08d      	sub	sp, #52	; 0x34
 801d900:	af02      	add	r7, sp, #8
 801d902:	6078      	str	r0, [r7, #4]
 801d904:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801d906:	2300      	movs	r3, #0
 801d908:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d105      	bne.n	801d91c <udp_input+0x20>
 801d910:	4b7c      	ldr	r3, [pc, #496]	; (801db04 <udp_input+0x208>)
 801d912:	22cf      	movs	r2, #207	; 0xcf
 801d914:	497c      	ldr	r1, [pc, #496]	; (801db08 <udp_input+0x20c>)
 801d916:	487d      	ldr	r0, [pc, #500]	; (801db0c <udp_input+0x210>)
 801d918:	f002 fb74 	bl	8020004 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801d91c:	683b      	ldr	r3, [r7, #0]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d105      	bne.n	801d92e <udp_input+0x32>
 801d922:	4b78      	ldr	r3, [pc, #480]	; (801db04 <udp_input+0x208>)
 801d924:	22d0      	movs	r2, #208	; 0xd0
 801d926:	497a      	ldr	r1, [pc, #488]	; (801db10 <udp_input+0x214>)
 801d928:	4878      	ldr	r0, [pc, #480]	; (801db0c <udp_input+0x210>)
 801d92a:	f002 fb6b 	bl	8020004 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	895b      	ldrh	r3, [r3, #10]
 801d932:	2b07      	cmp	r3, #7
 801d934:	d803      	bhi.n	801d93e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801d936:	6878      	ldr	r0, [r7, #4]
 801d938:	f7f9 f952 	bl	8016be0 <pbuf_free>
    goto end;
 801d93c:	e0de      	b.n	801dafc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	685b      	ldr	r3, [r3, #4]
 801d942:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801d944:	4b73      	ldr	r3, [pc, #460]	; (801db14 <udp_input+0x218>)
 801d946:	695b      	ldr	r3, [r3, #20]
 801d948:	4a72      	ldr	r2, [pc, #456]	; (801db14 <udp_input+0x218>)
 801d94a:	6812      	ldr	r2, [r2, #0]
 801d94c:	4611      	mov	r1, r2
 801d94e:	4618      	mov	r0, r3
 801d950:	f7f6 ffb6 	bl	80148c0 <ip4_addr_isbroadcast_u32>
 801d954:	4603      	mov	r3, r0
 801d956:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801d958:	697b      	ldr	r3, [r7, #20]
 801d95a:	881b      	ldrh	r3, [r3, #0]
 801d95c:	b29b      	uxth	r3, r3
 801d95e:	4618      	mov	r0, r3
 801d960:	f7f5 fa42 	bl	8012de8 <lwip_htons>
 801d964:	4603      	mov	r3, r0
 801d966:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801d968:	697b      	ldr	r3, [r7, #20]
 801d96a:	885b      	ldrh	r3, [r3, #2]
 801d96c:	b29b      	uxth	r3, r3
 801d96e:	4618      	mov	r0, r3
 801d970:	f7f5 fa3a 	bl	8012de8 <lwip_htons>
 801d974:	4603      	mov	r3, r0
 801d976:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801d978:	2300      	movs	r3, #0
 801d97a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801d97c:	2300      	movs	r3, #0
 801d97e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801d980:	2300      	movs	r3, #0
 801d982:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801d984:	4b64      	ldr	r3, [pc, #400]	; (801db18 <udp_input+0x21c>)
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	627b      	str	r3, [r7, #36]	; 0x24
 801d98a:	e054      	b.n	801da36 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d98e:	8a5b      	ldrh	r3, [r3, #18]
 801d990:	89fa      	ldrh	r2, [r7, #14]
 801d992:	429a      	cmp	r2, r3
 801d994:	d14a      	bne.n	801da2c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801d996:	7cfb      	ldrb	r3, [r7, #19]
 801d998:	461a      	mov	r2, r3
 801d99a:	6839      	ldr	r1, [r7, #0]
 801d99c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d99e:	f7ff ff49 	bl	801d834 <udp_input_local_match>
 801d9a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d041      	beq.n	801da2c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9aa:	7c1b      	ldrb	r3, [r3, #16]
 801d9ac:	f003 0304 	and.w	r3, r3, #4
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d11d      	bne.n	801d9f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801d9b4:	69fb      	ldr	r3, [r7, #28]
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d102      	bne.n	801d9c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801d9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9bc:	61fb      	str	r3, [r7, #28]
 801d9be:	e017      	b.n	801d9f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801d9c0:	7cfb      	ldrb	r3, [r7, #19]
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d014      	beq.n	801d9f0 <udp_input+0xf4>
 801d9c6:	4b53      	ldr	r3, [pc, #332]	; (801db14 <udp_input+0x218>)
 801d9c8:	695b      	ldr	r3, [r3, #20]
 801d9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d9ce:	d10f      	bne.n	801d9f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801d9d0:	69fb      	ldr	r3, [r7, #28]
 801d9d2:	681a      	ldr	r2, [r3, #0]
 801d9d4:	683b      	ldr	r3, [r7, #0]
 801d9d6:	3304      	adds	r3, #4
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	429a      	cmp	r2, r3
 801d9dc:	d008      	beq.n	801d9f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9e0:	681a      	ldr	r2, [r3, #0]
 801d9e2:	683b      	ldr	r3, [r7, #0]
 801d9e4:	3304      	adds	r3, #4
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	429a      	cmp	r2, r3
 801d9ea:	d101      	bne.n	801d9f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801d9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9f2:	8a9b      	ldrh	r3, [r3, #20]
 801d9f4:	8a3a      	ldrh	r2, [r7, #16]
 801d9f6:	429a      	cmp	r2, r3
 801d9f8:	d118      	bne.n	801da2c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801d9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d005      	beq.n	801da0e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da04:	685a      	ldr	r2, [r3, #4]
 801da06:	4b43      	ldr	r3, [pc, #268]	; (801db14 <udp_input+0x218>)
 801da08:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801da0a:	429a      	cmp	r2, r3
 801da0c:	d10e      	bne.n	801da2c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801da0e:	6a3b      	ldr	r3, [r7, #32]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d014      	beq.n	801da3e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da16:	68da      	ldr	r2, [r3, #12]
 801da18:	6a3b      	ldr	r3, [r7, #32]
 801da1a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801da1c:	4b3e      	ldr	r3, [pc, #248]	; (801db18 <udp_input+0x21c>)
 801da1e:	681a      	ldr	r2, [r3, #0]
 801da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da22:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801da24:	4a3c      	ldr	r2, [pc, #240]	; (801db18 <udp_input+0x21c>)
 801da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da28:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801da2a:	e008      	b.n	801da3e <udp_input+0x142>
      }
    }

    prev = pcb;
 801da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da2e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da32:	68db      	ldr	r3, [r3, #12]
 801da34:	627b      	str	r3, [r7, #36]	; 0x24
 801da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d1a7      	bne.n	801d98c <udp_input+0x90>
 801da3c:	e000      	b.n	801da40 <udp_input+0x144>
        break;
 801da3e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da42:	2b00      	cmp	r3, #0
 801da44:	d101      	bne.n	801da4a <udp_input+0x14e>
    pcb = uncon_pcb;
 801da46:	69fb      	ldr	r3, [r7, #28]
 801da48:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801da4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d002      	beq.n	801da56 <udp_input+0x15a>
    for_us = 1;
 801da50:	2301      	movs	r3, #1
 801da52:	76fb      	strb	r3, [r7, #27]
 801da54:	e00a      	b.n	801da6c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801da56:	683b      	ldr	r3, [r7, #0]
 801da58:	3304      	adds	r3, #4
 801da5a:	681a      	ldr	r2, [r3, #0]
 801da5c:	4b2d      	ldr	r3, [pc, #180]	; (801db14 <udp_input+0x218>)
 801da5e:	695b      	ldr	r3, [r3, #20]
 801da60:	429a      	cmp	r2, r3
 801da62:	bf0c      	ite	eq
 801da64:	2301      	moveq	r3, #1
 801da66:	2300      	movne	r3, #0
 801da68:	b2db      	uxtb	r3, r3
 801da6a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801da6c:	7efb      	ldrb	r3, [r7, #27]
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d041      	beq.n	801daf6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801da72:	2108      	movs	r1, #8
 801da74:	6878      	ldr	r0, [r7, #4]
 801da76:	f7f9 f82d 	bl	8016ad4 <pbuf_remove_header>
 801da7a:	4603      	mov	r3, r0
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d00a      	beq.n	801da96 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801da80:	4b20      	ldr	r3, [pc, #128]	; (801db04 <udp_input+0x208>)
 801da82:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801da86:	4925      	ldr	r1, [pc, #148]	; (801db1c <udp_input+0x220>)
 801da88:	4820      	ldr	r0, [pc, #128]	; (801db0c <udp_input+0x210>)
 801da8a:	f002 fabb 	bl	8020004 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801da8e:	6878      	ldr	r0, [r7, #4]
 801da90:	f7f9 f8a6 	bl	8016be0 <pbuf_free>
      goto end;
 801da94:	e032      	b.n	801dafc <udp_input+0x200>
    }

    if (pcb != NULL) {
 801da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d012      	beq.n	801dac2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da9e:	699b      	ldr	r3, [r3, #24]
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d00a      	beq.n	801daba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801daa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daa6:	699c      	ldr	r4, [r3, #24]
 801daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daaa:	69d8      	ldr	r0, [r3, #28]
 801daac:	8a3b      	ldrh	r3, [r7, #16]
 801daae:	9300      	str	r3, [sp, #0]
 801dab0:	4b1b      	ldr	r3, [pc, #108]	; (801db20 <udp_input+0x224>)
 801dab2:	687a      	ldr	r2, [r7, #4]
 801dab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dab6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801dab8:	e021      	b.n	801dafe <udp_input+0x202>
        pbuf_free(p);
 801daba:	6878      	ldr	r0, [r7, #4]
 801dabc:	f7f9 f890 	bl	8016be0 <pbuf_free>
        goto end;
 801dac0:	e01c      	b.n	801dafc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801dac2:	7cfb      	ldrb	r3, [r7, #19]
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d112      	bne.n	801daee <udp_input+0x1f2>
 801dac8:	4b12      	ldr	r3, [pc, #72]	; (801db14 <udp_input+0x218>)
 801daca:	695b      	ldr	r3, [r3, #20]
 801dacc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801dad0:	2be0      	cmp	r3, #224	; 0xe0
 801dad2:	d00c      	beq.n	801daee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801dad4:	4b0f      	ldr	r3, [pc, #60]	; (801db14 <udp_input+0x218>)
 801dad6:	899b      	ldrh	r3, [r3, #12]
 801dad8:	3308      	adds	r3, #8
 801dada:	b29b      	uxth	r3, r3
 801dadc:	b21b      	sxth	r3, r3
 801dade:	4619      	mov	r1, r3
 801dae0:	6878      	ldr	r0, [r7, #4]
 801dae2:	f7f9 f86a 	bl	8016bba <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801dae6:	2103      	movs	r1, #3
 801dae8:	6878      	ldr	r0, [r7, #4]
 801daea:	f7f6 faed 	bl	80140c8 <icmp_dest_unreach>
      pbuf_free(p);
 801daee:	6878      	ldr	r0, [r7, #4]
 801daf0:	f7f9 f876 	bl	8016be0 <pbuf_free>
  return;
 801daf4:	e003      	b.n	801dafe <udp_input+0x202>
    pbuf_free(p);
 801daf6:	6878      	ldr	r0, [r7, #4]
 801daf8:	f7f9 f872 	bl	8016be0 <pbuf_free>
  return;
 801dafc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801dafe:	372c      	adds	r7, #44	; 0x2c
 801db00:	46bd      	mov	sp, r7
 801db02:	bd90      	pop	{r4, r7, pc}
 801db04:	0802782c 	.word	0x0802782c
 801db08:	080278fc 	.word	0x080278fc
 801db0c:	080278ac 	.word	0x080278ac
 801db10:	08027914 	.word	0x08027914
 801db14:	24005948 	.word	0x24005948
 801db18:	24008850 	.word	0x24008850
 801db1c:	08027930 	.word	0x08027930
 801db20:	24005958 	.word	0x24005958

0801db24 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801db24:	b580      	push	{r7, lr}
 801db26:	b086      	sub	sp, #24
 801db28:	af00      	add	r7, sp, #0
 801db2a:	60f8      	str	r0, [r7, #12]
 801db2c:	60b9      	str	r1, [r7, #8]
 801db2e:	4613      	mov	r3, r2
 801db30:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801db32:	68bb      	ldr	r3, [r7, #8]
 801db34:	2b00      	cmp	r3, #0
 801db36:	d101      	bne.n	801db3c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801db38:	4b39      	ldr	r3, [pc, #228]	; (801dc20 <udp_bind+0xfc>)
 801db3a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d109      	bne.n	801db56 <udp_bind+0x32>
 801db42:	4b38      	ldr	r3, [pc, #224]	; (801dc24 <udp_bind+0x100>)
 801db44:	f240 32b7 	movw	r2, #951	; 0x3b7
 801db48:	4937      	ldr	r1, [pc, #220]	; (801dc28 <udp_bind+0x104>)
 801db4a:	4838      	ldr	r0, [pc, #224]	; (801dc2c <udp_bind+0x108>)
 801db4c:	f002 fa5a 	bl	8020004 <iprintf>
 801db50:	f06f 030f 	mvn.w	r3, #15
 801db54:	e060      	b.n	801dc18 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801db56:	2300      	movs	r3, #0
 801db58:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801db5a:	4b35      	ldr	r3, [pc, #212]	; (801dc30 <udp_bind+0x10c>)
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	617b      	str	r3, [r7, #20]
 801db60:	e009      	b.n	801db76 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801db62:	68fa      	ldr	r2, [r7, #12]
 801db64:	697b      	ldr	r3, [r7, #20]
 801db66:	429a      	cmp	r2, r3
 801db68:	d102      	bne.n	801db70 <udp_bind+0x4c>
      rebind = 1;
 801db6a:	2301      	movs	r3, #1
 801db6c:	74fb      	strb	r3, [r7, #19]
      break;
 801db6e:	e005      	b.n	801db7c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801db70:	697b      	ldr	r3, [r7, #20]
 801db72:	68db      	ldr	r3, [r3, #12]
 801db74:	617b      	str	r3, [r7, #20]
 801db76:	697b      	ldr	r3, [r7, #20]
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d1f2      	bne.n	801db62 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801db7c:	88fb      	ldrh	r3, [r7, #6]
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d109      	bne.n	801db96 <udp_bind+0x72>
    port = udp_new_port();
 801db82:	f7ff fe1f 	bl	801d7c4 <udp_new_port>
 801db86:	4603      	mov	r3, r0
 801db88:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801db8a:	88fb      	ldrh	r3, [r7, #6]
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d12c      	bne.n	801dbea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801db90:	f06f 0307 	mvn.w	r3, #7
 801db94:	e040      	b.n	801dc18 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801db96:	4b26      	ldr	r3, [pc, #152]	; (801dc30 <udp_bind+0x10c>)
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	617b      	str	r3, [r7, #20]
 801db9c:	e022      	b.n	801dbe4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801db9e:	68fa      	ldr	r2, [r7, #12]
 801dba0:	697b      	ldr	r3, [r7, #20]
 801dba2:	429a      	cmp	r2, r3
 801dba4:	d01b      	beq.n	801dbde <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801dba6:	697b      	ldr	r3, [r7, #20]
 801dba8:	8a5b      	ldrh	r3, [r3, #18]
 801dbaa:	88fa      	ldrh	r2, [r7, #6]
 801dbac:	429a      	cmp	r2, r3
 801dbae:	d116      	bne.n	801dbde <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801dbb0:	697b      	ldr	r3, [r7, #20]
 801dbb2:	681a      	ldr	r2, [r3, #0]
 801dbb4:	68bb      	ldr	r3, [r7, #8]
 801dbb6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801dbb8:	429a      	cmp	r2, r3
 801dbba:	d00d      	beq.n	801dbd8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801dbbc:	68bb      	ldr	r3, [r7, #8]
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	d00a      	beq.n	801dbd8 <udp_bind+0xb4>
 801dbc2:	68bb      	ldr	r3, [r7, #8]
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d006      	beq.n	801dbd8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801dbca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d003      	beq.n	801dbd8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801dbd0:	697b      	ldr	r3, [r7, #20]
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d102      	bne.n	801dbde <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801dbd8:	f06f 0307 	mvn.w	r3, #7
 801dbdc:	e01c      	b.n	801dc18 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801dbde:	697b      	ldr	r3, [r7, #20]
 801dbe0:	68db      	ldr	r3, [r3, #12]
 801dbe2:	617b      	str	r3, [r7, #20]
 801dbe4:	697b      	ldr	r3, [r7, #20]
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d1d9      	bne.n	801db9e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801dbea:	68bb      	ldr	r3, [r7, #8]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d002      	beq.n	801dbf6 <udp_bind+0xd2>
 801dbf0:	68bb      	ldr	r3, [r7, #8]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	e000      	b.n	801dbf8 <udp_bind+0xd4>
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	68fa      	ldr	r2, [r7, #12]
 801dbfa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801dbfc:	68fb      	ldr	r3, [r7, #12]
 801dbfe:	88fa      	ldrh	r2, [r7, #6]
 801dc00:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801dc02:	7cfb      	ldrb	r3, [r7, #19]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d106      	bne.n	801dc16 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801dc08:	4b09      	ldr	r3, [pc, #36]	; (801dc30 <udp_bind+0x10c>)
 801dc0a:	681a      	ldr	r2, [r3, #0]
 801dc0c:	68fb      	ldr	r3, [r7, #12]
 801dc0e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801dc10:	4a07      	ldr	r2, [pc, #28]	; (801dc30 <udp_bind+0x10c>)
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801dc16:	2300      	movs	r3, #0
}
 801dc18:	4618      	mov	r0, r3
 801dc1a:	3718      	adds	r7, #24
 801dc1c:	46bd      	mov	sp, r7
 801dc1e:	bd80      	pop	{r7, pc}
 801dc20:	08028258 	.word	0x08028258
 801dc24:	0802782c 	.word	0x0802782c
 801dc28:	08027b20 	.word	0x08027b20
 801dc2c:	080278ac 	.word	0x080278ac
 801dc30:	24008850 	.word	0x24008850

0801dc34 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801dc34:	b580      	push	{r7, lr}
 801dc36:	b086      	sub	sp, #24
 801dc38:	af00      	add	r7, sp, #0
 801dc3a:	60f8      	str	r0, [r7, #12]
 801dc3c:	60b9      	str	r1, [r7, #8]
 801dc3e:	4613      	mov	r3, r2
 801dc40:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d109      	bne.n	801dc5c <udp_connect+0x28>
 801dc48:	4b2c      	ldr	r3, [pc, #176]	; (801dcfc <udp_connect+0xc8>)
 801dc4a:	f240 4235 	movw	r2, #1077	; 0x435
 801dc4e:	492c      	ldr	r1, [pc, #176]	; (801dd00 <udp_connect+0xcc>)
 801dc50:	482c      	ldr	r0, [pc, #176]	; (801dd04 <udp_connect+0xd0>)
 801dc52:	f002 f9d7 	bl	8020004 <iprintf>
 801dc56:	f06f 030f 	mvn.w	r3, #15
 801dc5a:	e04b      	b.n	801dcf4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801dc5c:	68bb      	ldr	r3, [r7, #8]
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	d109      	bne.n	801dc76 <udp_connect+0x42>
 801dc62:	4b26      	ldr	r3, [pc, #152]	; (801dcfc <udp_connect+0xc8>)
 801dc64:	f240 4236 	movw	r2, #1078	; 0x436
 801dc68:	4927      	ldr	r1, [pc, #156]	; (801dd08 <udp_connect+0xd4>)
 801dc6a:	4826      	ldr	r0, [pc, #152]	; (801dd04 <udp_connect+0xd0>)
 801dc6c:	f002 f9ca 	bl	8020004 <iprintf>
 801dc70:	f06f 030f 	mvn.w	r3, #15
 801dc74:	e03e      	b.n	801dcf4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	8a5b      	ldrh	r3, [r3, #18]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d10f      	bne.n	801dc9e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801dc7e:	68f9      	ldr	r1, [r7, #12]
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	8a5b      	ldrh	r3, [r3, #18]
 801dc84:	461a      	mov	r2, r3
 801dc86:	68f8      	ldr	r0, [r7, #12]
 801dc88:	f7ff ff4c 	bl	801db24 <udp_bind>
 801dc8c:	4603      	mov	r3, r0
 801dc8e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801dc90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	d002      	beq.n	801dc9e <udp_connect+0x6a>
      return err;
 801dc98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801dc9c:	e02a      	b.n	801dcf4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801dc9e:	68bb      	ldr	r3, [r7, #8]
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d002      	beq.n	801dcaa <udp_connect+0x76>
 801dca4:	68bb      	ldr	r3, [r7, #8]
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	e000      	b.n	801dcac <udp_connect+0x78>
 801dcaa:	2300      	movs	r3, #0
 801dcac:	68fa      	ldr	r2, [r7, #12]
 801dcae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	88fa      	ldrh	r2, [r7, #6]
 801dcb4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	7c1b      	ldrb	r3, [r3, #16]
 801dcba:	f043 0304 	orr.w	r3, r3, #4
 801dcbe:	b2da      	uxtb	r2, r3
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801dcc4:	4b11      	ldr	r3, [pc, #68]	; (801dd0c <udp_connect+0xd8>)
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	617b      	str	r3, [r7, #20]
 801dcca:	e008      	b.n	801dcde <udp_connect+0xaa>
    if (pcb == ipcb) {
 801dccc:	68fa      	ldr	r2, [r7, #12]
 801dcce:	697b      	ldr	r3, [r7, #20]
 801dcd0:	429a      	cmp	r2, r3
 801dcd2:	d101      	bne.n	801dcd8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801dcd4:	2300      	movs	r3, #0
 801dcd6:	e00d      	b.n	801dcf4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801dcd8:	697b      	ldr	r3, [r7, #20]
 801dcda:	68db      	ldr	r3, [r3, #12]
 801dcdc:	617b      	str	r3, [r7, #20]
 801dcde:	697b      	ldr	r3, [r7, #20]
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d1f3      	bne.n	801dccc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801dce4:	4b09      	ldr	r3, [pc, #36]	; (801dd0c <udp_connect+0xd8>)
 801dce6:	681a      	ldr	r2, [r3, #0]
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801dcec:	4a07      	ldr	r2, [pc, #28]	; (801dd0c <udp_connect+0xd8>)
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801dcf2:	2300      	movs	r3, #0
}
 801dcf4:	4618      	mov	r0, r3
 801dcf6:	3718      	adds	r7, #24
 801dcf8:	46bd      	mov	sp, r7
 801dcfa:	bd80      	pop	{r7, pc}
 801dcfc:	0802782c 	.word	0x0802782c
 801dd00:	08027b38 	.word	0x08027b38
 801dd04:	080278ac 	.word	0x080278ac
 801dd08:	08027b54 	.word	0x08027b54
 801dd0c:	24008850 	.word	0x24008850

0801dd10 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801dd10:	b580      	push	{r7, lr}
 801dd12:	b082      	sub	sp, #8
 801dd14:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801dd16:	2000      	movs	r0, #0
 801dd18:	f7f8 f87c 	bl	8015e14 <memp_malloc>
 801dd1c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d007      	beq.n	801dd34 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801dd24:	2220      	movs	r2, #32
 801dd26:	2100      	movs	r1, #0
 801dd28:	6878      	ldr	r0, [r7, #4]
 801dd2a:	f001 fa71 	bl	801f210 <memset>
    pcb->ttl = UDP_TTL;
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	22ff      	movs	r2, #255	; 0xff
 801dd32:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801dd34:	687b      	ldr	r3, [r7, #4]
}
 801dd36:	4618      	mov	r0, r3
 801dd38:	3708      	adds	r7, #8
 801dd3a:	46bd      	mov	sp, r7
 801dd3c:	bd80      	pop	{r7, pc}
	...

0801dd40 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801dd40:	b480      	push	{r7}
 801dd42:	b085      	sub	sp, #20
 801dd44:	af00      	add	r7, sp, #0
 801dd46:	6078      	str	r0, [r7, #4]
 801dd48:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	d01e      	beq.n	801dd8e <udp_netif_ip_addr_changed+0x4e>
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d01a      	beq.n	801dd8e <udp_netif_ip_addr_changed+0x4e>
 801dd58:	683b      	ldr	r3, [r7, #0]
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	d017      	beq.n	801dd8e <udp_netif_ip_addr_changed+0x4e>
 801dd5e:	683b      	ldr	r3, [r7, #0]
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d013      	beq.n	801dd8e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801dd66:	4b0d      	ldr	r3, [pc, #52]	; (801dd9c <udp_netif_ip_addr_changed+0x5c>)
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	60fb      	str	r3, [r7, #12]
 801dd6c:	e00c      	b.n	801dd88 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801dd6e:	68fb      	ldr	r3, [r7, #12]
 801dd70:	681a      	ldr	r2, [r3, #0]
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	429a      	cmp	r2, r3
 801dd78:	d103      	bne.n	801dd82 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801dd7a:	683b      	ldr	r3, [r7, #0]
 801dd7c:	681a      	ldr	r2, [r3, #0]
 801dd7e:	68fb      	ldr	r3, [r7, #12]
 801dd80:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	68db      	ldr	r3, [r3, #12]
 801dd86:	60fb      	str	r3, [r7, #12]
 801dd88:	68fb      	ldr	r3, [r7, #12]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d1ef      	bne.n	801dd6e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801dd8e:	bf00      	nop
 801dd90:	3714      	adds	r7, #20
 801dd92:	46bd      	mov	sp, r7
 801dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd98:	4770      	bx	lr
 801dd9a:	bf00      	nop
 801dd9c:	24008850 	.word	0x24008850

0801dda0 <cis_Init>:
 * @brief  CIS init
 * @param  Void
 * @retval None
 */
void cis_Init(synthModeTypeDef mode)
{
 801dda0:	b580      	push	{r7, lr}
 801dda2:	b082      	sub	sp, #8
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	4603      	mov	r3, r0
 801dda8:	71fb      	strb	r3, [r7, #7]
	if (mode == IFFT_MODE)
 801ddaa:	79fb      	ldrb	r3, [r7, #7]
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	d10c      	bne.n	801ddca <cis_Init+0x2a>
	{
		CIS_EFFECTIVE_PIXELS_PER_LINE	=	CIS_ACTIVE_PIXELS_PER_LINE / CIS_IFFT_OVERSAMPLING_RATIO;
 801ddb0:	4b3b      	ldr	r3, [pc, #236]	; (801dea0 <cis_Init+0x100>)
 801ddb2:	2248      	movs	r2, #72	; 0x48
 801ddb4:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_START_OFFSET		=	(CIS_INACTIVE_AERA_STOP / CIS_IFFT_OVERSAMPLING_RATIO) - 1;
 801ddb6:	4b3b      	ldr	r3, [pc, #236]	; (801dea4 <cis_Init+0x104>)
 801ddb8:	2202      	movs	r2, #2
 801ddba:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_STOP_OFFSET		=	(CIS_PIXEL_AERA_STOP / CIS_IFFT_OVERSAMPLING_RATIO) - 1;
 801ddbc:	4b3a      	ldr	r3, [pc, #232]	; (801dea8 <cis_Init+0x108>)
 801ddbe:	224a      	movs	r2, #74	; 0x4a
 801ddc0:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	(CIS_END_CAPTURE / CIS_IFFT_OVERSAMPLING_RATIO) - 1;
 801ddc2:	4b3a      	ldr	r3, [pc, #232]	; (801deac <cis_Init+0x10c>)
 801ddc4:	224e      	movs	r2, #78	; 0x4e
 801ddc6:	801a      	strh	r2, [r3, #0]
 801ddc8:	e00b      	b.n	801dde2 <cis_Init+0x42>
	}
	else
	{
		CIS_EFFECTIVE_PIXELS_PER_LINE	=	CIS_ACTIVE_PIXELS_PER_LINE / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801ddca:	4b35      	ldr	r3, [pc, #212]	; (801dea0 <cis_Init+0x100>)
 801ddcc:	2248      	movs	r2, #72	; 0x48
 801ddce:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_START_OFFSET		=	(CIS_INACTIVE_AERA_STOP / CIS_IMGPLY_OVERSAMPLING_RATIO) - 1;
 801ddd0:	4b34      	ldr	r3, [pc, #208]	; (801dea4 <cis_Init+0x104>)
 801ddd2:	2202      	movs	r2, #2
 801ddd4:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_STOP_OFFSET		=	(CIS_PIXEL_AERA_STOP / CIS_IMGPLY_OVERSAMPLING_RATIO) -1;
 801ddd6:	4b34      	ldr	r3, [pc, #208]	; (801dea8 <cis_Init+0x108>)
 801ddd8:	224a      	movs	r2, #74	; 0x4a
 801ddda:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / CIS_IMGPLY_OVERSAMPLING_RATIO - 1;
 801dddc:	4b33      	ldr	r3, [pc, #204]	; (801deac <cis_Init+0x10c>)
 801ddde:	224e      	movs	r2, #78	; 0x4e
 801dde0:	801a      	strh	r2, [r3, #0]
//		Error_Handler();
//	}

//	memset(cisData, 0, CIS_ADC_BUFF_SIZE * 2 * sizeof(uint16_t*)); //clear image

	HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET); //SET : 200DPI   RESET : 400DPI
 801dde2:	2200      	movs	r2, #0
 801dde4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801dde8:	4831      	ldr	r0, [pc, #196]	; (801deb0 <cis_Init+0x110>)
 801ddea:	f7ec fa4f 	bl	800a28c <HAL_GPIO_WritePin>

	cis_ADC_Init(mode);
 801ddee:	79fb      	ldrb	r3, [r7, #7]
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f000 f995 	bl	801e120 <cis_ADC_Init>
	cis_TIM_SP_Init();
 801ddf6:	f000 f94b 	bl	801e090 <cis_TIM_SP_Init>
	cis_TIM_LED_R_Init();
 801ddfa:	f000 f96d 	bl	801e0d8 <cis_TIM_LED_R_Init>
	cis_TIM_LED_G_Init();
 801ddfe:	f000 f97d 	bl	801e0fc <cis_TIM_LED_G_Init>
	cis_TIM_LED_B_Init();
 801de02:	f000 f957 	bl	801e0b4 <cis_TIM_LED_B_Init>
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)cisData, CIS_ADC_BUFF_END_CAPTURE + 1) != HAL_OK)
 801de06:	4b29      	ldr	r3, [pc, #164]	; (801deac <cis_Init+0x10c>)
 801de08:	881b      	ldrh	r3, [r3, #0]
 801de0a:	3301      	adds	r3, #1
 801de0c:	461a      	mov	r2, r3
 801de0e:	4929      	ldr	r1, [pc, #164]	; (801deb4 <cis_Init+0x114>)
 801de10:	4829      	ldr	r0, [pc, #164]	; (801deb8 <cis_Init+0x118>)
 801de12:	f7e6 fe63 	bl	8004adc <HAL_ADC_Start_DMA>
 801de16:	4603      	mov	r3, r0
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d001      	beq.n	801de20 <cis_Init+0x80>
	{
		Error_Handler();
 801de1c:	f7e4 ff6c 	bl	8002cf8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&cisData[CIS_ADC_BUFF_END_CAPTURE], CIS_ADC_BUFF_END_CAPTURE + 1) != HAL_OK)
 801de20:	4b22      	ldr	r3, [pc, #136]	; (801deac <cis_Init+0x10c>)
 801de22:	881b      	ldrh	r3, [r3, #0]
 801de24:	005b      	lsls	r3, r3, #1
 801de26:	4a23      	ldr	r2, [pc, #140]	; (801deb4 <cis_Init+0x114>)
 801de28:	4413      	add	r3, r2
 801de2a:	4a20      	ldr	r2, [pc, #128]	; (801deac <cis_Init+0x10c>)
 801de2c:	8812      	ldrh	r2, [r2, #0]
 801de2e:	3201      	adds	r2, #1
 801de30:	4619      	mov	r1, r3
 801de32:	4822      	ldr	r0, [pc, #136]	; (801debc <cis_Init+0x11c>)
 801de34:	f7e6 fe52 	bl	8004adc <HAL_ADC_Start_DMA>
 801de38:	4603      	mov	r3, r0
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	d001      	beq.n	801de42 <cis_Init+0xa2>
	{
		Error_Handler();
 801de3e:	f7e4 ff5b 	bl	8002cf8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t *)&cisData[CIS_ADC_BUFF_END_CAPTURE * 2], CIS_ADC_BUFF_END_CAPTURE + 1) != HAL_OK)
 801de42:	4b1a      	ldr	r3, [pc, #104]	; (801deac <cis_Init+0x10c>)
 801de44:	881b      	ldrh	r3, [r3, #0]
 801de46:	005b      	lsls	r3, r3, #1
 801de48:	005b      	lsls	r3, r3, #1
 801de4a:	4a1a      	ldr	r2, [pc, #104]	; (801deb4 <cis_Init+0x114>)
 801de4c:	4413      	add	r3, r2
 801de4e:	4a17      	ldr	r2, [pc, #92]	; (801deac <cis_Init+0x10c>)
 801de50:	8812      	ldrh	r2, [r2, #0]
 801de52:	3201      	adds	r2, #1
 801de54:	4619      	mov	r1, r3
 801de56:	481a      	ldr	r0, [pc, #104]	; (801dec0 <cis_Init+0x120>)
 801de58:	f7e6 fe40 	bl	8004adc <HAL_ADC_Start_DMA>
 801de5c:	4603      	mov	r3, r0
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d001      	beq.n	801de66 <cis_Init+0xc6>
	{
		Error_Handler();
 801de62:	f7e4 ff49 	bl	8002cf8 <Error_Handler>
	}
	cis_TIM_CLK_Init();
 801de66:	f000 f8f9 	bl	801e05c <cis_TIM_CLK_Init>

	//Reset CLK counter
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 801de6a:	4b16      	ldr	r3, [pc, #88]	; (801dec4 <cis_Init+0x124>)
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	2200      	movs	r2, #0
 801de70:	625a      	str	r2, [r3, #36]	; 0x24

	//Reset SP counter
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 801de72:	4b15      	ldr	r3, [pc, #84]	; (801dec8 <cis_Init+0x128>)
 801de74:	681b      	ldr	r3, [r3, #0]
 801de76:	2200      	movs	r2, #0
 801de78:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef CIS_BW
	//Set BW phase shift
	__HAL_TIM_SET_COUNTER(&htim5, (CIS_END_CAPTURE) - CIS_LED_ON);			//B
 801de7a:	4b14      	ldr	r3, [pc, #80]	; (801decc <cis_Init+0x12c>)
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	f240 42ec 	movw	r2, #1260	; 0x4ec
 801de82:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE) - CIS_LED_ON);			//G
 801de84:	4b12      	ldr	r3, [pc, #72]	; (801ded0 <cis_Init+0x130>)
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	f240 42ec 	movw	r2, #1260	; 0x4ec
 801de8c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
 801de8e:	4b11      	ldr	r3, [pc, #68]	; (801ded4 <cis_Init+0x134>)
 801de90:	681b      	ldr	r3, [r3, #0]
 801de92:	f240 42ec 	movw	r2, #1260	; 0x4ec
 801de96:	625a      	str	r2, [r3, #36]	; 0x24
	//Set RGB phase shift
	__HAL_TIM_SET_COUNTER(&htim5, (CIS_END_CAPTURE * 2) - CIS_LED_ON);		//B
	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE * 3) - CIS_LED_ON);		//G
	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
#endif
}
 801de98:	bf00      	nop
 801de9a:	3708      	adds	r7, #8
 801de9c:	46bd      	mov	sp, r7
 801de9e:	bd80      	pop	{r7, pc}
 801dea0:	24000030 	.word	0x24000030
 801dea4:	24000032 	.word	0x24000032
 801dea8:	24000034 	.word	0x24000034
 801deac:	24000036 	.word	0x24000036
 801deb0:	58020000 	.word	0x58020000
 801deb4:	24004ea4 	.word	0x24004ea4
 801deb8:	24005168 	.word	0x24005168
 801debc:	2400508c 	.word	0x2400508c
 801dec0:	240051cc 	.word	0x240051cc
 801dec4:	2400566c 	.word	0x2400566c
 801dec8:	2400553c 	.word	0x2400553c
 801decc:	240055d4 	.word	0x240055d4
 801ded0:	24005588 	.word	0x24005588
 801ded4:	24005620 	.word	0x24005620

0801ded8 <cis_GetEffectivePixelNb>:
 * @brief  GetEffectivePixelNb
 * @param  Void
 * @retval Nuber of effective pixels
 */
__inline uint16_t cis_GetEffectivePixelNb(void)
{
 801ded8:	b480      	push	{r7}
 801deda:	af00      	add	r7, sp, #0
	return CIS_EFFECTIVE_PIXELS;
 801dedc:	4b03      	ldr	r3, [pc, #12]	; (801deec <cis_GetEffectivePixelNb+0x14>)
 801dede:	881b      	ldrh	r3, [r3, #0]
}
 801dee0:	4618      	mov	r0, r3
 801dee2:	46bd      	mov	sp, r7
 801dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dee8:	4770      	bx	lr
 801deea:	bf00      	nop
 801deec:	2400002e 	.word	0x2400002e

0801def0 <cis_ImageProcessBW>:
 * @brief  Manages Image process.
 * @param  None
 * @retval Image error
 */
void cis_ImageProcessBW(uint16_t *cis_buff)
{
 801def0:	b580      	push	{r7, lr}
 801def2:	b08c      	sub	sp, #48	; 0x30
 801def4:	af00      	add	r7, sp, #0
 801def6:	6078      	str	r0, [r7, #4]
//	for (int32_t line = (CIS_ADC_OUT_LINES); --line >= 0;)
//	{
	int32_t line = 0;
 801def8:	2300      	movs	r3, #0
 801defa:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t offset = (CIS_ADC_BUFF_END_CAPTURE * line) / 2;
 801defc:	4b51      	ldr	r3, [pc, #324]	; (801e044 <cis_ImageProcessBW+0x154>)
 801defe:	881b      	ldrh	r3, [r3, #0]
 801df00:	461a      	mov	r2, r3
 801df02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df04:	fb03 f302 	mul.w	r3, r3, r2
 801df08:	2b00      	cmp	r3, #0
 801df0a:	da00      	bge.n	801df0e <cis_ImageProcessBW+0x1e>
 801df0c:	3301      	adds	r3, #1
 801df0e:	105b      	asrs	r3, r3, #1
 801df10:	62bb      	str	r3, [r7, #40]	; 0x28

		/* 1st half buffer played; so fill it and continue playing from bottom*/
		if(cisBufferState[line] == CIS_BUFFER_OFFSET_HALF)
 801df12:	4a4d      	ldr	r2, [pc, #308]	; (801e048 <cis_ImageProcessBW+0x158>)
 801df14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df16:	4413      	add	r3, r2
 801df18:	781b      	ldrb	r3, [r3, #0]
 801df1a:	2b01      	cmp	r3, #1
 801df1c:	d13e      	bne.n	801df9c <cis_ImageProcessBW+0xac>
		{
			cisBufferState[line] = CIS_BUFFER_OFFSET_NONE;
 801df1e:	4a4a      	ldr	r2, [pc, #296]	; (801e048 <cis_ImageProcessBW+0x158>)
 801df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df22:	4413      	add	r3, r2
 801df24:	2200      	movs	r2, #0
 801df26:	701a      	strb	r2, [r3, #0]
			/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer */
			SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[offset] , CIS_ADC_BUFF_END_CAPTURE);
 801df28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df2a:	005b      	lsls	r3, r3, #1
 801df2c:	4a47      	ldr	r2, [pc, #284]	; (801e04c <cis_ImageProcessBW+0x15c>)
 801df2e:	4413      	add	r3, r2
 801df30:	4a44      	ldr	r2, [pc, #272]	; (801e044 <cis_ImageProcessBW+0x154>)
 801df32:	8812      	ldrh	r2, [r2, #0]
 801df34:	627b      	str	r3, [r7, #36]	; 0x24
 801df36:	623a      	str	r2, [r7, #32]
    if ( dsize > 0 ) { 
 801df38:	6a3b      	ldr	r3, [r7, #32]
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	dd1d      	ble.n	801df7a <cis_ImageProcessBW+0x8a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df40:	f003 021f 	and.w	r2, r3, #31
 801df44:	6a3b      	ldr	r3, [r7, #32]
 801df46:	4413      	add	r3, r2
 801df48:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801df4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 801df4e:	f3bf 8f4f 	dsb	sy
}
 801df52:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801df54:	4a3e      	ldr	r2, [pc, #248]	; (801e050 <cis_ImageProcessBW+0x160>)
 801df56:	69bb      	ldr	r3, [r7, #24]
 801df58:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801df5c:	69bb      	ldr	r3, [r7, #24]
 801df5e:	3320      	adds	r3, #32
 801df60:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801df62:	69fb      	ldr	r3, [r7, #28]
 801df64:	3b20      	subs	r3, #32
 801df66:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 801df68:	69fb      	ldr	r3, [r7, #28]
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	dcf2      	bgt.n	801df54 <cis_ImageProcessBW+0x64>
  __ASM volatile ("dsb 0xF":::"memory");
 801df6e:	f3bf 8f4f 	dsb	sy
}
 801df72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801df74:	f3bf 8f6f 	isb	sy
}
 801df78:	bf00      	nop
}
 801df7a:	bf00      	nop
			arm_copy_q15((int16_t*)&cisData[offset + CIS_ADC_BUFF_START_OFFSET], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_PER_LINE / 2);
 801df7c:	4b35      	ldr	r3, [pc, #212]	; (801e054 <cis_ImageProcessBW+0x164>)
 801df7e:	881b      	ldrh	r3, [r3, #0]
 801df80:	461a      	mov	r2, r3
 801df82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801df84:	4413      	add	r3, r2
 801df86:	005b      	lsls	r3, r3, #1
 801df88:	4a30      	ldr	r2, [pc, #192]	; (801e04c <cis_ImageProcessBW+0x15c>)
 801df8a:	1898      	adds	r0, r3, r2
 801df8c:	4b32      	ldr	r3, [pc, #200]	; (801e058 <cis_ImageProcessBW+0x168>)
 801df8e:	881b      	ldrh	r3, [r3, #0]
 801df90:	085b      	lsrs	r3, r3, #1
 801df92:	b29b      	uxth	r3, r3
 801df94:	461a      	mov	r2, r3
 801df96:	6879      	ldr	r1, [r7, #4]
 801df98:	f7e5 ff4d 	bl	8003e36 <arm_copy_q15>

//			cis_ImageFilterBW(cis_buff);
		}

		/* 2nd half buffer played; so fill it and continue playing from top */
		if(cisBufferState[line] == CIS_BUFFER_OFFSET_FULL)
 801df9c:	4a2a      	ldr	r2, [pc, #168]	; (801e048 <cis_ImageProcessBW+0x158>)
 801df9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dfa0:	4413      	add	r3, r2
 801dfa2:	781b      	ldrb	r3, [r3, #0]
 801dfa4:	2b02      	cmp	r3, #2
 801dfa6:	d149      	bne.n	801e03c <cis_ImageProcessBW+0x14c>
		{
			cisBufferState[line] = CIS_BUFFER_OFFSET_NONE;
 801dfa8:	4a27      	ldr	r2, [pc, #156]	; (801e048 <cis_ImageProcessBW+0x158>)
 801dfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dfac:	4413      	add	r3, r2
 801dfae:	2200      	movs	r2, #0
 801dfb0:	701a      	strb	r2, [r3, #0]
			/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer */
			SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[offset + (CIS_ADC_BUFF_END_CAPTURE / 2)], CIS_ADC_BUFF_END_CAPTURE);
 801dfb2:	4b24      	ldr	r3, [pc, #144]	; (801e044 <cis_ImageProcessBW+0x154>)
 801dfb4:	881b      	ldrh	r3, [r3, #0]
 801dfb6:	085b      	lsrs	r3, r3, #1
 801dfb8:	b29b      	uxth	r3, r3
 801dfba:	461a      	mov	r2, r3
 801dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfbe:	4413      	add	r3, r2
 801dfc0:	005b      	lsls	r3, r3, #1
 801dfc2:	4a22      	ldr	r2, [pc, #136]	; (801e04c <cis_ImageProcessBW+0x15c>)
 801dfc4:	4413      	add	r3, r2
 801dfc6:	4a1f      	ldr	r2, [pc, #124]	; (801e044 <cis_ImageProcessBW+0x154>)
 801dfc8:	8812      	ldrh	r2, [r2, #0]
 801dfca:	617b      	str	r3, [r7, #20]
 801dfcc:	613a      	str	r2, [r7, #16]
    if ( dsize > 0 ) { 
 801dfce:	693b      	ldr	r3, [r7, #16]
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	dd1d      	ble.n	801e010 <cis_ImageProcessBW+0x120>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801dfd4:	697b      	ldr	r3, [r7, #20]
 801dfd6:	f003 021f 	and.w	r2, r3, #31
 801dfda:	693b      	ldr	r3, [r7, #16]
 801dfdc:	4413      	add	r3, r2
 801dfde:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801dfe0:	697b      	ldr	r3, [r7, #20]
 801dfe2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 801dfe4:	f3bf 8f4f 	dsb	sy
}
 801dfe8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801dfea:	4a19      	ldr	r2, [pc, #100]	; (801e050 <cis_ImageProcessBW+0x160>)
 801dfec:	68bb      	ldr	r3, [r7, #8]
 801dfee:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801dff2:	68bb      	ldr	r3, [r7, #8]
 801dff4:	3320      	adds	r3, #32
 801dff6:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	3b20      	subs	r3, #32
 801dffc:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 801dffe:	68fb      	ldr	r3, [r7, #12]
 801e000:	2b00      	cmp	r3, #0
 801e002:	dcf2      	bgt.n	801dfea <cis_ImageProcessBW+0xfa>
  __ASM volatile ("dsb 0xF":::"memory");
 801e004:	f3bf 8f4f 	dsb	sy
}
 801e008:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801e00a:	f3bf 8f6f 	isb	sy
}
 801e00e:	bf00      	nop
}
 801e010:	bf00      	nop
			arm_copy_q15((int16_t*)&cisData[offset + CIS_ADC_BUFF_START_OFFSET + (CIS_ADC_BUFF_END_CAPTURE / 2)], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_PER_LINE / 2);
 801e012:	4b10      	ldr	r3, [pc, #64]	; (801e054 <cis_ImageProcessBW+0x164>)
 801e014:	881b      	ldrh	r3, [r3, #0]
 801e016:	461a      	mov	r2, r3
 801e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e01a:	4413      	add	r3, r2
 801e01c:	4a09      	ldr	r2, [pc, #36]	; (801e044 <cis_ImageProcessBW+0x154>)
 801e01e:	8812      	ldrh	r2, [r2, #0]
 801e020:	0852      	lsrs	r2, r2, #1
 801e022:	b292      	uxth	r2, r2
 801e024:	4413      	add	r3, r2
 801e026:	005b      	lsls	r3, r3, #1
 801e028:	4a08      	ldr	r2, [pc, #32]	; (801e04c <cis_ImageProcessBW+0x15c>)
 801e02a:	1898      	adds	r0, r3, r2
 801e02c:	4b0a      	ldr	r3, [pc, #40]	; (801e058 <cis_ImageProcessBW+0x168>)
 801e02e:	881b      	ldrh	r3, [r3, #0]
 801e030:	085b      	lsrs	r3, r3, #1
 801e032:	b29b      	uxth	r3, r3
 801e034:	461a      	mov	r2, r3
 801e036:	6879      	ldr	r1, [r7, #4]
 801e038:	f7e5 fefd 	bl	8003e36 <arm_copy_q15>

//			cis_ImageFilterBW(cis_buff);
		}
//	}
}
 801e03c:	bf00      	nop
 801e03e:	3730      	adds	r7, #48	; 0x30
 801e040:	46bd      	mov	sp, r7
 801e042:	bd80      	pop	{r7, pc}
 801e044:	24000036 	.word	0x24000036
 801e048:	24005080 	.word	0x24005080
 801e04c:	24004ea4 	.word	0x24004ea4
 801e050:	e000ed00 	.word	0xe000ed00
 801e054:	24000032 	.word	0x24000032
 801e058:	24000030 	.word	0x24000030

0801e05c <cis_TIM_CLK_Init>:
 * @brief  Init CIS clock Frequency
 * @param  sampling_frequency
 * @retval None
 */
void cis_TIM_CLK_Init()
{
 801e05c:	b580      	push	{r7, lr}
 801e05e:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 801e060:	f7e5 f9c0 	bl	80033e4 <MX_TIM1_Init>

	/* Start ADC Timer #######################################*/
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 801e064:	2100      	movs	r1, #0
 801e066:	4809      	ldr	r0, [pc, #36]	; (801e08c <cis_TIM_CLK_Init+0x30>)
 801e068:	f7f1 fb6e 	bl	800f748 <HAL_TIM_PWM_Start>
 801e06c:	4603      	mov	r3, r0
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d001      	beq.n	801e076 <cis_TIM_CLK_Init+0x1a>
	{
		Error_Handler();
 801e072:	f7e4 fe41 	bl	8002cf8 <Error_Handler>
	}

	/* Start CLK generation ##################################*/
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 801e076:	2104      	movs	r1, #4
 801e078:	4804      	ldr	r0, [pc, #16]	; (801e08c <cis_TIM_CLK_Init+0x30>)
 801e07a:	f7f1 fb65 	bl	800f748 <HAL_TIM_PWM_Start>
 801e07e:	4603      	mov	r3, r0
 801e080:	2b00      	cmp	r3, #0
 801e082:	d001      	beq.n	801e088 <cis_TIM_CLK_Init+0x2c>
	{
		Error_Handler();
 801e084:	f7e4 fe38 	bl	8002cf8 <Error_Handler>
	}
}
 801e088:	bf00      	nop
 801e08a:	bd80      	pop	{r7, pc}
 801e08c:	2400566c 	.word	0x2400566c

0801e090 <cis_TIM_SP_Init>:
 * @brief  CIS start pulse timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_SP_Init()
{
 801e090:	b580      	push	{r7, lr}
 801e092:	af00      	add	r7, sp, #0
	MX_TIM8_Init();
 801e094:	f7e5 fbd8 	bl	8003848 <MX_TIM8_Init>

	/* Start SP generation ##################################*/
	if(HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3) != HAL_OK)
 801e098:	2108      	movs	r1, #8
 801e09a:	4805      	ldr	r0, [pc, #20]	; (801e0b0 <cis_TIM_SP_Init+0x20>)
 801e09c:	f7f1 fb54 	bl	800f748 <HAL_TIM_PWM_Start>
 801e0a0:	4603      	mov	r3, r0
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d001      	beq.n	801e0aa <cis_TIM_SP_Init+0x1a>
	{
		Error_Handler();
 801e0a6:	f7e4 fe27 	bl	8002cf8 <Error_Handler>
	}
}
 801e0aa:	bf00      	nop
 801e0ac:	bd80      	pop	{r7, pc}
 801e0ae:	bf00      	nop
 801e0b0:	2400553c 	.word	0x2400553c

0801e0b4 <cis_TIM_LED_B_Init>:
 * @brief  CIS red led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_B_Init()
{
 801e0b4:	b580      	push	{r7, lr}
 801e0b6:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 801e0b8:	f7e5 fa46 	bl	8003548 <MX_TIM3_Init>

	/* Start LED R generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 801e0bc:	2100      	movs	r1, #0
 801e0be:	4805      	ldr	r0, [pc, #20]	; (801e0d4 <cis_TIM_LED_B_Init+0x20>)
 801e0c0:	f7f1 fb42 	bl	800f748 <HAL_TIM_PWM_Start>
 801e0c4:	4603      	mov	r3, r0
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d001      	beq.n	801e0ce <cis_TIM_LED_B_Init+0x1a>
	{
		Error_Handler();
 801e0ca:	f7e4 fe15 	bl	8002cf8 <Error_Handler>
	}
}
 801e0ce:	bf00      	nop
 801e0d0:	bd80      	pop	{r7, pc}
 801e0d2:	bf00      	nop
 801e0d4:	24005620 	.word	0x24005620

0801e0d8 <cis_TIM_LED_R_Init>:
 * @brief  CIS green led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_R_Init()
{
 801e0d8:	b580      	push	{r7, lr}
 801e0da:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 801e0dc:	f7e5 fab4 	bl	8003648 <MX_TIM4_Init>

	/* Start LED G generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 801e0e0:	2104      	movs	r1, #4
 801e0e2:	4805      	ldr	r0, [pc, #20]	; (801e0f8 <cis_TIM_LED_R_Init+0x20>)
 801e0e4:	f7f1 fb30 	bl	800f748 <HAL_TIM_PWM_Start>
 801e0e8:	4603      	mov	r3, r0
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	d001      	beq.n	801e0f2 <cis_TIM_LED_R_Init+0x1a>
	{
		Error_Handler();
 801e0ee:	f7e4 fe03 	bl	8002cf8 <Error_Handler>
	}
}
 801e0f2:	bf00      	nop
 801e0f4:	bd80      	pop	{r7, pc}
 801e0f6:	bf00      	nop
 801e0f8:	24005588 	.word	0x24005588

0801e0fc <cis_TIM_LED_G_Init>:
 * @brief  CIS blue led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_G_Init()
{
 801e0fc:	b580      	push	{r7, lr}
 801e0fe:	af00      	add	r7, sp, #0
	MX_TIM5_Init();
 801e100:	f7e5 fb22 	bl	8003748 <MX_TIM5_Init>

	/* Start LED B generation ###############################*/
	if(HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3) != HAL_OK)
 801e104:	2108      	movs	r1, #8
 801e106:	4805      	ldr	r0, [pc, #20]	; (801e11c <cis_TIM_LED_G_Init+0x20>)
 801e108:	f7f1 fb1e 	bl	800f748 <HAL_TIM_PWM_Start>
 801e10c:	4603      	mov	r3, r0
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d001      	beq.n	801e116 <cis_TIM_LED_G_Init+0x1a>
	{
		Error_Handler();
 801e112:	f7e4 fdf1 	bl	8002cf8 <Error_Handler>
	}
}
 801e116:	bf00      	nop
 801e118:	bd80      	pop	{r7, pc}
 801e11a:	bf00      	nop
 801e11c:	240055d4 	.word	0x240055d4

0801e120 <cis_ADC_Init>:
 * @brief  CIS adc init
 * @param  Void
 * @retval None
 */
void cis_ADC_Init(synthModeTypeDef mode)
{
 801e120:	b580      	push	{r7, lr}
 801e122:	b082      	sub	sp, #8
 801e124:	af00      	add	r7, sp, #0
 801e126:	4603      	mov	r3, r0
 801e128:	71fb      	strb	r3, [r7, #7]
	MX_ADC1_Init();
 801e12a:	f7e2 fe89 	bl	8000e40 <MX_ADC1_Init>
	MX_ADC2_Init();
 801e12e:	f7e2 ff11 	bl	8000f54 <MX_ADC2_Init>
	MX_ADC3_Init();
 801e132:	f7e2 ff87 	bl	8001044 <MX_ADC3_Init>

	/* ### Start calibration ############################################ */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801e136:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801e13a:	2100      	movs	r1, #0
 801e13c:	4810      	ldr	r0, [pc, #64]	; (801e180 <cis_ADC_Init+0x60>)
 801e13e:	f7e7 fbcd 	bl	80058dc <HAL_ADCEx_Calibration_Start>
 801e142:	4603      	mov	r3, r0
 801e144:	2b00      	cmp	r3, #0
 801e146:	d001      	beq.n	801e14c <cis_ADC_Init+0x2c>
	{
		Error_Handler();
 801e148:	f7e4 fdd6 	bl	8002cf8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801e14c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801e150:	2100      	movs	r1, #0
 801e152:	480c      	ldr	r0, [pc, #48]	; (801e184 <cis_ADC_Init+0x64>)
 801e154:	f7e7 fbc2 	bl	80058dc <HAL_ADCEx_Calibration_Start>
 801e158:	4603      	mov	r3, r0
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d001      	beq.n	801e162 <cis_ADC_Init+0x42>
	{
		Error_Handler();
 801e15e:	f7e4 fdcb 	bl	8002cf8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 801e162:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801e166:	2100      	movs	r1, #0
 801e168:	4807      	ldr	r0, [pc, #28]	; (801e188 <cis_ADC_Init+0x68>)
 801e16a:	f7e7 fbb7 	bl	80058dc <HAL_ADCEx_Calibration_Start>
 801e16e:	4603      	mov	r3, r0
 801e170:	2b00      	cmp	r3, #0
 801e172:	d001      	beq.n	801e178 <cis_ADC_Init+0x58>
	{
		Error_Handler();
 801e174:	f7e4 fdc0 	bl	8002cf8 <Error_Handler>
	}
}
 801e178:	bf00      	nop
 801e17a:	3708      	adds	r7, #8
 801e17c:	46bd      	mov	sp, r7
 801e17e:	bd80      	pop	{r7, pc}
 801e180:	24005168 	.word	0x24005168
 801e184:	2400508c 	.word	0x2400508c
 801e188:	240051cc 	.word	0x240051cc

0801e18c <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non-blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801e18c:	b480      	push	{r7}
 801e18e:	b083      	sub	sp, #12
 801e190:	af00      	add	r7, sp, #0
 801e192:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	4a0e      	ldr	r2, [pc, #56]	; (801e1d4 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 801e19a:	4293      	cmp	r3, r2
 801e19c:	d103      	bne.n	801e1a6 <HAL_ADC_ConvHalfCpltCallback+0x1a>
	{
		cisBufferState[0] = CIS_BUFFER_OFFSET_HALF;
 801e19e:	4b0e      	ldr	r3, [pc, #56]	; (801e1d8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 801e1a0:	2201      	movs	r2, #1
 801e1a2:	701a      	strb	r2, [r3, #0]
		return;
 801e1a4:	e010      	b.n	801e1c8 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	}
	if (hadc->Instance == ADC2)
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	4a0c      	ldr	r2, [pc, #48]	; (801e1dc <HAL_ADC_ConvHalfCpltCallback+0x50>)
 801e1ac:	4293      	cmp	r3, r2
 801e1ae:	d103      	bne.n	801e1b8 <HAL_ADC_ConvHalfCpltCallback+0x2c>
	{
		cisBufferState[1] = CIS_BUFFER_OFFSET_HALF;
 801e1b0:	4b09      	ldr	r3, [pc, #36]	; (801e1d8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 801e1b2:	2201      	movs	r2, #1
 801e1b4:	705a      	strb	r2, [r3, #1]
		return;
 801e1b6:	e007      	b.n	801e1c8 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	}
	if (hadc->Instance == ADC3)
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	4a08      	ldr	r2, [pc, #32]	; (801e1e0 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 801e1be:	4293      	cmp	r3, r2
 801e1c0:	d102      	bne.n	801e1c8 <HAL_ADC_ConvHalfCpltCallback+0x3c>
	{
		cisBufferState[2] = CIS_BUFFER_OFFSET_HALF;
 801e1c2:	4b05      	ldr	r3, [pc, #20]	; (801e1d8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 801e1c4:	2201      	movs	r2, #1
 801e1c6:	709a      	strb	r2, [r3, #2]
	}
}
 801e1c8:	370c      	adds	r7, #12
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1d0:	4770      	bx	lr
 801e1d2:	bf00      	nop
 801e1d4:	40022000 	.word	0x40022000
 801e1d8:	24005080 	.word	0x24005080
 801e1dc:	40022100 	.word	0x40022100
 801e1e0:	58026000 	.word	0x58026000

0801e1e4 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801e1e4:	b480      	push	{r7}
 801e1e6:	b083      	sub	sp, #12
 801e1e8:	af00      	add	r7, sp, #0
 801e1ea:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	4a0e      	ldr	r2, [pc, #56]	; (801e22c <HAL_ADC_ConvCpltCallback+0x48>)
 801e1f2:	4293      	cmp	r3, r2
 801e1f4:	d103      	bne.n	801e1fe <HAL_ADC_ConvCpltCallback+0x1a>
	{
		cisBufferState[0] = CIS_BUFFER_OFFSET_FULL;
 801e1f6:	4b0e      	ldr	r3, [pc, #56]	; (801e230 <HAL_ADC_ConvCpltCallback+0x4c>)
 801e1f8:	2202      	movs	r2, #2
 801e1fa:	701a      	strb	r2, [r3, #0]
		return;
 801e1fc:	e010      	b.n	801e220 <HAL_ADC_ConvCpltCallback+0x3c>
	}
	if (hadc->Instance == ADC2)
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	4a0c      	ldr	r2, [pc, #48]	; (801e234 <HAL_ADC_ConvCpltCallback+0x50>)
 801e204:	4293      	cmp	r3, r2
 801e206:	d103      	bne.n	801e210 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		cisBufferState[1] = CIS_BUFFER_OFFSET_FULL;
 801e208:	4b09      	ldr	r3, [pc, #36]	; (801e230 <HAL_ADC_ConvCpltCallback+0x4c>)
 801e20a:	2202      	movs	r2, #2
 801e20c:	705a      	strb	r2, [r3, #1]
		return;
 801e20e:	e007      	b.n	801e220 <HAL_ADC_ConvCpltCallback+0x3c>
	}
	if (hadc->Instance == ADC3)
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	4a08      	ldr	r2, [pc, #32]	; (801e238 <HAL_ADC_ConvCpltCallback+0x54>)
 801e216:	4293      	cmp	r3, r2
 801e218:	d102      	bne.n	801e220 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		cisBufferState[2] = CIS_BUFFER_OFFSET_FULL;
 801e21a:	4b05      	ldr	r3, [pc, #20]	; (801e230 <HAL_ADC_ConvCpltCallback+0x4c>)
 801e21c:	2202      	movs	r2, #2
 801e21e:	709a      	strb	r2, [r3, #2]
	}
}
 801e220:	370c      	adds	r7, #12
 801e222:	46bd      	mov	sp, r7
 801e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e228:	4770      	bx	lr
 801e22a:	bf00      	nop
 801e22c:	40022000 	.word	0x40022000
 801e230:	24005080 	.word	0x24005080
 801e234:	40022100 	.word	0x40022100
 801e238:	58026000 	.word	0x58026000

0801e23c <icm20602_write>:

/* Private user code ---------------------------------------------------------*/

//Writes a register byte to the driver
uint8_t icm20602_write(uint8_t reg, uint8_t *data, uint16_t len)
{
 801e23c:	b580      	push	{r7, lr}
 801e23e:	b084      	sub	sp, #16
 801e240:	af00      	add	r7, sp, #0
 801e242:	4603      	mov	r3, r0
 801e244:	6039      	str	r1, [r7, #0]
 801e246:	71fb      	strb	r3, [r7, #7]
 801e248:	4613      	mov	r3, r2
 801e24a:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801e24c:	2300      	movs	r3, #0
 801e24e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801e250:	2200      	movs	r2, #0
 801e252:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e256:	4819      	ldr	r0, [pc, #100]	; (801e2bc <icm20602_write+0x80>)
 801e258:	f7ec f818 	bl	800a28c <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801e25c:	bf00      	nop
 801e25e:	4818      	ldr	r0, [pc, #96]	; (801e2c0 <icm20602_write+0x84>)
 801e260:	f7f1 f838 	bl	800f2d4 <HAL_SPI_GetState>
 801e264:	4603      	mov	r3, r0
 801e266:	2b01      	cmp	r3, #1
 801e268:	d1f9      	bne.n	801e25e <icm20602_write+0x22>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801e26a:	1df9      	adds	r1, r7, #7
 801e26c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e270:	2201      	movs	r2, #1
 801e272:	4813      	ldr	r0, [pc, #76]	; (801e2c0 <icm20602_write+0x84>)
 801e274:	f7f0 f95e 	bl	800e534 <HAL_SPI_Transmit>
 801e278:	4603      	mov	r3, r0
 801e27a:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801e27c:	bf00      	nop
 801e27e:	4810      	ldr	r0, [pc, #64]	; (801e2c0 <icm20602_write+0x84>)
 801e280:	f7f1 f828 	bl	800f2d4 <HAL_SPI_GetState>
 801e284:	4603      	mov	r3, r0
 801e286:	2b01      	cmp	r3, #1
 801e288:	d1f9      	bne.n	801e27e <icm20602_write+0x42>
	rv += HAL_SPI_Transmit(&hspi2, data, len, 1000);
 801e28a:	88ba      	ldrh	r2, [r7, #4]
 801e28c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e290:	6839      	ldr	r1, [r7, #0]
 801e292:	480b      	ldr	r0, [pc, #44]	; (801e2c0 <icm20602_write+0x84>)
 801e294:	f7f0 f94e 	bl	800e534 <HAL_SPI_Transmit>
 801e298:	4603      	mov	r3, r0
 801e29a:	461a      	mov	r2, r3
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	4413      	add	r3, r2
 801e2a0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801e2a2:	2201      	movs	r2, #1
 801e2a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e2a8:	4804      	ldr	r0, [pc, #16]	; (801e2bc <icm20602_write+0x80>)
 801e2aa:	f7eb ffef 	bl	800a28c <HAL_GPIO_WritePin>
	return rv;
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	b2db      	uxtb	r3, r3
}
 801e2b2:	4618      	mov	r0, r3
 801e2b4:	3710      	adds	r7, #16
 801e2b6:	46bd      	mov	sp, r7
 801e2b8:	bd80      	pop	{r7, pc}
 801e2ba:	bf00      	nop
 801e2bc:	58020400 	.word	0x58020400
 801e2c0:	240054b4 	.word	0x240054b4

0801e2c4 <icm20602_read>:

//Read a register byte to the driver
uint8_t icm20602_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 801e2c4:	b580      	push	{r7, lr}
 801e2c6:	b084      	sub	sp, #16
 801e2c8:	af00      	add	r7, sp, #0
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	6039      	str	r1, [r7, #0]
 801e2ce:	71fb      	strb	r3, [r7, #7]
 801e2d0:	4613      	mov	r3, r2
 801e2d2:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801e2d4:	2300      	movs	r3, #0
 801e2d6:	60fb      	str	r3, [r7, #12]
	reg |= 0b10000000;
 801e2d8:	79fb      	ldrb	r3, [r7, #7]
 801e2da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801e2de:	b2db      	uxtb	r3, r3
 801e2e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801e2e2:	2200      	movs	r2, #0
 801e2e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e2e8:	4818      	ldr	r0, [pc, #96]	; (801e34c <icm20602_read+0x88>)
 801e2ea:	f7eb ffcf 	bl	800a28c <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801e2ee:	bf00      	nop
 801e2f0:	4817      	ldr	r0, [pc, #92]	; (801e350 <icm20602_read+0x8c>)
 801e2f2:	f7f0 ffef 	bl	800f2d4 <HAL_SPI_GetState>
 801e2f6:	4603      	mov	r3, r0
 801e2f8:	2b01      	cmp	r3, #1
 801e2fa:	d1f9      	bne.n	801e2f0 <icm20602_read+0x2c>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801e2fc:	1df9      	adds	r1, r7, #7
 801e2fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e302:	2201      	movs	r2, #1
 801e304:	4812      	ldr	r0, [pc, #72]	; (801e350 <icm20602_read+0x8c>)
 801e306:	f7f0 f915 	bl	800e534 <HAL_SPI_Transmit>
 801e30a:	4603      	mov	r3, r0
 801e30c:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801e30e:	bf00      	nop
 801e310:	480f      	ldr	r0, [pc, #60]	; (801e350 <icm20602_read+0x8c>)
 801e312:	f7f0 ffdf 	bl	800f2d4 <HAL_SPI_GetState>
 801e316:	4603      	mov	r3, r0
 801e318:	2b01      	cmp	r3, #1
 801e31a:	d1f9      	bne.n	801e310 <icm20602_read+0x4c>
	rv += HAL_SPI_Receive(&hspi2, data, len, 1000);
 801e31c:	88ba      	ldrh	r2, [r7, #4]
 801e31e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e322:	6839      	ldr	r1, [r7, #0]
 801e324:	480a      	ldr	r0, [pc, #40]	; (801e350 <icm20602_read+0x8c>)
 801e326:	f7f0 faf7 	bl	800e918 <HAL_SPI_Receive>
 801e32a:	4603      	mov	r3, r0
 801e32c:	461a      	mov	r2, r3
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	4413      	add	r3, r2
 801e332:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801e334:	2201      	movs	r2, #1
 801e336:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e33a:	4804      	ldr	r0, [pc, #16]	; (801e34c <icm20602_read+0x88>)
 801e33c:	f7eb ffa6 	bl	800a28c <HAL_GPIO_WritePin>
	return rv;
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	b2db      	uxtb	r3, r3
}
 801e344:	4618      	mov	r0, r3
 801e346:	3710      	adds	r7, #16
 801e348:	46bd      	mov	sp, r7
 801e34a:	bd80      	pop	{r7, pc}
 801e34c:	58020400 	.word	0x58020400
 801e350:	240054b4 	.word	0x240054b4

0801e354 <icm20602_init>:
}

/***** Global Functions *****/

int8_t icm20602_init(void)
{
 801e354:	b580      	push	{r7, lr}
 801e356:	b082      	sub	sp, #8
 801e358:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 801e35a:	2300      	movs	r3, #0
 801e35c:	71bb      	strb	r3, [r7, #6]
	int8_t r = 0;
 801e35e:	2300      	movs	r3, #0
 801e360:	71fb      	strb	r3, [r7, #7]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = 0x80;
 801e362:	2380      	movs	r3, #128	; 0x80
 801e364:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801e366:	1dbb      	adds	r3, r7, #6
 801e368:	2201      	movs	r2, #1
 801e36a:	4619      	mov	r1, r3
 801e36c:	206b      	movs	r0, #107	; 0x6b
 801e36e:	f7ff ff65 	bl	801e23c <icm20602_write>
 801e372:	4603      	mov	r3, r0
 801e374:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	f040 818e 	bne.w	801e69c <icm20602_init+0x348>

	HAL_Delay(1000);
 801e380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801e384:	f7e5 ff8e 	bl	80042a4 <HAL_Delay>

	// verify we are able to read from the chip
	r = icm20602_read(REG_WHO_AM_I, &tmp, 1);
 801e388:	1dbb      	adds	r3, r7, #6
 801e38a:	2201      	movs	r2, #1
 801e38c:	4619      	mov	r1, r3
 801e38e:	2075      	movs	r0, #117	; 0x75
 801e390:	f7ff ff98 	bl	801e2c4 <icm20602_read>
 801e394:	4603      	mov	r3, r0
 801e396:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	f040 817f 	bne.w	801e6a0 <icm20602_init+0x34c>
	if (REG_WHO_AM_I_CONST != tmp) {
 801e3a2:	79bb      	ldrb	r3, [r7, #6]
 801e3a4:	2b12      	cmp	r3, #18
 801e3a6:	d006      	beq.n	801e3b6 <icm20602_init+0x62>
		r = -1;
 801e3a8:	23ff      	movs	r3, #255	; 0xff
 801e3aa:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801e3ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	f040 8177 	bne.w	801e6a4 <icm20602_init+0x350>
	}

	/*Reset path*/
	tmp = 0x03;
 801e3b6:	2303      	movs	r3, #3
 801e3b8:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_SIGNAL_PATH_RESET, &tmp, 1);
 801e3ba:	1dbb      	adds	r3, r7, #6
 801e3bc:	2201      	movs	r2, #1
 801e3be:	4619      	mov	r1, r3
 801e3c0:	2068      	movs	r0, #104	; 0x68
 801e3c2:	f7ff ff3b 	bl	801e23c <icm20602_write>
 801e3c6:	4603      	mov	r3, r0
 801e3c8:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e3ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e3ce:	2b00      	cmp	r3, #0
 801e3d0:	f040 816a 	bne.w	801e6a8 <icm20602_init+0x354>

	// set clock to internal PLL
	tmp = 0x01;
 801e3d4:	2301      	movs	r3, #1
 801e3d6:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801e3d8:	1dbb      	adds	r3, r7, #6
 801e3da:	2201      	movs	r2, #1
 801e3dc:	4619      	mov	r1, r3
 801e3de:	206b      	movs	r0, #107	; 0x6b
 801e3e0:	f7ff ff2c 	bl	801e23c <icm20602_write>
 801e3e4:	4603      	mov	r3, r0
 801e3e6:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e3e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	f040 815d 	bne.w	801e6ac <icm20602_init+0x358>

	// place accel and gyro on standby
	tmp = 0x3F;
 801e3f2:	233f      	movs	r3, #63	; 0x3f
 801e3f4:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801e3f6:	1dbb      	adds	r3, r7, #6
 801e3f8:	2201      	movs	r2, #1
 801e3fa:	4619      	mov	r1, r3
 801e3fc:	206c      	movs	r0, #108	; 0x6c
 801e3fe:	f7ff ff1d 	bl	801e23c <icm20602_write>
 801e402:	4603      	mov	r3, r0
 801e404:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	f040 8150 	bne.w	801e6b0 <icm20602_init+0x35c>

	// disable fifo
	tmp = 0x01;
 801e410:	2301      	movs	r3, #1
 801e412:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_USER_CTRL, &tmp, 1);
 801e414:	1dbb      	adds	r3, r7, #6
 801e416:	2201      	movs	r2, #1
 801e418:	4619      	mov	r1, r3
 801e41a:	206a      	movs	r0, #106	; 0x6a
 801e41c:	f7ff ff0e 	bl	801e23c <icm20602_write>
 801e420:	4603      	mov	r3, r0
 801e422:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e428:	2b00      	cmp	r3, #0
 801e42a:	f040 8143 	bne.w	801e6b4 <icm20602_init+0x360>

	// disable chip I2C communications
	tmp = 0x40;
 801e42e:	2340      	movs	r3, #64	; 0x40
 801e430:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_I2C_IF, &tmp, 1);
 801e432:	1dbb      	adds	r3, r7, #6
 801e434:	2201      	movs	r2, #1
 801e436:	4619      	mov	r1, r3
 801e438:	2070      	movs	r0, #112	; 0x70
 801e43a:	f7ff feff 	bl	801e23c <icm20602_write>
 801e43e:	4603      	mov	r3, r0
 801e440:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e446:	2b00      	cmp	r3, #0
 801e448:	f040 8136 	bne.w	801e6b8 <icm20602_init+0x364>

	if (dev.use_accel) {
 801e44c:	4ba7      	ldr	r3, [pc, #668]	; (801e6ec <icm20602_init+0x398>)
 801e44e:	781b      	ldrb	r3, [r3, #0]
 801e450:	2b00      	cmp	r3, #0
 801e452:	d034      	beq.n	801e4be <icm20602_init+0x16a>
		if (ICM20602_ACCEL_DLPF_BYPASS_1046_HZ == dev.accel_dlpf) {
 801e454:	4ba5      	ldr	r3, [pc, #660]	; (801e6ec <icm20602_init+0x398>)
 801e456:	789b      	ldrb	r3, [r3, #2]
 801e458:	2b08      	cmp	r3, #8
 801e45a:	d10e      	bne.n	801e47a <icm20602_init+0x126>
			tmp = (1 << 3);
 801e45c:	2308      	movs	r3, #8
 801e45e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801e460:	1dbb      	adds	r3, r7, #6
 801e462:	2201      	movs	r2, #1
 801e464:	4619      	mov	r1, r3
 801e466:	201d      	movs	r0, #29
 801e468:	f7ff fee8 	bl	801e23c <icm20602_write>
 801e46c:	4603      	mov	r3, r0
 801e46e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e474:	2b00      	cmp	r3, #0
 801e476:	d010      	beq.n	801e49a <icm20602_init+0x146>
 801e478:	e131      	b.n	801e6de <icm20602_init+0x38a>
		}
		else {
			tmp = dev.accel_dlpf;
 801e47a:	4b9c      	ldr	r3, [pc, #624]	; (801e6ec <icm20602_init+0x398>)
 801e47c:	789b      	ldrb	r3, [r3, #2]
 801e47e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801e480:	1dbb      	adds	r3, r7, #6
 801e482:	2201      	movs	r2, #1
 801e484:	4619      	mov	r1, r3
 801e486:	201d      	movs	r0, #29
 801e488:	f7ff fed8 	bl	801e23c <icm20602_write>
 801e48c:	4603      	mov	r3, r0
 801e48e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e494:	2b00      	cmp	r3, #0
 801e496:	f040 8111 	bne.w	801e6bc <icm20602_init+0x368>
		}

		tmp = (dev.accel_g) << 2;
 801e49a:	4b94      	ldr	r3, [pc, #592]	; (801e6ec <icm20602_init+0x398>)
 801e49c:	78db      	ldrb	r3, [r3, #3]
 801e49e:	009b      	lsls	r3, r3, #2
 801e4a0:	b2db      	uxtb	r3, r3
 801e4a2:	71bb      	strb	r3, [r7, #6]
		r =  icm20602_write(REG_ACCEL_CONFIG, &tmp, 1);
 801e4a4:	1dbb      	adds	r3, r7, #6
 801e4a6:	2201      	movs	r2, #1
 801e4a8:	4619      	mov	r1, r3
 801e4aa:	201c      	movs	r0, #28
 801e4ac:	f7ff fec6 	bl	801e23c <icm20602_write>
 801e4b0:	4603      	mov	r3, r0
 801e4b2:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801e4b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	f040 8101 	bne.w	801e6c0 <icm20602_init+0x36c>
	}

	if (dev.use_gyro) {
 801e4be:	4b8b      	ldr	r3, [pc, #556]	; (801e6ec <icm20602_init+0x398>)
 801e4c0:	791b      	ldrb	r3, [r3, #4]
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d073      	beq.n	801e5ae <icm20602_init+0x25a>
		if (ICM20602_GYRO_DLPF_BYPASS_3281_HZ == dev.gyro_dlpf) {
 801e4c6:	4b89      	ldr	r3, [pc, #548]	; (801e6ec <icm20602_init+0x398>)
 801e4c8:	799b      	ldrb	r3, [r3, #6]
 801e4ca:	2b08      	cmp	r3, #8
 801e4cc:	d124      	bne.n	801e518 <icm20602_init+0x1c4>
			// bypass dpf and set dps
			tmp = 0x00;
 801e4ce:	2300      	movs	r3, #0
 801e4d0:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801e4d2:	1dbb      	adds	r3, r7, #6
 801e4d4:	2201      	movs	r2, #1
 801e4d6:	4619      	mov	r1, r3
 801e4d8:	201a      	movs	r0, #26
 801e4da:	f7ff feaf 	bl	801e23c <icm20602_write>
 801e4de:	4603      	mov	r3, r0
 801e4e0:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	f040 80ec 	bne.w	801e6c4 <icm20602_init+0x370>

			tmp = (dev.gyro_dps << 3) | 0x02; // see table page 37 of datasheet
 801e4ec:	4b7f      	ldr	r3, [pc, #508]	; (801e6ec <icm20602_init+0x398>)
 801e4ee:	79db      	ldrb	r3, [r3, #7]
 801e4f0:	00db      	lsls	r3, r3, #3
 801e4f2:	b25b      	sxtb	r3, r3
 801e4f4:	f043 0302 	orr.w	r3, r3, #2
 801e4f8:	b25b      	sxtb	r3, r3
 801e4fa:	b2db      	uxtb	r3, r3
 801e4fc:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801e4fe:	1dbb      	adds	r3, r7, #6
 801e500:	2201      	movs	r2, #1
 801e502:	4619      	mov	r1, r3
 801e504:	201b      	movs	r0, #27
 801e506:	f7ff fe99 	bl	801e23c <icm20602_write>
 801e50a:	4603      	mov	r3, r0
 801e50c:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e512:	2b00      	cmp	r3, #0
 801e514:	d04b      	beq.n	801e5ae <icm20602_init+0x25a>
 801e516:	e0e2      	b.n	801e6de <icm20602_init+0x38a>
		}
		else if (ICM20602_GYRO_DLPF_BYPASS_8173_HZ == dev.gyro_dlpf) {
 801e518:	4b74      	ldr	r3, [pc, #464]	; (801e6ec <icm20602_init+0x398>)
 801e51a:	799b      	ldrb	r3, [r3, #6]
 801e51c:	2b09      	cmp	r3, #9
 801e51e:	d124      	bne.n	801e56a <icm20602_init+0x216>
			// bypass dpf and set dps
			tmp = 0x00;
 801e520:	2300      	movs	r3, #0
 801e522:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801e524:	1dbb      	adds	r3, r7, #6
 801e526:	2201      	movs	r2, #1
 801e528:	4619      	mov	r1, r3
 801e52a:	201a      	movs	r0, #26
 801e52c:	f7ff fe86 	bl	801e23c <icm20602_write>
 801e530:	4603      	mov	r3, r0
 801e532:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e538:	2b00      	cmp	r3, #0
 801e53a:	f040 80c5 	bne.w	801e6c8 <icm20602_init+0x374>

			tmp = (dev.gyro_dps << 3) | 0x01; // see table page 37 of datasheet
 801e53e:	4b6b      	ldr	r3, [pc, #428]	; (801e6ec <icm20602_init+0x398>)
 801e540:	79db      	ldrb	r3, [r3, #7]
 801e542:	00db      	lsls	r3, r3, #3
 801e544:	b25b      	sxtb	r3, r3
 801e546:	f043 0301 	orr.w	r3, r3, #1
 801e54a:	b25b      	sxtb	r3, r3
 801e54c:	b2db      	uxtb	r3, r3
 801e54e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801e550:	1dbb      	adds	r3, r7, #6
 801e552:	2201      	movs	r2, #1
 801e554:	4619      	mov	r1, r3
 801e556:	201b      	movs	r0, #27
 801e558:	f7ff fe70 	bl	801e23c <icm20602_write>
 801e55c:	4603      	mov	r3, r0
 801e55e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e564:	2b00      	cmp	r3, #0
 801e566:	d022      	beq.n	801e5ae <icm20602_init+0x25a>
 801e568:	e0b9      	b.n	801e6de <icm20602_init+0x38a>
		}
		else {
			// configure dpf and set dps
			tmp = dev.gyro_dlpf;
 801e56a:	4b60      	ldr	r3, [pc, #384]	; (801e6ec <icm20602_init+0x398>)
 801e56c:	799b      	ldrb	r3, [r3, #6]
 801e56e:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801e570:	1dbb      	adds	r3, r7, #6
 801e572:	2201      	movs	r2, #1
 801e574:	4619      	mov	r1, r3
 801e576:	201a      	movs	r0, #26
 801e578:	f7ff fe60 	bl	801e23c <icm20602_write>
 801e57c:	4603      	mov	r3, r0
 801e57e:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e584:	2b00      	cmp	r3, #0
 801e586:	f040 80a1 	bne.w	801e6cc <icm20602_init+0x378>

			tmp = dev.gyro_dps << 3;
 801e58a:	4b58      	ldr	r3, [pc, #352]	; (801e6ec <icm20602_init+0x398>)
 801e58c:	79db      	ldrb	r3, [r3, #7]
 801e58e:	00db      	lsls	r3, r3, #3
 801e590:	b2db      	uxtb	r3, r3
 801e592:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801e594:	1dbb      	adds	r3, r7, #6
 801e596:	2201      	movs	r2, #1
 801e598:	4619      	mov	r1, r3
 801e59a:	201b      	movs	r0, #27
 801e59c:	f7ff fe4e 	bl	801e23c <icm20602_write>
 801e5a0:	4603      	mov	r3, r0
 801e5a2:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801e5a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	f040 8091 	bne.w	801e6d0 <icm20602_init+0x37c>
		}
	}

	/*Disale low power mode*/
	tmp = 0x00;
 801e5ae:	2300      	movs	r3, #0
 801e5b0:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_LP_MODE_CFG, &tmp, 1);
 801e5b2:	1dbb      	adds	r3, r7, #6
 801e5b4:	2201      	movs	r2, #1
 801e5b6:	4619      	mov	r1, r3
 801e5b8:	201e      	movs	r0, #30
 801e5ba:	f7ff fe3f 	bl	801e23c <icm20602_write>
 801e5be:	4603      	mov	r3, r0
 801e5c0:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e5c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	f040 8084 	bne.w	801e6d4 <icm20602_init+0x380>

	// enable FIFO if requested
	tmp = ((dev.use_accel) && (dev.accel_fifo)) ? 0x08 : 0x00;
 801e5cc:	4b47      	ldr	r3, [pc, #284]	; (801e6ec <icm20602_init+0x398>)
 801e5ce:	781b      	ldrb	r3, [r3, #0]
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d005      	beq.n	801e5e0 <icm20602_init+0x28c>
 801e5d4:	4b45      	ldr	r3, [pc, #276]	; (801e6ec <icm20602_init+0x398>)
 801e5d6:	785b      	ldrb	r3, [r3, #1]
 801e5d8:	2b00      	cmp	r3, #0
 801e5da:	d001      	beq.n	801e5e0 <icm20602_init+0x28c>
 801e5dc:	2308      	movs	r3, #8
 801e5de:	e000      	b.n	801e5e2 <icm20602_init+0x28e>
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	71bb      	strb	r3, [r7, #6]
	tmp |= ((dev.use_gyro) && (dev.gyro_fifo)) ? 0x10 : 0x00;
 801e5e4:	4b41      	ldr	r3, [pc, #260]	; (801e6ec <icm20602_init+0x398>)
 801e5e6:	791b      	ldrb	r3, [r3, #4]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d005      	beq.n	801e5f8 <icm20602_init+0x2a4>
 801e5ec:	4b3f      	ldr	r3, [pc, #252]	; (801e6ec <icm20602_init+0x398>)
 801e5ee:	795b      	ldrb	r3, [r3, #5]
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d001      	beq.n	801e5f8 <icm20602_init+0x2a4>
 801e5f4:	2210      	movs	r2, #16
 801e5f6:	e000      	b.n	801e5fa <icm20602_init+0x2a6>
 801e5f8:	2200      	movs	r2, #0
 801e5fa:	79bb      	ldrb	r3, [r7, #6]
 801e5fc:	b25b      	sxtb	r3, r3
 801e5fe:	4313      	orrs	r3, r2
 801e600:	b25b      	sxtb	r3, r3
 801e602:	b2db      	uxtb	r3, r3
 801e604:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_FIFO_EN, &tmp, 1);
 801e606:	1dbb      	adds	r3, r7, #6
 801e608:	2201      	movs	r2, #1
 801e60a:	4619      	mov	r1, r3
 801e60c:	2023      	movs	r0, #35	; 0x23
 801e60e:	f7ff fe15 	bl	801e23c <icm20602_write>
 801e612:	4603      	mov	r3, r0
 801e614:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d15c      	bne.n	801e6d8 <icm20602_init+0x384>

	// configure sample rate divider (TODO: is this gyro only?)
	// note: SAMPLE_RATE = INTERNAL_SAMPLE_RATE / (1 + SMPLRT_DIV)
	tmp = (0 != dev.sample_rate_div) ? dev.sample_rate_div - 1 : 1;
 801e61e:	4b33      	ldr	r3, [pc, #204]	; (801e6ec <icm20602_init+0x398>)
 801e620:	7a1b      	ldrb	r3, [r3, #8]
 801e622:	2b00      	cmp	r3, #0
 801e624:	d004      	beq.n	801e630 <icm20602_init+0x2dc>
 801e626:	4b31      	ldr	r3, [pc, #196]	; (801e6ec <icm20602_init+0x398>)
 801e628:	7a1b      	ldrb	r3, [r3, #8]
 801e62a:	3b01      	subs	r3, #1
 801e62c:	b2db      	uxtb	r3, r3
 801e62e:	e000      	b.n	801e632 <icm20602_init+0x2de>
 801e630:	2301      	movs	r3, #1
 801e632:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_SMPLRT_DIV, &tmp, 1);
 801e634:	1dbb      	adds	r3, r7, #6
 801e636:	2201      	movs	r2, #1
 801e638:	4619      	mov	r1, r3
 801e63a:	2019      	movs	r0, #25
 801e63c:	f7ff fdfe 	bl	801e23c <icm20602_write>
 801e640:	4603      	mov	r3, r0
 801e642:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e648:	2b00      	cmp	r3, #0
 801e64a:	d147      	bne.n	801e6dc <icm20602_init+0x388>

	tmp = 0;
 801e64c:	2300      	movs	r3, #0
 801e64e:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_gyro) ? 0 : 0x07; // 0 - on, 1 - disabled
 801e650:	4b26      	ldr	r3, [pc, #152]	; (801e6ec <icm20602_init+0x398>)
 801e652:	791b      	ldrb	r3, [r3, #4]
 801e654:	2b00      	cmp	r3, #0
 801e656:	d001      	beq.n	801e65c <icm20602_init+0x308>
 801e658:	2200      	movs	r2, #0
 801e65a:	e000      	b.n	801e65e <icm20602_init+0x30a>
 801e65c:	2207      	movs	r2, #7
 801e65e:	79bb      	ldrb	r3, [r7, #6]
 801e660:	b25b      	sxtb	r3, r3
 801e662:	4313      	orrs	r3, r2
 801e664:	b25b      	sxtb	r3, r3
 801e666:	b2db      	uxtb	r3, r3
 801e668:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_accel) ? 0 : 0x38; // 0 - on, 1 - disabled
 801e66a:	4b20      	ldr	r3, [pc, #128]	; (801e6ec <icm20602_init+0x398>)
 801e66c:	781b      	ldrb	r3, [r3, #0]
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d001      	beq.n	801e676 <icm20602_init+0x322>
 801e672:	2200      	movs	r2, #0
 801e674:	e000      	b.n	801e678 <icm20602_init+0x324>
 801e676:	2238      	movs	r2, #56	; 0x38
 801e678:	79bb      	ldrb	r3, [r7, #6]
 801e67a:	b25b      	sxtb	r3, r3
 801e67c:	4313      	orrs	r3, r2
 801e67e:	b25b      	sxtb	r3, r3
 801e680:	b2db      	uxtb	r3, r3
 801e682:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801e684:	1dbb      	adds	r3, r7, #6
 801e686:	2201      	movs	r2, #1
 801e688:	4619      	mov	r1, r3
 801e68a:	206c      	movs	r0, #108	; 0x6c
 801e68c:	f7ff fdd6 	bl	801e23c <icm20602_write>
 801e690:	4603      	mov	r3, r0
 801e692:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801e694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e698:	2b00      	cmp	r3, #0

	return_err:
 801e69a:	e020      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e69c:	bf00      	nop
 801e69e:	e01e      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6a0:	bf00      	nop
 801e6a2:	e01c      	b.n	801e6de <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801e6a4:	bf00      	nop
 801e6a6:	e01a      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6a8:	bf00      	nop
 801e6aa:	e018      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6ac:	bf00      	nop
 801e6ae:	e016      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6b0:	bf00      	nop
 801e6b2:	e014      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6b4:	bf00      	nop
 801e6b6:	e012      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6b8:	bf00      	nop
 801e6ba:	e010      	b.n	801e6de <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e6bc:	bf00      	nop
 801e6be:	e00e      	b.n	801e6de <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801e6c0:	bf00      	nop
 801e6c2:	e00c      	b.n	801e6de <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e6c4:	bf00      	nop
 801e6c6:	e00a      	b.n	801e6de <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e6c8:	bf00      	nop
 801e6ca:	e008      	b.n	801e6de <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e6cc:	bf00      	nop
 801e6ce:	e006      	b.n	801e6de <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801e6d0:	bf00      	nop
 801e6d2:	e004      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6d4:	bf00      	nop
 801e6d6:	e002      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6d8:	bf00      	nop
 801e6da:	e000      	b.n	801e6de <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801e6dc:	bf00      	nop

	return r;
 801e6de:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e6e2:	4618      	mov	r0, r3
 801e6e4:	3708      	adds	r7, #8
 801e6e6:	46bd      	mov	sp, r7
 801e6e8:	bd80      	pop	{r7, pc}
 801e6ea:	bf00      	nop
 801e6ec:	24000038 	.word	0x24000038

0801e6f0 <icm20602_read_data_raw>:
}

int8_t icm20602_read_data_raw(int16_t * p_ax,
		int16_t * p_ay, int16_t * p_az, int16_t * p_gx, int16_t * p_gy,
		int16_t * p_gz, int16_t * p_t)
{
 801e6f0:	b580      	push	{r7, lr}
 801e6f2:	b088      	sub	sp, #32
 801e6f4:	af00      	add	r7, sp, #0
 801e6f6:	60f8      	str	r0, [r7, #12]
 801e6f8:	60b9      	str	r1, [r7, #8]
 801e6fa:	607a      	str	r2, [r7, #4]
 801e6fc:	603b      	str	r3, [r7, #0]
	uint8_t buf[14] = {0};
 801e6fe:	2300      	movs	r3, #0
 801e700:	613b      	str	r3, [r7, #16]
 801e702:	f107 0314 	add.w	r3, r7, #20
 801e706:	2200      	movs	r2, #0
 801e708:	601a      	str	r2, [r3, #0]
 801e70a:	605a      	str	r2, [r3, #4]
 801e70c:	811a      	strh	r2, [r3, #8]
	int8_t r = 0;
 801e70e:	2300      	movs	r3, #0
 801e710:	77fb      	strb	r3, [r7, #31]

	r = icm20602_read(REG_ACCEL_XOUT_H, buf, 14);
 801e712:	f107 0310 	add.w	r3, r7, #16
 801e716:	220e      	movs	r2, #14
 801e718:	4619      	mov	r1, r3
 801e71a:	203b      	movs	r0, #59	; 0x3b
 801e71c:	f7ff fdd2 	bl	801e2c4 <icm20602_read>
 801e720:	4603      	mov	r3, r0
 801e722:	77fb      	strb	r3, [r7, #31]
	if (0 == r) {
 801e724:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e728:	2b00      	cmp	r3, #0
 801e72a:	f040 808c 	bne.w	801e846 <icm20602_read_data_raw+0x156>
		UINT8_TO_INT16(*p_ax, buf[0], buf[1]);
 801e72e:	7c3b      	ldrb	r3, [r7, #16]
 801e730:	b21a      	sxth	r2, r3
 801e732:	68fb      	ldr	r3, [r7, #12]
 801e734:	801a      	strh	r2, [r3, #0]
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e73c:	021b      	lsls	r3, r3, #8
 801e73e:	b21a      	sxth	r2, r3
 801e740:	68fb      	ldr	r3, [r7, #12]
 801e742:	801a      	strh	r2, [r3, #0]
 801e744:	68fb      	ldr	r3, [r7, #12]
 801e746:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e74a:	7c7b      	ldrb	r3, [r7, #17]
 801e74c:	b21b      	sxth	r3, r3
 801e74e:	4313      	orrs	r3, r2
 801e750:	b21a      	sxth	r2, r3
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_ay, buf[2], buf[3]);
 801e756:	7cbb      	ldrb	r3, [r7, #18]
 801e758:	b21a      	sxth	r2, r3
 801e75a:	68bb      	ldr	r3, [r7, #8]
 801e75c:	801a      	strh	r2, [r3, #0]
 801e75e:	68bb      	ldr	r3, [r7, #8]
 801e760:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e764:	021b      	lsls	r3, r3, #8
 801e766:	b21a      	sxth	r2, r3
 801e768:	68bb      	ldr	r3, [r7, #8]
 801e76a:	801a      	strh	r2, [r3, #0]
 801e76c:	68bb      	ldr	r3, [r7, #8]
 801e76e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e772:	7cfb      	ldrb	r3, [r7, #19]
 801e774:	b21b      	sxth	r3, r3
 801e776:	4313      	orrs	r3, r2
 801e778:	b21a      	sxth	r2, r3
 801e77a:	68bb      	ldr	r3, [r7, #8]
 801e77c:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_az, buf[4], buf[5]);
 801e77e:	7d3b      	ldrb	r3, [r7, #20]
 801e780:	b21a      	sxth	r2, r3
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	801a      	strh	r2, [r3, #0]
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e78c:	021b      	lsls	r3, r3, #8
 801e78e:	b21a      	sxth	r2, r3
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	801a      	strh	r2, [r3, #0]
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e79a:	7d7b      	ldrb	r3, [r7, #21]
 801e79c:	b21b      	sxth	r3, r3
 801e79e:	4313      	orrs	r3, r2
 801e7a0:	b21a      	sxth	r2, r3
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_t, buf[6], buf[7]);
 801e7a6:	7dbb      	ldrb	r3, [r7, #22]
 801e7a8:	b21a      	sxth	r2, r3
 801e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7ac:	801a      	strh	r2, [r3, #0]
 801e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e7b4:	021b      	lsls	r3, r3, #8
 801e7b6:	b21a      	sxth	r2, r3
 801e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7ba:	801a      	strh	r2, [r3, #0]
 801e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7be:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e7c2:	7dfb      	ldrb	r3, [r7, #23]
 801e7c4:	b21b      	sxth	r3, r3
 801e7c6:	4313      	orrs	r3, r2
 801e7c8:	b21a      	sxth	r2, r3
 801e7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7cc:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gx, buf[8], buf[9]);
 801e7ce:	7e3b      	ldrb	r3, [r7, #24]
 801e7d0:	b21a      	sxth	r2, r3
 801e7d2:	683b      	ldr	r3, [r7, #0]
 801e7d4:	801a      	strh	r2, [r3, #0]
 801e7d6:	683b      	ldr	r3, [r7, #0]
 801e7d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e7dc:	021b      	lsls	r3, r3, #8
 801e7de:	b21a      	sxth	r2, r3
 801e7e0:	683b      	ldr	r3, [r7, #0]
 801e7e2:	801a      	strh	r2, [r3, #0]
 801e7e4:	683b      	ldr	r3, [r7, #0]
 801e7e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e7ea:	7e7b      	ldrb	r3, [r7, #25]
 801e7ec:	b21b      	sxth	r3, r3
 801e7ee:	4313      	orrs	r3, r2
 801e7f0:	b21a      	sxth	r2, r3
 801e7f2:	683b      	ldr	r3, [r7, #0]
 801e7f4:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gy, buf[10], buf[11]);
 801e7f6:	7ebb      	ldrb	r3, [r7, #26]
 801e7f8:	b21a      	sxth	r2, r3
 801e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7fc:	801a      	strh	r2, [r3, #0]
 801e7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e800:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e804:	021b      	lsls	r3, r3, #8
 801e806:	b21a      	sxth	r2, r3
 801e808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e80a:	801a      	strh	r2, [r3, #0]
 801e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e80e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e812:	7efb      	ldrb	r3, [r7, #27]
 801e814:	b21b      	sxth	r3, r3
 801e816:	4313      	orrs	r3, r2
 801e818:	b21a      	sxth	r2, r3
 801e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e81c:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gz, buf[12], buf[13]);
 801e81e:	7f3b      	ldrb	r3, [r7, #28]
 801e820:	b21a      	sxth	r2, r3
 801e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e824:	801a      	strh	r2, [r3, #0]
 801e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e828:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e82c:	021b      	lsls	r3, r3, #8
 801e82e:	b21a      	sxth	r2, r3
 801e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e832:	801a      	strh	r2, [r3, #0]
 801e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e836:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e83a:	7f7b      	ldrb	r3, [r7, #29]
 801e83c:	b21b      	sxth	r3, r3
 801e83e:	4313      	orrs	r3, r2
 801e840:	b21a      	sxth	r2, r3
 801e842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e844:	801a      	strh	r2, [r3, #0]
	}

	return r;
 801e846:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e84a:	4618      	mov	r0, r3
 801e84c:	3720      	adds	r7, #32
 801e84e:	46bd      	mov	sp, r7
 801e850:	bd80      	pop	{r7, pc}
	...

0801e854 <pcm5102_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/

void pcm5102_Init(void)
{
 801e854:	b580      	push	{r7, lr}
 801e856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, GPIO_PIN_SET); //Filterselect: Normallatency(Low) / Lowlatency(High)
 801e858:	2201      	movs	r2, #1
 801e85a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e85e:	480a      	ldr	r0, [pc, #40]	; (801e888 <pcm5102_Init+0x34>)
 801e860:	f7eb fd14 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, GPIO_PIN_RESET); //De-emphasiscontrol for 44.1kHz sampling rate: Off(Low) / On(High)
 801e864:	2200      	movs	r2, #0
 801e866:	2108      	movs	r1, #8
 801e868:	4808      	ldr	r0, [pc, #32]	; (801e88c <pcm5102_Init+0x38>)
 801e86a:	f7eb fd0f 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, GPIO_PIN_SET); //Soft mute control: Softmute(Low) / soft un-mute(High)
 801e86e:	2201      	movs	r2, #1
 801e870:	2104      	movs	r1, #4
 801e872:	4805      	ldr	r0, [pc, #20]	; (801e888 <pcm5102_Init+0x34>)
 801e874:	f7eb fd0a 	bl	800a28c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET); //Audio format selection: I2S(Low)/ Left justified(High)
 801e878:	2200      	movs	r2, #0
 801e87a:	2140      	movs	r1, #64	; 0x40
 801e87c:	4804      	ldr	r0, [pc, #16]	; (801e890 <pcm5102_Init+0x3c>)
 801e87e:	f7eb fd05 	bl	800a28c <HAL_GPIO_WritePin>
}
 801e882:	bf00      	nop
 801e884:	bd80      	pop	{r7, pc}
 801e886:	bf00      	nop
 801e888:	58020800 	.word	0x58020800
 801e88c:	58021c00 	.word	0x58021c00
 801e890:	58021400 	.word	0x58021400

0801e894 <Audio_Player_Play>:

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 801e894:	b580      	push	{r7, lr}
 801e896:	b082      	sub	sp, #8
 801e898:	af00      	add	r7, sp, #0
 801e89a:	6078      	str	r0, [r7, #4]
 801e89c:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 801e89e:	683b      	ldr	r3, [r7, #0]
 801e8a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e8a4:	d306      	bcc.n	801e8b4 <Audio_Player_Play+0x20>
		Size = 0xFFFF;
 801e8a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8aa:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 801e8ac:	2140      	movs	r1, #64	; 0x40
 801e8ae:	4807      	ldr	r0, [pc, #28]	; (801e8cc <Audio_Player_Play+0x38>)
 801e8b0:	f7eb fd05 	bl	800a2be <HAL_GPIO_TogglePin>
	}
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, Size);
 801e8b4:	683b      	ldr	r3, [r7, #0]
 801e8b6:	b29b      	uxth	r3, r3
 801e8b8:	461a      	mov	r2, r3
 801e8ba:	6879      	ldr	r1, [r7, #4]
 801e8bc:	4804      	ldr	r0, [pc, #16]	; (801e8d0 <Audio_Player_Play+0x3c>)
 801e8be:	f7ef fa63 	bl	800dd88 <HAL_SAI_Transmit_DMA>

//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 801e8c2:	bf00      	nop
 801e8c4:	3708      	adds	r7, #8
 801e8c6:	46bd      	mov	sp, r7
 801e8c8:	bd80      	pop	{r7, pc}
 801e8ca:	bf00      	nop
 801e8cc:	58021c00 	.word	0x58021c00
 801e8d0:	2400541c 	.word	0x2400541c

0801e8d4 <ssd1362_Reset>:
void ssd1362_writeCmd(uint8_t reg);
void ssd1362_writeData(uint8_t data);

/* Private user code ---------------------------------------------------------*/

void ssd1362_Reset(void) {
 801e8d4:	b580      	push	{r7, lr}
 801e8d6:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 801e8d8:	2200      	movs	r2, #0
 801e8da:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e8de:	4808      	ldr	r0, [pc, #32]	; (801e900 <ssd1362_Reset+0x2c>)
 801e8e0:	f7eb fcd4 	bl	800a28c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801e8e4:	200a      	movs	r0, #10
 801e8e6:	f7e5 fcdd 	bl	80042a4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 801e8ea:	2201      	movs	r2, #1
 801e8ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 801e8f0:	4803      	ldr	r0, [pc, #12]	; (801e900 <ssd1362_Reset+0x2c>)
 801e8f2:	f7eb fccb 	bl	800a28c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801e8f6:	200a      	movs	r0, #10
 801e8f8:	f7e5 fcd4 	bl	80042a4 <HAL_Delay>
}
 801e8fc:	bf00      	nop
 801e8fe:	bd80      	pop	{r7, pc}
 801e900:	58020400 	.word	0x58020400

0801e904 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 801e904:	b580      	push	{r7, lr}
 801e906:	b082      	sub	sp, #8
 801e908:	af00      	add	r7, sp, #0
 801e90a:	4603      	mov	r3, r0
 801e90c:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 801e90e:	1dfa      	adds	r2, r7, #7
 801e910:	2301      	movs	r3, #1
 801e912:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801e916:	4803      	ldr	r0, [pc, #12]	; (801e924 <ssd1362_writeCmd+0x20>)
 801e918:	f7f0 fe24 	bl	800f564 <HAL_SRAM_Write_8b>
}
 801e91c:	bf00      	nop
 801e91e:	3708      	adds	r7, #8
 801e920:	46bd      	mov	sp, r7
 801e922:	bd80      	pop	{r7, pc}
 801e924:	24005344 	.word	0x24005344

0801e928 <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 801e928:	b580      	push	{r7, lr}
 801e92a:	b082      	sub	sp, #8
 801e92c:	af00      	add	r7, sp, #0
 801e92e:	4603      	mov	r3, r0
 801e930:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 801e932:	1dfa      	adds	r2, r7, #7
 801e934:	2301      	movs	r3, #1
 801e936:	4904      	ldr	r1, [pc, #16]	; (801e948 <ssd1362_writeData+0x20>)
 801e938:	4804      	ldr	r0, [pc, #16]	; (801e94c <ssd1362_writeData+0x24>)
 801e93a:	f7f0 fe13 	bl	800f564 <HAL_SRAM_Write_8b>
}
 801e93e:	bf00      	nop
 801e940:	3708      	adds	r7, #8
 801e942:	46bd      	mov	sp, r7
 801e944:	bd80      	pop	{r7, pc}
 801e946:	bf00      	nop
 801e948:	c0000001 	.word	0xc0000001
 801e94c:	24005344 	.word	0x24005344

0801e950 <bitWrite>:

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 801e950:	b480      	push	{r7}
 801e952:	b083      	sub	sp, #12
 801e954:	af00      	add	r7, sp, #0
 801e956:	6078      	str	r0, [r7, #4]
 801e958:	460b      	mov	r3, r1
 801e95a:	70fb      	strb	r3, [r7, #3]
 801e95c:	4613      	mov	r3, r2
 801e95e:	70bb      	strb	r3, [r7, #2]
   if (value)
 801e960:	78bb      	ldrb	r3, [r7, #2]
 801e962:	2b00      	cmp	r3, #0
 801e964:	d00d      	beq.n	801e982 <bitWrite+0x32>
      *x |= (1 << n);
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	781b      	ldrb	r3, [r3, #0]
 801e96a:	b25a      	sxtb	r2, r3
 801e96c:	78fb      	ldrb	r3, [r7, #3]
 801e96e:	2101      	movs	r1, #1
 801e970:	fa01 f303 	lsl.w	r3, r1, r3
 801e974:	b25b      	sxtb	r3, r3
 801e976:	4313      	orrs	r3, r2
 801e978:	b25b      	sxtb	r3, r3
 801e97a:	b2da      	uxtb	r2, r3
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 801e980:	e00e      	b.n	801e9a0 <bitWrite+0x50>
      *x &= ~(1 << n);
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	781b      	ldrb	r3, [r3, #0]
 801e986:	b25a      	sxtb	r2, r3
 801e988:	78fb      	ldrb	r3, [r7, #3]
 801e98a:	2101      	movs	r1, #1
 801e98c:	fa01 f303 	lsl.w	r3, r1, r3
 801e990:	b25b      	sxtb	r3, r3
 801e992:	43db      	mvns	r3, r3
 801e994:	b25b      	sxtb	r3, r3
 801e996:	4013      	ands	r3, r2
 801e998:	b25b      	sxtb	r3, r3
 801e99a:	b2da      	uxtb	r2, r3
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	701a      	strb	r2, [r3, #0]
}
 801e9a0:	bf00      	nop
 801e9a2:	370c      	adds	r7, #12
 801e9a4:	46bd      	mov	sp, r7
 801e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9aa:	4770      	bx	lr

0801e9ac <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 801e9ac:	b480      	push	{r7}
 801e9ae:	b083      	sub	sp, #12
 801e9b0:	af00      	add	r7, sp, #0
 801e9b2:	6078      	str	r0, [r7, #4]
 801e9b4:	460b      	mov	r3, r1
 801e9b6:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	781b      	ldrb	r3, [r3, #0]
 801e9bc:	461a      	mov	r2, r3
 801e9be:	78fb      	ldrb	r3, [r7, #3]
 801e9c0:	fa42 f303 	asr.w	r3, r2, r3
 801e9c4:	b2db      	uxtb	r3, r3
 801e9c6:	f003 0301 	and.w	r3, r3, #1
 801e9ca:	b2db      	uxtb	r3, r3
}
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	370c      	adds	r7, #12
 801e9d0:	46bd      	mov	sp, r7
 801e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9d6:	4770      	bx	lr

0801e9d8 <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 801e9d8:	b590      	push	{r4, r7, lr}
 801e9da:	b083      	sub	sp, #12
 801e9dc:	af00      	add	r7, sp, #0
 801e9de:	4604      	mov	r4, r0
 801e9e0:	4608      	mov	r0, r1
 801e9e2:	4611      	mov	r1, r2
 801e9e4:	461a      	mov	r2, r3
 801e9e6:	4623      	mov	r3, r4
 801e9e8:	80fb      	strh	r3, [r7, #6]
 801e9ea:	4603      	mov	r3, r0
 801e9ec:	80bb      	strh	r3, [r7, #4]
 801e9ee:	460b      	mov	r3, r1
 801e9f0:	807b      	strh	r3, [r7, #2]
 801e9f2:	4613      	mov	r3, r2
 801e9f4:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 801e9f6:	2015      	movs	r0, #21
 801e9f8:	f7ff ff84 	bl	801e904 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 801e9fc:	88fb      	ldrh	r3, [r7, #6]
 801e9fe:	b2db      	uxtb	r3, r3
 801ea00:	4618      	mov	r0, r3
 801ea02:	f7ff ff7f 	bl	801e904 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 801ea06:	887b      	ldrh	r3, [r7, #2]
 801ea08:	b2db      	uxtb	r3, r3
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	f7ff ff7a 	bl	801e904 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 801ea10:	2075      	movs	r0, #117	; 0x75
 801ea12:	f7ff ff77 	bl	801e904 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 801ea16:	88bb      	ldrh	r3, [r7, #4]
 801ea18:	b2db      	uxtb	r3, r3
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	f7ff ff72 	bl	801e904 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 801ea20:	883b      	ldrh	r3, [r7, #0]
 801ea22:	b2db      	uxtb	r3, r3
 801ea24:	4618      	mov	r0, r3
 801ea26:	f7ff ff6d 	bl	801e904 <ssd1362_writeCmd>
}
 801ea2a:	bf00      	nop
 801ea2c:	370c      	adds	r7, #12
 801ea2e:	46bd      	mov	sp, r7
 801ea30:	bd90      	pop	{r4, r7, pc}

0801ea32 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 801ea32:	b480      	push	{r7}
 801ea34:	b083      	sub	sp, #12
 801ea36:	af00      	add	r7, sp, #0
 801ea38:	4603      	mov	r3, r0
 801ea3a:	460a      	mov	r2, r1
 801ea3c:	80fb      	strh	r3, [r7, #6]
 801ea3e:	4613      	mov	r3, r2
 801ea40:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 801ea42:	88fb      	ldrh	r3, [r7, #6]
 801ea44:	085b      	lsrs	r3, r3, #1
 801ea46:	b29a      	uxth	r2, r3
 801ea48:	88bb      	ldrh	r3, [r7, #4]
 801ea4a:	01db      	lsls	r3, r3, #7
 801ea4c:	b29b      	uxth	r3, r3
 801ea4e:	4413      	add	r3, r2
 801ea50:	b29b      	uxth	r3, r3
}
 801ea52:	4618      	mov	r0, r3
 801ea54:	370c      	adds	r7, #12
 801ea56:	46bd      	mov	sp, r7
 801ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea5c:	4770      	bx	lr
	...

0801ea60 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 801ea60:	b590      	push	{r4, r7, lr}
 801ea62:	b085      	sub	sp, #20
 801ea64:	af00      	add	r7, sp, #0
 801ea66:	4603      	mov	r3, r0
 801ea68:	80fb      	strh	r3, [r7, #6]
 801ea6a:	460b      	mov	r3, r1
 801ea6c:	80bb      	strh	r3, [r7, #4]
 801ea6e:	4613      	mov	r3, r2
 801ea70:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 801ea72:	88ba      	ldrh	r2, [r7, #4]
 801ea74:	88fb      	ldrh	r3, [r7, #6]
 801ea76:	4611      	mov	r1, r2
 801ea78:	4618      	mov	r0, r3
 801ea7a:	f7ff ffda 	bl	801ea32 <ssd1362_coordsToAddress>
 801ea7e:	4603      	mov	r3, r0
 801ea80:	08db      	lsrs	r3, r3, #3
 801ea82:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 801ea84:	89fb      	ldrh	r3, [r7, #14]
 801ea86:	4a0b      	ldr	r2, [pc, #44]	; (801eab4 <ssd1362_setPixelChanged+0x54>)
 801ea88:	189c      	adds	r4, r3, r2
 801ea8a:	88ba      	ldrh	r2, [r7, #4]
 801ea8c:	88fb      	ldrh	r3, [r7, #6]
 801ea8e:	4611      	mov	r1, r2
 801ea90:	4618      	mov	r0, r3
 801ea92:	f7ff ffce 	bl	801ea32 <ssd1362_coordsToAddress>
 801ea96:	4603      	mov	r3, r0
 801ea98:	b2db      	uxtb	r3, r3
 801ea9a:	f003 0307 	and.w	r3, r3, #7
 801ea9e:	b2db      	uxtb	r3, r3
 801eaa0:	78fa      	ldrb	r2, [r7, #3]
 801eaa2:	4619      	mov	r1, r3
 801eaa4:	4620      	mov	r0, r4
 801eaa6:	f7ff ff53 	bl	801e950 <bitWrite>
}
 801eaaa:	bf00      	nop
 801eaac:	3714      	adds	r7, #20
 801eaae:	46bd      	mov	sp, r7
 801eab0:	bd90      	pop	{r4, r7, pc}
 801eab2:	bf00      	nop
 801eab4:	24008854 	.word	0x24008854

0801eab8 <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 801eab8:	b590      	push	{r4, r7, lr}
 801eaba:	b085      	sub	sp, #20
 801eabc:	af00      	add	r7, sp, #0
 801eabe:	4604      	mov	r4, r0
 801eac0:	4608      	mov	r0, r1
 801eac2:	4611      	mov	r1, r2
 801eac4:	461a      	mov	r2, r3
 801eac6:	4623      	mov	r3, r4
 801eac8:	80fb      	strh	r3, [r7, #6]
 801eaca:	4603      	mov	r3, r0
 801eacc:	80bb      	strh	r3, [r7, #4]
 801eace:	460b      	mov	r3, r1
 801ead0:	70fb      	strb	r3, [r7, #3]
 801ead2:	4613      	mov	r3, r2
 801ead4:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 801ead6:	88ba      	ldrh	r2, [r7, #4]
 801ead8:	88fb      	ldrh	r3, [r7, #6]
 801eada:	4611      	mov	r1, r2
 801eadc:	4618      	mov	r0, r3
 801eade:	f7ff ffa8 	bl	801ea32 <ssd1362_coordsToAddress>
 801eae2:	4603      	mov	r3, r0
 801eae4:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 801eae6:	88fb      	ldrh	r3, [r7, #6]
 801eae8:	f003 0301 	and.w	r3, r3, #1
 801eaec:	b29b      	uxth	r3, r3
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d113      	bne.n	801eb1a <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 801eaf2:	4a25      	ldr	r2, [pc, #148]	; (801eb88 <ssd1362_drawPixel+0xd0>)
 801eaf4:	68fb      	ldr	r3, [r7, #12]
 801eaf6:	4413      	add	r3, r2
 801eaf8:	781b      	ldrb	r3, [r3, #0]
 801eafa:	b25b      	sxtb	r3, r3
 801eafc:	f003 030f 	and.w	r3, r3, #15
 801eb00:	b25a      	sxtb	r2, r3
 801eb02:	78fb      	ldrb	r3, [r7, #3]
 801eb04:	011b      	lsls	r3, r3, #4
 801eb06:	b25b      	sxtb	r3, r3
 801eb08:	4313      	orrs	r3, r2
 801eb0a:	b25b      	sxtb	r3, r3
 801eb0c:	b2d9      	uxtb	r1, r3
 801eb0e:	4a1e      	ldr	r2, [pc, #120]	; (801eb88 <ssd1362_drawPixel+0xd0>)
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	4413      	add	r3, r2
 801eb14:	460a      	mov	r2, r1
 801eb16:	701a      	strb	r2, [r3, #0]
 801eb18:	e011      	b.n	801eb3e <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 801eb1a:	4a1b      	ldr	r2, [pc, #108]	; (801eb88 <ssd1362_drawPixel+0xd0>)
 801eb1c:	68fb      	ldr	r3, [r7, #12]
 801eb1e:	4413      	add	r3, r2
 801eb20:	781b      	ldrb	r3, [r3, #0]
 801eb22:	b25b      	sxtb	r3, r3
 801eb24:	f023 030f 	bic.w	r3, r3, #15
 801eb28:	b25a      	sxtb	r2, r3
 801eb2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801eb2e:	4313      	orrs	r3, r2
 801eb30:	b25b      	sxtb	r3, r3
 801eb32:	b2d9      	uxtb	r1, r3
 801eb34:	4a14      	ldr	r2, [pc, #80]	; (801eb88 <ssd1362_drawPixel+0xd0>)
 801eb36:	68fb      	ldr	r3, [r7, #12]
 801eb38:	4413      	add	r3, r2
 801eb3a:	460a      	mov	r2, r1
 801eb3c:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 801eb3e:	78bb      	ldrb	r3, [r7, #2]
 801eb40:	2b00      	cmp	r3, #0
 801eb42:	d017      	beq.n	801eb74 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 801eb44:	88fb      	ldrh	r3, [r7, #6]
 801eb46:	085b      	lsrs	r3, r3, #1
 801eb48:	b298      	uxth	r0, r3
 801eb4a:	88fb      	ldrh	r3, [r7, #6]
 801eb4c:	085b      	lsrs	r3, r3, #1
 801eb4e:	b29a      	uxth	r2, r3
 801eb50:	88bb      	ldrh	r3, [r7, #4]
 801eb52:	88b9      	ldrh	r1, [r7, #4]
 801eb54:	f7ff ff40 	bl	801e9d8 <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 801eb58:	4a0b      	ldr	r2, [pc, #44]	; (801eb88 <ssd1362_drawPixel+0xd0>)
 801eb5a:	68fb      	ldr	r3, [r7, #12]
 801eb5c:	4413      	add	r3, r2
 801eb5e:	781b      	ldrb	r3, [r3, #0]
 801eb60:	4618      	mov	r0, r3
 801eb62:	f7ff fee1 	bl	801e928 <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 801eb66:	88b9      	ldrh	r1, [r7, #4]
 801eb68:	88fb      	ldrh	r3, [r7, #6]
 801eb6a:	2200      	movs	r2, #0
 801eb6c:	4618      	mov	r0, r3
 801eb6e:	f7ff ff77 	bl	801ea60 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 801eb72:	e005      	b.n	801eb80 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 801eb74:	88b9      	ldrh	r1, [r7, #4]
 801eb76:	88fb      	ldrh	r3, [r7, #6]
 801eb78:	2201      	movs	r2, #1
 801eb7a:	4618      	mov	r0, r3
 801eb7c:	f7ff ff70 	bl	801ea60 <ssd1362_setPixelChanged>
}
 801eb80:	bf00      	nop
 801eb82:	3714      	adds	r7, #20
 801eb84:	46bd      	mov	sp, r7
 801eb86:	bd90      	pop	{r4, r7, pc}
 801eb88:	24009054 	.word	0x24009054

0801eb8c <ssd1362_drawRect>:

//Draws a rectangle from x1,y1 to x2,y2.
void ssd1362_drawRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, bool display)
{
 801eb8c:	b590      	push	{r4, r7, lr}
 801eb8e:	b087      	sub	sp, #28
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	4604      	mov	r4, r0
 801eb94:	4608      	mov	r0, r1
 801eb96:	4611      	mov	r1, r2
 801eb98:	461a      	mov	r2, r3
 801eb9a:	4623      	mov	r3, r4
 801eb9c:	80fb      	strh	r3, [r7, #6]
 801eb9e:	4603      	mov	r3, r0
 801eba0:	80bb      	strh	r3, [r7, #4]
 801eba2:	460b      	mov	r3, r1
 801eba4:	807b      	strh	r3, [r7, #2]
 801eba6:	4613      	mov	r3, r2
 801eba8:	803b      	strh	r3, [r7, #0]
	uint16_t xMin = MIN(x1, x2); // TODO: double performance by writing whole bytes at a time
 801ebaa:	887a      	ldrh	r2, [r7, #2]
 801ebac:	88fb      	ldrh	r3, [r7, #6]
 801ebae:	4293      	cmp	r3, r2
 801ebb0:	bf28      	it	cs
 801ebb2:	4613      	movcs	r3, r2
 801ebb4:	827b      	strh	r3, [r7, #18]
	uint16_t xMax = MAX(x1, x2);
 801ebb6:	887a      	ldrh	r2, [r7, #2]
 801ebb8:	88fb      	ldrh	r3, [r7, #6]
 801ebba:	4293      	cmp	r3, r2
 801ebbc:	bf38      	it	cc
 801ebbe:	4613      	movcc	r3, r2
 801ebc0:	823b      	strh	r3, [r7, #16]
	uint16_t yMin = MIN(y1, y2);
 801ebc2:	883a      	ldrh	r2, [r7, #0]
 801ebc4:	88bb      	ldrh	r3, [r7, #4]
 801ebc6:	4293      	cmp	r3, r2
 801ebc8:	bf28      	it	cs
 801ebca:	4613      	movcs	r3, r2
 801ebcc:	81fb      	strh	r3, [r7, #14]
	uint16_t yMax = MAX(y1, y2);
 801ebce:	883a      	ldrh	r2, [r7, #0]
 801ebd0:	88bb      	ldrh	r3, [r7, #4]
 801ebd2:	4293      	cmp	r3, r2
 801ebd4:	bf38      	it	cc
 801ebd6:	4613      	movcc	r3, r2
 801ebd8:	81bb      	strh	r3, [r7, #12]
	for (uint16_t x = xMin; x < xMax; x++)
 801ebda:	8a7b      	ldrh	r3, [r7, #18]
 801ebdc:	82fb      	strh	r3, [r7, #22]
 801ebde:	e014      	b.n	801ec0a <ssd1362_drawRect+0x7e>
	{
		for (uint16_t y = yMin; y < yMax; y++)
 801ebe0:	89fb      	ldrh	r3, [r7, #14]
 801ebe2:	82bb      	strh	r3, [r7, #20]
 801ebe4:	e00a      	b.n	801ebfc <ssd1362_drawRect+0x70>
		{
			ssd1362_drawPixel(x, y, color, display);
 801ebe6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ebea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ebee:	8ab9      	ldrh	r1, [r7, #20]
 801ebf0:	8af8      	ldrh	r0, [r7, #22]
 801ebf2:	f7ff ff61 	bl	801eab8 <ssd1362_drawPixel>
		for (uint16_t y = yMin; y < yMax; y++)
 801ebf6:	8abb      	ldrh	r3, [r7, #20]
 801ebf8:	3301      	adds	r3, #1
 801ebfa:	82bb      	strh	r3, [r7, #20]
 801ebfc:	8aba      	ldrh	r2, [r7, #20]
 801ebfe:	89bb      	ldrh	r3, [r7, #12]
 801ec00:	429a      	cmp	r2, r3
 801ec02:	d3f0      	bcc.n	801ebe6 <ssd1362_drawRect+0x5a>
	for (uint16_t x = xMin; x < xMax; x++)
 801ec04:	8afb      	ldrh	r3, [r7, #22]
 801ec06:	3301      	adds	r3, #1
 801ec08:	82fb      	strh	r3, [r7, #22]
 801ec0a:	8afa      	ldrh	r2, [r7, #22]
 801ec0c:	8a3b      	ldrh	r3, [r7, #16]
 801ec0e:	429a      	cmp	r2, r3
 801ec10:	d3e6      	bcc.n	801ebe0 <ssd1362_drawRect+0x54>
		}
	}
}
 801ec12:	bf00      	nop
 801ec14:	bf00      	nop
 801ec16:	371c      	adds	r7, #28
 801ec18:	46bd      	mov	sp, r7
 801ec1a:	bd90      	pop	{r4, r7, pc}

0801ec1c <ssd1362_drawHLine>:

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 801ec1c:	b590      	push	{r4, r7, lr}
 801ec1e:	b085      	sub	sp, #20
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	4604      	mov	r4, r0
 801ec24:	4608      	mov	r0, r1
 801ec26:	4611      	mov	r1, r2
 801ec28:	461a      	mov	r2, r3
 801ec2a:	4623      	mov	r3, r4
 801ec2c:	80fb      	strh	r3, [r7, #6]
 801ec2e:	4603      	mov	r3, r0
 801ec30:	80bb      	strh	r3, [r7, #4]
 801ec32:	460b      	mov	r3, r1
 801ec34:	807b      	strh	r3, [r7, #2]
 801ec36:	4613      	mov	r3, r2
 801ec38:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 801ec3a:	88fb      	ldrh	r3, [r7, #6]
 801ec3c:	60fb      	str	r3, [r7, #12]
 801ec3e:	e00a      	b.n	801ec56 <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 801ec40:	68fb      	ldr	r3, [r7, #12]
 801ec42:	b298      	uxth	r0, r3
 801ec44:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ec48:	787a      	ldrb	r2, [r7, #1]
 801ec4a:	88b9      	ldrh	r1, [r7, #4]
 801ec4c:	f7ff ff34 	bl	801eab8 <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	3301      	adds	r3, #1
 801ec54:	60fb      	str	r3, [r7, #12]
 801ec56:	88fa      	ldrh	r2, [r7, #6]
 801ec58:	887b      	ldrh	r3, [r7, #2]
 801ec5a:	4413      	add	r3, r2
 801ec5c:	461a      	mov	r2, r3
 801ec5e:	68fb      	ldr	r3, [r7, #12]
 801ec60:	4293      	cmp	r3, r2
 801ec62:	d3ed      	bcc.n	801ec40 <ssd1362_drawHLine+0x24>
	}
}
 801ec64:	bf00      	nop
 801ec66:	bf00      	nop
 801ec68:	3714      	adds	r7, #20
 801ec6a:	46bd      	mov	sp, r7
 801ec6c:	bd90      	pop	{r4, r7, pc}

0801ec6e <ssd1362_drawVLine>:

void ssd1362_drawVLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
{
 801ec6e:	b590      	push	{r4, r7, lr}
 801ec70:	b085      	sub	sp, #20
 801ec72:	af00      	add	r7, sp, #0
 801ec74:	4604      	mov	r4, r0
 801ec76:	4608      	mov	r0, r1
 801ec78:	4611      	mov	r1, r2
 801ec7a:	461a      	mov	r2, r3
 801ec7c:	4623      	mov	r3, r4
 801ec7e:	80fb      	strh	r3, [r7, #6]
 801ec80:	4603      	mov	r3, r0
 801ec82:	80bb      	strh	r3, [r7, #4]
 801ec84:	460b      	mov	r3, r1
 801ec86:	807b      	strh	r3, [r7, #2]
 801ec88:	4613      	mov	r3, r2
 801ec8a:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = y; i < y+length; i++)
 801ec8c:	88bb      	ldrh	r3, [r7, #4]
 801ec8e:	60fb      	str	r3, [r7, #12]
 801ec90:	e00a      	b.n	801eca8 <ssd1362_drawVLine+0x3a>
	{
		ssd1362_drawPixel(x, i, color, display);
 801ec92:	68fb      	ldr	r3, [r7, #12]
 801ec94:	b299      	uxth	r1, r3
 801ec96:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ec9a:	787a      	ldrb	r2, [r7, #1]
 801ec9c:	88f8      	ldrh	r0, [r7, #6]
 801ec9e:	f7ff ff0b 	bl	801eab8 <ssd1362_drawPixel>
	for (uint32_t i = y; i < y+length; i++)
 801eca2:	68fb      	ldr	r3, [r7, #12]
 801eca4:	3301      	adds	r3, #1
 801eca6:	60fb      	str	r3, [r7, #12]
 801eca8:	88ba      	ldrh	r2, [r7, #4]
 801ecaa:	887b      	ldrh	r3, [r7, #2]
 801ecac:	4413      	add	r3, r2
 801ecae:	461a      	mov	r2, r3
 801ecb0:	68fb      	ldr	r3, [r7, #12]
 801ecb2:	4293      	cmp	r3, r2
 801ecb4:	d3ed      	bcc.n	801ec92 <ssd1362_drawVLine+0x24>
	}
}
 801ecb6:	bf00      	nop
 801ecb8:	bf00      	nop
 801ecba:	3714      	adds	r7, #20
 801ecbc:	46bd      	mov	sp, r7
 801ecbe:	bd90      	pop	{r4, r7, pc}

0801ecc0 <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 801ecc0:	b590      	push	{r4, r7, lr}
 801ecc2:	b085      	sub	sp, #20
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	4604      	mov	r4, r0
 801ecc8:	4608      	mov	r0, r1
 801ecca:	4611      	mov	r1, r2
 801eccc:	461a      	mov	r2, r3
 801ecce:	4623      	mov	r3, r4
 801ecd0:	80fb      	strh	r3, [r7, #6]
 801ecd2:	4603      	mov	r3, r0
 801ecd4:	80bb      	strh	r3, [r7, #4]
 801ecd6:	460b      	mov	r3, r1
 801ecd8:	70fb      	strb	r3, [r7, #3]
 801ecda:	4613      	mov	r3, r2
 801ecdc:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 801ecde:	2300      	movs	r3, #0
 801ece0:	60fb      	str	r3, [r7, #12]
 801ece2:	e016      	b.n	801ed12 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	b2da      	uxtb	r2, r3
 801ece8:	1cfb      	adds	r3, r7, #3
 801ecea:	4611      	mov	r1, r2
 801ecec:	4618      	mov	r0, r3
 801ecee:	f7ff fe5d 	bl	801e9ac <bitRead>
 801ecf2:	4603      	mov	r3, r0
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	d009      	beq.n	801ed0c <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 801ecf8:	68fb      	ldr	r3, [r7, #12]
 801ecfa:	b29a      	uxth	r2, r3
 801ecfc:	88fb      	ldrh	r3, [r7, #6]
 801ecfe:	4413      	add	r3, r2
 801ed00:	b298      	uxth	r0, r3
 801ed02:	78ba      	ldrb	r2, [r7, #2]
 801ed04:	88b9      	ldrh	r1, [r7, #4]
 801ed06:	2300      	movs	r3, #0
 801ed08:	f7ff fed6 	bl	801eab8 <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 801ed0c:	68fb      	ldr	r3, [r7, #12]
 801ed0e:	3301      	adds	r3, #1
 801ed10:	60fb      	str	r3, [r7, #12]
 801ed12:	68fb      	ldr	r3, [r7, #12]
 801ed14:	2b07      	cmp	r3, #7
 801ed16:	d9e5      	bls.n	801ece4 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 801ed18:	bf00      	nop
 801ed1a:	bf00      	nop
 801ed1c:	3714      	adds	r7, #20
 801ed1e:	46bd      	mov	sp, r7
 801ed20:	bd90      	pop	{r4, r7, pc}
	...

0801ed24 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801ed24:	b590      	push	{r4, r7, lr}
 801ed26:	b085      	sub	sp, #20
 801ed28:	af00      	add	r7, sp, #0
 801ed2a:	4604      	mov	r4, r0
 801ed2c:	4608      	mov	r0, r1
 801ed2e:	4611      	mov	r1, r2
 801ed30:	461a      	mov	r2, r3
 801ed32:	4623      	mov	r3, r4
 801ed34:	80fb      	strh	r3, [r7, #6]
 801ed36:	4603      	mov	r3, r0
 801ed38:	80bb      	strh	r3, [r7, #4]
 801ed3a:	460b      	mov	r3, r1
 801ed3c:	70fb      	strb	r3, [r7, #3]
 801ed3e:	4613      	mov	r3, r2
 801ed40:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 801ed42:	2300      	movs	r3, #0
 801ed44:	60fb      	str	r3, [r7, #12]
 801ed46:	e012      	b.n	801ed6e <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 801ed48:	68fb      	ldr	r3, [r7, #12]
 801ed4a:	b29a      	uxth	r2, r3
 801ed4c:	88bb      	ldrh	r3, [r7, #4]
 801ed4e:	4413      	add	r3, r2
 801ed50:	b299      	uxth	r1, r3
 801ed52:	78fb      	ldrb	r3, [r7, #3]
 801ed54:	4a0a      	ldr	r2, [pc, #40]	; (801ed80 <ssd1362_drawChar+0x5c>)
 801ed56:	00db      	lsls	r3, r3, #3
 801ed58:	441a      	add	r2, r3
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	4413      	add	r3, r2
 801ed5e:	781a      	ldrb	r2, [r3, #0]
 801ed60:	78bb      	ldrb	r3, [r7, #2]
 801ed62:	88f8      	ldrh	r0, [r7, #6]
 801ed64:	f7ff ffac 	bl	801ecc0 <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 801ed68:	68fb      	ldr	r3, [r7, #12]
 801ed6a:	3301      	adds	r3, #1
 801ed6c:	60fb      	str	r3, [r7, #12]
 801ed6e:	68fb      	ldr	r3, [r7, #12]
 801ed70:	2b07      	cmp	r3, #7
 801ed72:	d9e9      	bls.n	801ed48 <ssd1362_drawChar+0x24>
	}
}
 801ed74:	bf00      	nop
 801ed76:	bf00      	nop
 801ed78:	3714      	adds	r7, #20
 801ed7a:	46bd      	mov	sp, r7
 801ed7c:	bd90      	pop	{r4, r7, pc}
 801ed7e:	bf00      	nop
 801ed80:	24003044 	.word	0x24003044

0801ed84 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 801ed84:	b580      	push	{r7, lr}
 801ed86:	b086      	sub	sp, #24
 801ed88:	af00      	add	r7, sp, #0
 801ed8a:	60ba      	str	r2, [r7, #8]
 801ed8c:	461a      	mov	r2, r3
 801ed8e:	4603      	mov	r3, r0
 801ed90:	81fb      	strh	r3, [r7, #14]
 801ed92:	460b      	mov	r3, r1
 801ed94:	81bb      	strh	r3, [r7, #12]
 801ed96:	4613      	mov	r3, r2
 801ed98:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 801ed9a:	2300      	movs	r3, #0
 801ed9c:	827b      	strh	r3, [r7, #18]
	if(size==16)
 801ed9e:	6a3b      	ldr	r3, [r7, #32]
 801eda0:	2b10      	cmp	r3, #16
 801eda2:	d11a      	bne.n	801edda <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801eda4:	68bb      	ldr	r3, [r7, #8]
 801eda6:	617b      	str	r3, [r7, #20]
 801eda8:	e011      	b.n	801edce <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 801edaa:	89fa      	ldrh	r2, [r7, #14]
 801edac:	8a7b      	ldrh	r3, [r7, #18]
 801edae:	4413      	add	r3, r2
 801edb0:	b298      	uxth	r0, r3
 801edb2:	697b      	ldr	r3, [r7, #20]
 801edb4:	f993 3000 	ldrsb.w	r3, [r3]
 801edb8:	b2da      	uxtb	r2, r3
 801edba:	79fb      	ldrb	r3, [r7, #7]
 801edbc:	89b9      	ldrh	r1, [r7, #12]
 801edbe:	f000 f861 	bl	801ee84 <ssd1362_drawChar16>
			xOffset += 8;
 801edc2:	8a7b      	ldrh	r3, [r7, #18]
 801edc4:	3308      	adds	r3, #8
 801edc6:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801edc8:	697b      	ldr	r3, [r7, #20]
 801edca:	3301      	adds	r3, #1
 801edcc:	617b      	str	r3, [r7, #20]
 801edce:	697b      	ldr	r3, [r7, #20]
 801edd0:	f993 3000 	ldrsb.w	r3, [r3]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d1e8      	bne.n	801edaa <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 801edd8:	e037      	b.n	801ee4a <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 801edda:	6a3b      	ldr	r3, [r7, #32]
 801eddc:	2b20      	cmp	r3, #32
 801edde:	d11a      	bne.n	801ee16 <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ede0:	68bb      	ldr	r3, [r7, #8]
 801ede2:	617b      	str	r3, [r7, #20]
 801ede4:	e011      	b.n	801ee0a <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 801ede6:	89fa      	ldrh	r2, [r7, #14]
 801ede8:	8a7b      	ldrh	r3, [r7, #18]
 801edea:	4413      	add	r3, r2
 801edec:	b298      	uxth	r0, r3
 801edee:	697b      	ldr	r3, [r7, #20]
 801edf0:	f993 3000 	ldrsb.w	r3, [r3]
 801edf4:	b2da      	uxtb	r2, r3
 801edf6:	79fb      	ldrb	r3, [r7, #7]
 801edf8:	89b9      	ldrh	r1, [r7, #12]
 801edfa:	f000 f887 	bl	801ef0c <ssd1362_drawChar32>
			xOffset += 16;
 801edfe:	8a7b      	ldrh	r3, [r7, #18]
 801ee00:	3310      	adds	r3, #16
 801ee02:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ee04:	697b      	ldr	r3, [r7, #20]
 801ee06:	3301      	adds	r3, #1
 801ee08:	617b      	str	r3, [r7, #20]
 801ee0a:	697b      	ldr	r3, [r7, #20]
 801ee0c:	f993 3000 	ldrsb.w	r3, [r3]
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d1e8      	bne.n	801ede6 <ssd1362_drawCharArray+0x62>
}
 801ee14:	e019      	b.n	801ee4a <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ee16:	68bb      	ldr	r3, [r7, #8]
 801ee18:	617b      	str	r3, [r7, #20]
 801ee1a:	e011      	b.n	801ee40 <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 801ee1c:	89fa      	ldrh	r2, [r7, #14]
 801ee1e:	8a7b      	ldrh	r3, [r7, #18]
 801ee20:	4413      	add	r3, r2
 801ee22:	b298      	uxth	r0, r3
 801ee24:	697b      	ldr	r3, [r7, #20]
 801ee26:	f993 3000 	ldrsb.w	r3, [r3]
 801ee2a:	b2da      	uxtb	r2, r3
 801ee2c:	79fb      	ldrb	r3, [r7, #7]
 801ee2e:	89b9      	ldrh	r1, [r7, #12]
 801ee30:	f7ff ff78 	bl	801ed24 <ssd1362_drawChar>
			xOffset += 8;
 801ee34:	8a7b      	ldrh	r3, [r7, #18]
 801ee36:	3308      	adds	r3, #8
 801ee38:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ee3a:	697b      	ldr	r3, [r7, #20]
 801ee3c:	3301      	adds	r3, #1
 801ee3e:	617b      	str	r3, [r7, #20]
 801ee40:	697b      	ldr	r3, [r7, #20]
 801ee42:	f993 3000 	ldrsb.w	r3, [r3]
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d1e8      	bne.n	801ee1c <ssd1362_drawCharArray+0x98>
}
 801ee4a:	bf00      	nop
 801ee4c:	3718      	adds	r7, #24
 801ee4e:	46bd      	mov	sp, r7
 801ee50:	bd80      	pop	{r7, pc}

0801ee52 <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 801ee52:	b580      	push	{r7, lr}
 801ee54:	b086      	sub	sp, #24
 801ee56:	af02      	add	r7, sp, #8
 801ee58:	60ba      	str	r2, [r7, #8]
 801ee5a:	461a      	mov	r2, r3
 801ee5c:	4603      	mov	r3, r0
 801ee5e:	81fb      	strh	r3, [r7, #14]
 801ee60:	460b      	mov	r3, r1
 801ee62:	81bb      	strh	r3, [r7, #12]
 801ee64:	4613      	mov	r3, r2
 801ee66:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 801ee68:	79fa      	ldrb	r2, [r7, #7]
 801ee6a:	89b9      	ldrh	r1, [r7, #12]
 801ee6c:	89f8      	ldrh	r0, [r7, #14]
 801ee6e:	69bb      	ldr	r3, [r7, #24]
 801ee70:	9300      	str	r3, [sp, #0]
 801ee72:	4613      	mov	r3, r2
 801ee74:	68ba      	ldr	r2, [r7, #8]
 801ee76:	f7ff ff85 	bl	801ed84 <ssd1362_drawCharArray>
}
 801ee7a:	bf00      	nop
 801ee7c:	3710      	adds	r7, #16
 801ee7e:	46bd      	mov	sp, r7
 801ee80:	bd80      	pop	{r7, pc}
	...

0801ee84 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801ee84:	b590      	push	{r4, r7, lr}
 801ee86:	b085      	sub	sp, #20
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	4604      	mov	r4, r0
 801ee8c:	4608      	mov	r0, r1
 801ee8e:	4611      	mov	r1, r2
 801ee90:	461a      	mov	r2, r3
 801ee92:	4623      	mov	r3, r4
 801ee94:	80fb      	strh	r3, [r7, #6]
 801ee96:	4603      	mov	r3, r0
 801ee98:	80bb      	strh	r3, [r7, #4]
 801ee9a:	460b      	mov	r3, r1
 801ee9c:	70fb      	strb	r3, [r7, #3]
 801ee9e:	4613      	mov	r3, r2
 801eea0:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 801eea2:	2300      	movs	r3, #0
 801eea4:	60fb      	str	r3, [r7, #12]
 801eea6:	e027      	b.n	801eef8 <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	b29a      	uxth	r2, r3
 801eeac:	88bb      	ldrh	r3, [r7, #4]
 801eeae:	4413      	add	r3, r2
 801eeb0:	b299      	uxth	r1, r3
 801eeb2:	78fa      	ldrb	r2, [r7, #3]
 801eeb4:	68fb      	ldr	r3, [r7, #12]
 801eeb6:	005b      	lsls	r3, r3, #1
 801eeb8:	4813      	ldr	r0, [pc, #76]	; (801ef08 <ssd1362_drawChar16+0x84>)
 801eeba:	0152      	lsls	r2, r2, #5
 801eebc:	4402      	add	r2, r0
 801eebe:	4413      	add	r3, r2
 801eec0:	781a      	ldrb	r2, [r3, #0]
 801eec2:	78bb      	ldrb	r3, [r7, #2]
 801eec4:	88f8      	ldrh	r0, [r7, #6]
 801eec6:	f7ff fefb 	bl	801ecc0 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 801eeca:	88fb      	ldrh	r3, [r7, #6]
 801eecc:	3308      	adds	r3, #8
 801eece:	b298      	uxth	r0, r3
 801eed0:	68fb      	ldr	r3, [r7, #12]
 801eed2:	b29a      	uxth	r2, r3
 801eed4:	88bb      	ldrh	r3, [r7, #4]
 801eed6:	4413      	add	r3, r2
 801eed8:	b299      	uxth	r1, r3
 801eeda:	78fa      	ldrb	r2, [r7, #3]
 801eedc:	68fb      	ldr	r3, [r7, #12]
 801eede:	005b      	lsls	r3, r3, #1
 801eee0:	3301      	adds	r3, #1
 801eee2:	4c09      	ldr	r4, [pc, #36]	; (801ef08 <ssd1362_drawChar16+0x84>)
 801eee4:	0152      	lsls	r2, r2, #5
 801eee6:	4422      	add	r2, r4
 801eee8:	4413      	add	r3, r2
 801eeea:	781a      	ldrb	r2, [r3, #0]
 801eeec:	78bb      	ldrb	r3, [r7, #2]
 801eeee:	f7ff fee7 	bl	801ecc0 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	3301      	adds	r3, #1
 801eef6:	60fb      	str	r3, [r7, #12]
 801eef8:	68fb      	ldr	r3, [r7, #12]
 801eefa:	2b0f      	cmp	r3, #15
 801eefc:	d9d4      	bls.n	801eea8 <ssd1362_drawChar16+0x24>
	}
}
 801eefe:	bf00      	nop
 801ef00:	bf00      	nop
 801ef02:	3714      	adds	r7, #20
 801ef04:	46bd      	mov	sp, r7
 801ef06:	bd90      	pop	{r4, r7, pc}
 801ef08:	24000044 	.word	0x24000044

0801ef0c <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801ef0c:	b590      	push	{r4, r7, lr}
 801ef0e:	b085      	sub	sp, #20
 801ef10:	af00      	add	r7, sp, #0
 801ef12:	4604      	mov	r4, r0
 801ef14:	4608      	mov	r0, r1
 801ef16:	4611      	mov	r1, r2
 801ef18:	461a      	mov	r2, r3
 801ef1a:	4623      	mov	r3, r4
 801ef1c:	80fb      	strh	r3, [r7, #6]
 801ef1e:	4603      	mov	r3, r0
 801ef20:	80bb      	strh	r3, [r7, #4]
 801ef22:	460b      	mov	r3, r1
 801ef24:	70fb      	strb	r3, [r7, #3]
 801ef26:	4613      	mov	r3, r2
 801ef28:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 801ef2a:	2300      	movs	r3, #0
 801ef2c:	60fb      	str	r3, [r7, #12]
 801ef2e:	e027      	b.n	801ef80 <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	b29a      	uxth	r2, r3
 801ef34:	88bb      	ldrh	r3, [r7, #4]
 801ef36:	4413      	add	r3, r2
 801ef38:	b299      	uxth	r1, r3
 801ef3a:	78fa      	ldrb	r2, [r7, #3]
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	005b      	lsls	r3, r3, #1
 801ef40:	4813      	ldr	r0, [pc, #76]	; (801ef90 <ssd1362_drawChar32+0x84>)
 801ef42:	0192      	lsls	r2, r2, #6
 801ef44:	4402      	add	r2, r0
 801ef46:	4413      	add	r3, r2
 801ef48:	781a      	ldrb	r2, [r3, #0]
 801ef4a:	78bb      	ldrb	r3, [r7, #2]
 801ef4c:	88f8      	ldrh	r0, [r7, #6]
 801ef4e:	f7ff feb7 	bl	801ecc0 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 801ef52:	88fb      	ldrh	r3, [r7, #6]
 801ef54:	3308      	adds	r3, #8
 801ef56:	b298      	uxth	r0, r3
 801ef58:	68fb      	ldr	r3, [r7, #12]
 801ef5a:	b29a      	uxth	r2, r3
 801ef5c:	88bb      	ldrh	r3, [r7, #4]
 801ef5e:	4413      	add	r3, r2
 801ef60:	b299      	uxth	r1, r3
 801ef62:	78fa      	ldrb	r2, [r7, #3]
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	005b      	lsls	r3, r3, #1
 801ef68:	3301      	adds	r3, #1
 801ef6a:	4c09      	ldr	r4, [pc, #36]	; (801ef90 <ssd1362_drawChar32+0x84>)
 801ef6c:	0192      	lsls	r2, r2, #6
 801ef6e:	4422      	add	r2, r4
 801ef70:	4413      	add	r3, r2
 801ef72:	781a      	ldrb	r2, [r3, #0]
 801ef74:	78bb      	ldrb	r3, [r7, #2]
 801ef76:	f7ff fea3 	bl	801ecc0 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 801ef7a:	68fb      	ldr	r3, [r7, #12]
 801ef7c:	3301      	adds	r3, #1
 801ef7e:	60fb      	str	r3, [r7, #12]
 801ef80:	68fb      	ldr	r3, [r7, #12]
 801ef82:	2b1f      	cmp	r3, #31
 801ef84:	d9d4      	bls.n	801ef30 <ssd1362_drawChar32+0x24>
	}
}
 801ef86:	bf00      	nop
 801ef88:	bf00      	nop
 801ef8a:	3714      	adds	r7, #20
 801ef8c:	46bd      	mov	sp, r7
 801ef8e:	bd90      	pop	{r4, r7, pc}
 801ef90:	24001044 	.word	0x24001044

0801ef94 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 801ef94:	b580      	push	{r7, lr}
 801ef96:	b082      	sub	sp, #8
 801ef98:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	607b      	str	r3, [r7, #4]
 801ef9e:	e01a      	b.n	801efd6 <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 801efa0:	4a11      	ldr	r2, [pc, #68]	; (801efe8 <ssd1362_clearBuffer+0x54>)
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	4413      	add	r3, r2
 801efa6:	781b      	ldrb	r3, [r3, #0]
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d011      	beq.n	801efd0 <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 801efac:	4a0e      	ldr	r2, [pc, #56]	; (801efe8 <ssd1362_clearBuffer+0x54>)
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	4413      	add	r3, r2
 801efb2:	2200      	movs	r2, #0
 801efb4:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	08db      	lsrs	r3, r3, #3
 801efba:	4a0c      	ldr	r2, [pc, #48]	; (801efec <ssd1362_clearBuffer+0x58>)
 801efbc:	1898      	adds	r0, r3, r2
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	b2db      	uxtb	r3, r3
 801efc2:	f003 0307 	and.w	r3, r3, #7
 801efc6:	b2db      	uxtb	r3, r3
 801efc8:	2201      	movs	r2, #1
 801efca:	4619      	mov	r1, r3
 801efcc:	f7ff fcc0 	bl	801e950 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	3301      	adds	r3, #1
 801efd4:	607b      	str	r3, [r7, #4]
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801efdc:	d3e0      	bcc.n	801efa0 <ssd1362_clearBuffer+0xc>
		}
	}
}
 801efde:	bf00      	nop
 801efe0:	bf00      	nop
 801efe2:	3708      	adds	r7, #8
 801efe4:	46bd      	mov	sp, r7
 801efe6:	bd80      	pop	{r7, pc}
 801efe8:	24009054 	.word	0x24009054
 801efec:	24008854 	.word	0x24008854

0801eff0 <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 801eff0:	b580      	push	{r7, lr}
 801eff2:	b082      	sub	sp, #8
 801eff4:	af00      	add	r7, sp, #0
	ssd1362_setWriteZone(0, 0, (SSD1362_WIDTH / 2) - 1, SSD1362_HEIGHT - 1); //Full display
 801eff6:	233f      	movs	r3, #63	; 0x3f
 801eff8:	227f      	movs	r2, #127	; 0x7f
 801effa:	2100      	movs	r1, #0
 801effc:	2000      	movs	r0, #0
 801effe:	f7ff fceb 	bl	801e9d8 <ssd1362_setWriteZone>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801f002:	2300      	movs	r3, #0
 801f004:	607b      	str	r3, [r7, #4]
 801f006:	e009      	b.n	801f01c <ssd1362_writeFullBuffer+0x2c>
	{
		ssd1362_writeData(frameBuffer[i]);
 801f008:	4a10      	ldr	r2, [pc, #64]	; (801f04c <ssd1362_writeFullBuffer+0x5c>)
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	4413      	add	r3, r2
 801f00e:	781b      	ldrb	r3, [r3, #0]
 801f010:	4618      	mov	r0, r3
 801f012:	f7ff fc89 	bl	801e928 <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	3301      	adds	r3, #1
 801f01a:	607b      	str	r3, [r7, #4]
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f022:	d3f1      	bcc.n	801f008 <ssd1362_writeFullBuffer+0x18>
	}
	for (uint32_t i = 0; i < 1024; i++)
 801f024:	2300      	movs	r3, #0
 801f026:	603b      	str	r3, [r7, #0]
 801f028:	e007      	b.n	801f03a <ssd1362_writeFullBuffer+0x4a>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 801f02a:	4a09      	ldr	r2, [pc, #36]	; (801f050 <ssd1362_writeFullBuffer+0x60>)
 801f02c:	683b      	ldr	r3, [r7, #0]
 801f02e:	4413      	add	r3, r2
 801f030:	2200      	movs	r2, #0
 801f032:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 801f034:	683b      	ldr	r3, [r7, #0]
 801f036:	3301      	adds	r3, #1
 801f038:	603b      	str	r3, [r7, #0]
 801f03a:	683b      	ldr	r3, [r7, #0]
 801f03c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f040:	d3f3      	bcc.n	801f02a <ssd1362_writeFullBuffer+0x3a>
	}
}
 801f042:	bf00      	nop
 801f044:	bf00      	nop
 801f046:	3708      	adds	r7, #8
 801f048:	46bd      	mov	sp, r7
 801f04a:	bd80      	pop	{r7, pc}
 801f04c:	24009054 	.word	0x24009054
 801f050:	24008854 	.word	0x24008854

0801f054 <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 801f054:	b580      	push	{r7, lr}
 801f056:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 801f058:	f7ff fc3c 	bl	801e8d4 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 801f05c:	2064      	movs	r0, #100	; 0x64
 801f05e:	f7e5 f921 	bl	80042a4 <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 801f062:	20fd      	movs	r0, #253	; 0xfd
 801f064:	f7ff fc4e 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 801f068:	2012      	movs	r0, #18
 801f06a:	f7ff fc4b 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 801f06e:	20ae      	movs	r0, #174	; 0xae
 801f070:	f7ff fc48 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 801f074:	2015      	movs	r0, #21
 801f076:	f7ff fc45 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 801f07a:	2000      	movs	r0, #0
 801f07c:	f7ff fc42 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 801f080:	207f      	movs	r0, #127	; 0x7f
 801f082:	f7ff fc3f 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 801f086:	2075      	movs	r0, #117	; 0x75
 801f088:	f7ff fc3c 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 801f08c:	2000      	movs	r0, #0
 801f08e:	f7ff fc39 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 801f092:	203f      	movs	r0, #63	; 0x3f
 801f094:	f7ff fc36 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 801f098:	2081      	movs	r0, #129	; 0x81
 801f09a:	f7ff fc33 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 801f09e:	202f      	movs	r0, #47	; 0x2f
 801f0a0:	f7ff fc30 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 801f0a4:	20a0      	movs	r0, #160	; 0xa0
 801f0a6:	f7ff fc2d 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 801f0aa:	20c3      	movs	r0, #195	; 0xc3
 801f0ac:	f7ff fc2a 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 801f0b0:	20a1      	movs	r0, #161	; 0xa1
 801f0b2:	f7ff fc27 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801f0b6:	2000      	movs	r0, #0
 801f0b8:	f7ff fc24 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 801f0bc:	20a2      	movs	r0, #162	; 0xa2
 801f0be:	f7ff fc21 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801f0c2:	2000      	movs	r0, #0
 801f0c4:	f7ff fc1e 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 801f0c8:	20a4      	movs	r0, #164	; 0xa4
 801f0ca:	f7ff fc1b 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 801f0ce:	20a8      	movs	r0, #168	; 0xa8
 801f0d0:	f7ff fc18 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 801f0d4:	203f      	movs	r0, #63	; 0x3f
 801f0d6:	f7ff fc15 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 801f0da:	20ab      	movs	r0, #171	; 0xab
 801f0dc:	f7ff fc12 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 801f0e0:	2001      	movs	r0, #1
 801f0e2:	f7ff fc0f 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 801f0e6:	20ad      	movs	r0, #173	; 0xad
 801f0e8:	f7ff fc0c 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 801f0ec:	208e      	movs	r0, #142	; 0x8e
 801f0ee:	f7ff fc09 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 801f0f2:	20b1      	movs	r0, #177	; 0xb1
 801f0f4:	f7ff fc06 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 801f0f8:	2022      	movs	r0, #34	; 0x22
 801f0fa:	f7ff fc03 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 801f0fe:	20b3      	movs	r0, #179	; 0xb3
 801f100:	f7ff fc00 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 801f104:	20a0      	movs	r0, #160	; 0xa0
 801f106:	f7ff fbfd 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 801f10a:	20b6      	movs	r0, #182	; 0xb6
 801f10c:	f7ff fbfa 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 801f110:	2004      	movs	r0, #4
 801f112:	f7ff fbf7 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 801f116:	20b9      	movs	r0, #185	; 0xb9
 801f118:	f7ff fbf4 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 801f11c:	20bc      	movs	r0, #188	; 0xbc
 801f11e:	f7ff fbf1 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 801f122:	2010      	movs	r0, #16
 801f124:	f7ff fbee 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 801f128:	20bd      	movs	r0, #189	; 0xbd
 801f12a:	f7ff fbeb 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 801f12e:	2001      	movs	r0, #1
 801f130:	f7ff fbe8 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 801f134:	20be      	movs	r0, #190	; 0xbe
 801f136:	f7ff fbe5 	bl	801e904 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 801f13a:	2007      	movs	r0, #7
 801f13c:	f7ff fbe2 	bl	801e904 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 801f140:	20af      	movs	r0, #175	; 0xaf
 801f142:	f7ff fbdf 	bl	801e904 <ssd1362_writeCmd>
}
 801f146:	bf00      	nop
 801f148:	bd80      	pop	{r7, pc}
	...

0801f14c <__libc_init_array>:
 801f14c:	b570      	push	{r4, r5, r6, lr}
 801f14e:	4d0d      	ldr	r5, [pc, #52]	; (801f184 <__libc_init_array+0x38>)
 801f150:	4c0d      	ldr	r4, [pc, #52]	; (801f188 <__libc_init_array+0x3c>)
 801f152:	1b64      	subs	r4, r4, r5
 801f154:	10a4      	asrs	r4, r4, #2
 801f156:	2600      	movs	r6, #0
 801f158:	42a6      	cmp	r6, r4
 801f15a:	d109      	bne.n	801f170 <__libc_init_array+0x24>
 801f15c:	4d0b      	ldr	r5, [pc, #44]	; (801f18c <__libc_init_array+0x40>)
 801f15e:	4c0c      	ldr	r4, [pc, #48]	; (801f190 <__libc_init_array+0x44>)
 801f160:	f005 fdcc 	bl	8024cfc <_init>
 801f164:	1b64      	subs	r4, r4, r5
 801f166:	10a4      	asrs	r4, r4, #2
 801f168:	2600      	movs	r6, #0
 801f16a:	42a6      	cmp	r6, r4
 801f16c:	d105      	bne.n	801f17a <__libc_init_array+0x2e>
 801f16e:	bd70      	pop	{r4, r5, r6, pc}
 801f170:	f855 3b04 	ldr.w	r3, [r5], #4
 801f174:	4798      	blx	r3
 801f176:	3601      	adds	r6, #1
 801f178:	e7ee      	b.n	801f158 <__libc_init_array+0xc>
 801f17a:	f855 3b04 	ldr.w	r3, [r5], #4
 801f17e:	4798      	blx	r3
 801f180:	3601      	adds	r6, #1
 801f182:	e7f2      	b.n	801f16a <__libc_init_array+0x1e>
 801f184:	0802a2e0 	.word	0x0802a2e0
 801f188:	0802a2e0 	.word	0x0802a2e0
 801f18c:	0802a2e0 	.word	0x0802a2e0
 801f190:	0802a2e4 	.word	0x0802a2e4

0801f194 <malloc>:
 801f194:	4b02      	ldr	r3, [pc, #8]	; (801f1a0 <malloc+0xc>)
 801f196:	4601      	mov	r1, r0
 801f198:	6818      	ldr	r0, [r3, #0]
 801f19a:	f000 b891 	b.w	801f2c0 <_malloc_r>
 801f19e:	bf00      	nop
 801f1a0:	24003444 	.word	0x24003444

0801f1a4 <memcmp>:
 801f1a4:	b530      	push	{r4, r5, lr}
 801f1a6:	3901      	subs	r1, #1
 801f1a8:	2400      	movs	r4, #0
 801f1aa:	42a2      	cmp	r2, r4
 801f1ac:	d101      	bne.n	801f1b2 <memcmp+0xe>
 801f1ae:	2000      	movs	r0, #0
 801f1b0:	e005      	b.n	801f1be <memcmp+0x1a>
 801f1b2:	5d03      	ldrb	r3, [r0, r4]
 801f1b4:	3401      	adds	r4, #1
 801f1b6:	5d0d      	ldrb	r5, [r1, r4]
 801f1b8:	42ab      	cmp	r3, r5
 801f1ba:	d0f6      	beq.n	801f1aa <memcmp+0x6>
 801f1bc:	1b58      	subs	r0, r3, r5
 801f1be:	bd30      	pop	{r4, r5, pc}

0801f1c0 <memcpy>:
 801f1c0:	440a      	add	r2, r1
 801f1c2:	4291      	cmp	r1, r2
 801f1c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801f1c8:	d100      	bne.n	801f1cc <memcpy+0xc>
 801f1ca:	4770      	bx	lr
 801f1cc:	b510      	push	{r4, lr}
 801f1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f1d6:	4291      	cmp	r1, r2
 801f1d8:	d1f9      	bne.n	801f1ce <memcpy+0xe>
 801f1da:	bd10      	pop	{r4, pc}

0801f1dc <memmove>:
 801f1dc:	4288      	cmp	r0, r1
 801f1de:	b510      	push	{r4, lr}
 801f1e0:	eb01 0402 	add.w	r4, r1, r2
 801f1e4:	d902      	bls.n	801f1ec <memmove+0x10>
 801f1e6:	4284      	cmp	r4, r0
 801f1e8:	4623      	mov	r3, r4
 801f1ea:	d807      	bhi.n	801f1fc <memmove+0x20>
 801f1ec:	1e43      	subs	r3, r0, #1
 801f1ee:	42a1      	cmp	r1, r4
 801f1f0:	d008      	beq.n	801f204 <memmove+0x28>
 801f1f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f1f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f1fa:	e7f8      	b.n	801f1ee <memmove+0x12>
 801f1fc:	4402      	add	r2, r0
 801f1fe:	4601      	mov	r1, r0
 801f200:	428a      	cmp	r2, r1
 801f202:	d100      	bne.n	801f206 <memmove+0x2a>
 801f204:	bd10      	pop	{r4, pc}
 801f206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f20a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f20e:	e7f7      	b.n	801f200 <memmove+0x24>

0801f210 <memset>:
 801f210:	4402      	add	r2, r0
 801f212:	4603      	mov	r3, r0
 801f214:	4293      	cmp	r3, r2
 801f216:	d100      	bne.n	801f21a <memset+0xa>
 801f218:	4770      	bx	lr
 801f21a:	f803 1b01 	strb.w	r1, [r3], #1
 801f21e:	e7f9      	b.n	801f214 <memset+0x4>

0801f220 <_free_r>:
 801f220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f222:	2900      	cmp	r1, #0
 801f224:	d048      	beq.n	801f2b8 <_free_r+0x98>
 801f226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f22a:	9001      	str	r0, [sp, #4]
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	f1a1 0404 	sub.w	r4, r1, #4
 801f232:	bfb8      	it	lt
 801f234:	18e4      	addlt	r4, r4, r3
 801f236:	f003 fb21 	bl	802287c <__malloc_lock>
 801f23a:	4a20      	ldr	r2, [pc, #128]	; (801f2bc <_free_r+0x9c>)
 801f23c:	9801      	ldr	r0, [sp, #4]
 801f23e:	6813      	ldr	r3, [r2, #0]
 801f240:	4615      	mov	r5, r2
 801f242:	b933      	cbnz	r3, 801f252 <_free_r+0x32>
 801f244:	6063      	str	r3, [r4, #4]
 801f246:	6014      	str	r4, [r2, #0]
 801f248:	b003      	add	sp, #12
 801f24a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f24e:	f003 bb1b 	b.w	8022888 <__malloc_unlock>
 801f252:	42a3      	cmp	r3, r4
 801f254:	d90b      	bls.n	801f26e <_free_r+0x4e>
 801f256:	6821      	ldr	r1, [r4, #0]
 801f258:	1862      	adds	r2, r4, r1
 801f25a:	4293      	cmp	r3, r2
 801f25c:	bf04      	itt	eq
 801f25e:	681a      	ldreq	r2, [r3, #0]
 801f260:	685b      	ldreq	r3, [r3, #4]
 801f262:	6063      	str	r3, [r4, #4]
 801f264:	bf04      	itt	eq
 801f266:	1852      	addeq	r2, r2, r1
 801f268:	6022      	streq	r2, [r4, #0]
 801f26a:	602c      	str	r4, [r5, #0]
 801f26c:	e7ec      	b.n	801f248 <_free_r+0x28>
 801f26e:	461a      	mov	r2, r3
 801f270:	685b      	ldr	r3, [r3, #4]
 801f272:	b10b      	cbz	r3, 801f278 <_free_r+0x58>
 801f274:	42a3      	cmp	r3, r4
 801f276:	d9fa      	bls.n	801f26e <_free_r+0x4e>
 801f278:	6811      	ldr	r1, [r2, #0]
 801f27a:	1855      	adds	r5, r2, r1
 801f27c:	42a5      	cmp	r5, r4
 801f27e:	d10b      	bne.n	801f298 <_free_r+0x78>
 801f280:	6824      	ldr	r4, [r4, #0]
 801f282:	4421      	add	r1, r4
 801f284:	1854      	adds	r4, r2, r1
 801f286:	42a3      	cmp	r3, r4
 801f288:	6011      	str	r1, [r2, #0]
 801f28a:	d1dd      	bne.n	801f248 <_free_r+0x28>
 801f28c:	681c      	ldr	r4, [r3, #0]
 801f28e:	685b      	ldr	r3, [r3, #4]
 801f290:	6053      	str	r3, [r2, #4]
 801f292:	4421      	add	r1, r4
 801f294:	6011      	str	r1, [r2, #0]
 801f296:	e7d7      	b.n	801f248 <_free_r+0x28>
 801f298:	d902      	bls.n	801f2a0 <_free_r+0x80>
 801f29a:	230c      	movs	r3, #12
 801f29c:	6003      	str	r3, [r0, #0]
 801f29e:	e7d3      	b.n	801f248 <_free_r+0x28>
 801f2a0:	6825      	ldr	r5, [r4, #0]
 801f2a2:	1961      	adds	r1, r4, r5
 801f2a4:	428b      	cmp	r3, r1
 801f2a6:	bf04      	itt	eq
 801f2a8:	6819      	ldreq	r1, [r3, #0]
 801f2aa:	685b      	ldreq	r3, [r3, #4]
 801f2ac:	6063      	str	r3, [r4, #4]
 801f2ae:	bf04      	itt	eq
 801f2b0:	1949      	addeq	r1, r1, r5
 801f2b2:	6021      	streq	r1, [r4, #0]
 801f2b4:	6054      	str	r4, [r2, #4]
 801f2b6:	e7c7      	b.n	801f248 <_free_r+0x28>
 801f2b8:	b003      	add	sp, #12
 801f2ba:	bd30      	pop	{r4, r5, pc}
 801f2bc:	24005084 	.word	0x24005084

0801f2c0 <_malloc_r>:
 801f2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f2c2:	1ccd      	adds	r5, r1, #3
 801f2c4:	f025 0503 	bic.w	r5, r5, #3
 801f2c8:	3508      	adds	r5, #8
 801f2ca:	2d0c      	cmp	r5, #12
 801f2cc:	bf38      	it	cc
 801f2ce:	250c      	movcc	r5, #12
 801f2d0:	2d00      	cmp	r5, #0
 801f2d2:	4606      	mov	r6, r0
 801f2d4:	db01      	blt.n	801f2da <_malloc_r+0x1a>
 801f2d6:	42a9      	cmp	r1, r5
 801f2d8:	d903      	bls.n	801f2e2 <_malloc_r+0x22>
 801f2da:	230c      	movs	r3, #12
 801f2dc:	6033      	str	r3, [r6, #0]
 801f2de:	2000      	movs	r0, #0
 801f2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f2e2:	f003 facb 	bl	802287c <__malloc_lock>
 801f2e6:	4921      	ldr	r1, [pc, #132]	; (801f36c <_malloc_r+0xac>)
 801f2e8:	680a      	ldr	r2, [r1, #0]
 801f2ea:	4614      	mov	r4, r2
 801f2ec:	b99c      	cbnz	r4, 801f316 <_malloc_r+0x56>
 801f2ee:	4f20      	ldr	r7, [pc, #128]	; (801f370 <_malloc_r+0xb0>)
 801f2f0:	683b      	ldr	r3, [r7, #0]
 801f2f2:	b923      	cbnz	r3, 801f2fe <_malloc_r+0x3e>
 801f2f4:	4621      	mov	r1, r4
 801f2f6:	4630      	mov	r0, r6
 801f2f8:	f000 ff52 	bl	80201a0 <_sbrk_r>
 801f2fc:	6038      	str	r0, [r7, #0]
 801f2fe:	4629      	mov	r1, r5
 801f300:	4630      	mov	r0, r6
 801f302:	f000 ff4d 	bl	80201a0 <_sbrk_r>
 801f306:	1c43      	adds	r3, r0, #1
 801f308:	d123      	bne.n	801f352 <_malloc_r+0x92>
 801f30a:	230c      	movs	r3, #12
 801f30c:	6033      	str	r3, [r6, #0]
 801f30e:	4630      	mov	r0, r6
 801f310:	f003 faba 	bl	8022888 <__malloc_unlock>
 801f314:	e7e3      	b.n	801f2de <_malloc_r+0x1e>
 801f316:	6823      	ldr	r3, [r4, #0]
 801f318:	1b5b      	subs	r3, r3, r5
 801f31a:	d417      	bmi.n	801f34c <_malloc_r+0x8c>
 801f31c:	2b0b      	cmp	r3, #11
 801f31e:	d903      	bls.n	801f328 <_malloc_r+0x68>
 801f320:	6023      	str	r3, [r4, #0]
 801f322:	441c      	add	r4, r3
 801f324:	6025      	str	r5, [r4, #0]
 801f326:	e004      	b.n	801f332 <_malloc_r+0x72>
 801f328:	6863      	ldr	r3, [r4, #4]
 801f32a:	42a2      	cmp	r2, r4
 801f32c:	bf0c      	ite	eq
 801f32e:	600b      	streq	r3, [r1, #0]
 801f330:	6053      	strne	r3, [r2, #4]
 801f332:	4630      	mov	r0, r6
 801f334:	f003 faa8 	bl	8022888 <__malloc_unlock>
 801f338:	f104 000b 	add.w	r0, r4, #11
 801f33c:	1d23      	adds	r3, r4, #4
 801f33e:	f020 0007 	bic.w	r0, r0, #7
 801f342:	1ac2      	subs	r2, r0, r3
 801f344:	d0cc      	beq.n	801f2e0 <_malloc_r+0x20>
 801f346:	1a1b      	subs	r3, r3, r0
 801f348:	50a3      	str	r3, [r4, r2]
 801f34a:	e7c9      	b.n	801f2e0 <_malloc_r+0x20>
 801f34c:	4622      	mov	r2, r4
 801f34e:	6864      	ldr	r4, [r4, #4]
 801f350:	e7cc      	b.n	801f2ec <_malloc_r+0x2c>
 801f352:	1cc4      	adds	r4, r0, #3
 801f354:	f024 0403 	bic.w	r4, r4, #3
 801f358:	42a0      	cmp	r0, r4
 801f35a:	d0e3      	beq.n	801f324 <_malloc_r+0x64>
 801f35c:	1a21      	subs	r1, r4, r0
 801f35e:	4630      	mov	r0, r6
 801f360:	f000 ff1e 	bl	80201a0 <_sbrk_r>
 801f364:	3001      	adds	r0, #1
 801f366:	d1dd      	bne.n	801f324 <_malloc_r+0x64>
 801f368:	e7cf      	b.n	801f30a <_malloc_r+0x4a>
 801f36a:	bf00      	nop
 801f36c:	24005084 	.word	0x24005084
 801f370:	24005088 	.word	0x24005088

0801f374 <__cvt>:
 801f374:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f376:	ed2d 8b02 	vpush	{d8}
 801f37a:	eeb0 8b40 	vmov.f64	d8, d0
 801f37e:	b085      	sub	sp, #20
 801f380:	4617      	mov	r7, r2
 801f382:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f384:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f386:	ee18 2a90 	vmov	r2, s17
 801f38a:	f025 0520 	bic.w	r5, r5, #32
 801f38e:	2a00      	cmp	r2, #0
 801f390:	bfb6      	itet	lt
 801f392:	222d      	movlt	r2, #45	; 0x2d
 801f394:	2200      	movge	r2, #0
 801f396:	eeb1 8b40 	vneglt.f64	d8, d0
 801f39a:	2d46      	cmp	r5, #70	; 0x46
 801f39c:	460c      	mov	r4, r1
 801f39e:	701a      	strb	r2, [r3, #0]
 801f3a0:	d004      	beq.n	801f3ac <__cvt+0x38>
 801f3a2:	2d45      	cmp	r5, #69	; 0x45
 801f3a4:	d100      	bne.n	801f3a8 <__cvt+0x34>
 801f3a6:	3401      	adds	r4, #1
 801f3a8:	2102      	movs	r1, #2
 801f3aa:	e000      	b.n	801f3ae <__cvt+0x3a>
 801f3ac:	2103      	movs	r1, #3
 801f3ae:	ab03      	add	r3, sp, #12
 801f3b0:	9301      	str	r3, [sp, #4]
 801f3b2:	ab02      	add	r3, sp, #8
 801f3b4:	9300      	str	r3, [sp, #0]
 801f3b6:	4622      	mov	r2, r4
 801f3b8:	4633      	mov	r3, r6
 801f3ba:	eeb0 0b48 	vmov.f64	d0, d8
 801f3be:	f001 ff1f 	bl	8021200 <_dtoa_r>
 801f3c2:	2d47      	cmp	r5, #71	; 0x47
 801f3c4:	d109      	bne.n	801f3da <__cvt+0x66>
 801f3c6:	07fb      	lsls	r3, r7, #31
 801f3c8:	d407      	bmi.n	801f3da <__cvt+0x66>
 801f3ca:	9b03      	ldr	r3, [sp, #12]
 801f3cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f3ce:	1a1b      	subs	r3, r3, r0
 801f3d0:	6013      	str	r3, [r2, #0]
 801f3d2:	b005      	add	sp, #20
 801f3d4:	ecbd 8b02 	vpop	{d8}
 801f3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3da:	2d46      	cmp	r5, #70	; 0x46
 801f3dc:	eb00 0204 	add.w	r2, r0, r4
 801f3e0:	d10c      	bne.n	801f3fc <__cvt+0x88>
 801f3e2:	7803      	ldrb	r3, [r0, #0]
 801f3e4:	2b30      	cmp	r3, #48	; 0x30
 801f3e6:	d107      	bne.n	801f3f8 <__cvt+0x84>
 801f3e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3f0:	bf1c      	itt	ne
 801f3f2:	f1c4 0401 	rsbne	r4, r4, #1
 801f3f6:	6034      	strne	r4, [r6, #0]
 801f3f8:	6833      	ldr	r3, [r6, #0]
 801f3fa:	441a      	add	r2, r3
 801f3fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f404:	bf08      	it	eq
 801f406:	9203      	streq	r2, [sp, #12]
 801f408:	2130      	movs	r1, #48	; 0x30
 801f40a:	9b03      	ldr	r3, [sp, #12]
 801f40c:	4293      	cmp	r3, r2
 801f40e:	d2dc      	bcs.n	801f3ca <__cvt+0x56>
 801f410:	1c5c      	adds	r4, r3, #1
 801f412:	9403      	str	r4, [sp, #12]
 801f414:	7019      	strb	r1, [r3, #0]
 801f416:	e7f8      	b.n	801f40a <__cvt+0x96>

0801f418 <__exponent>:
 801f418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f41a:	4603      	mov	r3, r0
 801f41c:	2900      	cmp	r1, #0
 801f41e:	bfb8      	it	lt
 801f420:	4249      	neglt	r1, r1
 801f422:	f803 2b02 	strb.w	r2, [r3], #2
 801f426:	bfb4      	ite	lt
 801f428:	222d      	movlt	r2, #45	; 0x2d
 801f42a:	222b      	movge	r2, #43	; 0x2b
 801f42c:	2909      	cmp	r1, #9
 801f42e:	7042      	strb	r2, [r0, #1]
 801f430:	dd2a      	ble.n	801f488 <__exponent+0x70>
 801f432:	f10d 0407 	add.w	r4, sp, #7
 801f436:	46a4      	mov	ip, r4
 801f438:	270a      	movs	r7, #10
 801f43a:	46a6      	mov	lr, r4
 801f43c:	460a      	mov	r2, r1
 801f43e:	fb91 f6f7 	sdiv	r6, r1, r7
 801f442:	fb07 1516 	mls	r5, r7, r6, r1
 801f446:	3530      	adds	r5, #48	; 0x30
 801f448:	2a63      	cmp	r2, #99	; 0x63
 801f44a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801f44e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f452:	4631      	mov	r1, r6
 801f454:	dcf1      	bgt.n	801f43a <__exponent+0x22>
 801f456:	3130      	adds	r1, #48	; 0x30
 801f458:	f1ae 0502 	sub.w	r5, lr, #2
 801f45c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f460:	1c44      	adds	r4, r0, #1
 801f462:	4629      	mov	r1, r5
 801f464:	4561      	cmp	r1, ip
 801f466:	d30a      	bcc.n	801f47e <__exponent+0x66>
 801f468:	f10d 0209 	add.w	r2, sp, #9
 801f46c:	eba2 020e 	sub.w	r2, r2, lr
 801f470:	4565      	cmp	r5, ip
 801f472:	bf88      	it	hi
 801f474:	2200      	movhi	r2, #0
 801f476:	4413      	add	r3, r2
 801f478:	1a18      	subs	r0, r3, r0
 801f47a:	b003      	add	sp, #12
 801f47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f47e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f482:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f486:	e7ed      	b.n	801f464 <__exponent+0x4c>
 801f488:	2330      	movs	r3, #48	; 0x30
 801f48a:	3130      	adds	r1, #48	; 0x30
 801f48c:	7083      	strb	r3, [r0, #2]
 801f48e:	70c1      	strb	r1, [r0, #3]
 801f490:	1d03      	adds	r3, r0, #4
 801f492:	e7f1      	b.n	801f478 <__exponent+0x60>
 801f494:	0000      	movs	r0, r0
	...

0801f498 <_printf_float>:
 801f498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f49c:	b08b      	sub	sp, #44	; 0x2c
 801f49e:	460c      	mov	r4, r1
 801f4a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801f4a4:	4616      	mov	r6, r2
 801f4a6:	461f      	mov	r7, r3
 801f4a8:	4605      	mov	r5, r0
 801f4aa:	f003 f969 	bl	8022780 <_localeconv_r>
 801f4ae:	f8d0 b000 	ldr.w	fp, [r0]
 801f4b2:	4658      	mov	r0, fp
 801f4b4:	f7e0 ff14 	bl	80002e0 <strlen>
 801f4b8:	2300      	movs	r3, #0
 801f4ba:	9308      	str	r3, [sp, #32]
 801f4bc:	f8d8 3000 	ldr.w	r3, [r8]
 801f4c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801f4c4:	6822      	ldr	r2, [r4, #0]
 801f4c6:	3307      	adds	r3, #7
 801f4c8:	f023 0307 	bic.w	r3, r3, #7
 801f4cc:	f103 0108 	add.w	r1, r3, #8
 801f4d0:	f8c8 1000 	str.w	r1, [r8]
 801f4d4:	4682      	mov	sl, r0
 801f4d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f4da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801f4de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801f740 <_printf_float+0x2a8>
 801f4e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801f4e6:	eeb0 6bc0 	vabs.f64	d6, d0
 801f4ea:	eeb4 6b47 	vcmp.f64	d6, d7
 801f4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4f2:	dd24      	ble.n	801f53e <_printf_float+0xa6>
 801f4f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4fc:	d502      	bpl.n	801f504 <_printf_float+0x6c>
 801f4fe:	232d      	movs	r3, #45	; 0x2d
 801f500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f504:	4b90      	ldr	r3, [pc, #576]	; (801f748 <_printf_float+0x2b0>)
 801f506:	4891      	ldr	r0, [pc, #580]	; (801f74c <_printf_float+0x2b4>)
 801f508:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801f50c:	bf94      	ite	ls
 801f50e:	4698      	movls	r8, r3
 801f510:	4680      	movhi	r8, r0
 801f512:	2303      	movs	r3, #3
 801f514:	6123      	str	r3, [r4, #16]
 801f516:	f022 0204 	bic.w	r2, r2, #4
 801f51a:	2300      	movs	r3, #0
 801f51c:	6022      	str	r2, [r4, #0]
 801f51e:	9304      	str	r3, [sp, #16]
 801f520:	9700      	str	r7, [sp, #0]
 801f522:	4633      	mov	r3, r6
 801f524:	aa09      	add	r2, sp, #36	; 0x24
 801f526:	4621      	mov	r1, r4
 801f528:	4628      	mov	r0, r5
 801f52a:	f000 f9d3 	bl	801f8d4 <_printf_common>
 801f52e:	3001      	adds	r0, #1
 801f530:	f040 808a 	bne.w	801f648 <_printf_float+0x1b0>
 801f534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f538:	b00b      	add	sp, #44	; 0x2c
 801f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f53e:	eeb4 0b40 	vcmp.f64	d0, d0
 801f542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f546:	d709      	bvc.n	801f55c <_printf_float+0xc4>
 801f548:	ee10 3a90 	vmov	r3, s1
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	bfbc      	itt	lt
 801f550:	232d      	movlt	r3, #45	; 0x2d
 801f552:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f556:	487e      	ldr	r0, [pc, #504]	; (801f750 <_printf_float+0x2b8>)
 801f558:	4b7e      	ldr	r3, [pc, #504]	; (801f754 <_printf_float+0x2bc>)
 801f55a:	e7d5      	b.n	801f508 <_printf_float+0x70>
 801f55c:	6863      	ldr	r3, [r4, #4]
 801f55e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801f562:	9104      	str	r1, [sp, #16]
 801f564:	1c59      	adds	r1, r3, #1
 801f566:	d13c      	bne.n	801f5e2 <_printf_float+0x14a>
 801f568:	2306      	movs	r3, #6
 801f56a:	6063      	str	r3, [r4, #4]
 801f56c:	2300      	movs	r3, #0
 801f56e:	9303      	str	r3, [sp, #12]
 801f570:	ab08      	add	r3, sp, #32
 801f572:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801f576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f57a:	ab07      	add	r3, sp, #28
 801f57c:	6861      	ldr	r1, [r4, #4]
 801f57e:	9300      	str	r3, [sp, #0]
 801f580:	6022      	str	r2, [r4, #0]
 801f582:	f10d 031b 	add.w	r3, sp, #27
 801f586:	4628      	mov	r0, r5
 801f588:	f7ff fef4 	bl	801f374 <__cvt>
 801f58c:	9b04      	ldr	r3, [sp, #16]
 801f58e:	9907      	ldr	r1, [sp, #28]
 801f590:	2b47      	cmp	r3, #71	; 0x47
 801f592:	4680      	mov	r8, r0
 801f594:	d108      	bne.n	801f5a8 <_printf_float+0x110>
 801f596:	1cc8      	adds	r0, r1, #3
 801f598:	db02      	blt.n	801f5a0 <_printf_float+0x108>
 801f59a:	6863      	ldr	r3, [r4, #4]
 801f59c:	4299      	cmp	r1, r3
 801f59e:	dd41      	ble.n	801f624 <_printf_float+0x18c>
 801f5a0:	f1a9 0902 	sub.w	r9, r9, #2
 801f5a4:	fa5f f989 	uxtb.w	r9, r9
 801f5a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f5ac:	d820      	bhi.n	801f5f0 <_printf_float+0x158>
 801f5ae:	3901      	subs	r1, #1
 801f5b0:	464a      	mov	r2, r9
 801f5b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f5b6:	9107      	str	r1, [sp, #28]
 801f5b8:	f7ff ff2e 	bl	801f418 <__exponent>
 801f5bc:	9a08      	ldr	r2, [sp, #32]
 801f5be:	9004      	str	r0, [sp, #16]
 801f5c0:	1813      	adds	r3, r2, r0
 801f5c2:	2a01      	cmp	r2, #1
 801f5c4:	6123      	str	r3, [r4, #16]
 801f5c6:	dc02      	bgt.n	801f5ce <_printf_float+0x136>
 801f5c8:	6822      	ldr	r2, [r4, #0]
 801f5ca:	07d2      	lsls	r2, r2, #31
 801f5cc:	d501      	bpl.n	801f5d2 <_printf_float+0x13a>
 801f5ce:	3301      	adds	r3, #1
 801f5d0:	6123      	str	r3, [r4, #16]
 801f5d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801f5d6:	2b00      	cmp	r3, #0
 801f5d8:	d0a2      	beq.n	801f520 <_printf_float+0x88>
 801f5da:	232d      	movs	r3, #45	; 0x2d
 801f5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f5e0:	e79e      	b.n	801f520 <_printf_float+0x88>
 801f5e2:	9904      	ldr	r1, [sp, #16]
 801f5e4:	2947      	cmp	r1, #71	; 0x47
 801f5e6:	d1c1      	bne.n	801f56c <_printf_float+0xd4>
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	d1bf      	bne.n	801f56c <_printf_float+0xd4>
 801f5ec:	2301      	movs	r3, #1
 801f5ee:	e7bc      	b.n	801f56a <_printf_float+0xd2>
 801f5f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801f5f4:	d118      	bne.n	801f628 <_printf_float+0x190>
 801f5f6:	2900      	cmp	r1, #0
 801f5f8:	6863      	ldr	r3, [r4, #4]
 801f5fa:	dd0b      	ble.n	801f614 <_printf_float+0x17c>
 801f5fc:	6121      	str	r1, [r4, #16]
 801f5fe:	b913      	cbnz	r3, 801f606 <_printf_float+0x16e>
 801f600:	6822      	ldr	r2, [r4, #0]
 801f602:	07d0      	lsls	r0, r2, #31
 801f604:	d502      	bpl.n	801f60c <_printf_float+0x174>
 801f606:	3301      	adds	r3, #1
 801f608:	440b      	add	r3, r1
 801f60a:	6123      	str	r3, [r4, #16]
 801f60c:	2300      	movs	r3, #0
 801f60e:	65a1      	str	r1, [r4, #88]	; 0x58
 801f610:	9304      	str	r3, [sp, #16]
 801f612:	e7de      	b.n	801f5d2 <_printf_float+0x13a>
 801f614:	b913      	cbnz	r3, 801f61c <_printf_float+0x184>
 801f616:	6822      	ldr	r2, [r4, #0]
 801f618:	07d2      	lsls	r2, r2, #31
 801f61a:	d501      	bpl.n	801f620 <_printf_float+0x188>
 801f61c:	3302      	adds	r3, #2
 801f61e:	e7f4      	b.n	801f60a <_printf_float+0x172>
 801f620:	2301      	movs	r3, #1
 801f622:	e7f2      	b.n	801f60a <_printf_float+0x172>
 801f624:	f04f 0967 	mov.w	r9, #103	; 0x67
 801f628:	9b08      	ldr	r3, [sp, #32]
 801f62a:	4299      	cmp	r1, r3
 801f62c:	db05      	blt.n	801f63a <_printf_float+0x1a2>
 801f62e:	6823      	ldr	r3, [r4, #0]
 801f630:	6121      	str	r1, [r4, #16]
 801f632:	07d8      	lsls	r0, r3, #31
 801f634:	d5ea      	bpl.n	801f60c <_printf_float+0x174>
 801f636:	1c4b      	adds	r3, r1, #1
 801f638:	e7e7      	b.n	801f60a <_printf_float+0x172>
 801f63a:	2900      	cmp	r1, #0
 801f63c:	bfd4      	ite	le
 801f63e:	f1c1 0202 	rsble	r2, r1, #2
 801f642:	2201      	movgt	r2, #1
 801f644:	4413      	add	r3, r2
 801f646:	e7e0      	b.n	801f60a <_printf_float+0x172>
 801f648:	6823      	ldr	r3, [r4, #0]
 801f64a:	055a      	lsls	r2, r3, #21
 801f64c:	d407      	bmi.n	801f65e <_printf_float+0x1c6>
 801f64e:	6923      	ldr	r3, [r4, #16]
 801f650:	4642      	mov	r2, r8
 801f652:	4631      	mov	r1, r6
 801f654:	4628      	mov	r0, r5
 801f656:	47b8      	blx	r7
 801f658:	3001      	adds	r0, #1
 801f65a:	d12a      	bne.n	801f6b2 <_printf_float+0x21a>
 801f65c:	e76a      	b.n	801f534 <_printf_float+0x9c>
 801f65e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801f662:	f240 80e2 	bls.w	801f82a <_printf_float+0x392>
 801f666:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801f66a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f672:	d133      	bne.n	801f6dc <_printf_float+0x244>
 801f674:	4a38      	ldr	r2, [pc, #224]	; (801f758 <_printf_float+0x2c0>)
 801f676:	2301      	movs	r3, #1
 801f678:	4631      	mov	r1, r6
 801f67a:	4628      	mov	r0, r5
 801f67c:	47b8      	blx	r7
 801f67e:	3001      	adds	r0, #1
 801f680:	f43f af58 	beq.w	801f534 <_printf_float+0x9c>
 801f684:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f688:	429a      	cmp	r2, r3
 801f68a:	db02      	blt.n	801f692 <_printf_float+0x1fa>
 801f68c:	6823      	ldr	r3, [r4, #0]
 801f68e:	07d8      	lsls	r0, r3, #31
 801f690:	d50f      	bpl.n	801f6b2 <_printf_float+0x21a>
 801f692:	4653      	mov	r3, sl
 801f694:	465a      	mov	r2, fp
 801f696:	4631      	mov	r1, r6
 801f698:	4628      	mov	r0, r5
 801f69a:	47b8      	blx	r7
 801f69c:	3001      	adds	r0, #1
 801f69e:	f43f af49 	beq.w	801f534 <_printf_float+0x9c>
 801f6a2:	f04f 0800 	mov.w	r8, #0
 801f6a6:	f104 091a 	add.w	r9, r4, #26
 801f6aa:	9b08      	ldr	r3, [sp, #32]
 801f6ac:	3b01      	subs	r3, #1
 801f6ae:	4543      	cmp	r3, r8
 801f6b0:	dc09      	bgt.n	801f6c6 <_printf_float+0x22e>
 801f6b2:	6823      	ldr	r3, [r4, #0]
 801f6b4:	079b      	lsls	r3, r3, #30
 801f6b6:	f100 8108 	bmi.w	801f8ca <_printf_float+0x432>
 801f6ba:	68e0      	ldr	r0, [r4, #12]
 801f6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6be:	4298      	cmp	r0, r3
 801f6c0:	bfb8      	it	lt
 801f6c2:	4618      	movlt	r0, r3
 801f6c4:	e738      	b.n	801f538 <_printf_float+0xa0>
 801f6c6:	2301      	movs	r3, #1
 801f6c8:	464a      	mov	r2, r9
 801f6ca:	4631      	mov	r1, r6
 801f6cc:	4628      	mov	r0, r5
 801f6ce:	47b8      	blx	r7
 801f6d0:	3001      	adds	r0, #1
 801f6d2:	f43f af2f 	beq.w	801f534 <_printf_float+0x9c>
 801f6d6:	f108 0801 	add.w	r8, r8, #1
 801f6da:	e7e6      	b.n	801f6aa <_printf_float+0x212>
 801f6dc:	9b07      	ldr	r3, [sp, #28]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	dc3c      	bgt.n	801f75c <_printf_float+0x2c4>
 801f6e2:	4a1d      	ldr	r2, [pc, #116]	; (801f758 <_printf_float+0x2c0>)
 801f6e4:	2301      	movs	r3, #1
 801f6e6:	4631      	mov	r1, r6
 801f6e8:	4628      	mov	r0, r5
 801f6ea:	47b8      	blx	r7
 801f6ec:	3001      	adds	r0, #1
 801f6ee:	f43f af21 	beq.w	801f534 <_printf_float+0x9c>
 801f6f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f6f6:	4313      	orrs	r3, r2
 801f6f8:	d102      	bne.n	801f700 <_printf_float+0x268>
 801f6fa:	6823      	ldr	r3, [r4, #0]
 801f6fc:	07d9      	lsls	r1, r3, #31
 801f6fe:	d5d8      	bpl.n	801f6b2 <_printf_float+0x21a>
 801f700:	4653      	mov	r3, sl
 801f702:	465a      	mov	r2, fp
 801f704:	4631      	mov	r1, r6
 801f706:	4628      	mov	r0, r5
 801f708:	47b8      	blx	r7
 801f70a:	3001      	adds	r0, #1
 801f70c:	f43f af12 	beq.w	801f534 <_printf_float+0x9c>
 801f710:	f04f 0900 	mov.w	r9, #0
 801f714:	f104 0a1a 	add.w	sl, r4, #26
 801f718:	9b07      	ldr	r3, [sp, #28]
 801f71a:	425b      	negs	r3, r3
 801f71c:	454b      	cmp	r3, r9
 801f71e:	dc01      	bgt.n	801f724 <_printf_float+0x28c>
 801f720:	9b08      	ldr	r3, [sp, #32]
 801f722:	e795      	b.n	801f650 <_printf_float+0x1b8>
 801f724:	2301      	movs	r3, #1
 801f726:	4652      	mov	r2, sl
 801f728:	4631      	mov	r1, r6
 801f72a:	4628      	mov	r0, r5
 801f72c:	47b8      	blx	r7
 801f72e:	3001      	adds	r0, #1
 801f730:	f43f af00 	beq.w	801f534 <_printf_float+0x9c>
 801f734:	f109 0901 	add.w	r9, r9, #1
 801f738:	e7ee      	b.n	801f718 <_printf_float+0x280>
 801f73a:	bf00      	nop
 801f73c:	f3af 8000 	nop.w
 801f740:	ffffffff 	.word	0xffffffff
 801f744:	7fefffff 	.word	0x7fefffff
 801f748:	08028434 	.word	0x08028434
 801f74c:	08028438 	.word	0x08028438
 801f750:	08028440 	.word	0x08028440
 801f754:	0802843c 	.word	0x0802843c
 801f758:	08028444 	.word	0x08028444
 801f75c:	9a08      	ldr	r2, [sp, #32]
 801f75e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f760:	429a      	cmp	r2, r3
 801f762:	bfa8      	it	ge
 801f764:	461a      	movge	r2, r3
 801f766:	2a00      	cmp	r2, #0
 801f768:	4691      	mov	r9, r2
 801f76a:	dc38      	bgt.n	801f7de <_printf_float+0x346>
 801f76c:	2300      	movs	r3, #0
 801f76e:	9305      	str	r3, [sp, #20]
 801f770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f774:	f104 021a 	add.w	r2, r4, #26
 801f778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f77a:	9905      	ldr	r1, [sp, #20]
 801f77c:	9304      	str	r3, [sp, #16]
 801f77e:	eba3 0309 	sub.w	r3, r3, r9
 801f782:	428b      	cmp	r3, r1
 801f784:	dc33      	bgt.n	801f7ee <_printf_float+0x356>
 801f786:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f78a:	429a      	cmp	r2, r3
 801f78c:	db3c      	blt.n	801f808 <_printf_float+0x370>
 801f78e:	6823      	ldr	r3, [r4, #0]
 801f790:	07da      	lsls	r2, r3, #31
 801f792:	d439      	bmi.n	801f808 <_printf_float+0x370>
 801f794:	9a08      	ldr	r2, [sp, #32]
 801f796:	9b04      	ldr	r3, [sp, #16]
 801f798:	9907      	ldr	r1, [sp, #28]
 801f79a:	1ad3      	subs	r3, r2, r3
 801f79c:	eba2 0901 	sub.w	r9, r2, r1
 801f7a0:	4599      	cmp	r9, r3
 801f7a2:	bfa8      	it	ge
 801f7a4:	4699      	movge	r9, r3
 801f7a6:	f1b9 0f00 	cmp.w	r9, #0
 801f7aa:	dc35      	bgt.n	801f818 <_printf_float+0x380>
 801f7ac:	f04f 0800 	mov.w	r8, #0
 801f7b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f7b4:	f104 0a1a 	add.w	sl, r4, #26
 801f7b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801f7bc:	1a9b      	subs	r3, r3, r2
 801f7be:	eba3 0309 	sub.w	r3, r3, r9
 801f7c2:	4543      	cmp	r3, r8
 801f7c4:	f77f af75 	ble.w	801f6b2 <_printf_float+0x21a>
 801f7c8:	2301      	movs	r3, #1
 801f7ca:	4652      	mov	r2, sl
 801f7cc:	4631      	mov	r1, r6
 801f7ce:	4628      	mov	r0, r5
 801f7d0:	47b8      	blx	r7
 801f7d2:	3001      	adds	r0, #1
 801f7d4:	f43f aeae 	beq.w	801f534 <_printf_float+0x9c>
 801f7d8:	f108 0801 	add.w	r8, r8, #1
 801f7dc:	e7ec      	b.n	801f7b8 <_printf_float+0x320>
 801f7de:	4613      	mov	r3, r2
 801f7e0:	4631      	mov	r1, r6
 801f7e2:	4642      	mov	r2, r8
 801f7e4:	4628      	mov	r0, r5
 801f7e6:	47b8      	blx	r7
 801f7e8:	3001      	adds	r0, #1
 801f7ea:	d1bf      	bne.n	801f76c <_printf_float+0x2d4>
 801f7ec:	e6a2      	b.n	801f534 <_printf_float+0x9c>
 801f7ee:	2301      	movs	r3, #1
 801f7f0:	4631      	mov	r1, r6
 801f7f2:	4628      	mov	r0, r5
 801f7f4:	9204      	str	r2, [sp, #16]
 801f7f6:	47b8      	blx	r7
 801f7f8:	3001      	adds	r0, #1
 801f7fa:	f43f ae9b 	beq.w	801f534 <_printf_float+0x9c>
 801f7fe:	9b05      	ldr	r3, [sp, #20]
 801f800:	9a04      	ldr	r2, [sp, #16]
 801f802:	3301      	adds	r3, #1
 801f804:	9305      	str	r3, [sp, #20]
 801f806:	e7b7      	b.n	801f778 <_printf_float+0x2e0>
 801f808:	4653      	mov	r3, sl
 801f80a:	465a      	mov	r2, fp
 801f80c:	4631      	mov	r1, r6
 801f80e:	4628      	mov	r0, r5
 801f810:	47b8      	blx	r7
 801f812:	3001      	adds	r0, #1
 801f814:	d1be      	bne.n	801f794 <_printf_float+0x2fc>
 801f816:	e68d      	b.n	801f534 <_printf_float+0x9c>
 801f818:	9a04      	ldr	r2, [sp, #16]
 801f81a:	464b      	mov	r3, r9
 801f81c:	4442      	add	r2, r8
 801f81e:	4631      	mov	r1, r6
 801f820:	4628      	mov	r0, r5
 801f822:	47b8      	blx	r7
 801f824:	3001      	adds	r0, #1
 801f826:	d1c1      	bne.n	801f7ac <_printf_float+0x314>
 801f828:	e684      	b.n	801f534 <_printf_float+0x9c>
 801f82a:	9a08      	ldr	r2, [sp, #32]
 801f82c:	2a01      	cmp	r2, #1
 801f82e:	dc01      	bgt.n	801f834 <_printf_float+0x39c>
 801f830:	07db      	lsls	r3, r3, #31
 801f832:	d537      	bpl.n	801f8a4 <_printf_float+0x40c>
 801f834:	2301      	movs	r3, #1
 801f836:	4642      	mov	r2, r8
 801f838:	4631      	mov	r1, r6
 801f83a:	4628      	mov	r0, r5
 801f83c:	47b8      	blx	r7
 801f83e:	3001      	adds	r0, #1
 801f840:	f43f ae78 	beq.w	801f534 <_printf_float+0x9c>
 801f844:	4653      	mov	r3, sl
 801f846:	465a      	mov	r2, fp
 801f848:	4631      	mov	r1, r6
 801f84a:	4628      	mov	r0, r5
 801f84c:	47b8      	blx	r7
 801f84e:	3001      	adds	r0, #1
 801f850:	f43f ae70 	beq.w	801f534 <_printf_float+0x9c>
 801f854:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801f858:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f860:	d01b      	beq.n	801f89a <_printf_float+0x402>
 801f862:	9b08      	ldr	r3, [sp, #32]
 801f864:	f108 0201 	add.w	r2, r8, #1
 801f868:	3b01      	subs	r3, #1
 801f86a:	4631      	mov	r1, r6
 801f86c:	4628      	mov	r0, r5
 801f86e:	47b8      	blx	r7
 801f870:	3001      	adds	r0, #1
 801f872:	d10e      	bne.n	801f892 <_printf_float+0x3fa>
 801f874:	e65e      	b.n	801f534 <_printf_float+0x9c>
 801f876:	2301      	movs	r3, #1
 801f878:	464a      	mov	r2, r9
 801f87a:	4631      	mov	r1, r6
 801f87c:	4628      	mov	r0, r5
 801f87e:	47b8      	blx	r7
 801f880:	3001      	adds	r0, #1
 801f882:	f43f ae57 	beq.w	801f534 <_printf_float+0x9c>
 801f886:	f108 0801 	add.w	r8, r8, #1
 801f88a:	9b08      	ldr	r3, [sp, #32]
 801f88c:	3b01      	subs	r3, #1
 801f88e:	4543      	cmp	r3, r8
 801f890:	dcf1      	bgt.n	801f876 <_printf_float+0x3de>
 801f892:	9b04      	ldr	r3, [sp, #16]
 801f894:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f898:	e6db      	b.n	801f652 <_printf_float+0x1ba>
 801f89a:	f04f 0800 	mov.w	r8, #0
 801f89e:	f104 091a 	add.w	r9, r4, #26
 801f8a2:	e7f2      	b.n	801f88a <_printf_float+0x3f2>
 801f8a4:	2301      	movs	r3, #1
 801f8a6:	4642      	mov	r2, r8
 801f8a8:	e7df      	b.n	801f86a <_printf_float+0x3d2>
 801f8aa:	2301      	movs	r3, #1
 801f8ac:	464a      	mov	r2, r9
 801f8ae:	4631      	mov	r1, r6
 801f8b0:	4628      	mov	r0, r5
 801f8b2:	47b8      	blx	r7
 801f8b4:	3001      	adds	r0, #1
 801f8b6:	f43f ae3d 	beq.w	801f534 <_printf_float+0x9c>
 801f8ba:	f108 0801 	add.w	r8, r8, #1
 801f8be:	68e3      	ldr	r3, [r4, #12]
 801f8c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f8c2:	1a5b      	subs	r3, r3, r1
 801f8c4:	4543      	cmp	r3, r8
 801f8c6:	dcf0      	bgt.n	801f8aa <_printf_float+0x412>
 801f8c8:	e6f7      	b.n	801f6ba <_printf_float+0x222>
 801f8ca:	f04f 0800 	mov.w	r8, #0
 801f8ce:	f104 0919 	add.w	r9, r4, #25
 801f8d2:	e7f4      	b.n	801f8be <_printf_float+0x426>

0801f8d4 <_printf_common>:
 801f8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f8d8:	4616      	mov	r6, r2
 801f8da:	4699      	mov	r9, r3
 801f8dc:	688a      	ldr	r2, [r1, #8]
 801f8de:	690b      	ldr	r3, [r1, #16]
 801f8e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f8e4:	4293      	cmp	r3, r2
 801f8e6:	bfb8      	it	lt
 801f8e8:	4613      	movlt	r3, r2
 801f8ea:	6033      	str	r3, [r6, #0]
 801f8ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f8f0:	4607      	mov	r7, r0
 801f8f2:	460c      	mov	r4, r1
 801f8f4:	b10a      	cbz	r2, 801f8fa <_printf_common+0x26>
 801f8f6:	3301      	adds	r3, #1
 801f8f8:	6033      	str	r3, [r6, #0]
 801f8fa:	6823      	ldr	r3, [r4, #0]
 801f8fc:	0699      	lsls	r1, r3, #26
 801f8fe:	bf42      	ittt	mi
 801f900:	6833      	ldrmi	r3, [r6, #0]
 801f902:	3302      	addmi	r3, #2
 801f904:	6033      	strmi	r3, [r6, #0]
 801f906:	6825      	ldr	r5, [r4, #0]
 801f908:	f015 0506 	ands.w	r5, r5, #6
 801f90c:	d106      	bne.n	801f91c <_printf_common+0x48>
 801f90e:	f104 0a19 	add.w	sl, r4, #25
 801f912:	68e3      	ldr	r3, [r4, #12]
 801f914:	6832      	ldr	r2, [r6, #0]
 801f916:	1a9b      	subs	r3, r3, r2
 801f918:	42ab      	cmp	r3, r5
 801f91a:	dc26      	bgt.n	801f96a <_printf_common+0x96>
 801f91c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f920:	1e13      	subs	r3, r2, #0
 801f922:	6822      	ldr	r2, [r4, #0]
 801f924:	bf18      	it	ne
 801f926:	2301      	movne	r3, #1
 801f928:	0692      	lsls	r2, r2, #26
 801f92a:	d42b      	bmi.n	801f984 <_printf_common+0xb0>
 801f92c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f930:	4649      	mov	r1, r9
 801f932:	4638      	mov	r0, r7
 801f934:	47c0      	blx	r8
 801f936:	3001      	adds	r0, #1
 801f938:	d01e      	beq.n	801f978 <_printf_common+0xa4>
 801f93a:	6823      	ldr	r3, [r4, #0]
 801f93c:	68e5      	ldr	r5, [r4, #12]
 801f93e:	6832      	ldr	r2, [r6, #0]
 801f940:	f003 0306 	and.w	r3, r3, #6
 801f944:	2b04      	cmp	r3, #4
 801f946:	bf08      	it	eq
 801f948:	1aad      	subeq	r5, r5, r2
 801f94a:	68a3      	ldr	r3, [r4, #8]
 801f94c:	6922      	ldr	r2, [r4, #16]
 801f94e:	bf0c      	ite	eq
 801f950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f954:	2500      	movne	r5, #0
 801f956:	4293      	cmp	r3, r2
 801f958:	bfc4      	itt	gt
 801f95a:	1a9b      	subgt	r3, r3, r2
 801f95c:	18ed      	addgt	r5, r5, r3
 801f95e:	2600      	movs	r6, #0
 801f960:	341a      	adds	r4, #26
 801f962:	42b5      	cmp	r5, r6
 801f964:	d11a      	bne.n	801f99c <_printf_common+0xc8>
 801f966:	2000      	movs	r0, #0
 801f968:	e008      	b.n	801f97c <_printf_common+0xa8>
 801f96a:	2301      	movs	r3, #1
 801f96c:	4652      	mov	r2, sl
 801f96e:	4649      	mov	r1, r9
 801f970:	4638      	mov	r0, r7
 801f972:	47c0      	blx	r8
 801f974:	3001      	adds	r0, #1
 801f976:	d103      	bne.n	801f980 <_printf_common+0xac>
 801f978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f980:	3501      	adds	r5, #1
 801f982:	e7c6      	b.n	801f912 <_printf_common+0x3e>
 801f984:	18e1      	adds	r1, r4, r3
 801f986:	1c5a      	adds	r2, r3, #1
 801f988:	2030      	movs	r0, #48	; 0x30
 801f98a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f98e:	4422      	add	r2, r4
 801f990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f998:	3302      	adds	r3, #2
 801f99a:	e7c7      	b.n	801f92c <_printf_common+0x58>
 801f99c:	2301      	movs	r3, #1
 801f99e:	4622      	mov	r2, r4
 801f9a0:	4649      	mov	r1, r9
 801f9a2:	4638      	mov	r0, r7
 801f9a4:	47c0      	blx	r8
 801f9a6:	3001      	adds	r0, #1
 801f9a8:	d0e6      	beq.n	801f978 <_printf_common+0xa4>
 801f9aa:	3601      	adds	r6, #1
 801f9ac:	e7d9      	b.n	801f962 <_printf_common+0x8e>
	...

0801f9b0 <_printf_i>:
 801f9b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f9b4:	460c      	mov	r4, r1
 801f9b6:	4691      	mov	r9, r2
 801f9b8:	7e27      	ldrb	r7, [r4, #24]
 801f9ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f9bc:	2f78      	cmp	r7, #120	; 0x78
 801f9be:	4680      	mov	r8, r0
 801f9c0:	469a      	mov	sl, r3
 801f9c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f9c6:	d807      	bhi.n	801f9d8 <_printf_i+0x28>
 801f9c8:	2f62      	cmp	r7, #98	; 0x62
 801f9ca:	d80a      	bhi.n	801f9e2 <_printf_i+0x32>
 801f9cc:	2f00      	cmp	r7, #0
 801f9ce:	f000 80d8 	beq.w	801fb82 <_printf_i+0x1d2>
 801f9d2:	2f58      	cmp	r7, #88	; 0x58
 801f9d4:	f000 80a3 	beq.w	801fb1e <_printf_i+0x16e>
 801f9d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f9dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f9e0:	e03a      	b.n	801fa58 <_printf_i+0xa8>
 801f9e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f9e6:	2b15      	cmp	r3, #21
 801f9e8:	d8f6      	bhi.n	801f9d8 <_printf_i+0x28>
 801f9ea:	a001      	add	r0, pc, #4	; (adr r0, 801f9f0 <_printf_i+0x40>)
 801f9ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f9f0:	0801fa49 	.word	0x0801fa49
 801f9f4:	0801fa5d 	.word	0x0801fa5d
 801f9f8:	0801f9d9 	.word	0x0801f9d9
 801f9fc:	0801f9d9 	.word	0x0801f9d9
 801fa00:	0801f9d9 	.word	0x0801f9d9
 801fa04:	0801f9d9 	.word	0x0801f9d9
 801fa08:	0801fa5d 	.word	0x0801fa5d
 801fa0c:	0801f9d9 	.word	0x0801f9d9
 801fa10:	0801f9d9 	.word	0x0801f9d9
 801fa14:	0801f9d9 	.word	0x0801f9d9
 801fa18:	0801f9d9 	.word	0x0801f9d9
 801fa1c:	0801fb69 	.word	0x0801fb69
 801fa20:	0801fa8d 	.word	0x0801fa8d
 801fa24:	0801fb4b 	.word	0x0801fb4b
 801fa28:	0801f9d9 	.word	0x0801f9d9
 801fa2c:	0801f9d9 	.word	0x0801f9d9
 801fa30:	0801fb8b 	.word	0x0801fb8b
 801fa34:	0801f9d9 	.word	0x0801f9d9
 801fa38:	0801fa8d 	.word	0x0801fa8d
 801fa3c:	0801f9d9 	.word	0x0801f9d9
 801fa40:	0801f9d9 	.word	0x0801f9d9
 801fa44:	0801fb53 	.word	0x0801fb53
 801fa48:	680b      	ldr	r3, [r1, #0]
 801fa4a:	1d1a      	adds	r2, r3, #4
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	600a      	str	r2, [r1, #0]
 801fa50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fa54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fa58:	2301      	movs	r3, #1
 801fa5a:	e0a3      	b.n	801fba4 <_printf_i+0x1f4>
 801fa5c:	6825      	ldr	r5, [r4, #0]
 801fa5e:	6808      	ldr	r0, [r1, #0]
 801fa60:	062e      	lsls	r6, r5, #24
 801fa62:	f100 0304 	add.w	r3, r0, #4
 801fa66:	d50a      	bpl.n	801fa7e <_printf_i+0xce>
 801fa68:	6805      	ldr	r5, [r0, #0]
 801fa6a:	600b      	str	r3, [r1, #0]
 801fa6c:	2d00      	cmp	r5, #0
 801fa6e:	da03      	bge.n	801fa78 <_printf_i+0xc8>
 801fa70:	232d      	movs	r3, #45	; 0x2d
 801fa72:	426d      	negs	r5, r5
 801fa74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fa78:	485e      	ldr	r0, [pc, #376]	; (801fbf4 <_printf_i+0x244>)
 801fa7a:	230a      	movs	r3, #10
 801fa7c:	e019      	b.n	801fab2 <_printf_i+0x102>
 801fa7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fa82:	6805      	ldr	r5, [r0, #0]
 801fa84:	600b      	str	r3, [r1, #0]
 801fa86:	bf18      	it	ne
 801fa88:	b22d      	sxthne	r5, r5
 801fa8a:	e7ef      	b.n	801fa6c <_printf_i+0xbc>
 801fa8c:	680b      	ldr	r3, [r1, #0]
 801fa8e:	6825      	ldr	r5, [r4, #0]
 801fa90:	1d18      	adds	r0, r3, #4
 801fa92:	6008      	str	r0, [r1, #0]
 801fa94:	0628      	lsls	r0, r5, #24
 801fa96:	d501      	bpl.n	801fa9c <_printf_i+0xec>
 801fa98:	681d      	ldr	r5, [r3, #0]
 801fa9a:	e002      	b.n	801faa2 <_printf_i+0xf2>
 801fa9c:	0669      	lsls	r1, r5, #25
 801fa9e:	d5fb      	bpl.n	801fa98 <_printf_i+0xe8>
 801faa0:	881d      	ldrh	r5, [r3, #0]
 801faa2:	4854      	ldr	r0, [pc, #336]	; (801fbf4 <_printf_i+0x244>)
 801faa4:	2f6f      	cmp	r7, #111	; 0x6f
 801faa6:	bf0c      	ite	eq
 801faa8:	2308      	moveq	r3, #8
 801faaa:	230a      	movne	r3, #10
 801faac:	2100      	movs	r1, #0
 801faae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fab2:	6866      	ldr	r6, [r4, #4]
 801fab4:	60a6      	str	r6, [r4, #8]
 801fab6:	2e00      	cmp	r6, #0
 801fab8:	bfa2      	ittt	ge
 801faba:	6821      	ldrge	r1, [r4, #0]
 801fabc:	f021 0104 	bicge.w	r1, r1, #4
 801fac0:	6021      	strge	r1, [r4, #0]
 801fac2:	b90d      	cbnz	r5, 801fac8 <_printf_i+0x118>
 801fac4:	2e00      	cmp	r6, #0
 801fac6:	d04d      	beq.n	801fb64 <_printf_i+0x1b4>
 801fac8:	4616      	mov	r6, r2
 801faca:	fbb5 f1f3 	udiv	r1, r5, r3
 801face:	fb03 5711 	mls	r7, r3, r1, r5
 801fad2:	5dc7      	ldrb	r7, [r0, r7]
 801fad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fad8:	462f      	mov	r7, r5
 801fada:	42bb      	cmp	r3, r7
 801fadc:	460d      	mov	r5, r1
 801fade:	d9f4      	bls.n	801faca <_printf_i+0x11a>
 801fae0:	2b08      	cmp	r3, #8
 801fae2:	d10b      	bne.n	801fafc <_printf_i+0x14c>
 801fae4:	6823      	ldr	r3, [r4, #0]
 801fae6:	07df      	lsls	r7, r3, #31
 801fae8:	d508      	bpl.n	801fafc <_printf_i+0x14c>
 801faea:	6923      	ldr	r3, [r4, #16]
 801faec:	6861      	ldr	r1, [r4, #4]
 801faee:	4299      	cmp	r1, r3
 801faf0:	bfde      	ittt	le
 801faf2:	2330      	movle	r3, #48	; 0x30
 801faf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801faf8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801fafc:	1b92      	subs	r2, r2, r6
 801fafe:	6122      	str	r2, [r4, #16]
 801fb00:	f8cd a000 	str.w	sl, [sp]
 801fb04:	464b      	mov	r3, r9
 801fb06:	aa03      	add	r2, sp, #12
 801fb08:	4621      	mov	r1, r4
 801fb0a:	4640      	mov	r0, r8
 801fb0c:	f7ff fee2 	bl	801f8d4 <_printf_common>
 801fb10:	3001      	adds	r0, #1
 801fb12:	d14c      	bne.n	801fbae <_printf_i+0x1fe>
 801fb14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb18:	b004      	add	sp, #16
 801fb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb1e:	4835      	ldr	r0, [pc, #212]	; (801fbf4 <_printf_i+0x244>)
 801fb20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fb24:	6823      	ldr	r3, [r4, #0]
 801fb26:	680e      	ldr	r6, [r1, #0]
 801fb28:	061f      	lsls	r7, r3, #24
 801fb2a:	f856 5b04 	ldr.w	r5, [r6], #4
 801fb2e:	600e      	str	r6, [r1, #0]
 801fb30:	d514      	bpl.n	801fb5c <_printf_i+0x1ac>
 801fb32:	07d9      	lsls	r1, r3, #31
 801fb34:	bf44      	itt	mi
 801fb36:	f043 0320 	orrmi.w	r3, r3, #32
 801fb3a:	6023      	strmi	r3, [r4, #0]
 801fb3c:	b91d      	cbnz	r5, 801fb46 <_printf_i+0x196>
 801fb3e:	6823      	ldr	r3, [r4, #0]
 801fb40:	f023 0320 	bic.w	r3, r3, #32
 801fb44:	6023      	str	r3, [r4, #0]
 801fb46:	2310      	movs	r3, #16
 801fb48:	e7b0      	b.n	801faac <_printf_i+0xfc>
 801fb4a:	6823      	ldr	r3, [r4, #0]
 801fb4c:	f043 0320 	orr.w	r3, r3, #32
 801fb50:	6023      	str	r3, [r4, #0]
 801fb52:	2378      	movs	r3, #120	; 0x78
 801fb54:	4828      	ldr	r0, [pc, #160]	; (801fbf8 <_printf_i+0x248>)
 801fb56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fb5a:	e7e3      	b.n	801fb24 <_printf_i+0x174>
 801fb5c:	065e      	lsls	r6, r3, #25
 801fb5e:	bf48      	it	mi
 801fb60:	b2ad      	uxthmi	r5, r5
 801fb62:	e7e6      	b.n	801fb32 <_printf_i+0x182>
 801fb64:	4616      	mov	r6, r2
 801fb66:	e7bb      	b.n	801fae0 <_printf_i+0x130>
 801fb68:	680b      	ldr	r3, [r1, #0]
 801fb6a:	6826      	ldr	r6, [r4, #0]
 801fb6c:	6960      	ldr	r0, [r4, #20]
 801fb6e:	1d1d      	adds	r5, r3, #4
 801fb70:	600d      	str	r5, [r1, #0]
 801fb72:	0635      	lsls	r5, r6, #24
 801fb74:	681b      	ldr	r3, [r3, #0]
 801fb76:	d501      	bpl.n	801fb7c <_printf_i+0x1cc>
 801fb78:	6018      	str	r0, [r3, #0]
 801fb7a:	e002      	b.n	801fb82 <_printf_i+0x1d2>
 801fb7c:	0671      	lsls	r1, r6, #25
 801fb7e:	d5fb      	bpl.n	801fb78 <_printf_i+0x1c8>
 801fb80:	8018      	strh	r0, [r3, #0]
 801fb82:	2300      	movs	r3, #0
 801fb84:	6123      	str	r3, [r4, #16]
 801fb86:	4616      	mov	r6, r2
 801fb88:	e7ba      	b.n	801fb00 <_printf_i+0x150>
 801fb8a:	680b      	ldr	r3, [r1, #0]
 801fb8c:	1d1a      	adds	r2, r3, #4
 801fb8e:	600a      	str	r2, [r1, #0]
 801fb90:	681e      	ldr	r6, [r3, #0]
 801fb92:	6862      	ldr	r2, [r4, #4]
 801fb94:	2100      	movs	r1, #0
 801fb96:	4630      	mov	r0, r6
 801fb98:	f7e0 fbaa 	bl	80002f0 <memchr>
 801fb9c:	b108      	cbz	r0, 801fba2 <_printf_i+0x1f2>
 801fb9e:	1b80      	subs	r0, r0, r6
 801fba0:	6060      	str	r0, [r4, #4]
 801fba2:	6863      	ldr	r3, [r4, #4]
 801fba4:	6123      	str	r3, [r4, #16]
 801fba6:	2300      	movs	r3, #0
 801fba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fbac:	e7a8      	b.n	801fb00 <_printf_i+0x150>
 801fbae:	6923      	ldr	r3, [r4, #16]
 801fbb0:	4632      	mov	r2, r6
 801fbb2:	4649      	mov	r1, r9
 801fbb4:	4640      	mov	r0, r8
 801fbb6:	47d0      	blx	sl
 801fbb8:	3001      	adds	r0, #1
 801fbba:	d0ab      	beq.n	801fb14 <_printf_i+0x164>
 801fbbc:	6823      	ldr	r3, [r4, #0]
 801fbbe:	079b      	lsls	r3, r3, #30
 801fbc0:	d413      	bmi.n	801fbea <_printf_i+0x23a>
 801fbc2:	68e0      	ldr	r0, [r4, #12]
 801fbc4:	9b03      	ldr	r3, [sp, #12]
 801fbc6:	4298      	cmp	r0, r3
 801fbc8:	bfb8      	it	lt
 801fbca:	4618      	movlt	r0, r3
 801fbcc:	e7a4      	b.n	801fb18 <_printf_i+0x168>
 801fbce:	2301      	movs	r3, #1
 801fbd0:	4632      	mov	r2, r6
 801fbd2:	4649      	mov	r1, r9
 801fbd4:	4640      	mov	r0, r8
 801fbd6:	47d0      	blx	sl
 801fbd8:	3001      	adds	r0, #1
 801fbda:	d09b      	beq.n	801fb14 <_printf_i+0x164>
 801fbdc:	3501      	adds	r5, #1
 801fbde:	68e3      	ldr	r3, [r4, #12]
 801fbe0:	9903      	ldr	r1, [sp, #12]
 801fbe2:	1a5b      	subs	r3, r3, r1
 801fbe4:	42ab      	cmp	r3, r5
 801fbe6:	dcf2      	bgt.n	801fbce <_printf_i+0x21e>
 801fbe8:	e7eb      	b.n	801fbc2 <_printf_i+0x212>
 801fbea:	2500      	movs	r5, #0
 801fbec:	f104 0619 	add.w	r6, r4, #25
 801fbf0:	e7f5      	b.n	801fbde <_printf_i+0x22e>
 801fbf2:	bf00      	nop
 801fbf4:	08028446 	.word	0x08028446
 801fbf8:	08028457 	.word	0x08028457

0801fbfc <_scanf_float>:
 801fbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc00:	b087      	sub	sp, #28
 801fc02:	4617      	mov	r7, r2
 801fc04:	9303      	str	r3, [sp, #12]
 801fc06:	688b      	ldr	r3, [r1, #8]
 801fc08:	1e5a      	subs	r2, r3, #1
 801fc0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801fc0e:	bf83      	ittte	hi
 801fc10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801fc14:	195b      	addhi	r3, r3, r5
 801fc16:	9302      	strhi	r3, [sp, #8]
 801fc18:	2300      	movls	r3, #0
 801fc1a:	bf86      	itte	hi
 801fc1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801fc20:	608b      	strhi	r3, [r1, #8]
 801fc22:	9302      	strls	r3, [sp, #8]
 801fc24:	680b      	ldr	r3, [r1, #0]
 801fc26:	468b      	mov	fp, r1
 801fc28:	2500      	movs	r5, #0
 801fc2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801fc2e:	f84b 3b1c 	str.w	r3, [fp], #28
 801fc32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801fc36:	4680      	mov	r8, r0
 801fc38:	460c      	mov	r4, r1
 801fc3a:	465e      	mov	r6, fp
 801fc3c:	46aa      	mov	sl, r5
 801fc3e:	46a9      	mov	r9, r5
 801fc40:	9501      	str	r5, [sp, #4]
 801fc42:	68a2      	ldr	r2, [r4, #8]
 801fc44:	b152      	cbz	r2, 801fc5c <_scanf_float+0x60>
 801fc46:	683b      	ldr	r3, [r7, #0]
 801fc48:	781b      	ldrb	r3, [r3, #0]
 801fc4a:	2b4e      	cmp	r3, #78	; 0x4e
 801fc4c:	d864      	bhi.n	801fd18 <_scanf_float+0x11c>
 801fc4e:	2b40      	cmp	r3, #64	; 0x40
 801fc50:	d83c      	bhi.n	801fccc <_scanf_float+0xd0>
 801fc52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801fc56:	b2c8      	uxtb	r0, r1
 801fc58:	280e      	cmp	r0, #14
 801fc5a:	d93a      	bls.n	801fcd2 <_scanf_float+0xd6>
 801fc5c:	f1b9 0f00 	cmp.w	r9, #0
 801fc60:	d003      	beq.n	801fc6a <_scanf_float+0x6e>
 801fc62:	6823      	ldr	r3, [r4, #0]
 801fc64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fc68:	6023      	str	r3, [r4, #0]
 801fc6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801fc6e:	f1ba 0f01 	cmp.w	sl, #1
 801fc72:	f200 8113 	bhi.w	801fe9c <_scanf_float+0x2a0>
 801fc76:	455e      	cmp	r6, fp
 801fc78:	f200 8105 	bhi.w	801fe86 <_scanf_float+0x28a>
 801fc7c:	2501      	movs	r5, #1
 801fc7e:	4628      	mov	r0, r5
 801fc80:	b007      	add	sp, #28
 801fc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801fc8a:	2a0d      	cmp	r2, #13
 801fc8c:	d8e6      	bhi.n	801fc5c <_scanf_float+0x60>
 801fc8e:	a101      	add	r1, pc, #4	; (adr r1, 801fc94 <_scanf_float+0x98>)
 801fc90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801fc94:	0801fdd3 	.word	0x0801fdd3
 801fc98:	0801fc5d 	.word	0x0801fc5d
 801fc9c:	0801fc5d 	.word	0x0801fc5d
 801fca0:	0801fc5d 	.word	0x0801fc5d
 801fca4:	0801fe33 	.word	0x0801fe33
 801fca8:	0801fe0b 	.word	0x0801fe0b
 801fcac:	0801fc5d 	.word	0x0801fc5d
 801fcb0:	0801fc5d 	.word	0x0801fc5d
 801fcb4:	0801fde1 	.word	0x0801fde1
 801fcb8:	0801fc5d 	.word	0x0801fc5d
 801fcbc:	0801fc5d 	.word	0x0801fc5d
 801fcc0:	0801fc5d 	.word	0x0801fc5d
 801fcc4:	0801fc5d 	.word	0x0801fc5d
 801fcc8:	0801fd99 	.word	0x0801fd99
 801fccc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801fcd0:	e7db      	b.n	801fc8a <_scanf_float+0x8e>
 801fcd2:	290e      	cmp	r1, #14
 801fcd4:	d8c2      	bhi.n	801fc5c <_scanf_float+0x60>
 801fcd6:	a001      	add	r0, pc, #4	; (adr r0, 801fcdc <_scanf_float+0xe0>)
 801fcd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801fcdc:	0801fd8b 	.word	0x0801fd8b
 801fce0:	0801fc5d 	.word	0x0801fc5d
 801fce4:	0801fd8b 	.word	0x0801fd8b
 801fce8:	0801fe1f 	.word	0x0801fe1f
 801fcec:	0801fc5d 	.word	0x0801fc5d
 801fcf0:	0801fd39 	.word	0x0801fd39
 801fcf4:	0801fd75 	.word	0x0801fd75
 801fcf8:	0801fd75 	.word	0x0801fd75
 801fcfc:	0801fd75 	.word	0x0801fd75
 801fd00:	0801fd75 	.word	0x0801fd75
 801fd04:	0801fd75 	.word	0x0801fd75
 801fd08:	0801fd75 	.word	0x0801fd75
 801fd0c:	0801fd75 	.word	0x0801fd75
 801fd10:	0801fd75 	.word	0x0801fd75
 801fd14:	0801fd75 	.word	0x0801fd75
 801fd18:	2b6e      	cmp	r3, #110	; 0x6e
 801fd1a:	d809      	bhi.n	801fd30 <_scanf_float+0x134>
 801fd1c:	2b60      	cmp	r3, #96	; 0x60
 801fd1e:	d8b2      	bhi.n	801fc86 <_scanf_float+0x8a>
 801fd20:	2b54      	cmp	r3, #84	; 0x54
 801fd22:	d077      	beq.n	801fe14 <_scanf_float+0x218>
 801fd24:	2b59      	cmp	r3, #89	; 0x59
 801fd26:	d199      	bne.n	801fc5c <_scanf_float+0x60>
 801fd28:	2d07      	cmp	r5, #7
 801fd2a:	d197      	bne.n	801fc5c <_scanf_float+0x60>
 801fd2c:	2508      	movs	r5, #8
 801fd2e:	e029      	b.n	801fd84 <_scanf_float+0x188>
 801fd30:	2b74      	cmp	r3, #116	; 0x74
 801fd32:	d06f      	beq.n	801fe14 <_scanf_float+0x218>
 801fd34:	2b79      	cmp	r3, #121	; 0x79
 801fd36:	e7f6      	b.n	801fd26 <_scanf_float+0x12a>
 801fd38:	6821      	ldr	r1, [r4, #0]
 801fd3a:	05c8      	lsls	r0, r1, #23
 801fd3c:	d51a      	bpl.n	801fd74 <_scanf_float+0x178>
 801fd3e:	9b02      	ldr	r3, [sp, #8]
 801fd40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801fd44:	6021      	str	r1, [r4, #0]
 801fd46:	f109 0901 	add.w	r9, r9, #1
 801fd4a:	b11b      	cbz	r3, 801fd54 <_scanf_float+0x158>
 801fd4c:	3b01      	subs	r3, #1
 801fd4e:	3201      	adds	r2, #1
 801fd50:	9302      	str	r3, [sp, #8]
 801fd52:	60a2      	str	r2, [r4, #8]
 801fd54:	68a3      	ldr	r3, [r4, #8]
 801fd56:	3b01      	subs	r3, #1
 801fd58:	60a3      	str	r3, [r4, #8]
 801fd5a:	6923      	ldr	r3, [r4, #16]
 801fd5c:	3301      	adds	r3, #1
 801fd5e:	6123      	str	r3, [r4, #16]
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	3b01      	subs	r3, #1
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	607b      	str	r3, [r7, #4]
 801fd68:	f340 8084 	ble.w	801fe74 <_scanf_float+0x278>
 801fd6c:	683b      	ldr	r3, [r7, #0]
 801fd6e:	3301      	adds	r3, #1
 801fd70:	603b      	str	r3, [r7, #0]
 801fd72:	e766      	b.n	801fc42 <_scanf_float+0x46>
 801fd74:	eb1a 0f05 	cmn.w	sl, r5
 801fd78:	f47f af70 	bne.w	801fc5c <_scanf_float+0x60>
 801fd7c:	6822      	ldr	r2, [r4, #0]
 801fd7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801fd82:	6022      	str	r2, [r4, #0]
 801fd84:	f806 3b01 	strb.w	r3, [r6], #1
 801fd88:	e7e4      	b.n	801fd54 <_scanf_float+0x158>
 801fd8a:	6822      	ldr	r2, [r4, #0]
 801fd8c:	0610      	lsls	r0, r2, #24
 801fd8e:	f57f af65 	bpl.w	801fc5c <_scanf_float+0x60>
 801fd92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801fd96:	e7f4      	b.n	801fd82 <_scanf_float+0x186>
 801fd98:	f1ba 0f00 	cmp.w	sl, #0
 801fd9c:	d10e      	bne.n	801fdbc <_scanf_float+0x1c0>
 801fd9e:	f1b9 0f00 	cmp.w	r9, #0
 801fda2:	d10e      	bne.n	801fdc2 <_scanf_float+0x1c6>
 801fda4:	6822      	ldr	r2, [r4, #0]
 801fda6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801fdaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801fdae:	d108      	bne.n	801fdc2 <_scanf_float+0x1c6>
 801fdb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801fdb4:	6022      	str	r2, [r4, #0]
 801fdb6:	f04f 0a01 	mov.w	sl, #1
 801fdba:	e7e3      	b.n	801fd84 <_scanf_float+0x188>
 801fdbc:	f1ba 0f02 	cmp.w	sl, #2
 801fdc0:	d055      	beq.n	801fe6e <_scanf_float+0x272>
 801fdc2:	2d01      	cmp	r5, #1
 801fdc4:	d002      	beq.n	801fdcc <_scanf_float+0x1d0>
 801fdc6:	2d04      	cmp	r5, #4
 801fdc8:	f47f af48 	bne.w	801fc5c <_scanf_float+0x60>
 801fdcc:	3501      	adds	r5, #1
 801fdce:	b2ed      	uxtb	r5, r5
 801fdd0:	e7d8      	b.n	801fd84 <_scanf_float+0x188>
 801fdd2:	f1ba 0f01 	cmp.w	sl, #1
 801fdd6:	f47f af41 	bne.w	801fc5c <_scanf_float+0x60>
 801fdda:	f04f 0a02 	mov.w	sl, #2
 801fdde:	e7d1      	b.n	801fd84 <_scanf_float+0x188>
 801fde0:	b97d      	cbnz	r5, 801fe02 <_scanf_float+0x206>
 801fde2:	f1b9 0f00 	cmp.w	r9, #0
 801fde6:	f47f af3c 	bne.w	801fc62 <_scanf_float+0x66>
 801fdea:	6822      	ldr	r2, [r4, #0]
 801fdec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801fdf0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801fdf4:	f47f af39 	bne.w	801fc6a <_scanf_float+0x6e>
 801fdf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801fdfc:	6022      	str	r2, [r4, #0]
 801fdfe:	2501      	movs	r5, #1
 801fe00:	e7c0      	b.n	801fd84 <_scanf_float+0x188>
 801fe02:	2d03      	cmp	r5, #3
 801fe04:	d0e2      	beq.n	801fdcc <_scanf_float+0x1d0>
 801fe06:	2d05      	cmp	r5, #5
 801fe08:	e7de      	b.n	801fdc8 <_scanf_float+0x1cc>
 801fe0a:	2d02      	cmp	r5, #2
 801fe0c:	f47f af26 	bne.w	801fc5c <_scanf_float+0x60>
 801fe10:	2503      	movs	r5, #3
 801fe12:	e7b7      	b.n	801fd84 <_scanf_float+0x188>
 801fe14:	2d06      	cmp	r5, #6
 801fe16:	f47f af21 	bne.w	801fc5c <_scanf_float+0x60>
 801fe1a:	2507      	movs	r5, #7
 801fe1c:	e7b2      	b.n	801fd84 <_scanf_float+0x188>
 801fe1e:	6822      	ldr	r2, [r4, #0]
 801fe20:	0591      	lsls	r1, r2, #22
 801fe22:	f57f af1b 	bpl.w	801fc5c <_scanf_float+0x60>
 801fe26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801fe2a:	6022      	str	r2, [r4, #0]
 801fe2c:	f8cd 9004 	str.w	r9, [sp, #4]
 801fe30:	e7a8      	b.n	801fd84 <_scanf_float+0x188>
 801fe32:	6822      	ldr	r2, [r4, #0]
 801fe34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801fe38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801fe3c:	d006      	beq.n	801fe4c <_scanf_float+0x250>
 801fe3e:	0550      	lsls	r0, r2, #21
 801fe40:	f57f af0c 	bpl.w	801fc5c <_scanf_float+0x60>
 801fe44:	f1b9 0f00 	cmp.w	r9, #0
 801fe48:	f43f af0f 	beq.w	801fc6a <_scanf_float+0x6e>
 801fe4c:	0591      	lsls	r1, r2, #22
 801fe4e:	bf58      	it	pl
 801fe50:	9901      	ldrpl	r1, [sp, #4]
 801fe52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801fe56:	bf58      	it	pl
 801fe58:	eba9 0101 	subpl.w	r1, r9, r1
 801fe5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801fe60:	bf58      	it	pl
 801fe62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801fe66:	6022      	str	r2, [r4, #0]
 801fe68:	f04f 0900 	mov.w	r9, #0
 801fe6c:	e78a      	b.n	801fd84 <_scanf_float+0x188>
 801fe6e:	f04f 0a03 	mov.w	sl, #3
 801fe72:	e787      	b.n	801fd84 <_scanf_float+0x188>
 801fe74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fe78:	4639      	mov	r1, r7
 801fe7a:	4640      	mov	r0, r8
 801fe7c:	4798      	blx	r3
 801fe7e:	2800      	cmp	r0, #0
 801fe80:	f43f aedf 	beq.w	801fc42 <_scanf_float+0x46>
 801fe84:	e6ea      	b.n	801fc5c <_scanf_float+0x60>
 801fe86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fe8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801fe8e:	463a      	mov	r2, r7
 801fe90:	4640      	mov	r0, r8
 801fe92:	4798      	blx	r3
 801fe94:	6923      	ldr	r3, [r4, #16]
 801fe96:	3b01      	subs	r3, #1
 801fe98:	6123      	str	r3, [r4, #16]
 801fe9a:	e6ec      	b.n	801fc76 <_scanf_float+0x7a>
 801fe9c:	1e6b      	subs	r3, r5, #1
 801fe9e:	2b06      	cmp	r3, #6
 801fea0:	d825      	bhi.n	801feee <_scanf_float+0x2f2>
 801fea2:	2d02      	cmp	r5, #2
 801fea4:	d836      	bhi.n	801ff14 <_scanf_float+0x318>
 801fea6:	455e      	cmp	r6, fp
 801fea8:	f67f aee8 	bls.w	801fc7c <_scanf_float+0x80>
 801feac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801feb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801feb4:	463a      	mov	r2, r7
 801feb6:	4640      	mov	r0, r8
 801feb8:	4798      	blx	r3
 801feba:	6923      	ldr	r3, [r4, #16]
 801febc:	3b01      	subs	r3, #1
 801febe:	6123      	str	r3, [r4, #16]
 801fec0:	e7f1      	b.n	801fea6 <_scanf_float+0x2aa>
 801fec2:	9802      	ldr	r0, [sp, #8]
 801fec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fec8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801fecc:	9002      	str	r0, [sp, #8]
 801fece:	463a      	mov	r2, r7
 801fed0:	4640      	mov	r0, r8
 801fed2:	4798      	blx	r3
 801fed4:	6923      	ldr	r3, [r4, #16]
 801fed6:	3b01      	subs	r3, #1
 801fed8:	6123      	str	r3, [r4, #16]
 801feda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801fede:	fa5f fa8a 	uxtb.w	sl, sl
 801fee2:	f1ba 0f02 	cmp.w	sl, #2
 801fee6:	d1ec      	bne.n	801fec2 <_scanf_float+0x2c6>
 801fee8:	3d03      	subs	r5, #3
 801feea:	b2ed      	uxtb	r5, r5
 801feec:	1b76      	subs	r6, r6, r5
 801feee:	6823      	ldr	r3, [r4, #0]
 801fef0:	05da      	lsls	r2, r3, #23
 801fef2:	d52f      	bpl.n	801ff54 <_scanf_float+0x358>
 801fef4:	055b      	lsls	r3, r3, #21
 801fef6:	d510      	bpl.n	801ff1a <_scanf_float+0x31e>
 801fef8:	455e      	cmp	r6, fp
 801fefa:	f67f aebf 	bls.w	801fc7c <_scanf_float+0x80>
 801fefe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ff02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ff06:	463a      	mov	r2, r7
 801ff08:	4640      	mov	r0, r8
 801ff0a:	4798      	blx	r3
 801ff0c:	6923      	ldr	r3, [r4, #16]
 801ff0e:	3b01      	subs	r3, #1
 801ff10:	6123      	str	r3, [r4, #16]
 801ff12:	e7f1      	b.n	801fef8 <_scanf_float+0x2fc>
 801ff14:	46aa      	mov	sl, r5
 801ff16:	9602      	str	r6, [sp, #8]
 801ff18:	e7df      	b.n	801feda <_scanf_float+0x2de>
 801ff1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ff1e:	6923      	ldr	r3, [r4, #16]
 801ff20:	2965      	cmp	r1, #101	; 0x65
 801ff22:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801ff26:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801ff2a:	6123      	str	r3, [r4, #16]
 801ff2c:	d00c      	beq.n	801ff48 <_scanf_float+0x34c>
 801ff2e:	2945      	cmp	r1, #69	; 0x45
 801ff30:	d00a      	beq.n	801ff48 <_scanf_float+0x34c>
 801ff32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ff36:	463a      	mov	r2, r7
 801ff38:	4640      	mov	r0, r8
 801ff3a:	4798      	blx	r3
 801ff3c:	6923      	ldr	r3, [r4, #16]
 801ff3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ff42:	3b01      	subs	r3, #1
 801ff44:	1eb5      	subs	r5, r6, #2
 801ff46:	6123      	str	r3, [r4, #16]
 801ff48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ff4c:	463a      	mov	r2, r7
 801ff4e:	4640      	mov	r0, r8
 801ff50:	4798      	blx	r3
 801ff52:	462e      	mov	r6, r5
 801ff54:	6825      	ldr	r5, [r4, #0]
 801ff56:	f015 0510 	ands.w	r5, r5, #16
 801ff5a:	d14d      	bne.n	801fff8 <_scanf_float+0x3fc>
 801ff5c:	7035      	strb	r5, [r6, #0]
 801ff5e:	6823      	ldr	r3, [r4, #0]
 801ff60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ff64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ff68:	d11a      	bne.n	801ffa0 <_scanf_float+0x3a4>
 801ff6a:	9b01      	ldr	r3, [sp, #4]
 801ff6c:	454b      	cmp	r3, r9
 801ff6e:	eba3 0209 	sub.w	r2, r3, r9
 801ff72:	d122      	bne.n	801ffba <_scanf_float+0x3be>
 801ff74:	2200      	movs	r2, #0
 801ff76:	4659      	mov	r1, fp
 801ff78:	4640      	mov	r0, r8
 801ff7a:	f000 ff4b 	bl	8020e14 <_strtod_r>
 801ff7e:	9b03      	ldr	r3, [sp, #12]
 801ff80:	6821      	ldr	r1, [r4, #0]
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	f011 0f02 	tst.w	r1, #2
 801ff88:	f103 0204 	add.w	r2, r3, #4
 801ff8c:	d020      	beq.n	801ffd0 <_scanf_float+0x3d4>
 801ff8e:	9903      	ldr	r1, [sp, #12]
 801ff90:	600a      	str	r2, [r1, #0]
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	ed83 0b00 	vstr	d0, [r3]
 801ff98:	68e3      	ldr	r3, [r4, #12]
 801ff9a:	3301      	adds	r3, #1
 801ff9c:	60e3      	str	r3, [r4, #12]
 801ff9e:	e66e      	b.n	801fc7e <_scanf_float+0x82>
 801ffa0:	9b04      	ldr	r3, [sp, #16]
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d0e6      	beq.n	801ff74 <_scanf_float+0x378>
 801ffa6:	9905      	ldr	r1, [sp, #20]
 801ffa8:	230a      	movs	r3, #10
 801ffaa:	462a      	mov	r2, r5
 801ffac:	3101      	adds	r1, #1
 801ffae:	4640      	mov	r0, r8
 801ffb0:	f000 ffba 	bl	8020f28 <_strtol_r>
 801ffb4:	9b04      	ldr	r3, [sp, #16]
 801ffb6:	9e05      	ldr	r6, [sp, #20]
 801ffb8:	1ac2      	subs	r2, r0, r3
 801ffba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ffbe:	429e      	cmp	r6, r3
 801ffc0:	bf28      	it	cs
 801ffc2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ffc6:	490d      	ldr	r1, [pc, #52]	; (801fffc <_scanf_float+0x400>)
 801ffc8:	4630      	mov	r0, r6
 801ffca:	f000 f8ff 	bl	80201cc <siprintf>
 801ffce:	e7d1      	b.n	801ff74 <_scanf_float+0x378>
 801ffd0:	f011 0f04 	tst.w	r1, #4
 801ffd4:	9903      	ldr	r1, [sp, #12]
 801ffd6:	600a      	str	r2, [r1, #0]
 801ffd8:	d1db      	bne.n	801ff92 <_scanf_float+0x396>
 801ffda:	eeb4 0b40 	vcmp.f64	d0, d0
 801ffde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffe2:	681e      	ldr	r6, [r3, #0]
 801ffe4:	d705      	bvc.n	801fff2 <_scanf_float+0x3f6>
 801ffe6:	4806      	ldr	r0, [pc, #24]	; (8020000 <_scanf_float+0x404>)
 801ffe8:	f000 f8ea 	bl	80201c0 <nanf>
 801ffec:	ed86 0a00 	vstr	s0, [r6]
 801fff0:	e7d2      	b.n	801ff98 <_scanf_float+0x39c>
 801fff2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fff6:	e7f9      	b.n	801ffec <_scanf_float+0x3f0>
 801fff8:	2500      	movs	r5, #0
 801fffa:	e640      	b.n	801fc7e <_scanf_float+0x82>
 801fffc:	08028468 	.word	0x08028468
 8020000:	08028573 	.word	0x08028573

08020004 <iprintf>:
 8020004:	b40f      	push	{r0, r1, r2, r3}
 8020006:	4b0a      	ldr	r3, [pc, #40]	; (8020030 <iprintf+0x2c>)
 8020008:	b513      	push	{r0, r1, r4, lr}
 802000a:	681c      	ldr	r4, [r3, #0]
 802000c:	b124      	cbz	r4, 8020018 <iprintf+0x14>
 802000e:	69a3      	ldr	r3, [r4, #24]
 8020010:	b913      	cbnz	r3, 8020018 <iprintf+0x14>
 8020012:	4620      	mov	r0, r4
 8020014:	f001 ff96 	bl	8021f44 <__sinit>
 8020018:	ab05      	add	r3, sp, #20
 802001a:	9a04      	ldr	r2, [sp, #16]
 802001c:	68a1      	ldr	r1, [r4, #8]
 802001e:	9301      	str	r3, [sp, #4]
 8020020:	4620      	mov	r0, r4
 8020022:	f003 fa87 	bl	8023534 <_vfiprintf_r>
 8020026:	b002      	add	sp, #8
 8020028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802002c:	b004      	add	sp, #16
 802002e:	4770      	bx	lr
 8020030:	24003444 	.word	0x24003444

08020034 <_puts_r>:
 8020034:	b570      	push	{r4, r5, r6, lr}
 8020036:	460e      	mov	r6, r1
 8020038:	4605      	mov	r5, r0
 802003a:	b118      	cbz	r0, 8020044 <_puts_r+0x10>
 802003c:	6983      	ldr	r3, [r0, #24]
 802003e:	b90b      	cbnz	r3, 8020044 <_puts_r+0x10>
 8020040:	f001 ff80 	bl	8021f44 <__sinit>
 8020044:	69ab      	ldr	r3, [r5, #24]
 8020046:	68ac      	ldr	r4, [r5, #8]
 8020048:	b913      	cbnz	r3, 8020050 <_puts_r+0x1c>
 802004a:	4628      	mov	r0, r5
 802004c:	f001 ff7a 	bl	8021f44 <__sinit>
 8020050:	4b2c      	ldr	r3, [pc, #176]	; (8020104 <_puts_r+0xd0>)
 8020052:	429c      	cmp	r4, r3
 8020054:	d120      	bne.n	8020098 <_puts_r+0x64>
 8020056:	686c      	ldr	r4, [r5, #4]
 8020058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802005a:	07db      	lsls	r3, r3, #31
 802005c:	d405      	bmi.n	802006a <_puts_r+0x36>
 802005e:	89a3      	ldrh	r3, [r4, #12]
 8020060:	0598      	lsls	r0, r3, #22
 8020062:	d402      	bmi.n	802006a <_puts_r+0x36>
 8020064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020066:	f002 fb90 	bl	802278a <__retarget_lock_acquire_recursive>
 802006a:	89a3      	ldrh	r3, [r4, #12]
 802006c:	0719      	lsls	r1, r3, #28
 802006e:	d51d      	bpl.n	80200ac <_puts_r+0x78>
 8020070:	6923      	ldr	r3, [r4, #16]
 8020072:	b1db      	cbz	r3, 80200ac <_puts_r+0x78>
 8020074:	3e01      	subs	r6, #1
 8020076:	68a3      	ldr	r3, [r4, #8]
 8020078:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802007c:	3b01      	subs	r3, #1
 802007e:	60a3      	str	r3, [r4, #8]
 8020080:	bb39      	cbnz	r1, 80200d2 <_puts_r+0x9e>
 8020082:	2b00      	cmp	r3, #0
 8020084:	da38      	bge.n	80200f8 <_puts_r+0xc4>
 8020086:	4622      	mov	r2, r4
 8020088:	210a      	movs	r1, #10
 802008a:	4628      	mov	r0, r5
 802008c:	f000 ff4e 	bl	8020f2c <__swbuf_r>
 8020090:	3001      	adds	r0, #1
 8020092:	d011      	beq.n	80200b8 <_puts_r+0x84>
 8020094:	250a      	movs	r5, #10
 8020096:	e011      	b.n	80200bc <_puts_r+0x88>
 8020098:	4b1b      	ldr	r3, [pc, #108]	; (8020108 <_puts_r+0xd4>)
 802009a:	429c      	cmp	r4, r3
 802009c:	d101      	bne.n	80200a2 <_puts_r+0x6e>
 802009e:	68ac      	ldr	r4, [r5, #8]
 80200a0:	e7da      	b.n	8020058 <_puts_r+0x24>
 80200a2:	4b1a      	ldr	r3, [pc, #104]	; (802010c <_puts_r+0xd8>)
 80200a4:	429c      	cmp	r4, r3
 80200a6:	bf08      	it	eq
 80200a8:	68ec      	ldreq	r4, [r5, #12]
 80200aa:	e7d5      	b.n	8020058 <_puts_r+0x24>
 80200ac:	4621      	mov	r1, r4
 80200ae:	4628      	mov	r0, r5
 80200b0:	f000 ff8e 	bl	8020fd0 <__swsetup_r>
 80200b4:	2800      	cmp	r0, #0
 80200b6:	d0dd      	beq.n	8020074 <_puts_r+0x40>
 80200b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80200bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80200be:	07da      	lsls	r2, r3, #31
 80200c0:	d405      	bmi.n	80200ce <_puts_r+0x9a>
 80200c2:	89a3      	ldrh	r3, [r4, #12]
 80200c4:	059b      	lsls	r3, r3, #22
 80200c6:	d402      	bmi.n	80200ce <_puts_r+0x9a>
 80200c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80200ca:	f002 fb5f 	bl	802278c <__retarget_lock_release_recursive>
 80200ce:	4628      	mov	r0, r5
 80200d0:	bd70      	pop	{r4, r5, r6, pc}
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	da04      	bge.n	80200e0 <_puts_r+0xac>
 80200d6:	69a2      	ldr	r2, [r4, #24]
 80200d8:	429a      	cmp	r2, r3
 80200da:	dc06      	bgt.n	80200ea <_puts_r+0xb6>
 80200dc:	290a      	cmp	r1, #10
 80200de:	d004      	beq.n	80200ea <_puts_r+0xb6>
 80200e0:	6823      	ldr	r3, [r4, #0]
 80200e2:	1c5a      	adds	r2, r3, #1
 80200e4:	6022      	str	r2, [r4, #0]
 80200e6:	7019      	strb	r1, [r3, #0]
 80200e8:	e7c5      	b.n	8020076 <_puts_r+0x42>
 80200ea:	4622      	mov	r2, r4
 80200ec:	4628      	mov	r0, r5
 80200ee:	f000 ff1d 	bl	8020f2c <__swbuf_r>
 80200f2:	3001      	adds	r0, #1
 80200f4:	d1bf      	bne.n	8020076 <_puts_r+0x42>
 80200f6:	e7df      	b.n	80200b8 <_puts_r+0x84>
 80200f8:	6823      	ldr	r3, [r4, #0]
 80200fa:	250a      	movs	r5, #10
 80200fc:	1c5a      	adds	r2, r3, #1
 80200fe:	6022      	str	r2, [r4, #0]
 8020100:	701d      	strb	r5, [r3, #0]
 8020102:	e7db      	b.n	80200bc <_puts_r+0x88>
 8020104:	08028614 	.word	0x08028614
 8020108:	08028634 	.word	0x08028634
 802010c:	080285f4 	.word	0x080285f4

08020110 <puts>:
 8020110:	4b02      	ldr	r3, [pc, #8]	; (802011c <puts+0xc>)
 8020112:	4601      	mov	r1, r0
 8020114:	6818      	ldr	r0, [r3, #0]
 8020116:	f7ff bf8d 	b.w	8020034 <_puts_r>
 802011a:	bf00      	nop
 802011c:	24003444 	.word	0x24003444

08020120 <rand>:
 8020120:	4b17      	ldr	r3, [pc, #92]	; (8020180 <rand+0x60>)
 8020122:	b510      	push	{r4, lr}
 8020124:	681c      	ldr	r4, [r3, #0]
 8020126:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020128:	b9b3      	cbnz	r3, 8020158 <rand+0x38>
 802012a:	2018      	movs	r0, #24
 802012c:	f7ff f832 	bl	801f194 <malloc>
 8020130:	63a0      	str	r0, [r4, #56]	; 0x38
 8020132:	b928      	cbnz	r0, 8020140 <rand+0x20>
 8020134:	4602      	mov	r2, r0
 8020136:	4b13      	ldr	r3, [pc, #76]	; (8020184 <rand+0x64>)
 8020138:	4813      	ldr	r0, [pc, #76]	; (8020188 <rand+0x68>)
 802013a:	214e      	movs	r1, #78	; 0x4e
 802013c:	f000 ffb6 	bl	80210ac <__assert_func>
 8020140:	4a12      	ldr	r2, [pc, #72]	; (802018c <rand+0x6c>)
 8020142:	4b13      	ldr	r3, [pc, #76]	; (8020190 <rand+0x70>)
 8020144:	e9c0 2300 	strd	r2, r3, [r0]
 8020148:	4b12      	ldr	r3, [pc, #72]	; (8020194 <rand+0x74>)
 802014a:	6083      	str	r3, [r0, #8]
 802014c:	230b      	movs	r3, #11
 802014e:	8183      	strh	r3, [r0, #12]
 8020150:	2201      	movs	r2, #1
 8020152:	2300      	movs	r3, #0
 8020154:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8020158:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802015a:	480f      	ldr	r0, [pc, #60]	; (8020198 <rand+0x78>)
 802015c:	690a      	ldr	r2, [r1, #16]
 802015e:	694b      	ldr	r3, [r1, #20]
 8020160:	4c0e      	ldr	r4, [pc, #56]	; (802019c <rand+0x7c>)
 8020162:	4350      	muls	r0, r2
 8020164:	fb04 0003 	mla	r0, r4, r3, r0
 8020168:	fba2 3404 	umull	r3, r4, r2, r4
 802016c:	1c5a      	adds	r2, r3, #1
 802016e:	4404      	add	r4, r0
 8020170:	f144 0000 	adc.w	r0, r4, #0
 8020174:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8020178:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802017c:	bd10      	pop	{r4, pc}
 802017e:	bf00      	nop
 8020180:	24003444 	.word	0x24003444
 8020184:	0802846d 	.word	0x0802846d
 8020188:	08028484 	.word	0x08028484
 802018c:	abcd330e 	.word	0xabcd330e
 8020190:	e66d1234 	.word	0xe66d1234
 8020194:	0005deec 	.word	0x0005deec
 8020198:	5851f42d 	.word	0x5851f42d
 802019c:	4c957f2d 	.word	0x4c957f2d

080201a0 <_sbrk_r>:
 80201a0:	b538      	push	{r3, r4, r5, lr}
 80201a2:	4d06      	ldr	r5, [pc, #24]	; (80201bc <_sbrk_r+0x1c>)
 80201a4:	2300      	movs	r3, #0
 80201a6:	4604      	mov	r4, r0
 80201a8:	4608      	mov	r0, r1
 80201aa:	602b      	str	r3, [r5, #0]
 80201ac:	f7e3 f8e2 	bl	8003374 <_sbrk>
 80201b0:	1c43      	adds	r3, r0, #1
 80201b2:	d102      	bne.n	80201ba <_sbrk_r+0x1a>
 80201b4:	682b      	ldr	r3, [r5, #0]
 80201b6:	b103      	cbz	r3, 80201ba <_sbrk_r+0x1a>
 80201b8:	6023      	str	r3, [r4, #0]
 80201ba:	bd38      	pop	{r3, r4, r5, pc}
 80201bc:	2400b054 	.word	0x2400b054

080201c0 <nanf>:
 80201c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80201c8 <nanf+0x8>
 80201c4:	4770      	bx	lr
 80201c6:	bf00      	nop
 80201c8:	7fc00000 	.word	0x7fc00000

080201cc <siprintf>:
 80201cc:	b40e      	push	{r1, r2, r3}
 80201ce:	b500      	push	{lr}
 80201d0:	b09c      	sub	sp, #112	; 0x70
 80201d2:	ab1d      	add	r3, sp, #116	; 0x74
 80201d4:	9002      	str	r0, [sp, #8]
 80201d6:	9006      	str	r0, [sp, #24]
 80201d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80201dc:	4809      	ldr	r0, [pc, #36]	; (8020204 <siprintf+0x38>)
 80201de:	9107      	str	r1, [sp, #28]
 80201e0:	9104      	str	r1, [sp, #16]
 80201e2:	4909      	ldr	r1, [pc, #36]	; (8020208 <siprintf+0x3c>)
 80201e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80201e8:	9105      	str	r1, [sp, #20]
 80201ea:	6800      	ldr	r0, [r0, #0]
 80201ec:	9301      	str	r3, [sp, #4]
 80201ee:	a902      	add	r1, sp, #8
 80201f0:	f003 f876 	bl	80232e0 <_svfiprintf_r>
 80201f4:	9b02      	ldr	r3, [sp, #8]
 80201f6:	2200      	movs	r2, #0
 80201f8:	701a      	strb	r2, [r3, #0]
 80201fa:	b01c      	add	sp, #112	; 0x70
 80201fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8020200:	b003      	add	sp, #12
 8020202:	4770      	bx	lr
 8020204:	24003444 	.word	0x24003444
 8020208:	ffff0208 	.word	0xffff0208

0802020c <strncmp>:
 802020c:	b510      	push	{r4, lr}
 802020e:	b16a      	cbz	r2, 802022c <strncmp+0x20>
 8020210:	3901      	subs	r1, #1
 8020212:	1884      	adds	r4, r0, r2
 8020214:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020218:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802021c:	4293      	cmp	r3, r2
 802021e:	d103      	bne.n	8020228 <strncmp+0x1c>
 8020220:	42a0      	cmp	r0, r4
 8020222:	d001      	beq.n	8020228 <strncmp+0x1c>
 8020224:	2b00      	cmp	r3, #0
 8020226:	d1f5      	bne.n	8020214 <strncmp+0x8>
 8020228:	1a98      	subs	r0, r3, r2
 802022a:	bd10      	pop	{r4, pc}
 802022c:	4610      	mov	r0, r2
 802022e:	e7fc      	b.n	802022a <strncmp+0x1e>

08020230 <sulp>:
 8020230:	b570      	push	{r4, r5, r6, lr}
 8020232:	4604      	mov	r4, r0
 8020234:	460d      	mov	r5, r1
 8020236:	4616      	mov	r6, r2
 8020238:	ec45 4b10 	vmov	d0, r4, r5
 802023c:	f002 fe96 	bl	8022f6c <__ulp>
 8020240:	b17e      	cbz	r6, 8020262 <sulp+0x32>
 8020242:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8020246:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802024a:	2b00      	cmp	r3, #0
 802024c:	dd09      	ble.n	8020262 <sulp+0x32>
 802024e:	051b      	lsls	r3, r3, #20
 8020250:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8020254:	2000      	movs	r0, #0
 8020256:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 802025a:	ec41 0b17 	vmov	d7, r0, r1
 802025e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8020262:	bd70      	pop	{r4, r5, r6, pc}
 8020264:	0000      	movs	r0, r0
	...

08020268 <_strtod_l>:
 8020268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802026c:	ed2d 8b0c 	vpush	{d8-d13}
 8020270:	b09d      	sub	sp, #116	; 0x74
 8020272:	461f      	mov	r7, r3
 8020274:	2300      	movs	r3, #0
 8020276:	9318      	str	r3, [sp, #96]	; 0x60
 8020278:	4ba6      	ldr	r3, [pc, #664]	; (8020514 <_strtod_l+0x2ac>)
 802027a:	9213      	str	r2, [sp, #76]	; 0x4c
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	9308      	str	r3, [sp, #32]
 8020280:	4604      	mov	r4, r0
 8020282:	4618      	mov	r0, r3
 8020284:	468a      	mov	sl, r1
 8020286:	f7e0 f82b 	bl	80002e0 <strlen>
 802028a:	f04f 0800 	mov.w	r8, #0
 802028e:	4605      	mov	r5, r0
 8020290:	f04f 0900 	mov.w	r9, #0
 8020294:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8020298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802029a:	781a      	ldrb	r2, [r3, #0]
 802029c:	2a2b      	cmp	r2, #43	; 0x2b
 802029e:	d04d      	beq.n	802033c <_strtod_l+0xd4>
 80202a0:	d83a      	bhi.n	8020318 <_strtod_l+0xb0>
 80202a2:	2a0d      	cmp	r2, #13
 80202a4:	d833      	bhi.n	802030e <_strtod_l+0xa6>
 80202a6:	2a08      	cmp	r2, #8
 80202a8:	d833      	bhi.n	8020312 <_strtod_l+0xaa>
 80202aa:	2a00      	cmp	r2, #0
 80202ac:	d03d      	beq.n	802032a <_strtod_l+0xc2>
 80202ae:	2300      	movs	r3, #0
 80202b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80202b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80202b4:	7833      	ldrb	r3, [r6, #0]
 80202b6:	2b30      	cmp	r3, #48	; 0x30
 80202b8:	f040 80b6 	bne.w	8020428 <_strtod_l+0x1c0>
 80202bc:	7873      	ldrb	r3, [r6, #1]
 80202be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80202c2:	2b58      	cmp	r3, #88	; 0x58
 80202c4:	d16d      	bne.n	80203a2 <_strtod_l+0x13a>
 80202c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202c8:	9301      	str	r3, [sp, #4]
 80202ca:	ab18      	add	r3, sp, #96	; 0x60
 80202cc:	9702      	str	r7, [sp, #8]
 80202ce:	9300      	str	r3, [sp, #0]
 80202d0:	4a91      	ldr	r2, [pc, #580]	; (8020518 <_strtod_l+0x2b0>)
 80202d2:	ab19      	add	r3, sp, #100	; 0x64
 80202d4:	a917      	add	r1, sp, #92	; 0x5c
 80202d6:	4620      	mov	r0, r4
 80202d8:	f001 ff4a 	bl	8022170 <__gethex>
 80202dc:	f010 0507 	ands.w	r5, r0, #7
 80202e0:	4607      	mov	r7, r0
 80202e2:	d005      	beq.n	80202f0 <_strtod_l+0x88>
 80202e4:	2d06      	cmp	r5, #6
 80202e6:	d12b      	bne.n	8020340 <_strtod_l+0xd8>
 80202e8:	3601      	adds	r6, #1
 80202ea:	2300      	movs	r3, #0
 80202ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80202ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80202f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	f040 856e 	bne.w	8020dd4 <_strtod_l+0xb6c>
 80202f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80202fa:	b1e3      	cbz	r3, 8020336 <_strtod_l+0xce>
 80202fc:	ec49 8b17 	vmov	d7, r8, r9
 8020300:	eeb1 0b47 	vneg.f64	d0, d7
 8020304:	b01d      	add	sp, #116	; 0x74
 8020306:	ecbd 8b0c 	vpop	{d8-d13}
 802030a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802030e:	2a20      	cmp	r2, #32
 8020310:	d1cd      	bne.n	80202ae <_strtod_l+0x46>
 8020312:	3301      	adds	r3, #1
 8020314:	9317      	str	r3, [sp, #92]	; 0x5c
 8020316:	e7bf      	b.n	8020298 <_strtod_l+0x30>
 8020318:	2a2d      	cmp	r2, #45	; 0x2d
 802031a:	d1c8      	bne.n	80202ae <_strtod_l+0x46>
 802031c:	2201      	movs	r2, #1
 802031e:	920b      	str	r2, [sp, #44]	; 0x2c
 8020320:	1c5a      	adds	r2, r3, #1
 8020322:	9217      	str	r2, [sp, #92]	; 0x5c
 8020324:	785b      	ldrb	r3, [r3, #1]
 8020326:	2b00      	cmp	r3, #0
 8020328:	d1c3      	bne.n	80202b2 <_strtod_l+0x4a>
 802032a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802032c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8020330:	2b00      	cmp	r3, #0
 8020332:	f040 854d 	bne.w	8020dd0 <_strtod_l+0xb68>
 8020336:	ec49 8b10 	vmov	d0, r8, r9
 802033a:	e7e3      	b.n	8020304 <_strtod_l+0x9c>
 802033c:	2200      	movs	r2, #0
 802033e:	e7ee      	b.n	802031e <_strtod_l+0xb6>
 8020340:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020342:	b13a      	cbz	r2, 8020354 <_strtod_l+0xec>
 8020344:	2135      	movs	r1, #53	; 0x35
 8020346:	a81a      	add	r0, sp, #104	; 0x68
 8020348:	f002 ff1c 	bl	8023184 <__copybits>
 802034c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802034e:	4620      	mov	r0, r4
 8020350:	f002 fae0 	bl	8022914 <_Bfree>
 8020354:	3d01      	subs	r5, #1
 8020356:	2d05      	cmp	r5, #5
 8020358:	d807      	bhi.n	802036a <_strtod_l+0x102>
 802035a:	e8df f005 	tbb	[pc, r5]
 802035e:	0b0e      	.short	0x0b0e
 8020360:	030e1d18 	.word	0x030e1d18
 8020364:	f04f 0900 	mov.w	r9, #0
 8020368:	46c8      	mov	r8, r9
 802036a:	073b      	lsls	r3, r7, #28
 802036c:	d5c0      	bpl.n	80202f0 <_strtod_l+0x88>
 802036e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8020372:	e7bd      	b.n	80202f0 <_strtod_l+0x88>
 8020374:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8020378:	e7f7      	b.n	802036a <_strtod_l+0x102>
 802037a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 802037e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020380:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8020384:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8020388:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802038c:	e7ed      	b.n	802036a <_strtod_l+0x102>
 802038e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 802051c <_strtod_l+0x2b4>
 8020392:	f04f 0800 	mov.w	r8, #0
 8020396:	e7e8      	b.n	802036a <_strtod_l+0x102>
 8020398:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802039c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80203a0:	e7e3      	b.n	802036a <_strtod_l+0x102>
 80203a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80203a4:	1c5a      	adds	r2, r3, #1
 80203a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80203a8:	785b      	ldrb	r3, [r3, #1]
 80203aa:	2b30      	cmp	r3, #48	; 0x30
 80203ac:	d0f9      	beq.n	80203a2 <_strtod_l+0x13a>
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	d09e      	beq.n	80202f0 <_strtod_l+0x88>
 80203b2:	2301      	movs	r3, #1
 80203b4:	9306      	str	r3, [sp, #24]
 80203b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80203b8:	930c      	str	r3, [sp, #48]	; 0x30
 80203ba:	2300      	movs	r3, #0
 80203bc:	9304      	str	r3, [sp, #16]
 80203be:	930a      	str	r3, [sp, #40]	; 0x28
 80203c0:	461e      	mov	r6, r3
 80203c2:	220a      	movs	r2, #10
 80203c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80203c6:	f890 b000 	ldrb.w	fp, [r0]
 80203ca:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80203ce:	b2d9      	uxtb	r1, r3
 80203d0:	2909      	cmp	r1, #9
 80203d2:	d92b      	bls.n	802042c <_strtod_l+0x1c4>
 80203d4:	9908      	ldr	r1, [sp, #32]
 80203d6:	462a      	mov	r2, r5
 80203d8:	f7ff ff18 	bl	802020c <strncmp>
 80203dc:	2800      	cmp	r0, #0
 80203de:	d035      	beq.n	802044c <_strtod_l+0x1e4>
 80203e0:	2000      	movs	r0, #0
 80203e2:	465a      	mov	r2, fp
 80203e4:	4633      	mov	r3, r6
 80203e6:	4683      	mov	fp, r0
 80203e8:	4601      	mov	r1, r0
 80203ea:	2a65      	cmp	r2, #101	; 0x65
 80203ec:	d001      	beq.n	80203f2 <_strtod_l+0x18a>
 80203ee:	2a45      	cmp	r2, #69	; 0x45
 80203f0:	d118      	bne.n	8020424 <_strtod_l+0x1bc>
 80203f2:	b91b      	cbnz	r3, 80203fc <_strtod_l+0x194>
 80203f4:	9b06      	ldr	r3, [sp, #24]
 80203f6:	4303      	orrs	r3, r0
 80203f8:	d097      	beq.n	802032a <_strtod_l+0xc2>
 80203fa:	2300      	movs	r3, #0
 80203fc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8020400:	f10a 0201 	add.w	r2, sl, #1
 8020404:	9217      	str	r2, [sp, #92]	; 0x5c
 8020406:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802040a:	2a2b      	cmp	r2, #43	; 0x2b
 802040c:	d077      	beq.n	80204fe <_strtod_l+0x296>
 802040e:	2a2d      	cmp	r2, #45	; 0x2d
 8020410:	d07d      	beq.n	802050e <_strtod_l+0x2a6>
 8020412:	f04f 0e00 	mov.w	lr, #0
 8020416:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 802041a:	2d09      	cmp	r5, #9
 802041c:	f240 8084 	bls.w	8020528 <_strtod_l+0x2c0>
 8020420:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8020424:	2500      	movs	r5, #0
 8020426:	e09f      	b.n	8020568 <_strtod_l+0x300>
 8020428:	2300      	movs	r3, #0
 802042a:	e7c3      	b.n	80203b4 <_strtod_l+0x14c>
 802042c:	2e08      	cmp	r6, #8
 802042e:	bfd5      	itete	le
 8020430:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8020432:	9904      	ldrgt	r1, [sp, #16]
 8020434:	fb02 3301 	mlale	r3, r2, r1, r3
 8020438:	fb02 3301 	mlagt	r3, r2, r1, r3
 802043c:	f100 0001 	add.w	r0, r0, #1
 8020440:	bfd4      	ite	le
 8020442:	930a      	strle	r3, [sp, #40]	; 0x28
 8020444:	9304      	strgt	r3, [sp, #16]
 8020446:	3601      	adds	r6, #1
 8020448:	9017      	str	r0, [sp, #92]	; 0x5c
 802044a:	e7bb      	b.n	80203c4 <_strtod_l+0x15c>
 802044c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802044e:	195a      	adds	r2, r3, r5
 8020450:	9217      	str	r2, [sp, #92]	; 0x5c
 8020452:	5d5a      	ldrb	r2, [r3, r5]
 8020454:	b3ae      	cbz	r6, 80204c2 <_strtod_l+0x25a>
 8020456:	4683      	mov	fp, r0
 8020458:	4633      	mov	r3, r6
 802045a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802045e:	2909      	cmp	r1, #9
 8020460:	d912      	bls.n	8020488 <_strtod_l+0x220>
 8020462:	2101      	movs	r1, #1
 8020464:	e7c1      	b.n	80203ea <_strtod_l+0x182>
 8020466:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020468:	1c5a      	adds	r2, r3, #1
 802046a:	9217      	str	r2, [sp, #92]	; 0x5c
 802046c:	785a      	ldrb	r2, [r3, #1]
 802046e:	3001      	adds	r0, #1
 8020470:	2a30      	cmp	r2, #48	; 0x30
 8020472:	d0f8      	beq.n	8020466 <_strtod_l+0x1fe>
 8020474:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8020478:	2b08      	cmp	r3, #8
 802047a:	f200 84b0 	bhi.w	8020dde <_strtod_l+0xb76>
 802047e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020480:	930c      	str	r3, [sp, #48]	; 0x30
 8020482:	4683      	mov	fp, r0
 8020484:	2000      	movs	r0, #0
 8020486:	4603      	mov	r3, r0
 8020488:	3a30      	subs	r2, #48	; 0x30
 802048a:	f100 0101 	add.w	r1, r0, #1
 802048e:	d012      	beq.n	80204b6 <_strtod_l+0x24e>
 8020490:	448b      	add	fp, r1
 8020492:	eb00 0c03 	add.w	ip, r0, r3
 8020496:	4619      	mov	r1, r3
 8020498:	250a      	movs	r5, #10
 802049a:	4561      	cmp	r1, ip
 802049c:	d113      	bne.n	80204c6 <_strtod_l+0x25e>
 802049e:	1819      	adds	r1, r3, r0
 80204a0:	2908      	cmp	r1, #8
 80204a2:	f103 0301 	add.w	r3, r3, #1
 80204a6:	4403      	add	r3, r0
 80204a8:	dc1d      	bgt.n	80204e6 <_strtod_l+0x27e>
 80204aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80204ac:	210a      	movs	r1, #10
 80204ae:	fb01 2200 	mla	r2, r1, r0, r2
 80204b2:	920a      	str	r2, [sp, #40]	; 0x28
 80204b4:	2100      	movs	r1, #0
 80204b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80204b8:	1c50      	adds	r0, r2, #1
 80204ba:	9017      	str	r0, [sp, #92]	; 0x5c
 80204bc:	7852      	ldrb	r2, [r2, #1]
 80204be:	4608      	mov	r0, r1
 80204c0:	e7cb      	b.n	802045a <_strtod_l+0x1f2>
 80204c2:	4630      	mov	r0, r6
 80204c4:	e7d4      	b.n	8020470 <_strtod_l+0x208>
 80204c6:	2908      	cmp	r1, #8
 80204c8:	dc04      	bgt.n	80204d4 <_strtod_l+0x26c>
 80204ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80204cc:	436f      	muls	r7, r5
 80204ce:	970a      	str	r7, [sp, #40]	; 0x28
 80204d0:	3101      	adds	r1, #1
 80204d2:	e7e2      	b.n	802049a <_strtod_l+0x232>
 80204d4:	f101 0e01 	add.w	lr, r1, #1
 80204d8:	f1be 0f10 	cmp.w	lr, #16
 80204dc:	bfde      	ittt	le
 80204de:	9f04      	ldrle	r7, [sp, #16]
 80204e0:	436f      	mulle	r7, r5
 80204e2:	9704      	strle	r7, [sp, #16]
 80204e4:	e7f4      	b.n	80204d0 <_strtod_l+0x268>
 80204e6:	2b10      	cmp	r3, #16
 80204e8:	bfdf      	itttt	le
 80204ea:	9804      	ldrle	r0, [sp, #16]
 80204ec:	210a      	movle	r1, #10
 80204ee:	fb01 2200 	mlale	r2, r1, r0, r2
 80204f2:	9204      	strle	r2, [sp, #16]
 80204f4:	e7de      	b.n	80204b4 <_strtod_l+0x24c>
 80204f6:	f04f 0b00 	mov.w	fp, #0
 80204fa:	2101      	movs	r1, #1
 80204fc:	e77a      	b.n	80203f4 <_strtod_l+0x18c>
 80204fe:	f04f 0e00 	mov.w	lr, #0
 8020502:	f10a 0202 	add.w	r2, sl, #2
 8020506:	9217      	str	r2, [sp, #92]	; 0x5c
 8020508:	f89a 2002 	ldrb.w	r2, [sl, #2]
 802050c:	e783      	b.n	8020416 <_strtod_l+0x1ae>
 802050e:	f04f 0e01 	mov.w	lr, #1
 8020512:	e7f6      	b.n	8020502 <_strtod_l+0x29a>
 8020514:	080286c0 	.word	0x080286c0
 8020518:	080284e4 	.word	0x080284e4
 802051c:	7ff00000 	.word	0x7ff00000
 8020520:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8020522:	1c55      	adds	r5, r2, #1
 8020524:	9517      	str	r5, [sp, #92]	; 0x5c
 8020526:	7852      	ldrb	r2, [r2, #1]
 8020528:	2a30      	cmp	r2, #48	; 0x30
 802052a:	d0f9      	beq.n	8020520 <_strtod_l+0x2b8>
 802052c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8020530:	2d08      	cmp	r5, #8
 8020532:	f63f af77 	bhi.w	8020424 <_strtod_l+0x1bc>
 8020536:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 802053a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802053c:	9208      	str	r2, [sp, #32]
 802053e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8020540:	1c55      	adds	r5, r2, #1
 8020542:	9517      	str	r5, [sp, #92]	; 0x5c
 8020544:	7852      	ldrb	r2, [r2, #1]
 8020546:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 802054a:	2f09      	cmp	r7, #9
 802054c:	d937      	bls.n	80205be <_strtod_l+0x356>
 802054e:	9f08      	ldr	r7, [sp, #32]
 8020550:	1bed      	subs	r5, r5, r7
 8020552:	2d08      	cmp	r5, #8
 8020554:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8020558:	dc02      	bgt.n	8020560 <_strtod_l+0x2f8>
 802055a:	4565      	cmp	r5, ip
 802055c:	bfa8      	it	ge
 802055e:	4665      	movge	r5, ip
 8020560:	f1be 0f00 	cmp.w	lr, #0
 8020564:	d000      	beq.n	8020568 <_strtod_l+0x300>
 8020566:	426d      	negs	r5, r5
 8020568:	2b00      	cmp	r3, #0
 802056a:	d14f      	bne.n	802060c <_strtod_l+0x3a4>
 802056c:	9b06      	ldr	r3, [sp, #24]
 802056e:	4303      	orrs	r3, r0
 8020570:	f47f aebe 	bne.w	80202f0 <_strtod_l+0x88>
 8020574:	2900      	cmp	r1, #0
 8020576:	f47f aed8 	bne.w	802032a <_strtod_l+0xc2>
 802057a:	2a69      	cmp	r2, #105	; 0x69
 802057c:	d027      	beq.n	80205ce <_strtod_l+0x366>
 802057e:	dc24      	bgt.n	80205ca <_strtod_l+0x362>
 8020580:	2a49      	cmp	r2, #73	; 0x49
 8020582:	d024      	beq.n	80205ce <_strtod_l+0x366>
 8020584:	2a4e      	cmp	r2, #78	; 0x4e
 8020586:	f47f aed0 	bne.w	802032a <_strtod_l+0xc2>
 802058a:	499b      	ldr	r1, [pc, #620]	; (80207f8 <_strtod_l+0x590>)
 802058c:	a817      	add	r0, sp, #92	; 0x5c
 802058e:	f002 f847 	bl	8022620 <__match>
 8020592:	2800      	cmp	r0, #0
 8020594:	f43f aec9 	beq.w	802032a <_strtod_l+0xc2>
 8020598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802059a:	781b      	ldrb	r3, [r3, #0]
 802059c:	2b28      	cmp	r3, #40	; 0x28
 802059e:	d12d      	bne.n	80205fc <_strtod_l+0x394>
 80205a0:	4996      	ldr	r1, [pc, #600]	; (80207fc <_strtod_l+0x594>)
 80205a2:	aa1a      	add	r2, sp, #104	; 0x68
 80205a4:	a817      	add	r0, sp, #92	; 0x5c
 80205a6:	f002 f84f 	bl	8022648 <__hexnan>
 80205aa:	2805      	cmp	r0, #5
 80205ac:	d126      	bne.n	80205fc <_strtod_l+0x394>
 80205ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80205b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80205b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80205b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80205bc:	e698      	b.n	80202f0 <_strtod_l+0x88>
 80205be:	250a      	movs	r5, #10
 80205c0:	fb05 250c 	mla	r5, r5, ip, r2
 80205c4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80205c8:	e7b9      	b.n	802053e <_strtod_l+0x2d6>
 80205ca:	2a6e      	cmp	r2, #110	; 0x6e
 80205cc:	e7db      	b.n	8020586 <_strtod_l+0x31e>
 80205ce:	498c      	ldr	r1, [pc, #560]	; (8020800 <_strtod_l+0x598>)
 80205d0:	a817      	add	r0, sp, #92	; 0x5c
 80205d2:	f002 f825 	bl	8022620 <__match>
 80205d6:	2800      	cmp	r0, #0
 80205d8:	f43f aea7 	beq.w	802032a <_strtod_l+0xc2>
 80205dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80205de:	4989      	ldr	r1, [pc, #548]	; (8020804 <_strtod_l+0x59c>)
 80205e0:	3b01      	subs	r3, #1
 80205e2:	a817      	add	r0, sp, #92	; 0x5c
 80205e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80205e6:	f002 f81b 	bl	8022620 <__match>
 80205ea:	b910      	cbnz	r0, 80205f2 <_strtod_l+0x38a>
 80205ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80205ee:	3301      	adds	r3, #1
 80205f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80205f2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8020818 <_strtod_l+0x5b0>
 80205f6:	f04f 0800 	mov.w	r8, #0
 80205fa:	e679      	b.n	80202f0 <_strtod_l+0x88>
 80205fc:	4882      	ldr	r0, [pc, #520]	; (8020808 <_strtod_l+0x5a0>)
 80205fe:	f003 f8cb 	bl	8023798 <nan>
 8020602:	ed8d 0b04 	vstr	d0, [sp, #16]
 8020606:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802060a:	e671      	b.n	80202f0 <_strtod_l+0x88>
 802060c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8020610:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8020614:	eba5 020b 	sub.w	r2, r5, fp
 8020618:	2e00      	cmp	r6, #0
 802061a:	bf08      	it	eq
 802061c:	461e      	moveq	r6, r3
 802061e:	2b10      	cmp	r3, #16
 8020620:	ed8d 7b08 	vstr	d7, [sp, #32]
 8020624:	9206      	str	r2, [sp, #24]
 8020626:	461a      	mov	r2, r3
 8020628:	bfa8      	it	ge
 802062a:	2210      	movge	r2, #16
 802062c:	2b09      	cmp	r3, #9
 802062e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8020632:	dd0e      	ble.n	8020652 <_strtod_l+0x3ea>
 8020634:	4975      	ldr	r1, [pc, #468]	; (802080c <_strtod_l+0x5a4>)
 8020636:	eddd 7a04 	vldr	s15, [sp, #16]
 802063a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802063e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8020642:	ed9d 5b08 	vldr	d5, [sp, #32]
 8020646:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802064a:	eea5 7b06 	vfma.f64	d7, d5, d6
 802064e:	ec59 8b17 	vmov	r8, r9, d7
 8020652:	2b0f      	cmp	r3, #15
 8020654:	dc37      	bgt.n	80206c6 <_strtod_l+0x45e>
 8020656:	9906      	ldr	r1, [sp, #24]
 8020658:	2900      	cmp	r1, #0
 802065a:	f43f ae49 	beq.w	80202f0 <_strtod_l+0x88>
 802065e:	dd23      	ble.n	80206a8 <_strtod_l+0x440>
 8020660:	2916      	cmp	r1, #22
 8020662:	dc0b      	bgt.n	802067c <_strtod_l+0x414>
 8020664:	4b69      	ldr	r3, [pc, #420]	; (802080c <_strtod_l+0x5a4>)
 8020666:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 802066a:	ed93 7b00 	vldr	d7, [r3]
 802066e:	ec49 8b16 	vmov	d6, r8, r9
 8020672:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020676:	ec59 8b17 	vmov	r8, r9, d7
 802067a:	e639      	b.n	80202f0 <_strtod_l+0x88>
 802067c:	9806      	ldr	r0, [sp, #24]
 802067e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8020682:	4281      	cmp	r1, r0
 8020684:	db1f      	blt.n	80206c6 <_strtod_l+0x45e>
 8020686:	4a61      	ldr	r2, [pc, #388]	; (802080c <_strtod_l+0x5a4>)
 8020688:	f1c3 030f 	rsb	r3, r3, #15
 802068c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8020690:	ed91 7b00 	vldr	d7, [r1]
 8020694:	ec49 8b16 	vmov	d6, r8, r9
 8020698:	1ac3      	subs	r3, r0, r3
 802069a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802069e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80206a2:	ed92 6b00 	vldr	d6, [r2]
 80206a6:	e7e4      	b.n	8020672 <_strtod_l+0x40a>
 80206a8:	9906      	ldr	r1, [sp, #24]
 80206aa:	3116      	adds	r1, #22
 80206ac:	db0b      	blt.n	80206c6 <_strtod_l+0x45e>
 80206ae:	4b57      	ldr	r3, [pc, #348]	; (802080c <_strtod_l+0x5a4>)
 80206b0:	ebab 0505 	sub.w	r5, fp, r5
 80206b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80206b8:	ed95 7b00 	vldr	d7, [r5]
 80206bc:	ec49 8b16 	vmov	d6, r8, r9
 80206c0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80206c4:	e7d7      	b.n	8020676 <_strtod_l+0x40e>
 80206c6:	9906      	ldr	r1, [sp, #24]
 80206c8:	1a9a      	subs	r2, r3, r2
 80206ca:	440a      	add	r2, r1
 80206cc:	2a00      	cmp	r2, #0
 80206ce:	dd74      	ble.n	80207ba <_strtod_l+0x552>
 80206d0:	f012 000f 	ands.w	r0, r2, #15
 80206d4:	d00a      	beq.n	80206ec <_strtod_l+0x484>
 80206d6:	494d      	ldr	r1, [pc, #308]	; (802080c <_strtod_l+0x5a4>)
 80206d8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80206dc:	ed91 7b00 	vldr	d7, [r1]
 80206e0:	ec49 8b16 	vmov	d6, r8, r9
 80206e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80206e8:	ec59 8b17 	vmov	r8, r9, d7
 80206ec:	f032 020f 	bics.w	r2, r2, #15
 80206f0:	d04f      	beq.n	8020792 <_strtod_l+0x52a>
 80206f2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80206f6:	dd22      	ble.n	802073e <_strtod_l+0x4d6>
 80206f8:	2500      	movs	r5, #0
 80206fa:	462e      	mov	r6, r5
 80206fc:	950a      	str	r5, [sp, #40]	; 0x28
 80206fe:	462f      	mov	r7, r5
 8020700:	2322      	movs	r3, #34	; 0x22
 8020702:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8020818 <_strtod_l+0x5b0>
 8020706:	6023      	str	r3, [r4, #0]
 8020708:	f04f 0800 	mov.w	r8, #0
 802070c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802070e:	2b00      	cmp	r3, #0
 8020710:	f43f adee 	beq.w	80202f0 <_strtod_l+0x88>
 8020714:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020716:	4620      	mov	r0, r4
 8020718:	f002 f8fc 	bl	8022914 <_Bfree>
 802071c:	4639      	mov	r1, r7
 802071e:	4620      	mov	r0, r4
 8020720:	f002 f8f8 	bl	8022914 <_Bfree>
 8020724:	4631      	mov	r1, r6
 8020726:	4620      	mov	r0, r4
 8020728:	f002 f8f4 	bl	8022914 <_Bfree>
 802072c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802072e:	4620      	mov	r0, r4
 8020730:	f002 f8f0 	bl	8022914 <_Bfree>
 8020734:	4629      	mov	r1, r5
 8020736:	4620      	mov	r0, r4
 8020738:	f002 f8ec 	bl	8022914 <_Bfree>
 802073c:	e5d8      	b.n	80202f0 <_strtod_l+0x88>
 802073e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8020742:	2000      	movs	r0, #0
 8020744:	4f32      	ldr	r7, [pc, #200]	; (8020810 <_strtod_l+0x5a8>)
 8020746:	1112      	asrs	r2, r2, #4
 8020748:	4601      	mov	r1, r0
 802074a:	2a01      	cmp	r2, #1
 802074c:	dc24      	bgt.n	8020798 <_strtod_l+0x530>
 802074e:	b108      	cbz	r0, 8020754 <_strtod_l+0x4ec>
 8020750:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8020754:	4a2e      	ldr	r2, [pc, #184]	; (8020810 <_strtod_l+0x5a8>)
 8020756:	482f      	ldr	r0, [pc, #188]	; (8020814 <_strtod_l+0x5ac>)
 8020758:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802075c:	ed91 7b00 	vldr	d7, [r1]
 8020760:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8020764:	ec49 8b16 	vmov	d6, r8, r9
 8020768:	ee27 7b06 	vmul.f64	d7, d7, d6
 802076c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8020770:	9905      	ldr	r1, [sp, #20]
 8020772:	4a29      	ldr	r2, [pc, #164]	; (8020818 <_strtod_l+0x5b0>)
 8020774:	400a      	ands	r2, r1
 8020776:	4282      	cmp	r2, r0
 8020778:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802077c:	d8bc      	bhi.n	80206f8 <_strtod_l+0x490>
 802077e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8020782:	4282      	cmp	r2, r0
 8020784:	bf86      	itte	hi
 8020786:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 802081c <_strtod_l+0x5b4>
 802078a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 802078e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8020792:	2200      	movs	r2, #0
 8020794:	9204      	str	r2, [sp, #16]
 8020796:	e07f      	b.n	8020898 <_strtod_l+0x630>
 8020798:	f012 0f01 	tst.w	r2, #1
 802079c:	d00a      	beq.n	80207b4 <_strtod_l+0x54c>
 802079e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80207a2:	ed90 7b00 	vldr	d7, [r0]
 80207a6:	ed9d 6b04 	vldr	d6, [sp, #16]
 80207aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80207ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80207b2:	2001      	movs	r0, #1
 80207b4:	3101      	adds	r1, #1
 80207b6:	1052      	asrs	r2, r2, #1
 80207b8:	e7c7      	b.n	802074a <_strtod_l+0x4e2>
 80207ba:	d0ea      	beq.n	8020792 <_strtod_l+0x52a>
 80207bc:	4252      	negs	r2, r2
 80207be:	f012 000f 	ands.w	r0, r2, #15
 80207c2:	d00a      	beq.n	80207da <_strtod_l+0x572>
 80207c4:	4911      	ldr	r1, [pc, #68]	; (802080c <_strtod_l+0x5a4>)
 80207c6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80207ca:	ed91 7b00 	vldr	d7, [r1]
 80207ce:	ec49 8b16 	vmov	d6, r8, r9
 80207d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80207d6:	ec59 8b17 	vmov	r8, r9, d7
 80207da:	1112      	asrs	r2, r2, #4
 80207dc:	d0d9      	beq.n	8020792 <_strtod_l+0x52a>
 80207de:	2a1f      	cmp	r2, #31
 80207e0:	dd1e      	ble.n	8020820 <_strtod_l+0x5b8>
 80207e2:	2500      	movs	r5, #0
 80207e4:	462e      	mov	r6, r5
 80207e6:	950a      	str	r5, [sp, #40]	; 0x28
 80207e8:	462f      	mov	r7, r5
 80207ea:	2322      	movs	r3, #34	; 0x22
 80207ec:	f04f 0800 	mov.w	r8, #0
 80207f0:	f04f 0900 	mov.w	r9, #0
 80207f4:	6023      	str	r3, [r4, #0]
 80207f6:	e789      	b.n	802070c <_strtod_l+0x4a4>
 80207f8:	08028441 	.word	0x08028441
 80207fc:	080284f8 	.word	0x080284f8
 8020800:	08028439 	.word	0x08028439
 8020804:	08028577 	.word	0x08028577
 8020808:	08028573 	.word	0x08028573
 802080c:	08028760 	.word	0x08028760
 8020810:	08028738 	.word	0x08028738
 8020814:	7ca00000 	.word	0x7ca00000
 8020818:	7ff00000 	.word	0x7ff00000
 802081c:	7fefffff 	.word	0x7fefffff
 8020820:	f012 0110 	ands.w	r1, r2, #16
 8020824:	bf18      	it	ne
 8020826:	216a      	movne	r1, #106	; 0x6a
 8020828:	e9cd 8908 	strd	r8, r9, [sp, #32]
 802082c:	9104      	str	r1, [sp, #16]
 802082e:	49c0      	ldr	r1, [pc, #768]	; (8020b30 <_strtod_l+0x8c8>)
 8020830:	2000      	movs	r0, #0
 8020832:	07d7      	lsls	r7, r2, #31
 8020834:	d508      	bpl.n	8020848 <_strtod_l+0x5e0>
 8020836:	ed9d 6b08 	vldr	d6, [sp, #32]
 802083a:	ed91 7b00 	vldr	d7, [r1]
 802083e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8020842:	ed8d 7b08 	vstr	d7, [sp, #32]
 8020846:	2001      	movs	r0, #1
 8020848:	1052      	asrs	r2, r2, #1
 802084a:	f101 0108 	add.w	r1, r1, #8
 802084e:	d1f0      	bne.n	8020832 <_strtod_l+0x5ca>
 8020850:	b108      	cbz	r0, 8020856 <_strtod_l+0x5ee>
 8020852:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8020856:	9a04      	ldr	r2, [sp, #16]
 8020858:	b1ba      	cbz	r2, 802088a <_strtod_l+0x622>
 802085a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802085e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8020862:	2a00      	cmp	r2, #0
 8020864:	4649      	mov	r1, r9
 8020866:	dd10      	ble.n	802088a <_strtod_l+0x622>
 8020868:	2a1f      	cmp	r2, #31
 802086a:	f340 8132 	ble.w	8020ad2 <_strtod_l+0x86a>
 802086e:	2a34      	cmp	r2, #52	; 0x34
 8020870:	bfde      	ittt	le
 8020872:	3a20      	suble	r2, #32
 8020874:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 8020878:	fa00 f202 	lslle.w	r2, r0, r2
 802087c:	f04f 0800 	mov.w	r8, #0
 8020880:	bfcc      	ite	gt
 8020882:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8020886:	ea02 0901 	andle.w	r9, r2, r1
 802088a:	ec49 8b17 	vmov	d7, r8, r9
 802088e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020896:	d0a4      	beq.n	80207e2 <_strtod_l+0x57a>
 8020898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802089a:	9200      	str	r2, [sp, #0]
 802089c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802089e:	4632      	mov	r2, r6
 80208a0:	4620      	mov	r0, r4
 80208a2:	f002 f8a3 	bl	80229ec <__s2b>
 80208a6:	900a      	str	r0, [sp, #40]	; 0x28
 80208a8:	2800      	cmp	r0, #0
 80208aa:	f43f af25 	beq.w	80206f8 <_strtod_l+0x490>
 80208ae:	9b06      	ldr	r3, [sp, #24]
 80208b0:	ebab 0505 	sub.w	r5, fp, r5
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	bfb4      	ite	lt
 80208b8:	462b      	movlt	r3, r5
 80208ba:	2300      	movge	r3, #0
 80208bc:	930c      	str	r3, [sp, #48]	; 0x30
 80208be:	9b06      	ldr	r3, [sp, #24]
 80208c0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8020b18 <_strtod_l+0x8b0>
 80208c4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8020b20 <_strtod_l+0x8b8>
 80208c8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8020b28 <_strtod_l+0x8c0>
 80208cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80208d0:	2500      	movs	r5, #0
 80208d2:	9312      	str	r3, [sp, #72]	; 0x48
 80208d4:	462e      	mov	r6, r5
 80208d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208d8:	4620      	mov	r0, r4
 80208da:	6859      	ldr	r1, [r3, #4]
 80208dc:	f001 ffda 	bl	8022894 <_Balloc>
 80208e0:	4607      	mov	r7, r0
 80208e2:	2800      	cmp	r0, #0
 80208e4:	f43f af0c 	beq.w	8020700 <_strtod_l+0x498>
 80208e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208ea:	691a      	ldr	r2, [r3, #16]
 80208ec:	3202      	adds	r2, #2
 80208ee:	f103 010c 	add.w	r1, r3, #12
 80208f2:	0092      	lsls	r2, r2, #2
 80208f4:	300c      	adds	r0, #12
 80208f6:	f7fe fc63 	bl	801f1c0 <memcpy>
 80208fa:	ec49 8b10 	vmov	d0, r8, r9
 80208fe:	aa1a      	add	r2, sp, #104	; 0x68
 8020900:	a919      	add	r1, sp, #100	; 0x64
 8020902:	4620      	mov	r0, r4
 8020904:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8020908:	f002 fbac 	bl	8023064 <__d2b>
 802090c:	9018      	str	r0, [sp, #96]	; 0x60
 802090e:	2800      	cmp	r0, #0
 8020910:	f43f aef6 	beq.w	8020700 <_strtod_l+0x498>
 8020914:	2101      	movs	r1, #1
 8020916:	4620      	mov	r0, r4
 8020918:	f002 f902 	bl	8022b20 <__i2b>
 802091c:	4606      	mov	r6, r0
 802091e:	2800      	cmp	r0, #0
 8020920:	f43f aeee 	beq.w	8020700 <_strtod_l+0x498>
 8020924:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020926:	991a      	ldr	r1, [sp, #104]	; 0x68
 8020928:	2b00      	cmp	r3, #0
 802092a:	bfab      	itete	ge
 802092c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 802092e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8020930:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8020934:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8020938:	bfac      	ite	ge
 802093a:	eb03 0b02 	addge.w	fp, r3, r2
 802093e:	eba2 0a03 	sublt.w	sl, r2, r3
 8020942:	9a04      	ldr	r2, [sp, #16]
 8020944:	1a9b      	subs	r3, r3, r2
 8020946:	440b      	add	r3, r1
 8020948:	4a7a      	ldr	r2, [pc, #488]	; (8020b34 <_strtod_l+0x8cc>)
 802094a:	3b01      	subs	r3, #1
 802094c:	4293      	cmp	r3, r2
 802094e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8020952:	f280 80d1 	bge.w	8020af8 <_strtod_l+0x890>
 8020956:	1ad2      	subs	r2, r2, r3
 8020958:	2a1f      	cmp	r2, #31
 802095a:	eba1 0102 	sub.w	r1, r1, r2
 802095e:	f04f 0001 	mov.w	r0, #1
 8020962:	f300 80bd 	bgt.w	8020ae0 <_strtod_l+0x878>
 8020966:	fa00 f302 	lsl.w	r3, r0, r2
 802096a:	930e      	str	r3, [sp, #56]	; 0x38
 802096c:	2300      	movs	r3, #0
 802096e:	930d      	str	r3, [sp, #52]	; 0x34
 8020970:	eb0b 0301 	add.w	r3, fp, r1
 8020974:	9a04      	ldr	r2, [sp, #16]
 8020976:	459b      	cmp	fp, r3
 8020978:	448a      	add	sl, r1
 802097a:	4492      	add	sl, r2
 802097c:	465a      	mov	r2, fp
 802097e:	bfa8      	it	ge
 8020980:	461a      	movge	r2, r3
 8020982:	4552      	cmp	r2, sl
 8020984:	bfa8      	it	ge
 8020986:	4652      	movge	r2, sl
 8020988:	2a00      	cmp	r2, #0
 802098a:	bfc2      	ittt	gt
 802098c:	1a9b      	subgt	r3, r3, r2
 802098e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8020992:	ebab 0b02 	subgt.w	fp, fp, r2
 8020996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020998:	2a00      	cmp	r2, #0
 802099a:	dd18      	ble.n	80209ce <_strtod_l+0x766>
 802099c:	4631      	mov	r1, r6
 802099e:	4620      	mov	r0, r4
 80209a0:	9315      	str	r3, [sp, #84]	; 0x54
 80209a2:	f002 f979 	bl	8022c98 <__pow5mult>
 80209a6:	4606      	mov	r6, r0
 80209a8:	2800      	cmp	r0, #0
 80209aa:	f43f aea9 	beq.w	8020700 <_strtod_l+0x498>
 80209ae:	4601      	mov	r1, r0
 80209b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80209b2:	4620      	mov	r0, r4
 80209b4:	f002 f8ca 	bl	8022b4c <__multiply>
 80209b8:	9014      	str	r0, [sp, #80]	; 0x50
 80209ba:	2800      	cmp	r0, #0
 80209bc:	f43f aea0 	beq.w	8020700 <_strtod_l+0x498>
 80209c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80209c2:	4620      	mov	r0, r4
 80209c4:	f001 ffa6 	bl	8022914 <_Bfree>
 80209c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80209ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80209cc:	9218      	str	r2, [sp, #96]	; 0x60
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	f300 8097 	bgt.w	8020b02 <_strtod_l+0x89a>
 80209d4:	9b06      	ldr	r3, [sp, #24]
 80209d6:	2b00      	cmp	r3, #0
 80209d8:	dd08      	ble.n	80209ec <_strtod_l+0x784>
 80209da:	4639      	mov	r1, r7
 80209dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80209de:	4620      	mov	r0, r4
 80209e0:	f002 f95a 	bl	8022c98 <__pow5mult>
 80209e4:	4607      	mov	r7, r0
 80209e6:	2800      	cmp	r0, #0
 80209e8:	f43f ae8a 	beq.w	8020700 <_strtod_l+0x498>
 80209ec:	f1ba 0f00 	cmp.w	sl, #0
 80209f0:	dd08      	ble.n	8020a04 <_strtod_l+0x79c>
 80209f2:	4639      	mov	r1, r7
 80209f4:	4652      	mov	r2, sl
 80209f6:	4620      	mov	r0, r4
 80209f8:	f002 f9a8 	bl	8022d4c <__lshift>
 80209fc:	4607      	mov	r7, r0
 80209fe:	2800      	cmp	r0, #0
 8020a00:	f43f ae7e 	beq.w	8020700 <_strtod_l+0x498>
 8020a04:	f1bb 0f00 	cmp.w	fp, #0
 8020a08:	dd08      	ble.n	8020a1c <_strtod_l+0x7b4>
 8020a0a:	4631      	mov	r1, r6
 8020a0c:	465a      	mov	r2, fp
 8020a0e:	4620      	mov	r0, r4
 8020a10:	f002 f99c 	bl	8022d4c <__lshift>
 8020a14:	4606      	mov	r6, r0
 8020a16:	2800      	cmp	r0, #0
 8020a18:	f43f ae72 	beq.w	8020700 <_strtod_l+0x498>
 8020a1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020a1e:	463a      	mov	r2, r7
 8020a20:	4620      	mov	r0, r4
 8020a22:	f002 fa1b 	bl	8022e5c <__mdiff>
 8020a26:	4605      	mov	r5, r0
 8020a28:	2800      	cmp	r0, #0
 8020a2a:	f43f ae69 	beq.w	8020700 <_strtod_l+0x498>
 8020a2e:	2300      	movs	r3, #0
 8020a30:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8020a34:	60c3      	str	r3, [r0, #12]
 8020a36:	4631      	mov	r1, r6
 8020a38:	f002 f9f4 	bl	8022e24 <__mcmp>
 8020a3c:	2800      	cmp	r0, #0
 8020a3e:	da7f      	bge.n	8020b40 <_strtod_l+0x8d8>
 8020a40:	ea5a 0308 	orrs.w	r3, sl, r8
 8020a44:	f040 80a5 	bne.w	8020b92 <_strtod_l+0x92a>
 8020a48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	f040 80a0 	bne.w	8020b92 <_strtod_l+0x92a>
 8020a52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020a56:	0d1b      	lsrs	r3, r3, #20
 8020a58:	051b      	lsls	r3, r3, #20
 8020a5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8020a5e:	f240 8098 	bls.w	8020b92 <_strtod_l+0x92a>
 8020a62:	696b      	ldr	r3, [r5, #20]
 8020a64:	b91b      	cbnz	r3, 8020a6e <_strtod_l+0x806>
 8020a66:	692b      	ldr	r3, [r5, #16]
 8020a68:	2b01      	cmp	r3, #1
 8020a6a:	f340 8092 	ble.w	8020b92 <_strtod_l+0x92a>
 8020a6e:	4629      	mov	r1, r5
 8020a70:	2201      	movs	r2, #1
 8020a72:	4620      	mov	r0, r4
 8020a74:	f002 f96a 	bl	8022d4c <__lshift>
 8020a78:	4631      	mov	r1, r6
 8020a7a:	4605      	mov	r5, r0
 8020a7c:	f002 f9d2 	bl	8022e24 <__mcmp>
 8020a80:	2800      	cmp	r0, #0
 8020a82:	f340 8086 	ble.w	8020b92 <_strtod_l+0x92a>
 8020a86:	9904      	ldr	r1, [sp, #16]
 8020a88:	4a2b      	ldr	r2, [pc, #172]	; (8020b38 <_strtod_l+0x8d0>)
 8020a8a:	464b      	mov	r3, r9
 8020a8c:	2900      	cmp	r1, #0
 8020a8e:	f000 80a1 	beq.w	8020bd4 <_strtod_l+0x96c>
 8020a92:	ea02 0109 	and.w	r1, r2, r9
 8020a96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020a9a:	f300 809b 	bgt.w	8020bd4 <_strtod_l+0x96c>
 8020a9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8020aa2:	f77f aea2 	ble.w	80207ea <_strtod_l+0x582>
 8020aa6:	4a25      	ldr	r2, [pc, #148]	; (8020b3c <_strtod_l+0x8d4>)
 8020aa8:	2300      	movs	r3, #0
 8020aaa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8020aae:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8020ab2:	ec49 8b17 	vmov	d7, r8, r9
 8020ab6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020aba:	ed8d 7b04 	vstr	d7, [sp, #16]
 8020abe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8020ac2:	4313      	orrs	r3, r2
 8020ac4:	bf08      	it	eq
 8020ac6:	2322      	moveq	r3, #34	; 0x22
 8020ac8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8020acc:	bf08      	it	eq
 8020ace:	6023      	streq	r3, [r4, #0]
 8020ad0:	e620      	b.n	8020714 <_strtod_l+0x4ac>
 8020ad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8020ada:	ea02 0808 	and.w	r8, r2, r8
 8020ade:	e6d4      	b.n	802088a <_strtod_l+0x622>
 8020ae0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8020ae4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8020ae8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8020aec:	33e2      	adds	r3, #226	; 0xe2
 8020aee:	fa00 f303 	lsl.w	r3, r0, r3
 8020af2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8020af6:	e73b      	b.n	8020970 <_strtod_l+0x708>
 8020af8:	2000      	movs	r0, #0
 8020afa:	2301      	movs	r3, #1
 8020afc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8020b00:	e736      	b.n	8020970 <_strtod_l+0x708>
 8020b02:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020b04:	461a      	mov	r2, r3
 8020b06:	4620      	mov	r0, r4
 8020b08:	f002 f920 	bl	8022d4c <__lshift>
 8020b0c:	9018      	str	r0, [sp, #96]	; 0x60
 8020b0e:	2800      	cmp	r0, #0
 8020b10:	f47f af60 	bne.w	80209d4 <_strtod_l+0x76c>
 8020b14:	e5f4      	b.n	8020700 <_strtod_l+0x498>
 8020b16:	bf00      	nop
 8020b18:	94a03595 	.word	0x94a03595
 8020b1c:	3fcfffff 	.word	0x3fcfffff
 8020b20:	94a03595 	.word	0x94a03595
 8020b24:	3fdfffff 	.word	0x3fdfffff
 8020b28:	35afe535 	.word	0x35afe535
 8020b2c:	3fe00000 	.word	0x3fe00000
 8020b30:	08028510 	.word	0x08028510
 8020b34:	fffffc02 	.word	0xfffffc02
 8020b38:	7ff00000 	.word	0x7ff00000
 8020b3c:	39500000 	.word	0x39500000
 8020b40:	46cb      	mov	fp, r9
 8020b42:	d165      	bne.n	8020c10 <_strtod_l+0x9a8>
 8020b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020b48:	f1ba 0f00 	cmp.w	sl, #0
 8020b4c:	d02a      	beq.n	8020ba4 <_strtod_l+0x93c>
 8020b4e:	4aaa      	ldr	r2, [pc, #680]	; (8020df8 <_strtod_l+0xb90>)
 8020b50:	4293      	cmp	r3, r2
 8020b52:	d12b      	bne.n	8020bac <_strtod_l+0x944>
 8020b54:	9b04      	ldr	r3, [sp, #16]
 8020b56:	4641      	mov	r1, r8
 8020b58:	b1fb      	cbz	r3, 8020b9a <_strtod_l+0x932>
 8020b5a:	4aa8      	ldr	r2, [pc, #672]	; (8020dfc <_strtod_l+0xb94>)
 8020b5c:	ea09 0202 	and.w	r2, r9, r2
 8020b60:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8020b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020b68:	d81a      	bhi.n	8020ba0 <_strtod_l+0x938>
 8020b6a:	0d12      	lsrs	r2, r2, #20
 8020b6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8020b70:	fa00 f303 	lsl.w	r3, r0, r3
 8020b74:	4299      	cmp	r1, r3
 8020b76:	d119      	bne.n	8020bac <_strtod_l+0x944>
 8020b78:	4ba1      	ldr	r3, [pc, #644]	; (8020e00 <_strtod_l+0xb98>)
 8020b7a:	459b      	cmp	fp, r3
 8020b7c:	d102      	bne.n	8020b84 <_strtod_l+0x91c>
 8020b7e:	3101      	adds	r1, #1
 8020b80:	f43f adbe 	beq.w	8020700 <_strtod_l+0x498>
 8020b84:	4b9d      	ldr	r3, [pc, #628]	; (8020dfc <_strtod_l+0xb94>)
 8020b86:	ea0b 0303 	and.w	r3, fp, r3
 8020b8a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8020b8e:	f04f 0800 	mov.w	r8, #0
 8020b92:	9b04      	ldr	r3, [sp, #16]
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d186      	bne.n	8020aa6 <_strtod_l+0x83e>
 8020b98:	e5bc      	b.n	8020714 <_strtod_l+0x4ac>
 8020b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020b9e:	e7e9      	b.n	8020b74 <_strtod_l+0x90c>
 8020ba0:	4603      	mov	r3, r0
 8020ba2:	e7e7      	b.n	8020b74 <_strtod_l+0x90c>
 8020ba4:	ea53 0308 	orrs.w	r3, r3, r8
 8020ba8:	f43f af6d 	beq.w	8020a86 <_strtod_l+0x81e>
 8020bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020bae:	b1db      	cbz	r3, 8020be8 <_strtod_l+0x980>
 8020bb0:	ea13 0f0b 	tst.w	r3, fp
 8020bb4:	d0ed      	beq.n	8020b92 <_strtod_l+0x92a>
 8020bb6:	9a04      	ldr	r2, [sp, #16]
 8020bb8:	4640      	mov	r0, r8
 8020bba:	4649      	mov	r1, r9
 8020bbc:	f1ba 0f00 	cmp.w	sl, #0
 8020bc0:	d016      	beq.n	8020bf0 <_strtod_l+0x988>
 8020bc2:	f7ff fb35 	bl	8020230 <sulp>
 8020bc6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8020bca:	ee37 7b00 	vadd.f64	d7, d7, d0
 8020bce:	ec59 8b17 	vmov	r8, r9, d7
 8020bd2:	e7de      	b.n	8020b92 <_strtod_l+0x92a>
 8020bd4:	4013      	ands	r3, r2
 8020bd6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8020bda:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8020bde:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8020be2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8020be6:	e7d4      	b.n	8020b92 <_strtod_l+0x92a>
 8020be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020bea:	ea13 0f08 	tst.w	r3, r8
 8020bee:	e7e1      	b.n	8020bb4 <_strtod_l+0x94c>
 8020bf0:	f7ff fb1e 	bl	8020230 <sulp>
 8020bf4:	ed9d 7b08 	vldr	d7, [sp, #32]
 8020bf8:	ee37 7b40 	vsub.f64	d7, d7, d0
 8020bfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020c00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c08:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8020c0c:	d1c1      	bne.n	8020b92 <_strtod_l+0x92a>
 8020c0e:	e5ec      	b.n	80207ea <_strtod_l+0x582>
 8020c10:	4631      	mov	r1, r6
 8020c12:	4628      	mov	r0, r5
 8020c14:	f002 fa82 	bl	802311c <__ratio>
 8020c18:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8020c1c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8020c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c24:	d867      	bhi.n	8020cf6 <_strtod_l+0xa8e>
 8020c26:	f1ba 0f00 	cmp.w	sl, #0
 8020c2a:	d044      	beq.n	8020cb6 <_strtod_l+0xa4e>
 8020c2c:	4b75      	ldr	r3, [pc, #468]	; (8020e04 <_strtod_l+0xb9c>)
 8020c2e:	2200      	movs	r2, #0
 8020c30:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8020c34:	4971      	ldr	r1, [pc, #452]	; (8020dfc <_strtod_l+0xb94>)
 8020c36:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8020e10 <_strtod_l+0xba8>
 8020c3a:	ea0b 0001 	and.w	r0, fp, r1
 8020c3e:	4560      	cmp	r0, ip
 8020c40:	900d      	str	r0, [sp, #52]	; 0x34
 8020c42:	f040 808b 	bne.w	8020d5c <_strtod_l+0xaf4>
 8020c46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020c4a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8020c4e:	ec49 8b10 	vmov	d0, r8, r9
 8020c52:	ec43 2b1c 	vmov	d12, r2, r3
 8020c56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8020c5a:	f002 f987 	bl	8022f6c <__ulp>
 8020c5e:	ec49 8b1d 	vmov	d13, r8, r9
 8020c62:	eeac db00 	vfma.f64	d13, d12, d0
 8020c66:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8020c6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c6c:	4963      	ldr	r1, [pc, #396]	; (8020dfc <_strtod_l+0xb94>)
 8020c6e:	4a66      	ldr	r2, [pc, #408]	; (8020e08 <_strtod_l+0xba0>)
 8020c70:	4019      	ands	r1, r3
 8020c72:	4291      	cmp	r1, r2
 8020c74:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8020c78:	d947      	bls.n	8020d0a <_strtod_l+0xaa2>
 8020c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c7c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020c80:	4293      	cmp	r3, r2
 8020c82:	d103      	bne.n	8020c8c <_strtod_l+0xa24>
 8020c84:	9b08      	ldr	r3, [sp, #32]
 8020c86:	3301      	adds	r3, #1
 8020c88:	f43f ad3a 	beq.w	8020700 <_strtod_l+0x498>
 8020c8c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8020e00 <_strtod_l+0xb98>
 8020c90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8020c94:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020c96:	4620      	mov	r0, r4
 8020c98:	f001 fe3c 	bl	8022914 <_Bfree>
 8020c9c:	4639      	mov	r1, r7
 8020c9e:	4620      	mov	r0, r4
 8020ca0:	f001 fe38 	bl	8022914 <_Bfree>
 8020ca4:	4631      	mov	r1, r6
 8020ca6:	4620      	mov	r0, r4
 8020ca8:	f001 fe34 	bl	8022914 <_Bfree>
 8020cac:	4629      	mov	r1, r5
 8020cae:	4620      	mov	r0, r4
 8020cb0:	f001 fe30 	bl	8022914 <_Bfree>
 8020cb4:	e60f      	b.n	80208d6 <_strtod_l+0x66e>
 8020cb6:	f1b8 0f00 	cmp.w	r8, #0
 8020cba:	d112      	bne.n	8020ce2 <_strtod_l+0xa7a>
 8020cbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020cc0:	b9b3      	cbnz	r3, 8020cf0 <_strtod_l+0xa88>
 8020cc2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8020cc6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8020cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8020cd2:	d401      	bmi.n	8020cd8 <_strtod_l+0xa70>
 8020cd4:	ee20 8b08 	vmul.f64	d8, d0, d8
 8020cd8:	eeb1 7b48 	vneg.f64	d7, d8
 8020cdc:	ec53 2b17 	vmov	r2, r3, d7
 8020ce0:	e7a8      	b.n	8020c34 <_strtod_l+0x9cc>
 8020ce2:	f1b8 0f01 	cmp.w	r8, #1
 8020ce6:	d103      	bne.n	8020cf0 <_strtod_l+0xa88>
 8020ce8:	f1b9 0f00 	cmp.w	r9, #0
 8020cec:	f43f ad7d 	beq.w	80207ea <_strtod_l+0x582>
 8020cf0:	4b46      	ldr	r3, [pc, #280]	; (8020e0c <_strtod_l+0xba4>)
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	e79c      	b.n	8020c30 <_strtod_l+0x9c8>
 8020cf6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8020cfa:	ee20 8b08 	vmul.f64	d8, d0, d8
 8020cfe:	f1ba 0f00 	cmp.w	sl, #0
 8020d02:	d0e9      	beq.n	8020cd8 <_strtod_l+0xa70>
 8020d04:	ec53 2b18 	vmov	r2, r3, d8
 8020d08:	e794      	b.n	8020c34 <_strtod_l+0x9cc>
 8020d0a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8020d0e:	9b04      	ldr	r3, [sp, #16]
 8020d10:	2b00      	cmp	r3, #0
 8020d12:	d1bf      	bne.n	8020c94 <_strtod_l+0xa2c>
 8020d14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020d1a:	0d1b      	lsrs	r3, r3, #20
 8020d1c:	051b      	lsls	r3, r3, #20
 8020d1e:	429a      	cmp	r2, r3
 8020d20:	d1b8      	bne.n	8020c94 <_strtod_l+0xa2c>
 8020d22:	ec51 0b18 	vmov	r0, r1, d8
 8020d26:	f7df fd07 	bl	8000738 <__aeabi_d2lz>
 8020d2a:	f7df fcbf 	bl	80006ac <__aeabi_l2d>
 8020d2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020d32:	ec41 0b17 	vmov	d7, r0, r1
 8020d36:	ea43 0308 	orr.w	r3, r3, r8
 8020d3a:	ea53 030a 	orrs.w	r3, r3, sl
 8020d3e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8020d42:	d03e      	beq.n	8020dc2 <_strtod_l+0xb5a>
 8020d44:	eeb4 8bca 	vcmpe.f64	d8, d10
 8020d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d4c:	f53f ace2 	bmi.w	8020714 <_strtod_l+0x4ac>
 8020d50:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8020d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d58:	dd9c      	ble.n	8020c94 <_strtod_l+0xa2c>
 8020d5a:	e4db      	b.n	8020714 <_strtod_l+0x4ac>
 8020d5c:	9904      	ldr	r1, [sp, #16]
 8020d5e:	b301      	cbz	r1, 8020da2 <_strtod_l+0xb3a>
 8020d60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020d62:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8020d66:	d81c      	bhi.n	8020da2 <_strtod_l+0xb3a>
 8020d68:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8020df0 <_strtod_l+0xb88>
 8020d6c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8020d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d74:	d811      	bhi.n	8020d9a <_strtod_l+0xb32>
 8020d76:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8020d7a:	ee18 3a10 	vmov	r3, s16
 8020d7e:	2b01      	cmp	r3, #1
 8020d80:	bf38      	it	cc
 8020d82:	2301      	movcc	r3, #1
 8020d84:	ee08 3a10 	vmov	s16, r3
 8020d88:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8020d8c:	f1ba 0f00 	cmp.w	sl, #0
 8020d90:	d114      	bne.n	8020dbc <_strtod_l+0xb54>
 8020d92:	eeb1 7b48 	vneg.f64	d7, d8
 8020d96:	ec53 2b17 	vmov	r2, r3, d7
 8020d9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020d9c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8020da0:	1a0b      	subs	r3, r1, r0
 8020da2:	ed9d 0b08 	vldr	d0, [sp, #32]
 8020da6:	ec43 2b1c 	vmov	d12, r2, r3
 8020daa:	f002 f8df 	bl	8022f6c <__ulp>
 8020dae:	ed9d 7b08 	vldr	d7, [sp, #32]
 8020db2:	eeac 7b00 	vfma.f64	d7, d12, d0
 8020db6:	ec59 8b17 	vmov	r8, r9, d7
 8020dba:	e7a8      	b.n	8020d0e <_strtod_l+0xaa6>
 8020dbc:	ec53 2b18 	vmov	r2, r3, d8
 8020dc0:	e7eb      	b.n	8020d9a <_strtod_l+0xb32>
 8020dc2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8020dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dca:	f57f af63 	bpl.w	8020c94 <_strtod_l+0xa2c>
 8020dce:	e4a1      	b.n	8020714 <_strtod_l+0x4ac>
 8020dd0:	2300      	movs	r3, #0
 8020dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8020dd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020dd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020dd8:	6013      	str	r3, [r2, #0]
 8020dda:	f7ff ba8d 	b.w	80202f8 <_strtod_l+0x90>
 8020dde:	2a65      	cmp	r2, #101	; 0x65
 8020de0:	f43f ab89 	beq.w	80204f6 <_strtod_l+0x28e>
 8020de4:	2a45      	cmp	r2, #69	; 0x45
 8020de6:	f43f ab86 	beq.w	80204f6 <_strtod_l+0x28e>
 8020dea:	2101      	movs	r1, #1
 8020dec:	f7ff bbbe 	b.w	802056c <_strtod_l+0x304>
 8020df0:	ffc00000 	.word	0xffc00000
 8020df4:	41dfffff 	.word	0x41dfffff
 8020df8:	000fffff 	.word	0x000fffff
 8020dfc:	7ff00000 	.word	0x7ff00000
 8020e00:	7fefffff 	.word	0x7fefffff
 8020e04:	3ff00000 	.word	0x3ff00000
 8020e08:	7c9fffff 	.word	0x7c9fffff
 8020e0c:	bff00000 	.word	0xbff00000
 8020e10:	7fe00000 	.word	0x7fe00000

08020e14 <_strtod_r>:
 8020e14:	4b01      	ldr	r3, [pc, #4]	; (8020e1c <_strtod_r+0x8>)
 8020e16:	f7ff ba27 	b.w	8020268 <_strtod_l>
 8020e1a:	bf00      	nop
 8020e1c:	240034ac 	.word	0x240034ac

08020e20 <_strtol_l.isra.0>:
 8020e20:	2b01      	cmp	r3, #1
 8020e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020e26:	d001      	beq.n	8020e2c <_strtol_l.isra.0+0xc>
 8020e28:	2b24      	cmp	r3, #36	; 0x24
 8020e2a:	d906      	bls.n	8020e3a <_strtol_l.isra.0+0x1a>
 8020e2c:	f000 ff6a 	bl	8021d04 <__errno>
 8020e30:	2316      	movs	r3, #22
 8020e32:	6003      	str	r3, [r0, #0]
 8020e34:	2000      	movs	r0, #0
 8020e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e3a:	4f3a      	ldr	r7, [pc, #232]	; (8020f24 <_strtol_l.isra.0+0x104>)
 8020e3c:	468e      	mov	lr, r1
 8020e3e:	4676      	mov	r6, lr
 8020e40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020e44:	5de5      	ldrb	r5, [r4, r7]
 8020e46:	f015 0508 	ands.w	r5, r5, #8
 8020e4a:	d1f8      	bne.n	8020e3e <_strtol_l.isra.0+0x1e>
 8020e4c:	2c2d      	cmp	r4, #45	; 0x2d
 8020e4e:	d134      	bne.n	8020eba <_strtol_l.isra.0+0x9a>
 8020e50:	f89e 4000 	ldrb.w	r4, [lr]
 8020e54:	f04f 0801 	mov.w	r8, #1
 8020e58:	f106 0e02 	add.w	lr, r6, #2
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d05c      	beq.n	8020f1a <_strtol_l.isra.0+0xfa>
 8020e60:	2b10      	cmp	r3, #16
 8020e62:	d10c      	bne.n	8020e7e <_strtol_l.isra.0+0x5e>
 8020e64:	2c30      	cmp	r4, #48	; 0x30
 8020e66:	d10a      	bne.n	8020e7e <_strtol_l.isra.0+0x5e>
 8020e68:	f89e 4000 	ldrb.w	r4, [lr]
 8020e6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020e70:	2c58      	cmp	r4, #88	; 0x58
 8020e72:	d14d      	bne.n	8020f10 <_strtol_l.isra.0+0xf0>
 8020e74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020e78:	2310      	movs	r3, #16
 8020e7a:	f10e 0e02 	add.w	lr, lr, #2
 8020e7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020e82:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8020e86:	2600      	movs	r6, #0
 8020e88:	fbbc f9f3 	udiv	r9, ip, r3
 8020e8c:	4635      	mov	r5, r6
 8020e8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8020e92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020e96:	2f09      	cmp	r7, #9
 8020e98:	d818      	bhi.n	8020ecc <_strtol_l.isra.0+0xac>
 8020e9a:	463c      	mov	r4, r7
 8020e9c:	42a3      	cmp	r3, r4
 8020e9e:	dd24      	ble.n	8020eea <_strtol_l.isra.0+0xca>
 8020ea0:	2e00      	cmp	r6, #0
 8020ea2:	db1f      	blt.n	8020ee4 <_strtol_l.isra.0+0xc4>
 8020ea4:	45a9      	cmp	r9, r5
 8020ea6:	d31d      	bcc.n	8020ee4 <_strtol_l.isra.0+0xc4>
 8020ea8:	d101      	bne.n	8020eae <_strtol_l.isra.0+0x8e>
 8020eaa:	45a2      	cmp	sl, r4
 8020eac:	db1a      	blt.n	8020ee4 <_strtol_l.isra.0+0xc4>
 8020eae:	fb05 4503 	mla	r5, r5, r3, r4
 8020eb2:	2601      	movs	r6, #1
 8020eb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020eb8:	e7eb      	b.n	8020e92 <_strtol_l.isra.0+0x72>
 8020eba:	2c2b      	cmp	r4, #43	; 0x2b
 8020ebc:	bf08      	it	eq
 8020ebe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020ec2:	46a8      	mov	r8, r5
 8020ec4:	bf08      	it	eq
 8020ec6:	f106 0e02 	addeq.w	lr, r6, #2
 8020eca:	e7c7      	b.n	8020e5c <_strtol_l.isra.0+0x3c>
 8020ecc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020ed0:	2f19      	cmp	r7, #25
 8020ed2:	d801      	bhi.n	8020ed8 <_strtol_l.isra.0+0xb8>
 8020ed4:	3c37      	subs	r4, #55	; 0x37
 8020ed6:	e7e1      	b.n	8020e9c <_strtol_l.isra.0+0x7c>
 8020ed8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020edc:	2f19      	cmp	r7, #25
 8020ede:	d804      	bhi.n	8020eea <_strtol_l.isra.0+0xca>
 8020ee0:	3c57      	subs	r4, #87	; 0x57
 8020ee2:	e7db      	b.n	8020e9c <_strtol_l.isra.0+0x7c>
 8020ee4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8020ee8:	e7e4      	b.n	8020eb4 <_strtol_l.isra.0+0x94>
 8020eea:	2e00      	cmp	r6, #0
 8020eec:	da05      	bge.n	8020efa <_strtol_l.isra.0+0xda>
 8020eee:	2322      	movs	r3, #34	; 0x22
 8020ef0:	6003      	str	r3, [r0, #0]
 8020ef2:	4665      	mov	r5, ip
 8020ef4:	b942      	cbnz	r2, 8020f08 <_strtol_l.isra.0+0xe8>
 8020ef6:	4628      	mov	r0, r5
 8020ef8:	e79d      	b.n	8020e36 <_strtol_l.isra.0+0x16>
 8020efa:	f1b8 0f00 	cmp.w	r8, #0
 8020efe:	d000      	beq.n	8020f02 <_strtol_l.isra.0+0xe2>
 8020f00:	426d      	negs	r5, r5
 8020f02:	2a00      	cmp	r2, #0
 8020f04:	d0f7      	beq.n	8020ef6 <_strtol_l.isra.0+0xd6>
 8020f06:	b10e      	cbz	r6, 8020f0c <_strtol_l.isra.0+0xec>
 8020f08:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8020f0c:	6011      	str	r1, [r2, #0]
 8020f0e:	e7f2      	b.n	8020ef6 <_strtol_l.isra.0+0xd6>
 8020f10:	2430      	movs	r4, #48	; 0x30
 8020f12:	2b00      	cmp	r3, #0
 8020f14:	d1b3      	bne.n	8020e7e <_strtol_l.isra.0+0x5e>
 8020f16:	2308      	movs	r3, #8
 8020f18:	e7b1      	b.n	8020e7e <_strtol_l.isra.0+0x5e>
 8020f1a:	2c30      	cmp	r4, #48	; 0x30
 8020f1c:	d0a4      	beq.n	8020e68 <_strtol_l.isra.0+0x48>
 8020f1e:	230a      	movs	r3, #10
 8020f20:	e7ad      	b.n	8020e7e <_strtol_l.isra.0+0x5e>
 8020f22:	bf00      	nop
 8020f24:	0802832d 	.word	0x0802832d

08020f28 <_strtol_r>:
 8020f28:	f7ff bf7a 	b.w	8020e20 <_strtol_l.isra.0>

08020f2c <__swbuf_r>:
 8020f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f2e:	460e      	mov	r6, r1
 8020f30:	4614      	mov	r4, r2
 8020f32:	4605      	mov	r5, r0
 8020f34:	b118      	cbz	r0, 8020f3e <__swbuf_r+0x12>
 8020f36:	6983      	ldr	r3, [r0, #24]
 8020f38:	b90b      	cbnz	r3, 8020f3e <__swbuf_r+0x12>
 8020f3a:	f001 f803 	bl	8021f44 <__sinit>
 8020f3e:	4b21      	ldr	r3, [pc, #132]	; (8020fc4 <__swbuf_r+0x98>)
 8020f40:	429c      	cmp	r4, r3
 8020f42:	d12b      	bne.n	8020f9c <__swbuf_r+0x70>
 8020f44:	686c      	ldr	r4, [r5, #4]
 8020f46:	69a3      	ldr	r3, [r4, #24]
 8020f48:	60a3      	str	r3, [r4, #8]
 8020f4a:	89a3      	ldrh	r3, [r4, #12]
 8020f4c:	071a      	lsls	r2, r3, #28
 8020f4e:	d52f      	bpl.n	8020fb0 <__swbuf_r+0x84>
 8020f50:	6923      	ldr	r3, [r4, #16]
 8020f52:	b36b      	cbz	r3, 8020fb0 <__swbuf_r+0x84>
 8020f54:	6923      	ldr	r3, [r4, #16]
 8020f56:	6820      	ldr	r0, [r4, #0]
 8020f58:	1ac0      	subs	r0, r0, r3
 8020f5a:	6963      	ldr	r3, [r4, #20]
 8020f5c:	b2f6      	uxtb	r6, r6
 8020f5e:	4283      	cmp	r3, r0
 8020f60:	4637      	mov	r7, r6
 8020f62:	dc04      	bgt.n	8020f6e <__swbuf_r+0x42>
 8020f64:	4621      	mov	r1, r4
 8020f66:	4628      	mov	r0, r5
 8020f68:	f000 ff58 	bl	8021e1c <_fflush_r>
 8020f6c:	bb30      	cbnz	r0, 8020fbc <__swbuf_r+0x90>
 8020f6e:	68a3      	ldr	r3, [r4, #8]
 8020f70:	3b01      	subs	r3, #1
 8020f72:	60a3      	str	r3, [r4, #8]
 8020f74:	6823      	ldr	r3, [r4, #0]
 8020f76:	1c5a      	adds	r2, r3, #1
 8020f78:	6022      	str	r2, [r4, #0]
 8020f7a:	701e      	strb	r6, [r3, #0]
 8020f7c:	6963      	ldr	r3, [r4, #20]
 8020f7e:	3001      	adds	r0, #1
 8020f80:	4283      	cmp	r3, r0
 8020f82:	d004      	beq.n	8020f8e <__swbuf_r+0x62>
 8020f84:	89a3      	ldrh	r3, [r4, #12]
 8020f86:	07db      	lsls	r3, r3, #31
 8020f88:	d506      	bpl.n	8020f98 <__swbuf_r+0x6c>
 8020f8a:	2e0a      	cmp	r6, #10
 8020f8c:	d104      	bne.n	8020f98 <__swbuf_r+0x6c>
 8020f8e:	4621      	mov	r1, r4
 8020f90:	4628      	mov	r0, r5
 8020f92:	f000 ff43 	bl	8021e1c <_fflush_r>
 8020f96:	b988      	cbnz	r0, 8020fbc <__swbuf_r+0x90>
 8020f98:	4638      	mov	r0, r7
 8020f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f9c:	4b0a      	ldr	r3, [pc, #40]	; (8020fc8 <__swbuf_r+0x9c>)
 8020f9e:	429c      	cmp	r4, r3
 8020fa0:	d101      	bne.n	8020fa6 <__swbuf_r+0x7a>
 8020fa2:	68ac      	ldr	r4, [r5, #8]
 8020fa4:	e7cf      	b.n	8020f46 <__swbuf_r+0x1a>
 8020fa6:	4b09      	ldr	r3, [pc, #36]	; (8020fcc <__swbuf_r+0xa0>)
 8020fa8:	429c      	cmp	r4, r3
 8020faa:	bf08      	it	eq
 8020fac:	68ec      	ldreq	r4, [r5, #12]
 8020fae:	e7ca      	b.n	8020f46 <__swbuf_r+0x1a>
 8020fb0:	4621      	mov	r1, r4
 8020fb2:	4628      	mov	r0, r5
 8020fb4:	f000 f80c 	bl	8020fd0 <__swsetup_r>
 8020fb8:	2800      	cmp	r0, #0
 8020fba:	d0cb      	beq.n	8020f54 <__swbuf_r+0x28>
 8020fbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8020fc0:	e7ea      	b.n	8020f98 <__swbuf_r+0x6c>
 8020fc2:	bf00      	nop
 8020fc4:	08028614 	.word	0x08028614
 8020fc8:	08028634 	.word	0x08028634
 8020fcc:	080285f4 	.word	0x080285f4

08020fd0 <__swsetup_r>:
 8020fd0:	4b32      	ldr	r3, [pc, #200]	; (802109c <__swsetup_r+0xcc>)
 8020fd2:	b570      	push	{r4, r5, r6, lr}
 8020fd4:	681d      	ldr	r5, [r3, #0]
 8020fd6:	4606      	mov	r6, r0
 8020fd8:	460c      	mov	r4, r1
 8020fda:	b125      	cbz	r5, 8020fe6 <__swsetup_r+0x16>
 8020fdc:	69ab      	ldr	r3, [r5, #24]
 8020fde:	b913      	cbnz	r3, 8020fe6 <__swsetup_r+0x16>
 8020fe0:	4628      	mov	r0, r5
 8020fe2:	f000 ffaf 	bl	8021f44 <__sinit>
 8020fe6:	4b2e      	ldr	r3, [pc, #184]	; (80210a0 <__swsetup_r+0xd0>)
 8020fe8:	429c      	cmp	r4, r3
 8020fea:	d10f      	bne.n	802100c <__swsetup_r+0x3c>
 8020fec:	686c      	ldr	r4, [r5, #4]
 8020fee:	89a3      	ldrh	r3, [r4, #12]
 8020ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020ff4:	0719      	lsls	r1, r3, #28
 8020ff6:	d42c      	bmi.n	8021052 <__swsetup_r+0x82>
 8020ff8:	06dd      	lsls	r5, r3, #27
 8020ffa:	d411      	bmi.n	8021020 <__swsetup_r+0x50>
 8020ffc:	2309      	movs	r3, #9
 8020ffe:	6033      	str	r3, [r6, #0]
 8021000:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021004:	81a3      	strh	r3, [r4, #12]
 8021006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802100a:	e03e      	b.n	802108a <__swsetup_r+0xba>
 802100c:	4b25      	ldr	r3, [pc, #148]	; (80210a4 <__swsetup_r+0xd4>)
 802100e:	429c      	cmp	r4, r3
 8021010:	d101      	bne.n	8021016 <__swsetup_r+0x46>
 8021012:	68ac      	ldr	r4, [r5, #8]
 8021014:	e7eb      	b.n	8020fee <__swsetup_r+0x1e>
 8021016:	4b24      	ldr	r3, [pc, #144]	; (80210a8 <__swsetup_r+0xd8>)
 8021018:	429c      	cmp	r4, r3
 802101a:	bf08      	it	eq
 802101c:	68ec      	ldreq	r4, [r5, #12]
 802101e:	e7e6      	b.n	8020fee <__swsetup_r+0x1e>
 8021020:	0758      	lsls	r0, r3, #29
 8021022:	d512      	bpl.n	802104a <__swsetup_r+0x7a>
 8021024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021026:	b141      	cbz	r1, 802103a <__swsetup_r+0x6a>
 8021028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802102c:	4299      	cmp	r1, r3
 802102e:	d002      	beq.n	8021036 <__swsetup_r+0x66>
 8021030:	4630      	mov	r0, r6
 8021032:	f7fe f8f5 	bl	801f220 <_free_r>
 8021036:	2300      	movs	r3, #0
 8021038:	6363      	str	r3, [r4, #52]	; 0x34
 802103a:	89a3      	ldrh	r3, [r4, #12]
 802103c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021040:	81a3      	strh	r3, [r4, #12]
 8021042:	2300      	movs	r3, #0
 8021044:	6063      	str	r3, [r4, #4]
 8021046:	6923      	ldr	r3, [r4, #16]
 8021048:	6023      	str	r3, [r4, #0]
 802104a:	89a3      	ldrh	r3, [r4, #12]
 802104c:	f043 0308 	orr.w	r3, r3, #8
 8021050:	81a3      	strh	r3, [r4, #12]
 8021052:	6923      	ldr	r3, [r4, #16]
 8021054:	b94b      	cbnz	r3, 802106a <__swsetup_r+0x9a>
 8021056:	89a3      	ldrh	r3, [r4, #12]
 8021058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802105c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021060:	d003      	beq.n	802106a <__swsetup_r+0x9a>
 8021062:	4621      	mov	r1, r4
 8021064:	4630      	mov	r0, r6
 8021066:	f001 fbb7 	bl	80227d8 <__smakebuf_r>
 802106a:	89a0      	ldrh	r0, [r4, #12]
 802106c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021070:	f010 0301 	ands.w	r3, r0, #1
 8021074:	d00a      	beq.n	802108c <__swsetup_r+0xbc>
 8021076:	2300      	movs	r3, #0
 8021078:	60a3      	str	r3, [r4, #8]
 802107a:	6963      	ldr	r3, [r4, #20]
 802107c:	425b      	negs	r3, r3
 802107e:	61a3      	str	r3, [r4, #24]
 8021080:	6923      	ldr	r3, [r4, #16]
 8021082:	b943      	cbnz	r3, 8021096 <__swsetup_r+0xc6>
 8021084:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021088:	d1ba      	bne.n	8021000 <__swsetup_r+0x30>
 802108a:	bd70      	pop	{r4, r5, r6, pc}
 802108c:	0781      	lsls	r1, r0, #30
 802108e:	bf58      	it	pl
 8021090:	6963      	ldrpl	r3, [r4, #20]
 8021092:	60a3      	str	r3, [r4, #8]
 8021094:	e7f4      	b.n	8021080 <__swsetup_r+0xb0>
 8021096:	2000      	movs	r0, #0
 8021098:	e7f7      	b.n	802108a <__swsetup_r+0xba>
 802109a:	bf00      	nop
 802109c:	24003444 	.word	0x24003444
 80210a0:	08028614 	.word	0x08028614
 80210a4:	08028634 	.word	0x08028634
 80210a8:	080285f4 	.word	0x080285f4

080210ac <__assert_func>:
 80210ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80210ae:	4614      	mov	r4, r2
 80210b0:	461a      	mov	r2, r3
 80210b2:	4b09      	ldr	r3, [pc, #36]	; (80210d8 <__assert_func+0x2c>)
 80210b4:	681b      	ldr	r3, [r3, #0]
 80210b6:	4605      	mov	r5, r0
 80210b8:	68d8      	ldr	r0, [r3, #12]
 80210ba:	b14c      	cbz	r4, 80210d0 <__assert_func+0x24>
 80210bc:	4b07      	ldr	r3, [pc, #28]	; (80210dc <__assert_func+0x30>)
 80210be:	9100      	str	r1, [sp, #0]
 80210c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80210c4:	4906      	ldr	r1, [pc, #24]	; (80210e0 <__assert_func+0x34>)
 80210c6:	462b      	mov	r3, r5
 80210c8:	f000 ffba 	bl	8022040 <fiprintf>
 80210cc:	f002 fbce 	bl	802386c <abort>
 80210d0:	4b04      	ldr	r3, [pc, #16]	; (80210e4 <__assert_func+0x38>)
 80210d2:	461c      	mov	r4, r3
 80210d4:	e7f3      	b.n	80210be <__assert_func+0x12>
 80210d6:	bf00      	nop
 80210d8:	24003444 	.word	0x24003444
 80210dc:	08028538 	.word	0x08028538
 80210e0:	08028545 	.word	0x08028545
 80210e4:	08028573 	.word	0x08028573

080210e8 <quorem>:
 80210e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210ec:	6903      	ldr	r3, [r0, #16]
 80210ee:	690c      	ldr	r4, [r1, #16]
 80210f0:	42a3      	cmp	r3, r4
 80210f2:	4607      	mov	r7, r0
 80210f4:	f2c0 8081 	blt.w	80211fa <quorem+0x112>
 80210f8:	3c01      	subs	r4, #1
 80210fa:	f101 0814 	add.w	r8, r1, #20
 80210fe:	f100 0514 	add.w	r5, r0, #20
 8021102:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021106:	9301      	str	r3, [sp, #4]
 8021108:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802110c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021110:	3301      	adds	r3, #1
 8021112:	429a      	cmp	r2, r3
 8021114:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802111c:	fbb2 f6f3 	udiv	r6, r2, r3
 8021120:	d331      	bcc.n	8021186 <quorem+0x9e>
 8021122:	f04f 0e00 	mov.w	lr, #0
 8021126:	4640      	mov	r0, r8
 8021128:	46ac      	mov	ip, r5
 802112a:	46f2      	mov	sl, lr
 802112c:	f850 2b04 	ldr.w	r2, [r0], #4
 8021130:	b293      	uxth	r3, r2
 8021132:	fb06 e303 	mla	r3, r6, r3, lr
 8021136:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802113a:	b29b      	uxth	r3, r3
 802113c:	ebaa 0303 	sub.w	r3, sl, r3
 8021140:	0c12      	lsrs	r2, r2, #16
 8021142:	f8dc a000 	ldr.w	sl, [ip]
 8021146:	fb06 e202 	mla	r2, r6, r2, lr
 802114a:	fa13 f38a 	uxtah	r3, r3, sl
 802114e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8021152:	fa1f fa82 	uxth.w	sl, r2
 8021156:	f8dc 2000 	ldr.w	r2, [ip]
 802115a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 802115e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021162:	b29b      	uxth	r3, r3
 8021164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021168:	4581      	cmp	r9, r0
 802116a:	f84c 3b04 	str.w	r3, [ip], #4
 802116e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021172:	d2db      	bcs.n	802112c <quorem+0x44>
 8021174:	f855 300b 	ldr.w	r3, [r5, fp]
 8021178:	b92b      	cbnz	r3, 8021186 <quorem+0x9e>
 802117a:	9b01      	ldr	r3, [sp, #4]
 802117c:	3b04      	subs	r3, #4
 802117e:	429d      	cmp	r5, r3
 8021180:	461a      	mov	r2, r3
 8021182:	d32e      	bcc.n	80211e2 <quorem+0xfa>
 8021184:	613c      	str	r4, [r7, #16]
 8021186:	4638      	mov	r0, r7
 8021188:	f001 fe4c 	bl	8022e24 <__mcmp>
 802118c:	2800      	cmp	r0, #0
 802118e:	db24      	blt.n	80211da <quorem+0xf2>
 8021190:	3601      	adds	r6, #1
 8021192:	4628      	mov	r0, r5
 8021194:	f04f 0c00 	mov.w	ip, #0
 8021198:	f858 2b04 	ldr.w	r2, [r8], #4
 802119c:	f8d0 e000 	ldr.w	lr, [r0]
 80211a0:	b293      	uxth	r3, r2
 80211a2:	ebac 0303 	sub.w	r3, ip, r3
 80211a6:	0c12      	lsrs	r2, r2, #16
 80211a8:	fa13 f38e 	uxtah	r3, r3, lr
 80211ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80211b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80211b4:	b29b      	uxth	r3, r3
 80211b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80211ba:	45c1      	cmp	r9, r8
 80211bc:	f840 3b04 	str.w	r3, [r0], #4
 80211c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80211c4:	d2e8      	bcs.n	8021198 <quorem+0xb0>
 80211c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80211ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80211ce:	b922      	cbnz	r2, 80211da <quorem+0xf2>
 80211d0:	3b04      	subs	r3, #4
 80211d2:	429d      	cmp	r5, r3
 80211d4:	461a      	mov	r2, r3
 80211d6:	d30a      	bcc.n	80211ee <quorem+0x106>
 80211d8:	613c      	str	r4, [r7, #16]
 80211da:	4630      	mov	r0, r6
 80211dc:	b003      	add	sp, #12
 80211de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211e2:	6812      	ldr	r2, [r2, #0]
 80211e4:	3b04      	subs	r3, #4
 80211e6:	2a00      	cmp	r2, #0
 80211e8:	d1cc      	bne.n	8021184 <quorem+0x9c>
 80211ea:	3c01      	subs	r4, #1
 80211ec:	e7c7      	b.n	802117e <quorem+0x96>
 80211ee:	6812      	ldr	r2, [r2, #0]
 80211f0:	3b04      	subs	r3, #4
 80211f2:	2a00      	cmp	r2, #0
 80211f4:	d1f0      	bne.n	80211d8 <quorem+0xf0>
 80211f6:	3c01      	subs	r4, #1
 80211f8:	e7eb      	b.n	80211d2 <quorem+0xea>
 80211fa:	2000      	movs	r0, #0
 80211fc:	e7ee      	b.n	80211dc <quorem+0xf4>
	...

08021200 <_dtoa_r>:
 8021200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021204:	ec59 8b10 	vmov	r8, r9, d0
 8021208:	b095      	sub	sp, #84	; 0x54
 802120a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802120c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802120e:	9107      	str	r1, [sp, #28]
 8021210:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8021214:	4606      	mov	r6, r0
 8021216:	9209      	str	r2, [sp, #36]	; 0x24
 8021218:	9310      	str	r3, [sp, #64]	; 0x40
 802121a:	b975      	cbnz	r5, 802123a <_dtoa_r+0x3a>
 802121c:	2010      	movs	r0, #16
 802121e:	f7fd ffb9 	bl	801f194 <malloc>
 8021222:	4602      	mov	r2, r0
 8021224:	6270      	str	r0, [r6, #36]	; 0x24
 8021226:	b920      	cbnz	r0, 8021232 <_dtoa_r+0x32>
 8021228:	4bab      	ldr	r3, [pc, #684]	; (80214d8 <_dtoa_r+0x2d8>)
 802122a:	21ea      	movs	r1, #234	; 0xea
 802122c:	48ab      	ldr	r0, [pc, #684]	; (80214dc <_dtoa_r+0x2dc>)
 802122e:	f7ff ff3d 	bl	80210ac <__assert_func>
 8021232:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021236:	6005      	str	r5, [r0, #0]
 8021238:	60c5      	str	r5, [r0, #12]
 802123a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802123c:	6819      	ldr	r1, [r3, #0]
 802123e:	b151      	cbz	r1, 8021256 <_dtoa_r+0x56>
 8021240:	685a      	ldr	r2, [r3, #4]
 8021242:	604a      	str	r2, [r1, #4]
 8021244:	2301      	movs	r3, #1
 8021246:	4093      	lsls	r3, r2
 8021248:	608b      	str	r3, [r1, #8]
 802124a:	4630      	mov	r0, r6
 802124c:	f001 fb62 	bl	8022914 <_Bfree>
 8021250:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8021252:	2200      	movs	r2, #0
 8021254:	601a      	str	r2, [r3, #0]
 8021256:	f1b9 0300 	subs.w	r3, r9, #0
 802125a:	bfbb      	ittet	lt
 802125c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021260:	9303      	strlt	r3, [sp, #12]
 8021262:	2300      	movge	r3, #0
 8021264:	2201      	movlt	r2, #1
 8021266:	bfac      	ite	ge
 8021268:	6023      	strge	r3, [r4, #0]
 802126a:	6022      	strlt	r2, [r4, #0]
 802126c:	4b9c      	ldr	r3, [pc, #624]	; (80214e0 <_dtoa_r+0x2e0>)
 802126e:	9c03      	ldr	r4, [sp, #12]
 8021270:	43a3      	bics	r3, r4
 8021272:	d11a      	bne.n	80212aa <_dtoa_r+0xaa>
 8021274:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021276:	f242 730f 	movw	r3, #9999	; 0x270f
 802127a:	6013      	str	r3, [r2, #0]
 802127c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8021280:	ea53 0308 	orrs.w	r3, r3, r8
 8021284:	f000 8512 	beq.w	8021cac <_dtoa_r+0xaac>
 8021288:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802128a:	b953      	cbnz	r3, 80212a2 <_dtoa_r+0xa2>
 802128c:	4b95      	ldr	r3, [pc, #596]	; (80214e4 <_dtoa_r+0x2e4>)
 802128e:	e01f      	b.n	80212d0 <_dtoa_r+0xd0>
 8021290:	4b95      	ldr	r3, [pc, #596]	; (80214e8 <_dtoa_r+0x2e8>)
 8021292:	9300      	str	r3, [sp, #0]
 8021294:	3308      	adds	r3, #8
 8021296:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021298:	6013      	str	r3, [r2, #0]
 802129a:	9800      	ldr	r0, [sp, #0]
 802129c:	b015      	add	sp, #84	; 0x54
 802129e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212a2:	4b90      	ldr	r3, [pc, #576]	; (80214e4 <_dtoa_r+0x2e4>)
 80212a4:	9300      	str	r3, [sp, #0]
 80212a6:	3303      	adds	r3, #3
 80212a8:	e7f5      	b.n	8021296 <_dtoa_r+0x96>
 80212aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80212ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80212b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212b6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80212ba:	d10b      	bne.n	80212d4 <_dtoa_r+0xd4>
 80212bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80212be:	2301      	movs	r3, #1
 80212c0:	6013      	str	r3, [r2, #0]
 80212c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80212c4:	2b00      	cmp	r3, #0
 80212c6:	f000 84ee 	beq.w	8021ca6 <_dtoa_r+0xaa6>
 80212ca:	4888      	ldr	r0, [pc, #544]	; (80214ec <_dtoa_r+0x2ec>)
 80212cc:	6018      	str	r0, [r3, #0]
 80212ce:	1e43      	subs	r3, r0, #1
 80212d0:	9300      	str	r3, [sp, #0]
 80212d2:	e7e2      	b.n	802129a <_dtoa_r+0x9a>
 80212d4:	a913      	add	r1, sp, #76	; 0x4c
 80212d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80212da:	aa12      	add	r2, sp, #72	; 0x48
 80212dc:	4630      	mov	r0, r6
 80212de:	f001 fec1 	bl	8023064 <__d2b>
 80212e2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80212e6:	4605      	mov	r5, r0
 80212e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80212ea:	2900      	cmp	r1, #0
 80212ec:	d047      	beq.n	802137e <_dtoa_r+0x17e>
 80212ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80212f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80212f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80212f8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80212fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021300:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8021304:	2400      	movs	r4, #0
 8021306:	ec43 2b16 	vmov	d6, r2, r3
 802130a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802130e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80214c0 <_dtoa_r+0x2c0>
 8021312:	ee36 7b47 	vsub.f64	d7, d6, d7
 8021316:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80214c8 <_dtoa_r+0x2c8>
 802131a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802131e:	eeb0 7b46 	vmov.f64	d7, d6
 8021322:	ee06 1a90 	vmov	s13, r1
 8021326:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802132a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80214d0 <_dtoa_r+0x2d0>
 802132e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8021332:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8021336:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802133e:	ee16 ba90 	vmov	fp, s13
 8021342:	9411      	str	r4, [sp, #68]	; 0x44
 8021344:	d508      	bpl.n	8021358 <_dtoa_r+0x158>
 8021346:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802134a:	eeb4 6b47 	vcmp.f64	d6, d7
 802134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021352:	bf18      	it	ne
 8021354:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8021358:	f1bb 0f16 	cmp.w	fp, #22
 802135c:	d832      	bhi.n	80213c4 <_dtoa_r+0x1c4>
 802135e:	4b64      	ldr	r3, [pc, #400]	; (80214f0 <_dtoa_r+0x2f0>)
 8021360:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021364:	ed93 7b00 	vldr	d7, [r3]
 8021368:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802136c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021374:	d501      	bpl.n	802137a <_dtoa_r+0x17a>
 8021376:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802137a:	2300      	movs	r3, #0
 802137c:	e023      	b.n	80213c6 <_dtoa_r+0x1c6>
 802137e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021380:	4401      	add	r1, r0
 8021382:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8021386:	2b20      	cmp	r3, #32
 8021388:	bfc3      	ittte	gt
 802138a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802138e:	fa04 f303 	lslgt.w	r3, r4, r3
 8021392:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8021396:	f1c3 0320 	rsble	r3, r3, #32
 802139a:	bfc6      	itte	gt
 802139c:	fa28 f804 	lsrgt.w	r8, r8, r4
 80213a0:	ea43 0308 	orrgt.w	r3, r3, r8
 80213a4:	fa08 f303 	lslle.w	r3, r8, r3
 80213a8:	ee07 3a90 	vmov	s15, r3
 80213ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80213b0:	3901      	subs	r1, #1
 80213b2:	ed8d 7b00 	vstr	d7, [sp]
 80213b6:	9c01      	ldr	r4, [sp, #4]
 80213b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80213bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80213c0:	2401      	movs	r4, #1
 80213c2:	e7a0      	b.n	8021306 <_dtoa_r+0x106>
 80213c4:	2301      	movs	r3, #1
 80213c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80213c8:	1a43      	subs	r3, r0, r1
 80213ca:	1e5a      	subs	r2, r3, #1
 80213cc:	bf45      	ittet	mi
 80213ce:	f1c3 0301 	rsbmi	r3, r3, #1
 80213d2:	9305      	strmi	r3, [sp, #20]
 80213d4:	2300      	movpl	r3, #0
 80213d6:	2300      	movmi	r3, #0
 80213d8:	9206      	str	r2, [sp, #24]
 80213da:	bf54      	ite	pl
 80213dc:	9305      	strpl	r3, [sp, #20]
 80213de:	9306      	strmi	r3, [sp, #24]
 80213e0:	f1bb 0f00 	cmp.w	fp, #0
 80213e4:	db18      	blt.n	8021418 <_dtoa_r+0x218>
 80213e6:	9b06      	ldr	r3, [sp, #24]
 80213e8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80213ec:	445b      	add	r3, fp
 80213ee:	9306      	str	r3, [sp, #24]
 80213f0:	2300      	movs	r3, #0
 80213f2:	9a07      	ldr	r2, [sp, #28]
 80213f4:	2a09      	cmp	r2, #9
 80213f6:	d849      	bhi.n	802148c <_dtoa_r+0x28c>
 80213f8:	2a05      	cmp	r2, #5
 80213fa:	bfc4      	itt	gt
 80213fc:	3a04      	subgt	r2, #4
 80213fe:	9207      	strgt	r2, [sp, #28]
 8021400:	9a07      	ldr	r2, [sp, #28]
 8021402:	f1a2 0202 	sub.w	r2, r2, #2
 8021406:	bfcc      	ite	gt
 8021408:	2400      	movgt	r4, #0
 802140a:	2401      	movle	r4, #1
 802140c:	2a03      	cmp	r2, #3
 802140e:	d848      	bhi.n	80214a2 <_dtoa_r+0x2a2>
 8021410:	e8df f002 	tbb	[pc, r2]
 8021414:	3a2c2e0b 	.word	0x3a2c2e0b
 8021418:	9b05      	ldr	r3, [sp, #20]
 802141a:	2200      	movs	r2, #0
 802141c:	eba3 030b 	sub.w	r3, r3, fp
 8021420:	9305      	str	r3, [sp, #20]
 8021422:	920e      	str	r2, [sp, #56]	; 0x38
 8021424:	f1cb 0300 	rsb	r3, fp, #0
 8021428:	e7e3      	b.n	80213f2 <_dtoa_r+0x1f2>
 802142a:	2200      	movs	r2, #0
 802142c:	9208      	str	r2, [sp, #32]
 802142e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021430:	2a00      	cmp	r2, #0
 8021432:	dc39      	bgt.n	80214a8 <_dtoa_r+0x2a8>
 8021434:	f04f 0a01 	mov.w	sl, #1
 8021438:	46d1      	mov	r9, sl
 802143a:	4652      	mov	r2, sl
 802143c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8021440:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8021442:	2100      	movs	r1, #0
 8021444:	6079      	str	r1, [r7, #4]
 8021446:	2004      	movs	r0, #4
 8021448:	f100 0c14 	add.w	ip, r0, #20
 802144c:	4594      	cmp	ip, r2
 802144e:	6879      	ldr	r1, [r7, #4]
 8021450:	d92f      	bls.n	80214b2 <_dtoa_r+0x2b2>
 8021452:	4630      	mov	r0, r6
 8021454:	930c      	str	r3, [sp, #48]	; 0x30
 8021456:	f001 fa1d 	bl	8022894 <_Balloc>
 802145a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802145c:	9000      	str	r0, [sp, #0]
 802145e:	4602      	mov	r2, r0
 8021460:	2800      	cmp	r0, #0
 8021462:	d149      	bne.n	80214f8 <_dtoa_r+0x2f8>
 8021464:	4b23      	ldr	r3, [pc, #140]	; (80214f4 <_dtoa_r+0x2f4>)
 8021466:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802146a:	e6df      	b.n	802122c <_dtoa_r+0x2c>
 802146c:	2201      	movs	r2, #1
 802146e:	e7dd      	b.n	802142c <_dtoa_r+0x22c>
 8021470:	2200      	movs	r2, #0
 8021472:	9208      	str	r2, [sp, #32]
 8021474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021476:	eb0b 0a02 	add.w	sl, fp, r2
 802147a:	f10a 0901 	add.w	r9, sl, #1
 802147e:	464a      	mov	r2, r9
 8021480:	2a01      	cmp	r2, #1
 8021482:	bfb8      	it	lt
 8021484:	2201      	movlt	r2, #1
 8021486:	e7db      	b.n	8021440 <_dtoa_r+0x240>
 8021488:	2201      	movs	r2, #1
 802148a:	e7f2      	b.n	8021472 <_dtoa_r+0x272>
 802148c:	2401      	movs	r4, #1
 802148e:	2200      	movs	r2, #0
 8021490:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8021494:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8021498:	2100      	movs	r1, #0
 802149a:	46d1      	mov	r9, sl
 802149c:	2212      	movs	r2, #18
 802149e:	9109      	str	r1, [sp, #36]	; 0x24
 80214a0:	e7ce      	b.n	8021440 <_dtoa_r+0x240>
 80214a2:	2201      	movs	r2, #1
 80214a4:	9208      	str	r2, [sp, #32]
 80214a6:	e7f5      	b.n	8021494 <_dtoa_r+0x294>
 80214a8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80214ac:	46d1      	mov	r9, sl
 80214ae:	4652      	mov	r2, sl
 80214b0:	e7c6      	b.n	8021440 <_dtoa_r+0x240>
 80214b2:	3101      	adds	r1, #1
 80214b4:	6079      	str	r1, [r7, #4]
 80214b6:	0040      	lsls	r0, r0, #1
 80214b8:	e7c6      	b.n	8021448 <_dtoa_r+0x248>
 80214ba:	bf00      	nop
 80214bc:	f3af 8000 	nop.w
 80214c0:	636f4361 	.word	0x636f4361
 80214c4:	3fd287a7 	.word	0x3fd287a7
 80214c8:	8b60c8b3 	.word	0x8b60c8b3
 80214cc:	3fc68a28 	.word	0x3fc68a28
 80214d0:	509f79fb 	.word	0x509f79fb
 80214d4:	3fd34413 	.word	0x3fd34413
 80214d8:	0802846d 	.word	0x0802846d
 80214dc:	08028581 	.word	0x08028581
 80214e0:	7ff00000 	.word	0x7ff00000
 80214e4:	0802857d 	.word	0x0802857d
 80214e8:	08028574 	.word	0x08028574
 80214ec:	08028445 	.word	0x08028445
 80214f0:	08028760 	.word	0x08028760
 80214f4:	080285e0 	.word	0x080285e0
 80214f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80214fa:	9900      	ldr	r1, [sp, #0]
 80214fc:	6011      	str	r1, [r2, #0]
 80214fe:	f1b9 0f0e 	cmp.w	r9, #14
 8021502:	d872      	bhi.n	80215ea <_dtoa_r+0x3ea>
 8021504:	2c00      	cmp	r4, #0
 8021506:	d070      	beq.n	80215ea <_dtoa_r+0x3ea>
 8021508:	f1bb 0f00 	cmp.w	fp, #0
 802150c:	f340 80a6 	ble.w	802165c <_dtoa_r+0x45c>
 8021510:	49ca      	ldr	r1, [pc, #808]	; (802183c <_dtoa_r+0x63c>)
 8021512:	f00b 020f 	and.w	r2, fp, #15
 8021516:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802151a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802151e:	ed92 7b00 	vldr	d7, [r2]
 8021522:	ea4f 112b 	mov.w	r1, fp, asr #4
 8021526:	f000 808d 	beq.w	8021644 <_dtoa_r+0x444>
 802152a:	4ac5      	ldr	r2, [pc, #788]	; (8021840 <_dtoa_r+0x640>)
 802152c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8021530:	ed92 6b08 	vldr	d6, [r2, #32]
 8021534:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8021538:	ed8d 6b02 	vstr	d6, [sp, #8]
 802153c:	f001 010f 	and.w	r1, r1, #15
 8021540:	2203      	movs	r2, #3
 8021542:	48bf      	ldr	r0, [pc, #764]	; (8021840 <_dtoa_r+0x640>)
 8021544:	2900      	cmp	r1, #0
 8021546:	d17f      	bne.n	8021648 <_dtoa_r+0x448>
 8021548:	ed9d 6b02 	vldr	d6, [sp, #8]
 802154c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8021550:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021554:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021556:	2900      	cmp	r1, #0
 8021558:	f000 80b2 	beq.w	80216c0 <_dtoa_r+0x4c0>
 802155c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021560:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021564:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8021568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802156c:	f140 80a8 	bpl.w	80216c0 <_dtoa_r+0x4c0>
 8021570:	f1b9 0f00 	cmp.w	r9, #0
 8021574:	f000 80a4 	beq.w	80216c0 <_dtoa_r+0x4c0>
 8021578:	f1ba 0f00 	cmp.w	sl, #0
 802157c:	dd31      	ble.n	80215e2 <_dtoa_r+0x3e2>
 802157e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8021582:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021586:	ed8d 7b02 	vstr	d7, [sp, #8]
 802158a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 802158e:	3201      	adds	r2, #1
 8021590:	4650      	mov	r0, sl
 8021592:	ed9d 6b02 	vldr	d6, [sp, #8]
 8021596:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802159a:	ee07 2a90 	vmov	s15, r2
 802159e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80215a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80215a6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80215aa:	9c03      	ldr	r4, [sp, #12]
 80215ac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80215b0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80215b4:	2800      	cmp	r0, #0
 80215b6:	f040 8086 	bne.w	80216c6 <_dtoa_r+0x4c6>
 80215ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80215be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80215c2:	ec42 1b17 	vmov	d7, r1, r2
 80215c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80215ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215ce:	f300 8272 	bgt.w	8021ab6 <_dtoa_r+0x8b6>
 80215d2:	eeb1 7b47 	vneg.f64	d7, d7
 80215d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80215da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215de:	f100 8267 	bmi.w	8021ab0 <_dtoa_r+0x8b0>
 80215e2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80215e6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80215ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80215ec:	2a00      	cmp	r2, #0
 80215ee:	f2c0 8129 	blt.w	8021844 <_dtoa_r+0x644>
 80215f2:	f1bb 0f0e 	cmp.w	fp, #14
 80215f6:	f300 8125 	bgt.w	8021844 <_dtoa_r+0x644>
 80215fa:	4b90      	ldr	r3, [pc, #576]	; (802183c <_dtoa_r+0x63c>)
 80215fc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021600:	ed93 6b00 	vldr	d6, [r3]
 8021604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021606:	2b00      	cmp	r3, #0
 8021608:	f280 80c3 	bge.w	8021792 <_dtoa_r+0x592>
 802160c:	f1b9 0f00 	cmp.w	r9, #0
 8021610:	f300 80bf 	bgt.w	8021792 <_dtoa_r+0x592>
 8021614:	f040 824c 	bne.w	8021ab0 <_dtoa_r+0x8b0>
 8021618:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802161c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8021620:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021624:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802162c:	464c      	mov	r4, r9
 802162e:	464f      	mov	r7, r9
 8021630:	f280 8222 	bge.w	8021a78 <_dtoa_r+0x878>
 8021634:	f8dd 8000 	ldr.w	r8, [sp]
 8021638:	2331      	movs	r3, #49	; 0x31
 802163a:	f808 3b01 	strb.w	r3, [r8], #1
 802163e:	f10b 0b01 	add.w	fp, fp, #1
 8021642:	e21e      	b.n	8021a82 <_dtoa_r+0x882>
 8021644:	2202      	movs	r2, #2
 8021646:	e77c      	b.n	8021542 <_dtoa_r+0x342>
 8021648:	07cc      	lsls	r4, r1, #31
 802164a:	d504      	bpl.n	8021656 <_dtoa_r+0x456>
 802164c:	ed90 6b00 	vldr	d6, [r0]
 8021650:	3201      	adds	r2, #1
 8021652:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021656:	1049      	asrs	r1, r1, #1
 8021658:	3008      	adds	r0, #8
 802165a:	e773      	b.n	8021544 <_dtoa_r+0x344>
 802165c:	d02e      	beq.n	80216bc <_dtoa_r+0x4bc>
 802165e:	f1cb 0100 	rsb	r1, fp, #0
 8021662:	4a76      	ldr	r2, [pc, #472]	; (802183c <_dtoa_r+0x63c>)
 8021664:	f001 000f 	and.w	r0, r1, #15
 8021668:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802166c:	ed92 7b00 	vldr	d7, [r2]
 8021670:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8021674:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021678:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802167c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8021680:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8021684:	486e      	ldr	r0, [pc, #440]	; (8021840 <_dtoa_r+0x640>)
 8021686:	1109      	asrs	r1, r1, #4
 8021688:	2400      	movs	r4, #0
 802168a:	2202      	movs	r2, #2
 802168c:	b939      	cbnz	r1, 802169e <_dtoa_r+0x49e>
 802168e:	2c00      	cmp	r4, #0
 8021690:	f43f af60 	beq.w	8021554 <_dtoa_r+0x354>
 8021694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8021698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802169c:	e75a      	b.n	8021554 <_dtoa_r+0x354>
 802169e:	07cf      	lsls	r7, r1, #31
 80216a0:	d509      	bpl.n	80216b6 <_dtoa_r+0x4b6>
 80216a2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80216a6:	ed90 7b00 	vldr	d7, [r0]
 80216aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80216ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80216b2:	3201      	adds	r2, #1
 80216b4:	2401      	movs	r4, #1
 80216b6:	1049      	asrs	r1, r1, #1
 80216b8:	3008      	adds	r0, #8
 80216ba:	e7e7      	b.n	802168c <_dtoa_r+0x48c>
 80216bc:	2202      	movs	r2, #2
 80216be:	e749      	b.n	8021554 <_dtoa_r+0x354>
 80216c0:	465f      	mov	r7, fp
 80216c2:	4648      	mov	r0, r9
 80216c4:	e765      	b.n	8021592 <_dtoa_r+0x392>
 80216c6:	ec42 1b17 	vmov	d7, r1, r2
 80216ca:	4a5c      	ldr	r2, [pc, #368]	; (802183c <_dtoa_r+0x63c>)
 80216cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80216d0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80216d4:	9a00      	ldr	r2, [sp, #0]
 80216d6:	1814      	adds	r4, r2, r0
 80216d8:	9a08      	ldr	r2, [sp, #32]
 80216da:	b352      	cbz	r2, 8021732 <_dtoa_r+0x532>
 80216dc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80216e0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80216e4:	f8dd 8000 	ldr.w	r8, [sp]
 80216e8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80216ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80216f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80216f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80216f8:	ee14 2a90 	vmov	r2, s9
 80216fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021700:	3230      	adds	r2, #48	; 0x30
 8021702:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021706:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802170e:	f808 2b01 	strb.w	r2, [r8], #1
 8021712:	d439      	bmi.n	8021788 <_dtoa_r+0x588>
 8021714:	ee32 5b46 	vsub.f64	d5, d2, d6
 8021718:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021720:	d472      	bmi.n	8021808 <_dtoa_r+0x608>
 8021722:	45a0      	cmp	r8, r4
 8021724:	f43f af5d 	beq.w	80215e2 <_dtoa_r+0x3e2>
 8021728:	ee27 7b03 	vmul.f64	d7, d7, d3
 802172c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021730:	e7e0      	b.n	80216f4 <_dtoa_r+0x4f4>
 8021732:	f8dd 8000 	ldr.w	r8, [sp]
 8021736:	ee27 7b04 	vmul.f64	d7, d7, d4
 802173a:	4621      	mov	r1, r4
 802173c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8021740:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021744:	ee14 2a90 	vmov	r2, s9
 8021748:	3230      	adds	r2, #48	; 0x30
 802174a:	f808 2b01 	strb.w	r2, [r8], #1
 802174e:	45a0      	cmp	r8, r4
 8021750:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021754:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021758:	d118      	bne.n	802178c <_dtoa_r+0x58c>
 802175a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802175e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021762:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8021766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802176a:	dc4d      	bgt.n	8021808 <_dtoa_r+0x608>
 802176c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021770:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021778:	f57f af33 	bpl.w	80215e2 <_dtoa_r+0x3e2>
 802177c:	4688      	mov	r8, r1
 802177e:	3901      	subs	r1, #1
 8021780:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8021784:	2b30      	cmp	r3, #48	; 0x30
 8021786:	d0f9      	beq.n	802177c <_dtoa_r+0x57c>
 8021788:	46bb      	mov	fp, r7
 802178a:	e02a      	b.n	80217e2 <_dtoa_r+0x5e2>
 802178c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021790:	e7d6      	b.n	8021740 <_dtoa_r+0x540>
 8021792:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021796:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802179a:	f8dd 8000 	ldr.w	r8, [sp]
 802179e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80217a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80217a6:	ee15 3a10 	vmov	r3, s10
 80217aa:	3330      	adds	r3, #48	; 0x30
 80217ac:	f808 3b01 	strb.w	r3, [r8], #1
 80217b0:	9b00      	ldr	r3, [sp, #0]
 80217b2:	eba8 0303 	sub.w	r3, r8, r3
 80217b6:	4599      	cmp	r9, r3
 80217b8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80217bc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80217c0:	d133      	bne.n	802182a <_dtoa_r+0x62a>
 80217c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80217c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80217ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217ce:	dc1a      	bgt.n	8021806 <_dtoa_r+0x606>
 80217d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80217d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217d8:	d103      	bne.n	80217e2 <_dtoa_r+0x5e2>
 80217da:	ee15 3a10 	vmov	r3, s10
 80217de:	07d9      	lsls	r1, r3, #31
 80217e0:	d411      	bmi.n	8021806 <_dtoa_r+0x606>
 80217e2:	4629      	mov	r1, r5
 80217e4:	4630      	mov	r0, r6
 80217e6:	f001 f895 	bl	8022914 <_Bfree>
 80217ea:	2300      	movs	r3, #0
 80217ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217ee:	f888 3000 	strb.w	r3, [r8]
 80217f2:	f10b 0301 	add.w	r3, fp, #1
 80217f6:	6013      	str	r3, [r2, #0]
 80217f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	f43f ad4d 	beq.w	802129a <_dtoa_r+0x9a>
 8021800:	f8c3 8000 	str.w	r8, [r3]
 8021804:	e549      	b.n	802129a <_dtoa_r+0x9a>
 8021806:	465f      	mov	r7, fp
 8021808:	4643      	mov	r3, r8
 802180a:	4698      	mov	r8, r3
 802180c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021810:	2a39      	cmp	r2, #57	; 0x39
 8021812:	d106      	bne.n	8021822 <_dtoa_r+0x622>
 8021814:	9a00      	ldr	r2, [sp, #0]
 8021816:	429a      	cmp	r2, r3
 8021818:	d1f7      	bne.n	802180a <_dtoa_r+0x60a>
 802181a:	9900      	ldr	r1, [sp, #0]
 802181c:	2230      	movs	r2, #48	; 0x30
 802181e:	3701      	adds	r7, #1
 8021820:	700a      	strb	r2, [r1, #0]
 8021822:	781a      	ldrb	r2, [r3, #0]
 8021824:	3201      	adds	r2, #1
 8021826:	701a      	strb	r2, [r3, #0]
 8021828:	e7ae      	b.n	8021788 <_dtoa_r+0x588>
 802182a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802182e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021836:	d1b2      	bne.n	802179e <_dtoa_r+0x59e>
 8021838:	e7d3      	b.n	80217e2 <_dtoa_r+0x5e2>
 802183a:	bf00      	nop
 802183c:	08028760 	.word	0x08028760
 8021840:	08028738 	.word	0x08028738
 8021844:	9908      	ldr	r1, [sp, #32]
 8021846:	2900      	cmp	r1, #0
 8021848:	f000 80d1 	beq.w	80219ee <_dtoa_r+0x7ee>
 802184c:	9907      	ldr	r1, [sp, #28]
 802184e:	2901      	cmp	r1, #1
 8021850:	f300 80b4 	bgt.w	80219bc <_dtoa_r+0x7bc>
 8021854:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021856:	2900      	cmp	r1, #0
 8021858:	f000 80ac 	beq.w	80219b4 <_dtoa_r+0x7b4>
 802185c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8021860:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8021864:	461c      	mov	r4, r3
 8021866:	930a      	str	r3, [sp, #40]	; 0x28
 8021868:	9b05      	ldr	r3, [sp, #20]
 802186a:	4413      	add	r3, r2
 802186c:	9305      	str	r3, [sp, #20]
 802186e:	9b06      	ldr	r3, [sp, #24]
 8021870:	2101      	movs	r1, #1
 8021872:	4413      	add	r3, r2
 8021874:	4630      	mov	r0, r6
 8021876:	9306      	str	r3, [sp, #24]
 8021878:	f001 f952 	bl	8022b20 <__i2b>
 802187c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802187e:	4607      	mov	r7, r0
 8021880:	f1b8 0f00 	cmp.w	r8, #0
 8021884:	dd0d      	ble.n	80218a2 <_dtoa_r+0x6a2>
 8021886:	9a06      	ldr	r2, [sp, #24]
 8021888:	2a00      	cmp	r2, #0
 802188a:	dd0a      	ble.n	80218a2 <_dtoa_r+0x6a2>
 802188c:	4542      	cmp	r2, r8
 802188e:	9905      	ldr	r1, [sp, #20]
 8021890:	bfa8      	it	ge
 8021892:	4642      	movge	r2, r8
 8021894:	1a89      	subs	r1, r1, r2
 8021896:	9105      	str	r1, [sp, #20]
 8021898:	9906      	ldr	r1, [sp, #24]
 802189a:	eba8 0802 	sub.w	r8, r8, r2
 802189e:	1a8a      	subs	r2, r1, r2
 80218a0:	9206      	str	r2, [sp, #24]
 80218a2:	b303      	cbz	r3, 80218e6 <_dtoa_r+0x6e6>
 80218a4:	9a08      	ldr	r2, [sp, #32]
 80218a6:	2a00      	cmp	r2, #0
 80218a8:	f000 80a6 	beq.w	80219f8 <_dtoa_r+0x7f8>
 80218ac:	2c00      	cmp	r4, #0
 80218ae:	dd13      	ble.n	80218d8 <_dtoa_r+0x6d8>
 80218b0:	4639      	mov	r1, r7
 80218b2:	4622      	mov	r2, r4
 80218b4:	4630      	mov	r0, r6
 80218b6:	930c      	str	r3, [sp, #48]	; 0x30
 80218b8:	f001 f9ee 	bl	8022c98 <__pow5mult>
 80218bc:	462a      	mov	r2, r5
 80218be:	4601      	mov	r1, r0
 80218c0:	4607      	mov	r7, r0
 80218c2:	4630      	mov	r0, r6
 80218c4:	f001 f942 	bl	8022b4c <__multiply>
 80218c8:	4629      	mov	r1, r5
 80218ca:	900a      	str	r0, [sp, #40]	; 0x28
 80218cc:	4630      	mov	r0, r6
 80218ce:	f001 f821 	bl	8022914 <_Bfree>
 80218d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80218d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218d6:	4615      	mov	r5, r2
 80218d8:	1b1a      	subs	r2, r3, r4
 80218da:	d004      	beq.n	80218e6 <_dtoa_r+0x6e6>
 80218dc:	4629      	mov	r1, r5
 80218de:	4630      	mov	r0, r6
 80218e0:	f001 f9da 	bl	8022c98 <__pow5mult>
 80218e4:	4605      	mov	r5, r0
 80218e6:	2101      	movs	r1, #1
 80218e8:	4630      	mov	r0, r6
 80218ea:	f001 f919 	bl	8022b20 <__i2b>
 80218ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218f0:	2b00      	cmp	r3, #0
 80218f2:	4604      	mov	r4, r0
 80218f4:	f340 8082 	ble.w	80219fc <_dtoa_r+0x7fc>
 80218f8:	461a      	mov	r2, r3
 80218fa:	4601      	mov	r1, r0
 80218fc:	4630      	mov	r0, r6
 80218fe:	f001 f9cb 	bl	8022c98 <__pow5mult>
 8021902:	9b07      	ldr	r3, [sp, #28]
 8021904:	2b01      	cmp	r3, #1
 8021906:	4604      	mov	r4, r0
 8021908:	dd7b      	ble.n	8021a02 <_dtoa_r+0x802>
 802190a:	2300      	movs	r3, #0
 802190c:	930a      	str	r3, [sp, #40]	; 0x28
 802190e:	6922      	ldr	r2, [r4, #16]
 8021910:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021914:	6910      	ldr	r0, [r2, #16]
 8021916:	f001 f8b3 	bl	8022a80 <__hi0bits>
 802191a:	f1c0 0020 	rsb	r0, r0, #32
 802191e:	9b06      	ldr	r3, [sp, #24]
 8021920:	4418      	add	r0, r3
 8021922:	f010 001f 	ands.w	r0, r0, #31
 8021926:	f000 808d 	beq.w	8021a44 <_dtoa_r+0x844>
 802192a:	f1c0 0220 	rsb	r2, r0, #32
 802192e:	2a04      	cmp	r2, #4
 8021930:	f340 8086 	ble.w	8021a40 <_dtoa_r+0x840>
 8021934:	f1c0 001c 	rsb	r0, r0, #28
 8021938:	9b05      	ldr	r3, [sp, #20]
 802193a:	4403      	add	r3, r0
 802193c:	9305      	str	r3, [sp, #20]
 802193e:	9b06      	ldr	r3, [sp, #24]
 8021940:	4403      	add	r3, r0
 8021942:	4480      	add	r8, r0
 8021944:	9306      	str	r3, [sp, #24]
 8021946:	9b05      	ldr	r3, [sp, #20]
 8021948:	2b00      	cmp	r3, #0
 802194a:	dd05      	ble.n	8021958 <_dtoa_r+0x758>
 802194c:	4629      	mov	r1, r5
 802194e:	461a      	mov	r2, r3
 8021950:	4630      	mov	r0, r6
 8021952:	f001 f9fb 	bl	8022d4c <__lshift>
 8021956:	4605      	mov	r5, r0
 8021958:	9b06      	ldr	r3, [sp, #24]
 802195a:	2b00      	cmp	r3, #0
 802195c:	dd05      	ble.n	802196a <_dtoa_r+0x76a>
 802195e:	4621      	mov	r1, r4
 8021960:	461a      	mov	r2, r3
 8021962:	4630      	mov	r0, r6
 8021964:	f001 f9f2 	bl	8022d4c <__lshift>
 8021968:	4604      	mov	r4, r0
 802196a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802196c:	2b00      	cmp	r3, #0
 802196e:	d06b      	beq.n	8021a48 <_dtoa_r+0x848>
 8021970:	4621      	mov	r1, r4
 8021972:	4628      	mov	r0, r5
 8021974:	f001 fa56 	bl	8022e24 <__mcmp>
 8021978:	2800      	cmp	r0, #0
 802197a:	da65      	bge.n	8021a48 <_dtoa_r+0x848>
 802197c:	2300      	movs	r3, #0
 802197e:	4629      	mov	r1, r5
 8021980:	220a      	movs	r2, #10
 8021982:	4630      	mov	r0, r6
 8021984:	f000 ffe8 	bl	8022958 <__multadd>
 8021988:	9b08      	ldr	r3, [sp, #32]
 802198a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802198e:	4605      	mov	r5, r0
 8021990:	2b00      	cmp	r3, #0
 8021992:	f000 8192 	beq.w	8021cba <_dtoa_r+0xaba>
 8021996:	4639      	mov	r1, r7
 8021998:	2300      	movs	r3, #0
 802199a:	220a      	movs	r2, #10
 802199c:	4630      	mov	r0, r6
 802199e:	f000 ffdb 	bl	8022958 <__multadd>
 80219a2:	f1ba 0f00 	cmp.w	sl, #0
 80219a6:	4607      	mov	r7, r0
 80219a8:	f300 808e 	bgt.w	8021ac8 <_dtoa_r+0x8c8>
 80219ac:	9b07      	ldr	r3, [sp, #28]
 80219ae:	2b02      	cmp	r3, #2
 80219b0:	dc51      	bgt.n	8021a56 <_dtoa_r+0x856>
 80219b2:	e089      	b.n	8021ac8 <_dtoa_r+0x8c8>
 80219b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80219b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80219ba:	e751      	b.n	8021860 <_dtoa_r+0x660>
 80219bc:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80219c0:	42a3      	cmp	r3, r4
 80219c2:	bfbf      	itttt	lt
 80219c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80219c6:	1ae3      	sublt	r3, r4, r3
 80219c8:	18d2      	addlt	r2, r2, r3
 80219ca:	4613      	movlt	r3, r2
 80219cc:	bfb7      	itett	lt
 80219ce:	930e      	strlt	r3, [sp, #56]	; 0x38
 80219d0:	1b1c      	subge	r4, r3, r4
 80219d2:	4623      	movlt	r3, r4
 80219d4:	2400      	movlt	r4, #0
 80219d6:	f1b9 0f00 	cmp.w	r9, #0
 80219da:	bfb5      	itete	lt
 80219dc:	9a05      	ldrlt	r2, [sp, #20]
 80219de:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80219e2:	eba2 0809 	sublt.w	r8, r2, r9
 80219e6:	464a      	movge	r2, r9
 80219e8:	bfb8      	it	lt
 80219ea:	2200      	movlt	r2, #0
 80219ec:	e73b      	b.n	8021866 <_dtoa_r+0x666>
 80219ee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80219f2:	9f08      	ldr	r7, [sp, #32]
 80219f4:	461c      	mov	r4, r3
 80219f6:	e743      	b.n	8021880 <_dtoa_r+0x680>
 80219f8:	461a      	mov	r2, r3
 80219fa:	e76f      	b.n	80218dc <_dtoa_r+0x6dc>
 80219fc:	9b07      	ldr	r3, [sp, #28]
 80219fe:	2b01      	cmp	r3, #1
 8021a00:	dc18      	bgt.n	8021a34 <_dtoa_r+0x834>
 8021a02:	9b02      	ldr	r3, [sp, #8]
 8021a04:	b9b3      	cbnz	r3, 8021a34 <_dtoa_r+0x834>
 8021a06:	9b03      	ldr	r3, [sp, #12]
 8021a08:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8021a0c:	b9a2      	cbnz	r2, 8021a38 <_dtoa_r+0x838>
 8021a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8021a12:	0d12      	lsrs	r2, r2, #20
 8021a14:	0512      	lsls	r2, r2, #20
 8021a16:	b18a      	cbz	r2, 8021a3c <_dtoa_r+0x83c>
 8021a18:	9b05      	ldr	r3, [sp, #20]
 8021a1a:	3301      	adds	r3, #1
 8021a1c:	9305      	str	r3, [sp, #20]
 8021a1e:	9b06      	ldr	r3, [sp, #24]
 8021a20:	3301      	adds	r3, #1
 8021a22:	9306      	str	r3, [sp, #24]
 8021a24:	2301      	movs	r3, #1
 8021a26:	930a      	str	r3, [sp, #40]	; 0x28
 8021a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	f47f af6f 	bne.w	802190e <_dtoa_r+0x70e>
 8021a30:	2001      	movs	r0, #1
 8021a32:	e774      	b.n	802191e <_dtoa_r+0x71e>
 8021a34:	2300      	movs	r3, #0
 8021a36:	e7f6      	b.n	8021a26 <_dtoa_r+0x826>
 8021a38:	9b02      	ldr	r3, [sp, #8]
 8021a3a:	e7f4      	b.n	8021a26 <_dtoa_r+0x826>
 8021a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8021a3e:	e7f3      	b.n	8021a28 <_dtoa_r+0x828>
 8021a40:	d081      	beq.n	8021946 <_dtoa_r+0x746>
 8021a42:	4610      	mov	r0, r2
 8021a44:	301c      	adds	r0, #28
 8021a46:	e777      	b.n	8021938 <_dtoa_r+0x738>
 8021a48:	f1b9 0f00 	cmp.w	r9, #0
 8021a4c:	dc37      	bgt.n	8021abe <_dtoa_r+0x8be>
 8021a4e:	9b07      	ldr	r3, [sp, #28]
 8021a50:	2b02      	cmp	r3, #2
 8021a52:	dd34      	ble.n	8021abe <_dtoa_r+0x8be>
 8021a54:	46ca      	mov	sl, r9
 8021a56:	f1ba 0f00 	cmp.w	sl, #0
 8021a5a:	d10d      	bne.n	8021a78 <_dtoa_r+0x878>
 8021a5c:	4621      	mov	r1, r4
 8021a5e:	4653      	mov	r3, sl
 8021a60:	2205      	movs	r2, #5
 8021a62:	4630      	mov	r0, r6
 8021a64:	f000 ff78 	bl	8022958 <__multadd>
 8021a68:	4601      	mov	r1, r0
 8021a6a:	4604      	mov	r4, r0
 8021a6c:	4628      	mov	r0, r5
 8021a6e:	f001 f9d9 	bl	8022e24 <__mcmp>
 8021a72:	2800      	cmp	r0, #0
 8021a74:	f73f adde 	bgt.w	8021634 <_dtoa_r+0x434>
 8021a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a7a:	f8dd 8000 	ldr.w	r8, [sp]
 8021a7e:	ea6f 0b03 	mvn.w	fp, r3
 8021a82:	f04f 0900 	mov.w	r9, #0
 8021a86:	4621      	mov	r1, r4
 8021a88:	4630      	mov	r0, r6
 8021a8a:	f000 ff43 	bl	8022914 <_Bfree>
 8021a8e:	2f00      	cmp	r7, #0
 8021a90:	f43f aea7 	beq.w	80217e2 <_dtoa_r+0x5e2>
 8021a94:	f1b9 0f00 	cmp.w	r9, #0
 8021a98:	d005      	beq.n	8021aa6 <_dtoa_r+0x8a6>
 8021a9a:	45b9      	cmp	r9, r7
 8021a9c:	d003      	beq.n	8021aa6 <_dtoa_r+0x8a6>
 8021a9e:	4649      	mov	r1, r9
 8021aa0:	4630      	mov	r0, r6
 8021aa2:	f000 ff37 	bl	8022914 <_Bfree>
 8021aa6:	4639      	mov	r1, r7
 8021aa8:	4630      	mov	r0, r6
 8021aaa:	f000 ff33 	bl	8022914 <_Bfree>
 8021aae:	e698      	b.n	80217e2 <_dtoa_r+0x5e2>
 8021ab0:	2400      	movs	r4, #0
 8021ab2:	4627      	mov	r7, r4
 8021ab4:	e7e0      	b.n	8021a78 <_dtoa_r+0x878>
 8021ab6:	46bb      	mov	fp, r7
 8021ab8:	4604      	mov	r4, r0
 8021aba:	4607      	mov	r7, r0
 8021abc:	e5ba      	b.n	8021634 <_dtoa_r+0x434>
 8021abe:	9b08      	ldr	r3, [sp, #32]
 8021ac0:	46ca      	mov	sl, r9
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	f000 8100 	beq.w	8021cc8 <_dtoa_r+0xac8>
 8021ac8:	f1b8 0f00 	cmp.w	r8, #0
 8021acc:	dd05      	ble.n	8021ada <_dtoa_r+0x8da>
 8021ace:	4639      	mov	r1, r7
 8021ad0:	4642      	mov	r2, r8
 8021ad2:	4630      	mov	r0, r6
 8021ad4:	f001 f93a 	bl	8022d4c <__lshift>
 8021ad8:	4607      	mov	r7, r0
 8021ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d05d      	beq.n	8021b9c <_dtoa_r+0x99c>
 8021ae0:	6879      	ldr	r1, [r7, #4]
 8021ae2:	4630      	mov	r0, r6
 8021ae4:	f000 fed6 	bl	8022894 <_Balloc>
 8021ae8:	4680      	mov	r8, r0
 8021aea:	b928      	cbnz	r0, 8021af8 <_dtoa_r+0x8f8>
 8021aec:	4b82      	ldr	r3, [pc, #520]	; (8021cf8 <_dtoa_r+0xaf8>)
 8021aee:	4602      	mov	r2, r0
 8021af0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8021af4:	f7ff bb9a 	b.w	802122c <_dtoa_r+0x2c>
 8021af8:	693a      	ldr	r2, [r7, #16]
 8021afa:	3202      	adds	r2, #2
 8021afc:	0092      	lsls	r2, r2, #2
 8021afe:	f107 010c 	add.w	r1, r7, #12
 8021b02:	300c      	adds	r0, #12
 8021b04:	f7fd fb5c 	bl	801f1c0 <memcpy>
 8021b08:	2201      	movs	r2, #1
 8021b0a:	4641      	mov	r1, r8
 8021b0c:	4630      	mov	r0, r6
 8021b0e:	f001 f91d 	bl	8022d4c <__lshift>
 8021b12:	9b00      	ldr	r3, [sp, #0]
 8021b14:	3301      	adds	r3, #1
 8021b16:	9305      	str	r3, [sp, #20]
 8021b18:	9b00      	ldr	r3, [sp, #0]
 8021b1a:	4453      	add	r3, sl
 8021b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8021b1e:	9b02      	ldr	r3, [sp, #8]
 8021b20:	f003 0301 	and.w	r3, r3, #1
 8021b24:	46b9      	mov	r9, r7
 8021b26:	9308      	str	r3, [sp, #32]
 8021b28:	4607      	mov	r7, r0
 8021b2a:	9b05      	ldr	r3, [sp, #20]
 8021b2c:	4621      	mov	r1, r4
 8021b2e:	3b01      	subs	r3, #1
 8021b30:	4628      	mov	r0, r5
 8021b32:	9302      	str	r3, [sp, #8]
 8021b34:	f7ff fad8 	bl	80210e8 <quorem>
 8021b38:	4603      	mov	r3, r0
 8021b3a:	3330      	adds	r3, #48	; 0x30
 8021b3c:	9006      	str	r0, [sp, #24]
 8021b3e:	4649      	mov	r1, r9
 8021b40:	4628      	mov	r0, r5
 8021b42:	930a      	str	r3, [sp, #40]	; 0x28
 8021b44:	f001 f96e 	bl	8022e24 <__mcmp>
 8021b48:	463a      	mov	r2, r7
 8021b4a:	4682      	mov	sl, r0
 8021b4c:	4621      	mov	r1, r4
 8021b4e:	4630      	mov	r0, r6
 8021b50:	f001 f984 	bl	8022e5c <__mdiff>
 8021b54:	68c2      	ldr	r2, [r0, #12]
 8021b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b58:	4680      	mov	r8, r0
 8021b5a:	bb0a      	cbnz	r2, 8021ba0 <_dtoa_r+0x9a0>
 8021b5c:	4601      	mov	r1, r0
 8021b5e:	4628      	mov	r0, r5
 8021b60:	f001 f960 	bl	8022e24 <__mcmp>
 8021b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b66:	4602      	mov	r2, r0
 8021b68:	4641      	mov	r1, r8
 8021b6a:	4630      	mov	r0, r6
 8021b6c:	920e      	str	r2, [sp, #56]	; 0x38
 8021b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8021b70:	f000 fed0 	bl	8022914 <_Bfree>
 8021b74:	9b07      	ldr	r3, [sp, #28]
 8021b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021b78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8021b7c:	ea43 0102 	orr.w	r1, r3, r2
 8021b80:	9b08      	ldr	r3, [sp, #32]
 8021b82:	430b      	orrs	r3, r1
 8021b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b86:	d10d      	bne.n	8021ba4 <_dtoa_r+0x9a4>
 8021b88:	2b39      	cmp	r3, #57	; 0x39
 8021b8a:	d029      	beq.n	8021be0 <_dtoa_r+0x9e0>
 8021b8c:	f1ba 0f00 	cmp.w	sl, #0
 8021b90:	dd01      	ble.n	8021b96 <_dtoa_r+0x996>
 8021b92:	9b06      	ldr	r3, [sp, #24]
 8021b94:	3331      	adds	r3, #49	; 0x31
 8021b96:	9a02      	ldr	r2, [sp, #8]
 8021b98:	7013      	strb	r3, [r2, #0]
 8021b9a:	e774      	b.n	8021a86 <_dtoa_r+0x886>
 8021b9c:	4638      	mov	r0, r7
 8021b9e:	e7b8      	b.n	8021b12 <_dtoa_r+0x912>
 8021ba0:	2201      	movs	r2, #1
 8021ba2:	e7e1      	b.n	8021b68 <_dtoa_r+0x968>
 8021ba4:	f1ba 0f00 	cmp.w	sl, #0
 8021ba8:	db06      	blt.n	8021bb8 <_dtoa_r+0x9b8>
 8021baa:	9907      	ldr	r1, [sp, #28]
 8021bac:	ea41 0a0a 	orr.w	sl, r1, sl
 8021bb0:	9908      	ldr	r1, [sp, #32]
 8021bb2:	ea5a 0101 	orrs.w	r1, sl, r1
 8021bb6:	d120      	bne.n	8021bfa <_dtoa_r+0x9fa>
 8021bb8:	2a00      	cmp	r2, #0
 8021bba:	ddec      	ble.n	8021b96 <_dtoa_r+0x996>
 8021bbc:	4629      	mov	r1, r5
 8021bbe:	2201      	movs	r2, #1
 8021bc0:	4630      	mov	r0, r6
 8021bc2:	9305      	str	r3, [sp, #20]
 8021bc4:	f001 f8c2 	bl	8022d4c <__lshift>
 8021bc8:	4621      	mov	r1, r4
 8021bca:	4605      	mov	r5, r0
 8021bcc:	f001 f92a 	bl	8022e24 <__mcmp>
 8021bd0:	2800      	cmp	r0, #0
 8021bd2:	9b05      	ldr	r3, [sp, #20]
 8021bd4:	dc02      	bgt.n	8021bdc <_dtoa_r+0x9dc>
 8021bd6:	d1de      	bne.n	8021b96 <_dtoa_r+0x996>
 8021bd8:	07da      	lsls	r2, r3, #31
 8021bda:	d5dc      	bpl.n	8021b96 <_dtoa_r+0x996>
 8021bdc:	2b39      	cmp	r3, #57	; 0x39
 8021bde:	d1d8      	bne.n	8021b92 <_dtoa_r+0x992>
 8021be0:	9a02      	ldr	r2, [sp, #8]
 8021be2:	2339      	movs	r3, #57	; 0x39
 8021be4:	7013      	strb	r3, [r2, #0]
 8021be6:	4643      	mov	r3, r8
 8021be8:	4698      	mov	r8, r3
 8021bea:	3b01      	subs	r3, #1
 8021bec:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8021bf0:	2a39      	cmp	r2, #57	; 0x39
 8021bf2:	d051      	beq.n	8021c98 <_dtoa_r+0xa98>
 8021bf4:	3201      	adds	r2, #1
 8021bf6:	701a      	strb	r2, [r3, #0]
 8021bf8:	e745      	b.n	8021a86 <_dtoa_r+0x886>
 8021bfa:	2a00      	cmp	r2, #0
 8021bfc:	dd03      	ble.n	8021c06 <_dtoa_r+0xa06>
 8021bfe:	2b39      	cmp	r3, #57	; 0x39
 8021c00:	d0ee      	beq.n	8021be0 <_dtoa_r+0x9e0>
 8021c02:	3301      	adds	r3, #1
 8021c04:	e7c7      	b.n	8021b96 <_dtoa_r+0x996>
 8021c06:	9a05      	ldr	r2, [sp, #20]
 8021c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021c0a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021c0e:	428a      	cmp	r2, r1
 8021c10:	d02b      	beq.n	8021c6a <_dtoa_r+0xa6a>
 8021c12:	4629      	mov	r1, r5
 8021c14:	2300      	movs	r3, #0
 8021c16:	220a      	movs	r2, #10
 8021c18:	4630      	mov	r0, r6
 8021c1a:	f000 fe9d 	bl	8022958 <__multadd>
 8021c1e:	45b9      	cmp	r9, r7
 8021c20:	4605      	mov	r5, r0
 8021c22:	f04f 0300 	mov.w	r3, #0
 8021c26:	f04f 020a 	mov.w	r2, #10
 8021c2a:	4649      	mov	r1, r9
 8021c2c:	4630      	mov	r0, r6
 8021c2e:	d107      	bne.n	8021c40 <_dtoa_r+0xa40>
 8021c30:	f000 fe92 	bl	8022958 <__multadd>
 8021c34:	4681      	mov	r9, r0
 8021c36:	4607      	mov	r7, r0
 8021c38:	9b05      	ldr	r3, [sp, #20]
 8021c3a:	3301      	adds	r3, #1
 8021c3c:	9305      	str	r3, [sp, #20]
 8021c3e:	e774      	b.n	8021b2a <_dtoa_r+0x92a>
 8021c40:	f000 fe8a 	bl	8022958 <__multadd>
 8021c44:	4639      	mov	r1, r7
 8021c46:	4681      	mov	r9, r0
 8021c48:	2300      	movs	r3, #0
 8021c4a:	220a      	movs	r2, #10
 8021c4c:	4630      	mov	r0, r6
 8021c4e:	f000 fe83 	bl	8022958 <__multadd>
 8021c52:	4607      	mov	r7, r0
 8021c54:	e7f0      	b.n	8021c38 <_dtoa_r+0xa38>
 8021c56:	f1ba 0f00 	cmp.w	sl, #0
 8021c5a:	9a00      	ldr	r2, [sp, #0]
 8021c5c:	bfcc      	ite	gt
 8021c5e:	46d0      	movgt	r8, sl
 8021c60:	f04f 0801 	movle.w	r8, #1
 8021c64:	4490      	add	r8, r2
 8021c66:	f04f 0900 	mov.w	r9, #0
 8021c6a:	4629      	mov	r1, r5
 8021c6c:	2201      	movs	r2, #1
 8021c6e:	4630      	mov	r0, r6
 8021c70:	9302      	str	r3, [sp, #8]
 8021c72:	f001 f86b 	bl	8022d4c <__lshift>
 8021c76:	4621      	mov	r1, r4
 8021c78:	4605      	mov	r5, r0
 8021c7a:	f001 f8d3 	bl	8022e24 <__mcmp>
 8021c7e:	2800      	cmp	r0, #0
 8021c80:	dcb1      	bgt.n	8021be6 <_dtoa_r+0x9e6>
 8021c82:	d102      	bne.n	8021c8a <_dtoa_r+0xa8a>
 8021c84:	9b02      	ldr	r3, [sp, #8]
 8021c86:	07db      	lsls	r3, r3, #31
 8021c88:	d4ad      	bmi.n	8021be6 <_dtoa_r+0x9e6>
 8021c8a:	4643      	mov	r3, r8
 8021c8c:	4698      	mov	r8, r3
 8021c8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021c92:	2a30      	cmp	r2, #48	; 0x30
 8021c94:	d0fa      	beq.n	8021c8c <_dtoa_r+0xa8c>
 8021c96:	e6f6      	b.n	8021a86 <_dtoa_r+0x886>
 8021c98:	9a00      	ldr	r2, [sp, #0]
 8021c9a:	429a      	cmp	r2, r3
 8021c9c:	d1a4      	bne.n	8021be8 <_dtoa_r+0x9e8>
 8021c9e:	f10b 0b01 	add.w	fp, fp, #1
 8021ca2:	2331      	movs	r3, #49	; 0x31
 8021ca4:	e778      	b.n	8021b98 <_dtoa_r+0x998>
 8021ca6:	4b15      	ldr	r3, [pc, #84]	; (8021cfc <_dtoa_r+0xafc>)
 8021ca8:	f7ff bb12 	b.w	80212d0 <_dtoa_r+0xd0>
 8021cac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	f47f aaee 	bne.w	8021290 <_dtoa_r+0x90>
 8021cb4:	4b12      	ldr	r3, [pc, #72]	; (8021d00 <_dtoa_r+0xb00>)
 8021cb6:	f7ff bb0b 	b.w	80212d0 <_dtoa_r+0xd0>
 8021cba:	f1ba 0f00 	cmp.w	sl, #0
 8021cbe:	dc03      	bgt.n	8021cc8 <_dtoa_r+0xac8>
 8021cc0:	9b07      	ldr	r3, [sp, #28]
 8021cc2:	2b02      	cmp	r3, #2
 8021cc4:	f73f aec7 	bgt.w	8021a56 <_dtoa_r+0x856>
 8021cc8:	f8dd 8000 	ldr.w	r8, [sp]
 8021ccc:	4621      	mov	r1, r4
 8021cce:	4628      	mov	r0, r5
 8021cd0:	f7ff fa0a 	bl	80210e8 <quorem>
 8021cd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021cd8:	f808 3b01 	strb.w	r3, [r8], #1
 8021cdc:	9a00      	ldr	r2, [sp, #0]
 8021cde:	eba8 0202 	sub.w	r2, r8, r2
 8021ce2:	4592      	cmp	sl, r2
 8021ce4:	ddb7      	ble.n	8021c56 <_dtoa_r+0xa56>
 8021ce6:	4629      	mov	r1, r5
 8021ce8:	2300      	movs	r3, #0
 8021cea:	220a      	movs	r2, #10
 8021cec:	4630      	mov	r0, r6
 8021cee:	f000 fe33 	bl	8022958 <__multadd>
 8021cf2:	4605      	mov	r5, r0
 8021cf4:	e7ea      	b.n	8021ccc <_dtoa_r+0xacc>
 8021cf6:	bf00      	nop
 8021cf8:	080285e0 	.word	0x080285e0
 8021cfc:	08028444 	.word	0x08028444
 8021d00:	08028574 	.word	0x08028574

08021d04 <__errno>:
 8021d04:	4b01      	ldr	r3, [pc, #4]	; (8021d0c <__errno+0x8>)
 8021d06:	6818      	ldr	r0, [r3, #0]
 8021d08:	4770      	bx	lr
 8021d0a:	bf00      	nop
 8021d0c:	24003444 	.word	0x24003444

08021d10 <__sflush_r>:
 8021d10:	898a      	ldrh	r2, [r1, #12]
 8021d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d16:	4605      	mov	r5, r0
 8021d18:	0710      	lsls	r0, r2, #28
 8021d1a:	460c      	mov	r4, r1
 8021d1c:	d458      	bmi.n	8021dd0 <__sflush_r+0xc0>
 8021d1e:	684b      	ldr	r3, [r1, #4]
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	dc05      	bgt.n	8021d30 <__sflush_r+0x20>
 8021d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	dc02      	bgt.n	8021d30 <__sflush_r+0x20>
 8021d2a:	2000      	movs	r0, #0
 8021d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021d32:	2e00      	cmp	r6, #0
 8021d34:	d0f9      	beq.n	8021d2a <__sflush_r+0x1a>
 8021d36:	2300      	movs	r3, #0
 8021d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021d3c:	682f      	ldr	r7, [r5, #0]
 8021d3e:	602b      	str	r3, [r5, #0]
 8021d40:	d032      	beq.n	8021da8 <__sflush_r+0x98>
 8021d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021d44:	89a3      	ldrh	r3, [r4, #12]
 8021d46:	075a      	lsls	r2, r3, #29
 8021d48:	d505      	bpl.n	8021d56 <__sflush_r+0x46>
 8021d4a:	6863      	ldr	r3, [r4, #4]
 8021d4c:	1ac0      	subs	r0, r0, r3
 8021d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021d50:	b10b      	cbz	r3, 8021d56 <__sflush_r+0x46>
 8021d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021d54:	1ac0      	subs	r0, r0, r3
 8021d56:	2300      	movs	r3, #0
 8021d58:	4602      	mov	r2, r0
 8021d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021d5c:	6a21      	ldr	r1, [r4, #32]
 8021d5e:	4628      	mov	r0, r5
 8021d60:	47b0      	blx	r6
 8021d62:	1c43      	adds	r3, r0, #1
 8021d64:	89a3      	ldrh	r3, [r4, #12]
 8021d66:	d106      	bne.n	8021d76 <__sflush_r+0x66>
 8021d68:	6829      	ldr	r1, [r5, #0]
 8021d6a:	291d      	cmp	r1, #29
 8021d6c:	d82c      	bhi.n	8021dc8 <__sflush_r+0xb8>
 8021d6e:	4a2a      	ldr	r2, [pc, #168]	; (8021e18 <__sflush_r+0x108>)
 8021d70:	40ca      	lsrs	r2, r1
 8021d72:	07d6      	lsls	r6, r2, #31
 8021d74:	d528      	bpl.n	8021dc8 <__sflush_r+0xb8>
 8021d76:	2200      	movs	r2, #0
 8021d78:	6062      	str	r2, [r4, #4]
 8021d7a:	04d9      	lsls	r1, r3, #19
 8021d7c:	6922      	ldr	r2, [r4, #16]
 8021d7e:	6022      	str	r2, [r4, #0]
 8021d80:	d504      	bpl.n	8021d8c <__sflush_r+0x7c>
 8021d82:	1c42      	adds	r2, r0, #1
 8021d84:	d101      	bne.n	8021d8a <__sflush_r+0x7a>
 8021d86:	682b      	ldr	r3, [r5, #0]
 8021d88:	b903      	cbnz	r3, 8021d8c <__sflush_r+0x7c>
 8021d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8021d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021d8e:	602f      	str	r7, [r5, #0]
 8021d90:	2900      	cmp	r1, #0
 8021d92:	d0ca      	beq.n	8021d2a <__sflush_r+0x1a>
 8021d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021d98:	4299      	cmp	r1, r3
 8021d9a:	d002      	beq.n	8021da2 <__sflush_r+0x92>
 8021d9c:	4628      	mov	r0, r5
 8021d9e:	f7fd fa3f 	bl	801f220 <_free_r>
 8021da2:	2000      	movs	r0, #0
 8021da4:	6360      	str	r0, [r4, #52]	; 0x34
 8021da6:	e7c1      	b.n	8021d2c <__sflush_r+0x1c>
 8021da8:	6a21      	ldr	r1, [r4, #32]
 8021daa:	2301      	movs	r3, #1
 8021dac:	4628      	mov	r0, r5
 8021dae:	47b0      	blx	r6
 8021db0:	1c41      	adds	r1, r0, #1
 8021db2:	d1c7      	bne.n	8021d44 <__sflush_r+0x34>
 8021db4:	682b      	ldr	r3, [r5, #0]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d0c4      	beq.n	8021d44 <__sflush_r+0x34>
 8021dba:	2b1d      	cmp	r3, #29
 8021dbc:	d001      	beq.n	8021dc2 <__sflush_r+0xb2>
 8021dbe:	2b16      	cmp	r3, #22
 8021dc0:	d101      	bne.n	8021dc6 <__sflush_r+0xb6>
 8021dc2:	602f      	str	r7, [r5, #0]
 8021dc4:	e7b1      	b.n	8021d2a <__sflush_r+0x1a>
 8021dc6:	89a3      	ldrh	r3, [r4, #12]
 8021dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021dcc:	81a3      	strh	r3, [r4, #12]
 8021dce:	e7ad      	b.n	8021d2c <__sflush_r+0x1c>
 8021dd0:	690f      	ldr	r7, [r1, #16]
 8021dd2:	2f00      	cmp	r7, #0
 8021dd4:	d0a9      	beq.n	8021d2a <__sflush_r+0x1a>
 8021dd6:	0793      	lsls	r3, r2, #30
 8021dd8:	680e      	ldr	r6, [r1, #0]
 8021dda:	bf08      	it	eq
 8021ddc:	694b      	ldreq	r3, [r1, #20]
 8021dde:	600f      	str	r7, [r1, #0]
 8021de0:	bf18      	it	ne
 8021de2:	2300      	movne	r3, #0
 8021de4:	eba6 0807 	sub.w	r8, r6, r7
 8021de8:	608b      	str	r3, [r1, #8]
 8021dea:	f1b8 0f00 	cmp.w	r8, #0
 8021dee:	dd9c      	ble.n	8021d2a <__sflush_r+0x1a>
 8021df0:	6a21      	ldr	r1, [r4, #32]
 8021df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021df4:	4643      	mov	r3, r8
 8021df6:	463a      	mov	r2, r7
 8021df8:	4628      	mov	r0, r5
 8021dfa:	47b0      	blx	r6
 8021dfc:	2800      	cmp	r0, #0
 8021dfe:	dc06      	bgt.n	8021e0e <__sflush_r+0xfe>
 8021e00:	89a3      	ldrh	r3, [r4, #12]
 8021e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021e06:	81a3      	strh	r3, [r4, #12]
 8021e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021e0c:	e78e      	b.n	8021d2c <__sflush_r+0x1c>
 8021e0e:	4407      	add	r7, r0
 8021e10:	eba8 0800 	sub.w	r8, r8, r0
 8021e14:	e7e9      	b.n	8021dea <__sflush_r+0xda>
 8021e16:	bf00      	nop
 8021e18:	20400001 	.word	0x20400001

08021e1c <_fflush_r>:
 8021e1c:	b538      	push	{r3, r4, r5, lr}
 8021e1e:	690b      	ldr	r3, [r1, #16]
 8021e20:	4605      	mov	r5, r0
 8021e22:	460c      	mov	r4, r1
 8021e24:	b913      	cbnz	r3, 8021e2c <_fflush_r+0x10>
 8021e26:	2500      	movs	r5, #0
 8021e28:	4628      	mov	r0, r5
 8021e2a:	bd38      	pop	{r3, r4, r5, pc}
 8021e2c:	b118      	cbz	r0, 8021e36 <_fflush_r+0x1a>
 8021e2e:	6983      	ldr	r3, [r0, #24]
 8021e30:	b90b      	cbnz	r3, 8021e36 <_fflush_r+0x1a>
 8021e32:	f000 f887 	bl	8021f44 <__sinit>
 8021e36:	4b14      	ldr	r3, [pc, #80]	; (8021e88 <_fflush_r+0x6c>)
 8021e38:	429c      	cmp	r4, r3
 8021e3a:	d11b      	bne.n	8021e74 <_fflush_r+0x58>
 8021e3c:	686c      	ldr	r4, [r5, #4]
 8021e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e42:	2b00      	cmp	r3, #0
 8021e44:	d0ef      	beq.n	8021e26 <_fflush_r+0xa>
 8021e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021e48:	07d0      	lsls	r0, r2, #31
 8021e4a:	d404      	bmi.n	8021e56 <_fflush_r+0x3a>
 8021e4c:	0599      	lsls	r1, r3, #22
 8021e4e:	d402      	bmi.n	8021e56 <_fflush_r+0x3a>
 8021e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021e52:	f000 fc9a 	bl	802278a <__retarget_lock_acquire_recursive>
 8021e56:	4628      	mov	r0, r5
 8021e58:	4621      	mov	r1, r4
 8021e5a:	f7ff ff59 	bl	8021d10 <__sflush_r>
 8021e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021e60:	07da      	lsls	r2, r3, #31
 8021e62:	4605      	mov	r5, r0
 8021e64:	d4e0      	bmi.n	8021e28 <_fflush_r+0xc>
 8021e66:	89a3      	ldrh	r3, [r4, #12]
 8021e68:	059b      	lsls	r3, r3, #22
 8021e6a:	d4dd      	bmi.n	8021e28 <_fflush_r+0xc>
 8021e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021e6e:	f000 fc8d 	bl	802278c <__retarget_lock_release_recursive>
 8021e72:	e7d9      	b.n	8021e28 <_fflush_r+0xc>
 8021e74:	4b05      	ldr	r3, [pc, #20]	; (8021e8c <_fflush_r+0x70>)
 8021e76:	429c      	cmp	r4, r3
 8021e78:	d101      	bne.n	8021e7e <_fflush_r+0x62>
 8021e7a:	68ac      	ldr	r4, [r5, #8]
 8021e7c:	e7df      	b.n	8021e3e <_fflush_r+0x22>
 8021e7e:	4b04      	ldr	r3, [pc, #16]	; (8021e90 <_fflush_r+0x74>)
 8021e80:	429c      	cmp	r4, r3
 8021e82:	bf08      	it	eq
 8021e84:	68ec      	ldreq	r4, [r5, #12]
 8021e86:	e7da      	b.n	8021e3e <_fflush_r+0x22>
 8021e88:	08028614 	.word	0x08028614
 8021e8c:	08028634 	.word	0x08028634
 8021e90:	080285f4 	.word	0x080285f4

08021e94 <std>:
 8021e94:	2300      	movs	r3, #0
 8021e96:	b510      	push	{r4, lr}
 8021e98:	4604      	mov	r4, r0
 8021e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8021e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021ea2:	6083      	str	r3, [r0, #8]
 8021ea4:	8181      	strh	r1, [r0, #12]
 8021ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8021ea8:	81c2      	strh	r2, [r0, #14]
 8021eaa:	6183      	str	r3, [r0, #24]
 8021eac:	4619      	mov	r1, r3
 8021eae:	2208      	movs	r2, #8
 8021eb0:	305c      	adds	r0, #92	; 0x5c
 8021eb2:	f7fd f9ad 	bl	801f210 <memset>
 8021eb6:	4b05      	ldr	r3, [pc, #20]	; (8021ecc <std+0x38>)
 8021eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8021eba:	4b05      	ldr	r3, [pc, #20]	; (8021ed0 <std+0x3c>)
 8021ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8021ebe:	4b05      	ldr	r3, [pc, #20]	; (8021ed4 <std+0x40>)
 8021ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021ec2:	4b05      	ldr	r3, [pc, #20]	; (8021ed8 <std+0x44>)
 8021ec4:	6224      	str	r4, [r4, #32]
 8021ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8021ec8:	bd10      	pop	{r4, pc}
 8021eca:	bf00      	nop
 8021ecc:	080237a9 	.word	0x080237a9
 8021ed0:	080237cb 	.word	0x080237cb
 8021ed4:	08023803 	.word	0x08023803
 8021ed8:	08023827 	.word	0x08023827

08021edc <_cleanup_r>:
 8021edc:	4901      	ldr	r1, [pc, #4]	; (8021ee4 <_cleanup_r+0x8>)
 8021ede:	f000 b8c1 	b.w	8022064 <_fwalk_reent>
 8021ee2:	bf00      	nop
 8021ee4:	08021e1d 	.word	0x08021e1d

08021ee8 <__sfmoreglue>:
 8021ee8:	b570      	push	{r4, r5, r6, lr}
 8021eea:	1e4a      	subs	r2, r1, #1
 8021eec:	2568      	movs	r5, #104	; 0x68
 8021eee:	4355      	muls	r5, r2
 8021ef0:	460e      	mov	r6, r1
 8021ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021ef6:	f7fd f9e3 	bl	801f2c0 <_malloc_r>
 8021efa:	4604      	mov	r4, r0
 8021efc:	b140      	cbz	r0, 8021f10 <__sfmoreglue+0x28>
 8021efe:	2100      	movs	r1, #0
 8021f00:	e9c0 1600 	strd	r1, r6, [r0]
 8021f04:	300c      	adds	r0, #12
 8021f06:	60a0      	str	r0, [r4, #8]
 8021f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021f0c:	f7fd f980 	bl	801f210 <memset>
 8021f10:	4620      	mov	r0, r4
 8021f12:	bd70      	pop	{r4, r5, r6, pc}

08021f14 <__sfp_lock_acquire>:
 8021f14:	4801      	ldr	r0, [pc, #4]	; (8021f1c <__sfp_lock_acquire+0x8>)
 8021f16:	f000 bc38 	b.w	802278a <__retarget_lock_acquire_recursive>
 8021f1a:	bf00      	nop
 8021f1c:	2400b060 	.word	0x2400b060

08021f20 <__sfp_lock_release>:
 8021f20:	4801      	ldr	r0, [pc, #4]	; (8021f28 <__sfp_lock_release+0x8>)
 8021f22:	f000 bc33 	b.w	802278c <__retarget_lock_release_recursive>
 8021f26:	bf00      	nop
 8021f28:	2400b060 	.word	0x2400b060

08021f2c <__sinit_lock_acquire>:
 8021f2c:	4801      	ldr	r0, [pc, #4]	; (8021f34 <__sinit_lock_acquire+0x8>)
 8021f2e:	f000 bc2c 	b.w	802278a <__retarget_lock_acquire_recursive>
 8021f32:	bf00      	nop
 8021f34:	2400b05b 	.word	0x2400b05b

08021f38 <__sinit_lock_release>:
 8021f38:	4801      	ldr	r0, [pc, #4]	; (8021f40 <__sinit_lock_release+0x8>)
 8021f3a:	f000 bc27 	b.w	802278c <__retarget_lock_release_recursive>
 8021f3e:	bf00      	nop
 8021f40:	2400b05b 	.word	0x2400b05b

08021f44 <__sinit>:
 8021f44:	b510      	push	{r4, lr}
 8021f46:	4604      	mov	r4, r0
 8021f48:	f7ff fff0 	bl	8021f2c <__sinit_lock_acquire>
 8021f4c:	69a3      	ldr	r3, [r4, #24]
 8021f4e:	b11b      	cbz	r3, 8021f58 <__sinit+0x14>
 8021f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f54:	f7ff bff0 	b.w	8021f38 <__sinit_lock_release>
 8021f58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8021f5e:	4b13      	ldr	r3, [pc, #76]	; (8021fac <__sinit+0x68>)
 8021f60:	4a13      	ldr	r2, [pc, #76]	; (8021fb0 <__sinit+0x6c>)
 8021f62:	681b      	ldr	r3, [r3, #0]
 8021f64:	62a2      	str	r2, [r4, #40]	; 0x28
 8021f66:	42a3      	cmp	r3, r4
 8021f68:	bf04      	itt	eq
 8021f6a:	2301      	moveq	r3, #1
 8021f6c:	61a3      	streq	r3, [r4, #24]
 8021f6e:	4620      	mov	r0, r4
 8021f70:	f000 f820 	bl	8021fb4 <__sfp>
 8021f74:	6060      	str	r0, [r4, #4]
 8021f76:	4620      	mov	r0, r4
 8021f78:	f000 f81c 	bl	8021fb4 <__sfp>
 8021f7c:	60a0      	str	r0, [r4, #8]
 8021f7e:	4620      	mov	r0, r4
 8021f80:	f000 f818 	bl	8021fb4 <__sfp>
 8021f84:	2200      	movs	r2, #0
 8021f86:	60e0      	str	r0, [r4, #12]
 8021f88:	2104      	movs	r1, #4
 8021f8a:	6860      	ldr	r0, [r4, #4]
 8021f8c:	f7ff ff82 	bl	8021e94 <std>
 8021f90:	68a0      	ldr	r0, [r4, #8]
 8021f92:	2201      	movs	r2, #1
 8021f94:	2109      	movs	r1, #9
 8021f96:	f7ff ff7d 	bl	8021e94 <std>
 8021f9a:	68e0      	ldr	r0, [r4, #12]
 8021f9c:	2202      	movs	r2, #2
 8021f9e:	2112      	movs	r1, #18
 8021fa0:	f7ff ff78 	bl	8021e94 <std>
 8021fa4:	2301      	movs	r3, #1
 8021fa6:	61a3      	str	r3, [r4, #24]
 8021fa8:	e7d2      	b.n	8021f50 <__sinit+0xc>
 8021faa:	bf00      	nop
 8021fac:	08028430 	.word	0x08028430
 8021fb0:	08021edd 	.word	0x08021edd

08021fb4 <__sfp>:
 8021fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fb6:	4607      	mov	r7, r0
 8021fb8:	f7ff ffac 	bl	8021f14 <__sfp_lock_acquire>
 8021fbc:	4b1e      	ldr	r3, [pc, #120]	; (8022038 <__sfp+0x84>)
 8021fbe:	681e      	ldr	r6, [r3, #0]
 8021fc0:	69b3      	ldr	r3, [r6, #24]
 8021fc2:	b913      	cbnz	r3, 8021fca <__sfp+0x16>
 8021fc4:	4630      	mov	r0, r6
 8021fc6:	f7ff ffbd 	bl	8021f44 <__sinit>
 8021fca:	3648      	adds	r6, #72	; 0x48
 8021fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021fd0:	3b01      	subs	r3, #1
 8021fd2:	d503      	bpl.n	8021fdc <__sfp+0x28>
 8021fd4:	6833      	ldr	r3, [r6, #0]
 8021fd6:	b30b      	cbz	r3, 802201c <__sfp+0x68>
 8021fd8:	6836      	ldr	r6, [r6, #0]
 8021fda:	e7f7      	b.n	8021fcc <__sfp+0x18>
 8021fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021fe0:	b9d5      	cbnz	r5, 8022018 <__sfp+0x64>
 8021fe2:	4b16      	ldr	r3, [pc, #88]	; (802203c <__sfp+0x88>)
 8021fe4:	60e3      	str	r3, [r4, #12]
 8021fe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021fea:	6665      	str	r5, [r4, #100]	; 0x64
 8021fec:	f000 fbcc 	bl	8022788 <__retarget_lock_init_recursive>
 8021ff0:	f7ff ff96 	bl	8021f20 <__sfp_lock_release>
 8021ff4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021ff8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021ffc:	6025      	str	r5, [r4, #0]
 8021ffe:	61a5      	str	r5, [r4, #24]
 8022000:	2208      	movs	r2, #8
 8022002:	4629      	mov	r1, r5
 8022004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022008:	f7fd f902 	bl	801f210 <memset>
 802200c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022014:	4620      	mov	r0, r4
 8022016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022018:	3468      	adds	r4, #104	; 0x68
 802201a:	e7d9      	b.n	8021fd0 <__sfp+0x1c>
 802201c:	2104      	movs	r1, #4
 802201e:	4638      	mov	r0, r7
 8022020:	f7ff ff62 	bl	8021ee8 <__sfmoreglue>
 8022024:	4604      	mov	r4, r0
 8022026:	6030      	str	r0, [r6, #0]
 8022028:	2800      	cmp	r0, #0
 802202a:	d1d5      	bne.n	8021fd8 <__sfp+0x24>
 802202c:	f7ff ff78 	bl	8021f20 <__sfp_lock_release>
 8022030:	230c      	movs	r3, #12
 8022032:	603b      	str	r3, [r7, #0]
 8022034:	e7ee      	b.n	8022014 <__sfp+0x60>
 8022036:	bf00      	nop
 8022038:	08028430 	.word	0x08028430
 802203c:	ffff0001 	.word	0xffff0001

08022040 <fiprintf>:
 8022040:	b40e      	push	{r1, r2, r3}
 8022042:	b503      	push	{r0, r1, lr}
 8022044:	4601      	mov	r1, r0
 8022046:	ab03      	add	r3, sp, #12
 8022048:	4805      	ldr	r0, [pc, #20]	; (8022060 <fiprintf+0x20>)
 802204a:	f853 2b04 	ldr.w	r2, [r3], #4
 802204e:	6800      	ldr	r0, [r0, #0]
 8022050:	9301      	str	r3, [sp, #4]
 8022052:	f001 fa6f 	bl	8023534 <_vfiprintf_r>
 8022056:	b002      	add	sp, #8
 8022058:	f85d eb04 	ldr.w	lr, [sp], #4
 802205c:	b003      	add	sp, #12
 802205e:	4770      	bx	lr
 8022060:	24003444 	.word	0x24003444

08022064 <_fwalk_reent>:
 8022064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022068:	4606      	mov	r6, r0
 802206a:	4688      	mov	r8, r1
 802206c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022070:	2700      	movs	r7, #0
 8022072:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022076:	f1b9 0901 	subs.w	r9, r9, #1
 802207a:	d505      	bpl.n	8022088 <_fwalk_reent+0x24>
 802207c:	6824      	ldr	r4, [r4, #0]
 802207e:	2c00      	cmp	r4, #0
 8022080:	d1f7      	bne.n	8022072 <_fwalk_reent+0xe>
 8022082:	4638      	mov	r0, r7
 8022084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022088:	89ab      	ldrh	r3, [r5, #12]
 802208a:	2b01      	cmp	r3, #1
 802208c:	d907      	bls.n	802209e <_fwalk_reent+0x3a>
 802208e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022092:	3301      	adds	r3, #1
 8022094:	d003      	beq.n	802209e <_fwalk_reent+0x3a>
 8022096:	4629      	mov	r1, r5
 8022098:	4630      	mov	r0, r6
 802209a:	47c0      	blx	r8
 802209c:	4307      	orrs	r7, r0
 802209e:	3568      	adds	r5, #104	; 0x68
 80220a0:	e7e9      	b.n	8022076 <_fwalk_reent+0x12>

080220a2 <rshift>:
 80220a2:	6903      	ldr	r3, [r0, #16]
 80220a4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80220a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80220ac:	ea4f 1261 	mov.w	r2, r1, asr #5
 80220b0:	f100 0414 	add.w	r4, r0, #20
 80220b4:	dd45      	ble.n	8022142 <rshift+0xa0>
 80220b6:	f011 011f 	ands.w	r1, r1, #31
 80220ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80220be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80220c2:	d10c      	bne.n	80220de <rshift+0x3c>
 80220c4:	f100 0710 	add.w	r7, r0, #16
 80220c8:	4629      	mov	r1, r5
 80220ca:	42b1      	cmp	r1, r6
 80220cc:	d334      	bcc.n	8022138 <rshift+0x96>
 80220ce:	1a9b      	subs	r3, r3, r2
 80220d0:	009b      	lsls	r3, r3, #2
 80220d2:	1eea      	subs	r2, r5, #3
 80220d4:	4296      	cmp	r6, r2
 80220d6:	bf38      	it	cc
 80220d8:	2300      	movcc	r3, #0
 80220da:	4423      	add	r3, r4
 80220dc:	e015      	b.n	802210a <rshift+0x68>
 80220de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80220e2:	f1c1 0820 	rsb	r8, r1, #32
 80220e6:	40cf      	lsrs	r7, r1
 80220e8:	f105 0e04 	add.w	lr, r5, #4
 80220ec:	46a1      	mov	r9, r4
 80220ee:	4576      	cmp	r6, lr
 80220f0:	46f4      	mov	ip, lr
 80220f2:	d815      	bhi.n	8022120 <rshift+0x7e>
 80220f4:	1a9b      	subs	r3, r3, r2
 80220f6:	009a      	lsls	r2, r3, #2
 80220f8:	3a04      	subs	r2, #4
 80220fa:	3501      	adds	r5, #1
 80220fc:	42ae      	cmp	r6, r5
 80220fe:	bf38      	it	cc
 8022100:	2200      	movcc	r2, #0
 8022102:	18a3      	adds	r3, r4, r2
 8022104:	50a7      	str	r7, [r4, r2]
 8022106:	b107      	cbz	r7, 802210a <rshift+0x68>
 8022108:	3304      	adds	r3, #4
 802210a:	1b1a      	subs	r2, r3, r4
 802210c:	42a3      	cmp	r3, r4
 802210e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8022112:	bf08      	it	eq
 8022114:	2300      	moveq	r3, #0
 8022116:	6102      	str	r2, [r0, #16]
 8022118:	bf08      	it	eq
 802211a:	6143      	streq	r3, [r0, #20]
 802211c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022120:	f8dc c000 	ldr.w	ip, [ip]
 8022124:	fa0c fc08 	lsl.w	ip, ip, r8
 8022128:	ea4c 0707 	orr.w	r7, ip, r7
 802212c:	f849 7b04 	str.w	r7, [r9], #4
 8022130:	f85e 7b04 	ldr.w	r7, [lr], #4
 8022134:	40cf      	lsrs	r7, r1
 8022136:	e7da      	b.n	80220ee <rshift+0x4c>
 8022138:	f851 cb04 	ldr.w	ip, [r1], #4
 802213c:	f847 cf04 	str.w	ip, [r7, #4]!
 8022140:	e7c3      	b.n	80220ca <rshift+0x28>
 8022142:	4623      	mov	r3, r4
 8022144:	e7e1      	b.n	802210a <rshift+0x68>

08022146 <__hexdig_fun>:
 8022146:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802214a:	2b09      	cmp	r3, #9
 802214c:	d802      	bhi.n	8022154 <__hexdig_fun+0xe>
 802214e:	3820      	subs	r0, #32
 8022150:	b2c0      	uxtb	r0, r0
 8022152:	4770      	bx	lr
 8022154:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8022158:	2b05      	cmp	r3, #5
 802215a:	d801      	bhi.n	8022160 <__hexdig_fun+0x1a>
 802215c:	3847      	subs	r0, #71	; 0x47
 802215e:	e7f7      	b.n	8022150 <__hexdig_fun+0xa>
 8022160:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8022164:	2b05      	cmp	r3, #5
 8022166:	d801      	bhi.n	802216c <__hexdig_fun+0x26>
 8022168:	3827      	subs	r0, #39	; 0x27
 802216a:	e7f1      	b.n	8022150 <__hexdig_fun+0xa>
 802216c:	2000      	movs	r0, #0
 802216e:	4770      	bx	lr

08022170 <__gethex>:
 8022170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022174:	ed2d 8b02 	vpush	{d8}
 8022178:	b089      	sub	sp, #36	; 0x24
 802217a:	ee08 0a10 	vmov	s16, r0
 802217e:	9304      	str	r3, [sp, #16]
 8022180:	4bbc      	ldr	r3, [pc, #752]	; (8022474 <__gethex+0x304>)
 8022182:	681b      	ldr	r3, [r3, #0]
 8022184:	9301      	str	r3, [sp, #4]
 8022186:	4618      	mov	r0, r3
 8022188:	468b      	mov	fp, r1
 802218a:	4690      	mov	r8, r2
 802218c:	f7de f8a8 	bl	80002e0 <strlen>
 8022190:	9b01      	ldr	r3, [sp, #4]
 8022192:	f8db 2000 	ldr.w	r2, [fp]
 8022196:	4403      	add	r3, r0
 8022198:	4682      	mov	sl, r0
 802219a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802219e:	9305      	str	r3, [sp, #20]
 80221a0:	1c93      	adds	r3, r2, #2
 80221a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80221a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80221aa:	32fe      	adds	r2, #254	; 0xfe
 80221ac:	18d1      	adds	r1, r2, r3
 80221ae:	461f      	mov	r7, r3
 80221b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80221b4:	9100      	str	r1, [sp, #0]
 80221b6:	2830      	cmp	r0, #48	; 0x30
 80221b8:	d0f8      	beq.n	80221ac <__gethex+0x3c>
 80221ba:	f7ff ffc4 	bl	8022146 <__hexdig_fun>
 80221be:	4604      	mov	r4, r0
 80221c0:	2800      	cmp	r0, #0
 80221c2:	d13a      	bne.n	802223a <__gethex+0xca>
 80221c4:	9901      	ldr	r1, [sp, #4]
 80221c6:	4652      	mov	r2, sl
 80221c8:	4638      	mov	r0, r7
 80221ca:	f7fe f81f 	bl	802020c <strncmp>
 80221ce:	4605      	mov	r5, r0
 80221d0:	2800      	cmp	r0, #0
 80221d2:	d168      	bne.n	80222a6 <__gethex+0x136>
 80221d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80221d8:	eb07 060a 	add.w	r6, r7, sl
 80221dc:	f7ff ffb3 	bl	8022146 <__hexdig_fun>
 80221e0:	2800      	cmp	r0, #0
 80221e2:	d062      	beq.n	80222aa <__gethex+0x13a>
 80221e4:	4633      	mov	r3, r6
 80221e6:	7818      	ldrb	r0, [r3, #0]
 80221e8:	2830      	cmp	r0, #48	; 0x30
 80221ea:	461f      	mov	r7, r3
 80221ec:	f103 0301 	add.w	r3, r3, #1
 80221f0:	d0f9      	beq.n	80221e6 <__gethex+0x76>
 80221f2:	f7ff ffa8 	bl	8022146 <__hexdig_fun>
 80221f6:	2301      	movs	r3, #1
 80221f8:	fab0 f480 	clz	r4, r0
 80221fc:	0964      	lsrs	r4, r4, #5
 80221fe:	4635      	mov	r5, r6
 8022200:	9300      	str	r3, [sp, #0]
 8022202:	463a      	mov	r2, r7
 8022204:	4616      	mov	r6, r2
 8022206:	3201      	adds	r2, #1
 8022208:	7830      	ldrb	r0, [r6, #0]
 802220a:	f7ff ff9c 	bl	8022146 <__hexdig_fun>
 802220e:	2800      	cmp	r0, #0
 8022210:	d1f8      	bne.n	8022204 <__gethex+0x94>
 8022212:	9901      	ldr	r1, [sp, #4]
 8022214:	4652      	mov	r2, sl
 8022216:	4630      	mov	r0, r6
 8022218:	f7fd fff8 	bl	802020c <strncmp>
 802221c:	b980      	cbnz	r0, 8022240 <__gethex+0xd0>
 802221e:	b94d      	cbnz	r5, 8022234 <__gethex+0xc4>
 8022220:	eb06 050a 	add.w	r5, r6, sl
 8022224:	462a      	mov	r2, r5
 8022226:	4616      	mov	r6, r2
 8022228:	3201      	adds	r2, #1
 802222a:	7830      	ldrb	r0, [r6, #0]
 802222c:	f7ff ff8b 	bl	8022146 <__hexdig_fun>
 8022230:	2800      	cmp	r0, #0
 8022232:	d1f8      	bne.n	8022226 <__gethex+0xb6>
 8022234:	1bad      	subs	r5, r5, r6
 8022236:	00ad      	lsls	r5, r5, #2
 8022238:	e004      	b.n	8022244 <__gethex+0xd4>
 802223a:	2400      	movs	r4, #0
 802223c:	4625      	mov	r5, r4
 802223e:	e7e0      	b.n	8022202 <__gethex+0x92>
 8022240:	2d00      	cmp	r5, #0
 8022242:	d1f7      	bne.n	8022234 <__gethex+0xc4>
 8022244:	7833      	ldrb	r3, [r6, #0]
 8022246:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802224a:	2b50      	cmp	r3, #80	; 0x50
 802224c:	d13b      	bne.n	80222c6 <__gethex+0x156>
 802224e:	7873      	ldrb	r3, [r6, #1]
 8022250:	2b2b      	cmp	r3, #43	; 0x2b
 8022252:	d02c      	beq.n	80222ae <__gethex+0x13e>
 8022254:	2b2d      	cmp	r3, #45	; 0x2d
 8022256:	d02e      	beq.n	80222b6 <__gethex+0x146>
 8022258:	1c71      	adds	r1, r6, #1
 802225a:	f04f 0900 	mov.w	r9, #0
 802225e:	7808      	ldrb	r0, [r1, #0]
 8022260:	f7ff ff71 	bl	8022146 <__hexdig_fun>
 8022264:	1e43      	subs	r3, r0, #1
 8022266:	b2db      	uxtb	r3, r3
 8022268:	2b18      	cmp	r3, #24
 802226a:	d82c      	bhi.n	80222c6 <__gethex+0x156>
 802226c:	f1a0 0210 	sub.w	r2, r0, #16
 8022270:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8022274:	f7ff ff67 	bl	8022146 <__hexdig_fun>
 8022278:	1e43      	subs	r3, r0, #1
 802227a:	b2db      	uxtb	r3, r3
 802227c:	2b18      	cmp	r3, #24
 802227e:	d91d      	bls.n	80222bc <__gethex+0x14c>
 8022280:	f1b9 0f00 	cmp.w	r9, #0
 8022284:	d000      	beq.n	8022288 <__gethex+0x118>
 8022286:	4252      	negs	r2, r2
 8022288:	4415      	add	r5, r2
 802228a:	f8cb 1000 	str.w	r1, [fp]
 802228e:	b1e4      	cbz	r4, 80222ca <__gethex+0x15a>
 8022290:	9b00      	ldr	r3, [sp, #0]
 8022292:	2b00      	cmp	r3, #0
 8022294:	bf14      	ite	ne
 8022296:	2700      	movne	r7, #0
 8022298:	2706      	moveq	r7, #6
 802229a:	4638      	mov	r0, r7
 802229c:	b009      	add	sp, #36	; 0x24
 802229e:	ecbd 8b02 	vpop	{d8}
 80222a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222a6:	463e      	mov	r6, r7
 80222a8:	4625      	mov	r5, r4
 80222aa:	2401      	movs	r4, #1
 80222ac:	e7ca      	b.n	8022244 <__gethex+0xd4>
 80222ae:	f04f 0900 	mov.w	r9, #0
 80222b2:	1cb1      	adds	r1, r6, #2
 80222b4:	e7d3      	b.n	802225e <__gethex+0xee>
 80222b6:	f04f 0901 	mov.w	r9, #1
 80222ba:	e7fa      	b.n	80222b2 <__gethex+0x142>
 80222bc:	230a      	movs	r3, #10
 80222be:	fb03 0202 	mla	r2, r3, r2, r0
 80222c2:	3a10      	subs	r2, #16
 80222c4:	e7d4      	b.n	8022270 <__gethex+0x100>
 80222c6:	4631      	mov	r1, r6
 80222c8:	e7df      	b.n	802228a <__gethex+0x11a>
 80222ca:	1bf3      	subs	r3, r6, r7
 80222cc:	3b01      	subs	r3, #1
 80222ce:	4621      	mov	r1, r4
 80222d0:	2b07      	cmp	r3, #7
 80222d2:	dc0b      	bgt.n	80222ec <__gethex+0x17c>
 80222d4:	ee18 0a10 	vmov	r0, s16
 80222d8:	f000 fadc 	bl	8022894 <_Balloc>
 80222dc:	4604      	mov	r4, r0
 80222de:	b940      	cbnz	r0, 80222f2 <__gethex+0x182>
 80222e0:	4b65      	ldr	r3, [pc, #404]	; (8022478 <__gethex+0x308>)
 80222e2:	4602      	mov	r2, r0
 80222e4:	21de      	movs	r1, #222	; 0xde
 80222e6:	4865      	ldr	r0, [pc, #404]	; (802247c <__gethex+0x30c>)
 80222e8:	f7fe fee0 	bl	80210ac <__assert_func>
 80222ec:	3101      	adds	r1, #1
 80222ee:	105b      	asrs	r3, r3, #1
 80222f0:	e7ee      	b.n	80222d0 <__gethex+0x160>
 80222f2:	f100 0914 	add.w	r9, r0, #20
 80222f6:	f04f 0b00 	mov.w	fp, #0
 80222fa:	f1ca 0301 	rsb	r3, sl, #1
 80222fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8022302:	f8cd b000 	str.w	fp, [sp]
 8022306:	9306      	str	r3, [sp, #24]
 8022308:	42b7      	cmp	r7, r6
 802230a:	d340      	bcc.n	802238e <__gethex+0x21e>
 802230c:	9802      	ldr	r0, [sp, #8]
 802230e:	9b00      	ldr	r3, [sp, #0]
 8022310:	f840 3b04 	str.w	r3, [r0], #4
 8022314:	eba0 0009 	sub.w	r0, r0, r9
 8022318:	1080      	asrs	r0, r0, #2
 802231a:	0146      	lsls	r6, r0, #5
 802231c:	6120      	str	r0, [r4, #16]
 802231e:	4618      	mov	r0, r3
 8022320:	f000 fbae 	bl	8022a80 <__hi0bits>
 8022324:	1a30      	subs	r0, r6, r0
 8022326:	f8d8 6000 	ldr.w	r6, [r8]
 802232a:	42b0      	cmp	r0, r6
 802232c:	dd63      	ble.n	80223f6 <__gethex+0x286>
 802232e:	1b87      	subs	r7, r0, r6
 8022330:	4639      	mov	r1, r7
 8022332:	4620      	mov	r0, r4
 8022334:	f000 ff49 	bl	80231ca <__any_on>
 8022338:	4682      	mov	sl, r0
 802233a:	b1a8      	cbz	r0, 8022368 <__gethex+0x1f8>
 802233c:	1e7b      	subs	r3, r7, #1
 802233e:	1159      	asrs	r1, r3, #5
 8022340:	f003 021f 	and.w	r2, r3, #31
 8022344:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8022348:	f04f 0a01 	mov.w	sl, #1
 802234c:	fa0a f202 	lsl.w	r2, sl, r2
 8022350:	420a      	tst	r2, r1
 8022352:	d009      	beq.n	8022368 <__gethex+0x1f8>
 8022354:	4553      	cmp	r3, sl
 8022356:	dd05      	ble.n	8022364 <__gethex+0x1f4>
 8022358:	1eb9      	subs	r1, r7, #2
 802235a:	4620      	mov	r0, r4
 802235c:	f000 ff35 	bl	80231ca <__any_on>
 8022360:	2800      	cmp	r0, #0
 8022362:	d145      	bne.n	80223f0 <__gethex+0x280>
 8022364:	f04f 0a02 	mov.w	sl, #2
 8022368:	4639      	mov	r1, r7
 802236a:	4620      	mov	r0, r4
 802236c:	f7ff fe99 	bl	80220a2 <rshift>
 8022370:	443d      	add	r5, r7
 8022372:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022376:	42ab      	cmp	r3, r5
 8022378:	da4c      	bge.n	8022414 <__gethex+0x2a4>
 802237a:	ee18 0a10 	vmov	r0, s16
 802237e:	4621      	mov	r1, r4
 8022380:	f000 fac8 	bl	8022914 <_Bfree>
 8022384:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022386:	2300      	movs	r3, #0
 8022388:	6013      	str	r3, [r2, #0]
 802238a:	27a3      	movs	r7, #163	; 0xa3
 802238c:	e785      	b.n	802229a <__gethex+0x12a>
 802238e:	1e73      	subs	r3, r6, #1
 8022390:	9a05      	ldr	r2, [sp, #20]
 8022392:	9303      	str	r3, [sp, #12]
 8022394:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022398:	4293      	cmp	r3, r2
 802239a:	d019      	beq.n	80223d0 <__gethex+0x260>
 802239c:	f1bb 0f20 	cmp.w	fp, #32
 80223a0:	d107      	bne.n	80223b2 <__gethex+0x242>
 80223a2:	9b02      	ldr	r3, [sp, #8]
 80223a4:	9a00      	ldr	r2, [sp, #0]
 80223a6:	f843 2b04 	str.w	r2, [r3], #4
 80223aa:	9302      	str	r3, [sp, #8]
 80223ac:	2300      	movs	r3, #0
 80223ae:	9300      	str	r3, [sp, #0]
 80223b0:	469b      	mov	fp, r3
 80223b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80223b6:	f7ff fec6 	bl	8022146 <__hexdig_fun>
 80223ba:	9b00      	ldr	r3, [sp, #0]
 80223bc:	f000 000f 	and.w	r0, r0, #15
 80223c0:	fa00 f00b 	lsl.w	r0, r0, fp
 80223c4:	4303      	orrs	r3, r0
 80223c6:	9300      	str	r3, [sp, #0]
 80223c8:	f10b 0b04 	add.w	fp, fp, #4
 80223cc:	9b03      	ldr	r3, [sp, #12]
 80223ce:	e00d      	b.n	80223ec <__gethex+0x27c>
 80223d0:	9b03      	ldr	r3, [sp, #12]
 80223d2:	9a06      	ldr	r2, [sp, #24]
 80223d4:	4413      	add	r3, r2
 80223d6:	42bb      	cmp	r3, r7
 80223d8:	d3e0      	bcc.n	802239c <__gethex+0x22c>
 80223da:	4618      	mov	r0, r3
 80223dc:	9901      	ldr	r1, [sp, #4]
 80223de:	9307      	str	r3, [sp, #28]
 80223e0:	4652      	mov	r2, sl
 80223e2:	f7fd ff13 	bl	802020c <strncmp>
 80223e6:	9b07      	ldr	r3, [sp, #28]
 80223e8:	2800      	cmp	r0, #0
 80223ea:	d1d7      	bne.n	802239c <__gethex+0x22c>
 80223ec:	461e      	mov	r6, r3
 80223ee:	e78b      	b.n	8022308 <__gethex+0x198>
 80223f0:	f04f 0a03 	mov.w	sl, #3
 80223f4:	e7b8      	b.n	8022368 <__gethex+0x1f8>
 80223f6:	da0a      	bge.n	802240e <__gethex+0x29e>
 80223f8:	1a37      	subs	r7, r6, r0
 80223fa:	4621      	mov	r1, r4
 80223fc:	ee18 0a10 	vmov	r0, s16
 8022400:	463a      	mov	r2, r7
 8022402:	f000 fca3 	bl	8022d4c <__lshift>
 8022406:	1bed      	subs	r5, r5, r7
 8022408:	4604      	mov	r4, r0
 802240a:	f100 0914 	add.w	r9, r0, #20
 802240e:	f04f 0a00 	mov.w	sl, #0
 8022412:	e7ae      	b.n	8022372 <__gethex+0x202>
 8022414:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022418:	42a8      	cmp	r0, r5
 802241a:	dd72      	ble.n	8022502 <__gethex+0x392>
 802241c:	1b45      	subs	r5, r0, r5
 802241e:	42ae      	cmp	r6, r5
 8022420:	dc36      	bgt.n	8022490 <__gethex+0x320>
 8022422:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8022426:	2b02      	cmp	r3, #2
 8022428:	d02a      	beq.n	8022480 <__gethex+0x310>
 802242a:	2b03      	cmp	r3, #3
 802242c:	d02c      	beq.n	8022488 <__gethex+0x318>
 802242e:	2b01      	cmp	r3, #1
 8022430:	d115      	bne.n	802245e <__gethex+0x2ee>
 8022432:	42ae      	cmp	r6, r5
 8022434:	d113      	bne.n	802245e <__gethex+0x2ee>
 8022436:	2e01      	cmp	r6, #1
 8022438:	d10b      	bne.n	8022452 <__gethex+0x2e2>
 802243a:	9a04      	ldr	r2, [sp, #16]
 802243c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8022440:	6013      	str	r3, [r2, #0]
 8022442:	2301      	movs	r3, #1
 8022444:	6123      	str	r3, [r4, #16]
 8022446:	f8c9 3000 	str.w	r3, [r9]
 802244a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802244c:	2762      	movs	r7, #98	; 0x62
 802244e:	601c      	str	r4, [r3, #0]
 8022450:	e723      	b.n	802229a <__gethex+0x12a>
 8022452:	1e71      	subs	r1, r6, #1
 8022454:	4620      	mov	r0, r4
 8022456:	f000 feb8 	bl	80231ca <__any_on>
 802245a:	2800      	cmp	r0, #0
 802245c:	d1ed      	bne.n	802243a <__gethex+0x2ca>
 802245e:	ee18 0a10 	vmov	r0, s16
 8022462:	4621      	mov	r1, r4
 8022464:	f000 fa56 	bl	8022914 <_Bfree>
 8022468:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802246a:	2300      	movs	r3, #0
 802246c:	6013      	str	r3, [r2, #0]
 802246e:	2750      	movs	r7, #80	; 0x50
 8022470:	e713      	b.n	802229a <__gethex+0x12a>
 8022472:	bf00      	nop
 8022474:	080286c0 	.word	0x080286c0
 8022478:	080285e0 	.word	0x080285e0
 802247c:	08028654 	.word	0x08028654
 8022480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022482:	2b00      	cmp	r3, #0
 8022484:	d1eb      	bne.n	802245e <__gethex+0x2ee>
 8022486:	e7d8      	b.n	802243a <__gethex+0x2ca>
 8022488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802248a:	2b00      	cmp	r3, #0
 802248c:	d1d5      	bne.n	802243a <__gethex+0x2ca>
 802248e:	e7e6      	b.n	802245e <__gethex+0x2ee>
 8022490:	1e6f      	subs	r7, r5, #1
 8022492:	f1ba 0f00 	cmp.w	sl, #0
 8022496:	d131      	bne.n	80224fc <__gethex+0x38c>
 8022498:	b127      	cbz	r7, 80224a4 <__gethex+0x334>
 802249a:	4639      	mov	r1, r7
 802249c:	4620      	mov	r0, r4
 802249e:	f000 fe94 	bl	80231ca <__any_on>
 80224a2:	4682      	mov	sl, r0
 80224a4:	117b      	asrs	r3, r7, #5
 80224a6:	2101      	movs	r1, #1
 80224a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80224ac:	f007 071f 	and.w	r7, r7, #31
 80224b0:	fa01 f707 	lsl.w	r7, r1, r7
 80224b4:	421f      	tst	r7, r3
 80224b6:	4629      	mov	r1, r5
 80224b8:	4620      	mov	r0, r4
 80224ba:	bf18      	it	ne
 80224bc:	f04a 0a02 	orrne.w	sl, sl, #2
 80224c0:	1b76      	subs	r6, r6, r5
 80224c2:	f7ff fdee 	bl	80220a2 <rshift>
 80224c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80224ca:	2702      	movs	r7, #2
 80224cc:	f1ba 0f00 	cmp.w	sl, #0
 80224d0:	d048      	beq.n	8022564 <__gethex+0x3f4>
 80224d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80224d6:	2b02      	cmp	r3, #2
 80224d8:	d015      	beq.n	8022506 <__gethex+0x396>
 80224da:	2b03      	cmp	r3, #3
 80224dc:	d017      	beq.n	802250e <__gethex+0x39e>
 80224de:	2b01      	cmp	r3, #1
 80224e0:	d109      	bne.n	80224f6 <__gethex+0x386>
 80224e2:	f01a 0f02 	tst.w	sl, #2
 80224e6:	d006      	beq.n	80224f6 <__gethex+0x386>
 80224e8:	f8d9 0000 	ldr.w	r0, [r9]
 80224ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80224f0:	f01a 0f01 	tst.w	sl, #1
 80224f4:	d10e      	bne.n	8022514 <__gethex+0x3a4>
 80224f6:	f047 0710 	orr.w	r7, r7, #16
 80224fa:	e033      	b.n	8022564 <__gethex+0x3f4>
 80224fc:	f04f 0a01 	mov.w	sl, #1
 8022500:	e7d0      	b.n	80224a4 <__gethex+0x334>
 8022502:	2701      	movs	r7, #1
 8022504:	e7e2      	b.n	80224cc <__gethex+0x35c>
 8022506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022508:	f1c3 0301 	rsb	r3, r3, #1
 802250c:	9315      	str	r3, [sp, #84]	; 0x54
 802250e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022510:	2b00      	cmp	r3, #0
 8022512:	d0f0      	beq.n	80224f6 <__gethex+0x386>
 8022514:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8022518:	f104 0314 	add.w	r3, r4, #20
 802251c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8022520:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8022524:	f04f 0c00 	mov.w	ip, #0
 8022528:	4618      	mov	r0, r3
 802252a:	f853 2b04 	ldr.w	r2, [r3], #4
 802252e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8022532:	d01c      	beq.n	802256e <__gethex+0x3fe>
 8022534:	3201      	adds	r2, #1
 8022536:	6002      	str	r2, [r0, #0]
 8022538:	2f02      	cmp	r7, #2
 802253a:	f104 0314 	add.w	r3, r4, #20
 802253e:	d13f      	bne.n	80225c0 <__gethex+0x450>
 8022540:	f8d8 2000 	ldr.w	r2, [r8]
 8022544:	3a01      	subs	r2, #1
 8022546:	42b2      	cmp	r2, r6
 8022548:	d10a      	bne.n	8022560 <__gethex+0x3f0>
 802254a:	1171      	asrs	r1, r6, #5
 802254c:	2201      	movs	r2, #1
 802254e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022552:	f006 061f 	and.w	r6, r6, #31
 8022556:	fa02 f606 	lsl.w	r6, r2, r6
 802255a:	421e      	tst	r6, r3
 802255c:	bf18      	it	ne
 802255e:	4617      	movne	r7, r2
 8022560:	f047 0720 	orr.w	r7, r7, #32
 8022564:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022566:	601c      	str	r4, [r3, #0]
 8022568:	9b04      	ldr	r3, [sp, #16]
 802256a:	601d      	str	r5, [r3, #0]
 802256c:	e695      	b.n	802229a <__gethex+0x12a>
 802256e:	4299      	cmp	r1, r3
 8022570:	f843 cc04 	str.w	ip, [r3, #-4]
 8022574:	d8d8      	bhi.n	8022528 <__gethex+0x3b8>
 8022576:	68a3      	ldr	r3, [r4, #8]
 8022578:	459b      	cmp	fp, r3
 802257a:	db19      	blt.n	80225b0 <__gethex+0x440>
 802257c:	6861      	ldr	r1, [r4, #4]
 802257e:	ee18 0a10 	vmov	r0, s16
 8022582:	3101      	adds	r1, #1
 8022584:	f000 f986 	bl	8022894 <_Balloc>
 8022588:	4681      	mov	r9, r0
 802258a:	b918      	cbnz	r0, 8022594 <__gethex+0x424>
 802258c:	4b1a      	ldr	r3, [pc, #104]	; (80225f8 <__gethex+0x488>)
 802258e:	4602      	mov	r2, r0
 8022590:	2184      	movs	r1, #132	; 0x84
 8022592:	e6a8      	b.n	80222e6 <__gethex+0x176>
 8022594:	6922      	ldr	r2, [r4, #16]
 8022596:	3202      	adds	r2, #2
 8022598:	f104 010c 	add.w	r1, r4, #12
 802259c:	0092      	lsls	r2, r2, #2
 802259e:	300c      	adds	r0, #12
 80225a0:	f7fc fe0e 	bl	801f1c0 <memcpy>
 80225a4:	4621      	mov	r1, r4
 80225a6:	ee18 0a10 	vmov	r0, s16
 80225aa:	f000 f9b3 	bl	8022914 <_Bfree>
 80225ae:	464c      	mov	r4, r9
 80225b0:	6923      	ldr	r3, [r4, #16]
 80225b2:	1c5a      	adds	r2, r3, #1
 80225b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80225b8:	6122      	str	r2, [r4, #16]
 80225ba:	2201      	movs	r2, #1
 80225bc:	615a      	str	r2, [r3, #20]
 80225be:	e7bb      	b.n	8022538 <__gethex+0x3c8>
 80225c0:	6922      	ldr	r2, [r4, #16]
 80225c2:	455a      	cmp	r2, fp
 80225c4:	dd0b      	ble.n	80225de <__gethex+0x46e>
 80225c6:	2101      	movs	r1, #1
 80225c8:	4620      	mov	r0, r4
 80225ca:	f7ff fd6a 	bl	80220a2 <rshift>
 80225ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80225d2:	3501      	adds	r5, #1
 80225d4:	42ab      	cmp	r3, r5
 80225d6:	f6ff aed0 	blt.w	802237a <__gethex+0x20a>
 80225da:	2701      	movs	r7, #1
 80225dc:	e7c0      	b.n	8022560 <__gethex+0x3f0>
 80225de:	f016 061f 	ands.w	r6, r6, #31
 80225e2:	d0fa      	beq.n	80225da <__gethex+0x46a>
 80225e4:	449a      	add	sl, r3
 80225e6:	f1c6 0620 	rsb	r6, r6, #32
 80225ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80225ee:	f000 fa47 	bl	8022a80 <__hi0bits>
 80225f2:	42b0      	cmp	r0, r6
 80225f4:	dbe7      	blt.n	80225c6 <__gethex+0x456>
 80225f6:	e7f0      	b.n	80225da <__gethex+0x46a>
 80225f8:	080285e0 	.word	0x080285e0

080225fc <L_shift>:
 80225fc:	f1c2 0208 	rsb	r2, r2, #8
 8022600:	0092      	lsls	r2, r2, #2
 8022602:	b570      	push	{r4, r5, r6, lr}
 8022604:	f1c2 0620 	rsb	r6, r2, #32
 8022608:	6843      	ldr	r3, [r0, #4]
 802260a:	6804      	ldr	r4, [r0, #0]
 802260c:	fa03 f506 	lsl.w	r5, r3, r6
 8022610:	432c      	orrs	r4, r5
 8022612:	40d3      	lsrs	r3, r2
 8022614:	6004      	str	r4, [r0, #0]
 8022616:	f840 3f04 	str.w	r3, [r0, #4]!
 802261a:	4288      	cmp	r0, r1
 802261c:	d3f4      	bcc.n	8022608 <L_shift+0xc>
 802261e:	bd70      	pop	{r4, r5, r6, pc}

08022620 <__match>:
 8022620:	b530      	push	{r4, r5, lr}
 8022622:	6803      	ldr	r3, [r0, #0]
 8022624:	3301      	adds	r3, #1
 8022626:	f811 4b01 	ldrb.w	r4, [r1], #1
 802262a:	b914      	cbnz	r4, 8022632 <__match+0x12>
 802262c:	6003      	str	r3, [r0, #0]
 802262e:	2001      	movs	r0, #1
 8022630:	bd30      	pop	{r4, r5, pc}
 8022632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022636:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802263a:	2d19      	cmp	r5, #25
 802263c:	bf98      	it	ls
 802263e:	3220      	addls	r2, #32
 8022640:	42a2      	cmp	r2, r4
 8022642:	d0f0      	beq.n	8022626 <__match+0x6>
 8022644:	2000      	movs	r0, #0
 8022646:	e7f3      	b.n	8022630 <__match+0x10>

08022648 <__hexnan>:
 8022648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802264c:	680b      	ldr	r3, [r1, #0]
 802264e:	6801      	ldr	r1, [r0, #0]
 8022650:	115e      	asrs	r6, r3, #5
 8022652:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8022656:	f013 031f 	ands.w	r3, r3, #31
 802265a:	b087      	sub	sp, #28
 802265c:	bf18      	it	ne
 802265e:	3604      	addne	r6, #4
 8022660:	2500      	movs	r5, #0
 8022662:	1f37      	subs	r7, r6, #4
 8022664:	4682      	mov	sl, r0
 8022666:	4690      	mov	r8, r2
 8022668:	9301      	str	r3, [sp, #4]
 802266a:	f846 5c04 	str.w	r5, [r6, #-4]
 802266e:	46b9      	mov	r9, r7
 8022670:	463c      	mov	r4, r7
 8022672:	9502      	str	r5, [sp, #8]
 8022674:	46ab      	mov	fp, r5
 8022676:	784a      	ldrb	r2, [r1, #1]
 8022678:	1c4b      	adds	r3, r1, #1
 802267a:	9303      	str	r3, [sp, #12]
 802267c:	b342      	cbz	r2, 80226d0 <__hexnan+0x88>
 802267e:	4610      	mov	r0, r2
 8022680:	9105      	str	r1, [sp, #20]
 8022682:	9204      	str	r2, [sp, #16]
 8022684:	f7ff fd5f 	bl	8022146 <__hexdig_fun>
 8022688:	2800      	cmp	r0, #0
 802268a:	d14f      	bne.n	802272c <__hexnan+0xe4>
 802268c:	9a04      	ldr	r2, [sp, #16]
 802268e:	9905      	ldr	r1, [sp, #20]
 8022690:	2a20      	cmp	r2, #32
 8022692:	d818      	bhi.n	80226c6 <__hexnan+0x7e>
 8022694:	9b02      	ldr	r3, [sp, #8]
 8022696:	459b      	cmp	fp, r3
 8022698:	dd13      	ble.n	80226c2 <__hexnan+0x7a>
 802269a:	454c      	cmp	r4, r9
 802269c:	d206      	bcs.n	80226ac <__hexnan+0x64>
 802269e:	2d07      	cmp	r5, #7
 80226a0:	dc04      	bgt.n	80226ac <__hexnan+0x64>
 80226a2:	462a      	mov	r2, r5
 80226a4:	4649      	mov	r1, r9
 80226a6:	4620      	mov	r0, r4
 80226a8:	f7ff ffa8 	bl	80225fc <L_shift>
 80226ac:	4544      	cmp	r4, r8
 80226ae:	d950      	bls.n	8022752 <__hexnan+0x10a>
 80226b0:	2300      	movs	r3, #0
 80226b2:	f1a4 0904 	sub.w	r9, r4, #4
 80226b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80226ba:	f8cd b008 	str.w	fp, [sp, #8]
 80226be:	464c      	mov	r4, r9
 80226c0:	461d      	mov	r5, r3
 80226c2:	9903      	ldr	r1, [sp, #12]
 80226c4:	e7d7      	b.n	8022676 <__hexnan+0x2e>
 80226c6:	2a29      	cmp	r2, #41	; 0x29
 80226c8:	d156      	bne.n	8022778 <__hexnan+0x130>
 80226ca:	3102      	adds	r1, #2
 80226cc:	f8ca 1000 	str.w	r1, [sl]
 80226d0:	f1bb 0f00 	cmp.w	fp, #0
 80226d4:	d050      	beq.n	8022778 <__hexnan+0x130>
 80226d6:	454c      	cmp	r4, r9
 80226d8:	d206      	bcs.n	80226e8 <__hexnan+0xa0>
 80226da:	2d07      	cmp	r5, #7
 80226dc:	dc04      	bgt.n	80226e8 <__hexnan+0xa0>
 80226de:	462a      	mov	r2, r5
 80226e0:	4649      	mov	r1, r9
 80226e2:	4620      	mov	r0, r4
 80226e4:	f7ff ff8a 	bl	80225fc <L_shift>
 80226e8:	4544      	cmp	r4, r8
 80226ea:	d934      	bls.n	8022756 <__hexnan+0x10e>
 80226ec:	f1a8 0204 	sub.w	r2, r8, #4
 80226f0:	4623      	mov	r3, r4
 80226f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80226f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80226fa:	429f      	cmp	r7, r3
 80226fc:	d2f9      	bcs.n	80226f2 <__hexnan+0xaa>
 80226fe:	1b3b      	subs	r3, r7, r4
 8022700:	f023 0303 	bic.w	r3, r3, #3
 8022704:	3304      	adds	r3, #4
 8022706:	3401      	adds	r4, #1
 8022708:	3e03      	subs	r6, #3
 802270a:	42b4      	cmp	r4, r6
 802270c:	bf88      	it	hi
 802270e:	2304      	movhi	r3, #4
 8022710:	4443      	add	r3, r8
 8022712:	2200      	movs	r2, #0
 8022714:	f843 2b04 	str.w	r2, [r3], #4
 8022718:	429f      	cmp	r7, r3
 802271a:	d2fb      	bcs.n	8022714 <__hexnan+0xcc>
 802271c:	683b      	ldr	r3, [r7, #0]
 802271e:	b91b      	cbnz	r3, 8022728 <__hexnan+0xe0>
 8022720:	4547      	cmp	r7, r8
 8022722:	d127      	bne.n	8022774 <__hexnan+0x12c>
 8022724:	2301      	movs	r3, #1
 8022726:	603b      	str	r3, [r7, #0]
 8022728:	2005      	movs	r0, #5
 802272a:	e026      	b.n	802277a <__hexnan+0x132>
 802272c:	3501      	adds	r5, #1
 802272e:	2d08      	cmp	r5, #8
 8022730:	f10b 0b01 	add.w	fp, fp, #1
 8022734:	dd06      	ble.n	8022744 <__hexnan+0xfc>
 8022736:	4544      	cmp	r4, r8
 8022738:	d9c3      	bls.n	80226c2 <__hexnan+0x7a>
 802273a:	2300      	movs	r3, #0
 802273c:	f844 3c04 	str.w	r3, [r4, #-4]
 8022740:	2501      	movs	r5, #1
 8022742:	3c04      	subs	r4, #4
 8022744:	6822      	ldr	r2, [r4, #0]
 8022746:	f000 000f 	and.w	r0, r0, #15
 802274a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802274e:	6022      	str	r2, [r4, #0]
 8022750:	e7b7      	b.n	80226c2 <__hexnan+0x7a>
 8022752:	2508      	movs	r5, #8
 8022754:	e7b5      	b.n	80226c2 <__hexnan+0x7a>
 8022756:	9b01      	ldr	r3, [sp, #4]
 8022758:	2b00      	cmp	r3, #0
 802275a:	d0df      	beq.n	802271c <__hexnan+0xd4>
 802275c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022760:	f1c3 0320 	rsb	r3, r3, #32
 8022764:	fa22 f303 	lsr.w	r3, r2, r3
 8022768:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802276c:	401a      	ands	r2, r3
 802276e:	f846 2c04 	str.w	r2, [r6, #-4]
 8022772:	e7d3      	b.n	802271c <__hexnan+0xd4>
 8022774:	3f04      	subs	r7, #4
 8022776:	e7d1      	b.n	802271c <__hexnan+0xd4>
 8022778:	2004      	movs	r0, #4
 802277a:	b007      	add	sp, #28
 802277c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022780 <_localeconv_r>:
 8022780:	4800      	ldr	r0, [pc, #0]	; (8022784 <_localeconv_r+0x4>)
 8022782:	4770      	bx	lr
 8022784:	2400359c 	.word	0x2400359c

08022788 <__retarget_lock_init_recursive>:
 8022788:	4770      	bx	lr

0802278a <__retarget_lock_acquire_recursive>:
 802278a:	4770      	bx	lr

0802278c <__retarget_lock_release_recursive>:
 802278c:	4770      	bx	lr

0802278e <__swhatbuf_r>:
 802278e:	b570      	push	{r4, r5, r6, lr}
 8022790:	460e      	mov	r6, r1
 8022792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022796:	2900      	cmp	r1, #0
 8022798:	b096      	sub	sp, #88	; 0x58
 802279a:	4614      	mov	r4, r2
 802279c:	461d      	mov	r5, r3
 802279e:	da07      	bge.n	80227b0 <__swhatbuf_r+0x22>
 80227a0:	2300      	movs	r3, #0
 80227a2:	602b      	str	r3, [r5, #0]
 80227a4:	89b3      	ldrh	r3, [r6, #12]
 80227a6:	061a      	lsls	r2, r3, #24
 80227a8:	d410      	bmi.n	80227cc <__swhatbuf_r+0x3e>
 80227aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80227ae:	e00e      	b.n	80227ce <__swhatbuf_r+0x40>
 80227b0:	466a      	mov	r2, sp
 80227b2:	f001 f873 	bl	802389c <_fstat_r>
 80227b6:	2800      	cmp	r0, #0
 80227b8:	dbf2      	blt.n	80227a0 <__swhatbuf_r+0x12>
 80227ba:	9a01      	ldr	r2, [sp, #4]
 80227bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80227c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80227c4:	425a      	negs	r2, r3
 80227c6:	415a      	adcs	r2, r3
 80227c8:	602a      	str	r2, [r5, #0]
 80227ca:	e7ee      	b.n	80227aa <__swhatbuf_r+0x1c>
 80227cc:	2340      	movs	r3, #64	; 0x40
 80227ce:	2000      	movs	r0, #0
 80227d0:	6023      	str	r3, [r4, #0]
 80227d2:	b016      	add	sp, #88	; 0x58
 80227d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080227d8 <__smakebuf_r>:
 80227d8:	898b      	ldrh	r3, [r1, #12]
 80227da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80227dc:	079d      	lsls	r5, r3, #30
 80227de:	4606      	mov	r6, r0
 80227e0:	460c      	mov	r4, r1
 80227e2:	d507      	bpl.n	80227f4 <__smakebuf_r+0x1c>
 80227e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80227e8:	6023      	str	r3, [r4, #0]
 80227ea:	6123      	str	r3, [r4, #16]
 80227ec:	2301      	movs	r3, #1
 80227ee:	6163      	str	r3, [r4, #20]
 80227f0:	b002      	add	sp, #8
 80227f2:	bd70      	pop	{r4, r5, r6, pc}
 80227f4:	ab01      	add	r3, sp, #4
 80227f6:	466a      	mov	r2, sp
 80227f8:	f7ff ffc9 	bl	802278e <__swhatbuf_r>
 80227fc:	9900      	ldr	r1, [sp, #0]
 80227fe:	4605      	mov	r5, r0
 8022800:	4630      	mov	r0, r6
 8022802:	f7fc fd5d 	bl	801f2c0 <_malloc_r>
 8022806:	b948      	cbnz	r0, 802281c <__smakebuf_r+0x44>
 8022808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802280c:	059a      	lsls	r2, r3, #22
 802280e:	d4ef      	bmi.n	80227f0 <__smakebuf_r+0x18>
 8022810:	f023 0303 	bic.w	r3, r3, #3
 8022814:	f043 0302 	orr.w	r3, r3, #2
 8022818:	81a3      	strh	r3, [r4, #12]
 802281a:	e7e3      	b.n	80227e4 <__smakebuf_r+0xc>
 802281c:	4b0d      	ldr	r3, [pc, #52]	; (8022854 <__smakebuf_r+0x7c>)
 802281e:	62b3      	str	r3, [r6, #40]	; 0x28
 8022820:	89a3      	ldrh	r3, [r4, #12]
 8022822:	6020      	str	r0, [r4, #0]
 8022824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022828:	81a3      	strh	r3, [r4, #12]
 802282a:	9b00      	ldr	r3, [sp, #0]
 802282c:	6163      	str	r3, [r4, #20]
 802282e:	9b01      	ldr	r3, [sp, #4]
 8022830:	6120      	str	r0, [r4, #16]
 8022832:	b15b      	cbz	r3, 802284c <__smakebuf_r+0x74>
 8022834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022838:	4630      	mov	r0, r6
 802283a:	f001 f841 	bl	80238c0 <_isatty_r>
 802283e:	b128      	cbz	r0, 802284c <__smakebuf_r+0x74>
 8022840:	89a3      	ldrh	r3, [r4, #12]
 8022842:	f023 0303 	bic.w	r3, r3, #3
 8022846:	f043 0301 	orr.w	r3, r3, #1
 802284a:	81a3      	strh	r3, [r4, #12]
 802284c:	89a0      	ldrh	r0, [r4, #12]
 802284e:	4305      	orrs	r5, r0
 8022850:	81a5      	strh	r5, [r4, #12]
 8022852:	e7cd      	b.n	80227f0 <__smakebuf_r+0x18>
 8022854:	08021edd 	.word	0x08021edd

08022858 <__ascii_mbtowc>:
 8022858:	b082      	sub	sp, #8
 802285a:	b901      	cbnz	r1, 802285e <__ascii_mbtowc+0x6>
 802285c:	a901      	add	r1, sp, #4
 802285e:	b142      	cbz	r2, 8022872 <__ascii_mbtowc+0x1a>
 8022860:	b14b      	cbz	r3, 8022876 <__ascii_mbtowc+0x1e>
 8022862:	7813      	ldrb	r3, [r2, #0]
 8022864:	600b      	str	r3, [r1, #0]
 8022866:	7812      	ldrb	r2, [r2, #0]
 8022868:	1e10      	subs	r0, r2, #0
 802286a:	bf18      	it	ne
 802286c:	2001      	movne	r0, #1
 802286e:	b002      	add	sp, #8
 8022870:	4770      	bx	lr
 8022872:	4610      	mov	r0, r2
 8022874:	e7fb      	b.n	802286e <__ascii_mbtowc+0x16>
 8022876:	f06f 0001 	mvn.w	r0, #1
 802287a:	e7f8      	b.n	802286e <__ascii_mbtowc+0x16>

0802287c <__malloc_lock>:
 802287c:	4801      	ldr	r0, [pc, #4]	; (8022884 <__malloc_lock+0x8>)
 802287e:	f7ff bf84 	b.w	802278a <__retarget_lock_acquire_recursive>
 8022882:	bf00      	nop
 8022884:	2400b05c 	.word	0x2400b05c

08022888 <__malloc_unlock>:
 8022888:	4801      	ldr	r0, [pc, #4]	; (8022890 <__malloc_unlock+0x8>)
 802288a:	f7ff bf7f 	b.w	802278c <__retarget_lock_release_recursive>
 802288e:	bf00      	nop
 8022890:	2400b05c 	.word	0x2400b05c

08022894 <_Balloc>:
 8022894:	b570      	push	{r4, r5, r6, lr}
 8022896:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022898:	4604      	mov	r4, r0
 802289a:	460d      	mov	r5, r1
 802289c:	b976      	cbnz	r6, 80228bc <_Balloc+0x28>
 802289e:	2010      	movs	r0, #16
 80228a0:	f7fc fc78 	bl	801f194 <malloc>
 80228a4:	4602      	mov	r2, r0
 80228a6:	6260      	str	r0, [r4, #36]	; 0x24
 80228a8:	b920      	cbnz	r0, 80228b4 <_Balloc+0x20>
 80228aa:	4b18      	ldr	r3, [pc, #96]	; (802290c <_Balloc+0x78>)
 80228ac:	4818      	ldr	r0, [pc, #96]	; (8022910 <_Balloc+0x7c>)
 80228ae:	2166      	movs	r1, #102	; 0x66
 80228b0:	f7fe fbfc 	bl	80210ac <__assert_func>
 80228b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80228b8:	6006      	str	r6, [r0, #0]
 80228ba:	60c6      	str	r6, [r0, #12]
 80228bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80228be:	68f3      	ldr	r3, [r6, #12]
 80228c0:	b183      	cbz	r3, 80228e4 <_Balloc+0x50>
 80228c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80228c4:	68db      	ldr	r3, [r3, #12]
 80228c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80228ca:	b9b8      	cbnz	r0, 80228fc <_Balloc+0x68>
 80228cc:	2101      	movs	r1, #1
 80228ce:	fa01 f605 	lsl.w	r6, r1, r5
 80228d2:	1d72      	adds	r2, r6, #5
 80228d4:	0092      	lsls	r2, r2, #2
 80228d6:	4620      	mov	r0, r4
 80228d8:	f000 fc98 	bl	802320c <_calloc_r>
 80228dc:	b160      	cbz	r0, 80228f8 <_Balloc+0x64>
 80228de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80228e2:	e00e      	b.n	8022902 <_Balloc+0x6e>
 80228e4:	2221      	movs	r2, #33	; 0x21
 80228e6:	2104      	movs	r1, #4
 80228e8:	4620      	mov	r0, r4
 80228ea:	f000 fc8f 	bl	802320c <_calloc_r>
 80228ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80228f0:	60f0      	str	r0, [r6, #12]
 80228f2:	68db      	ldr	r3, [r3, #12]
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	d1e4      	bne.n	80228c2 <_Balloc+0x2e>
 80228f8:	2000      	movs	r0, #0
 80228fa:	bd70      	pop	{r4, r5, r6, pc}
 80228fc:	6802      	ldr	r2, [r0, #0]
 80228fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022902:	2300      	movs	r3, #0
 8022904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022908:	e7f7      	b.n	80228fa <_Balloc+0x66>
 802290a:	bf00      	nop
 802290c:	0802846d 	.word	0x0802846d
 8022910:	080286d4 	.word	0x080286d4

08022914 <_Bfree>:
 8022914:	b570      	push	{r4, r5, r6, lr}
 8022916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022918:	4605      	mov	r5, r0
 802291a:	460c      	mov	r4, r1
 802291c:	b976      	cbnz	r6, 802293c <_Bfree+0x28>
 802291e:	2010      	movs	r0, #16
 8022920:	f7fc fc38 	bl	801f194 <malloc>
 8022924:	4602      	mov	r2, r0
 8022926:	6268      	str	r0, [r5, #36]	; 0x24
 8022928:	b920      	cbnz	r0, 8022934 <_Bfree+0x20>
 802292a:	4b09      	ldr	r3, [pc, #36]	; (8022950 <_Bfree+0x3c>)
 802292c:	4809      	ldr	r0, [pc, #36]	; (8022954 <_Bfree+0x40>)
 802292e:	218a      	movs	r1, #138	; 0x8a
 8022930:	f7fe fbbc 	bl	80210ac <__assert_func>
 8022934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022938:	6006      	str	r6, [r0, #0]
 802293a:	60c6      	str	r6, [r0, #12]
 802293c:	b13c      	cbz	r4, 802294e <_Bfree+0x3a>
 802293e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022940:	6862      	ldr	r2, [r4, #4]
 8022942:	68db      	ldr	r3, [r3, #12]
 8022944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022948:	6021      	str	r1, [r4, #0]
 802294a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802294e:	bd70      	pop	{r4, r5, r6, pc}
 8022950:	0802846d 	.word	0x0802846d
 8022954:	080286d4 	.word	0x080286d4

08022958 <__multadd>:
 8022958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802295c:	690e      	ldr	r6, [r1, #16]
 802295e:	4607      	mov	r7, r0
 8022960:	4698      	mov	r8, r3
 8022962:	460c      	mov	r4, r1
 8022964:	f101 0014 	add.w	r0, r1, #20
 8022968:	2300      	movs	r3, #0
 802296a:	6805      	ldr	r5, [r0, #0]
 802296c:	b2a9      	uxth	r1, r5
 802296e:	fb02 8101 	mla	r1, r2, r1, r8
 8022972:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8022976:	0c2d      	lsrs	r5, r5, #16
 8022978:	fb02 c505 	mla	r5, r2, r5, ip
 802297c:	b289      	uxth	r1, r1
 802297e:	3301      	adds	r3, #1
 8022980:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8022984:	429e      	cmp	r6, r3
 8022986:	f840 1b04 	str.w	r1, [r0], #4
 802298a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802298e:	dcec      	bgt.n	802296a <__multadd+0x12>
 8022990:	f1b8 0f00 	cmp.w	r8, #0
 8022994:	d022      	beq.n	80229dc <__multadd+0x84>
 8022996:	68a3      	ldr	r3, [r4, #8]
 8022998:	42b3      	cmp	r3, r6
 802299a:	dc19      	bgt.n	80229d0 <__multadd+0x78>
 802299c:	6861      	ldr	r1, [r4, #4]
 802299e:	4638      	mov	r0, r7
 80229a0:	3101      	adds	r1, #1
 80229a2:	f7ff ff77 	bl	8022894 <_Balloc>
 80229a6:	4605      	mov	r5, r0
 80229a8:	b928      	cbnz	r0, 80229b6 <__multadd+0x5e>
 80229aa:	4602      	mov	r2, r0
 80229ac:	4b0d      	ldr	r3, [pc, #52]	; (80229e4 <__multadd+0x8c>)
 80229ae:	480e      	ldr	r0, [pc, #56]	; (80229e8 <__multadd+0x90>)
 80229b0:	21b5      	movs	r1, #181	; 0xb5
 80229b2:	f7fe fb7b 	bl	80210ac <__assert_func>
 80229b6:	6922      	ldr	r2, [r4, #16]
 80229b8:	3202      	adds	r2, #2
 80229ba:	f104 010c 	add.w	r1, r4, #12
 80229be:	0092      	lsls	r2, r2, #2
 80229c0:	300c      	adds	r0, #12
 80229c2:	f7fc fbfd 	bl	801f1c0 <memcpy>
 80229c6:	4621      	mov	r1, r4
 80229c8:	4638      	mov	r0, r7
 80229ca:	f7ff ffa3 	bl	8022914 <_Bfree>
 80229ce:	462c      	mov	r4, r5
 80229d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80229d4:	3601      	adds	r6, #1
 80229d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80229da:	6126      	str	r6, [r4, #16]
 80229dc:	4620      	mov	r0, r4
 80229de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80229e2:	bf00      	nop
 80229e4:	080285e0 	.word	0x080285e0
 80229e8:	080286d4 	.word	0x080286d4

080229ec <__s2b>:
 80229ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80229f0:	460c      	mov	r4, r1
 80229f2:	4615      	mov	r5, r2
 80229f4:	461f      	mov	r7, r3
 80229f6:	2209      	movs	r2, #9
 80229f8:	3308      	adds	r3, #8
 80229fa:	4606      	mov	r6, r0
 80229fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8022a00:	2100      	movs	r1, #0
 8022a02:	2201      	movs	r2, #1
 8022a04:	429a      	cmp	r2, r3
 8022a06:	db09      	blt.n	8022a1c <__s2b+0x30>
 8022a08:	4630      	mov	r0, r6
 8022a0a:	f7ff ff43 	bl	8022894 <_Balloc>
 8022a0e:	b940      	cbnz	r0, 8022a22 <__s2b+0x36>
 8022a10:	4602      	mov	r2, r0
 8022a12:	4b19      	ldr	r3, [pc, #100]	; (8022a78 <__s2b+0x8c>)
 8022a14:	4819      	ldr	r0, [pc, #100]	; (8022a7c <__s2b+0x90>)
 8022a16:	21ce      	movs	r1, #206	; 0xce
 8022a18:	f7fe fb48 	bl	80210ac <__assert_func>
 8022a1c:	0052      	lsls	r2, r2, #1
 8022a1e:	3101      	adds	r1, #1
 8022a20:	e7f0      	b.n	8022a04 <__s2b+0x18>
 8022a22:	9b08      	ldr	r3, [sp, #32]
 8022a24:	6143      	str	r3, [r0, #20]
 8022a26:	2d09      	cmp	r5, #9
 8022a28:	f04f 0301 	mov.w	r3, #1
 8022a2c:	6103      	str	r3, [r0, #16]
 8022a2e:	dd16      	ble.n	8022a5e <__s2b+0x72>
 8022a30:	f104 0909 	add.w	r9, r4, #9
 8022a34:	46c8      	mov	r8, r9
 8022a36:	442c      	add	r4, r5
 8022a38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022a3c:	4601      	mov	r1, r0
 8022a3e:	3b30      	subs	r3, #48	; 0x30
 8022a40:	220a      	movs	r2, #10
 8022a42:	4630      	mov	r0, r6
 8022a44:	f7ff ff88 	bl	8022958 <__multadd>
 8022a48:	45a0      	cmp	r8, r4
 8022a4a:	d1f5      	bne.n	8022a38 <__s2b+0x4c>
 8022a4c:	f1a5 0408 	sub.w	r4, r5, #8
 8022a50:	444c      	add	r4, r9
 8022a52:	1b2d      	subs	r5, r5, r4
 8022a54:	1963      	adds	r3, r4, r5
 8022a56:	42bb      	cmp	r3, r7
 8022a58:	db04      	blt.n	8022a64 <__s2b+0x78>
 8022a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022a5e:	340a      	adds	r4, #10
 8022a60:	2509      	movs	r5, #9
 8022a62:	e7f6      	b.n	8022a52 <__s2b+0x66>
 8022a64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022a68:	4601      	mov	r1, r0
 8022a6a:	3b30      	subs	r3, #48	; 0x30
 8022a6c:	220a      	movs	r2, #10
 8022a6e:	4630      	mov	r0, r6
 8022a70:	f7ff ff72 	bl	8022958 <__multadd>
 8022a74:	e7ee      	b.n	8022a54 <__s2b+0x68>
 8022a76:	bf00      	nop
 8022a78:	080285e0 	.word	0x080285e0
 8022a7c:	080286d4 	.word	0x080286d4

08022a80 <__hi0bits>:
 8022a80:	0c03      	lsrs	r3, r0, #16
 8022a82:	041b      	lsls	r3, r3, #16
 8022a84:	b9d3      	cbnz	r3, 8022abc <__hi0bits+0x3c>
 8022a86:	0400      	lsls	r0, r0, #16
 8022a88:	2310      	movs	r3, #16
 8022a8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022a8e:	bf04      	itt	eq
 8022a90:	0200      	lsleq	r0, r0, #8
 8022a92:	3308      	addeq	r3, #8
 8022a94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022a98:	bf04      	itt	eq
 8022a9a:	0100      	lsleq	r0, r0, #4
 8022a9c:	3304      	addeq	r3, #4
 8022a9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022aa2:	bf04      	itt	eq
 8022aa4:	0080      	lsleq	r0, r0, #2
 8022aa6:	3302      	addeq	r3, #2
 8022aa8:	2800      	cmp	r0, #0
 8022aaa:	db05      	blt.n	8022ab8 <__hi0bits+0x38>
 8022aac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022ab0:	f103 0301 	add.w	r3, r3, #1
 8022ab4:	bf08      	it	eq
 8022ab6:	2320      	moveq	r3, #32
 8022ab8:	4618      	mov	r0, r3
 8022aba:	4770      	bx	lr
 8022abc:	2300      	movs	r3, #0
 8022abe:	e7e4      	b.n	8022a8a <__hi0bits+0xa>

08022ac0 <__lo0bits>:
 8022ac0:	6803      	ldr	r3, [r0, #0]
 8022ac2:	f013 0207 	ands.w	r2, r3, #7
 8022ac6:	4601      	mov	r1, r0
 8022ac8:	d00b      	beq.n	8022ae2 <__lo0bits+0x22>
 8022aca:	07da      	lsls	r2, r3, #31
 8022acc:	d424      	bmi.n	8022b18 <__lo0bits+0x58>
 8022ace:	0798      	lsls	r0, r3, #30
 8022ad0:	bf49      	itett	mi
 8022ad2:	085b      	lsrmi	r3, r3, #1
 8022ad4:	089b      	lsrpl	r3, r3, #2
 8022ad6:	2001      	movmi	r0, #1
 8022ad8:	600b      	strmi	r3, [r1, #0]
 8022ada:	bf5c      	itt	pl
 8022adc:	600b      	strpl	r3, [r1, #0]
 8022ade:	2002      	movpl	r0, #2
 8022ae0:	4770      	bx	lr
 8022ae2:	b298      	uxth	r0, r3
 8022ae4:	b9b0      	cbnz	r0, 8022b14 <__lo0bits+0x54>
 8022ae6:	0c1b      	lsrs	r3, r3, #16
 8022ae8:	2010      	movs	r0, #16
 8022aea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8022aee:	bf04      	itt	eq
 8022af0:	0a1b      	lsreq	r3, r3, #8
 8022af2:	3008      	addeq	r0, #8
 8022af4:	071a      	lsls	r2, r3, #28
 8022af6:	bf04      	itt	eq
 8022af8:	091b      	lsreq	r3, r3, #4
 8022afa:	3004      	addeq	r0, #4
 8022afc:	079a      	lsls	r2, r3, #30
 8022afe:	bf04      	itt	eq
 8022b00:	089b      	lsreq	r3, r3, #2
 8022b02:	3002      	addeq	r0, #2
 8022b04:	07da      	lsls	r2, r3, #31
 8022b06:	d403      	bmi.n	8022b10 <__lo0bits+0x50>
 8022b08:	085b      	lsrs	r3, r3, #1
 8022b0a:	f100 0001 	add.w	r0, r0, #1
 8022b0e:	d005      	beq.n	8022b1c <__lo0bits+0x5c>
 8022b10:	600b      	str	r3, [r1, #0]
 8022b12:	4770      	bx	lr
 8022b14:	4610      	mov	r0, r2
 8022b16:	e7e8      	b.n	8022aea <__lo0bits+0x2a>
 8022b18:	2000      	movs	r0, #0
 8022b1a:	4770      	bx	lr
 8022b1c:	2020      	movs	r0, #32
 8022b1e:	4770      	bx	lr

08022b20 <__i2b>:
 8022b20:	b510      	push	{r4, lr}
 8022b22:	460c      	mov	r4, r1
 8022b24:	2101      	movs	r1, #1
 8022b26:	f7ff feb5 	bl	8022894 <_Balloc>
 8022b2a:	4602      	mov	r2, r0
 8022b2c:	b928      	cbnz	r0, 8022b3a <__i2b+0x1a>
 8022b2e:	4b05      	ldr	r3, [pc, #20]	; (8022b44 <__i2b+0x24>)
 8022b30:	4805      	ldr	r0, [pc, #20]	; (8022b48 <__i2b+0x28>)
 8022b32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8022b36:	f7fe fab9 	bl	80210ac <__assert_func>
 8022b3a:	2301      	movs	r3, #1
 8022b3c:	6144      	str	r4, [r0, #20]
 8022b3e:	6103      	str	r3, [r0, #16]
 8022b40:	bd10      	pop	{r4, pc}
 8022b42:	bf00      	nop
 8022b44:	080285e0 	.word	0x080285e0
 8022b48:	080286d4 	.word	0x080286d4

08022b4c <__multiply>:
 8022b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b50:	4614      	mov	r4, r2
 8022b52:	690a      	ldr	r2, [r1, #16]
 8022b54:	6923      	ldr	r3, [r4, #16]
 8022b56:	429a      	cmp	r2, r3
 8022b58:	bfb8      	it	lt
 8022b5a:	460b      	movlt	r3, r1
 8022b5c:	460d      	mov	r5, r1
 8022b5e:	bfbc      	itt	lt
 8022b60:	4625      	movlt	r5, r4
 8022b62:	461c      	movlt	r4, r3
 8022b64:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8022b68:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022b6c:	68ab      	ldr	r3, [r5, #8]
 8022b6e:	6869      	ldr	r1, [r5, #4]
 8022b70:	eb0a 0709 	add.w	r7, sl, r9
 8022b74:	42bb      	cmp	r3, r7
 8022b76:	b085      	sub	sp, #20
 8022b78:	bfb8      	it	lt
 8022b7a:	3101      	addlt	r1, #1
 8022b7c:	f7ff fe8a 	bl	8022894 <_Balloc>
 8022b80:	b930      	cbnz	r0, 8022b90 <__multiply+0x44>
 8022b82:	4602      	mov	r2, r0
 8022b84:	4b42      	ldr	r3, [pc, #264]	; (8022c90 <__multiply+0x144>)
 8022b86:	4843      	ldr	r0, [pc, #268]	; (8022c94 <__multiply+0x148>)
 8022b88:	f240 115d 	movw	r1, #349	; 0x15d
 8022b8c:	f7fe fa8e 	bl	80210ac <__assert_func>
 8022b90:	f100 0614 	add.w	r6, r0, #20
 8022b94:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8022b98:	4633      	mov	r3, r6
 8022b9a:	2200      	movs	r2, #0
 8022b9c:	4543      	cmp	r3, r8
 8022b9e:	d31e      	bcc.n	8022bde <__multiply+0x92>
 8022ba0:	f105 0c14 	add.w	ip, r5, #20
 8022ba4:	f104 0314 	add.w	r3, r4, #20
 8022ba8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8022bac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8022bb0:	9202      	str	r2, [sp, #8]
 8022bb2:	ebac 0205 	sub.w	r2, ip, r5
 8022bb6:	3a15      	subs	r2, #21
 8022bb8:	f022 0203 	bic.w	r2, r2, #3
 8022bbc:	3204      	adds	r2, #4
 8022bbe:	f105 0115 	add.w	r1, r5, #21
 8022bc2:	458c      	cmp	ip, r1
 8022bc4:	bf38      	it	cc
 8022bc6:	2204      	movcc	r2, #4
 8022bc8:	9201      	str	r2, [sp, #4]
 8022bca:	9a02      	ldr	r2, [sp, #8]
 8022bcc:	9303      	str	r3, [sp, #12]
 8022bce:	429a      	cmp	r2, r3
 8022bd0:	d808      	bhi.n	8022be4 <__multiply+0x98>
 8022bd2:	2f00      	cmp	r7, #0
 8022bd4:	dc55      	bgt.n	8022c82 <__multiply+0x136>
 8022bd6:	6107      	str	r7, [r0, #16]
 8022bd8:	b005      	add	sp, #20
 8022bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bde:	f843 2b04 	str.w	r2, [r3], #4
 8022be2:	e7db      	b.n	8022b9c <__multiply+0x50>
 8022be4:	f8b3 a000 	ldrh.w	sl, [r3]
 8022be8:	f1ba 0f00 	cmp.w	sl, #0
 8022bec:	d020      	beq.n	8022c30 <__multiply+0xe4>
 8022bee:	f105 0e14 	add.w	lr, r5, #20
 8022bf2:	46b1      	mov	r9, r6
 8022bf4:	2200      	movs	r2, #0
 8022bf6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8022bfa:	f8d9 b000 	ldr.w	fp, [r9]
 8022bfe:	b2a1      	uxth	r1, r4
 8022c00:	fa1f fb8b 	uxth.w	fp, fp
 8022c04:	fb0a b101 	mla	r1, sl, r1, fp
 8022c08:	4411      	add	r1, r2
 8022c0a:	f8d9 2000 	ldr.w	r2, [r9]
 8022c0e:	0c24      	lsrs	r4, r4, #16
 8022c10:	0c12      	lsrs	r2, r2, #16
 8022c12:	fb0a 2404 	mla	r4, sl, r4, r2
 8022c16:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8022c1a:	b289      	uxth	r1, r1
 8022c1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022c20:	45f4      	cmp	ip, lr
 8022c22:	f849 1b04 	str.w	r1, [r9], #4
 8022c26:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8022c2a:	d8e4      	bhi.n	8022bf6 <__multiply+0xaa>
 8022c2c:	9901      	ldr	r1, [sp, #4]
 8022c2e:	5072      	str	r2, [r6, r1]
 8022c30:	9a03      	ldr	r2, [sp, #12]
 8022c32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022c36:	3304      	adds	r3, #4
 8022c38:	f1b9 0f00 	cmp.w	r9, #0
 8022c3c:	d01f      	beq.n	8022c7e <__multiply+0x132>
 8022c3e:	6834      	ldr	r4, [r6, #0]
 8022c40:	f105 0114 	add.w	r1, r5, #20
 8022c44:	46b6      	mov	lr, r6
 8022c46:	f04f 0a00 	mov.w	sl, #0
 8022c4a:	880a      	ldrh	r2, [r1, #0]
 8022c4c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022c50:	fb09 b202 	mla	r2, r9, r2, fp
 8022c54:	4492      	add	sl, r2
 8022c56:	b2a4      	uxth	r4, r4
 8022c58:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022c5c:	f84e 4b04 	str.w	r4, [lr], #4
 8022c60:	f851 4b04 	ldr.w	r4, [r1], #4
 8022c64:	f8be 2000 	ldrh.w	r2, [lr]
 8022c68:	0c24      	lsrs	r4, r4, #16
 8022c6a:	fb09 2404 	mla	r4, r9, r4, r2
 8022c6e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8022c72:	458c      	cmp	ip, r1
 8022c74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8022c78:	d8e7      	bhi.n	8022c4a <__multiply+0xfe>
 8022c7a:	9a01      	ldr	r2, [sp, #4]
 8022c7c:	50b4      	str	r4, [r6, r2]
 8022c7e:	3604      	adds	r6, #4
 8022c80:	e7a3      	b.n	8022bca <__multiply+0x7e>
 8022c82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	d1a5      	bne.n	8022bd6 <__multiply+0x8a>
 8022c8a:	3f01      	subs	r7, #1
 8022c8c:	e7a1      	b.n	8022bd2 <__multiply+0x86>
 8022c8e:	bf00      	nop
 8022c90:	080285e0 	.word	0x080285e0
 8022c94:	080286d4 	.word	0x080286d4

08022c98 <__pow5mult>:
 8022c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022c9c:	4615      	mov	r5, r2
 8022c9e:	f012 0203 	ands.w	r2, r2, #3
 8022ca2:	4606      	mov	r6, r0
 8022ca4:	460f      	mov	r7, r1
 8022ca6:	d007      	beq.n	8022cb8 <__pow5mult+0x20>
 8022ca8:	4c25      	ldr	r4, [pc, #148]	; (8022d40 <__pow5mult+0xa8>)
 8022caa:	3a01      	subs	r2, #1
 8022cac:	2300      	movs	r3, #0
 8022cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022cb2:	f7ff fe51 	bl	8022958 <__multadd>
 8022cb6:	4607      	mov	r7, r0
 8022cb8:	10ad      	asrs	r5, r5, #2
 8022cba:	d03d      	beq.n	8022d38 <__pow5mult+0xa0>
 8022cbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022cbe:	b97c      	cbnz	r4, 8022ce0 <__pow5mult+0x48>
 8022cc0:	2010      	movs	r0, #16
 8022cc2:	f7fc fa67 	bl	801f194 <malloc>
 8022cc6:	4602      	mov	r2, r0
 8022cc8:	6270      	str	r0, [r6, #36]	; 0x24
 8022cca:	b928      	cbnz	r0, 8022cd8 <__pow5mult+0x40>
 8022ccc:	4b1d      	ldr	r3, [pc, #116]	; (8022d44 <__pow5mult+0xac>)
 8022cce:	481e      	ldr	r0, [pc, #120]	; (8022d48 <__pow5mult+0xb0>)
 8022cd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022cd4:	f7fe f9ea 	bl	80210ac <__assert_func>
 8022cd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022cdc:	6004      	str	r4, [r0, #0]
 8022cde:	60c4      	str	r4, [r0, #12]
 8022ce0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022ce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022ce8:	b94c      	cbnz	r4, 8022cfe <__pow5mult+0x66>
 8022cea:	f240 2171 	movw	r1, #625	; 0x271
 8022cee:	4630      	mov	r0, r6
 8022cf0:	f7ff ff16 	bl	8022b20 <__i2b>
 8022cf4:	2300      	movs	r3, #0
 8022cf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8022cfa:	4604      	mov	r4, r0
 8022cfc:	6003      	str	r3, [r0, #0]
 8022cfe:	f04f 0900 	mov.w	r9, #0
 8022d02:	07eb      	lsls	r3, r5, #31
 8022d04:	d50a      	bpl.n	8022d1c <__pow5mult+0x84>
 8022d06:	4639      	mov	r1, r7
 8022d08:	4622      	mov	r2, r4
 8022d0a:	4630      	mov	r0, r6
 8022d0c:	f7ff ff1e 	bl	8022b4c <__multiply>
 8022d10:	4639      	mov	r1, r7
 8022d12:	4680      	mov	r8, r0
 8022d14:	4630      	mov	r0, r6
 8022d16:	f7ff fdfd 	bl	8022914 <_Bfree>
 8022d1a:	4647      	mov	r7, r8
 8022d1c:	106d      	asrs	r5, r5, #1
 8022d1e:	d00b      	beq.n	8022d38 <__pow5mult+0xa0>
 8022d20:	6820      	ldr	r0, [r4, #0]
 8022d22:	b938      	cbnz	r0, 8022d34 <__pow5mult+0x9c>
 8022d24:	4622      	mov	r2, r4
 8022d26:	4621      	mov	r1, r4
 8022d28:	4630      	mov	r0, r6
 8022d2a:	f7ff ff0f 	bl	8022b4c <__multiply>
 8022d2e:	6020      	str	r0, [r4, #0]
 8022d30:	f8c0 9000 	str.w	r9, [r0]
 8022d34:	4604      	mov	r4, r0
 8022d36:	e7e4      	b.n	8022d02 <__pow5mult+0x6a>
 8022d38:	4638      	mov	r0, r7
 8022d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d3e:	bf00      	nop
 8022d40:	08028828 	.word	0x08028828
 8022d44:	0802846d 	.word	0x0802846d
 8022d48:	080286d4 	.word	0x080286d4

08022d4c <__lshift>:
 8022d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022d50:	460c      	mov	r4, r1
 8022d52:	6849      	ldr	r1, [r1, #4]
 8022d54:	6923      	ldr	r3, [r4, #16]
 8022d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022d5a:	68a3      	ldr	r3, [r4, #8]
 8022d5c:	4607      	mov	r7, r0
 8022d5e:	4691      	mov	r9, r2
 8022d60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022d64:	f108 0601 	add.w	r6, r8, #1
 8022d68:	42b3      	cmp	r3, r6
 8022d6a:	db0b      	blt.n	8022d84 <__lshift+0x38>
 8022d6c:	4638      	mov	r0, r7
 8022d6e:	f7ff fd91 	bl	8022894 <_Balloc>
 8022d72:	4605      	mov	r5, r0
 8022d74:	b948      	cbnz	r0, 8022d8a <__lshift+0x3e>
 8022d76:	4602      	mov	r2, r0
 8022d78:	4b28      	ldr	r3, [pc, #160]	; (8022e1c <__lshift+0xd0>)
 8022d7a:	4829      	ldr	r0, [pc, #164]	; (8022e20 <__lshift+0xd4>)
 8022d7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022d80:	f7fe f994 	bl	80210ac <__assert_func>
 8022d84:	3101      	adds	r1, #1
 8022d86:	005b      	lsls	r3, r3, #1
 8022d88:	e7ee      	b.n	8022d68 <__lshift+0x1c>
 8022d8a:	2300      	movs	r3, #0
 8022d8c:	f100 0114 	add.w	r1, r0, #20
 8022d90:	f100 0210 	add.w	r2, r0, #16
 8022d94:	4618      	mov	r0, r3
 8022d96:	4553      	cmp	r3, sl
 8022d98:	db33      	blt.n	8022e02 <__lshift+0xb6>
 8022d9a:	6920      	ldr	r0, [r4, #16]
 8022d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022da0:	f104 0314 	add.w	r3, r4, #20
 8022da4:	f019 091f 	ands.w	r9, r9, #31
 8022da8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022dac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022db0:	d02b      	beq.n	8022e0a <__lshift+0xbe>
 8022db2:	f1c9 0e20 	rsb	lr, r9, #32
 8022db6:	468a      	mov	sl, r1
 8022db8:	2200      	movs	r2, #0
 8022dba:	6818      	ldr	r0, [r3, #0]
 8022dbc:	fa00 f009 	lsl.w	r0, r0, r9
 8022dc0:	4302      	orrs	r2, r0
 8022dc2:	f84a 2b04 	str.w	r2, [sl], #4
 8022dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8022dca:	459c      	cmp	ip, r3
 8022dcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8022dd0:	d8f3      	bhi.n	8022dba <__lshift+0x6e>
 8022dd2:	ebac 0304 	sub.w	r3, ip, r4
 8022dd6:	3b15      	subs	r3, #21
 8022dd8:	f023 0303 	bic.w	r3, r3, #3
 8022ddc:	3304      	adds	r3, #4
 8022dde:	f104 0015 	add.w	r0, r4, #21
 8022de2:	4584      	cmp	ip, r0
 8022de4:	bf38      	it	cc
 8022de6:	2304      	movcc	r3, #4
 8022de8:	50ca      	str	r2, [r1, r3]
 8022dea:	b10a      	cbz	r2, 8022df0 <__lshift+0xa4>
 8022dec:	f108 0602 	add.w	r6, r8, #2
 8022df0:	3e01      	subs	r6, #1
 8022df2:	4638      	mov	r0, r7
 8022df4:	612e      	str	r6, [r5, #16]
 8022df6:	4621      	mov	r1, r4
 8022df8:	f7ff fd8c 	bl	8022914 <_Bfree>
 8022dfc:	4628      	mov	r0, r5
 8022dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8022e06:	3301      	adds	r3, #1
 8022e08:	e7c5      	b.n	8022d96 <__lshift+0x4a>
 8022e0a:	3904      	subs	r1, #4
 8022e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8022e14:	459c      	cmp	ip, r3
 8022e16:	d8f9      	bhi.n	8022e0c <__lshift+0xc0>
 8022e18:	e7ea      	b.n	8022df0 <__lshift+0xa4>
 8022e1a:	bf00      	nop
 8022e1c:	080285e0 	.word	0x080285e0
 8022e20:	080286d4 	.word	0x080286d4

08022e24 <__mcmp>:
 8022e24:	b530      	push	{r4, r5, lr}
 8022e26:	6902      	ldr	r2, [r0, #16]
 8022e28:	690c      	ldr	r4, [r1, #16]
 8022e2a:	1b12      	subs	r2, r2, r4
 8022e2c:	d10e      	bne.n	8022e4c <__mcmp+0x28>
 8022e2e:	f100 0314 	add.w	r3, r0, #20
 8022e32:	3114      	adds	r1, #20
 8022e34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022e38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022e3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022e40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022e44:	42a5      	cmp	r5, r4
 8022e46:	d003      	beq.n	8022e50 <__mcmp+0x2c>
 8022e48:	d305      	bcc.n	8022e56 <__mcmp+0x32>
 8022e4a:	2201      	movs	r2, #1
 8022e4c:	4610      	mov	r0, r2
 8022e4e:	bd30      	pop	{r4, r5, pc}
 8022e50:	4283      	cmp	r3, r0
 8022e52:	d3f3      	bcc.n	8022e3c <__mcmp+0x18>
 8022e54:	e7fa      	b.n	8022e4c <__mcmp+0x28>
 8022e56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022e5a:	e7f7      	b.n	8022e4c <__mcmp+0x28>

08022e5c <__mdiff>:
 8022e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e60:	460c      	mov	r4, r1
 8022e62:	4606      	mov	r6, r0
 8022e64:	4611      	mov	r1, r2
 8022e66:	4620      	mov	r0, r4
 8022e68:	4617      	mov	r7, r2
 8022e6a:	f7ff ffdb 	bl	8022e24 <__mcmp>
 8022e6e:	1e05      	subs	r5, r0, #0
 8022e70:	d110      	bne.n	8022e94 <__mdiff+0x38>
 8022e72:	4629      	mov	r1, r5
 8022e74:	4630      	mov	r0, r6
 8022e76:	f7ff fd0d 	bl	8022894 <_Balloc>
 8022e7a:	b930      	cbnz	r0, 8022e8a <__mdiff+0x2e>
 8022e7c:	4b39      	ldr	r3, [pc, #228]	; (8022f64 <__mdiff+0x108>)
 8022e7e:	4602      	mov	r2, r0
 8022e80:	f240 2132 	movw	r1, #562	; 0x232
 8022e84:	4838      	ldr	r0, [pc, #224]	; (8022f68 <__mdiff+0x10c>)
 8022e86:	f7fe f911 	bl	80210ac <__assert_func>
 8022e8a:	2301      	movs	r3, #1
 8022e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e94:	bfa4      	itt	ge
 8022e96:	463b      	movge	r3, r7
 8022e98:	4627      	movge	r7, r4
 8022e9a:	4630      	mov	r0, r6
 8022e9c:	6879      	ldr	r1, [r7, #4]
 8022e9e:	bfa6      	itte	ge
 8022ea0:	461c      	movge	r4, r3
 8022ea2:	2500      	movge	r5, #0
 8022ea4:	2501      	movlt	r5, #1
 8022ea6:	f7ff fcf5 	bl	8022894 <_Balloc>
 8022eaa:	b920      	cbnz	r0, 8022eb6 <__mdiff+0x5a>
 8022eac:	4b2d      	ldr	r3, [pc, #180]	; (8022f64 <__mdiff+0x108>)
 8022eae:	4602      	mov	r2, r0
 8022eb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022eb4:	e7e6      	b.n	8022e84 <__mdiff+0x28>
 8022eb6:	693e      	ldr	r6, [r7, #16]
 8022eb8:	60c5      	str	r5, [r0, #12]
 8022eba:	6925      	ldr	r5, [r4, #16]
 8022ebc:	f107 0114 	add.w	r1, r7, #20
 8022ec0:	f104 0914 	add.w	r9, r4, #20
 8022ec4:	f100 0e14 	add.w	lr, r0, #20
 8022ec8:	f107 0210 	add.w	r2, r7, #16
 8022ecc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8022ed0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8022ed4:	46f2      	mov	sl, lr
 8022ed6:	2700      	movs	r7, #0
 8022ed8:	f859 3b04 	ldr.w	r3, [r9], #4
 8022edc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022ee0:	fa1f f883 	uxth.w	r8, r3
 8022ee4:	fa17 f78b 	uxtah	r7, r7, fp
 8022ee8:	0c1b      	lsrs	r3, r3, #16
 8022eea:	eba7 0808 	sub.w	r8, r7, r8
 8022eee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022ef2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022ef6:	fa1f f888 	uxth.w	r8, r8
 8022efa:	141f      	asrs	r7, r3, #16
 8022efc:	454d      	cmp	r5, r9
 8022efe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022f02:	f84a 3b04 	str.w	r3, [sl], #4
 8022f06:	d8e7      	bhi.n	8022ed8 <__mdiff+0x7c>
 8022f08:	1b2b      	subs	r3, r5, r4
 8022f0a:	3b15      	subs	r3, #21
 8022f0c:	f023 0303 	bic.w	r3, r3, #3
 8022f10:	3304      	adds	r3, #4
 8022f12:	3415      	adds	r4, #21
 8022f14:	42a5      	cmp	r5, r4
 8022f16:	bf38      	it	cc
 8022f18:	2304      	movcc	r3, #4
 8022f1a:	4419      	add	r1, r3
 8022f1c:	4473      	add	r3, lr
 8022f1e:	469e      	mov	lr, r3
 8022f20:	460d      	mov	r5, r1
 8022f22:	4565      	cmp	r5, ip
 8022f24:	d30e      	bcc.n	8022f44 <__mdiff+0xe8>
 8022f26:	f10c 0203 	add.w	r2, ip, #3
 8022f2a:	1a52      	subs	r2, r2, r1
 8022f2c:	f022 0203 	bic.w	r2, r2, #3
 8022f30:	3903      	subs	r1, #3
 8022f32:	458c      	cmp	ip, r1
 8022f34:	bf38      	it	cc
 8022f36:	2200      	movcc	r2, #0
 8022f38:	441a      	add	r2, r3
 8022f3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022f3e:	b17b      	cbz	r3, 8022f60 <__mdiff+0x104>
 8022f40:	6106      	str	r6, [r0, #16]
 8022f42:	e7a5      	b.n	8022e90 <__mdiff+0x34>
 8022f44:	f855 8b04 	ldr.w	r8, [r5], #4
 8022f48:	fa17 f488 	uxtah	r4, r7, r8
 8022f4c:	1422      	asrs	r2, r4, #16
 8022f4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022f52:	b2a4      	uxth	r4, r4
 8022f54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022f58:	f84e 4b04 	str.w	r4, [lr], #4
 8022f5c:	1417      	asrs	r7, r2, #16
 8022f5e:	e7e0      	b.n	8022f22 <__mdiff+0xc6>
 8022f60:	3e01      	subs	r6, #1
 8022f62:	e7ea      	b.n	8022f3a <__mdiff+0xde>
 8022f64:	080285e0 	.word	0x080285e0
 8022f68:	080286d4 	.word	0x080286d4

08022f6c <__ulp>:
 8022f6c:	b082      	sub	sp, #8
 8022f6e:	ed8d 0b00 	vstr	d0, [sp]
 8022f72:	9b01      	ldr	r3, [sp, #4]
 8022f74:	4912      	ldr	r1, [pc, #72]	; (8022fc0 <__ulp+0x54>)
 8022f76:	4019      	ands	r1, r3
 8022f78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022f7c:	2900      	cmp	r1, #0
 8022f7e:	dd05      	ble.n	8022f8c <__ulp+0x20>
 8022f80:	2200      	movs	r2, #0
 8022f82:	460b      	mov	r3, r1
 8022f84:	ec43 2b10 	vmov	d0, r2, r3
 8022f88:	b002      	add	sp, #8
 8022f8a:	4770      	bx	lr
 8022f8c:	4249      	negs	r1, r1
 8022f8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8022f92:	ea4f 5021 	mov.w	r0, r1, asr #20
 8022f96:	f04f 0200 	mov.w	r2, #0
 8022f9a:	f04f 0300 	mov.w	r3, #0
 8022f9e:	da04      	bge.n	8022faa <__ulp+0x3e>
 8022fa0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8022fa4:	fa41 f300 	asr.w	r3, r1, r0
 8022fa8:	e7ec      	b.n	8022f84 <__ulp+0x18>
 8022faa:	f1a0 0114 	sub.w	r1, r0, #20
 8022fae:	291e      	cmp	r1, #30
 8022fb0:	bfda      	itte	le
 8022fb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8022fb6:	fa20 f101 	lsrle.w	r1, r0, r1
 8022fba:	2101      	movgt	r1, #1
 8022fbc:	460a      	mov	r2, r1
 8022fbe:	e7e1      	b.n	8022f84 <__ulp+0x18>
 8022fc0:	7ff00000 	.word	0x7ff00000

08022fc4 <__b2d>:
 8022fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fc6:	6905      	ldr	r5, [r0, #16]
 8022fc8:	f100 0714 	add.w	r7, r0, #20
 8022fcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022fd0:	1f2e      	subs	r6, r5, #4
 8022fd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8022fd6:	4620      	mov	r0, r4
 8022fd8:	f7ff fd52 	bl	8022a80 <__hi0bits>
 8022fdc:	f1c0 0320 	rsb	r3, r0, #32
 8022fe0:	280a      	cmp	r0, #10
 8022fe2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8023060 <__b2d+0x9c>
 8022fe6:	600b      	str	r3, [r1, #0]
 8022fe8:	dc14      	bgt.n	8023014 <__b2d+0x50>
 8022fea:	f1c0 0e0b 	rsb	lr, r0, #11
 8022fee:	fa24 f10e 	lsr.w	r1, r4, lr
 8022ff2:	42b7      	cmp	r7, r6
 8022ff4:	ea41 030c 	orr.w	r3, r1, ip
 8022ff8:	bf34      	ite	cc
 8022ffa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022ffe:	2100      	movcs	r1, #0
 8023000:	3015      	adds	r0, #21
 8023002:	fa04 f000 	lsl.w	r0, r4, r0
 8023006:	fa21 f10e 	lsr.w	r1, r1, lr
 802300a:	ea40 0201 	orr.w	r2, r0, r1
 802300e:	ec43 2b10 	vmov	d0, r2, r3
 8023012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023014:	42b7      	cmp	r7, r6
 8023016:	bf3a      	itte	cc
 8023018:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802301c:	f1a5 0608 	subcc.w	r6, r5, #8
 8023020:	2100      	movcs	r1, #0
 8023022:	380b      	subs	r0, #11
 8023024:	d017      	beq.n	8023056 <__b2d+0x92>
 8023026:	f1c0 0c20 	rsb	ip, r0, #32
 802302a:	fa04 f500 	lsl.w	r5, r4, r0
 802302e:	42be      	cmp	r6, r7
 8023030:	fa21 f40c 	lsr.w	r4, r1, ip
 8023034:	ea45 0504 	orr.w	r5, r5, r4
 8023038:	bf8c      	ite	hi
 802303a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802303e:	2400      	movls	r4, #0
 8023040:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8023044:	fa01 f000 	lsl.w	r0, r1, r0
 8023048:	fa24 f40c 	lsr.w	r4, r4, ip
 802304c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8023050:	ea40 0204 	orr.w	r2, r0, r4
 8023054:	e7db      	b.n	802300e <__b2d+0x4a>
 8023056:	ea44 030c 	orr.w	r3, r4, ip
 802305a:	460a      	mov	r2, r1
 802305c:	e7d7      	b.n	802300e <__b2d+0x4a>
 802305e:	bf00      	nop
 8023060:	3ff00000 	.word	0x3ff00000

08023064 <__d2b>:
 8023064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023068:	4689      	mov	r9, r1
 802306a:	2101      	movs	r1, #1
 802306c:	ec57 6b10 	vmov	r6, r7, d0
 8023070:	4690      	mov	r8, r2
 8023072:	f7ff fc0f 	bl	8022894 <_Balloc>
 8023076:	4604      	mov	r4, r0
 8023078:	b930      	cbnz	r0, 8023088 <__d2b+0x24>
 802307a:	4602      	mov	r2, r0
 802307c:	4b25      	ldr	r3, [pc, #148]	; (8023114 <__d2b+0xb0>)
 802307e:	4826      	ldr	r0, [pc, #152]	; (8023118 <__d2b+0xb4>)
 8023080:	f240 310a 	movw	r1, #778	; 0x30a
 8023084:	f7fe f812 	bl	80210ac <__assert_func>
 8023088:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802308c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8023090:	bb35      	cbnz	r5, 80230e0 <__d2b+0x7c>
 8023092:	2e00      	cmp	r6, #0
 8023094:	9301      	str	r3, [sp, #4]
 8023096:	d028      	beq.n	80230ea <__d2b+0x86>
 8023098:	4668      	mov	r0, sp
 802309a:	9600      	str	r6, [sp, #0]
 802309c:	f7ff fd10 	bl	8022ac0 <__lo0bits>
 80230a0:	9900      	ldr	r1, [sp, #0]
 80230a2:	b300      	cbz	r0, 80230e6 <__d2b+0x82>
 80230a4:	9a01      	ldr	r2, [sp, #4]
 80230a6:	f1c0 0320 	rsb	r3, r0, #32
 80230aa:	fa02 f303 	lsl.w	r3, r2, r3
 80230ae:	430b      	orrs	r3, r1
 80230b0:	40c2      	lsrs	r2, r0
 80230b2:	6163      	str	r3, [r4, #20]
 80230b4:	9201      	str	r2, [sp, #4]
 80230b6:	9b01      	ldr	r3, [sp, #4]
 80230b8:	61a3      	str	r3, [r4, #24]
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	bf14      	ite	ne
 80230be:	2202      	movne	r2, #2
 80230c0:	2201      	moveq	r2, #1
 80230c2:	6122      	str	r2, [r4, #16]
 80230c4:	b1d5      	cbz	r5, 80230fc <__d2b+0x98>
 80230c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80230ca:	4405      	add	r5, r0
 80230cc:	f8c9 5000 	str.w	r5, [r9]
 80230d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80230d4:	f8c8 0000 	str.w	r0, [r8]
 80230d8:	4620      	mov	r0, r4
 80230da:	b003      	add	sp, #12
 80230dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80230e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80230e4:	e7d5      	b.n	8023092 <__d2b+0x2e>
 80230e6:	6161      	str	r1, [r4, #20]
 80230e8:	e7e5      	b.n	80230b6 <__d2b+0x52>
 80230ea:	a801      	add	r0, sp, #4
 80230ec:	f7ff fce8 	bl	8022ac0 <__lo0bits>
 80230f0:	9b01      	ldr	r3, [sp, #4]
 80230f2:	6163      	str	r3, [r4, #20]
 80230f4:	2201      	movs	r2, #1
 80230f6:	6122      	str	r2, [r4, #16]
 80230f8:	3020      	adds	r0, #32
 80230fa:	e7e3      	b.n	80230c4 <__d2b+0x60>
 80230fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023100:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8023104:	f8c9 0000 	str.w	r0, [r9]
 8023108:	6918      	ldr	r0, [r3, #16]
 802310a:	f7ff fcb9 	bl	8022a80 <__hi0bits>
 802310e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023112:	e7df      	b.n	80230d4 <__d2b+0x70>
 8023114:	080285e0 	.word	0x080285e0
 8023118:	080286d4 	.word	0x080286d4

0802311c <__ratio>:
 802311c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023120:	468a      	mov	sl, r1
 8023122:	4669      	mov	r1, sp
 8023124:	4683      	mov	fp, r0
 8023126:	f7ff ff4d 	bl	8022fc4 <__b2d>
 802312a:	a901      	add	r1, sp, #4
 802312c:	4650      	mov	r0, sl
 802312e:	ec59 8b10 	vmov	r8, r9, d0
 8023132:	ee10 6a10 	vmov	r6, s0
 8023136:	f7ff ff45 	bl	8022fc4 <__b2d>
 802313a:	f8db 3010 	ldr.w	r3, [fp, #16]
 802313e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8023142:	eba3 0c02 	sub.w	ip, r3, r2
 8023146:	e9dd 3200 	ldrd	r3, r2, [sp]
 802314a:	1a9b      	subs	r3, r3, r2
 802314c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8023150:	ec55 4b10 	vmov	r4, r5, d0
 8023154:	2b00      	cmp	r3, #0
 8023156:	ee10 0a10 	vmov	r0, s0
 802315a:	bfce      	itee	gt
 802315c:	464a      	movgt	r2, r9
 802315e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8023162:	462a      	movle	r2, r5
 8023164:	464f      	mov	r7, r9
 8023166:	4629      	mov	r1, r5
 8023168:	bfcc      	ite	gt
 802316a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802316e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8023172:	ec47 6b17 	vmov	d7, r6, r7
 8023176:	ec41 0b16 	vmov	d6, r0, r1
 802317a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 802317e:	b003      	add	sp, #12
 8023180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023184 <__copybits>:
 8023184:	3901      	subs	r1, #1
 8023186:	b570      	push	{r4, r5, r6, lr}
 8023188:	1149      	asrs	r1, r1, #5
 802318a:	6914      	ldr	r4, [r2, #16]
 802318c:	3101      	adds	r1, #1
 802318e:	f102 0314 	add.w	r3, r2, #20
 8023192:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8023196:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802319a:	1f05      	subs	r5, r0, #4
 802319c:	42a3      	cmp	r3, r4
 802319e:	d30c      	bcc.n	80231ba <__copybits+0x36>
 80231a0:	1aa3      	subs	r3, r4, r2
 80231a2:	3b11      	subs	r3, #17
 80231a4:	f023 0303 	bic.w	r3, r3, #3
 80231a8:	3211      	adds	r2, #17
 80231aa:	42a2      	cmp	r2, r4
 80231ac:	bf88      	it	hi
 80231ae:	2300      	movhi	r3, #0
 80231b0:	4418      	add	r0, r3
 80231b2:	2300      	movs	r3, #0
 80231b4:	4288      	cmp	r0, r1
 80231b6:	d305      	bcc.n	80231c4 <__copybits+0x40>
 80231b8:	bd70      	pop	{r4, r5, r6, pc}
 80231ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80231be:	f845 6f04 	str.w	r6, [r5, #4]!
 80231c2:	e7eb      	b.n	802319c <__copybits+0x18>
 80231c4:	f840 3b04 	str.w	r3, [r0], #4
 80231c8:	e7f4      	b.n	80231b4 <__copybits+0x30>

080231ca <__any_on>:
 80231ca:	f100 0214 	add.w	r2, r0, #20
 80231ce:	6900      	ldr	r0, [r0, #16]
 80231d0:	114b      	asrs	r3, r1, #5
 80231d2:	4298      	cmp	r0, r3
 80231d4:	b510      	push	{r4, lr}
 80231d6:	db11      	blt.n	80231fc <__any_on+0x32>
 80231d8:	dd0a      	ble.n	80231f0 <__any_on+0x26>
 80231da:	f011 011f 	ands.w	r1, r1, #31
 80231de:	d007      	beq.n	80231f0 <__any_on+0x26>
 80231e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80231e4:	fa24 f001 	lsr.w	r0, r4, r1
 80231e8:	fa00 f101 	lsl.w	r1, r0, r1
 80231ec:	428c      	cmp	r4, r1
 80231ee:	d10b      	bne.n	8023208 <__any_on+0x3e>
 80231f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80231f4:	4293      	cmp	r3, r2
 80231f6:	d803      	bhi.n	8023200 <__any_on+0x36>
 80231f8:	2000      	movs	r0, #0
 80231fa:	bd10      	pop	{r4, pc}
 80231fc:	4603      	mov	r3, r0
 80231fe:	e7f7      	b.n	80231f0 <__any_on+0x26>
 8023200:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023204:	2900      	cmp	r1, #0
 8023206:	d0f5      	beq.n	80231f4 <__any_on+0x2a>
 8023208:	2001      	movs	r0, #1
 802320a:	e7f6      	b.n	80231fa <__any_on+0x30>

0802320c <_calloc_r>:
 802320c:	b513      	push	{r0, r1, r4, lr}
 802320e:	434a      	muls	r2, r1
 8023210:	4611      	mov	r1, r2
 8023212:	9201      	str	r2, [sp, #4]
 8023214:	f7fc f854 	bl	801f2c0 <_malloc_r>
 8023218:	4604      	mov	r4, r0
 802321a:	b118      	cbz	r0, 8023224 <_calloc_r+0x18>
 802321c:	9a01      	ldr	r2, [sp, #4]
 802321e:	2100      	movs	r1, #0
 8023220:	f7fb fff6 	bl	801f210 <memset>
 8023224:	4620      	mov	r0, r4
 8023226:	b002      	add	sp, #8
 8023228:	bd10      	pop	{r4, pc}

0802322a <__ssputs_r>:
 802322a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802322e:	688e      	ldr	r6, [r1, #8]
 8023230:	429e      	cmp	r6, r3
 8023232:	4682      	mov	sl, r0
 8023234:	460c      	mov	r4, r1
 8023236:	4690      	mov	r8, r2
 8023238:	461f      	mov	r7, r3
 802323a:	d838      	bhi.n	80232ae <__ssputs_r+0x84>
 802323c:	898a      	ldrh	r2, [r1, #12]
 802323e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023242:	d032      	beq.n	80232aa <__ssputs_r+0x80>
 8023244:	6825      	ldr	r5, [r4, #0]
 8023246:	6909      	ldr	r1, [r1, #16]
 8023248:	eba5 0901 	sub.w	r9, r5, r1
 802324c:	6965      	ldr	r5, [r4, #20]
 802324e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023252:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023256:	3301      	adds	r3, #1
 8023258:	444b      	add	r3, r9
 802325a:	106d      	asrs	r5, r5, #1
 802325c:	429d      	cmp	r5, r3
 802325e:	bf38      	it	cc
 8023260:	461d      	movcc	r5, r3
 8023262:	0553      	lsls	r3, r2, #21
 8023264:	d531      	bpl.n	80232ca <__ssputs_r+0xa0>
 8023266:	4629      	mov	r1, r5
 8023268:	f7fc f82a 	bl	801f2c0 <_malloc_r>
 802326c:	4606      	mov	r6, r0
 802326e:	b950      	cbnz	r0, 8023286 <__ssputs_r+0x5c>
 8023270:	230c      	movs	r3, #12
 8023272:	f8ca 3000 	str.w	r3, [sl]
 8023276:	89a3      	ldrh	r3, [r4, #12]
 8023278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802327c:	81a3      	strh	r3, [r4, #12]
 802327e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023286:	6921      	ldr	r1, [r4, #16]
 8023288:	464a      	mov	r2, r9
 802328a:	f7fb ff99 	bl	801f1c0 <memcpy>
 802328e:	89a3      	ldrh	r3, [r4, #12]
 8023290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023298:	81a3      	strh	r3, [r4, #12]
 802329a:	6126      	str	r6, [r4, #16]
 802329c:	6165      	str	r5, [r4, #20]
 802329e:	444e      	add	r6, r9
 80232a0:	eba5 0509 	sub.w	r5, r5, r9
 80232a4:	6026      	str	r6, [r4, #0]
 80232a6:	60a5      	str	r5, [r4, #8]
 80232a8:	463e      	mov	r6, r7
 80232aa:	42be      	cmp	r6, r7
 80232ac:	d900      	bls.n	80232b0 <__ssputs_r+0x86>
 80232ae:	463e      	mov	r6, r7
 80232b0:	4632      	mov	r2, r6
 80232b2:	6820      	ldr	r0, [r4, #0]
 80232b4:	4641      	mov	r1, r8
 80232b6:	f7fb ff91 	bl	801f1dc <memmove>
 80232ba:	68a3      	ldr	r3, [r4, #8]
 80232bc:	6822      	ldr	r2, [r4, #0]
 80232be:	1b9b      	subs	r3, r3, r6
 80232c0:	4432      	add	r2, r6
 80232c2:	60a3      	str	r3, [r4, #8]
 80232c4:	6022      	str	r2, [r4, #0]
 80232c6:	2000      	movs	r0, #0
 80232c8:	e7db      	b.n	8023282 <__ssputs_r+0x58>
 80232ca:	462a      	mov	r2, r5
 80232cc:	f000 fb1a 	bl	8023904 <_realloc_r>
 80232d0:	4606      	mov	r6, r0
 80232d2:	2800      	cmp	r0, #0
 80232d4:	d1e1      	bne.n	802329a <__ssputs_r+0x70>
 80232d6:	6921      	ldr	r1, [r4, #16]
 80232d8:	4650      	mov	r0, sl
 80232da:	f7fb ffa1 	bl	801f220 <_free_r>
 80232de:	e7c7      	b.n	8023270 <__ssputs_r+0x46>

080232e0 <_svfiprintf_r>:
 80232e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232e4:	4698      	mov	r8, r3
 80232e6:	898b      	ldrh	r3, [r1, #12]
 80232e8:	061b      	lsls	r3, r3, #24
 80232ea:	b09d      	sub	sp, #116	; 0x74
 80232ec:	4607      	mov	r7, r0
 80232ee:	460d      	mov	r5, r1
 80232f0:	4614      	mov	r4, r2
 80232f2:	d50e      	bpl.n	8023312 <_svfiprintf_r+0x32>
 80232f4:	690b      	ldr	r3, [r1, #16]
 80232f6:	b963      	cbnz	r3, 8023312 <_svfiprintf_r+0x32>
 80232f8:	2140      	movs	r1, #64	; 0x40
 80232fa:	f7fb ffe1 	bl	801f2c0 <_malloc_r>
 80232fe:	6028      	str	r0, [r5, #0]
 8023300:	6128      	str	r0, [r5, #16]
 8023302:	b920      	cbnz	r0, 802330e <_svfiprintf_r+0x2e>
 8023304:	230c      	movs	r3, #12
 8023306:	603b      	str	r3, [r7, #0]
 8023308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802330c:	e0d1      	b.n	80234b2 <_svfiprintf_r+0x1d2>
 802330e:	2340      	movs	r3, #64	; 0x40
 8023310:	616b      	str	r3, [r5, #20]
 8023312:	2300      	movs	r3, #0
 8023314:	9309      	str	r3, [sp, #36]	; 0x24
 8023316:	2320      	movs	r3, #32
 8023318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802331c:	f8cd 800c 	str.w	r8, [sp, #12]
 8023320:	2330      	movs	r3, #48	; 0x30
 8023322:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80234cc <_svfiprintf_r+0x1ec>
 8023326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802332a:	f04f 0901 	mov.w	r9, #1
 802332e:	4623      	mov	r3, r4
 8023330:	469a      	mov	sl, r3
 8023332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023336:	b10a      	cbz	r2, 802333c <_svfiprintf_r+0x5c>
 8023338:	2a25      	cmp	r2, #37	; 0x25
 802333a:	d1f9      	bne.n	8023330 <_svfiprintf_r+0x50>
 802333c:	ebba 0b04 	subs.w	fp, sl, r4
 8023340:	d00b      	beq.n	802335a <_svfiprintf_r+0x7a>
 8023342:	465b      	mov	r3, fp
 8023344:	4622      	mov	r2, r4
 8023346:	4629      	mov	r1, r5
 8023348:	4638      	mov	r0, r7
 802334a:	f7ff ff6e 	bl	802322a <__ssputs_r>
 802334e:	3001      	adds	r0, #1
 8023350:	f000 80aa 	beq.w	80234a8 <_svfiprintf_r+0x1c8>
 8023354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023356:	445a      	add	r2, fp
 8023358:	9209      	str	r2, [sp, #36]	; 0x24
 802335a:	f89a 3000 	ldrb.w	r3, [sl]
 802335e:	2b00      	cmp	r3, #0
 8023360:	f000 80a2 	beq.w	80234a8 <_svfiprintf_r+0x1c8>
 8023364:	2300      	movs	r3, #0
 8023366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802336a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802336e:	f10a 0a01 	add.w	sl, sl, #1
 8023372:	9304      	str	r3, [sp, #16]
 8023374:	9307      	str	r3, [sp, #28]
 8023376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802337a:	931a      	str	r3, [sp, #104]	; 0x68
 802337c:	4654      	mov	r4, sl
 802337e:	2205      	movs	r2, #5
 8023380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023384:	4851      	ldr	r0, [pc, #324]	; (80234cc <_svfiprintf_r+0x1ec>)
 8023386:	f7dc ffb3 	bl	80002f0 <memchr>
 802338a:	9a04      	ldr	r2, [sp, #16]
 802338c:	b9d8      	cbnz	r0, 80233c6 <_svfiprintf_r+0xe6>
 802338e:	06d0      	lsls	r0, r2, #27
 8023390:	bf44      	itt	mi
 8023392:	2320      	movmi	r3, #32
 8023394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023398:	0711      	lsls	r1, r2, #28
 802339a:	bf44      	itt	mi
 802339c:	232b      	movmi	r3, #43	; 0x2b
 802339e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233a2:	f89a 3000 	ldrb.w	r3, [sl]
 80233a6:	2b2a      	cmp	r3, #42	; 0x2a
 80233a8:	d015      	beq.n	80233d6 <_svfiprintf_r+0xf6>
 80233aa:	9a07      	ldr	r2, [sp, #28]
 80233ac:	4654      	mov	r4, sl
 80233ae:	2000      	movs	r0, #0
 80233b0:	f04f 0c0a 	mov.w	ip, #10
 80233b4:	4621      	mov	r1, r4
 80233b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233ba:	3b30      	subs	r3, #48	; 0x30
 80233bc:	2b09      	cmp	r3, #9
 80233be:	d94e      	bls.n	802345e <_svfiprintf_r+0x17e>
 80233c0:	b1b0      	cbz	r0, 80233f0 <_svfiprintf_r+0x110>
 80233c2:	9207      	str	r2, [sp, #28]
 80233c4:	e014      	b.n	80233f0 <_svfiprintf_r+0x110>
 80233c6:	eba0 0308 	sub.w	r3, r0, r8
 80233ca:	fa09 f303 	lsl.w	r3, r9, r3
 80233ce:	4313      	orrs	r3, r2
 80233d0:	9304      	str	r3, [sp, #16]
 80233d2:	46a2      	mov	sl, r4
 80233d4:	e7d2      	b.n	802337c <_svfiprintf_r+0x9c>
 80233d6:	9b03      	ldr	r3, [sp, #12]
 80233d8:	1d19      	adds	r1, r3, #4
 80233da:	681b      	ldr	r3, [r3, #0]
 80233dc:	9103      	str	r1, [sp, #12]
 80233de:	2b00      	cmp	r3, #0
 80233e0:	bfbb      	ittet	lt
 80233e2:	425b      	neglt	r3, r3
 80233e4:	f042 0202 	orrlt.w	r2, r2, #2
 80233e8:	9307      	strge	r3, [sp, #28]
 80233ea:	9307      	strlt	r3, [sp, #28]
 80233ec:	bfb8      	it	lt
 80233ee:	9204      	strlt	r2, [sp, #16]
 80233f0:	7823      	ldrb	r3, [r4, #0]
 80233f2:	2b2e      	cmp	r3, #46	; 0x2e
 80233f4:	d10c      	bne.n	8023410 <_svfiprintf_r+0x130>
 80233f6:	7863      	ldrb	r3, [r4, #1]
 80233f8:	2b2a      	cmp	r3, #42	; 0x2a
 80233fa:	d135      	bne.n	8023468 <_svfiprintf_r+0x188>
 80233fc:	9b03      	ldr	r3, [sp, #12]
 80233fe:	1d1a      	adds	r2, r3, #4
 8023400:	681b      	ldr	r3, [r3, #0]
 8023402:	9203      	str	r2, [sp, #12]
 8023404:	2b00      	cmp	r3, #0
 8023406:	bfb8      	it	lt
 8023408:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802340c:	3402      	adds	r4, #2
 802340e:	9305      	str	r3, [sp, #20]
 8023410:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80234dc <_svfiprintf_r+0x1fc>
 8023414:	7821      	ldrb	r1, [r4, #0]
 8023416:	2203      	movs	r2, #3
 8023418:	4650      	mov	r0, sl
 802341a:	f7dc ff69 	bl	80002f0 <memchr>
 802341e:	b140      	cbz	r0, 8023432 <_svfiprintf_r+0x152>
 8023420:	2340      	movs	r3, #64	; 0x40
 8023422:	eba0 000a 	sub.w	r0, r0, sl
 8023426:	fa03 f000 	lsl.w	r0, r3, r0
 802342a:	9b04      	ldr	r3, [sp, #16]
 802342c:	4303      	orrs	r3, r0
 802342e:	3401      	adds	r4, #1
 8023430:	9304      	str	r3, [sp, #16]
 8023432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023436:	4826      	ldr	r0, [pc, #152]	; (80234d0 <_svfiprintf_r+0x1f0>)
 8023438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802343c:	2206      	movs	r2, #6
 802343e:	f7dc ff57 	bl	80002f0 <memchr>
 8023442:	2800      	cmp	r0, #0
 8023444:	d038      	beq.n	80234b8 <_svfiprintf_r+0x1d8>
 8023446:	4b23      	ldr	r3, [pc, #140]	; (80234d4 <_svfiprintf_r+0x1f4>)
 8023448:	bb1b      	cbnz	r3, 8023492 <_svfiprintf_r+0x1b2>
 802344a:	9b03      	ldr	r3, [sp, #12]
 802344c:	3307      	adds	r3, #7
 802344e:	f023 0307 	bic.w	r3, r3, #7
 8023452:	3308      	adds	r3, #8
 8023454:	9303      	str	r3, [sp, #12]
 8023456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023458:	4433      	add	r3, r6
 802345a:	9309      	str	r3, [sp, #36]	; 0x24
 802345c:	e767      	b.n	802332e <_svfiprintf_r+0x4e>
 802345e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023462:	460c      	mov	r4, r1
 8023464:	2001      	movs	r0, #1
 8023466:	e7a5      	b.n	80233b4 <_svfiprintf_r+0xd4>
 8023468:	2300      	movs	r3, #0
 802346a:	3401      	adds	r4, #1
 802346c:	9305      	str	r3, [sp, #20]
 802346e:	4619      	mov	r1, r3
 8023470:	f04f 0c0a 	mov.w	ip, #10
 8023474:	4620      	mov	r0, r4
 8023476:	f810 2b01 	ldrb.w	r2, [r0], #1
 802347a:	3a30      	subs	r2, #48	; 0x30
 802347c:	2a09      	cmp	r2, #9
 802347e:	d903      	bls.n	8023488 <_svfiprintf_r+0x1a8>
 8023480:	2b00      	cmp	r3, #0
 8023482:	d0c5      	beq.n	8023410 <_svfiprintf_r+0x130>
 8023484:	9105      	str	r1, [sp, #20]
 8023486:	e7c3      	b.n	8023410 <_svfiprintf_r+0x130>
 8023488:	fb0c 2101 	mla	r1, ip, r1, r2
 802348c:	4604      	mov	r4, r0
 802348e:	2301      	movs	r3, #1
 8023490:	e7f0      	b.n	8023474 <_svfiprintf_r+0x194>
 8023492:	ab03      	add	r3, sp, #12
 8023494:	9300      	str	r3, [sp, #0]
 8023496:	462a      	mov	r2, r5
 8023498:	4b0f      	ldr	r3, [pc, #60]	; (80234d8 <_svfiprintf_r+0x1f8>)
 802349a:	a904      	add	r1, sp, #16
 802349c:	4638      	mov	r0, r7
 802349e:	f7fb fffb 	bl	801f498 <_printf_float>
 80234a2:	1c42      	adds	r2, r0, #1
 80234a4:	4606      	mov	r6, r0
 80234a6:	d1d6      	bne.n	8023456 <_svfiprintf_r+0x176>
 80234a8:	89ab      	ldrh	r3, [r5, #12]
 80234aa:	065b      	lsls	r3, r3, #25
 80234ac:	f53f af2c 	bmi.w	8023308 <_svfiprintf_r+0x28>
 80234b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234b2:	b01d      	add	sp, #116	; 0x74
 80234b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234b8:	ab03      	add	r3, sp, #12
 80234ba:	9300      	str	r3, [sp, #0]
 80234bc:	462a      	mov	r2, r5
 80234be:	4b06      	ldr	r3, [pc, #24]	; (80234d8 <_svfiprintf_r+0x1f8>)
 80234c0:	a904      	add	r1, sp, #16
 80234c2:	4638      	mov	r0, r7
 80234c4:	f7fc fa74 	bl	801f9b0 <_printf_i>
 80234c8:	e7eb      	b.n	80234a2 <_svfiprintf_r+0x1c2>
 80234ca:	bf00      	nop
 80234cc:	08028834 	.word	0x08028834
 80234d0:	0802883e 	.word	0x0802883e
 80234d4:	0801f499 	.word	0x0801f499
 80234d8:	0802322b 	.word	0x0802322b
 80234dc:	0802883a 	.word	0x0802883a

080234e0 <__sfputc_r>:
 80234e0:	6893      	ldr	r3, [r2, #8]
 80234e2:	3b01      	subs	r3, #1
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	b410      	push	{r4}
 80234e8:	6093      	str	r3, [r2, #8]
 80234ea:	da08      	bge.n	80234fe <__sfputc_r+0x1e>
 80234ec:	6994      	ldr	r4, [r2, #24]
 80234ee:	42a3      	cmp	r3, r4
 80234f0:	db01      	blt.n	80234f6 <__sfputc_r+0x16>
 80234f2:	290a      	cmp	r1, #10
 80234f4:	d103      	bne.n	80234fe <__sfputc_r+0x1e>
 80234f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234fa:	f7fd bd17 	b.w	8020f2c <__swbuf_r>
 80234fe:	6813      	ldr	r3, [r2, #0]
 8023500:	1c58      	adds	r0, r3, #1
 8023502:	6010      	str	r0, [r2, #0]
 8023504:	7019      	strb	r1, [r3, #0]
 8023506:	4608      	mov	r0, r1
 8023508:	f85d 4b04 	ldr.w	r4, [sp], #4
 802350c:	4770      	bx	lr

0802350e <__sfputs_r>:
 802350e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023510:	4606      	mov	r6, r0
 8023512:	460f      	mov	r7, r1
 8023514:	4614      	mov	r4, r2
 8023516:	18d5      	adds	r5, r2, r3
 8023518:	42ac      	cmp	r4, r5
 802351a:	d101      	bne.n	8023520 <__sfputs_r+0x12>
 802351c:	2000      	movs	r0, #0
 802351e:	e007      	b.n	8023530 <__sfputs_r+0x22>
 8023520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023524:	463a      	mov	r2, r7
 8023526:	4630      	mov	r0, r6
 8023528:	f7ff ffda 	bl	80234e0 <__sfputc_r>
 802352c:	1c43      	adds	r3, r0, #1
 802352e:	d1f3      	bne.n	8023518 <__sfputs_r+0xa>
 8023530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023534 <_vfiprintf_r>:
 8023534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023538:	460d      	mov	r5, r1
 802353a:	b09d      	sub	sp, #116	; 0x74
 802353c:	4614      	mov	r4, r2
 802353e:	4698      	mov	r8, r3
 8023540:	4606      	mov	r6, r0
 8023542:	b118      	cbz	r0, 802354c <_vfiprintf_r+0x18>
 8023544:	6983      	ldr	r3, [r0, #24]
 8023546:	b90b      	cbnz	r3, 802354c <_vfiprintf_r+0x18>
 8023548:	f7fe fcfc 	bl	8021f44 <__sinit>
 802354c:	4b89      	ldr	r3, [pc, #548]	; (8023774 <_vfiprintf_r+0x240>)
 802354e:	429d      	cmp	r5, r3
 8023550:	d11b      	bne.n	802358a <_vfiprintf_r+0x56>
 8023552:	6875      	ldr	r5, [r6, #4]
 8023554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023556:	07d9      	lsls	r1, r3, #31
 8023558:	d405      	bmi.n	8023566 <_vfiprintf_r+0x32>
 802355a:	89ab      	ldrh	r3, [r5, #12]
 802355c:	059a      	lsls	r2, r3, #22
 802355e:	d402      	bmi.n	8023566 <_vfiprintf_r+0x32>
 8023560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023562:	f7ff f912 	bl	802278a <__retarget_lock_acquire_recursive>
 8023566:	89ab      	ldrh	r3, [r5, #12]
 8023568:	071b      	lsls	r3, r3, #28
 802356a:	d501      	bpl.n	8023570 <_vfiprintf_r+0x3c>
 802356c:	692b      	ldr	r3, [r5, #16]
 802356e:	b9eb      	cbnz	r3, 80235ac <_vfiprintf_r+0x78>
 8023570:	4629      	mov	r1, r5
 8023572:	4630      	mov	r0, r6
 8023574:	f7fd fd2c 	bl	8020fd0 <__swsetup_r>
 8023578:	b1c0      	cbz	r0, 80235ac <_vfiprintf_r+0x78>
 802357a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802357c:	07dc      	lsls	r4, r3, #31
 802357e:	d50e      	bpl.n	802359e <_vfiprintf_r+0x6a>
 8023580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023584:	b01d      	add	sp, #116	; 0x74
 8023586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802358a:	4b7b      	ldr	r3, [pc, #492]	; (8023778 <_vfiprintf_r+0x244>)
 802358c:	429d      	cmp	r5, r3
 802358e:	d101      	bne.n	8023594 <_vfiprintf_r+0x60>
 8023590:	68b5      	ldr	r5, [r6, #8]
 8023592:	e7df      	b.n	8023554 <_vfiprintf_r+0x20>
 8023594:	4b79      	ldr	r3, [pc, #484]	; (802377c <_vfiprintf_r+0x248>)
 8023596:	429d      	cmp	r5, r3
 8023598:	bf08      	it	eq
 802359a:	68f5      	ldreq	r5, [r6, #12]
 802359c:	e7da      	b.n	8023554 <_vfiprintf_r+0x20>
 802359e:	89ab      	ldrh	r3, [r5, #12]
 80235a0:	0598      	lsls	r0, r3, #22
 80235a2:	d4ed      	bmi.n	8023580 <_vfiprintf_r+0x4c>
 80235a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80235a6:	f7ff f8f1 	bl	802278c <__retarget_lock_release_recursive>
 80235aa:	e7e9      	b.n	8023580 <_vfiprintf_r+0x4c>
 80235ac:	2300      	movs	r3, #0
 80235ae:	9309      	str	r3, [sp, #36]	; 0x24
 80235b0:	2320      	movs	r3, #32
 80235b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80235b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80235ba:	2330      	movs	r3, #48	; 0x30
 80235bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023780 <_vfiprintf_r+0x24c>
 80235c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80235c4:	f04f 0901 	mov.w	r9, #1
 80235c8:	4623      	mov	r3, r4
 80235ca:	469a      	mov	sl, r3
 80235cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80235d0:	b10a      	cbz	r2, 80235d6 <_vfiprintf_r+0xa2>
 80235d2:	2a25      	cmp	r2, #37	; 0x25
 80235d4:	d1f9      	bne.n	80235ca <_vfiprintf_r+0x96>
 80235d6:	ebba 0b04 	subs.w	fp, sl, r4
 80235da:	d00b      	beq.n	80235f4 <_vfiprintf_r+0xc0>
 80235dc:	465b      	mov	r3, fp
 80235de:	4622      	mov	r2, r4
 80235e0:	4629      	mov	r1, r5
 80235e2:	4630      	mov	r0, r6
 80235e4:	f7ff ff93 	bl	802350e <__sfputs_r>
 80235e8:	3001      	adds	r0, #1
 80235ea:	f000 80aa 	beq.w	8023742 <_vfiprintf_r+0x20e>
 80235ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80235f0:	445a      	add	r2, fp
 80235f2:	9209      	str	r2, [sp, #36]	; 0x24
 80235f4:	f89a 3000 	ldrb.w	r3, [sl]
 80235f8:	2b00      	cmp	r3, #0
 80235fa:	f000 80a2 	beq.w	8023742 <_vfiprintf_r+0x20e>
 80235fe:	2300      	movs	r3, #0
 8023600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023608:	f10a 0a01 	add.w	sl, sl, #1
 802360c:	9304      	str	r3, [sp, #16]
 802360e:	9307      	str	r3, [sp, #28]
 8023610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023614:	931a      	str	r3, [sp, #104]	; 0x68
 8023616:	4654      	mov	r4, sl
 8023618:	2205      	movs	r2, #5
 802361a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802361e:	4858      	ldr	r0, [pc, #352]	; (8023780 <_vfiprintf_r+0x24c>)
 8023620:	f7dc fe66 	bl	80002f0 <memchr>
 8023624:	9a04      	ldr	r2, [sp, #16]
 8023626:	b9d8      	cbnz	r0, 8023660 <_vfiprintf_r+0x12c>
 8023628:	06d1      	lsls	r1, r2, #27
 802362a:	bf44      	itt	mi
 802362c:	2320      	movmi	r3, #32
 802362e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023632:	0713      	lsls	r3, r2, #28
 8023634:	bf44      	itt	mi
 8023636:	232b      	movmi	r3, #43	; 0x2b
 8023638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802363c:	f89a 3000 	ldrb.w	r3, [sl]
 8023640:	2b2a      	cmp	r3, #42	; 0x2a
 8023642:	d015      	beq.n	8023670 <_vfiprintf_r+0x13c>
 8023644:	9a07      	ldr	r2, [sp, #28]
 8023646:	4654      	mov	r4, sl
 8023648:	2000      	movs	r0, #0
 802364a:	f04f 0c0a 	mov.w	ip, #10
 802364e:	4621      	mov	r1, r4
 8023650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023654:	3b30      	subs	r3, #48	; 0x30
 8023656:	2b09      	cmp	r3, #9
 8023658:	d94e      	bls.n	80236f8 <_vfiprintf_r+0x1c4>
 802365a:	b1b0      	cbz	r0, 802368a <_vfiprintf_r+0x156>
 802365c:	9207      	str	r2, [sp, #28]
 802365e:	e014      	b.n	802368a <_vfiprintf_r+0x156>
 8023660:	eba0 0308 	sub.w	r3, r0, r8
 8023664:	fa09 f303 	lsl.w	r3, r9, r3
 8023668:	4313      	orrs	r3, r2
 802366a:	9304      	str	r3, [sp, #16]
 802366c:	46a2      	mov	sl, r4
 802366e:	e7d2      	b.n	8023616 <_vfiprintf_r+0xe2>
 8023670:	9b03      	ldr	r3, [sp, #12]
 8023672:	1d19      	adds	r1, r3, #4
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	9103      	str	r1, [sp, #12]
 8023678:	2b00      	cmp	r3, #0
 802367a:	bfbb      	ittet	lt
 802367c:	425b      	neglt	r3, r3
 802367e:	f042 0202 	orrlt.w	r2, r2, #2
 8023682:	9307      	strge	r3, [sp, #28]
 8023684:	9307      	strlt	r3, [sp, #28]
 8023686:	bfb8      	it	lt
 8023688:	9204      	strlt	r2, [sp, #16]
 802368a:	7823      	ldrb	r3, [r4, #0]
 802368c:	2b2e      	cmp	r3, #46	; 0x2e
 802368e:	d10c      	bne.n	80236aa <_vfiprintf_r+0x176>
 8023690:	7863      	ldrb	r3, [r4, #1]
 8023692:	2b2a      	cmp	r3, #42	; 0x2a
 8023694:	d135      	bne.n	8023702 <_vfiprintf_r+0x1ce>
 8023696:	9b03      	ldr	r3, [sp, #12]
 8023698:	1d1a      	adds	r2, r3, #4
 802369a:	681b      	ldr	r3, [r3, #0]
 802369c:	9203      	str	r2, [sp, #12]
 802369e:	2b00      	cmp	r3, #0
 80236a0:	bfb8      	it	lt
 80236a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80236a6:	3402      	adds	r4, #2
 80236a8:	9305      	str	r3, [sp, #20]
 80236aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023790 <_vfiprintf_r+0x25c>
 80236ae:	7821      	ldrb	r1, [r4, #0]
 80236b0:	2203      	movs	r2, #3
 80236b2:	4650      	mov	r0, sl
 80236b4:	f7dc fe1c 	bl	80002f0 <memchr>
 80236b8:	b140      	cbz	r0, 80236cc <_vfiprintf_r+0x198>
 80236ba:	2340      	movs	r3, #64	; 0x40
 80236bc:	eba0 000a 	sub.w	r0, r0, sl
 80236c0:	fa03 f000 	lsl.w	r0, r3, r0
 80236c4:	9b04      	ldr	r3, [sp, #16]
 80236c6:	4303      	orrs	r3, r0
 80236c8:	3401      	adds	r4, #1
 80236ca:	9304      	str	r3, [sp, #16]
 80236cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80236d0:	482c      	ldr	r0, [pc, #176]	; (8023784 <_vfiprintf_r+0x250>)
 80236d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80236d6:	2206      	movs	r2, #6
 80236d8:	f7dc fe0a 	bl	80002f0 <memchr>
 80236dc:	2800      	cmp	r0, #0
 80236de:	d03f      	beq.n	8023760 <_vfiprintf_r+0x22c>
 80236e0:	4b29      	ldr	r3, [pc, #164]	; (8023788 <_vfiprintf_r+0x254>)
 80236e2:	bb1b      	cbnz	r3, 802372c <_vfiprintf_r+0x1f8>
 80236e4:	9b03      	ldr	r3, [sp, #12]
 80236e6:	3307      	adds	r3, #7
 80236e8:	f023 0307 	bic.w	r3, r3, #7
 80236ec:	3308      	adds	r3, #8
 80236ee:	9303      	str	r3, [sp, #12]
 80236f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236f2:	443b      	add	r3, r7
 80236f4:	9309      	str	r3, [sp, #36]	; 0x24
 80236f6:	e767      	b.n	80235c8 <_vfiprintf_r+0x94>
 80236f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80236fc:	460c      	mov	r4, r1
 80236fe:	2001      	movs	r0, #1
 8023700:	e7a5      	b.n	802364e <_vfiprintf_r+0x11a>
 8023702:	2300      	movs	r3, #0
 8023704:	3401      	adds	r4, #1
 8023706:	9305      	str	r3, [sp, #20]
 8023708:	4619      	mov	r1, r3
 802370a:	f04f 0c0a 	mov.w	ip, #10
 802370e:	4620      	mov	r0, r4
 8023710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023714:	3a30      	subs	r2, #48	; 0x30
 8023716:	2a09      	cmp	r2, #9
 8023718:	d903      	bls.n	8023722 <_vfiprintf_r+0x1ee>
 802371a:	2b00      	cmp	r3, #0
 802371c:	d0c5      	beq.n	80236aa <_vfiprintf_r+0x176>
 802371e:	9105      	str	r1, [sp, #20]
 8023720:	e7c3      	b.n	80236aa <_vfiprintf_r+0x176>
 8023722:	fb0c 2101 	mla	r1, ip, r1, r2
 8023726:	4604      	mov	r4, r0
 8023728:	2301      	movs	r3, #1
 802372a:	e7f0      	b.n	802370e <_vfiprintf_r+0x1da>
 802372c:	ab03      	add	r3, sp, #12
 802372e:	9300      	str	r3, [sp, #0]
 8023730:	462a      	mov	r2, r5
 8023732:	4b16      	ldr	r3, [pc, #88]	; (802378c <_vfiprintf_r+0x258>)
 8023734:	a904      	add	r1, sp, #16
 8023736:	4630      	mov	r0, r6
 8023738:	f7fb feae 	bl	801f498 <_printf_float>
 802373c:	4607      	mov	r7, r0
 802373e:	1c78      	adds	r0, r7, #1
 8023740:	d1d6      	bne.n	80236f0 <_vfiprintf_r+0x1bc>
 8023742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023744:	07d9      	lsls	r1, r3, #31
 8023746:	d405      	bmi.n	8023754 <_vfiprintf_r+0x220>
 8023748:	89ab      	ldrh	r3, [r5, #12]
 802374a:	059a      	lsls	r2, r3, #22
 802374c:	d402      	bmi.n	8023754 <_vfiprintf_r+0x220>
 802374e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023750:	f7ff f81c 	bl	802278c <__retarget_lock_release_recursive>
 8023754:	89ab      	ldrh	r3, [r5, #12]
 8023756:	065b      	lsls	r3, r3, #25
 8023758:	f53f af12 	bmi.w	8023580 <_vfiprintf_r+0x4c>
 802375c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802375e:	e711      	b.n	8023584 <_vfiprintf_r+0x50>
 8023760:	ab03      	add	r3, sp, #12
 8023762:	9300      	str	r3, [sp, #0]
 8023764:	462a      	mov	r2, r5
 8023766:	4b09      	ldr	r3, [pc, #36]	; (802378c <_vfiprintf_r+0x258>)
 8023768:	a904      	add	r1, sp, #16
 802376a:	4630      	mov	r0, r6
 802376c:	f7fc f920 	bl	801f9b0 <_printf_i>
 8023770:	e7e4      	b.n	802373c <_vfiprintf_r+0x208>
 8023772:	bf00      	nop
 8023774:	08028614 	.word	0x08028614
 8023778:	08028634 	.word	0x08028634
 802377c:	080285f4 	.word	0x080285f4
 8023780:	08028834 	.word	0x08028834
 8023784:	0802883e 	.word	0x0802883e
 8023788:	0801f499 	.word	0x0801f499
 802378c:	0802350f 	.word	0x0802350f
 8023790:	0802883a 	.word	0x0802883a
 8023794:	00000000 	.word	0x00000000

08023798 <nan>:
 8023798:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80237a0 <nan+0x8>
 802379c:	4770      	bx	lr
 802379e:	bf00      	nop
 80237a0:	00000000 	.word	0x00000000
 80237a4:	7ff80000 	.word	0x7ff80000

080237a8 <__sread>:
 80237a8:	b510      	push	{r4, lr}
 80237aa:	460c      	mov	r4, r1
 80237ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80237b0:	f000 f8ce 	bl	8023950 <_read_r>
 80237b4:	2800      	cmp	r0, #0
 80237b6:	bfab      	itete	ge
 80237b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80237ba:	89a3      	ldrhlt	r3, [r4, #12]
 80237bc:	181b      	addge	r3, r3, r0
 80237be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80237c2:	bfac      	ite	ge
 80237c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80237c6:	81a3      	strhlt	r3, [r4, #12]
 80237c8:	bd10      	pop	{r4, pc}

080237ca <__swrite>:
 80237ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80237ce:	461f      	mov	r7, r3
 80237d0:	898b      	ldrh	r3, [r1, #12]
 80237d2:	05db      	lsls	r3, r3, #23
 80237d4:	4605      	mov	r5, r0
 80237d6:	460c      	mov	r4, r1
 80237d8:	4616      	mov	r6, r2
 80237da:	d505      	bpl.n	80237e8 <__swrite+0x1e>
 80237dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80237e0:	2302      	movs	r3, #2
 80237e2:	2200      	movs	r2, #0
 80237e4:	f000 f87c 	bl	80238e0 <_lseek_r>
 80237e8:	89a3      	ldrh	r3, [r4, #12]
 80237ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80237ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80237f2:	81a3      	strh	r3, [r4, #12]
 80237f4:	4632      	mov	r2, r6
 80237f6:	463b      	mov	r3, r7
 80237f8:	4628      	mov	r0, r5
 80237fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80237fe:	f000 b823 	b.w	8023848 <_write_r>

08023802 <__sseek>:
 8023802:	b510      	push	{r4, lr}
 8023804:	460c      	mov	r4, r1
 8023806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802380a:	f000 f869 	bl	80238e0 <_lseek_r>
 802380e:	1c43      	adds	r3, r0, #1
 8023810:	89a3      	ldrh	r3, [r4, #12]
 8023812:	bf15      	itete	ne
 8023814:	6560      	strne	r0, [r4, #84]	; 0x54
 8023816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802381a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802381e:	81a3      	strheq	r3, [r4, #12]
 8023820:	bf18      	it	ne
 8023822:	81a3      	strhne	r3, [r4, #12]
 8023824:	bd10      	pop	{r4, pc}

08023826 <__sclose>:
 8023826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802382a:	f000 b827 	b.w	802387c <_close_r>

0802382e <__ascii_wctomb>:
 802382e:	b149      	cbz	r1, 8023844 <__ascii_wctomb+0x16>
 8023830:	2aff      	cmp	r2, #255	; 0xff
 8023832:	bf85      	ittet	hi
 8023834:	238a      	movhi	r3, #138	; 0x8a
 8023836:	6003      	strhi	r3, [r0, #0]
 8023838:	700a      	strbls	r2, [r1, #0]
 802383a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802383e:	bf98      	it	ls
 8023840:	2001      	movls	r0, #1
 8023842:	4770      	bx	lr
 8023844:	4608      	mov	r0, r1
 8023846:	4770      	bx	lr

08023848 <_write_r>:
 8023848:	b538      	push	{r3, r4, r5, lr}
 802384a:	4d07      	ldr	r5, [pc, #28]	; (8023868 <_write_r+0x20>)
 802384c:	4604      	mov	r4, r0
 802384e:	4608      	mov	r0, r1
 8023850:	4611      	mov	r1, r2
 8023852:	2200      	movs	r2, #0
 8023854:	602a      	str	r2, [r5, #0]
 8023856:	461a      	mov	r2, r3
 8023858:	f7df fd3b 	bl	80032d2 <_write>
 802385c:	1c43      	adds	r3, r0, #1
 802385e:	d102      	bne.n	8023866 <_write_r+0x1e>
 8023860:	682b      	ldr	r3, [r5, #0]
 8023862:	b103      	cbz	r3, 8023866 <_write_r+0x1e>
 8023864:	6023      	str	r3, [r4, #0]
 8023866:	bd38      	pop	{r3, r4, r5, pc}
 8023868:	2400b054 	.word	0x2400b054

0802386c <abort>:
 802386c:	b508      	push	{r3, lr}
 802386e:	2006      	movs	r0, #6
 8023870:	f000 f8a8 	bl	80239c4 <raise>
 8023874:	2001      	movs	r0, #1
 8023876:	f7df fd05 	bl	8003284 <_exit>
	...

0802387c <_close_r>:
 802387c:	b538      	push	{r3, r4, r5, lr}
 802387e:	4d06      	ldr	r5, [pc, #24]	; (8023898 <_close_r+0x1c>)
 8023880:	2300      	movs	r3, #0
 8023882:	4604      	mov	r4, r0
 8023884:	4608      	mov	r0, r1
 8023886:	602b      	str	r3, [r5, #0]
 8023888:	f7df fd3f 	bl	800330a <_close>
 802388c:	1c43      	adds	r3, r0, #1
 802388e:	d102      	bne.n	8023896 <_close_r+0x1a>
 8023890:	682b      	ldr	r3, [r5, #0]
 8023892:	b103      	cbz	r3, 8023896 <_close_r+0x1a>
 8023894:	6023      	str	r3, [r4, #0]
 8023896:	bd38      	pop	{r3, r4, r5, pc}
 8023898:	2400b054 	.word	0x2400b054

0802389c <_fstat_r>:
 802389c:	b538      	push	{r3, r4, r5, lr}
 802389e:	4d07      	ldr	r5, [pc, #28]	; (80238bc <_fstat_r+0x20>)
 80238a0:	2300      	movs	r3, #0
 80238a2:	4604      	mov	r4, r0
 80238a4:	4608      	mov	r0, r1
 80238a6:	4611      	mov	r1, r2
 80238a8:	602b      	str	r3, [r5, #0]
 80238aa:	f7df fd3a 	bl	8003322 <_fstat>
 80238ae:	1c43      	adds	r3, r0, #1
 80238b0:	d102      	bne.n	80238b8 <_fstat_r+0x1c>
 80238b2:	682b      	ldr	r3, [r5, #0]
 80238b4:	b103      	cbz	r3, 80238b8 <_fstat_r+0x1c>
 80238b6:	6023      	str	r3, [r4, #0]
 80238b8:	bd38      	pop	{r3, r4, r5, pc}
 80238ba:	bf00      	nop
 80238bc:	2400b054 	.word	0x2400b054

080238c0 <_isatty_r>:
 80238c0:	b538      	push	{r3, r4, r5, lr}
 80238c2:	4d06      	ldr	r5, [pc, #24]	; (80238dc <_isatty_r+0x1c>)
 80238c4:	2300      	movs	r3, #0
 80238c6:	4604      	mov	r4, r0
 80238c8:	4608      	mov	r0, r1
 80238ca:	602b      	str	r3, [r5, #0]
 80238cc:	f7df fd39 	bl	8003342 <_isatty>
 80238d0:	1c43      	adds	r3, r0, #1
 80238d2:	d102      	bne.n	80238da <_isatty_r+0x1a>
 80238d4:	682b      	ldr	r3, [r5, #0]
 80238d6:	b103      	cbz	r3, 80238da <_isatty_r+0x1a>
 80238d8:	6023      	str	r3, [r4, #0]
 80238da:	bd38      	pop	{r3, r4, r5, pc}
 80238dc:	2400b054 	.word	0x2400b054

080238e0 <_lseek_r>:
 80238e0:	b538      	push	{r3, r4, r5, lr}
 80238e2:	4d07      	ldr	r5, [pc, #28]	; (8023900 <_lseek_r+0x20>)
 80238e4:	4604      	mov	r4, r0
 80238e6:	4608      	mov	r0, r1
 80238e8:	4611      	mov	r1, r2
 80238ea:	2200      	movs	r2, #0
 80238ec:	602a      	str	r2, [r5, #0]
 80238ee:	461a      	mov	r2, r3
 80238f0:	f7df fd32 	bl	8003358 <_lseek>
 80238f4:	1c43      	adds	r3, r0, #1
 80238f6:	d102      	bne.n	80238fe <_lseek_r+0x1e>
 80238f8:	682b      	ldr	r3, [r5, #0]
 80238fa:	b103      	cbz	r3, 80238fe <_lseek_r+0x1e>
 80238fc:	6023      	str	r3, [r4, #0]
 80238fe:	bd38      	pop	{r3, r4, r5, pc}
 8023900:	2400b054 	.word	0x2400b054

08023904 <_realloc_r>:
 8023904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023906:	4607      	mov	r7, r0
 8023908:	4614      	mov	r4, r2
 802390a:	460e      	mov	r6, r1
 802390c:	b921      	cbnz	r1, 8023918 <_realloc_r+0x14>
 802390e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023912:	4611      	mov	r1, r2
 8023914:	f7fb bcd4 	b.w	801f2c0 <_malloc_r>
 8023918:	b922      	cbnz	r2, 8023924 <_realloc_r+0x20>
 802391a:	f7fb fc81 	bl	801f220 <_free_r>
 802391e:	4625      	mov	r5, r4
 8023920:	4628      	mov	r0, r5
 8023922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023924:	f000 f86a 	bl	80239fc <_malloc_usable_size_r>
 8023928:	42a0      	cmp	r0, r4
 802392a:	d20f      	bcs.n	802394c <_realloc_r+0x48>
 802392c:	4621      	mov	r1, r4
 802392e:	4638      	mov	r0, r7
 8023930:	f7fb fcc6 	bl	801f2c0 <_malloc_r>
 8023934:	4605      	mov	r5, r0
 8023936:	2800      	cmp	r0, #0
 8023938:	d0f2      	beq.n	8023920 <_realloc_r+0x1c>
 802393a:	4631      	mov	r1, r6
 802393c:	4622      	mov	r2, r4
 802393e:	f7fb fc3f 	bl	801f1c0 <memcpy>
 8023942:	4631      	mov	r1, r6
 8023944:	4638      	mov	r0, r7
 8023946:	f7fb fc6b 	bl	801f220 <_free_r>
 802394a:	e7e9      	b.n	8023920 <_realloc_r+0x1c>
 802394c:	4635      	mov	r5, r6
 802394e:	e7e7      	b.n	8023920 <_realloc_r+0x1c>

08023950 <_read_r>:
 8023950:	b538      	push	{r3, r4, r5, lr}
 8023952:	4d07      	ldr	r5, [pc, #28]	; (8023970 <_read_r+0x20>)
 8023954:	4604      	mov	r4, r0
 8023956:	4608      	mov	r0, r1
 8023958:	4611      	mov	r1, r2
 802395a:	2200      	movs	r2, #0
 802395c:	602a      	str	r2, [r5, #0]
 802395e:	461a      	mov	r2, r3
 8023960:	f7df fc9a 	bl	8003298 <_read>
 8023964:	1c43      	adds	r3, r0, #1
 8023966:	d102      	bne.n	802396e <_read_r+0x1e>
 8023968:	682b      	ldr	r3, [r5, #0]
 802396a:	b103      	cbz	r3, 802396e <_read_r+0x1e>
 802396c:	6023      	str	r3, [r4, #0]
 802396e:	bd38      	pop	{r3, r4, r5, pc}
 8023970:	2400b054 	.word	0x2400b054

08023974 <_raise_r>:
 8023974:	291f      	cmp	r1, #31
 8023976:	b538      	push	{r3, r4, r5, lr}
 8023978:	4604      	mov	r4, r0
 802397a:	460d      	mov	r5, r1
 802397c:	d904      	bls.n	8023988 <_raise_r+0x14>
 802397e:	2316      	movs	r3, #22
 8023980:	6003      	str	r3, [r0, #0]
 8023982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023986:	bd38      	pop	{r3, r4, r5, pc}
 8023988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802398a:	b112      	cbz	r2, 8023992 <_raise_r+0x1e>
 802398c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023990:	b94b      	cbnz	r3, 80239a6 <_raise_r+0x32>
 8023992:	4620      	mov	r0, r4
 8023994:	f000 f830 	bl	80239f8 <_getpid_r>
 8023998:	462a      	mov	r2, r5
 802399a:	4601      	mov	r1, r0
 802399c:	4620      	mov	r0, r4
 802399e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80239a2:	f000 b817 	b.w	80239d4 <_kill_r>
 80239a6:	2b01      	cmp	r3, #1
 80239a8:	d00a      	beq.n	80239c0 <_raise_r+0x4c>
 80239aa:	1c59      	adds	r1, r3, #1
 80239ac:	d103      	bne.n	80239b6 <_raise_r+0x42>
 80239ae:	2316      	movs	r3, #22
 80239b0:	6003      	str	r3, [r0, #0]
 80239b2:	2001      	movs	r0, #1
 80239b4:	e7e7      	b.n	8023986 <_raise_r+0x12>
 80239b6:	2400      	movs	r4, #0
 80239b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80239bc:	4628      	mov	r0, r5
 80239be:	4798      	blx	r3
 80239c0:	2000      	movs	r0, #0
 80239c2:	e7e0      	b.n	8023986 <_raise_r+0x12>

080239c4 <raise>:
 80239c4:	4b02      	ldr	r3, [pc, #8]	; (80239d0 <raise+0xc>)
 80239c6:	4601      	mov	r1, r0
 80239c8:	6818      	ldr	r0, [r3, #0]
 80239ca:	f7ff bfd3 	b.w	8023974 <_raise_r>
 80239ce:	bf00      	nop
 80239d0:	24003444 	.word	0x24003444

080239d4 <_kill_r>:
 80239d4:	b538      	push	{r3, r4, r5, lr}
 80239d6:	4d07      	ldr	r5, [pc, #28]	; (80239f4 <_kill_r+0x20>)
 80239d8:	2300      	movs	r3, #0
 80239da:	4604      	mov	r4, r0
 80239dc:	4608      	mov	r0, r1
 80239de:	4611      	mov	r1, r2
 80239e0:	602b      	str	r3, [r5, #0]
 80239e2:	f7df fc3d 	bl	8003260 <_kill>
 80239e6:	1c43      	adds	r3, r0, #1
 80239e8:	d102      	bne.n	80239f0 <_kill_r+0x1c>
 80239ea:	682b      	ldr	r3, [r5, #0]
 80239ec:	b103      	cbz	r3, 80239f0 <_kill_r+0x1c>
 80239ee:	6023      	str	r3, [r4, #0]
 80239f0:	bd38      	pop	{r3, r4, r5, pc}
 80239f2:	bf00      	nop
 80239f4:	2400b054 	.word	0x2400b054

080239f8 <_getpid_r>:
 80239f8:	f7df bc2a 	b.w	8003250 <_getpid>

080239fc <_malloc_usable_size_r>:
 80239fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023a00:	1f18      	subs	r0, r3, #4
 8023a02:	2b00      	cmp	r3, #0
 8023a04:	bfbc      	itt	lt
 8023a06:	580b      	ldrlt	r3, [r1, r0]
 8023a08:	18c0      	addlt	r0, r0, r3
 8023a0a:	4770      	bx	lr

08023a0c <checkint>:
 8023a0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023a10:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8023a14:	429a      	cmp	r2, r3
 8023a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a18:	dd2b      	ble.n	8023a72 <checkint+0x66>
 8023a1a:	f240 4333 	movw	r3, #1075	; 0x433
 8023a1e:	429a      	cmp	r2, r3
 8023a20:	dc25      	bgt.n	8023a6e <checkint+0x62>
 8023a22:	1a9b      	subs	r3, r3, r2
 8023a24:	f1a3 0620 	sub.w	r6, r3, #32
 8023a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023a2c:	fa02 f606 	lsl.w	r6, r2, r6
 8023a30:	fa02 f403 	lsl.w	r4, r2, r3
 8023a34:	f1c3 0520 	rsb	r5, r3, #32
 8023a38:	4334      	orrs	r4, r6
 8023a3a:	fa22 f505 	lsr.w	r5, r2, r5
 8023a3e:	432c      	orrs	r4, r5
 8023a40:	409a      	lsls	r2, r3
 8023a42:	ea20 0602 	bic.w	r6, r0, r2
 8023a46:	ea21 0704 	bic.w	r7, r1, r4
 8023a4a:	ea56 0207 	orrs.w	r2, r6, r7
 8023a4e:	f1a3 0420 	sub.w	r4, r3, #32
 8023a52:	f1c3 0220 	rsb	r2, r3, #32
 8023a56:	d10c      	bne.n	8023a72 <checkint+0x66>
 8023a58:	40d8      	lsrs	r0, r3
 8023a5a:	fa01 f302 	lsl.w	r3, r1, r2
 8023a5e:	4318      	orrs	r0, r3
 8023a60:	40e1      	lsrs	r1, r4
 8023a62:	4308      	orrs	r0, r1
 8023a64:	f000 0301 	and.w	r3, r0, #1
 8023a68:	f1c3 0002 	rsb	r0, r3, #2
 8023a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a6e:	2002      	movs	r0, #2
 8023a70:	e7fc      	b.n	8023a6c <checkint+0x60>
 8023a72:	2000      	movs	r0, #0
 8023a74:	e7fa      	b.n	8023a6c <checkint+0x60>
	...

08023a78 <pow>:
 8023a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a7c:	ed2d 8b0a 	vpush	{d8-d12}
 8023a80:	b09b      	sub	sp, #108	; 0x6c
 8023a82:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023a86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8023a8a:	ed8d 1b00 	vstr	d1, [sp]
 8023a8e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8023a92:	e9dd 6700 	ldrd	r6, r7, [sp]
 8023a96:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8023a9a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8023a9e:	4288      	cmp	r0, r1
 8023aa0:	46cc      	mov	ip, r9
 8023aa2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8023aa6:	d806      	bhi.n	8023ab6 <pow+0x3e>
 8023aa8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8023aac:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8023ab0:	297f      	cmp	r1, #127	; 0x7f
 8023ab2:	f240 81ab 	bls.w	8023e0c <pow+0x394>
 8023ab6:	19b1      	adds	r1, r6, r6
 8023ab8:	9104      	str	r1, [sp, #16]
 8023aba:	eb47 0107 	adc.w	r1, r7, r7
 8023abe:	9105      	str	r1, [sp, #20]
 8023ac0:	9904      	ldr	r1, [sp, #16]
 8023ac2:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 8023ac6:	460a      	mov	r2, r1
 8023ac8:	9905      	ldr	r1, [sp, #20]
 8023aca:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8023ace:	460b      	mov	r3, r1
 8023ad0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8023ad4:	f06f 0001 	mvn.w	r0, #1
 8023ad8:	4299      	cmp	r1, r3
 8023ada:	bf08      	it	eq
 8023adc:	4290      	cmpeq	r0, r2
 8023ade:	d260      	bcs.n	8023ba2 <pow+0x12a>
 8023ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023ae4:	4313      	orrs	r3, r2
 8023ae6:	d11a      	bne.n	8023b1e <pow+0xa6>
 8023ae8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8023aec:	1923      	adds	r3, r4, r4
 8023aee:	930c      	str	r3, [sp, #48]	; 0x30
 8023af0:	eb42 0302 	adc.w	r3, r2, r2
 8023af4:	930d      	str	r3, [sp, #52]	; 0x34
 8023af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8023afa:	4bcf      	ldr	r3, [pc, #828]	; (8023e38 <pow+0x3c0>)
 8023afc:	2200      	movs	r2, #0
 8023afe:	428b      	cmp	r3, r1
 8023b00:	bf08      	it	eq
 8023b02:	4282      	cmpeq	r2, r0
 8023b04:	f080 8265 	bcs.w	8023fd2 <pow+0x55a>
 8023b08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023b0c:	ed9d 6b00 	vldr	d6, [sp]
 8023b10:	ee37 0b06 	vadd.f64	d0, d7, d6
 8023b14:	b01b      	add	sp, #108	; 0x6c
 8023b16:	ecbd 8b0a 	vpop	{d8-d12}
 8023b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b1e:	49c7      	ldr	r1, [pc, #796]	; (8023e3c <pow+0x3c4>)
 8023b20:	2000      	movs	r0, #0
 8023b22:	428d      	cmp	r5, r1
 8023b24:	bf08      	it	eq
 8023b26:	4284      	cmpeq	r4, r0
 8023b28:	d10b      	bne.n	8023b42 <pow+0xca>
 8023b2a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8023b2e:	19b3      	adds	r3, r6, r6
 8023b30:	930e      	str	r3, [sp, #56]	; 0x38
 8023b32:	eb42 0302 	adc.w	r3, r2, r2
 8023b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8023b38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8023b3c:	4bbe      	ldr	r3, [pc, #760]	; (8023e38 <pow+0x3c0>)
 8023b3e:	2200      	movs	r2, #0
 8023b40:	e7dd      	b.n	8023afe <pow+0x86>
 8023b42:	1921      	adds	r1, r4, r4
 8023b44:	9106      	str	r1, [sp, #24]
 8023b46:	eb45 0105 	adc.w	r1, r5, r5
 8023b4a:	9107      	str	r1, [sp, #28]
 8023b4c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8023b50:	49bb      	ldr	r1, [pc, #748]	; (8023e40 <pow+0x3c8>)
 8023b52:	2000      	movs	r0, #0
 8023b54:	42a1      	cmp	r1, r4
 8023b56:	bf08      	it	eq
 8023b58:	4298      	cmpeq	r0, r3
 8023b5a:	d3d5      	bcc.n	8023b08 <pow+0x90>
 8023b5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8023b60:	428c      	cmp	r4, r1
 8023b62:	bf08      	it	eq
 8023b64:	4283      	cmpeq	r3, r0
 8023b66:	d1cf      	bne.n	8023b08 <pow+0x90>
 8023b68:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8023b6c:	49b5      	ldr	r1, [pc, #724]	; (8023e44 <pow+0x3cc>)
 8023b6e:	2000      	movs	r0, #0
 8023b70:	428c      	cmp	r4, r1
 8023b72:	bf08      	it	eq
 8023b74:	4283      	cmpeq	r3, r0
 8023b76:	f000 822c 	beq.w	8023fd2 <pow+0x55a>
 8023b7a:	49b3      	ldr	r1, [pc, #716]	; (8023e48 <pow+0x3d0>)
 8023b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023b80:	42a1      	cmp	r1, r4
 8023b82:	bf08      	it	eq
 8023b84:	4298      	cmpeq	r0, r3
 8023b86:	ea6f 0307 	mvn.w	r3, r7
 8023b8a:	bf34      	ite	cc
 8023b8c:	2201      	movcc	r2, #1
 8023b8e:	2200      	movcs	r2, #0
 8023b90:	0fdb      	lsrs	r3, r3, #31
 8023b92:	429a      	cmp	r2, r3
 8023b94:	f040 821a 	bne.w	8023fcc <pow+0x554>
 8023b98:	ed9d 7b00 	vldr	d7, [sp]
 8023b9c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8023ba0:	e7b8      	b.n	8023b14 <pow+0x9c>
 8023ba2:	1923      	adds	r3, r4, r4
 8023ba4:	9308      	str	r3, [sp, #32]
 8023ba6:	eb45 0305 	adc.w	r3, r5, r5
 8023baa:	9309      	str	r3, [sp, #36]	; 0x24
 8023bac:	9b08      	ldr	r3, [sp, #32]
 8023bae:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8023bb2:	9310      	str	r3, [sp, #64]	; 0x40
 8023bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bb6:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8023bba:	9311      	str	r3, [sp, #68]	; 0x44
 8023bbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8023bc0:	4299      	cmp	r1, r3
 8023bc2:	bf08      	it	eq
 8023bc4:	4290      	cmpeq	r0, r2
 8023bc6:	d22d      	bcs.n	8023c24 <pow+0x1ac>
 8023bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023bcc:	2c00      	cmp	r4, #0
 8023bce:	f175 0300 	sbcs.w	r3, r5, #0
 8023bd2:	ee27 0b07 	vmul.f64	d0, d7, d7
 8023bd6:	da16      	bge.n	8023c06 <pow+0x18e>
 8023bd8:	4630      	mov	r0, r6
 8023bda:	4639      	mov	r1, r7
 8023bdc:	f7ff ff16 	bl	8023a0c <checkint>
 8023be0:	2801      	cmp	r0, #1
 8023be2:	d110      	bne.n	8023c06 <pow+0x18e>
 8023be4:	eeb1 0b40 	vneg.f64	d0, d0
 8023be8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8023bec:	4323      	orrs	r3, r4
 8023bee:	d10c      	bne.n	8023c0a <pow+0x192>
 8023bf0:	2e00      	cmp	r6, #0
 8023bf2:	f177 0300 	sbcs.w	r3, r7, #0
 8023bf6:	da8d      	bge.n	8023b14 <pow+0x9c>
 8023bf8:	b01b      	add	sp, #108	; 0x6c
 8023bfa:	ecbd 8b0a 	vpop	{d8-d12}
 8023bfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c02:	f000 bf25 	b.w	8024a50 <__math_divzero>
 8023c06:	2000      	movs	r0, #0
 8023c08:	e7ee      	b.n	8023be8 <pow+0x170>
 8023c0a:	2e00      	cmp	r6, #0
 8023c0c:	f177 0300 	sbcs.w	r3, r7, #0
 8023c10:	da80      	bge.n	8023b14 <pow+0x9c>
 8023c12:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8023c16:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8023c1a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8023c1e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8023c22:	e777      	b.n	8023b14 <pow+0x9c>
 8023c24:	2c00      	cmp	r4, #0
 8023c26:	f175 0300 	sbcs.w	r3, r5, #0
 8023c2a:	da35      	bge.n	8023c98 <pow+0x220>
 8023c2c:	4630      	mov	r0, r6
 8023c2e:	4639      	mov	r1, r7
 8023c30:	f7ff feec 	bl	8023a0c <checkint>
 8023c34:	b940      	cbnz	r0, 8023c48 <pow+0x1d0>
 8023c36:	ed9d 0b02 	vldr	d0, [sp, #8]
 8023c3a:	b01b      	add	sp, #108	; 0x6c
 8023c3c:	ecbd 8b0a 	vpop	{d8-d12}
 8023c40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c44:	f000 bf1c 	b.w	8024a80 <__math_invalid>
 8023c48:	2801      	cmp	r0, #1
 8023c4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023c4e:	bf14      	ite	ne
 8023c50:	2000      	movne	r0, #0
 8023c52:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8023c56:	461d      	mov	r5, r3
 8023c58:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8023c5c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8023c60:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8023c64:	2a7f      	cmp	r2, #127	; 0x7f
 8023c66:	d933      	bls.n	8023cd0 <pow+0x258>
 8023c68:	4974      	ldr	r1, [pc, #464]	; (8023e3c <pow+0x3c4>)
 8023c6a:	2000      	movs	r0, #0
 8023c6c:	428d      	cmp	r5, r1
 8023c6e:	bf08      	it	eq
 8023c70:	4284      	cmpeq	r4, r0
 8023c72:	f000 81ae 	beq.w	8023fd2 <pow+0x55a>
 8023c76:	f240 32bd 	movw	r2, #957	; 0x3bd
 8023c7a:	4293      	cmp	r3, r2
 8023c7c:	d80e      	bhi.n	8023c9c <pow+0x224>
 8023c7e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8023c82:	ed9d 7b00 	vldr	d7, [sp]
 8023c86:	42a9      	cmp	r1, r5
 8023c88:	bf08      	it	eq
 8023c8a:	42a0      	cmpeq	r0, r4
 8023c8c:	bf34      	ite	cc
 8023c8e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8023c92:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8023c96:	e73d      	b.n	8023b14 <pow+0x9c>
 8023c98:	2000      	movs	r0, #0
 8023c9a:	e7df      	b.n	8023c5c <pow+0x1e4>
 8023c9c:	42a9      	cmp	r1, r5
 8023c9e:	bf08      	it	eq
 8023ca0:	42a0      	cmpeq	r0, r4
 8023ca2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8023ca6:	bf2c      	ite	cs
 8023ca8:	2301      	movcs	r3, #1
 8023caa:	2300      	movcc	r3, #0
 8023cac:	4590      	cmp	r8, r2
 8023cae:	bf8c      	ite	hi
 8023cb0:	f04f 0800 	movhi.w	r8, #0
 8023cb4:	f04f 0801 	movls.w	r8, #1
 8023cb8:	4543      	cmp	r3, r8
 8023cba:	f04f 0000 	mov.w	r0, #0
 8023cbe:	f000 80af 	beq.w	8023e20 <pow+0x3a8>
 8023cc2:	b01b      	add	sp, #108	; 0x6c
 8023cc4:	ecbd 8b0a 	vpop	{d8-d12}
 8023cc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ccc:	f000 beb8 	b.w	8024a40 <__math_oflow>
 8023cd0:	f1bc 0f00 	cmp.w	ip, #0
 8023cd4:	d10e      	bne.n	8023cf4 <pow+0x27c>
 8023cd6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8023e30 <pow+0x3b8>
 8023cda:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023cde:	ee26 7b07 	vmul.f64	d7, d6, d7
 8023ce2:	ec57 6b17 	vmov	r6, r7, d7
 8023ce6:	4b59      	ldr	r3, [pc, #356]	; (8023e4c <pow+0x3d4>)
 8023ce8:	2100      	movs	r1, #0
 8023cea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8023cee:	1874      	adds	r4, r6, r1
 8023cf0:	eb42 0503 	adc.w	r5, r2, r3
 8023cf4:	2300      	movs	r3, #0
 8023cf6:	18e3      	adds	r3, r4, r3
 8023cf8:	4b55      	ldr	r3, [pc, #340]	; (8023e50 <pow+0x3d8>)
 8023cfa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8023cfe:	eb45 0303 	adc.w	r3, r5, r3
 8023d02:	1519      	asrs	r1, r3, #20
 8023d04:	ee03 1a10 	vmov	s6, r1
 8023d08:	0d1e      	lsrs	r6, r3, #20
 8023d0a:	2100      	movs	r1, #0
 8023d0c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8023d10:	0536      	lsls	r6, r6, #20
 8023d12:	1a63      	subs	r3, r4, r1
 8023d14:	9312      	str	r3, [sp, #72]	; 0x48
 8023d16:	eb65 0306 	sbc.w	r3, r5, r6
 8023d1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d1c:	4b4d      	ldr	r3, [pc, #308]	; (8023e54 <pow+0x3dc>)
 8023d1e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8023d22:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8023d26:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8023d2a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8023d2e:	ed93 7b00 	vldr	d7, [r3]
 8023d32:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8023d36:	ed93 4b02 	vldr	d4, [r3, #8]
 8023d3a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8023d3e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8023d42:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8023d46:	ee36 9b05 	vadd.f64	d9, d6, d5
 8023d4a:	ee35 5b49 	vsub.f64	d5, d5, d9
 8023d4e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8023d52:	ed93 4b04 	vldr	d4, [r3, #16]
 8023d56:	ee35 5b06 	vadd.f64	d5, d5, d6
 8023d5a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8023d5e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8023d62:	ed93 3b08 	vldr	d3, [r3, #32]
 8023d66:	ee26 0b04 	vmul.f64	d0, d6, d4
 8023d6a:	eeb0 8b40 	vmov.f64	d8, d0
 8023d6e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8023d72:	ed93 4b06 	vldr	d4, [r3, #24]
 8023d76:	ee26 ab00 	vmul.f64	d10, d6, d0
 8023d7a:	ee39 1b00 	vadd.f64	d1, d9, d0
 8023d7e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8023d82:	eea6 4b03 	vfma.f64	d4, d6, d3
 8023d86:	ee39 9b41 	vsub.f64	d9, d9, d1
 8023d8a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8023d8e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8023d92:	ee39 9b00 	vadd.f64	d9, d9, d0
 8023d96:	eea6 3b02 	vfma.f64	d3, d6, d2
 8023d9a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8023d9e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8023da2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8023da6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8023daa:	ed9d 6b00 	vldr	d6, [sp]
 8023dae:	eea0 3b02 	vfma.f64	d3, d0, d2
 8023db2:	eea0 4b03 	vfma.f64	d4, d0, d3
 8023db6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8023dba:	ee31 7b09 	vadd.f64	d7, d1, d9
 8023dbe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8023dc2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023dc6:	eeb0 3b46 	vmov.f64	d3, d6
 8023dca:	ee31 1b47 	vsub.f64	d1, d1, d7
 8023dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023dd2:	ee31 9b09 	vadd.f64	d9, d1, d9
 8023dd6:	ed9d 6b00 	vldr	d6, [sp]
 8023dda:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8023dde:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8023de2:	193c      	adds	r4, r7, r4
 8023de4:	2c3e      	cmp	r4, #62	; 0x3e
 8023de6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8023dea:	eea6 3b09 	vfma.f64	d3, d6, d9
 8023dee:	d934      	bls.n	8023e5a <pow+0x3e2>
 8023df0:	428c      	cmp	r4, r1
 8023df2:	da0d      	bge.n	8023e10 <pow+0x398>
 8023df4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8023df8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023dfc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8023e00:	2800      	cmp	r0, #0
 8023e02:	f43f ae87 	beq.w	8023b14 <pow+0x9c>
 8023e06:	eeb1 0b40 	vneg.f64	d0, d0
 8023e0a:	e683      	b.n	8023b14 <pow+0x9c>
 8023e0c:	2000      	movs	r0, #0
 8023e0e:	e771      	b.n	8023cf4 <pow+0x27c>
 8023e10:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8023e14:	d920      	bls.n	8023e58 <pow+0x3e0>
 8023e16:	2a00      	cmp	r2, #0
 8023e18:	f173 0300 	sbcs.w	r3, r3, #0
 8023e1c:	f6bf af51 	bge.w	8023cc2 <pow+0x24a>
 8023e20:	b01b      	add	sp, #108	; 0x6c
 8023e22:	ecbd 8b0a 	vpop	{d8-d12}
 8023e26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e2a:	f000 be01 	b.w	8024a30 <__math_uflow>
 8023e2e:	bf00      	nop
 8023e30:	00000000 	.word	0x00000000
 8023e34:	43300000 	.word	0x43300000
 8023e38:	fff00000 	.word	0xfff00000
 8023e3c:	3ff00000 	.word	0x3ff00000
 8023e40:	ffe00000 	.word	0xffe00000
 8023e44:	7fe00000 	.word	0x7fe00000
 8023e48:	7fdfffff 	.word	0x7fdfffff
 8023e4c:	fcc00000 	.word	0xfcc00000
 8023e50:	c0196aab 	.word	0xc0196aab
 8023e54:	08028848 	.word	0x08028848
 8023e58:	460f      	mov	r7, r1
 8023e5a:	4e65      	ldr	r6, [pc, #404]	; (8023ff0 <pow+0x578>)
 8023e5c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8023e60:	ed96 6b02 	vldr	d6, [r6, #8]
 8023e64:	ed96 7b00 	vldr	d7, [r6]
 8023e68:	eeb0 5b46 	vmov.f64	d5, d6
 8023e6c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8023e70:	ed8d 5b00 	vstr	d5, [sp]
 8023e74:	ee35 6b46 	vsub.f64	d6, d5, d6
 8023e78:	eeb0 5b44 	vmov.f64	d5, d4
 8023e7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023e80:	ed96 7b04 	vldr	d7, [r6, #16]
 8023e84:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8023e88:	eea6 5b07 	vfma.f64	d5, d6, d7
 8023e8c:	eeb0 7b45 	vmov.f64	d7, d5
 8023e90:	ed96 5b06 	vldr	d5, [r6, #24]
 8023e94:	1849      	adds	r1, r1, r1
 8023e96:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8023e9a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8023e9e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8023ea2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8023ea6:	ee33 3b07 	vadd.f64	d3, d3, d7
 8023eaa:	ee23 6b03 	vmul.f64	d6, d3, d3
 8023eae:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8023eb2:	ed96 5b08 	vldr	d5, [r6, #32]
 8023eb6:	ee33 7b07 	vadd.f64	d7, d3, d7
 8023eba:	1814      	adds	r4, r2, r0
 8023ebc:	0365      	lsls	r5, r4, #13
 8023ebe:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8023ec2:	eea3 5b04 	vfma.f64	d5, d3, d4
 8023ec6:	eea6 7b05 	vfma.f64	d7, d6, d5
 8023eca:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8023ece:	ee26 6b06 	vmul.f64	d6, d6, d6
 8023ed2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8023ed6:	2000      	movs	r0, #0
 8023ed8:	eb10 0a04 	adds.w	sl, r0, r4
 8023edc:	eea3 5b04 	vfma.f64	d5, d3, d4
 8023ee0:	eb45 0b0c 	adc.w	fp, r5, ip
 8023ee4:	eea6 7b05 	vfma.f64	d7, d6, d5
 8023ee8:	2f00      	cmp	r7, #0
 8023eea:	d16a      	bne.n	8023fc2 <pow+0x54a>
 8023eec:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8023ef0:	4639      	mov	r1, r7
 8023ef2:	ea50 0301 	orrs.w	r3, r0, r1
 8023ef6:	f04f 0300 	mov.w	r3, #0
 8023efa:	d115      	bne.n	8023f28 <pow+0x4b0>
 8023efc:	eb1a 0303 	adds.w	r3, sl, r3
 8023f00:	ee0b 3a10 	vmov	s22, r3
 8023f04:	4b3b      	ldr	r3, [pc, #236]	; (8023ff4 <pow+0x57c>)
 8023f06:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8023fd8 <pow+0x560>
 8023f0a:	eb4b 0303 	adc.w	r3, fp, r3
 8023f0e:	ee0b 3a90 	vmov	s23, r3
 8023f12:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8023f16:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8023f1a:	b01b      	add	sp, #108	; 0x6c
 8023f1c:	ecbd 8b0a 	vpop	{d8-d12}
 8023f20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f24:	f000 bdc4 	b.w	8024ab0 <__math_check_oflow>
 8023f28:	eb1a 0303 	adds.w	r3, sl, r3
 8023f2c:	930a      	str	r3, [sp, #40]	; 0x28
 8023f2e:	4b32      	ldr	r3, [pc, #200]	; (8023ff8 <pow+0x580>)
 8023f30:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8023f34:	eb4b 0303 	adc.w	r3, fp, r3
 8023f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f3a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8023f3e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8023f42:	ee35 7b06 	vadd.f64	d7, d5, d6
 8023f46:	eeb0 3bc7 	vabs.f64	d3, d7
 8023f4a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8023f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f52:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8023fe0 <pow+0x568>
 8023f56:	d52b      	bpl.n	8023fb0 <pow+0x538>
 8023f58:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023f5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8023f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f64:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8023f68:	ee35 6b06 	vadd.f64	d6, d5, d6
 8023f6c:	bf48      	it	mi
 8023f6e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8023f72:	ee37 3b04 	vadd.f64	d3, d7, d4
 8023f76:	ee34 5b43 	vsub.f64	d5, d4, d3
 8023f7a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8023f7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8023f82:	ee37 7b03 	vadd.f64	d7, d7, d3
 8023f86:	ee37 7b44 	vsub.f64	d7, d7, d4
 8023f8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f92:	d105      	bne.n	8023fa0 <pow+0x528>
 8023f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023f96:	463a      	mov	r2, r7
 8023f98:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8023f9c:	ec43 2b17 	vmov	d7, r2, r3
 8023fa0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8023fa4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8023fa8:	ee26 6b00 	vmul.f64	d6, d6, d0
 8023fac:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8023fb0:	ee27 0b00 	vmul.f64	d0, d7, d0
 8023fb4:	b01b      	add	sp, #108	; 0x6c
 8023fb6:	ecbd 8b0a 	vpop	{d8-d12}
 8023fba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fbe:	f000 bd6e 	b.w	8024a9e <__math_check_uflow>
 8023fc2:	ec4b ab10 	vmov	d0, sl, fp
 8023fc6:	eea7 0b00 	vfma.f64	d0, d7, d0
 8023fca:	e5a3      	b.n	8023b14 <pow+0x9c>
 8023fcc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8023fe8 <pow+0x570>
 8023fd0:	e5a0      	b.n	8023b14 <pow+0x9c>
 8023fd2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8023fd6:	e59d      	b.n	8023b14 <pow+0x9c>
 8023fd8:	00000000 	.word	0x00000000
 8023fdc:	7f000000 	.word	0x7f000000
 8023fe0:	00000000 	.word	0x00000000
 8023fe4:	00100000 	.word	0x00100000
	...
 8023ff0:	08029a18 	.word	0x08029a18
 8023ff4:	c0f00000 	.word	0xc0f00000
 8023ff8:	3fe00000 	.word	0x3fe00000
 8023ffc:	00000000 	.word	0x00000000

08024000 <sin>:
 8024000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024002:	eeb0 7b40 	vmov.f64	d7, d0
 8024006:	ee17 3a90 	vmov	r3, s15
 802400a:	4a1f      	ldr	r2, [pc, #124]	; (8024088 <sin+0x88>)
 802400c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024010:	4293      	cmp	r3, r2
 8024012:	dc05      	bgt.n	8024020 <sin+0x20>
 8024014:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8024080 <sin+0x80>
 8024018:	2000      	movs	r0, #0
 802401a:	f000 fc95 	bl	8024948 <__kernel_sin>
 802401e:	e004      	b.n	802402a <sin+0x2a>
 8024020:	4a1a      	ldr	r2, [pc, #104]	; (802408c <sin+0x8c>)
 8024022:	4293      	cmp	r3, r2
 8024024:	dd04      	ble.n	8024030 <sin+0x30>
 8024026:	ee30 0b40 	vsub.f64	d0, d0, d0
 802402a:	b005      	add	sp, #20
 802402c:	f85d fb04 	ldr.w	pc, [sp], #4
 8024030:	4668      	mov	r0, sp
 8024032:	f000 f859 	bl	80240e8 <__ieee754_rem_pio2>
 8024036:	f000 0003 	and.w	r0, r0, #3
 802403a:	2801      	cmp	r0, #1
 802403c:	d008      	beq.n	8024050 <sin+0x50>
 802403e:	2802      	cmp	r0, #2
 8024040:	d00d      	beq.n	802405e <sin+0x5e>
 8024042:	b9b0      	cbnz	r0, 8024072 <sin+0x72>
 8024044:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024048:	ed9d 0b00 	vldr	d0, [sp]
 802404c:	2001      	movs	r0, #1
 802404e:	e7e4      	b.n	802401a <sin+0x1a>
 8024050:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024054:	ed9d 0b00 	vldr	d0, [sp]
 8024058:	f000 f98a 	bl	8024370 <__kernel_cos>
 802405c:	e7e5      	b.n	802402a <sin+0x2a>
 802405e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024062:	ed9d 0b00 	vldr	d0, [sp]
 8024066:	2001      	movs	r0, #1
 8024068:	f000 fc6e 	bl	8024948 <__kernel_sin>
 802406c:	eeb1 0b40 	vneg.f64	d0, d0
 8024070:	e7db      	b.n	802402a <sin+0x2a>
 8024072:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024076:	ed9d 0b00 	vldr	d0, [sp]
 802407a:	f000 f979 	bl	8024370 <__kernel_cos>
 802407e:	e7f5      	b.n	802406c <sin+0x6c>
	...
 8024088:	3fe921fb 	.word	0x3fe921fb
 802408c:	7fefffff 	.word	0x7fefffff

08024090 <sqrt>:
 8024090:	b508      	push	{r3, lr}
 8024092:	ed2d 8b04 	vpush	{d8-d9}
 8024096:	eeb0 8b40 	vmov.f64	d8, d0
 802409a:	f000 f965 	bl	8024368 <__ieee754_sqrt>
 802409e:	4b10      	ldr	r3, [pc, #64]	; (80240e0 <sqrt+0x50>)
 80240a0:	f993 3000 	ldrsb.w	r3, [r3]
 80240a4:	3301      	adds	r3, #1
 80240a6:	d011      	beq.n	80240cc <sqrt+0x3c>
 80240a8:	eeb4 8b48 	vcmp.f64	d8, d8
 80240ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240b0:	d60c      	bvs.n	80240cc <sqrt+0x3c>
 80240b2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80240d8 <sqrt+0x48>
 80240b6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80240ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240be:	d505      	bpl.n	80240cc <sqrt+0x3c>
 80240c0:	f7fd fe20 	bl	8021d04 <__errno>
 80240c4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80240c8:	2321      	movs	r3, #33	; 0x21
 80240ca:	6003      	str	r3, [r0, #0]
 80240cc:	ecbd 8b04 	vpop	{d8-d9}
 80240d0:	bd08      	pop	{r3, pc}
 80240d2:	bf00      	nop
 80240d4:	f3af 8000 	nop.w
	...
 80240e0:	24003618 	.word	0x24003618
 80240e4:	00000000 	.word	0x00000000

080240e8 <__ieee754_rem_pio2>:
 80240e8:	b570      	push	{r4, r5, r6, lr}
 80240ea:	eeb0 7b40 	vmov.f64	d7, d0
 80240ee:	ee17 5a90 	vmov	r5, s15
 80240f2:	4b97      	ldr	r3, [pc, #604]	; (8024350 <__ieee754_rem_pio2+0x268>)
 80240f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80240f8:	429e      	cmp	r6, r3
 80240fa:	b088      	sub	sp, #32
 80240fc:	4604      	mov	r4, r0
 80240fe:	dc07      	bgt.n	8024110 <__ieee754_rem_pio2+0x28>
 8024100:	2200      	movs	r2, #0
 8024102:	2300      	movs	r3, #0
 8024104:	ed84 0b00 	vstr	d0, [r4]
 8024108:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802410c:	2000      	movs	r0, #0
 802410e:	e01b      	b.n	8024148 <__ieee754_rem_pio2+0x60>
 8024110:	4b90      	ldr	r3, [pc, #576]	; (8024354 <__ieee754_rem_pio2+0x26c>)
 8024112:	429e      	cmp	r6, r3
 8024114:	dc3b      	bgt.n	802418e <__ieee754_rem_pio2+0xa6>
 8024116:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 802411a:	2d00      	cmp	r5, #0
 802411c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8024310 <__ieee754_rem_pio2+0x228>
 8024120:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8024124:	dd19      	ble.n	802415a <__ieee754_rem_pio2+0x72>
 8024126:	ee30 7b46 	vsub.f64	d7, d0, d6
 802412a:	429e      	cmp	r6, r3
 802412c:	d00e      	beq.n	802414c <__ieee754_rem_pio2+0x64>
 802412e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8024318 <__ieee754_rem_pio2+0x230>
 8024132:	ee37 5b46 	vsub.f64	d5, d7, d6
 8024136:	ee37 7b45 	vsub.f64	d7, d7, d5
 802413a:	ed84 5b00 	vstr	d5, [r4]
 802413e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8024142:	ed84 7b02 	vstr	d7, [r4, #8]
 8024146:	2001      	movs	r0, #1
 8024148:	b008      	add	sp, #32
 802414a:	bd70      	pop	{r4, r5, r6, pc}
 802414c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8024320 <__ieee754_rem_pio2+0x238>
 8024150:	ee37 7b46 	vsub.f64	d7, d7, d6
 8024154:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8024328 <__ieee754_rem_pio2+0x240>
 8024158:	e7eb      	b.n	8024132 <__ieee754_rem_pio2+0x4a>
 802415a:	429e      	cmp	r6, r3
 802415c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8024160:	d00e      	beq.n	8024180 <__ieee754_rem_pio2+0x98>
 8024162:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8024318 <__ieee754_rem_pio2+0x230>
 8024166:	ee37 5b06 	vadd.f64	d5, d7, d6
 802416a:	ee37 7b45 	vsub.f64	d7, d7, d5
 802416e:	ed84 5b00 	vstr	d5, [r4]
 8024172:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802417a:	ed84 7b02 	vstr	d7, [r4, #8]
 802417e:	e7e3      	b.n	8024148 <__ieee754_rem_pio2+0x60>
 8024180:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8024320 <__ieee754_rem_pio2+0x238>
 8024184:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024188:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8024328 <__ieee754_rem_pio2+0x240>
 802418c:	e7eb      	b.n	8024166 <__ieee754_rem_pio2+0x7e>
 802418e:	4b72      	ldr	r3, [pc, #456]	; (8024358 <__ieee754_rem_pio2+0x270>)
 8024190:	429e      	cmp	r6, r3
 8024192:	dc6e      	bgt.n	8024272 <__ieee754_rem_pio2+0x18a>
 8024194:	f000 fca0 	bl	8024ad8 <fabs>
 8024198:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802419c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8024330 <__ieee754_rem_pio2+0x248>
 80241a0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80241a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80241a8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80241ac:	ee17 0a90 	vmov	r0, s15
 80241b0:	eeb1 4b45 	vneg.f64	d4, d5
 80241b4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8024310 <__ieee754_rem_pio2+0x228>
 80241b8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80241bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8024318 <__ieee754_rem_pio2+0x230>
 80241c0:	281f      	cmp	r0, #31
 80241c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80241c6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80241ca:	dc08      	bgt.n	80241de <__ieee754_rem_pio2+0xf6>
 80241cc:	4b63      	ldr	r3, [pc, #396]	; (802435c <__ieee754_rem_pio2+0x274>)
 80241ce:	1e42      	subs	r2, r0, #1
 80241d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80241d4:	42b3      	cmp	r3, r6
 80241d6:	d002      	beq.n	80241de <__ieee754_rem_pio2+0xf6>
 80241d8:	ed84 6b00 	vstr	d6, [r4]
 80241dc:	e024      	b.n	8024228 <__ieee754_rem_pio2+0x140>
 80241de:	ee16 3a90 	vmov	r3, s13
 80241e2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80241e6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80241ea:	2b10      	cmp	r3, #16
 80241ec:	ea4f 5226 	mov.w	r2, r6, asr #20
 80241f0:	ddf2      	ble.n	80241d8 <__ieee754_rem_pio2+0xf0>
 80241f2:	eeb0 6b40 	vmov.f64	d6, d0
 80241f6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8024320 <__ieee754_rem_pio2+0x238>
 80241fa:	eea4 6b03 	vfma.f64	d6, d4, d3
 80241fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8024202:	eea4 7b03 	vfma.f64	d7, d4, d3
 8024206:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8024328 <__ieee754_rem_pio2+0x240>
 802420a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 802420e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8024212:	ee13 3a90 	vmov	r3, s7
 8024216:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802421a:	1ad3      	subs	r3, r2, r3
 802421c:	2b31      	cmp	r3, #49	; 0x31
 802421e:	dc17      	bgt.n	8024250 <__ieee754_rem_pio2+0x168>
 8024220:	eeb0 0b46 	vmov.f64	d0, d6
 8024224:	ed84 3b00 	vstr	d3, [r4]
 8024228:	ed94 6b00 	vldr	d6, [r4]
 802422c:	2d00      	cmp	r5, #0
 802422e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8024232:	ee30 7b47 	vsub.f64	d7, d0, d7
 8024236:	ed84 7b02 	vstr	d7, [r4, #8]
 802423a:	da85      	bge.n	8024148 <__ieee754_rem_pio2+0x60>
 802423c:	eeb1 6b46 	vneg.f64	d6, d6
 8024240:	ed84 6b00 	vstr	d6, [r4]
 8024244:	eeb1 7b47 	vneg.f64	d7, d7
 8024248:	4240      	negs	r0, r0
 802424a:	ed84 7b02 	vstr	d7, [r4, #8]
 802424e:	e77b      	b.n	8024148 <__ieee754_rem_pio2+0x60>
 8024250:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8024338 <__ieee754_rem_pio2+0x250>
 8024254:	eeb0 0b46 	vmov.f64	d0, d6
 8024258:	eea4 0b03 	vfma.f64	d0, d4, d3
 802425c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8024260:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8024340 <__ieee754_rem_pio2+0x258>
 8024264:	eea4 7b03 	vfma.f64	d7, d4, d3
 8024268:	ee95 7b06 	vfnms.f64	d7, d5, d6
 802426c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8024270:	e7b2      	b.n	80241d8 <__ieee754_rem_pio2+0xf0>
 8024272:	4b3b      	ldr	r3, [pc, #236]	; (8024360 <__ieee754_rem_pio2+0x278>)
 8024274:	429e      	cmp	r6, r3
 8024276:	dd06      	ble.n	8024286 <__ieee754_rem_pio2+0x19e>
 8024278:	ee30 7b40 	vsub.f64	d7, d0, d0
 802427c:	ed80 7b02 	vstr	d7, [r0, #8]
 8024280:	ed80 7b00 	vstr	d7, [r0]
 8024284:	e742      	b.n	802410c <__ieee754_rem_pio2+0x24>
 8024286:	1532      	asrs	r2, r6, #20
 8024288:	ee10 0a10 	vmov	r0, s0
 802428c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8024290:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8024294:	ec41 0b17 	vmov	d7, r0, r1
 8024298:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 802429c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8024348 <__ieee754_rem_pio2+0x260>
 80242a0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80242a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80242a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80242ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80242b0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80242b4:	a902      	add	r1, sp, #8
 80242b6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80242ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80242be:	ed8d 6b04 	vstr	d6, [sp, #16]
 80242c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80242c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80242ca:	2603      	movs	r6, #3
 80242cc:	4608      	mov	r0, r1
 80242ce:	ed91 7b04 	vldr	d7, [r1, #16]
 80242d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80242d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242da:	4633      	mov	r3, r6
 80242dc:	f1a1 0108 	sub.w	r1, r1, #8
 80242e0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80242e4:	d0f3      	beq.n	80242ce <__ieee754_rem_pio2+0x1e6>
 80242e6:	491f      	ldr	r1, [pc, #124]	; (8024364 <__ieee754_rem_pio2+0x27c>)
 80242e8:	9101      	str	r1, [sp, #4]
 80242ea:	2102      	movs	r1, #2
 80242ec:	9100      	str	r1, [sp, #0]
 80242ee:	4621      	mov	r1, r4
 80242f0:	f000 f8aa 	bl	8024448 <__kernel_rem_pio2>
 80242f4:	2d00      	cmp	r5, #0
 80242f6:	f6bf af27 	bge.w	8024148 <__ieee754_rem_pio2+0x60>
 80242fa:	ed94 7b00 	vldr	d7, [r4]
 80242fe:	eeb1 7b47 	vneg.f64	d7, d7
 8024302:	ed84 7b00 	vstr	d7, [r4]
 8024306:	ed94 7b02 	vldr	d7, [r4, #8]
 802430a:	e79b      	b.n	8024244 <__ieee754_rem_pio2+0x15c>
 802430c:	f3af 8000 	nop.w
 8024310:	54400000 	.word	0x54400000
 8024314:	3ff921fb 	.word	0x3ff921fb
 8024318:	1a626331 	.word	0x1a626331
 802431c:	3dd0b461 	.word	0x3dd0b461
 8024320:	1a600000 	.word	0x1a600000
 8024324:	3dd0b461 	.word	0x3dd0b461
 8024328:	2e037073 	.word	0x2e037073
 802432c:	3ba3198a 	.word	0x3ba3198a
 8024330:	6dc9c883 	.word	0x6dc9c883
 8024334:	3fe45f30 	.word	0x3fe45f30
 8024338:	2e000000 	.word	0x2e000000
 802433c:	3ba3198a 	.word	0x3ba3198a
 8024340:	252049c1 	.word	0x252049c1
 8024344:	397b839a 	.word	0x397b839a
 8024348:	00000000 	.word	0x00000000
 802434c:	41700000 	.word	0x41700000
 8024350:	3fe921fb 	.word	0x3fe921fb
 8024354:	4002d97b 	.word	0x4002d97b
 8024358:	413921fb 	.word	0x413921fb
 802435c:	08029890 	.word	0x08029890
 8024360:	7fefffff 	.word	0x7fefffff
 8024364:	08029910 	.word	0x08029910

08024368 <__ieee754_sqrt>:
 8024368:	eeb1 0bc0 	vsqrt.f64	d0, d0
 802436c:	4770      	bx	lr
	...

08024370 <__kernel_cos>:
 8024370:	ee10 1a90 	vmov	r1, s1
 8024374:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8024378:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802437c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8024380:	da05      	bge.n	802438e <__kernel_cos+0x1e>
 8024382:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8024386:	ee17 3a90 	vmov	r3, s15
 802438a:	2b00      	cmp	r3, #0
 802438c:	d03d      	beq.n	802440a <__kernel_cos+0x9a>
 802438e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8024392:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8024410 <__kernel_cos+0xa0>
 8024396:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8024418 <__kernel_cos+0xa8>
 802439a:	eea3 6b07 	vfma.f64	d6, d3, d7
 802439e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8024420 <__kernel_cos+0xb0>
 80243a2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80243a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8024428 <__kernel_cos+0xb8>
 80243aa:	eea7 6b03 	vfma.f64	d6, d7, d3
 80243ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8024430 <__kernel_cos+0xc0>
 80243b2:	4b23      	ldr	r3, [pc, #140]	; (8024440 <__kernel_cos+0xd0>)
 80243b4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80243b8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8024438 <__kernel_cos+0xc8>
 80243bc:	4299      	cmp	r1, r3
 80243be:	eea7 6b03 	vfma.f64	d6, d7, d3
 80243c2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80243c6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80243ca:	ee23 7b07 	vmul.f64	d7, d3, d7
 80243ce:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80243d2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80243d6:	dc04      	bgt.n	80243e2 <__kernel_cos+0x72>
 80243d8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80243dc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80243e0:	4770      	bx	lr
 80243e2:	4b18      	ldr	r3, [pc, #96]	; (8024444 <__kernel_cos+0xd4>)
 80243e4:	4299      	cmp	r1, r3
 80243e6:	dc0d      	bgt.n	8024404 <__kernel_cos+0x94>
 80243e8:	2200      	movs	r2, #0
 80243ea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80243ee:	ec43 2b15 	vmov	d5, r2, r3
 80243f2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80243f6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80243fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80243fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8024402:	4770      	bx	lr
 8024404:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8024408:	e7f3      	b.n	80243f2 <__kernel_cos+0x82>
 802440a:	eeb0 0b44 	vmov.f64	d0, d4
 802440e:	4770      	bx	lr
 8024410:	be8838d4 	.word	0xbe8838d4
 8024414:	bda8fae9 	.word	0xbda8fae9
 8024418:	bdb4b1c4 	.word	0xbdb4b1c4
 802441c:	3e21ee9e 	.word	0x3e21ee9e
 8024420:	809c52ad 	.word	0x809c52ad
 8024424:	be927e4f 	.word	0xbe927e4f
 8024428:	19cb1590 	.word	0x19cb1590
 802442c:	3efa01a0 	.word	0x3efa01a0
 8024430:	16c15177 	.word	0x16c15177
 8024434:	bf56c16c 	.word	0xbf56c16c
 8024438:	5555554c 	.word	0x5555554c
 802443c:	3fa55555 	.word	0x3fa55555
 8024440:	3fd33332 	.word	0x3fd33332
 8024444:	3fe90000 	.word	0x3fe90000

08024448 <__kernel_rem_pio2>:
 8024448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802444c:	ed2d 8b06 	vpush	{d8-d10}
 8024450:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8024454:	469b      	mov	fp, r3
 8024456:	460f      	mov	r7, r1
 8024458:	4bcf      	ldr	r3, [pc, #828]	; (8024798 <__kernel_rem_pio2+0x350>)
 802445a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 802445c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8024460:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8024464:	9000      	str	r0, [sp, #0]
 8024466:	f112 0f14 	cmn.w	r2, #20
 802446a:	bfa8      	it	ge
 802446c:	2318      	movge	r3, #24
 802446e:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8024472:	bfb8      	it	lt
 8024474:	2300      	movlt	r3, #0
 8024476:	f06f 0417 	mvn.w	r4, #23
 802447a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8024780 <__kernel_rem_pio2+0x338>
 802447e:	bfa4      	itt	ge
 8024480:	f1a2 0a03 	subge.w	sl, r2, #3
 8024484:	fb9a f3f3 	sdivge	r3, sl, r3
 8024488:	fb03 4404 	mla	r4, r3, r4, r4
 802448c:	1a5d      	subs	r5, r3, r1
 802448e:	4414      	add	r4, r2
 8024490:	eb09 0601 	add.w	r6, r9, r1
 8024494:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8024498:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 802449c:	2200      	movs	r2, #0
 802449e:	42b2      	cmp	r2, r6
 80244a0:	dd12      	ble.n	80244c8 <__kernel_rem_pio2+0x80>
 80244a2:	aa18      	add	r2, sp, #96	; 0x60
 80244a4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80244a8:	460e      	mov	r6, r1
 80244aa:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80244ae:	f1cb 0a01 	rsb	sl, fp, #1
 80244b2:	eb0a 0006 	add.w	r0, sl, r6
 80244b6:	4581      	cmp	r9, r0
 80244b8:	db25      	blt.n	8024506 <__kernel_rem_pio2+0xbe>
 80244ba:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8024780 <__kernel_rem_pio2+0x338>
 80244be:	f8dd e000 	ldr.w	lr, [sp]
 80244c2:	4615      	mov	r5, r2
 80244c4:	2000      	movs	r0, #0
 80244c6:	e015      	b.n	80244f4 <__kernel_rem_pio2+0xac>
 80244c8:	42d5      	cmn	r5, r2
 80244ca:	d409      	bmi.n	80244e0 <__kernel_rem_pio2+0x98>
 80244cc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80244d0:	ee07 0a90 	vmov	s15, r0
 80244d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80244d8:	eca8 7b02 	vstmia	r8!, {d7}
 80244dc:	3201      	adds	r2, #1
 80244de:	e7de      	b.n	802449e <__kernel_rem_pio2+0x56>
 80244e0:	eeb0 7b46 	vmov.f64	d7, d6
 80244e4:	e7f8      	b.n	80244d8 <__kernel_rem_pio2+0x90>
 80244e6:	ecbe 5b02 	vldmia	lr!, {d5}
 80244ea:	ed95 6b00 	vldr	d6, [r5]
 80244ee:	3001      	adds	r0, #1
 80244f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80244f4:	4288      	cmp	r0, r1
 80244f6:	f1a5 0508 	sub.w	r5, r5, #8
 80244fa:	ddf4      	ble.n	80244e6 <__kernel_rem_pio2+0x9e>
 80244fc:	eca8 7b02 	vstmia	r8!, {d7}
 8024500:	3208      	adds	r2, #8
 8024502:	3601      	adds	r6, #1
 8024504:	e7d5      	b.n	80244b2 <__kernel_rem_pio2+0x6a>
 8024506:	aa04      	add	r2, sp, #16
 8024508:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8024788 <__kernel_rem_pio2+0x340>
 802450c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8024790 <__kernel_rem_pio2+0x348>
 8024510:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8024514:	9201      	str	r2, [sp, #4]
 8024516:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 802451a:	464e      	mov	r6, r9
 802451c:	ab90      	add	r3, sp, #576	; 0x240
 802451e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8024522:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8024526:	ab04      	add	r3, sp, #16
 8024528:	4618      	mov	r0, r3
 802452a:	4632      	mov	r2, r6
 802452c:	2a00      	cmp	r2, #0
 802452e:	dc4e      	bgt.n	80245ce <__kernel_rem_pio2+0x186>
 8024530:	4620      	mov	r0, r4
 8024532:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8024536:	f000 fb4f 	bl	8024bd8 <scalbn>
 802453a:	eeb0 8b40 	vmov.f64	d8, d0
 802453e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8024542:	ee28 0b00 	vmul.f64	d0, d8, d0
 8024546:	f000 fad3 	bl	8024af0 <floor>
 802454a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 802454e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8024552:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8024556:	2c00      	cmp	r4, #0
 8024558:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 802455c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8024560:	ee38 8b40 	vsub.f64	d8, d8, d0
 8024564:	ee17 8a90 	vmov	r8, s15
 8024568:	dd46      	ble.n	80245f8 <__kernel_rem_pio2+0x1b0>
 802456a:	1e70      	subs	r0, r6, #1
 802456c:	aa04      	add	r2, sp, #16
 802456e:	f1c4 0c18 	rsb	ip, r4, #24
 8024572:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8024576:	fa45 f20c 	asr.w	r2, r5, ip
 802457a:	4490      	add	r8, r2
 802457c:	fa02 f20c 	lsl.w	r2, r2, ip
 8024580:	1aad      	subs	r5, r5, r2
 8024582:	aa04      	add	r2, sp, #16
 8024584:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8024588:	f1c4 0217 	rsb	r2, r4, #23
 802458c:	4115      	asrs	r5, r2
 802458e:	2d00      	cmp	r5, #0
 8024590:	dd41      	ble.n	8024616 <__kernel_rem_pio2+0x1ce>
 8024592:	f04f 0c00 	mov.w	ip, #0
 8024596:	f108 0801 	add.w	r8, r8, #1
 802459a:	4660      	mov	r0, ip
 802459c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80245a0:	4566      	cmp	r6, ip
 80245a2:	dc69      	bgt.n	8024678 <__kernel_rem_pio2+0x230>
 80245a4:	2c00      	cmp	r4, #0
 80245a6:	dd03      	ble.n	80245b0 <__kernel_rem_pio2+0x168>
 80245a8:	2c01      	cmp	r4, #1
 80245aa:	d076      	beq.n	802469a <__kernel_rem_pio2+0x252>
 80245ac:	2c02      	cmp	r4, #2
 80245ae:	d07f      	beq.n	80246b0 <__kernel_rem_pio2+0x268>
 80245b0:	2d02      	cmp	r5, #2
 80245b2:	d130      	bne.n	8024616 <__kernel_rem_pio2+0x1ce>
 80245b4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80245b8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80245bc:	b358      	cbz	r0, 8024616 <__kernel_rem_pio2+0x1ce>
 80245be:	4620      	mov	r0, r4
 80245c0:	9102      	str	r1, [sp, #8]
 80245c2:	f000 fb09 	bl	8024bd8 <scalbn>
 80245c6:	9902      	ldr	r1, [sp, #8]
 80245c8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80245cc:	e023      	b.n	8024616 <__kernel_rem_pio2+0x1ce>
 80245ce:	ee20 7b09 	vmul.f64	d7, d0, d9
 80245d2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80245d6:	3a01      	subs	r2, #1
 80245d8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80245dc:	ad68      	add	r5, sp, #416	; 0x1a0
 80245de:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80245e2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80245e6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 80245ea:	eca0 0a01 	vstmia	r0!, {s0}
 80245ee:	ed95 0b00 	vldr	d0, [r5]
 80245f2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80245f6:	e799      	b.n	802452c <__kernel_rem_pio2+0xe4>
 80245f8:	d105      	bne.n	8024606 <__kernel_rem_pio2+0x1be>
 80245fa:	1e72      	subs	r2, r6, #1
 80245fc:	a804      	add	r0, sp, #16
 80245fe:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8024602:	15ed      	asrs	r5, r5, #23
 8024604:	e7c3      	b.n	802458e <__kernel_rem_pio2+0x146>
 8024606:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802460a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024612:	da2f      	bge.n	8024674 <__kernel_rem_pio2+0x22c>
 8024614:	2500      	movs	r5, #0
 8024616:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802461e:	f040 8087 	bne.w	8024730 <__kernel_rem_pio2+0x2e8>
 8024622:	1e73      	subs	r3, r6, #1
 8024624:	4618      	mov	r0, r3
 8024626:	f04f 0c00 	mov.w	ip, #0
 802462a:	4548      	cmp	r0, r9
 802462c:	da47      	bge.n	80246be <__kernel_rem_pio2+0x276>
 802462e:	f1bc 0f00 	cmp.w	ip, #0
 8024632:	d070      	beq.n	8024716 <__kernel_rem_pio2+0x2ce>
 8024634:	aa04      	add	r2, sp, #16
 8024636:	3c18      	subs	r4, #24
 8024638:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802463c:	2a00      	cmp	r2, #0
 802463e:	d075      	beq.n	802472c <__kernel_rem_pio2+0x2e4>
 8024640:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8024644:	4620      	mov	r0, r4
 8024646:	9300      	str	r3, [sp, #0]
 8024648:	f000 fac6 	bl	8024bd8 <scalbn>
 802464c:	9b00      	ldr	r3, [sp, #0]
 802464e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8024788 <__kernel_rem_pio2+0x340>
 8024652:	461a      	mov	r2, r3
 8024654:	2a00      	cmp	r2, #0
 8024656:	f280 80ac 	bge.w	80247b2 <__kernel_rem_pio2+0x36a>
 802465a:	4619      	mov	r1, r3
 802465c:	2000      	movs	r0, #0
 802465e:	2900      	cmp	r1, #0
 8024660:	f2c0 80cd 	blt.w	80247fe <__kernel_rem_pio2+0x3b6>
 8024664:	aa68      	add	r2, sp, #416	; 0x1a0
 8024666:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 802466a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8024780 <__kernel_rem_pio2+0x338>
 802466e:	4e4b      	ldr	r6, [pc, #300]	; (802479c <__kernel_rem_pio2+0x354>)
 8024670:	2200      	movs	r2, #0
 8024672:	e0b8      	b.n	80247e6 <__kernel_rem_pio2+0x39e>
 8024674:	2502      	movs	r5, #2
 8024676:	e78c      	b.n	8024592 <__kernel_rem_pio2+0x14a>
 8024678:	681a      	ldr	r2, [r3, #0]
 802467a:	b948      	cbnz	r0, 8024690 <__kernel_rem_pio2+0x248>
 802467c:	b11a      	cbz	r2, 8024686 <__kernel_rem_pio2+0x23e>
 802467e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8024682:	601a      	str	r2, [r3, #0]
 8024684:	2201      	movs	r2, #1
 8024686:	f10c 0c01 	add.w	ip, ip, #1
 802468a:	3304      	adds	r3, #4
 802468c:	4610      	mov	r0, r2
 802468e:	e787      	b.n	80245a0 <__kernel_rem_pio2+0x158>
 8024690:	ebae 0202 	sub.w	r2, lr, r2
 8024694:	601a      	str	r2, [r3, #0]
 8024696:	4602      	mov	r2, r0
 8024698:	e7f5      	b.n	8024686 <__kernel_rem_pio2+0x23e>
 802469a:	1e72      	subs	r2, r6, #1
 802469c:	ab04      	add	r3, sp, #16
 802469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80246a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80246a6:	f10d 0c10 	add.w	ip, sp, #16
 80246aa:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80246ae:	e77f      	b.n	80245b0 <__kernel_rem_pio2+0x168>
 80246b0:	1e72      	subs	r2, r6, #1
 80246b2:	ab04      	add	r3, sp, #16
 80246b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80246b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80246bc:	e7f3      	b.n	80246a6 <__kernel_rem_pio2+0x25e>
 80246be:	aa04      	add	r2, sp, #16
 80246c0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80246c4:	3801      	subs	r0, #1
 80246c6:	ea4c 0c02 	orr.w	ip, ip, r2
 80246ca:	e7ae      	b.n	802462a <__kernel_rem_pio2+0x1e2>
 80246cc:	3001      	adds	r0, #1
 80246ce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80246d2:	2a00      	cmp	r2, #0
 80246d4:	d0fa      	beq.n	80246cc <__kernel_rem_pio2+0x284>
 80246d6:	eb06 020b 	add.w	r2, r6, fp
 80246da:	ad18      	add	r5, sp, #96	; 0x60
 80246dc:	1c73      	adds	r3, r6, #1
 80246de:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80246e2:	4406      	add	r6, r0
 80246e4:	429e      	cmp	r6, r3
 80246e6:	f6ff af19 	blt.w	802451c <__kernel_rem_pio2+0xd4>
 80246ea:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80246ee:	9d00      	ldr	r5, [sp, #0]
 80246f0:	ee07 0a90 	vmov	s15, r0
 80246f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80246f8:	2000      	movs	r0, #0
 80246fa:	eca2 7b02 	vstmia	r2!, {d7}
 80246fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8024780 <__kernel_rem_pio2+0x338>
 8024702:	4694      	mov	ip, r2
 8024704:	4288      	cmp	r0, r1
 8024706:	dd09      	ble.n	802471c <__kernel_rem_pio2+0x2d4>
 8024708:	a868      	add	r0, sp, #416	; 0x1a0
 802470a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 802470e:	ed80 7b00 	vstr	d7, [r0]
 8024712:	3301      	adds	r3, #1
 8024714:	e7e6      	b.n	80246e4 <__kernel_rem_pio2+0x29c>
 8024716:	9b01      	ldr	r3, [sp, #4]
 8024718:	2001      	movs	r0, #1
 802471a:	e7d8      	b.n	80246ce <__kernel_rem_pio2+0x286>
 802471c:	ecb5 5b02 	vldmia	r5!, {d5}
 8024720:	ed3c 6b02 	vldmdb	ip!, {d6}
 8024724:	3001      	adds	r0, #1
 8024726:	eea5 7b06 	vfma.f64	d7, d5, d6
 802472a:	e7eb      	b.n	8024704 <__kernel_rem_pio2+0x2bc>
 802472c:	3b01      	subs	r3, #1
 802472e:	e781      	b.n	8024634 <__kernel_rem_pio2+0x1ec>
 8024730:	4260      	negs	r0, r4
 8024732:	eeb0 0b48 	vmov.f64	d0, d8
 8024736:	f000 fa4f 	bl	8024bd8 <scalbn>
 802473a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8024790 <__kernel_rem_pio2+0x348>
 802473e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8024742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024746:	db2b      	blt.n	80247a0 <__kernel_rem_pio2+0x358>
 8024748:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8024788 <__kernel_rem_pio2+0x340>
 802474c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8024750:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8024754:	aa04      	add	r2, sp, #16
 8024756:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 802475a:	eea5 0b46 	vfms.f64	d0, d5, d6
 802475e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8024762:	a904      	add	r1, sp, #16
 8024764:	ee10 3a10 	vmov	r3, s0
 8024768:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802476c:	ee17 2a10 	vmov	r2, s14
 8024770:	1c73      	adds	r3, r6, #1
 8024772:	3418      	adds	r4, #24
 8024774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8024778:	e762      	b.n	8024640 <__kernel_rem_pio2+0x1f8>
 802477a:	bf00      	nop
 802477c:	f3af 8000 	nop.w
	...
 802478c:	3e700000 	.word	0x3e700000
 8024790:	00000000 	.word	0x00000000
 8024794:	41700000 	.word	0x41700000
 8024798:	0802a2c8 	.word	0x0802a2c8
 802479c:	0802a288 	.word	0x0802a288
 80247a0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80247a4:	aa04      	add	r2, sp, #16
 80247a6:	ee10 3a10 	vmov	r3, s0
 80247aa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80247ae:	4633      	mov	r3, r6
 80247b0:	e746      	b.n	8024640 <__kernel_rem_pio2+0x1f8>
 80247b2:	a804      	add	r0, sp, #16
 80247b4:	a968      	add	r1, sp, #416	; 0x1a0
 80247b6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80247ba:	9000      	str	r0, [sp, #0]
 80247bc:	ee07 0a90 	vmov	s15, r0
 80247c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80247c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80247c8:	3a01      	subs	r2, #1
 80247ca:	ee27 7b00 	vmul.f64	d7, d7, d0
 80247ce:	ee20 0b06 	vmul.f64	d0, d0, d6
 80247d2:	ed81 7b00 	vstr	d7, [r1]
 80247d6:	e73d      	b.n	8024654 <__kernel_rem_pio2+0x20c>
 80247d8:	ecb6 5b02 	vldmia	r6!, {d5}
 80247dc:	ecb4 6b02 	vldmia	r4!, {d6}
 80247e0:	3201      	adds	r2, #1
 80247e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80247e6:	454a      	cmp	r2, r9
 80247e8:	dc01      	bgt.n	80247ee <__kernel_rem_pio2+0x3a6>
 80247ea:	4290      	cmp	r0, r2
 80247ec:	daf4      	bge.n	80247d8 <__kernel_rem_pio2+0x390>
 80247ee:	aa40      	add	r2, sp, #256	; 0x100
 80247f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80247f4:	ed82 7b00 	vstr	d7, [r2]
 80247f8:	3901      	subs	r1, #1
 80247fa:	3001      	adds	r0, #1
 80247fc:	e72f      	b.n	802465e <__kernel_rem_pio2+0x216>
 80247fe:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8024800:	2a02      	cmp	r2, #2
 8024802:	dc0a      	bgt.n	802481a <__kernel_rem_pio2+0x3d2>
 8024804:	2a00      	cmp	r2, #0
 8024806:	dc5a      	bgt.n	80248be <__kernel_rem_pio2+0x476>
 8024808:	d039      	beq.n	802487e <__kernel_rem_pio2+0x436>
 802480a:	f008 0007 	and.w	r0, r8, #7
 802480e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8024812:	ecbd 8b06 	vpop	{d8-d10}
 8024816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802481a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 802481c:	2a03      	cmp	r2, #3
 802481e:	d1f4      	bne.n	802480a <__kernel_rem_pio2+0x3c2>
 8024820:	aa40      	add	r2, sp, #256	; 0x100
 8024822:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8024826:	4611      	mov	r1, r2
 8024828:	4618      	mov	r0, r3
 802482a:	2800      	cmp	r0, #0
 802482c:	f1a1 0108 	sub.w	r1, r1, #8
 8024830:	dc52      	bgt.n	80248d8 <__kernel_rem_pio2+0x490>
 8024832:	4619      	mov	r1, r3
 8024834:	2901      	cmp	r1, #1
 8024836:	f1a2 0208 	sub.w	r2, r2, #8
 802483a:	dc5d      	bgt.n	80248f8 <__kernel_rem_pio2+0x4b0>
 802483c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8024940 <__kernel_rem_pio2+0x4f8>
 8024840:	2b01      	cmp	r3, #1
 8024842:	dc69      	bgt.n	8024918 <__kernel_rem_pio2+0x4d0>
 8024844:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8024848:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 802484c:	2d00      	cmp	r5, #0
 802484e:	d16c      	bne.n	802492a <__kernel_rem_pio2+0x4e2>
 8024850:	ed87 5b00 	vstr	d5, [r7]
 8024854:	ed87 6b02 	vstr	d6, [r7, #8]
 8024858:	ed87 7b04 	vstr	d7, [r7, #16]
 802485c:	e7d5      	b.n	802480a <__kernel_rem_pio2+0x3c2>
 802485e:	aa40      	add	r2, sp, #256	; 0x100
 8024860:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8024864:	ed92 6b00 	vldr	d6, [r2]
 8024868:	3b01      	subs	r3, #1
 802486a:	ee37 7b06 	vadd.f64	d7, d7, d6
 802486e:	2b00      	cmp	r3, #0
 8024870:	daf5      	bge.n	802485e <__kernel_rem_pio2+0x416>
 8024872:	b10d      	cbz	r5, 8024878 <__kernel_rem_pio2+0x430>
 8024874:	eeb1 7b47 	vneg.f64	d7, d7
 8024878:	ed87 7b00 	vstr	d7, [r7]
 802487c:	e7c5      	b.n	802480a <__kernel_rem_pio2+0x3c2>
 802487e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8024940 <__kernel_rem_pio2+0x4f8>
 8024882:	e7f4      	b.n	802486e <__kernel_rem_pio2+0x426>
 8024884:	a940      	add	r1, sp, #256	; 0x100
 8024886:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 802488a:	ed91 7b00 	vldr	d7, [r1]
 802488e:	3a01      	subs	r2, #1
 8024890:	ee36 6b07 	vadd.f64	d6, d6, d7
 8024894:	2a00      	cmp	r2, #0
 8024896:	daf5      	bge.n	8024884 <__kernel_rem_pio2+0x43c>
 8024898:	b1ad      	cbz	r5, 80248c6 <__kernel_rem_pio2+0x47e>
 802489a:	eeb1 7b46 	vneg.f64	d7, d6
 802489e:	ed87 7b00 	vstr	d7, [r7]
 80248a2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80248a6:	a942      	add	r1, sp, #264	; 0x108
 80248a8:	2201      	movs	r2, #1
 80248aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80248ae:	4293      	cmp	r3, r2
 80248b0:	da0c      	bge.n	80248cc <__kernel_rem_pio2+0x484>
 80248b2:	b10d      	cbz	r5, 80248b8 <__kernel_rem_pio2+0x470>
 80248b4:	eeb1 7b47 	vneg.f64	d7, d7
 80248b8:	ed87 7b02 	vstr	d7, [r7, #8]
 80248bc:	e7a5      	b.n	802480a <__kernel_rem_pio2+0x3c2>
 80248be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8024940 <__kernel_rem_pio2+0x4f8>
 80248c2:	461a      	mov	r2, r3
 80248c4:	e7e6      	b.n	8024894 <__kernel_rem_pio2+0x44c>
 80248c6:	eeb0 7b46 	vmov.f64	d7, d6
 80248ca:	e7e8      	b.n	802489e <__kernel_rem_pio2+0x456>
 80248cc:	ecb1 6b02 	vldmia	r1!, {d6}
 80248d0:	3201      	adds	r2, #1
 80248d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80248d6:	e7ea      	b.n	80248ae <__kernel_rem_pio2+0x466>
 80248d8:	ed91 7b00 	vldr	d7, [r1]
 80248dc:	ed91 5b02 	vldr	d5, [r1, #8]
 80248e0:	3801      	subs	r0, #1
 80248e2:	ee37 6b05 	vadd.f64	d6, d7, d5
 80248e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80248ea:	ed81 6b00 	vstr	d6, [r1]
 80248ee:	ee37 7b05 	vadd.f64	d7, d7, d5
 80248f2:	ed81 7b02 	vstr	d7, [r1, #8]
 80248f6:	e798      	b.n	802482a <__kernel_rem_pio2+0x3e2>
 80248f8:	ed92 7b00 	vldr	d7, [r2]
 80248fc:	ed92 5b02 	vldr	d5, [r2, #8]
 8024900:	3901      	subs	r1, #1
 8024902:	ee37 6b05 	vadd.f64	d6, d7, d5
 8024906:	ee37 7b46 	vsub.f64	d7, d7, d6
 802490a:	ed82 6b00 	vstr	d6, [r2]
 802490e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8024912:	ed82 7b02 	vstr	d7, [r2, #8]
 8024916:	e78d      	b.n	8024834 <__kernel_rem_pio2+0x3ec>
 8024918:	aa40      	add	r2, sp, #256	; 0x100
 802491a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802491e:	ed92 6b00 	vldr	d6, [r2]
 8024922:	3b01      	subs	r3, #1
 8024924:	ee37 7b06 	vadd.f64	d7, d7, d6
 8024928:	e78a      	b.n	8024840 <__kernel_rem_pio2+0x3f8>
 802492a:	eeb1 5b45 	vneg.f64	d5, d5
 802492e:	eeb1 6b46 	vneg.f64	d6, d6
 8024932:	ed87 5b00 	vstr	d5, [r7]
 8024936:	eeb1 7b47 	vneg.f64	d7, d7
 802493a:	ed87 6b02 	vstr	d6, [r7, #8]
 802493e:	e78b      	b.n	8024858 <__kernel_rem_pio2+0x410>
	...

08024948 <__kernel_sin>:
 8024948:	ee10 3a90 	vmov	r3, s1
 802494c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024950:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8024954:	da04      	bge.n	8024960 <__kernel_sin+0x18>
 8024956:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 802495a:	ee17 3a90 	vmov	r3, s15
 802495e:	b35b      	cbz	r3, 80249b8 <__kernel_sin+0x70>
 8024960:	ee20 6b00 	vmul.f64	d6, d0, d0
 8024964:	ee20 5b06 	vmul.f64	d5, d0, d6
 8024968:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80249c0 <__kernel_sin+0x78>
 802496c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80249c8 <__kernel_sin+0x80>
 8024970:	eea6 4b07 	vfma.f64	d4, d6, d7
 8024974:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80249d0 <__kernel_sin+0x88>
 8024978:	eea4 7b06 	vfma.f64	d7, d4, d6
 802497c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80249d8 <__kernel_sin+0x90>
 8024980:	eea7 4b06 	vfma.f64	d4, d7, d6
 8024984:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80249e0 <__kernel_sin+0x98>
 8024988:	eea4 7b06 	vfma.f64	d7, d4, d6
 802498c:	b930      	cbnz	r0, 802499c <__kernel_sin+0x54>
 802498e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80249e8 <__kernel_sin+0xa0>
 8024992:	eea6 4b07 	vfma.f64	d4, d6, d7
 8024996:	eea4 0b05 	vfma.f64	d0, d4, d5
 802499a:	4770      	bx	lr
 802499c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80249a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80249a4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80249a8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80249ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80249f0 <__kernel_sin+0xa8>
 80249b0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80249b4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80249b8:	4770      	bx	lr
 80249ba:	bf00      	nop
 80249bc:	f3af 8000 	nop.w
 80249c0:	5acfd57c 	.word	0x5acfd57c
 80249c4:	3de5d93a 	.word	0x3de5d93a
 80249c8:	8a2b9ceb 	.word	0x8a2b9ceb
 80249cc:	be5ae5e6 	.word	0xbe5ae5e6
 80249d0:	57b1fe7d 	.word	0x57b1fe7d
 80249d4:	3ec71de3 	.word	0x3ec71de3
 80249d8:	19c161d5 	.word	0x19c161d5
 80249dc:	bf2a01a0 	.word	0xbf2a01a0
 80249e0:	1110f8a6 	.word	0x1110f8a6
 80249e4:	3f811111 	.word	0x3f811111
 80249e8:	55555549 	.word	0x55555549
 80249ec:	bfc55555 	.word	0xbfc55555
 80249f0:	55555549 	.word	0x55555549
 80249f4:	3fc55555 	.word	0x3fc55555

080249f8 <with_errno>:
 80249f8:	b513      	push	{r0, r1, r4, lr}
 80249fa:	4604      	mov	r4, r0
 80249fc:	ed8d 0b00 	vstr	d0, [sp]
 8024a00:	f7fd f980 	bl	8021d04 <__errno>
 8024a04:	ed9d 0b00 	vldr	d0, [sp]
 8024a08:	6004      	str	r4, [r0, #0]
 8024a0a:	b002      	add	sp, #8
 8024a0c:	bd10      	pop	{r4, pc}

08024a0e <xflow>:
 8024a0e:	b082      	sub	sp, #8
 8024a10:	b158      	cbz	r0, 8024a2a <xflow+0x1c>
 8024a12:	eeb1 7b40 	vneg.f64	d7, d0
 8024a16:	ed8d 7b00 	vstr	d7, [sp]
 8024a1a:	ed9d 7b00 	vldr	d7, [sp]
 8024a1e:	2022      	movs	r0, #34	; 0x22
 8024a20:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024a24:	b002      	add	sp, #8
 8024a26:	f7ff bfe7 	b.w	80249f8 <with_errno>
 8024a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8024a2e:	e7f2      	b.n	8024a16 <xflow+0x8>

08024a30 <__math_uflow>:
 8024a30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024a38 <__math_uflow+0x8>
 8024a34:	f7ff bfeb 	b.w	8024a0e <xflow>
 8024a38:	00000000 	.word	0x00000000
 8024a3c:	10000000 	.word	0x10000000

08024a40 <__math_oflow>:
 8024a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024a48 <__math_oflow+0x8>
 8024a44:	f7ff bfe3 	b.w	8024a0e <xflow>
 8024a48:	00000000 	.word	0x00000000
 8024a4c:	70000000 	.word	0x70000000

08024a50 <__math_divzero>:
 8024a50:	b082      	sub	sp, #8
 8024a52:	2800      	cmp	r0, #0
 8024a54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8024a58:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8024a5c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8024a60:	ed8d 7b00 	vstr	d7, [sp]
 8024a64:	ed9d 0b00 	vldr	d0, [sp]
 8024a68:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8024a78 <__math_divzero+0x28>
 8024a6c:	2022      	movs	r0, #34	; 0x22
 8024a6e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8024a72:	b002      	add	sp, #8
 8024a74:	f7ff bfc0 	b.w	80249f8 <with_errno>
	...

08024a80 <__math_invalid>:
 8024a80:	eeb0 7b40 	vmov.f64	d7, d0
 8024a84:	eeb4 7b47 	vcmp.f64	d7, d7
 8024a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a8c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8024a90:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8024a94:	d602      	bvs.n	8024a9c <__math_invalid+0x1c>
 8024a96:	2021      	movs	r0, #33	; 0x21
 8024a98:	f7ff bfae 	b.w	80249f8 <with_errno>
 8024a9c:	4770      	bx	lr

08024a9e <__math_check_uflow>:
 8024a9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8024aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024aa6:	d102      	bne.n	8024aae <__math_check_uflow+0x10>
 8024aa8:	2022      	movs	r0, #34	; 0x22
 8024aaa:	f7ff bfa5 	b.w	80249f8 <with_errno>
 8024aae:	4770      	bx	lr

08024ab0 <__math_check_oflow>:
 8024ab0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8024ad0 <__math_check_oflow+0x20>
 8024ab4:	eeb0 7bc0 	vabs.f64	d7, d0
 8024ab8:	eeb4 7b46 	vcmp.f64	d7, d6
 8024abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ac0:	dd02      	ble.n	8024ac8 <__math_check_oflow+0x18>
 8024ac2:	2022      	movs	r0, #34	; 0x22
 8024ac4:	f7ff bf98 	b.w	80249f8 <with_errno>
 8024ac8:	4770      	bx	lr
 8024aca:	bf00      	nop
 8024acc:	f3af 8000 	nop.w
 8024ad0:	ffffffff 	.word	0xffffffff
 8024ad4:	7fefffff 	.word	0x7fefffff

08024ad8 <fabs>:
 8024ad8:	ec51 0b10 	vmov	r0, r1, d0
 8024adc:	ee10 2a10 	vmov	r2, s0
 8024ae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024ae4:	ec43 2b10 	vmov	d0, r2, r3
 8024ae8:	4770      	bx	lr
 8024aea:	0000      	movs	r0, r0
 8024aec:	0000      	movs	r0, r0
	...

08024af0 <floor>:
 8024af0:	ee10 1a90 	vmov	r1, s1
 8024af4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024af8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8024afc:	2b13      	cmp	r3, #19
 8024afe:	b530      	push	{r4, r5, lr}
 8024b00:	ee10 0a10 	vmov	r0, s0
 8024b04:	ee10 5a10 	vmov	r5, s0
 8024b08:	dc31      	bgt.n	8024b6e <floor+0x7e>
 8024b0a:	2b00      	cmp	r3, #0
 8024b0c:	da15      	bge.n	8024b3a <floor+0x4a>
 8024b0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8024bc8 <floor+0xd8>
 8024b12:	ee30 0b07 	vadd.f64	d0, d0, d7
 8024b16:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b1e:	dd07      	ble.n	8024b30 <floor+0x40>
 8024b20:	2900      	cmp	r1, #0
 8024b22:	da4e      	bge.n	8024bc2 <floor+0xd2>
 8024b24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024b28:	4318      	orrs	r0, r3
 8024b2a:	d001      	beq.n	8024b30 <floor+0x40>
 8024b2c:	4928      	ldr	r1, [pc, #160]	; (8024bd0 <floor+0xe0>)
 8024b2e:	2000      	movs	r0, #0
 8024b30:	460b      	mov	r3, r1
 8024b32:	4602      	mov	r2, r0
 8024b34:	ec43 2b10 	vmov	d0, r2, r3
 8024b38:	e020      	b.n	8024b7c <floor+0x8c>
 8024b3a:	4a26      	ldr	r2, [pc, #152]	; (8024bd4 <floor+0xe4>)
 8024b3c:	411a      	asrs	r2, r3
 8024b3e:	ea01 0402 	and.w	r4, r1, r2
 8024b42:	4304      	orrs	r4, r0
 8024b44:	d01a      	beq.n	8024b7c <floor+0x8c>
 8024b46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8024bc8 <floor+0xd8>
 8024b4a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8024b4e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b56:	ddeb      	ble.n	8024b30 <floor+0x40>
 8024b58:	2900      	cmp	r1, #0
 8024b5a:	bfbe      	ittt	lt
 8024b5c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8024b60:	fa40 f303 	asrlt.w	r3, r0, r3
 8024b64:	18c9      	addlt	r1, r1, r3
 8024b66:	ea21 0102 	bic.w	r1, r1, r2
 8024b6a:	2000      	movs	r0, #0
 8024b6c:	e7e0      	b.n	8024b30 <floor+0x40>
 8024b6e:	2b33      	cmp	r3, #51	; 0x33
 8024b70:	dd05      	ble.n	8024b7e <floor+0x8e>
 8024b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024b76:	d101      	bne.n	8024b7c <floor+0x8c>
 8024b78:	ee30 0b00 	vadd.f64	d0, d0, d0
 8024b7c:	bd30      	pop	{r4, r5, pc}
 8024b7e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8024b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024b86:	40e2      	lsrs	r2, r4
 8024b88:	4202      	tst	r2, r0
 8024b8a:	d0f7      	beq.n	8024b7c <floor+0x8c>
 8024b8c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8024bc8 <floor+0xd8>
 8024b90:	ee30 0b07 	vadd.f64	d0, d0, d7
 8024b94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b9c:	ddc8      	ble.n	8024b30 <floor+0x40>
 8024b9e:	2900      	cmp	r1, #0
 8024ba0:	da02      	bge.n	8024ba8 <floor+0xb8>
 8024ba2:	2b14      	cmp	r3, #20
 8024ba4:	d103      	bne.n	8024bae <floor+0xbe>
 8024ba6:	3101      	adds	r1, #1
 8024ba8:	ea20 0002 	bic.w	r0, r0, r2
 8024bac:	e7c0      	b.n	8024b30 <floor+0x40>
 8024bae:	2401      	movs	r4, #1
 8024bb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8024bb4:	fa04 f303 	lsl.w	r3, r4, r3
 8024bb8:	4418      	add	r0, r3
 8024bba:	42a8      	cmp	r0, r5
 8024bbc:	bf38      	it	cc
 8024bbe:	1909      	addcc	r1, r1, r4
 8024bc0:	e7f2      	b.n	8024ba8 <floor+0xb8>
 8024bc2:	2000      	movs	r0, #0
 8024bc4:	4601      	mov	r1, r0
 8024bc6:	e7b3      	b.n	8024b30 <floor+0x40>
 8024bc8:	8800759c 	.word	0x8800759c
 8024bcc:	7e37e43c 	.word	0x7e37e43c
 8024bd0:	bff00000 	.word	0xbff00000
 8024bd4:	000fffff 	.word	0x000fffff

08024bd8 <scalbn>:
 8024bd8:	b082      	sub	sp, #8
 8024bda:	ed8d 0b00 	vstr	d0, [sp]
 8024bde:	9b01      	ldr	r3, [sp, #4]
 8024be0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8024be4:	b9a2      	cbnz	r2, 8024c10 <scalbn+0x38>
 8024be6:	9a00      	ldr	r2, [sp, #0]
 8024be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024bec:	4313      	orrs	r3, r2
 8024bee:	d03a      	beq.n	8024c66 <scalbn+0x8e>
 8024bf0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8024cc8 <scalbn+0xf0>
 8024bf4:	4b40      	ldr	r3, [pc, #256]	; (8024cf8 <scalbn+0x120>)
 8024bf6:	ee20 7b07 	vmul.f64	d7, d0, d7
 8024bfa:	4298      	cmp	r0, r3
 8024bfc:	ed8d 7b00 	vstr	d7, [sp]
 8024c00:	da11      	bge.n	8024c26 <scalbn+0x4e>
 8024c02:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8024cd0 <scalbn+0xf8>
 8024c06:	ed9d 6b00 	vldr	d6, [sp]
 8024c0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024c0e:	e007      	b.n	8024c20 <scalbn+0x48>
 8024c10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024c14:	428a      	cmp	r2, r1
 8024c16:	d10a      	bne.n	8024c2e <scalbn+0x56>
 8024c18:	ed9d 7b00 	vldr	d7, [sp]
 8024c1c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8024c20:	ed8d 7b00 	vstr	d7, [sp]
 8024c24:	e01f      	b.n	8024c66 <scalbn+0x8e>
 8024c26:	9b01      	ldr	r3, [sp, #4]
 8024c28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8024c2c:	3a36      	subs	r2, #54	; 0x36
 8024c2e:	4402      	add	r2, r0
 8024c30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024c34:	428a      	cmp	r2, r1
 8024c36:	dd0a      	ble.n	8024c4e <scalbn+0x76>
 8024c38:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8024cd8 <scalbn+0x100>
 8024c3c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8024ce0 <scalbn+0x108>
 8024c40:	eeb0 6b47 	vmov.f64	d6, d7
 8024c44:	9b01      	ldr	r3, [sp, #4]
 8024c46:	2b00      	cmp	r3, #0
 8024c48:	fe27 7b05 	vselge.f64	d7, d7, d5
 8024c4c:	e7dd      	b.n	8024c0a <scalbn+0x32>
 8024c4e:	2a00      	cmp	r2, #0
 8024c50:	dd0d      	ble.n	8024c6e <scalbn+0x96>
 8024c52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024c56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024c5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024c5e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024c62:	e9cd 0100 	strd	r0, r1, [sp]
 8024c66:	ed9d 0b00 	vldr	d0, [sp]
 8024c6a:	b002      	add	sp, #8
 8024c6c:	4770      	bx	lr
 8024c6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024c72:	da18      	bge.n	8024ca6 <scalbn+0xce>
 8024c74:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024c78:	4298      	cmp	r0, r3
 8024c7a:	9b01      	ldr	r3, [sp, #4]
 8024c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8024c80:	dd09      	ble.n	8024c96 <scalbn+0xbe>
 8024c82:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8024cd8 <scalbn+0x100>
 8024c86:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8024ce0 <scalbn+0x108>
 8024c8a:	eeb0 6b47 	vmov.f64	d6, d7
 8024c8e:	2b00      	cmp	r3, #0
 8024c90:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8024c94:	e7b9      	b.n	8024c0a <scalbn+0x32>
 8024c96:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8024cd0 <scalbn+0xf8>
 8024c9a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8024ce8 <scalbn+0x110>
 8024c9e:	eeb0 6b47 	vmov.f64	d6, d7
 8024ca2:	2b00      	cmp	r3, #0
 8024ca4:	e7f4      	b.n	8024c90 <scalbn+0xb8>
 8024ca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024caa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024cae:	3236      	adds	r2, #54	; 0x36
 8024cb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024cb4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024cb8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8024cf0 <scalbn+0x118>
 8024cbc:	ec41 0b17 	vmov	d7, r0, r1
 8024cc0:	e7a3      	b.n	8024c0a <scalbn+0x32>
 8024cc2:	bf00      	nop
 8024cc4:	f3af 8000 	nop.w
 8024cc8:	00000000 	.word	0x00000000
 8024ccc:	43500000 	.word	0x43500000
 8024cd0:	c2f8f359 	.word	0xc2f8f359
 8024cd4:	01a56e1f 	.word	0x01a56e1f
 8024cd8:	8800759c 	.word	0x8800759c
 8024cdc:	7e37e43c 	.word	0x7e37e43c
 8024ce0:	8800759c 	.word	0x8800759c
 8024ce4:	fe37e43c 	.word	0xfe37e43c
 8024ce8:	c2f8f359 	.word	0xc2f8f359
 8024cec:	81a56e1f 	.word	0x81a56e1f
 8024cf0:	00000000 	.word	0x00000000
 8024cf4:	3c900000 	.word	0x3c900000
 8024cf8:	ffff3cb0 	.word	0xffff3cb0

08024cfc <_init>:
 8024cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024cfe:	bf00      	nop
 8024d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024d02:	bc08      	pop	{r3}
 8024d04:	469e      	mov	lr, r3
 8024d06:	4770      	bx	lr

08024d08 <_fini>:
 8024d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d0a:	bf00      	nop
 8024d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024d0e:	bc08      	pop	{r3}
 8024d10:	469e      	mov	lr, r3
 8024d12:	4770      	bx	lr
