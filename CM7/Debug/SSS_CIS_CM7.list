
SSS_CIS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023a94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055c0  08023d38  08023d38  00033d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080292f8  080292f8  0004361c  2**0
                  CONTENTS
  4 .ARM          00000008  080292f8  080292f8  000392f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029300  08029300  0004361c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029300  08029300  00039300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029304  08029304  00039304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000361c  24000000  08029308  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007c34  2400361c  0802c924  0004361c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400b250  0802c924  0004b250  2**0
                  ALLOC
 11 .lwip_sec     000019d0  30040000  0802c924  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004361c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000795da  00000000  00000000  0004364a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c491  00000000  00000000  000bcc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ec8  00000000  00000000  000c90b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002c20  00000000  00000000  000cbf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00052fb2  00000000  00000000  000ceba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00051676  00000000  00000000  00121b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c0737  00000000  00000000  001731c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  003338ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d8c0  00000000  00000000  00333954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400361c 	.word	0x2400361c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023d1c 	.word	0x08023d1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24003620 	.word	0x24003620
 80002dc:	08023d1c 	.word	0x08023d1c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 b9a6 	b.w	8000a6c <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468c      	mov	ip, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 8083 	bne.w	80008be <__udivmoddi4+0x116>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d947      	bls.n	800084e <__udivmoddi4+0xa6>
 80007be:	fab2 f282 	clz	r2, r2
 80007c2:	b142      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c4:	f1c2 0020 	rsb	r0, r2, #32
 80007c8:	fa24 f000 	lsr.w	r0, r4, r0
 80007cc:	4091      	lsls	r1, r2
 80007ce:	4097      	lsls	r7, r2
 80007d0:	ea40 0c01 	orr.w	ip, r0, r1
 80007d4:	4094      	lsls	r4, r2
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fbbc f6f8 	udiv	r6, ip, r8
 80007e0:	fa1f fe87 	uxth.w	lr, r7
 80007e4:	fb08 c116 	mls	r1, r8, r6, ip
 80007e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ec:	fb06 f10e 	mul.w	r1, r6, lr
 80007f0:	4299      	cmp	r1, r3
 80007f2:	d909      	bls.n	8000808 <__udivmoddi4+0x60>
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007fa:	f080 8119 	bcs.w	8000a30 <__udivmoddi4+0x288>
 80007fe:	4299      	cmp	r1, r3
 8000800:	f240 8116 	bls.w	8000a30 <__udivmoddi4+0x288>
 8000804:	3e02      	subs	r6, #2
 8000806:	443b      	add	r3, r7
 8000808:	1a5b      	subs	r3, r3, r1
 800080a:	b2a4      	uxth	r4, r4
 800080c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000810:	fb08 3310 	mls	r3, r8, r0, r3
 8000814:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000818:	fb00 fe0e 	mul.w	lr, r0, lr
 800081c:	45a6      	cmp	lr, r4
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x8c>
 8000820:	193c      	adds	r4, r7, r4
 8000822:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000826:	f080 8105 	bcs.w	8000a34 <__udivmoddi4+0x28c>
 800082a:	45a6      	cmp	lr, r4
 800082c:	f240 8102 	bls.w	8000a34 <__udivmoddi4+0x28c>
 8000830:	3802      	subs	r0, #2
 8000832:	443c      	add	r4, r7
 8000834:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000838:	eba4 040e 	sub.w	r4, r4, lr
 800083c:	2600      	movs	r6, #0
 800083e:	b11d      	cbz	r5, 8000848 <__udivmoddi4+0xa0>
 8000840:	40d4      	lsrs	r4, r2
 8000842:	2300      	movs	r3, #0
 8000844:	e9c5 4300 	strd	r4, r3, [r5]
 8000848:	4631      	mov	r1, r6
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	b902      	cbnz	r2, 8000852 <__udivmoddi4+0xaa>
 8000850:	deff      	udf	#255	; 0xff
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	2a00      	cmp	r2, #0
 8000858:	d150      	bne.n	80008fc <__udivmoddi4+0x154>
 800085a:	1bcb      	subs	r3, r1, r7
 800085c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000860:	fa1f f887 	uxth.w	r8, r7
 8000864:	2601      	movs	r6, #1
 8000866:	fbb3 fcfe 	udiv	ip, r3, lr
 800086a:	0c21      	lsrs	r1, r4, #16
 800086c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000870:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000874:	fb08 f30c 	mul.w	r3, r8, ip
 8000878:	428b      	cmp	r3, r1
 800087a:	d907      	bls.n	800088c <__udivmoddi4+0xe4>
 800087c:	1879      	adds	r1, r7, r1
 800087e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0xe2>
 8000884:	428b      	cmp	r3, r1
 8000886:	f200 80e9 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 800088a:	4684      	mov	ip, r0
 800088c:	1ac9      	subs	r1, r1, r3
 800088e:	b2a3      	uxth	r3, r4
 8000890:	fbb1 f0fe 	udiv	r0, r1, lr
 8000894:	fb0e 1110 	mls	r1, lr, r0, r1
 8000898:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800089c:	fb08 f800 	mul.w	r8, r8, r0
 80008a0:	45a0      	cmp	r8, r4
 80008a2:	d907      	bls.n	80008b4 <__udivmoddi4+0x10c>
 80008a4:	193c      	adds	r4, r7, r4
 80008a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x10a>
 80008ac:	45a0      	cmp	r8, r4
 80008ae:	f200 80d9 	bhi.w	8000a64 <__udivmoddi4+0x2bc>
 80008b2:	4618      	mov	r0, r3
 80008b4:	eba4 0408 	sub.w	r4, r4, r8
 80008b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008bc:	e7bf      	b.n	800083e <__udivmoddi4+0x96>
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0x12e>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80b1 	beq.w	8000a2a <__udivmoddi4+0x282>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x1cc>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0x140>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80b8 	bhi.w	8000a58 <__udivmoddi4+0x2b0>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0103 	sbc.w	r1, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	468c      	mov	ip, r1
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0a8      	beq.n	8000848 <__udivmoddi4+0xa0>
 80008f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0xa0>
 80008fc:	f1c2 0320 	rsb	r3, r2, #32
 8000900:	fa20 f603 	lsr.w	r6, r0, r3
 8000904:	4097      	lsls	r7, r2
 8000906:	fa01 f002 	lsl.w	r0, r1, r2
 800090a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090e:	40d9      	lsrs	r1, r3
 8000910:	4330      	orrs	r0, r6
 8000912:	0c03      	lsrs	r3, r0, #16
 8000914:	fbb1 f6fe 	udiv	r6, r1, lr
 8000918:	fa1f f887 	uxth.w	r8, r7
 800091c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000924:	fb06 f108 	mul.w	r1, r6, r8
 8000928:	4299      	cmp	r1, r3
 800092a:	fa04 f402 	lsl.w	r4, r4, r2
 800092e:	d909      	bls.n	8000944 <__udivmoddi4+0x19c>
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000936:	f080 808d 	bcs.w	8000a54 <__udivmoddi4+0x2ac>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 808a 	bls.w	8000a54 <__udivmoddi4+0x2ac>
 8000940:	3e02      	subs	r6, #2
 8000942:	443b      	add	r3, r7
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b281      	uxth	r1, r0
 8000948:	fbb3 f0fe 	udiv	r0, r3, lr
 800094c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb00 f308 	mul.w	r3, r0, r8
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0x1c4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000962:	d273      	bcs.n	8000a4c <__udivmoddi4+0x2a4>
 8000964:	428b      	cmp	r3, r1
 8000966:	d971      	bls.n	8000a4c <__udivmoddi4+0x2a4>
 8000968:	3802      	subs	r0, #2
 800096a:	4439      	add	r1, r7
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000972:	e778      	b.n	8000866 <__udivmoddi4+0xbe>
 8000974:	f1c6 0c20 	rsb	ip, r6, #32
 8000978:	fa03 f406 	lsl.w	r4, r3, r6
 800097c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000980:	431c      	orrs	r4, r3
 8000982:	fa20 f70c 	lsr.w	r7, r0, ip
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800098e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000992:	431f      	orrs	r7, r3
 8000994:	0c3b      	lsrs	r3, r7, #16
 8000996:	fbb1 f9fe 	udiv	r9, r1, lr
 800099a:	fa1f f884 	uxth.w	r8, r4
 800099e:	fb0e 1119 	mls	r1, lr, r9, r1
 80009a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009a6:	fb09 fa08 	mul.w	sl, r9, r8
 80009aa:	458a      	cmp	sl, r1
 80009ac:	fa02 f206 	lsl.w	r2, r2, r6
 80009b0:	fa00 f306 	lsl.w	r3, r0, r6
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x220>
 80009b6:	1861      	adds	r1, r4, r1
 80009b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80009bc:	d248      	bcs.n	8000a50 <__udivmoddi4+0x2a8>
 80009be:	458a      	cmp	sl, r1
 80009c0:	d946      	bls.n	8000a50 <__udivmoddi4+0x2a8>
 80009c2:	f1a9 0902 	sub.w	r9, r9, #2
 80009c6:	4421      	add	r1, r4
 80009c8:	eba1 010a 	sub.w	r1, r1, sl
 80009cc:	b2bf      	uxth	r7, r7
 80009ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009da:	fb00 f808 	mul.w	r8, r0, r8
 80009de:	45b8      	cmp	r8, r7
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x24a>
 80009e2:	19e7      	adds	r7, r4, r7
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d22e      	bcs.n	8000a48 <__udivmoddi4+0x2a0>
 80009ea:	45b8      	cmp	r8, r7
 80009ec:	d92c      	bls.n	8000a48 <__udivmoddi4+0x2a0>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4427      	add	r7, r4
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	eba7 0708 	sub.w	r7, r7, r8
 80009fa:	fba0 8902 	umull	r8, r9, r0, r2
 80009fe:	454f      	cmp	r7, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	4649      	mov	r1, r9
 8000a04:	d31a      	bcc.n	8000a3c <__udivmoddi4+0x294>
 8000a06:	d017      	beq.n	8000a38 <__udivmoddi4+0x290>
 8000a08:	b15d      	cbz	r5, 8000a22 <__udivmoddi4+0x27a>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a16:	40f2      	lsrs	r2, r6
 8000a18:	ea4c 0202 	orr.w	r2, ip, r2
 8000a1c:	40f7      	lsrs	r7, r6
 8000a1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a22:	2600      	movs	r6, #0
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462e      	mov	r6, r5
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	e70b      	b.n	8000848 <__udivmoddi4+0xa0>
 8000a30:	4606      	mov	r6, r0
 8000a32:	e6e9      	b.n	8000808 <__udivmoddi4+0x60>
 8000a34:	4618      	mov	r0, r3
 8000a36:	e6fd      	b.n	8000834 <__udivmoddi4+0x8c>
 8000a38:	4543      	cmp	r3, r8
 8000a3a:	d2e5      	bcs.n	8000a08 <__udivmoddi4+0x260>
 8000a3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a40:	eb69 0104 	sbc.w	r1, r9, r4
 8000a44:	3801      	subs	r0, #1
 8000a46:	e7df      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a48:	4608      	mov	r0, r1
 8000a4a:	e7d2      	b.n	80009f2 <__udivmoddi4+0x24a>
 8000a4c:	4660      	mov	r0, ip
 8000a4e:	e78d      	b.n	800096c <__udivmoddi4+0x1c4>
 8000a50:	4681      	mov	r9, r0
 8000a52:	e7b9      	b.n	80009c8 <__udivmoddi4+0x220>
 8000a54:	4666      	mov	r6, ip
 8000a56:	e775      	b.n	8000944 <__udivmoddi4+0x19c>
 8000a58:	4630      	mov	r0, r6
 8000a5a:	e74a      	b.n	80008f2 <__udivmoddi4+0x14a>
 8000a5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a60:	4439      	add	r1, r7
 8000a62:	e713      	b.n	800088c <__udivmoddi4+0xe4>
 8000a64:	3802      	subs	r0, #2
 8000a66:	443c      	add	r4, r7
 8000a68:	e724      	b.n	80008b4 <__udivmoddi4+0x10c>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_idiv0>:
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <cisynth_ifft>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int cisynth_ifft(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	ed2d 8b02 	vpush	{d8}
 8000a76:	b0c7      	sub	sp, #284	; 0x11c
 8000a78:	af02      	add	r7, sp, #8
	uint8_t FreqStr[256] = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	22fc      	movs	r2, #252	; 0xfc
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f01d fbd4 	bl	801e234 <memset>
	uint32_t cis_color = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	printf("Start BW ifft mode \n");
 8000a92:	489d      	ldr	r0, [pc, #628]	; (8000d08 <cisynth_ifft+0x298>)
 8000a94:	f01e fb4c 	bl	801f130 <puts>

	cisynth_ifft_SetHint();
 8000a98:	f000 f942 	bl	8000d20 <cisynth_ifft_SetHint>
	pcm5102_Init();
 8000a9c:	f01c feec 	bl	801d878 <pcm5102_Init>
	cis_Init(IFFT_MODE);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f01c f9e9 	bl	801ce78 <cis_Init>
	synth_IfftInit();
 8000aa6:	f010 fd1d 	bl	80114e4 <synth_IfftInit>
	//	cis_Test();

	/* Infinite loop */
	static uint32_t start_tick;
	uint32_t latency;
	int32_t i = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t note = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	while (1)
	{
		start_tick = HAL_GetTick();
 8000ab6:	f003 f9f5 	bl	8003ea4 <HAL_GetTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a93      	ldr	r2, [pc, #588]	; (8000d0c <cisynth_ifft+0x29c>)
 8000abe:	6013      	str	r3, [r2, #0]
//		synth_SetImageData(50, 32760); //for testing
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac0:	e002      	b.n	8000ac8 <cisynth_ifft+0x58>
		{
			synth_AudioProcess(IFFT_MODE);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f010 fff4 	bl	8011ab0 <synth_AudioProcess>
		while ((synth_process_cnt) < (SAMPLING_FREQUENCY / DISPLAY_REFRESH_FPS))
 8000ac8:	4b91      	ldr	r3, [pc, #580]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000ad0:	d3f7      	bcc.n	8000ac2 <cisynth_ifft+0x52>
		}

		latency = HAL_GetTick() - start_tick;
 8000ad2:	f003 f9e7 	bl	8003ea4 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	4b8c      	ldr	r3, [pc, #560]	; (8000d0c <cisynth_ifft+0x29c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		sprintf((char *)FreqStr, "%dHz", (int)((synth_process_cnt * 1000) / latency));
 8000ae2:	4b8b      	ldr	r3, [pc, #556]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aea:	fb02 f203 	mul.w	r2, r2, r3
 8000aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	463b      	mov	r3, r7
 8000afa:	4986      	ldr	r1, [pc, #536]	; (8000d14 <cisynth_ifft+0x2a4>)
 8000afc:	4618      	mov	r0, r3
 8000afe:	f01e fb75 	bl	801f1ec <siprintf>
		synth_process_cnt = 0;
 8000b02:	4b83      	ldr	r3, [pc, #524]	; (8000d10 <cisynth_ifft+0x2a0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]

		ssd1362_drawRect(0, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH / 2 - 1, DISPLAY_AERA1_Y2POS, 3, false);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	231c      	movs	r3, #28
 8000b12:	227f      	movs	r2, #127	; 0x7f
 8000b14:	210a      	movs	r1, #10
 8000b16:	2000      	movs	r0, #0
 8000b18:	f01d f84a 	bl	801dbb0 <ssd1362_drawRect>
		ssd1362_drawRect(DISPLAY_MAX_X_LENGTH / 2 + 1, DISPLAY_AERA1_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA1_Y2POS, 4, false);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2304      	movs	r3, #4
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	231c      	movs	r3, #28
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	210a      	movs	r1, #10
 8000b2c:	2081      	movs	r0, #129	; 0x81
 8000b2e:	f01d f83f 	bl	801dbb0 <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA2_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA2_Y2POS, 3, false);
 8000b32:	2300      	movs	r3, #0
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	2303      	movs	r3, #3
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2329      	movs	r3, #41	; 0x29
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	211d      	movs	r1, #29
 8000b42:	2000      	movs	r0, #0
 8000b44:	f01d f834 	bl	801dbb0 <ssd1362_drawRect>
		ssd1362_drawRect(0, DISPLAY_AERA3_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_AERA3_Y2POS, 8, false);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	2332      	movs	r3, #50	; 0x32
 8000b52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b56:	212a      	movs	r1, #42	; 0x2a
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f01d f829 	bl	801dbb0 <ssd1362_drawRect>
//		}

//		synth_SetImageData(++note, 1000); //for testing
//		synth_SetImageData(note - 1, 0);

		synth_SetImageData(20, 1000); //for testing
 8000b5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b62:	2014      	movs	r0, #20
 8000b64:	f010 fdf6 	bl	8011754 <synth_SetImageData>
		synth_SetImageData(85, 5700);
 8000b68:	f241 6144 	movw	r1, #5700	; 0x1644
 8000b6c:	2055      	movs	r0, #85	; 0x55
 8000b6e:	f010 fdf1 	bl	8011754 <synth_SetImageData>
		synth_SetImageData(120, 1000); //for testing
 8000b72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b76:	2078      	movs	r0, #120	; 0x78
 8000b78:	f010 fdec 	bl	8011754 <synth_SetImageData>
		synth_SetImageData(185, 5700);
 8000b7c:	f241 6144 	movw	r1, #5700	; 0x1644
 8000b80:	20b9      	movs	r0, #185	; 0xb9
 8000b82:	f010 fde7 	bl	8011754 <synth_SetImageData>
		synth_SetImageData(60, 100); //for testing
 8000b86:	2164      	movs	r1, #100	; 0x64
 8000b88:	203c      	movs	r0, #60	; 0x3c
 8000b8a:	f010 fde3 	bl	8011754 <synth_SetImageData>
		synth_SetImageData(105, 5700);
 8000b8e:	f241 6144 	movw	r1, #5700	; 0x1644
 8000b92:	2069      	movs	r0, #105	; 0x69
 8000b94:	f010 fdde 	bl	8011754 <synth_SetImageData>

		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b9e:	e037      	b.n	8000c10 <cisynth_ifft+0x1a0>
		{
			ssd1362_drawPixel(i, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (synth_GetAudioData(i * 2) / 4096) - 1, 10, false);
 8000ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ba4:	b29c      	uxth	r4, r3
 8000ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4618      	mov	r0, r3
 8000bae:	f010 fdc1 	bl	8011734 <synth_GetAudioData>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da01      	bge.n	8000bbc <cisynth_ifft+0x14c>
 8000bb8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bbc:	131b      	asrs	r3, r3, #12
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3312      	adds	r3, #18
 8000bc4:	b299      	uxth	r1, r3
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	220a      	movs	r2, #10
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f01c ff86 	bl	801dadc <ssd1362_drawPixel>
			ssd1362_drawPixel(i + (DISPLAY_MAX_X_LENGTH / 2) + 1, DISPLAY_AERA1_Y1POS + (DISPLAY_AERAS1_HEIGHT / 2) + (synth_GetAudioData(i * 2 + 1) / 4096) - 1, 10, false);
 8000bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	3381      	adds	r3, #129	; 0x81
 8000bd8:	b29c      	uxth	r4, r3
 8000bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	3301      	adds	r3, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f010 fda6 	bl	8011734 <synth_GetAudioData>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da01      	bge.n	8000bf2 <cisynth_ifft+0x182>
 8000bee:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bf2:	131b      	asrs	r3, r3, #12
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3312      	adds	r3, #18
 8000bfa:	b299      	uxth	r1, r3
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	220a      	movs	r2, #10
 8000c00:	4620      	mov	r0, r4
 8000c02:	f01c ff6b 	bl	801dadc <ssd1362_drawPixel>
		for (i = 0; i < ((DISPLAY_MAX_X_LENGTH / 2) - 1); i++)
 8000c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c14:	2b7e      	cmp	r3, #126	; 0x7e
 8000c16:	ddc3      	ble.n	8000ba0 <cisynth_ifft+0x130>
		}

		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c1e:	e055      	b.n	8000ccc <cisynth_ifft+0x25c>
		{
			cis_color = cis_GetBuffData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
 8000c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000c2c:	f01c f996 	bl	801cf5c <cis_GetEffectivePixelNb>
 8000c30:	4603      	mov	r3, r0
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8000d18 <cisynth_ifft+0x2a8>
 8000c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c42:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c4a:	ee17 0a90 	vmov	r0, s15
 8000c4e:	f01c f991 	bl	801cf74 <cis_GetBuffData>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cis_color = cis_color >> 8;
 8000c58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			ssd1362_drawPixel(i, DISPLAY_AERA2_Y1POS + DISPLAY_AERAS2_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - (cis_color >> 5) - 1, 15, false);
 8000c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000c66:	b298      	uxth	r0, r3
 8000c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	f1c3 0327 	rsb	r3, r3, #39	; 0x27
 8000c74:	b299      	uxth	r1, r3
 8000c76:	2300      	movs	r3, #0
 8000c78:	220f      	movs	r2, #15
 8000c7a:	f01c ff2f 	bl	801dadc <ssd1362_drawPixel>

			cis_color |= 0xFF000000;
 8000c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000c86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cis_color |= cis_color << 8;
 8000c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000c94:	4313      	orrs	r3, r2
 8000c96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cis_color |= cis_color << 16;
 8000c9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			ssd1362_drawVLine(i, DISPLAY_AERA3_Y1POS + 1, DISPLAY_AERAS3_HEIGHT - 2, cis_color, false);
 8000caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cae:	b298      	uxth	r0, r3
 8000cb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	9200      	str	r2, [sp, #0]
 8000cba:	2206      	movs	r2, #6
 8000cbc:	212b      	movs	r1, #43	; 0x2b
 8000cbe:	f01c ffe8 	bl	801dc92 <ssd1362_drawVLine>
		for (i = 0; i < (DISPLAY_MAX_X_LENGTH); i++)
 8000cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cd0:	2bff      	cmp	r3, #255	; 0xff
 8000cd2:	dda5      	ble.n	8000c20 <cisynth_ifft+0x1b0>

			//			cis_color = synth_GetImageData((i * ((float)cis_GetEffectivePixelNb() / (float)DISPLAY_MAX_X_LENGTH)));
			//			cis_color = cis_color >> 11;
			//			ssd1362_drawPixel(i, DISPLAY_AERA5_YPOS + DISPLAY_AERAS_HEIGHT - DISPLAY_INTER_AERAS_HEIGHT - cis_color, 15, false);
		}
		ssd1362_drawRect(200, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	2304      	movs	r3, #4
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2309      	movs	r3, #9
 8000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	20c8      	movs	r0, #200	; 0xc8
 8000ce6:	f01c ff63 	bl	801dbb0 <ssd1362_drawRect>
		ssd1362_drawString(200, 1, (int8_t*)FreqStr, 15, 8);
 8000cea:	463a      	mov	r2, r7
 8000cec:	2308      	movs	r3, #8
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	20c8      	movs	r0, #200	; 0xc8
 8000cf6:	f01d f8be 	bl	801de76 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8000cfa:	f01d f98b 	bl	801e014 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <cisynth_ifft+0x2ac>)
 8000d02:	f007 ffca 	bl	8008c9a <HAL_GPIO_TogglePin>
		start_tick = HAL_GetTick();
 8000d06:	e6d6      	b.n	8000ab6 <cisynth_ifft+0x46>
 8000d08:	08023d38 	.word	0x08023d38
 8000d0c:	24003638 	.word	0x24003638
 8000d10:	24004cd4 	.word	0x24004cd4
 8000d14:	08023d4c 	.word	0x08023d4c
 8000d18:	43800000 	.word	0x43800000
 8000d1c:	58021c00 	.word	0x58021c00

08000d20 <cisynth_ifft_SetHint>:
 * @brief  Display Audio demo hint
 * @param  None
 * @retval None
 */
static void cisynth_ifft_SetHint(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af02      	add	r7, sp, #8
	/* Set Audio header description */
	ssd1362_clearBuffer();
 8000d26:	f01d f947 	bl	801dfb8 <ssd1362_clearBuffer>
	ssd1362_drawRect(0, DISPLAY_HEAD_Y1POS, DISPLAY_MAX_X_LENGTH, DISPLAY_HEAD_Y2POS, 4, false);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2304      	movs	r3, #4
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2309      	movs	r3, #9
 8000d34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f01c ff38 	bl	801dbb0 <ssd1362_drawRect>
	ssd1362_drawString(100, 1, (int8_t *)"CISYNTH 3", 0xF, 8);
 8000d40:	2308      	movs	r3, #8
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	230f      	movs	r3, #15
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <cisynth_ifft_SetHint+0x4c>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	f01d f893 	bl	801de76 <ssd1362_drawString>
	ssd1362_drawString(0, 1, (int8_t *)"BW ifft", 0xF, 8);
 8000d50:	2308      	movs	r3, #8
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	230f      	movs	r3, #15
 8000d56:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <cisynth_ifft_SetHint+0x50>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f01d f88b 	bl	801de76 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8000d60:	f01d f958 	bl	801e014 <ssd1362_writeFullBuffer>
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08023d54 	.word	0x08023d54
 8000d70:	08023d60 	.word	0x08023d60

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d78:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <SystemInit+0x104>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a3e      	ldr	r2, [pc, #248]	; (8000e78 <SystemInit+0x104>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000d88:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <SystemInit+0x104>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a3a      	ldr	r2, [pc, #232]	; (8000e78 <SystemInit+0x104>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d94:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <SystemInit+0x108>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d807      	bhi.n	8000db0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000da0:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <SystemInit+0x108>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 030f 	bic.w	r3, r3, #15
 8000da8:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <SystemInit+0x108>)
 8000daa:	f043 0307 	orr.w	r3, r3, #7
 8000dae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <SystemInit+0x10c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a32      	ldr	r2, [pc, #200]	; (8000e80 <SystemInit+0x10c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dbc:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <SystemInit+0x10c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <SystemInit+0x10c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	492e      	ldr	r1, [pc, #184]	; (8000e80 <SystemInit+0x10c>)
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <SystemInit+0x110>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dce:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <SystemInit+0x108>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dda:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <SystemInit+0x108>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 030f 	bic.w	r3, r3, #15
 8000de2:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <SystemInit+0x108>)
 8000de4:	f043 0307 	orr.w	r3, r3, #7
 8000de8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <SystemInit+0x10c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <SystemInit+0x10c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <SystemInit+0x10c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <SystemInit+0x10c>)
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <SystemInit+0x114>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <SystemInit+0x10c>)
 8000e04:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <SystemInit+0x118>)
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <SystemInit+0x10c>)
 8000e0a:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <SystemInit+0x11c>)
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <SystemInit+0x10c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <SystemInit+0x10c>)
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <SystemInit+0x11c>)
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <SystemInit+0x10c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <SystemInit+0x10c>)
 8000e22:	4a1b      	ldr	r2, [pc, #108]	; (8000e90 <SystemInit+0x11c>)
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <SystemInit+0x10c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <SystemInit+0x10c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <SystemInit+0x10c>)
 8000e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <SystemInit+0x10c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <SystemInit+0x120>)
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <SystemInit+0x120>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <SystemInit+0x124>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <SystemInit+0x128>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e56:	d202      	bcs.n	8000e5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <SystemInit+0x12c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <SystemInit+0x130>)
 8000e60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e64:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SystemInit+0x104>)
 8000e68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	52002000 	.word	0x52002000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e88:	02020200 	.word	0x02020200
 8000e8c:	01ff0000 	.word	0x01ff0000
 8000e90:	01010280 	.word	0x01010280
 8000e94:	580000c0 	.word	0x580000c0
 8000e98:	5c001000 	.word	0x5c001000
 8000e9c:	ffff0000 	.word	0xffff0000
 8000ea0:	51008108 	.word	0x51008108
 8000ea4:	52004000 	.word	0x52004000

08000ea8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <MX_CRC_Init+0x3c>)
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <MX_CRC_Init+0x40>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_CRC_Init+0x3c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_CRC_Init+0x3c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_CRC_Init+0x3c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_CRC_Init+0x3c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_CRC_Init+0x3c>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_CRC_Init+0x3c>)
 8000ed2:	f003 fcd3 	bl	800487c <HAL_CRC_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000edc:	f001 fca2 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2400550c 	.word	0x2400550c
 8000ee8:	58024c00 	.word	0x58024c00

08000eec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_CRC_MspInit+0x3c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10e      	bne.n	8000f1c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	58024c00 	.word	0x58024c00
 8000f2c:	58024400 	.word	0x58024400

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <MX_DMA_Init+0x8c>)
 8000f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3c:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <MX_DMA_Init+0x8c>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_DMA_Init+0x8c>)
 8000f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_DMA_Init+0x8c>)
 8000f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f5a:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <MX_DMA_Init+0x8c>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_DMA_Init+0x8c>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	200c      	movs	r0, #12
 8000f78:	f003 fbbb 	bl	80046f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f7c:	200c      	movs	r0, #12
 8000f7e:	f003 fbd2 	bl	8004726 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2038      	movs	r0, #56	; 0x38
 8000f88:	f003 fbb3 	bl	80046f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f8c:	2038      	movs	r0, #56	; 0x38
 8000f8e:	f003 fbca 	bl	8004726 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2039      	movs	r0, #57	; 0x39
 8000f98:	f003 fbab 	bl	80046f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f9c:	2039      	movs	r0, #57	; 0x39
 8000f9e:	f003 fbc2 	bl	8004726 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	203a      	movs	r0, #58	; 0x3a
 8000fa8:	f003 fba3 	bl	80046f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fac:	203a      	movs	r0, #58	; 0x3a
 8000fae:	f003 fbba 	bl	8004726 <HAL_NVIC_EnableIRQ>

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	58024400 	.word	0x58024400

08000fc0 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000fec:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <MX_FMC_Init+0xf8>)
 8000fee:	4a33      	ldr	r2, [pc, #204]	; (80010bc <MX_FMC_Init+0xfc>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <MX_FMC_Init+0xf8>)
 8000ff4:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <MX_FMC_Init+0x100>)
 8000ff6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <MX_FMC_Init+0xf8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <MX_FMC_Init+0xf8>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MX_FMC_Init+0xf8>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <MX_FMC_Init+0xf8>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_FMC_Init+0xf8>)
 800103a:	2200      	movs	r2, #0
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001040:	2200      	movs	r2, #0
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001046:	2200      	movs	r2, #0
 8001048:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_FMC_Init+0xf8>)
 800104c:	2200      	movs	r2, #0
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001052:	2200      	movs	r2, #0
 8001054:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 8;
 8001056:	2308      	movs	r3, #8
 8001058:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800105a:	230f      	movs	r3, #15
 800105c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 10;
 800105e:	230a      	movs	r3, #10
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 5;
 8001062:	2305      	movs	r3, #5
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001066:	2310      	movs	r3, #16
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800106a:	2311      	movs	r3, #17
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001072:	2308      	movs	r3, #8
 8001074:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001076:	230f      	movs	r3, #15
 8001078:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 10;
 800107a:	230a      	movs	r3, #10
 800107c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 5;
 800107e:	2305      	movs	r3, #5
 8001080:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001082:	2310      	movs	r3, #16
 8001084:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001086:	2311      	movs	r3, #17
 8001088:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800108e:	463a      	mov	r2, r7
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <MX_FMC_Init+0xf8>)
 8001098:	f00c ff02 	bl	800dea0 <HAL_SRAM_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_FMC_Init+0xe6>
  {
    Error_Handler( );
 80010a2:	f001 fbbf 	bl	8002824 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 80010a6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80010aa:	f002 ff4b 	bl	8003f44 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE END FMC_Init 2 */
}
 80010ae:	bf00      	nop
 80010b0:	3738      	adds	r7, #56	; 0x38
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24005530 	.word	0x24005530
 80010bc:	52004000 	.word	0x52004000
 80010c0:	52004104 	.word	0x52004104

080010c4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0b6      	sub	sp, #216	; 0xd8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <HAL_FMC_MspInit+0xfc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d169      	bne.n	80011b6 <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_FMC_MspInit+0xfc>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	22bc      	movs	r2, #188	; 0xbc
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f01d f89f 	bl	801e234 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80010f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4618      	mov	r0, r3
 8001106:	f008 fe2b 	bl	8009d60 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8001110:	f001 fb88 	bl	8002824 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_FMC_MspInit+0x100>)
 8001116:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800111a:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <HAL_FMC_MspInit+0x100>)
 800111c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001120:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_FMC_MspInit+0x100>)
 8001126:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800112a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE9   ------> FMC_D6
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4
 8001132:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8001136:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800114c:	230c      	movs	r3, #12
 800114e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001152:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001156:	4619      	mov	r1, r3
 8001158:	481b      	ldr	r0, [pc, #108]	; (80011c8 <HAL_FMC_MspInit+0x104>)
 800115a:	f007 fbd5 	bl	8008908 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800115e:	2301      	movs	r3, #1
 8001160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001176:	230c      	movs	r3, #12
 8001178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001180:	4619      	mov	r1, r3
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <HAL_FMC_MspInit+0x108>)
 8001184:	f007 fbc0 	bl	8008908 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_9;
 8001188:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800118c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a2:	230c      	movs	r3, #12
 80011a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <HAL_FMC_MspInit+0x10c>)
 80011b0:	f007 fbaa 	bl	8008908 <HAL_GPIO_Init>
 80011b4:	e000      	b.n	80011b8 <HAL_FMC_MspInit+0xf4>
    return;
 80011b6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011b8:	37d8      	adds	r7, #216	; 0xd8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2400363c 	.word	0x2400363c
 80011c4:	58024400 	.word	0x58024400
 80011c8:	58020c00 	.word	0x58020c00
 80011cc:	58021400 	.word	0x58021400
 80011d0:	58021000 	.word	0x58021000

080011d4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80011dc:	f7ff ff72 	bl	80010c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b96      	ldr	r3, [pc, #600]	; (8001458 <MX_GPIO_Init+0x270>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	4a94      	ldr	r2, [pc, #592]	; (8001458 <MX_GPIO_Init+0x270>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120e:	4b92      	ldr	r3, [pc, #584]	; (8001458 <MX_GPIO_Init+0x270>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800121c:	4b8e      	ldr	r3, [pc, #568]	; (8001458 <MX_GPIO_Init+0x270>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	4a8d      	ldr	r2, [pc, #564]	; (8001458 <MX_GPIO_Init+0x270>)
 8001224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122c:	4b8a      	ldr	r3, [pc, #552]	; (8001458 <MX_GPIO_Init+0x270>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b87      	ldr	r3, [pc, #540]	; (8001458 <MX_GPIO_Init+0x270>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001240:	4a85      	ldr	r2, [pc, #532]	; (8001458 <MX_GPIO_Init+0x270>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124a:	4b83      	ldr	r3, [pc, #524]	; (8001458 <MX_GPIO_Init+0x270>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b7f      	ldr	r3, [pc, #508]	; (8001458 <MX_GPIO_Init+0x270>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	4a7e      	ldr	r2, [pc, #504]	; (8001458 <MX_GPIO_Init+0x270>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001268:	4b7b      	ldr	r3, [pc, #492]	; (8001458 <MX_GPIO_Init+0x270>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	4b78      	ldr	r3, [pc, #480]	; (8001458 <MX_GPIO_Init+0x270>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	4a76      	ldr	r2, [pc, #472]	; (8001458 <MX_GPIO_Init+0x270>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001286:	4b74      	ldr	r3, [pc, #464]	; (8001458 <MX_GPIO_Init+0x270>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b70      	ldr	r3, [pc, #448]	; (8001458 <MX_GPIO_Init+0x270>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	4a6f      	ldr	r2, [pc, #444]	; (8001458 <MX_GPIO_Init+0x270>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a4:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <MX_GPIO_Init+0x270>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b2:	4b69      	ldr	r3, [pc, #420]	; (8001458 <MX_GPIO_Init+0x270>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	4a67      	ldr	r2, [pc, #412]	; (8001458 <MX_GPIO_Init+0x270>)
 80012ba:	f043 0320 	orr.w	r3, r3, #32
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c2:	4b65      	ldr	r3, [pc, #404]	; (8001458 <MX_GPIO_Init+0x270>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d0:	4b61      	ldr	r3, [pc, #388]	; (8001458 <MX_GPIO_Init+0x270>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	4a60      	ldr	r2, [pc, #384]	; (8001458 <MX_GPIO_Init+0x270>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e0:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <MX_GPIO_Init+0x270>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RESET_Pin|MEMS_CS_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80012f4:	4859      	ldr	r0, [pc, #356]	; (800145c <MX_GPIO_Init+0x274>)
 80012f6:	f007 fcb7 	bl	8008c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001300:	4857      	ldr	r0, [pc, #348]	; (8001460 <MX_GPIO_Init+0x278>)
 8001302:	f007 fcb1 	bl	8008c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DAC_FLT_Pin|DAC_XSMT_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f242 0104 	movw	r1, #8196	; 0x2004
 800130c:	4855      	ldr	r0, [pc, #340]	; (8001464 <MX_GPIO_Init+0x27c>)
 800130e:	f007 fcab 	bl	8008c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, EN_12V_Pin|EN_5V_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2124      	movs	r1, #36	; 0x24
 8001316:	4854      	ldr	r0, [pc, #336]	; (8001468 <MX_GPIO_Init+0x280>)
 8001318:	f007 fca6 	bl	8008c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2140      	movs	r1, #64	; 0x40
 8001320:	4852      	ldr	r0, [pc, #328]	; (800146c <MX_GPIO_Init+0x284>)
 8001322:	f007 fca1 	bl	8008c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Pin|DAC_DEMP_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2148      	movs	r1, #72	; 0x48
 800132a:	4851      	ldr	r0, [pc, #324]	; (8001470 <MX_GPIO_Init+0x288>)
 800132c:	f007 fc9c 	bl	8008c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin|MEMS_CS_Pin;
 8001330:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4844      	ldr	r0, [pc, #272]	; (800145c <MX_GPIO_Init+0x274>)
 800134a:	f007 fadd 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_FSYNC_Pin;
 800134e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_FSYNC_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	483f      	ldr	r0, [pc, #252]	; (8001460 <MX_GPIO_Init+0x278>)
 8001364:	f007 fad0 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CIS_RS_Pin;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CIS_RS_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4837      	ldr	r0, [pc, #220]	; (8001460 <MX_GPIO_Init+0x278>)
 8001382:	f007 fac1 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DAC_FLT_Pin|DAC_XSMT_Pin;
 8001386:	f242 0304 	movw	r3, #8196	; 0x2004
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4831      	ldr	r0, [pc, #196]	; (8001464 <MX_GPIO_Init+0x27c>)
 80013a0:	f007 fab2 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|EN_5V_Pin;
 80013a4:	2324      	movs	r3, #36	; 0x24
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	482b      	ldr	r0, [pc, #172]	; (8001468 <MX_GPIO_Init+0x280>)
 80013bc:	f007 faa4 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_FMT_Pin;
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_FMT_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4825      	ldr	r0, [pc, #148]	; (800146c <MX_GPIO_Init+0x284>)
 80013d8:	f007 fa96 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT_Pin;
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <MX_GPIO_Init+0x28c>)
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4821      	ldr	r0, [pc, #132]	; (8001478 <MX_GPIO_Init+0x290>)
 80013f2:	f007 fa89 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SW_4_Pin|SW_5_Pin|SW_1_Pin|SW_3_Pin
 80013f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <MX_GPIO_Init+0x28c>)
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	481c      	ldr	r0, [pc, #112]	; (800147c <MX_GPIO_Init+0x294>)
 800140c:	f007 fa7c 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001410:	2340      	movs	r3, #64	; 0x40
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	4812      	ldr	r0, [pc, #72]	; (8001470 <MX_GPIO_Init+0x288>)
 8001428:	f007 fa6e 	bl	8008908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DAC_DEMP_Pin;
 800142c:	2308      	movs	r3, #8
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DAC_DEMP_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <MX_GPIO_Init+0x288>)
 8001444:	f007 fa60 	bl	8008908 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8001448:	2040      	movs	r0, #64	; 0x40
 800144a:	f007 fc6f 	bl	8008d2c <HAL_I2CEx_EnableFastModePlus>

}
 800144e:	bf00      	nop
 8001450:	3738      	adds	r7, #56	; 0x38
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	58024400 	.word	0x58024400
 800145c:	58020400 	.word	0x58020400
 8001460:	58020000 	.word	0x58020000
 8001464:	58020800 	.word	0x58020800
 8001468:	58021800 	.word	0x58021800
 800146c:	58021400 	.word	0x58021400
 8001470:	58021c00 	.word	0x58021c00
 8001474:	11110000 	.word	0x11110000
 8001478:	58020c00 	.word	0x58020c00
 800147c:	58021000 	.word	0x58021000

08001480 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <lwiperf_list_add+0x24>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <lwiperf_list_add+0x24>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	24003640 	.word	0x24003640

080014a8 <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <lwiperf_list_remove+0x78>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	e029      	b.n	8001510 <lwiperf_list_remove+0x68>
    if (iter == item) {
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d120      	bne.n	8001506 <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d104      	bne.n	80014d4 <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <lwiperf_list_remove+0x78>)
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e003      	b.n	80014dc <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	e00c      	b.n	80014fe <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d105      	bne.n	80014f8 <lwiperf_list_remove+0x50>
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <lwiperf_list_remove+0x7c>)
 80014ee:	22d0      	movs	r2, #208	; 0xd0
 80014f0:	490d      	ldr	r1, [pc, #52]	; (8001528 <lwiperf_list_remove+0x80>)
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <lwiperf_list_remove+0x84>)
 80014f4:	f01d fd96 	bl	801f024 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ef      	bne.n	80014e4 <lwiperf_list_remove+0x3c>
      }
      break;
 8001504:	e008      	b.n	8001518 <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1d2      	bne.n	80014bc <lwiperf_list_remove+0x14>
    }
  }
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	24003640 	.word	0x24003640
 8001524:	08023d68 	.word	0x08023d68
 8001528:	08023d80 	.word	0x08023d80
 800152c:	08023d90 	.word	0x08023d90

08001530 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <lwiperf_list_find+0x38>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e008      	b.n	8001552 <lwiperf_list_find+0x22>
    if (iter == item) {
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d101      	bne.n	800154c <lwiperf_list_find+0x1c>
      return item;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	e006      	b.n	800155a <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f3      	bne.n	8001540 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	24003640 	.word	0x24003640

0800156c <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	b08d      	sub	sp, #52	; 0x34
 8001570:	af06      	add	r7, sp, #24
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d038      	beq.n	80015f0 <lwip_tcp_conn_report+0x84>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d034      	beq.n	80015f0 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 8001586:	f00f fed3 	bl	8011330 <sys_now>
 800158a:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e006      	b.n	80015b0 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699c      	ldr	r4, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	469e      	mov	lr, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 80015c2:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	3304      	adds	r3, #4
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 80015d0:	8b12      	ldrh	r2, [r2, #24]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80015d6:	78fe      	ldrb	r6, [r7, #3]
 80015d8:	6978      	ldr	r0, [r7, #20]
 80015da:	9004      	str	r0, [sp, #16]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	9003      	str	r0, [sp, #12]
 80015e0:	9102      	str	r1, [sp, #8]
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	4663      	mov	r3, ip
 80015e8:	4672      	mov	r2, lr
 80015ea:	4631      	mov	r1, r6
 80015ec:	4628      	mov	r0, r5
 80015ee:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 80015f0:	bf00      	nop
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f8 <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff4e 	bl	80014a8 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	4619      	mov	r1, r3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ffab 	bl	800156c <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d02f      	beq.n	800167e <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f016 fb3f 	bl	8017ca8 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f016 fbc8 	bl	8017dc8 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f016 fb66 	bl	8017d10 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f016 fb3e 	bl	8017ccc <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f016 fb7c 	bl	8017d54 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	4618      	mov	r0, r3
 8001662:	f015 f87f 	bl	8016764 <tcp_close>
 8001666:	4603      	mov	r3, r0
 8001668:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800166a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d017      	beq.n	80016a2 <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	4618      	mov	r0, r3
 8001678:	f015 f95e 	bl	8016938 <tcp_abort>
 800167c:	e011      	b.n	80016a2 <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4618      	mov	r0, r3
 8001684:	f015 f86e 	bl	8016764 <tcp_close>
 8001688:	4603      	mov	r3, r0
 800168a:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 800168c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <lwiperf_tcp_close+0xaa>
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <lwiperf_tcp_close+0xb8>)
 8001696:	f240 120d 	movw	r2, #269	; 0x10d
 800169a:	4906      	ldr	r1, [pc, #24]	; (80016b4 <lwiperf_tcp_close+0xbc>)
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <lwiperf_tcp_close+0xc0>)
 800169e:	f01d fcc1 	bl	801f024 <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f013 f92c 	bl	8014900 <mem_free>
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	08023d68 	.word	0x08023d68
 80016b4:	08023db8 	.word	0x08023db8
 80016b8:	08023d90 	.word	0x08023d90

080016bc <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <lwiperf_tcp_client_send_more+0x1e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	791b      	ldrb	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <lwiperf_tcp_client_send_more+0x1e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	795b      	ldrb	r3, [r3, #5]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <lwiperf_tcp_client_send_more+0x2c>
 80016da:	4b61      	ldr	r3, [pc, #388]	; (8001860 <lwiperf_tcp_client_send_more+0x1a4>)
 80016dc:	f240 121d 	movw	r2, #285	; 0x11d
 80016e0:	4960      	ldr	r1, [pc, #384]	; (8001864 <lwiperf_tcp_client_send_more+0x1a8>)
 80016e2:	4861      	ldr	r0, [pc, #388]	; (8001868 <lwiperf_tcp_client_send_more+0x1ac>)
 80016e4:	f01d fc9e 	bl	801f024 <iprintf>

  do {
    send_more = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01f      	beq.n	8001738 <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 80016f8:	f00f fe1a 	bl	8011330 <sys_now>
 80016fc:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	4618      	mov	r0, r3
 800170e:	f010 fbec 	bl	8011eea <lwip_htonl>
 8001712:	4603      	mov	r3, r0
 8001714:	425b      	negs	r3, r3
 8001716:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	d316      	bcc.n	800175a <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 800172c:	2101      	movs	r1, #1
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff62 	bl	80015f8 <lwiperf_tcp_close>
        return ERR_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e08e      	b.n	8001856 <lwiperf_tcp_client_send_more+0x19a>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173c:	4618      	mov	r0, r3
 800173e:	f010 fbd4 	bl	8011eea <lwip_htonl>
 8001742:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	429a      	cmp	r2, r3
 800174c:	d305      	bcc.n	800175a <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 800174e:	2101      	movs	r1, #1
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff51 	bl	80015f8 <lwiperf_tcp_close>
        return ERR_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e07d      	b.n	8001856 <lwiperf_tcp_client_send_more+0x19a>
      }
    }

    if (conn->bytes_transferred < 24) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	2b17      	cmp	r3, #23
 8001760:	d810      	bhi.n	8001784 <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	4413      	add	r3, r2
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	b29b      	uxth	r3, r3
 8001776:	f1c3 0318 	rsb	r3, r3, #24
 800177a:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001782:	e034      	b.n	80017ee <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	2b2f      	cmp	r3, #47	; 0x2f
 800178a:	d813      	bhi.n	80017b4 <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	3b18      	subs	r3, #24
 8001798:	4413      	add	r3, r2
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 80017a6:	853b      	strh	r3, [r7, #40]	; 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 80017a8:	2303      	movs	r3, #3
 80017aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b2:	e01c      	b.n	80017ee <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <lwiperf_tcp_client_send_more+0x1b0>)
 80017ba:	fba3 2301 	umull	r2, r3, r3, r1
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	1aca      	subs	r2, r1, r3
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <lwiperf_tcp_client_send_more+0x1b4>)
 80017cc:	4413      	add	r3, r2
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
      txlen_max = TCP_MSS;
 80017d0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80017d4:	853b      	strh	r3, [r7, #40]	; 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2b30      	cmp	r3, #48	; 0x30
 80017dc:	d102      	bne.n	80017e4 <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 80017de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e2:	853b      	strh	r3, [r7, #40]	; 0x28
      }
      apiflags = 0; /* no copying needed */
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      send_more = 1;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    txlen = txlen_max;
 80017ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017f0:	857b      	strh	r3, [r7, #42]	; 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6918      	ldr	r0, [r3, #16]
 80017f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017fa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80017fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017fe:	f019 f991 	bl	801ab24 <tcp_write>
 8001802:	4603      	mov	r3, r0
 8001804:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 8001806:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800180a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800180e:	d102      	bne.n	8001816 <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8001810:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8001816:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800181a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800181e:	d103      	bne.n	8001828 <lwiperf_tcp_client_send_more+0x16c>
 8001820:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001822:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001826:	d2e4      	bcs.n	80017f2 <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8001828:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d106      	bne.n	800183e <lwiperf_tcp_client_send_more+0x182>
      conn->bytes_transferred += txlen;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001834:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001836:	441a      	add	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
 800183c:	e001      	b.n	8001842 <lwiperf_tcp_client_send_more+0x186>
    } else {
      send_more = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  } while (send_more);
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f af4f 	bne.w	80016e8 <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	4618      	mov	r0, r3
 8001850:	f019 ff52 	bl	801b6f8 <tcp_output>
  return ERR_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3730      	adds	r7, #48	; 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	08023d68 	.word	0x08023d68
 8001864:	08023dc0 	.word	0x08023dc0
 8001868:	08023d90 	.word	0x08023d90
 800186c:	cccccccd 	.word	0xcccccccd
 8001870:	08026bec 	.word	0x08026bec

08001874 <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	4613      	mov	r3, r2
 8001880:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	429a      	cmp	r2, r3
 800188e:	d006      	beq.n	800189e <lwiperf_tcp_client_sent+0x2a>
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <lwiperf_tcp_client_sent+0x44>)
 8001892:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8001896:	4909      	ldr	r1, [pc, #36]	; (80018bc <lwiperf_tcp_client_sent+0x48>)
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <lwiperf_tcp_client_sent+0x4c>)
 800189a:	f01d fbc3 	bl	801f024 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff08 	bl	80016bc <lwiperf_tcp_client_send_more>
 80018ac:	4603      	mov	r3, r0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	08023d68 	.word	0x08023d68
 80018bc:	08023dd0 	.word	0x08023dd0
 80018c0:	08023d90 	.word	0x08023d90

080018c4 <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d006      	beq.n	80018ee <lwiperf_tcp_client_connected+0x2a>
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <lwiperf_tcp_client_connected+0x60>)
 80018e2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80018e6:	4910      	ldr	r1, [pc, #64]	; (8001928 <lwiperf_tcp_client_connected+0x64>)
 80018e8:	4810      	ldr	r0, [pc, #64]	; (800192c <lwiperf_tcp_client_connected+0x68>)
 80018ea:	f01d fb9b 	bl	801f024 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80018f6:	2105      	movs	r1, #5
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	f7ff fe7d 	bl	80015f8 <lwiperf_tcp_close>
    return ERR_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e00c      	b.n	800191c <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 800190a:	f00f fd11 	bl	8011330 <sys_now>
 800190e:	4602      	mov	r2, r0
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f7ff fed1 	bl	80016bc <lwiperf_tcp_client_send_more>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	08023d68 	.word	0x08023d68
 8001928:	08023dd0 	.word	0x08023dd0
 800192c:	08023d90 	.word	0x08023d90

08001930 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	460b      	mov	r3, r1
 800193e:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <lwiperf_tx_start_impl+0x24>
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <lwiperf_tx_start_impl+0x140>)
 8001948:	f240 128b 	movw	r2, #395	; 0x18b
 800194c:	4949      	ldr	r1, [pc, #292]	; (8001a74 <lwiperf_tx_start_impl+0x144>)
 800194e:	484a      	ldr	r0, [pc, #296]	; (8001a78 <lwiperf_tx_start_impl+0x148>)
 8001950:	f01d fb68 	bl	801f024 <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <lwiperf_tx_start_impl+0x38>
 800195a:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <lwiperf_tx_start_impl+0x140>)
 800195c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001960:	4944      	ldr	r1, [pc, #272]	; (8001a74 <lwiperf_tx_start_impl+0x144>)
 8001962:	4845      	ldr	r0, [pc, #276]	; (8001a78 <lwiperf_tx_start_impl+0x148>)
 8001964:	f01d fb5e 	bl	801f024 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <lwiperf_tx_start_impl+0x4c>
 800196e:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <lwiperf_tx_start_impl+0x140>)
 8001970:	f240 128d 	movw	r2, #397	; 0x18d
 8001974:	4941      	ldr	r1, [pc, #260]	; (8001a7c <lwiperf_tx_start_impl+0x14c>)
 8001976:	4840      	ldr	r0, [pc, #256]	; (8001a78 <lwiperf_tx_start_impl+0x148>)
 8001978:	f01d fb54 	bl	801f024 <iprintf>
  *new_conn = NULL;
 800197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8001982:	2048      	movs	r0, #72	; 0x48
 8001984:	f013 f922 	bl	8014bcc <mem_malloc>
 8001988:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001994:	e067      	b.n	8001a66 <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8001996:	2000      	movs	r0, #0
 8001998:	f016 f978 	bl	8017c8c <tcp_new_ip_type>
 800199c:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 80019a4:	69f8      	ldr	r0, [r7, #28]
 80019a6:	f012 ffab 	bl	8014900 <mem_free>
    return ERR_MEM;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ae:	e05a      	b.n	8001a66 <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80019b0:	2248      	movs	r2, #72	; 0x48
 80019b2:	2100      	movs	r1, #0
 80019b4:	69f8      	ldr	r0, [r7, #28]
 80019b6:	f01c fc3d 	bl	801e234 <memset>
  client_conn->base.tcp = 1;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2201      	movs	r2, #1
 80019be:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c4:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 80019cc:	f00f fcb0 	bl	8011330 <sys_now>
 80019d0:	4602      	mov	r2, r0
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019e0:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2204      	movs	r2, #4
 80019e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  client_conn->bytes_transferred = 0;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3328      	adds	r3, #40	; 0x28
 80019f4:	2218      	movs	r2, #24
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f01c fbf3 	bl	801e1e4 <memcpy>
  client_conn->have_settings_buf = 1;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  tcp_arg(newpcb, client_conn);
 8001a06:	69f9      	ldr	r1, [r7, #28]
 8001a08:	69b8      	ldr	r0, [r7, #24]
 8001a0a:	f016 f94d 	bl	8017ca8 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8001a0e:	491c      	ldr	r1, [pc, #112]	; (8001a80 <lwiperf_tx_start_impl+0x150>)
 8001a10:	69b8      	ldr	r0, [r7, #24]
 8001a12:	f016 f97d 	bl	8017d10 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8001a16:	2202      	movs	r2, #2
 8001a18:	491a      	ldr	r1, [pc, #104]	; (8001a84 <lwiperf_tx_start_impl+0x154>)
 8001a1a:	69b8      	ldr	r0, [r7, #24]
 8001a1c:	f016 f9d4 	bl	8017dc8 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8001a20:	4919      	ldr	r1, [pc, #100]	; (8001a88 <lwiperf_tx_start_impl+0x158>)
 8001a22:	69b8      	ldr	r0, [r7, #24]
 8001a24:	f016 f996 	bl	8017d54 <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8001a2e:	897a      	ldrh	r2, [r7, #10]
 8001a30:	f107 0110 	add.w	r1, r7, #16
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <lwiperf_tx_start_impl+0x15c>)
 8001a36:	69b8      	ldr	r0, [r7, #24]
 8001a38:	f015 f9ee 	bl	8016e18 <tcp_connect>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8001a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001a48:	2102      	movs	r1, #2
 8001a4a:	69f8      	ldr	r0, [r7, #28]
 8001a4c:	f7ff fdd4 	bl	80015f8 <lwiperf_tcp_close>
    return err;
 8001a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a54:	e007      	b.n	8001a66 <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fd11 	bl	8001480 <lwiperf_list_add>
  *new_conn = client_conn;
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	08023d68 	.word	0x08023d68
 8001a74:	08023de0 	.word	0x08023de0
 8001a78:	08023d90 	.word	0x08023d90
 8001a7c:	08023df4 	.word	0x08023df4
 8001a80:	08001875 	.word	0x08001875
 8001a84:	08001d65 	.word	0x08001d65
 8001a88:	08001d45 	.word	0x08001d45
 8001a8c:	080018c5 	.word	0x080018c5

08001a90 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af04      	add	r7, sp, #16
 8001a96:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f010 fa22 	bl	8011eea <lwip_htonl>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	1d18      	adds	r0, r3, #4
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699e      	ldr	r6, [r3, #24]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6892      	ldr	r2, [r2, #8]
 8001ac2:	89fc      	ldrh	r4, [r7, #14]
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	9102      	str	r1, [sp, #8]
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4633      	mov	r3, r6
 8001ad0:	462a      	mov	r2, r5
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	f7ff ff2c 	bl	8001930 <lwiperf_tx_start_impl>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 8001adc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10c      	bne.n	8001afe <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <lwiperf_tx_start_passive+0x68>
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <lwiperf_tx_start_passive+0x7c>)
 8001aec:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <lwiperf_tx_start_passive+0x80>)
 8001af2:	4808      	ldr	r0, [pc, #32]	; (8001b14 <lwiperf_tx_start_passive+0x84>)
 8001af4:	f01d fa96 	bl	801f024 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return ret;
 8001afe:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	08023d68 	.word	0x08023d68
 8001b10:	08023df4 	.word	0x08023df4
 8001b14:	08023d90 	.word	0x08023d90

08001b18 <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d006      	beq.n	8001b42 <lwiperf_tcp_recv+0x2a>
 8001b34:	4b7e      	ldr	r3, [pc, #504]	; (8001d30 <lwiperf_tcp_recv+0x218>)
 8001b36:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8001b3a:	497e      	ldr	r1, [pc, #504]	; (8001d34 <lwiperf_tcp_recv+0x21c>)
 8001b3c:	487e      	ldr	r0, [pc, #504]	; (8001d38 <lwiperf_tcp_recv+0x220>)
 8001b3e:	f01d fa71 	bl	801f024 <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 8001b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001b4a:	2105      	movs	r1, #5
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f7ff fd53 	bl	80015f8 <lwiperf_tcp_close>
    return ERR_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e0e8      	b.n	8001d28 <lwiperf_tcp_recv+0x210>
  }
  if (p == NULL) {
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d114      	bne.n	8001b86 <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8001b74:	6978      	ldr	r0, [r7, #20]
 8001b76:	f7ff ff8b 	bl	8001a90 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	6978      	ldr	r0, [r7, #20]
 8001b7e:	f7ff fd3b 	bl	80015f8 <lwiperf_tcp_close>
    return ERR_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e0d0      	b.n	8001d28 <lwiperf_tcp_recv+0x210>
  }
  tot_len = p->tot_len;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	891b      	ldrh	r3, [r3, #8]
 8001b8a:	827b      	strh	r3, [r7, #18]

  conn->poll_count = 0;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <lwiperf_tcp_recv+0x96>
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	3b18      	subs	r3, #24
 8001ba4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 8090 	bne.w	8001cce <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	891b      	ldrh	r3, [r3, #8]
 8001bb2:	2b17      	cmp	r3, #23
 8001bb4:	d808      	bhi.n	8001bc8 <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	6978      	ldr	r0, [r7, #20]
 8001bba:	f7ff fd1d 	bl	80015f8 <lwiperf_tcp_close>
      pbuf_free(p);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f014 f87a 	bl	8015cb8 <pbuf_free>
      return ERR_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e0af      	b.n	8001d28 <lwiperf_tcp_recv+0x210>
    }
    if (!conn->have_settings_buf) {
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d135      	bne.n	8001c3e <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2218      	movs	r2, #24
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f014 fa55 	bl	801608c <pbuf_copy_partial>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b18      	cmp	r3, #24
 8001be6:	d008      	beq.n	8001bfa <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001be8:	2102      	movs	r1, #2
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff fd04 	bl	80015f8 <lwiperf_tcp_close>
        pbuf_free(p);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f014 f861 	bl	8015cb8 <pbuf_free>
        return ERR_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e096      	b.n	8001d28 <lwiperf_tcp_recv+0x210>
      }
      conn->have_settings_buf = 1;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d031      	beq.n	8001c72 <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d02b      	beq.n	8001c72 <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff38 	bl	8001a90 <lwiperf_tx_start_passive>
 8001c20:	4603      	mov	r3, r0
 8001c22:	747b      	strb	r3, [r7, #17]
          if (err2 != ERR_OK) {
 8001c24:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff fce2 	bl	80015f8 <lwiperf_tcp_close>
            pbuf_free(p);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f014 f83f 	bl	8015cb8 <pbuf_free>
            return ERR_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e074      	b.n	8001d28 <lwiperf_tcp_recv+0x210>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d013      	beq.n	8001c72 <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001c50:	2318      	movs	r3, #24
 8001c52:	2100      	movs	r1, #0
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f014 fb20 	bl	801629a <pbuf_memcmp>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8001c60:	2103      	movs	r1, #3
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	f7ff fcc8 	bl	80015f8 <lwiperf_tcp_close>
          pbuf_free(p);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f014 f825 	bl	8015cb8 <pbuf_free>
          return ERR_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e05a      	b.n	8001d28 <lwiperf_tcp_recv+0x210>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f103 0218 	add.w	r2, r3, #24
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b18      	cmp	r3, #24
 8001c84:	d80f      	bhi.n	8001ca6 <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8001c86:	f00f fb53 	bl	8011330 <sys_now>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	891b      	ldrh	r3, [r3, #8]
 8001c94:	4619      	mov	r1, r3
 8001c96:	68b8      	ldr	r0, [r7, #8]
 8001c98:	f015 f828 	bl	8016cec <tcp_recved>
      pbuf_free(p);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f014 f80b 	bl	8015cb8 <pbuf_free>
      return ERR_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e040      	b.n	8001d28 <lwiperf_tcp_recv+0x210>
    }
    conn->next_num = 4; /* 24 bytes received... */
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 8001cae:	2118      	movs	r1, #24
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f013 ff7b 	bl	8015bac <pbuf_remove_header>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	743b      	strb	r3, [r7, #16]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8001cba:	7c3b      	ldrb	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <lwiperf_tcp_recv+0x1b6>
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <lwiperf_tcp_recv+0x218>)
 8001cc2:	f240 2211 	movw	r2, #529	; 0x211
 8001cc6:	491d      	ldr	r1, [pc, #116]	; (8001d3c <lwiperf_tcp_recv+0x224>)
 8001cc8:	481b      	ldr	r0, [pc, #108]	; (8001d38 <lwiperf_tcp_recv+0x220>)
 8001cca:	f01d f9ab 	bl	801f024 <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	e008      	b.n	8001cea <lwiperf_tcp_recv+0x1d2>
        pbuf_free(p);
        return ERR_OK;
      }
    }
#endif
    packet_idx += q->len;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	895b      	ldrh	r3, [r3, #10]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	61fb      	str	r3, [r7, #28]
  for (q = p; q != NULL; q = q->next) {
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f3      	bne.n	8001cd8 <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	891b      	ldrh	r3, [r3, #8]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d006      	beq.n	8001d0a <lwiperf_tcp_recv+0x1f2>
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <lwiperf_tcp_recv+0x218>)
 8001cfe:	f240 222b 	movw	r2, #555	; 0x22b
 8001d02:	490f      	ldr	r1, [pc, #60]	; (8001d40 <lwiperf_tcp_recv+0x228>)
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <lwiperf_tcp_recv+0x220>)
 8001d06:	f01d f98d 	bl	801f024 <iprintf>
  conn->bytes_transferred += packet_idx;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	441a      	add	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8001d16:	8a7b      	ldrh	r3, [r7, #18]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68b8      	ldr	r0, [r7, #8]
 8001d1c:	f014 ffe6 	bl	8016cec <tcp_recved>
  pbuf_free(p);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f013 ffc9 	bl	8015cb8 <pbuf_free>
  return ERR_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	08023d68 	.word	0x08023d68
 8001d34:	08023e08 	.word	0x08023e08
 8001d38:	08023d90 	.word	0x08023d90
 8001d3c:	08023e18 	.word	0x08023e18
 8001d40:	08023e34 	.word	0x08023e34

08001d44 <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8001d54:	2105      	movs	r1, #5
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff fc4e 	bl	80015f8 <lwiperf_tcp_close>
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d006      	beq.n	8001d8a <lwiperf_tcp_poll+0x26>
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <lwiperf_tcp_poll+0x64>)
 8001d7e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8001d82:	4912      	ldr	r1, [pc, #72]	; (8001dcc <lwiperf_tcp_poll+0x68>)
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <lwiperf_tcp_poll+0x6c>)
 8001d86:	f01d f94d 	bl	801f024 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d90:	3301      	adds	r3, #1
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f883 2020 	strb.w	r2, [r3, #32]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d905      	bls.n	8001db0 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8001da4:	2102      	movs	r1, #2
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7ff fc26 	bl	80015f8 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8001dac:	2300      	movs	r3, #0
 8001dae:	e007      	b.n	8001dc0 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	795b      	ldrb	r3, [r3, #5]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff fc7f 	bl	80016bc <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	08023d68 	.word	0x08023d68
 8001dcc:	08023e08 	.word	0x08023e08
 8001dd0:	08023d90 	.word	0x08023d90

08001dd4 <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <lwiperf_tcp_accept+0x22>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <lwiperf_tcp_accept+0x22>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 8001df6:	f06f 0305 	mvn.w	r3, #5
 8001dfa:	e0a3      	b.n	8001f44 <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	795b      	ldrb	r3, [r3, #5]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d106      	bne.n	8001e16 <lwiperf_tcp_accept+0x42>
 8001e08:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <lwiperf_tcp_accept+0x178>)
 8001e0a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001e0e:	4950      	ldr	r1, [pc, #320]	; (8001f50 <lwiperf_tcp_accept+0x17c>)
 8001e10:	4850      	ldr	r0, [pc, #320]	; (8001f54 <lwiperf_tcp_accept+0x180>)
 8001e12:	f01d f907 	bl	801f024 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <lwiperf_tcp_accept+0x58>
 8001e1e:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <lwiperf_tcp_accept+0x178>)
 8001e20:	f240 2259 	movw	r2, #601	; 0x259
 8001e24:	494c      	ldr	r1, [pc, #304]	; (8001f58 <lwiperf_tcp_accept+0x184>)
 8001e26:	484b      	ldr	r0, [pc, #300]	; (8001f54 <lwiperf_tcp_accept+0x180>)
 8001e28:	f01d f8fc 	bl	801f024 <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <lwiperf_tcp_accept+0x6e>
 8001e34:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <lwiperf_tcp_accept+0x178>)
 8001e36:	f240 225a 	movw	r2, #602	; 0x25a
 8001e3a:	4948      	ldr	r1, [pc, #288]	; (8001f5c <lwiperf_tcp_accept+0x188>)
 8001e3c:	4845      	ldr	r0, [pc, #276]	; (8001f54 <lwiperf_tcp_accept+0x180>)
 8001e3e:	f01d f8f1 	bl	801f024 <iprintf>
  if (s->specific_remote) {
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d106      	bne.n	8001e62 <lwiperf_tcp_accept+0x8e>
 8001e54:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <lwiperf_tcp_accept+0x178>)
 8001e56:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8001e5a:	4941      	ldr	r1, [pc, #260]	; (8001f60 <lwiperf_tcp_accept+0x18c>)
 8001e5c:	483d      	ldr	r0, [pc, #244]	; (8001f54 <lwiperf_tcp_accept+0x180>)
 8001e5e:	f01d f8e1 	bl	801f024 <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d00d      	beq.n	8001e8a <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 8001e6e:	f06f 0305 	mvn.w	r3, #5
 8001e72:	e067      	b.n	8001f44 <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <lwiperf_tcp_accept+0xb6>
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <lwiperf_tcp_accept+0x178>)
 8001e7e:	f240 2262 	movw	r2, #610	; 0x262
 8001e82:	4938      	ldr	r1, [pc, #224]	; (8001f64 <lwiperf_tcp_accept+0x190>)
 8001e84:	4833      	ldr	r0, [pc, #204]	; (8001f54 <lwiperf_tcp_accept+0x180>)
 8001e86:	f01d f8cd 	bl	801f024 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8001e8a:	2048      	movs	r0, #72	; 0x48
 8001e8c:	f012 fe9e 	bl	8014bcc <mem_malloc>
 8001e90:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e9c:	e052      	b.n	8001f44 <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8001e9e:	2248      	movs	r2, #72	; 0x48
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	6938      	ldr	r0, [r7, #16]
 8001ea4:	f01c f9c6 	bl	801e234 <memset>
  conn->base.tcp = 1;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 8001ec0:	f00f fa36 	bl	8011330 <sys_now>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 8001eda:	6939      	ldr	r1, [r7, #16]
 8001edc:	68b8      	ldr	r0, [r7, #8]
 8001ede:	f015 fee3 	bl	8017ca8 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8001ee2:	4921      	ldr	r1, [pc, #132]	; (8001f68 <lwiperf_tcp_accept+0x194>)
 8001ee4:	68b8      	ldr	r0, [r7, #8]
 8001ee6:	f015 fef1 	bl	8017ccc <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8001eea:	2202      	movs	r2, #2
 8001eec:	491f      	ldr	r1, [pc, #124]	; (8001f6c <lwiperf_tcp_accept+0x198>)
 8001eee:	68b8      	ldr	r0, [r7, #8]
 8001ef0:	f015 ff6a 	bl	8017dc8 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	491d      	ldr	r1, [pc, #116]	; (8001f70 <lwiperf_tcp_accept+0x19c>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f015 ff2a 	bl	8017d54 <tcp_err>

  if (s->specific_remote) {
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d017      	beq.n	8001f3a <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <lwiperf_tcp_accept+0x158>
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fb05 	bl	8001530 <lwiperf_list_find>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d106      	bne.n	8001f3a <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8001f32:	2102      	movs	r1, #2
 8001f34:	6978      	ldr	r0, [r7, #20]
 8001f36:	f7ff fb5f 	bl	80015f8 <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fa9f 	bl	8001480 <lwiperf_list_add>
  return ERR_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	08023d68 	.word	0x08023d68
 8001f50:	08023e44 	.word	0x08023e44
 8001f54:	08023d90 	.word	0x08023d90
 8001f58:	08023e54 	.word	0x08023e54
 8001f5c:	08023e68 	.word	0x08023e68
 8001f60:	08023e7c 	.word	0x08023e7c
 8001f64:	08023ea4 	.word	0x08023ea4
 8001f68:	08001b19 	.word	0x08001b19
 8001f6c:	08001d65 	.word	0x08001d65
 8001f70:	08001d45 	.word	0x08001d45

08001f74 <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	f241 3189 	movw	r1, #5001	; 0x1389
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <lwiperf_start_tcp_server_default+0x24>)
 8001f88:	f000 f808 	bl	8001f9c <lwiperf_start_tcp_server>
 8001f8c:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	08027278 	.word	0x08027278

08001f9c <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8001fb0:	8979      	ldrh	r1, [r7, #10]
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f80d 	bl	8001fe0 <lwiperf_start_tcp_server_impl>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 8001fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <lwiperf_start_tcp_server+0x3a>
    return state;
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	e000      	b.n	8001fd8 <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("state != NULL", state != NULL);
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <lwiperf_start_tcp_server_impl+0x24>
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <lwiperf_start_tcp_server_impl+0x100>)
 8001ff8:	f240 22b6 	movw	r2, #694	; 0x2b6
 8001ffc:	4939      	ldr	r1, [pc, #228]	; (80020e4 <lwiperf_start_tcp_server_impl+0x104>)
 8001ffe:	483a      	ldr	r0, [pc, #232]	; (80020e8 <lwiperf_start_tcp_server_impl+0x108>)
 8002000:	f01d f810 	bl	801f024 <iprintf>

  if (local_addr == NULL) {
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <lwiperf_start_tcp_server_impl+0x30>
    return ERR_ARG;
 800200a:	f06f 030f 	mvn.w	r3, #15
 800200e:	e063      	b.n	80020d8 <lwiperf_start_tcp_server_impl+0xf8>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8002010:	2048      	movs	r0, #72	; 0x48
 8002012:	f012 fddb 	bl	8014bcc <mem_malloc>
 8002016:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <lwiperf_start_tcp_server_impl+0x44>
    return ERR_MEM;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002022:	e059      	b.n	80020d8 <lwiperf_start_tcp_server_impl+0xf8>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8002024:	2248      	movs	r2, #72	; 0x48
 8002026:	2100      	movs	r1, #0
 8002028:	69f8      	ldr	r0, [r7, #28]
 800202a:	f01c f903 	bl	801e234 <memset>
  s->base.tcp = 1;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	2201      	movs	r2, #1
 8002032:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2201      	movs	r2, #1
 8002038:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203e:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 800204c:	202e      	movs	r0, #46	; 0x2e
 800204e:	f015 fe1d 	bl	8017c8c <tcp_new_ip_type>
 8002052:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <lwiperf_start_tcp_server_impl+0x80>
    return ERR_MEM;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205e:	e03b      	b.n	80020d8 <lwiperf_start_tcp_server_impl+0xf8>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8002060:	897b      	ldrh	r3, [r7, #10]
 8002062:	461a      	mov	r2, r3
 8002064:	68f9      	ldr	r1, [r7, #12]
 8002066:	69b8      	ldr	r0, [r7, #24]
 8002068:	f014 fc72 	bl	8016950 <tcp_bind>
 800206c:	4603      	mov	r3, r0
 800206e:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8002070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <lwiperf_start_tcp_server_impl+0x9e>
    return err;
 8002078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800207c:	e02c      	b.n	80020d8 <lwiperf_start_tcp_server_impl+0xf8>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800207e:	2101      	movs	r1, #1
 8002080:	69b8      	ldr	r0, [r7, #24]
 8002082:	f014 fd1d 	bl	8016ac0 <tcp_listen_with_backlog>
 8002086:	4602      	mov	r2, r0
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10b      	bne.n	80020ac <lwiperf_start_tcp_server_impl+0xcc>
    if (pcb != NULL) {
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <lwiperf_start_tcp_server_impl+0xc0>
      tcp_close(pcb);
 800209a:	69b8      	ldr	r0, [r7, #24]
 800209c:	f014 fb62 	bl	8016764 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 80020a0:	69f8      	ldr	r0, [r7, #28]
 80020a2:	f012 fc2d 	bl	8014900 <mem_free>
    return ERR_MEM;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020aa:	e015      	b.n	80020d8 <lwiperf_start_tcp_server_impl+0xf8>
  }
  pcb = NULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	69f9      	ldr	r1, [r7, #28]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f015 fdf6 	bl	8017ca8 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	490a      	ldr	r1, [pc, #40]	; (80020ec <lwiperf_start_tcp_server_impl+0x10c>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	f015 fe68 	bl	8017d98 <tcp_accept>

  lwiperf_list_add(&s->base);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff f9d8 	bl	8001480 <lwiperf_list_add>
  *state = s;
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	08023d68 	.word	0x08023d68
 80020e4:	08023ecc 	.word	0x08023ecc
 80020e8:	08023d90 	.word	0x08023d90
 80020ec:	08001dd5 	.word	0x08001dd5

080020f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	f5ad 5d1f 	sub.w	sp, sp, #10176	; 0x27c0
 80020f6:	b085      	sub	sp, #20
 80020f8:	af04      	add	r7, sp, #16
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80020fa:	f000 fb53 	bl	80027a4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80020fe:	4b98      	ldr	r3, [pc, #608]	; (8002360 <main+0x270>)
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11b      	bne.n	8002142 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800210a:	f3bf 8f4f 	dsb	sy
}
 800210e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002110:	f3bf 8f6f 	isb	sy
}
 8002114:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002116:	4b92      	ldr	r3, [pc, #584]	; (8002360 <main+0x270>)
 8002118:	2200      	movs	r2, #0
 800211a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800211e:	f3bf 8f4f 	dsb	sy
}
 8002122:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002124:	f3bf 8f6f 	isb	sy
}
 8002128:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800212a:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <main+0x270>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	4a8c      	ldr	r2, [pc, #560]	; (8002360 <main+0x270>)
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002136:	f3bf 8f4f 	dsb	sy
}
 800213a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800213c:	f3bf 8f6f 	isb	sy
}
 8002140:	e000      	b.n	8002144 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002142:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002144:	4b86      	ldr	r3, [pc, #536]	; (8002360 <main+0x270>)
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d159      	bne.n	8002204 <main+0x114>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002150:	4b83      	ldr	r3, [pc, #524]	; (8002360 <main+0x270>)
 8002152:	2200      	movs	r2, #0
 8002154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002158:	f3bf 8f4f 	dsb	sy
}
 800215c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800215e:	4b80      	ldr	r3, [pc, #512]	; (8002360 <main+0x270>)
 8002160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002164:	f242 72a8 	movw	r2, #10152	; 0x27a8
 8002168:	443a      	add	r2, r7
 800216a:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800216c:	f242 73a8 	movw	r3, #10152	; 0x27a8
 8002170:	443b      	add	r3, r7
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0b5b      	lsrs	r3, r3, #13
 8002176:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800217a:	f242 72a4 	movw	r2, #10148	; 0x27a4
 800217e:	443a      	add	r2, r7
 8002180:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002182:	f242 73a8 	movw	r3, #10152	; 0x27a8
 8002186:	443b      	add	r3, r7
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	08db      	lsrs	r3, r3, #3
 800218c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002190:	f242 72a0 	movw	r2, #10144	; 0x27a0
 8002194:	443a      	add	r2, r7
 8002196:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002198:	f242 73a4 	movw	r3, #10148	; 0x27a4
 800219c:	443b      	add	r3, r7
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80021a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80021a8:	f242 72a0 	movw	r2, #10144	; 0x27a0
 80021ac:	443a      	add	r2, r7
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80021b2:	496b      	ldr	r1, [pc, #428]	; (8002360 <main+0x270>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80021ba:	f242 73a0 	movw	r3, #10144	; 0x27a0
 80021be:	443b      	add	r3, r7
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1e5a      	subs	r2, r3, #1
 80021c4:	f242 71a0 	movw	r1, #10144	; 0x27a0
 80021c8:	4439      	add	r1, r7
 80021ca:	600a      	str	r2, [r1, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e3      	bne.n	8002198 <main+0xa8>
    } while(sets-- != 0U);
 80021d0:	f242 73a4 	movw	r3, #10148	; 0x27a4
 80021d4:	443b      	add	r3, r7
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	f242 71a4 	movw	r1, #10148	; 0x27a4
 80021de:	4439      	add	r1, r7
 80021e0:	600a      	str	r2, [r1, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1cd      	bne.n	8002182 <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 80021e6:	f3bf 8f4f 	dsb	sy
}
 80021ea:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80021ec:	4b5c      	ldr	r3, [pc, #368]	; (8002360 <main+0x270>)
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	4a5b      	ldr	r2, [pc, #364]	; (8002360 <main+0x270>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80021f8:	f3bf 8f4f 	dsb	sy
}
 80021fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021fe:	f3bf 8f6f 	isb	sy
}
 8002202:	e000      	b.n	8002206 <main+0x116>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002204:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8002206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220a:	f242 72bc 	movw	r2, #10172	; 0x27bc
 800220e:	443a      	add	r2, r7
 8002210:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8002212:	bf00      	nop
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <main+0x274>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <main+0x146>
 8002220:	f242 73bc 	movw	r3, #10172	; 0x27bc
 8002224:	443b      	add	r3, r7
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	f242 71bc 	movw	r1, #10172	; 0x27bc
 800222e:	4439      	add	r1, r7
 8002230:	600a      	str	r2, [r1, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	dcee      	bgt.n	8002214 <main+0x124>
	if ( timeout < 0 )
 8002236:	f242 73bc 	movw	r3, #10172	; 0x27bc
 800223a:	443b      	add	r3, r7
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da01      	bge.n	8002246 <main+0x156>
	{
		Error_Handler();
 8002242:	f000 faef 	bl	8002824 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002246:	f001 fda7 	bl	8003d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800224a:	f000 fa05 	bl	8002658 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800224e:	f000 fa8d 	bl	800276c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8002252:	4b44      	ldr	r3, [pc, #272]	; (8002364 <main+0x274>)
 8002254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002258:	4a42      	ldr	r2, [pc, #264]	; (8002364 <main+0x274>)
 800225a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800225e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002262:	4b40      	ldr	r3, [pc, #256]	; (8002364 <main+0x274>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002268:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800226c:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <main+0x278>)
 800226e:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002272:	440b      	add	r3, r1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <main+0x278>)
 8002278:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 800227c:	4413      	add	r3, r2
 800227e:	681b      	ldr	r3, [r3, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8002280:	2000      	movs	r0, #0
 8002282:	f006 fd25 	bl	8008cd0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8002286:	2100      	movs	r1, #0
 8002288:	2000      	movs	r0, #0
 800228a:	f006 fd3b 	bl	8008d04 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800228e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002292:	f242 72bc 	movw	r2, #10172	; 0x27bc
 8002296:	443a      	add	r2, r7
 8002298:	6013      	str	r3, [r2, #0]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800229a:	bf00      	nop
 800229c:	4b31      	ldr	r3, [pc, #196]	; (8002364 <main+0x274>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <main+0x1ce>
 80022a8:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80022ac:	443b      	add	r3, r7
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	f242 71bc 	movw	r1, #10172	; 0x27bc
 80022b6:	4439      	add	r1, r7
 80022b8:	600a      	str	r2, [r1, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	dcee      	bgt.n	800229c <main+0x1ac>
	if ( timeout < 0 )
 80022be:	f242 73bc 	movw	r3, #10172	; 0x27bc
 80022c2:	443b      	add	r3, r7
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da01      	bge.n	80022ce <main+0x1de>
	{
		Error_Handler();
 80022ca:	f000 faab 	bl	8002824 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ce:	f7fe ff8b 	bl	80011e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80022d2:	f7fe fe2d 	bl	8000f30 <MX_DMA_Init>
  MX_FMC_Init();
 80022d6:	f7fe fe73 	bl	8000fc0 <MX_FMC_Init>
  MX_SAI1_Init();
 80022da:	f000 faf7 	bl	80028cc <MX_SAI1_Init>
  MX_SPI2_Init();
 80022de:	f000 fbf3 	bl	8002ac8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80022e2:	f001 fadb 	bl	800389c <MX_USART1_UART_Init>
  MX_RNG_Init();
 80022e6:	f000 faa3 	bl	8002830 <MX_RNG_Init>
  MX_CRC_Init();
 80022ea:	f7fe fddd 	bl	8000ea8 <MX_CRC_Init>
  MX_LWIP_Init();
 80022ee:	f00e fbf3 	bl	8010ad8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	2120      	movs	r1, #32
 80022f6:	481d      	ldr	r0, [pc, #116]	; (800236c <main+0x27c>)
 80022f8:	f006 fcb6 	bl	8008c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_5V_GPIO_Port, EN_5V_Pin, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	2104      	movs	r1, #4
 8002300:	481a      	ldr	r0, [pc, #104]	; (800236c <main+0x27c>)
 8002302:	f006 fcb1 	bl	8008c68 <HAL_GPIO_WritePin>

	//  int8_t timeText[] = {'1', '2', ':', '3', '5'};
	//  uint32_t framecount = 0;

	ssd1362_init();
 8002306:	f01b feb7 	bl	801e078 <ssd1362_init>

	ssd1362_clearBuffer();
 800230a:	f01b fe55 	bl	801dfb8 <ssd1362_clearBuffer>
	ssd1362_drawHLine(0, 5, 256,0xF, 0);
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	230f      	movs	r3, #15
 8002314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002318:	2105      	movs	r1, #5
 800231a:	2000      	movs	r0, #0
 800231c:	f01b fc90 	bl	801dc40 <ssd1362_drawHLine>
	ssd1362_drawHLine(0, 40, 256,0xF, 0);
 8002320:	2300      	movs	r3, #0
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	230f      	movs	r3, #15
 8002326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800232a:	2128      	movs	r1, #40	; 0x28
 800232c:	2000      	movs	r0, #0
 800232e:	f01b fc87 	bl	801dc40 <ssd1362_drawHLine>
	ssd1362_drawString(16, 15, (int8_t *)"Hello Spectral Sound Scanner", 0xF, 16);
 8002332:	2310      	movs	r3, #16
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	230f      	movs	r3, #15
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <main+0x280>)
 800233a:	210f      	movs	r1, #15
 800233c:	2010      	movs	r0, #16
 800233e:	f01b fd9a 	bl	801de76 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 8002342:	f01b fe67 	bl	801e014 <ssd1362_writeFullBuffer>

	cisynth_ifft();  //while(1)
 8002346:	f7fe fb93 	bl	8000a70 <cisynth_ifft>



	uint32_t aRandom32bit = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	f242 7290 	movw	r2, #10128	; 0x2790
 8002350:	443a      	add	r2, r7
 8002352:	6013      	str	r3, [r2, #0]
	uint8_t buff[10000];

	for (uint32_t i = 0; i < 10000; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	f242 72b8 	movw	r2, #10168	; 0x27b8
 800235a:	443a      	add	r2, r7
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e02c      	b.n	80023ba <main+0x2ca>
 8002360:	e000ed00 	.word	0xe000ed00
 8002364:	58024400 	.word	0x58024400
 8002368:	ffffd8a8 	.word	0xffffd8a8
 800236c:	58021800 	.word	0x58021800
 8002370:	08023edc 	.word	0x08023edc
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 8002374:	f242 7390 	movw	r3, #10128	; 0x2790
 8002378:	443b      	add	r3, r7
 800237a:	4619      	mov	r1, r3
 800237c:	48a5      	ldr	r0, [pc, #660]	; (8002614 <main+0x524>)
 800237e:	f009 fed0 	bl	800c122 <HAL_RNG_GenerateRandomNumber>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <main+0x29c>
		{
			/* Random number generation error */
			Error_Handler();
 8002388:	f000 fa4c 	bl	8002824 <Error_Handler>
		}
		buff[i] = aRandom32bit;
 800238c:	f242 7390 	movw	r3, #10128	; 0x2790
 8002390:	443b      	add	r3, r7
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b2d9      	uxtb	r1, r3
 8002396:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800239a:	f242 73b8 	movw	r3, #10168	; 0x27b8
 800239e:	443b      	add	r3, r7
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	460a      	mov	r2, r1
 80023a6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 10000; i++)
 80023a8:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80023ac:	443b      	add	r3, r7
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	f242 72b8 	movw	r2, #10168	; 0x27b8
 80023b6:	443a      	add	r2, r7
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	f242 73b8 	movw	r3, #10168	; 0x27b8
 80023be:	443b      	add	r3, r7
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d9d4      	bls.n	8002374 <main+0x284>
	}

	Audio_Player_Play(buff, 10000);
 80023ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80023d2:	4618      	mov	r0, r3
 80023d4:	f01b fa70 	bl	801d8b8 <Audio_Player_Play>

	//  HAL_GPIO_WritePin(MEMS_FSYNC_GPIO_Port, MEMS_FSYNC_Pin, GPIO_PIN_RESET);
	icm20602_init();
 80023d8:	f01a ffce 	bl	801d378 <icm20602_init>
	int16_t accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z, tmp;


	const char* message = "Hello UDP message!\n\r";
 80023dc:	4b8e      	ldr	r3, [pc, #568]	; (8002618 <main+0x528>)
 80023de:	f242 72b4 	movw	r2, #10164	; 0x27b4
 80023e2:	443a      	add	r2, r7
 80023e4:	6013      	str	r3, [r2, #0]

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 80023e6:	4b8d      	ldr	r3, [pc, #564]	; (800261c <main+0x52c>)
 80023e8:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80023ec:	4413      	add	r3, r2
 80023ee:	4a8c      	ldr	r2, [pc, #560]	; (8002620 <main+0x530>)
 80023f0:	601a      	str	r2, [r3, #0]

	struct udp_pcb* my_udp = udp_new();
 80023f2:	f01a fcf9 	bl	801cde8 <udp_new>
 80023f6:	f242 73b0 	movw	r3, #10160	; 0x27b0
 80023fa:	443b      	add	r3, r7
 80023fc:	6018      	str	r0, [r3, #0]
	udp_connect(my_udp, &PC_IPADDR, 55151);
 80023fe:	4b87      	ldr	r3, [pc, #540]	; (800261c <main+0x52c>)
 8002400:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002404:	4413      	add	r3, r2
 8002406:	f24d 726f 	movw	r2, #55151	; 0xd76f
 800240a:	4619      	mov	r1, r3
 800240c:	f242 73b0 	movw	r3, #10160	; 0x27b0
 8002410:	443b      	add	r3, r7
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	f01a fc7a 	bl	801cd0c <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8002418:	2300      	movs	r3, #0
 800241a:	f242 72ac 	movw	r2, #10156	; 0x27ac
 800241e:	443a      	add	r2, r7
 8002420:	6013      	str	r3, [r2, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002422:	4b80      	ldr	r3, [pc, #512]	; (8002624 <main+0x534>)
 8002424:	2200      	movs	r2, #0
 8002426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800242a:	f3bf 8f4f 	dsb	sy
}
 800242e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002430:	4b7c      	ldr	r3, [pc, #496]	; (8002624 <main+0x534>)
 8002432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002436:	f242 729c 	movw	r2, #10140	; 0x279c
 800243a:	443a      	add	r2, r7
 800243c:	6013      	str	r3, [r2, #0]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800243e:	f242 739c 	movw	r3, #10140	; 0x279c
 8002442:	443b      	add	r3, r7
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800244c:	f242 7298 	movw	r2, #10136	; 0x2798
 8002450:	443a      	add	r2, r7
 8002452:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002454:	f242 739c 	movw	r3, #10140	; 0x279c
 8002458:	443b      	add	r3, r7
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002462:	f242 7294 	movw	r2, #10132	; 0x2794
 8002466:	443a      	add	r2, r7
 8002468:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800246a:	f242 7398 	movw	r3, #10136	; 0x2798
 800246e:	443b      	add	r3, r7
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002478:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800247a:	f242 7294 	movw	r2, #10132	; 0x2794
 800247e:	443a      	add	r2, r7
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002484:	4967      	ldr	r1, [pc, #412]	; (8002624 <main+0x534>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800248c:	f242 7394 	movw	r3, #10132	; 0x2794
 8002490:	443b      	add	r3, r7
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1e5a      	subs	r2, r3, #1
 8002496:	f242 7194 	movw	r1, #10132	; 0x2794
 800249a:	4439      	add	r1, r7
 800249c:	600a      	str	r2, [r1, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e3      	bne.n	800246a <main+0x37a>
    } while(sets-- != 0U);
 80024a2:	f242 7398 	movw	r3, #10136	; 0x2798
 80024a6:	443b      	add	r3, r7
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1e5a      	subs	r2, r3, #1
 80024ac:	f242 7198 	movw	r1, #10136	; 0x2798
 80024b0:	4439      	add	r1, r7
 80024b2:	600a      	str	r2, [r1, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1cd      	bne.n	8002454 <main+0x364>
  __ASM volatile ("dsb 0xF":::"memory");
 80024b8:	f3bf 8f4f 	dsb	sy
}
 80024bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024be:	f3bf 8f6f 	isb	sy
}
 80024c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80024c4:	bf00      	nop

	SCB_CleanInvalidateDCache();


	lwiperf_start_tcp_server_default(NULL, NULL); // TCP Perf = iperf -c 192.168.1.1 -i1 -t60 -u -b 1000M UDP Perf = iperf -c 192.168.1.1 -i1 -t60
 80024c6:	2100      	movs	r1, #0
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7ff fd53 	bl	8001f74 <lwiperf_start_tcp_server_default>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_LWIP_Process();
 80024ce:	f00e fc4f 	bl	8010d70 <MX_LWIP_Process>
		//	  ssd1362_writeFullBuffer();
		//	  HAL_Delay(1);

		//	  icm20602_read_accel(&accel_x, &accel_y, &accel_z);
		//	  icm20602_read_gyro(&gyro_x, &gyro_y, &gyro_z);
		icm20602_read_data_raw(&accel_x, &accel_y, &accel_z, &gyro_x, &gyro_y, &gyro_z, &tmp);
 80024d2:	4c55      	ldr	r4, [pc, #340]	; (8002628 <main+0x538>)
 80024d4:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80024d8:	441c      	add	r4, r3
 80024da:	4a54      	ldr	r2, [pc, #336]	; (800262c <main+0x53c>)
 80024dc:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80024e0:	441a      	add	r2, r3
 80024e2:	4953      	ldr	r1, [pc, #332]	; (8002630 <main+0x540>)
 80024e4:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80024e8:	4419      	add	r1, r3
 80024ea:	4852      	ldr	r0, [pc, #328]	; (8002634 <main+0x544>)
 80024ec:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80024f0:	4418      	add	r0, r3
 80024f2:	4b51      	ldr	r3, [pc, #324]	; (8002638 <main+0x548>)
 80024f4:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 80024f8:	4463      	add	r3, ip
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <main+0x54c>)
 80024fe:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 8002502:	4463      	add	r3, ip
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	4b4e      	ldr	r3, [pc, #312]	; (8002640 <main+0x550>)
 8002508:	f507 5c1f 	add.w	ip, r7, #10176	; 0x27c0
 800250c:	4463      	add	r3, ip
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4623      	mov	r3, r4
 8002512:	f01b f8ff 	bl	801d714 <icm20602_read_data_raw>

		ssd1362_clearBuffer();
 8002516:	f01b fd4f 	bl	801dfb8 <ssd1362_clearBuffer>
		char text[100] = {0};
 800251a:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <main+0x554>)
 800251c:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002520:	4413      	add	r3, r2
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	3304      	adds	r3, #4
 8002528:	2260      	movs	r2, #96	; 0x60
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f01b fe81 	bl	801e234 <memset>
		//	  sprintf(text,"Accel : %.2f  %.2f  %.2f", accel_x, accel_y, accel_z);
		//	  ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"Gyro  : %.2f  %.2f  %.2f", gyro_x, gyro_y, gyro_z);
		//	  ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
		//	  sprintf(text,"temp. : %.2f", tmp);
		sprintf(text,"Accel : %d  %d  %d", accel_x, accel_y, accel_z);
 8002532:	4b40      	ldr	r3, [pc, #256]	; (8002634 <main+0x544>)
 8002534:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002538:	4413      	add	r3, r2
 800253a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253e:	461a      	mov	r2, r3
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <main+0x540>)
 8002542:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002546:	440b      	add	r3, r1
 8002548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254c:	4619      	mov	r1, r3
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <main+0x53c>)
 8002550:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 8002554:	4403      	add	r3, r0
 8002556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255a:	483a      	ldr	r0, [pc, #232]	; (8002644 <main+0x554>)
 800255c:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 8002560:	4420      	add	r0, r4
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	460b      	mov	r3, r1
 8002566:	4938      	ldr	r1, [pc, #224]	; (8002648 <main+0x558>)
 8002568:	f01c fe40 	bl	801f1ec <siprintf>
		ssd1362_drawString(0, 10, (int8_t *)text, 0xF, 16);
 800256c:	4a35      	ldr	r2, [pc, #212]	; (8002644 <main+0x554>)
 800256e:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 8002572:	441a      	add	r2, r3
 8002574:	2310      	movs	r3, #16
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	230f      	movs	r3, #15
 800257a:	210a      	movs	r1, #10
 800257c:	2000      	movs	r0, #0
 800257e:	f01b fc7a 	bl	801de76 <ssd1362_drawString>
		sprintf(text,"Gyro  : %d  %d  %d", gyro_x, gyro_y, gyro_z);
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <main+0x538>)
 8002584:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 8002588:	4413      	add	r3, r2
 800258a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258e:	461a      	mov	r2, r3
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <main+0x550>)
 8002592:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 8002596:	440b      	add	r3, r1
 8002598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259c:	4619      	mov	r1, r3
 800259e:	4b27      	ldr	r3, [pc, #156]	; (800263c <main+0x54c>)
 80025a0:	f507 501f 	add.w	r0, r7, #10176	; 0x27c0
 80025a4:	4403      	add	r3, r0
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	4826      	ldr	r0, [pc, #152]	; (8002644 <main+0x554>)
 80025ac:	f507 541f 	add.w	r4, r7, #10176	; 0x27c0
 80025b0:	4420      	add	r0, r4
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	4925      	ldr	r1, [pc, #148]	; (800264c <main+0x55c>)
 80025b8:	f01c fe18 	bl	801f1ec <siprintf>
		ssd1362_drawString(0, 30, (int8_t *)text, 0xF, 16);
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <main+0x554>)
 80025be:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80025c2:	441a      	add	r2, r3
 80025c4:	2310      	movs	r3, #16
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	230f      	movs	r3, #15
 80025ca:	211e      	movs	r1, #30
 80025cc:	2000      	movs	r0, #0
 80025ce:	f01b fc52 	bl	801de76 <ssd1362_drawString>
		sprintf(text,"temp. : %d", tmp);
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <main+0x548>)
 80025d4:	f507 521f 	add.w	r2, r7, #10176	; 0x27c0
 80025d8:	4413      	add	r3, r2
 80025da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025de:	461a      	mov	r2, r3
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <main+0x554>)
 80025e2:	f507 511f 	add.w	r1, r7, #10176	; 0x27c0
 80025e6:	440b      	add	r3, r1
 80025e8:	4919      	ldr	r1, [pc, #100]	; (8002650 <main+0x560>)
 80025ea:	4618      	mov	r0, r3
 80025ec:	f01c fdfe 	bl	801f1ec <siprintf>
		ssd1362_drawString(0, 50, (int8_t *)text, 0xF, 16);
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <main+0x554>)
 80025f2:	f507 531f 	add.w	r3, r7, #10176	; 0x27c0
 80025f6:	441a      	add	r2, r3
 80025f8:	2310      	movs	r3, #16
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	230f      	movs	r3, #15
 80025fe:	2132      	movs	r1, #50	; 0x32
 8002600:	2000      	movs	r0, #0
 8002602:	f01b fc38 	bl	801de76 <ssd1362_drawString>
		ssd1362_writeFullBuffer();
 8002606:	f01b fd05 	bl	801e014 <ssd1362_writeFullBuffer>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800260a:	2140      	movs	r1, #64	; 0x40
 800260c:	4811      	ldr	r0, [pc, #68]	; (8002654 <main+0x564>)
 800260e:	f006 fb44 	bl	8008c9a <HAL_GPIO_TogglePin>
	{
 8002612:	e75c      	b.n	80024ce <main+0x3de>
 8002614:	2400557c 	.word	0x2400557c
 8002618:	08023efc 	.word	0x08023efc
 800261c:	ffffd8ac 	.word	0xffffd8ac
 8002620:	0101a8c0 	.word	0x0101a8c0
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	ffffd8b8 	.word	0xffffd8b8
 800262c:	ffffd8ba 	.word	0xffffd8ba
 8002630:	ffffd8bc 	.word	0xffffd8bc
 8002634:	ffffd8be 	.word	0xffffd8be
 8002638:	ffffd8b2 	.word	0xffffd8b2
 800263c:	ffffd8b4 	.word	0xffffd8b4
 8002640:	ffffd8b6 	.word	0xffffd8b6
 8002644:	ffffd844 	.word	0xffffd844
 8002648:	08023f14 	.word	0x08023f14
 800264c:	08023f28 	.word	0x08023f28
 8002650:	08023f3c 	.word	0x08023f3c
 8002654:	58021c00 	.word	0x58021c00

08002658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b09c      	sub	sp, #112	; 0x70
 800265c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002662:	224c      	movs	r2, #76	; 0x4c
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f01b fde4 	bl	801e234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2220      	movs	r2, #32
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f01b fdde 	bl	801e234 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002678:	2004      	movs	r0, #4
 800267a:	f006 fb7b 	bl	8008d74 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <SystemClock_Config+0x108>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	4a36      	ldr	r2, [pc, #216]	; (8002760 <SystemClock_Config+0x108>)
 8002688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800268c:	6193      	str	r3, [r2, #24]
 800268e:	4b34      	ldr	r3, [pc, #208]	; (8002760 <SystemClock_Config+0x108>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	4b32      	ldr	r3, [pc, #200]	; (8002764 <SystemClock_Config+0x10c>)
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	4a31      	ldr	r2, [pc, #196]	; (8002764 <SystemClock_Config+0x10c>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <SystemClock_Config+0x10c>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80026b0:	bf00      	nop
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <SystemClock_Config+0x108>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026be:	d1f8      	bne.n	80026b2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <SystemClock_Config+0x110>)
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f023 0303 	bic.w	r3, r3, #3
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <SystemClock_Config+0x110>)
 80026ca:	f043 0302 	orr.w	r3, r3, #2
 80026ce:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80026d0:	2323      	movs	r3, #35	; 0x23
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80026da:	2301      	movs	r3, #1
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026de:	2340      	movs	r3, #64	; 0x40
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026e2:	2301      	movs	r3, #1
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e6:	2302      	movs	r3, #2
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ea:	2302      	movs	r3, #2
 80026ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80026ee:	2305      	movs	r3, #5
 80026f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80026f2:	23c0      	movs	r3, #192	; 0xc0
 80026f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80026f6:	2302      	movs	r3, #2
 80026f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80026fa:	2308      	movs	r3, #8
 80026fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026fe:	2302      	movs	r3, #2
 8002700:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002702:	2308      	movs	r3, #8
 8002704:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002706:	2300      	movs	r3, #0
 8002708:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800270e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002712:	4618      	mov	r0, r3
 8002714:	f006 fb88 	bl	8008e28 <HAL_RCC_OscConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800271e:	f000 f881 	bl	8002824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002722:	233f      	movs	r3, #63	; 0x3f
 8002724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002726:	2303      	movs	r3, #3
 8002728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800272e:	2308      	movs	r3, #8
 8002730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002732:	2340      	movs	r3, #64	; 0x40
 8002734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002736:	2340      	movs	r3, #64	; 0x40
 8002738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800273a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002740:	2340      	movs	r3, #64	; 0x40
 8002742:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2104      	movs	r1, #4
 8002748:	4618      	mov	r0, r3
 800274a:	f006 ff7d 	bl	8009648 <HAL_RCC_ClockConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8002754:	f000 f866 	bl	8002824 <Error_Handler>
  }
}
 8002758:	bf00      	nop
 800275a:	3770      	adds	r7, #112	; 0x70
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	58024800 	.word	0x58024800
 8002764:	58000400 	.word	0x58000400
 8002768:	58024400 	.word	0x58024400

0800276c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0b0      	sub	sp, #192	; 0xc0
 8002770:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	22bc      	movs	r2, #188	; 0xbc
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f01b fd5b 	bl	801e234 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800277e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002782:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002784:	2300      	movs	r3, #0
 8002786:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4618      	mov	r0, r3
 800278c:	f007 fae8 	bl	8009d60 <HAL_RCCEx_PeriphCLKConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8002796:	f000 f845 	bl	8002824 <Error_Handler>
  }
}
 800279a:	bf00      	nop
 800279c:	37c0      	adds	r7, #192	; 0xc0
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80027aa:	463b      	mov	r3, r7
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80027b6:	f001 ffd1 	bl	800475c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027ba:	2301      	movs	r3, #1
 80027bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80027be:	2300      	movs	r3, #0
 80027c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <MPU_Config+0x78>)
 80027c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80027c6:	2307      	movs	r3, #7
 80027c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80027d2:	2303      	movs	r3, #3
 80027d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027e6:	463b      	mov	r3, r7
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 ffef 	bl	80047cc <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80027ee:	2301      	movs	r3, #1
 80027f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <MPU_Config+0x7c>)
 80027f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80027f6:	230d      	movs	r3, #13
 80027f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80027fa:	2301      	movs	r3, #1
 80027fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80027fe:	2301      	movs	r3, #1
 8002800:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002806:	463b      	mov	r3, r7
 8002808:	4618      	mov	r0, r3
 800280a:	f001 ffdf 	bl	80047cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800280e:	2004      	movs	r0, #4
 8002810:	f001 ffbc 	bl	800478c <HAL_MPU_Enable>

}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	30040000 	.word	0x30040000
 8002820:	30044000 	.word	0x30044000

08002824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
}
 800282a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800282c:	e7fe      	b.n	800282c <Error_Handler+0x8>
	...

08002830 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <MX_RNG_Init+0x24>)
 8002836:	4a08      	ldr	r2, [pc, #32]	; (8002858 <MX_RNG_Init+0x28>)
 8002838:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_RNG_Init+0x24>)
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002840:	4804      	ldr	r0, [pc, #16]	; (8002854 <MX_RNG_Init+0x24>)
 8002842:	f009 fc13 	bl	800c06c <HAL_RNG_Init>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800284c:	f7ff ffea 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2400557c 	.word	0x2400557c
 8002858:	48021800 	.word	0x48021800

0800285c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0b2      	sub	sp, #200	; 0xc8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	22bc      	movs	r2, #188	; 0xbc
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f01b fce1 	bl	801e234 <memset>
  if(rngHandle->Instance==RNG)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <HAL_RNG_MspInit+0x68>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d11e      	bne.n	80028ba <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800287c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002880:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	4618      	mov	r0, r3
 800288e:	f007 fa67 	bl	8009d60 <HAL_RCCEx_PeriphCLKConfig>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002898:	f7ff ffc4 	bl	8002824 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RNG_MspInit+0x6c>)
 800289e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RNG_MspInit+0x6c>)
 80028a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <HAL_RNG_MspInit+0x6c>)
 80028ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80028ba:	bf00      	nop
 80028bc:	37c8      	adds	r7, #200	; 0xc8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	48021800 	.word	0x48021800
 80028c8:	58024400 	.word	0x58024400

080028cc <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <MX_SAI1_Init+0x64>)
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <MX_SAI1_Init+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <MX_SAI1_Init+0x64>)
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <MX_SAI1_Init+0x64>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <MX_SAI1_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_SAI1_Init+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <MX_SAI1_Init+0x64>)
 80028f0:	2204      	movs	r2, #4
 80028f2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_SAI1_Init+0x64>)
 80028f6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80028fa:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_SAI1_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_SAI1_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_SAI1_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_SAI1_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002914:	2302      	movs	r3, #2
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_SAI1_Init+0x64>)
 800291c:	f009 fc50 	bl	800c1c0 <HAL_SAI_InitProtocol>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_SAI1_Init+0x5e>
  {
    Error_Handler();
 8002926:	f7ff ff7d 	bl	8002824 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	24005608 	.word	0x24005608
 8002934:	40015804 	.word	0x40015804

08002938 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b0b8      	sub	sp, #224	; 0xe0
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	22bc      	movs	r2, #188	; 0xbc
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f01b fc73 	bl	801e234 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a56      	ldr	r2, [pc, #344]	; (8002aac <HAL_SAI_MspInit+0x174>)
 8002954:	4293      	cmp	r3, r2
 8002956:	f040 80a4 	bne.w	8002aa2 <HAL_SAI_MspInit+0x16a>
    {
    /* SAI1 clock enable */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800295a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 12;
 8002960:	230c      	movs	r3, #12
 8002962:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 389;
 8002964:	f240 1385 	movw	r3, #389	; 0x185
 8002968:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 11;
 800296a:	230b      	movs	r3, #11
 800296c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 11;
 800296e:	230b      	movs	r3, #11
 8002970:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 11;
 8002972:	230b      	movs	r3, #11
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002976:	2340      	movs	r3, #64	; 0x40
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800297a:	2300      	movs	r3, #0
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002982:	2301      	movs	r3, #1
 8002984:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4618      	mov	r0, r3
 800298c:	f007 f9e8 	bl	8009d60 <HAL_RCCEx_PeriphCLKConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_SAI_MspInit+0x62>
    {
      Error_Handler();
 8002996:	f7ff ff45 	bl	8002824 <Error_Handler>
    }

    if (SAI1_client == 0)
 800299a:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <HAL_SAI_MspInit+0x178>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10e      	bne.n	80029c0 <HAL_SAI_MspInit+0x88>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80029a2:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_SAI_MspInit+0x17c>)
 80029a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029a8:	4a42      	ldr	r2, [pc, #264]	; (8002ab4 <HAL_SAI_MspInit+0x17c>)
 80029aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029b2:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <HAL_SAI_MspInit+0x17c>)
 80029b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <HAL_SAI_MspInit+0x178>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	4a3a      	ldr	r2, [pc, #232]	; (8002ab0 <HAL_SAI_MspInit+0x178>)
 80029c8:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_5;
 80029ca:	2334      	movs	r3, #52	; 0x34
 80029cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80029e2:	2306      	movs	r3, #6
 80029e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ec:	4619      	mov	r1, r3
 80029ee:	4832      	ldr	r0, [pc, #200]	; (8002ab8 <HAL_SAI_MspInit+0x180>)
 80029f0:	f005 ff8a 	bl	8008908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029f4:	2340      	movs	r3, #64	; 0x40
 80029f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a06:	2303      	movs	r3, #3
 8002a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002a0c:	2306      	movs	r3, #6
 8002a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a16:	4619      	mov	r1, r3
 8002a18:	4828      	ldr	r0, [pc, #160]	; (8002abc <HAL_SAI_MspInit+0x184>)
 8002a1a:	f005 ff75 	bl	8008908 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream1;
 8002a1e:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a20:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <HAL_SAI_MspInit+0x18c>)
 8002a22:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a26:	2257      	movs	r2, #87	; 0x57
 8002a28:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a2a:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a2c:	2240      	movs	r2, #64	; 0x40
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a44:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4c:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a54:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a5c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a60:	2204      	movs	r2, #4
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a66:	2203      	movs	r2, #3
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002a76:	4812      	ldr	r0, [pc, #72]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a78:	f001 ffea 	bl	8004a50 <HAL_DMA_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_SAI_MspInit+0x14e>
    {
      Error_Handler();
 8002a82:	f7ff fecf 	bl	8002824 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0a      	ldr	r2, [pc, #40]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002a9c:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_SAI_MspInit+0x188>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8002aa2:	bf00      	nop
 8002aa4:	37e0      	adds	r7, #224	; 0xe0
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40015804 	.word	0x40015804
 8002ab0:	24003644 	.word	0x24003644
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	58021000 	.word	0x58021000
 8002abc:	58020c00 	.word	0x58020c00
 8002ac0:	24005590 	.word	0x24005590
 8002ac4:	40020028 	.word	0x40020028

08002ac8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002ace:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <MX_SPI2_Init+0xa8>)
 8002ad0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ad2:	4b26      	ldr	r3, [pc, #152]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002ad4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ad8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ae6:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aec:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002af4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002af8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002afc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002b00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b02:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b08:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0e:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002b14:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_SPI2_Init+0xa4>)
 8002b58:	f00a f8d8 	bl	800cd0c <HAL_SPI_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8002b62:	f7ff fe5f 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	240056a0 	.word	0x240056a0
 8002b70:	40003800 	.word	0x40003800

08002b74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b0ba      	sub	sp, #232	; 0xe8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b8c:	f107 0318 	add.w	r3, r7, #24
 8002b90:	22bc      	movs	r2, #188	; 0xbc
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f01b fb4d 	bl	801e234 <memset>
  if(spiHandle->Instance==SPI2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a37      	ldr	r2, [pc, #220]	; (8002c7c <HAL_SPI_MspInit+0x108>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d166      	bne.n	8002c72 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bae:	f107 0318 	add.w	r3, r7, #24
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f007 f8d4 	bl	8009d60 <HAL_RCCEx_PeriphCLKConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002bbe:	f7ff fe31 	bl	8002824 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002be8:	f043 0308 	orr.w	r3, r3, #8
 8002bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf0:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_SPI_MspInit+0x10c>)
 8002c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c34:	2305      	movs	r3, #5
 8002c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c3a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4810      	ldr	r0, [pc, #64]	; (8002c84 <HAL_SPI_MspInit+0x110>)
 8002c42:	f005 fe61 	bl	8008908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8002c46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c60:	2305      	movs	r3, #5
 8002c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4806      	ldr	r0, [pc, #24]	; (8002c88 <HAL_SPI_MspInit+0x114>)
 8002c6e:	f005 fe4b 	bl	8008908 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002c72:	bf00      	nop
 8002c74:	37e8      	adds	r7, #232	; 0xe8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40003800 	.word	0x40003800
 8002c80:	58024400 	.word	0x58024400
 8002c84:	58020c00 	.word	0x58020c00
 8002c88:	58020400 	.word	0x58020400

08002c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_MspInit+0x34>)
 8002c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c98:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_MspInit+0x34>)
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <HAL_MspInit+0x34>)
 8002ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002cb0:	2005      	movs	r0, #5
 8002cb2:	f001 fd13 	bl	80046dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	58024400 	.word	0x58024400

08002cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <NMI_Handler+0x4>

08002cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cce:	e7fe      	b.n	8002cce <HardFault_Handler+0x4>

08002cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd4:	e7fe      	b.n	8002cd4 <MemManage_Handler+0x4>

08002cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cda:	e7fe      	b.n	8002cda <BusFault_Handler+0x4>

08002cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <UsageFault_Handler+0x4>

08002ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d10:	f001 f8b4 	bl	8003e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <DMA1_Stream1_IRQHandler+0x10>)
 8002d1e:	f002 fc5d 	bl	80055dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	24005590 	.word	0x24005590

08002d2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d30:	4803      	ldr	r0, [pc, #12]	; (8002d40 <ADC_IRQHandler+0x14>)
 8002d32:	f001 f983 	bl	800403c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002d36:	4803      	ldr	r0, [pc, #12]	; (8002d44 <ADC_IRQHandler+0x18>)
 8002d38:	f001 f980 	bl	800403c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	24005354 	.word	0x24005354
 8002d44:	24005278 	.word	0x24005278

08002d48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <TIM1_UP_IRQHandler+0x10>)
 8002d4e:	f00b fc5b 	bl	800e608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	24005858 	.word	0x24005858

08002d5c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002d62:	f00b fc51 	bl	800e608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	24005858 	.word	0x24005858

08002d70 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <TIM1_CC_IRQHandler+0x10>)
 8002d76:	f00b fc47 	bl	800e608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	24005858 	.word	0x24005858

08002d84 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002d8a:	f00b fc3d 	bl	800e608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	24005728 	.word	0x24005728

08002d98 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002d9e:	f00b fc33 	bl	800e608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	24005728 	.word	0x24005728

08002dac <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <TIM8_CC_IRQHandler+0x10>)
 8002db2:	f00b fc29 	bl	800e608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	24005728 	.word	0x24005728

08002dc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <DMA2_Stream0_IRQHandler+0x10>)
 8002dc6:	f002 fc09 	bl	80055dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2400541c 	.word	0x2400541c

08002dd4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <DMA2_Stream1_IRQHandler+0x10>)
 8002dda:	f002 fbff 	bl	80055dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	24005494 	.word	0x24005494

08002de8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <DMA2_Stream2_IRQHandler+0x10>)
 8002dee:	f002 fbf5 	bl	80055dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	240052dc 	.word	0x240052dc

08002dfc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <ETH_IRQHandler+0x10>)
 8002e02:	f004 fb91 	bl	8007528 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	24005a74 	.word	0x24005a74

08002e10 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <ADC3_IRQHandler+0x10>)
 8002e16:	f001 f911 	bl	800403c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	240053b8 	.word	0x240053b8

08002e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	return 1;
 8002e28:	2301      	movs	r3, #1
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_kill>:

int _kill(int pid, int sig)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <_kill+0x20>)
 8002e40:	2216      	movs	r2, #22
 8002e42:	601a      	str	r2, [r3, #0]
	return -1;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	2400b240 	.word	0x2400b240

08002e58 <_exit>:

void _exit (int status)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ffe5 	bl	8002e34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e6a:	e7fe      	b.n	8002e6a <_exit+0x12>

08002e6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e00a      	b.n	8002e94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e7e:	f3af 8000 	nop.w
 8002e82:	4601      	mov	r1, r0
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	60ba      	str	r2, [r7, #8]
 8002e8a:	b2ca      	uxtb	r2, r1
 8002e8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	dbf0      	blt.n	8002e7e <_read+0x12>
	}

return len;
 8002e9c:	687b      	ldr	r3, [r7, #4]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e009      	b.n	8002ecc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	60ba      	str	r2, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	dbf1      	blt.n	8002eb8 <_write+0x12>
	}
	return len;
 8002ed4:	687b      	ldr	r3, [r7, #4]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_close>:

int _close(int file)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f06:	605a      	str	r2, [r3, #4]
	return 0;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <_isatty>:

int _isatty(int file)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
	return 0;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <_sbrk+0x5c>)
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <_sbrk+0x60>)
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <_sbrk+0x64>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d102      	bne.n	8002f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <_sbrk+0x64>)
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <_sbrk+0x68>)
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d205      	bcs.n	8002f84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <_sbrk+0x6c>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f82:	e009      	b.n	8002f98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	4a06      	ldr	r2, [pc, #24]	; (8002fac <_sbrk+0x64>)
 8002f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	24080000 	.word	0x24080000
 8002fa8:	00000400 	.word	0x00000400
 8002fac:	24003648 	.word	0x24003648
 8002fb0:	2400b250 	.word	0x2400b250
 8002fb4:	2400b240 	.word	0x2400b240

08002fb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b09a      	sub	sp, #104	; 0x68
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	615a      	str	r2, [r3, #20]
 8002fdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	222c      	movs	r2, #44	; 0x2c
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f01b f925 	bl	801e234 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

	uint32_t prescalerValue, counterPeriod, pulseValueCH1, pulseValueCH2;

	prescalerValue = (uint32_t)(((SystemCoreClock / 96) / (CIS_CLK_FREQ)) - 1);
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <MX_TIM1_Init+0x150>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0adb      	lsrs	r3, r3, #11
 8002ff0:	4a46      	ldr	r2, [pc, #280]	; (800310c <MX_TIM1_Init+0x154>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	09db      	lsrs	r3, r3, #7
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	667b      	str	r3, [r7, #100]	; 0x64
	counterPeriod = 48 - 1;
 8002ffc:	232f      	movs	r3, #47	; 0x2f
 8002ffe:	663b      	str	r3, [r7, #96]	; 0x60
	pulseValueCH2 = 24 - 1;
 8003000:	2317      	movs	r3, #23
 8003002:	65fb      	str	r3, [r7, #92]	; 0x5c
	pulseValueCH1 = 24 - 1;
 8003004:	2317      	movs	r3, #23
 8003006:	65bb      	str	r3, [r7, #88]	; 0x58

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003008:	4b41      	ldr	r3, [pc, #260]	; (8003110 <MX_TIM1_Init+0x158>)
 800300a:	4a42      	ldr	r2, [pc, #264]	; (8003114 <MX_TIM1_Init+0x15c>)
 800300c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescalerValue;
 800300e:	4a40      	ldr	r2, [pc, #256]	; (8003110 <MX_TIM1_Init+0x158>)
 8003010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003012:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003014:	4b3e      	ldr	r3, [pc, #248]	; (8003110 <MX_TIM1_Init+0x158>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = counterPeriod;
 800301a:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <MX_TIM1_Init+0x158>)
 800301c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800301e:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003020:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <MX_TIM1_Init+0x158>)
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003026:	4b3a      	ldr	r3, [pc, #232]	; (8003110 <MX_TIM1_Init+0x158>)
 8003028:	2200      	movs	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800302c:	4b38      	ldr	r3, [pc, #224]	; (8003110 <MX_TIM1_Init+0x158>)
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003032:	4837      	ldr	r0, [pc, #220]	; (8003110 <MX_TIM1_Init+0x158>)
 8003034:	f00b f988 	bl	800e348 <HAL_TIM_PWM_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800303e:	f7ff fbf1 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003042:	2320      	movs	r3, #32
 8003044:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800304e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003052:	4619      	mov	r1, r3
 8003054:	482e      	ldr	r0, [pc, #184]	; (8003110 <MX_TIM1_Init+0x158>)
 8003056:	f00c fae3 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003060:	f7ff fbe0 	bl	8002824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003064:	2370      	movs	r3, #112	; 0x70
 8003066:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = pulseValueCH1;
 8003068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800306c:	2300      	movs	r3, #0
 800306e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003070:	2300      	movs	r3, #0
 8003072:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003074:	2304      	movs	r3, #4
 8003076:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003078:	2300      	movs	r3, #0
 800307a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003084:	2200      	movs	r2, #0
 8003086:	4619      	mov	r1, r3
 8003088:	4821      	ldr	r0, [pc, #132]	; (8003110 <MX_TIM1_Init+0x158>)
 800308a:	f00b fc53 	bl	800e934 <HAL_TIM_PWM_ConfigChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8003094:	f7ff fbc6 	bl	8002824 <Error_Handler>
  }
  sConfigOC.Pulse = pulseValueCH2;
 8003098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800309c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030a0:	2204      	movs	r2, #4
 80030a2:	4619      	mov	r1, r3
 80030a4:	481a      	ldr	r0, [pc, #104]	; (8003110 <MX_TIM1_Init+0x158>)
 80030a6:	f00b fc45 	bl	800e934 <HAL_TIM_PWM_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80030b0:	f7ff fbb8 	bl	8002824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	4619      	mov	r1, r3
 80030e8:	4809      	ldr	r0, [pc, #36]	; (8003110 <MX_TIM1_Init+0x158>)
 80030ea:	f00c fb21 	bl	800f730 <HAL_TIMEx_ConfigBreakDeadTime>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80030f4:	f7ff fb96 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <MX_TIM1_Init+0x158>)
 80030fa:	f000 faef 	bl	80036dc <HAL_TIM_MspPostInit>

}
 80030fe:	bf00      	nop
 8003100:	3768      	adds	r7, #104	; 0x68
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	24000000 	.word	0x24000000
 800310c:	0023ca99 	.word	0x0023ca99
 8003110:	24005858 	.word	0x24005858
 8003114:	40010000 	.word	0x40010000

08003118 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b092      	sub	sp, #72	; 0x48
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800311e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800312e:	f107 0320 	add.w	r3, r7, #32
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
 8003148:	615a      	str	r2, [r3, #20]
 800314a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

	uint32_t prescalerValue, counterPeriod;

	prescalerValue = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
	counterPeriod = CIS_END_CAPTURE - 1;
 8003150:	f240 2379 	movw	r3, #633	; 0x279
 8003154:	643b      	str	r3, [r7, #64]	; 0x40
#else
	counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003156:	4b2d      	ldr	r3, [pc, #180]	; (800320c <MX_TIM3_Init+0xf4>)
 8003158:	4a2d      	ldr	r2, [pc, #180]	; (8003210 <MX_TIM3_Init+0xf8>)
 800315a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = prescalerValue;
 800315c:	4a2b      	ldr	r2, [pc, #172]	; (800320c <MX_TIM3_Init+0xf4>)
 800315e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003160:	6053      	str	r3, [r2, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003162:	4b2a      	ldr	r3, [pc, #168]	; (800320c <MX_TIM3_Init+0xf4>)
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = counterPeriod;
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <MX_TIM3_Init+0xf4>)
 800316a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316c:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316e:	4b27      	ldr	r3, [pc, #156]	; (800320c <MX_TIM3_Init+0xf4>)
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <MX_TIM3_Init+0xf4>)
 8003176:	2200      	movs	r2, #0
 8003178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800317a:	4824      	ldr	r0, [pc, #144]	; (800320c <MX_TIM3_Init+0xf4>)
 800317c:	f00a ff24 	bl	800dfc8 <HAL_TIM_Base_Init>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003186:	f7ff fb4d 	bl	8002824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800318a:	4820      	ldr	r0, [pc, #128]	; (800320c <MX_TIM3_Init+0xf4>)
 800318c:	f00b f8dc 	bl	800e348 <HAL_TIM_PWM_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003196:	f7ff fb45 	bl	8002824 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800319a:	2305      	movs	r3, #5
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800319e:	2300      	movs	r3, #0
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	4619      	mov	r1, r3
 80031a8:	4818      	ldr	r0, [pc, #96]	; (800320c <MX_TIM3_Init+0xf4>)
 80031aa:	f00b fcd3 	bl	800eb54 <HAL_TIM_SlaveConfigSynchro>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80031b4:	f7ff fb36 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031c0:	f107 0320 	add.w	r3, r7, #32
 80031c4:	4619      	mov	r1, r3
 80031c6:	4811      	ldr	r0, [pc, #68]	; (800320c <MX_TIM3_Init+0xf4>)
 80031c8:	f00c fa2a 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 80031d2:	f7ff fb27 	bl	8002824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80031d6:	2370      	movs	r3, #112	; 0x70
 80031d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = CIS_LED_BLUE_OFF;
 80031da:	230a      	movs	r3, #10
 80031dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80031e2:	2304      	movs	r3, #4
 80031e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	2200      	movs	r2, #0
 80031ea:	4619      	mov	r1, r3
 80031ec:	4807      	ldr	r0, [pc, #28]	; (800320c <MX_TIM3_Init+0xf4>)
 80031ee:	f00b fba1 	bl	800e934 <HAL_TIM_PWM_ConfigChannel>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80031f8:	f7ff fb14 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031fc:	4803      	ldr	r0, [pc, #12]	; (800320c <MX_TIM3_Init+0xf4>)
 80031fe:	f000 fa6d 	bl	80036dc <HAL_TIM_MspPostInit>

}
 8003202:	bf00      	nop
 8003204:	3748      	adds	r7, #72	; 0x48
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	2400580c 	.word	0x2400580c
 8003210:	40000400 	.word	0x40000400

08003214 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b092      	sub	sp, #72	; 0x48
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800321a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	609a      	str	r2, [r3, #8]
 8003226:	60da      	str	r2, [r3, #12]
 8003228:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322a:	f107 0320 	add.w	r3, r7, #32
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
 8003244:	615a      	str	r2, [r3, #20]
 8003246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

	uint32_t prescalerValue, counterPeriod;

	prescalerValue = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
	counterPeriod = CIS_END_CAPTURE - 1;
 800324c:	f240 2379 	movw	r3, #633	; 0x279
 8003250:	643b      	str	r3, [r7, #64]	; 0x40
#else
	counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <MX_TIM4_Init+0xf4>)
 8003254:	4a2d      	ldr	r2, [pc, #180]	; (800330c <MX_TIM4_Init+0xf8>)
 8003256:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = prescalerValue;
 8003258:	4a2b      	ldr	r2, [pc, #172]	; (8003308 <MX_TIM4_Init+0xf4>)
 800325a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325c:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <MX_TIM4_Init+0xf4>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = counterPeriod;
 8003264:	4a28      	ldr	r2, [pc, #160]	; (8003308 <MX_TIM4_Init+0xf4>)
 8003266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003268:	60d3      	str	r3, [r2, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <MX_TIM4_Init+0xf4>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <MX_TIM4_Init+0xf4>)
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003276:	4824      	ldr	r0, [pc, #144]	; (8003308 <MX_TIM4_Init+0xf4>)
 8003278:	f00a fea6 	bl	800dfc8 <HAL_TIM_Base_Init>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8003282:	f7ff facf 	bl	8002824 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003286:	4820      	ldr	r0, [pc, #128]	; (8003308 <MX_TIM4_Init+0xf4>)
 8003288:	f00a fef5 	bl	800e076 <HAL_TIM_OC_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003292:	f7ff fac7 	bl	8002824 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8003296:	2305      	movs	r3, #5
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800329a:	2300      	movs	r3, #0
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800329e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032a2:	4619      	mov	r1, r3
 80032a4:	4818      	ldr	r0, [pc, #96]	; (8003308 <MX_TIM4_Init+0xf4>)
 80032a6:	f00b fc55 	bl	800eb54 <HAL_TIM_SlaveConfigSynchro>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80032b0:	f7ff fab8 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b4:	2300      	movs	r3, #0
 80032b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032bc:	f107 0320 	add.w	r3, r7, #32
 80032c0:	4619      	mov	r1, r3
 80032c2:	4811      	ldr	r0, [pc, #68]	; (8003308 <MX_TIM4_Init+0xf4>)
 80032c4:	f00c f9ac 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 80032ce:	f7ff faa9 	bl	8002824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80032d2:	2330      	movs	r3, #48	; 0x30
 80032d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	2204      	movs	r2, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4807      	ldr	r0, [pc, #28]	; (8003308 <MX_TIM4_Init+0xf4>)
 80032ea:	f00b faad 	bl	800e848 <HAL_TIM_OC_ConfigChannel>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 80032f4:	f7ff fa96 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80032f8:	4803      	ldr	r0, [pc, #12]	; (8003308 <MX_TIM4_Init+0xf4>)
 80032fa:	f000 f9ef 	bl	80036dc <HAL_TIM_MspPostInit>

}
 80032fe:	bf00      	nop
 8003300:	3748      	adds	r7, #72	; 0x48
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	24005774 	.word	0x24005774
 800330c:	40000800 	.word	0x40000800

08003310 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b092      	sub	sp, #72	; 0x48
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003326:	f107 0320 	add.w	r3, r7, #32
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
 8003340:	615a      	str	r2, [r3, #20]
 8003342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

	uint32_t prescalerValue, counterPeriod;

	prescalerValue = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	647b      	str	r3, [r7, #68]	; 0x44

#ifdef CIS_BW
	counterPeriod = CIS_END_CAPTURE - 1;
 8003348:	f240 2379 	movw	r3, #633	; 0x279
 800334c:	643b      	str	r3, [r7, #64]	; 0x40
#else
	counterPeriod = (CIS_END_CAPTURE * 3) - 1;
#endif

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <MX_TIM5_Init+0xf4>)
 8003350:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <MX_TIM5_Init+0xf8>)
 8003352:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = prescalerValue;
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <MX_TIM5_Init+0xf4>)
 8003356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003358:	6053      	str	r3, [r2, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <MX_TIM5_Init+0xf4>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = counterPeriod;
 8003360:	4a28      	ldr	r2, [pc, #160]	; (8003404 <MX_TIM5_Init+0xf4>)
 8003362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003364:	60d3      	str	r3, [r2, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003366:	4b27      	ldr	r3, [pc, #156]	; (8003404 <MX_TIM5_Init+0xf4>)
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <MX_TIM5_Init+0xf4>)
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003372:	4824      	ldr	r0, [pc, #144]	; (8003404 <MX_TIM5_Init+0xf4>)
 8003374:	f00a fe28 	bl	800dfc8 <HAL_TIM_Base_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800337e:	f7ff fa51 	bl	8002824 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8003382:	4820      	ldr	r0, [pc, #128]	; (8003404 <MX_TIM5_Init+0xf4>)
 8003384:	f00a fe77 	bl	800e076 <HAL_TIM_OC_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800338e:	f7ff fa49 	bl	8002824 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8003392:	2305      	movs	r3, #5
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003396:	2300      	movs	r3, #0
 8003398:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 800339a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800339e:	4619      	mov	r1, r3
 80033a0:	4818      	ldr	r0, [pc, #96]	; (8003404 <MX_TIM5_Init+0xf4>)
 80033a2:	f00b fbd7 	bl	800eb54 <HAL_TIM_SlaveConfigSynchro>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80033ac:	f7ff fa3a 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80033b8:	f107 0320 	add.w	r3, r7, #32
 80033bc:	4619      	mov	r1, r3
 80033be:	4811      	ldr	r0, [pc, #68]	; (8003404 <MX_TIM5_Init+0xf4>)
 80033c0:	f00c f92e 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 80033ca:	f7ff fa2b 	bl	8002824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_RETRIGERRABLE_OPM1;
 80033ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	2208      	movs	r2, #8
 80033e4:	4619      	mov	r1, r3
 80033e6:	4807      	ldr	r0, [pc, #28]	; (8003404 <MX_TIM5_Init+0xf4>)
 80033e8:	f00b fa2e 	bl	800e848 <HAL_TIM_OC_ConfigChannel>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM5_Init+0xe6>
  {
    Error_Handler();
 80033f2:	f7ff fa17 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80033f6:	4803      	ldr	r0, [pc, #12]	; (8003404 <MX_TIM5_Init+0xf4>)
 80033f8:	f000 f970 	bl	80036dc <HAL_TIM_MspPostInit>

}
 80033fc:	bf00      	nop
 80033fe:	3748      	adds	r7, #72	; 0x48
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	240057c0 	.word	0x240057c0
 8003408:	40000c00 	.word	0x40000c00

0800340c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b09c      	sub	sp, #112	; 0x70
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003412:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	60da      	str	r2, [r3, #12]
 8003420:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003422:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800342e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	615a      	str	r2, [r3, #20]
 8003440:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003442:	463b      	mov	r3, r7
 8003444:	222c      	movs	r2, #44	; 0x2c
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f01a fef3 	bl	801e234 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

	uint32_t prescalerValue, counterPeriod;

	prescalerValue = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	66fb      	str	r3, [r7, #108]	; 0x6c
	counterPeriod = CIS_END_CAPTURE - 1;
 8003452:	f240 2379 	movw	r3, #633	; 0x279
 8003456:	66bb      	str	r3, [r7, #104]	; 0x68

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003458:	4b43      	ldr	r3, [pc, #268]	; (8003568 <MX_TIM8_Init+0x15c>)
 800345a:	4a44      	ldr	r2, [pc, #272]	; (800356c <MX_TIM8_Init+0x160>)
 800345c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = prescalerValue;
 800345e:	4a42      	ldr	r2, [pc, #264]	; (8003568 <MX_TIM8_Init+0x15c>)
 8003460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003462:	6053      	str	r3, [r2, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003464:	4b40      	ldr	r3, [pc, #256]	; (8003568 <MX_TIM8_Init+0x15c>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = counterPeriod;
 800346a:	4a3f      	ldr	r2, [pc, #252]	; (8003568 <MX_TIM8_Init+0x15c>)
 800346c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800346e:	60d3      	str	r3, [r2, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003470:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <MX_TIM8_Init+0x15c>)
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003476:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <MX_TIM8_Init+0x15c>)
 8003478:	2200      	movs	r2, #0
 800347a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347c:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <MX_TIM8_Init+0x15c>)
 800347e:	2200      	movs	r2, #0
 8003480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003482:	4839      	ldr	r0, [pc, #228]	; (8003568 <MX_TIM8_Init+0x15c>)
 8003484:	f00a fda0 	bl	800dfc8 <HAL_TIM_Base_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 800348e:	f7ff f9c9 	bl	8002824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003492:	4835      	ldr	r0, [pc, #212]	; (8003568 <MX_TIM8_Init+0x15c>)
 8003494:	f00a ff58 	bl	800e348 <HAL_TIM_PWM_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800349e:	f7ff f9c1 	bl	8002824 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80034a2:	2305      	movs	r3, #5
 80034a4:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80034aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034ae:	4619      	mov	r1, r3
 80034b0:	482d      	ldr	r0, [pc, #180]	; (8003568 <MX_TIM8_Init+0x15c>)
 80034b2:	f00b fb4f 	bl	800eb54 <HAL_TIM_SlaveConfigSynchro>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM8_Init+0xb4>
  {
    Error_Handler();
 80034bc:	f7ff f9b2 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c0:	2300      	movs	r3, #0
 80034c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80034c4:	2300      	movs	r3, #0
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80034cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034d0:	4619      	mov	r1, r3
 80034d2:	4825      	ldr	r0, [pc, #148]	; (8003568 <MX_TIM8_Init+0x15c>)
 80034d4:	f00c f8a4 	bl	800f620 <HAL_TIMEx_MasterConfigSynchronization>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80034de:	f7ff f9a1 	bl	8002824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80034e2:	2370      	movs	r3, #112	; 0x70
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = CIS_SP_OFF;
 80034e6:	2302      	movs	r3, #2
 80034e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80034ea:	2302      	movs	r3, #2
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034ee:	2300      	movs	r3, #0
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80034f2:	2304      	movs	r3, #4
 80034f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003502:	2208      	movs	r2, #8
 8003504:	4619      	mov	r1, r3
 8003506:	4818      	ldr	r0, [pc, #96]	; (8003568 <MX_TIM8_Init+0x15c>)
 8003508:	f00b fa14 	bl	800e934 <HAL_TIM_PWM_ConfigChannel>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8003512:	f7ff f987 	bl	8002824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800352a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800352e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003542:	2300      	movs	r3, #0
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003546:	463b      	mov	r3, r7
 8003548:	4619      	mov	r1, r3
 800354a:	4807      	ldr	r0, [pc, #28]	; (8003568 <MX_TIM8_Init+0x15c>)
 800354c:	f00c f8f0 	bl	800f730 <HAL_TIMEx_ConfigBreakDeadTime>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM8_Init+0x14e>
  {
    Error_Handler();
 8003556:	f7ff f965 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <MX_TIM8_Init+0x15c>)
 800355c:	f000 f8be 	bl	80036dc <HAL_TIM_MspPostInit>

}
 8003560:	bf00      	nop
 8003562:	3770      	adds	r7, #112	; 0x70
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	24005728 	.word	0x24005728
 800356c:	40010400 	.word	0x40010400

08003570 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_TIM_PWM_MspInit+0x68>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d126      	bne.n	80035d0 <HAL_TIM_PWM_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_TIM_PWM_MspInit+0x6c>)
 8003584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <HAL_TIM_PWM_MspInit+0x6c>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_TIM_PWM_MspInit+0x6c>)
 8003594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2100      	movs	r1, #0
 80035a4:	2019      	movs	r0, #25
 80035a6:	f001 f8a4 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80035aa:	2019      	movs	r0, #25
 80035ac:	f001 f8bb 	bl	8004726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	201a      	movs	r0, #26
 80035b6:	f001 f89c 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80035ba:	201a      	movs	r0, #26
 80035bc:	f001 f8b3 	bl	8004726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	201b      	movs	r0, #27
 80035c6:	f001 f894 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80035ca:	201b      	movs	r0, #27
 80035cc:	f001 f8ab 	bl	8004726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40010000 	.word	0x40010000
 80035dc:	58024400 	.word	0x58024400

080035e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a36      	ldr	r2, [pc, #216]	; (80036c8 <HAL_TIM_Base_MspInit+0xe8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10f      	bne.n	8003612 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035f2:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 80035f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035f8:	4a34      	ldr	r2, [pc, #208]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 80035fa:	f043 0302 	orr.w	r3, r3, #2
 80035fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003602:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 8003604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003610:	e055      	b.n	80036be <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM4)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <HAL_TIM_Base_MspInit+0xf0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d10f      	bne.n	800363c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 800361e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003622:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800362c:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 800362e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
}
 800363a:	e040      	b.n	80036be <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM5)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a24      	ldr	r2, [pc, #144]	; (80036d4 <HAL_TIM_Base_MspInit+0xf4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10f      	bne.n	8003666 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 8003648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800364c:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 800364e:	f043 0308 	orr.w	r3, r3, #8
 8003652:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 8003658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	e02b      	b.n	80036be <HAL_TIM_Base_MspInit+0xde>
  else if(tim_baseHandle->Instance==TIM8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <HAL_TIM_Base_MspInit+0xf8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d126      	bne.n	80036be <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 8003672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 8003678:	f043 0302 	orr.w	r3, r3, #2
 800367c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003680:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_TIM_Base_MspInit+0xec>)
 8003682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2100      	movs	r1, #0
 8003692:	202c      	movs	r0, #44	; 0x2c
 8003694:	f001 f82d 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003698:	202c      	movs	r0, #44	; 0x2c
 800369a:	f001 f844 	bl	8004726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	202d      	movs	r0, #45	; 0x2d
 80036a4:	f001 f825 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80036a8:	202d      	movs	r0, #45	; 0x2d
 80036aa:	f001 f83c 	bl	8004726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	202e      	movs	r0, #46	; 0x2e
 80036b4:	f001 f81d 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80036b8:	202e      	movs	r0, #46	; 0x2e
 80036ba:	f001 f834 	bl	8004726 <HAL_NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40000400 	.word	0x40000400
 80036cc:	58024400 	.word	0x58024400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40010400 	.word	0x40010400

080036dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5e      	ldr	r2, [pc, #376]	; (8003874 <HAL_TIM_MspPostInit+0x198>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d120      	bne.n	8003740 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	4b5e      	ldr	r3, [pc, #376]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 8003700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003704:	4a5c      	ldr	r2, [pc, #368]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800370e:	4b5a      	ldr	r3, [pc, #360]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 8003710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CIS_CP_Pin;
 800371c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372a:	2303      	movs	r3, #3
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800372e:	2301      	movs	r3, #1
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_CP_GPIO_Port, &GPIO_InitStruct);
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4619      	mov	r1, r3
 8003738:	4850      	ldr	r0, [pc, #320]	; (800387c <HAL_TIM_MspPostInit+0x1a0>)
 800373a:	f005 f8e5 	bl	8008908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800373e:	e095      	b.n	800386c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM3)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a4e      	ldr	r2, [pc, #312]	; (8003880 <HAL_TIM_MspPostInit+0x1a4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11f      	bne.n	800378a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374a:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 800374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003750:	4a49      	ldr	r2, [pc, #292]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 8003752:	f043 0304 	orr.w	r3, r3, #4
 8003756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 800375c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = CIS_VLED_G_Pin;
 8003768:	2340      	movs	r3, #64	; 0x40
 800376a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003774:	2303      	movs	r3, #3
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003778:	2302      	movs	r3, #2
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_G_GPIO_Port, &GPIO_InitStruct);
 800377c:	f107 031c 	add.w	r3, r7, #28
 8003780:	4619      	mov	r1, r3
 8003782:	4840      	ldr	r0, [pc, #256]	; (8003884 <HAL_TIM_MspPostInit+0x1a8>)
 8003784:	f005 f8c0 	bl	8008908 <HAL_GPIO_Init>
}
 8003788:	e070      	b.n	800386c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM4)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3e      	ldr	r2, [pc, #248]	; (8003888 <HAL_TIM_MspPostInit+0x1ac>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d120      	bne.n	80037d6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003794:	4b38      	ldr	r3, [pc, #224]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 8003796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800379a:	4a37      	ldr	r2, [pc, #220]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 800379c:	f043 0308 	orr.w	r3, r3, #8
 80037a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a4:	4b34      	ldr	r3, [pc, #208]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 80037a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CIS_VLED_R_Pin;
 80037b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c0:	2303      	movs	r3, #3
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037c4:	2302      	movs	r3, #2
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_R_GPIO_Port, &GPIO_InitStruct);
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	4619      	mov	r1, r3
 80037ce:	482f      	ldr	r0, [pc, #188]	; (800388c <HAL_TIM_MspPostInit+0x1b0>)
 80037d0:	f005 f89a 	bl	8008908 <HAL_GPIO_Init>
}
 80037d4:	e04a      	b.n	800386c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM5)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2d      	ldr	r2, [pc, #180]	; (8003890 <HAL_TIM_MspPostInit+0x1b4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d120      	bne.n	8003822 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80037e0:	4b25      	ldr	r3, [pc, #148]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 80037e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e6:	4a24      	ldr	r2, [pc, #144]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 80037e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 80037f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CIS_VLED_B_Pin;
 80037fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380c:	2303      	movs	r3, #3
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003810:	2302      	movs	r3, #2
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_VLED_B_GPIO_Port, &GPIO_InitStruct);
 8003814:	f107 031c 	add.w	r3, r7, #28
 8003818:	4619      	mov	r1, r3
 800381a:	481e      	ldr	r0, [pc, #120]	; (8003894 <HAL_TIM_MspPostInit+0x1b8>)
 800381c:	f005 f874 	bl	8008908 <HAL_GPIO_Init>
}
 8003820:	e024      	b.n	800386c <HAL_TIM_MspPostInit+0x190>
  else if(timHandle->Instance==TIM8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_TIM_MspPostInit+0x1bc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d11f      	bne.n	800386c <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 800382e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 8003834:	f043 0304 	orr.w	r3, r3, #4
 8003838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800383c:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_TIM_MspPostInit+0x19c>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CIS_SP_Pin;
 800384a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800384e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003858:	2303      	movs	r3, #3
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800385c:	2303      	movs	r3, #3
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CIS_SP_GPIO_Port, &GPIO_InitStruct);
 8003860:	f107 031c 	add.w	r3, r7, #28
 8003864:	4619      	mov	r1, r3
 8003866:	4807      	ldr	r0, [pc, #28]	; (8003884 <HAL_TIM_MspPostInit+0x1a8>)
 8003868:	f005 f84e 	bl	8008908 <HAL_GPIO_Init>
}
 800386c:	bf00      	nop
 800386e:	3730      	adds	r7, #48	; 0x30
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40010000 	.word	0x40010000
 8003878:	58024400 	.word	0x58024400
 800387c:	58020000 	.word	0x58020000
 8003880:	40000400 	.word	0x40000400
 8003884:	58020800 	.word	0x58020800
 8003888:	40000800 	.word	0x40000800
 800388c:	58020c00 	.word	0x58020c00
 8003890:	40000c00 	.word	0x40000c00
 8003894:	58021c00 	.word	0x58021c00
 8003898:	40010400 	.word	0x40010400

0800389c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038a0:	4b22      	ldr	r3, [pc, #136]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038a2:	4a23      	ldr	r2, [pc, #140]	; (8003930 <MX_USART1_UART_Init+0x94>)
 80038a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038a6:	4b21      	ldr	r3, [pc, #132]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038ae:	4b1f      	ldr	r3, [pc, #124]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038ba:	4b1c      	ldr	r3, [pc, #112]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038bc:	2200      	movs	r2, #0
 80038be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038c2:	220c      	movs	r2, #12
 80038c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038c6:	4b19      	ldr	r3, [pc, #100]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038de:	4b13      	ldr	r3, [pc, #76]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038e4:	4811      	ldr	r0, [pc, #68]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038e6:	f00b ffbf 	bl	800f868 <HAL_UART_Init>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80038f0:	f7fe ff98 	bl	8002824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038f4:	2100      	movs	r1, #0
 80038f6:	480d      	ldr	r0, [pc, #52]	; (800392c <MX_USART1_UART_Init+0x90>)
 80038f8:	f00c ff0c 	bl	8010714 <HAL_UARTEx_SetTxFifoThreshold>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003902:	f7fe ff8f 	bl	8002824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003906:	2100      	movs	r1, #0
 8003908:	4808      	ldr	r0, [pc, #32]	; (800392c <MX_USART1_UART_Init+0x90>)
 800390a:	f00c ff41 	bl	8010790 <HAL_UARTEx_SetRxFifoThreshold>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003914:	f7fe ff86 	bl	8002824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003918:	4804      	ldr	r0, [pc, #16]	; (800392c <MX_USART1_UART_Init+0x90>)
 800391a:	f00c fec2 	bl	80106a2 <HAL_UARTEx_DisableFifoMode>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003924:	f7fe ff7e 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	240058a4 	.word	0x240058a4
 8003930:	40011000 	.word	0x40011000

08003934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b0b8      	sub	sp, #224	; 0xe0
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	22bc      	movs	r2, #188	; 0xbc
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f01a fc6d 	bl	801e234 <memset>
  if(uartHandle->Instance==USART1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a24      	ldr	r2, [pc, #144]	; (80039f0 <HAL_UART_MspInit+0xbc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d141      	bne.n	80039e8 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003964:	2301      	movs	r3, #1
 8003966:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800396e:	f107 0310 	add.w	r3, r7, #16
 8003972:	4618      	mov	r0, r3
 8003974:	f006 f9f4 	bl	8009d60 <HAL_RCCEx_PeriphCLKConfig>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800397e:	f7fe ff51 	bl	8002824 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_UART_MspInit+0xc0>)
 8003984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003988:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <HAL_UART_MspInit+0xc0>)
 800398a:	f043 0310 	orr.w	r3, r3, #16
 800398e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_UART_MspInit+0xc0>)
 8003994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_UART_MspInit+0xc0>)
 80039a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <HAL_UART_MspInit+0xc0>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_UART_MspInit+0xc0>)
 80039b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039be:	23c0      	movs	r3, #192	; 0xc0
 80039c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039d6:	2307      	movs	r3, #7
 80039d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039e0:	4619      	mov	r1, r3
 80039e2:	4805      	ldr	r0, [pc, #20]	; (80039f8 <HAL_UART_MspInit+0xc4>)
 80039e4:	f004 ff90 	bl	8008908 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039e8:	bf00      	nop
 80039ea:	37e0      	adds	r7, #224	; 0xe0
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40011000 	.word	0x40011000
 80039f4:	58024400 	.word	0x58024400
 80039f8:	58020400 	.word	0x58020400

080039fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80039fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a00:	f7fd f9b8 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a04:	480c      	ldr	r0, [pc, #48]	; (8003a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a06:	490d      	ldr	r1, [pc, #52]	; (8003a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a08:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a0c:	e002      	b.n	8003a14 <LoopCopyDataInit>

08003a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a12:	3304      	adds	r3, #4

08003a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a18:	d3f9      	bcc.n	8003a0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a1c:	4c0a      	ldr	r4, [pc, #40]	; (8003a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a20:	e001      	b.n	8003a26 <LoopFillZerobss>

08003a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a24:	3204      	adds	r2, #4

08003a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a28:	d3fb      	bcc.n	8003a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a2a:	f01a fba1 	bl	801e170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a2e:	f7fe fb5f 	bl	80020f0 <main>
  bx  lr
 8003a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003a38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003a3c:	2400361c 	.word	0x2400361c
  ldr r2, =_sidata
 8003a40:	08029308 	.word	0x08029308
  ldr r2, =_sbss
 8003a44:	2400361c 	.word	0x2400361c
  ldr r4, =_ebss
 8003a48:	2400b250 	.word	0x2400b250

08003a4c <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a4c:	e7fe      	b.n	8003a4c <BDMA_Channel0_IRQHandler>

08003a4e <arm_copy_q15>:

void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b087      	sub	sp, #28
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003a60:	e01a      	b.n	8003a98 <arm_copy_q15+0x4a>
  {
    /* C = A */
    /* Read two inputs */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003a62:	f107 030c 	add.w	r3, r7, #12
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	1d11      	adds	r1, r2, #4
 8003a6a:	6019      	str	r1, [r3, #0]
 8003a6c:	f107 0108 	add.w	r1, r7, #8
 8003a70:	680b      	ldr	r3, [r1, #0]
 8003a72:	1d18      	adds	r0, r3, #4
 8003a74:	6008      	str	r0, [r1, #0]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	601a      	str	r2, [r3, #0]
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	1d11      	adds	r1, r2, #4
 8003a82:	6019      	str	r1, [r3, #0]
 8003a84:	f107 0108 	add.w	r1, r7, #8
 8003a88:	680b      	ldr	r3, [r1, #0]
 8003a8a:	1d18      	adds	r0, r3, #4
 8003a8c:	6008      	str	r0, [r1, #0]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e1      	bne.n	8003a62 <arm_copy_q15+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8003aa6:	e00b      	b.n	8003ac0 <arm_copy_q15+0x72>
  {
    /* C = A */
    /* Copy and then store the value in the destination buffer */
    *pDst++ = *pSrc++;
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	1c93      	adds	r3, r2, #2
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1c99      	adds	r1, r3, #2
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003ab8:	801a      	strh	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
  while(blkCnt > 0u)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <arm_copy_q15+0x5a>
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <LAN8742_RegisterBusIO+0x28>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <LAN8742_RegisterBusIO+0x28>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <LAN8742_RegisterBusIO+0x28>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b00:	e014      	b.n	8003b2c <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d17c      	bne.n	8003c52 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e01c      	b.n	8003bac <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f107 0208 	add.w	r2, r7, #8
 8003b7a:	2112      	movs	r1, #18
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	4798      	blx	r3
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	da03      	bge.n	8003b8e <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003b86:	f06f 0304 	mvn.w	r3, #4
 8003b8a:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003b8c:	e00b      	b.n	8003ba6 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d105      	bne.n	8003ba6 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]
         break;
 8003ba4:	e005      	b.n	8003bb2 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b1f      	cmp	r3, #31
 8003bb0:	d9df      	bls.n	8003b72 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b1f      	cmp	r3, #31
 8003bb8:	d902      	bls.n	8003bc0 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003bba:	f06f 0302 	mvn.w	r3, #2
 8003bbe:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d145      	bne.n	8003c52 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6810      	ldr	r0, [r2, #0]
 8003bce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4798      	blx	r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	db37      	blt.n	8003c4c <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6810      	ldr	r0, [r2, #0]
 8003be4:	f107 0208 	add.w	r2, r7, #8
 8003be8:	2100      	movs	r1, #0
 8003bea:	4798      	blx	r3
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	db28      	blt.n	8003c44 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	4798      	blx	r3
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003bfc:	e01c      	b.n	8003c38 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	4798      	blx	r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c10:	d80e      	bhi.n	8003c30 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6810      	ldr	r0, [r2, #0]
 8003c1a:	f107 0208 	add.w	r2, r7, #8
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4798      	blx	r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	da07      	bge.n	8003c38 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003c28:	f06f 0304 	mvn.w	r3, #4
 8003c2c:	613b      	str	r3, [r7, #16]
                 break;
 8003c2e:	e010      	b.n	8003c52 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003c30:	f06f 0301 	mvn.w	r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
               break;
 8003c36:	e00c      	b.n	8003c52 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1dd      	bne.n	8003bfe <LAN8742_Init+0xc6>
 8003c42:	e006      	b.n	8003c52 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003c44:	f06f 0304 	mvn.w	r3, #4
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	e002      	b.n	8003c52 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003c4c:	f06f 0303 	mvn.w	r3, #3
 8003c50:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d112      	bne.n	8003c7e <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4798      	blx	r3
 8003c5e:	4603      	mov	r3, r0
 8003c60:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003c62:	bf00      	nop
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	4798      	blx	r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c76:	d9f5      	bls.n	8003c64 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 }
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6810      	ldr	r0, [r2, #0]
 8003c9c:	f107 020c 	add.w	r2, r7, #12
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4798      	blx	r3
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	da02      	bge.n	8003cb0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003caa:	f06f 0304 	mvn.w	r3, #4
 8003cae:	e06e      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6810      	ldr	r0, [r2, #0]
 8003cb8:	f107 020c 	add.w	r2, r7, #12
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4798      	blx	r3
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	da02      	bge.n	8003ccc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003cc6:	f06f 0304 	mvn.w	r3, #4
 8003cca:	e060      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e059      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6810      	ldr	r0, [r2, #0]
 8003ce2:	f107 020c 	add.w	r2, r7, #12
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4798      	blx	r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da02      	bge.n	8003cf6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003cf0:	f06f 0304 	mvn.w	r3, #4
 8003cf4:	e04b      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d11b      	bne.n	8003d38 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <LAN8742_GetLinkState+0x90>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003d14:	2302      	movs	r3, #2
 8003d16:	e03a      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e033      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d30:	2304      	movs	r3, #4
 8003d32:	e02c      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d34:	2305      	movs	r3, #5
 8003d36:	e02a      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6810      	ldr	r0, [r2, #0]
 8003d40:	f107 020c 	add.w	r2, r7, #12
 8003d44:	211f      	movs	r1, #31
 8003d46:	4798      	blx	r3
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da02      	bge.n	8003d54 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003d4e:	f06f 0304 	mvn.w	r3, #4
 8003d52:	e01c      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003d5e:	2306      	movs	r3, #6
 8003d60:	e015      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 031c 	and.w	r3, r3, #28
 8003d68:	2b18      	cmp	r3, #24
 8003d6a:	d101      	bne.n	8003d70 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e00e      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 031c 	and.w	r3, r3, #28
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d101      	bne.n	8003d7e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e007      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 031c 	and.w	r3, r3, #28
 8003d84:	2b14      	cmp	r3, #20
 8003d86:	d101      	bne.n	8003d8c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003d88:	2304      	movs	r3, #4
 8003d8a:	e000      	b.n	8003d8e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003d8c:	2305      	movs	r3, #5
    }				
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d9e:	2003      	movs	r0, #3
 8003da0:	f000 fc9c 	bl	80046dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003da4:	f005 fe06 	bl	80099b4 <HAL_RCC_GetSysClockFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_Init+0x68>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	4913      	ldr	r1, [pc, #76]	; (8003e04 <HAL_Init+0x6c>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <HAL_Init+0x68>)
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <HAL_Init+0x6c>)
 8003dcc:	5cd3      	ldrb	r3, [r2, r3]
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <HAL_Init+0x70>)
 8003dda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ddc:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <HAL_Init+0x74>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003de2:	2000      	movs	r0, #0
 8003de4:	f000 f814 	bl	8003e10 <HAL_InitTick>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e002      	b.n	8003df8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003df2:	f7fe ff4b 	bl	8002c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	58024400 	.word	0x58024400
 8003e04:	08026bdc 	.word	0x08026bdc
 8003e08:	24000004 	.word	0x24000004
 8003e0c:	24000000 	.word	0x24000000

08003e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_InitTick+0x60>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e021      	b.n	8003e68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <HAL_InitTick+0x64>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <HAL_InitTick+0x60>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fc81 	bl	8004742 <HAL_SYSTICK_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00e      	b.n	8003e68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b0f      	cmp	r3, #15
 8003e4e:	d80a      	bhi.n	8003e66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e50:	2200      	movs	r2, #0
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e58:	f000 fc4b 	bl	80046f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e5c:	4a06      	ldr	r2, [pc, #24]	; (8003e78 <HAL_InitTick+0x68>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	2400000c 	.word	0x2400000c
 8003e74:	24000000 	.word	0x24000000
 8003e78:	24000008 	.word	0x24000008

08003e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_IncTick+0x20>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_IncTick+0x24>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <HAL_IncTick+0x24>)
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	2400000c 	.word	0x2400000c
 8003ea0:	24005934 	.word	0x24005934

08003ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_GetTick+0x14>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	24005934 	.word	0x24005934

08003ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7ff ffee 	bl	8003ea4 <HAL_GetTick>
 8003ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed4:	d005      	beq.n	8003ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_Delay+0x44>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ee2:	bf00      	nop
 8003ee4:	f7ff ffde 	bl	8003ea4 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d8f7      	bhi.n	8003ee4 <HAL_Delay+0x28>
  {
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2400000c 	.word	0x2400000c

08003f04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_GetREVID+0x14>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	5c001000 	.word	0x5c001000

08003f1c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f2c:	4904      	ldr	r1, [pc, #16]	; (8003f40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	58000400 	.word	0x58000400

08003f44 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f54:	4904      	ldr	r1, [pc, #16]	; (8003f68 <HAL_SetFMCMemorySwappingConfig+0x24>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	52004000 	.word	0x52004000

08003f6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d101      	bne.n	8004008 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b08      	cmp	r3, #8
 8004028:	d101      	bne.n	800402e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	; 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a87      	ldr	r2, [pc, #540]	; (800427c <HAL_ADC_IRQHandler+0x240>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_ADC_IRQHandler+0x30>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a86      	ldr	r2, [pc, #536]	; (8004280 <HAL_ADC_IRQHandler+0x244>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <HAL_ADC_IRQHandler+0x34>
 800406c:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_ADC_IRQHandler+0x248>)
 800406e:	e000      	b.n	8004072 <HAL_ADC_IRQHandler+0x36>
 8004070:	4b85      	ldr	r3, [pc, #532]	; (8004288 <HAL_ADC_IRQHandler+0x24c>)
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ffa0 	bl	8003fb8 <LL_ADC_GetMultimode>
 8004078:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d017      	beq.n	80040b4 <HAL_ADC_IRQHandler+0x78>
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d012      	beq.n	80040b4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	d105      	bne.n	80040a6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa3e 	bl	8004528 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2202      	movs	r2, #2
 80040b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <HAL_ADC_IRQHandler+0x8c>
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8083 	beq.w	80041da <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d07d      	beq.n	80041da <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff ff36 	bl	8003f6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d062      	beq.n	80041cc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <HAL_ADC_IRQHandler+0x244>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d002      	beq.n	8004116 <HAL_ADC_IRQHandler+0xda>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	e000      	b.n	8004118 <HAL_ADC_IRQHandler+0xdc>
 8004116:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_ADC_IRQHandler+0x240>)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	4293      	cmp	r3, r2
 800411e:	d008      	beq.n	8004132 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b05      	cmp	r3, #5
 800412a:	d002      	beq.n	8004132 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b09      	cmp	r3, #9
 8004130:	d104      	bne.n	800413c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	e00c      	b.n	8004156 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a4f      	ldr	r2, [pc, #316]	; (8004280 <HAL_ADC_IRQHandler+0x244>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d002      	beq.n	800414c <HAL_ADC_IRQHandler+0x110>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	e000      	b.n	800414e <HAL_ADC_IRQHandler+0x112>
 800414c:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_ADC_IRQHandler+0x240>)
 800414e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d135      	bne.n	80041cc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b08      	cmp	r3, #8
 800416c:	d12e      	bne.n	80041cc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff3c 	bl	8003ff0 <LL_ADC_REG_IsConversionOngoing>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d11a      	bne.n	80041b4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 020c 	bic.w	r2, r2, #12
 800418c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d112      	bne.n	80041cc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f043 0201 	orr.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
 80041b2:	e00b      	b.n	80041cc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0210 	orr.w	r2, r3, #16
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f043 0201 	orr.w	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f019 f837 	bl	801d240 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	220c      	movs	r2, #12
 80041d8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <HAL_ADC_IRQHandler+0x1b2>
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80a0 	beq.w	800433a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 809a 	beq.w	800433a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff feb5 	bl	8003f92 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004228:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fe9c 	bl	8003f6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004234:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a11      	ldr	r2, [pc, #68]	; (8004280 <HAL_ADC_IRQHandler+0x244>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d002      	beq.n	8004246 <HAL_ADC_IRQHandler+0x20a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	e000      	b.n	8004248 <HAL_ADC_IRQHandler+0x20c>
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_ADC_IRQHandler+0x240>)
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	4293      	cmp	r3, r2
 800424e:	d008      	beq.n	8004262 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d002      	beq.n	8004262 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b07      	cmp	r3, #7
 8004260:	d104      	bne.n	800426c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	e014      	b.n	8004296 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a03      	ldr	r2, [pc, #12]	; (8004280 <HAL_ADC_IRQHandler+0x244>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00a      	beq.n	800428c <HAL_ADC_IRQHandler+0x250>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	e008      	b.n	800428e <HAL_ADC_IRQHandler+0x252>
 800427c:	40022000 	.word	0x40022000
 8004280:	40022100 	.word	0x40022100
 8004284:	40022300 	.word	0x40022300
 8004288:	58026300 	.word	0x58026300
 800428c:	4b84      	ldr	r3, [pc, #528]	; (80044a0 <HAL_ADC_IRQHandler+0x464>)
 800428e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10c      	bne.n	80042b6 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d142      	bne.n	800432c <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d03f      	beq.n	800432c <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d13a      	bne.n	800432c <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d133      	bne.n	800432c <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d12e      	bne.n	800432c <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fe9f 	bl	8004016 <LL_ADC_INJ_IsConversionOngoing>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d11a      	bne.n	8004314 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	2b00      	cmp	r3, #0
 8004304:	d112      	bne.n	800432c <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	f043 0201 	orr.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	655a      	str	r2, [r3, #84]	; 0x54
 8004312:	e00b      	b.n	800432c <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	f043 0210 	orr.w	r2, r3, #16
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	f043 0201 	orr.w	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f8d3 	bl	80044d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2260      	movs	r2, #96	; 0x60
 8004338:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d011      	beq.n	8004368 <HAL_ADC_IRQHandler+0x32c>
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00c      	beq.n	8004368 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8a8 	bl	80044b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <HAL_ADC_IRQHandler+0x35c>
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8b9 	bl	8004500 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d012      	beq.n	80043c8 <HAL_ADC_IRQHandler+0x38c>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f8ab 	bl	8004514 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d043      	beq.n	800445a <HAL_ADC_IRQHandler+0x41e>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03e      	beq.n	800445a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80043e4:	2301      	movs	r3, #1
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
 80043e8:	e021      	b.n	800442e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d015      	beq.n	800441c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2a      	ldr	r2, [pc, #168]	; (80044a0 <HAL_ADC_IRQHandler+0x464>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_ADC_IRQHandler+0x3c8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <HAL_ADC_IRQHandler+0x468>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d101      	bne.n	8004408 <HAL_ADC_IRQHandler+0x3cc>
 8004404:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <HAL_ADC_IRQHandler+0x46c>)
 8004406:	e000      	b.n	800440a <HAL_ADC_IRQHandler+0x3ce>
 8004408:	4b28      	ldr	r3, [pc, #160]	; (80044ac <HAL_ADC_IRQHandler+0x470>)
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fde2 	bl	8003fd4 <LL_ADC_GetMultiDMATransfer>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004416:	2301      	movs	r3, #1
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
 800441a:	e008      	b.n	800442e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800442a:	2301      	movs	r3, #1
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	2b01      	cmp	r3, #1
 8004432:	d10e      	bne.n	8004452 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f043 0202 	orr.w	r2, r3, #2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f839 	bl	80044c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2210      	movs	r2, #16
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d018      	beq.n	8004496 <HAL_ADC_IRQHandler+0x45a>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446a:	2b00      	cmp	r3, #0
 800446c:	d013      	beq.n	8004496 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	f043 0208 	orr.w	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800448e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f82b 	bl	80044ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004496:	bf00      	nop
 8004498:	3728      	adds	r7, #40	; 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40022000 	.word	0x40022000
 80044a4:	40022100 	.word	0x40022100
 80044a8:	40022300 	.word	0x40022300
 80044ac:	58026300 	.word	0x58026300

080044b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <__NVIC_SetPriorityGrouping>:
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <__NVIC_SetPriorityGrouping+0x40>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004558:	4013      	ands	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <__NVIC_SetPriorityGrouping+0x44>)
 8004566:	4313      	orrs	r3, r2
 8004568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800456a:	4a04      	ldr	r2, [pc, #16]	; (800457c <__NVIC_SetPriorityGrouping+0x40>)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	60d3      	str	r3, [r2, #12]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	e000ed00 	.word	0xe000ed00
 8004580:	05fa0000 	.word	0x05fa0000

08004584 <__NVIC_GetPriorityGrouping>:
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <__NVIC_GetPriorityGrouping+0x18>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	f003 0307 	and.w	r3, r3, #7
}
 8004592:	4618      	mov	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <__NVIC_EnableIRQ>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	db0b      	blt.n	80045ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	4907      	ldr	r1, [pc, #28]	; (80045d8 <__NVIC_EnableIRQ+0x38>)
 80045ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2001      	movs	r0, #1
 80045c2:	fa00 f202 	lsl.w	r2, r0, r2
 80045c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	e000e100 	.word	0xe000e100

080045dc <__NVIC_SetPriority>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	db0a      	blt.n	8004606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	490c      	ldr	r1, [pc, #48]	; (8004628 <__NVIC_SetPriority+0x4c>)
 80045f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045fa:	0112      	lsls	r2, r2, #4
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	440b      	add	r3, r1
 8004600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004604:	e00a      	b.n	800461c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4908      	ldr	r1, [pc, #32]	; (800462c <__NVIC_SetPriority+0x50>)
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	3b04      	subs	r3, #4
 8004614:	0112      	lsls	r2, r2, #4
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	440b      	add	r3, r1
 800461a:	761a      	strb	r2, [r3, #24]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000e100 	.word	0xe000e100
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <NVIC_EncodePriority>:
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	; 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f1c3 0307 	rsb	r3, r3, #7
 800464a:	2b04      	cmp	r3, #4
 800464c:	bf28      	it	cs
 800464e:	2304      	movcs	r3, #4
 8004650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3304      	adds	r3, #4
 8004656:	2b06      	cmp	r3, #6
 8004658:	d902      	bls.n	8004660 <NVIC_EncodePriority+0x30>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3b03      	subs	r3, #3
 800465e:	e000      	b.n	8004662 <NVIC_EncodePriority+0x32>
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43da      	mvns	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	401a      	ands	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	43d9      	mvns	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004688:	4313      	orrs	r3, r2
}
 800468a:	4618      	mov	r0, r3
 800468c:	3724      	adds	r7, #36	; 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046a8:	d301      	bcc.n	80046ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046aa:	2301      	movs	r3, #1
 80046ac:	e00f      	b.n	80046ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ae:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <SysTick_Config+0x40>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046b6:	210f      	movs	r1, #15
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046bc:	f7ff ff8e 	bl	80045dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <SysTick_Config+0x40>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046c6:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <SysTick_Config+0x40>)
 80046c8:	2207      	movs	r2, #7
 80046ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	e000e010 	.word	0xe000e010

080046dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff29 	bl	800453c <__NVIC_SetPriorityGrouping>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	4603      	mov	r3, r0
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
 80046fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004700:	f7ff ff40 	bl	8004584 <__NVIC_GetPriorityGrouping>
 8004704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f7ff ff90 	bl	8004630 <NVIC_EncodePriority>
 8004710:	4602      	mov	r2, r0
 8004712:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004716:	4611      	mov	r1, r2
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff ff5f 	bl	80045dc <__NVIC_SetPriority>
}
 800471e:	bf00      	nop
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	4603      	mov	r3, r0
 800472e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff33 	bl	80045a0 <__NVIC_EnableIRQ>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff ffa4 	bl	8004698 <SysTick_Config>
 8004750:	4603      	mov	r3, r0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004760:	f3bf 8f5f 	dmb	sy
}
 8004764:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <HAL_MPU_Disable+0x28>)
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	4a06      	ldr	r2, [pc, #24]	; (8004784 <HAL_MPU_Disable+0x28>)
 800476c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004770:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_MPU_Disable+0x2c>)
 8004774:	2200      	movs	r2, #0
 8004776:	605a      	str	r2, [r3, #4]
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000ed00 	.word	0xe000ed00
 8004788:	e000ed90 	.word	0xe000ed90

0800478c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004794:	4a0b      	ldr	r2, [pc, #44]	; (80047c4 <HAL_MPU_Enable+0x38>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_MPU_Enable+0x3c>)
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_MPU_Enable+0x3c>)
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80047aa:	f3bf 8f4f 	dsb	sy
}
 80047ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047b0:	f3bf 8f6f 	isb	sy
}
 80047b4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000ed90 	.word	0xe000ed90
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	785a      	ldrb	r2, [r3, #1]
 80047d8:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <HAL_MPU_ConfigRegion+0x84>)
 80047da:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d029      	beq.n	8004838 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <HAL_MPU_ConfigRegion+0x84>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	7b1b      	ldrb	r3, [r3, #12]
 80047f0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7adb      	ldrb	r3, [r3, #11]
 80047f6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7a9b      	ldrb	r3, [r3, #10]
 80047fe:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004800:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	7b5b      	ldrb	r3, [r3, #13]
 8004806:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004808:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7b9b      	ldrb	r3, [r3, #14]
 800480e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004810:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	7bdb      	ldrb	r3, [r3, #15]
 8004816:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004818:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7a5b      	ldrb	r3, [r3, #9]
 800481e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004820:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7a1b      	ldrb	r3, [r3, #8]
 8004826:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004828:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	7812      	ldrb	r2, [r2, #0]
 800482e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004830:	4a07      	ldr	r2, [pc, #28]	; (8004850 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004832:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004834:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004836:	e005      	b.n	8004844 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_MPU_ConfigRegion+0x84>)
 800483a:	2200      	movs	r2, #0
 800483c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <HAL_MPU_ConfigRegion+0x84>)
 8004840:	2200      	movs	r2, #0
 8004842:	611a      	str	r2, [r3, #16]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed90 	.word	0xe000ed90

08004854 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004858:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_GetCurrentCPUID+0x24>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	2b07      	cmp	r3, #7
 8004864:	d101      	bne.n	800486a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004866:	2303      	movs	r3, #3
 8004868:	e000      	b.n	800486c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800486a:	2301      	movs	r3, #1
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	e000ed00 	.word	0xe000ed00

0800487c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e054      	b.n	8004938 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	7f5b      	ldrb	r3, [r3, #29]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc fb24 	bl	8000eec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	791b      	ldrb	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a22      	ldr	r2, [pc, #136]	; (8004940 <HAL_CRC_Init+0xc4>)
 80048b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0218 	bic.w	r2, r2, #24
 80048c8:	609a      	str	r2, [r3, #8]
 80048ca:	e00c      	b.n	80048e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6899      	ldr	r1, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	461a      	mov	r2, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f834 	bl	8004944 <HAL_CRCEx_Polynomial_Set>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e028      	b.n	8004938 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	795b      	ldrb	r3, [r3, #5]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048f6:	611a      	str	r2, [r3, #16]
 80048f8:	e004      	b.n	8004904 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6912      	ldr	r2, [r2, #16]
 8004902:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699a      	ldr	r2, [r3, #24]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	04c11db7 	.word	0x04c11db7

08004944 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004954:	231f      	movs	r3, #31
 8004956:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004958:	bf00      	nop
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1e5a      	subs	r2, r3, #1
 800495e:	613a      	str	r2, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <HAL_CRCEx_Polynomial_Set+0x34>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_CRCEx_Polynomial_Set+0x16>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b18      	cmp	r3, #24
 800497c:	d846      	bhi.n	8004a0c <HAL_CRCEx_Polynomial_Set+0xc8>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	08004a13 	.word	0x08004a13
 8004988:	08004a0d 	.word	0x08004a0d
 800498c:	08004a0d 	.word	0x08004a0d
 8004990:	08004a0d 	.word	0x08004a0d
 8004994:	08004a0d 	.word	0x08004a0d
 8004998:	08004a0d 	.word	0x08004a0d
 800499c:	08004a0d 	.word	0x08004a0d
 80049a0:	08004a0d 	.word	0x08004a0d
 80049a4:	08004a01 	.word	0x08004a01
 80049a8:	08004a0d 	.word	0x08004a0d
 80049ac:	08004a0d 	.word	0x08004a0d
 80049b0:	08004a0d 	.word	0x08004a0d
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a0d 	.word	0x08004a0d
 80049bc:	08004a0d 	.word	0x08004a0d
 80049c0:	08004a0d 	.word	0x08004a0d
 80049c4:	080049f5 	.word	0x080049f5
 80049c8:	08004a0d 	.word	0x08004a0d
 80049cc:	08004a0d 	.word	0x08004a0d
 80049d0:	08004a0d 	.word	0x08004a0d
 80049d4:	08004a0d 	.word	0x08004a0d
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004a0d 	.word	0x08004a0d
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	080049e9 	.word	0x080049e9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d913      	bls.n	8004a16 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80049f2:	e010      	b.n	8004a16 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b07      	cmp	r3, #7
 80049f8:	d90f      	bls.n	8004a1a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80049fe:	e00c      	b.n	8004a1a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b0f      	cmp	r3, #15
 8004a04:	d90b      	bls.n	8004a1e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004a0a:	e008      	b.n	8004a1e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a10:	e006      	b.n	8004a20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a12:	bf00      	nop
 8004a14:	e004      	b.n	8004a20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a1e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10d      	bne.n	8004a42 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 0118 	bic.w	r1, r3, #24
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a58:	f7ff fa24 	bl	8003ea4 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e316      	b.n	8005096 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a66      	ldr	r2, [pc, #408]	; (8004c08 <HAL_DMA_Init+0x1b8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d04a      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a65      	ldr	r2, [pc, #404]	; (8004c0c <HAL_DMA_Init+0x1bc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d045      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a63      	ldr	r2, [pc, #396]	; (8004c10 <HAL_DMA_Init+0x1c0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d040      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a62      	ldr	r2, [pc, #392]	; (8004c14 <HAL_DMA_Init+0x1c4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d03b      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a60      	ldr	r2, [pc, #384]	; (8004c18 <HAL_DMA_Init+0x1c8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d036      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a5f      	ldr	r2, [pc, #380]	; (8004c1c <HAL_DMA_Init+0x1cc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d031      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a5d      	ldr	r2, [pc, #372]	; (8004c20 <HAL_DMA_Init+0x1d0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d02c      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a5c      	ldr	r2, [pc, #368]	; (8004c24 <HAL_DMA_Init+0x1d4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d027      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a5a      	ldr	r2, [pc, #360]	; (8004c28 <HAL_DMA_Init+0x1d8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a59      	ldr	r2, [pc, #356]	; (8004c2c <HAL_DMA_Init+0x1dc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d01d      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a57      	ldr	r2, [pc, #348]	; (8004c30 <HAL_DMA_Init+0x1e0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a56      	ldr	r2, [pc, #344]	; (8004c34 <HAL_DMA_Init+0x1e4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a54      	ldr	r2, [pc, #336]	; (8004c38 <HAL_DMA_Init+0x1e8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a53      	ldr	r2, [pc, #332]	; (8004c3c <HAL_DMA_Init+0x1ec>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a51      	ldr	r2, [pc, #324]	; (8004c40 <HAL_DMA_Init+0x1f0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_DMA_Init+0xb8>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a50      	ldr	r2, [pc, #320]	; (8004c44 <HAL_DMA_Init+0x1f4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d101      	bne.n	8004b0c <HAL_DMA_Init+0xbc>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_DMA_Init+0xbe>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 813b 	beq.w	8004d8a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a37      	ldr	r2, [pc, #220]	; (8004c08 <HAL_DMA_Init+0x1b8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d04a      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <HAL_DMA_Init+0x1bc>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d045      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a34      	ldr	r2, [pc, #208]	; (8004c10 <HAL_DMA_Init+0x1c0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d040      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <HAL_DMA_Init+0x1c4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d03b      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a31      	ldr	r2, [pc, #196]	; (8004c18 <HAL_DMA_Init+0x1c8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d036      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <HAL_DMA_Init+0x1cc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d031      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2e      	ldr	r2, [pc, #184]	; (8004c20 <HAL_DMA_Init+0x1d0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d02c      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <HAL_DMA_Init+0x1d4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d027      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <HAL_DMA_Init+0x1d8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d022      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <HAL_DMA_Init+0x1dc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d01d      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <HAL_DMA_Init+0x1e0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d018      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <HAL_DMA_Init+0x1e4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <HAL_DMA_Init+0x1e8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <HAL_DMA_Init+0x1ec>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <HAL_DMA_Init+0x1f0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_DMA_Init+0x174>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <HAL_DMA_Init+0x1f4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d108      	bne.n	8004bd6 <HAL_DMA_Init+0x186>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e007      	b.n	8004be6 <HAL_DMA_Init+0x196>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004be6:	e02f      	b.n	8004c48 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004be8:	f7ff f95c 	bl	8003ea4 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d928      	bls.n	8004c48 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2203      	movs	r2, #3
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e246      	b.n	8005096 <HAL_DMA_Init+0x646>
 8004c08:	40020010 	.word	0x40020010
 8004c0c:	40020028 	.word	0x40020028
 8004c10:	40020040 	.word	0x40020040
 8004c14:	40020058 	.word	0x40020058
 8004c18:	40020070 	.word	0x40020070
 8004c1c:	40020088 	.word	0x40020088
 8004c20:	400200a0 	.word	0x400200a0
 8004c24:	400200b8 	.word	0x400200b8
 8004c28:	40020410 	.word	0x40020410
 8004c2c:	40020428 	.word	0x40020428
 8004c30:	40020440 	.word	0x40020440
 8004c34:	40020458 	.word	0x40020458
 8004c38:	40020470 	.word	0x40020470
 8004c3c:	40020488 	.word	0x40020488
 8004c40:	400204a0 	.word	0x400204a0
 8004c44:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1c8      	bne.n	8004be8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4b83      	ldr	r3, [pc, #524]	; (8004e70 <HAL_DMA_Init+0x420>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c86:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d107      	bne.n	8004cac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004cac:	4b71      	ldr	r3, [pc, #452]	; (8004e74 <HAL_DMA_Init+0x424>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b71      	ldr	r3, [pc, #452]	; (8004e78 <HAL_DMA_Init+0x428>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cb8:	d328      	bcc.n	8004d0c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b28      	cmp	r3, #40	; 0x28
 8004cc0:	d903      	bls.n	8004cca <HAL_DMA_Init+0x27a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004cc8:	d917      	bls.n	8004cfa <HAL_DMA_Init+0x2aa>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b3e      	cmp	r3, #62	; 0x3e
 8004cd0:	d903      	bls.n	8004cda <HAL_DMA_Init+0x28a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b42      	cmp	r3, #66	; 0x42
 8004cd8:	d90f      	bls.n	8004cfa <HAL_DMA_Init+0x2aa>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b46      	cmp	r3, #70	; 0x46
 8004ce0:	d903      	bls.n	8004cea <HAL_DMA_Init+0x29a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b48      	cmp	r3, #72	; 0x48
 8004ce8:	d907      	bls.n	8004cfa <HAL_DMA_Init+0x2aa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b4e      	cmp	r3, #78	; 0x4e
 8004cf0:	d905      	bls.n	8004cfe <HAL_DMA_Init+0x2ae>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b52      	cmp	r3, #82	; 0x52
 8004cf8:	d801      	bhi.n	8004cfe <HAL_DMA_Init+0x2ae>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <HAL_DMA_Init+0x2b0>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d117      	bne.n	8004d66 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00e      	beq.n	8004d66 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 fddb 	bl	8006904 <DMA_CheckFifoParam>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e197      	b.n	8005096 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 fd16 	bl	80067a0 <DMA_CalcBaseAndBitshift>
 8004d74:	4603      	mov	r3, r0
 8004d76:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	223f      	movs	r2, #63	; 0x3f
 8004d82:	409a      	lsls	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	e0cd      	b.n	8004f26 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a3b      	ldr	r2, [pc, #236]	; (8004e7c <HAL_DMA_Init+0x42c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d022      	beq.n	8004dda <HAL_DMA_Init+0x38a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a39      	ldr	r2, [pc, #228]	; (8004e80 <HAL_DMA_Init+0x430>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d01d      	beq.n	8004dda <HAL_DMA_Init+0x38a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a38      	ldr	r2, [pc, #224]	; (8004e84 <HAL_DMA_Init+0x434>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d018      	beq.n	8004dda <HAL_DMA_Init+0x38a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a36      	ldr	r2, [pc, #216]	; (8004e88 <HAL_DMA_Init+0x438>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <HAL_DMA_Init+0x38a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a35      	ldr	r2, [pc, #212]	; (8004e8c <HAL_DMA_Init+0x43c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00e      	beq.n	8004dda <HAL_DMA_Init+0x38a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a33      	ldr	r2, [pc, #204]	; (8004e90 <HAL_DMA_Init+0x440>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d009      	beq.n	8004dda <HAL_DMA_Init+0x38a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a32      	ldr	r2, [pc, #200]	; (8004e94 <HAL_DMA_Init+0x444>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <HAL_DMA_Init+0x38a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a30      	ldr	r2, [pc, #192]	; (8004e98 <HAL_DMA_Init+0x448>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d101      	bne.n	8004dde <HAL_DMA_Init+0x38e>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <HAL_DMA_Init+0x390>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8097 	beq.w	8004f14 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <HAL_DMA_Init+0x42c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d021      	beq.n	8004e34 <HAL_DMA_Init+0x3e4>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <HAL_DMA_Init+0x430>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01c      	beq.n	8004e34 <HAL_DMA_Init+0x3e4>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a21      	ldr	r2, [pc, #132]	; (8004e84 <HAL_DMA_Init+0x434>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d017      	beq.n	8004e34 <HAL_DMA_Init+0x3e4>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <HAL_DMA_Init+0x438>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d012      	beq.n	8004e34 <HAL_DMA_Init+0x3e4>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <HAL_DMA_Init+0x43c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00d      	beq.n	8004e34 <HAL_DMA_Init+0x3e4>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <HAL_DMA_Init+0x440>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d008      	beq.n	8004e34 <HAL_DMA_Init+0x3e4>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <HAL_DMA_Init+0x444>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <HAL_DMA_Init+0x3e4>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <HAL_DMA_Init+0x448>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_DMA_Init+0x44c>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d020      	beq.n	8004ea0 <HAL_DMA_Init+0x450>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d102      	bne.n	8004e6c <HAL_DMA_Init+0x41c>
 8004e66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e6a:	e01a      	b.n	8004ea2 <HAL_DMA_Init+0x452>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e018      	b.n	8004ea2 <HAL_DMA_Init+0x452>
 8004e70:	fe10803f 	.word	0xfe10803f
 8004e74:	5c001000 	.word	0x5c001000
 8004e78:	ffff0000 	.word	0xffff0000
 8004e7c:	58025408 	.word	0x58025408
 8004e80:	5802541c 	.word	0x5802541c
 8004e84:	58025430 	.word	0x58025430
 8004e88:	58025444 	.word	0x58025444
 8004e8c:	58025458 	.word	0x58025458
 8004e90:	5802546c 	.word	0x5802546c
 8004e94:	58025480 	.word	0x58025480
 8004e98:	58025494 	.word	0x58025494
 8004e9c:	fffe000f 	.word	0xfffe000f
 8004ea0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68d2      	ldr	r2, [r2, #12]
 8004ea6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ed0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b6e      	ldr	r3, [pc, #440]	; (80050a0 <HAL_DMA_Init+0x650>)
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a6e      	ldr	r2, [pc, #440]	; (80050a4 <HAL_DMA_Init+0x654>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	009a      	lsls	r2, r3, #2
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 fc51 	bl	80067a0 <DMA_CalcBaseAndBitshift>
 8004efe:	4603      	mov	r3, r0
 8004f00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	e008      	b.n	8004f26 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0b7      	b.n	8005096 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a5f      	ldr	r2, [pc, #380]	; (80050a8 <HAL_DMA_Init+0x658>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d072      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a5d      	ldr	r2, [pc, #372]	; (80050ac <HAL_DMA_Init+0x65c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d06d      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a5c      	ldr	r2, [pc, #368]	; (80050b0 <HAL_DMA_Init+0x660>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d068      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5a      	ldr	r2, [pc, #360]	; (80050b4 <HAL_DMA_Init+0x664>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d063      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a59      	ldr	r2, [pc, #356]	; (80050b8 <HAL_DMA_Init+0x668>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d05e      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a57      	ldr	r2, [pc, #348]	; (80050bc <HAL_DMA_Init+0x66c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d059      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a56      	ldr	r2, [pc, #344]	; (80050c0 <HAL_DMA_Init+0x670>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d054      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a54      	ldr	r2, [pc, #336]	; (80050c4 <HAL_DMA_Init+0x674>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d04f      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a53      	ldr	r2, [pc, #332]	; (80050c8 <HAL_DMA_Init+0x678>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d04a      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a51      	ldr	r2, [pc, #324]	; (80050cc <HAL_DMA_Init+0x67c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d045      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a50      	ldr	r2, [pc, #320]	; (80050d0 <HAL_DMA_Init+0x680>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d040      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a4e      	ldr	r2, [pc, #312]	; (80050d4 <HAL_DMA_Init+0x684>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d03b      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a4d      	ldr	r2, [pc, #308]	; (80050d8 <HAL_DMA_Init+0x688>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d036      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a4b      	ldr	r2, [pc, #300]	; (80050dc <HAL_DMA_Init+0x68c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d031      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a4a      	ldr	r2, [pc, #296]	; (80050e0 <HAL_DMA_Init+0x690>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d02c      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a48      	ldr	r2, [pc, #288]	; (80050e4 <HAL_DMA_Init+0x694>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d027      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a47      	ldr	r2, [pc, #284]	; (80050e8 <HAL_DMA_Init+0x698>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a45      	ldr	r2, [pc, #276]	; (80050ec <HAL_DMA_Init+0x69c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01d      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a44      	ldr	r2, [pc, #272]	; (80050f0 <HAL_DMA_Init+0x6a0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a42      	ldr	r2, [pc, #264]	; (80050f4 <HAL_DMA_Init+0x6a4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a41      	ldr	r2, [pc, #260]	; (80050f8 <HAL_DMA_Init+0x6a8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a3f      	ldr	r2, [pc, #252]	; (80050fc <HAL_DMA_Init+0x6ac>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a3e      	ldr	r2, [pc, #248]	; (8005100 <HAL_DMA_Init+0x6b0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_DMA_Init+0x5c6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a3c      	ldr	r2, [pc, #240]	; (8005104 <HAL_DMA_Init+0x6b4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d101      	bne.n	800501a <HAL_DMA_Init+0x5ca>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_DMA_Init+0x5cc>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d032      	beq.n	8005086 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f001 fceb 	bl	80069fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d102      	bne.n	8005034 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005048:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d010      	beq.n	8005074 <HAL_DMA_Init+0x624>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b08      	cmp	r3, #8
 8005058:	d80c      	bhi.n	8005074 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 fd68 	bl	8006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	e008      	b.n	8005086 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	a7fdabf8 	.word	0xa7fdabf8
 80050a4:	cccccccd 	.word	0xcccccccd
 80050a8:	40020010 	.word	0x40020010
 80050ac:	40020028 	.word	0x40020028
 80050b0:	40020040 	.word	0x40020040
 80050b4:	40020058 	.word	0x40020058
 80050b8:	40020070 	.word	0x40020070
 80050bc:	40020088 	.word	0x40020088
 80050c0:	400200a0 	.word	0x400200a0
 80050c4:	400200b8 	.word	0x400200b8
 80050c8:	40020410 	.word	0x40020410
 80050cc:	40020428 	.word	0x40020428
 80050d0:	40020440 	.word	0x40020440
 80050d4:	40020458 	.word	0x40020458
 80050d8:	40020470 	.word	0x40020470
 80050dc:	40020488 	.word	0x40020488
 80050e0:	400204a0 	.word	0x400204a0
 80050e4:	400204b8 	.word	0x400204b8
 80050e8:	58025408 	.word	0x58025408
 80050ec:	5802541c 	.word	0x5802541c
 80050f0:	58025430 	.word	0x58025430
 80050f4:	58025444 	.word	0x58025444
 80050f8:	58025458 	.word	0x58025458
 80050fc:	5802546c 	.word	0x5802546c
 8005100:	58025480 	.word	0x58025480
 8005104:	58025494 	.word	0x58025494

08005108 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e226      	b.n	8005572 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_DMA_Start_IT+0x2a>
 800512e:	2302      	movs	r3, #2
 8005130:	e21f      	b.n	8005572 <HAL_DMA_Start_IT+0x46a>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	f040 820a 	bne.w	800555c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a68      	ldr	r2, [pc, #416]	; (80052fc <HAL_DMA_Start_IT+0x1f4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d04a      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a66      	ldr	r2, [pc, #408]	; (8005300 <HAL_DMA_Start_IT+0x1f8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d045      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a65      	ldr	r2, [pc, #404]	; (8005304 <HAL_DMA_Start_IT+0x1fc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d040      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a63      	ldr	r2, [pc, #396]	; (8005308 <HAL_DMA_Start_IT+0x200>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d03b      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a62      	ldr	r2, [pc, #392]	; (800530c <HAL_DMA_Start_IT+0x204>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d036      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a60      	ldr	r2, [pc, #384]	; (8005310 <HAL_DMA_Start_IT+0x208>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d031      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a5f      	ldr	r2, [pc, #380]	; (8005314 <HAL_DMA_Start_IT+0x20c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d02c      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a5d      	ldr	r2, [pc, #372]	; (8005318 <HAL_DMA_Start_IT+0x210>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d027      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a5c      	ldr	r2, [pc, #368]	; (800531c <HAL_DMA_Start_IT+0x214>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d022      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a5a      	ldr	r2, [pc, #360]	; (8005320 <HAL_DMA_Start_IT+0x218>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01d      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a59      	ldr	r2, [pc, #356]	; (8005324 <HAL_DMA_Start_IT+0x21c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d018      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a57      	ldr	r2, [pc, #348]	; (8005328 <HAL_DMA_Start_IT+0x220>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a56      	ldr	r2, [pc, #344]	; (800532c <HAL_DMA_Start_IT+0x224>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a54      	ldr	r2, [pc, #336]	; (8005330 <HAL_DMA_Start_IT+0x228>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a53      	ldr	r2, [pc, #332]	; (8005334 <HAL_DMA_Start_IT+0x22c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_DMA_Start_IT+0xee>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a51      	ldr	r2, [pc, #324]	; (8005338 <HAL_DMA_Start_IT+0x230>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d108      	bne.n	8005208 <HAL_DMA_Start_IT+0x100>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	e007      	b.n	8005218 <HAL_DMA_Start_IT+0x110>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f001 f912 	bl	8006448 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a34      	ldr	r2, [pc, #208]	; (80052fc <HAL_DMA_Start_IT+0x1f4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04a      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a33      	ldr	r2, [pc, #204]	; (8005300 <HAL_DMA_Start_IT+0x1f8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d045      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a31      	ldr	r2, [pc, #196]	; (8005304 <HAL_DMA_Start_IT+0x1fc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d040      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a30      	ldr	r2, [pc, #192]	; (8005308 <HAL_DMA_Start_IT+0x200>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03b      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2e      	ldr	r2, [pc, #184]	; (800530c <HAL_DMA_Start_IT+0x204>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d036      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2d      	ldr	r2, [pc, #180]	; (8005310 <HAL_DMA_Start_IT+0x208>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d031      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2b      	ldr	r2, [pc, #172]	; (8005314 <HAL_DMA_Start_IT+0x20c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02c      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2a      	ldr	r2, [pc, #168]	; (8005318 <HAL_DMA_Start_IT+0x210>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d027      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a28      	ldr	r2, [pc, #160]	; (800531c <HAL_DMA_Start_IT+0x214>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a27      	ldr	r2, [pc, #156]	; (8005320 <HAL_DMA_Start_IT+0x218>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d01d      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a25      	ldr	r2, [pc, #148]	; (8005324 <HAL_DMA_Start_IT+0x21c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a24      	ldr	r2, [pc, #144]	; (8005328 <HAL_DMA_Start_IT+0x220>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a22      	ldr	r2, [pc, #136]	; (800532c <HAL_DMA_Start_IT+0x224>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a21      	ldr	r2, [pc, #132]	; (8005330 <HAL_DMA_Start_IT+0x228>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <HAL_DMA_Start_IT+0x22c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_DMA_Start_IT+0x1bc>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <HAL_DMA_Start_IT+0x230>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_DMA_Start_IT+0x1c0>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_DMA_Start_IT+0x1c2>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d036      	beq.n	800533c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f023 021e 	bic.w	r2, r3, #30
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0216 	orr.w	r2, r2, #22
 80052e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d03e      	beq.n	8005368 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0208 	orr.w	r2, r2, #8
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e035      	b.n	8005368 <HAL_DMA_Start_IT+0x260>
 80052fc:	40020010 	.word	0x40020010
 8005300:	40020028 	.word	0x40020028
 8005304:	40020040 	.word	0x40020040
 8005308:	40020058 	.word	0x40020058
 800530c:	40020070 	.word	0x40020070
 8005310:	40020088 	.word	0x40020088
 8005314:	400200a0 	.word	0x400200a0
 8005318:	400200b8 	.word	0x400200b8
 800531c:	40020410 	.word	0x40020410
 8005320:	40020428 	.word	0x40020428
 8005324:	40020440 	.word	0x40020440
 8005328:	40020458 	.word	0x40020458
 800532c:	40020470 	.word	0x40020470
 8005330:	40020488 	.word	0x40020488
 8005334:	400204a0 	.word	0x400204a0
 8005338:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 020e 	bic.w	r2, r3, #14
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 020a 	orr.w	r2, r2, #10
 800534e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0204 	orr.w	r2, r2, #4
 8005366:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a83      	ldr	r2, [pc, #524]	; (800557c <HAL_DMA_Start_IT+0x474>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d072      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a82      	ldr	r2, [pc, #520]	; (8005580 <HAL_DMA_Start_IT+0x478>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d06d      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a80      	ldr	r2, [pc, #512]	; (8005584 <HAL_DMA_Start_IT+0x47c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d068      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a7f      	ldr	r2, [pc, #508]	; (8005588 <HAL_DMA_Start_IT+0x480>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d063      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a7d      	ldr	r2, [pc, #500]	; (800558c <HAL_DMA_Start_IT+0x484>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d05e      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7c      	ldr	r2, [pc, #496]	; (8005590 <HAL_DMA_Start_IT+0x488>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d059      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7a      	ldr	r2, [pc, #488]	; (8005594 <HAL_DMA_Start_IT+0x48c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d054      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a79      	ldr	r2, [pc, #484]	; (8005598 <HAL_DMA_Start_IT+0x490>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d04f      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a77      	ldr	r2, [pc, #476]	; (800559c <HAL_DMA_Start_IT+0x494>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d04a      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a76      	ldr	r2, [pc, #472]	; (80055a0 <HAL_DMA_Start_IT+0x498>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d045      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a74      	ldr	r2, [pc, #464]	; (80055a4 <HAL_DMA_Start_IT+0x49c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d040      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a73      	ldr	r2, [pc, #460]	; (80055a8 <HAL_DMA_Start_IT+0x4a0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d03b      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a71      	ldr	r2, [pc, #452]	; (80055ac <HAL_DMA_Start_IT+0x4a4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d036      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a70      	ldr	r2, [pc, #448]	; (80055b0 <HAL_DMA_Start_IT+0x4a8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d031      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a6e      	ldr	r2, [pc, #440]	; (80055b4 <HAL_DMA_Start_IT+0x4ac>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d02c      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a6d      	ldr	r2, [pc, #436]	; (80055b8 <HAL_DMA_Start_IT+0x4b0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d027      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a6b      	ldr	r2, [pc, #428]	; (80055bc <HAL_DMA_Start_IT+0x4b4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d022      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6a      	ldr	r2, [pc, #424]	; (80055c0 <HAL_DMA_Start_IT+0x4b8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d01d      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a68      	ldr	r2, [pc, #416]	; (80055c4 <HAL_DMA_Start_IT+0x4bc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d018      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a67      	ldr	r2, [pc, #412]	; (80055c8 <HAL_DMA_Start_IT+0x4c0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d013      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a65      	ldr	r2, [pc, #404]	; (80055cc <HAL_DMA_Start_IT+0x4c4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00e      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a64      	ldr	r2, [pc, #400]	; (80055d0 <HAL_DMA_Start_IT+0x4c8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d009      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a62      	ldr	r2, [pc, #392]	; (80055d4 <HAL_DMA_Start_IT+0x4cc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <HAL_DMA_Start_IT+0x350>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a61      	ldr	r2, [pc, #388]	; (80055d8 <HAL_DMA_Start_IT+0x4d0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d101      	bne.n	800545c <HAL_DMA_Start_IT+0x354>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_DMA_Start_IT+0x356>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01a      	beq.n	8005498 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005496:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a37      	ldr	r2, [pc, #220]	; (800557c <HAL_DMA_Start_IT+0x474>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d04a      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a36      	ldr	r2, [pc, #216]	; (8005580 <HAL_DMA_Start_IT+0x478>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d045      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a34      	ldr	r2, [pc, #208]	; (8005584 <HAL_DMA_Start_IT+0x47c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d040      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a33      	ldr	r2, [pc, #204]	; (8005588 <HAL_DMA_Start_IT+0x480>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d03b      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a31      	ldr	r2, [pc, #196]	; (800558c <HAL_DMA_Start_IT+0x484>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d036      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a30      	ldr	r2, [pc, #192]	; (8005590 <HAL_DMA_Start_IT+0x488>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d031      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a2e      	ldr	r2, [pc, #184]	; (8005594 <HAL_DMA_Start_IT+0x48c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d02c      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2d      	ldr	r2, [pc, #180]	; (8005598 <HAL_DMA_Start_IT+0x490>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d027      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2b      	ldr	r2, [pc, #172]	; (800559c <HAL_DMA_Start_IT+0x494>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d022      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2a      	ldr	r2, [pc, #168]	; (80055a0 <HAL_DMA_Start_IT+0x498>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d01d      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a28      	ldr	r2, [pc, #160]	; (80055a4 <HAL_DMA_Start_IT+0x49c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a27      	ldr	r2, [pc, #156]	; (80055a8 <HAL_DMA_Start_IT+0x4a0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a25      	ldr	r2, [pc, #148]	; (80055ac <HAL_DMA_Start_IT+0x4a4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <HAL_DMA_Start_IT+0x4a8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a22      	ldr	r2, [pc, #136]	; (80055b4 <HAL_DMA_Start_IT+0x4ac>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_DMA_Start_IT+0x430>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a21      	ldr	r2, [pc, #132]	; (80055b8 <HAL_DMA_Start_IT+0x4b0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d108      	bne.n	800554a <HAL_DMA_Start_IT+0x442>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	e012      	b.n	8005570 <HAL_DMA_Start_IT+0x468>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e009      	b.n	8005570 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800556a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005570:	7dfb      	ldrb	r3, [r7, #23]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40020010 	.word	0x40020010
 8005580:	40020028 	.word	0x40020028
 8005584:	40020040 	.word	0x40020040
 8005588:	40020058 	.word	0x40020058
 800558c:	40020070 	.word	0x40020070
 8005590:	40020088 	.word	0x40020088
 8005594:	400200a0 	.word	0x400200a0
 8005598:	400200b8 	.word	0x400200b8
 800559c:	40020410 	.word	0x40020410
 80055a0:	40020428 	.word	0x40020428
 80055a4:	40020440 	.word	0x40020440
 80055a8:	40020458 	.word	0x40020458
 80055ac:	40020470 	.word	0x40020470
 80055b0:	40020488 	.word	0x40020488
 80055b4:	400204a0 	.word	0x400204a0
 80055b8:	400204b8 	.word	0x400204b8
 80055bc:	58025408 	.word	0x58025408
 80055c0:	5802541c 	.word	0x5802541c
 80055c4:	58025430 	.word	0x58025430
 80055c8:	58025444 	.word	0x58025444
 80055cc:	58025458 	.word	0x58025458
 80055d0:	5802546c 	.word	0x5802546c
 80055d4:	58025480 	.word	0x58025480
 80055d8:	58025494 	.word	0x58025494

080055dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08a      	sub	sp, #40	; 0x28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055e8:	4b67      	ldr	r3, [pc, #412]	; (8005788 <HAL_DMA_IRQHandler+0x1ac>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a67      	ldr	r2, [pc, #412]	; (800578c <HAL_DMA_IRQHandler+0x1b0>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	0a9b      	lsrs	r3, r3, #10
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a5f      	ldr	r2, [pc, #380]	; (8005790 <HAL_DMA_IRQHandler+0x1b4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d04a      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5d      	ldr	r2, [pc, #372]	; (8005794 <HAL_DMA_IRQHandler+0x1b8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d045      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5c      	ldr	r2, [pc, #368]	; (8005798 <HAL_DMA_IRQHandler+0x1bc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d040      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a5a      	ldr	r2, [pc, #360]	; (800579c <HAL_DMA_IRQHandler+0x1c0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d03b      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a59      	ldr	r2, [pc, #356]	; (80057a0 <HAL_DMA_IRQHandler+0x1c4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d036      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a57      	ldr	r2, [pc, #348]	; (80057a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d031      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a56      	ldr	r2, [pc, #344]	; (80057a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d02c      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a54      	ldr	r2, [pc, #336]	; (80057ac <HAL_DMA_IRQHandler+0x1d0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d027      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a53      	ldr	r2, [pc, #332]	; (80057b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d022      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a51      	ldr	r2, [pc, #324]	; (80057b4 <HAL_DMA_IRQHandler+0x1d8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01d      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a50      	ldr	r2, [pc, #320]	; (80057b8 <HAL_DMA_IRQHandler+0x1dc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4e      	ldr	r2, [pc, #312]	; (80057bc <HAL_DMA_IRQHandler+0x1e0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4d      	ldr	r2, [pc, #308]	; (80057c0 <HAL_DMA_IRQHandler+0x1e4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a4b      	ldr	r2, [pc, #300]	; (80057c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a4a      	ldr	r2, [pc, #296]	; (80057c8 <HAL_DMA_IRQHandler+0x1ec>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_DMA_IRQHandler+0xd2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a48      	ldr	r2, [pc, #288]	; (80057cc <HAL_DMA_IRQHandler+0x1f0>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d101      	bne.n	80056b2 <HAL_DMA_IRQHandler+0xd6>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_DMA_IRQHandler+0xd8>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 842b 	beq.w	8005f10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	2208      	movs	r2, #8
 80056c4:	409a      	lsls	r2, r3
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80a2 	beq.w	8005814 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2e      	ldr	r2, [pc, #184]	; (8005790 <HAL_DMA_IRQHandler+0x1b4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d04a      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <HAL_DMA_IRQHandler+0x1b8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d045      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <HAL_DMA_IRQHandler+0x1bc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d040      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <HAL_DMA_IRQHandler+0x1c0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d03b      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a28      	ldr	r2, [pc, #160]	; (80057a0 <HAL_DMA_IRQHandler+0x1c4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d036      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a27      	ldr	r2, [pc, #156]	; (80057a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d031      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d02c      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a24      	ldr	r2, [pc, #144]	; (80057ac <HAL_DMA_IRQHandler+0x1d0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d027      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d022      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <HAL_DMA_IRQHandler+0x1d8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d01d      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <HAL_DMA_IRQHandler+0x1dc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d018      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <HAL_DMA_IRQHandler+0x1e0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d013      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_DMA_IRQHandler+0x1e4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00e      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d009      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a19      	ldr	r2, [pc, #100]	; (80057c8 <HAL_DMA_IRQHandler+0x1ec>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_DMA_IRQHandler+0x194>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a18      	ldr	r2, [pc, #96]	; (80057cc <HAL_DMA_IRQHandler+0x1f0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d12f      	bne.n	80057d0 <HAL_DMA_IRQHandler+0x1f4>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf14      	ite	ne
 800577e:	2301      	movne	r3, #1
 8005780:	2300      	moveq	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	e02e      	b.n	80057e4 <HAL_DMA_IRQHandler+0x208>
 8005786:	bf00      	nop
 8005788:	24000000 	.word	0x24000000
 800578c:	1b4e81b5 	.word	0x1b4e81b5
 8005790:	40020010 	.word	0x40020010
 8005794:	40020028 	.word	0x40020028
 8005798:	40020040 	.word	0x40020040
 800579c:	40020058 	.word	0x40020058
 80057a0:	40020070 	.word	0x40020070
 80057a4:	40020088 	.word	0x40020088
 80057a8:	400200a0 	.word	0x400200a0
 80057ac:	400200b8 	.word	0x400200b8
 80057b0:	40020410 	.word	0x40020410
 80057b4:	40020428 	.word	0x40020428
 80057b8:	40020440 	.word	0x40020440
 80057bc:	40020458 	.word	0x40020458
 80057c0:	40020470 	.word	0x40020470
 80057c4:	40020488 	.word	0x40020488
 80057c8:	400204a0 	.word	0x400204a0
 80057cc:	400204b8 	.word	0x400204b8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bf14      	ite	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	2300      	moveq	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d015      	beq.n	8005814 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0204 	bic.w	r2, r2, #4
 80057f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	2208      	movs	r2, #8
 8005802:	409a      	lsls	r2, r3
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580c:	f043 0201 	orr.w	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	fa22 f303 	lsr.w	r3, r2, r3
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d06e      	beq.n	8005908 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a69      	ldr	r2, [pc, #420]	; (80059d4 <HAL_DMA_IRQHandler+0x3f8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d04a      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a67      	ldr	r2, [pc, #412]	; (80059d8 <HAL_DMA_IRQHandler+0x3fc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d045      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a66      	ldr	r2, [pc, #408]	; (80059dc <HAL_DMA_IRQHandler+0x400>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d040      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a64      	ldr	r2, [pc, #400]	; (80059e0 <HAL_DMA_IRQHandler+0x404>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d03b      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a63      	ldr	r2, [pc, #396]	; (80059e4 <HAL_DMA_IRQHandler+0x408>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d036      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a61      	ldr	r2, [pc, #388]	; (80059e8 <HAL_DMA_IRQHandler+0x40c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d031      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a60      	ldr	r2, [pc, #384]	; (80059ec <HAL_DMA_IRQHandler+0x410>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d02c      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a5e      	ldr	r2, [pc, #376]	; (80059f0 <HAL_DMA_IRQHandler+0x414>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d027      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5d      	ldr	r2, [pc, #372]	; (80059f4 <HAL_DMA_IRQHandler+0x418>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d022      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5b      	ldr	r2, [pc, #364]	; (80059f8 <HAL_DMA_IRQHandler+0x41c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01d      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a5a      	ldr	r2, [pc, #360]	; (80059fc <HAL_DMA_IRQHandler+0x420>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d018      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a58      	ldr	r2, [pc, #352]	; (8005a00 <HAL_DMA_IRQHandler+0x424>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a57      	ldr	r2, [pc, #348]	; (8005a04 <HAL_DMA_IRQHandler+0x428>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a55      	ldr	r2, [pc, #340]	; (8005a08 <HAL_DMA_IRQHandler+0x42c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a54      	ldr	r2, [pc, #336]	; (8005a0c <HAL_DMA_IRQHandler+0x430>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_DMA_IRQHandler+0x2ee>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a52      	ldr	r2, [pc, #328]	; (8005a10 <HAL_DMA_IRQHandler+0x434>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d10a      	bne.n	80058e0 <HAL_DMA_IRQHandler+0x304>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e003      	b.n	80058e8 <HAL_DMA_IRQHandler+0x30c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2300      	movs	r3, #0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00d      	beq.n	8005908 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2201      	movs	r2, #1
 80058f6:	409a      	lsls	r2, r3
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005900:	f043 0202 	orr.w	r2, r3, #2
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590c:	f003 031f 	and.w	r3, r3, #31
 8005910:	2204      	movs	r2, #4
 8005912:	409a      	lsls	r2, r3
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 808f 	beq.w	8005a3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <HAL_DMA_IRQHandler+0x3f8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d04a      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a2a      	ldr	r2, [pc, #168]	; (80059d8 <HAL_DMA_IRQHandler+0x3fc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d045      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a29      	ldr	r2, [pc, #164]	; (80059dc <HAL_DMA_IRQHandler+0x400>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d040      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <HAL_DMA_IRQHandler+0x404>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d03b      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <HAL_DMA_IRQHandler+0x408>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d036      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a24      	ldr	r2, [pc, #144]	; (80059e8 <HAL_DMA_IRQHandler+0x40c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d031      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a23      	ldr	r2, [pc, #140]	; (80059ec <HAL_DMA_IRQHandler+0x410>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d02c      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a21      	ldr	r2, [pc, #132]	; (80059f0 <HAL_DMA_IRQHandler+0x414>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d027      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <HAL_DMA_IRQHandler+0x418>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d022      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1e      	ldr	r2, [pc, #120]	; (80059f8 <HAL_DMA_IRQHandler+0x41c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01d      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_DMA_IRQHandler+0x420>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <HAL_DMA_IRQHandler+0x424>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <HAL_DMA_IRQHandler+0x428>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <HAL_DMA_IRQHandler+0x42c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_DMA_IRQHandler+0x430>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_DMA_IRQHandler+0x3e2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_DMA_IRQHandler+0x434>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d12a      	bne.n	8005a14 <HAL_DMA_IRQHandler+0x438>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e023      	b.n	8005a1c <HAL_DMA_IRQHandler+0x440>
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	2204      	movs	r2, #4
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	f043 0204 	orr.w	r2, r3, #4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2210      	movs	r2, #16
 8005a46:	409a      	lsls	r2, r3
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80a6 	beq.w	8005b9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a85      	ldr	r2, [pc, #532]	; (8005c6c <HAL_DMA_IRQHandler+0x690>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d04a      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a83      	ldr	r2, [pc, #524]	; (8005c70 <HAL_DMA_IRQHandler+0x694>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d045      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a82      	ldr	r2, [pc, #520]	; (8005c74 <HAL_DMA_IRQHandler+0x698>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d040      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a80      	ldr	r2, [pc, #512]	; (8005c78 <HAL_DMA_IRQHandler+0x69c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d03b      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a7f      	ldr	r2, [pc, #508]	; (8005c7c <HAL_DMA_IRQHandler+0x6a0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d036      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7d      	ldr	r2, [pc, #500]	; (8005c80 <HAL_DMA_IRQHandler+0x6a4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d031      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7c      	ldr	r2, [pc, #496]	; (8005c84 <HAL_DMA_IRQHandler+0x6a8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d02c      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a7a      	ldr	r2, [pc, #488]	; (8005c88 <HAL_DMA_IRQHandler+0x6ac>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d027      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a79      	ldr	r2, [pc, #484]	; (8005c8c <HAL_DMA_IRQHandler+0x6b0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d022      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a77      	ldr	r2, [pc, #476]	; (8005c90 <HAL_DMA_IRQHandler+0x6b4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01d      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a76      	ldr	r2, [pc, #472]	; (8005c94 <HAL_DMA_IRQHandler+0x6b8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d018      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a74      	ldr	r2, [pc, #464]	; (8005c98 <HAL_DMA_IRQHandler+0x6bc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a73      	ldr	r2, [pc, #460]	; (8005c9c <HAL_DMA_IRQHandler+0x6c0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00e      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a71      	ldr	r2, [pc, #452]	; (8005ca0 <HAL_DMA_IRQHandler+0x6c4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a70      	ldr	r2, [pc, #448]	; (8005ca4 <HAL_DMA_IRQHandler+0x6c8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d004      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x516>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a6e      	ldr	r2, [pc, #440]	; (8005ca8 <HAL_DMA_IRQHandler+0x6cc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10a      	bne.n	8005b08 <HAL_DMA_IRQHandler+0x52c>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	e009      	b.n	8005b1c <HAL_DMA_IRQHandler+0x540>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d03e      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2210      	movs	r2, #16
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d018      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d024      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
 8005b5c:	e01f      	b.n	8005b9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01b      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4798      	blx	r3
 8005b6e:	e016      	b.n	8005b9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d107      	bne.n	8005b8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0208 	bic.w	r2, r2, #8
 8005b8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8110 	beq.w	8005dd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a2c      	ldr	r2, [pc, #176]	; (8005c6c <HAL_DMA_IRQHandler+0x690>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d04a      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2b      	ldr	r2, [pc, #172]	; (8005c70 <HAL_DMA_IRQHandler+0x694>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d045      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a29      	ldr	r2, [pc, #164]	; (8005c74 <HAL_DMA_IRQHandler+0x698>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d040      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a28      	ldr	r2, [pc, #160]	; (8005c78 <HAL_DMA_IRQHandler+0x69c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d03b      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <HAL_DMA_IRQHandler+0x6a0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d036      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <HAL_DMA_IRQHandler+0x6a4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d031      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a23      	ldr	r2, [pc, #140]	; (8005c84 <HAL_DMA_IRQHandler+0x6a8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d02c      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <HAL_DMA_IRQHandler+0x6ac>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d027      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <HAL_DMA_IRQHandler+0x6b0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d022      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <HAL_DMA_IRQHandler+0x6b4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d01d      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <HAL_DMA_IRQHandler+0x6b8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d018      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <HAL_DMA_IRQHandler+0x6bc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1a      	ldr	r2, [pc, #104]	; (8005c9c <HAL_DMA_IRQHandler+0x6c0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <HAL_DMA_IRQHandler+0x6c4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <HAL_DMA_IRQHandler+0x6c8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_DMA_IRQHandler+0x678>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a16      	ldr	r2, [pc, #88]	; (8005ca8 <HAL_DMA_IRQHandler+0x6cc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d12b      	bne.n	8005cac <HAL_DMA_IRQHandler+0x6d0>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bf14      	ite	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	2300      	moveq	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	e02a      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x6e4>
 8005c6a:	bf00      	nop
 8005c6c:	40020010 	.word	0x40020010
 8005c70:	40020028 	.word	0x40020028
 8005c74:	40020040 	.word	0x40020040
 8005c78:	40020058 	.word	0x40020058
 8005c7c:	40020070 	.word	0x40020070
 8005c80:	40020088 	.word	0x40020088
 8005c84:	400200a0 	.word	0x400200a0
 8005c88:	400200b8 	.word	0x400200b8
 8005c8c:	40020410 	.word	0x40020410
 8005c90:	40020428 	.word	0x40020428
 8005c94:	40020440 	.word	0x40020440
 8005c98:	40020458 	.word	0x40020458
 8005c9c:	40020470 	.word	0x40020470
 8005ca0:	40020488 	.word	0x40020488
 8005ca4:	400204a0 	.word	0x400204a0
 8005ca8:	400204b8 	.word	0x400204b8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bf14      	ite	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	2300      	moveq	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8087 	beq.w	8005dd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2220      	movs	r2, #32
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d139      	bne.n	8005d56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0216 	bic.w	r2, r2, #22
 8005cf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <HAL_DMA_IRQHandler+0x736>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0208 	bic.w	r2, r2, #8
 8005d20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d26:	f003 031f 	and.w	r3, r3, #31
 8005d2a:	223f      	movs	r2, #63	; 0x3f
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 834a 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4798      	blx	r3
          }
          return;
 8005d54:	e344      	b.n	80063e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d018      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d108      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02c      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
 8005d82:	e027      	b.n	8005dd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d023      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
 8005d94:	e01e      	b.n	8005dd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10f      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0210 	bic.w	r2, r2, #16
 8005db2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8306 	beq.w	80063ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8088 	beq.w	8005efc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2204      	movs	r2, #4
 8005df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a7a      	ldr	r2, [pc, #488]	; (8005fe4 <HAL_DMA_IRQHandler+0xa08>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d04a      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a79      	ldr	r2, [pc, #484]	; (8005fe8 <HAL_DMA_IRQHandler+0xa0c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d045      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a77      	ldr	r2, [pc, #476]	; (8005fec <HAL_DMA_IRQHandler+0xa10>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d040      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a76      	ldr	r2, [pc, #472]	; (8005ff0 <HAL_DMA_IRQHandler+0xa14>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d03b      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a74      	ldr	r2, [pc, #464]	; (8005ff4 <HAL_DMA_IRQHandler+0xa18>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d036      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a73      	ldr	r2, [pc, #460]	; (8005ff8 <HAL_DMA_IRQHandler+0xa1c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d031      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a71      	ldr	r2, [pc, #452]	; (8005ffc <HAL_DMA_IRQHandler+0xa20>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d02c      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a70      	ldr	r2, [pc, #448]	; (8006000 <HAL_DMA_IRQHandler+0xa24>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d027      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a6e      	ldr	r2, [pc, #440]	; (8006004 <HAL_DMA_IRQHandler+0xa28>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d022      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a6d      	ldr	r2, [pc, #436]	; (8006008 <HAL_DMA_IRQHandler+0xa2c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d01d      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a6b      	ldr	r2, [pc, #428]	; (800600c <HAL_DMA_IRQHandler+0xa30>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d018      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a6a      	ldr	r2, [pc, #424]	; (8006010 <HAL_DMA_IRQHandler+0xa34>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a68      	ldr	r2, [pc, #416]	; (8006014 <HAL_DMA_IRQHandler+0xa38>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00e      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a67      	ldr	r2, [pc, #412]	; (8006018 <HAL_DMA_IRQHandler+0xa3c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a65      	ldr	r2, [pc, #404]	; (800601c <HAL_DMA_IRQHandler+0xa40>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x8b8>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a64      	ldr	r2, [pc, #400]	; (8006020 <HAL_DMA_IRQHandler+0xa44>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d108      	bne.n	8005ea6 <HAL_DMA_IRQHandler+0x8ca>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e007      	b.n	8005eb6 <HAL_DMA_IRQHandler+0x8da>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d307      	bcc.n	8005ed2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f2      	bne.n	8005eb6 <HAL_DMA_IRQHandler+0x8da>
 8005ed0:	e000      	b.n	8005ed4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ed2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2203      	movs	r2, #3
 8005eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005ef2:	e003      	b.n	8005efc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8272 	beq.w	80063ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
 8005f0e:	e26c      	b.n	80063ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a43      	ldr	r2, [pc, #268]	; (8006024 <HAL_DMA_IRQHandler+0xa48>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d022      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x984>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a42      	ldr	r2, [pc, #264]	; (8006028 <HAL_DMA_IRQHandler+0xa4c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d01d      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x984>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a40      	ldr	r2, [pc, #256]	; (800602c <HAL_DMA_IRQHandler+0xa50>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d018      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x984>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a3f      	ldr	r2, [pc, #252]	; (8006030 <HAL_DMA_IRQHandler+0xa54>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d013      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x984>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a3d      	ldr	r2, [pc, #244]	; (8006034 <HAL_DMA_IRQHandler+0xa58>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00e      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x984>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a3c      	ldr	r2, [pc, #240]	; (8006038 <HAL_DMA_IRQHandler+0xa5c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d009      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x984>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a3a      	ldr	r2, [pc, #232]	; (800603c <HAL_DMA_IRQHandler+0xa60>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x984>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a39      	ldr	r2, [pc, #228]	; (8006040 <HAL_DMA_IRQHandler+0xa64>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d101      	bne.n	8005f64 <HAL_DMA_IRQHandler+0x988>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <HAL_DMA_IRQHandler+0x98a>
 8005f64:	2300      	movs	r3, #0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 823f 	beq.w	80063ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f78:	f003 031f 	and.w	r3, r3, #31
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	409a      	lsls	r2, r3
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 80cd 	beq.w	8006124 <HAL_DMA_IRQHandler+0xb48>
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 80c7 	beq.w	8006124 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	409a      	lsls	r2, r3
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d049      	beq.n	8006044 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8210 	beq.w	80063e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fcc:	e20a      	b.n	80063e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8206 	beq.w	80063e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fe0:	e200      	b.n	80063e4 <HAL_DMA_IRQHandler+0xe08>
 8005fe2:	bf00      	nop
 8005fe4:	40020010 	.word	0x40020010
 8005fe8:	40020028 	.word	0x40020028
 8005fec:	40020040 	.word	0x40020040
 8005ff0:	40020058 	.word	0x40020058
 8005ff4:	40020070 	.word	0x40020070
 8005ff8:	40020088 	.word	0x40020088
 8005ffc:	400200a0 	.word	0x400200a0
 8006000:	400200b8 	.word	0x400200b8
 8006004:	40020410 	.word	0x40020410
 8006008:	40020428 	.word	0x40020428
 800600c:	40020440 	.word	0x40020440
 8006010:	40020458 	.word	0x40020458
 8006014:	40020470 	.word	0x40020470
 8006018:	40020488 	.word	0x40020488
 800601c:	400204a0 	.word	0x400204a0
 8006020:	400204b8 	.word	0x400204b8
 8006024:	58025408 	.word	0x58025408
 8006028:	5802541c 	.word	0x5802541c
 800602c:	58025430 	.word	0x58025430
 8006030:	58025444 	.word	0x58025444
 8006034:	58025458 	.word	0x58025458
 8006038:	5802546c 	.word	0x5802546c
 800603c:	58025480 	.word	0x58025480
 8006040:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d160      	bne.n	8006110 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a8c      	ldr	r2, [pc, #560]	; (8006284 <HAL_DMA_IRQHandler+0xca8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d04a      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a8a      	ldr	r2, [pc, #552]	; (8006288 <HAL_DMA_IRQHandler+0xcac>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d045      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a89      	ldr	r2, [pc, #548]	; (800628c <HAL_DMA_IRQHandler+0xcb0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d040      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a87      	ldr	r2, [pc, #540]	; (8006290 <HAL_DMA_IRQHandler+0xcb4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d03b      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a86      	ldr	r2, [pc, #536]	; (8006294 <HAL_DMA_IRQHandler+0xcb8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d036      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a84      	ldr	r2, [pc, #528]	; (8006298 <HAL_DMA_IRQHandler+0xcbc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d031      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a83      	ldr	r2, [pc, #524]	; (800629c <HAL_DMA_IRQHandler+0xcc0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d02c      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a81      	ldr	r2, [pc, #516]	; (80062a0 <HAL_DMA_IRQHandler+0xcc4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d027      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a80      	ldr	r2, [pc, #512]	; (80062a4 <HAL_DMA_IRQHandler+0xcc8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d022      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a7e      	ldr	r2, [pc, #504]	; (80062a8 <HAL_DMA_IRQHandler+0xccc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01d      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a7d      	ldr	r2, [pc, #500]	; (80062ac <HAL_DMA_IRQHandler+0xcd0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d018      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a7b      	ldr	r2, [pc, #492]	; (80062b0 <HAL_DMA_IRQHandler+0xcd4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a7a      	ldr	r2, [pc, #488]	; (80062b4 <HAL_DMA_IRQHandler+0xcd8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a78      	ldr	r2, [pc, #480]	; (80062b8 <HAL_DMA_IRQHandler+0xcdc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a77      	ldr	r2, [pc, #476]	; (80062bc <HAL_DMA_IRQHandler+0xce0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_DMA_IRQHandler+0xb12>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a75      	ldr	r2, [pc, #468]	; (80062c0 <HAL_DMA_IRQHandler+0xce4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d108      	bne.n	8006100 <HAL_DMA_IRQHandler+0xb24>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0208 	bic.w	r2, r2, #8
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e007      	b.n	8006110 <HAL_DMA_IRQHandler+0xb34>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0204 	bic.w	r2, r2, #4
 800610e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 8165 	beq.w	80063e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006122:	e15f      	b.n	80063e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	2202      	movs	r2, #2
 800612e:	409a      	lsls	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80c5 	beq.w	80062c4 <HAL_DMA_IRQHandler+0xce8>
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80bf 	beq.w	80062c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	2202      	movs	r2, #2
 8006150:	409a      	lsls	r2, r3
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d018      	beq.n	8006192 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 813a 	beq.w	80063e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800617c:	e134      	b.n	80063e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8130 	beq.w	80063e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006190:	e12a      	b.n	80063e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d168      	bne.n	800626e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a38      	ldr	r2, [pc, #224]	; (8006284 <HAL_DMA_IRQHandler+0xca8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d04a      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a37      	ldr	r2, [pc, #220]	; (8006288 <HAL_DMA_IRQHandler+0xcac>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d045      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a35      	ldr	r2, [pc, #212]	; (800628c <HAL_DMA_IRQHandler+0xcb0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d040      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a34      	ldr	r2, [pc, #208]	; (8006290 <HAL_DMA_IRQHandler+0xcb4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d03b      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a32      	ldr	r2, [pc, #200]	; (8006294 <HAL_DMA_IRQHandler+0xcb8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d036      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a31      	ldr	r2, [pc, #196]	; (8006298 <HAL_DMA_IRQHandler+0xcbc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d031      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2f      	ldr	r2, [pc, #188]	; (800629c <HAL_DMA_IRQHandler+0xcc0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02c      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2e      	ldr	r2, [pc, #184]	; (80062a0 <HAL_DMA_IRQHandler+0xcc4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d027      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a2c      	ldr	r2, [pc, #176]	; (80062a4 <HAL_DMA_IRQHandler+0xcc8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a2b      	ldr	r2, [pc, #172]	; (80062a8 <HAL_DMA_IRQHandler+0xccc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d01d      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a29      	ldr	r2, [pc, #164]	; (80062ac <HAL_DMA_IRQHandler+0xcd0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a28      	ldr	r2, [pc, #160]	; (80062b0 <HAL_DMA_IRQHandler+0xcd4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a26      	ldr	r2, [pc, #152]	; (80062b4 <HAL_DMA_IRQHandler+0xcd8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a25      	ldr	r2, [pc, #148]	; (80062b8 <HAL_DMA_IRQHandler+0xcdc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a23      	ldr	r2, [pc, #140]	; (80062bc <HAL_DMA_IRQHandler+0xce0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_DMA_IRQHandler+0xc60>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <HAL_DMA_IRQHandler+0xce4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d108      	bne.n	800624e <HAL_DMA_IRQHandler+0xc72>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0214 	bic.w	r2, r2, #20
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e007      	b.n	800625e <HAL_DMA_IRQHandler+0xc82>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 020a 	bic.w	r2, r2, #10
 800625c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80b8 	beq.w	80063e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006280:	e0b2      	b.n	80063e8 <HAL_DMA_IRQHandler+0xe0c>
 8006282:	bf00      	nop
 8006284:	40020010 	.word	0x40020010
 8006288:	40020028 	.word	0x40020028
 800628c:	40020040 	.word	0x40020040
 8006290:	40020058 	.word	0x40020058
 8006294:	40020070 	.word	0x40020070
 8006298:	40020088 	.word	0x40020088
 800629c:	400200a0 	.word	0x400200a0
 80062a0:	400200b8 	.word	0x400200b8
 80062a4:	40020410 	.word	0x40020410
 80062a8:	40020428 	.word	0x40020428
 80062ac:	40020440 	.word	0x40020440
 80062b0:	40020458 	.word	0x40020458
 80062b4:	40020470 	.word	0x40020470
 80062b8:	40020488 	.word	0x40020488
 80062bc:	400204a0 	.word	0x400204a0
 80062c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	2208      	movs	r2, #8
 80062ce:	409a      	lsls	r2, r3
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8088 	beq.w	80063ea <HAL_DMA_IRQHandler+0xe0e>
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8082 	beq.w	80063ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a41      	ldr	r2, [pc, #260]	; (80063f0 <HAL_DMA_IRQHandler+0xe14>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d04a      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a3f      	ldr	r2, [pc, #252]	; (80063f4 <HAL_DMA_IRQHandler+0xe18>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d045      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a3e      	ldr	r2, [pc, #248]	; (80063f8 <HAL_DMA_IRQHandler+0xe1c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d040      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a3c      	ldr	r2, [pc, #240]	; (80063fc <HAL_DMA_IRQHandler+0xe20>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d03b      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a3b      	ldr	r2, [pc, #236]	; (8006400 <HAL_DMA_IRQHandler+0xe24>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d036      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a39      	ldr	r2, [pc, #228]	; (8006404 <HAL_DMA_IRQHandler+0xe28>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d031      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a38      	ldr	r2, [pc, #224]	; (8006408 <HAL_DMA_IRQHandler+0xe2c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d02c      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a36      	ldr	r2, [pc, #216]	; (800640c <HAL_DMA_IRQHandler+0xe30>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d027      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a35      	ldr	r2, [pc, #212]	; (8006410 <HAL_DMA_IRQHandler+0xe34>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d022      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a33      	ldr	r2, [pc, #204]	; (8006414 <HAL_DMA_IRQHandler+0xe38>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d01d      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a32      	ldr	r2, [pc, #200]	; (8006418 <HAL_DMA_IRQHandler+0xe3c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d018      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a30      	ldr	r2, [pc, #192]	; (800641c <HAL_DMA_IRQHandler+0xe40>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2f      	ldr	r2, [pc, #188]	; (8006420 <HAL_DMA_IRQHandler+0xe44>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00e      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <HAL_DMA_IRQHandler+0xe48>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d009      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <HAL_DMA_IRQHandler+0xe4c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_DMA_IRQHandler+0xdaa>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2a      	ldr	r2, [pc, #168]	; (800642c <HAL_DMA_IRQHandler+0xe50>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d108      	bne.n	8006398 <HAL_DMA_IRQHandler+0xdbc>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 021c 	bic.w	r2, r2, #28
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e007      	b.n	80063a8 <HAL_DMA_IRQHandler+0xdcc>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 020e 	bic.w	r2, r2, #14
 80063a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2201      	movs	r2, #1
 80063b2:	409a      	lsls	r2, r3
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
 80063de:	e004      	b.n	80063ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80063e0:	bf00      	nop
 80063e2:	e002      	b.n	80063ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063e4:	bf00      	nop
 80063e6:	e000      	b.n	80063ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063ea:	3728      	adds	r7, #40	; 0x28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40020010 	.word	0x40020010
 80063f4:	40020028 	.word	0x40020028
 80063f8:	40020040 	.word	0x40020040
 80063fc:	40020058 	.word	0x40020058
 8006400:	40020070 	.word	0x40020070
 8006404:	40020088 	.word	0x40020088
 8006408:	400200a0 	.word	0x400200a0
 800640c:	400200b8 	.word	0x400200b8
 8006410:	40020410 	.word	0x40020410
 8006414:	40020428 	.word	0x40020428
 8006418:	40020440 	.word	0x40020440
 800641c:	40020458 	.word	0x40020458
 8006420:	40020470 	.word	0x40020470
 8006424:	40020488 	.word	0x40020488
 8006428:	400204a0 	.word	0x400204a0
 800642c:	400204b8 	.word	0x400204b8

08006430 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006460:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a84      	ldr	r2, [pc, #528]	; (8006678 <DMA_SetConfig+0x230>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d072      	beq.n	8006552 <DMA_SetConfig+0x10a>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a82      	ldr	r2, [pc, #520]	; (800667c <DMA_SetConfig+0x234>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d06d      	beq.n	8006552 <DMA_SetConfig+0x10a>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a81      	ldr	r2, [pc, #516]	; (8006680 <DMA_SetConfig+0x238>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d068      	beq.n	8006552 <DMA_SetConfig+0x10a>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a7f      	ldr	r2, [pc, #508]	; (8006684 <DMA_SetConfig+0x23c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d063      	beq.n	8006552 <DMA_SetConfig+0x10a>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a7e      	ldr	r2, [pc, #504]	; (8006688 <DMA_SetConfig+0x240>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d05e      	beq.n	8006552 <DMA_SetConfig+0x10a>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a7c      	ldr	r2, [pc, #496]	; (800668c <DMA_SetConfig+0x244>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d059      	beq.n	8006552 <DMA_SetConfig+0x10a>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a7b      	ldr	r2, [pc, #492]	; (8006690 <DMA_SetConfig+0x248>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d054      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a79      	ldr	r2, [pc, #484]	; (8006694 <DMA_SetConfig+0x24c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d04f      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a78      	ldr	r2, [pc, #480]	; (8006698 <DMA_SetConfig+0x250>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d04a      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a76      	ldr	r2, [pc, #472]	; (800669c <DMA_SetConfig+0x254>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d045      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a75      	ldr	r2, [pc, #468]	; (80066a0 <DMA_SetConfig+0x258>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d040      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a73      	ldr	r2, [pc, #460]	; (80066a4 <DMA_SetConfig+0x25c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d03b      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a72      	ldr	r2, [pc, #456]	; (80066a8 <DMA_SetConfig+0x260>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d036      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a70      	ldr	r2, [pc, #448]	; (80066ac <DMA_SetConfig+0x264>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d031      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a6f      	ldr	r2, [pc, #444]	; (80066b0 <DMA_SetConfig+0x268>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d02c      	beq.n	8006552 <DMA_SetConfig+0x10a>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a6d      	ldr	r2, [pc, #436]	; (80066b4 <DMA_SetConfig+0x26c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d027      	beq.n	8006552 <DMA_SetConfig+0x10a>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a6c      	ldr	r2, [pc, #432]	; (80066b8 <DMA_SetConfig+0x270>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d022      	beq.n	8006552 <DMA_SetConfig+0x10a>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a6a      	ldr	r2, [pc, #424]	; (80066bc <DMA_SetConfig+0x274>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01d      	beq.n	8006552 <DMA_SetConfig+0x10a>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a69      	ldr	r2, [pc, #420]	; (80066c0 <DMA_SetConfig+0x278>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d018      	beq.n	8006552 <DMA_SetConfig+0x10a>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a67      	ldr	r2, [pc, #412]	; (80066c4 <DMA_SetConfig+0x27c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <DMA_SetConfig+0x10a>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a66      	ldr	r2, [pc, #408]	; (80066c8 <DMA_SetConfig+0x280>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00e      	beq.n	8006552 <DMA_SetConfig+0x10a>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a64      	ldr	r2, [pc, #400]	; (80066cc <DMA_SetConfig+0x284>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <DMA_SetConfig+0x10a>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a63      	ldr	r2, [pc, #396]	; (80066d0 <DMA_SetConfig+0x288>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d004      	beq.n	8006552 <DMA_SetConfig+0x10a>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a61      	ldr	r2, [pc, #388]	; (80066d4 <DMA_SetConfig+0x28c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d101      	bne.n	8006556 <DMA_SetConfig+0x10e>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <DMA_SetConfig+0x110>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00d      	beq.n	8006578 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006564:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d004      	beq.n	8006578 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006576:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a3e      	ldr	r2, [pc, #248]	; (8006678 <DMA_SetConfig+0x230>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d04a      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a3d      	ldr	r2, [pc, #244]	; (800667c <DMA_SetConfig+0x234>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d045      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3b      	ldr	r2, [pc, #236]	; (8006680 <DMA_SetConfig+0x238>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d040      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3a      	ldr	r2, [pc, #232]	; (8006684 <DMA_SetConfig+0x23c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d03b      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a38      	ldr	r2, [pc, #224]	; (8006688 <DMA_SetConfig+0x240>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d036      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a37      	ldr	r2, [pc, #220]	; (800668c <DMA_SetConfig+0x244>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d031      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a35      	ldr	r2, [pc, #212]	; (8006690 <DMA_SetConfig+0x248>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d02c      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a34      	ldr	r2, [pc, #208]	; (8006694 <DMA_SetConfig+0x24c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d027      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a32      	ldr	r2, [pc, #200]	; (8006698 <DMA_SetConfig+0x250>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d022      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a31      	ldr	r2, [pc, #196]	; (800669c <DMA_SetConfig+0x254>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d01d      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a2f      	ldr	r2, [pc, #188]	; (80066a0 <DMA_SetConfig+0x258>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d018      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2e      	ldr	r2, [pc, #184]	; (80066a4 <DMA_SetConfig+0x25c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d013      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2c      	ldr	r2, [pc, #176]	; (80066a8 <DMA_SetConfig+0x260>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00e      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a2b      	ldr	r2, [pc, #172]	; (80066ac <DMA_SetConfig+0x264>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d009      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a29      	ldr	r2, [pc, #164]	; (80066b0 <DMA_SetConfig+0x268>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <DMA_SetConfig+0x1d0>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a28      	ldr	r2, [pc, #160]	; (80066b4 <DMA_SetConfig+0x26c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d101      	bne.n	800661c <DMA_SetConfig+0x1d4>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <DMA_SetConfig+0x1d6>
 800661c:	2300      	movs	r3, #0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d05a      	beq.n	80066d8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	223f      	movs	r2, #63	; 0x3f
 800662c:	409a      	lsls	r2, r3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006640:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d108      	bne.n	8006664 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006662:	e087      	b.n	8006774 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	60da      	str	r2, [r3, #12]
}
 8006674:	e07e      	b.n	8006774 <DMA_SetConfig+0x32c>
 8006676:	bf00      	nop
 8006678:	40020010 	.word	0x40020010
 800667c:	40020028 	.word	0x40020028
 8006680:	40020040 	.word	0x40020040
 8006684:	40020058 	.word	0x40020058
 8006688:	40020070 	.word	0x40020070
 800668c:	40020088 	.word	0x40020088
 8006690:	400200a0 	.word	0x400200a0
 8006694:	400200b8 	.word	0x400200b8
 8006698:	40020410 	.word	0x40020410
 800669c:	40020428 	.word	0x40020428
 80066a0:	40020440 	.word	0x40020440
 80066a4:	40020458 	.word	0x40020458
 80066a8:	40020470 	.word	0x40020470
 80066ac:	40020488 	.word	0x40020488
 80066b0:	400204a0 	.word	0x400204a0
 80066b4:	400204b8 	.word	0x400204b8
 80066b8:	58025408 	.word	0x58025408
 80066bc:	5802541c 	.word	0x5802541c
 80066c0:	58025430 	.word	0x58025430
 80066c4:	58025444 	.word	0x58025444
 80066c8:	58025458 	.word	0x58025458
 80066cc:	5802546c 	.word	0x5802546c
 80066d0:	58025480 	.word	0x58025480
 80066d4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a28      	ldr	r2, [pc, #160]	; (8006780 <DMA_SetConfig+0x338>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d022      	beq.n	8006728 <DMA_SetConfig+0x2e0>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a27      	ldr	r2, [pc, #156]	; (8006784 <DMA_SetConfig+0x33c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01d      	beq.n	8006728 <DMA_SetConfig+0x2e0>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a25      	ldr	r2, [pc, #148]	; (8006788 <DMA_SetConfig+0x340>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d018      	beq.n	8006728 <DMA_SetConfig+0x2e0>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a24      	ldr	r2, [pc, #144]	; (800678c <DMA_SetConfig+0x344>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <DMA_SetConfig+0x2e0>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a22      	ldr	r2, [pc, #136]	; (8006790 <DMA_SetConfig+0x348>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00e      	beq.n	8006728 <DMA_SetConfig+0x2e0>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a21      	ldr	r2, [pc, #132]	; (8006794 <DMA_SetConfig+0x34c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <DMA_SetConfig+0x2e0>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <DMA_SetConfig+0x350>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <DMA_SetConfig+0x2e0>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1e      	ldr	r2, [pc, #120]	; (800679c <DMA_SetConfig+0x354>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d101      	bne.n	800672c <DMA_SetConfig+0x2e4>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <DMA_SetConfig+0x2e6>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d020      	beq.n	8006774 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	f003 031f 	and.w	r3, r3, #31
 800673a:	2201      	movs	r2, #1
 800673c:	409a      	lsls	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d108      	bne.n	8006764 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	60da      	str	r2, [r3, #12]
}
 8006762:	e007      	b.n	8006774 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	60da      	str	r2, [r3, #12]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	58025408 	.word	0x58025408
 8006784:	5802541c 	.word	0x5802541c
 8006788:	58025430 	.word	0x58025430
 800678c:	58025444 	.word	0x58025444
 8006790:	58025458 	.word	0x58025458
 8006794:	5802546c 	.word	0x5802546c
 8006798:	58025480 	.word	0x58025480
 800679c:	58025494 	.word	0x58025494

080067a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a42      	ldr	r2, [pc, #264]	; (80068b8 <DMA_CalcBaseAndBitshift+0x118>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d04a      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a41      	ldr	r2, [pc, #260]	; (80068bc <DMA_CalcBaseAndBitshift+0x11c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d045      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a3f      	ldr	r2, [pc, #252]	; (80068c0 <DMA_CalcBaseAndBitshift+0x120>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d040      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a3e      	ldr	r2, [pc, #248]	; (80068c4 <DMA_CalcBaseAndBitshift+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d03b      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a3c      	ldr	r2, [pc, #240]	; (80068c8 <DMA_CalcBaseAndBitshift+0x128>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d036      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a3b      	ldr	r2, [pc, #236]	; (80068cc <DMA_CalcBaseAndBitshift+0x12c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d031      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a39      	ldr	r2, [pc, #228]	; (80068d0 <DMA_CalcBaseAndBitshift+0x130>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d02c      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a38      	ldr	r2, [pc, #224]	; (80068d4 <DMA_CalcBaseAndBitshift+0x134>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d027      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a36      	ldr	r2, [pc, #216]	; (80068d8 <DMA_CalcBaseAndBitshift+0x138>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d022      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a35      	ldr	r2, [pc, #212]	; (80068dc <DMA_CalcBaseAndBitshift+0x13c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d01d      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a33      	ldr	r2, [pc, #204]	; (80068e0 <DMA_CalcBaseAndBitshift+0x140>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d018      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a32      	ldr	r2, [pc, #200]	; (80068e4 <DMA_CalcBaseAndBitshift+0x144>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a30      	ldr	r2, [pc, #192]	; (80068e8 <DMA_CalcBaseAndBitshift+0x148>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00e      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2f      	ldr	r2, [pc, #188]	; (80068ec <DMA_CalcBaseAndBitshift+0x14c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a2d      	ldr	r2, [pc, #180]	; (80068f0 <DMA_CalcBaseAndBitshift+0x150>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xa8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a2c      	ldr	r2, [pc, #176]	; (80068f4 <DMA_CalcBaseAndBitshift+0x154>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d101      	bne.n	800684c <DMA_CalcBaseAndBitshift+0xac>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <DMA_CalcBaseAndBitshift+0xae>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d024      	beq.n	800689c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	3b10      	subs	r3, #16
 800685a:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <DMA_CalcBaseAndBitshift+0x158>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	091b      	lsrs	r3, r3, #4
 8006862:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	4a24      	ldr	r2, [pc, #144]	; (80068fc <DMA_CalcBaseAndBitshift+0x15c>)
 800686c:	5cd3      	ldrb	r3, [r2, r3]
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b03      	cmp	r3, #3
 8006878:	d908      	bls.n	800688c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	4b1f      	ldr	r3, [pc, #124]	; (8006900 <DMA_CalcBaseAndBitshift+0x160>)
 8006882:	4013      	ands	r3, r2
 8006884:	1d1a      	adds	r2, r3, #4
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	659a      	str	r2, [r3, #88]	; 0x58
 800688a:	e00d      	b.n	80068a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <DMA_CalcBaseAndBitshift+0x160>)
 8006894:	4013      	ands	r3, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6593      	str	r3, [r2, #88]	; 0x58
 800689a:	e005      	b.n	80068a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40020010 	.word	0x40020010
 80068bc:	40020028 	.word	0x40020028
 80068c0:	40020040 	.word	0x40020040
 80068c4:	40020058 	.word	0x40020058
 80068c8:	40020070 	.word	0x40020070
 80068cc:	40020088 	.word	0x40020088
 80068d0:	400200a0 	.word	0x400200a0
 80068d4:	400200b8 	.word	0x400200b8
 80068d8:	40020410 	.word	0x40020410
 80068dc:	40020428 	.word	0x40020428
 80068e0:	40020440 	.word	0x40020440
 80068e4:	40020458 	.word	0x40020458
 80068e8:	40020470 	.word	0x40020470
 80068ec:	40020488 	.word	0x40020488
 80068f0:	400204a0 	.word	0x400204a0
 80068f4:	400204b8 	.word	0x400204b8
 80068f8:	aaaaaaab 	.word	0xaaaaaaab
 80068fc:	0802722c 	.word	0x0802722c
 8006900:	fffffc00 	.word	0xfffffc00

08006904 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d120      	bne.n	800695a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	2b03      	cmp	r3, #3
 800691e:	d858      	bhi.n	80069d2 <DMA_CheckFifoParam+0xce>
 8006920:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <DMA_CheckFifoParam+0x24>)
 8006922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006926:	bf00      	nop
 8006928:	08006939 	.word	0x08006939
 800692c:	0800694b 	.word	0x0800694b
 8006930:	08006939 	.word	0x08006939
 8006934:	080069d3 	.word	0x080069d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d048      	beq.n	80069d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006948:	e045      	b.n	80069d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006952:	d142      	bne.n	80069da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006958:	e03f      	b.n	80069da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006962:	d123      	bne.n	80069ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	2b03      	cmp	r3, #3
 800696a:	d838      	bhi.n	80069de <DMA_CheckFifoParam+0xda>
 800696c:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <DMA_CheckFifoParam+0x70>)
 800696e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006972:	bf00      	nop
 8006974:	08006985 	.word	0x08006985
 8006978:	0800698b 	.word	0x0800698b
 800697c:	08006985 	.word	0x08006985
 8006980:	0800699d 	.word	0x0800699d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	73fb      	strb	r3, [r7, #15]
        break;
 8006988:	e030      	b.n	80069ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d025      	beq.n	80069e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800699a:	e022      	b.n	80069e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069a4:	d11f      	bne.n	80069e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069aa:	e01c      	b.n	80069e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d902      	bls.n	80069ba <DMA_CheckFifoParam+0xb6>
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d003      	beq.n	80069c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80069b8:	e018      	b.n	80069ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]
        break;
 80069be:	e015      	b.n	80069ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00e      	beq.n	80069ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
    break;
 80069d0:	e00b      	b.n	80069ea <DMA_CheckFifoParam+0xe6>
        break;
 80069d2:	bf00      	nop
 80069d4:	e00a      	b.n	80069ec <DMA_CheckFifoParam+0xe8>
        break;
 80069d6:	bf00      	nop
 80069d8:	e008      	b.n	80069ec <DMA_CheckFifoParam+0xe8>
        break;
 80069da:	bf00      	nop
 80069dc:	e006      	b.n	80069ec <DMA_CheckFifoParam+0xe8>
        break;
 80069de:	bf00      	nop
 80069e0:	e004      	b.n	80069ec <DMA_CheckFifoParam+0xe8>
        break;
 80069e2:	bf00      	nop
 80069e4:	e002      	b.n	80069ec <DMA_CheckFifoParam+0xe8>
        break;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <DMA_CheckFifoParam+0xe8>
    break;
 80069ea:	bf00      	nop
    }
  }

  return status;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop

080069fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a38      	ldr	r2, [pc, #224]	; (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d022      	beq.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a36      	ldr	r2, [pc, #216]	; (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01d      	beq.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a35      	ldr	r2, [pc, #212]	; (8006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d018      	beq.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a33      	ldr	r2, [pc, #204]	; (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a32      	ldr	r2, [pc, #200]	; (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00e      	beq.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a30      	ldr	r2, [pc, #192]	; (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d009      	beq.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a2f      	ldr	r2, [pc, #188]	; (8006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a2d      	ldr	r2, [pc, #180]	; (8006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d101      	bne.n	8006a5e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01a      	beq.n	8006a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	3b08      	subs	r3, #8
 8006a6c:	4a28      	ldr	r2, [pc, #160]	; (8006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a72:	091b      	lsrs	r3, r3, #4
 8006a74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4b26      	ldr	r3, [pc, #152]	; (8006b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a24      	ldr	r2, [pc, #144]	; (8006b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	2201      	movs	r2, #1
 8006a92:	409a      	lsls	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a98:	e024      	b.n	8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	3b10      	subs	r3, #16
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	091b      	lsrs	r3, r3, #4
 8006aaa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4a1c      	ldr	r2, [pc, #112]	; (8006b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d806      	bhi.n	8006ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d902      	bls.n	8006ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4b18      	ldr	r3, [pc, #96]	; (8006b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	461a      	mov	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a16      	ldr	r2, [pc, #88]	; (8006b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ad4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2201      	movs	r2, #1
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	58025408 	.word	0x58025408
 8006af4:	5802541c 	.word	0x5802541c
 8006af8:	58025430 	.word	0x58025430
 8006afc:	58025444 	.word	0x58025444
 8006b00:	58025458 	.word	0x58025458
 8006b04:	5802546c 	.word	0x5802546c
 8006b08:	58025480 	.word	0x58025480
 8006b0c:	58025494 	.word	0x58025494
 8006b10:	cccccccd 	.word	0xcccccccd
 8006b14:	16009600 	.word	0x16009600
 8006b18:	58025880 	.word	0x58025880
 8006b1c:	aaaaaaab 	.word	0xaaaaaaab
 8006b20:	400204b8 	.word	0x400204b8
 8006b24:	4002040f 	.word	0x4002040f
 8006b28:	10008200 	.word	0x10008200
 8006b2c:	40020880 	.word	0x40020880

08006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d04a      	beq.n	8006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d847      	bhi.n	8006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d022      	beq.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a24      	ldr	r2, [pc, #144]	; (8006bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01d      	beq.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a22      	ldr	r2, [pc, #136]	; (8006bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a21      	ldr	r2, [pc, #132]	; (8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1e      	ldr	r2, [pc, #120]	; (8006bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1c      	ldr	r2, [pc, #112]	; (8006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1b      	ldr	r2, [pc, #108]	; (8006c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4b17      	ldr	r3, [pc, #92]	; (8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006bb8:	671a      	str	r2, [r3, #112]	; 0x70
 8006bba:	e009      	b.n	8006bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4b14      	ldr	r3, [pc, #80]	; (8006c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a11      	ldr	r2, [pc, #68]	; (8006c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006bce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	409a      	lsls	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	58025408 	.word	0x58025408
 8006bec:	5802541c 	.word	0x5802541c
 8006bf0:	58025430 	.word	0x58025430
 8006bf4:	58025444 	.word	0x58025444
 8006bf8:	58025458 	.word	0x58025458
 8006bfc:	5802546c 	.word	0x5802546c
 8006c00:	58025480 	.word	0x58025480
 8006c04:	58025494 	.word	0x58025494
 8006c08:	1600963f 	.word	0x1600963f
 8006c0c:	58025940 	.word	0x58025940
 8006c10:	1000823f 	.word	0x1000823f
 8006c14:	40020940 	.word	0x40020940

08006c18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e0c6      	b.n	8006db8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f00a f8b4 	bl	8010da0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2223      	movs	r2, #35	; 0x23
 8006c3c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c3e:	4b60      	ldr	r3, [pc, #384]	; (8006dc0 <HAL_ETH_Init+0x1a8>)
 8006c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c44:	4a5e      	ldr	r2, [pc, #376]	; (8006dc0 <HAL_ETH_Init+0x1a8>)
 8006c46:	f043 0302 	orr.w	r3, r3, #2
 8006c4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006c4e:	4b5c      	ldr	r3, [pc, #368]	; (8006dc0 <HAL_ETH_Init+0x1a8>)
 8006c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7a1b      	ldrb	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d103      	bne.n	8006c6c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006c64:	2000      	movs	r0, #0
 8006c66:	f7fd f959 	bl	8003f1c <HAL_SYSCFG_ETHInterfaceSelect>
 8006c6a:	e003      	b.n	8006c74 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006c6c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006c70:	f7fd f954 	bl	8003f1c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c8c:	f7fd f90a 	bl	8003ea4 <HAL_GetTick>
 8006c90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006c92:	e00f      	b.n	8006cb4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8006c94:	f7fd f906 	bl	8003ea4 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006ca2:	d907      	bls.n	8006cb4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	22e0      	movs	r2, #224	; 0xe0
 8006cae:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e081      	b.n	8006db8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e6      	bne.n	8006c94 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 faa4 	bl	8008214 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006ccc:	f002 ffec 	bl	8009ca8 <HAL_RCC_GetHCLKFreq>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4a3c      	ldr	r2, [pc, #240]	; (8006dc4 <HAL_ETH_Init+0x1ac>)
 8006cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd8:	0c9a      	lsrs	r2, r3, #18
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3a01      	subs	r2, #1
 8006ce0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 f9f7 	bl	80080d8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006d00:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006d04:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	22e0      	movs	r2, #224	; 0xe0
 8006d1c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e04a      	b.n	8006db8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	f241 1308 	movw	r3, #4360	; 0x1108
 8006d2a:	4413      	add	r3, r2
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	4b26      	ldr	r3, [pc, #152]	; (8006dc8 <HAL_ETH_Init+0x1b0>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6952      	ldr	r2, [r2, #20]
 8006d36:	0052      	lsls	r2, r2, #1
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	6809      	ldr	r1, [r1, #0]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	f241 1308 	movw	r3, #4360	; 0x1108
 8006d42:	440b      	add	r3, r1
 8006d44:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fabc 	bl	80082c4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fb00 	bl	8008352 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	3305      	adds	r3, #5
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	3304      	adds	r3, #4
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	4619      	mov	r1, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	3303      	adds	r3, #3
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	061a      	lsls	r2, r3, #24
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	3302      	adds	r3, #2
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	041b      	lsls	r3, r3, #16
 8006d84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006d90:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006d9e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006da0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2210      	movs	r2, #16
 8006dae:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2210      	movs	r2, #16
 8006db4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	58024400 	.word	0x58024400
 8006dc4:	431bde83 	.word	0x431bde83
 8006dc8:	ffff8001 	.word	0xffff8001

08006dcc <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	3310      	adds	r3, #16
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_ETH_DescAssignMemory+0x28>
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d904      	bls.n	8006dfe <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e021      	b.n	8006e42 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00b      	beq.n	8006e34 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e5a:	2b10      	cmp	r3, #16
 8006e5c:	d14c      	bne.n	8006ef8 <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2223      	movs	r2, #35	; 0x23
 8006e62:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0202 	orr.w	r2, r2, #2
 8006e72:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0201 	orr.w	r2, r2, #1
 8006e94:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	f241 1304 	movw	r3, #4356	; 0x1104
 8006ea0:	4413      	add	r3, r2
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6811      	ldr	r1, [r2, #0]
 8006ea8:	f043 0201 	orr.w	r2, r3, #1
 8006eac:	f241 1304 	movw	r3, #4356	; 0x1104
 8006eb0:	440b      	add	r3, r1
 8006eb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	f241 1308 	movw	r3, #4360	; 0x1108
 8006ebc:	4413      	add	r3, r2
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6811      	ldr	r1, [r2, #0]
 8006ec4:	f043 0201 	orr.w	r2, r3, #1
 8006ec8:	f241 1308 	movw	r3, #4360	; 0x1108
 8006ecc:	440b      	add	r3, r1
 8006ece:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8006ee2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8006ee6:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2210      	movs	r2, #16
 8006eec:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2222      	movs	r2, #34	; 0x22
 8006ef2:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e000      	b.n	8006efa <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d040      	beq.n	8006f98 <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2223      	movs	r2, #35	; 0x23
 8006f1a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	f241 1304 	movw	r3, #4356	; 0x1104
 8006f24:	4413      	add	r3, r2
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6811      	ldr	r1, [r2, #0]
 8006f2c:	f023 0201 	bic.w	r2, r3, #1
 8006f30:	f241 1304 	movw	r3, #4356	; 0x1104
 8006f34:	440b      	add	r3, r1
 8006f36:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	f241 1308 	movw	r3, #4360	; 0x1108
 8006f40:	4413      	add	r3, r2
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6811      	ldr	r1, [r2, #0]
 8006f48:	f023 0201 	bic.w	r2, r3, #1
 8006f4c:	f241 1308 	movw	r3, #4360	; 0x1108
 8006f50:	440b      	add	r3, r1
 8006f52:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0202 	bic.w	r2, r2, #2
 8006f86:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2210      	movs	r2, #16
 8006f8c:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2210      	movs	r2, #16
 8006f92:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	e000      	b.n	8006f9a <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
  }
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d107      	bne.n	8006fc8 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fbc:	f043 0201 	orr.w	r2, r3, #1
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e073      	b.n	80070b0 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fcc:	2b10      	cmp	r3, #16
 8006fce:	d16e      	bne.n	80070ae <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f001 fa19 	bl	800840c <ETH_Prepare_Tx_Descriptors>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe4:	f043 0202 	orr.w	r2, r3, #2
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e05f      	b.n	80070b0 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3206      	adds	r2, #6
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	629a      	str	r2, [r3, #40]	; 0x28
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	2b03      	cmp	r3, #3
 800700e:	d904      	bls.n	800701a <HAL_ETH_Transmit+0x74>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	1f1a      	subs	r2, r3, #4
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	3106      	adds	r1, #6
 8007026:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800702a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800702e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8007030:	f7fc ff38 	bl	8003ea4 <HAL_GetTick>
 8007034:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8007036:	e034      	b.n	80070a2 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d011      	beq.n	800706e <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800704e:	f043 0208 	orr.w	r2, r3, #8
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	22e0      	movs	r2, #224	; 0xe0
 8007068:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e020      	b.n	80070b0 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007074:	d015      	beq.n	80070a2 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8007076:	f7fc ff15 	bl	8003ea4 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d302      	bcc.n	800708c <HAL_ETH_Transmit+0xe6>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007090:	f043 0204 	orr.w	r2, r3, #4
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	22e0      	movs	r2, #224	; 0xe0
 800709c:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e006      	b.n	80070b0 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dbc6      	blt.n	8007038 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e000      	b.n	80070b0 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
  }
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b089      	sub	sp, #36	; 0x24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3344      	adds	r3, #68	; 0x44
 80070c4:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d4:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d06b      	beq.n	80071c2 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e0ce      	b.n	800728c <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3301      	adds	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d036      	beq.n	800716e <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	3301      	adds	r3, #1
 8007104:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	3301      	adds	r3, #1
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d902      	bls.n	8007122 <HAL_ETH_IsRxDataAvailable+0x6a>
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	3b04      	subs	r3, #4
 8007120:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	db11      	blt.n	8007158 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2201      	movs	r2, #1
 8007144:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3301      	adds	r3, #1
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b03      	cmp	r3, #3
 8007150:	d902      	bls.n	8007158 <HAL_ETH_IsRxDataAvailable+0xa0>
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3b04      	subs	r3, #4
 8007156:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800716a:	2301      	movs	r3, #1
 800716c:	e08e      	b.n	800728c <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d012      	beq.n	80071a0 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 800717e:	2301      	movs	r3, #1
 8007180:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	3301      	adds	r3, #1
 8007186:	61fb      	str	r3, [r7, #28]
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	2b03      	cmp	r3, #3
 800718c:	d902      	bls.n	8007194 <HAL_ETH_IsRxDataAvailable+0xdc>
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	3b04      	subs	r3, #4
 8007192:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	e010      	b.n	80071c2 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3301      	adds	r3, #1
 80071a4:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d902      	bls.n	80071b8 <HAL_ETH_IsRxDataAvailable+0x100>
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	3b04      	subs	r3, #4
 80071b6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c0:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	db02      	blt.n	80071d0 <HAL_ETH_IsRxDataAvailable+0x118>
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d98e      	bls.n	80070ee <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d056      	beq.n	8007284 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
 80071f4:	e03b      	b.n	800726e <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	691a      	ldr	r2, [r3, #16]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007204:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	695a      	ldr	r2, [r3, #20]
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	3b01      	subs	r3, #1
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	429a      	cmp	r2, r3
 800724a:	d20d      	bcs.n	8007268 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	3301      	adds	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b03      	cmp	r3, #3
 8007256:	d902      	bls.n	800725e <HAL_ETH_IsRxDataAvailable+0x1a6>
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	3b04      	subs	r3, #4
 800725c:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	3301      	adds	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	429a      	cmp	r2, r3
 8007274:	d3bf      	bcc.n	80071f6 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	f241 1328 	movw	r3, #4392	; 0x1128
 8007280:	440b      	add	r3, r1
 8007282:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	619a      	str	r2, [r3, #24]

  return 0;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3724      	adds	r7, #36	; 0x24
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	; 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3344      	adds	r3, #68	; 0x44
 80072a6:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ba:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e07d      	b.n	80073cc <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10f      	bne.n	80072f8 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff feed 	bl	80070b8 <HAL_ETH_IsRxDataAvailable>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e071      	b.n	80073cc <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80072f8:	2300      	movs	r3, #0
 80072fa:	623b      	str	r3, [r7, #32]
 80072fc:	e031      	b.n	8007362 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	461a      	mov	r2, r3
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695a      	ldr	r2, [r3, #20]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	461a      	mov	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695a      	ldr	r2, [r3, #20]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007338:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	3301      	adds	r3, #1
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	2b03      	cmp	r3, #3
 8007344:	d902      	bls.n	800734c <HAL_ETH_GetRxDataBuffer+0xb4>
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	3b04      	subs	r3, #4
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	3301      	adds	r3, #1
 8007360:	623b      	str	r3, [r7, #32]
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	3b01      	subs	r3, #1
 8007368:	6a3a      	ldr	r2, [r7, #32]
 800736a:	429a      	cmp	r2, r3
 800736c:	d3c7      	bcc.n	80072fe <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	461a      	mov	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	d803      	bhi.n	8007398 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	e018      	b.n	80073ca <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d012      	beq.n	80073c6 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	695a      	ldr	r2, [r3, #20]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	461a      	mov	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	605a      	str	r2, [r3, #4]
 80073c4:	e001      	b.n	80073ca <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3728      	adds	r7, #40	; 0x28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3344      	adds	r3, #68	; 0x44
 80073e2:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d107      	bne.n	8007402 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff fe60 	bl	80070b8 <HAL_ETH_IsRxDataAvailable>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e017      	b.n	8007432 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	4413      	add	r3, r2
 800740a:	3b01      	subs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b03      	cmp	r3, #3
 8007412:	d902      	bls.n	800741a <HAL_ETH_GetRxDataLength+0x46>
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	3b04      	subs	r3, #4
 8007418:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007422:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800743a:	b480      	push	{r7}
 800743c:	b089      	sub	sp, #36	; 0x24
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3344      	adds	r3, #68	; 0x44
 8007446:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007456:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e057      	b.n	800751a <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	3301      	adds	r3, #1
 8007476:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8007478:	2300      	movs	r3, #0
 800747a:	613b      	str	r3, [r7, #16]
 800747c:	e03b      	b.n	80074f6 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800748c:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	695a      	ldr	r2, [r3, #20]
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d20d      	bcs.n	80074f0 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d902      	bls.n	80074e6 <HAL_ETH_BuildRxDescriptors+0xac>
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	3b04      	subs	r3, #4
 80074e4:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ee:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	3301      	adds	r3, #1
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d3bf      	bcc.n	800747e <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	f241 1328 	movw	r3, #4392	; 0x1128
 8007508:	440b      	add	r3, r1
 800750a:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3724      	adds	r7, #36	; 0x24
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
	...

08007528 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d113      	bne.n	800756a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	f241 1334 	movw	r3, #4404	; 0x1134
 800754a:	4413      	add	r3, r2
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007552:	2b40      	cmp	r3, #64	; 0x40
 8007554:	d109      	bne.n	800756a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8f2 	bl	8007740 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007564:	f248 0240 	movw	r2, #32832	; 0x8040
 8007568:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b01      	cmp	r3, #1
 800757a:	d113      	bne.n	80075a4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	f241 1334 	movw	r3, #4404	; 0x1134
 8007584:	4413      	add	r3, r2
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b01      	cmp	r3, #1
 800758e:	d109      	bne.n	80075a4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f8cb 	bl	800772c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800759e:	f248 0201 	movw	r2, #32769	; 0x8001
 80075a2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075b6:	d149      	bne.n	800764c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f241 1334 	movw	r3, #4404	; 0x1134
 80075c0:	4413      	add	r3, r2
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075cc:	d13e      	bne.n	800764c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d2:	f043 0208 	orr.w	r2, r3, #8
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d11b      	bne.n	8007626 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	f241 1302 	movw	r3, #4354	; 0x1102
 80075fc:	4013      	ands	r3, r2
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	f241 1334 	movw	r3, #4404	; 0x1134
 800760a:	4413      	add	r3, r2
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6811      	ldr	r1, [r2, #0]
 8007612:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007616:	f241 1334 	movw	r3, #4404	; 0x1134
 800761a:	440b      	add	r3, r1
 800761c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	22e0      	movs	r2, #224	; 0xe0
 8007622:	66da      	str	r2, [r3, #108]	; 0x6c
 8007624:	e00f      	b.n	8007646 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8007640:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8007644:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f884 	bl	8007754 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007654:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007658:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800765c:	d10e      	bne.n	800767c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	22e0      	movs	r2, #224	; 0xe0
 800766e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f879 	bl	8007768 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b10      	cmp	r3, #16
 800768a:	d10f      	bne.n	80076ac <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007694:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f86c 	bl	800777c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076b4:	f003 0320 	and.w	r3, r3, #32
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d10f      	bne.n	80076dc <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80076c4:	f003 020f 	and.w	r2, r3, #15
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f85e 	bl	8007790 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80076dc:	f7fd f8ba 	bl	8004854 <HAL_GetCurrentCPUID>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d10d      	bne.n	8007702 <HAL_ETH_IRQHandler+0x1da>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <HAL_ETH_IRQHandler+0x1fc>)
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d014      	beq.n	800771c <HAL_ETH_IRQHandler+0x1f4>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80076f2:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <HAL_ETH_IRQHandler+0x1fc>)
 80076f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80076f8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f852 	bl	80077a4 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8007700:	e00c      	b.n	800771c <HAL_ETH_IRQHandler+0x1f4>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <HAL_ETH_IRQHandler+0x200>)
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d006      	beq.n	800771c <HAL_ETH_IRQHandler+0x1f4>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_ETH_IRQHandler+0x200>)
 8007710:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007714:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f844 	bl	80077a4 <HAL_ETH_WakeUpCallback>
}
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	58000080 	.word	0x58000080
 8007728:	580000c0 	.word	0x580000c0

0800772c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e03e      	b.n	8007858 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077e2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	055b      	lsls	r3, r3, #21
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	041b      	lsls	r3, r3, #16
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f043 030c 	orr.w	r3, r3, #12
 8007806:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f043 0301 	orr.w	r3, r3, #1
 800780e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800781a:	f7fc fb43 	bl	8003ea4 <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8007820:	e009      	b.n	8007836 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8007822:	f7fc fb3f 	bl	8003ea4 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007830:	d901      	bls.n	8007836 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e010      	b.n	8007858 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1ed      	bne.n	8007822 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800784e:	b29b      	uxth	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e03c      	b.n	80078fc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800788a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	055b      	lsls	r3, r3, #21
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	041b      	lsls	r3, r3, #16
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 030c 	bic.w	r3, r3, #12
 80078ae:	f043 0304 	orr.w	r3, r3, #4
 80078b2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	b29a      	uxth	r2, r3
 80078c0:	4b10      	ldr	r3, [pc, #64]	; (8007904 <HAL_ETH_WritePHYRegister+0xa4>)
 80078c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80078c6:	4a0f      	ldr	r2, [pc, #60]	; (8007904 <HAL_ETH_WritePHYRegister+0xa4>)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80078ce:	f7fc fae9 	bl	8003ea4 <HAL_GetTick>
 80078d2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80078d4:	e009      	b.n	80078ea <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80078d6:	f7fc fae5 	bl	8003ea4 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078e4:	d901      	bls.n	80078ea <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e008      	b.n	80078fc <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1ed      	bne.n	80078d6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40028000 	.word	0x40028000

08007908 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e1c3      	b.n	8007ca4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 020c 	and.w	r2, r3, #12
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	bf14      	ite	ne
 8007938:	2301      	movne	r3, #1
 800793a:	2300      	moveq	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	bf0c      	ite	eq
 8007962:	2301      	moveq	r3, #1
 8007964:	2300      	movne	r3, #0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800797a:	2b00      	cmp	r3, #0
 800797c:	bf14      	ite	ne
 800797e:	2301      	movne	r3, #1
 8007980:	2300      	moveq	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	461a      	mov	r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bf14      	ite	ne
 80079b2:	2301      	movne	r3, #1
 80079b4:	2300      	moveq	r3, #0
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bf14      	ite	ne
 80079cc:	2301      	movne	r3, #1
 80079ce:	2300      	moveq	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	bf14      	ite	ne
 8007a02:	2301      	movne	r3, #1
 8007a04:	2300      	moveq	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	bf0c      	ite	eq
 8007a1c:	2301      	moveq	r3, #1
 8007a1e:	2300      	movne	r3, #0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bf0c      	ite	eq
 8007a36:	2301      	moveq	r3, #1
 8007a38:	2300      	movne	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bf14      	ite	ne
 8007a50:	2301      	movne	r3, #1
 8007a52:	2300      	moveq	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bf14      	ite	ne
 8007a6a:	2301      	movne	r3, #1
 8007a6c:	2300      	moveq	r3, #0
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bf14      	ite	ne
 8007a84:	2301      	movne	r3, #1
 8007a86:	2300      	moveq	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bf14      	ite	ne
 8007a9e:	2301      	movne	r3, #1
 8007aa0:	2300      	moveq	r3, #0
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bf0c      	ite	eq
 8007afc:	2301      	moveq	r3, #1
 8007afe:	2300      	movne	r3, #0
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	461a      	mov	r2, r3
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf14      	ite	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	2300      	moveq	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	461a      	mov	r2, r3
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf14      	ite	ne
 8007b50:	2301      	movne	r3, #1
 8007b52:	2300      	moveq	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	461a      	mov	r2, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	0e5b      	lsrs	r3, r3, #25
 8007b66:	f003 021f 	and.w	r2, r3, #31
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bf14      	ite	ne
 8007b7c:	2301      	movne	r3, #1
 8007b7e:	2300      	moveq	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bf14      	ite	ne
 8007ba6:	2301      	movne	r3, #1
 8007ba8:	2300      	moveq	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bf0c      	ite	eq
 8007bc2:	2301      	moveq	r3, #1
 8007bc4:	2300      	movne	r3, #0
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bf14      	ite	ne
 8007bfc:	2301      	movne	r3, #1
 8007bfe:	2300      	moveq	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bf14      	ite	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	2300      	moveq	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007c30:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007c40:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bf14      	ite	ne
 8007c58:	2301      	movne	r3, #1
 8007c5a:	2300      	moveq	r3, #0
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007c6e:	f003 0310 	and.w	r3, r3, #16
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bf14      	ite	ne
 8007c76:	2301      	movne	r3, #1
 8007c78:	2300      	moveq	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e00a      	b.n	8007cda <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc8:	2b10      	cmp	r3, #16
 8007cca:	d105      	bne.n	8007cd8 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f860 	bl	8007d94 <ETH_SetMACConfig>

    return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e000      	b.n	8007cda <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
  }
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cf4:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cfc:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007cfe:	f001 ffd3 	bl	8009ca8 <HAL_RCC_GetHCLKFreq>
 8007d02:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4a1e      	ldr	r2, [pc, #120]	; (8007d80 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d908      	bls.n	8007d1e <HAL_ETH_SetMDIOClockRange+0x3a>
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d804      	bhi.n	8007d1e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e027      	b.n	8007d6e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4a18      	ldr	r2, [pc, #96]	; (8007d84 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d908      	bls.n	8007d38 <HAL_ETH_SetMDIOClockRange+0x54>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d204      	bcs.n	8007d38 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	e01a      	b.n	8007d6e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d303      	bcc.n	8007d48 <HAL_ETH_SetMDIOClockRange+0x64>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4a12      	ldr	r2, [pc, #72]	; (8007d8c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d911      	bls.n	8007d6c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4a10      	ldr	r2, [pc, #64]	; (8007d8c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d908      	bls.n	8007d62 <HAL_ETH_SetMDIOClockRange+0x7e>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4a0f      	ldr	r2, [pc, #60]	; (8007d90 <HAL_ETH_SetMDIOClockRange+0xac>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d804      	bhi.n	8007d62 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e005      	b.n	8007d6e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e000      	b.n	8007d6e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007d6c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	01312cff 	.word	0x01312cff
 8007d84:	02160ebf 	.word	0x02160ebf
 8007d88:	03938700 	.word	0x03938700
 8007d8c:	05f5e0ff 	.word	0x05f5e0ff
 8007d90:	08f0d17f 	.word	0x08f0d17f

08007d94 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8007da6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	791b      	ldrb	r3, [r3, #4]
 8007dac:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8007dae:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	7b1b      	ldrb	r3, [r3, #12]
 8007db4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8007db6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	7b5b      	ldrb	r3, [r3, #13]
 8007dbc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007dbe:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	7b9b      	ldrb	r3, [r3, #14]
 8007dc4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8007dc6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	7bdb      	ldrb	r3, [r3, #15]
 8007dcc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007dce:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	d102      	bne.n	8007dde <ETH_SetMACConfig+0x4a>
 8007dd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007ddc:	e000      	b.n	8007de0 <ETH_SetMACConfig+0x4c>
 8007dde:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007de0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	7c52      	ldrb	r2, [r2, #17]
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d102      	bne.n	8007df0 <ETH_SetMACConfig+0x5c>
 8007dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007dee:	e000      	b.n	8007df2 <ETH_SetMACConfig+0x5e>
 8007df0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007df2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	7c9b      	ldrb	r3, [r3, #18]
 8007df8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007dfa:	431a      	orrs	r2, r3
                                macconf->Speed |
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007e00:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8007e06:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	7f1b      	ldrb	r3, [r3, #28]
 8007e0c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8007e0e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	7f5b      	ldrb	r3, [r3, #29]
 8007e14:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007e16:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	7f92      	ldrb	r2, [r2, #30]
 8007e1c:	2a00      	cmp	r2, #0
 8007e1e:	d102      	bne.n	8007e26 <ETH_SetMACConfig+0x92>
 8007e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e24:	e000      	b.n	8007e28 <ETH_SetMACConfig+0x94>
 8007e26:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007e28:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	7fdb      	ldrb	r3, [r3, #31]
 8007e2e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007e30:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d102      	bne.n	8007e42 <ETH_SetMACConfig+0xae>
 8007e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e40:	e000      	b.n	8007e44 <ETH_SetMACConfig+0xb0>
 8007e42:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8007e44:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8007e4a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e52:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8007e54:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	4b56      	ldr	r3, [pc, #344]	; (8007fc0 <ETH_SetMACConfig+0x22c>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6812      	ldr	r2, [r2, #0]
 8007e6c:	68f9      	ldr	r1, [r7, #12]
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e7e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007e80:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e88:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007e8a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e92:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8007e94:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007e9c:	2a00      	cmp	r2, #0
 8007e9e:	d102      	bne.n	8007ea6 <ETH_SetMACConfig+0x112>
 8007ea0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ea4:	e000      	b.n	8007ea8 <ETH_SetMACConfig+0x114>
 8007ea6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007ea8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	4b42      	ldr	r3, [pc, #264]	; (8007fc4 <ETH_SetMACConfig+0x230>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	68f9      	ldr	r1, [r7, #12]
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ecc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	4b3a      	ldr	r3, [pc, #232]	; (8007fc8 <ETH_SetMACConfig+0x234>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	68f9      	ldr	r1, [r7, #12]
 8007ee6:	430b      	orrs	r3, r1
 8007ee8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007ef0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007ef6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	d101      	bne.n	8007f06 <ETH_SetMACConfig+0x172>
 8007f02:	2280      	movs	r2, #128	; 0x80
 8007f04:	e000      	b.n	8007f08 <ETH_SetMACConfig+0x174>
 8007f06:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007f08:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f1a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007f1e:	4013      	ands	r3, r2
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	68f9      	ldr	r1, [r7, #12]
 8007f26:	430b      	orrs	r3, r1
 8007f28:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f30:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007f38:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f46:	f023 0103 	bic.w	r1, r3, #3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007f5e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	d101      	bne.n	8007f82 <ETH_SetMACConfig+0x1ee>
 8007f7e:	2240      	movs	r2, #64	; 0x40
 8007f80:	e000      	b.n	8007f84 <ETH_SetMACConfig+0x1f0>
 8007f82:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007f84:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007f8c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007f8e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007f96:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007fa4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	00048083 	.word	0x00048083
 8007fc4:	c0f88000 	.word	0xc0f88000
 8007fc8:	fffffef0 	.word	0xfffffef0

08007fcc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	4b38      	ldr	r3, [pc, #224]	; (80080c4 <ETH_SetDMAConfig+0xf8>)
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	6812      	ldr	r2, [r2, #0]
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	6809      	ldr	r1, [r1, #0]
 8007fec:	431a      	orrs	r2, r3
 8007fee:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007ff2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	791b      	ldrb	r3, [r3, #4]
 8007ff8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007ffe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	7b1b      	ldrb	r3, [r3, #12]
 8008004:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	f241 0304 	movw	r3, #4100	; 0x1004
 8008012:	4413      	add	r3, r2
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4b2c      	ldr	r3, [pc, #176]	; (80080c8 <ETH_SetDMAConfig+0xfc>)
 8008018:	4013      	ands	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6811      	ldr	r1, [r2, #0]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	431a      	orrs	r2, r3
 8008022:	f241 0304 	movw	r3, #4100	; 0x1004
 8008026:	440b      	add	r3, r1
 8008028:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	7b5b      	ldrb	r3, [r3, #13]
 800802e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b22      	ldr	r3, [pc, #136]	; (80080cc <ETH_SetDMAConfig+0x100>)
 8008044:	4013      	ands	r3, r2
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	6811      	ldr	r1, [r2, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	431a      	orrs	r2, r3
 800804e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8008052:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	7d1b      	ldrb	r3, [r3, #20]
 800805c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800805e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	7f5b      	ldrb	r3, [r3, #29]
 8008064:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	f241 1304 	movw	r3, #4356	; 0x1104
 8008072:	4413      	add	r3, r2
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <ETH_SetDMAConfig+0x104>)
 8008078:	4013      	ands	r3, r2
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	6811      	ldr	r1, [r2, #0]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	431a      	orrs	r2, r3
 8008082:	f241 1304 	movw	r3, #4356	; 0x1104
 8008086:	440b      	add	r3, r1
 8008088:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	7f1b      	ldrb	r3, [r3, #28]
 800808e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	f241 1308 	movw	r3, #4360	; 0x1108
 80080a0:	4413      	add	r3, r2
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <ETH_SetDMAConfig+0x108>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6811      	ldr	r1, [r2, #0]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	431a      	orrs	r2, r3
 80080b0:	f241 1308 	movw	r3, #4360	; 0x1108
 80080b4:	440b      	add	r3, r1
 80080b6:	601a      	str	r2, [r3, #0]
}
 80080b8:	bf00      	nop
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	ffff87fd 	.word	0xffff87fd
 80080c8:	ffff2ffe 	.word	0xffff2ffe
 80080cc:	fffec000 	.word	0xfffec000
 80080d0:	ffc0efef 	.word	0xffc0efef
 80080d4:	7fc0ffff 	.word	0x7fc0ffff

080080d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b0a4      	sub	sp, #144	; 0x90
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80080e6:	2300      	movs	r3, #0
 80080e8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008102:	2301      	movs	r3, #1
 8008104:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008108:	2300      	movs	r3, #0
 800810a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008118:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800811a:	2300      	movs	r3, #0
 800811c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008120:	2300      	movs	r3, #0
 8008122:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008124:	2300      	movs	r3, #0
 8008126:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800812a:	2300      	movs	r3, #0
 800812c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008130:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008134:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008136:	2300      	movs	r3, #0
 8008138:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800813c:	2300      	movs	r3, #0
 800813e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008140:	2301      	movs	r3, #1
 8008142:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008146:	2300      	movs	r3, #0
 8008148:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800814c:	2300      	movs	r3, #0
 800814e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008152:	2300      	movs	r3, #0
 8008154:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008156:	2300      	movs	r3, #0
 8008158:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800815a:	2300      	movs	r3, #0
 800815c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800815e:	2300      	movs	r3, #0
 8008160:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008164:	2300      	movs	r3, #0
 8008166:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008170:	2320      	movs	r3, #32
 8008172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800817c:	2300      	movs	r3, #0
 800817e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008182:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800818c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800818e:	2300      	movs	r3, #0
 8008190:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008194:	2302      	movs	r3, #2
 8008196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800819a:	2300      	movs	r3, #0
 800819c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80081a0:	2300      	movs	r3, #0
 80081a2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80081a6:	2300      	movs	r3, #0
 80081a8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80081b2:	2300      	movs	r3, #0
 80081b4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80081bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff fde6 	bl	8007d94 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80081c8:	2301      	movs	r3, #1
 80081ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80081cc:	2301      	movs	r3, #1
 80081ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80081da:	2300      	movs	r3, #0
 80081dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80081de:	2300      	movs	r3, #0
 80081e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80081e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80081ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80081f8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80081fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80081fe:	f107 0308 	add.w	r3, r7, #8
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7ff fee1 	bl	8007fcc <ETH_SetDMAConfig>
}
 800820a:	bf00      	nop
 800820c:	3790      	adds	r7, #144	; 0x90
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008224:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800822c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800822e:	f001 fd3b 	bl	8009ca8 <HAL_RCC_GetHCLKFreq>
 8008232:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4a1e      	ldr	r2, [pc, #120]	; (80082b0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d908      	bls.n	800824e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d804      	bhi.n	800824e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e027      	b.n	800829e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	4a18      	ldr	r2, [pc, #96]	; (80082b4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d908      	bls.n	8008268 <ETH_MAC_MDIO_ClkConfig+0x54>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d204      	bcs.n	8008268 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	e01a      	b.n	800829e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4a13      	ldr	r2, [pc, #76]	; (80082b8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d303      	bcc.n	8008278 <ETH_MAC_MDIO_ClkConfig+0x64>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4a12      	ldr	r2, [pc, #72]	; (80082bc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d911      	bls.n	800829c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	4a10      	ldr	r2, [pc, #64]	; (80082bc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d908      	bls.n	8008292 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4a0f      	ldr	r2, [pc, #60]	; (80082c0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d804      	bhi.n	8008292 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e005      	b.n	800829e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	e000      	b.n	800829e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800829c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80082a8:	bf00      	nop
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	01312cff 	.word	0x01312cff
 80082b4:	02160ebf 	.word	0x02160ebf
 80082b8:	03938700 	.word	0x03938700
 80082bc:	05f5e0ff 	.word	0x05f5e0ff
 80082c0:	08f0d17f 	.word	0x08f0d17f

080082c4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	e01d      	b.n	800830e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68d9      	ldr	r1, [r3, #12]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4613      	mov	r3, r2
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	4413      	add	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	440b      	add	r3, r1
 80082e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2200      	movs	r2, #0
 80082ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2200      	movs	r2, #0
 80082fa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	3206      	adds	r2, #6
 8008304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b03      	cmp	r3, #3
 8008312:	d9de      	bls.n	80082d2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	f241 132c 	movw	r3, #4396	; 0x112c
 8008322:	4413      	add	r3, r2
 8008324:	2203      	movs	r2, #3
 8008326:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68d9      	ldr	r1, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	f241 1314 	movw	r3, #4372	; 0x1114
 8008334:	4413      	add	r3, r2
 8008336:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68da      	ldr	r2, [r3, #12]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8008344:	601a      	str	r2, [r3, #0]
}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008352:	b480      	push	{r7}
 8008354:	b085      	sub	sp, #20
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800835a:	2300      	movs	r3, #0
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	e024      	b.n	80083aa <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6919      	ldr	r1, [r3, #16]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4613      	mov	r3, r2
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	4413      	add	r3, r2
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	440b      	add	r3, r1
 8008370:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2200      	movs	r2, #0
 800837c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2200      	movs	r2, #0
 8008382:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2200      	movs	r2, #0
 8008388:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	6879      	ldr	r1, [r7, #4]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3310      	adds	r3, #16
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d9d7      	bls.n	8008360 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	f241 1330 	movw	r3, #4400	; 0x1130
 80083d6:	4413      	add	r3, r2
 80083d8:	2203      	movs	r2, #3
 80083da:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6919      	ldr	r1, [r3, #16]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80083e8:	4413      	add	r3, r2
 80083ea:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	f241 1328 	movw	r3, #4392	; 0x1128
 80083fc:	4413      	add	r3, r2
 80083fe:	6019      	str	r1, [r3, #0]
}
 8008400:	bf00      	nop
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800840c:	b480      	push	{r7}
 800840e:	b08d      	sub	sp, #52	; 0x34
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3318      	adds	r3, #24
 800841c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 800842a:	2300      	movs	r3, #0
 800842c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800844a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800844e:	d007      	beq.n	8008460 <ETH_Prepare_Tx_Descriptors+0x54>
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	3304      	adds	r3, #4
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8008460:	2302      	movs	r3, #2
 8008462:	e24a      	b.n	80088fa <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b00      	cmp	r3, #0
 800846e:	d044      	beq.n	80084fa <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	4b72      	ldr	r3, [pc, #456]	; (8008640 <ETH_Prepare_Tx_Descriptors+0x234>)
 8008476:	4013      	ands	r3, r2
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800847c:	431a      	orrs	r2, r3
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800849c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d027      	beq.n	80084fa <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	041b      	lsls	r3, r3, #16
 80084b6:	431a      	orrs	r2, r3
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d4:	431a      	orrs	r2, r3
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80084e8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80084f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0310 	and.w	r3, r3, #16
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00e      	beq.n	8008524 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	4b4e      	ldr	r3, [pc, #312]	; (8008644 <ETH_Prepare_Tx_Descriptors+0x238>)
 800850c:	4013      	ands	r3, r2
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	6992      	ldr	r2, [r2, #24]
 8008512:	431a      	orrs	r2, r3
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d105      	bne.n	800853c <ETH_Prepare_Tx_Descriptors+0x130>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b00      	cmp	r3, #0
 800853a:	d030      	beq.n	800859e <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	3301      	adds	r3, #1
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	2b03      	cmp	r3, #3
 800855e:	d902      	bls.n	8008566 <ETH_Prepare_Tx_Descriptors+0x15a>
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	3b04      	subs	r3, #4
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	3301      	adds	r3, #1
 8008574:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800857e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008582:	d10c      	bne.n	800859e <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800859a:	2302      	movs	r3, #2
 800859c:	e1ad      	b.n	80088fa <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	3301      	adds	r3, #1
 80085a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	461a      	mov	r2, r3
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80085ae:	6a3b      	ldr	r3, [r7, #32]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <ETH_Prepare_Tx_Descriptors+0x238>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	6852      	ldr	r2, [r2, #4]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d012      	beq.n	80085ee <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80085de:	4013      	ands	r3, r2
 80085e0:	69fa      	ldr	r2, [r7, #28]
 80085e2:	6852      	ldr	r2, [r2, #4]
 80085e4:	0412      	lsls	r2, r2, #16
 80085e6:	431a      	orrs	r2, r3
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	609a      	str	r2, [r3, #8]
 80085ec:	e008      	b.n	8008600 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	2200      	movs	r2, #0
 80085f2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	4b13      	ldr	r3, [pc, #76]	; (8008648 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	6a3a      	ldr	r2, [r7, #32]
 80085fe:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0310 	and.w	r3, r3, #16
 8008608:	2b00      	cmp	r3, #0
 800860a:	d021      	beq.n	8008650 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	04db      	lsls	r3, r3, #19
 800861a:	431a      	orrs	r2, r3
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	4b09      	ldr	r3, [pc, #36]	; (800864c <ETH_Prepare_Tx_Descriptors+0x240>)
 8008626:	4013      	ands	r3, r2
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	69d2      	ldr	r2, [r2, #28]
 800862c:	431a      	orrs	r2, r3
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	e02e      	b.n	800869e <ETH_Prepare_Tx_Descriptors+0x292>
 8008640:	ffff0000 	.word	0xffff0000
 8008644:	ffffc000 	.word	0xffffc000
 8008648:	c000ffff 	.word	0xc000ffff
 800864c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	4b93      	ldr	r3, [pc, #588]	; (80088a4 <ETH_Prepare_Tx_Descriptors+0x498>)
 8008656:	4013      	ands	r3, r2
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	6852      	ldr	r2, [r2, #4]
 800865c:	431a      	orrs	r2, r3
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d008      	beq.n	8008680 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	431a      	orrs	r2, r3
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d008      	beq.n	800869e <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	431a      	orrs	r2, r3
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d008      	beq.n	80086bc <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b6:	431a      	orrs	r2, r3
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 80cb 	beq.w	8008884 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8008700:	e0c0      	b.n	8008884 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008710:	3301      	adds	r3, #1
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b03      	cmp	r3, #3
 8008718:	d902      	bls.n	8008720 <ETH_Prepare_Tx_Descriptors+0x314>
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	3b04      	subs	r3, #4
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008728:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800873e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008742:	d007      	beq.n	8008754 <ETH_Prepare_Tx_Descriptors+0x348>
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	3304      	adds	r3, #4
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d026      	beq.n	80087a2 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800875c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008760:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8008762:	2300      	movs	r3, #0
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
 8008766:	e016      	b.n	8008796 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	3301      	adds	r3, #1
 8008778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	2b03      	cmp	r3, #3
 800877e:	d902      	bls.n	8008786 <ETH_Prepare_Tx_Descriptors+0x37a>
 8008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008782:	3b04      	subs	r3, #4
 8008784:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	3301      	adds	r3, #1
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
 8008796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	429a      	cmp	r2, r3
 800879c:	d3e4      	bcc.n	8008768 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800879e:	2302      	movs	r3, #2
 80087a0:	e0ab      	b.n	80088fa <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	3301      	adds	r3, #1
 80087a6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	4b3a      	ldr	r3, [pc, #232]	; (80088a8 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80087be:	4013      	ands	r3, r2
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	6852      	ldr	r2, [r2, #4]
 80087c4:	431a      	orrs	r2, r3
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d012      	beq.n	80087f8 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	689a      	ldr	r2, [r3, #8]
 80087e6:	4b31      	ldr	r3, [pc, #196]	; (80088ac <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80087e8:	4013      	ands	r3, r2
 80087ea:	69fa      	ldr	r2, [r7, #28]
 80087ec:	6852      	ldr	r2, [r2, #4]
 80087ee:	0412      	lsls	r2, r2, #16
 80087f0:	431a      	orrs	r2, r3
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	609a      	str	r2, [r3, #8]
 80087f6:	e008      	b.n	800880a <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2200      	movs	r2, #0
 80087fc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	4b2a      	ldr	r3, [pc, #168]	; (80088ac <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8008804:	4013      	ands	r3, r2
 8008806:	6a3a      	ldr	r2, [r7, #32]
 8008808:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0310 	and.w	r3, r3, #16
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00f      	beq.n	8008836 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 800881c:	4013      	ands	r3, r2
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	69d2      	ldr	r2, [r2, #28]
 8008822:	431a      	orrs	r2, r3
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	60da      	str	r2, [r3, #12]
 8008834:	e017      	b.n	8008866 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <ETH_Prepare_Tx_Descriptors+0x498>)
 800883c:	4013      	ands	r3, r2
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	6852      	ldr	r2, [r2, #4]
 8008842:	431a      	orrs	r2, r3
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	431a      	orrs	r2, r3
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	3301      	adds	r3, #1
 800886a:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	f47f af3a 	bne.w	8008702 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00f      	beq.n	80088b4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	609a      	str	r2, [r3, #8]
 80088a0:	e00e      	b.n	80088c0 <ETH_Prepare_Tx_Descriptors+0x4b4>
 80088a2:	bf00      	nop
 80088a4:	ffff8000 	.word	0xffff8000
 80088a8:	ffffc000 	.word	0xffffc000
 80088ac:	c000ffff 	.word	0xc000ffff
 80088b0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088d0:	6979      	ldr	r1, [r7, #20]
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	3304      	adds	r3, #4
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e0:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80088e2:	b672      	cpsid	i
}
 80088e4:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	4413      	add	r3, r2
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80088f4:	b662      	cpsie	i
}
 80088f6:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3734      	adds	r7, #52	; 0x34
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008908:	b480      	push	{r7}
 800890a:	b089      	sub	sp, #36	; 0x24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008912:	2300      	movs	r3, #0
 8008914:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008916:	4b89      	ldr	r3, [pc, #548]	; (8008b3c <HAL_GPIO_Init+0x234>)
 8008918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800891a:	e194      	b.n	8008c46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	2101      	movs	r1, #1
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	fa01 f303 	lsl.w	r3, r1, r3
 8008928:	4013      	ands	r3, r2
 800892a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 8186 	beq.w	8008c40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d00b      	beq.n	8008954 <HAL_GPIO_Init+0x4c>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d007      	beq.n	8008954 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008948:	2b11      	cmp	r3, #17
 800894a:	d003      	beq.n	8008954 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	2b12      	cmp	r3, #18
 8008952:	d130      	bne.n	80089b6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	2203      	movs	r2, #3
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	43db      	mvns	r3, r3
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	4013      	ands	r3, r2
 800896a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	fa02 f303 	lsl.w	r3, r2, r3
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	4313      	orrs	r3, r2
 800897c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800898a:	2201      	movs	r2, #1
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	43db      	mvns	r3, r3
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	4013      	ands	r3, r2
 8008998:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	091b      	lsrs	r3, r3, #4
 80089a0:	f003 0201 	and.w	r2, r3, #1
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	fa02 f303 	lsl.w	r3, r2, r3
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	2203      	movs	r2, #3
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	43db      	mvns	r3, r3
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	4013      	ands	r3, r2
 80089cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	fa02 f303 	lsl.w	r3, r2, r3
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	4313      	orrs	r3, r2
 80089de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d003      	beq.n	80089f6 <HAL_GPIO_Init+0xee>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b12      	cmp	r3, #18
 80089f4:	d123      	bne.n	8008a3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	08da      	lsrs	r2, r3, #3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3208      	adds	r2, #8
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	220f      	movs	r2, #15
 8008a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a12:	43db      	mvns	r3, r3
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	4013      	ands	r3, r2
 8008a18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	691a      	ldr	r2, [r3, #16]
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	08da      	lsrs	r2, r3, #3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3208      	adds	r2, #8
 8008a38:	69b9      	ldr	r1, [r7, #24]
 8008a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	2203      	movs	r2, #3
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	4013      	ands	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f003 0203 	and.w	r2, r3, #3
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80e0 	beq.w	8008c40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a80:	4b2f      	ldr	r3, [pc, #188]	; (8008b40 <HAL_GPIO_Init+0x238>)
 8008a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a86:	4a2e      	ldr	r2, [pc, #184]	; (8008b40 <HAL_GPIO_Init+0x238>)
 8008a88:	f043 0302 	orr.w	r3, r3, #2
 8008a8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a90:	4b2b      	ldr	r3, [pc, #172]	; (8008b40 <HAL_GPIO_Init+0x238>)
 8008a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a9e:	4a29      	ldr	r2, [pc, #164]	; (8008b44 <HAL_GPIO_Init+0x23c>)
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	089b      	lsrs	r3, r3, #2
 8008aa4:	3302      	adds	r3, #2
 8008aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	220f      	movs	r2, #15
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	43db      	mvns	r3, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a20      	ldr	r2, [pc, #128]	; (8008b48 <HAL_GPIO_Init+0x240>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d052      	beq.n	8008b70 <HAL_GPIO_Init+0x268>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a1f      	ldr	r2, [pc, #124]	; (8008b4c <HAL_GPIO_Init+0x244>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d031      	beq.n	8008b36 <HAL_GPIO_Init+0x22e>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a1e      	ldr	r2, [pc, #120]	; (8008b50 <HAL_GPIO_Init+0x248>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d02b      	beq.n	8008b32 <HAL_GPIO_Init+0x22a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a1d      	ldr	r2, [pc, #116]	; (8008b54 <HAL_GPIO_Init+0x24c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d025      	beq.n	8008b2e <HAL_GPIO_Init+0x226>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a1c      	ldr	r2, [pc, #112]	; (8008b58 <HAL_GPIO_Init+0x250>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d01f      	beq.n	8008b2a <HAL_GPIO_Init+0x222>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a1b      	ldr	r2, [pc, #108]	; (8008b5c <HAL_GPIO_Init+0x254>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d019      	beq.n	8008b26 <HAL_GPIO_Init+0x21e>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a1a      	ldr	r2, [pc, #104]	; (8008b60 <HAL_GPIO_Init+0x258>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d013      	beq.n	8008b22 <HAL_GPIO_Init+0x21a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a19      	ldr	r2, [pc, #100]	; (8008b64 <HAL_GPIO_Init+0x25c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00d      	beq.n	8008b1e <HAL_GPIO_Init+0x216>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a18      	ldr	r2, [pc, #96]	; (8008b68 <HAL_GPIO_Init+0x260>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d007      	beq.n	8008b1a <HAL_GPIO_Init+0x212>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a17      	ldr	r2, [pc, #92]	; (8008b6c <HAL_GPIO_Init+0x264>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d101      	bne.n	8008b16 <HAL_GPIO_Init+0x20e>
 8008b12:	2309      	movs	r3, #9
 8008b14:	e02d      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b16:	230a      	movs	r3, #10
 8008b18:	e02b      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b1a:	2308      	movs	r3, #8
 8008b1c:	e029      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b1e:	2307      	movs	r3, #7
 8008b20:	e027      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b22:	2306      	movs	r3, #6
 8008b24:	e025      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b26:	2305      	movs	r3, #5
 8008b28:	e023      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b2a:	2304      	movs	r3, #4
 8008b2c:	e021      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e01f      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b32:	2302      	movs	r3, #2
 8008b34:	e01d      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e01b      	b.n	8008b72 <HAL_GPIO_Init+0x26a>
 8008b3a:	bf00      	nop
 8008b3c:	58000080 	.word	0x58000080
 8008b40:	58024400 	.word	0x58024400
 8008b44:	58000400 	.word	0x58000400
 8008b48:	58020000 	.word	0x58020000
 8008b4c:	58020400 	.word	0x58020400
 8008b50:	58020800 	.word	0x58020800
 8008b54:	58020c00 	.word	0x58020c00
 8008b58:	58021000 	.word	0x58021000
 8008b5c:	58021400 	.word	0x58021400
 8008b60:	58021800 	.word	0x58021800
 8008b64:	58021c00 	.word	0x58021c00
 8008b68:	58022000 	.word	0x58022000
 8008b6c:	58022400 	.word	0x58022400
 8008b70:	2300      	movs	r3, #0
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	f002 0203 	and.w	r2, r2, #3
 8008b78:	0092      	lsls	r2, r2, #2
 8008b7a:	4093      	lsls	r3, r2
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b82:	4938      	ldr	r1, [pc, #224]	; (8008c64 <HAL_GPIO_Init+0x35c>)
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	089b      	lsrs	r3, r3, #2
 8008b88:	3302      	adds	r3, #2
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	43db      	mvns	r3, r3
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	43db      	mvns	r3, r3
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	4013      	ands	r3, r2
 8008c22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	3301      	adds	r3, #1
 8008c44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f47f ae63 	bne.w	800891c <HAL_GPIO_Init+0x14>
  }
}
 8008c56:	bf00      	nop
 8008c58:	bf00      	nop
 8008c5a:	3724      	adds	r7, #36	; 0x24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	58000400 	.word	0x58000400

08008c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	807b      	strh	r3, [r7, #2]
 8008c74:	4613      	mov	r3, r2
 8008c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c78:	787b      	ldrb	r3, [r7, #1]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c7e:	887a      	ldrh	r2, [r7, #2]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008c84:	e003      	b.n	8008c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c86:	887b      	ldrh	r3, [r7, #2]
 8008c88:	041a      	lsls	r2, r3, #16
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	619a      	str	r2, [r3, #24]
}
 8008c8e:	bf00      	nop
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008cac:	887a      	ldrh	r2, [r7, #2]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	041a      	lsls	r2, r3, #16
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	43d9      	mvns	r1, r3
 8008cb8:	887b      	ldrh	r3, [r7, #2]
 8008cba:	400b      	ands	r3, r1
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	619a      	str	r2, [r3, #24]
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
	...

08008cd0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008cd8:	4a08      	ldr	r2, [pc, #32]	; (8008cfc <HAL_HSEM_FastTake+0x2c>)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3320      	adds	r3, #32
 8008cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ce2:	4a07      	ldr	r2, [pc, #28]	; (8008d00 <HAL_HSEM_FastTake+0x30>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d101      	bne.n	8008cec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e000      	b.n	8008cee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	58026400 	.word	0x58026400
 8008d00:	80000300 	.word	0x80000300

08008d04 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008d0e:	4906      	ldr	r1, [pc, #24]	; (8008d28 <HAL_HSEM_Release+0x24>)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	58026400 	.word	0x58026400

08008d2c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d34:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d3a:	4a0c      	ldr	r2, [pc, #48]	; (8008d6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008d3c:	f043 0302 	orr.w	r3, r3, #2
 8008d40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d44:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008d52:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	4906      	ldr	r1, [pc, #24]	; (8008d70 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	604b      	str	r3, [r1, #4]
}
 8008d5e:	bf00      	nop
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	58000400 	.word	0x58000400

08008d74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008d7c:	4b29      	ldr	r3, [pc, #164]	; (8008e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	2b06      	cmp	r3, #6
 8008d86:	d00a      	beq.n	8008d9e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d88:	4b26      	ldr	r3, [pc, #152]	; (8008e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d001      	beq.n	8008d9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e040      	b.n	8008e1c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e03e      	b.n	8008e1c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d9e:	4b21      	ldr	r3, [pc, #132]	; (8008e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8008da6:	491f      	ldr	r1, [pc, #124]	; (8008e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008dae:	f7fb f879 	bl	8003ea4 <HAL_GetTick>
 8008db2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008db4:	e009      	b.n	8008dca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008db6:	f7fb f875 	bl	8003ea4 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dc4:	d901      	bls.n	8008dca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e028      	b.n	8008e1c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dca:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd6:	d1ee      	bne.n	8008db6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b1e      	cmp	r3, #30
 8008ddc:	d008      	beq.n	8008df0 <HAL_PWREx_ConfigSupply+0x7c>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b2e      	cmp	r3, #46	; 0x2e
 8008de2:	d005      	beq.n	8008df0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b1d      	cmp	r3, #29
 8008de8:	d002      	beq.n	8008df0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b2d      	cmp	r3, #45	; 0x2d
 8008dee:	d114      	bne.n	8008e1a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008df0:	f7fb f858 	bl	8003ea4 <HAL_GetTick>
 8008df4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008df6:	e009      	b.n	8008e0c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008df8:	f7fb f854 	bl	8003ea4 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e06:	d901      	bls.n	8008e0c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e007      	b.n	8008e1c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e18:	d1ee      	bne.n	8008df8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	58024800 	.word	0x58024800

08008e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08c      	sub	sp, #48	; 0x30
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e3ff      	b.n	800963a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 8087 	beq.w	8008f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e48:	4b99      	ldr	r3, [pc, #612]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e52:	4b97      	ldr	r3, [pc, #604]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	2b10      	cmp	r3, #16
 8008e5c:	d007      	beq.n	8008e6e <HAL_RCC_OscConfig+0x46>
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	2b18      	cmp	r3, #24
 8008e62:	d110      	bne.n	8008e86 <HAL_RCC_OscConfig+0x5e>
 8008e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d10b      	bne.n	8008e86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e6e:	4b90      	ldr	r3, [pc, #576]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d06c      	beq.n	8008f54 <HAL_RCC_OscConfig+0x12c>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d168      	bne.n	8008f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e3d9      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8e:	d106      	bne.n	8008e9e <HAL_RCC_OscConfig+0x76>
 8008e90:	4b87      	ldr	r3, [pc, #540]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a86      	ldr	r2, [pc, #536]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	e02e      	b.n	8008efc <HAL_RCC_OscConfig+0xd4>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10c      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x98>
 8008ea6:	4b82      	ldr	r3, [pc, #520]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a81      	ldr	r2, [pc, #516]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	4b7f      	ldr	r3, [pc, #508]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a7e      	ldr	r2, [pc, #504]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	e01d      	b.n	8008efc <HAL_RCC_OscConfig+0xd4>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ec8:	d10c      	bne.n	8008ee4 <HAL_RCC_OscConfig+0xbc>
 8008eca:	4b79      	ldr	r3, [pc, #484]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a78      	ldr	r2, [pc, #480]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	4b76      	ldr	r3, [pc, #472]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a75      	ldr	r2, [pc, #468]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	e00b      	b.n	8008efc <HAL_RCC_OscConfig+0xd4>
 8008ee4:	4b72      	ldr	r3, [pc, #456]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a71      	ldr	r2, [pc, #452]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	4b6f      	ldr	r3, [pc, #444]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a6e      	ldr	r2, [pc, #440]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d013      	beq.n	8008f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f04:	f7fa ffce 	bl	8003ea4 <HAL_GetTick>
 8008f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f0a:	e008      	b.n	8008f1e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f0c:	f7fa ffca 	bl	8003ea4 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	2b64      	cmp	r3, #100	; 0x64
 8008f18:	d901      	bls.n	8008f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e38d      	b.n	800963a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f1e:	4b64      	ldr	r3, [pc, #400]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d0f0      	beq.n	8008f0c <HAL_RCC_OscConfig+0xe4>
 8008f2a:	e014      	b.n	8008f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f2c:	f7fa ffba 	bl	8003ea4 <HAL_GetTick>
 8008f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f32:	e008      	b.n	8008f46 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f34:	f7fa ffb6 	bl	8003ea4 <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b64      	cmp	r3, #100	; 0x64
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e379      	b.n	800963a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f46:	4b5a      	ldr	r3, [pc, #360]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f0      	bne.n	8008f34 <HAL_RCC_OscConfig+0x10c>
 8008f52:	e000      	b.n	8008f56 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 80ae 	beq.w	80090c0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f64:	4b52      	ldr	r3, [pc, #328]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f6e:	4b50      	ldr	r3, [pc, #320]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <HAL_RCC_OscConfig+0x162>
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	2b18      	cmp	r3, #24
 8008f7e:	d13a      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x1ce>
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	f003 0303 	and.w	r3, r3, #3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d135      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f8a:	4b49      	ldr	r3, [pc, #292]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d005      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x17a>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e34b      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa2:	f7fa ffaf 	bl	8003f04 <HAL_GetREVID>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f241 0203 	movw	r2, #4099	; 0x1003
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d817      	bhi.n	8008fe0 <HAL_RCC_OscConfig+0x1b8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d108      	bne.n	8008fca <HAL_RCC_OscConfig+0x1a2>
 8008fb8:	4b3d      	ldr	r3, [pc, #244]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008fc0:	4a3b      	ldr	r2, [pc, #236]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fc8:	e07a      	b.n	80090c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fca:	4b39      	ldr	r3, [pc, #228]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	031b      	lsls	r3, r3, #12
 8008fd8:	4935      	ldr	r1, [pc, #212]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fde:	e06f      	b.n	80090c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe0:	4b33      	ldr	r3, [pc, #204]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	061b      	lsls	r3, r3, #24
 8008fee:	4930      	ldr	r1, [pc, #192]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ff4:	e064      	b.n	80090c0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d045      	beq.n	800908a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ffe:	4b2c      	ldr	r3, [pc, #176]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f023 0219 	bic.w	r2, r3, #25
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	4929      	ldr	r1, [pc, #164]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800900c:	4313      	orrs	r3, r2
 800900e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009010:	f7fa ff48 	bl	8003ea4 <HAL_GetTick>
 8009014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009016:	e008      	b.n	800902a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009018:	f7fa ff44 	bl	8003ea4 <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d901      	bls.n	800902a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e307      	b.n	800963a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800902a:	4b21      	ldr	r3, [pc, #132]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0f0      	beq.n	8009018 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009036:	f7fa ff65 	bl	8003f04 <HAL_GetREVID>
 800903a:	4603      	mov	r3, r0
 800903c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009040:	4293      	cmp	r3, r2
 8009042:	d817      	bhi.n	8009074 <HAL_RCC_OscConfig+0x24c>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	2b40      	cmp	r3, #64	; 0x40
 800904a:	d108      	bne.n	800905e <HAL_RCC_OscConfig+0x236>
 800904c:	4b18      	ldr	r3, [pc, #96]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009054:	4a16      	ldr	r2, [pc, #88]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800905a:	6053      	str	r3, [r2, #4]
 800905c:	e030      	b.n	80090c0 <HAL_RCC_OscConfig+0x298>
 800905e:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	031b      	lsls	r3, r3, #12
 800906c:	4910      	ldr	r1, [pc, #64]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800906e:	4313      	orrs	r3, r2
 8009070:	604b      	str	r3, [r1, #4]
 8009072:	e025      	b.n	80090c0 <HAL_RCC_OscConfig+0x298>
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	061b      	lsls	r3, r3, #24
 8009082:	490b      	ldr	r1, [pc, #44]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009084:	4313      	orrs	r3, r2
 8009086:	604b      	str	r3, [r1, #4]
 8009088:	e01a      	b.n	80090c0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <HAL_RCC_OscConfig+0x288>)
 8009090:	f023 0301 	bic.w	r3, r3, #1
 8009094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009096:	f7fa ff05 	bl	8003ea4 <HAL_GetTick>
 800909a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800909c:	e00a      	b.n	80090b4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800909e:	f7fa ff01 	bl	8003ea4 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d903      	bls.n	80090b4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e2c4      	b.n	800963a <HAL_RCC_OscConfig+0x812>
 80090b0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090b4:	4ba4      	ldr	r3, [pc, #656]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0304 	and.w	r3, r3, #4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1ee      	bne.n	800909e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0310 	and.w	r3, r3, #16
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 80a9 	beq.w	8009220 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090ce:	4b9e      	ldr	r3, [pc, #632]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090d8:	4b9b      	ldr	r3, [pc, #620]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80090da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d007      	beq.n	80090f4 <HAL_RCC_OscConfig+0x2cc>
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	2b18      	cmp	r3, #24
 80090e8:	d13a      	bne.n	8009160 <HAL_RCC_OscConfig+0x338>
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f003 0303 	and.w	r3, r3, #3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d135      	bne.n	8009160 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090f4:	4b94      	ldr	r3, [pc, #592]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d005      	beq.n	800910c <HAL_RCC_OscConfig+0x2e4>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	2b80      	cmp	r3, #128	; 0x80
 8009106:	d001      	beq.n	800910c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e296      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800910c:	f7fa fefa 	bl	8003f04 <HAL_GetREVID>
 8009110:	4603      	mov	r3, r0
 8009112:	f241 0203 	movw	r2, #4099	; 0x1003
 8009116:	4293      	cmp	r3, r2
 8009118:	d817      	bhi.n	800914a <HAL_RCC_OscConfig+0x322>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	2b20      	cmp	r3, #32
 8009120:	d108      	bne.n	8009134 <HAL_RCC_OscConfig+0x30c>
 8009122:	4b89      	ldr	r3, [pc, #548]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800912a:	4a87      	ldr	r2, [pc, #540]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800912c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009130:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009132:	e075      	b.n	8009220 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009134:	4b84      	ldr	r3, [pc, #528]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	069b      	lsls	r3, r3, #26
 8009142:	4981      	ldr	r1, [pc, #516]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 8009144:	4313      	orrs	r3, r2
 8009146:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009148:	e06a      	b.n	8009220 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800914a:	4b7f      	ldr	r3, [pc, #508]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	061b      	lsls	r3, r3, #24
 8009158:	497b      	ldr	r1, [pc, #492]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800915a:	4313      	orrs	r3, r2
 800915c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800915e:	e05f      	b.n	8009220 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d042      	beq.n	80091ee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009168:	4b77      	ldr	r3, [pc, #476]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a76      	ldr	r2, [pc, #472]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800916e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009174:	f7fa fe96 	bl	8003ea4 <HAL_GetTick>
 8009178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800917a:	e008      	b.n	800918e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800917c:	f7fa fe92 	bl	8003ea4 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d901      	bls.n	800918e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e255      	b.n	800963a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800918e:	4b6e      	ldr	r3, [pc, #440]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0f0      	beq.n	800917c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800919a:	f7fa feb3 	bl	8003f04 <HAL_GetREVID>
 800919e:	4603      	mov	r3, r0
 80091a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d817      	bhi.n	80091d8 <HAL_RCC_OscConfig+0x3b0>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a1b      	ldr	r3, [r3, #32]
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d108      	bne.n	80091c2 <HAL_RCC_OscConfig+0x39a>
 80091b0:	4b65      	ldr	r3, [pc, #404]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80091b8:	4a63      	ldr	r2, [pc, #396]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80091ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091be:	6053      	str	r3, [r2, #4]
 80091c0:	e02e      	b.n	8009220 <HAL_RCC_OscConfig+0x3f8>
 80091c2:	4b61      	ldr	r3, [pc, #388]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	069b      	lsls	r3, r3, #26
 80091d0:	495d      	ldr	r1, [pc, #372]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	604b      	str	r3, [r1, #4]
 80091d6:	e023      	b.n	8009220 <HAL_RCC_OscConfig+0x3f8>
 80091d8:	4b5b      	ldr	r3, [pc, #364]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	061b      	lsls	r3, r3, #24
 80091e6:	4958      	ldr	r1, [pc, #352]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60cb      	str	r3, [r1, #12]
 80091ec:	e018      	b.n	8009220 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091ee:	4b56      	ldr	r3, [pc, #344]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a55      	ldr	r2, [pc, #340]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80091f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091fa:	f7fa fe53 	bl	8003ea4 <HAL_GetTick>
 80091fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009200:	e008      	b.n	8009214 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009202:	f7fa fe4f 	bl	8003ea4 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d901      	bls.n	8009214 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e212      	b.n	800963a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009214:	4b4c      	ldr	r3, [pc, #304]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1f0      	bne.n	8009202 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0308 	and.w	r3, r3, #8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d036      	beq.n	800929a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d019      	beq.n	8009268 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009234:	4b44      	ldr	r3, [pc, #272]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 8009236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009238:	4a43      	ldr	r2, [pc, #268]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800923a:	f043 0301 	orr.w	r3, r3, #1
 800923e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009240:	f7fa fe30 	bl	8003ea4 <HAL_GetTick>
 8009244:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009246:	e008      	b.n	800925a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009248:	f7fa fe2c 	bl	8003ea4 <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	2b02      	cmp	r3, #2
 8009254:	d901      	bls.n	800925a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e1ef      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800925a:	4b3b      	ldr	r3, [pc, #236]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800925c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0f0      	beq.n	8009248 <HAL_RCC_OscConfig+0x420>
 8009266:	e018      	b.n	800929a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009268:	4b37      	ldr	r3, [pc, #220]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800926a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926c:	4a36      	ldr	r2, [pc, #216]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800926e:	f023 0301 	bic.w	r3, r3, #1
 8009272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009274:	f7fa fe16 	bl	8003ea4 <HAL_GetTick>
 8009278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800927a:	e008      	b.n	800928e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800927c:	f7fa fe12 	bl	8003ea4 <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	2b02      	cmp	r3, #2
 8009288:	d901      	bls.n	800928e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e1d5      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800928e:	4b2e      	ldr	r3, [pc, #184]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 8009290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f0      	bne.n	800927c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0320 	and.w	r3, r3, #32
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d036      	beq.n	8009314 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d019      	beq.n	80092e2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092ae:	4b26      	ldr	r3, [pc, #152]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a25      	ldr	r2, [pc, #148]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80092b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092ba:	f7fa fdf3 	bl	8003ea4 <HAL_GetTick>
 80092be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092c0:	e008      	b.n	80092d4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80092c2:	f7fa fdef 	bl	8003ea4 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d901      	bls.n	80092d4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e1b2      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092d4:	4b1c      	ldr	r3, [pc, #112]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0f0      	beq.n	80092c2 <HAL_RCC_OscConfig+0x49a>
 80092e0:	e018      	b.n	8009314 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092e2:	4b19      	ldr	r3, [pc, #100]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a18      	ldr	r2, [pc, #96]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 80092e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092ee:	f7fa fdd9 	bl	8003ea4 <HAL_GetTick>
 80092f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092f4:	e008      	b.n	8009308 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80092f6:	f7fa fdd5 	bl	8003ea4 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d901      	bls.n	8009308 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e198      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009308:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <HAL_RCC_OscConfig+0x520>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1f0      	bne.n	80092f6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8085 	beq.w	800942c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <HAL_RCC_OscConfig+0x524>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a09      	ldr	r2, [pc, #36]	; (800934c <HAL_RCC_OscConfig+0x524>)
 8009328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800932c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800932e:	f7fa fdb9 	bl	8003ea4 <HAL_GetTick>
 8009332:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009334:	e00c      	b.n	8009350 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009336:	f7fa fdb5 	bl	8003ea4 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	2b64      	cmp	r3, #100	; 0x64
 8009342:	d905      	bls.n	8009350 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e178      	b.n	800963a <HAL_RCC_OscConfig+0x812>
 8009348:	58024400 	.word	0x58024400
 800934c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009350:	4b96      	ldr	r3, [pc, #600]	; (80095ac <HAL_RCC_OscConfig+0x784>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0ec      	beq.n	8009336 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d106      	bne.n	8009372 <HAL_RCC_OscConfig+0x54a>
 8009364:	4b92      	ldr	r3, [pc, #584]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009368:	4a91      	ldr	r2, [pc, #580]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800936a:	f043 0301 	orr.w	r3, r3, #1
 800936e:	6713      	str	r3, [r2, #112]	; 0x70
 8009370:	e02d      	b.n	80093ce <HAL_RCC_OscConfig+0x5a6>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10c      	bne.n	8009394 <HAL_RCC_OscConfig+0x56c>
 800937a:	4b8d      	ldr	r3, [pc, #564]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800937c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937e:	4a8c      	ldr	r2, [pc, #560]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	6713      	str	r3, [r2, #112]	; 0x70
 8009386:	4b8a      	ldr	r3, [pc, #552]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938a:	4a89      	ldr	r2, [pc, #548]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800938c:	f023 0304 	bic.w	r3, r3, #4
 8009390:	6713      	str	r3, [r2, #112]	; 0x70
 8009392:	e01c      	b.n	80093ce <HAL_RCC_OscConfig+0x5a6>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	2b05      	cmp	r3, #5
 800939a:	d10c      	bne.n	80093b6 <HAL_RCC_OscConfig+0x58e>
 800939c:	4b84      	ldr	r3, [pc, #528]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800939e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a0:	4a83      	ldr	r2, [pc, #524]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80093a2:	f043 0304 	orr.w	r3, r3, #4
 80093a6:	6713      	str	r3, [r2, #112]	; 0x70
 80093a8:	4b81      	ldr	r3, [pc, #516]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80093aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ac:	4a80      	ldr	r2, [pc, #512]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80093ae:	f043 0301 	orr.w	r3, r3, #1
 80093b2:	6713      	str	r3, [r2, #112]	; 0x70
 80093b4:	e00b      	b.n	80093ce <HAL_RCC_OscConfig+0x5a6>
 80093b6:	4b7e      	ldr	r3, [pc, #504]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80093b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ba:	4a7d      	ldr	r2, [pc, #500]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80093bc:	f023 0301 	bic.w	r3, r3, #1
 80093c0:	6713      	str	r3, [r2, #112]	; 0x70
 80093c2:	4b7b      	ldr	r3, [pc, #492]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80093c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c6:	4a7a      	ldr	r2, [pc, #488]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80093c8:	f023 0304 	bic.w	r3, r3, #4
 80093cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d015      	beq.n	8009402 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093d6:	f7fa fd65 	bl	8003ea4 <HAL_GetTick>
 80093da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093dc:	e00a      	b.n	80093f4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093de:	f7fa fd61 	bl	8003ea4 <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d901      	bls.n	80093f4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e122      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093f4:	4b6e      	ldr	r3, [pc, #440]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80093f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f8:	f003 0302 	and.w	r3, r3, #2
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0ee      	beq.n	80093de <HAL_RCC_OscConfig+0x5b6>
 8009400:	e014      	b.n	800942c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009402:	f7fa fd4f 	bl	8003ea4 <HAL_GetTick>
 8009406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009408:	e00a      	b.n	8009420 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800940a:	f7fa fd4b 	bl	8003ea4 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	f241 3288 	movw	r2, #5000	; 0x1388
 8009418:	4293      	cmp	r3, r2
 800941a:	d901      	bls.n	8009420 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	e10c      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009420:	4b63      	ldr	r3, [pc, #396]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1ee      	bne.n	800940a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 8101 	beq.w	8009638 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009436:	4b5e      	ldr	r3, [pc, #376]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800943e:	2b18      	cmp	r3, #24
 8009440:	f000 80bc 	beq.w	80095bc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	2b02      	cmp	r3, #2
 800944a:	f040 8095 	bne.w	8009578 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800944e:	4b58      	ldr	r3, [pc, #352]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a57      	ldr	r2, [pc, #348]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800945a:	f7fa fd23 	bl	8003ea4 <HAL_GetTick>
 800945e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009460:	e008      	b.n	8009474 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009462:	f7fa fd1f 	bl	8003ea4 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	2b02      	cmp	r3, #2
 800946e:	d901      	bls.n	8009474 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e0e2      	b.n	800963a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009474:	4b4e      	ldr	r3, [pc, #312]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1f0      	bne.n	8009462 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009480:	4b4b      	ldr	r3, [pc, #300]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009484:	4b4b      	ldr	r3, [pc, #300]	; (80095b4 <HAL_RCC_OscConfig+0x78c>)
 8009486:	4013      	ands	r3, r2
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009490:	0112      	lsls	r2, r2, #4
 8009492:	430a      	orrs	r2, r1
 8009494:	4946      	ldr	r1, [pc, #280]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009496:	4313      	orrs	r3, r2
 8009498:	628b      	str	r3, [r1, #40]	; 0x28
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949e:	3b01      	subs	r3, #1
 80094a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a8:	3b01      	subs	r3, #1
 80094aa:	025b      	lsls	r3, r3, #9
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	3b01      	subs	r3, #1
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	3b01      	subs	r3, #1
 80094c4:	061b      	lsls	r3, r3, #24
 80094c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094ca:	4939      	ldr	r1, [pc, #228]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80094d0:	4b37      	ldr	r3, [pc, #220]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	4a36      	ldr	r2, [pc, #216]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80094d6:	f023 0301 	bic.w	r3, r3, #1
 80094da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094dc:	4b34      	ldr	r3, [pc, #208]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80094de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094e0:	4b35      	ldr	r3, [pc, #212]	; (80095b8 <HAL_RCC_OscConfig+0x790>)
 80094e2:	4013      	ands	r3, r2
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094e8:	00d2      	lsls	r2, r2, #3
 80094ea:	4931      	ldr	r1, [pc, #196]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094f0:	4b2f      	ldr	r3, [pc, #188]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80094f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f4:	f023 020c 	bic.w	r2, r3, #12
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fc:	492c      	ldr	r1, [pc, #176]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009502:	4b2b      	ldr	r3, [pc, #172]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	f023 0202 	bic.w	r2, r3, #2
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	4928      	ldr	r1, [pc, #160]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009510:	4313      	orrs	r3, r2
 8009512:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009514:	4b26      	ldr	r3, [pc, #152]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009518:	4a25      	ldr	r2, [pc, #148]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800951a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800951e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009520:	4b23      	ldr	r3, [pc, #140]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009524:	4a22      	ldr	r2, [pc, #136]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800952a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800952c:	4b20      	ldr	r3, [pc, #128]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	4a1f      	ldr	r2, [pc, #124]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009538:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	4a1c      	ldr	r2, [pc, #112]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800953e:	f043 0301 	orr.w	r3, r3, #1
 8009542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009544:	4b1a      	ldr	r3, [pc, #104]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a19      	ldr	r2, [pc, #100]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800954a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800954e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009550:	f7fa fca8 	bl	8003ea4 <HAL_GetTick>
 8009554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009556:	e008      	b.n	800956a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009558:	f7fa fca4 	bl	8003ea4 <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	2b02      	cmp	r3, #2
 8009564:	d901      	bls.n	800956a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009566:	2303      	movs	r3, #3
 8009568:	e067      	b.n	800963a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800956a:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0f0      	beq.n	8009558 <HAL_RCC_OscConfig+0x730>
 8009576:	e05f      	b.n	8009638 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009578:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a0c      	ldr	r2, [pc, #48]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 800957e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009584:	f7fa fc8e 	bl	8003ea4 <HAL_GetTick>
 8009588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800958a:	e008      	b.n	800959e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800958c:	f7fa fc8a 	bl	8003ea4 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	2b02      	cmp	r3, #2
 8009598:	d901      	bls.n	800959e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e04d      	b.n	800963a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800959e:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <HAL_RCC_OscConfig+0x788>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1f0      	bne.n	800958c <HAL_RCC_OscConfig+0x764>
 80095aa:	e045      	b.n	8009638 <HAL_RCC_OscConfig+0x810>
 80095ac:	58024800 	.word	0x58024800
 80095b0:	58024400 	.word	0x58024400
 80095b4:	fffffc0c 	.word	0xfffffc0c
 80095b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80095bc:	4b21      	ldr	r3, [pc, #132]	; (8009644 <HAL_RCC_OscConfig+0x81c>)
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80095c2:	4b20      	ldr	r3, [pc, #128]	; (8009644 <HAL_RCC_OscConfig+0x81c>)
 80095c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d031      	beq.n	8009634 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f003 0203 	and.w	r2, r3, #3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095da:	429a      	cmp	r2, r3
 80095dc:	d12a      	bne.n	8009634 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	091b      	lsrs	r3, r3, #4
 80095e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d122      	bne.n	8009634 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d11a      	bne.n	8009634 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	0a5b      	lsrs	r3, r3, #9
 8009602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800960c:	429a      	cmp	r2, r3
 800960e:	d111      	bne.n	8009634 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800961e:	429a      	cmp	r2, r3
 8009620:	d108      	bne.n	8009634 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	0e1b      	lsrs	r3, r3, #24
 8009626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009630:	429a      	cmp	r2, r3
 8009632:	d001      	beq.n	8009638 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e000      	b.n	800963a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3730      	adds	r7, #48	; 0x30
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	58024400 	.word	0x58024400

08009648 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e19c      	b.n	8009996 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800965c:	4b8a      	ldr	r3, [pc, #552]	; (8009888 <HAL_RCC_ClockConfig+0x240>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d910      	bls.n	800968c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800966a:	4b87      	ldr	r3, [pc, #540]	; (8009888 <HAL_RCC_ClockConfig+0x240>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 020f 	bic.w	r2, r3, #15
 8009672:	4985      	ldr	r1, [pc, #532]	; (8009888 <HAL_RCC_ClockConfig+0x240>)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	4313      	orrs	r3, r2
 8009678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800967a:	4b83      	ldr	r3, [pc, #524]	; (8009888 <HAL_RCC_ClockConfig+0x240>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 030f 	and.w	r3, r3, #15
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d001      	beq.n	800968c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e184      	b.n	8009996 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d010      	beq.n	80096ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	691a      	ldr	r2, [r3, #16]
 800969c:	4b7b      	ldr	r3, [pc, #492]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d908      	bls.n	80096ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096a8:	4b78      	ldr	r3, [pc, #480]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	4975      	ldr	r1, [pc, #468]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0308 	and.w	r3, r3, #8
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d010      	beq.n	80096e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695a      	ldr	r2, [r3, #20]
 80096ca:	4b70      	ldr	r3, [pc, #448]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d908      	bls.n	80096e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096d6:	4b6d      	ldr	r3, [pc, #436]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	496a      	ldr	r1, [pc, #424]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0310 	and.w	r3, r3, #16
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d010      	beq.n	8009716 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	699a      	ldr	r2, [r3, #24]
 80096f8:	4b64      	ldr	r3, [pc, #400]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009700:	429a      	cmp	r2, r3
 8009702:	d908      	bls.n	8009716 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009704:	4b61      	ldr	r3, [pc, #388]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	495e      	ldr	r1, [pc, #376]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009712:	4313      	orrs	r3, r2
 8009714:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0320 	and.w	r3, r3, #32
 800971e:	2b00      	cmp	r3, #0
 8009720:	d010      	beq.n	8009744 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	69da      	ldr	r2, [r3, #28]
 8009726:	4b59      	ldr	r3, [pc, #356]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800972e:	429a      	cmp	r2, r3
 8009730:	d908      	bls.n	8009744 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009732:	4b56      	ldr	r3, [pc, #344]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	4953      	ldr	r1, [pc, #332]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009740:	4313      	orrs	r3, r2
 8009742:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d010      	beq.n	8009772 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	4b4d      	ldr	r3, [pc, #308]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f003 030f 	and.w	r3, r3, #15
 800975c:	429a      	cmp	r2, r3
 800975e:	d908      	bls.n	8009772 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009760:	4b4a      	ldr	r3, [pc, #296]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	f023 020f 	bic.w	r2, r3, #15
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	4947      	ldr	r1, [pc, #284]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 800976e:	4313      	orrs	r3, r2
 8009770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d055      	beq.n	800982a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800977e:	4b43      	ldr	r3, [pc, #268]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	4940      	ldr	r1, [pc, #256]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 800978c:	4313      	orrs	r3, r2
 800978e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d107      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009798:	4b3c      	ldr	r3, [pc, #240]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d121      	bne.n	80097e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e0f6      	b.n	8009996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d107      	bne.n	80097c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097b0:	4b36      	ldr	r3, [pc, #216]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d115      	bne.n	80097e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e0ea      	b.n	8009996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d107      	bne.n	80097d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097c8:	4b30      	ldr	r3, [pc, #192]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d109      	bne.n	80097e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e0de      	b.n	8009996 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097d8:	4b2c      	ldr	r3, [pc, #176]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e0d6      	b.n	8009996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097e8:	4b28      	ldr	r3, [pc, #160]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	f023 0207 	bic.w	r2, r3, #7
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	4925      	ldr	r1, [pc, #148]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097fa:	f7fa fb53 	bl	8003ea4 <HAL_GetTick>
 80097fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009800:	e00a      	b.n	8009818 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009802:	f7fa fb4f 	bl	8003ea4 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009810:	4293      	cmp	r3, r2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e0be      	b.n	8009996 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009818:	4b1c      	ldr	r3, [pc, #112]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	429a      	cmp	r2, r3
 8009828:	d1eb      	bne.n	8009802 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d010      	beq.n	8009858 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	4b14      	ldr	r3, [pc, #80]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	429a      	cmp	r2, r3
 8009844:	d208      	bcs.n	8009858 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009846:	4b11      	ldr	r3, [pc, #68]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	f023 020f 	bic.w	r2, r3, #15
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	490e      	ldr	r1, [pc, #56]	; (800988c <HAL_RCC_ClockConfig+0x244>)
 8009854:	4313      	orrs	r3, r2
 8009856:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009858:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <HAL_RCC_ClockConfig+0x240>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d214      	bcs.n	8009890 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009866:	4b08      	ldr	r3, [pc, #32]	; (8009888 <HAL_RCC_ClockConfig+0x240>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f023 020f 	bic.w	r2, r3, #15
 800986e:	4906      	ldr	r1, [pc, #24]	; (8009888 <HAL_RCC_ClockConfig+0x240>)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	4313      	orrs	r3, r2
 8009874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009876:	4b04      	ldr	r3, [pc, #16]	; (8009888 <HAL_RCC_ClockConfig+0x240>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d005      	beq.n	8009890 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e086      	b.n	8009996 <HAL_RCC_ClockConfig+0x34e>
 8009888:	52002000 	.word	0x52002000
 800988c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b00      	cmp	r3, #0
 800989a:	d010      	beq.n	80098be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691a      	ldr	r2, [r3, #16]
 80098a0:	4b3f      	ldr	r3, [pc, #252]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d208      	bcs.n	80098be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098ac:	4b3c      	ldr	r3, [pc, #240]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	4939      	ldr	r1, [pc, #228]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0308 	and.w	r3, r3, #8
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d010      	beq.n	80098ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	695a      	ldr	r2, [r3, #20]
 80098ce:	4b34      	ldr	r3, [pc, #208]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 80098d0:	69db      	ldr	r3, [r3, #28]
 80098d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d208      	bcs.n	80098ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098da:	4b31      	ldr	r3, [pc, #196]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	492e      	ldr	r1, [pc, #184]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0310 	and.w	r3, r3, #16
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d010      	beq.n	800991a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	699a      	ldr	r2, [r3, #24]
 80098fc:	4b28      	ldr	r3, [pc, #160]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009904:	429a      	cmp	r2, r3
 8009906:	d208      	bcs.n	800991a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009908:	4b25      	ldr	r3, [pc, #148]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	4922      	ldr	r1, [pc, #136]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 8009916:	4313      	orrs	r3, r2
 8009918:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	d010      	beq.n	8009948 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	69da      	ldr	r2, [r3, #28]
 800992a:	4b1d      	ldr	r3, [pc, #116]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009932:	429a      	cmp	r2, r3
 8009934:	d208      	bcs.n	8009948 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009936:	4b1a      	ldr	r3, [pc, #104]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	4917      	ldr	r1, [pc, #92]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 8009944:	4313      	orrs	r3, r2
 8009946:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009948:	f000 f834 	bl	80099b4 <HAL_RCC_GetSysClockFreq>
 800994c:	4602      	mov	r2, r0
 800994e:	4b14      	ldr	r3, [pc, #80]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	f003 030f 	and.w	r3, r3, #15
 8009958:	4912      	ldr	r1, [pc, #72]	; (80099a4 <HAL_RCC_ClockConfig+0x35c>)
 800995a:	5ccb      	ldrb	r3, [r1, r3]
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	fa22 f303 	lsr.w	r3, r2, r3
 8009964:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009966:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <HAL_RCC_ClockConfig+0x358>)
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	4a0d      	ldr	r2, [pc, #52]	; (80099a4 <HAL_RCC_ClockConfig+0x35c>)
 8009970:	5cd3      	ldrb	r3, [r2, r3]
 8009972:	f003 031f 	and.w	r3, r3, #31
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	fa22 f303 	lsr.w	r3, r2, r3
 800997c:	4a0a      	ldr	r2, [pc, #40]	; (80099a8 <HAL_RCC_ClockConfig+0x360>)
 800997e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009980:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <HAL_RCC_ClockConfig+0x364>)
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009986:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <HAL_RCC_ClockConfig+0x368>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f7fa fa40 	bl	8003e10 <HAL_InitTick>
 8009990:	4603      	mov	r3, r0
 8009992:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	58024400 	.word	0x58024400
 80099a4:	08026bdc 	.word	0x08026bdc
 80099a8:	24000004 	.word	0x24000004
 80099ac:	24000000 	.word	0x24000000
 80099b0:	24000008 	.word	0x24000008

080099b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b089      	sub	sp, #36	; 0x24
 80099b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099ba:	4bb3      	ldr	r3, [pc, #716]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099c2:	2b18      	cmp	r3, #24
 80099c4:	f200 8155 	bhi.w	8009c72 <HAL_RCC_GetSysClockFreq+0x2be>
 80099c8:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80099ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ce:	bf00      	nop
 80099d0:	08009a35 	.word	0x08009a35
 80099d4:	08009c73 	.word	0x08009c73
 80099d8:	08009c73 	.word	0x08009c73
 80099dc:	08009c73 	.word	0x08009c73
 80099e0:	08009c73 	.word	0x08009c73
 80099e4:	08009c73 	.word	0x08009c73
 80099e8:	08009c73 	.word	0x08009c73
 80099ec:	08009c73 	.word	0x08009c73
 80099f0:	08009a5b 	.word	0x08009a5b
 80099f4:	08009c73 	.word	0x08009c73
 80099f8:	08009c73 	.word	0x08009c73
 80099fc:	08009c73 	.word	0x08009c73
 8009a00:	08009c73 	.word	0x08009c73
 8009a04:	08009c73 	.word	0x08009c73
 8009a08:	08009c73 	.word	0x08009c73
 8009a0c:	08009c73 	.word	0x08009c73
 8009a10:	08009a61 	.word	0x08009a61
 8009a14:	08009c73 	.word	0x08009c73
 8009a18:	08009c73 	.word	0x08009c73
 8009a1c:	08009c73 	.word	0x08009c73
 8009a20:	08009c73 	.word	0x08009c73
 8009a24:	08009c73 	.word	0x08009c73
 8009a28:	08009c73 	.word	0x08009c73
 8009a2c:	08009c73 	.word	0x08009c73
 8009a30:	08009a67 	.word	0x08009a67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a34:	4b94      	ldr	r3, [pc, #592]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0320 	and.w	r3, r3, #32
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d009      	beq.n	8009a54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a40:	4b91      	ldr	r3, [pc, #580]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	08db      	lsrs	r3, r3, #3
 8009a46:	f003 0303 	and.w	r3, r3, #3
 8009a4a:	4a90      	ldr	r2, [pc, #576]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009a52:	e111      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a54:	4b8d      	ldr	r3, [pc, #564]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a56:	61bb      	str	r3, [r7, #24]
    break;
 8009a58:	e10e      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009a5a:	4b8d      	ldr	r3, [pc, #564]	; (8009c90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a5c:	61bb      	str	r3, [r7, #24]
    break;
 8009a5e:	e10b      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009a60:	4b8c      	ldr	r3, [pc, #560]	; (8009c94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a62:	61bb      	str	r3, [r7, #24]
    break;
 8009a64:	e108      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a66:	4b88      	ldr	r3, [pc, #544]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6a:	f003 0303 	and.w	r3, r3, #3
 8009a6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009a70:	4b85      	ldr	r3, [pc, #532]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	091b      	lsrs	r3, r3, #4
 8009a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a7c:	4b82      	ldr	r3, [pc, #520]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a86:	4b80      	ldr	r3, [pc, #512]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8a:	08db      	lsrs	r3, r3, #3
 8009a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	fb02 f303 	mul.w	r3, r2, r3
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 80e1 	beq.w	8009c6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	f000 8083 	beq.w	8009bb8 <HAL_RCC_GetSysClockFreq+0x204>
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	f200 80a1 	bhi.w	8009bfc <HAL_RCC_GetSysClockFreq+0x248>
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <HAL_RCC_GetSysClockFreq+0x114>
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d056      	beq.n	8009b74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009ac6:	e099      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ac8:	4b6f      	ldr	r3, [pc, #444]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d02d      	beq.n	8009b30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ad4:	4b6c      	ldr	r3, [pc, #432]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	08db      	lsrs	r3, r3, #3
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	4a6b      	ldr	r2, [pc, #428]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	ee07 3a90 	vmov	s15, r3
 8009aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afe:	4b62      	ldr	r3, [pc, #392]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009b2e:	e087      	b.n	8009c40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009c9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b42:	4b51      	ldr	r3, [pc, #324]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b72:	e065      	b.n	8009c40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009ca0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b40      	ldr	r3, [pc, #256]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb6:	e043      	b.n	8009c40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009ca4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b2f      	ldr	r3, [pc, #188]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bfa:	e021      	b.n	8009c40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009ca0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0e:	4b1e      	ldr	r3, [pc, #120]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009c40:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c44:	0a5b      	lsrs	r3, r3, #9
 8009c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	ee07 3a90 	vmov	s15, r3
 8009c54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c64:	ee17 3a90 	vmov	r3, s15
 8009c68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009c6a:	e005      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61bb      	str	r3, [r7, #24]
    break;
 8009c70:	e002      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009c72:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c74:	61bb      	str	r3, [r7, #24]
    break;
 8009c76:	bf00      	nop
  }

  return sysclockfreq;
 8009c78:	69bb      	ldr	r3, [r7, #24]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3724      	adds	r7, #36	; 0x24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	58024400 	.word	0x58024400
 8009c8c:	03d09000 	.word	0x03d09000
 8009c90:	003d0900 	.word	0x003d0900
 8009c94:	017d7840 	.word	0x017d7840
 8009c98:	46000000 	.word	0x46000000
 8009c9c:	4c742400 	.word	0x4c742400
 8009ca0:	4a742400 	.word	0x4a742400
 8009ca4:	4bbebc20 	.word	0x4bbebc20

08009ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cae:	f7ff fe81 	bl	80099b4 <HAL_RCC_GetSysClockFreq>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	4b10      	ldr	r3, [pc, #64]	; (8009cf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	0a1b      	lsrs	r3, r3, #8
 8009cba:	f003 030f 	and.w	r3, r3, #15
 8009cbe:	490f      	ldr	r1, [pc, #60]	; (8009cfc <HAL_RCC_GetHCLKFreq+0x54>)
 8009cc0:	5ccb      	ldrb	r3, [r1, r3]
 8009cc2:	f003 031f 	and.w	r3, r3, #31
 8009cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	f003 030f 	and.w	r3, r3, #15
 8009cd4:	4a09      	ldr	r2, [pc, #36]	; (8009cfc <HAL_RCC_GetHCLKFreq+0x54>)
 8009cd6:	5cd3      	ldrb	r3, [r2, r3]
 8009cd8:	f003 031f 	and.w	r3, r3, #31
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	fa22 f303 	lsr.w	r3, r2, r3
 8009ce2:	4a07      	ldr	r2, [pc, #28]	; (8009d00 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ce4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ce6:	4a07      	ldr	r2, [pc, #28]	; (8009d04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cec:	4b04      	ldr	r3, [pc, #16]	; (8009d00 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cee:	681b      	ldr	r3, [r3, #0]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	08026bdc 	.word	0x08026bdc
 8009d00:	24000004 	.word	0x24000004
 8009d04:	24000000 	.word	0x24000000

08009d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d0c:	f7ff ffcc 	bl	8009ca8 <HAL_RCC_GetHCLKFreq>
 8009d10:	4602      	mov	r2, r0
 8009d12:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	091b      	lsrs	r3, r3, #4
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	4904      	ldr	r1, [pc, #16]	; (8009d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d1e:	5ccb      	ldrb	r3, [r1, r3]
 8009d20:	f003 031f 	and.w	r3, r3, #31
 8009d24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	58024400 	.word	0x58024400
 8009d30:	08026bdc 	.word	0x08026bdc

08009d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d38:	f7ff ffb6 	bl	8009ca8 <HAL_RCC_GetHCLKFreq>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	4b06      	ldr	r3, [pc, #24]	; (8009d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	0a1b      	lsrs	r3, r3, #8
 8009d44:	f003 0307 	and.w	r3, r3, #7
 8009d48:	4904      	ldr	r1, [pc, #16]	; (8009d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d4a:	5ccb      	ldrb	r3, [r1, r3]
 8009d4c:	f003 031f 	and.w	r3, r3, #31
 8009d50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	58024400 	.word	0x58024400
 8009d5c:	08026bdc 	.word	0x08026bdc

08009d60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d68:	2300      	movs	r3, #0
 8009d6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d03f      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d84:	d02a      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009d86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d8a:	d824      	bhi.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d90:	d018      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d96:	d81e      	bhi.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009da0:	d007      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009da2:	e018      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009da4:	4bab      	ldr	r3, [pc, #684]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	4aaa      	ldr	r2, [pc, #680]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009db0:	e015      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3304      	adds	r3, #4
 8009db6:	2102      	movs	r1, #2
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 fff3 	bl	800bda4 <RCCEx_PLL2_Config>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009dc2:	e00c      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3324      	adds	r3, #36	; 0x24
 8009dc8:	2102      	movs	r1, #2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f002 f89c 	bl	800bf08 <RCCEx_PLL3_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009dd4:	e003      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d109      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009de4:	4b9b      	ldr	r3, [pc, #620]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009df0:	4998      	ldr	r1, [pc, #608]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	650b      	str	r3, [r1, #80]	; 0x50
 8009df6:	e001      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d03d      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0c:	2b04      	cmp	r3, #4
 8009e0e:	d826      	bhi.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009e10:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e16:	bf00      	nop
 8009e18:	08009e2d 	.word	0x08009e2d
 8009e1c:	08009e3b 	.word	0x08009e3b
 8009e20:	08009e4d 	.word	0x08009e4d
 8009e24:	08009e65 	.word	0x08009e65
 8009e28:	08009e65 	.word	0x08009e65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e2c:	4b89      	ldr	r3, [pc, #548]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	4a88      	ldr	r2, [pc, #544]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e38:	e015      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	2100      	movs	r1, #0
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 ffaf 	bl	800bda4 <RCCEx_PLL2_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e4a:	e00c      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3324      	adds	r3, #36	; 0x24
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f002 f858 	bl	800bf08 <RCCEx_PLL3_Config>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e5c:	e003      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	75fb      	strb	r3, [r7, #23]
      break;
 8009e62:	e000      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d109      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e6c:	4b79      	ldr	r3, [pc, #484]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e70:	f023 0207 	bic.w	r2, r3, #7
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e78:	4976      	ldr	r1, [pc, #472]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8009e7e:	e001      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d042      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e98:	d02b      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e9e:	d825      	bhi.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009ea0:	2bc0      	cmp	r3, #192	; 0xc0
 8009ea2:	d028      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009ea4:	2bc0      	cmp	r3, #192	; 0xc0
 8009ea6:	d821      	bhi.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009ea8:	2b80      	cmp	r3, #128	; 0x80
 8009eaa:	d016      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009eac:	2b80      	cmp	r3, #128	; 0x80
 8009eae:	d81d      	bhi.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d002      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009eb4:	2b40      	cmp	r3, #64	; 0x40
 8009eb6:	d007      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009eb8:	e018      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eba:	4b66      	ldr	r3, [pc, #408]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	4a65      	ldr	r2, [pc, #404]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ec6:	e017      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 ff68 	bl	800bda4 <RCCEx_PLL2_Config>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ed8:	e00e      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3324      	adds	r3, #36	; 0x24
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f002 f811 	bl	800bf08 <RCCEx_PLL3_Config>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009eea:	e005      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef0:	e002      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009ef2:	bf00      	nop
 8009ef4:	e000      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d109      	bne.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009efe:	4b55      	ldr	r3, [pc, #340]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f0a:	4952      	ldr	r1, [pc, #328]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	650b      	str	r3, [r1, #80]	; 0x50
 8009f10:	e001      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d049      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f2c:	d030      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009f2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f32:	d82a      	bhi.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f38:	d02c      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f3e:	d824      	bhi.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f44:	d018      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f4a:	d81e      	bhi.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f54:	d007      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009f56:	e018      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f58:	4b3e      	ldr	r3, [pc, #248]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5c:	4a3d      	ldr	r2, [pc, #244]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f64:	e017      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 ff19 	bl	800bda4 <RCCEx_PLL2_Config>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009f76:	e00e      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3324      	adds	r3, #36	; 0x24
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f001 ffc2 	bl	800bf08 <RCCEx_PLL3_Config>
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f88:	e005      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8e:	e002      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009f90:	bf00      	nop
 8009f92:	e000      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f9c:	4b2d      	ldr	r3, [pc, #180]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009faa:	492a      	ldr	r1, [pc, #168]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	658b      	str	r3, [r1, #88]	; 0x58
 8009fb0:	e001      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
 8009fb4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d04c      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fcc:	d030      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fd2:	d82a      	bhi.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fd8:	d02c      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fde:	d824      	bhi.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fe4:	d018      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fea:	d81e      	bhi.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d003      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ff4:	d007      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009ff6:	e018      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ff8:	4b16      	ldr	r3, [pc, #88]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffc:	4a15      	ldr	r2, [pc, #84]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a004:	e017      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3304      	adds	r3, #4
 800a00a:	2100      	movs	r1, #0
 800a00c:	4618      	mov	r0, r3
 800a00e:	f001 fec9 	bl	800bda4 <RCCEx_PLL2_Config>
 800a012:	4603      	mov	r3, r0
 800a014:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a016:	e00e      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	3324      	adds	r3, #36	; 0x24
 800a01c:	2100      	movs	r1, #0
 800a01e:	4618      	mov	r0, r3
 800a020:	f001 ff72 	bl	800bf08 <RCCEx_PLL3_Config>
 800a024:	4603      	mov	r3, r0
 800a026:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a028:	e005      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	75fb      	strb	r3, [r7, #23]
      break;
 800a02e:	e002      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a030:	bf00      	nop
 800a032:	e000      	b.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a034:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10d      	bne.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a03c:	4b05      	ldr	r3, [pc, #20]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a040:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a04a:	4902      	ldr	r1, [pc, #8]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a04c:	4313      	orrs	r3, r2
 800a04e:	658b      	str	r3, [r1, #88]	; 0x58
 800a050:	e004      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a052:	bf00      	nop
 800a054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d032      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a06c:	2b30      	cmp	r3, #48	; 0x30
 800a06e:	d01c      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a070:	2b30      	cmp	r3, #48	; 0x30
 800a072:	d817      	bhi.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a074:	2b20      	cmp	r3, #32
 800a076:	d00c      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d813      	bhi.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d016      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a080:	2b10      	cmp	r3, #16
 800a082:	d10f      	bne.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a084:	4baf      	ldr	r3, [pc, #700]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	4aae      	ldr	r2, [pc, #696]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a08a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a08e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a090:	e00e      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3304      	adds	r3, #4
 800a096:	2102      	movs	r1, #2
 800a098:	4618      	mov	r0, r3
 800a09a:	f001 fe83 	bl	800bda4 <RCCEx_PLL2_Config>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a0a2:	e005      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a8:	e002      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a0aa:	bf00      	nop
 800a0ac:	e000      	b.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a0ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d109      	bne.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a0b6:	4ba3      	ldr	r3, [pc, #652]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0c2:	49a0      	ldr	r1, [pc, #640]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0c8:	e001      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d047      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e2:	d030      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a0e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0e8:	d82a      	bhi.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a0ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0ee:	d02c      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a0f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0f4:	d824      	bhi.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a0f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0fa:	d018      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a100:	d81e      	bhi.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a10a:	d007      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a10c:	e018      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a10e:	4b8d      	ldr	r3, [pc, #564]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	4a8c      	ldr	r2, [pc, #560]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a118:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a11a:	e017      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3304      	adds	r3, #4
 800a120:	2100      	movs	r1, #0
 800a122:	4618      	mov	r0, r3
 800a124:	f001 fe3e 	bl	800bda4 <RCCEx_PLL2_Config>
 800a128:	4603      	mov	r3, r0
 800a12a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a12c:	e00e      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3324      	adds	r3, #36	; 0x24
 800a132:	2100      	movs	r1, #0
 800a134:	4618      	mov	r0, r3
 800a136:	f001 fee7 	bl	800bf08 <RCCEx_PLL3_Config>
 800a13a:	4603      	mov	r3, r0
 800a13c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a13e:	e005      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	75fb      	strb	r3, [r7, #23]
      break;
 800a144:	e002      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a146:	bf00      	nop
 800a148:	e000      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a14a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d109      	bne.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a152:	4b7c      	ldr	r3, [pc, #496]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a156:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a15e:	4979      	ldr	r1, [pc, #484]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a160:	4313      	orrs	r3, r2
 800a162:	650b      	str	r3, [r1, #80]	; 0x50
 800a164:	e001      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d049      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a17a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a17e:	d02e      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a184:	d828      	bhi.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a18a:	d02a      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a18c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a190:	d822      	bhi.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a196:	d026      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a19c:	d81c      	bhi.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a19e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a2:	d010      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a1a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1a8:	d816      	bhi.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d01d      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a1ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1b2:	d111      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f001 fdf2 	bl	800bda4 <RCCEx_PLL2_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a1c4:	e012      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3324      	adds	r3, #36	; 0x24
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f001 fe9b 	bl	800bf08 <RCCEx_PLL3_Config>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a1d6:	e009      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	75fb      	strb	r3, [r7, #23]
      break;
 800a1dc:	e006      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1de:	bf00      	nop
 800a1e0:	e004      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1e2:	bf00      	nop
 800a1e4:	e002      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1e6:	bf00      	nop
 800a1e8:	e000      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d109      	bne.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1f2:	4b54      	ldr	r3, [pc, #336]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1fe:	4951      	ldr	r1, [pc, #324]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a200:	4313      	orrs	r3, r2
 800a202:	650b      	str	r3, [r1, #80]	; 0x50
 800a204:	e001      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d04b      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a21c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a220:	d02e      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a226:	d828      	bhi.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a22c:	d02a      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a232:	d822      	bhi.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a234:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a238:	d026      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a23a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a23e:	d81c      	bhi.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a244:	d010      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a24a:	d816      	bhi.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01d      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a254:	d111      	bne.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3304      	adds	r3, #4
 800a25a:	2101      	movs	r1, #1
 800a25c:	4618      	mov	r0, r3
 800a25e:	f001 fda1 	bl	800bda4 <RCCEx_PLL2_Config>
 800a262:	4603      	mov	r3, r0
 800a264:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a266:	e012      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3324      	adds	r3, #36	; 0x24
 800a26c:	2101      	movs	r1, #1
 800a26e:	4618      	mov	r0, r3
 800a270:	f001 fe4a 	bl	800bf08 <RCCEx_PLL3_Config>
 800a274:	4603      	mov	r3, r0
 800a276:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a278:	e009      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	75fb      	strb	r3, [r7, #23]
      break;
 800a27e:	e006      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a280:	bf00      	nop
 800a282:	e004      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a284:	bf00      	nop
 800a286:	e002      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a288:	bf00      	nop
 800a28a:	e000      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a28c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a294:	4b2b      	ldr	r3, [pc, #172]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a298:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2a2:	4928      	ldr	r1, [pc, #160]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	658b      	str	r3, [r1, #88]	; 0x58
 800a2a8:	e001      	b.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d02f      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2c2:	d00e      	beq.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a2c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2c8:	d814      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d015      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a2ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2d2:	d10f      	bne.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2d4:	4b1b      	ldr	r3, [pc, #108]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d8:	4a1a      	ldr	r2, [pc, #104]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2e0:	e00c      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3304      	adds	r3, #4
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f001 fd5b 	bl	800bda4 <RCCEx_PLL2_Config>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2f2:	e003      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f8:	e000      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a2fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d109      	bne.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a302:	4b10      	ldr	r3, [pc, #64]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a306:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a30e:	490d      	ldr	r1, [pc, #52]	; (800a344 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a310:	4313      	orrs	r3, r2
 800a312:	650b      	str	r3, [r1, #80]	; 0x50
 800a314:	e001      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d033      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d81c      	bhi.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a32e:	a201      	add	r2, pc, #4	; (adr r2, 800a334 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a36f 	.word	0x0800a36f
 800a338:	0800a349 	.word	0x0800a349
 800a33c:	0800a357 	.word	0x0800a357
 800a340:	0800a36f 	.word	0x0800a36f
 800a344:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a348:	4bb8      	ldr	r3, [pc, #736]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	4ab7      	ldr	r2, [pc, #732]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a354:	e00c      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3304      	adds	r3, #4
 800a35a:	2102      	movs	r1, #2
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 fd21 	bl	800bda4 <RCCEx_PLL2_Config>
 800a362:	4603      	mov	r3, r0
 800a364:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a366:	e003      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	75fb      	strb	r3, [r7, #23]
      break;
 800a36c:	e000      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a36e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a370:	7dfb      	ldrb	r3, [r7, #23]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a376:	4bad      	ldr	r3, [pc, #692]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	f023 0203 	bic.w	r2, r3, #3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a382:	49aa      	ldr	r1, [pc, #680]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a384:	4313      	orrs	r3, r2
 800a386:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a388:	e001      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 8086 	beq.w	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a39c:	4ba4      	ldr	r3, [pc, #656]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4aa3      	ldr	r2, [pc, #652]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a3a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3a8:	f7f9 fd7c 	bl	8003ea4 <HAL_GetTick>
 800a3ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3ae:	e009      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3b0:	f7f9 fd78 	bl	8003ea4 <HAL_GetTick>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	2b64      	cmp	r3, #100	; 0x64
 800a3bc:	d902      	bls.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	75fb      	strb	r3, [r7, #23]
        break;
 800a3c2:	e005      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3c4:	4b9a      	ldr	r3, [pc, #616]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0ef      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d166      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3d6:	4b95      	ldr	r3, [pc, #596]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3e0:	4053      	eors	r3, r2
 800a3e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d013      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3ea:	4b90      	ldr	r3, [pc, #576]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3f4:	4b8d      	ldr	r3, [pc, #564]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f8:	4a8c      	ldr	r2, [pc, #560]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a400:	4b8a      	ldr	r3, [pc, #552]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a404:	4a89      	ldr	r2, [pc, #548]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a40a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a40c:	4a87      	ldr	r2, [pc, #540]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a41c:	d115      	bne.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a41e:	f7f9 fd41 	bl	8003ea4 <HAL_GetTick>
 800a422:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a424:	e00b      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a426:	f7f9 fd3d 	bl	8003ea4 <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	f241 3288 	movw	r2, #5000	; 0x1388
 800a434:	4293      	cmp	r3, r2
 800a436:	d902      	bls.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	75fb      	strb	r3, [r7, #23]
            break;
 800a43c:	e005      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a43e:	4b7b      	ldr	r3, [pc, #492]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0ed      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d126      	bne.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a45a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a45e:	d10d      	bne.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a460:	4b72      	ldr	r3, [pc, #456]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a46e:	0919      	lsrs	r1, r3, #4
 800a470:	4b70      	ldr	r3, [pc, #448]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a472:	400b      	ands	r3, r1
 800a474:	496d      	ldr	r1, [pc, #436]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a476:	4313      	orrs	r3, r2
 800a478:	610b      	str	r3, [r1, #16]
 800a47a:	e005      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a47c:	4b6b      	ldr	r3, [pc, #428]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	4a6a      	ldr	r2, [pc, #424]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a482:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a486:	6113      	str	r3, [r2, #16]
 800a488:	4b68      	ldr	r3, [pc, #416]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a48a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a496:	4965      	ldr	r1, [pc, #404]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	670b      	str	r3, [r1, #112]	; 0x70
 800a49c:	e004      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a49e:	7dfb      	ldrb	r3, [r7, #23]
 800a4a0:	75bb      	strb	r3, [r7, #22]
 800a4a2:	e001      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d07e      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4b8:	2b28      	cmp	r3, #40	; 0x28
 800a4ba:	d867      	bhi.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a4bc:	a201      	add	r2, pc, #4	; (adr r2, 800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c2:	bf00      	nop
 800a4c4:	0800a593 	.word	0x0800a593
 800a4c8:	0800a58d 	.word	0x0800a58d
 800a4cc:	0800a58d 	.word	0x0800a58d
 800a4d0:	0800a58d 	.word	0x0800a58d
 800a4d4:	0800a58d 	.word	0x0800a58d
 800a4d8:	0800a58d 	.word	0x0800a58d
 800a4dc:	0800a58d 	.word	0x0800a58d
 800a4e0:	0800a58d 	.word	0x0800a58d
 800a4e4:	0800a569 	.word	0x0800a569
 800a4e8:	0800a58d 	.word	0x0800a58d
 800a4ec:	0800a58d 	.word	0x0800a58d
 800a4f0:	0800a58d 	.word	0x0800a58d
 800a4f4:	0800a58d 	.word	0x0800a58d
 800a4f8:	0800a58d 	.word	0x0800a58d
 800a4fc:	0800a58d 	.word	0x0800a58d
 800a500:	0800a58d 	.word	0x0800a58d
 800a504:	0800a57b 	.word	0x0800a57b
 800a508:	0800a58d 	.word	0x0800a58d
 800a50c:	0800a58d 	.word	0x0800a58d
 800a510:	0800a58d 	.word	0x0800a58d
 800a514:	0800a58d 	.word	0x0800a58d
 800a518:	0800a58d 	.word	0x0800a58d
 800a51c:	0800a58d 	.word	0x0800a58d
 800a520:	0800a58d 	.word	0x0800a58d
 800a524:	0800a593 	.word	0x0800a593
 800a528:	0800a58d 	.word	0x0800a58d
 800a52c:	0800a58d 	.word	0x0800a58d
 800a530:	0800a58d 	.word	0x0800a58d
 800a534:	0800a58d 	.word	0x0800a58d
 800a538:	0800a58d 	.word	0x0800a58d
 800a53c:	0800a58d 	.word	0x0800a58d
 800a540:	0800a58d 	.word	0x0800a58d
 800a544:	0800a593 	.word	0x0800a593
 800a548:	0800a58d 	.word	0x0800a58d
 800a54c:	0800a58d 	.word	0x0800a58d
 800a550:	0800a58d 	.word	0x0800a58d
 800a554:	0800a58d 	.word	0x0800a58d
 800a558:	0800a58d 	.word	0x0800a58d
 800a55c:	0800a58d 	.word	0x0800a58d
 800a560:	0800a58d 	.word	0x0800a58d
 800a564:	0800a593 	.word	0x0800a593
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3304      	adds	r3, #4
 800a56c:	2101      	movs	r1, #1
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 fc18 	bl	800bda4 <RCCEx_PLL2_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a578:	e00c      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3324      	adds	r3, #36	; 0x24
 800a57e:	2101      	movs	r1, #1
 800a580:	4618      	mov	r0, r3
 800a582:	f001 fcc1 	bl	800bf08 <RCCEx_PLL3_Config>
 800a586:	4603      	mov	r3, r0
 800a588:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a58a:	e003      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	75fb      	strb	r3, [r7, #23]
      break;
 800a590:	e000      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a592:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d109      	bne.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a59a:	4b24      	ldr	r3, [pc, #144]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5a6:	4921      	ldr	r1, [pc, #132]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	654b      	str	r3, [r1, #84]	; 0x54
 800a5ac:	e001      	b.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
 800a5b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d03e      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5c2:	2b05      	cmp	r3, #5
 800a5c4:	d820      	bhi.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a60f 	.word	0x0800a60f
 800a5d0:	0800a5e5 	.word	0x0800a5e5
 800a5d4:	0800a5f7 	.word	0x0800a5f7
 800a5d8:	0800a60f 	.word	0x0800a60f
 800a5dc:	0800a60f 	.word	0x0800a60f
 800a5e0:	0800a60f 	.word	0x0800a60f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 fbda 	bl	800bda4 <RCCEx_PLL2_Config>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5f4:	e00c      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3324      	adds	r3, #36	; 0x24
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 fc83 	bl	800bf08 <RCCEx_PLL3_Config>
 800a602:	4603      	mov	r3, r0
 800a604:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a606:	e003      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	75fb      	strb	r3, [r7, #23]
      break;
 800a60c:	e000      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a60e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d110      	bne.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61a:	f023 0207 	bic.w	r2, r3, #7
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a622:	4902      	ldr	r1, [pc, #8]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a624:	4313      	orrs	r3, r2
 800a626:	654b      	str	r3, [r1, #84]	; 0x54
 800a628:	e008      	b.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a62a:	bf00      	nop
 800a62c:	58024400 	.word	0x58024400
 800a630:	58024800 	.word	0x58024800
 800a634:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0304 	and.w	r3, r3, #4
 800a644:	2b00      	cmp	r3, #0
 800a646:	d039      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a64e:	2b05      	cmp	r3, #5
 800a650:	d820      	bhi.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a652:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a658:	0800a69b 	.word	0x0800a69b
 800a65c:	0800a671 	.word	0x0800a671
 800a660:	0800a683 	.word	0x0800a683
 800a664:	0800a69b 	.word	0x0800a69b
 800a668:	0800a69b 	.word	0x0800a69b
 800a66c:	0800a69b 	.word	0x0800a69b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3304      	adds	r3, #4
 800a674:	2101      	movs	r1, #1
 800a676:	4618      	mov	r0, r3
 800a678:	f001 fb94 	bl	800bda4 <RCCEx_PLL2_Config>
 800a67c:	4603      	mov	r3, r0
 800a67e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a680:	e00c      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3324      	adds	r3, #36	; 0x24
 800a686:	2101      	movs	r1, #1
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 fc3d 	bl	800bf08 <RCCEx_PLL3_Config>
 800a68e:	4603      	mov	r3, r0
 800a690:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a692:	e003      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	75fb      	strb	r3, [r7, #23]
      break;
 800a698:	e000      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a69a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a69c:	7dfb      	ldrb	r3, [r7, #23]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10a      	bne.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6a2:	4bb7      	ldr	r3, [pc, #732]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a6:	f023 0207 	bic.w	r2, r3, #7
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b0:	49b3      	ldr	r1, [pc, #716]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	658b      	str	r3, [r1, #88]	; 0x58
 800a6b6:	e001      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 0320 	and.w	r3, r3, #32
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d04b      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6d2:	d02e      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a6d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6d8:	d828      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6de:	d02a      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e4:	d822      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6ea:	d026      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a6ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6f0:	d81c      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6f6:	d010      	beq.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a6f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6fc:	d816      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d01d      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a706:	d111      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3304      	adds	r3, #4
 800a70c:	2100      	movs	r1, #0
 800a70e:	4618      	mov	r0, r3
 800a710:	f001 fb48 	bl	800bda4 <RCCEx_PLL2_Config>
 800a714:	4603      	mov	r3, r0
 800a716:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a718:	e012      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	3324      	adds	r3, #36	; 0x24
 800a71e:	2102      	movs	r1, #2
 800a720:	4618      	mov	r0, r3
 800a722:	f001 fbf1 	bl	800bf08 <RCCEx_PLL3_Config>
 800a726:	4603      	mov	r3, r0
 800a728:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a72a:	e009      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	75fb      	strb	r3, [r7, #23]
      break;
 800a730:	e006      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a732:	bf00      	nop
 800a734:	e004      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a736:	bf00      	nop
 800a738:	e002      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a73a:	bf00      	nop
 800a73c:	e000      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a73e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a746:	4b8e      	ldr	r3, [pc, #568]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a754:	498a      	ldr	r1, [pc, #552]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a756:	4313      	orrs	r3, r2
 800a758:	654b      	str	r3, [r1, #84]	; 0x54
 800a75a:	e001      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d04b      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a772:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a776:	d02e      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a778:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a77c:	d828      	bhi.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a77e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a782:	d02a      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a788:	d822      	bhi.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a78a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a78e:	d026      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a790:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a794:	d81c      	bhi.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a79a:	d010      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a79c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7a0:	d816      	bhi.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d01d      	beq.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a7a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7aa:	d111      	bne.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f001 faf6 	bl	800bda4 <RCCEx_PLL2_Config>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a7bc:	e012      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3324      	adds	r3, #36	; 0x24
 800a7c2:	2102      	movs	r1, #2
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f001 fb9f 	bl	800bf08 <RCCEx_PLL3_Config>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a7ce:	e009      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7d4:	e006      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7d6:	bf00      	nop
 800a7d8:	e004      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7da:	bf00      	nop
 800a7dc:	e002      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7de:	bf00      	nop
 800a7e0:	e000      	b.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10a      	bne.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7ea:	4b65      	ldr	r3, [pc, #404]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7f8:	4961      	ldr	r1, [pc, #388]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	658b      	str	r3, [r1, #88]	; 0x58
 800a7fe:	e001      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d04b      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a816:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a81a:	d02e      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a81c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a820:	d828      	bhi.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a826:	d02a      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a82c:	d822      	bhi.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a82e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a832:	d026      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a834:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a838:	d81c      	bhi.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a83a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a83e:	d010      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a844:	d816      	bhi.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a846:	2b00      	cmp	r3, #0
 800a848:	d01d      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a84a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a84e:	d111      	bne.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3304      	adds	r3, #4
 800a854:	2100      	movs	r1, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f001 faa4 	bl	800bda4 <RCCEx_PLL2_Config>
 800a85c:	4603      	mov	r3, r0
 800a85e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a860:	e012      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3324      	adds	r3, #36	; 0x24
 800a866:	2102      	movs	r1, #2
 800a868:	4618      	mov	r0, r3
 800a86a:	f001 fb4d 	bl	800bf08 <RCCEx_PLL3_Config>
 800a86e:	4603      	mov	r3, r0
 800a870:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a872:	e009      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	75fb      	strb	r3, [r7, #23]
      break;
 800a878:	e006      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a87a:	bf00      	nop
 800a87c:	e004      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a87e:	bf00      	nop
 800a880:	e002      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a882:	bf00      	nop
 800a884:	e000      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a886:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a88e:	4b3c      	ldr	r3, [pc, #240]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a892:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a89c:	4938      	ldr	r1, [pc, #224]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	658b      	str	r3, [r1, #88]	; 0x58
 800a8a2:	e001      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
 800a8a6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0308 	and.w	r3, r3, #8
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01a      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8be:	d10a      	bne.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3324      	adds	r3, #36	; 0x24
 800a8c4:	2102      	movs	r1, #2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 fb1e 	bl	800bf08 <RCCEx_PLL3_Config>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a8d6:	4b2a      	ldr	r3, [pc, #168]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8e4:	4926      	ldr	r1, [pc, #152]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0310 	and.w	r3, r3, #16
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d01a      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a900:	d10a      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3324      	adds	r3, #36	; 0x24
 800a906:	2102      	movs	r1, #2
 800a908:	4618      	mov	r0, r3
 800a90a:	f001 fafd 	bl	800bf08 <RCCEx_PLL3_Config>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a918:	4b19      	ldr	r3, [pc, #100]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a926:	4916      	ldr	r1, [pc, #88]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a928:	4313      	orrs	r3, r2
 800a92a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d036      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a93e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a942:	d01f      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a948:	d817      	bhi.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a94e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a952:	d009      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a954:	e011      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3304      	adds	r3, #4
 800a95a:	2100      	movs	r1, #0
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 fa21 	bl	800bda4 <RCCEx_PLL2_Config>
 800a962:	4603      	mov	r3, r0
 800a964:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a966:	e00e      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3324      	adds	r3, #36	; 0x24
 800a96c:	2102      	movs	r1, #2
 800a96e:	4618      	mov	r0, r3
 800a970:	f001 faca 	bl	800bf08 <RCCEx_PLL3_Config>
 800a974:	4603      	mov	r3, r0
 800a976:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a978:	e005      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	75fb      	strb	r3, [r7, #23]
      break;
 800a97e:	e002      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a980:	58024400 	.word	0x58024400
      break;
 800a984:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a986:	7dfb      	ldrb	r3, [r7, #23]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10a      	bne.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a98c:	4b93      	ldr	r3, [pc, #588]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a98e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a99a:	4990      	ldr	r1, [pc, #576]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	658b      	str	r3, [r1, #88]	; 0x58
 800a9a0:	e001      	b.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d033      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9bc:	d01c      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a9be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9c2:	d816      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a9c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c8:	d003      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a9ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9ce:	d007      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a9d0:	e00f      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9d2:	4b82      	ldr	r3, [pc, #520]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	4a81      	ldr	r2, [pc, #516]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a9de:	e00c      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3324      	adds	r3, #36	; 0x24
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 fa8e 	bl	800bf08 <RCCEx_PLL3_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a9f0:	e003      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f6:	e000      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a9f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa00:	4b76      	ldr	r3, [pc, #472]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa0e:	4973      	ldr	r1, [pc, #460]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa10:	4313      	orrs	r3, r2
 800aa12:	654b      	str	r3, [r1, #84]	; 0x54
 800aa14:	e001      	b.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d029      	beq.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800aa2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa32:	d007      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800aa34:	e00f      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa36:	4b69      	ldr	r3, [pc, #420]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3a:	4a68      	ldr	r2, [pc, #416]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa42:	e00b      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3304      	adds	r3, #4
 800aa48:	2102      	movs	r1, #2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f001 f9aa 	bl	800bda4 <RCCEx_PLL2_Config>
 800aa50:	4603      	mov	r3, r0
 800aa52:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa54:	e002      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	75fb      	strb	r3, [r7, #23]
      break;
 800aa5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d109      	bne.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa62:	4b5e      	ldr	r3, [pc, #376]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa6e:	495b      	ldr	r1, [pc, #364]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa74:	e001      	b.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3324      	adds	r3, #36	; 0x24
 800aa8a:	2102      	movs	r1, #2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f001 fa3b 	bl	800bf08 <RCCEx_PLL3_Config>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d030      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aab0:	d017      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800aab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aab6:	d811      	bhi.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800aab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aabc:	d013      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800aabe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aac2:	d80b      	bhi.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d010      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800aac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aacc:	d106      	bne.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aace:	4b43      	ldr	r3, [pc, #268]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad2:	4a42      	ldr	r2, [pc, #264]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aad8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aada:	e007      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	75fb      	strb	r3, [r7, #23]
      break;
 800aae0:	e004      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aae2:	bf00      	nop
 800aae4:	e002      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aae6:	bf00      	nop
 800aae8:	e000      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aaea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaec:	7dfb      	ldrb	r3, [r7, #23]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d109      	bne.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aaf2:	4b3a      	ldr	r3, [pc, #232]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aafe:	4937      	ldr	r1, [pc, #220]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	654b      	str	r3, [r1, #84]	; 0x54
 800ab04:	e001      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d008      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab16:	4b31      	ldr	r3, [pc, #196]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab22:	492e      	ldr	r1, [pc, #184]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d009      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ab34:	4b29      	ldr	r3, [pc, #164]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab42:	4926      	ldr	r1, [pc, #152]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d008      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab54:	4b21      	ldr	r3, [pc, #132]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab60:	491e      	ldr	r1, [pc, #120]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab62:	4313      	orrs	r3, r2
 800ab64:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00d      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab72:	4b1a      	ldr	r3, [pc, #104]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	4a19      	ldr	r2, [pc, #100]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab7c:	6113      	str	r3, [r2, #16]
 800ab7e:	4b17      	ldr	r3, [pc, #92]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab80:	691a      	ldr	r2, [r3, #16]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab88:	4914      	ldr	r1, [pc, #80]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	da08      	bge.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ab96:	4b11      	ldr	r3, [pc, #68]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba2:	490e      	ldr	r1, [pc, #56]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aba4:	4313      	orrs	r3, r2
 800aba6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d009      	beq.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800abb4:	4b09      	ldr	r3, [pc, #36]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc2:	4906      	ldr	r1, [pc, #24]	; (800abdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800abc8:	7dbb      	ldrb	r3, [r7, #22]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	e000      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	58024400 	.word	0x58024400

0800abe0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b090      	sub	sp, #64	; 0x40
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abee:	f040 8095 	bne.w	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800abf2:	4bae      	ldr	r3, [pc, #696]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800abf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf6:	f003 0307 	and.w	r3, r3, #7
 800abfa:	633b      	str	r3, [r7, #48]	; 0x30
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	f200 8088 	bhi.w	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800ac04:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800ac06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0a:	bf00      	nop
 800ac0c:	0800ac21 	.word	0x0800ac21
 800ac10:	0800ac49 	.word	0x0800ac49
 800ac14:	0800ac71 	.word	0x0800ac71
 800ac18:	0800ad0d 	.word	0x0800ad0d
 800ac1c:	0800ac99 	.word	0x0800ac99

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac20:	4ba2      	ldr	r3, [pc, #648]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac2c:	d108      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 ff64 	bl	800bb00 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac3c:	f000 bc95 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac44:	f000 bc91 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac48:	4b98      	ldr	r3, [pc, #608]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac54:	d108      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac56:	f107 0318 	add.w	r3, r7, #24
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fca8 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac64:	f000 bc81 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac6c:	f000 bc7d 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac70:	4b8e      	ldr	r3, [pc, #568]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac7c:	d108      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac7e:	f107 030c 	add.w	r3, r7, #12
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fde8 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac8c:	f000 bc6d 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac94:	f000 bc69 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac98:	4b84      	ldr	r3, [pc, #528]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aca2:	4b82      	ldr	r3, [pc, #520]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0304 	and.w	r3, r3, #4
 800acaa:	2b04      	cmp	r3, #4
 800acac:	d10c      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800acae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d109      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acb4:	4b7d      	ldr	r3, [pc, #500]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	08db      	lsrs	r3, r3, #3
 800acba:	f003 0303 	and.w	r3, r3, #3
 800acbe:	4a7c      	ldr	r2, [pc, #496]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800acc0:	fa22 f303 	lsr.w	r3, r2, r3
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc6:	e01f      	b.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acc8:	4b78      	ldr	r3, [pc, #480]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acd4:	d106      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800acd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acdc:	d102      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800acde:	4b75      	ldr	r3, [pc, #468]	; (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ace0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace2:	e011      	b.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ace4:	4b71      	ldr	r3, [pc, #452]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acf0:	d106      	bne.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800acf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf8:	d102      	bne.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acfa:	4b6f      	ldr	r3, [pc, #444]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acfe:	e003      	b.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ad04:	f000 bc31 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad08:	f000 bc2f 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ad0c:	4b6b      	ldr	r3, [pc, #428]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad10:	f000 bc2b 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad18:	f000 bc27 	b.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad22:	f040 8095 	bne.w	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800ad26:	4b61      	ldr	r3, [pc, #388]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad2a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ad2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad36:	d04d      	beq.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3e:	f200 8084 	bhi.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	2bc0      	cmp	r3, #192	; 0xc0
 800ad46:	d07d      	beq.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	2bc0      	cmp	r3, #192	; 0xc0
 800ad4c:	d87d      	bhi.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	2b80      	cmp	r3, #128	; 0x80
 800ad52:	d02d      	beq.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	2b80      	cmp	r3, #128	; 0x80
 800ad58:	d877      	bhi.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800ad60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad62:	2b40      	cmp	r3, #64	; 0x40
 800ad64:	d012      	beq.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800ad66:	e070      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad68:	4b50      	ldr	r3, [pc, #320]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad74:	d107      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 fec0 	bl	800bb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad84:	e3f1      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad8a:	e3ee      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad8c:	4b47      	ldr	r3, [pc, #284]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad98:	d107      	bne.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad9a:	f107 0318 	add.w	r3, r7, #24
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fc06 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ada8:	e3df      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adae:	e3dc      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adb0:	4b3e      	ldr	r3, [pc, #248]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adbc:	d107      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adbe:	f107 030c 	add.w	r3, r7, #12
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 fd48 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adcc:	e3cd      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800add2:	e3ca      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800add4:	4b35      	ldr	r3, [pc, #212]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800add6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800addc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adde:	4b33      	ldr	r3, [pc, #204]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0304 	and.w	r3, r3, #4
 800ade6:	2b04      	cmp	r3, #4
 800ade8:	d10c      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800adea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adec:	2b00      	cmp	r3, #0
 800adee:	d109      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adf0:	4b2e      	ldr	r3, [pc, #184]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	08db      	lsrs	r3, r3, #3
 800adf6:	f003 0303 	and.w	r3, r3, #3
 800adfa:	4a2d      	ldr	r2, [pc, #180]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800adfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ae00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae02:	e01e      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae04:	4b29      	ldr	r3, [pc, #164]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae10:	d106      	bne.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800ae12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae18:	d102      	bne.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae1a:	4b26      	ldr	r3, [pc, #152]	; (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae1e:	e010      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae20:	4b22      	ldr	r3, [pc, #136]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae2c:	d106      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800ae2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae34:	d102      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ae36:	4b20      	ldr	r3, [pc, #128]	; (800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800ae38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae3a:	e002      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ae40:	e393      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae42:	e392      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae44:	4b1d      	ldr	r3, [pc, #116]	; (800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae48:	e38f      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae4e:	e38c      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae56:	f040 80a7 	bne.w	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800ae5a:	4b14      	ldr	r3, [pc, #80]	; (800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ae62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae6a:	d05f      	beq.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae72:	f200 8096 	bhi.w	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae7c:	f000 808e 	beq.w	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800ae80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae86:	f200 808c 	bhi.w	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae90:	d03a      	beq.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae98:	f200 8083 	bhi.w	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00e      	beq.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aea8:	d01c      	beq.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800aeaa:	e07a      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800aeac:	58024400 	.word	0x58024400
 800aeb0:	03d09000 	.word	0x03d09000
 800aeb4:	003d0900 	.word	0x003d0900
 800aeb8:	017d7840 	.word	0x017d7840
 800aebc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aec0:	4baa      	ldr	r3, [pc, #680]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aecc:	d107      	bne.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 fe14 	bl	800bb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aedc:	e345      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aee2:	e342      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aee4:	4ba1      	ldr	r3, [pc, #644]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aeec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aef0:	d107      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aef2:	f107 0318 	add.w	r3, r7, #24
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fb5a 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af00:	e333      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af06:	e330      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af08:	4b98      	ldr	r3, [pc, #608]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af14:	d107      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af16:	f107 030c 	add.w	r3, r7, #12
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 fc9c 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af24:	e321      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af2a:	e31e      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af2c:	4b8f      	ldr	r3, [pc, #572]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af34:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af36:	4b8d      	ldr	r3, [pc, #564]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 0304 	and.w	r3, r3, #4
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d10c      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800af42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af44:	2b00      	cmp	r3, #0
 800af46:	d109      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af48:	4b88      	ldr	r3, [pc, #544]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	08db      	lsrs	r3, r3, #3
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	4a87      	ldr	r2, [pc, #540]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800af54:	fa22 f303 	lsr.w	r3, r2, r3
 800af58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af5a:	e01e      	b.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af5c:	4b83      	ldr	r3, [pc, #524]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af68:	d106      	bne.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af70:	d102      	bne.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af72:	4b80      	ldr	r3, [pc, #512]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af76:	e010      	b.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af78:	4b7c      	ldr	r3, [pc, #496]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af84:	d106      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800af86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af8c:	d102      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af8e:	4b7a      	ldr	r3, [pc, #488]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800af90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af92:	e002      	b.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af94:	2300      	movs	r3, #0
 800af96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af98:	e2e7      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af9a:	e2e6      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af9c:	4b77      	ldr	r3, [pc, #476]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afa0:	e2e3      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afa6:	e2e0      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afae:	f040 809c 	bne.w	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800afb2:	4b6e      	ldr	r3, [pc, #440]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afb6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800afba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800afbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afc2:	d054      	beq.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afca:	f200 808b 	bhi.w	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afd4:	f000 8083 	beq.w	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800afd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afde:	f200 8081 	bhi.w	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afe8:	d02f      	beq.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aff0:	d878      	bhi.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d004      	beq.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800affe:	d012      	beq.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b000:	e070      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b002:	4b5a      	ldr	r3, [pc, #360]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b00a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b00e:	d107      	bne.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b014:	4618      	mov	r0, r3
 800b016:	f000 fd73 	bl	800bb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b01e:	e2a4      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b024:	e2a1      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b026:	4b51      	ldr	r3, [pc, #324]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b02e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b032:	d107      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b034:	f107 0318 	add.w	r3, r7, #24
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 fab9 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b042:	e292      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b048:	e28f      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b04a:	4b48      	ldr	r3, [pc, #288]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b056:	d107      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b058:	f107 030c 	add.w	r3, r7, #12
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fbfb 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b066:	e280      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b06c:	e27d      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b06e:	4b3f      	ldr	r3, [pc, #252]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b076:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b078:	4b3c      	ldr	r3, [pc, #240]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 0304 	and.w	r3, r3, #4
 800b080:	2b04      	cmp	r3, #4
 800b082:	d10c      	bne.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b086:	2b00      	cmp	r3, #0
 800b088:	d109      	bne.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b08a:	4b38      	ldr	r3, [pc, #224]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	08db      	lsrs	r3, r3, #3
 800b090:	f003 0303 	and.w	r3, r3, #3
 800b094:	4a36      	ldr	r2, [pc, #216]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b096:	fa22 f303 	lsr.w	r3, r2, r3
 800b09a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b09c:	e01e      	b.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b09e:	4b33      	ldr	r3, [pc, #204]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0aa:	d106      	bne.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0b2:	d102      	bne.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b0b4:	4b2f      	ldr	r3, [pc, #188]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0b8:	e010      	b.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0ba:	4b2c      	ldr	r3, [pc, #176]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0c6:	d106      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0ce:	d102      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b0d0:	4b29      	ldr	r3, [pc, #164]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0d4:	e002      	b.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b0da:	e246      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b0dc:	e245      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b0de:	4b27      	ldr	r3, [pc, #156]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0e2:	e242      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0e8:	e23f      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0f0:	f040 80a8 	bne.w	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b0f4:	4b1d      	ldr	r3, [pc, #116]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b0fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b104:	d060      	beq.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b10c:	f200 8097 	bhi.w	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b116:	f000 808f 	beq.w	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b120:	f200 808d 	bhi.w	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b12a:	d03b      	beq.n	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b132:	f200 8084 	bhi.w	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d004      	beq.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b142:	d01d      	beq.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b144:	e07b      	b.n	800b23e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b146:	4b09      	ldr	r3, [pc, #36]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b14e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b152:	d107      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 fcd1 	bl	800bb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b162:	e202      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b168:	e1ff      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b16a:	bf00      	nop
 800b16c:	58024400 	.word	0x58024400
 800b170:	03d09000 	.word	0x03d09000
 800b174:	003d0900 	.word	0x003d0900
 800b178:	017d7840 	.word	0x017d7840
 800b17c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b180:	4ba3      	ldr	r3, [pc, #652]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b18c:	d107      	bne.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b18e:	f107 0318 	add.w	r3, r7, #24
 800b192:	4618      	mov	r0, r3
 800b194:	f000 fa0c 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b19c:	e1e5      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1a2:	e1e2      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1a4:	4b9a      	ldr	r3, [pc, #616]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1b0:	d107      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1b2:	f107 030c 	add.w	r3, r7, #12
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 fb4e 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b1c0:	e1d3      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1c6:	e1d0      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b1c8:	4b91      	ldr	r3, [pc, #580]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1d0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1d2:	4b8f      	ldr	r3, [pc, #572]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d10c      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d109      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1e4:	4b8a      	ldr	r3, [pc, #552]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	08db      	lsrs	r3, r3, #3
 800b1ea:	f003 0303 	and.w	r3, r3, #3
 800b1ee:	4a89      	ldr	r2, [pc, #548]	; (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f6:	e01e      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1f8:	4b85      	ldr	r3, [pc, #532]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b204:	d106      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b20c:	d102      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b20e:	4b82      	ldr	r3, [pc, #520]	; (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b210:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b212:	e010      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b214:	4b7e      	ldr	r3, [pc, #504]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b21c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b220:	d106      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b228:	d102      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b22a:	4b7c      	ldr	r3, [pc, #496]	; (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b22e:	e002      	b.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b234:	e199      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b236:	e198      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b238:	4b79      	ldr	r3, [pc, #484]	; (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b23a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b23c:	e195      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b242:	e192      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b24a:	d173      	bne.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b24c:	4b70      	ldr	r3, [pc, #448]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b24e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b254:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b25c:	d02f      	beq.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b264:	d863      	bhi.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d004      	beq.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b272:	d012      	beq.n	800b29a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b274:	e05b      	b.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b276:	4b66      	ldr	r3, [pc, #408]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b27e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b282:	d107      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b284:	f107 0318 	add.w	r3, r7, #24
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 f991 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b292:	e16a      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b294:	2300      	movs	r3, #0
 800b296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b298:	e167      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b29a:	4b5d      	ldr	r3, [pc, #372]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a6:	d107      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2a8:	f107 030c 	add.w	r3, r7, #12
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f000 fad3 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2b6:	e158      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2bc:	e155      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2be:	4b54      	ldr	r3, [pc, #336]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2c6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2c8:	4b51      	ldr	r3, [pc, #324]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b04      	cmp	r3, #4
 800b2d2:	d10c      	bne.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d109      	bne.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2da:	4b4d      	ldr	r3, [pc, #308]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	08db      	lsrs	r3, r3, #3
 800b2e0:	f003 0303 	and.w	r3, r3, #3
 800b2e4:	4a4b      	ldr	r2, [pc, #300]	; (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b2e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2ec:	e01e      	b.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2ee:	4b48      	ldr	r3, [pc, #288]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2fa:	d106      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b302:	d102      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b304:	4b44      	ldr	r3, [pc, #272]	; (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b308:	e010      	b.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b30a:	4b41      	ldr	r3, [pc, #260]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b316:	d106      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b31e:	d102      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b320:	4b3e      	ldr	r3, [pc, #248]	; (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b324:	e002      	b.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b32a:	e11e      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b32c:	e11d      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b332:	e11a      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33a:	d133      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b33c:	4b34      	ldr	r3, [pc, #208]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b33e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b344:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d004      	beq.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b352:	d012      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b354:	e023      	b.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b356:	4b2e      	ldr	r3, [pc, #184]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b362:	d107      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fbc9 	bl	800bb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b370:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b372:	e0fa      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b378:	e0f7      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b37a:	4b25      	ldr	r3, [pc, #148]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b386:	d107      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b388:	f107 0318 	add.w	r3, r7, #24
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 f90f 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b396:	e0e8      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b39c:	e0e5      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3a2:	e0e2      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3aa:	f040 808f 	bne.w	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b3ae:	4b18      	ldr	r3, [pc, #96]	; (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b3b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3be:	d075      	beq.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3c6:	d87e      	bhi.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ce:	d060      	beq.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3d6:	d876      	bhi.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3de:	d045      	beq.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3e6:	d86e      	bhi.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ee:	d02b      	beq.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3f6:	d866      	bhi.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d004      	beq.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b404:	d00e      	beq.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b406:	e05e      	b.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b408:	f000 f8bc 	bl	800b584 <HAL_RCCEx_GetD3PCLK1Freq>
 800b40c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b40e:	e0ac      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b410:	58024400 	.word	0x58024400
 800b414:	03d09000 	.word	0x03d09000
 800b418:	003d0900 	.word	0x003d0900
 800b41c:	017d7840 	.word	0x017d7840
 800b420:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b424:	4b53      	ldr	r3, [pc, #332]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b42c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b430:	d107      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b432:	f107 0318 	add.w	r3, r7, #24
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f8ba 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b440:	e093      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b446:	e090      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b448:	4b4a      	ldr	r3, [pc, #296]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b454:	d107      	bne.n	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b456:	f107 030c 	add.w	r3, r7, #12
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 f9fc 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b464:	e081      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b46a:	e07e      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b46c:	4b41      	ldr	r3, [pc, #260]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0304 	and.w	r3, r3, #4
 800b474:	2b04      	cmp	r3, #4
 800b476:	d109      	bne.n	800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b478:	4b3e      	ldr	r3, [pc, #248]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	08db      	lsrs	r3, r3, #3
 800b47e:	f003 0303 	and.w	r3, r3, #3
 800b482:	4a3d      	ldr	r2, [pc, #244]	; (800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b484:	fa22 f303 	lsr.w	r3, r2, r3
 800b488:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b48a:	e06e      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b490:	e06b      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b492:	4b38      	ldr	r3, [pc, #224]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b49a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b49e:	d102      	bne.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b4a0:	4b36      	ldr	r3, [pc, #216]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b4a4:	e061      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4aa:	e05e      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b4ac:	4b31      	ldr	r3, [pc, #196]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4b8:	d102      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b4ba:	4b31      	ldr	r3, [pc, #196]	; (800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4be:	e054      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4c4:	e051      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4ca:	e04e      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4d2:	d148      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b4d4:	4b27      	ldr	r3, [pc, #156]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e4:	d02a      	beq.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ec:	d838      	bhi.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d004      	beq.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4fa:	d00d      	beq.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b4fc:	e030      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b4fe:	4b1d      	ldr	r3, [pc, #116]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b50a:	d102      	bne.n	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b50c:	4b1c      	ldr	r3, [pc, #112]	; (800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b50e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b510:	e02b      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b516:	e028      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b518:	4b16      	ldr	r3, [pc, #88]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b524:	d107      	bne.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 fae8 	bl	800bb00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b532:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b534:	e019      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b53a:	e016      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b53c:	4b0d      	ldr	r3, [pc, #52]	; (800b574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b548:	d107      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54a:	f107 0318 	add.w	r3, r7, #24
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 f82e 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b558:	e007      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b55e:	e004      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b564:	e001      	b.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3740      	adds	r7, #64	; 0x40
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	58024400 	.word	0x58024400
 800b578:	03d09000 	.word	0x03d09000
 800b57c:	003d0900 	.word	0x003d0900
 800b580:	017d7840 	.word	0x017d7840

0800b584 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b588:	f7fe fb8e 	bl	8009ca8 <HAL_RCC_GetHCLKFreq>
 800b58c:	4602      	mov	r2, r0
 800b58e:	4b06      	ldr	r3, [pc, #24]	; (800b5a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	091b      	lsrs	r3, r3, #4
 800b594:	f003 0307 	and.w	r3, r3, #7
 800b598:	4904      	ldr	r1, [pc, #16]	; (800b5ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b59a:	5ccb      	ldrb	r3, [r1, r3]
 800b59c:	f003 031f 	and.w	r3, r3, #31
 800b5a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	58024400 	.word	0x58024400
 800b5ac:	08026bdc 	.word	0x08026bdc

0800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b089      	sub	sp, #36	; 0x24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5b8:	4ba1      	ldr	r3, [pc, #644]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5bc:	f003 0303 	and.w	r3, r3, #3
 800b5c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b5c2:	4b9f      	ldr	r3, [pc, #636]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c6:	0b1b      	lsrs	r3, r3, #12
 800b5c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b5ce:	4b9c      	ldr	r3, [pc, #624]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d2:	091b      	lsrs	r3, r3, #4
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b5da:	4b99      	ldr	r3, [pc, #612]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5de:	08db      	lsrs	r3, r3, #3
 800b5e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ea:	ee07 3a90 	vmov	s15, r3
 800b5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 8111 	beq.w	800b820 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	2b02      	cmp	r3, #2
 800b602:	f000 8083 	beq.w	800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	f200 80a1 	bhi.w	800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d003      	beq.n	800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d056      	beq.n	800b6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b61a:	e099      	b.n	800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b61c:	4b88      	ldr	r3, [pc, #544]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 0320 	and.w	r3, r3, #32
 800b624:	2b00      	cmp	r3, #0
 800b626:	d02d      	beq.n	800b684 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b628:	4b85      	ldr	r3, [pc, #532]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	08db      	lsrs	r3, r3, #3
 800b62e:	f003 0303 	and.w	r3, r3, #3
 800b632:	4a84      	ldr	r2, [pc, #528]	; (800b844 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b634:	fa22 f303 	lsr.w	r3, r2, r3
 800b638:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	ee07 3a90 	vmov	s15, r3
 800b640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	ee07 3a90 	vmov	s15, r3
 800b64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b652:	4b7b      	ldr	r3, [pc, #492]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b65a:	ee07 3a90 	vmov	s15, r3
 800b65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b662:	ed97 6a03 	vldr	s12, [r7, #12]
 800b666:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b67e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b682:	e087      	b.n	800b794 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	ee07 3a90 	vmov	s15, r3
 800b68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b84c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b696:	4b6a      	ldr	r3, [pc, #424]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b69e:	ee07 3a90 	vmov	s15, r3
 800b6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6c6:	e065      	b.n	800b794 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6da:	4b59      	ldr	r3, [pc, #356]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e2:	ee07 3a90 	vmov	s15, r3
 800b6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b706:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b70a:	e043      	b.n	800b794 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	ee07 3a90 	vmov	s15, r3
 800b712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b716:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b71e:	4b48      	ldr	r3, [pc, #288]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b72e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b732:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b74e:	e021      	b.n	800b794 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	ee07 3a90 	vmov	s15, r3
 800b756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b762:	4b37      	ldr	r3, [pc, #220]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76a:	ee07 3a90 	vmov	s15, r3
 800b76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b772:	ed97 6a03 	vldr	s12, [r7, #12]
 800b776:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b848 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b78e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b792:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b794:	4b2a      	ldr	r3, [pc, #168]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b798:	0a5b      	lsrs	r3, r3, #9
 800b79a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ba:	ee17 2a90 	vmov	r2, s15
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b7c2:	4b1f      	ldr	r3, [pc, #124]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c6:	0c1b      	lsrs	r3, r3, #16
 800b7c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7cc:	ee07 3a90 	vmov	s15, r3
 800b7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7e8:	ee17 2a90 	vmov	r2, s15
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b7f0:	4b13      	ldr	r3, [pc, #76]	; (800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f4:	0e1b      	lsrs	r3, r3, #24
 800b7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7fa:	ee07 3a90 	vmov	s15, r3
 800b7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b80a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b80e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b816:	ee17 2a90 	vmov	r2, s15
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b81e:	e008      	b.n	800b832 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	609a      	str	r2, [r3, #8]
}
 800b832:	bf00      	nop
 800b834:	3724      	adds	r7, #36	; 0x24
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	58024400 	.word	0x58024400
 800b844:	03d09000 	.word	0x03d09000
 800b848:	46000000 	.word	0x46000000
 800b84c:	4c742400 	.word	0x4c742400
 800b850:	4a742400 	.word	0x4a742400
 800b854:	4bbebc20 	.word	0x4bbebc20

0800b858 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b858:	b480      	push	{r7}
 800b85a:	b089      	sub	sp, #36	; 0x24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b860:	4ba1      	ldr	r3, [pc, #644]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b86a:	4b9f      	ldr	r3, [pc, #636]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86e:	0d1b      	lsrs	r3, r3, #20
 800b870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b874:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b876:	4b9c      	ldr	r3, [pc, #624]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87a:	0a1b      	lsrs	r3, r3, #8
 800b87c:	f003 0301 	and.w	r3, r3, #1
 800b880:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b882:	4b99      	ldr	r3, [pc, #612]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b886:	08db      	lsrs	r3, r3, #3
 800b888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	fb02 f303 	mul.w	r3, r2, r3
 800b892:	ee07 3a90 	vmov	s15, r3
 800b896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b89a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f000 8111 	beq.w	800bac8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	f000 8083 	beq.w	800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	f200 80a1 	bhi.w	800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d056      	beq.n	800b970 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b8c2:	e099      	b.n	800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8c4:	4b88      	ldr	r3, [pc, #544]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 0320 	and.w	r3, r3, #32
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d02d      	beq.n	800b92c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b8d0:	4b85      	ldr	r3, [pc, #532]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	08db      	lsrs	r3, r3, #3
 800b8d6:	f003 0303 	and.w	r3, r3, #3
 800b8da:	4a84      	ldr	r2, [pc, #528]	; (800baec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b8dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b8e0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	ee07 3a90 	vmov	s15, r3
 800b8e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8fa:	4b7b      	ldr	r3, [pc, #492]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b902:	ee07 3a90 	vmov	s15, r3
 800b906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b90e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800baf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b91a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b926:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b92a:	e087      	b.n	800ba3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	ee07 3a90 	vmov	s15, r3
 800b932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b936:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800baf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b93e:	4b6a      	ldr	r3, [pc, #424]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b946:	ee07 3a90 	vmov	s15, r3
 800b94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b952:	eddf 5a67 	vldr	s11, [pc, #412]	; 800baf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b95e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b96a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b96e:	e065      	b.n	800ba3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	ee07 3a90 	vmov	s15, r3
 800b976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b97a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800baf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b982:	4b59      	ldr	r3, [pc, #356]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b98a:	ee07 3a90 	vmov	s15, r3
 800b98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b992:	ed97 6a03 	vldr	s12, [r7, #12]
 800b996:	eddf 5a56 	vldr	s11, [pc, #344]	; 800baf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9b2:	e043      	b.n	800ba3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	ee07 3a90 	vmov	s15, r3
 800b9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bafc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9c6:	4b48      	ldr	r3, [pc, #288]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ce:	ee07 3a90 	vmov	s15, r3
 800b9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800baf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9f6:	e021      	b.n	800ba3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800baf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba0a:	4b37      	ldr	r3, [pc, #220]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800baf0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ba3c:	4b2a      	ldr	r3, [pc, #168]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba40:	0a5b      	lsrs	r3, r3, #9
 800ba42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba62:	ee17 2a90 	vmov	r2, s15
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ba6a:	4b1f      	ldr	r3, [pc, #124]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6e:	0c1b      	lsrs	r3, r3, #16
 800ba70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba74:	ee07 3a90 	vmov	s15, r3
 800ba78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba90:	ee17 2a90 	vmov	r2, s15
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ba98:	4b13      	ldr	r3, [pc, #76]	; (800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9c:	0e1b      	lsrs	r3, r3, #24
 800ba9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baa2:	ee07 3a90 	vmov	s15, r3
 800baa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bab2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800babe:	ee17 2a90 	vmov	r2, s15
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bac6:	e008      	b.n	800bada <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	609a      	str	r2, [r3, #8]
}
 800bada:	bf00      	nop
 800badc:	3724      	adds	r7, #36	; 0x24
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	58024400 	.word	0x58024400
 800baec:	03d09000 	.word	0x03d09000
 800baf0:	46000000 	.word	0x46000000
 800baf4:	4c742400 	.word	0x4c742400
 800baf8:	4a742400 	.word	0x4a742400
 800bafc:	4bbebc20 	.word	0x4bbebc20

0800bb00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b089      	sub	sp, #36	; 0x24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb08:	4ba0      	ldr	r3, [pc, #640]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bb12:	4b9e      	ldr	r3, [pc, #632]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb16:	091b      	lsrs	r3, r3, #4
 800bb18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb1e:	4b9b      	ldr	r3, [pc, #620]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	f003 0301 	and.w	r3, r3, #1
 800bb26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bb28:	4b98      	ldr	r3, [pc, #608]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2c:	08db      	lsrs	r3, r3, #3
 800bb2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb32:	693a      	ldr	r2, [r7, #16]
 800bb34:	fb02 f303 	mul.w	r3, r2, r3
 800bb38:	ee07 3a90 	vmov	s15, r3
 800bb3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 8111 	beq.w	800bd6e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	f000 8083 	beq.w	800bc5a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	f200 80a1 	bhi.w	800bc9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d056      	beq.n	800bc16 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bb68:	e099      	b.n	800bc9e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb6a:	4b88      	ldr	r3, [pc, #544]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d02d      	beq.n	800bbd2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb76:	4b85      	ldr	r3, [pc, #532]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	08db      	lsrs	r3, r3, #3
 800bb7c:	f003 0303 	and.w	r3, r3, #3
 800bb80:	4a83      	ldr	r2, [pc, #524]	; (800bd90 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bb82:	fa22 f303 	lsr.w	r3, r2, r3
 800bb86:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	ee07 3a90 	vmov	s15, r3
 800bb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	ee07 3a90 	vmov	s15, r3
 800bb98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba0:	4b7a      	ldr	r3, [pc, #488]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba8:	ee07 3a90 	vmov	s15, r3
 800bbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbcc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bbd0:	e087      	b.n	800bce2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	ee07 3a90 	vmov	s15, r3
 800bbd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbdc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bd98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe4:	4b69      	ldr	r3, [pc, #420]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbec:	ee07 3a90 	vmov	s15, r3
 800bbf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbf8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc14:	e065      	b.n	800bce2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	ee07 3a90 	vmov	s15, r3
 800bc1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc20:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bd9c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc28:	4b58      	ldr	r3, [pc, #352]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc30:	ee07 3a90 	vmov	s15, r3
 800bc34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc38:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc58:	e043      	b.n	800bce2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	ee07 3a90 	vmov	s15, r3
 800bc60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bda0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bc68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6c:	4b47      	ldr	r3, [pc, #284]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc74:	ee07 3a90 	vmov	s15, r3
 800bc78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc80:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc9c:	e021      	b.n	800bce2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	ee07 3a90 	vmov	s15, r3
 800bca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bd98 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb0:	4b36      	ldr	r3, [pc, #216]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb8:	ee07 3a90 	vmov	s15, r3
 800bcbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bd94 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bce0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bce2:	4b2a      	ldr	r3, [pc, #168]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce6:	0a5b      	lsrs	r3, r3, #9
 800bce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcec:	ee07 3a90 	vmov	s15, r3
 800bcf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd08:	ee17 2a90 	vmov	r2, s15
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800bd10:	4b1e      	ldr	r3, [pc, #120]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd14:	0c1b      	lsrs	r3, r3, #16
 800bd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd36:	ee17 2a90 	vmov	r2, s15
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800bd3e:	4b13      	ldr	r3, [pc, #76]	; (800bd8c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd42:	0e1b      	lsrs	r3, r3, #24
 800bd44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd48:	ee07 3a90 	vmov	s15, r3
 800bd4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd58:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd64:	ee17 2a90 	vmov	r2, s15
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bd6c:	e008      	b.n	800bd80 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	609a      	str	r2, [r3, #8]
}
 800bd80:	bf00      	nop
 800bd82:	3724      	adds	r7, #36	; 0x24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	58024400 	.word	0x58024400
 800bd90:	03d09000 	.word	0x03d09000
 800bd94:	46000000 	.word	0x46000000
 800bd98:	4c742400 	.word	0x4c742400
 800bd9c:	4a742400 	.word	0x4a742400
 800bda0:	4bbebc20 	.word	0x4bbebc20

0800bda4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdb2:	4b53      	ldr	r3, [pc, #332]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800bdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d101      	bne.n	800bdc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e099      	b.n	800bef6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bdc2:	4b4f      	ldr	r3, [pc, #316]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a4e      	ldr	r2, [pc, #312]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800bdc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bdcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdce:	f7f8 f869 	bl	8003ea4 <HAL_GetTick>
 800bdd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bdd4:	e008      	b.n	800bde8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bdd6:	f7f8 f865 	bl	8003ea4 <HAL_GetTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d901      	bls.n	800bde8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bde4:	2303      	movs	r3, #3
 800bde6:	e086      	b.n	800bef6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bde8:	4b45      	ldr	r3, [pc, #276]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1f0      	bne.n	800bdd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bdf4:	4b42      	ldr	r3, [pc, #264]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800bdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	031b      	lsls	r3, r3, #12
 800be02:	493f      	ldr	r1, [pc, #252]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be04:	4313      	orrs	r3, r2
 800be06:	628b      	str	r3, [r1, #40]	; 0x28
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	3b01      	subs	r3, #1
 800be18:	025b      	lsls	r3, r3, #9
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	431a      	orrs	r2, r3
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	3b01      	subs	r3, #1
 800be24:	041b      	lsls	r3, r3, #16
 800be26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be2a:	431a      	orrs	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	3b01      	subs	r3, #1
 800be32:	061b      	lsls	r3, r3, #24
 800be34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be38:	4931      	ldr	r1, [pc, #196]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be3a:	4313      	orrs	r3, r2
 800be3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be3e:	4b30      	ldr	r3, [pc, #192]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	492d      	ldr	r1, [pc, #180]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be4c:	4313      	orrs	r3, r2
 800be4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be50:	4b2b      	ldr	r3, [pc, #172]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	f023 0220 	bic.w	r2, r3, #32
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	4928      	ldr	r1, [pc, #160]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be62:	4b27      	ldr	r3, [pc, #156]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be66:	4a26      	ldr	r2, [pc, #152]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be68:	f023 0310 	bic.w	r3, r3, #16
 800be6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be6e:	4b24      	ldr	r3, [pc, #144]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be72:	4b24      	ldr	r3, [pc, #144]	; (800bf04 <RCCEx_PLL2_Config+0x160>)
 800be74:	4013      	ands	r3, r2
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	69d2      	ldr	r2, [r2, #28]
 800be7a:	00d2      	lsls	r2, r2, #3
 800be7c:	4920      	ldr	r1, [pc, #128]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be7e:	4313      	orrs	r3, r2
 800be80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be82:	4b1f      	ldr	r3, [pc, #124]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be86:	4a1e      	ldr	r2, [pc, #120]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be88:	f043 0310 	orr.w	r3, r3, #16
 800be8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d106      	bne.n	800bea2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be94:	4b1a      	ldr	r3, [pc, #104]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be98:	4a19      	ldr	r2, [pc, #100]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800be9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bea0:	e00f      	b.n	800bec2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d106      	bne.n	800beb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bea8:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	4a14      	ldr	r2, [pc, #80]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800beae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800beb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800beb4:	e005      	b.n	800bec2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800beb6:	4b12      	ldr	r3, [pc, #72]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	4a11      	ldr	r2, [pc, #68]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800bebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bec0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bec2:	4b0f      	ldr	r3, [pc, #60]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a0e      	ldr	r2, [pc, #56]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800bec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800becc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bece:	f7f7 ffe9 	bl	8003ea4 <HAL_GetTick>
 800bed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bed4:	e008      	b.n	800bee8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bed6:	f7f7 ffe5 	bl	8003ea4 <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d901      	bls.n	800bee8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e006      	b.n	800bef6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bee8:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <RCCEx_PLL2_Config+0x15c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d0f0      	beq.n	800bed6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	58024400 	.word	0x58024400
 800bf04:	ffff0007 	.word	0xffff0007

0800bf08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf16:	4b53      	ldr	r3, [pc, #332]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1a:	f003 0303 	and.w	r3, r3, #3
 800bf1e:	2b03      	cmp	r3, #3
 800bf20:	d101      	bne.n	800bf26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e099      	b.n	800c05a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf26:	4b4f      	ldr	r3, [pc, #316]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a4e      	ldr	r2, [pc, #312]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bf2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf32:	f7f7 ffb7 	bl	8003ea4 <HAL_GetTick>
 800bf36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf38:	e008      	b.n	800bf4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bf3a:	f7f7 ffb3 	bl	8003ea4 <HAL_GetTick>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d901      	bls.n	800bf4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	e086      	b.n	800c05a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf4c:	4b45      	ldr	r3, [pc, #276]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1f0      	bne.n	800bf3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf58:	4b42      	ldr	r3, [pc, #264]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	051b      	lsls	r3, r3, #20
 800bf66:	493f      	ldr	r1, [pc, #252]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	628b      	str	r3, [r1, #40]	; 0x28
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	025b      	lsls	r3, r3, #9
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	431a      	orrs	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	041b      	lsls	r3, r3, #16
 800bf8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf8e:	431a      	orrs	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	061b      	lsls	r3, r3, #24
 800bf98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf9c:	4931      	ldr	r1, [pc, #196]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bfa2:	4b30      	ldr	r3, [pc, #192]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	492d      	ldr	r1, [pc, #180]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bfb4:	4b2b      	ldr	r3, [pc, #172]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	4928      	ldr	r1, [pc, #160]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bfc6:	4b27      	ldr	r3, [pc, #156]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfca:	4a26      	ldr	r2, [pc, #152]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bfd2:	4b24      	ldr	r3, [pc, #144]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfd6:	4b24      	ldr	r3, [pc, #144]	; (800c068 <RCCEx_PLL3_Config+0x160>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	69d2      	ldr	r2, [r2, #28]
 800bfde:	00d2      	lsls	r2, r2, #3
 800bfe0:	4920      	ldr	r1, [pc, #128]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bfe6:	4b1f      	ldr	r3, [pc, #124]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	4a1e      	ldr	r2, [pc, #120]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bfec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d106      	bne.n	800c006 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bff8:	4b1a      	ldr	r3, [pc, #104]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffc:	4a19      	ldr	r2, [pc, #100]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800bffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c002:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c004:	e00f      	b.n	800c026 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d106      	bne.n	800c01a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c00c:	4b15      	ldr	r3, [pc, #84]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	4a14      	ldr	r2, [pc, #80]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800c012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c016:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c018:	e005      	b.n	800c026 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c01a:	4b12      	ldr	r3, [pc, #72]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800c01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01e:	4a11      	ldr	r2, [pc, #68]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800c020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c024:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c026:	4b0f      	ldr	r3, [pc, #60]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a0e      	ldr	r2, [pc, #56]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800c02c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c032:	f7f7 ff37 	bl	8003ea4 <HAL_GetTick>
 800c036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c038:	e008      	b.n	800c04c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c03a:	f7f7 ff33 	bl	8003ea4 <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	2b02      	cmp	r3, #2
 800c046:	d901      	bls.n	800c04c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	e006      	b.n	800c05a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c04c:	4b05      	ldr	r3, [pc, #20]	; (800c064 <RCCEx_PLL3_Config+0x15c>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0f0      	beq.n	800c03a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c058:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	58024400 	.word	0x58024400
 800c068:	ffff0007 	.word	0xffff0007

0800c06c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e04d      	b.n	800c11a <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7a5b      	ldrb	r3, [r3, #9]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d105      	bne.n	800c094 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7f6 fbe4 	bl	800285c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2202      	movs	r2, #2
 800c098:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f023 0120 	bic.w	r1, r3, #32
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685a      	ldr	r2, [r3, #4]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f042 0204 	orr.w	r2, r2, #4
 800c0be:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ca:	2b40      	cmp	r3, #64	; 0x40
 800c0cc:	d104      	bne.n	800c0d8 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2204      	movs	r2, #4
 800c0d2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e020      	b.n	800c11a <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800c0d8:	f7f7 fee4 	bl	8003ea4 <HAL_GetTick>
 800c0dc:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c0de:	e00e      	b.n	800c0fe <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c0e0:	f7f7 fee0 	bl	8003ea4 <HAL_GetTick>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d907      	bls.n	800c0fe <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2204      	movs	r2, #4
 800c0f2:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e00d      	b.n	800c11a <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	f003 0304 	and.w	r3, r3, #4
 800c108:	2b04      	cmp	r3, #4
 800c10a:	d0e9      	beq.n	800c0e0 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	7a1b      	ldrb	r3, [r3, #8]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d101      	bne.n	800c13c <HAL_RNG_GenerateRandomNumber+0x1a>
 800c138:	2302      	movs	r3, #2
 800c13a:	e03d      	b.n	800c1b8 <HAL_RNG_GenerateRandomNumber+0x96>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7a5b      	ldrb	r3, [r3, #9]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d12c      	bne.n	800c1a6 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2202      	movs	r2, #2
 800c150:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800c152:	f7f7 fea7 	bl	8003ea4 <HAL_GetTick>
 800c156:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c158:	e011      	b.n	800c17e <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c15a:	f7f7 fea3 	bl	8003ea4 <HAL_GetTick>
 800c15e:	4602      	mov	r2, r0
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	1ad3      	subs	r3, r2, r3
 800c164:	2b02      	cmp	r3, #2
 800c166:	d90a      	bls.n	800c17e <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2202      	movs	r2, #2
 800c172:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e01c      	b.n	800c1b8 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d1e6      	bne.n	800c15a <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	689a      	ldr	r2, [r3, #8]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	691a      	ldr	r2, [r3, #16]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	725a      	strb	r2, [r3, #9]
 800c1a4:	e004      	b.n	800c1b0 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2204      	movs	r2, #4
 800c1aa:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	721a      	strb	r2, [r3, #8]

  return status;
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d904      	bls.n	800c1de <HAL_SAI_InitProtocol+0x1e>
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	3b03      	subs	r3, #3
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d812      	bhi.n	800c202 <HAL_SAI_InitProtocol+0x42>
 800c1dc:	e008      	b.n	800c1f0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	68b9      	ldr	r1, [r7, #8]
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f000 fb7d 	bl	800c8e4 <SAI_InitI2S>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	75fb      	strb	r3, [r7, #23]
      break;
 800c1ee:	e00b      	b.n	800c208 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f000 fc26 	bl	800ca48 <SAI_InitPCM>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c200:	e002      	b.n	800c208 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	75fb      	strb	r3, [r7, #23]
      break;
 800c206:	bf00      	nop
  }

  if (status == HAL_OK)
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d104      	bne.n	800c218 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f000 f808 	bl	800c224 <HAL_SAI_Init>
 800c214:	4603      	mov	r3, r0
 800c216:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c218:	7dfb      	ldrb	r3, [r7, #23]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08a      	sub	sp, #40	; 0x28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e283      	b.n	800c73e <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800c236:	f7f7 fe65 	bl	8003f04 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c240:	2b01      	cmp	r3, #1
 800c242:	d113      	bne.n	800c26c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a94      	ldr	r2, [pc, #592]	; (800c49c <HAL_SAI_Init+0x278>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d004      	beq.n	800c258 <HAL_SAI_Init+0x34>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a93      	ldr	r2, [pc, #588]	; (800c4a0 <HAL_SAI_Init+0x27c>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d107      	bne.n	800c268 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d103      	bne.n	800c268 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800c264:	2b00      	cmp	r3, #0
 800c266:	d001      	beq.n	800c26c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	e268      	b.n	800c73e <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a8a      	ldr	r2, [pc, #552]	; (800c49c <HAL_SAI_Init+0x278>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d004      	beq.n	800c280 <HAL_SAI_Init+0x5c>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a8a      	ldr	r2, [pc, #552]	; (800c4a4 <HAL_SAI_Init+0x280>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d102      	bne.n	800c286 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800c280:	4b89      	ldr	r3, [pc, #548]	; (800c4a8 <HAL_SAI_Init+0x284>)
 800c282:	61bb      	str	r3, [r7, #24]
 800c284:	e028      	b.n	800c2d8 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a88      	ldr	r2, [pc, #544]	; (800c4ac <HAL_SAI_Init+0x288>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d004      	beq.n	800c29a <HAL_SAI_Init+0x76>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a86      	ldr	r2, [pc, #536]	; (800c4b0 <HAL_SAI_Init+0x28c>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d102      	bne.n	800c2a0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800c29a:	4b86      	ldr	r3, [pc, #536]	; (800c4b4 <HAL_SAI_Init+0x290>)
 800c29c:	61bb      	str	r3, [r7, #24]
 800c29e:	e01b      	b.n	800c2d8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a84      	ldr	r2, [pc, #528]	; (800c4b8 <HAL_SAI_Init+0x294>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d004      	beq.n	800c2b4 <HAL_SAI_Init+0x90>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a83      	ldr	r2, [pc, #524]	; (800c4bc <HAL_SAI_Init+0x298>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d102      	bne.n	800c2ba <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800c2b4:	4b82      	ldr	r3, [pc, #520]	; (800c4c0 <HAL_SAI_Init+0x29c>)
 800c2b6:	61bb      	str	r3, [r7, #24]
 800c2b8:	e00e      	b.n	800c2d8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a78      	ldr	r2, [pc, #480]	; (800c4a0 <HAL_SAI_Init+0x27c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d004      	beq.n	800c2ce <HAL_SAI_Init+0xaa>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a7e      	ldr	r2, [pc, #504]	; (800c4c4 <HAL_SAI_Init+0x2a0>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d102      	bne.n	800c2d4 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800c2ce:	4b7e      	ldr	r3, [pc, #504]	; (800c4c8 <HAL_SAI_Init+0x2a4>)
 800c2d0:	61bb      	str	r3, [r7, #24]
 800c2d2:	e001      	b.n	800c2d8 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e232      	b.n	800c73e <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f7f6 fb23 	bl	8002938 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fc62 	bl	800cbbc <SAI_Disable>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800c2fe:	2301      	movs	r3, #1
 800c300:	e21d      	b.n	800c73e <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2202      	movs	r2, #2
 800c306:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	2b02      	cmp	r3, #2
 800c310:	d00c      	beq.n	800c32c <HAL_SAI_Init+0x108>
 800c312:	2b02      	cmp	r3, #2
 800c314:	d80d      	bhi.n	800c332 <HAL_SAI_Init+0x10e>
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <HAL_SAI_Init+0xfc>
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d003      	beq.n	800c326 <HAL_SAI_Init+0x102>
 800c31e:	e008      	b.n	800c332 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800c320:	2300      	movs	r3, #0
 800c322:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c324:	e008      	b.n	800c338 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c326:	2310      	movs	r3, #16
 800c328:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c32a:	e005      	b.n	800c338 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c32c:	2320      	movs	r3, #32
 800c32e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c330:	e002      	b.n	800c338 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c336:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	2b05      	cmp	r3, #5
 800c33e:	d832      	bhi.n	800c3a6 <HAL_SAI_Init+0x182>
 800c340:	a201      	add	r2, pc, #4	; (adr r2, 800c348 <HAL_SAI_Init+0x124>)
 800c342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c346:	bf00      	nop
 800c348:	0800c361 	.word	0x0800c361
 800c34c:	0800c367 	.word	0x0800c367
 800c350:	0800c36f 	.word	0x0800c36f
 800c354:	0800c377 	.word	0x0800c377
 800c358:	0800c387 	.word	0x0800c387
 800c35c:	0800c397 	.word	0x0800c397
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	61fb      	str	r3, [r7, #28]
      break;
 800c364:	e022      	b.n	800c3ac <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c36a:	61fb      	str	r3, [r7, #28]
      break;
 800c36c:	e01e      	b.n	800c3ac <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c36e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c372:	61fb      	str	r3, [r7, #28]
      break;
 800c374:	e01a      	b.n	800c3ac <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c37a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	f043 0301 	orr.w	r3, r3, #1
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c384:	e012      	b.n	800c3ac <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c386:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c38a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38e:	f043 0302 	orr.w	r3, r3, #2
 800c392:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c394:	e00a      	b.n	800c3ac <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c39a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800c39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39e:	f043 0303 	orr.w	r3, r3, #3
 800c3a2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c3a4:	e002      	b.n	800c3ac <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	61fb      	str	r3, [r7, #28]
      break;
 800c3aa:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3b0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a1b      	ldr	r3, [r3, #32]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 80ba 	beq.w	800c530 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a35      	ldr	r2, [pc, #212]	; (800c49c <HAL_SAI_Init+0x278>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d004      	beq.n	800c3d4 <HAL_SAI_Init+0x1b0>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a35      	ldr	r2, [pc, #212]	; (800c4a4 <HAL_SAI_Init+0x280>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d104      	bne.n	800c3de <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c3d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c3d8:	f7fe fc02 	bl	800abe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c3dc:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a32      	ldr	r2, [pc, #200]	; (800c4ac <HAL_SAI_Init+0x288>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d004      	beq.n	800c3f2 <HAL_SAI_Init+0x1ce>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a30      	ldr	r2, [pc, #192]	; (800c4b0 <HAL_SAI_Init+0x28c>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d104      	bne.n	800c3fc <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c3f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c3f6:	f7fe fbf3 	bl	800abe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c3fa:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a2d      	ldr	r2, [pc, #180]	; (800c4b8 <HAL_SAI_Init+0x294>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d004      	beq.n	800c410 <HAL_SAI_Init+0x1ec>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a2c      	ldr	r2, [pc, #176]	; (800c4bc <HAL_SAI_Init+0x298>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d104      	bne.n	800c41a <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800c410:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c414:	f7fe fbe4 	bl	800abe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c418:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a20      	ldr	r2, [pc, #128]	; (800c4a0 <HAL_SAI_Init+0x27c>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d104      	bne.n	800c42e <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800c424:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c428:	f7fe fbda 	bl	800abe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c42c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a24      	ldr	r2, [pc, #144]	; (800c4c4 <HAL_SAI_Init+0x2a0>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d104      	bne.n	800c442 <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800c438:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c43c:	f7fe fbd0 	bl	800abe0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c440:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c44a:	d120      	bne.n	800c48e <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c450:	2b04      	cmp	r3, #4
 800c452:	d102      	bne.n	800c45a <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800c454:	2340      	movs	r3, #64	; 0x40
 800c456:	60fb      	str	r3, [r7, #12]
 800c458:	e00a      	b.n	800c470 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c45e:	2b08      	cmp	r3, #8
 800c460:	d103      	bne.n	800c46a <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800c462:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	e002      	b.n	800c470 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c46e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	4613      	mov	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	005b      	lsls	r3, r3, #1
 800c47a:	4619      	mov	r1, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6a1b      	ldr	r3, [r3, #32]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	fb02 f303 	mul.w	r3, r2, r3
 800c486:	fbb1 f3f3 	udiv	r3, r1, r3
 800c48a:	613b      	str	r3, [r7, #16]
 800c48c:	e02f      	b.n	800c4ee <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c496:	d119      	bne.n	800c4cc <HAL_SAI_Init+0x2a8>
 800c498:	2302      	movs	r3, #2
 800c49a:	e018      	b.n	800c4ce <HAL_SAI_Init+0x2aa>
 800c49c:	40015804 	.word	0x40015804
 800c4a0:	58005404 	.word	0x58005404
 800c4a4:	40015824 	.word	0x40015824
 800c4a8:	40015800 	.word	0x40015800
 800c4ac:	40015c04 	.word	0x40015c04
 800c4b0:	40015c24 	.word	0x40015c24
 800c4b4:	40015c00 	.word	0x40015c00
 800c4b8:	40016004 	.word	0x40016004
 800c4bc:	40016024 	.word	0x40016024
 800c4c0:	40016000 	.word	0x40016000
 800c4c4:	58005424 	.word	0x58005424
 800c4c8:	58005400 	.word	0x58005400
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4413      	add	r3, r2
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	4619      	mov	r1, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6a1b      	ldr	r3, [r3, #32]
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	fb02 f303 	mul.w	r3, r2, r3
 800c4e6:	021b      	lsls	r3, r3, #8
 800c4e8:	fbb1 f3f3 	udiv	r3, r1, r3
 800c4ec:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	4a95      	ldr	r2, [pc, #596]	; (800c748 <HAL_SAI_Init+0x524>)
 800c4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f6:	08da      	lsrs	r2, r3, #3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800c4fc:	6939      	ldr	r1, [r7, #16]
 800c4fe:	4b92      	ldr	r3, [pc, #584]	; (800c748 <HAL_SAI_Init+0x524>)
 800c500:	fba3 2301 	umull	r2, r3, r3, r1
 800c504:	08da      	lsrs	r2, r3, #3
 800c506:	4613      	mov	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	005b      	lsls	r3, r3, #1
 800c50e:	1aca      	subs	r2, r1, r3
 800c510:	2a08      	cmp	r2, #8
 800c512:	d904      	bls.n	800c51e <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c522:	2b04      	cmp	r3, #4
 800c524:	d104      	bne.n	800c530 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52a:	085a      	lsrs	r2, r3, #1
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <HAL_SAI_Init+0x31c>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d109      	bne.n	800c554 <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c544:	2b01      	cmp	r3, #1
 800c546:	d101      	bne.n	800c54c <HAL_SAI_Init+0x328>
 800c548:	2300      	movs	r3, #0
 800c54a:	e001      	b.n	800c550 <HAL_SAI_Init+0x32c>
 800c54c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c550:	623b      	str	r3, [r7, #32]
 800c552:	e008      	b.n	800c566 <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d102      	bne.n	800c562 <HAL_SAI_Init+0x33e>
 800c55c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c560:	e000      	b.n	800c564 <HAL_SAI_Init+0x340>
 800c562:	2300      	movs	r3, #0
 800c564:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800c566:	f7f7 fccd 	bl	8003f04 <HAL_GetREVID>
 800c56a:	4603      	mov	r3, r0
 800c56c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c570:	d331      	bcc.n	800c5d6 <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6819      	ldr	r1, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	4b73      	ldr	r3, [pc, #460]	; (800c74c <HAL_SAI_Init+0x528>)
 800c57e:	400b      	ands	r3, r1
 800c580:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6819      	ldr	r1, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c590:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c596:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c59c:	431a      	orrs	r2, r3
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800c5aa:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c5b6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5bc:	051b      	lsls	r3, r3, #20
 800c5be:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c5c4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	e02d      	b.n	800c632 <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	6819      	ldr	r1, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	4b5b      	ldr	r3, [pc, #364]	; (800c750 <HAL_SAI_Init+0x52c>)
 800c5e2:	400b      	ands	r3, r1
 800c5e4:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6819      	ldr	r1, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685a      	ldr	r2, [r3, #4]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c5fa:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c600:	431a      	orrs	r2, r3
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800c60e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c61a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c620:	051b      	lsls	r3, r3, #20
 800c622:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c628:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	430a      	orrs	r2, r1
 800c630:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6859      	ldr	r1, [r3, #4]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	4b45      	ldr	r3, [pc, #276]	; (800c754 <HAL_SAI_Init+0x530>)
 800c63e:	400b      	ands	r3, r1
 800c640:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	6859      	ldr	r1, [r3, #4]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	69da      	ldr	r2, [r3, #28]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c650:	431a      	orrs	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c656:	431a      	orrs	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	430a      	orrs	r2, r1
 800c65e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6899      	ldr	r1, [r3, #8]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	4b3b      	ldr	r3, [pc, #236]	; (800c758 <HAL_SAI_Init+0x534>)
 800c66c:	400b      	ands	r3, r1
 800c66e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6899      	ldr	r1, [r3, #8]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c680:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800c686:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800c68c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c692:	3b01      	subs	r3, #1
 800c694:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c696:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	430a      	orrs	r2, r1
 800c69e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68d9      	ldr	r1, [r3, #12]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c6ae:	400b      	ands	r3, r1
 800c6b0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68d9      	ldr	r1, [r3, #12]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6c0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6c6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c6c8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	021b      	lsls	r3, r3, #8
 800c6d2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	430a      	orrs	r2, r1
 800c6da:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a1e      	ldr	r2, [pc, #120]	; (800c75c <HAL_SAI_Init+0x538>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d004      	beq.n	800c6f0 <HAL_SAI_Init+0x4cc>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a1d      	ldr	r2, [pc, #116]	; (800c760 <HAL_SAI_Init+0x53c>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d119      	bne.n	800c724 <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6f4:	f023 0201 	bic.w	r2, r3, #1
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c702:	2b01      	cmp	r3, #1
 800c704:	d10e      	bne.n	800c724 <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70e:	3b01      	subs	r3, #1
 800c710:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c712:	431a      	orrs	r2, r3
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71c:	f043 0201 	orr.w	r2, r3, #1
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3728      	adds	r7, #40	; 0x28
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	cccccccd 	.word	0xcccccccd
 800c74c:	f005c010 	.word	0xf005c010
 800c750:	f805c010 	.word	0xf805c010
 800c754:	ffff1ff0 	.word	0xffff1ff0
 800c758:	fff88000 	.word	0xfff88000
 800c75c:	40015804 	.word	0x40015804
 800c760:	58005404 	.word	0x58005404

0800c764 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	4613      	mov	r3, r2
 800c770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c772:	f7f7 fb97 	bl	8003ea4 <HAL_GetTick>
 800c776:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d002      	beq.n	800c784 <HAL_SAI_Transmit_DMA+0x20>
 800c77e:	88fb      	ldrh	r3, [r7, #6]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	e098      	b.n	800c8ba <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b01      	cmp	r3, #1
 800c792:	f040 8091 	bne.w	800c8b8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d101      	bne.n	800c7a4 <HAL_SAI_Transmit_DMA+0x40>
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	e08a      	b.n	800c8ba <HAL_SAI_Transmit_DMA+0x156>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	88fa      	ldrh	r2, [r7, #6]
 800c7b6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	88fa      	ldrh	r2, [r7, #6]
 800c7be:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2212      	movs	r2, #18
 800c7ce:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7d8:	4a3a      	ldr	r2, [pc, #232]	; (800c8c4 <HAL_SAI_Transmit_DMA+0x160>)
 800c7da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7e2:	4a39      	ldr	r2, [pc, #228]	; (800c8c8 <HAL_SAI_Transmit_DMA+0x164>)
 800c7e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ec:	4a37      	ldr	r2, [pc, #220]	; (800c8cc <HAL_SAI_Transmit_DMA+0x168>)
 800c7ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c804:	4619      	mov	r1, r3
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	331c      	adds	r3, #28
 800c80c:	461a      	mov	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c814:	f7f8 fc78 	bl	8005108 <HAL_DMA_Start_IT>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d005      	beq.n	800c82a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	e047      	b.n	800c8ba <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c82a:	2100      	movs	r1, #0
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f98d 	bl	800cb4c <SAI_InterruptFlag>
 800c832:	4601      	mov	r1, r0
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	691a      	ldr	r2, [r3, #16]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	430a      	orrs	r2, r1
 800c840:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c850:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c852:	e015      	b.n	800c880 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800c854:	f7f7 fb26 	bl	8003ea4 <HAL_GetTick>
 800c858:	4602      	mov	r2, r0
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c862:	d90d      	bls.n	800c880 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c86a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e01c      	b.n	800c8ba <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0e2      	beq.n	800c854 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d107      	bne.n	800c8ac <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c8aa:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	e000      	b.n	800c8ba <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800c8b8:	2302      	movs	r3, #2
  }
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	0800cc91 	.word	0x0800cc91
 800c8c8:	0800cc31 	.word	0x0800cc31
 800c8cc:	0800ccad 	.word	0x0800ccad

0800c8d0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d003      	beq.n	800c912 <SAI_InitI2S+0x2e>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d103      	bne.n	800c91a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	651a      	str	r2, [r3, #80]	; 0x50
 800c918:	e002      	b.n	800c920 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2201      	movs	r2, #1
 800c91e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c926:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c92e:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	f003 0301 	and.w	r3, r3, #1
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e077      	b.n	800ca3a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d107      	bne.n	800c960 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c95c:	665a      	str	r2, [r3, #100]	; 0x64
 800c95e:	e006      	b.n	800c96e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c966:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	665a      	str	r2, [r3, #100]	; 0x64
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b03      	cmp	r3, #3
 800c972:	d84f      	bhi.n	800ca14 <SAI_InitI2S+0x130>
 800c974:	a201      	add	r2, pc, #4	; (adr r2, 800c97c <SAI_InitI2S+0x98>)
 800c976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97a:	bf00      	nop
 800c97c:	0800c98d 	.word	0x0800c98d
 800c980:	0800c9af 	.word	0x0800c9af
 800c984:	0800c9d1 	.word	0x0800c9d1
 800c988:	0800c9f3 	.word	0x0800c9f3

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2280      	movs	r2, #128	; 0x80
 800c990:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	085b      	lsrs	r3, r3, #1
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	085b      	lsrs	r3, r3, #1
 800c9a0:	011a      	lsls	r2, r3, #4
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2240      	movs	r2, #64	; 0x40
 800c9aa:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c9ac:	e035      	b.n	800ca1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2280      	movs	r2, #128	; 0x80
 800c9b2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	085b      	lsrs	r3, r3, #1
 800c9b8:	019a      	lsls	r2, r3, #6
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	085b      	lsrs	r3, r3, #1
 800c9c2:	015a      	lsls	r2, r3, #5
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2280      	movs	r2, #128	; 0x80
 800c9cc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c9ce:	e024      	b.n	800ca1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	22c0      	movs	r2, #192	; 0xc0
 800c9d4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	085b      	lsrs	r3, r3, #1
 800c9da:	019a      	lsls	r2, r3, #6
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	085b      	lsrs	r3, r3, #1
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2280      	movs	r2, #128	; 0x80
 800c9ee:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c9f0:	e013      	b.n	800ca1a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	22e0      	movs	r2, #224	; 0xe0
 800c9f6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	085b      	lsrs	r3, r3, #1
 800c9fc:	019a      	lsls	r2, r3, #6
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	085b      	lsrs	r3, r3, #1
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2280      	movs	r2, #128	; 0x80
 800ca10:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800ca12:	e002      	b.n	800ca1a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	75fb      	strb	r3, [r7, #23]
      break;
 800ca18:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d10b      	bne.n	800ca38 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d102      	bne.n	800ca2c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2210      	movs	r2, #16
 800ca2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d102      	bne.n	800ca38 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2208      	movs	r2, #8
 800ca36:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop

0800ca48 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b087      	sub	sp, #28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <SAI_InitPCM+0x2e>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	d103      	bne.n	800ca7e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	651a      	str	r2, [r3, #80]	; 0x50
 800ca7c:	e002      	b.n	800ca84 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ca90:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ca98:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	683a      	ldr	r2, [r7, #0]
 800caa4:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caac:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	d103      	bne.n	800cabc <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2201      	movs	r2, #1
 800cab8:	659a      	str	r2, [r3, #88]	; 0x58
 800caba:	e002      	b.n	800cac2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	220d      	movs	r2, #13
 800cac0:	659a      	str	r2, [r3, #88]	; 0x58
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d837      	bhi.n	800cb38 <SAI_InitPCM+0xf0>
 800cac8:	a201      	add	r2, pc, #4	; (adr r2, 800cad0 <SAI_InitPCM+0x88>)
 800caca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cace:	bf00      	nop
 800cad0:	0800cae1 	.word	0x0800cae1
 800cad4:	0800caf7 	.word	0x0800caf7
 800cad8:	0800cb0d 	.word	0x0800cb0d
 800cadc:	0800cb23 	.word	0x0800cb23
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2280      	movs	r2, #128	; 0x80
 800cae4:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	011a      	lsls	r2, r3, #4
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2240      	movs	r2, #64	; 0x40
 800caf2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800caf4:	e023      	b.n	800cb3e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2280      	movs	r2, #128	; 0x80
 800cafa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	015a      	lsls	r2, r3, #5
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2280      	movs	r2, #128	; 0x80
 800cb08:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cb0a:	e018      	b.n	800cb3e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	22c0      	movs	r2, #192	; 0xc0
 800cb10:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	015a      	lsls	r2, r3, #5
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2280      	movs	r2, #128	; 0x80
 800cb1e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cb20:	e00d      	b.n	800cb3e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	22e0      	movs	r2, #224	; 0xe0
 800cb26:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	015a      	lsls	r2, r3, #5
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2280      	movs	r2, #128	; 0x80
 800cb34:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800cb36:	e002      	b.n	800cb3e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	75fb      	strb	r3, [r7, #23]
      break;
 800cb3c:	bf00      	nop
  }

  return status;
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	371c      	adds	r7, #28
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800cb5c:	78fb      	ldrb	r3, [r7, #3]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d103      	bne.n	800cb6a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f043 0308 	orr.w	r3, r3, #8
 800cb68:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb6e:	2b08      	cmp	r3, #8
 800cb70:	d10b      	bne.n	800cb8a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d003      	beq.n	800cb82 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d103      	bne.n	800cb8a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f043 0310 	orr.w	r3, r3, #16
 800cb88:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d003      	beq.n	800cb9a <SAI_InterruptFlag+0x4e>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d104      	bne.n	800cba4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cba0:	60fb      	str	r3, [r7, #12]
 800cba2:	e003      	b.n	800cbac <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f043 0304 	orr.w	r3, r3, #4
 800cbaa:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800cbac:	68fb      	ldr	r3, [r7, #12]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
	...

0800cbbc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800cbc4:	4b18      	ldr	r3, [pc, #96]	; (800cc28 <SAI_Disable+0x6c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a18      	ldr	r2, [pc, #96]	; (800cc2c <SAI_Disable+0x70>)
 800cbca:	fba2 2303 	umull	r2, r3, r2, r3
 800cbce:	0b1b      	lsrs	r3, r3, #12
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800cbe6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10a      	bne.n	800cc04 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cbf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	72fb      	strb	r3, [r7, #11]
      break;
 800cc02:	e009      	b.n	800cc18 <SAI_Disable+0x5c>
    }
    count--;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3b01      	subs	r3, #1
 800cc08:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e7      	bne.n	800cbe8 <SAI_Disable+0x2c>

  return status;
 800cc18:	7afb      	ldrb	r3, [r7, #11]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	24000000 	.word	0x24000000
 800cc2c:	95cbec1b 	.word	0x95cbec1b

0800cc30 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc46:	d01c      	beq.n	800cc82 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cc5e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800cc60:	2100      	movs	r1, #0
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f7ff ff72 	bl	800cb4c <SAI_InterruptFlag>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	43d9      	mvns	r1, r3
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	691a      	ldr	r2, [r3, #16]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	400a      	ands	r2, r1
 800cc78:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f004 ffba 	bl	8011bfc <HAL_SAI_TxCpltCallback>
#endif
}
 800cc88:	bf00      	nop
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f004 ff96 	bl	8011bd0 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800cca4:	bf00      	nop
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb8:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7f9 fbb8 	bl	8006430 <HAL_DMA_GetError>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d01d      	beq.n	800cd02 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cccc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cce4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f7ff ff68 	bl	800cbbc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800ccfc:	68f8      	ldr	r0, [r7, #12]
 800ccfe:	f7ff fde7 	bl	800c8d0 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800cd02:	bf00      	nop
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e0eb      	b.n	800cefa <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a75      	ldr	r2, [pc, #468]	; (800cf04 <HAL_SPI_Init+0x1f8>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d00f      	beq.n	800cd52 <HAL_SPI_Init+0x46>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a74      	ldr	r2, [pc, #464]	; (800cf08 <HAL_SPI_Init+0x1fc>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d00a      	beq.n	800cd52 <HAL_SPI_Init+0x46>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a72      	ldr	r2, [pc, #456]	; (800cf0c <HAL_SPI_Init+0x200>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d005      	beq.n	800cd52 <HAL_SPI_Init+0x46>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	2b0f      	cmp	r3, #15
 800cd4c:	d901      	bls.n	800cd52 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	e0d3      	b.n	800cefa <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f001 f888 	bl	800de68 <SPI_GetPacketSize>
 800cd58:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a69      	ldr	r2, [pc, #420]	; (800cf04 <HAL_SPI_Init+0x1f8>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d00c      	beq.n	800cd7e <HAL_SPI_Init+0x72>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a67      	ldr	r2, [pc, #412]	; (800cf08 <HAL_SPI_Init+0x1fc>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d007      	beq.n	800cd7e <HAL_SPI_Init+0x72>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4a66      	ldr	r2, [pc, #408]	; (800cf0c <HAL_SPI_Init+0x200>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d002      	beq.n	800cd7e <HAL_SPI_Init+0x72>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2b08      	cmp	r3, #8
 800cd7c:	d811      	bhi.n	800cda2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd82:	4a60      	ldr	r2, [pc, #384]	; (800cf04 <HAL_SPI_Init+0x1f8>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d009      	beq.n	800cd9c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a5e      	ldr	r2, [pc, #376]	; (800cf08 <HAL_SPI_Init+0x1fc>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d004      	beq.n	800cd9c <HAL_SPI_Init+0x90>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a5d      	ldr	r2, [pc, #372]	; (800cf0c <HAL_SPI_Init+0x200>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d104      	bne.n	800cda6 <HAL_SPI_Init+0x9a>
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2b10      	cmp	r3, #16
 800cda0:	d901      	bls.n	800cda6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e0a9      	b.n	800cefa <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7f5 feda 	bl	8002b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2202      	movs	r2, #2
 800cdc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f022 0201 	bic.w	r2, r2, #1
 800cdd6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	699b      	ldr	r3, [r3, #24]
 800cddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cde0:	d119      	bne.n	800ce16 <HAL_SPI_Init+0x10a>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdea:	d103      	bne.n	800cdf4 <HAL_SPI_Init+0xe8>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d008      	beq.n	800ce06 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10c      	bne.n	800ce16 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce04:	d107      	bne.n	800ce16 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ce14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	69da      	ldr	r2, [r3, #28]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	431a      	orrs	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce28:	ea42 0103 	orr.w	r1, r2, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	68da      	ldr	r2, [r3, #12]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce40:	431a      	orrs	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce46:	431a      	orrs	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	699b      	ldr	r3, [r3, #24]
 800ce4c:	431a      	orrs	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	431a      	orrs	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	695b      	ldr	r3, [r3, #20]
 800ce58:	431a      	orrs	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a1b      	ldr	r3, [r3, #32]
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	431a      	orrs	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	431a      	orrs	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce76:	ea42 0103 	orr.w	r1, r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	430a      	orrs	r2, r1
 800ce84:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d113      	bne.n	800ceb6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cea0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ceb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f022 0201 	bic.w	r2, r2, #1
 800cec4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00a      	beq.n	800cee8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	430a      	orrs	r2, r1
 800cee6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	40013000 	.word	0x40013000
 800cf08:	40003800 	.word	0x40003800
 800cf0c:	40003c00 	.word	0x40003c00

0800cf10 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08a      	sub	sp, #40	; 0x28
 800cf14:	af02      	add	r7, sp, #8
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	603b      	str	r3, [r7, #0]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	3320      	adds	r3, #32
 800cf26:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d101      	bne.n	800cf3a <HAL_SPI_Transmit+0x2a>
 800cf36:	2302      	movs	r3, #2
 800cf38:	e1d7      	b.n	800d2ea <HAL_SPI_Transmit+0x3da>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf42:	f7f6 ffaf 	bl	8003ea4 <HAL_GetTick>
 800cf46:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d007      	beq.n	800cf64 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800cf54:	2302      	movs	r3, #2
 800cf56:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cf60:	7efb      	ldrb	r3, [r7, #27]
 800cf62:	e1c2      	b.n	800d2ea <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <HAL_SPI_Transmit+0x60>
 800cf6a:	88fb      	ldrh	r3, [r7, #6]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d107      	bne.n	800cf80 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cf7c:	7efb      	ldrb	r3, [r7, #27]
 800cf7e:	e1b4      	b.n	800d2ea <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2203      	movs	r2, #3
 800cf84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	88fa      	ldrh	r2, [r7, #6]
 800cf9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	88fa      	ldrh	r2, [r7, #6]
 800cfa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cfd0:	d107      	bne.n	800cfe2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	4b96      	ldr	r3, [pc, #600]	; (800d244 <HAL_SPI_Transmit+0x334>)
 800cfea:	4013      	ands	r3, r2
 800cfec:	88f9      	ldrh	r1, [r7, #6]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	6812      	ldr	r2, [r2, #0]
 800cff2:	430b      	orrs	r3, r1
 800cff4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f042 0201 	orr.w	r2, r2, #1
 800d004:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d00e:	d107      	bne.n	800d020 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d01e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	2b0f      	cmp	r3, #15
 800d026:	d947      	bls.n	800d0b8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d028:	e03f      	b.n	800d0aa <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	f003 0302 	and.w	r3, r3, #2
 800d034:	2b02      	cmp	r3, #2
 800d036:	d114      	bne.n	800d062 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6812      	ldr	r2, [r2, #0]
 800d042:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d048:	1d1a      	adds	r2, r3, #4
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d054:	b29b      	uxth	r3, r3
 800d056:	3b01      	subs	r3, #1
 800d058:	b29a      	uxth	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d060:	e023      	b.n	800d0aa <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d062:	f7f6 ff1f 	bl	8003ea4 <HAL_GetTick>
 800d066:	4602      	mov	r2, r0
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d803      	bhi.n	800d07a <HAL_SPI_Transmit+0x16a>
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d078:	d102      	bne.n	800d080 <HAL_SPI_Transmit+0x170>
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d114      	bne.n	800d0aa <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f000 fe23 	bl	800dccc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	2200      	movs	r2, #0
 800d08a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e11f      	b.n	800d2ea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1b9      	bne.n	800d02a <HAL_SPI_Transmit+0x11a>
 800d0b6:	e0f2      	b.n	800d29e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	2b07      	cmp	r3, #7
 800d0be:	f240 80e7 	bls.w	800d290 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d0c2:	e05d      	b.n	800d180 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	f003 0302 	and.w	r3, r3, #2
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d132      	bne.n	800d138 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d918      	bls.n	800d110 <HAL_SPI_Transmit+0x200>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d014      	beq.n	800d110 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	6812      	ldr	r2, [r2, #0]
 800d0f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0f6:	1d1a      	adds	r2, r3, #4
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d102:	b29b      	uxth	r3, r3
 800d104:	3b02      	subs	r3, #2
 800d106:	b29a      	uxth	r2, r3
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d10e:	e037      	b.n	800d180 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d114:	881a      	ldrh	r2, [r3, #0]
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d11e:	1c9a      	adds	r2, r3, #2
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	3b01      	subs	r3, #1
 800d12e:	b29a      	uxth	r2, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d136:	e023      	b.n	800d180 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d138:	f7f6 feb4 	bl	8003ea4 <HAL_GetTick>
 800d13c:	4602      	mov	r2, r0
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	683a      	ldr	r2, [r7, #0]
 800d144:	429a      	cmp	r2, r3
 800d146:	d803      	bhi.n	800d150 <HAL_SPI_Transmit+0x240>
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d14e:	d102      	bne.n	800d156 <HAL_SPI_Transmit+0x246>
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d114      	bne.n	800d180 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f000 fdb8 	bl	800dccc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d16a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e0b4      	b.n	800d2ea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d186:	b29b      	uxth	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d19b      	bne.n	800d0c4 <HAL_SPI_Transmit+0x1b4>
 800d18c:	e087      	b.n	800d29e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	695b      	ldr	r3, [r3, #20]
 800d194:	f003 0302 	and.w	r3, r3, #2
 800d198:	2b02      	cmp	r3, #2
 800d19a:	d155      	bne.n	800d248 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	d918      	bls.n	800d1da <HAL_SPI_Transmit+0x2ca>
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ac:	2b40      	cmp	r3, #64	; 0x40
 800d1ae:	d914      	bls.n	800d1da <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	6812      	ldr	r2, [r2, #0]
 800d1ba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1c0:	1d1a      	adds	r2, r3, #4
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	3b04      	subs	r3, #4
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d1d8:	e05a      	b.n	800d290 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d917      	bls.n	800d216 <HAL_SPI_Transmit+0x306>
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d013      	beq.n	800d216 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1f2:	881a      	ldrh	r2, [r3, #0]
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1fc:	1c9a      	adds	r2, r3, #2
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d208:	b29b      	uxth	r3, r3
 800d20a:	3b02      	subs	r3, #2
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d214:	e03c      	b.n	800d290 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3320      	adds	r3, #32
 800d220:	7812      	ldrb	r2, [r2, #0]
 800d222:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d228:	1c5a      	adds	r2, r3, #1
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d234:	b29b      	uxth	r3, r3
 800d236:	3b01      	subs	r3, #1
 800d238:	b29a      	uxth	r2, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d240:	e026      	b.n	800d290 <HAL_SPI_Transmit+0x380>
 800d242:	bf00      	nop
 800d244:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d248:	f7f6 fe2c 	bl	8003ea4 <HAL_GetTick>
 800d24c:	4602      	mov	r2, r0
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	429a      	cmp	r2, r3
 800d256:	d803      	bhi.n	800d260 <HAL_SPI_Transmit+0x350>
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d25e:	d102      	bne.n	800d266 <HAL_SPI_Transmit+0x356>
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d114      	bne.n	800d290 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f000 fd30 	bl	800dccc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d27a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	e02c      	b.n	800d2ea <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d296:	b29b      	uxth	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f47f af78 	bne.w	800d18e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	2108      	movs	r1, #8
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f000 fdaf 	bl	800de0c <SPI_WaitOnFlagUntilTimeout>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d007      	beq.n	800d2c4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ba:	f043 0220 	orr.w	r2, r3, #32
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f000 fd01 	bl	800dccc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e000      	b.n	800d2ea <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d2e8:	7efb      	ldrb	r3, [r7, #27]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3720      	adds	r7, #32
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop

0800d2f4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08a      	sub	sp, #40	; 0x28
 800d2f8:	af02      	add	r7, sp, #8
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	603b      	str	r3, [r7, #0]
 800d300:	4613      	mov	r3, r2
 800d302:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	3330      	adds	r3, #48	; 0x30
 800d30e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d318:	d112      	bne.n	800d340 <HAL_SPI_Receive+0x4c>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10e      	bne.n	800d340 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2204      	movs	r2, #4
 800d326:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d32a:	88fa      	ldrh	r2, [r7, #6]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	4613      	mov	r3, r2
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	68b9      	ldr	r1, [r7, #8]
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f000 f9ce 	bl	800d6d8 <HAL_SPI_TransmitReceive>
 800d33c:	4603      	mov	r3, r0
 800d33e:	e1c7      	b.n	800d6d0 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d346:	2b01      	cmp	r3, #1
 800d348:	d101      	bne.n	800d34e <HAL_SPI_Receive+0x5a>
 800d34a:	2302      	movs	r3, #2
 800d34c:	e1c0      	b.n	800d6d0 <HAL_SPI_Receive+0x3dc>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d356:	f7f6 fda5 	bl	8003ea4 <HAL_GetTick>
 800d35a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b01      	cmp	r3, #1
 800d366:	d007      	beq.n	800d378 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800d368:	2302      	movs	r3, #2
 800d36a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d374:	7ffb      	ldrb	r3, [r7, #31]
 800d376:	e1ab      	b.n	800d6d0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <HAL_SPI_Receive+0x90>
 800d37e:	88fb      	ldrh	r3, [r7, #6]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d107      	bne.n	800d394 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800d384:	2301      	movs	r3, #1
 800d386:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d390:	7ffb      	ldrb	r3, [r7, #31]
 800d392:	e19d      	b.n	800d6d0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2204      	movs	r2, #4
 800d398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	68ba      	ldr	r2, [r7, #8]
 800d3a8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	88fa      	ldrh	r2, [r7, #6]
 800d3ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	88fa      	ldrh	r2, [r7, #6]
 800d3b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d3e4:	d107      	bne.n	800d3f6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	685a      	ldr	r2, [r3, #4]
 800d3fc:	4b94      	ldr	r3, [pc, #592]	; (800d650 <HAL_SPI_Receive+0x35c>)
 800d3fe:	4013      	ands	r3, r2
 800d400:	88f9      	ldrh	r1, [r7, #6]
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	6812      	ldr	r2, [r2, #0]
 800d406:	430b      	orrs	r3, r1
 800d408:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f042 0201 	orr.w	r2, r2, #1
 800d418:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d422:	d107      	bne.n	800d434 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d432:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	2b0f      	cmp	r3, #15
 800d43a:	d948      	bls.n	800d4ce <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d43c:	e040      	b.n	800d4c0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	695a      	ldr	r2, [r3, #20]
 800d444:	f248 0308 	movw	r3, #32776	; 0x8008
 800d448:	4013      	ands	r3, r2
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d014      	beq.n	800d478 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d456:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d458:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d45e:	1d1a      	adds	r2, r3, #4
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	3b01      	subs	r3, #1
 800d46e:	b29a      	uxth	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d476:	e023      	b.n	800d4c0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d478:	f7f6 fd14 	bl	8003ea4 <HAL_GetTick>
 800d47c:	4602      	mov	r2, r0
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	429a      	cmp	r2, r3
 800d486:	d803      	bhi.n	800d490 <HAL_SPI_Receive+0x19c>
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d48e:	d102      	bne.n	800d496 <HAL_SPI_Receive+0x1a2>
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d114      	bne.n	800d4c0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f000 fc18 	bl	800dccc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e107      	b.n	800d6d0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1b8      	bne.n	800d43e <HAL_SPI_Receive+0x14a>
 800d4cc:	e0ed      	b.n	800d6aa <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	2b07      	cmp	r3, #7
 800d4d4:	f240 80e2 	bls.w	800d69c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d4d8:	e05b      	b.n	800d592 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	695b      	ldr	r3, [r3, #20]
 800d4e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d030      	beq.n	800d54a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	695b      	ldr	r3, [r3, #20]
 800d4ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d014      	beq.n	800d520 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d500:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d506:	1d1a      	adds	r2, r3, #4
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d512:	b29b      	uxth	r3, r3
 800d514:	3b02      	subs	r3, #2
 800d516:	b29a      	uxth	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d51e:	e038      	b.n	800d592 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d524:	69ba      	ldr	r2, [r7, #24]
 800d526:	8812      	ldrh	r2, [r2, #0]
 800d528:	b292      	uxth	r2, r2
 800d52a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d530:	1c9a      	adds	r2, r3, #2
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	3b01      	subs	r3, #1
 800d540:	b29a      	uxth	r2, r3
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d548:	e023      	b.n	800d592 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d54a:	f7f6 fcab 	bl	8003ea4 <HAL_GetTick>
 800d54e:	4602      	mov	r2, r0
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d803      	bhi.n	800d562 <HAL_SPI_Receive+0x26e>
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d560:	d102      	bne.n	800d568 <HAL_SPI_Receive+0x274>
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d114      	bne.n	800d592 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f000 fbaf 	bl	800dccc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d57c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d58e:	2301      	movs	r3, #1
 800d590:	e09e      	b.n	800d6d0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d598:	b29b      	uxth	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d19d      	bne.n	800d4da <HAL_SPI_Receive+0x1e6>
 800d59e:	e084      	b.n	800d6aa <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d052      	beq.n	800d654 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	695b      	ldr	r3, [r3, #20]
 800d5b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d014      	beq.n	800d5e6 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d5c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5cc:	1d1a      	adds	r2, r3, #4
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	3b04      	subs	r3, #4
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d5e4:	e05a      	b.n	800d69c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d5f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5f4:	d914      	bls.n	800d620 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5fa:	69ba      	ldr	r2, [r7, #24]
 800d5fc:	8812      	ldrh	r2, [r2, #0]
 800d5fe:	b292      	uxth	r2, r2
 800d600:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d606:	1c9a      	adds	r2, r3, #2
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d612:	b29b      	uxth	r3, r3
 800d614:	3b02      	subs	r3, #2
 800d616:	b29a      	uxth	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d61e:	e03d      	b.n	800d69c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d62c:	7812      	ldrb	r2, [r2, #0]
 800d62e:	b2d2      	uxtb	r2, r2
 800d630:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d642:	b29b      	uxth	r3, r3
 800d644:	3b01      	subs	r3, #1
 800d646:	b29a      	uxth	r2, r3
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d64e:	e025      	b.n	800d69c <HAL_SPI_Receive+0x3a8>
 800d650:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d654:	f7f6 fc26 	bl	8003ea4 <HAL_GetTick>
 800d658:	4602      	mov	r2, r0
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	429a      	cmp	r2, r3
 800d662:	d803      	bhi.n	800d66c <HAL_SPI_Receive+0x378>
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d66a:	d102      	bne.n	800d672 <HAL_SPI_Receive+0x37e>
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d114      	bne.n	800d69c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 fb2a 	bl	800dccc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2201      	movs	r2, #1
 800d694:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	e019      	b.n	800d6d0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f47f af7b 	bne.w	800d5a0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f000 fb0e 	bl	800dccc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e000      	b.n	800d6d0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d6ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3720      	adds	r7, #32
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08e      	sub	sp, #56	; 0x38
 800d6dc:	af02      	add	r7, sp, #8
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
 800d6e4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	3320      	adds	r3, #32
 800d6f2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	3330      	adds	r3, #48	; 0x30
 800d6fa:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d702:	2b01      	cmp	r3, #1
 800d704:	d101      	bne.n	800d70a <HAL_SPI_TransmitReceive+0x32>
 800d706:	2302      	movs	r3, #2
 800d708:	e2ce      	b.n	800dca8 <HAL_SPI_TransmitReceive+0x5d0>
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d712:	f7f6 fbc7 	bl	8003ea4 <HAL_GetTick>
 800d716:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d718:	887b      	ldrh	r3, [r7, #2]
 800d71a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d71c:	887b      	ldrh	r3, [r7, #2]
 800d71e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d726:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d72e:	7efb      	ldrb	r3, [r7, #27]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d014      	beq.n	800d75e <HAL_SPI_TransmitReceive+0x86>
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d73a:	d106      	bne.n	800d74a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d102      	bne.n	800d74a <HAL_SPI_TransmitReceive+0x72>
 800d744:	7efb      	ldrb	r3, [r7, #27]
 800d746:	2b04      	cmp	r3, #4
 800d748:	d009      	beq.n	800d75e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d74a:	2302      	movs	r3, #2
 800d74c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2200      	movs	r2, #0
 800d754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d75c:	e2a4      	b.n	800dca8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d005      	beq.n	800d770 <HAL_SPI_TransmitReceive+0x98>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d002      	beq.n	800d770 <HAL_SPI_TransmitReceive+0x98>
 800d76a:	887b      	ldrh	r3, [r7, #2]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d109      	bne.n	800d784 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d770:	2301      	movs	r3, #1
 800d772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d77e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d782:	e291      	b.n	800dca8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b04      	cmp	r3, #4
 800d78e:	d003      	beq.n	800d798 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2205      	movs	r2, #5
 800d794:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2200      	movs	r2, #0
 800d79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	887a      	ldrh	r2, [r7, #2]
 800d7aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	887a      	ldrh	r2, [r7, #2]
 800d7b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	887a      	ldrh	r2, [r7, #2]
 800d7c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	887a      	ldrh	r2, [r7, #2]
 800d7c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	4b9f      	ldr	r3, [pc, #636]	; (800da5c <HAL_SPI_TransmitReceive+0x384>)
 800d7e0:	4013      	ands	r3, r2
 800d7e2:	8879      	ldrh	r1, [r7, #2]
 800d7e4:	68fa      	ldr	r2, [r7, #12]
 800d7e6:	6812      	ldr	r2, [r2, #0]
 800d7e8:	430b      	orrs	r3, r1
 800d7ea:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f042 0201 	orr.w	r2, r2, #1
 800d7fa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d804:	d107      	bne.n	800d816 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	2b0f      	cmp	r3, #15
 800d81c:	d970      	bls.n	800d900 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d81e:	e068      	b.n	800d8f2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	f003 0302 	and.w	r3, r3, #2
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d11a      	bne.n	800d864 <HAL_SPI_TransmitReceive+0x18c>
 800d82e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d830:	2b00      	cmp	r3, #0
 800d832:	d017      	beq.n	800d864 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	6812      	ldr	r2, [r2, #0]
 800d83e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d844:	1d1a      	adds	r2, r3, #4
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d850:	b29b      	uxth	r3, r3
 800d852:	3b01      	subs	r3, #1
 800d854:	b29a      	uxth	r2, r3
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d862:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	695a      	ldr	r2, [r3, #20]
 800d86a:	f248 0308 	movw	r3, #32776	; 0x8008
 800d86e:	4013      	ands	r3, r2
 800d870:	2b00      	cmp	r3, #0
 800d872:	d01a      	beq.n	800d8aa <HAL_SPI_TransmitReceive+0x1d2>
 800d874:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d876:	2b00      	cmp	r3, #0
 800d878:	d017      	beq.n	800d8aa <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d882:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d884:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d88a:	1d1a      	adds	r2, r3, #4
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d896:	b29b      	uxth	r3, r3
 800d898:	3b01      	subs	r3, #1
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d8a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8aa:	f7f6 fafb 	bl	8003ea4 <HAL_GetTick>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d803      	bhi.n	800d8c2 <HAL_SPI_TransmitReceive+0x1ea>
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8c0:	d102      	bne.n	800d8c8 <HAL_SPI_TransmitReceive+0x1f0>
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d114      	bne.n	800d8f2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f000 f9ff 	bl	800dccc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e1da      	b.n	800dca8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d8f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d193      	bne.n	800d820 <HAL_SPI_TransmitReceive+0x148>
 800d8f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d190      	bne.n	800d820 <HAL_SPI_TransmitReceive+0x148>
 800d8fe:	e1ac      	b.n	800dc5a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	2b07      	cmp	r3, #7
 800d906:	f240 81a0 	bls.w	800dc4a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d90a:	e0a9      	b.n	800da60 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	f003 0302 	and.w	r3, r3, #2
 800d916:	2b02      	cmp	r3, #2
 800d918:	d139      	bne.n	800d98e <HAL_SPI_TransmitReceive+0x2b6>
 800d91a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d036      	beq.n	800d98e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d922:	2b01      	cmp	r3, #1
 800d924:	d91c      	bls.n	800d960 <HAL_SPI_TransmitReceive+0x288>
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d018      	beq.n	800d960 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	6812      	ldr	r2, [r2, #0]
 800d938:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d93e:	1d1a      	adds	r2, r3, #4
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	3b02      	subs	r3, #2
 800d94e:	b29a      	uxth	r2, r3
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d95c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d95e:	e016      	b.n	800d98e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d964:	881a      	ldrh	r2, [r3, #0]
 800d966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d968:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d96e:	1c9a      	adds	r2, r3, #2
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	3b01      	subs	r3, #1
 800d97e:	b29a      	uxth	r2, r3
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d98c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	695b      	ldr	r3, [r3, #20]
 800d994:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d03a      	beq.n	800da12 <HAL_SPI_TransmitReceive+0x33a>
 800d99c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d037      	beq.n	800da12 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	695b      	ldr	r3, [r3, #20]
 800d9a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d018      	beq.n	800d9e2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d9ba:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c0:	1d1a      	adds	r2, r3, #4
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	3b02      	subs	r3, #2
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d9e0:	e017      	b.n	800da12 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e6:	6a3a      	ldr	r2, [r7, #32]
 800d9e8:	8812      	ldrh	r2, [r2, #0]
 800d9ea:	b292      	uxth	r2, r2
 800d9ec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9f2:	1c9a      	adds	r2, r3, #2
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	3b01      	subs	r3, #1
 800da02:	b29a      	uxth	r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da10:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da12:	f7f6 fa47 	bl	8003ea4 <HAL_GetTick>
 800da16:	4602      	mov	r2, r0
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	1ad3      	subs	r3, r2, r3
 800da1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da1e:	429a      	cmp	r2, r3
 800da20:	d803      	bhi.n	800da2a <HAL_SPI_TransmitReceive+0x352>
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da28:	d102      	bne.n	800da30 <HAL_SPI_TransmitReceive+0x358>
 800da2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d117      	bne.n	800da60 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f000 f94b 	bl	800dccc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2201      	movs	r2, #1
 800da52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e126      	b.n	800dca8 <HAL_SPI_TransmitReceive+0x5d0>
 800da5a:	bf00      	nop
 800da5c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800da60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da62:	2b00      	cmp	r3, #0
 800da64:	f47f af52 	bne.w	800d90c <HAL_SPI_TransmitReceive+0x234>
 800da68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	f47f af4e 	bne.w	800d90c <HAL_SPI_TransmitReceive+0x234>
 800da70:	e0f3      	b.n	800dc5a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	695b      	ldr	r3, [r3, #20]
 800da78:	f003 0302 	and.w	r3, r3, #2
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d15a      	bne.n	800db36 <HAL_SPI_TransmitReceive+0x45e>
 800da80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da82:	2b00      	cmp	r3, #0
 800da84:	d057      	beq.n	800db36 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800da86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d91c      	bls.n	800dac6 <HAL_SPI_TransmitReceive+0x3ee>
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da90:	2b40      	cmp	r3, #64	; 0x40
 800da92:	d918      	bls.n	800dac6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6812      	ldr	r2, [r2, #0]
 800da9e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daa4:	1d1a      	adds	r2, r3, #4
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	3b04      	subs	r3, #4
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dac2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dac4:	e037      	b.n	800db36 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d91b      	bls.n	800db04 <HAL_SPI_TransmitReceive+0x42c>
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d017      	beq.n	800db04 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dad8:	881a      	ldrh	r2, [r3, #0]
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dae2:	1c9a      	adds	r2, r3, #2
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800daee:	b29b      	uxth	r3, r3
 800daf0:	3b02      	subs	r3, #2
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800db02:	e018      	b.n	800db36 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3320      	adds	r3, #32
 800db0e:	7812      	ldrb	r2, [r2, #0]
 800db10:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db16:	1c5a      	adds	r2, r3, #1
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db22:	b29b      	uxth	r3, r3
 800db24:	3b01      	subs	r3, #1
 800db26:	b29a      	uxth	r2, r3
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db34:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	695b      	ldr	r3, [r3, #20]
 800db3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800db40:	2b00      	cmp	r3, #0
 800db42:	d05e      	beq.n	800dc02 <HAL_SPI_TransmitReceive+0x52a>
 800db44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db46:	2b00      	cmp	r3, #0
 800db48:	d05b      	beq.n	800dc02 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	695b      	ldr	r3, [r3, #20]
 800db50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db54:	2b00      	cmp	r3, #0
 800db56:	d018      	beq.n	800db8a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db62:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db68:	1d1a      	adds	r2, r3, #4
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db74:	b29b      	uxth	r3, r3
 800db76:	3b04      	subs	r3, #4
 800db78:	b29a      	uxth	r2, r3
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800db88:	e03b      	b.n	800dc02 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	695b      	ldr	r3, [r3, #20]
 800db90:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800db94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db98:	d918      	bls.n	800dbcc <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db9e:	6a3a      	ldr	r2, [r7, #32]
 800dba0:	8812      	ldrh	r2, [r2, #0]
 800dba2:	b292      	uxth	r2, r2
 800dba4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbaa:	1c9a      	adds	r2, r3, #2
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	3b02      	subs	r3, #2
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dbca:	e01a      	b.n	800dc02 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbd8:	7812      	ldrb	r2, [r2, #0]
 800dbda:	b2d2      	uxtb	r2, r2
 800dbdc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbe2:	1c5a      	adds	r2, r3, #1
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc00:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc02:	f7f6 f94f 	bl	8003ea4 <HAL_GetTick>
 800dc06:	4602      	mov	r2, r0
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	1ad3      	subs	r3, r2, r3
 800dc0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d803      	bhi.n	800dc1a <HAL_SPI_TransmitReceive+0x542>
 800dc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc18:	d102      	bne.n	800dc20 <HAL_SPI_TransmitReceive+0x548>
 800dc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d114      	bne.n	800dc4a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f000 f853 	bl	800dccc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2201      	movs	r2, #1
 800dc42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	e02e      	b.n	800dca8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dc4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f47f af10 	bne.w	800da72 <HAL_SPI_TransmitReceive+0x39a>
 800dc52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	f47f af0c 	bne.w	800da72 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800dc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	2200      	movs	r2, #0
 800dc62:	2108      	movs	r1, #8
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f000 f8d1 	bl	800de0c <SPI_WaitOnFlagUntilTimeout>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d007      	beq.n	800dc80 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc76:	f043 0220 	orr.w	r2, r3, #32
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f000 f823 	bl	800dccc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2201      	movs	r2, #1
 800dc92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d001      	beq.n	800dca4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e001      	b.n	800dca8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800dca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3730      	adds	r7, #48	; 0x30
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcbe:	b2db      	uxtb	r3, r3
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	695b      	ldr	r3, [r3, #20]
 800dcda:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	699a      	ldr	r2, [r3, #24]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f042 0208 	orr.w	r2, r2, #8
 800dcea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	699a      	ldr	r2, [r3, #24]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f042 0210 	orr.w	r2, r2, #16
 800dcfa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f022 0201 	bic.w	r2, r2, #1
 800dd0a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6919      	ldr	r1, [r3, #16]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	4b3c      	ldr	r3, [pc, #240]	; (800de08 <SPI_CloseTransfer+0x13c>)
 800dd18:	400b      	ands	r3, r1
 800dd1a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	689a      	ldr	r2, [r3, #8]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800dd2a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b04      	cmp	r3, #4
 800dd36:	d014      	beq.n	800dd62 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f003 0320 	and.w	r3, r3, #32
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00f      	beq.n	800dd62 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	699a      	ldr	r2, [r3, #24]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f042 0220 	orr.w	r2, r2, #32
 800dd60:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	2b03      	cmp	r3, #3
 800dd6c:	d014      	beq.n	800dd98 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00f      	beq.n	800dd98 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd7e:	f043 0204 	orr.w	r2, r3, #4
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	699a      	ldr	r2, [r3, #24]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd96:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00f      	beq.n	800ddc2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dda8:	f043 0201 	orr.w	r2, r3, #1
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	699a      	ldr	r2, [r3, #24]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddc0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00f      	beq.n	800ddec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddd2:	f043 0208 	orr.w	r2, r3, #8
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	699a      	ldr	r2, [r3, #24]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ddea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ddfc:	bf00      	nop
 800ddfe:	3714      	adds	r7, #20
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr
 800de08:	fffffc90 	.word	0xfffffc90

0800de0c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	603b      	str	r3, [r7, #0]
 800de18:	4613      	mov	r3, r2
 800de1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800de1c:	e010      	b.n	800de40 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de1e:	f7f6 f841 	bl	8003ea4 <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	69ba      	ldr	r2, [r7, #24]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d803      	bhi.n	800de36 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de34:	d102      	bne.n	800de3c <SPI_WaitOnFlagUntilTimeout+0x30>
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d101      	bne.n	800de40 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800de3c:	2303      	movs	r3, #3
 800de3e:	e00f      	b.n	800de60 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	695a      	ldr	r2, [r3, #20]
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	4013      	ands	r3, r2
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	bf0c      	ite	eq
 800de50:	2301      	moveq	r3, #1
 800de52:	2300      	movne	r3, #0
 800de54:	b2db      	uxtb	r3, r3
 800de56:	461a      	mov	r2, r3
 800de58:	79fb      	ldrb	r3, [r7, #7]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d0df      	beq.n	800de1e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de74:	095b      	lsrs	r3, r3, #5
 800de76:	3301      	adds	r3, #1
 800de78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	3301      	adds	r3, #1
 800de80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	3307      	adds	r3, #7
 800de86:	08db      	lsrs	r3, r3, #3
 800de88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	fb02 f303 	mul.w	r3, r2, r3
}
 800de92:	4618      	mov	r0, r3
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
	...

0800dea0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	e03e      	b.n	800df34 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800debc:	b2db      	uxtb	r3, r3
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f7f3 f982 	bl	80011d4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	3308      	adds	r3, #8
 800ded8:	4619      	mov	r1, r3
 800deda:	4610      	mov	r0, r2
 800dedc:	f002 fce4 	bl	80108a8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6818      	ldr	r0, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	461a      	mov	r2, r3
 800deea:	68b9      	ldr	r1, [r7, #8]
 800deec:	f002 fd6c 	bl	80109c8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6858      	ldr	r0, [r3, #4]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	689a      	ldr	r2, [r3, #8]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defc:	6879      	ldr	r1, [r7, #4]
 800defe:	f002 fdb3 	bl	8010a68 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	6892      	ldr	r2, [r2, #8]
 800df0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	6892      	ldr	r2, [r2, #8]
 800df16:	f041 0101 	orr.w	r1, r1, #1
 800df1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800df1e:	4b07      	ldr	r3, [pc, #28]	; (800df3c <HAL_SRAM_Init+0x9c>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a06      	ldr	r2, [pc, #24]	; (800df3c <HAL_SRAM_Init+0x9c>)
 800df24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df28:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2201      	movs	r2, #1
 800df2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	52004000 	.word	0x52004000

0800df40 <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800df40:	b480      	push	{r7}
 800df42:	b089      	sub	sp, #36	; 0x24
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
 800df4c:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d12b      	bne.n	800dfba <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d101      	bne.n	800df70 <HAL_SRAM_Write_8b+0x30>
 800df6c:	2302      	movs	r3, #2
 800df6e:	e025      	b.n	800dfbc <HAL_SRAM_Write_8b+0x7c>
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2201      	movs	r2, #1
 800df74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2202      	movs	r2, #2
 800df7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	61fb      	str	r3, [r7, #28]
 800df84:	e00c      	b.n	800dfa0 <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	781a      	ldrb	r2, [r3, #0]
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	3301      	adds	r3, #1
 800df92:	617b      	str	r3, [r7, #20]
      psramaddress++;
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	3301      	adds	r3, #1
 800df98:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	61fb      	str	r3, [r7, #28]
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1ef      	bne.n	800df86 <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e000      	b.n	800dfbc <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3724      	adds	r7, #36	; 0x24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d101      	bne.n	800dfda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e049      	b.n	800e06e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d106      	bne.n	800dff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7f5 faf6 	bl	80035e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2202      	movs	r2, #2
 800dff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3304      	adds	r3, #4
 800e004:	4619      	mov	r1, r3
 800e006:	4610      	mov	r0, r2
 800e008:	f000 fe18 	bl	800ec3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2201      	movs	r2, #1
 800e068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b082      	sub	sp, #8
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800e084:	2301      	movs	r3, #1
 800e086:	e049      	b.n	800e11c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b00      	cmp	r3, #0
 800e092:	d106      	bne.n	800e0a2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 f841 	bl	800e124 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2202      	movs	r2, #2
 800e0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	f000 fdc1 	bl	800ec3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e11a:	2300      	movs	r3, #0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3708      	adds	r7, #8
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d109      	bne.n	800e15c <HAL_TIM_OC_Start+0x24>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	2b01      	cmp	r3, #1
 800e152:	bf14      	ite	ne
 800e154:	2301      	movne	r3, #1
 800e156:	2300      	moveq	r3, #0
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	e03c      	b.n	800e1d6 <HAL_TIM_OC_Start+0x9e>
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b04      	cmp	r3, #4
 800e160:	d109      	bne.n	800e176 <HAL_TIM_OC_Start+0x3e>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	bf14      	ite	ne
 800e16e:	2301      	movne	r3, #1
 800e170:	2300      	moveq	r3, #0
 800e172:	b2db      	uxtb	r3, r3
 800e174:	e02f      	b.n	800e1d6 <HAL_TIM_OC_Start+0x9e>
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	2b08      	cmp	r3, #8
 800e17a:	d109      	bne.n	800e190 <HAL_TIM_OC_Start+0x58>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e182:	b2db      	uxtb	r3, r3
 800e184:	2b01      	cmp	r3, #1
 800e186:	bf14      	ite	ne
 800e188:	2301      	movne	r3, #1
 800e18a:	2300      	moveq	r3, #0
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	e022      	b.n	800e1d6 <HAL_TIM_OC_Start+0x9e>
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	2b0c      	cmp	r3, #12
 800e194:	d109      	bne.n	800e1aa <HAL_TIM_OC_Start+0x72>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	bf14      	ite	ne
 800e1a2:	2301      	movne	r3, #1
 800e1a4:	2300      	moveq	r3, #0
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	e015      	b.n	800e1d6 <HAL_TIM_OC_Start+0x9e>
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	2b10      	cmp	r3, #16
 800e1ae:	d109      	bne.n	800e1c4 <HAL_TIM_OC_Start+0x8c>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	bf14      	ite	ne
 800e1bc:	2301      	movne	r3, #1
 800e1be:	2300      	moveq	r3, #0
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	e008      	b.n	800e1d6 <HAL_TIM_OC_Start+0x9e>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	bf14      	ite	ne
 800e1d0:	2301      	movne	r3, #1
 800e1d2:	2300      	moveq	r3, #0
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	e09c      	b.n	800e318 <HAL_TIM_OC_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d104      	bne.n	800e1ee <HAL_TIM_OC_Start+0xb6>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1ec:	e023      	b.n	800e236 <HAL_TIM_OC_Start+0xfe>
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	2b04      	cmp	r3, #4
 800e1f2:	d104      	bne.n	800e1fe <HAL_TIM_OC_Start+0xc6>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2202      	movs	r2, #2
 800e1f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e1fc:	e01b      	b.n	800e236 <HAL_TIM_OC_Start+0xfe>
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	2b08      	cmp	r3, #8
 800e202:	d104      	bne.n	800e20e <HAL_TIM_OC_Start+0xd6>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2202      	movs	r2, #2
 800e208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e20c:	e013      	b.n	800e236 <HAL_TIM_OC_Start+0xfe>
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	2b0c      	cmp	r3, #12
 800e212:	d104      	bne.n	800e21e <HAL_TIM_OC_Start+0xe6>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2202      	movs	r2, #2
 800e218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e21c:	e00b      	b.n	800e236 <HAL_TIM_OC_Start+0xfe>
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	2b10      	cmp	r3, #16
 800e222:	d104      	bne.n	800e22e <HAL_TIM_OC_Start+0xf6>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2202      	movs	r2, #2
 800e228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e22c:	e003      	b.n	800e236 <HAL_TIM_OC_Start+0xfe>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2202      	movs	r2, #2
 800e232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2201      	movs	r2, #1
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	4618      	mov	r0, r3
 800e240:	f001 f9c9 	bl	800f5d6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a35      	ldr	r2, [pc, #212]	; (800e320 <HAL_TIM_OC_Start+0x1e8>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d013      	beq.n	800e276 <HAL_TIM_OC_Start+0x13e>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a34      	ldr	r2, [pc, #208]	; (800e324 <HAL_TIM_OC_Start+0x1ec>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d00e      	beq.n	800e276 <HAL_TIM_OC_Start+0x13e>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a32      	ldr	r2, [pc, #200]	; (800e328 <HAL_TIM_OC_Start+0x1f0>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d009      	beq.n	800e276 <HAL_TIM_OC_Start+0x13e>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a31      	ldr	r2, [pc, #196]	; (800e32c <HAL_TIM_OC_Start+0x1f4>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d004      	beq.n	800e276 <HAL_TIM_OC_Start+0x13e>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a2f      	ldr	r2, [pc, #188]	; (800e330 <HAL_TIM_OC_Start+0x1f8>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d101      	bne.n	800e27a <HAL_TIM_OC_Start+0x142>
 800e276:	2301      	movs	r3, #1
 800e278:	e000      	b.n	800e27c <HAL_TIM_OC_Start+0x144>
 800e27a:	2300      	movs	r3, #0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d007      	beq.n	800e290 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e28e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a22      	ldr	r2, [pc, #136]	; (800e320 <HAL_TIM_OC_Start+0x1e8>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d01d      	beq.n	800e2d6 <HAL_TIM_OC_Start+0x19e>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2a2:	d018      	beq.n	800e2d6 <HAL_TIM_OC_Start+0x19e>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a22      	ldr	r2, [pc, #136]	; (800e334 <HAL_TIM_OC_Start+0x1fc>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d013      	beq.n	800e2d6 <HAL_TIM_OC_Start+0x19e>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4a21      	ldr	r2, [pc, #132]	; (800e338 <HAL_TIM_OC_Start+0x200>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d00e      	beq.n	800e2d6 <HAL_TIM_OC_Start+0x19e>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a1f      	ldr	r2, [pc, #124]	; (800e33c <HAL_TIM_OC_Start+0x204>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d009      	beq.n	800e2d6 <HAL_TIM_OC_Start+0x19e>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4a17      	ldr	r2, [pc, #92]	; (800e324 <HAL_TIM_OC_Start+0x1ec>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d004      	beq.n	800e2d6 <HAL_TIM_OC_Start+0x19e>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a1b      	ldr	r2, [pc, #108]	; (800e340 <HAL_TIM_OC_Start+0x208>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d115      	bne.n	800e302 <HAL_TIM_OC_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	689a      	ldr	r2, [r3, #8]
 800e2dc:	4b19      	ldr	r3, [pc, #100]	; (800e344 <HAL_TIM_OC_Start+0x20c>)
 800e2de:	4013      	ands	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b06      	cmp	r3, #6
 800e2e6:	d015      	beq.n	800e314 <HAL_TIM_OC_Start+0x1dc>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2ee:	d011      	beq.n	800e314 <HAL_TIM_OC_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f042 0201 	orr.w	r2, r2, #1
 800e2fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e300:	e008      	b.n	800e314 <HAL_TIM_OC_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f042 0201 	orr.w	r2, r2, #1
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	e000      	b.n	800e316 <HAL_TIM_OC_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	40010000 	.word	0x40010000
 800e324:	40010400 	.word	0x40010400
 800e328:	40014000 	.word	0x40014000
 800e32c:	40014400 	.word	0x40014400
 800e330:	40014800 	.word	0x40014800
 800e334:	40000400 	.word	0x40000400
 800e338:	40000800 	.word	0x40000800
 800e33c:	40000c00 	.word	0x40000c00
 800e340:	40001800 	.word	0x40001800
 800e344:	00010007 	.word	0x00010007

0800e348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d101      	bne.n	800e35a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e356:	2301      	movs	r3, #1
 800e358:	e049      	b.n	800e3ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d106      	bne.n	800e374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7f5 f8fe 	bl	8003570 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2202      	movs	r2, #2
 800e378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	3304      	adds	r3, #4
 800e384:	4619      	mov	r1, r3
 800e386:	4610      	mov	r0, r2
 800e388:	f000 fc58 	bl	800ec3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
	...

0800e3f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d109      	bne.n	800e41c <HAL_TIM_PWM_Start+0x24>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2b01      	cmp	r3, #1
 800e412:	bf14      	ite	ne
 800e414:	2301      	movne	r3, #1
 800e416:	2300      	moveq	r3, #0
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	e03c      	b.n	800e496 <HAL_TIM_PWM_Start+0x9e>
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2b04      	cmp	r3, #4
 800e420:	d109      	bne.n	800e436 <HAL_TIM_PWM_Start+0x3e>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	bf14      	ite	ne
 800e42e:	2301      	movne	r3, #1
 800e430:	2300      	moveq	r3, #0
 800e432:	b2db      	uxtb	r3, r3
 800e434:	e02f      	b.n	800e496 <HAL_TIM_PWM_Start+0x9e>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b08      	cmp	r3, #8
 800e43a:	d109      	bne.n	800e450 <HAL_TIM_PWM_Start+0x58>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b01      	cmp	r3, #1
 800e446:	bf14      	ite	ne
 800e448:	2301      	movne	r3, #1
 800e44a:	2300      	moveq	r3, #0
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	e022      	b.n	800e496 <HAL_TIM_PWM_Start+0x9e>
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	2b0c      	cmp	r3, #12
 800e454:	d109      	bne.n	800e46a <HAL_TIM_PWM_Start+0x72>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b01      	cmp	r3, #1
 800e460:	bf14      	ite	ne
 800e462:	2301      	movne	r3, #1
 800e464:	2300      	moveq	r3, #0
 800e466:	b2db      	uxtb	r3, r3
 800e468:	e015      	b.n	800e496 <HAL_TIM_PWM_Start+0x9e>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b10      	cmp	r3, #16
 800e46e:	d109      	bne.n	800e484 <HAL_TIM_PWM_Start+0x8c>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b01      	cmp	r3, #1
 800e47a:	bf14      	ite	ne
 800e47c:	2301      	movne	r3, #1
 800e47e:	2300      	moveq	r3, #0
 800e480:	b2db      	uxtb	r3, r3
 800e482:	e008      	b.n	800e496 <HAL_TIM_PWM_Start+0x9e>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	bf14      	ite	ne
 800e490:	2301      	movne	r3, #1
 800e492:	2300      	moveq	r3, #0
 800e494:	b2db      	uxtb	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e49a:	2301      	movs	r3, #1
 800e49c:	e09c      	b.n	800e5d8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d104      	bne.n	800e4ae <HAL_TIM_PWM_Start+0xb6>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4ac:	e023      	b.n	800e4f6 <HAL_TIM_PWM_Start+0xfe>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d104      	bne.n	800e4be <HAL_TIM_PWM_Start+0xc6>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2202      	movs	r2, #2
 800e4b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4bc:	e01b      	b.n	800e4f6 <HAL_TIM_PWM_Start+0xfe>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b08      	cmp	r3, #8
 800e4c2:	d104      	bne.n	800e4ce <HAL_TIM_PWM_Start+0xd6>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4cc:	e013      	b.n	800e4f6 <HAL_TIM_PWM_Start+0xfe>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b0c      	cmp	r3, #12
 800e4d2:	d104      	bne.n	800e4de <HAL_TIM_PWM_Start+0xe6>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e4dc:	e00b      	b.n	800e4f6 <HAL_TIM_PWM_Start+0xfe>
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	2b10      	cmp	r3, #16
 800e4e2:	d104      	bne.n	800e4ee <HAL_TIM_PWM_Start+0xf6>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4ec:	e003      	b.n	800e4f6 <HAL_TIM_PWM_Start+0xfe>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2202      	movs	r2, #2
 800e4f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	6839      	ldr	r1, [r7, #0]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f001 f869 	bl	800f5d6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a35      	ldr	r2, [pc, #212]	; (800e5e0 <HAL_TIM_PWM_Start+0x1e8>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d013      	beq.n	800e536 <HAL_TIM_PWM_Start+0x13e>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a34      	ldr	r2, [pc, #208]	; (800e5e4 <HAL_TIM_PWM_Start+0x1ec>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d00e      	beq.n	800e536 <HAL_TIM_PWM_Start+0x13e>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a32      	ldr	r2, [pc, #200]	; (800e5e8 <HAL_TIM_PWM_Start+0x1f0>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d009      	beq.n	800e536 <HAL_TIM_PWM_Start+0x13e>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a31      	ldr	r2, [pc, #196]	; (800e5ec <HAL_TIM_PWM_Start+0x1f4>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d004      	beq.n	800e536 <HAL_TIM_PWM_Start+0x13e>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a2f      	ldr	r2, [pc, #188]	; (800e5f0 <HAL_TIM_PWM_Start+0x1f8>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d101      	bne.n	800e53a <HAL_TIM_PWM_Start+0x142>
 800e536:	2301      	movs	r3, #1
 800e538:	e000      	b.n	800e53c <HAL_TIM_PWM_Start+0x144>
 800e53a:	2300      	movs	r3, #0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d007      	beq.n	800e550 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e54e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a22      	ldr	r2, [pc, #136]	; (800e5e0 <HAL_TIM_PWM_Start+0x1e8>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d01d      	beq.n	800e596 <HAL_TIM_PWM_Start+0x19e>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e562:	d018      	beq.n	800e596 <HAL_TIM_PWM_Start+0x19e>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a22      	ldr	r2, [pc, #136]	; (800e5f4 <HAL_TIM_PWM_Start+0x1fc>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d013      	beq.n	800e596 <HAL_TIM_PWM_Start+0x19e>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a21      	ldr	r2, [pc, #132]	; (800e5f8 <HAL_TIM_PWM_Start+0x200>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d00e      	beq.n	800e596 <HAL_TIM_PWM_Start+0x19e>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a1f      	ldr	r2, [pc, #124]	; (800e5fc <HAL_TIM_PWM_Start+0x204>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d009      	beq.n	800e596 <HAL_TIM_PWM_Start+0x19e>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a17      	ldr	r2, [pc, #92]	; (800e5e4 <HAL_TIM_PWM_Start+0x1ec>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d004      	beq.n	800e596 <HAL_TIM_PWM_Start+0x19e>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a1b      	ldr	r2, [pc, #108]	; (800e600 <HAL_TIM_PWM_Start+0x208>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d115      	bne.n	800e5c2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	689a      	ldr	r2, [r3, #8]
 800e59c:	4b19      	ldr	r3, [pc, #100]	; (800e604 <HAL_TIM_PWM_Start+0x20c>)
 800e59e:	4013      	ands	r3, r2
 800e5a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2b06      	cmp	r3, #6
 800e5a6:	d015      	beq.n	800e5d4 <HAL_TIM_PWM_Start+0x1dc>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5ae:	d011      	beq.n	800e5d4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f042 0201 	orr.w	r2, r2, #1
 800e5be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5c0:	e008      	b.n	800e5d4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f042 0201 	orr.w	r2, r2, #1
 800e5d0:	601a      	str	r2, [r3, #0]
 800e5d2:	e000      	b.n	800e5d6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e5d6:	2300      	movs	r3, #0
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3710      	adds	r7, #16
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	40010000 	.word	0x40010000
 800e5e4:	40010400 	.word	0x40010400
 800e5e8:	40014000 	.word	0x40014000
 800e5ec:	40014400 	.word	0x40014400
 800e5f0:	40014800 	.word	0x40014800
 800e5f4:	40000400 	.word	0x40000400
 800e5f8:	40000800 	.word	0x40000800
 800e5fc:	40000c00 	.word	0x40000c00
 800e600:	40001800 	.word	0x40001800
 800e604:	00010007 	.word	0x00010007

0800e608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	f003 0302 	and.w	r3, r3, #2
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d122      	bne.n	800e664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	f003 0302 	and.w	r3, r3, #2
 800e628:	2b02      	cmp	r3, #2
 800e62a:	d11b      	bne.n	800e664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f06f 0202 	mvn.w	r2, #2
 800e634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	699b      	ldr	r3, [r3, #24]
 800e642:	f003 0303 	and.w	r3, r3, #3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fad8 	bl	800ec00 <HAL_TIM_IC_CaptureCallback>
 800e650:	e005      	b.n	800e65e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 faca 	bl	800ebec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fadb 	bl	800ec14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	691b      	ldr	r3, [r3, #16]
 800e66a:	f003 0304 	and.w	r3, r3, #4
 800e66e:	2b04      	cmp	r3, #4
 800e670:	d122      	bne.n	800e6b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	f003 0304 	and.w	r3, r3, #4
 800e67c:	2b04      	cmp	r3, #4
 800e67e:	d11b      	bne.n	800e6b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f06f 0204 	mvn.w	r2, #4
 800e688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2202      	movs	r2, #2
 800e68e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	699b      	ldr	r3, [r3, #24]
 800e696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d003      	beq.n	800e6a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 faae 	bl	800ec00 <HAL_TIM_IC_CaptureCallback>
 800e6a4:	e005      	b.n	800e6b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 faa0 	bl	800ebec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 fab1 	bl	800ec14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	f003 0308 	and.w	r3, r3, #8
 800e6c2:	2b08      	cmp	r3, #8
 800e6c4:	d122      	bne.n	800e70c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	f003 0308 	and.w	r3, r3, #8
 800e6d0:	2b08      	cmp	r3, #8
 800e6d2:	d11b      	bne.n	800e70c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f06f 0208 	mvn.w	r2, #8
 800e6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2204      	movs	r2, #4
 800e6e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	69db      	ldr	r3, [r3, #28]
 800e6ea:	f003 0303 	and.w	r3, r3, #3
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d003      	beq.n	800e6fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 fa84 	bl	800ec00 <HAL_TIM_IC_CaptureCallback>
 800e6f8:	e005      	b.n	800e706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 fa76 	bl	800ebec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 fa87 	bl	800ec14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	f003 0310 	and.w	r3, r3, #16
 800e716:	2b10      	cmp	r3, #16
 800e718:	d122      	bne.n	800e760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	f003 0310 	and.w	r3, r3, #16
 800e724:	2b10      	cmp	r3, #16
 800e726:	d11b      	bne.n	800e760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f06f 0210 	mvn.w	r2, #16
 800e730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2208      	movs	r2, #8
 800e736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	69db      	ldr	r3, [r3, #28]
 800e73e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e742:	2b00      	cmp	r3, #0
 800e744:	d003      	beq.n	800e74e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 fa5a 	bl	800ec00 <HAL_TIM_IC_CaptureCallback>
 800e74c:	e005      	b.n	800e75a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 fa4c 	bl	800ebec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 fa5d 	bl	800ec14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2200      	movs	r2, #0
 800e75e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	f003 0301 	and.w	r3, r3, #1
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d10e      	bne.n	800e78c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	f003 0301 	and.w	r3, r3, #1
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d107      	bne.n	800e78c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f06f 0201 	mvn.w	r2, #1
 800e784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 fa26 	bl	800ebd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e796:	2b80      	cmp	r3, #128	; 0x80
 800e798:	d10e      	bne.n	800e7b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7a4:	2b80      	cmp	r3, #128	; 0x80
 800e7a6:	d107      	bne.n	800e7b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e7b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f001 f844 	bl	800f840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7c6:	d10e      	bne.n	800e7e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7d2:	2b80      	cmp	r3, #128	; 0x80
 800e7d4:	d107      	bne.n	800e7e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f001 f837 	bl	800f854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7f0:	2b40      	cmp	r3, #64	; 0x40
 800e7f2:	d10e      	bne.n	800e812 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7fe:	2b40      	cmp	r3, #64	; 0x40
 800e800:	d107      	bne.n	800e812 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 fa0b 	bl	800ec28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	f003 0320 	and.w	r3, r3, #32
 800e81c:	2b20      	cmp	r3, #32
 800e81e:	d10e      	bne.n	800e83e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	f003 0320 	and.w	r3, r3, #32
 800e82a:	2b20      	cmp	r3, #32
 800e82c:	d107      	bne.n	800e83e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f06f 0220 	mvn.w	r2, #32
 800e836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 fff7 	bl	800f82c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e83e:	bf00      	nop
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
	...

0800e848 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d101      	bne.n	800e862 <HAL_TIM_OC_ConfigChannel+0x1a>
 800e85e:	2302      	movs	r3, #2
 800e860:	e064      	b.n	800e92c <HAL_TIM_OC_ConfigChannel+0xe4>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2201      	movs	r2, #1
 800e866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b14      	cmp	r3, #20
 800e86e:	d857      	bhi.n	800e920 <HAL_TIM_OC_ConfigChannel+0xd8>
 800e870:	a201      	add	r2, pc, #4	; (adr r2, 800e878 <HAL_TIM_OC_ConfigChannel+0x30>)
 800e872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e876:	bf00      	nop
 800e878:	0800e8cd 	.word	0x0800e8cd
 800e87c:	0800e921 	.word	0x0800e921
 800e880:	0800e921 	.word	0x0800e921
 800e884:	0800e921 	.word	0x0800e921
 800e888:	0800e8db 	.word	0x0800e8db
 800e88c:	0800e921 	.word	0x0800e921
 800e890:	0800e921 	.word	0x0800e921
 800e894:	0800e921 	.word	0x0800e921
 800e898:	0800e8e9 	.word	0x0800e8e9
 800e89c:	0800e921 	.word	0x0800e921
 800e8a0:	0800e921 	.word	0x0800e921
 800e8a4:	0800e921 	.word	0x0800e921
 800e8a8:	0800e8f7 	.word	0x0800e8f7
 800e8ac:	0800e921 	.word	0x0800e921
 800e8b0:	0800e921 	.word	0x0800e921
 800e8b4:	0800e921 	.word	0x0800e921
 800e8b8:	0800e905 	.word	0x0800e905
 800e8bc:	0800e921 	.word	0x0800e921
 800e8c0:	0800e921 	.word	0x0800e921
 800e8c4:	0800e921 	.word	0x0800e921
 800e8c8:	0800e913 	.word	0x0800e913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fa4c 	bl	800ed70 <TIM_OC1_SetConfig>
      break;
 800e8d8:	e023      	b.n	800e922 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68b9      	ldr	r1, [r7, #8]
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f000 fad5 	bl	800ee90 <TIM_OC2_SetConfig>
      break;
 800e8e6:	e01c      	b.n	800e922 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68b9      	ldr	r1, [r7, #8]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 fb58 	bl	800efa4 <TIM_OC3_SetConfig>
      break;
 800e8f4:	e015      	b.n	800e922 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	68b9      	ldr	r1, [r7, #8]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f000 fbd7 	bl	800f0b0 <TIM_OC4_SetConfig>
      break;
 800e902:	e00e      	b.n	800e922 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68b9      	ldr	r1, [r7, #8]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f000 fc38 	bl	800f180 <TIM_OC5_SetConfig>
      break;
 800e910:	e007      	b.n	800e922 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	68b9      	ldr	r1, [r7, #8]
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 fc93 	bl	800f244 <TIM_OC6_SetConfig>
      break;
 800e91e:	e000      	b.n	800e922 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 800e920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e946:	2b01      	cmp	r3, #1
 800e948:	d101      	bne.n	800e94e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e94a:	2302      	movs	r3, #2
 800e94c:	e0fd      	b.n	800eb4a <HAL_TIM_PWM_ConfigChannel+0x216>
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2201      	movs	r2, #1
 800e952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2b14      	cmp	r3, #20
 800e95a:	f200 80f0 	bhi.w	800eb3e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e95e:	a201      	add	r2, pc, #4	; (adr r2, 800e964 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e964:	0800e9b9 	.word	0x0800e9b9
 800e968:	0800eb3f 	.word	0x0800eb3f
 800e96c:	0800eb3f 	.word	0x0800eb3f
 800e970:	0800eb3f 	.word	0x0800eb3f
 800e974:	0800e9f9 	.word	0x0800e9f9
 800e978:	0800eb3f 	.word	0x0800eb3f
 800e97c:	0800eb3f 	.word	0x0800eb3f
 800e980:	0800eb3f 	.word	0x0800eb3f
 800e984:	0800ea3b 	.word	0x0800ea3b
 800e988:	0800eb3f 	.word	0x0800eb3f
 800e98c:	0800eb3f 	.word	0x0800eb3f
 800e990:	0800eb3f 	.word	0x0800eb3f
 800e994:	0800ea7b 	.word	0x0800ea7b
 800e998:	0800eb3f 	.word	0x0800eb3f
 800e99c:	0800eb3f 	.word	0x0800eb3f
 800e9a0:	0800eb3f 	.word	0x0800eb3f
 800e9a4:	0800eabd 	.word	0x0800eabd
 800e9a8:	0800eb3f 	.word	0x0800eb3f
 800e9ac:	0800eb3f 	.word	0x0800eb3f
 800e9b0:	0800eb3f 	.word	0x0800eb3f
 800e9b4:	0800eafd 	.word	0x0800eafd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68b9      	ldr	r1, [r7, #8]
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f000 f9d6 	bl	800ed70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	699a      	ldr	r2, [r3, #24]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f042 0208 	orr.w	r2, r2, #8
 800e9d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	699a      	ldr	r2, [r3, #24]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f022 0204 	bic.w	r2, r2, #4
 800e9e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	6999      	ldr	r1, [r3, #24]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	691a      	ldr	r2, [r3, #16]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	430a      	orrs	r2, r1
 800e9f4:	619a      	str	r2, [r3, #24]
      break;
 800e9f6:	e0a3      	b.n	800eb40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	68b9      	ldr	r1, [r7, #8]
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f000 fa46 	bl	800ee90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	699a      	ldr	r2, [r3, #24]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	699a      	ldr	r2, [r3, #24]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	6999      	ldr	r1, [r3, #24]
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	021a      	lsls	r2, r3, #8
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	430a      	orrs	r2, r1
 800ea36:	619a      	str	r2, [r3, #24]
      break;
 800ea38:	e082      	b.n	800eb40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68b9      	ldr	r1, [r7, #8]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f000 faaf 	bl	800efa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	69da      	ldr	r2, [r3, #28]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f042 0208 	orr.w	r2, r2, #8
 800ea54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	69da      	ldr	r2, [r3, #28]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f022 0204 	bic.w	r2, r2, #4
 800ea64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	69d9      	ldr	r1, [r3, #28]
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	691a      	ldr	r2, [r3, #16]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	430a      	orrs	r2, r1
 800ea76:	61da      	str	r2, [r3, #28]
      break;
 800ea78:	e062      	b.n	800eb40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	68b9      	ldr	r1, [r7, #8]
 800ea80:	4618      	mov	r0, r3
 800ea82:	f000 fb15 	bl	800f0b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	69da      	ldr	r2, [r3, #28]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	69da      	ldr	r2, [r3, #28]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eaa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	69d9      	ldr	r1, [r3, #28]
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	021a      	lsls	r2, r3, #8
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	430a      	orrs	r2, r1
 800eab8:	61da      	str	r2, [r3, #28]
      break;
 800eaba:	e041      	b.n	800eb40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	68b9      	ldr	r1, [r7, #8]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 fb5c 	bl	800f180 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f042 0208 	orr.w	r2, r2, #8
 800ead6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f022 0204 	bic.w	r2, r2, #4
 800eae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	691a      	ldr	r2, [r3, #16]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	430a      	orrs	r2, r1
 800eaf8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eafa:	e021      	b.n	800eb40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68b9      	ldr	r1, [r7, #8]
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 fb9e 	bl	800f244 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	691b      	ldr	r3, [r3, #16]
 800eb32:	021a      	lsls	r2, r3, #8
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	430a      	orrs	r2, r1
 800eb3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eb3c:	e000      	b.n	800eb40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800eb3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop

0800eb54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d101      	bne.n	800eb6c <HAL_TIM_SlaveConfigSynchro+0x18>
 800eb68:	2302      	movs	r3, #2
 800eb6a:	e031      	b.n	800ebd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2202      	movs	r2, #2
 800eb78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800eb7c:	6839      	ldr	r1, [r7, #0]
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fbc4 	bl	800f30c <TIM_SlaveTimer_SetConfig>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d009      	beq.n	800eb9e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e018      	b.n	800ebd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	68da      	ldr	r2, [r3, #12]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	68da      	ldr	r2, [r3, #12]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ebbc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ebf4:	bf00      	nop
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec08:	bf00      	nop
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b085      	sub	sp, #20
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4a40      	ldr	r2, [pc, #256]	; (800ed50 <TIM_Base_SetConfig+0x114>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d013      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec5a:	d00f      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4a3d      	ldr	r2, [pc, #244]	; (800ed54 <TIM_Base_SetConfig+0x118>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d00b      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4a3c      	ldr	r2, [pc, #240]	; (800ed58 <TIM_Base_SetConfig+0x11c>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d007      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	4a3b      	ldr	r2, [pc, #236]	; (800ed5c <TIM_Base_SetConfig+0x120>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d003      	beq.n	800ec7c <TIM_Base_SetConfig+0x40>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4a3a      	ldr	r2, [pc, #232]	; (800ed60 <TIM_Base_SetConfig+0x124>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d108      	bne.n	800ec8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	68fa      	ldr	r2, [r7, #12]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	4a2f      	ldr	r2, [pc, #188]	; (800ed50 <TIM_Base_SetConfig+0x114>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d01f      	beq.n	800ecd6 <TIM_Base_SetConfig+0x9a>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec9c:	d01b      	beq.n	800ecd6 <TIM_Base_SetConfig+0x9a>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a2c      	ldr	r2, [pc, #176]	; (800ed54 <TIM_Base_SetConfig+0x118>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d017      	beq.n	800ecd6 <TIM_Base_SetConfig+0x9a>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4a2b      	ldr	r2, [pc, #172]	; (800ed58 <TIM_Base_SetConfig+0x11c>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d013      	beq.n	800ecd6 <TIM_Base_SetConfig+0x9a>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4a2a      	ldr	r2, [pc, #168]	; (800ed5c <TIM_Base_SetConfig+0x120>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d00f      	beq.n	800ecd6 <TIM_Base_SetConfig+0x9a>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a29      	ldr	r2, [pc, #164]	; (800ed60 <TIM_Base_SetConfig+0x124>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d00b      	beq.n	800ecd6 <TIM_Base_SetConfig+0x9a>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a28      	ldr	r2, [pc, #160]	; (800ed64 <TIM_Base_SetConfig+0x128>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d007      	beq.n	800ecd6 <TIM_Base_SetConfig+0x9a>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4a27      	ldr	r2, [pc, #156]	; (800ed68 <TIM_Base_SetConfig+0x12c>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d003      	beq.n	800ecd6 <TIM_Base_SetConfig+0x9a>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4a26      	ldr	r2, [pc, #152]	; (800ed6c <TIM_Base_SetConfig+0x130>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d108      	bne.n	800ece8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ecdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	68fa      	ldr	r2, [r7, #12]
 800ece4:	4313      	orrs	r3, r2
 800ece6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	695b      	ldr	r3, [r3, #20]
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	68fa      	ldr	r2, [r7, #12]
 800ecfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	689a      	ldr	r2, [r3, #8]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a10      	ldr	r2, [pc, #64]	; (800ed50 <TIM_Base_SetConfig+0x114>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d00f      	beq.n	800ed34 <TIM_Base_SetConfig+0xf8>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4a12      	ldr	r2, [pc, #72]	; (800ed60 <TIM_Base_SetConfig+0x124>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d00b      	beq.n	800ed34 <TIM_Base_SetConfig+0xf8>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4a11      	ldr	r2, [pc, #68]	; (800ed64 <TIM_Base_SetConfig+0x128>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d007      	beq.n	800ed34 <TIM_Base_SetConfig+0xf8>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a10      	ldr	r2, [pc, #64]	; (800ed68 <TIM_Base_SetConfig+0x12c>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d003      	beq.n	800ed34 <TIM_Base_SetConfig+0xf8>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4a0f      	ldr	r2, [pc, #60]	; (800ed6c <TIM_Base_SetConfig+0x130>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d103      	bne.n	800ed3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	691a      	ldr	r2, [r3, #16]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	615a      	str	r2, [r3, #20]
}
 800ed42:	bf00      	nop
 800ed44:	3714      	adds	r7, #20
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	40010000 	.word	0x40010000
 800ed54:	40000400 	.word	0x40000400
 800ed58:	40000800 	.word	0x40000800
 800ed5c:	40000c00 	.word	0x40000c00
 800ed60:	40010400 	.word	0x40010400
 800ed64:	40014000 	.word	0x40014000
 800ed68:	40014400 	.word	0x40014400
 800ed6c:	40014800 	.word	0x40014800

0800ed70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b087      	sub	sp, #28
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a1b      	ldr	r3, [r3, #32]
 800ed7e:	f023 0201 	bic.w	r2, r3, #1
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a1b      	ldr	r3, [r3, #32]
 800ed8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	699b      	ldr	r3, [r3, #24]
 800ed96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	4b37      	ldr	r3, [pc, #220]	; (800ee78 <TIM_OC1_SetConfig+0x108>)
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f023 0303 	bic.w	r3, r3, #3
 800eda6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	4313      	orrs	r3, r2
 800edb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f023 0302 	bic.w	r3, r3, #2
 800edb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4a2d      	ldr	r2, [pc, #180]	; (800ee7c <TIM_OC1_SetConfig+0x10c>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d00f      	beq.n	800edec <TIM_OC1_SetConfig+0x7c>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a2c      	ldr	r2, [pc, #176]	; (800ee80 <TIM_OC1_SetConfig+0x110>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d00b      	beq.n	800edec <TIM_OC1_SetConfig+0x7c>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a2b      	ldr	r2, [pc, #172]	; (800ee84 <TIM_OC1_SetConfig+0x114>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d007      	beq.n	800edec <TIM_OC1_SetConfig+0x7c>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a2a      	ldr	r2, [pc, #168]	; (800ee88 <TIM_OC1_SetConfig+0x118>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d003      	beq.n	800edec <TIM_OC1_SetConfig+0x7c>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	4a29      	ldr	r2, [pc, #164]	; (800ee8c <TIM_OC1_SetConfig+0x11c>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d10c      	bne.n	800ee06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	f023 0308 	bic.w	r3, r3, #8
 800edf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	697a      	ldr	r2, [r7, #20]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	f023 0304 	bic.w	r3, r3, #4
 800ee04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4a1c      	ldr	r2, [pc, #112]	; (800ee7c <TIM_OC1_SetConfig+0x10c>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d00f      	beq.n	800ee2e <TIM_OC1_SetConfig+0xbe>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4a1b      	ldr	r2, [pc, #108]	; (800ee80 <TIM_OC1_SetConfig+0x110>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d00b      	beq.n	800ee2e <TIM_OC1_SetConfig+0xbe>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4a1a      	ldr	r2, [pc, #104]	; (800ee84 <TIM_OC1_SetConfig+0x114>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d007      	beq.n	800ee2e <TIM_OC1_SetConfig+0xbe>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4a19      	ldr	r2, [pc, #100]	; (800ee88 <TIM_OC1_SetConfig+0x118>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d003      	beq.n	800ee2e <TIM_OC1_SetConfig+0xbe>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4a18      	ldr	r2, [pc, #96]	; (800ee8c <TIM_OC1_SetConfig+0x11c>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d111      	bne.n	800ee52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ee3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	4313      	orrs	r3, r2
 800ee46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	699b      	ldr	r3, [r3, #24]
 800ee4c:	693a      	ldr	r2, [r7, #16]
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	693a      	ldr	r2, [r7, #16]
 800ee56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	685a      	ldr	r2, [r3, #4]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	697a      	ldr	r2, [r7, #20]
 800ee6a:	621a      	str	r2, [r3, #32]
}
 800ee6c:	bf00      	nop
 800ee6e:	371c      	adds	r7, #28
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr
 800ee78:	fffeff8f 	.word	0xfffeff8f
 800ee7c:	40010000 	.word	0x40010000
 800ee80:	40010400 	.word	0x40010400
 800ee84:	40014000 	.word	0x40014000
 800ee88:	40014400 	.word	0x40014400
 800ee8c:	40014800 	.word	0x40014800

0800ee90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b087      	sub	sp, #28
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a1b      	ldr	r3, [r3, #32]
 800ee9e:	f023 0210 	bic.w	r2, r3, #16
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	4b34      	ldr	r3, [pc, #208]	; (800ef8c <TIM_OC2_SetConfig+0xfc>)
 800eebc:	4013      	ands	r3, r2
 800eebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	021b      	lsls	r3, r3, #8
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	4313      	orrs	r3, r2
 800eed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	f023 0320 	bic.w	r3, r3, #32
 800eeda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	689b      	ldr	r3, [r3, #8]
 800eee0:	011b      	lsls	r3, r3, #4
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	4313      	orrs	r3, r2
 800eee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a29      	ldr	r2, [pc, #164]	; (800ef90 <TIM_OC2_SetConfig+0x100>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d003      	beq.n	800eef8 <TIM_OC2_SetConfig+0x68>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4a28      	ldr	r2, [pc, #160]	; (800ef94 <TIM_OC2_SetConfig+0x104>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d10d      	bne.n	800ef14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eefe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	011b      	lsls	r3, r3, #4
 800ef06:	697a      	ldr	r2, [r7, #20]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a1e      	ldr	r2, [pc, #120]	; (800ef90 <TIM_OC2_SetConfig+0x100>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d00f      	beq.n	800ef3c <TIM_OC2_SetConfig+0xac>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a1d      	ldr	r2, [pc, #116]	; (800ef94 <TIM_OC2_SetConfig+0x104>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d00b      	beq.n	800ef3c <TIM_OC2_SetConfig+0xac>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	4a1c      	ldr	r2, [pc, #112]	; (800ef98 <TIM_OC2_SetConfig+0x108>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d007      	beq.n	800ef3c <TIM_OC2_SetConfig+0xac>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4a1b      	ldr	r2, [pc, #108]	; (800ef9c <TIM_OC2_SetConfig+0x10c>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d003      	beq.n	800ef3c <TIM_OC2_SetConfig+0xac>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	4a1a      	ldr	r2, [pc, #104]	; (800efa0 <TIM_OC2_SetConfig+0x110>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d113      	bne.n	800ef64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	695b      	ldr	r3, [r3, #20]
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	693a      	ldr	r2, [r7, #16]
 800ef54:	4313      	orrs	r3, r2
 800ef56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	699b      	ldr	r3, [r3, #24]
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	693a      	ldr	r2, [r7, #16]
 800ef60:	4313      	orrs	r3, r2
 800ef62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	693a      	ldr	r2, [r7, #16]
 800ef68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	685a      	ldr	r2, [r3, #4]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	697a      	ldr	r2, [r7, #20]
 800ef7c:	621a      	str	r2, [r3, #32]
}
 800ef7e:	bf00      	nop
 800ef80:	371c      	adds	r7, #28
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	feff8fff 	.word	0xfeff8fff
 800ef90:	40010000 	.word	0x40010000
 800ef94:	40010400 	.word	0x40010400
 800ef98:	40014000 	.word	0x40014000
 800ef9c:	40014400 	.word	0x40014400
 800efa0:	40014800 	.word	0x40014800

0800efa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b087      	sub	sp, #28
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a1b      	ldr	r3, [r3, #32]
 800efb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6a1b      	ldr	r3, [r3, #32]
 800efbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	69db      	ldr	r3, [r3, #28]
 800efca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f023 0303 	bic.w	r3, r3, #3
 800efda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800efec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	021b      	lsls	r3, r3, #8
 800eff4:	697a      	ldr	r2, [r7, #20]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4a27      	ldr	r2, [pc, #156]	; (800f09c <TIM_OC3_SetConfig+0xf8>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d003      	beq.n	800f00a <TIM_OC3_SetConfig+0x66>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	4a26      	ldr	r2, [pc, #152]	; (800f0a0 <TIM_OC3_SetConfig+0xfc>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d10d      	bne.n	800f026 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	021b      	lsls	r3, r3, #8
 800f018:	697a      	ldr	r2, [r7, #20]
 800f01a:	4313      	orrs	r3, r2
 800f01c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a1c      	ldr	r2, [pc, #112]	; (800f09c <TIM_OC3_SetConfig+0xf8>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d00f      	beq.n	800f04e <TIM_OC3_SetConfig+0xaa>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4a1b      	ldr	r2, [pc, #108]	; (800f0a0 <TIM_OC3_SetConfig+0xfc>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d00b      	beq.n	800f04e <TIM_OC3_SetConfig+0xaa>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4a1a      	ldr	r2, [pc, #104]	; (800f0a4 <TIM_OC3_SetConfig+0x100>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d007      	beq.n	800f04e <TIM_OC3_SetConfig+0xaa>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a19      	ldr	r2, [pc, #100]	; (800f0a8 <TIM_OC3_SetConfig+0x104>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d003      	beq.n	800f04e <TIM_OC3_SetConfig+0xaa>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4a18      	ldr	r2, [pc, #96]	; (800f0ac <TIM_OC3_SetConfig+0x108>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d113      	bne.n	800f076 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f05c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	695b      	ldr	r3, [r3, #20]
 800f062:	011b      	lsls	r3, r3, #4
 800f064:	693a      	ldr	r2, [r7, #16]
 800f066:	4313      	orrs	r3, r2
 800f068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	699b      	ldr	r3, [r3, #24]
 800f06e:	011b      	lsls	r3, r3, #4
 800f070:	693a      	ldr	r2, [r7, #16]
 800f072:	4313      	orrs	r3, r2
 800f074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	693a      	ldr	r2, [r7, #16]
 800f07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	68fa      	ldr	r2, [r7, #12]
 800f080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	685a      	ldr	r2, [r3, #4]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	621a      	str	r2, [r3, #32]
}
 800f090:	bf00      	nop
 800f092:	371c      	adds	r7, #28
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	40010000 	.word	0x40010000
 800f0a0:	40010400 	.word	0x40010400
 800f0a4:	40014000 	.word	0x40014000
 800f0a8:	40014400 	.word	0x40014400
 800f0ac:	40014800 	.word	0x40014800

0800f0b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b087      	sub	sp, #28
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6a1b      	ldr	r3, [r3, #32]
 800f0be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6a1b      	ldr	r3, [r3, #32]
 800f0ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	69db      	ldr	r3, [r3, #28]
 800f0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	021b      	lsls	r3, r3, #8
 800f0ee:	68fa      	ldr	r2, [r7, #12]
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f0fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	031b      	lsls	r3, r3, #12
 800f102:	693a      	ldr	r2, [r7, #16]
 800f104:	4313      	orrs	r3, r2
 800f106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	4a18      	ldr	r2, [pc, #96]	; (800f16c <TIM_OC4_SetConfig+0xbc>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d00f      	beq.n	800f130 <TIM_OC4_SetConfig+0x80>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	4a17      	ldr	r2, [pc, #92]	; (800f170 <TIM_OC4_SetConfig+0xc0>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d00b      	beq.n	800f130 <TIM_OC4_SetConfig+0x80>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4a16      	ldr	r2, [pc, #88]	; (800f174 <TIM_OC4_SetConfig+0xc4>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d007      	beq.n	800f130 <TIM_OC4_SetConfig+0x80>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4a15      	ldr	r2, [pc, #84]	; (800f178 <TIM_OC4_SetConfig+0xc8>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d003      	beq.n	800f130 <TIM_OC4_SetConfig+0x80>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	4a14      	ldr	r2, [pc, #80]	; (800f17c <TIM_OC4_SetConfig+0xcc>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d109      	bne.n	800f144 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	695b      	ldr	r3, [r3, #20]
 800f13c:	019b      	lsls	r3, r3, #6
 800f13e:	697a      	ldr	r2, [r7, #20]
 800f140:	4313      	orrs	r3, r2
 800f142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	685a      	ldr	r2, [r3, #4]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	693a      	ldr	r2, [r7, #16]
 800f15c:	621a      	str	r2, [r3, #32]
}
 800f15e:	bf00      	nop
 800f160:	371c      	adds	r7, #28
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	40010000 	.word	0x40010000
 800f170:	40010400 	.word	0x40010400
 800f174:	40014000 	.word	0x40014000
 800f178:	40014400 	.word	0x40014400
 800f17c:	40014800 	.word	0x40014800

0800f180 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f180:	b480      	push	{r7}
 800f182:	b087      	sub	sp, #28
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a1b      	ldr	r3, [r3, #32]
 800f18e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6a1b      	ldr	r3, [r3, #32]
 800f19a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f1c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	689b      	ldr	r3, [r3, #8]
 800f1c6:	041b      	lsls	r3, r3, #16
 800f1c8:	693a      	ldr	r2, [r7, #16]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	4a17      	ldr	r2, [pc, #92]	; (800f230 <TIM_OC5_SetConfig+0xb0>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d00f      	beq.n	800f1f6 <TIM_OC5_SetConfig+0x76>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4a16      	ldr	r2, [pc, #88]	; (800f234 <TIM_OC5_SetConfig+0xb4>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d00b      	beq.n	800f1f6 <TIM_OC5_SetConfig+0x76>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4a15      	ldr	r2, [pc, #84]	; (800f238 <TIM_OC5_SetConfig+0xb8>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d007      	beq.n	800f1f6 <TIM_OC5_SetConfig+0x76>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a14      	ldr	r2, [pc, #80]	; (800f23c <TIM_OC5_SetConfig+0xbc>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d003      	beq.n	800f1f6 <TIM_OC5_SetConfig+0x76>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	4a13      	ldr	r2, [pc, #76]	; (800f240 <TIM_OC5_SetConfig+0xc0>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d109      	bne.n	800f20a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f1fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	695b      	ldr	r3, [r3, #20]
 800f202:	021b      	lsls	r3, r3, #8
 800f204:	697a      	ldr	r2, [r7, #20]
 800f206:	4313      	orrs	r3, r2
 800f208:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	697a      	ldr	r2, [r7, #20]
 800f20e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	685a      	ldr	r2, [r3, #4]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	621a      	str	r2, [r3, #32]
}
 800f224:	bf00      	nop
 800f226:	371c      	adds	r7, #28
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr
 800f230:	40010000 	.word	0x40010000
 800f234:	40010400 	.word	0x40010400
 800f238:	40014000 	.word	0x40014000
 800f23c:	40014400 	.word	0x40014400
 800f240:	40014800 	.word	0x40014800

0800f244 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f244:	b480      	push	{r7}
 800f246:	b087      	sub	sp, #28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6a1b      	ldr	r3, [r3, #32]
 800f252:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	021b      	lsls	r3, r3, #8
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	4313      	orrs	r3, r2
 800f27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	051b      	lsls	r3, r3, #20
 800f28e:	693a      	ldr	r2, [r7, #16]
 800f290:	4313      	orrs	r3, r2
 800f292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	4a18      	ldr	r2, [pc, #96]	; (800f2f8 <TIM_OC6_SetConfig+0xb4>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d00f      	beq.n	800f2bc <TIM_OC6_SetConfig+0x78>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4a17      	ldr	r2, [pc, #92]	; (800f2fc <TIM_OC6_SetConfig+0xb8>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d00b      	beq.n	800f2bc <TIM_OC6_SetConfig+0x78>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a16      	ldr	r2, [pc, #88]	; (800f300 <TIM_OC6_SetConfig+0xbc>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d007      	beq.n	800f2bc <TIM_OC6_SetConfig+0x78>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a15      	ldr	r2, [pc, #84]	; (800f304 <TIM_OC6_SetConfig+0xc0>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d003      	beq.n	800f2bc <TIM_OC6_SetConfig+0x78>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a14      	ldr	r2, [pc, #80]	; (800f308 <TIM_OC6_SetConfig+0xc4>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d109      	bne.n	800f2d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	695b      	ldr	r3, [r3, #20]
 800f2c8:	029b      	lsls	r3, r3, #10
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	697a      	ldr	r2, [r7, #20]
 800f2d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	685a      	ldr	r2, [r3, #4]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	693a      	ldr	r2, [r7, #16]
 800f2e8:	621a      	str	r2, [r3, #32]
}
 800f2ea:	bf00      	nop
 800f2ec:	371c      	adds	r7, #28
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	40010000 	.word	0x40010000
 800f2fc:	40010400 	.word	0x40010400
 800f300:	40014000 	.word	0x40014000
 800f304:	40014400 	.word	0x40014400
 800f308:	40014800 	.word	0x40014800

0800f30c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b086      	sub	sp, #24
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f31e:	697a      	ldr	r2, [r7, #20]
 800f320:	4b64      	ldr	r3, [pc, #400]	; (800f4b4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800f322:	4013      	ands	r3, r2
 800f324:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	697a      	ldr	r2, [r7, #20]
 800f32c:	4313      	orrs	r3, r2
 800f32e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f330:	697a      	ldr	r2, [r7, #20]
 800f332:	4b61      	ldr	r3, [pc, #388]	; (800f4b8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800f334:	4013      	ands	r3, r2
 800f336:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	697a      	ldr	r2, [r7, #20]
 800f33e:	4313      	orrs	r3, r2
 800f340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	697a      	ldr	r2, [r7, #20]
 800f348:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	4a5b      	ldr	r2, [pc, #364]	; (800f4bc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800f350:	4293      	cmp	r3, r2
 800f352:	f000 80a7 	beq.w	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f356:	4a59      	ldr	r2, [pc, #356]	; (800f4bc <TIM_SlaveTimer_SetConfig+0x1b0>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	f200 80a5 	bhi.w	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f35e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f362:	f000 809f 	beq.w	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f366:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f36a:	f200 809d 	bhi.w	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f36e:	4a54      	ldr	r2, [pc, #336]	; (800f4c0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800f370:	4293      	cmp	r3, r2
 800f372:	f000 8097 	beq.w	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f376:	4a52      	ldr	r2, [pc, #328]	; (800f4c0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	f200 8095 	bhi.w	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f37e:	4a51      	ldr	r2, [pc, #324]	; (800f4c4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800f380:	4293      	cmp	r3, r2
 800f382:	f000 808f 	beq.w	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f386:	4a4f      	ldr	r2, [pc, #316]	; (800f4c4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	f200 808d 	bhi.w	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f38e:	4a4e      	ldr	r2, [pc, #312]	; (800f4c8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800f390:	4293      	cmp	r3, r2
 800f392:	f000 8087 	beq.w	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f396:	4a4c      	ldr	r2, [pc, #304]	; (800f4c8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	f200 8085 	bhi.w	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f39e:	4a4b      	ldr	r2, [pc, #300]	; (800f4cc <TIM_SlaveTimer_SetConfig+0x1c0>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d07f      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f3a4:	4a49      	ldr	r2, [pc, #292]	; (800f4cc <TIM_SlaveTimer_SetConfig+0x1c0>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d87e      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3aa:	4a49      	ldr	r2, [pc, #292]	; (800f4d0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d079      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f3b0:	4a47      	ldr	r2, [pc, #284]	; (800f4d0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d878      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3b6:	4a47      	ldr	r2, [pc, #284]	; (800f4d4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d073      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f3bc:	4a45      	ldr	r2, [pc, #276]	; (800f4d4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d872      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3c2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3c6:	d06d      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f3c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f3cc:	d86c      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3d2:	d067      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f3d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3d8:	d866      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3da:	2b70      	cmp	r3, #112	; 0x70
 800f3dc:	d01a      	beq.n	800f414 <TIM_SlaveTimer_SetConfig+0x108>
 800f3de:	2b70      	cmp	r3, #112	; 0x70
 800f3e0:	d862      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3e2:	2b60      	cmp	r3, #96	; 0x60
 800f3e4:	d054      	beq.n	800f490 <TIM_SlaveTimer_SetConfig+0x184>
 800f3e6:	2b60      	cmp	r3, #96	; 0x60
 800f3e8:	d85e      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3ea:	2b50      	cmp	r3, #80	; 0x50
 800f3ec:	d046      	beq.n	800f47c <TIM_SlaveTimer_SetConfig+0x170>
 800f3ee:	2b50      	cmp	r3, #80	; 0x50
 800f3f0:	d85a      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3f2:	2b40      	cmp	r3, #64	; 0x40
 800f3f4:	d019      	beq.n	800f42a <TIM_SlaveTimer_SetConfig+0x11e>
 800f3f6:	2b40      	cmp	r3, #64	; 0x40
 800f3f8:	d856      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f3fa:	2b30      	cmp	r3, #48	; 0x30
 800f3fc:	d052      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f3fe:	2b30      	cmp	r3, #48	; 0x30
 800f400:	d852      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f402:	2b20      	cmp	r3, #32
 800f404:	d04e      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f406:	2b20      	cmp	r3, #32
 800f408:	d84e      	bhi.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d04a      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
 800f40e:	2b10      	cmp	r3, #16
 800f410:	d048      	beq.n	800f4a4 <TIM_SlaveTimer_SetConfig+0x198>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800f412:	e049      	b.n	800f4a8 <TIM_SlaveTimer_SetConfig+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6818      	ldr	r0, [r3, #0]
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	68d9      	ldr	r1, [r3, #12]
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	689a      	ldr	r2, [r3, #8]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	f000 f8b7 	bl	800f596 <TIM_ETR_SetConfig>
      break;
 800f428:	e03f      	b.n	800f4aa <TIM_SlaveTimer_SetConfig+0x19e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b05      	cmp	r3, #5
 800f430:	d101      	bne.n	800f436 <TIM_SlaveTimer_SetConfig+0x12a>
        return HAL_ERROR;
 800f432:	2301      	movs	r3, #1
 800f434:	e03a      	b.n	800f4ac <TIM_SlaveTimer_SetConfig+0x1a0>
      tmpccer = htim->Instance->CCER;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6a1b      	ldr	r3, [r3, #32]
 800f43c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	6a1a      	ldr	r2, [r3, #32]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f022 0201 	bic.w	r2, r2, #1
 800f44c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	699b      	ldr	r3, [r3, #24]
 800f454:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f45c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	011b      	lsls	r3, r3, #4
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	4313      	orrs	r3, r2
 800f468:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	68fa      	ldr	r2, [r7, #12]
 800f470:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	693a      	ldr	r2, [r7, #16]
 800f478:	621a      	str	r2, [r3, #32]
      break;
 800f47a:	e016      	b.n	800f4aa <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6818      	ldr	r0, [r3, #0]
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	6899      	ldr	r1, [r3, #8]
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	461a      	mov	r2, r3
 800f48a:	f000 f825 	bl	800f4d8 <TIM_TI1_ConfigInputStage>
      break;
 800f48e:	e00c      	b.n	800f4aa <TIM_SlaveTimer_SetConfig+0x19e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6818      	ldr	r0, [r3, #0]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	6899      	ldr	r1, [r3, #8]
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	461a      	mov	r2, r3
 800f49e:	f000 f84a 	bl	800f536 <TIM_TI2_ConfigInputStage>
      break;
 800f4a2:	e002      	b.n	800f4aa <TIM_SlaveTimer_SetConfig+0x19e>
        break;
 800f4a4:	bf00      	nop
 800f4a6:	e000      	b.n	800f4aa <TIM_SlaveTimer_SetConfig+0x19e>
      break;
 800f4a8:	bf00      	nop
  }
  return HAL_OK;
 800f4aa:	2300      	movs	r3, #0
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3718      	adds	r7, #24
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	ffcfff8f 	.word	0xffcfff8f
 800f4b8:	fffefff8 	.word	0xfffefff8
 800f4bc:	00200010 	.word	0x00200010
 800f4c0:	00100070 	.word	0x00100070
 800f4c4:	00100060 	.word	0x00100060
 800f4c8:	00100050 	.word	0x00100050
 800f4cc:	00100040 	.word	0x00100040
 800f4d0:	00100030 	.word	0x00100030
 800f4d4:	00100020 	.word	0x00100020

0800f4d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b087      	sub	sp, #28
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6a1b      	ldr	r3, [r3, #32]
 800f4e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6a1b      	ldr	r3, [r3, #32]
 800f4ee:	f023 0201 	bic.w	r2, r3, #1
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	699b      	ldr	r3, [r3, #24]
 800f4fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	011b      	lsls	r3, r3, #4
 800f508:	693a      	ldr	r2, [r7, #16]
 800f50a:	4313      	orrs	r3, r2
 800f50c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	f023 030a 	bic.w	r3, r3, #10
 800f514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	693a      	ldr	r2, [r7, #16]
 800f522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	697a      	ldr	r2, [r7, #20]
 800f528:	621a      	str	r2, [r3, #32]
}
 800f52a:	bf00      	nop
 800f52c:	371c      	adds	r7, #28
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr

0800f536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f536:	b480      	push	{r7}
 800f538:	b087      	sub	sp, #28
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	60f8      	str	r0, [r7, #12]
 800f53e:	60b9      	str	r1, [r7, #8]
 800f540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6a1b      	ldr	r3, [r3, #32]
 800f546:	f023 0210 	bic.w	r2, r3, #16
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	699b      	ldr	r3, [r3, #24]
 800f552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	031b      	lsls	r3, r3, #12
 800f566:	697a      	ldr	r2, [r7, #20]
 800f568:	4313      	orrs	r3, r2
 800f56a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	011b      	lsls	r3, r3, #4
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	697a      	ldr	r2, [r7, #20]
 800f582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	693a      	ldr	r2, [r7, #16]
 800f588:	621a      	str	r2, [r3, #32]
}
 800f58a:	bf00      	nop
 800f58c:	371c      	adds	r7, #28
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr

0800f596 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f596:	b480      	push	{r7}
 800f598:	b087      	sub	sp, #28
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	60f8      	str	r0, [r7, #12]
 800f59e:	60b9      	str	r1, [r7, #8]
 800f5a0:	607a      	str	r2, [r7, #4]
 800f5a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f5b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	021a      	lsls	r2, r3, #8
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	431a      	orrs	r2, r3
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	697a      	ldr	r2, [r7, #20]
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	609a      	str	r2, [r3, #8]
}
 800f5ca:	bf00      	nop
 800f5cc:	371c      	adds	r7, #28
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b087      	sub	sp, #28
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	60f8      	str	r0, [r7, #12]
 800f5de:	60b9      	str	r1, [r7, #8]
 800f5e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	f003 031f 	and.w	r3, r3, #31
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f5ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6a1a      	ldr	r2, [r3, #32]
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	43db      	mvns	r3, r3
 800f5f8:	401a      	ands	r2, r3
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6a1a      	ldr	r2, [r3, #32]
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	f003 031f 	and.w	r3, r3, #31
 800f608:	6879      	ldr	r1, [r7, #4]
 800f60a:	fa01 f303 	lsl.w	r3, r1, r3
 800f60e:	431a      	orrs	r2, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	621a      	str	r2, [r3, #32]
}
 800f614:	bf00      	nop
 800f616:	371c      	adds	r7, #28
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f620:	b480      	push	{r7}
 800f622:	b085      	sub	sp, #20
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f630:	2b01      	cmp	r3, #1
 800f632:	d101      	bne.n	800f638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f634:	2302      	movs	r3, #2
 800f636:	e068      	b.n	800f70a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2201      	movs	r2, #1
 800f63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2202      	movs	r2, #2
 800f644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a2e      	ldr	r2, [pc, #184]	; (800f718 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d004      	beq.n	800f66c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a2d      	ldr	r2, [pc, #180]	; (800f71c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d108      	bne.n	800f67e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f672:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f684:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a1e      	ldr	r2, [pc, #120]	; (800f718 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d01d      	beq.n	800f6de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6aa:	d018      	beq.n	800f6de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4a1b      	ldr	r2, [pc, #108]	; (800f720 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d013      	beq.n	800f6de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a1a      	ldr	r2, [pc, #104]	; (800f724 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d00e      	beq.n	800f6de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a18      	ldr	r2, [pc, #96]	; (800f728 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d009      	beq.n	800f6de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	4a13      	ldr	r2, [pc, #76]	; (800f71c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d004      	beq.n	800f6de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a14      	ldr	r2, [pc, #80]	; (800f72c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d10c      	bne.n	800f6f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	68ba      	ldr	r2, [r7, #8]
 800f6f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f708:	2300      	movs	r3, #0
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3714      	adds	r7, #20
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	40010000 	.word	0x40010000
 800f71c:	40010400 	.word	0x40010400
 800f720:	40000400 	.word	0x40000400
 800f724:	40000800 	.word	0x40000800
 800f728:	40000c00 	.word	0x40000c00
 800f72c:	40001800 	.word	0x40001800

0800f730 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f73a:	2300      	movs	r3, #0
 800f73c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f744:	2b01      	cmp	r3, #1
 800f746:	d101      	bne.n	800f74c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f748:	2302      	movs	r3, #2
 800f74a:	e065      	b.n	800f818 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2201      	movs	r2, #1
 800f750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	4313      	orrs	r3, r2
 800f760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4313      	orrs	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	691b      	ldr	r3, [r3, #16]
 800f796:	4313      	orrs	r3, r2
 800f798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	041b      	lsls	r3, r3, #16
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a16      	ldr	r2, [pc, #88]	; (800f824 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d004      	beq.n	800f7da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a14      	ldr	r2, [pc, #80]	; (800f828 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d115      	bne.n	800f806 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e4:	051b      	lsls	r3, r3, #20
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	69db      	ldr	r3, [r3, #28]
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	4313      	orrs	r3, r2
 800f804:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2200      	movs	r2, #0
 800f812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3714      	adds	r7, #20
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	40010000 	.word	0x40010000
 800f828:	40010400 	.word	0x40010400

0800f82c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f834:	bf00      	nop
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr

0800f840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f848:	bf00      	nop
 800f84a:	370c      	adds	r7, #12
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d101      	bne.n	800f87a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	e042      	b.n	800f900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f880:	2b00      	cmp	r3, #0
 800f882:	d106      	bne.n	800f892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f7f4 f851 	bl	8003934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2224      	movs	r2, #36	; 0x24
 800f896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f022 0201 	bic.w	r2, r2, #1
 800f8a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 f82c 	bl	800f908 <UART_SetConfig>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d101      	bne.n	800f8ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e022      	b.n	800f900 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d002      	beq.n	800f8c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 fd80 	bl	80103c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	685a      	ldr	r2, [r3, #4]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f8d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	689a      	ldr	r2, [r3, #8]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f8e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f042 0201 	orr.w	r2, r2, #1
 800f8f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 fe07 	bl	801050c <UART_CheckIdleState>
 800f8fe:	4603      	mov	r3, r0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f908:	b5b0      	push	{r4, r5, r7, lr}
 800f90a:	b08e      	sub	sp, #56	; 0x38
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	689a      	ldr	r2, [r3, #8]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	691b      	ldr	r3, [r3, #16]
 800f91e:	431a      	orrs	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	695b      	ldr	r3, [r3, #20]
 800f924:	431a      	orrs	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	69db      	ldr	r3, [r3, #28]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	4bbf      	ldr	r3, [pc, #764]	; (800fc34 <UART_SetConfig+0x32c>)
 800f936:	4013      	ands	r3, r2
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	6812      	ldr	r2, [r2, #0]
 800f93c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f93e:	430b      	orrs	r3, r1
 800f940:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	68da      	ldr	r2, [r3, #12]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	430a      	orrs	r2, r1
 800f956:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	699b      	ldr	r3, [r3, #24]
 800f95c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4ab5      	ldr	r2, [pc, #724]	; (800fc38 <UART_SetConfig+0x330>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d004      	beq.n	800f972 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a1b      	ldr	r3, [r3, #32]
 800f96c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f96e:	4313      	orrs	r3, r2
 800f970:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	689a      	ldr	r2, [r3, #8]
 800f978:	4bb0      	ldr	r3, [pc, #704]	; (800fc3c <UART_SetConfig+0x334>)
 800f97a:	4013      	ands	r3, r2
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	6812      	ldr	r2, [r2, #0]
 800f980:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f982:	430b      	orrs	r3, r1
 800f984:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98c:	f023 010f 	bic.w	r1, r3, #15
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	430a      	orrs	r2, r1
 800f99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4aa7      	ldr	r2, [pc, #668]	; (800fc40 <UART_SetConfig+0x338>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d176      	bne.n	800fa94 <UART_SetConfig+0x18c>
 800f9a6:	4ba7      	ldr	r3, [pc, #668]	; (800fc44 <UART_SetConfig+0x33c>)
 800f9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f9ae:	2b28      	cmp	r3, #40	; 0x28
 800f9b0:	d86c      	bhi.n	800fa8c <UART_SetConfig+0x184>
 800f9b2:	a201      	add	r2, pc, #4	; (adr r2, 800f9b8 <UART_SetConfig+0xb0>)
 800f9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b8:	0800fa5d 	.word	0x0800fa5d
 800f9bc:	0800fa8d 	.word	0x0800fa8d
 800f9c0:	0800fa8d 	.word	0x0800fa8d
 800f9c4:	0800fa8d 	.word	0x0800fa8d
 800f9c8:	0800fa8d 	.word	0x0800fa8d
 800f9cc:	0800fa8d 	.word	0x0800fa8d
 800f9d0:	0800fa8d 	.word	0x0800fa8d
 800f9d4:	0800fa8d 	.word	0x0800fa8d
 800f9d8:	0800fa65 	.word	0x0800fa65
 800f9dc:	0800fa8d 	.word	0x0800fa8d
 800f9e0:	0800fa8d 	.word	0x0800fa8d
 800f9e4:	0800fa8d 	.word	0x0800fa8d
 800f9e8:	0800fa8d 	.word	0x0800fa8d
 800f9ec:	0800fa8d 	.word	0x0800fa8d
 800f9f0:	0800fa8d 	.word	0x0800fa8d
 800f9f4:	0800fa8d 	.word	0x0800fa8d
 800f9f8:	0800fa6d 	.word	0x0800fa6d
 800f9fc:	0800fa8d 	.word	0x0800fa8d
 800fa00:	0800fa8d 	.word	0x0800fa8d
 800fa04:	0800fa8d 	.word	0x0800fa8d
 800fa08:	0800fa8d 	.word	0x0800fa8d
 800fa0c:	0800fa8d 	.word	0x0800fa8d
 800fa10:	0800fa8d 	.word	0x0800fa8d
 800fa14:	0800fa8d 	.word	0x0800fa8d
 800fa18:	0800fa75 	.word	0x0800fa75
 800fa1c:	0800fa8d 	.word	0x0800fa8d
 800fa20:	0800fa8d 	.word	0x0800fa8d
 800fa24:	0800fa8d 	.word	0x0800fa8d
 800fa28:	0800fa8d 	.word	0x0800fa8d
 800fa2c:	0800fa8d 	.word	0x0800fa8d
 800fa30:	0800fa8d 	.word	0x0800fa8d
 800fa34:	0800fa8d 	.word	0x0800fa8d
 800fa38:	0800fa7d 	.word	0x0800fa7d
 800fa3c:	0800fa8d 	.word	0x0800fa8d
 800fa40:	0800fa8d 	.word	0x0800fa8d
 800fa44:	0800fa8d 	.word	0x0800fa8d
 800fa48:	0800fa8d 	.word	0x0800fa8d
 800fa4c:	0800fa8d 	.word	0x0800fa8d
 800fa50:	0800fa8d 	.word	0x0800fa8d
 800fa54:	0800fa8d 	.word	0x0800fa8d
 800fa58:	0800fa85 	.word	0x0800fa85
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa62:	e222      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fa64:	2304      	movs	r3, #4
 800fa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa6a:	e21e      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fa6c:	2308      	movs	r3, #8
 800fa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa72:	e21a      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fa74:	2310      	movs	r3, #16
 800fa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa7a:	e216      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fa7c:	2320      	movs	r3, #32
 800fa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa82:	e212      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fa84:	2340      	movs	r3, #64	; 0x40
 800fa86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa8a:	e20e      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fa8c:	2380      	movs	r3, #128	; 0x80
 800fa8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fa92:	e20a      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a6b      	ldr	r2, [pc, #428]	; (800fc48 <UART_SetConfig+0x340>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d130      	bne.n	800fb00 <UART_SetConfig+0x1f8>
 800fa9e:	4b69      	ldr	r3, [pc, #420]	; (800fc44 <UART_SetConfig+0x33c>)
 800faa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faa2:	f003 0307 	and.w	r3, r3, #7
 800faa6:	2b05      	cmp	r3, #5
 800faa8:	d826      	bhi.n	800faf8 <UART_SetConfig+0x1f0>
 800faaa:	a201      	add	r2, pc, #4	; (adr r2, 800fab0 <UART_SetConfig+0x1a8>)
 800faac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab0:	0800fac9 	.word	0x0800fac9
 800fab4:	0800fad1 	.word	0x0800fad1
 800fab8:	0800fad9 	.word	0x0800fad9
 800fabc:	0800fae1 	.word	0x0800fae1
 800fac0:	0800fae9 	.word	0x0800fae9
 800fac4:	0800faf1 	.word	0x0800faf1
 800fac8:	2300      	movs	r3, #0
 800faca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800face:	e1ec      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fad0:	2304      	movs	r3, #4
 800fad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fad6:	e1e8      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fad8:	2308      	movs	r3, #8
 800fada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fade:	e1e4      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fae0:	2310      	movs	r3, #16
 800fae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fae6:	e1e0      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fae8:	2320      	movs	r3, #32
 800faea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800faee:	e1dc      	b.n	800feaa <UART_SetConfig+0x5a2>
 800faf0:	2340      	movs	r3, #64	; 0x40
 800faf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800faf6:	e1d8      	b.n	800feaa <UART_SetConfig+0x5a2>
 800faf8:	2380      	movs	r3, #128	; 0x80
 800fafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fafe:	e1d4      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a51      	ldr	r2, [pc, #324]	; (800fc4c <UART_SetConfig+0x344>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d130      	bne.n	800fb6c <UART_SetConfig+0x264>
 800fb0a:	4b4e      	ldr	r3, [pc, #312]	; (800fc44 <UART_SetConfig+0x33c>)
 800fb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb0e:	f003 0307 	and.w	r3, r3, #7
 800fb12:	2b05      	cmp	r3, #5
 800fb14:	d826      	bhi.n	800fb64 <UART_SetConfig+0x25c>
 800fb16:	a201      	add	r2, pc, #4	; (adr r2, 800fb1c <UART_SetConfig+0x214>)
 800fb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb1c:	0800fb35 	.word	0x0800fb35
 800fb20:	0800fb3d 	.word	0x0800fb3d
 800fb24:	0800fb45 	.word	0x0800fb45
 800fb28:	0800fb4d 	.word	0x0800fb4d
 800fb2c:	0800fb55 	.word	0x0800fb55
 800fb30:	0800fb5d 	.word	0x0800fb5d
 800fb34:	2300      	movs	r3, #0
 800fb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb3a:	e1b6      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fb3c:	2304      	movs	r3, #4
 800fb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb42:	e1b2      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fb44:	2308      	movs	r3, #8
 800fb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb4a:	e1ae      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fb4c:	2310      	movs	r3, #16
 800fb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb52:	e1aa      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fb54:	2320      	movs	r3, #32
 800fb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb5a:	e1a6      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fb5c:	2340      	movs	r3, #64	; 0x40
 800fb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb62:	e1a2      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fb64:	2380      	movs	r3, #128	; 0x80
 800fb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fb6a:	e19e      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a37      	ldr	r2, [pc, #220]	; (800fc50 <UART_SetConfig+0x348>)
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d130      	bne.n	800fbd8 <UART_SetConfig+0x2d0>
 800fb76:	4b33      	ldr	r3, [pc, #204]	; (800fc44 <UART_SetConfig+0x33c>)
 800fb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb7a:	f003 0307 	and.w	r3, r3, #7
 800fb7e:	2b05      	cmp	r3, #5
 800fb80:	d826      	bhi.n	800fbd0 <UART_SetConfig+0x2c8>
 800fb82:	a201      	add	r2, pc, #4	; (adr r2, 800fb88 <UART_SetConfig+0x280>)
 800fb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb88:	0800fba1 	.word	0x0800fba1
 800fb8c:	0800fba9 	.word	0x0800fba9
 800fb90:	0800fbb1 	.word	0x0800fbb1
 800fb94:	0800fbb9 	.word	0x0800fbb9
 800fb98:	0800fbc1 	.word	0x0800fbc1
 800fb9c:	0800fbc9 	.word	0x0800fbc9
 800fba0:	2300      	movs	r3, #0
 800fba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fba6:	e180      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fba8:	2304      	movs	r3, #4
 800fbaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbae:	e17c      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbb6:	e178      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fbb8:	2310      	movs	r3, #16
 800fbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbbe:	e174      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fbc0:	2320      	movs	r3, #32
 800fbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbc6:	e170      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fbc8:	2340      	movs	r3, #64	; 0x40
 800fbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbce:	e16c      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fbd0:	2380      	movs	r3, #128	; 0x80
 800fbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fbd6:	e168      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a1d      	ldr	r2, [pc, #116]	; (800fc54 <UART_SetConfig+0x34c>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d142      	bne.n	800fc68 <UART_SetConfig+0x360>
 800fbe2:	4b18      	ldr	r3, [pc, #96]	; (800fc44 <UART_SetConfig+0x33c>)
 800fbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbe6:	f003 0307 	and.w	r3, r3, #7
 800fbea:	2b05      	cmp	r3, #5
 800fbec:	d838      	bhi.n	800fc60 <UART_SetConfig+0x358>
 800fbee:	a201      	add	r2, pc, #4	; (adr r2, 800fbf4 <UART_SetConfig+0x2ec>)
 800fbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbf4:	0800fc0d 	.word	0x0800fc0d
 800fbf8:	0800fc15 	.word	0x0800fc15
 800fbfc:	0800fc1d 	.word	0x0800fc1d
 800fc00:	0800fc25 	.word	0x0800fc25
 800fc04:	0800fc2d 	.word	0x0800fc2d
 800fc08:	0800fc59 	.word	0x0800fc59
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc12:	e14a      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fc14:	2304      	movs	r3, #4
 800fc16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc1a:	e146      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fc1c:	2308      	movs	r3, #8
 800fc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc22:	e142      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fc24:	2310      	movs	r3, #16
 800fc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc2a:	e13e      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fc2c:	2320      	movs	r3, #32
 800fc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc32:	e13a      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fc34:	cfff69f3 	.word	0xcfff69f3
 800fc38:	58000c00 	.word	0x58000c00
 800fc3c:	11fff4ff 	.word	0x11fff4ff
 800fc40:	40011000 	.word	0x40011000
 800fc44:	58024400 	.word	0x58024400
 800fc48:	40004400 	.word	0x40004400
 800fc4c:	40004800 	.word	0x40004800
 800fc50:	40004c00 	.word	0x40004c00
 800fc54:	40005000 	.word	0x40005000
 800fc58:	2340      	movs	r3, #64	; 0x40
 800fc5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc5e:	e124      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fc60:	2380      	movs	r3, #128	; 0x80
 800fc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fc66:	e120      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4acc      	ldr	r2, [pc, #816]	; (800ffa0 <UART_SetConfig+0x698>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d176      	bne.n	800fd60 <UART_SetConfig+0x458>
 800fc72:	4bcc      	ldr	r3, [pc, #816]	; (800ffa4 <UART_SetConfig+0x69c>)
 800fc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc7a:	2b28      	cmp	r3, #40	; 0x28
 800fc7c:	d86c      	bhi.n	800fd58 <UART_SetConfig+0x450>
 800fc7e:	a201      	add	r2, pc, #4	; (adr r2, 800fc84 <UART_SetConfig+0x37c>)
 800fc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc84:	0800fd29 	.word	0x0800fd29
 800fc88:	0800fd59 	.word	0x0800fd59
 800fc8c:	0800fd59 	.word	0x0800fd59
 800fc90:	0800fd59 	.word	0x0800fd59
 800fc94:	0800fd59 	.word	0x0800fd59
 800fc98:	0800fd59 	.word	0x0800fd59
 800fc9c:	0800fd59 	.word	0x0800fd59
 800fca0:	0800fd59 	.word	0x0800fd59
 800fca4:	0800fd31 	.word	0x0800fd31
 800fca8:	0800fd59 	.word	0x0800fd59
 800fcac:	0800fd59 	.word	0x0800fd59
 800fcb0:	0800fd59 	.word	0x0800fd59
 800fcb4:	0800fd59 	.word	0x0800fd59
 800fcb8:	0800fd59 	.word	0x0800fd59
 800fcbc:	0800fd59 	.word	0x0800fd59
 800fcc0:	0800fd59 	.word	0x0800fd59
 800fcc4:	0800fd39 	.word	0x0800fd39
 800fcc8:	0800fd59 	.word	0x0800fd59
 800fccc:	0800fd59 	.word	0x0800fd59
 800fcd0:	0800fd59 	.word	0x0800fd59
 800fcd4:	0800fd59 	.word	0x0800fd59
 800fcd8:	0800fd59 	.word	0x0800fd59
 800fcdc:	0800fd59 	.word	0x0800fd59
 800fce0:	0800fd59 	.word	0x0800fd59
 800fce4:	0800fd41 	.word	0x0800fd41
 800fce8:	0800fd59 	.word	0x0800fd59
 800fcec:	0800fd59 	.word	0x0800fd59
 800fcf0:	0800fd59 	.word	0x0800fd59
 800fcf4:	0800fd59 	.word	0x0800fd59
 800fcf8:	0800fd59 	.word	0x0800fd59
 800fcfc:	0800fd59 	.word	0x0800fd59
 800fd00:	0800fd59 	.word	0x0800fd59
 800fd04:	0800fd49 	.word	0x0800fd49
 800fd08:	0800fd59 	.word	0x0800fd59
 800fd0c:	0800fd59 	.word	0x0800fd59
 800fd10:	0800fd59 	.word	0x0800fd59
 800fd14:	0800fd59 	.word	0x0800fd59
 800fd18:	0800fd59 	.word	0x0800fd59
 800fd1c:	0800fd59 	.word	0x0800fd59
 800fd20:	0800fd59 	.word	0x0800fd59
 800fd24:	0800fd51 	.word	0x0800fd51
 800fd28:	2301      	movs	r3, #1
 800fd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd2e:	e0bc      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fd30:	2304      	movs	r3, #4
 800fd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd36:	e0b8      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fd38:	2308      	movs	r3, #8
 800fd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd3e:	e0b4      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fd40:	2310      	movs	r3, #16
 800fd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd46:	e0b0      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fd48:	2320      	movs	r3, #32
 800fd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd4e:	e0ac      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fd50:	2340      	movs	r3, #64	; 0x40
 800fd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd56:	e0a8      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fd58:	2380      	movs	r3, #128	; 0x80
 800fd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd5e:	e0a4      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a90      	ldr	r2, [pc, #576]	; (800ffa8 <UART_SetConfig+0x6a0>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d130      	bne.n	800fdcc <UART_SetConfig+0x4c4>
 800fd6a:	4b8e      	ldr	r3, [pc, #568]	; (800ffa4 <UART_SetConfig+0x69c>)
 800fd6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd6e:	f003 0307 	and.w	r3, r3, #7
 800fd72:	2b05      	cmp	r3, #5
 800fd74:	d826      	bhi.n	800fdc4 <UART_SetConfig+0x4bc>
 800fd76:	a201      	add	r2, pc, #4	; (adr r2, 800fd7c <UART_SetConfig+0x474>)
 800fd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd7c:	0800fd95 	.word	0x0800fd95
 800fd80:	0800fd9d 	.word	0x0800fd9d
 800fd84:	0800fda5 	.word	0x0800fda5
 800fd88:	0800fdad 	.word	0x0800fdad
 800fd8c:	0800fdb5 	.word	0x0800fdb5
 800fd90:	0800fdbd 	.word	0x0800fdbd
 800fd94:	2300      	movs	r3, #0
 800fd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fd9a:	e086      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fd9c:	2304      	movs	r3, #4
 800fd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fda2:	e082      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fda4:	2308      	movs	r3, #8
 800fda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdaa:	e07e      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fdac:	2310      	movs	r3, #16
 800fdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdb2:	e07a      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fdb4:	2320      	movs	r3, #32
 800fdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdba:	e076      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fdbc:	2340      	movs	r3, #64	; 0x40
 800fdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdc2:	e072      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fdc4:	2380      	movs	r3, #128	; 0x80
 800fdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdca:	e06e      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a76      	ldr	r2, [pc, #472]	; (800ffac <UART_SetConfig+0x6a4>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d130      	bne.n	800fe38 <UART_SetConfig+0x530>
 800fdd6:	4b73      	ldr	r3, [pc, #460]	; (800ffa4 <UART_SetConfig+0x69c>)
 800fdd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdda:	f003 0307 	and.w	r3, r3, #7
 800fdde:	2b05      	cmp	r3, #5
 800fde0:	d826      	bhi.n	800fe30 <UART_SetConfig+0x528>
 800fde2:	a201      	add	r2, pc, #4	; (adr r2, 800fde8 <UART_SetConfig+0x4e0>)
 800fde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde8:	0800fe01 	.word	0x0800fe01
 800fdec:	0800fe09 	.word	0x0800fe09
 800fdf0:	0800fe11 	.word	0x0800fe11
 800fdf4:	0800fe19 	.word	0x0800fe19
 800fdf8:	0800fe21 	.word	0x0800fe21
 800fdfc:	0800fe29 	.word	0x0800fe29
 800fe00:	2300      	movs	r3, #0
 800fe02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe06:	e050      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe08:	2304      	movs	r3, #4
 800fe0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe0e:	e04c      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe10:	2308      	movs	r3, #8
 800fe12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe16:	e048      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe18:	2310      	movs	r3, #16
 800fe1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe1e:	e044      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe20:	2320      	movs	r3, #32
 800fe22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe26:	e040      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe28:	2340      	movs	r3, #64	; 0x40
 800fe2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe2e:	e03c      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe30:	2380      	movs	r3, #128	; 0x80
 800fe32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe36:	e038      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a5c      	ldr	r2, [pc, #368]	; (800ffb0 <UART_SetConfig+0x6a8>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d130      	bne.n	800fea4 <UART_SetConfig+0x59c>
 800fe42:	4b58      	ldr	r3, [pc, #352]	; (800ffa4 <UART_SetConfig+0x69c>)
 800fe44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe46:	f003 0307 	and.w	r3, r3, #7
 800fe4a:	2b05      	cmp	r3, #5
 800fe4c:	d826      	bhi.n	800fe9c <UART_SetConfig+0x594>
 800fe4e:	a201      	add	r2, pc, #4	; (adr r2, 800fe54 <UART_SetConfig+0x54c>)
 800fe50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe54:	0800fe6d 	.word	0x0800fe6d
 800fe58:	0800fe75 	.word	0x0800fe75
 800fe5c:	0800fe7d 	.word	0x0800fe7d
 800fe60:	0800fe85 	.word	0x0800fe85
 800fe64:	0800fe8d 	.word	0x0800fe8d
 800fe68:	0800fe95 	.word	0x0800fe95
 800fe6c:	2302      	movs	r3, #2
 800fe6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe72:	e01a      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe74:	2304      	movs	r3, #4
 800fe76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe7a:	e016      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe7c:	2308      	movs	r3, #8
 800fe7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe82:	e012      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe84:	2310      	movs	r3, #16
 800fe86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe8a:	e00e      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe8c:	2320      	movs	r3, #32
 800fe8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe92:	e00a      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe94:	2340      	movs	r3, #64	; 0x40
 800fe96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe9a:	e006      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fe9c:	2380      	movs	r3, #128	; 0x80
 800fe9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fea2:	e002      	b.n	800feaa <UART_SetConfig+0x5a2>
 800fea4:	2380      	movs	r3, #128	; 0x80
 800fea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	4a40      	ldr	r2, [pc, #256]	; (800ffb0 <UART_SetConfig+0x6a8>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	f040 80ef 	bne.w	8010094 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800feb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800feba:	2b20      	cmp	r3, #32
 800febc:	dc46      	bgt.n	800ff4c <UART_SetConfig+0x644>
 800febe:	2b02      	cmp	r3, #2
 800fec0:	f2c0 8081 	blt.w	800ffc6 <UART_SetConfig+0x6be>
 800fec4:	3b02      	subs	r3, #2
 800fec6:	2b1e      	cmp	r3, #30
 800fec8:	d87d      	bhi.n	800ffc6 <UART_SetConfig+0x6be>
 800feca:	a201      	add	r2, pc, #4	; (adr r2, 800fed0 <UART_SetConfig+0x5c8>)
 800fecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed0:	0800ff53 	.word	0x0800ff53
 800fed4:	0800ffc7 	.word	0x0800ffc7
 800fed8:	0800ff5b 	.word	0x0800ff5b
 800fedc:	0800ffc7 	.word	0x0800ffc7
 800fee0:	0800ffc7 	.word	0x0800ffc7
 800fee4:	0800ffc7 	.word	0x0800ffc7
 800fee8:	0800ff6b 	.word	0x0800ff6b
 800feec:	0800ffc7 	.word	0x0800ffc7
 800fef0:	0800ffc7 	.word	0x0800ffc7
 800fef4:	0800ffc7 	.word	0x0800ffc7
 800fef8:	0800ffc7 	.word	0x0800ffc7
 800fefc:	0800ffc7 	.word	0x0800ffc7
 800ff00:	0800ffc7 	.word	0x0800ffc7
 800ff04:	0800ffc7 	.word	0x0800ffc7
 800ff08:	0800ff7b 	.word	0x0800ff7b
 800ff0c:	0800ffc7 	.word	0x0800ffc7
 800ff10:	0800ffc7 	.word	0x0800ffc7
 800ff14:	0800ffc7 	.word	0x0800ffc7
 800ff18:	0800ffc7 	.word	0x0800ffc7
 800ff1c:	0800ffc7 	.word	0x0800ffc7
 800ff20:	0800ffc7 	.word	0x0800ffc7
 800ff24:	0800ffc7 	.word	0x0800ffc7
 800ff28:	0800ffc7 	.word	0x0800ffc7
 800ff2c:	0800ffc7 	.word	0x0800ffc7
 800ff30:	0800ffc7 	.word	0x0800ffc7
 800ff34:	0800ffc7 	.word	0x0800ffc7
 800ff38:	0800ffc7 	.word	0x0800ffc7
 800ff3c:	0800ffc7 	.word	0x0800ffc7
 800ff40:	0800ffc7 	.word	0x0800ffc7
 800ff44:	0800ffc7 	.word	0x0800ffc7
 800ff48:	0800ffb9 	.word	0x0800ffb9
 800ff4c:	2b40      	cmp	r3, #64	; 0x40
 800ff4e:	d036      	beq.n	800ffbe <UART_SetConfig+0x6b6>
 800ff50:	e039      	b.n	800ffc6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ff52:	f7fb fb17 	bl	800b584 <HAL_RCCEx_GetD3PCLK1Freq>
 800ff56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ff58:	e03b      	b.n	800ffd2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff5a:	f107 0314 	add.w	r3, r7, #20
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fb fb26 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff64:	69bb      	ldr	r3, [r7, #24]
 800ff66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff68:	e033      	b.n	800ffd2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff6a:	f107 0308 	add.w	r3, r7, #8
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fb fc72 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff78:	e02b      	b.n	800ffd2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff7a:	4b0a      	ldr	r3, [pc, #40]	; (800ffa4 <UART_SetConfig+0x69c>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f003 0320 	and.w	r3, r3, #32
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d009      	beq.n	800ff9a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff86:	4b07      	ldr	r3, [pc, #28]	; (800ffa4 <UART_SetConfig+0x69c>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	08db      	lsrs	r3, r3, #3
 800ff8c:	f003 0303 	and.w	r3, r3, #3
 800ff90:	4a08      	ldr	r2, [pc, #32]	; (800ffb4 <UART_SetConfig+0x6ac>)
 800ff92:	fa22 f303 	lsr.w	r3, r2, r3
 800ff96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff98:	e01b      	b.n	800ffd2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ff9a:	4b06      	ldr	r3, [pc, #24]	; (800ffb4 <UART_SetConfig+0x6ac>)
 800ff9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ff9e:	e018      	b.n	800ffd2 <UART_SetConfig+0x6ca>
 800ffa0:	40011400 	.word	0x40011400
 800ffa4:	58024400 	.word	0x58024400
 800ffa8:	40007800 	.word	0x40007800
 800ffac:	40007c00 	.word	0x40007c00
 800ffb0:	58000c00 	.word	0x58000c00
 800ffb4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ffb8:	4bc4      	ldr	r3, [pc, #784]	; (80102cc <UART_SetConfig+0x9c4>)
 800ffba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ffbc:	e009      	b.n	800ffd2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ffc4:	e005      	b.n	800ffd2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ffd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ffd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f000 81da 	beq.w	801038e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffde:	4abc      	ldr	r2, [pc, #752]	; (80102d0 <UART_SetConfig+0x9c8>)
 800ffe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffec:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	685a      	ldr	r2, [r3, #4]
 800fff2:	4613      	mov	r3, r2
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	4413      	add	r3, r2
 800fff8:	6a3a      	ldr	r2, [r7, #32]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d305      	bcc.n	801000a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010004:	6a3a      	ldr	r2, [r7, #32]
 8010006:	429a      	cmp	r2, r3
 8010008:	d903      	bls.n	8010012 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 801000a:	2301      	movs	r3, #1
 801000c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010010:	e1bd      	b.n	801038e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010014:	4618      	mov	r0, r3
 8010016:	f04f 0100 	mov.w	r1, #0
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001e:	4aac      	ldr	r2, [pc, #688]	; (80102d0 <UART_SetConfig+0x9c8>)
 8010020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010024:	b29a      	uxth	r2, r3
 8010026:	f04f 0300 	mov.w	r3, #0
 801002a:	f7f0 fb6d 	bl	8000708 <__aeabi_uldivmod>
 801002e:	4602      	mov	r2, r0
 8010030:	460b      	mov	r3, r1
 8010032:	4610      	mov	r0, r2
 8010034:	4619      	mov	r1, r3
 8010036:	f04f 0200 	mov.w	r2, #0
 801003a:	f04f 0300 	mov.w	r3, #0
 801003e:	020b      	lsls	r3, r1, #8
 8010040:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010044:	0202      	lsls	r2, r0, #8
 8010046:	6879      	ldr	r1, [r7, #4]
 8010048:	6849      	ldr	r1, [r1, #4]
 801004a:	0849      	lsrs	r1, r1, #1
 801004c:	4608      	mov	r0, r1
 801004e:	f04f 0100 	mov.w	r1, #0
 8010052:	1814      	adds	r4, r2, r0
 8010054:	eb43 0501 	adc.w	r5, r3, r1
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	461a      	mov	r2, r3
 801005e:	f04f 0300 	mov.w	r3, #0
 8010062:	4620      	mov	r0, r4
 8010064:	4629      	mov	r1, r5
 8010066:	f7f0 fb4f 	bl	8000708 <__aeabi_uldivmod>
 801006a:	4602      	mov	r2, r0
 801006c:	460b      	mov	r3, r1
 801006e:	4613      	mov	r3, r2
 8010070:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010078:	d308      	bcc.n	801008c <UART_SetConfig+0x784>
 801007a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010080:	d204      	bcs.n	801008c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010088:	60da      	str	r2, [r3, #12]
 801008a:	e180      	b.n	801038e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 801008c:	2301      	movs	r3, #1
 801008e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010092:	e17c      	b.n	801038e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	69db      	ldr	r3, [r3, #28]
 8010098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801009c:	f040 80bf 	bne.w	801021e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80100a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80100a4:	2b20      	cmp	r3, #32
 80100a6:	dc49      	bgt.n	801013c <UART_SetConfig+0x834>
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	db7c      	blt.n	80101a6 <UART_SetConfig+0x89e>
 80100ac:	2b20      	cmp	r3, #32
 80100ae:	d87a      	bhi.n	80101a6 <UART_SetConfig+0x89e>
 80100b0:	a201      	add	r2, pc, #4	; (adr r2, 80100b8 <UART_SetConfig+0x7b0>)
 80100b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b6:	bf00      	nop
 80100b8:	08010143 	.word	0x08010143
 80100bc:	0801014b 	.word	0x0801014b
 80100c0:	080101a7 	.word	0x080101a7
 80100c4:	080101a7 	.word	0x080101a7
 80100c8:	08010153 	.word	0x08010153
 80100cc:	080101a7 	.word	0x080101a7
 80100d0:	080101a7 	.word	0x080101a7
 80100d4:	080101a7 	.word	0x080101a7
 80100d8:	08010163 	.word	0x08010163
 80100dc:	080101a7 	.word	0x080101a7
 80100e0:	080101a7 	.word	0x080101a7
 80100e4:	080101a7 	.word	0x080101a7
 80100e8:	080101a7 	.word	0x080101a7
 80100ec:	080101a7 	.word	0x080101a7
 80100f0:	080101a7 	.word	0x080101a7
 80100f4:	080101a7 	.word	0x080101a7
 80100f8:	08010173 	.word	0x08010173
 80100fc:	080101a7 	.word	0x080101a7
 8010100:	080101a7 	.word	0x080101a7
 8010104:	080101a7 	.word	0x080101a7
 8010108:	080101a7 	.word	0x080101a7
 801010c:	080101a7 	.word	0x080101a7
 8010110:	080101a7 	.word	0x080101a7
 8010114:	080101a7 	.word	0x080101a7
 8010118:	080101a7 	.word	0x080101a7
 801011c:	080101a7 	.word	0x080101a7
 8010120:	080101a7 	.word	0x080101a7
 8010124:	080101a7 	.word	0x080101a7
 8010128:	080101a7 	.word	0x080101a7
 801012c:	080101a7 	.word	0x080101a7
 8010130:	080101a7 	.word	0x080101a7
 8010134:	080101a7 	.word	0x080101a7
 8010138:	08010199 	.word	0x08010199
 801013c:	2b40      	cmp	r3, #64	; 0x40
 801013e:	d02e      	beq.n	801019e <UART_SetConfig+0x896>
 8010140:	e031      	b.n	80101a6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010142:	f7f9 fde1 	bl	8009d08 <HAL_RCC_GetPCLK1Freq>
 8010146:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010148:	e033      	b.n	80101b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801014a:	f7f9 fdf3 	bl	8009d34 <HAL_RCC_GetPCLK2Freq>
 801014e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010150:	e02f      	b.n	80101b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010152:	f107 0314 	add.w	r3, r7, #20
 8010156:	4618      	mov	r0, r3
 8010158:	f7fb fa2a 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801015c:	69bb      	ldr	r3, [r7, #24]
 801015e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010160:	e027      	b.n	80101b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010162:	f107 0308 	add.w	r3, r7, #8
 8010166:	4618      	mov	r0, r3
 8010168:	f7fb fb76 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010170:	e01f      	b.n	80101b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010172:	4b58      	ldr	r3, [pc, #352]	; (80102d4 <UART_SetConfig+0x9cc>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f003 0320 	and.w	r3, r3, #32
 801017a:	2b00      	cmp	r3, #0
 801017c:	d009      	beq.n	8010192 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801017e:	4b55      	ldr	r3, [pc, #340]	; (80102d4 <UART_SetConfig+0x9cc>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	08db      	lsrs	r3, r3, #3
 8010184:	f003 0303 	and.w	r3, r3, #3
 8010188:	4a53      	ldr	r2, [pc, #332]	; (80102d8 <UART_SetConfig+0x9d0>)
 801018a:	fa22 f303 	lsr.w	r3, r2, r3
 801018e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010190:	e00f      	b.n	80101b2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8010192:	4b51      	ldr	r3, [pc, #324]	; (80102d8 <UART_SetConfig+0x9d0>)
 8010194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010196:	e00c      	b.n	80101b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010198:	4b4c      	ldr	r3, [pc, #304]	; (80102cc <UART_SetConfig+0x9c4>)
 801019a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801019c:	e009      	b.n	80101b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801019e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80101a4:	e005      	b.n	80101b2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80101a6:	2300      	movs	r3, #0
 80101a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80101aa:	2301      	movs	r3, #1
 80101ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80101b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80101b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f000 80ea 	beq.w	801038e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101be:	4a44      	ldr	r2, [pc, #272]	; (80102d0 <UART_SetConfig+0x9c8>)
 80101c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101c4:	461a      	mov	r2, r3
 80101c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80101cc:	005a      	lsls	r2, r3, #1
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	085b      	lsrs	r3, r3, #1
 80101d4:	441a      	add	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	fbb2 f3f3 	udiv	r3, r2, r3
 80101de:	b29b      	uxth	r3, r3
 80101e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e4:	2b0f      	cmp	r3, #15
 80101e6:	d916      	bls.n	8010216 <UART_SetConfig+0x90e>
 80101e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101ee:	d212      	bcs.n	8010216 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80101f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	f023 030f 	bic.w	r3, r3, #15
 80101f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80101fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fc:	085b      	lsrs	r3, r3, #1
 80101fe:	b29b      	uxth	r3, r3
 8010200:	f003 0307 	and.w	r3, r3, #7
 8010204:	b29a      	uxth	r2, r3
 8010206:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010208:	4313      	orrs	r3, r2
 801020a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010212:	60da      	str	r2, [r3, #12]
 8010214:	e0bb      	b.n	801038e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010216:	2301      	movs	r3, #1
 8010218:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801021c:	e0b7      	b.n	801038e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 801021e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010222:	2b20      	cmp	r3, #32
 8010224:	dc4a      	bgt.n	80102bc <UART_SetConfig+0x9b4>
 8010226:	2b00      	cmp	r3, #0
 8010228:	f2c0 8086 	blt.w	8010338 <UART_SetConfig+0xa30>
 801022c:	2b20      	cmp	r3, #32
 801022e:	f200 8083 	bhi.w	8010338 <UART_SetConfig+0xa30>
 8010232:	a201      	add	r2, pc, #4	; (adr r2, 8010238 <UART_SetConfig+0x930>)
 8010234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010238:	080102c3 	.word	0x080102c3
 801023c:	080102dd 	.word	0x080102dd
 8010240:	08010339 	.word	0x08010339
 8010244:	08010339 	.word	0x08010339
 8010248:	080102e5 	.word	0x080102e5
 801024c:	08010339 	.word	0x08010339
 8010250:	08010339 	.word	0x08010339
 8010254:	08010339 	.word	0x08010339
 8010258:	080102f5 	.word	0x080102f5
 801025c:	08010339 	.word	0x08010339
 8010260:	08010339 	.word	0x08010339
 8010264:	08010339 	.word	0x08010339
 8010268:	08010339 	.word	0x08010339
 801026c:	08010339 	.word	0x08010339
 8010270:	08010339 	.word	0x08010339
 8010274:	08010339 	.word	0x08010339
 8010278:	08010305 	.word	0x08010305
 801027c:	08010339 	.word	0x08010339
 8010280:	08010339 	.word	0x08010339
 8010284:	08010339 	.word	0x08010339
 8010288:	08010339 	.word	0x08010339
 801028c:	08010339 	.word	0x08010339
 8010290:	08010339 	.word	0x08010339
 8010294:	08010339 	.word	0x08010339
 8010298:	08010339 	.word	0x08010339
 801029c:	08010339 	.word	0x08010339
 80102a0:	08010339 	.word	0x08010339
 80102a4:	08010339 	.word	0x08010339
 80102a8:	08010339 	.word	0x08010339
 80102ac:	08010339 	.word	0x08010339
 80102b0:	08010339 	.word	0x08010339
 80102b4:	08010339 	.word	0x08010339
 80102b8:	0801032b 	.word	0x0801032b
 80102bc:	2b40      	cmp	r3, #64	; 0x40
 80102be:	d037      	beq.n	8010330 <UART_SetConfig+0xa28>
 80102c0:	e03a      	b.n	8010338 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102c2:	f7f9 fd21 	bl	8009d08 <HAL_RCC_GetPCLK1Freq>
 80102c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80102c8:	e03c      	b.n	8010344 <UART_SetConfig+0xa3c>
 80102ca:	bf00      	nop
 80102cc:	003d0900 	.word	0x003d0900
 80102d0:	08027234 	.word	0x08027234
 80102d4:	58024400 	.word	0x58024400
 80102d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102dc:	f7f9 fd2a 	bl	8009d34 <HAL_RCC_GetPCLK2Freq>
 80102e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80102e2:	e02f      	b.n	8010344 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102e4:	f107 0314 	add.w	r3, r7, #20
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fb f961 	bl	800b5b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80102f2:	e027      	b.n	8010344 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102f4:	f107 0308 	add.w	r3, r7, #8
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fb faad 	bl	800b858 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010302:	e01f      	b.n	8010344 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010304:	4b2c      	ldr	r3, [pc, #176]	; (80103b8 <UART_SetConfig+0xab0>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f003 0320 	and.w	r3, r3, #32
 801030c:	2b00      	cmp	r3, #0
 801030e:	d009      	beq.n	8010324 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010310:	4b29      	ldr	r3, [pc, #164]	; (80103b8 <UART_SetConfig+0xab0>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	08db      	lsrs	r3, r3, #3
 8010316:	f003 0303 	and.w	r3, r3, #3
 801031a:	4a28      	ldr	r2, [pc, #160]	; (80103bc <UART_SetConfig+0xab4>)
 801031c:	fa22 f303 	lsr.w	r3, r2, r3
 8010320:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010322:	e00f      	b.n	8010344 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8010324:	4b25      	ldr	r3, [pc, #148]	; (80103bc <UART_SetConfig+0xab4>)
 8010326:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010328:	e00c      	b.n	8010344 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801032a:	4b25      	ldr	r3, [pc, #148]	; (80103c0 <UART_SetConfig+0xab8>)
 801032c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801032e:	e009      	b.n	8010344 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010334:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010336:	e005      	b.n	8010344 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8010338:	2300      	movs	r3, #0
 801033a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801033c:	2301      	movs	r3, #1
 801033e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010342:	bf00      	nop
    }

    if (pclk != 0U)
 8010344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010346:	2b00      	cmp	r3, #0
 8010348:	d021      	beq.n	801038e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801034e:	4a1d      	ldr	r2, [pc, #116]	; (80103c4 <UART_SetConfig+0xabc>)
 8010350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010354:	461a      	mov	r2, r3
 8010356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010358:	fbb3 f2f2 	udiv	r2, r3, r2
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	085b      	lsrs	r3, r3, #1
 8010362:	441a      	add	r2, r3
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	fbb2 f3f3 	udiv	r3, r2, r3
 801036c:	b29b      	uxth	r3, r3
 801036e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010372:	2b0f      	cmp	r3, #15
 8010374:	d908      	bls.n	8010388 <UART_SetConfig+0xa80>
 8010376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801037c:	d204      	bcs.n	8010388 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010384:	60da      	str	r2, [r3, #12]
 8010386:	e002      	b.n	801038e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010388:	2301      	movs	r3, #1
 801038a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2201      	movs	r2, #1
 8010392:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2201      	movs	r2, #1
 801039a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2200      	movs	r2, #0
 80103a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2200      	movs	r2, #0
 80103a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80103aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3738      	adds	r7, #56	; 0x38
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bdb0      	pop	{r4, r5, r7, pc}
 80103b6:	bf00      	nop
 80103b8:	58024400 	.word	0x58024400
 80103bc:	03d09000 	.word	0x03d09000
 80103c0:	003d0900 	.word	0x003d0900
 80103c4:	08027234 	.word	0x08027234

080103c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d4:	f003 0301 	and.w	r3, r3, #1
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00a      	beq.n	80103f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	430a      	orrs	r2, r1
 80103f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f6:	f003 0302 	and.w	r3, r3, #2
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00a      	beq.n	8010414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	430a      	orrs	r2, r1
 8010412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010418:	f003 0304 	and.w	r3, r3, #4
 801041c:	2b00      	cmp	r3, #0
 801041e:	d00a      	beq.n	8010436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	430a      	orrs	r2, r1
 8010434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801043a:	f003 0308 	and.w	r3, r3, #8
 801043e:	2b00      	cmp	r3, #0
 8010440:	d00a      	beq.n	8010458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	430a      	orrs	r2, r1
 8010456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801045c:	f003 0310 	and.w	r3, r3, #16
 8010460:	2b00      	cmp	r3, #0
 8010462:	d00a      	beq.n	801047a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	689b      	ldr	r3, [r3, #8]
 801046a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	430a      	orrs	r2, r1
 8010478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801047e:	f003 0320 	and.w	r3, r3, #32
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00a      	beq.n	801049c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	430a      	orrs	r2, r1
 801049a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d01a      	beq.n	80104de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	430a      	orrs	r2, r1
 80104bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104c6:	d10a      	bne.n	80104de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	430a      	orrs	r2, r1
 80104dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00a      	beq.n	8010500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	430a      	orrs	r2, r1
 80104fe:	605a      	str	r2, [r3, #4]
  }
}
 8010500:	bf00      	nop
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr

0801050c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b086      	sub	sp, #24
 8010510:	af02      	add	r7, sp, #8
 8010512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2200      	movs	r2, #0
 8010518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801051c:	f7f3 fcc2 	bl	8003ea4 <HAL_GetTick>
 8010520:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f003 0308 	and.w	r3, r3, #8
 801052c:	2b08      	cmp	r3, #8
 801052e:	d10e      	bne.n	801054e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2200      	movs	r2, #0
 801053a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 f82f 	bl	80105a2 <UART_WaitOnFlagUntilTimeout>
 8010544:	4603      	mov	r3, r0
 8010546:	2b00      	cmp	r3, #0
 8010548:	d001      	beq.n	801054e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801054a:	2303      	movs	r3, #3
 801054c:	e025      	b.n	801059a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f003 0304 	and.w	r3, r3, #4
 8010558:	2b04      	cmp	r3, #4
 801055a:	d10e      	bne.n	801057a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801055c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2200      	movs	r2, #0
 8010566:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 f819 	bl	80105a2 <UART_WaitOnFlagUntilTimeout>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010576:	2303      	movs	r3, #3
 8010578:	e00f      	b.n	801059a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2220      	movs	r2, #32
 801057e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2220      	movs	r2, #32
 8010586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b084      	sub	sp, #16
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	60f8      	str	r0, [r7, #12]
 80105aa:	60b9      	str	r1, [r7, #8]
 80105ac:	603b      	str	r3, [r7, #0]
 80105ae:	4613      	mov	r3, r2
 80105b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105b2:	e062      	b.n	801067a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105b4:	69bb      	ldr	r3, [r7, #24]
 80105b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105ba:	d05e      	beq.n	801067a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105bc:	f7f3 fc72 	bl	8003ea4 <HAL_GetTick>
 80105c0:	4602      	mov	r2, r0
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	69ba      	ldr	r2, [r7, #24]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d302      	bcc.n	80105d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d11d      	bne.n	801060e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80105e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	689a      	ldr	r2, [r3, #8]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f022 0201 	bic.w	r2, r2, #1
 80105f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2220      	movs	r2, #32
 80105f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2220      	movs	r2, #32
 80105fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2200      	movs	r2, #0
 8010606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801060a:	2303      	movs	r3, #3
 801060c:	e045      	b.n	801069a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f003 0304 	and.w	r3, r3, #4
 8010618:	2b00      	cmp	r3, #0
 801061a:	d02e      	beq.n	801067a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	69db      	ldr	r3, [r3, #28]
 8010622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801062a:	d126      	bne.n	801067a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010634:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010644:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	689a      	ldr	r2, [r3, #8]
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	f022 0201 	bic.w	r2, r2, #1
 8010654:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2220      	movs	r2, #32
 801065a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2220      	movs	r2, #32
 8010662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2220      	movs	r2, #32
 801066a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2200      	movs	r2, #0
 8010672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010676:	2303      	movs	r3, #3
 8010678:	e00f      	b.n	801069a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	69da      	ldr	r2, [r3, #28]
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	4013      	ands	r3, r2
 8010684:	68ba      	ldr	r2, [r7, #8]
 8010686:	429a      	cmp	r2, r3
 8010688:	bf0c      	ite	eq
 801068a:	2301      	moveq	r3, #1
 801068c:	2300      	movne	r3, #0
 801068e:	b2db      	uxtb	r3, r3
 8010690:	461a      	mov	r2, r3
 8010692:	79fb      	ldrb	r3, [r7, #7]
 8010694:	429a      	cmp	r2, r3
 8010696:	d08d      	beq.n	80105b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80106a2:	b480      	push	{r7}
 80106a4:	b085      	sub	sp, #20
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d101      	bne.n	80106b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80106b4:	2302      	movs	r3, #2
 80106b6:	e027      	b.n	8010708 <HAL_UARTEx_DisableFifoMode+0x66>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2201      	movs	r2, #1
 80106bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2224      	movs	r2, #36	; 0x24
 80106c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f022 0201 	bic.w	r2, r2, #1
 80106de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80106e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2200      	movs	r2, #0
 80106ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2220      	movs	r2, #32
 80106fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2200      	movs	r2, #0
 8010702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010706:	2300      	movs	r3, #0
}
 8010708:	4618      	mov	r0, r3
 801070a:	3714      	adds	r7, #20
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr

08010714 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010724:	2b01      	cmp	r3, #1
 8010726:	d101      	bne.n	801072c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010728:	2302      	movs	r3, #2
 801072a:	e02d      	b.n	8010788 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2201      	movs	r2, #1
 8010730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2224      	movs	r2, #36	; 0x24
 8010738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f022 0201 	bic.w	r2, r2, #1
 8010752:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	689b      	ldr	r3, [r3, #8]
 801075a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	683a      	ldr	r2, [r7, #0]
 8010764:	430a      	orrs	r2, r1
 8010766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 f84f 	bl	801080c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2220      	movs	r2, #32
 801077a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2200      	movs	r2, #0
 8010782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010786:	2300      	movs	r3, #0
}
 8010788:	4618      	mov	r0, r3
 801078a:	3710      	adds	r7, #16
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d101      	bne.n	80107a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80107a4:	2302      	movs	r3, #2
 80107a6:	e02d      	b.n	8010804 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2201      	movs	r2, #1
 80107ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2224      	movs	r2, #36	; 0x24
 80107b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f022 0201 	bic.w	r2, r2, #1
 80107ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	689b      	ldr	r3, [r3, #8]
 80107d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	683a      	ldr	r2, [r7, #0]
 80107e0:	430a      	orrs	r2, r1
 80107e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 f811 	bl	801080c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	68fa      	ldr	r2, [r7, #12]
 80107f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2220      	movs	r2, #32
 80107f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010802:	2300      	movs	r3, #0
}
 8010804:	4618      	mov	r0, r3
 8010806:	3710      	adds	r7, #16
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010818:	2b00      	cmp	r3, #0
 801081a:	d108      	bne.n	801082e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2201      	movs	r2, #1
 8010820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2201      	movs	r2, #1
 8010828:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801082c:	e031      	b.n	8010892 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801082e:	2310      	movs	r3, #16
 8010830:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010832:	2310      	movs	r3, #16
 8010834:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	689b      	ldr	r3, [r3, #8]
 801083c:	0e5b      	lsrs	r3, r3, #25
 801083e:	b2db      	uxtb	r3, r3
 8010840:	f003 0307 	and.w	r3, r3, #7
 8010844:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	0f5b      	lsrs	r3, r3, #29
 801084e:	b2db      	uxtb	r3, r3
 8010850:	f003 0307 	and.w	r3, r3, #7
 8010854:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010856:	7bbb      	ldrb	r3, [r7, #14]
 8010858:	7b3a      	ldrb	r2, [r7, #12]
 801085a:	4911      	ldr	r1, [pc, #68]	; (80108a0 <UARTEx_SetNbDataToProcess+0x94>)
 801085c:	5c8a      	ldrb	r2, [r1, r2]
 801085e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010862:	7b3a      	ldrb	r2, [r7, #12]
 8010864:	490f      	ldr	r1, [pc, #60]	; (80108a4 <UARTEx_SetNbDataToProcess+0x98>)
 8010866:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010868:	fb93 f3f2 	sdiv	r3, r3, r2
 801086c:	b29a      	uxth	r2, r3
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010874:	7bfb      	ldrb	r3, [r7, #15]
 8010876:	7b7a      	ldrb	r2, [r7, #13]
 8010878:	4909      	ldr	r1, [pc, #36]	; (80108a0 <UARTEx_SetNbDataToProcess+0x94>)
 801087a:	5c8a      	ldrb	r2, [r1, r2]
 801087c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010880:	7b7a      	ldrb	r2, [r7, #13]
 8010882:	4908      	ldr	r1, [pc, #32]	; (80108a4 <UARTEx_SetNbDataToProcess+0x98>)
 8010884:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010886:	fb93 f3f2 	sdiv	r3, r3, r2
 801088a:	b29a      	uxth	r2, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010892:	bf00      	nop
 8010894:	3714      	adds	r7, #20
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	0802724c 	.word	0x0802724c
 80108a4:	08027254 	.word	0x08027254

080108a8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b087      	sub	sp, #28
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108bc:	683a      	ldr	r2, [r7, #0]
 80108be:	6812      	ldr	r2, [r2, #0]
 80108c0:	f023 0101 	bic.w	r1, r3, #1
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	2b08      	cmp	r3, #8
 80108d0:	d102      	bne.n	80108d8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80108d2:	2340      	movs	r3, #64	; 0x40
 80108d4:	617b      	str	r3, [r7, #20]
 80108d6:	e001      	b.n	80108dc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80108d8:	2300      	movs	r3, #0
 80108da:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80108e8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80108ee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80108f4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80108fa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8010900:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8010906:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 801090c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8010912:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8010918:	431a      	orrs	r2, r3
              Init->WriteBurst);
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 801091e:	4313      	orrs	r3, r2
 8010920:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010926:	693a      	ldr	r2, [r7, #16]
 8010928:	4313      	orrs	r3, r2
 801092a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010930:	693a      	ldr	r2, [r7, #16]
 8010932:	4313      	orrs	r3, r2
 8010934:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801093a:	693a      	ldr	r2, [r7, #16]
 801093c:	4313      	orrs	r3, r2
 801093e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8010940:	4b20      	ldr	r3, [pc, #128]	; (80109c4 <FMC_NORSRAM_Init+0x11c>)
 8010942:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801094a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010952:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 801095a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	43db      	mvns	r3, r3
 801096a:	ea02 0103 	and.w	r1, r2, r3
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	681a      	ldr	r2, [r3, #0]
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	4319      	orrs	r1, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010984:	d10c      	bne.n	80109a0 <FMC_NORSRAM_Init+0xf8>
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d008      	beq.n	80109a0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801099a:	431a      	orrs	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d006      	beq.n	80109b6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109b0:	431a      	orrs	r2, r3
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80109b6:	2300      	movs	r3, #0
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	371c      	adds	r7, #28
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr
 80109c4:	0008fb7f 	.word	0x0008fb7f

080109c8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b087      	sub	sp, #28
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	1c5a      	adds	r2, r3, #1
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109de:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	011b      	lsls	r3, r3, #4
 80109ec:	431a      	orrs	r2, r3
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	689b      	ldr	r3, [r3, #8]
 80109f2:	021b      	lsls	r3, r3, #8
 80109f4:	431a      	orrs	r2, r3
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	041b      	lsls	r3, r3, #16
 80109fc:	431a      	orrs	r2, r3
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	691b      	ldr	r3, [r3, #16]
 8010a02:	3b01      	subs	r3, #1
 8010a04:	051b      	lsls	r3, r3, #20
 8010a06:	431a      	orrs	r2, r3
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	695b      	ldr	r3, [r3, #20]
 8010a0c:	3b02      	subs	r3, #2
 8010a0e:	061b      	lsls	r3, r3, #24
 8010a10:	431a      	orrs	r2, r3
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	699b      	ldr	r3, [r3, #24]
 8010a16:	4313      	orrs	r3, r2
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	3201      	adds	r2, #1
 8010a1c:	4319      	orrs	r1, r3
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a30:	d113      	bne.n	8010a5a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a3a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	691b      	ldr	r3, [r3, #16]
 8010a40:	3b01      	subs	r3, #1
 8010a42:	051b      	lsls	r3, r3, #20
 8010a44:	697a      	ldr	r2, [r7, #20]
 8010a46:	4313      	orrs	r3, r2
 8010a48:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	431a      	orrs	r2, r3
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	371c      	adds	r7, #28
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
 8010a74:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010a7c:	d11d      	bne.n	8010aba <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	687a      	ldr	r2, [r7, #4]
 8010a82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010a86:	4b13      	ldr	r3, [pc, #76]	; (8010ad4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8010a88:	4013      	ands	r3, r2
 8010a8a:	68ba      	ldr	r2, [r7, #8]
 8010a8c:	6811      	ldr	r1, [r2, #0]
 8010a8e:	68ba      	ldr	r2, [r7, #8]
 8010a90:	6852      	ldr	r2, [r2, #4]
 8010a92:	0112      	lsls	r2, r2, #4
 8010a94:	4311      	orrs	r1, r2
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	6892      	ldr	r2, [r2, #8]
 8010a9a:	0212      	lsls	r2, r2, #8
 8010a9c:	4311      	orrs	r1, r2
 8010a9e:	68ba      	ldr	r2, [r7, #8]
 8010aa0:	6992      	ldr	r2, [r2, #24]
 8010aa2:	4311      	orrs	r1, r2
 8010aa4:	68ba      	ldr	r2, [r7, #8]
 8010aa6:	68d2      	ldr	r2, [r2, #12]
 8010aa8:	0412      	lsls	r2, r2, #16
 8010aaa:	430a      	orrs	r2, r1
 8010aac:	ea43 0102 	orr.w	r1, r3, r2
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010ab8:	e005      	b.n	8010ac6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8010ac6:	2300      	movs	r3, #0
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3714      	adds	r7, #20
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr
 8010ad4:	cff00000 	.word	0xcff00000

08010ad8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8010ade:	4b8d      	ldr	r3, [pc, #564]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010ae0:	22c0      	movs	r2, #192	; 0xc0
 8010ae2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8010ae4:	4b8b      	ldr	r3, [pc, #556]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010ae6:	22a8      	movs	r2, #168	; 0xa8
 8010ae8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8010aea:	4b8a      	ldr	r3, [pc, #552]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010aec:	2201      	movs	r2, #1
 8010aee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8010af0:	4b88      	ldr	r3, [pc, #544]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010af2:	2201      	movs	r2, #1
 8010af4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8010af6:	4b88      	ldr	r3, [pc, #544]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010af8:	22ff      	movs	r2, #255	; 0xff
 8010afa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8010afc:	4b86      	ldr	r3, [pc, #536]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010afe:	22ff      	movs	r2, #255	; 0xff
 8010b00:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8010b02:	4b85      	ldr	r3, [pc, #532]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010b04:	22ff      	movs	r2, #255	; 0xff
 8010b06:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8010b08:	4b83      	ldr	r3, [pc, #524]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8010b0e:	4b83      	ldr	r3, [pc, #524]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010b10:	2200      	movs	r2, #0
 8010b12:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8010b14:	4b81      	ldr	r3, [pc, #516]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010b16:	2200      	movs	r2, #0
 8010b18:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8010b1a:	4b80      	ldr	r3, [pc, #512]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8010b20:	4b7e      	ldr	r3, [pc, #504]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8010b26:	f002 fc8b 	bl	8013440 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8010b2a:	4b7a      	ldr	r3, [pc, #488]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	061a      	lsls	r2, r3, #24
 8010b30:	4b78      	ldr	r3, [pc, #480]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b32:	785b      	ldrb	r3, [r3, #1]
 8010b34:	041b      	lsls	r3, r3, #16
 8010b36:	431a      	orrs	r2, r3
 8010b38:	4b76      	ldr	r3, [pc, #472]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b3a:	789b      	ldrb	r3, [r3, #2]
 8010b3c:	021b      	lsls	r3, r3, #8
 8010b3e:	4313      	orrs	r3, r2
 8010b40:	4a74      	ldr	r2, [pc, #464]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b42:	78d2      	ldrb	r2, [r2, #3]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	061a      	lsls	r2, r3, #24
 8010b48:	4b72      	ldr	r3, [pc, #456]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	0619      	lsls	r1, r3, #24
 8010b4e:	4b71      	ldr	r3, [pc, #452]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b50:	785b      	ldrb	r3, [r3, #1]
 8010b52:	041b      	lsls	r3, r3, #16
 8010b54:	4319      	orrs	r1, r3
 8010b56:	4b6f      	ldr	r3, [pc, #444]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b58:	789b      	ldrb	r3, [r3, #2]
 8010b5a:	021b      	lsls	r3, r3, #8
 8010b5c:	430b      	orrs	r3, r1
 8010b5e:	496d      	ldr	r1, [pc, #436]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b60:	78c9      	ldrb	r1, [r1, #3]
 8010b62:	430b      	orrs	r3, r1
 8010b64:	021b      	lsls	r3, r3, #8
 8010b66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010b6a:	431a      	orrs	r2, r3
 8010b6c:	4b69      	ldr	r3, [pc, #420]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	0619      	lsls	r1, r3, #24
 8010b72:	4b68      	ldr	r3, [pc, #416]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b74:	785b      	ldrb	r3, [r3, #1]
 8010b76:	041b      	lsls	r3, r3, #16
 8010b78:	4319      	orrs	r1, r3
 8010b7a:	4b66      	ldr	r3, [pc, #408]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b7c:	789b      	ldrb	r3, [r3, #2]
 8010b7e:	021b      	lsls	r3, r3, #8
 8010b80:	430b      	orrs	r3, r1
 8010b82:	4964      	ldr	r1, [pc, #400]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b84:	78c9      	ldrb	r1, [r1, #3]
 8010b86:	430b      	orrs	r3, r1
 8010b88:	0a1b      	lsrs	r3, r3, #8
 8010b8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010b8e:	431a      	orrs	r2, r3
 8010b90:	4b60      	ldr	r3, [pc, #384]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b92:	781b      	ldrb	r3, [r3, #0]
 8010b94:	0619      	lsls	r1, r3, #24
 8010b96:	4b5f      	ldr	r3, [pc, #380]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010b98:	785b      	ldrb	r3, [r3, #1]
 8010b9a:	041b      	lsls	r3, r3, #16
 8010b9c:	4319      	orrs	r1, r3
 8010b9e:	4b5d      	ldr	r3, [pc, #372]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010ba0:	789b      	ldrb	r3, [r3, #2]
 8010ba2:	021b      	lsls	r3, r3, #8
 8010ba4:	430b      	orrs	r3, r1
 8010ba6:	495b      	ldr	r1, [pc, #364]	; (8010d14 <MX_LWIP_Init+0x23c>)
 8010ba8:	78c9      	ldrb	r1, [r1, #3]
 8010baa:	430b      	orrs	r3, r1
 8010bac:	0e1b      	lsrs	r3, r3, #24
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	4a5b      	ldr	r2, [pc, #364]	; (8010d20 <MX_LWIP_Init+0x248>)
 8010bb2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8010bb4:	4b58      	ldr	r3, [pc, #352]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	061a      	lsls	r2, r3, #24
 8010bba:	4b57      	ldr	r3, [pc, #348]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bbc:	785b      	ldrb	r3, [r3, #1]
 8010bbe:	041b      	lsls	r3, r3, #16
 8010bc0:	431a      	orrs	r2, r3
 8010bc2:	4b55      	ldr	r3, [pc, #340]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bc4:	789b      	ldrb	r3, [r3, #2]
 8010bc6:	021b      	lsls	r3, r3, #8
 8010bc8:	4313      	orrs	r3, r2
 8010bca:	4a53      	ldr	r2, [pc, #332]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bcc:	78d2      	ldrb	r2, [r2, #3]
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	061a      	lsls	r2, r3, #24
 8010bd2:	4b51      	ldr	r3, [pc, #324]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	0619      	lsls	r1, r3, #24
 8010bd8:	4b4f      	ldr	r3, [pc, #316]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bda:	785b      	ldrb	r3, [r3, #1]
 8010bdc:	041b      	lsls	r3, r3, #16
 8010bde:	4319      	orrs	r1, r3
 8010be0:	4b4d      	ldr	r3, [pc, #308]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010be2:	789b      	ldrb	r3, [r3, #2]
 8010be4:	021b      	lsls	r3, r3, #8
 8010be6:	430b      	orrs	r3, r1
 8010be8:	494b      	ldr	r1, [pc, #300]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bea:	78c9      	ldrb	r1, [r1, #3]
 8010bec:	430b      	orrs	r3, r1
 8010bee:	021b      	lsls	r3, r3, #8
 8010bf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010bf4:	431a      	orrs	r2, r3
 8010bf6:	4b48      	ldr	r3, [pc, #288]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	0619      	lsls	r1, r3, #24
 8010bfc:	4b46      	ldr	r3, [pc, #280]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010bfe:	785b      	ldrb	r3, [r3, #1]
 8010c00:	041b      	lsls	r3, r3, #16
 8010c02:	4319      	orrs	r1, r3
 8010c04:	4b44      	ldr	r3, [pc, #272]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010c06:	789b      	ldrb	r3, [r3, #2]
 8010c08:	021b      	lsls	r3, r3, #8
 8010c0a:	430b      	orrs	r3, r1
 8010c0c:	4942      	ldr	r1, [pc, #264]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010c0e:	78c9      	ldrb	r1, [r1, #3]
 8010c10:	430b      	orrs	r3, r1
 8010c12:	0a1b      	lsrs	r3, r3, #8
 8010c14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010c18:	431a      	orrs	r2, r3
 8010c1a:	4b3f      	ldr	r3, [pc, #252]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	0619      	lsls	r1, r3, #24
 8010c20:	4b3d      	ldr	r3, [pc, #244]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010c22:	785b      	ldrb	r3, [r3, #1]
 8010c24:	041b      	lsls	r3, r3, #16
 8010c26:	4319      	orrs	r1, r3
 8010c28:	4b3b      	ldr	r3, [pc, #236]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010c2a:	789b      	ldrb	r3, [r3, #2]
 8010c2c:	021b      	lsls	r3, r3, #8
 8010c2e:	430b      	orrs	r3, r1
 8010c30:	4939      	ldr	r1, [pc, #228]	; (8010d18 <MX_LWIP_Init+0x240>)
 8010c32:	78c9      	ldrb	r1, [r1, #3]
 8010c34:	430b      	orrs	r3, r1
 8010c36:	0e1b      	lsrs	r3, r3, #24
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	4a3a      	ldr	r2, [pc, #232]	; (8010d24 <MX_LWIP_Init+0x24c>)
 8010c3c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8010c3e:	4b37      	ldr	r3, [pc, #220]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	061a      	lsls	r2, r3, #24
 8010c44:	4b35      	ldr	r3, [pc, #212]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c46:	785b      	ldrb	r3, [r3, #1]
 8010c48:	041b      	lsls	r3, r3, #16
 8010c4a:	431a      	orrs	r2, r3
 8010c4c:	4b33      	ldr	r3, [pc, #204]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c4e:	789b      	ldrb	r3, [r3, #2]
 8010c50:	021b      	lsls	r3, r3, #8
 8010c52:	4313      	orrs	r3, r2
 8010c54:	4a31      	ldr	r2, [pc, #196]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c56:	78d2      	ldrb	r2, [r2, #3]
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	061a      	lsls	r2, r3, #24
 8010c5c:	4b2f      	ldr	r3, [pc, #188]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	0619      	lsls	r1, r3, #24
 8010c62:	4b2e      	ldr	r3, [pc, #184]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c64:	785b      	ldrb	r3, [r3, #1]
 8010c66:	041b      	lsls	r3, r3, #16
 8010c68:	4319      	orrs	r1, r3
 8010c6a:	4b2c      	ldr	r3, [pc, #176]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c6c:	789b      	ldrb	r3, [r3, #2]
 8010c6e:	021b      	lsls	r3, r3, #8
 8010c70:	430b      	orrs	r3, r1
 8010c72:	492a      	ldr	r1, [pc, #168]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c74:	78c9      	ldrb	r1, [r1, #3]
 8010c76:	430b      	orrs	r3, r1
 8010c78:	021b      	lsls	r3, r3, #8
 8010c7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010c7e:	431a      	orrs	r2, r3
 8010c80:	4b26      	ldr	r3, [pc, #152]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	0619      	lsls	r1, r3, #24
 8010c86:	4b25      	ldr	r3, [pc, #148]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c88:	785b      	ldrb	r3, [r3, #1]
 8010c8a:	041b      	lsls	r3, r3, #16
 8010c8c:	4319      	orrs	r1, r3
 8010c8e:	4b23      	ldr	r3, [pc, #140]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c90:	789b      	ldrb	r3, [r3, #2]
 8010c92:	021b      	lsls	r3, r3, #8
 8010c94:	430b      	orrs	r3, r1
 8010c96:	4921      	ldr	r1, [pc, #132]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010c98:	78c9      	ldrb	r1, [r1, #3]
 8010c9a:	430b      	orrs	r3, r1
 8010c9c:	0a1b      	lsrs	r3, r3, #8
 8010c9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010ca2:	431a      	orrs	r2, r3
 8010ca4:	4b1d      	ldr	r3, [pc, #116]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	0619      	lsls	r1, r3, #24
 8010caa:	4b1c      	ldr	r3, [pc, #112]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010cac:	785b      	ldrb	r3, [r3, #1]
 8010cae:	041b      	lsls	r3, r3, #16
 8010cb0:	4319      	orrs	r1, r3
 8010cb2:	4b1a      	ldr	r3, [pc, #104]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010cb4:	789b      	ldrb	r3, [r3, #2]
 8010cb6:	021b      	lsls	r3, r3, #8
 8010cb8:	430b      	orrs	r3, r1
 8010cba:	4918      	ldr	r1, [pc, #96]	; (8010d1c <MX_LWIP_Init+0x244>)
 8010cbc:	78c9      	ldrb	r1, [r1, #3]
 8010cbe:	430b      	orrs	r3, r1
 8010cc0:	0e1b      	lsrs	r3, r3, #24
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	4a18      	ldr	r2, [pc, #96]	; (8010d28 <MX_LWIP_Init+0x250>)
 8010cc6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8010cc8:	4b18      	ldr	r3, [pc, #96]	; (8010d2c <MX_LWIP_Init+0x254>)
 8010cca:	9302      	str	r3, [sp, #8]
 8010ccc:	4b18      	ldr	r3, [pc, #96]	; (8010d30 <MX_LWIP_Init+0x258>)
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	4b14      	ldr	r3, [pc, #80]	; (8010d28 <MX_LWIP_Init+0x250>)
 8010cd6:	4a13      	ldr	r2, [pc, #76]	; (8010d24 <MX_LWIP_Init+0x24c>)
 8010cd8:	4911      	ldr	r1, [pc, #68]	; (8010d20 <MX_LWIP_Init+0x248>)
 8010cda:	4816      	ldr	r0, [pc, #88]	; (8010d34 <MX_LWIP_Init+0x25c>)
 8010cdc:	f004 f9a8 	bl	8015030 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8010ce0:	4814      	ldr	r0, [pc, #80]	; (8010d34 <MX_LWIP_Init+0x25c>)
 8010ce2:	f004 fb57 	bl	8015394 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8010ce6:	4b13      	ldr	r3, [pc, #76]	; (8010d34 <MX_LWIP_Init+0x25c>)
 8010ce8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cec:	089b      	lsrs	r3, r3, #2
 8010cee:	f003 0301 	and.w	r3, r3, #1
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d003      	beq.n	8010d00 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8010cf8:	480e      	ldr	r0, [pc, #56]	; (8010d34 <MX_LWIP_Init+0x25c>)
 8010cfa:	f004 fb5b 	bl	80153b4 <netif_set_up>
 8010cfe:	e002      	b.n	8010d06 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8010d00:	480c      	ldr	r0, [pc, #48]	; (8010d34 <MX_LWIP_Init+0x25c>)
 8010d02:	f004 fbc3 	bl	801548c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8010d06:	490c      	ldr	r1, [pc, #48]	; (8010d38 <MX_LWIP_Init+0x260>)
 8010d08:	480a      	ldr	r0, [pc, #40]	; (8010d34 <MX_LWIP_Init+0x25c>)
 8010d0a:	f004 fc55 	bl	80155b8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8010d0e:	bf00      	nop
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}
 8010d14:	2400597c 	.word	0x2400597c
 8010d18:	24005978 	.word	0x24005978
 8010d1c:	24005938 	.word	0x24005938
 8010d20:	24005970 	.word	0x24005970
 8010d24:	24005980 	.word	0x24005980
 8010d28:	24005984 	.word	0x24005984
 8010d2c:	08012db5 	.word	0x08012db5
 8010d30:	080112b5 	.word	0x080112b5
 8010d34:	2400593c 	.word	0x2400593c
 8010d38:	08010d8d 	.word	0x08010d8d

08010d3c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8010d44:	f7f3 f8ae 	bl	8003ea4 <HAL_GetTick>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	4b08      	ldr	r3, [pc, #32]	; (8010d6c <Ethernet_Link_Periodic_Handle+0x30>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	1ad3      	subs	r3, r2, r3
 8010d50:	2b63      	cmp	r3, #99	; 0x63
 8010d52:	d907      	bls.n	8010d64 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8010d54:	f7f3 f8a6 	bl	8003ea4 <HAL_GetTick>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	4a04      	ldr	r2, [pc, #16]	; (8010d6c <Ethernet_Link_Periodic_Handle+0x30>)
 8010d5c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f000 fb3c 	bl	80113dc <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8010d64:	bf00      	nop
 8010d66:	3708      	adds	r7, #8
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	24005974 	.word	0x24005974

08010d70 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8010d74:	4804      	ldr	r0, [pc, #16]	; (8010d88 <MX_LWIP_Process+0x18>)
 8010d76:	f000 fa7d 	bl	8011274 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8010d7a:	f00b fd3b 	bl	801c7f4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8010d7e:	4802      	ldr	r0, [pc, #8]	; (8010d88 <MX_LWIP_Process+0x18>)
 8010d80:	f7ff ffdc 	bl	8010d3c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8010d84:	bf00      	nop
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	2400593c 	.word	0x2400593c

08010d8c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8010d94:	bf00      	nop
 8010d96:	370c      	adds	r7, #12
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr

08010da0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b08e      	sub	sp, #56	; 0x38
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010dac:	2200      	movs	r2, #0
 8010dae:	601a      	str	r2, [r3, #0]
 8010db0:	605a      	str	r2, [r3, #4]
 8010db2:	609a      	str	r2, [r3, #8]
 8010db4:	60da      	str	r2, [r3, #12]
 8010db6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	4a4d      	ldr	r2, [pc, #308]	; (8010ef4 <HAL_ETH_MspInit+0x154>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	f040 8093 	bne.w	8010eea <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8010dc4:	4b4c      	ldr	r3, [pc, #304]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010dca:	4a4b      	ldr	r2, [pc, #300]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010dd4:	4b48      	ldr	r3, [pc, #288]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010dde:	623b      	str	r3, [r7, #32]
 8010de0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8010de2:	4b45      	ldr	r3, [pc, #276]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010de8:	4a43      	ldr	r2, [pc, #268]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010dee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010df2:	4b41      	ldr	r3, [pc, #260]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010dfc:	61fb      	str	r3, [r7, #28]
 8010dfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8010e00:	4b3d      	ldr	r3, [pc, #244]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010e06:	4a3c      	ldr	r2, [pc, #240]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010e0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010e10:	4b39      	ldr	r3, [pc, #228]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e1a:	61bb      	str	r3, [r7, #24]
 8010e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010e1e:	4b36      	ldr	r3, [pc, #216]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010e24:	4a34      	ldr	r2, [pc, #208]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010e2e:	4b32      	ldr	r3, [pc, #200]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e38:	617b      	str	r3, [r7, #20]
 8010e3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010e3c:	4b2e      	ldr	r3, [pc, #184]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010e42:	4a2d      	ldr	r2, [pc, #180]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e44:	f043 0304 	orr.w	r3, r3, #4
 8010e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010e4c:	4b2a      	ldr	r3, [pc, #168]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010e52:	f003 0304 	and.w	r3, r3, #4
 8010e56:	613b      	str	r3, [r7, #16]
 8010e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e5a:	4b27      	ldr	r3, [pc, #156]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010e60:	4a25      	ldr	r2, [pc, #148]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e62:	f043 0301 	orr.w	r3, r3, #1
 8010e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010e6a:	4b23      	ldr	r3, [pc, #140]	; (8010ef8 <HAL_ETH_MspInit+0x158>)
 8010e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010e70:	f003 0301 	and.w	r3, r3, #1
 8010e74:	60fb      	str	r3, [r7, #12]
 8010e76:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ETH_CRS_DV
    PA1     ------> ETH_REF_CLK
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8010e78:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8010e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e7e:	2302      	movs	r3, #2
 8010e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e82:	2300      	movs	r3, #0
 8010e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e86:	2303      	movs	r3, #3
 8010e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010e8a:	230b      	movs	r3, #11
 8010e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e92:	4619      	mov	r1, r3
 8010e94:	4819      	ldr	r0, [pc, #100]	; (8010efc <HAL_ETH_MspInit+0x15c>)
 8010e96:	f7f7 fd37 	bl	8008908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8010e9a:	2332      	movs	r3, #50	; 0x32
 8010e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e9e:	2302      	movs	r3, #2
 8010ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010eaa:	230b      	movs	r3, #11
 8010eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	4812      	ldr	r0, [pc, #72]	; (8010f00 <HAL_ETH_MspInit+0x160>)
 8010eb6:	f7f7 fd27 	bl	8008908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1|GPIO_PIN_2;
 8010eba:	2386      	movs	r3, #134	; 0x86
 8010ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ebe:	2302      	movs	r3, #2
 8010ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ec6:	2303      	movs	r3, #3
 8010ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010eca:	230b      	movs	r3, #11
 8010ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	480b      	ldr	r0, [pc, #44]	; (8010f04 <HAL_ETH_MspInit+0x164>)
 8010ed6:	f7f7 fd17 	bl	8008908 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8010eda:	2200      	movs	r2, #0
 8010edc:	2101      	movs	r1, #1
 8010ede:	203d      	movs	r0, #61	; 0x3d
 8010ee0:	f7f3 fc07 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8010ee4:	203d      	movs	r0, #61	; 0x3d
 8010ee6:	f7f3 fc1e 	bl	8004726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8010eea:	bf00      	nop
 8010eec:	3738      	adds	r7, #56	; 0x38
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	40028000 	.word	0x40028000
 8010ef8:	58024400 	.word	0x58024400
 8010efc:	58021800 	.word	0x58021800
 8010f00:	58020800 	.word	0x58020800
 8010f04:	58020000 	.word	0x58020000

08010f08 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 8010f14:	2300      	movs	r3, #0
 8010f16:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8010f18:	4b4a      	ldr	r3, [pc, #296]	; (8011044 <low_level_init+0x13c>)
 8010f1a:	4a4b      	ldr	r2, [pc, #300]	; (8011048 <low_level_init+0x140>)
 8010f1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8010f22:	2380      	movs	r3, #128	; 0x80
 8010f24:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8010f26:	23e1      	movs	r3, #225	; 0xe1
 8010f28:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8010f32:	2300      	movs	r3, #0
 8010f34:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8010f36:	4a43      	ldr	r2, [pc, #268]	; (8011044 <low_level_init+0x13c>)
 8010f38:	f107 030c 	add.w	r3, r7, #12
 8010f3c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8010f3e:	4b41      	ldr	r3, [pc, #260]	; (8011044 <low_level_init+0x13c>)
 8010f40:	2201      	movs	r2, #1
 8010f42:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8010f44:	4b3f      	ldr	r3, [pc, #252]	; (8011044 <low_level_init+0x13c>)
 8010f46:	4a41      	ldr	r2, [pc, #260]	; (801104c <low_level_init+0x144>)
 8010f48:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8010f4a:	4b3e      	ldr	r3, [pc, #248]	; (8011044 <low_level_init+0x13c>)
 8010f4c:	4a40      	ldr	r2, [pc, #256]	; (8011050 <low_level_init+0x148>)
 8010f4e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8010f50:	4b3c      	ldr	r3, [pc, #240]	; (8011044 <low_level_init+0x13c>)
 8010f52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010f56:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8010f58:	483a      	ldr	r0, [pc, #232]	; (8011044 <low_level_init+0x13c>)
 8010f5a:	f7f5 fe5d 	bl	8006c18 <HAL_ETH_Init>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8010f62:	2234      	movs	r2, #52	; 0x34
 8010f64:	2100      	movs	r1, #0
 8010f66:	483b      	ldr	r0, [pc, #236]	; (8011054 <low_level_init+0x14c>)
 8010f68:	f00d f964 	bl	801e234 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8010f6c:	4b39      	ldr	r3, [pc, #228]	; (8011054 <low_level_init+0x14c>)
 8010f6e:	2221      	movs	r2, #33	; 0x21
 8010f70:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8010f72:	4b38      	ldr	r3, [pc, #224]	; (8011054 <low_level_init+0x14c>)
 8010f74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8010f78:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8010f7a:	4b36      	ldr	r3, [pc, #216]	; (8011054 <low_level_init+0x14c>)
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8010f80:	4835      	ldr	r0, [pc, #212]	; (8011058 <low_level_init+0x150>)
 8010f82:	f003 ff1d 	bl	8014dc0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2206      	movs	r2, #6
 8010f8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8010f8e:	4b2d      	ldr	r3, [pc, #180]	; (8011044 <low_level_init+0x13c>)
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	781a      	ldrb	r2, [r3, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8010f9a:	4b2a      	ldr	r3, [pc, #168]	; (8011044 <low_level_init+0x13c>)
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	785a      	ldrb	r2, [r3, #1]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8010fa6:	4b27      	ldr	r3, [pc, #156]	; (8011044 <low_level_init+0x13c>)
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	789a      	ldrb	r2, [r3, #2]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8010fb2:	4b24      	ldr	r3, [pc, #144]	; (8011044 <low_level_init+0x13c>)
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	78da      	ldrb	r2, [r3, #3]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8010fbe:	4b21      	ldr	r3, [pc, #132]	; (8011044 <low_level_init+0x13c>)
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	791a      	ldrb	r2, [r3, #4]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010fca:	4b1e      	ldr	r3, [pc, #120]	; (8011044 <low_level_init+0x13c>)
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	795a      	ldrb	r2, [r3, #5]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010fdc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fe4:	f043 030a 	orr.w	r3, r3, #10
 8010fe8:	b2da      	uxtb	r2, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	617b      	str	r3, [r7, #20]
 8010ff4:	e00e      	b.n	8011014 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8010ffc:	fb02 f303 	mul.w	r3, r2, r3
 8011000:	4a16      	ldr	r2, [pc, #88]	; (801105c <low_level_init+0x154>)
 8011002:	441a      	add	r2, r3
 8011004:	2300      	movs	r3, #0
 8011006:	6979      	ldr	r1, [r7, #20]
 8011008:	480e      	ldr	r0, [pc, #56]	; (8011044 <low_level_init+0x13c>)
 801100a:	f7f5 fedf 	bl	8006dcc <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	3301      	adds	r3, #1
 8011012:	617b      	str	r3, [r7, #20]
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	2b03      	cmp	r3, #3
 8011018:	d9ed      	bls.n	8010ff6 <low_level_init+0xee>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 801101a:	4911      	ldr	r1, [pc, #68]	; (8011060 <low_level_init+0x158>)
 801101c:	4811      	ldr	r0, [pc, #68]	; (8011064 <low_level_init+0x15c>)
 801101e:	f7f2 fd59 	bl	8003ad4 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8011022:	4810      	ldr	r0, [pc, #64]	; (8011064 <low_level_init+0x15c>)
 8011024:	f7f2 fd88 	bl	8003b38 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8011028:	7cfb      	ldrb	r3, [r7, #19]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d103      	bne.n	8011036 <low_level_init+0x12e>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 f9d4 	bl	80113dc <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011034:	e001      	b.n	801103a <low_level_init+0x132>
    Error_Handler();
 8011036:	f7f1 fbf5 	bl	8002824 <Error_Handler>
}
 801103a:	bf00      	nop
 801103c:	3718      	adds	r7, #24
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	24005a74 	.word	0x24005a74
 8011048:	40028000 	.word	0x40028000
 801104c:	30040060 	.word	0x30040060
 8011050:	30040000 	.word	0x30040000
 8011054:	24005afc 	.word	0x24005afc
 8011058:	0802725c 	.word	0x0802725c
 801105c:	30040200 	.word	0x30040200
 8011060:	24000010 	.word	0x24000010
 8011064:	24005a54 	.word	0x24005a54

08011068 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b092      	sub	sp, #72	; 0x48
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8011072:	2300      	movs	r3, #0
 8011074:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 8011076:	2300      	movs	r3, #0
 8011078:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801107c:	f107 030c 	add.w	r3, r7, #12
 8011080:	2230      	movs	r2, #48	; 0x30
 8011082:	2100      	movs	r1, #0
 8011084:	4618      	mov	r0, r3
 8011086:	f00d f8d5 	bl	801e234 <memset>

  for(q = p; q != NULL; q = q->next)
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	643b      	str	r3, [r7, #64]	; 0x40
 801108e:	e049      	b.n	8011124 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 8011090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011092:	2b03      	cmp	r3, #3
 8011094:	d902      	bls.n	801109c <low_level_output+0x34>
      return ERR_IF;
 8011096:	f06f 030b 	mvn.w	r3, #11
 801109a:	e056      	b.n	801114a <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 801109c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801109e:	6859      	ldr	r1, [r3, #4]
 80110a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110a2:	4613      	mov	r3, r2
 80110a4:	005b      	lsls	r3, r3, #1
 80110a6:	4413      	add	r3, r2
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80110ae:	4413      	add	r3, r2
 80110b0:	3b3c      	subs	r3, #60	; 0x3c
 80110b2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80110b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110b6:	895b      	ldrh	r3, [r3, #10]
 80110b8:	4619      	mov	r1, r3
 80110ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110bc:	4613      	mov	r3, r2
 80110be:	005b      	lsls	r3, r3, #1
 80110c0:	4413      	add	r3, r2
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80110c8:	4413      	add	r3, r2
 80110ca:	3b38      	subs	r3, #56	; 0x38
 80110cc:	6019      	str	r1, [r3, #0]

    if(i>0)
 80110ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d012      	beq.n	80110fa <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80110d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110d6:	1e5a      	subs	r2, r3, #1
 80110d8:	f107 000c 	add.w	r0, r7, #12
 80110dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110de:	460b      	mov	r3, r1
 80110e0:	005b      	lsls	r3, r3, #1
 80110e2:	440b      	add	r3, r1
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	18c1      	adds	r1, r0, r3
 80110e8:	4613      	mov	r3, r2
 80110ea:	005b      	lsls	r3, r3, #1
 80110ec:	4413      	add	r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80110f4:	4413      	add	r3, r2
 80110f6:	3b34      	subs	r3, #52	; 0x34
 80110f8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80110fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d10a      	bne.n	8011118 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8011102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011104:	4613      	mov	r3, r2
 8011106:	005b      	lsls	r3, r3, #1
 8011108:	4413      	add	r3, r2
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011110:	4413      	add	r3, r2
 8011112:	3b34      	subs	r3, #52	; 0x34
 8011114:	2200      	movs	r2, #0
 8011116:	601a      	str	r2, [r3, #0]
    }

    i++;
 8011118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801111a:	3301      	adds	r3, #1
 801111c:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801111e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	643b      	str	r3, [r7, #64]	; 0x40
 8011124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1b2      	bne.n	8011090 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	891b      	ldrh	r3, [r3, #8]
 801112e:	461a      	mov	r2, r3
 8011130:	4b08      	ldr	r3, [pc, #32]	; (8011154 <low_level_output+0xec>)
 8011132:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8011134:	4a07      	ldr	r2, [pc, #28]	; (8011154 <low_level_output+0xec>)
 8011136:	f107 030c 	add.w	r3, r7, #12
 801113a:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801113c:	2214      	movs	r2, #20
 801113e:	4905      	ldr	r1, [pc, #20]	; (8011154 <low_level_output+0xec>)
 8011140:	4805      	ldr	r0, [pc, #20]	; (8011158 <low_level_output+0xf0>)
 8011142:	f7f5 ff30 	bl	8006fa6 <HAL_ETH_Transmit>

  return errval;
 8011146:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801114a:	4618      	mov	r0, r3
 801114c:	3748      	adds	r7, #72	; 0x48
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	24005afc 	.word	0x24005afc
 8011158:	24005a74 	.word	0x24005a74

0801115c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b098      	sub	sp, #96	; 0x60
 8011160:	af02      	add	r7, sp, #8
 8011162:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011164:	2300      	movs	r3, #0
 8011166:	653b      	str	r3, [r7, #80]	; 0x50
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8011168:	2300      	movs	r3, #0
 801116a:	60bb      	str	r3, [r7, #8]
 801116c:	2300      	movs	r3, #0
 801116e:	657b      	str	r3, [r7, #84]	; 0x54
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011170:	f107 030c 	add.w	r3, r7, #12
 8011174:	2230      	movs	r2, #48	; 0x30
 8011176:	2100      	movs	r1, #0
 8011178:	4618      	mov	r0, r3
 801117a:	f00d f85b 	bl	801e234 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 801117e:	2300      	movs	r3, #0
 8011180:	657b      	str	r3, [r7, #84]	; 0x54
 8011182:	e015      	b.n	80111b0 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8011184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011186:	1c5a      	adds	r2, r3, #1
 8011188:	f107 010c 	add.w	r1, r7, #12
 801118c:	4613      	mov	r3, r2
 801118e:	005b      	lsls	r3, r3, #1
 8011190:	4413      	add	r3, r2
 8011192:	009b      	lsls	r3, r3, #2
 8011194:	4419      	add	r1, r3
 8011196:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011198:	4613      	mov	r3, r2
 801119a:	005b      	lsls	r3, r3, #1
 801119c:	4413      	add	r3, r2
 801119e:	009b      	lsls	r3, r3, #2
 80111a0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80111a4:	4413      	add	r3, r2
 80111a6:	3b44      	subs	r3, #68	; 0x44
 80111a8:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80111aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111ac:	3301      	adds	r3, #1
 80111ae:	657b      	str	r3, [r7, #84]	; 0x54
 80111b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111b2:	2b02      	cmp	r3, #2
 80111b4:	d9e6      	bls.n	8011184 <low_level_input+0x28>
  }

  if (HAL_ETH_IsRxDataAvailable(&heth))
 80111b6:	482b      	ldr	r0, [pc, #172]	; (8011264 <low_level_input+0x108>)
 80111b8:	f7f5 ff7e 	bl	80070b8 <HAL_ETH_IsRxDataAvailable>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d04a      	beq.n	8011258 <low_level_input+0xfc>
  {
    HAL_ETH_GetRxDataBuffer(&heth, RxBuff);
 80111c2:	f107 030c 	add.w	r3, r7, #12
 80111c6:	4619      	mov	r1, r3
 80111c8:	4826      	ldr	r0, [pc, #152]	; (8011264 <low_level_input+0x108>)
 80111ca:	f7f6 f865 	bl	8007298 <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 80111ce:	f107 0308 	add.w	r3, r7, #8
 80111d2:	4619      	mov	r1, r3
 80111d4:	4823      	ldr	r0, [pc, #140]	; (8011264 <low_level_input+0x108>)
 80111d6:	f7f6 f8fd 	bl	80073d4 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 80111da:	4822      	ldr	r0, [pc, #136]	; (8011264 <low_level_input+0x108>)
 80111dc:	f7f6 f92d 	bl	800743a <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	68ba      	ldr	r2, [r7, #8]
 80111e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80111e6:	647a      	str	r2, [r7, #68]	; 0x44
    if ( dsize > 0 ) { 
 80111e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	dd1d      	ble.n	801122a <low_level_input+0xce>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80111ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111f0:	f003 021f 	and.w	r2, r3, #31
 80111f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111f6:	4413      	add	r3, r2
 80111f8:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80111fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 80111fe:	f3bf 8f4f 	dsb	sy
}
 8011202:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011204:	4a18      	ldr	r2, [pc, #96]	; (8011268 <low_level_input+0x10c>)
 8011206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011208:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801120c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801120e:	3320      	adds	r3, #32
 8011210:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011214:	3b20      	subs	r3, #32
 8011216:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8011218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801121a:	2b00      	cmp	r3, #0
 801121c:	dcf2      	bgt.n	8011204 <low_level_input+0xa8>
  __ASM volatile ("dsb 0xF":::"memory");
 801121e:	f3bf 8f4f 	dsb	sy
}
 8011222:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011224:	f3bf 8f6f 	isb	sy
}
 8011228:	bf00      	nop
}
 801122a:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 801122c:	480f      	ldr	r0, [pc, #60]	; (801126c <low_level_input+0x110>)
 801122e:	f003 fe3b 	bl	8014ea8 <memp_malloc_pool>
 8011232:	64f8      	str	r0, [r7, #76]	; 0x4c
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8011234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011236:	4a0e      	ldr	r2, [pc, #56]	; (8011270 <low_level_input+0x114>)
 8011238:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	b299      	uxth	r1, r3
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	68ba      	ldr	r2, [r7, #8]
 8011242:	b292      	uxth	r2, r2
 8011244:	9201      	str	r2, [sp, #4]
 8011246:	9300      	str	r3, [sp, #0]
 8011248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801124a:	2241      	movs	r2, #65	; 0x41
 801124c:	2000      	movs	r0, #0
 801124e:	f004 fb79 	bl	8015944 <pbuf_alloced_custom>
 8011252:	6538      	str	r0, [r7, #80]	; 0x50

    return p;
 8011254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011256:	e000      	b.n	801125a <low_level_input+0xfe>
  }
  else
  {
    return NULL;
 8011258:	2300      	movs	r3, #0
  }
}
 801125a:	4618      	mov	r0, r3
 801125c:	3758      	adds	r7, #88	; 0x58
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	24005a74 	.word	0x24005a74
 8011268:	e000ed00 	.word	0xe000ed00
 801126c:	0802725c 	.word	0x0802725c
 8011270:	08011311 	.word	0x08011311

08011274 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b084      	sub	sp, #16
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff ff6d 	bl	801115c <low_level_input>
 8011282:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d010      	beq.n	80112ac <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	6879      	ldr	r1, [r7, #4]
 8011290:	68f8      	ldr	r0, [r7, #12]
 8011292:	4798      	blx	r3
 8011294:	4603      	mov	r3, r0
 8011296:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8011298:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d006      	beq.n	80112ae <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f004 fd09 	bl	8015cb8 <pbuf_free>
    p = NULL;
 80112a6:	2300      	movs	r3, #0
 80112a8:	60fb      	str	r3, [r7, #12]
 80112aa:	e000      	b.n	80112ae <ethernetif_input+0x3a>
  if (p == NULL) return;
 80112ac:	bf00      	nop
  }

}
 80112ae:	3710      	adds	r7, #16
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d106      	bne.n	80112d0 <ethernetif_init+0x1c>
 80112c2:	4b0e      	ldr	r3, [pc, #56]	; (80112fc <ethernetif_init+0x48>)
 80112c4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80112c8:	490d      	ldr	r1, [pc, #52]	; (8011300 <ethernetif_init+0x4c>)
 80112ca:	480e      	ldr	r0, [pc, #56]	; (8011304 <ethernetif_init+0x50>)
 80112cc:	f00d feaa 	bl	801f024 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2273      	movs	r2, #115	; 0x73
 80112d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2274      	movs	r2, #116	; 0x74
 80112dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4a09      	ldr	r2, [pc, #36]	; (8011308 <ethernetif_init+0x54>)
 80112e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a08      	ldr	r2, [pc, #32]	; (801130c <ethernetif_init+0x58>)
 80112ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7ff fe0b 	bl	8010f08 <low_level_init>

  return ERR_OK;
 80112f2:	2300      	movs	r3, #0
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	08023f48 	.word	0x08023f48
 8011300:	08023f64 	.word	0x08023f64
 8011304:	08023f74 	.word	0x08023f74
 8011308:	080127b5 	.word	0x080127b5
 801130c:	08011069 	.word	0x08011069

08011310 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801131c:	68f9      	ldr	r1, [r7, #12]
 801131e:	4803      	ldr	r0, [pc, #12]	; (801132c <pbuf_free_custom+0x1c>)
 8011320:	f003 fe30 	bl	8014f84 <memp_free_pool>
}
 8011324:	bf00      	nop
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	0802725c 	.word	0x0802725c

08011330 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011334:	f7f2 fdb6 	bl	8003ea4 <HAL_GetTick>
 8011338:	4603      	mov	r3, r0
}
 801133a:	4618      	mov	r0, r3
 801133c:	bd80      	pop	{r7, pc}
	...

08011340 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8011344:	4802      	ldr	r0, [pc, #8]	; (8011350 <ETH_PHY_IO_Init+0x10>)
 8011346:	f7f6 fccd 	bl	8007ce4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	bd80      	pop	{r7, pc}
 8011350:	24005a74 	.word	0x24005a74

08011354 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8011354:	b480      	push	{r7}
 8011356:	af00      	add	r7, sp, #0
  return 0;
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr

08011364 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	68f9      	ldr	r1, [r7, #12]
 8011376:	4807      	ldr	r0, [pc, #28]	; (8011394 <ETH_PHY_IO_ReadReg+0x30>)
 8011378:	f7f6 fa1e 	bl	80077b8 <HAL_ETH_ReadPHYRegister>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d002      	beq.n	8011388 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8011382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011386:	e000      	b.n	801138a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8011388:	2300      	movs	r3, #0
}
 801138a:	4618      	mov	r0, r3
 801138c:	3710      	adds	r7, #16
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	24005a74 	.word	0x24005a74

08011398 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	68f9      	ldr	r1, [r7, #12]
 80113aa:	4807      	ldr	r0, [pc, #28]	; (80113c8 <ETH_PHY_IO_WriteReg+0x30>)
 80113ac:	f7f6 fa58 	bl	8007860 <HAL_ETH_WritePHYRegister>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80113b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113ba:	e000      	b.n	80113be <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80113bc:	2300      	movs	r3, #0
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3710      	adds	r7, #16
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	24005a74 	.word	0x24005a74

080113cc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80113d0:	f7f2 fd68 	bl	8003ea4 <HAL_GetTick>
 80113d4:	4603      	mov	r3, r0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	bd80      	pop	{r7, pc}
	...

080113dc <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b0a0      	sub	sp, #128	; 0x80
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 80113e4:	2300      	movs	r3, #0
 80113e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80113e8:	2300      	movs	r3, #0
 80113ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80113ec:	2300      	movs	r3, #0
 80113ee:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80113f0:	483a      	ldr	r0, [pc, #232]	; (80114dc <ethernet_link_check_state+0x100>)
 80113f2:	f7f2 fc49 	bl	8003c88 <LAN8742_GetLinkState>
 80113f6:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113fe:	089b      	lsrs	r3, r3, #2
 8011400:	f003 0301 	and.w	r3, r3, #1
 8011404:	b2db      	uxtb	r3, r3
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00c      	beq.n	8011424 <ethernet_link_check_state+0x48>
 801140a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801140c:	2b01      	cmp	r3, #1
 801140e:	dc09      	bgt.n	8011424 <ethernet_link_check_state+0x48>
  {
    HAL_ETH_Stop(&heth);
 8011410:	4833      	ldr	r0, [pc, #204]	; (80114e0 <ethernet_link_check_state+0x104>)
 8011412:	f7f5 fd78 	bl	8006f06 <HAL_ETH_Stop>
    netif_set_down(netif);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f004 f838 	bl	801548c <netif_set_down>
    netif_set_link_down(netif);
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f004 f89b 	bl	8015558 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8011422:	e056      	b.n	80114d2 <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801142a:	f003 0304 	and.w	r3, r3, #4
 801142e:	2b00      	cmp	r3, #0
 8011430:	d14f      	bne.n	80114d2 <ethernet_link_check_state+0xf6>
 8011432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011434:	2b01      	cmp	r3, #1
 8011436:	dd4c      	ble.n	80114d2 <ethernet_link_check_state+0xf6>
 8011438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801143a:	3b02      	subs	r3, #2
 801143c:	2b03      	cmp	r3, #3
 801143e:	d82b      	bhi.n	8011498 <ethernet_link_check_state+0xbc>
 8011440:	a201      	add	r2, pc, #4	; (adr r2, 8011448 <ethernet_link_check_state+0x6c>)
 8011442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011446:	bf00      	nop
 8011448:	08011459 	.word	0x08011459
 801144c:	0801146b 	.word	0x0801146b
 8011450:	0801147b 	.word	0x0801147b
 8011454:	0801148b 	.word	0x0801148b
      duplex = ETH_FULLDUPLEX_MODE;
 8011458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801145c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801145e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011462:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011464:	2301      	movs	r3, #1
 8011466:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011468:	e017      	b.n	801149a <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 801146a:	2300      	movs	r3, #0
 801146c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801146e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011472:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011474:	2301      	movs	r3, #1
 8011476:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011478:	e00f      	b.n	801149a <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 801147a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801147e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011480:	2300      	movs	r3, #0
 8011482:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011484:	2301      	movs	r3, #1
 8011486:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011488:	e007      	b.n	801149a <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 801148a:	2300      	movs	r3, #0
 801148c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801148e:	2300      	movs	r3, #0
 8011490:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011492:	2301      	movs	r3, #1
 8011494:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011496:	e000      	b.n	801149a <ethernet_link_check_state+0xbe>
      break;
 8011498:	bf00      	nop
    if(linkchanged)
 801149a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801149c:	2b00      	cmp	r3, #0
 801149e:	d018      	beq.n	80114d2 <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80114a0:	f107 030c 	add.w	r3, r7, #12
 80114a4:	4619      	mov	r1, r3
 80114a6:	480e      	ldr	r0, [pc, #56]	; (80114e0 <ethernet_link_check_state+0x104>)
 80114a8:	f7f6 fa2e 	bl	8007908 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80114ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80114ae:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80114b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114b2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80114b4:	f107 030c 	add.w	r3, r7, #12
 80114b8:	4619      	mov	r1, r3
 80114ba:	4809      	ldr	r0, [pc, #36]	; (80114e0 <ethernet_link_check_state+0x104>)
 80114bc:	f7f6 fbf8 	bl	8007cb0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80114c0:	4807      	ldr	r0, [pc, #28]	; (80114e0 <ethernet_link_check_state+0x104>)
 80114c2:	f7f5 fcc4 	bl	8006e4e <HAL_ETH_Start>
      netif_set_up(netif);
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f003 ff74 	bl	80153b4 <netif_set_up>
      netif_set_link_up(netif);
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f004 f80f 	bl	80154f0 <netif_set_link_up>
}
 80114d2:	bf00      	nop
 80114d4:	3780      	adds	r7, #128	; 0x80
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	24005a54 	.word	0x24005a54
 80114e0:	24005a74 	.word	0x24005a74

080114e4 <synth_IfftInit>:
 * @brief  synth ifft init.
 * @param
 * @retval Error
 */
int32_t synth_IfftInit(void)
{
 80114e4:	b590      	push	{r4, r7, lr}
 80114e6:	ed2d 8b02 	vpush	{d8}
 80114ea:	b0c7      	sub	sp, #284	; 0x11c
 80114ec:	af02      	add	r7, sp, #8
	int32_t buffer_len = 0;
 80114ee:	2300      	movs	r3, #0
 80114f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t aRandom32bit = 0;
 80114f4:	2300      	movs	r3, #0
 80114f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint8_t FreqStr[256] = {0};
 80114fa:	1d3b      	adds	r3, r7, #4
 80114fc:	2200      	movs	r2, #0
 80114fe:	601a      	str	r2, [r3, #0]
 8011500:	3304      	adds	r3, #4
 8011502:	22fc      	movs	r2, #252	; 0xfc
 8011504:	2100      	movs	r1, #0
 8011506:	4618      	mov	r0, r3
 8011508:	f00c fe94 	bl	801e234 <memset>

	//allocate the contiguous memory area for storage image data
	imageData = malloc(cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 801150c:	f00b fd26 	bl	801cf5c <cis_GetEffectivePixelNb>
 8011510:	4603      	mov	r3, r0
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	4618      	mov	r0, r3
 8011516:	f00c fe4f 	bl	801e1b8 <malloc>
 801151a:	4603      	mov	r3, r0
 801151c:	461a      	mov	r2, r3
 801151e:	4b73      	ldr	r3, [pc, #460]	; (80116ec <synth_IfftInit+0x208>)
 8011520:	601a      	str	r2, [r3, #0]
	if (imageData == NULL)
 8011522:	4b72      	ldr	r3, [pc, #456]	; (80116ec <synth_IfftInit+0x208>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d101      	bne.n	801152e <synth_IfftInit+0x4a>
	{
		Error_Handler();
 801152a:	f7f1 f97b 	bl	8002824 <Error_Handler>
	}

	memset(imageData, 0, cis_GetEffectivePixelNb() * sizeof(uint16_t*));
 801152e:	4b6f      	ldr	r3, [pc, #444]	; (80116ec <synth_IfftInit+0x208>)
 8011530:	681c      	ldr	r4, [r3, #0]
 8011532:	f00b fd13 	bl	801cf5c <cis_GetEffectivePixelNb>
 8011536:	4603      	mov	r3, r0
 8011538:	009b      	lsls	r3, r3, #2
 801153a:	461a      	mov	r2, r3
 801153c:	2100      	movs	r1, #0
 801153e:	4620      	mov	r0, r4
 8011540:	f00c fe78 	bl	801e234 <memset>

	buffer_len = init_waves(&unitary_waveform, waves);
 8011544:	496a      	ldr	r1, [pc, #424]	; (80116f0 <synth_IfftInit+0x20c>)
 8011546:	486b      	ldr	r0, [pc, #428]	; (80116f4 <synth_IfftInit+0x210>)
 8011548:	f000 fb9e 	bl	8011c88 <init_waves>
 801154c:	4603      	mov	r3, r0
 801154e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	// start with random index
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 8011552:	2300      	movs	r3, #0
 8011554:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8011558:	e037      	b.n	80115ca <synth_IfftInit+0xe6>
	{
		if (HAL_RNG_GenerateRandomNumber(&hrng, &aRandom32bit) != HAL_OK)
 801155a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801155e:	4619      	mov	r1, r3
 8011560:	4865      	ldr	r0, [pc, #404]	; (80116f8 <synth_IfftInit+0x214>)
 8011562:	f7fa fdde 	bl	800c122 <HAL_RNG_GenerateRandomNumber>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d001      	beq.n	8011570 <synth_IfftInit+0x8c>
		{
			/* Random number generation error */
			Error_Handler();
 801156c:	f7f1 f95a 	bl	8002824 <Error_Handler>
		}
		waves[i].current_idx = aRandom32bit % waves[i].aera_size;
 8011570:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8011574:	485e      	ldr	r0, [pc, #376]	; (80116f0 <synth_IfftInit+0x20c>)
 8011576:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801157a:	460b      	mov	r3, r1
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	440b      	add	r3, r1
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4403      	add	r3, r0
 8011584:	3306      	adds	r3, #6
 8011586:	881b      	ldrh	r3, [r3, #0]
 8011588:	fbb2 f1f3 	udiv	r1, r2, r3
 801158c:	fb03 f301 	mul.w	r3, r3, r1
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	b298      	uxth	r0, r3
 8011594:	4956      	ldr	r1, [pc, #344]	; (80116f0 <synth_IfftInit+0x20c>)
 8011596:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801159a:	4613      	mov	r3, r2
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	4413      	add	r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	440b      	add	r3, r1
 80115a4:	3304      	adds	r3, #4
 80115a6:	4602      	mov	r2, r0
 80115a8:	801a      	strh	r2, [r3, #0]
		waves[i].current_volume = 0;
 80115aa:	4951      	ldr	r1, [pc, #324]	; (80116f0 <synth_IfftInit+0x20c>)
 80115ac:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80115b0:	4613      	mov	r3, r2
 80115b2:	009b      	lsls	r3, r3, #2
 80115b4:	4413      	add	r3, r2
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	440b      	add	r3, r1
 80115ba:	330c      	adds	r3, #12
 80115bc:	2200      	movs	r2, #0
 80115be:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < NUMBER_OF_NOTES; i++)
 80115c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80115c4:	3301      	adds	r3, #1
 80115c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80115ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80115ce:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80115d2:	d3c2      	bcc.n	801155a <synth_IfftInit+0x76>
	}

	if (buffer_len < 0)
 80115d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80115d8:	2b00      	cmp	r3, #0
 80115da:	da05      	bge.n	80115e8 <synth_IfftInit+0x104>
	{
		printf("RAM overflow");
 80115dc:	4847      	ldr	r0, [pc, #284]	; (80116fc <synth_IfftInit+0x218>)
 80115de:	f00d fd21 	bl	801f024 <iprintf>
		return -1;
 80115e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115e6:	e07a      	b.n	80116de <synth_IfftInit+0x1fa>
	}

	printf("Buffer lengh = %d\n", (int)buffer_len);
 80115e8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80115ec:	4844      	ldr	r0, [pc, #272]	; (8011700 <synth_IfftInit+0x21c>)
 80115ee:	f00d fd19 	bl	801f024 <iprintf>

#ifdef PRINT_FREQUENCY
	ssd1362_drawRect(0, 57, 256, 64, 5, false);
 80115f2:	2300      	movs	r3, #0
 80115f4:	9301      	str	r3, [sp, #4]
 80115f6:	2305      	movs	r3, #5
 80115f8:	9300      	str	r3, [sp, #0]
 80115fa:	2340      	movs	r3, #64	; 0x40
 80115fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011600:	2139      	movs	r1, #57	; 0x39
 8011602:	2000      	movs	r0, #0
 8011604:	f00c fad4 	bl	801dbb0 <ssd1362_drawRect>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[0].frequency, (int)waves[0].aera_size, (int)waves[0].octave_coeff);
 8011608:	4b39      	ldr	r3, [pc, #228]	; (80116f0 <synth_IfftInit+0x20c>)
 801160a:	edd3 7a04 	vldr	s15, [r3, #16]
 801160e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011612:	4b37      	ldr	r3, [pc, #220]	; (80116f0 <synth_IfftInit+0x20c>)
 8011614:	88db      	ldrh	r3, [r3, #6]
 8011616:	461a      	mov	r2, r3
 8011618:	4b35      	ldr	r3, [pc, #212]	; (80116f0 <synth_IfftInit+0x20c>)
 801161a:	891b      	ldrh	r3, [r3, #8]
 801161c:	1d38      	adds	r0, r7, #4
 801161e:	9300      	str	r3, [sp, #0]
 8011620:	4613      	mov	r3, r2
 8011622:	ee17 2a90 	vmov	r2, s15
 8011626:	4937      	ldr	r1, [pc, #220]	; (8011704 <synth_IfftInit+0x220>)
 8011628:	f00d fde0 	bl	801f1ec <siprintf>
	ssd1362_drawString(0, 57, (int8_t*)FreqStr, 0, 8);
 801162c:	1d3a      	adds	r2, r7, #4
 801162e:	2308      	movs	r3, #8
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	2300      	movs	r3, #0
 8011634:	2139      	movs	r1, #57	; 0x39
 8011636:	2000      	movs	r0, #0
 8011638:	f00c fc1d 	bl	801de76 <ssd1362_drawString>
	sprintf((char *)FreqStr, "%dHz Sz%d Oc%d", (int)waves[NUMBER_OF_NOTES - 1].frequency, (int)waves[NUMBER_OF_NOTES - 1].aera_size / (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff), (int)sqrt(waves[NUMBER_OF_NOTES - 1].octave_coeff));
 801163c:	4a2c      	ldr	r2, [pc, #176]	; (80116f0 <synth_IfftInit+0x20c>)
 801163e:	f241 637c 	movw	r3, #5756	; 0x167c
 8011642:	4413      	add	r3, r2
 8011644:	edd3 7a00 	vldr	s15, [r3]
 8011648:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 801164c:	4a28      	ldr	r2, [pc, #160]	; (80116f0 <synth_IfftInit+0x20c>)
 801164e:	f241 6372 	movw	r3, #5746	; 0x1672
 8011652:	4413      	add	r3, r2
 8011654:	881b      	ldrh	r3, [r3, #0]
 8011656:	461c      	mov	r4, r3
 8011658:	4a25      	ldr	r2, [pc, #148]	; (80116f0 <synth_IfftInit+0x20c>)
 801165a:	f241 6374 	movw	r3, #5748	; 0x1674
 801165e:	4413      	add	r3, r2
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	ee07 3a90 	vmov	s15, r3
 8011666:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801166a:	eeb0 0b47 	vmov.f64	d0, d7
 801166e:	f011 fd1f 	bl	80230b0 <sqrt>
 8011672:	eeb0 7b40 	vmov.f64	d7, d0
 8011676:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801167a:	ee17 3a90 	vmov	r3, s15
 801167e:	fb94 f4f3 	sdiv	r4, r4, r3
 8011682:	4a1b      	ldr	r2, [pc, #108]	; (80116f0 <synth_IfftInit+0x20c>)
 8011684:	f241 6374 	movw	r3, #5748	; 0x1674
 8011688:	4413      	add	r3, r2
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	ee07 3a90 	vmov	s15, r3
 8011690:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011694:	eeb0 0b47 	vmov.f64	d0, d7
 8011698:	f011 fd0a 	bl	80230b0 <sqrt>
 801169c:	eeb0 7b40 	vmov.f64	d7, d0
 80116a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80116a4:	ee17 3a90 	vmov	r3, s15
 80116a8:	1d38      	adds	r0, r7, #4
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	4623      	mov	r3, r4
 80116ae:	ee18 2a10 	vmov	r2, s16
 80116b2:	4914      	ldr	r1, [pc, #80]	; (8011704 <synth_IfftInit+0x220>)
 80116b4:	f00d fd9a 	bl	801f1ec <siprintf>
	ssd1362_drawString(128, 57, (int8_t*)FreqStr, 0, 8);
 80116b8:	1d3a      	adds	r2, r7, #4
 80116ba:	2308      	movs	r3, #8
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	2300      	movs	r3, #0
 80116c0:	2139      	movs	r1, #57	; 0x39
 80116c2:	2080      	movs	r0, #128	; 0x80
 80116c4:	f00c fbd7 	bl	801de76 <ssd1362_drawString>
	ssd1362_writeFullBuffer();
 80116c8:	f00c fca4 	bl	801e014 <ssd1362_writeFullBuffer>
	//		//				HAL_Delay(1);
	//	}
	//	printf("---- END ----");
#endif

	if (synth_AudioInit() == 0)
 80116cc:	f000 f81c 	bl	8011708 <synth_AudioInit>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d101      	bne.n	80116da <synth_IfftInit+0x1f6>
		return 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	e001      	b.n	80116de <synth_IfftInit+0x1fa>
	else
		return -1;
 80116da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80116de:	4618      	mov	r0, r3
 80116e0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80116e4:	46bd      	mov	sp, r7
 80116e6:	ecbd 8b02 	vpop	{d8}
 80116ea:	bd90      	pop	{r4, r7, pc}
 80116ec:	24004cd8 	.word	0x24004cd8
 80116f0:	24003654 	.word	0x24003654
 80116f4:	24003650 	.word	0x24003650
 80116f8:	2400557c 	.word	0x2400557c
 80116fc:	08023f9c 	.word	0x08023f9c
 8011700:	08023fac 	.word	0x08023fac
 8011704:	08023fc0 	.word	0x08023fc0

08011708 <synth_AudioInit>:

int32_t synth_AudioInit(void)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	af00      	add	r7, sp, #0
	bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 801170c:	4b06      	ldr	r3, [pc, #24]	; (8011728 <synth_AudioInit+0x20>)
 801170e:	2200      	movs	r2, #0
 8011710:	701a      	strb	r2, [r3, #0]
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
 8011712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011716:	4905      	ldr	r1, [pc, #20]	; (801172c <synth_AudioInit+0x24>)
 8011718:	4805      	ldr	r0, [pc, #20]	; (8011730 <synth_AudioInit+0x28>)
 801171a:	f7fb f823 	bl	800c764 <HAL_SAI_Transmit_DMA>

	return -1;
 801171e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011722:	4618      	mov	r0, r3
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	24005b30 	.word	0x24005b30
 801172c:	24004cdc 	.word	0x24004cdc
 8011730:	24005608 	.word	0x24005608

08011734 <synth_GetAudioData>:
 * @brief  Get RFFT buffer data
 * @param  Index
 * @retval Value
 */
int16_t synth_GetAudioData(uint32_t index)
{
 8011734:	b480      	push	{r7}
 8011736:	b083      	sub	sp, #12
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	return audioBuff[index];
 801173c:	4a04      	ldr	r2, [pc, #16]	; (8011750 <synth_GetAudioData+0x1c>)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8011744:	4618      	mov	r0, r3
 8011746:	370c      	adds	r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr
 8011750:	24004cdc 	.word	0x24004cdc

08011754 <synth_SetImageData>:
 * @brief  Set Image buffer data
 * @param  Index
 * @retval Value
 */
int32_t synth_SetImageData(uint32_t index, uint16_t value)
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	460b      	mov	r3, r1
 801175e:	807b      	strh	r3, [r7, #2]
	//	if (index >= RFFT_BUFFER_SIZE)
	//		Error_Handler();
	imageData[index] = value;
 8011760:	4b06      	ldr	r3, [pc, #24]	; (801177c <synth_SetImageData+0x28>)
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	005b      	lsls	r3, r3, #1
 8011768:	4413      	add	r3, r2
 801176a:	887a      	ldrh	r2, [r7, #2]
 801176c:	801a      	strh	r2, [r3, #0]
	return 0;
 801176e:	2300      	movs	r3, #0
}
 8011770:	4618      	mov	r0, r3
 8011772:	370c      	adds	r7, #12
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr
 801177c:	24004cd8 	.word	0x24004cd8

08011780 <synth_IfftMode>:
 * @retval None
 */
#pragma GCC push_options
#pragma GCC optimize ("unroll-loops")
void synth_IfftMode(uint16_t *imageData, int16_t *audioData, uint32_t NbrOfData)
{
 8011780:	b480      	push	{r7}
 8011782:	b087      	sub	sp, #28
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]
	static uint16_t new_idx;
	static uint32_t write_data_nbr;
	static int32_t max_volume;
	static int32_t current_image_data;

	write_data_nbr = 0;
 801178c:	4b51      	ldr	r3, [pc, #324]	; (80118d4 <synth_IfftMode+0x154>)
 801178e:	2200      	movs	r2, #0
 8011790:	601a      	str	r2, [r3, #0]

	while(write_data_nbr < NbrOfData)
 8011792:	e168      	b.n	8011a66 <synth_IfftMode+0x2e6>
	{
		signal_summation = 0;
 8011794:	4b50      	ldr	r3, [pc, #320]	; (80118d8 <synth_IfftMode+0x158>)
 8011796:	2200      	movs	r2, #0
 8011798:	601a      	str	r2, [r3, #0]
		signal_power_summation = 0;
 801179a:	4b50      	ldr	r3, [pc, #320]	; (80118dc <synth_IfftMode+0x15c>)
 801179c:	2200      	movs	r2, #0
 801179e:	601a      	str	r2, [r3, #0]
		max_volume = 0;
 80117a0:	4b4f      	ldr	r3, [pc, #316]	; (80118e0 <synth_IfftMode+0x160>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	601a      	str	r2, [r3, #0]

		//Summation for all pixel
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 80117a6:	f44f 7390 	mov.w	r3, #288	; 0x120
 80117aa:	617b      	str	r3, [r7, #20]
 80117ac:	e11f      	b.n	80119ee <synth_IfftMode+0x26e>
		{
			//octave_coeff jump current pointer into the fundamental waveform, for example : the 3th octave increment the current pointer 8 per 8 (2^3)
			//example for 17 cell waveform and 3th octave : [X][Y][Z][X][Y][Z][X][Y][Z][X][Y][[Z][X][Y][[Z][X][Y], X for the first pass, Y for second etc...
			new_idx = (waves[note].current_idx + waves[note].octave_coeff);
 80117ae:	494d      	ldr	r1, [pc, #308]	; (80118e4 <synth_IfftMode+0x164>)
 80117b0:	697a      	ldr	r2, [r7, #20]
 80117b2:	4613      	mov	r3, r2
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	4413      	add	r3, r2
 80117b8:	009b      	lsls	r3, r3, #2
 80117ba:	440b      	add	r3, r1
 80117bc:	3304      	adds	r3, #4
 80117be:	8819      	ldrh	r1, [r3, #0]
 80117c0:	4848      	ldr	r0, [pc, #288]	; (80118e4 <synth_IfftMode+0x164>)
 80117c2:	697a      	ldr	r2, [r7, #20]
 80117c4:	4613      	mov	r3, r2
 80117c6:	009b      	lsls	r3, r3, #2
 80117c8:	4413      	add	r3, r2
 80117ca:	009b      	lsls	r3, r3, #2
 80117cc:	4403      	add	r3, r0
 80117ce:	3308      	adds	r3, #8
 80117d0:	881b      	ldrh	r3, [r3, #0]
 80117d2:	440b      	add	r3, r1
 80117d4:	b29a      	uxth	r2, r3
 80117d6:	4b44      	ldr	r3, [pc, #272]	; (80118e8 <synth_IfftMode+0x168>)
 80117d8:	801a      	strh	r2, [r3, #0]
			if (new_idx >= waves[note].aera_size)
 80117da:	4942      	ldr	r1, [pc, #264]	; (80118e4 <synth_IfftMode+0x164>)
 80117dc:	697a      	ldr	r2, [r7, #20]
 80117de:	4613      	mov	r3, r2
 80117e0:	009b      	lsls	r3, r3, #2
 80117e2:	4413      	add	r3, r2
 80117e4:	009b      	lsls	r3, r3, #2
 80117e6:	440b      	add	r3, r1
 80117e8:	3306      	adds	r3, #6
 80117ea:	881a      	ldrh	r2, [r3, #0]
 80117ec:	4b3e      	ldr	r3, [pc, #248]	; (80118e8 <synth_IfftMode+0x168>)
 80117ee:	881b      	ldrh	r3, [r3, #0]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d80e      	bhi.n	8011812 <synth_IfftMode+0x92>
				new_idx -= waves[note].aera_size;
 80117f4:	4b3c      	ldr	r3, [pc, #240]	; (80118e8 <synth_IfftMode+0x168>)
 80117f6:	8819      	ldrh	r1, [r3, #0]
 80117f8:	483a      	ldr	r0, [pc, #232]	; (80118e4 <synth_IfftMode+0x164>)
 80117fa:	697a      	ldr	r2, [r7, #20]
 80117fc:	4613      	mov	r3, r2
 80117fe:	009b      	lsls	r3, r3, #2
 8011800:	4413      	add	r3, r2
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	4403      	add	r3, r0
 8011806:	3306      	adds	r3, #6
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	1acb      	subs	r3, r1, r3
 801180c:	b29a      	uxth	r2, r3
 801180e:	4b36      	ldr	r3, [pc, #216]	; (80118e8 <synth_IfftMode+0x168>)
 8011810:	801a      	strh	r2, [r3, #0]

			if (imageData[note - 1] - imageData[note] > 0)
 8011812:	697a      	ldr	r2, [r7, #20]
 8011814:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011818:	4413      	add	r3, r2
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	4413      	add	r3, r2
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	4619      	mov	r1, r3
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	005b      	lsls	r3, r3, #1
 8011828:	68fa      	ldr	r2, [r7, #12]
 801182a:	4413      	add	r3, r2
 801182c:	881b      	ldrh	r3, [r3, #0]
 801182e:	1acb      	subs	r3, r1, r3
 8011830:	2b00      	cmp	r3, #0
 8011832:	dd11      	ble.n	8011858 <synth_IfftMode+0xd8>
				current_image_data = imageData[note - 1] - imageData[note];
 8011834:	697a      	ldr	r2, [r7, #20]
 8011836:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801183a:	4413      	add	r3, r2
 801183c:	005b      	lsls	r3, r3, #1
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	4413      	add	r3, r2
 8011842:	881b      	ldrh	r3, [r3, #0]
 8011844:	4619      	mov	r1, r3
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	4413      	add	r3, r2
 801184e:	881b      	ldrh	r3, [r3, #0]
 8011850:	1acb      	subs	r3, r1, r3
 8011852:	4a26      	ldr	r2, [pc, #152]	; (80118ec <synth_IfftMode+0x16c>)
 8011854:	6013      	str	r3, [r2, #0]
 8011856:	e002      	b.n	801185e <synth_IfftMode+0xde>
			else
				current_image_data = 0;//imageData[note] - imageData[note - 1];
 8011858:	4b24      	ldr	r3, [pc, #144]	; (80118ec <synth_IfftMode+0x16c>)
 801185a:	2200      	movs	r2, #0
 801185c:	601a      	str	r2, [r3, #0]

			if (waves[note].current_volume < current_image_data)
 801185e:	4921      	ldr	r1, [pc, #132]	; (80118e4 <synth_IfftMode+0x164>)
 8011860:	697a      	ldr	r2, [r7, #20]
 8011862:	4613      	mov	r3, r2
 8011864:	009b      	lsls	r3, r3, #2
 8011866:	4413      	add	r3, r2
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	440b      	add	r3, r1
 801186c:	330c      	adds	r3, #12
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	4b1e      	ldr	r3, [pc, #120]	; (80118ec <synth_IfftMode+0x16c>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	429a      	cmp	r2, r3
 8011876:	da3b      	bge.n	80118f0 <synth_IfftMode+0x170>
			{
				waves[note].current_volume += IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 8011878:	491a      	ldr	r1, [pc, #104]	; (80118e4 <synth_IfftMode+0x164>)
 801187a:	697a      	ldr	r2, [r7, #20]
 801187c:	4613      	mov	r3, r2
 801187e:	009b      	lsls	r3, r3, #2
 8011880:	4413      	add	r3, r2
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	440b      	add	r3, r1
 8011886:	330c      	adds	r3, #12
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 801188e:	4815      	ldr	r0, [pc, #84]	; (80118e4 <synth_IfftMode+0x164>)
 8011890:	697a      	ldr	r2, [r7, #20]
 8011892:	4613      	mov	r3, r2
 8011894:	009b      	lsls	r3, r3, #2
 8011896:	4413      	add	r3, r2
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	4403      	add	r3, r0
 801189c:	330c      	adds	r3, #12
 801189e:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume > current_image_data)
 80118a0:	4910      	ldr	r1, [pc, #64]	; (80118e4 <synth_IfftMode+0x164>)
 80118a2:	697a      	ldr	r2, [r7, #20]
 80118a4:	4613      	mov	r3, r2
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	4413      	add	r3, r2
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	440b      	add	r3, r1
 80118ae:	330c      	adds	r3, #12
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	4b0e      	ldr	r3, [pc, #56]	; (80118ec <synth_IfftMode+0x16c>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	429a      	cmp	r2, r3
 80118b8:	dd46      	ble.n	8011948 <synth_IfftMode+0x1c8>
					waves[note].current_volume = current_image_data;
 80118ba:	4b0c      	ldr	r3, [pc, #48]	; (80118ec <synth_IfftMode+0x16c>)
 80118bc:	6819      	ldr	r1, [r3, #0]
 80118be:	4809      	ldr	r0, [pc, #36]	; (80118e4 <synth_IfftMode+0x164>)
 80118c0:	697a      	ldr	r2, [r7, #20]
 80118c2:	4613      	mov	r3, r2
 80118c4:	009b      	lsls	r3, r3, #2
 80118c6:	4413      	add	r3, r2
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4403      	add	r3, r0
 80118cc:	330c      	adds	r3, #12
 80118ce:	6019      	str	r1, [r3, #0]
 80118d0:	e03a      	b.n	8011948 <synth_IfftMode+0x1c8>
 80118d2:	bf00      	nop
 80118d4:	240050dc 	.word	0x240050dc
 80118d8:	240050e0 	.word	0x240050e0
 80118dc:	240050e4 	.word	0x240050e4
 80118e0:	240050e8 	.word	0x240050e8
 80118e4:	24003654 	.word	0x24003654
 80118e8:	240050ec 	.word	0x240050ec
 80118ec:	240050f0 	.word	0x240050f0
			}
			else
			{
				waves[note].current_volume -= IFFT_GAP_PER_MS / (SAMPLING_FREQUENCY / 1000);
 80118f0:	4966      	ldr	r1, [pc, #408]	; (8011a8c <synth_IfftMode+0x30c>)
 80118f2:	697a      	ldr	r2, [r7, #20]
 80118f4:	4613      	mov	r3, r2
 80118f6:	009b      	lsls	r3, r3, #2
 80118f8:	4413      	add	r3, r2
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	440b      	add	r3, r1
 80118fe:	330c      	adds	r3, #12
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f1a3 0129 	sub.w	r1, r3, #41	; 0x29
 8011906:	4861      	ldr	r0, [pc, #388]	; (8011a8c <synth_IfftMode+0x30c>)
 8011908:	697a      	ldr	r2, [r7, #20]
 801190a:	4613      	mov	r3, r2
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	4413      	add	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4403      	add	r3, r0
 8011914:	330c      	adds	r3, #12
 8011916:	6019      	str	r1, [r3, #0]
				if (waves[note].current_volume < current_image_data)
 8011918:	495c      	ldr	r1, [pc, #368]	; (8011a8c <synth_IfftMode+0x30c>)
 801191a:	697a      	ldr	r2, [r7, #20]
 801191c:	4613      	mov	r3, r2
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	4413      	add	r3, r2
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	440b      	add	r3, r1
 8011926:	330c      	adds	r3, #12
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	4b59      	ldr	r3, [pc, #356]	; (8011a90 <synth_IfftMode+0x310>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	429a      	cmp	r2, r3
 8011930:	da0a      	bge.n	8011948 <synth_IfftMode+0x1c8>
					waves[note].current_volume = current_image_data;
 8011932:	4b57      	ldr	r3, [pc, #348]	; (8011a90 <synth_IfftMode+0x310>)
 8011934:	6819      	ldr	r1, [r3, #0]
 8011936:	4855      	ldr	r0, [pc, #340]	; (8011a8c <synth_IfftMode+0x30c>)
 8011938:	697a      	ldr	r2, [r7, #20]
 801193a:	4613      	mov	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	4413      	add	r3, r2
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	4403      	add	r3, r0
 8011944:	330c      	adds	r3, #12
 8011946:	6019      	str	r1, [r3, #0]
			}

			if (waves[note].current_volume > max_volume)
 8011948:	4950      	ldr	r1, [pc, #320]	; (8011a8c <synth_IfftMode+0x30c>)
 801194a:	697a      	ldr	r2, [r7, #20]
 801194c:	4613      	mov	r3, r2
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	4413      	add	r3, r2
 8011952:	009b      	lsls	r3, r3, #2
 8011954:	440b      	add	r3, r1
 8011956:	330c      	adds	r3, #12
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	4b4e      	ldr	r3, [pc, #312]	; (8011a94 <synth_IfftMode+0x314>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	429a      	cmp	r2, r3
 8011960:	dd0a      	ble.n	8011978 <synth_IfftMode+0x1f8>
				max_volume = waves[note].current_volume;
 8011962:	494a      	ldr	r1, [pc, #296]	; (8011a8c <synth_IfftMode+0x30c>)
 8011964:	697a      	ldr	r2, [r7, #20]
 8011966:	4613      	mov	r3, r2
 8011968:	009b      	lsls	r3, r3, #2
 801196a:	4413      	add	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	440b      	add	r3, r1
 8011970:	330c      	adds	r3, #12
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	4a47      	ldr	r2, [pc, #284]	; (8011a94 <synth_IfftMode+0x314>)
 8011976:	6013      	str	r3, [r2, #0]

			//current audio point summation
			signal_summation += ((*(waves[note].start_ptr + new_idx)) * waves[note].current_volume) >> 16;
 8011978:	4944      	ldr	r1, [pc, #272]	; (8011a8c <synth_IfftMode+0x30c>)
 801197a:	697a      	ldr	r2, [r7, #20]
 801197c:	4613      	mov	r3, r2
 801197e:	009b      	lsls	r3, r3, #2
 8011980:	4413      	add	r3, r2
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	440b      	add	r3, r1
 8011986:	681a      	ldr	r2, [r3, #0]
 8011988:	4b43      	ldr	r3, [pc, #268]	; (8011a98 <synth_IfftMode+0x318>)
 801198a:	881b      	ldrh	r3, [r3, #0]
 801198c:	005b      	lsls	r3, r3, #1
 801198e:	4413      	add	r3, r2
 8011990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011994:	4618      	mov	r0, r3
 8011996:	493d      	ldr	r1, [pc, #244]	; (8011a8c <synth_IfftMode+0x30c>)
 8011998:	697a      	ldr	r2, [r7, #20]
 801199a:	4613      	mov	r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	4413      	add	r3, r2
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	440b      	add	r3, r1
 80119a4:	330c      	adds	r3, #12
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	fb03 f300 	mul.w	r3, r3, r0
 80119ac:	141a      	asrs	r2, r3, #16
 80119ae:	4b3b      	ldr	r3, [pc, #236]	; (8011a9c <synth_IfftMode+0x31c>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	4413      	add	r3, r2
 80119b4:	4a39      	ldr	r2, [pc, #228]	; (8011a9c <synth_IfftMode+0x31c>)
 80119b6:	6013      	str	r3, [r2, #0]

			//read equivalent power of current pixel
			signal_power_summation += waves[note].current_volume;
 80119b8:	4934      	ldr	r1, [pc, #208]	; (8011a8c <synth_IfftMode+0x30c>)
 80119ba:	697a      	ldr	r2, [r7, #20]
 80119bc:	4613      	mov	r3, r2
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	4413      	add	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	440b      	add	r3, r1
 80119c6:	330c      	adds	r3, #12
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	461a      	mov	r2, r3
 80119cc:	4b34      	ldr	r3, [pc, #208]	; (8011aa0 <synth_IfftMode+0x320>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4413      	add	r3, r2
 80119d2:	4a33      	ldr	r2, [pc, #204]	; (8011aa0 <synth_IfftMode+0x320>)
 80119d4:	6013      	str	r3, [r2, #0]

			waves[note].current_idx = new_idx;
 80119d6:	4b30      	ldr	r3, [pc, #192]	; (8011a98 <synth_IfftMode+0x318>)
 80119d8:	8818      	ldrh	r0, [r3, #0]
 80119da:	492c      	ldr	r1, [pc, #176]	; (8011a8c <synth_IfftMode+0x30c>)
 80119dc:	697a      	ldr	r2, [r7, #20]
 80119de:	4613      	mov	r3, r2
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	4413      	add	r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	440b      	add	r3, r1
 80119e8:	3304      	adds	r3, #4
 80119ea:	4602      	mov	r2, r0
 80119ec:	801a      	strh	r2, [r3, #0]
		for (int32_t note = NUMBER_OF_NOTES; --note >= 1;)
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	3b01      	subs	r3, #1
 80119f2:	617b      	str	r3, [r7, #20]
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f73f aed9 	bgt.w	80117ae <synth_IfftMode+0x2e>
		}

		rfft = (signal_summation * ((double)max_volume) / (double)signal_power_summation);
 80119fc:	4b27      	ldr	r3, [pc, #156]	; (8011a9c <synth_IfftMode+0x31c>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	ee07 3a90 	vmov	s15, r3
 8011a04:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8011a08:	4b22      	ldr	r3, [pc, #136]	; (8011a94 <synth_IfftMode+0x314>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	ee07 3a90 	vmov	s15, r3
 8011a10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011a14:	ee26 5b07 	vmul.f64	d5, d6, d7
 8011a18:	4b21      	ldr	r3, [pc, #132]	; (8011aa0 <synth_IfftMode+0x320>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	ee07 3a90 	vmov	s15, r3
 8011a20:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8011a24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011a28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011a2c:	ee17 3a90 	vmov	r3, s15
 8011a30:	b21a      	sxth	r2, r3
 8011a32:	4b1c      	ldr	r3, [pc, #112]	; (8011aa4 <synth_IfftMode+0x324>)
 8011a34:	801a      	strh	r2, [r3, #0]

		audioData[write_data_nbr] = rfft;		//L
 8011a36:	4b1c      	ldr	r3, [pc, #112]	; (8011aa8 <synth_IfftMode+0x328>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	005b      	lsls	r3, r3, #1
 8011a3c:	68ba      	ldr	r2, [r7, #8]
 8011a3e:	4413      	add	r3, r2
 8011a40:	4a18      	ldr	r2, [pc, #96]	; (8011aa4 <synth_IfftMode+0x324>)
 8011a42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011a46:	801a      	strh	r2, [r3, #0]
		audioData[write_data_nbr + 1] = rfft;	//R
 8011a48:	4b17      	ldr	r3, [pc, #92]	; (8011aa8 <synth_IfftMode+0x328>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	005b      	lsls	r3, r3, #1
 8011a50:	68ba      	ldr	r2, [r7, #8]
 8011a52:	4413      	add	r3, r2
 8011a54:	4a13      	ldr	r2, [pc, #76]	; (8011aa4 <synth_IfftMode+0x324>)
 8011a56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011a5a:	801a      	strh	r2, [r3, #0]
		write_data_nbr += 2;
 8011a5c:	4b12      	ldr	r3, [pc, #72]	; (8011aa8 <synth_IfftMode+0x328>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	3302      	adds	r3, #2
 8011a62:	4a11      	ldr	r2, [pc, #68]	; (8011aa8 <synth_IfftMode+0x328>)
 8011a64:	6013      	str	r3, [r2, #0]
	while(write_data_nbr < NbrOfData)
 8011a66:	4b10      	ldr	r3, [pc, #64]	; (8011aa8 <synth_IfftMode+0x328>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	f63f ae91 	bhi.w	8011794 <synth_IfftMode+0x14>
	}

	synth_process_cnt += NbrOfData / 2;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	085a      	lsrs	r2, r3, #1
 8011a76:	4b0d      	ldr	r3, [pc, #52]	; (8011aac <synth_IfftMode+0x32c>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4413      	add	r3, r2
 8011a7c:	4a0b      	ldr	r2, [pc, #44]	; (8011aac <synth_IfftMode+0x32c>)
 8011a7e:	6013      	str	r3, [r2, #0]
}
 8011a80:	bf00      	nop
 8011a82:	371c      	adds	r7, #28
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr
 8011a8c:	24003654 	.word	0x24003654
 8011a90:	240050f0 	.word	0x240050f0
 8011a94:	240050e8 	.word	0x240050e8
 8011a98:	240050ec 	.word	0x240050ec
 8011a9c:	240050e0 	.word	0x240050e0
 8011aa0:	240050e4 	.word	0x240050e4
 8011aa4:	240050f4 	.word	0x240050f4
 8011aa8:	240050dc 	.word	0x240050dc
 8011aac:	24004cd4 	.word	0x24004cd4

08011ab0 <synth_AudioProcess>:
 *                                                                                 ^
 *                                                                                FULL
 *                                                                              COMPLETE
 */
void synth_AudioProcess(synthModeTypeDef mode)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b08a      	sub	sp, #40	; 0x28
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	71fb      	strb	r3, [r7, #7]
	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(bufferAudioState == AUDIO_BUFFER_OFFSET_HALF)
 8011aba:	4b40      	ldr	r3, [pc, #256]	; (8011bbc <synth_AudioProcess+0x10c>)
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d139      	bne.n	8011b36 <synth_AudioProcess+0x86>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 8011ac2:	4b3e      	ldr	r3, [pc, #248]	; (8011bbc <synth_AudioProcess+0x10c>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	701a      	strb	r2, [r3, #0]
		cis_ImageProcessBW(imageData);
 8011ac8:	4b3d      	ldr	r3, [pc, #244]	; (8011bc0 <synth_AudioProcess+0x110>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f00b fa69 	bl	801cfa4 <cis_ImageProcessBW>
		if (mode == IFFT_MODE)
 8011ad2:	79fb      	ldrb	r3, [r7, #7]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d107      	bne.n	8011ae8 <synth_AudioProcess+0x38>
			synth_IfftMode(imageData, &audioBuff[0], AUDIO_BUFFER_SIZE / 2);
 8011ad8:	4b39      	ldr	r3, [pc, #228]	; (8011bc0 <synth_AudioProcess+0x110>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ae0:	4938      	ldr	r1, [pc, #224]	; (8011bc4 <synth_AudioProcess+0x114>)
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7ff fe4c 	bl	8011780 <synth_IfftMode>
 8011ae8:	4b36      	ldr	r3, [pc, #216]	; (8011bc4 <synth_AudioProcess+0x114>)
 8011aea:	627b      	str	r3, [r7, #36]	; 0x24
 8011aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011af0:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8011af2:	6a3b      	ldr	r3, [r7, #32]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	dd1d      	ble.n	8011b34 <synth_AudioProcess+0x84>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afa:	f003 021f 	and.w	r2, r3, #31
 8011afe:	6a3b      	ldr	r3, [r7, #32]
 8011b00:	4413      	add	r3, r2
 8011b02:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8011b08:	f3bf 8f4f 	dsb	sy
}
 8011b0c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011b0e:	4a2e      	ldr	r2, [pc, #184]	; (8011bc8 <synth_AudioProcess+0x118>)
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	3320      	adds	r3, #32
 8011b1a:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	3b20      	subs	r3, #32
 8011b20:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	dcf2      	bgt.n	8011b0e <synth_AudioProcess+0x5e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011b28:	f3bf 8f4f 	dsb	sy
}
 8011b2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011b2e:	f3bf 8f6f 	isb	sy
}
 8011b32:	bf00      	nop
}
 8011b34:	bf00      	nop
		/* Clean Data Cache to update the content of the SRAM */
		SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[0], AUDIO_BUFFER_SIZE);
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(bufferAudioState == AUDIO_BUFFER_OFFSET_FULL)
 8011b36:	4b21      	ldr	r3, [pc, #132]	; (8011bbc <synth_AudioProcess+0x10c>)
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	2b02      	cmp	r3, #2
 8011b3c:	d13a      	bne.n	8011bb4 <synth_AudioProcess+0x104>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_NONE;
 8011b3e:	4b1f      	ldr	r3, [pc, #124]	; (8011bbc <synth_AudioProcess+0x10c>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	701a      	strb	r2, [r3, #0]
		cis_ImageProcessBW(imageData);
 8011b44:	4b1e      	ldr	r3, [pc, #120]	; (8011bc0 <synth_AudioProcess+0x110>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f00b fa2b 	bl	801cfa4 <cis_ImageProcessBW>
		if (mode == IFFT_MODE)
 8011b4e:	79fb      	ldrb	r3, [r7, #7]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d107      	bne.n	8011b64 <synth_AudioProcess+0xb4>
			synth_IfftMode(imageData, &audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2);
 8011b54:	4b1a      	ldr	r3, [pc, #104]	; (8011bc0 <synth_AudioProcess+0x110>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b5c:	491b      	ldr	r1, [pc, #108]	; (8011bcc <synth_AudioProcess+0x11c>)
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7ff fe0e 	bl	8011780 <synth_IfftMode>
 8011b64:	4b19      	ldr	r3, [pc, #100]	; (8011bcc <synth_AudioProcess+0x11c>)
 8011b66:	617b      	str	r3, [r7, #20]
 8011b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b6c:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	dd1d      	ble.n	8011bb0 <synth_AudioProcess+0x100>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	f003 021f 	and.w	r2, r3, #31
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	4413      	add	r3, r2
 8011b7e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8011b84:	f3bf 8f4f 	dsb	sy
}
 8011b88:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011b8a:	4a0f      	ldr	r2, [pc, #60]	; (8011bc8 <synth_AudioProcess+0x118>)
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	3320      	adds	r3, #32
 8011b96:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	3b20      	subs	r3, #32
 8011b9c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	dcf2      	bgt.n	8011b8a <synth_AudioProcess+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
 8011ba4:	f3bf 8f4f 	dsb	sy
}
 8011ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011baa:	f3bf 8f6f 	isb	sy
}
 8011bae:	bf00      	nop
}
 8011bb0:	bf00      	nop
		//			else
		//				synth_PlayMode(imageData, (int16_t*)&audioBuff[AUDIO_QUARTER_BUFFER_SIZE / 2], (AUDIO_QUARTER_BUFFER_SIZE / 2));
		/* Clean Data Cache to update the content of the SRAM */
		SCB_CleanDCache_by_Addr((uint32_t *)&audioBuff[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE);
	}
	return;
 8011bb2:	bf00      	nop
 8011bb4:	bf00      	nop
}
 8011bb6:	3728      	adds	r7, #40	; 0x28
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	24005b30 	.word	0x24005b30
 8011bc0:	24004cd8 	.word	0x24004cd8
 8011bc4:	24004cdc 	.word	0x24004cdc
 8011bc8:	e000ed00 	.word	0xe000ed00
 8011bcc:	24004edc 	.word	0x24004edc

08011bd0 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	4a05      	ldr	r2, [pc, #20]	; (8011bf4 <HAL_SAI_TxHalfCpltCallback+0x24>)
 8011bde:	4293      	cmp	r3, r2
 8011be0:	d102      	bne.n	8011be8 <HAL_SAI_TxHalfCpltCallback+0x18>
	{
		bufferAudioState = AUDIO_BUFFER_OFFSET_HALF;
 8011be2:	4b05      	ldr	r3, [pc, #20]	; (8011bf8 <HAL_SAI_TxHalfCpltCallback+0x28>)
 8011be4:	2201      	movs	r2, #1
 8011be6:	701a      	strb	r2, [r3, #0]
	}
}
 8011be8:	bf00      	nop
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr
 8011bf4:	40015804 	.word	0x40015804
 8011bf8:	24005b30 	.word	0x24005b30

08011bfc <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai_BlockA1)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
	if(hsai_BlockA1->Instance==SAI1_Block_A)
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	4a05      	ldr	r2, [pc, #20]	; (8011c20 <HAL_SAI_TxCpltCallback+0x24>)
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	d102      	bne.n	8011c14 <HAL_SAI_TxCpltCallback+0x18>
	{
		/* allows AUDIO_Process() to refill 2nd part of the buffer  */
		bufferAudioState = AUDIO_BUFFER_OFFSET_FULL;
 8011c0e:	4b05      	ldr	r3, [pc, #20]	; (8011c24 <HAL_SAI_TxCpltCallback+0x28>)
 8011c10:	2202      	movs	r2, #2
 8011c12:	701a      	strb	r2, [r3, #0]
	}
}
 8011c14:	bf00      	nop
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr
 8011c20:	40015804 	.word	0x40015804
 8011c24:	24005b30 	.word	0x24005b30

08011c28 <calculate_frequency>:
 * @brief  calculate frequency,
 * @param  comma cnt
 * @retval frequency
 */
static float calculate_frequency(uint32_t comma_cnt)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
	float frequency = 0.0;
 8011c30:	f04f 0300 	mov.w	r3, #0
 8011c34:	60fb      	str	r3, [r7, #12]
	frequency = START_FREQUENCY * pow(2, (comma_cnt / (12.0 * (COMMA_PER_OCTAVE / (12.0 / (log(2)) * log((START_FREQUENCY * 2.0) / START_FREQUENCY))))));
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	ee07 3a90 	vmov	s15, r3
 8011c3c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011c40:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8011c78 <calculate_frequency+0x50>
 8011c44:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8011c48:	eeb0 1b46 	vmov.f64	d1, d6
 8011c4c:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011c50:	f010 ff22 	bl	8022a98 <pow>
 8011c54:	eeb0 7b40 	vmov.f64	d7, d0
 8011c58:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8011c80 <calculate_frequency+0x58>
 8011c5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011c64:	edc7 7a03 	vstr	s15, [r7, #12]

	return frequency;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	ee07 3a90 	vmov	s15, r3
}
 8011c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8011c72:	3710      	adds	r7, #16
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	00000000 	.word	0x00000000
 8011c7c:	404e0000 	.word	0x404e0000
 8011c80:	00000000 	.word	0x00000000
 8011c84:	40540000 	.word	0x40540000

08011c88 <init_waves>:
 * @param  unitary_waveform pointer,
 * @param  waves structure pointer,
 * @retval buffer length on success, negative value otherwise
 */
uint32_t init_waves(int16_t **unitary_waveform, struct wave *waves)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	ed2d 8b02 	vpush	{d8}
 8011c8e:	b08c      	sub	sp, #48	; 0x30
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
	uint32_t buffer_len = 0;
 8011c96:	2300      	movs	r3, #0
 8011c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t current_unitary_waveform_cell = 0;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t note = 0;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	627b      	str	r3, [r7, #36]	; 0x24

	//compute cell number for storage all oscillators waveform
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	623b      	str	r3, [r7, #32]
 8011ca6:	e014      	b.n	8011cd2 <init_waves+0x4a>
	{
		//store only first octave_coeff frequencies ---- logarithmic distribution
		float frequency = calculate_frequency(comma_cnt);
 8011ca8:	6a38      	ldr	r0, [r7, #32]
 8011caa:	f7ff ffbd 	bl	8011c28 <calculate_frequency>
 8011cae:	ed87 0a02 	vstr	s0, [r7, #8]
		buffer_len += (uint32_t)(SAMPLING_FREQUENCY / frequency);
 8011cb2:	eddf 6a81 	vldr	s13, [pc, #516]	; 8011eb8 <init_waves+0x230>
 8011cb6:	ed97 7a02 	vldr	s14, [r7, #8]
 8011cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011cc2:	ee17 2a90 	vmov	r2, s15
 8011cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc8:	4413      	add	r3, r2
 8011cca:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t comma_cnt = 0; comma_cnt < COMMA_PER_OCTAVE; comma_cnt++)
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	623b      	str	r3, [r7, #32]
 8011cd2:	6a3b      	ldr	r3, [r7, #32]
 8011cd4:	2b3b      	cmp	r3, #59	; 0x3b
 8011cd6:	d9e7      	bls.n	8011ca8 <init_waves+0x20>
	}

	//allocate the contiguous memory area for storage all waveforms for the first octave_coeff
	*unitary_waveform = malloc(buffer_len * sizeof(uint16_t*));
 8011cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f00c fa6b 	bl	801e1b8 <malloc>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	601a      	str	r2, [r3, #0]
	if (*unitary_waveform == NULL)
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d101      	bne.n	8011cf6 <init_waves+0x6e>
	{
		Error_Handler();
 8011cf2:	f7f0 fd97 	bl	8002824 <Error_Handler>
	}

	//compute and store the waveform into unitary_waveform only for the first octave_coeff
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	61fb      	str	r3, [r7, #28]
 8011cfa:	e0bf      	b.n	8011e7c <init_waves+0x1f4>
	{
		//compute frequency for each comma into the first octave_coeff
		float frequency = calculate_frequency(current_comma_first_octave);
 8011cfc:	69f8      	ldr	r0, [r7, #28]
 8011cfe:	f7ff ff93 	bl	8011c28 <calculate_frequency>
 8011d02:	ed87 0a04 	vstr	s0, [r7, #16]

		//current aera size is the number of char cell for storage a waveform at the current frequency (one pixel per frequency oscillator)
		uint32_t current_aera_size = (uint32_t)(SAMPLING_FREQUENCY / frequency);
 8011d06:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8011eb8 <init_waves+0x230>
 8011d0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8011d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d16:	ee17 3a90 	vmov	r3, s15
 8011d1a:	60fb      	str	r3, [r7, #12]

		//fill unitary_waveform buffer with sinusoidal waveform for each comma
		for (uint32_t x = 0; x < current_aera_size; x++)
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	61bb      	str	r3, [r7, #24]
 8011d20:	e030      	b.n	8011d84 <init_waves+0xfc>
		{
			//sanity check
			if (current_unitary_waveform_cell < buffer_len)
 8011d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d229      	bcs.n	8011d7e <init_waves+0xf6>
			{
				(*unitary_waveform)[current_unitary_waveform_cell] = ((sin((x * 2.00 * PI )/ (double)current_aera_size))) * (WAVE_AMP_RESOLUTION / 2.00);
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	ee07 3a90 	vmov	s15, r3
 8011d30:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011d34:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011d38:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8011ea8 <init_waves+0x220>
 8011d3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	ee07 3a90 	vmov	s15, r3
 8011d46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011d4a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8011d4e:	eeb0 0b45 	vmov.f64	d0, d5
 8011d52:	f011 f965 	bl	8023020 <sin>
 8011d56:	eeb0 7b40 	vmov.f64	d7, d0
 8011d5a:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8011eb0 <init_waves+0x228>
 8011d5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681a      	ldr	r2, [r3, #0]
 8011d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d68:	005b      	lsls	r3, r3, #1
 8011d6a:	4413      	add	r3, r2
 8011d6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011d70:	ee17 2a90 	vmov	r2, s15
 8011d74:	b212      	sxth	r2, r2
 8011d76:	801a      	strh	r2, [r3, #0]
				current_unitary_waveform_cell++;
 8011d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	62bb      	str	r3, [r7, #40]	; 0x28
		for (uint32_t x = 0; x < current_aera_size; x++)
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	3301      	adds	r3, #1
 8011d82:	61bb      	str	r3, [r7, #24]
 8011d84:	69ba      	ldr	r2, [r7, #24]
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d3ca      	bcc.n	8011d22 <init_waves+0x9a>
			}
		}

		//for each octave (only the first octave_coeff stay in RAM, for multiple octave_coeff start_ptr stay on first octave waveform but current_ptr jump cell according to multiple frequencies)
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	617b      	str	r3, [r7, #20]
 8011d90:	e06e      	b.n	8011e70 <init_waves+0x1e8>
			// *** is current pix, --- octave separation
			// *---------*---------*---------*---------*---------*---------*---------*--------- for current comma at each octave
			// ---*---------*---------*---------*---------*---------*---------*---------*------ for the second comma...
			// ------*---------*---------*---------*---------*---------*---------*---------*---
			// ---------*---------*---------*---------*---------*---------*---------*---------*
			note = current_comma_first_octave + COMMA_PER_OCTAVE * octave;
 8011d92:	697a      	ldr	r2, [r7, #20]
 8011d94:	4613      	mov	r3, r2
 8011d96:	011b      	lsls	r3, r3, #4
 8011d98:	1a9b      	subs	r3, r3, r2
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	4413      	add	r3, r2
 8011da2:	627b      	str	r3, [r7, #36]	; 0x24
			//sanity check, if user demand is't possible
			if (note < NUMBER_OF_NOTES)
 8011da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da6:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8011daa:	d25e      	bcs.n	8011e6a <init_waves+0x1e2>
			{
#ifdef PRINT_FREQUENCY
				//store frequencies
				waves[note].frequency = frequency * pow(2, octave);
 8011dac:	edd7 7a04 	vldr	s15, [r7, #16]
 8011db0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	ee07 3a90 	vmov	s15, r3
 8011dba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011dbe:	eeb0 1b47 	vmov.f64	d1, d7
 8011dc2:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011dc6:	f010 fe67 	bl	8022a98 <pow>
 8011dca:	eeb0 7b40 	vmov.f64	d7, d0
 8011dce:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	4413      	add	r3, r2
 8011dda:	009b      	lsls	r3, r3, #2
 8011ddc:	461a      	mov	r2, r3
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	4413      	add	r3, r2
 8011de2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8011de6:	edc3 7a04 	vstr	s15, [r3, #16]
#endif
				//store octave number
				waves[note].octave_coeff = pow(2, octave);
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	ee07 3a90 	vmov	s15, r3
 8011df0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011df4:	eeb0 1b47 	vmov.f64	d1, d7
 8011df8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8011dfc:	f010 fe4c 	bl	8022a98 <pow>
 8011e00:	eeb0 7b40 	vmov.f64	d7, d0
 8011e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e06:	4613      	mov	r3, r2
 8011e08:	009b      	lsls	r3, r3, #2
 8011e0a:	4413      	add	r3, r2
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	461a      	mov	r2, r3
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	4413      	add	r3, r2
 8011e14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8011e18:	ee17 2a90 	vmov	r2, s15
 8011e1c:	b292      	uxth	r2, r2
 8011e1e:	811a      	strh	r2, [r3, #8]
				//store aera size
				waves[note].aera_size = current_aera_size;
 8011e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e22:	4613      	mov	r3, r2
 8011e24:	009b      	lsls	r3, r3, #2
 8011e26:	4413      	add	r3, r2
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	4413      	add	r3, r2
 8011e30:	68fa      	ldr	r2, [r7, #12]
 8011e32:	b292      	uxth	r2, r2
 8011e34:	80da      	strh	r2, [r3, #6]
				//store pointer address
				waves[note].start_ptr = &(*unitary_waveform)[current_unitary_waveform_cell - current_aera_size];
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6818      	ldr	r0, [r3, #0]
 8011e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	0059      	lsls	r1, r3, #1
 8011e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e44:	4613      	mov	r3, r2
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	4413      	add	r3, r2
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	4413      	add	r3, r2
 8011e52:	1842      	adds	r2, r0, r1
 8011e54:	601a      	str	r2, [r3, #0]
				//set current pointer at the same address
				waves[note].current_idx = 0;
 8011e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e58:	4613      	mov	r3, r2
 8011e5a:	009b      	lsls	r3, r3, #2
 8011e5c:	4413      	add	r3, r2
 8011e5e:	009b      	lsls	r3, r3, #2
 8011e60:	461a      	mov	r2, r3
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	4413      	add	r3, r2
 8011e66:	2200      	movs	r2, #0
 8011e68:	809a      	strh	r2, [r3, #4]
		for (uint32_t octave = 0; octave <= MAX_OCTAVE_NUMBER; octave++)
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	617b      	str	r3, [r7, #20]
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	2b0a      	cmp	r3, #10
 8011e74:	d98d      	bls.n	8011d92 <init_waves+0x10a>
	for (uint32_t current_comma_first_octave = 0; current_comma_first_octave < COMMA_PER_OCTAVE; current_comma_first_octave++)
 8011e76:	69fb      	ldr	r3, [r7, #28]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	61fb      	str	r3, [r7, #28]
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	2b3b      	cmp	r3, #59	; 0x3b
 8011e80:	f67f af3c 	bls.w	8011cfc <init_waves+0x74>
			}
		}
	}

	if (note < NUMBER_OF_NOTES)
 8011e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e86:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8011e8a:	d206      	bcs.n	8011e9a <init_waves+0x212>
	{
		printf("Configuration fail, current pix : %d\n", (int)note);
 8011e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8e:	4619      	mov	r1, r3
 8011e90:	480a      	ldr	r0, [pc, #40]	; (8011ebc <init_waves+0x234>)
 8011e92:	f00d f8c7 	bl	801f024 <iprintf>
		Error_Handler();
 8011e96:	f7f0 fcc5 	bl	8002824 <Error_Handler>
	}

	return buffer_len;
 8011e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3730      	adds	r7, #48	; 0x30
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	ecbd 8b02 	vpop	{d8}
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	54442eea 	.word	0x54442eea
 8011eac:	400921fb 	.word	0x400921fb
 8011eb0:	00000000 	.word	0x00000000
 8011eb4:	40dfffe0 	.word	0x40dfffe0
 8011eb8:	473b8000 	.word	0x473b8000
 8011ebc:	08023fd0 	.word	0x08023fd0

08011ec0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011eca:	88fb      	ldrh	r3, [r7, #6]
 8011ecc:	021b      	lsls	r3, r3, #8
 8011ece:	b21a      	sxth	r2, r3
 8011ed0:	88fb      	ldrh	r3, [r7, #6]
 8011ed2:	0a1b      	lsrs	r3, r3, #8
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	b21b      	sxth	r3, r3
 8011ed8:	4313      	orrs	r3, r2
 8011eda:	b21b      	sxth	r3, r3
 8011edc:	b29b      	uxth	r3, r3
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	370c      	adds	r7, #12
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee8:	4770      	bx	lr

08011eea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011eea:	b480      	push	{r7}
 8011eec:	b083      	sub	sp, #12
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	061a      	lsls	r2, r3, #24
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	021b      	lsls	r3, r3, #8
 8011efa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011efe:	431a      	orrs	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	0a1b      	lsrs	r3, r3, #8
 8011f04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011f08:	431a      	orrs	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	0e1b      	lsrs	r3, r3, #24
 8011f0e:	4313      	orrs	r3, r2
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	370c      	adds	r7, #12
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr

08011f1c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011f24:	4915      	ldr	r1, [pc, #84]	; (8011f7c <etharp_free_entry+0x60>)
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	4613      	mov	r3, r2
 8011f2a:	005b      	lsls	r3, r3, #1
 8011f2c:	4413      	add	r3, r2
 8011f2e:	00db      	lsls	r3, r3, #3
 8011f30:	440b      	add	r3, r1
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d013      	beq.n	8011f60 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011f38:	4910      	ldr	r1, [pc, #64]	; (8011f7c <etharp_free_entry+0x60>)
 8011f3a:	687a      	ldr	r2, [r7, #4]
 8011f3c:	4613      	mov	r3, r2
 8011f3e:	005b      	lsls	r3, r3, #1
 8011f40:	4413      	add	r3, r2
 8011f42:	00db      	lsls	r3, r3, #3
 8011f44:	440b      	add	r3, r1
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f003 feb5 	bl	8015cb8 <pbuf_free>
    arp_table[i].q = NULL;
 8011f4e:	490b      	ldr	r1, [pc, #44]	; (8011f7c <etharp_free_entry+0x60>)
 8011f50:	687a      	ldr	r2, [r7, #4]
 8011f52:	4613      	mov	r3, r2
 8011f54:	005b      	lsls	r3, r3, #1
 8011f56:	4413      	add	r3, r2
 8011f58:	00db      	lsls	r3, r3, #3
 8011f5a:	440b      	add	r3, r1
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011f60:	4906      	ldr	r1, [pc, #24]	; (8011f7c <etharp_free_entry+0x60>)
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	4613      	mov	r3, r2
 8011f66:	005b      	lsls	r3, r3, #1
 8011f68:	4413      	add	r3, r2
 8011f6a:	00db      	lsls	r3, r3, #3
 8011f6c:	440b      	add	r3, r1
 8011f6e:	3314      	adds	r3, #20
 8011f70:	2200      	movs	r2, #0
 8011f72:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011f74:	bf00      	nop
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	240050f8 	.word	0x240050f8

08011f80 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f86:	2300      	movs	r3, #0
 8011f88:	607b      	str	r3, [r7, #4]
 8011f8a:	e096      	b.n	80120ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011f8c:	494f      	ldr	r1, [pc, #316]	; (80120cc <etharp_tmr+0x14c>)
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	4613      	mov	r3, r2
 8011f92:	005b      	lsls	r3, r3, #1
 8011f94:	4413      	add	r3, r2
 8011f96:	00db      	lsls	r3, r3, #3
 8011f98:	440b      	add	r3, r1
 8011f9a:	3314      	adds	r3, #20
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011fa0:	78fb      	ldrb	r3, [r7, #3]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 8086 	beq.w	80120b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011fa8:	4948      	ldr	r1, [pc, #288]	; (80120cc <etharp_tmr+0x14c>)
 8011faa:	687a      	ldr	r2, [r7, #4]
 8011fac:	4613      	mov	r3, r2
 8011fae:	005b      	lsls	r3, r3, #1
 8011fb0:	4413      	add	r3, r2
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	440b      	add	r3, r1
 8011fb6:	3312      	adds	r3, #18
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	b298      	uxth	r0, r3
 8011fbe:	4943      	ldr	r1, [pc, #268]	; (80120cc <etharp_tmr+0x14c>)
 8011fc0:	687a      	ldr	r2, [r7, #4]
 8011fc2:	4613      	mov	r3, r2
 8011fc4:	005b      	lsls	r3, r3, #1
 8011fc6:	4413      	add	r3, r2
 8011fc8:	00db      	lsls	r3, r3, #3
 8011fca:	440b      	add	r3, r1
 8011fcc:	3312      	adds	r3, #18
 8011fce:	4602      	mov	r2, r0
 8011fd0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011fd2:	493e      	ldr	r1, [pc, #248]	; (80120cc <etharp_tmr+0x14c>)
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	4613      	mov	r3, r2
 8011fd8:	005b      	lsls	r3, r3, #1
 8011fda:	4413      	add	r3, r2
 8011fdc:	00db      	lsls	r3, r3, #3
 8011fde:	440b      	add	r3, r1
 8011fe0:	3312      	adds	r3, #18
 8011fe2:	881b      	ldrh	r3, [r3, #0]
 8011fe4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011fe8:	d215      	bcs.n	8012016 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011fea:	4938      	ldr	r1, [pc, #224]	; (80120cc <etharp_tmr+0x14c>)
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	4613      	mov	r3, r2
 8011ff0:	005b      	lsls	r3, r3, #1
 8011ff2:	4413      	add	r3, r2
 8011ff4:	00db      	lsls	r3, r3, #3
 8011ff6:	440b      	add	r3, r1
 8011ff8:	3314      	adds	r3, #20
 8011ffa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011ffc:	2b01      	cmp	r3, #1
 8011ffe:	d10e      	bne.n	801201e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012000:	4932      	ldr	r1, [pc, #200]	; (80120cc <etharp_tmr+0x14c>)
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	4613      	mov	r3, r2
 8012006:	005b      	lsls	r3, r3, #1
 8012008:	4413      	add	r3, r2
 801200a:	00db      	lsls	r3, r3, #3
 801200c:	440b      	add	r3, r1
 801200e:	3312      	adds	r3, #18
 8012010:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012012:	2b04      	cmp	r3, #4
 8012014:	d903      	bls.n	801201e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f7ff ff80 	bl	8011f1c <etharp_free_entry>
 801201c:	e04a      	b.n	80120b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801201e:	492b      	ldr	r1, [pc, #172]	; (80120cc <etharp_tmr+0x14c>)
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	4613      	mov	r3, r2
 8012024:	005b      	lsls	r3, r3, #1
 8012026:	4413      	add	r3, r2
 8012028:	00db      	lsls	r3, r3, #3
 801202a:	440b      	add	r3, r1
 801202c:	3314      	adds	r3, #20
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	2b03      	cmp	r3, #3
 8012032:	d10a      	bne.n	801204a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012034:	4925      	ldr	r1, [pc, #148]	; (80120cc <etharp_tmr+0x14c>)
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	4613      	mov	r3, r2
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	4413      	add	r3, r2
 801203e:	00db      	lsls	r3, r3, #3
 8012040:	440b      	add	r3, r1
 8012042:	3314      	adds	r3, #20
 8012044:	2204      	movs	r2, #4
 8012046:	701a      	strb	r2, [r3, #0]
 8012048:	e034      	b.n	80120b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801204a:	4920      	ldr	r1, [pc, #128]	; (80120cc <etharp_tmr+0x14c>)
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	4613      	mov	r3, r2
 8012050:	005b      	lsls	r3, r3, #1
 8012052:	4413      	add	r3, r2
 8012054:	00db      	lsls	r3, r3, #3
 8012056:	440b      	add	r3, r1
 8012058:	3314      	adds	r3, #20
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	2b04      	cmp	r3, #4
 801205e:	d10a      	bne.n	8012076 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012060:	491a      	ldr	r1, [pc, #104]	; (80120cc <etharp_tmr+0x14c>)
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	4613      	mov	r3, r2
 8012066:	005b      	lsls	r3, r3, #1
 8012068:	4413      	add	r3, r2
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	440b      	add	r3, r1
 801206e:	3314      	adds	r3, #20
 8012070:	2202      	movs	r2, #2
 8012072:	701a      	strb	r2, [r3, #0]
 8012074:	e01e      	b.n	80120b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012076:	4915      	ldr	r1, [pc, #84]	; (80120cc <etharp_tmr+0x14c>)
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	4613      	mov	r3, r2
 801207c:	005b      	lsls	r3, r3, #1
 801207e:	4413      	add	r3, r2
 8012080:	00db      	lsls	r3, r3, #3
 8012082:	440b      	add	r3, r1
 8012084:	3314      	adds	r3, #20
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	2b01      	cmp	r3, #1
 801208a:	d113      	bne.n	80120b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801208c:	490f      	ldr	r1, [pc, #60]	; (80120cc <etharp_tmr+0x14c>)
 801208e:	687a      	ldr	r2, [r7, #4]
 8012090:	4613      	mov	r3, r2
 8012092:	005b      	lsls	r3, r3, #1
 8012094:	4413      	add	r3, r2
 8012096:	00db      	lsls	r3, r3, #3
 8012098:	440b      	add	r3, r1
 801209a:	3308      	adds	r3, #8
 801209c:	6818      	ldr	r0, [r3, #0]
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	4613      	mov	r3, r2
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	4413      	add	r3, r2
 80120a6:	00db      	lsls	r3, r3, #3
 80120a8:	4a08      	ldr	r2, [pc, #32]	; (80120cc <etharp_tmr+0x14c>)
 80120aa:	4413      	add	r3, r2
 80120ac:	3304      	adds	r3, #4
 80120ae:	4619      	mov	r1, r3
 80120b0:	f000 fe6e 	bl	8012d90 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	3301      	adds	r3, #1
 80120b8:	607b      	str	r3, [r7, #4]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2b09      	cmp	r3, #9
 80120be:	f77f af65 	ble.w	8011f8c <etharp_tmr+0xc>
      }
    }
  }
}
 80120c2:	bf00      	nop
 80120c4:	bf00      	nop
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	240050f8 	.word	0x240050f8

080120d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b08a      	sub	sp, #40	; 0x28
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	60f8      	str	r0, [r7, #12]
 80120d8:	460b      	mov	r3, r1
 80120da:	607a      	str	r2, [r7, #4]
 80120dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80120de:	230a      	movs	r3, #10
 80120e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80120e2:	230a      	movs	r3, #10
 80120e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80120e6:	230a      	movs	r3, #10
 80120e8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80120ea:	2300      	movs	r3, #0
 80120ec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80120ee:	230a      	movs	r3, #10
 80120f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80120f2:	2300      	movs	r3, #0
 80120f4:	83bb      	strh	r3, [r7, #28]
 80120f6:	2300      	movs	r3, #0
 80120f8:	837b      	strh	r3, [r7, #26]
 80120fa:	2300      	movs	r3, #0
 80120fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120fe:	2300      	movs	r3, #0
 8012100:	843b      	strh	r3, [r7, #32]
 8012102:	e0ae      	b.n	8012262 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012104:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012108:	49a6      	ldr	r1, [pc, #664]	; (80123a4 <etharp_find_entry+0x2d4>)
 801210a:	4613      	mov	r3, r2
 801210c:	005b      	lsls	r3, r3, #1
 801210e:	4413      	add	r3, r2
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	440b      	add	r3, r1
 8012114:	3314      	adds	r3, #20
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801211a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801211e:	2b0a      	cmp	r3, #10
 8012120:	d105      	bne.n	801212e <etharp_find_entry+0x5e>
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d102      	bne.n	801212e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012128:	8c3b      	ldrh	r3, [r7, #32]
 801212a:	847b      	strh	r3, [r7, #34]	; 0x22
 801212c:	e095      	b.n	801225a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801212e:	7dfb      	ldrb	r3, [r7, #23]
 8012130:	2b00      	cmp	r3, #0
 8012132:	f000 8092 	beq.w	801225a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012136:	7dfb      	ldrb	r3, [r7, #23]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d009      	beq.n	8012150 <etharp_find_entry+0x80>
 801213c:	7dfb      	ldrb	r3, [r7, #23]
 801213e:	2b01      	cmp	r3, #1
 8012140:	d806      	bhi.n	8012150 <etharp_find_entry+0x80>
 8012142:	4b99      	ldr	r3, [pc, #612]	; (80123a8 <etharp_find_entry+0x2d8>)
 8012144:	f240 1223 	movw	r2, #291	; 0x123
 8012148:	4998      	ldr	r1, [pc, #608]	; (80123ac <etharp_find_entry+0x2dc>)
 801214a:	4899      	ldr	r0, [pc, #612]	; (80123b0 <etharp_find_entry+0x2e0>)
 801214c:	f00c ff6a 	bl	801f024 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d020      	beq.n	8012198 <etharp_find_entry+0xc8>
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	6819      	ldr	r1, [r3, #0]
 801215a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801215e:	4891      	ldr	r0, [pc, #580]	; (80123a4 <etharp_find_entry+0x2d4>)
 8012160:	4613      	mov	r3, r2
 8012162:	005b      	lsls	r3, r3, #1
 8012164:	4413      	add	r3, r2
 8012166:	00db      	lsls	r3, r3, #3
 8012168:	4403      	add	r3, r0
 801216a:	3304      	adds	r3, #4
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	4299      	cmp	r1, r3
 8012170:	d112      	bne.n	8012198 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00c      	beq.n	8012192 <etharp_find_entry+0xc2>
 8012178:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801217c:	4989      	ldr	r1, [pc, #548]	; (80123a4 <etharp_find_entry+0x2d4>)
 801217e:	4613      	mov	r3, r2
 8012180:	005b      	lsls	r3, r3, #1
 8012182:	4413      	add	r3, r2
 8012184:	00db      	lsls	r3, r3, #3
 8012186:	440b      	add	r3, r1
 8012188:	3308      	adds	r3, #8
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	429a      	cmp	r2, r3
 8012190:	d102      	bne.n	8012198 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012192:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012196:	e100      	b.n	801239a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012198:	7dfb      	ldrb	r3, [r7, #23]
 801219a:	2b01      	cmp	r3, #1
 801219c:	d140      	bne.n	8012220 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801219e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121a2:	4980      	ldr	r1, [pc, #512]	; (80123a4 <etharp_find_entry+0x2d4>)
 80121a4:	4613      	mov	r3, r2
 80121a6:	005b      	lsls	r3, r3, #1
 80121a8:	4413      	add	r3, r2
 80121aa:	00db      	lsls	r3, r3, #3
 80121ac:	440b      	add	r3, r1
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d01a      	beq.n	80121ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80121b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121b8:	497a      	ldr	r1, [pc, #488]	; (80123a4 <etharp_find_entry+0x2d4>)
 80121ba:	4613      	mov	r3, r2
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	4413      	add	r3, r2
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	440b      	add	r3, r1
 80121c4:	3312      	adds	r3, #18
 80121c6:	881b      	ldrh	r3, [r3, #0]
 80121c8:	8bba      	ldrh	r2, [r7, #28]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d845      	bhi.n	801225a <etharp_find_entry+0x18a>
            old_queue = i;
 80121ce:	8c3b      	ldrh	r3, [r7, #32]
 80121d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80121d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121d6:	4973      	ldr	r1, [pc, #460]	; (80123a4 <etharp_find_entry+0x2d4>)
 80121d8:	4613      	mov	r3, r2
 80121da:	005b      	lsls	r3, r3, #1
 80121dc:	4413      	add	r3, r2
 80121de:	00db      	lsls	r3, r3, #3
 80121e0:	440b      	add	r3, r1
 80121e2:	3312      	adds	r3, #18
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	83bb      	strh	r3, [r7, #28]
 80121e8:	e037      	b.n	801225a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80121ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80121ee:	496d      	ldr	r1, [pc, #436]	; (80123a4 <etharp_find_entry+0x2d4>)
 80121f0:	4613      	mov	r3, r2
 80121f2:	005b      	lsls	r3, r3, #1
 80121f4:	4413      	add	r3, r2
 80121f6:	00db      	lsls	r3, r3, #3
 80121f8:	440b      	add	r3, r1
 80121fa:	3312      	adds	r3, #18
 80121fc:	881b      	ldrh	r3, [r3, #0]
 80121fe:	8b7a      	ldrh	r2, [r7, #26]
 8012200:	429a      	cmp	r2, r3
 8012202:	d82a      	bhi.n	801225a <etharp_find_entry+0x18a>
            old_pending = i;
 8012204:	8c3b      	ldrh	r3, [r7, #32]
 8012206:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012208:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801220c:	4965      	ldr	r1, [pc, #404]	; (80123a4 <etharp_find_entry+0x2d4>)
 801220e:	4613      	mov	r3, r2
 8012210:	005b      	lsls	r3, r3, #1
 8012212:	4413      	add	r3, r2
 8012214:	00db      	lsls	r3, r3, #3
 8012216:	440b      	add	r3, r1
 8012218:	3312      	adds	r3, #18
 801221a:	881b      	ldrh	r3, [r3, #0]
 801221c:	837b      	strh	r3, [r7, #26]
 801221e:	e01c      	b.n	801225a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012220:	7dfb      	ldrb	r3, [r7, #23]
 8012222:	2b01      	cmp	r3, #1
 8012224:	d919      	bls.n	801225a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012226:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801222a:	495e      	ldr	r1, [pc, #376]	; (80123a4 <etharp_find_entry+0x2d4>)
 801222c:	4613      	mov	r3, r2
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	4413      	add	r3, r2
 8012232:	00db      	lsls	r3, r3, #3
 8012234:	440b      	add	r3, r1
 8012236:	3312      	adds	r3, #18
 8012238:	881b      	ldrh	r3, [r3, #0]
 801223a:	8b3a      	ldrh	r2, [r7, #24]
 801223c:	429a      	cmp	r2, r3
 801223e:	d80c      	bhi.n	801225a <etharp_find_entry+0x18a>
            old_stable = i;
 8012240:	8c3b      	ldrh	r3, [r7, #32]
 8012242:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012244:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012248:	4956      	ldr	r1, [pc, #344]	; (80123a4 <etharp_find_entry+0x2d4>)
 801224a:	4613      	mov	r3, r2
 801224c:	005b      	lsls	r3, r3, #1
 801224e:	4413      	add	r3, r2
 8012250:	00db      	lsls	r3, r3, #3
 8012252:	440b      	add	r3, r1
 8012254:	3312      	adds	r3, #18
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801225a:	8c3b      	ldrh	r3, [r7, #32]
 801225c:	3301      	adds	r3, #1
 801225e:	b29b      	uxth	r3, r3
 8012260:	843b      	strh	r3, [r7, #32]
 8012262:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012266:	2b09      	cmp	r3, #9
 8012268:	f77f af4c 	ble.w	8012104 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801226c:	7afb      	ldrb	r3, [r7, #11]
 801226e:	f003 0302 	and.w	r3, r3, #2
 8012272:	2b00      	cmp	r3, #0
 8012274:	d108      	bne.n	8012288 <etharp_find_entry+0x1b8>
 8012276:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801227a:	2b0a      	cmp	r3, #10
 801227c:	d107      	bne.n	801228e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801227e:	7afb      	ldrb	r3, [r7, #11]
 8012280:	f003 0301 	and.w	r3, r3, #1
 8012284:	2b00      	cmp	r3, #0
 8012286:	d102      	bne.n	801228e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801228c:	e085      	b.n	801239a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801228e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012292:	2b09      	cmp	r3, #9
 8012294:	dc02      	bgt.n	801229c <etharp_find_entry+0x1cc>
    i = empty;
 8012296:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012298:	843b      	strh	r3, [r7, #32]
 801229a:	e039      	b.n	8012310 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801229c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80122a0:	2b09      	cmp	r3, #9
 80122a2:	dc14      	bgt.n	80122ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80122a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80122a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122ac:	493d      	ldr	r1, [pc, #244]	; (80123a4 <etharp_find_entry+0x2d4>)
 80122ae:	4613      	mov	r3, r2
 80122b0:	005b      	lsls	r3, r3, #1
 80122b2:	4413      	add	r3, r2
 80122b4:	00db      	lsls	r3, r3, #3
 80122b6:	440b      	add	r3, r1
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d018      	beq.n	80122f0 <etharp_find_entry+0x220>
 80122be:	4b3a      	ldr	r3, [pc, #232]	; (80123a8 <etharp_find_entry+0x2d8>)
 80122c0:	f240 126d 	movw	r2, #365	; 0x16d
 80122c4:	493b      	ldr	r1, [pc, #236]	; (80123b4 <etharp_find_entry+0x2e4>)
 80122c6:	483a      	ldr	r0, [pc, #232]	; (80123b0 <etharp_find_entry+0x2e0>)
 80122c8:	f00c feac 	bl	801f024 <iprintf>
 80122cc:	e010      	b.n	80122f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80122ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80122d2:	2b09      	cmp	r3, #9
 80122d4:	dc02      	bgt.n	80122dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80122d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122d8:	843b      	strh	r3, [r7, #32]
 80122da:	e009      	b.n	80122f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80122dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80122e0:	2b09      	cmp	r3, #9
 80122e2:	dc02      	bgt.n	80122ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80122e4:	8bfb      	ldrh	r3, [r7, #30]
 80122e6:	843b      	strh	r3, [r7, #32]
 80122e8:	e002      	b.n	80122f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80122ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80122ee:	e054      	b.n	801239a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80122f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80122f4:	2b09      	cmp	r3, #9
 80122f6:	dd06      	ble.n	8012306 <etharp_find_entry+0x236>
 80122f8:	4b2b      	ldr	r3, [pc, #172]	; (80123a8 <etharp_find_entry+0x2d8>)
 80122fa:	f240 127f 	movw	r2, #383	; 0x17f
 80122fe:	492e      	ldr	r1, [pc, #184]	; (80123b8 <etharp_find_entry+0x2e8>)
 8012300:	482b      	ldr	r0, [pc, #172]	; (80123b0 <etharp_find_entry+0x2e0>)
 8012302:	f00c fe8f 	bl	801f024 <iprintf>
    etharp_free_entry(i);
 8012306:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801230a:	4618      	mov	r0, r3
 801230c:	f7ff fe06 	bl	8011f1c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012310:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012314:	2b09      	cmp	r3, #9
 8012316:	dd06      	ble.n	8012326 <etharp_find_entry+0x256>
 8012318:	4b23      	ldr	r3, [pc, #140]	; (80123a8 <etharp_find_entry+0x2d8>)
 801231a:	f240 1283 	movw	r2, #387	; 0x183
 801231e:	4926      	ldr	r1, [pc, #152]	; (80123b8 <etharp_find_entry+0x2e8>)
 8012320:	4823      	ldr	r0, [pc, #140]	; (80123b0 <etharp_find_entry+0x2e0>)
 8012322:	f00c fe7f 	bl	801f024 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801232a:	491e      	ldr	r1, [pc, #120]	; (80123a4 <etharp_find_entry+0x2d4>)
 801232c:	4613      	mov	r3, r2
 801232e:	005b      	lsls	r3, r3, #1
 8012330:	4413      	add	r3, r2
 8012332:	00db      	lsls	r3, r3, #3
 8012334:	440b      	add	r3, r1
 8012336:	3314      	adds	r3, #20
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d006      	beq.n	801234c <etharp_find_entry+0x27c>
 801233e:	4b1a      	ldr	r3, [pc, #104]	; (80123a8 <etharp_find_entry+0x2d8>)
 8012340:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012344:	491d      	ldr	r1, [pc, #116]	; (80123bc <etharp_find_entry+0x2ec>)
 8012346:	481a      	ldr	r0, [pc, #104]	; (80123b0 <etharp_find_entry+0x2e0>)
 8012348:	f00c fe6c 	bl	801f024 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d00b      	beq.n	801236a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	6819      	ldr	r1, [r3, #0]
 801235a:	4812      	ldr	r0, [pc, #72]	; (80123a4 <etharp_find_entry+0x2d4>)
 801235c:	4613      	mov	r3, r2
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	4413      	add	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	4403      	add	r3, r0
 8012366:	3304      	adds	r3, #4
 8012368:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801236a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801236e:	490d      	ldr	r1, [pc, #52]	; (80123a4 <etharp_find_entry+0x2d4>)
 8012370:	4613      	mov	r3, r2
 8012372:	005b      	lsls	r3, r3, #1
 8012374:	4413      	add	r3, r2
 8012376:	00db      	lsls	r3, r3, #3
 8012378:	440b      	add	r3, r1
 801237a:	3312      	adds	r3, #18
 801237c:	2200      	movs	r2, #0
 801237e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012380:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012384:	4907      	ldr	r1, [pc, #28]	; (80123a4 <etharp_find_entry+0x2d4>)
 8012386:	4613      	mov	r3, r2
 8012388:	005b      	lsls	r3, r3, #1
 801238a:	4413      	add	r3, r2
 801238c:	00db      	lsls	r3, r3, #3
 801238e:	440b      	add	r3, r1
 8012390:	3308      	adds	r3, #8
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012396:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801239a:	4618      	mov	r0, r3
 801239c:	3728      	adds	r7, #40	; 0x28
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	240050f8 	.word	0x240050f8
 80123a8:	08023ff8 	.word	0x08023ff8
 80123ac:	0802405c 	.word	0x0802405c
 80123b0:	0802409c 	.word	0x0802409c
 80123b4:	080240c4 	.word	0x080240c4
 80123b8:	080240dc 	.word	0x080240dc
 80123bc:	080240f0 	.word	0x080240f0

080123c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b088      	sub	sp, #32
 80123c4:	af02      	add	r7, sp, #8
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	60b9      	str	r1, [r7, #8]
 80123ca:	607a      	str	r2, [r7, #4]
 80123cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80123d4:	2b06      	cmp	r3, #6
 80123d6:	d006      	beq.n	80123e6 <etharp_update_arp_entry+0x26>
 80123d8:	4b48      	ldr	r3, [pc, #288]	; (80124fc <etharp_update_arp_entry+0x13c>)
 80123da:	f240 12a9 	movw	r2, #425	; 0x1a9
 80123de:	4948      	ldr	r1, [pc, #288]	; (8012500 <etharp_update_arp_entry+0x140>)
 80123e0:	4848      	ldr	r0, [pc, #288]	; (8012504 <etharp_update_arp_entry+0x144>)
 80123e2:	f00c fe1f 	bl	801f024 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d012      	beq.n	8012412 <etharp_update_arp_entry+0x52>
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00e      	beq.n	8012412 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	68f9      	ldr	r1, [r7, #12]
 80123fa:	4618      	mov	r0, r3
 80123fc:	f001 facc 	bl	8013998 <ip4_addr_isbroadcast_u32>
 8012400:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012402:	2b00      	cmp	r3, #0
 8012404:	d105      	bne.n	8012412 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801240e:	2be0      	cmp	r3, #224	; 0xe0
 8012410:	d102      	bne.n	8012418 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012412:	f06f 030f 	mvn.w	r3, #15
 8012416:	e06c      	b.n	80124f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012418:	78fb      	ldrb	r3, [r7, #3]
 801241a:	68fa      	ldr	r2, [r7, #12]
 801241c:	4619      	mov	r1, r3
 801241e:	68b8      	ldr	r0, [r7, #8]
 8012420:	f7ff fe56 	bl	80120d0 <etharp_find_entry>
 8012424:	4603      	mov	r3, r0
 8012426:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012428:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801242c:	2b00      	cmp	r3, #0
 801242e:	da02      	bge.n	8012436 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012430:	8afb      	ldrh	r3, [r7, #22]
 8012432:	b25b      	sxtb	r3, r3
 8012434:	e05d      	b.n	80124f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012436:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801243a:	4933      	ldr	r1, [pc, #204]	; (8012508 <etharp_update_arp_entry+0x148>)
 801243c:	4613      	mov	r3, r2
 801243e:	005b      	lsls	r3, r3, #1
 8012440:	4413      	add	r3, r2
 8012442:	00db      	lsls	r3, r3, #3
 8012444:	440b      	add	r3, r1
 8012446:	3314      	adds	r3, #20
 8012448:	2202      	movs	r2, #2
 801244a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801244c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012450:	492d      	ldr	r1, [pc, #180]	; (8012508 <etharp_update_arp_entry+0x148>)
 8012452:	4613      	mov	r3, r2
 8012454:	005b      	lsls	r3, r3, #1
 8012456:	4413      	add	r3, r2
 8012458:	00db      	lsls	r3, r3, #3
 801245a:	440b      	add	r3, r1
 801245c:	3308      	adds	r3, #8
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012462:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012466:	4613      	mov	r3, r2
 8012468:	005b      	lsls	r3, r3, #1
 801246a:	4413      	add	r3, r2
 801246c:	00db      	lsls	r3, r3, #3
 801246e:	3308      	adds	r3, #8
 8012470:	4a25      	ldr	r2, [pc, #148]	; (8012508 <etharp_update_arp_entry+0x148>)
 8012472:	4413      	add	r3, r2
 8012474:	3304      	adds	r3, #4
 8012476:	2206      	movs	r2, #6
 8012478:	6879      	ldr	r1, [r7, #4]
 801247a:	4618      	mov	r0, r3
 801247c:	f00b feb2 	bl	801e1e4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012480:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012484:	4920      	ldr	r1, [pc, #128]	; (8012508 <etharp_update_arp_entry+0x148>)
 8012486:	4613      	mov	r3, r2
 8012488:	005b      	lsls	r3, r3, #1
 801248a:	4413      	add	r3, r2
 801248c:	00db      	lsls	r3, r3, #3
 801248e:	440b      	add	r3, r1
 8012490:	3312      	adds	r3, #18
 8012492:	2200      	movs	r2, #0
 8012494:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012496:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801249a:	491b      	ldr	r1, [pc, #108]	; (8012508 <etharp_update_arp_entry+0x148>)
 801249c:	4613      	mov	r3, r2
 801249e:	005b      	lsls	r3, r3, #1
 80124a0:	4413      	add	r3, r2
 80124a2:	00db      	lsls	r3, r3, #3
 80124a4:	440b      	add	r3, r1
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d021      	beq.n	80124f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80124ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124b0:	4915      	ldr	r1, [pc, #84]	; (8012508 <etharp_update_arp_entry+0x148>)
 80124b2:	4613      	mov	r3, r2
 80124b4:	005b      	lsls	r3, r3, #1
 80124b6:	4413      	add	r3, r2
 80124b8:	00db      	lsls	r3, r3, #3
 80124ba:	440b      	add	r3, r1
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80124c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80124c4:	4910      	ldr	r1, [pc, #64]	; (8012508 <etharp_update_arp_entry+0x148>)
 80124c6:	4613      	mov	r3, r2
 80124c8:	005b      	lsls	r3, r3, #1
 80124ca:	4413      	add	r3, r2
 80124cc:	00db      	lsls	r3, r3, #3
 80124ce:	440b      	add	r3, r1
 80124d0:	2200      	movs	r2, #0
 80124d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80124da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124de:	9300      	str	r3, [sp, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6939      	ldr	r1, [r7, #16]
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	f000 fcf3 	bl	8012ed0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80124ea:	6938      	ldr	r0, [r7, #16]
 80124ec:	f003 fbe4 	bl	8015cb8 <pbuf_free>
  }
  return ERR_OK;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3718      	adds	r7, #24
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	08023ff8 	.word	0x08023ff8
 8012500:	0802411c 	.word	0x0802411c
 8012504:	0802409c 	.word	0x0802409c
 8012508:	240050f8 	.word	0x240050f8

0801250c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b084      	sub	sp, #16
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012514:	2300      	movs	r3, #0
 8012516:	60fb      	str	r3, [r7, #12]
 8012518:	e01e      	b.n	8012558 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801251a:	4913      	ldr	r1, [pc, #76]	; (8012568 <etharp_cleanup_netif+0x5c>)
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	4613      	mov	r3, r2
 8012520:	005b      	lsls	r3, r3, #1
 8012522:	4413      	add	r3, r2
 8012524:	00db      	lsls	r3, r3, #3
 8012526:	440b      	add	r3, r1
 8012528:	3314      	adds	r3, #20
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801252e:	7afb      	ldrb	r3, [r7, #11]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d00e      	beq.n	8012552 <etharp_cleanup_netif+0x46>
 8012534:	490c      	ldr	r1, [pc, #48]	; (8012568 <etharp_cleanup_netif+0x5c>)
 8012536:	68fa      	ldr	r2, [r7, #12]
 8012538:	4613      	mov	r3, r2
 801253a:	005b      	lsls	r3, r3, #1
 801253c:	4413      	add	r3, r2
 801253e:	00db      	lsls	r3, r3, #3
 8012540:	440b      	add	r3, r1
 8012542:	3308      	adds	r3, #8
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	687a      	ldr	r2, [r7, #4]
 8012548:	429a      	cmp	r2, r3
 801254a:	d102      	bne.n	8012552 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	f7ff fce5 	bl	8011f1c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	3301      	adds	r3, #1
 8012556:	60fb      	str	r3, [r7, #12]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2b09      	cmp	r3, #9
 801255c:	dddd      	ble.n	801251a <etharp_cleanup_netif+0xe>
    }
  }
}
 801255e:	bf00      	nop
 8012560:	bf00      	nop
 8012562:	3710      	adds	r7, #16
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	240050f8 	.word	0x240050f8

0801256c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801256c:	b5b0      	push	{r4, r5, r7, lr}
 801256e:	b08a      	sub	sp, #40	; 0x28
 8012570:	af04      	add	r7, sp, #16
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d107      	bne.n	801258c <etharp_input+0x20>
 801257c:	4b3d      	ldr	r3, [pc, #244]	; (8012674 <etharp_input+0x108>)
 801257e:	f240 228a 	movw	r2, #650	; 0x28a
 8012582:	493d      	ldr	r1, [pc, #244]	; (8012678 <etharp_input+0x10c>)
 8012584:	483d      	ldr	r0, [pc, #244]	; (801267c <etharp_input+0x110>)
 8012586:	f00c fd4d 	bl	801f024 <iprintf>
 801258a:	e06f      	b.n	801266c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	881b      	ldrh	r3, [r3, #0]
 8012596:	b29b      	uxth	r3, r3
 8012598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801259c:	d10c      	bne.n	80125b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80125a2:	2b06      	cmp	r3, #6
 80125a4:	d108      	bne.n	80125b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80125aa:	2b04      	cmp	r3, #4
 80125ac:	d104      	bne.n	80125b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	885b      	ldrh	r3, [r3, #2]
 80125b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80125b4:	2b08      	cmp	r3, #8
 80125b6:	d003      	beq.n	80125c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f003 fb7d 	bl	8015cb8 <pbuf_free>
    return;
 80125be:	e055      	b.n	801266c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	330e      	adds	r3, #14
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	3318      	adds	r3, #24
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	3304      	adds	r3, #4
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d102      	bne.n	80125e0 <etharp_input+0x74>
    for_us = 0;
 80125da:	2300      	movs	r3, #0
 80125dc:	75fb      	strb	r3, [r7, #23]
 80125de:	e009      	b.n	80125f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80125e0:	68ba      	ldr	r2, [r7, #8]
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	3304      	adds	r3, #4
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	429a      	cmp	r2, r3
 80125ea:	bf0c      	ite	eq
 80125ec:	2301      	moveq	r3, #1
 80125ee:	2300      	movne	r3, #0
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	f103 0208 	add.w	r2, r3, #8
 80125fa:	7dfb      	ldrb	r3, [r7, #23]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d001      	beq.n	8012604 <etharp_input+0x98>
 8012600:	2301      	movs	r3, #1
 8012602:	e000      	b.n	8012606 <etharp_input+0x9a>
 8012604:	2302      	movs	r3, #2
 8012606:	f107 010c 	add.w	r1, r7, #12
 801260a:	6838      	ldr	r0, [r7, #0]
 801260c:	f7ff fed8 	bl	80123c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	88db      	ldrh	r3, [r3, #6]
 8012614:	b29b      	uxth	r3, r3
 8012616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801261a:	d003      	beq.n	8012624 <etharp_input+0xb8>
 801261c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012620:	d01e      	beq.n	8012660 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012622:	e020      	b.n	8012666 <etharp_input+0xfa>
      if (for_us) {
 8012624:	7dfb      	ldrb	r3, [r7, #23]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d01c      	beq.n	8012664 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012640:	693a      	ldr	r2, [r7, #16]
 8012642:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012644:	2102      	movs	r1, #2
 8012646:	9103      	str	r1, [sp, #12]
 8012648:	f107 010c 	add.w	r1, r7, #12
 801264c:	9102      	str	r1, [sp, #8]
 801264e:	9201      	str	r2, [sp, #4]
 8012650:	9300      	str	r3, [sp, #0]
 8012652:	462b      	mov	r3, r5
 8012654:	4622      	mov	r2, r4
 8012656:	4601      	mov	r1, r0
 8012658:	6838      	ldr	r0, [r7, #0]
 801265a:	f000 faeb 	bl	8012c34 <etharp_raw>
      break;
 801265e:	e001      	b.n	8012664 <etharp_input+0xf8>
      break;
 8012660:	bf00      	nop
 8012662:	e000      	b.n	8012666 <etharp_input+0xfa>
      break;
 8012664:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f003 fb26 	bl	8015cb8 <pbuf_free>
}
 801266c:	3718      	adds	r7, #24
 801266e:	46bd      	mov	sp, r7
 8012670:	bdb0      	pop	{r4, r5, r7, pc}
 8012672:	bf00      	nop
 8012674:	08023ff8 	.word	0x08023ff8
 8012678:	08024174 	.word	0x08024174
 801267c:	0802409c 	.word	0x0802409c

08012680 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b086      	sub	sp, #24
 8012684:	af02      	add	r7, sp, #8
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	60b9      	str	r1, [r7, #8]
 801268a:	4613      	mov	r3, r2
 801268c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801268e:	79fa      	ldrb	r2, [r7, #7]
 8012690:	4944      	ldr	r1, [pc, #272]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 8012692:	4613      	mov	r3, r2
 8012694:	005b      	lsls	r3, r3, #1
 8012696:	4413      	add	r3, r2
 8012698:	00db      	lsls	r3, r3, #3
 801269a:	440b      	add	r3, r1
 801269c:	3314      	adds	r3, #20
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d806      	bhi.n	80126b2 <etharp_output_to_arp_index+0x32>
 80126a4:	4b40      	ldr	r3, [pc, #256]	; (80127a8 <etharp_output_to_arp_index+0x128>)
 80126a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80126aa:	4940      	ldr	r1, [pc, #256]	; (80127ac <etharp_output_to_arp_index+0x12c>)
 80126ac:	4840      	ldr	r0, [pc, #256]	; (80127b0 <etharp_output_to_arp_index+0x130>)
 80126ae:	f00c fcb9 	bl	801f024 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80126b2:	79fa      	ldrb	r2, [r7, #7]
 80126b4:	493b      	ldr	r1, [pc, #236]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 80126b6:	4613      	mov	r3, r2
 80126b8:	005b      	lsls	r3, r3, #1
 80126ba:	4413      	add	r3, r2
 80126bc:	00db      	lsls	r3, r3, #3
 80126be:	440b      	add	r3, r1
 80126c0:	3314      	adds	r3, #20
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b02      	cmp	r3, #2
 80126c6:	d153      	bne.n	8012770 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80126c8:	79fa      	ldrb	r2, [r7, #7]
 80126ca:	4936      	ldr	r1, [pc, #216]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 80126cc:	4613      	mov	r3, r2
 80126ce:	005b      	lsls	r3, r3, #1
 80126d0:	4413      	add	r3, r2
 80126d2:	00db      	lsls	r3, r3, #3
 80126d4:	440b      	add	r3, r1
 80126d6:	3312      	adds	r3, #18
 80126d8:	881b      	ldrh	r3, [r3, #0]
 80126da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80126de:	d919      	bls.n	8012714 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80126e0:	79fa      	ldrb	r2, [r7, #7]
 80126e2:	4613      	mov	r3, r2
 80126e4:	005b      	lsls	r3, r3, #1
 80126e6:	4413      	add	r3, r2
 80126e8:	00db      	lsls	r3, r3, #3
 80126ea:	4a2e      	ldr	r2, [pc, #184]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 80126ec:	4413      	add	r3, r2
 80126ee:	3304      	adds	r3, #4
 80126f0:	4619      	mov	r1, r3
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	f000 fb4c 	bl	8012d90 <etharp_request>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d138      	bne.n	8012770 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80126fe:	79fa      	ldrb	r2, [r7, #7]
 8012700:	4928      	ldr	r1, [pc, #160]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 8012702:	4613      	mov	r3, r2
 8012704:	005b      	lsls	r3, r3, #1
 8012706:	4413      	add	r3, r2
 8012708:	00db      	lsls	r3, r3, #3
 801270a:	440b      	add	r3, r1
 801270c:	3314      	adds	r3, #20
 801270e:	2203      	movs	r2, #3
 8012710:	701a      	strb	r2, [r3, #0]
 8012712:	e02d      	b.n	8012770 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012714:	79fa      	ldrb	r2, [r7, #7]
 8012716:	4923      	ldr	r1, [pc, #140]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 8012718:	4613      	mov	r3, r2
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	4413      	add	r3, r2
 801271e:	00db      	lsls	r3, r3, #3
 8012720:	440b      	add	r3, r1
 8012722:	3312      	adds	r3, #18
 8012724:	881b      	ldrh	r3, [r3, #0]
 8012726:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801272a:	d321      	bcc.n	8012770 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801272c:	79fa      	ldrb	r2, [r7, #7]
 801272e:	4613      	mov	r3, r2
 8012730:	005b      	lsls	r3, r3, #1
 8012732:	4413      	add	r3, r2
 8012734:	00db      	lsls	r3, r3, #3
 8012736:	4a1b      	ldr	r2, [pc, #108]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 8012738:	4413      	add	r3, r2
 801273a:	1d19      	adds	r1, r3, #4
 801273c:	79fa      	ldrb	r2, [r7, #7]
 801273e:	4613      	mov	r3, r2
 8012740:	005b      	lsls	r3, r3, #1
 8012742:	4413      	add	r3, r2
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	3308      	adds	r3, #8
 8012748:	4a16      	ldr	r2, [pc, #88]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 801274a:	4413      	add	r3, r2
 801274c:	3304      	adds	r3, #4
 801274e:	461a      	mov	r2, r3
 8012750:	68f8      	ldr	r0, [r7, #12]
 8012752:	f000 fafb 	bl	8012d4c <etharp_request_dst>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d109      	bne.n	8012770 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801275c:	79fa      	ldrb	r2, [r7, #7]
 801275e:	4911      	ldr	r1, [pc, #68]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 8012760:	4613      	mov	r3, r2
 8012762:	005b      	lsls	r3, r3, #1
 8012764:	4413      	add	r3, r2
 8012766:	00db      	lsls	r3, r3, #3
 8012768:	440b      	add	r3, r1
 801276a:	3314      	adds	r3, #20
 801276c:	2203      	movs	r2, #3
 801276e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012776:	79fa      	ldrb	r2, [r7, #7]
 8012778:	4613      	mov	r3, r2
 801277a:	005b      	lsls	r3, r3, #1
 801277c:	4413      	add	r3, r2
 801277e:	00db      	lsls	r3, r3, #3
 8012780:	3308      	adds	r3, #8
 8012782:	4a08      	ldr	r2, [pc, #32]	; (80127a4 <etharp_output_to_arp_index+0x124>)
 8012784:	4413      	add	r3, r2
 8012786:	3304      	adds	r3, #4
 8012788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801278c:	9200      	str	r2, [sp, #0]
 801278e:	460a      	mov	r2, r1
 8012790:	68b9      	ldr	r1, [r7, #8]
 8012792:	68f8      	ldr	r0, [r7, #12]
 8012794:	f000 fb9c 	bl	8012ed0 <ethernet_output>
 8012798:	4603      	mov	r3, r0
}
 801279a:	4618      	mov	r0, r3
 801279c:	3710      	adds	r7, #16
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	bf00      	nop
 80127a4:	240050f8 	.word	0x240050f8
 80127a8:	08023ff8 	.word	0x08023ff8
 80127ac:	08024194 	.word	0x08024194
 80127b0:	0802409c 	.word	0x0802409c

080127b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b08a      	sub	sp, #40	; 0x28
 80127b8:	af02      	add	r7, sp, #8
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	60b9      	str	r1, [r7, #8]
 80127be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d106      	bne.n	80127d8 <etharp_output+0x24>
 80127ca:	4b73      	ldr	r3, [pc, #460]	; (8012998 <etharp_output+0x1e4>)
 80127cc:	f240 321e 	movw	r2, #798	; 0x31e
 80127d0:	4972      	ldr	r1, [pc, #456]	; (801299c <etharp_output+0x1e8>)
 80127d2:	4873      	ldr	r0, [pc, #460]	; (80129a0 <etharp_output+0x1ec>)
 80127d4:	f00c fc26 	bl	801f024 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80127d8:	68bb      	ldr	r3, [r7, #8]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d106      	bne.n	80127ec <etharp_output+0x38>
 80127de:	4b6e      	ldr	r3, [pc, #440]	; (8012998 <etharp_output+0x1e4>)
 80127e0:	f240 321f 	movw	r2, #799	; 0x31f
 80127e4:	496f      	ldr	r1, [pc, #444]	; (80129a4 <etharp_output+0x1f0>)
 80127e6:	486e      	ldr	r0, [pc, #440]	; (80129a0 <etharp_output+0x1ec>)
 80127e8:	f00c fc1c 	bl	801f024 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d106      	bne.n	8012800 <etharp_output+0x4c>
 80127f2:	4b69      	ldr	r3, [pc, #420]	; (8012998 <etharp_output+0x1e4>)
 80127f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80127f8:	496b      	ldr	r1, [pc, #428]	; (80129a8 <etharp_output+0x1f4>)
 80127fa:	4869      	ldr	r0, [pc, #420]	; (80129a0 <etharp_output+0x1ec>)
 80127fc:	f00c fc12 	bl	801f024 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	68f9      	ldr	r1, [r7, #12]
 8012806:	4618      	mov	r0, r3
 8012808:	f001 f8c6 	bl	8013998 <ip4_addr_isbroadcast_u32>
 801280c:	4603      	mov	r3, r0
 801280e:	2b00      	cmp	r3, #0
 8012810:	d002      	beq.n	8012818 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012812:	4b66      	ldr	r3, [pc, #408]	; (80129ac <etharp_output+0x1f8>)
 8012814:	61fb      	str	r3, [r7, #28]
 8012816:	e0af      	b.n	8012978 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012820:	2be0      	cmp	r3, #224	; 0xe0
 8012822:	d118      	bne.n	8012856 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012824:	2301      	movs	r3, #1
 8012826:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012828:	2300      	movs	r3, #0
 801282a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801282c:	235e      	movs	r3, #94	; 0x5e
 801282e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	3301      	adds	r3, #1
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801283a:	b2db      	uxtb	r3, r3
 801283c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	3302      	adds	r3, #2
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	3303      	adds	r3, #3
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801284e:	f107 0310 	add.w	r3, r7, #16
 8012852:	61fb      	str	r3, [r7, #28]
 8012854:	e090      	b.n	8012978 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	3304      	adds	r3, #4
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	405a      	eors	r2, r3
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	3308      	adds	r3, #8
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4013      	ands	r3, r2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d012      	beq.n	8012894 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012874:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012878:	4293      	cmp	r3, r2
 801287a:	d00b      	beq.n	8012894 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	330c      	adds	r3, #12
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d003      	beq.n	801288e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	330c      	adds	r3, #12
 801288a:	61bb      	str	r3, [r7, #24]
 801288c:	e002      	b.n	8012894 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801288e:	f06f 0303 	mvn.w	r3, #3
 8012892:	e07d      	b.n	8012990 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012894:	4b46      	ldr	r3, [pc, #280]	; (80129b0 <etharp_output+0x1fc>)
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	4619      	mov	r1, r3
 801289a:	4a46      	ldr	r2, [pc, #280]	; (80129b4 <etharp_output+0x200>)
 801289c:	460b      	mov	r3, r1
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	440b      	add	r3, r1
 80128a2:	00db      	lsls	r3, r3, #3
 80128a4:	4413      	add	r3, r2
 80128a6:	3314      	adds	r3, #20
 80128a8:	781b      	ldrb	r3, [r3, #0]
 80128aa:	2b01      	cmp	r3, #1
 80128ac:	d925      	bls.n	80128fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128ae:	4b40      	ldr	r3, [pc, #256]	; (80129b0 <etharp_output+0x1fc>)
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	4619      	mov	r1, r3
 80128b4:	4a3f      	ldr	r2, [pc, #252]	; (80129b4 <etharp_output+0x200>)
 80128b6:	460b      	mov	r3, r1
 80128b8:	005b      	lsls	r3, r3, #1
 80128ba:	440b      	add	r3, r1
 80128bc:	00db      	lsls	r3, r3, #3
 80128be:	4413      	add	r3, r2
 80128c0:	3308      	adds	r3, #8
 80128c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80128c4:	68fa      	ldr	r2, [r7, #12]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d117      	bne.n	80128fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	4b38      	ldr	r3, [pc, #224]	; (80129b0 <etharp_output+0x1fc>)
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	4618      	mov	r0, r3
 80128d4:	4937      	ldr	r1, [pc, #220]	; (80129b4 <etharp_output+0x200>)
 80128d6:	4603      	mov	r3, r0
 80128d8:	005b      	lsls	r3, r3, #1
 80128da:	4403      	add	r3, r0
 80128dc:	00db      	lsls	r3, r3, #3
 80128de:	440b      	add	r3, r1
 80128e0:	3304      	adds	r3, #4
 80128e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d108      	bne.n	80128fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80128e8:	4b31      	ldr	r3, [pc, #196]	; (80129b0 <etharp_output+0x1fc>)
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	461a      	mov	r2, r3
 80128ee:	68b9      	ldr	r1, [r7, #8]
 80128f0:	68f8      	ldr	r0, [r7, #12]
 80128f2:	f7ff fec5 	bl	8012680 <etharp_output_to_arp_index>
 80128f6:	4603      	mov	r3, r0
 80128f8:	e04a      	b.n	8012990 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80128fa:	2300      	movs	r3, #0
 80128fc:	75fb      	strb	r3, [r7, #23]
 80128fe:	e031      	b.n	8012964 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012900:	7dfa      	ldrb	r2, [r7, #23]
 8012902:	492c      	ldr	r1, [pc, #176]	; (80129b4 <etharp_output+0x200>)
 8012904:	4613      	mov	r3, r2
 8012906:	005b      	lsls	r3, r3, #1
 8012908:	4413      	add	r3, r2
 801290a:	00db      	lsls	r3, r3, #3
 801290c:	440b      	add	r3, r1
 801290e:	3314      	adds	r3, #20
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	2b01      	cmp	r3, #1
 8012914:	d923      	bls.n	801295e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012916:	7dfa      	ldrb	r2, [r7, #23]
 8012918:	4926      	ldr	r1, [pc, #152]	; (80129b4 <etharp_output+0x200>)
 801291a:	4613      	mov	r3, r2
 801291c:	005b      	lsls	r3, r3, #1
 801291e:	4413      	add	r3, r2
 8012920:	00db      	lsls	r3, r3, #3
 8012922:	440b      	add	r3, r1
 8012924:	3308      	adds	r3, #8
 8012926:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	429a      	cmp	r2, r3
 801292c:	d117      	bne.n	801295e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801292e:	69bb      	ldr	r3, [r7, #24]
 8012930:	6819      	ldr	r1, [r3, #0]
 8012932:	7dfa      	ldrb	r2, [r7, #23]
 8012934:	481f      	ldr	r0, [pc, #124]	; (80129b4 <etharp_output+0x200>)
 8012936:	4613      	mov	r3, r2
 8012938:	005b      	lsls	r3, r3, #1
 801293a:	4413      	add	r3, r2
 801293c:	00db      	lsls	r3, r3, #3
 801293e:	4403      	add	r3, r0
 8012940:	3304      	adds	r3, #4
 8012942:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012944:	4299      	cmp	r1, r3
 8012946:	d10a      	bne.n	801295e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012948:	4a19      	ldr	r2, [pc, #100]	; (80129b0 <etharp_output+0x1fc>)
 801294a:	7dfb      	ldrb	r3, [r7, #23]
 801294c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801294e:	7dfb      	ldrb	r3, [r7, #23]
 8012950:	461a      	mov	r2, r3
 8012952:	68b9      	ldr	r1, [r7, #8]
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f7ff fe93 	bl	8012680 <etharp_output_to_arp_index>
 801295a:	4603      	mov	r3, r0
 801295c:	e018      	b.n	8012990 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801295e:	7dfb      	ldrb	r3, [r7, #23]
 8012960:	3301      	adds	r3, #1
 8012962:	75fb      	strb	r3, [r7, #23]
 8012964:	7dfb      	ldrb	r3, [r7, #23]
 8012966:	2b09      	cmp	r3, #9
 8012968:	d9ca      	bls.n	8012900 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801296a:	68ba      	ldr	r2, [r7, #8]
 801296c:	69b9      	ldr	r1, [r7, #24]
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f000 f822 	bl	80129b8 <etharp_query>
 8012974:	4603      	mov	r3, r0
 8012976:	e00b      	b.n	8012990 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801297e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	69fb      	ldr	r3, [r7, #28]
 8012986:	68b9      	ldr	r1, [r7, #8]
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	f000 faa1 	bl	8012ed0 <ethernet_output>
 801298e:	4603      	mov	r3, r0
}
 8012990:	4618      	mov	r0, r3
 8012992:	3720      	adds	r7, #32
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}
 8012998:	08023ff8 	.word	0x08023ff8
 801299c:	08024174 	.word	0x08024174
 80129a0:	0802409c 	.word	0x0802409c
 80129a4:	080241c4 	.word	0x080241c4
 80129a8:	08024164 	.word	0x08024164
 80129ac:	08027268 	.word	0x08027268
 80129b0:	240051e8 	.word	0x240051e8
 80129b4:	240050f8 	.word	0x240050f8

080129b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b08c      	sub	sp, #48	; 0x30
 80129bc:	af02      	add	r7, sp, #8
 80129be:	60f8      	str	r0, [r7, #12]
 80129c0:	60b9      	str	r1, [r7, #8]
 80129c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	3326      	adds	r3, #38	; 0x26
 80129c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80129ca:	23ff      	movs	r3, #255	; 0xff
 80129cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80129d0:	2300      	movs	r3, #0
 80129d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	68f9      	ldr	r1, [r7, #12]
 80129da:	4618      	mov	r0, r3
 80129dc:	f000 ffdc 	bl	8013998 <ip4_addr_isbroadcast_u32>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d10c      	bne.n	8012a00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80129ee:	2be0      	cmp	r3, #224	; 0xe0
 80129f0:	d006      	beq.n	8012a00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d003      	beq.n	8012a00 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d102      	bne.n	8012a06 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012a00:	f06f 030f 	mvn.w	r3, #15
 8012a04:	e101      	b.n	8012c0a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012a06:	68fa      	ldr	r2, [r7, #12]
 8012a08:	2101      	movs	r1, #1
 8012a0a:	68b8      	ldr	r0, [r7, #8]
 8012a0c:	f7ff fb60 	bl	80120d0 <etharp_find_entry>
 8012a10:	4603      	mov	r3, r0
 8012a12:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012a14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	da02      	bge.n	8012a22 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012a1c:	8a7b      	ldrh	r3, [r7, #18]
 8012a1e:	b25b      	sxtb	r3, r3
 8012a20:	e0f3      	b.n	8012c0a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012a22:	8a7b      	ldrh	r3, [r7, #18]
 8012a24:	2b7e      	cmp	r3, #126	; 0x7e
 8012a26:	d906      	bls.n	8012a36 <etharp_query+0x7e>
 8012a28:	4b7a      	ldr	r3, [pc, #488]	; (8012c14 <etharp_query+0x25c>)
 8012a2a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012a2e:	497a      	ldr	r1, [pc, #488]	; (8012c18 <etharp_query+0x260>)
 8012a30:	487a      	ldr	r0, [pc, #488]	; (8012c1c <etharp_query+0x264>)
 8012a32:	f00c faf7 	bl	801f024 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012a36:	8a7b      	ldrh	r3, [r7, #18]
 8012a38:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012a3a:	7c7a      	ldrb	r2, [r7, #17]
 8012a3c:	4978      	ldr	r1, [pc, #480]	; (8012c20 <etharp_query+0x268>)
 8012a3e:	4613      	mov	r3, r2
 8012a40:	005b      	lsls	r3, r3, #1
 8012a42:	4413      	add	r3, r2
 8012a44:	00db      	lsls	r3, r3, #3
 8012a46:	440b      	add	r3, r1
 8012a48:	3314      	adds	r3, #20
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d115      	bne.n	8012a7c <etharp_query+0xc4>
    is_new_entry = 1;
 8012a50:	2301      	movs	r3, #1
 8012a52:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012a54:	7c7a      	ldrb	r2, [r7, #17]
 8012a56:	4972      	ldr	r1, [pc, #456]	; (8012c20 <etharp_query+0x268>)
 8012a58:	4613      	mov	r3, r2
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	4413      	add	r3, r2
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	440b      	add	r3, r1
 8012a62:	3314      	adds	r3, #20
 8012a64:	2201      	movs	r2, #1
 8012a66:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012a68:	7c7a      	ldrb	r2, [r7, #17]
 8012a6a:	496d      	ldr	r1, [pc, #436]	; (8012c20 <etharp_query+0x268>)
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	005b      	lsls	r3, r3, #1
 8012a70:	4413      	add	r3, r2
 8012a72:	00db      	lsls	r3, r3, #3
 8012a74:	440b      	add	r3, r1
 8012a76:	3308      	adds	r3, #8
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012a7c:	7c7a      	ldrb	r2, [r7, #17]
 8012a7e:	4968      	ldr	r1, [pc, #416]	; (8012c20 <etharp_query+0x268>)
 8012a80:	4613      	mov	r3, r2
 8012a82:	005b      	lsls	r3, r3, #1
 8012a84:	4413      	add	r3, r2
 8012a86:	00db      	lsls	r3, r3, #3
 8012a88:	440b      	add	r3, r1
 8012a8a:	3314      	adds	r3, #20
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	d011      	beq.n	8012ab6 <etharp_query+0xfe>
 8012a92:	7c7a      	ldrb	r2, [r7, #17]
 8012a94:	4962      	ldr	r1, [pc, #392]	; (8012c20 <etharp_query+0x268>)
 8012a96:	4613      	mov	r3, r2
 8012a98:	005b      	lsls	r3, r3, #1
 8012a9a:	4413      	add	r3, r2
 8012a9c:	00db      	lsls	r3, r3, #3
 8012a9e:	440b      	add	r3, r1
 8012aa0:	3314      	adds	r3, #20
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	2b01      	cmp	r3, #1
 8012aa6:	d806      	bhi.n	8012ab6 <etharp_query+0xfe>
 8012aa8:	4b5a      	ldr	r3, [pc, #360]	; (8012c14 <etharp_query+0x25c>)
 8012aaa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012aae:	495d      	ldr	r1, [pc, #372]	; (8012c24 <etharp_query+0x26c>)
 8012ab0:	485a      	ldr	r0, [pc, #360]	; (8012c1c <etharp_query+0x264>)
 8012ab2:	f00c fab7 	bl	801f024 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012ab6:	6a3b      	ldr	r3, [r7, #32]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d102      	bne.n	8012ac2 <etharp_query+0x10a>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d10c      	bne.n	8012adc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012ac2:	68b9      	ldr	r1, [r7, #8]
 8012ac4:	68f8      	ldr	r0, [r7, #12]
 8012ac6:	f000 f963 	bl	8012d90 <etharp_request>
 8012aca:	4603      	mov	r3, r0
 8012acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d102      	bne.n	8012adc <etharp_query+0x124>
      return result;
 8012ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ada:	e096      	b.n	8012c0a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <etharp_query+0x138>
 8012ae2:	4b4c      	ldr	r3, [pc, #304]	; (8012c14 <etharp_query+0x25c>)
 8012ae4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012ae8:	494f      	ldr	r1, [pc, #316]	; (8012c28 <etharp_query+0x270>)
 8012aea:	484c      	ldr	r0, [pc, #304]	; (8012c1c <etharp_query+0x264>)
 8012aec:	f00c fa9a 	bl	801f024 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012af0:	7c7a      	ldrb	r2, [r7, #17]
 8012af2:	494b      	ldr	r1, [pc, #300]	; (8012c20 <etharp_query+0x268>)
 8012af4:	4613      	mov	r3, r2
 8012af6:	005b      	lsls	r3, r3, #1
 8012af8:	4413      	add	r3, r2
 8012afa:	00db      	lsls	r3, r3, #3
 8012afc:	440b      	add	r3, r1
 8012afe:	3314      	adds	r3, #20
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	2b01      	cmp	r3, #1
 8012b04:	d917      	bls.n	8012b36 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012b06:	4a49      	ldr	r2, [pc, #292]	; (8012c2c <etharp_query+0x274>)
 8012b08:	7c7b      	ldrb	r3, [r7, #17]
 8012b0a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012b0c:	7c7a      	ldrb	r2, [r7, #17]
 8012b0e:	4613      	mov	r3, r2
 8012b10:	005b      	lsls	r3, r3, #1
 8012b12:	4413      	add	r3, r2
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	3308      	adds	r3, #8
 8012b18:	4a41      	ldr	r2, [pc, #260]	; (8012c20 <etharp_query+0x268>)
 8012b1a:	4413      	add	r3, r2
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012b22:	9200      	str	r2, [sp, #0]
 8012b24:	697a      	ldr	r2, [r7, #20]
 8012b26:	6879      	ldr	r1, [r7, #4]
 8012b28:	68f8      	ldr	r0, [r7, #12]
 8012b2a:	f000 f9d1 	bl	8012ed0 <ethernet_output>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012b34:	e067      	b.n	8012c06 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b36:	7c7a      	ldrb	r2, [r7, #17]
 8012b38:	4939      	ldr	r1, [pc, #228]	; (8012c20 <etharp_query+0x268>)
 8012b3a:	4613      	mov	r3, r2
 8012b3c:	005b      	lsls	r3, r3, #1
 8012b3e:	4413      	add	r3, r2
 8012b40:	00db      	lsls	r3, r3, #3
 8012b42:	440b      	add	r3, r1
 8012b44:	3314      	adds	r3, #20
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	d15c      	bne.n	8012c06 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b54:	e01c      	b.n	8012b90 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	895a      	ldrh	r2, [r3, #10]
 8012b5a:	69fb      	ldr	r3, [r7, #28]
 8012b5c:	891b      	ldrh	r3, [r3, #8]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d10a      	bne.n	8012b78 <etharp_query+0x1c0>
 8012b62:	69fb      	ldr	r3, [r7, #28]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d006      	beq.n	8012b78 <etharp_query+0x1c0>
 8012b6a:	4b2a      	ldr	r3, [pc, #168]	; (8012c14 <etharp_query+0x25c>)
 8012b6c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012b70:	492f      	ldr	r1, [pc, #188]	; (8012c30 <etharp_query+0x278>)
 8012b72:	482a      	ldr	r0, [pc, #168]	; (8012c1c <etharp_query+0x264>)
 8012b74:	f00c fa56 	bl	801f024 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	7b1b      	ldrb	r3, [r3, #12]
 8012b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d002      	beq.n	8012b8a <etharp_query+0x1d2>
        copy_needed = 1;
 8012b84:	2301      	movs	r3, #1
 8012b86:	61bb      	str	r3, [r7, #24]
        break;
 8012b88:	e005      	b.n	8012b96 <etharp_query+0x1de>
      }
      p = p->next;
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012b90:	69fb      	ldr	r3, [r7, #28]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d1df      	bne.n	8012b56 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d007      	beq.n	8012bac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012ba2:	200e      	movs	r0, #14
 8012ba4:	f003 fb0e 	bl	80161c4 <pbuf_clone>
 8012ba8:	61f8      	str	r0, [r7, #28]
 8012baa:	e004      	b.n	8012bb6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012bb0:	69f8      	ldr	r0, [r7, #28]
 8012bb2:	f003 f921 	bl	8015df8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d021      	beq.n	8012c00 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012bbc:	7c7a      	ldrb	r2, [r7, #17]
 8012bbe:	4918      	ldr	r1, [pc, #96]	; (8012c20 <etharp_query+0x268>)
 8012bc0:	4613      	mov	r3, r2
 8012bc2:	005b      	lsls	r3, r3, #1
 8012bc4:	4413      	add	r3, r2
 8012bc6:	00db      	lsls	r3, r3, #3
 8012bc8:	440b      	add	r3, r1
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d00a      	beq.n	8012be6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012bd0:	7c7a      	ldrb	r2, [r7, #17]
 8012bd2:	4913      	ldr	r1, [pc, #76]	; (8012c20 <etharp_query+0x268>)
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	005b      	lsls	r3, r3, #1
 8012bd8:	4413      	add	r3, r2
 8012bda:	00db      	lsls	r3, r3, #3
 8012bdc:	440b      	add	r3, r1
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4618      	mov	r0, r3
 8012be2:	f003 f869 	bl	8015cb8 <pbuf_free>
      }
      arp_table[i].q = p;
 8012be6:	7c7a      	ldrb	r2, [r7, #17]
 8012be8:	490d      	ldr	r1, [pc, #52]	; (8012c20 <etharp_query+0x268>)
 8012bea:	4613      	mov	r3, r2
 8012bec:	005b      	lsls	r3, r3, #1
 8012bee:	4413      	add	r3, r2
 8012bf0:	00db      	lsls	r3, r3, #3
 8012bf2:	440b      	add	r3, r1
 8012bf4:	69fa      	ldr	r2, [r7, #28]
 8012bf6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012bfe:	e002      	b.n	8012c06 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012c00:	23ff      	movs	r3, #255	; 0xff
 8012c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012c06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3728      	adds	r7, #40	; 0x28
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	08023ff8 	.word	0x08023ff8
 8012c18:	080241d0 	.word	0x080241d0
 8012c1c:	0802409c 	.word	0x0802409c
 8012c20:	240050f8 	.word	0x240050f8
 8012c24:	080241e0 	.word	0x080241e0
 8012c28:	080241c4 	.word	0x080241c4
 8012c2c:	240051e8 	.word	0x240051e8
 8012c30:	08024208 	.word	0x08024208

08012c34 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b08a      	sub	sp, #40	; 0x28
 8012c38:	af02      	add	r7, sp, #8
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	60b9      	str	r1, [r7, #8]
 8012c3e:	607a      	str	r2, [r7, #4]
 8012c40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012c42:	2300      	movs	r3, #0
 8012c44:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d106      	bne.n	8012c5a <etharp_raw+0x26>
 8012c4c:	4b3a      	ldr	r3, [pc, #232]	; (8012d38 <etharp_raw+0x104>)
 8012c4e:	f240 4257 	movw	r2, #1111	; 0x457
 8012c52:	493a      	ldr	r1, [pc, #232]	; (8012d3c <etharp_raw+0x108>)
 8012c54:	483a      	ldr	r0, [pc, #232]	; (8012d40 <etharp_raw+0x10c>)
 8012c56:	f00c f9e5 	bl	801f024 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012c5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c5e:	211c      	movs	r1, #28
 8012c60:	200e      	movs	r0, #14
 8012c62:	f002 fd45 	bl	80156f0 <pbuf_alloc>
 8012c66:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012c68:	69bb      	ldr	r3, [r7, #24]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d102      	bne.n	8012c74 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c72:	e05d      	b.n	8012d30 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012c74:	69bb      	ldr	r3, [r7, #24]
 8012c76:	895b      	ldrh	r3, [r3, #10]
 8012c78:	2b1b      	cmp	r3, #27
 8012c7a:	d806      	bhi.n	8012c8a <etharp_raw+0x56>
 8012c7c:	4b2e      	ldr	r3, [pc, #184]	; (8012d38 <etharp_raw+0x104>)
 8012c7e:	f240 4262 	movw	r2, #1122	; 0x462
 8012c82:	4930      	ldr	r1, [pc, #192]	; (8012d44 <etharp_raw+0x110>)
 8012c84:	482e      	ldr	r0, [pc, #184]	; (8012d40 <etharp_raw+0x10c>)
 8012c86:	f00c f9cd 	bl	801f024 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012c8a:	69bb      	ldr	r3, [r7, #24]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012c90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7ff f914 	bl	8011ec0 <lwip_htons>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	461a      	mov	r2, r3
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012ca6:	2b06      	cmp	r3, #6
 8012ca8:	d006      	beq.n	8012cb8 <etharp_raw+0x84>
 8012caa:	4b23      	ldr	r3, [pc, #140]	; (8012d38 <etharp_raw+0x104>)
 8012cac:	f240 4269 	movw	r2, #1129	; 0x469
 8012cb0:	4925      	ldr	r1, [pc, #148]	; (8012d48 <etharp_raw+0x114>)
 8012cb2:	4823      	ldr	r0, [pc, #140]	; (8012d40 <etharp_raw+0x10c>)
 8012cb4:	f00c f9b6 	bl	801f024 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	3308      	adds	r3, #8
 8012cbc:	2206      	movs	r2, #6
 8012cbe:	6839      	ldr	r1, [r7, #0]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f00b fa8f 	bl	801e1e4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	3312      	adds	r3, #18
 8012cca:	2206      	movs	r2, #6
 8012ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f00b fa88 	bl	801e1e4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	330e      	adds	r3, #14
 8012cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cda:	6812      	ldr	r2, [r2, #0]
 8012cdc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	3318      	adds	r3, #24
 8012ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ce4:	6812      	ldr	r2, [r2, #0]
 8012ce6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	2200      	movs	r2, #0
 8012cec:	701a      	strb	r2, [r3, #0]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f042 0201 	orr.w	r2, r2, #1
 8012cf4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	f042 0208 	orr.w	r2, r2, #8
 8012cfe:	709a      	strb	r2, [r3, #2]
 8012d00:	2200      	movs	r2, #0
 8012d02:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	2206      	movs	r2, #6
 8012d08:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	2204      	movs	r2, #4
 8012d0e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012d10:	f640 0306 	movw	r3, #2054	; 0x806
 8012d14:	9300      	str	r3, [sp, #0]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	68ba      	ldr	r2, [r7, #8]
 8012d1a:	69b9      	ldr	r1, [r7, #24]
 8012d1c:	68f8      	ldr	r0, [r7, #12]
 8012d1e:	f000 f8d7 	bl	8012ed0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012d22:	69b8      	ldr	r0, [r7, #24]
 8012d24:	f002 ffc8 	bl	8015cb8 <pbuf_free>
  p = NULL;
 8012d28:	2300      	movs	r3, #0
 8012d2a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012d2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	3720      	adds	r7, #32
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	08023ff8 	.word	0x08023ff8
 8012d3c:	08024174 	.word	0x08024174
 8012d40:	0802409c 	.word	0x0802409c
 8012d44:	08024224 	.word	0x08024224
 8012d48:	08024258 	.word	0x08024258

08012d4c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b088      	sub	sp, #32
 8012d50:	af04      	add	r7, sp, #16
 8012d52:	60f8      	str	r0, [r7, #12]
 8012d54:	60b9      	str	r1, [r7, #8]
 8012d56:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012d68:	2201      	movs	r2, #1
 8012d6a:	9203      	str	r2, [sp, #12]
 8012d6c:	68ba      	ldr	r2, [r7, #8]
 8012d6e:	9202      	str	r2, [sp, #8]
 8012d70:	4a06      	ldr	r2, [pc, #24]	; (8012d8c <etharp_request_dst+0x40>)
 8012d72:	9201      	str	r2, [sp, #4]
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	4603      	mov	r3, r0
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	68f8      	ldr	r0, [r7, #12]
 8012d7c:	f7ff ff5a 	bl	8012c34 <etharp_raw>
 8012d80:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	3710      	adds	r7, #16
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}
 8012d8a:	bf00      	nop
 8012d8c:	08027270 	.word	0x08027270

08012d90 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b082      	sub	sp, #8
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012d9a:	4a05      	ldr	r2, [pc, #20]	; (8012db0 <etharp_request+0x20>)
 8012d9c:	6839      	ldr	r1, [r7, #0]
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	f7ff ffd4 	bl	8012d4c <etharp_request_dst>
 8012da4:	4603      	mov	r3, r0
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3708      	adds	r7, #8
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	08027268 	.word	0x08027268

08012db4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012dbe:	230e      	movs	r3, #14
 8012dc0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	895b      	ldrh	r3, [r3, #10]
 8012dc6:	2b0e      	cmp	r3, #14
 8012dc8:	d96e      	bls.n	8012ea8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	7bdb      	ldrb	r3, [r3, #15]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d106      	bne.n	8012de0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012dd8:	3301      	adds	r3, #1
 8012dda:	b2da      	uxtb	r2, r3
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	7b1a      	ldrb	r2, [r3, #12]
 8012dea:	7b5b      	ldrb	r3, [r3, #13]
 8012dec:	021b      	lsls	r3, r3, #8
 8012dee:	4313      	orrs	r3, r2
 8012df0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	f003 0301 	and.w	r3, r3, #1
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d023      	beq.n	8012e46 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d10f      	bne.n	8012e26 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	785b      	ldrb	r3, [r3, #1]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d11b      	bne.n	8012e46 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012e12:	2b5e      	cmp	r3, #94	; 0x5e
 8012e14:	d117      	bne.n	8012e46 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	7b5b      	ldrb	r3, [r3, #13]
 8012e1a:	f043 0310 	orr.w	r3, r3, #16
 8012e1e:	b2da      	uxtb	r2, r3
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	735a      	strb	r2, [r3, #13]
 8012e24:	e00f      	b.n	8012e46 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	2206      	movs	r2, #6
 8012e2a:	4928      	ldr	r1, [pc, #160]	; (8012ecc <ethernet_input+0x118>)
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f00b f9cb 	bl	801e1c8 <memcmp>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d106      	bne.n	8012e46 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	7b5b      	ldrb	r3, [r3, #13]
 8012e3c:	f043 0308 	orr.w	r3, r3, #8
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012e46:	89fb      	ldrh	r3, [r7, #14]
 8012e48:	2b08      	cmp	r3, #8
 8012e4a:	d003      	beq.n	8012e54 <ethernet_input+0xa0>
 8012e4c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012e50:	d014      	beq.n	8012e7c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012e52:	e032      	b.n	8012eba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e5a:	f003 0308 	and.w	r3, r3, #8
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d024      	beq.n	8012eac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012e62:	8afb      	ldrh	r3, [r7, #22]
 8012e64:	4619      	mov	r1, r3
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f002 fea0 	bl	8015bac <pbuf_remove_header>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d11e      	bne.n	8012eb0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012e72:	6839      	ldr	r1, [r7, #0]
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f000 fb93 	bl	80135a0 <ip4_input>
      break;
 8012e7a:	e013      	b.n	8012ea4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e82:	f003 0308 	and.w	r3, r3, #8
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d014      	beq.n	8012eb4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012e8a:	8afb      	ldrh	r3, [r7, #22]
 8012e8c:	4619      	mov	r1, r3
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f002 fe8c 	bl	8015bac <pbuf_remove_header>
 8012e94:	4603      	mov	r3, r0
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d10e      	bne.n	8012eb8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012e9a:	6839      	ldr	r1, [r7, #0]
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7ff fb65 	bl	801256c <etharp_input>
      break;
 8012ea2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	e00c      	b.n	8012ec2 <ethernet_input+0x10e>
    goto free_and_return;
 8012ea8:	bf00      	nop
 8012eaa:	e006      	b.n	8012eba <ethernet_input+0x106>
        goto free_and_return;
 8012eac:	bf00      	nop
 8012eae:	e004      	b.n	8012eba <ethernet_input+0x106>
        goto free_and_return;
 8012eb0:	bf00      	nop
 8012eb2:	e002      	b.n	8012eba <ethernet_input+0x106>
        goto free_and_return;
 8012eb4:	bf00      	nop
 8012eb6:	e000      	b.n	8012eba <ethernet_input+0x106>
        goto free_and_return;
 8012eb8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f002 fefc 	bl	8015cb8 <pbuf_free>
  return ERR_OK;
 8012ec0:	2300      	movs	r3, #0
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3718      	adds	r7, #24
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	08027268 	.word	0x08027268

08012ed0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b086      	sub	sp, #24
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	60b9      	str	r1, [r7, #8]
 8012eda:	607a      	str	r2, [r7, #4]
 8012edc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012ede:	8c3b      	ldrh	r3, [r7, #32]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7fe ffed 	bl	8011ec0 <lwip_htons>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012eea:	210e      	movs	r1, #14
 8012eec:	68b8      	ldr	r0, [r7, #8]
 8012eee:	f002 fe4d 	bl	8015b8c <pbuf_add_header>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d125      	bne.n	8012f44 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	8afa      	ldrh	r2, [r7, #22]
 8012f02:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	2206      	movs	r2, #6
 8012f08:	6839      	ldr	r1, [r7, #0]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f00b f96a 	bl	801e1e4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012f10:	693b      	ldr	r3, [r7, #16]
 8012f12:	3306      	adds	r3, #6
 8012f14:	2206      	movs	r2, #6
 8012f16:	6879      	ldr	r1, [r7, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f00b f963 	bl	801e1e4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f24:	2b06      	cmp	r3, #6
 8012f26:	d006      	beq.n	8012f36 <ethernet_output+0x66>
 8012f28:	4b0a      	ldr	r3, [pc, #40]	; (8012f54 <ethernet_output+0x84>)
 8012f2a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012f2e:	490a      	ldr	r1, [pc, #40]	; (8012f58 <ethernet_output+0x88>)
 8012f30:	480a      	ldr	r0, [pc, #40]	; (8012f5c <ethernet_output+0x8c>)
 8012f32:	f00c f877 	bl	801f024 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	699b      	ldr	r3, [r3, #24]
 8012f3a:	68b9      	ldr	r1, [r7, #8]
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	4798      	blx	r3
 8012f40:	4603      	mov	r3, r0
 8012f42:	e002      	b.n	8012f4a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012f44:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012f46:	f06f 0301 	mvn.w	r3, #1
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3718      	adds	r7, #24
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	0802429c 	.word	0x0802429c
 8012f58:	080242fc 	.word	0x080242fc
 8012f5c:	08024330 	.word	0x08024330

08012f60 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b08e      	sub	sp, #56	; 0x38
 8012f64:	af04      	add	r7, sp, #16
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012f6a:	4b87      	ldr	r3, [pc, #540]	; (8013188 <icmp_input+0x228>)
 8012f6c:	689b      	ldr	r3, [r3, #8]
 8012f6e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	f003 030f 	and.w	r3, r3, #15
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	009b      	lsls	r3, r3, #2
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f82:	2b13      	cmp	r3, #19
 8012f84:	f240 80e8 	bls.w	8013158 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	895b      	ldrh	r3, [r3, #10]
 8012f8c:	2b03      	cmp	r3, #3
 8012f8e:	f240 80e5 	bls.w	801315c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012f9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	f000 80d2 	beq.w	801314a <icmp_input+0x1ea>
 8012fa6:	2b08      	cmp	r3, #8
 8012fa8:	f040 80d2 	bne.w	8013150 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012fac:	4b77      	ldr	r3, [pc, #476]	; (801318c <icmp_input+0x22c>)
 8012fae:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012fb0:	4b75      	ldr	r3, [pc, #468]	; (8013188 <icmp_input+0x228>)
 8012fb2:	695b      	ldr	r3, [r3, #20]
 8012fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fb8:	2be0      	cmp	r3, #224	; 0xe0
 8012fba:	f000 80d6 	beq.w	801316a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012fbe:	4b72      	ldr	r3, [pc, #456]	; (8013188 <icmp_input+0x228>)
 8012fc0:	695b      	ldr	r3, [r3, #20]
 8012fc2:	4a71      	ldr	r2, [pc, #452]	; (8013188 <icmp_input+0x228>)
 8012fc4:	6812      	ldr	r2, [r2, #0]
 8012fc6:	4611      	mov	r1, r2
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f000 fce5 	bl	8013998 <ip4_addr_isbroadcast_u32>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	f040 80cc 	bne.w	801316e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	891b      	ldrh	r3, [r3, #8]
 8012fda:	2b07      	cmp	r3, #7
 8012fdc:	f240 80c0 	bls.w	8013160 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f000 f9e0 	bl	80133a6 <inet_chksum_pbuf>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d003      	beq.n	8012ff4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f002 fe63 	bl	8015cb8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8012ff2:	e0c5      	b.n	8013180 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ff6:	330e      	adds	r3, #14
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f002 fdc6 	bl	8015b8c <pbuf_add_header>
 8013000:	4603      	mov	r3, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d04b      	beq.n	801309e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	891a      	ldrh	r2, [r3, #8]
 801300a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801300c:	4413      	add	r3, r2
 801300e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	891b      	ldrh	r3, [r3, #8]
 8013014:	8b7a      	ldrh	r2, [r7, #26]
 8013016:	429a      	cmp	r2, r3
 8013018:	f0c0 80ab 	bcc.w	8013172 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801301c:	8b7b      	ldrh	r3, [r7, #26]
 801301e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013022:	4619      	mov	r1, r3
 8013024:	200e      	movs	r0, #14
 8013026:	f002 fb63 	bl	80156f0 <pbuf_alloc>
 801302a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	2b00      	cmp	r3, #0
 8013030:	f000 80a1 	beq.w	8013176 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	895b      	ldrh	r3, [r3, #10]
 8013038:	461a      	mov	r2, r3
 801303a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801303c:	3308      	adds	r3, #8
 801303e:	429a      	cmp	r2, r3
 8013040:	d203      	bcs.n	801304a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013042:	6978      	ldr	r0, [r7, #20]
 8013044:	f002 fe38 	bl	8015cb8 <pbuf_free>
          goto icmperr;
 8013048:	e096      	b.n	8013178 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013052:	4618      	mov	r0, r3
 8013054:	f00b f8c6 	bl	801e1e4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801305a:	4619      	mov	r1, r3
 801305c:	6978      	ldr	r0, [r7, #20]
 801305e:	f002 fda5 	bl	8015bac <pbuf_remove_header>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d009      	beq.n	801307c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013068:	4b49      	ldr	r3, [pc, #292]	; (8013190 <icmp_input+0x230>)
 801306a:	22b6      	movs	r2, #182	; 0xb6
 801306c:	4949      	ldr	r1, [pc, #292]	; (8013194 <icmp_input+0x234>)
 801306e:	484a      	ldr	r0, [pc, #296]	; (8013198 <icmp_input+0x238>)
 8013070:	f00b ffd8 	bl	801f024 <iprintf>
          pbuf_free(r);
 8013074:	6978      	ldr	r0, [r7, #20]
 8013076:	f002 fe1f 	bl	8015cb8 <pbuf_free>
          goto icmperr;
 801307a:	e07d      	b.n	8013178 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801307c:	6879      	ldr	r1, [r7, #4]
 801307e:	6978      	ldr	r0, [r7, #20]
 8013080:	f002 ff32 	bl	8015ee8 <pbuf_copy>
 8013084:	4603      	mov	r3, r0
 8013086:	2b00      	cmp	r3, #0
 8013088:	d003      	beq.n	8013092 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801308a:	6978      	ldr	r0, [r7, #20]
 801308c:	f002 fe14 	bl	8015cb8 <pbuf_free>
          goto icmperr;
 8013090:	e072      	b.n	8013178 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f002 fe10 	bl	8015cb8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	607b      	str	r3, [r7, #4]
 801309c:	e00f      	b.n	80130be <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801309e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130a0:	330e      	adds	r3, #14
 80130a2:	4619      	mov	r1, r3
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f002 fd81 	bl	8015bac <pbuf_remove_header>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d006      	beq.n	80130be <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80130b0:	4b37      	ldr	r3, [pc, #220]	; (8013190 <icmp_input+0x230>)
 80130b2:	22c7      	movs	r2, #199	; 0xc7
 80130b4:	4939      	ldr	r1, [pc, #228]	; (801319c <icmp_input+0x23c>)
 80130b6:	4838      	ldr	r0, [pc, #224]	; (8013198 <icmp_input+0x238>)
 80130b8:	f00b ffb4 	bl	801f024 <iprintf>
          goto icmperr;
 80130bc:	e05c      	b.n	8013178 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	685b      	ldr	r3, [r3, #4]
 80130c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80130c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130c6:	4619      	mov	r1, r3
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f002 fd5f 	bl	8015b8c <pbuf_add_header>
 80130ce:	4603      	mov	r3, r0
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d13c      	bne.n	801314e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80130e2:	4b29      	ldr	r3, [pc, #164]	; (8013188 <icmp_input+0x228>)
 80130e4:	691a      	ldr	r2, [r3, #16]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	2200      	movs	r2, #0
 80130ee:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	885b      	ldrh	r3, [r3, #2]
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80130fa:	4293      	cmp	r3, r2
 80130fc:	d907      	bls.n	801310e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	885b      	ldrh	r3, [r3, #2]
 8013102:	b29b      	uxth	r3, r3
 8013104:	3309      	adds	r3, #9
 8013106:	b29a      	uxth	r2, r3
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	805a      	strh	r2, [r3, #2]
 801310c:	e006      	b.n	801311c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801310e:	693b      	ldr	r3, [r7, #16]
 8013110:	885b      	ldrh	r3, [r3, #2]
 8013112:	b29b      	uxth	r3, r3
 8013114:	3308      	adds	r3, #8
 8013116:	b29a      	uxth	r2, r3
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	22ff      	movs	r2, #255	; 0xff
 8013120:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2200      	movs	r2, #0
 8013126:	729a      	strb	r2, [r3, #10]
 8013128:	2200      	movs	r2, #0
 801312a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	9302      	str	r3, [sp, #8]
 8013130:	2301      	movs	r3, #1
 8013132:	9301      	str	r3, [sp, #4]
 8013134:	2300      	movs	r3, #0
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	23ff      	movs	r3, #255	; 0xff
 801313a:	2200      	movs	r2, #0
 801313c:	69f9      	ldr	r1, [r7, #28]
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 fb52 	bl	80137e8 <ip4_output_if>
 8013144:	4603      	mov	r3, r0
 8013146:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013148:	e001      	b.n	801314e <icmp_input+0x1ee>
      break;
 801314a:	bf00      	nop
 801314c:	e000      	b.n	8013150 <icmp_input+0x1f0>
      break;
 801314e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f002 fdb1 	bl	8015cb8 <pbuf_free>
  return;
 8013156:	e013      	b.n	8013180 <icmp_input+0x220>
    goto lenerr;
 8013158:	bf00      	nop
 801315a:	e002      	b.n	8013162 <icmp_input+0x202>
    goto lenerr;
 801315c:	bf00      	nop
 801315e:	e000      	b.n	8013162 <icmp_input+0x202>
        goto lenerr;
 8013160:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f002 fda8 	bl	8015cb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013168:	e00a      	b.n	8013180 <icmp_input+0x220>
        goto icmperr;
 801316a:	bf00      	nop
 801316c:	e004      	b.n	8013178 <icmp_input+0x218>
        goto icmperr;
 801316e:	bf00      	nop
 8013170:	e002      	b.n	8013178 <icmp_input+0x218>
          goto icmperr;
 8013172:	bf00      	nop
 8013174:	e000      	b.n	8013178 <icmp_input+0x218>
          goto icmperr;
 8013176:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f002 fd9d 	bl	8015cb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801317e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013180:	3728      	adds	r7, #40	; 0x28
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	24005b34 	.word	0x24005b34
 801318c:	24005b48 	.word	0x24005b48
 8013190:	08024358 	.word	0x08024358
 8013194:	080243b8 	.word	0x080243b8
 8013198:	080243f0 	.word	0x080243f0
 801319c:	08024418 	.word	0x08024418

080131a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b082      	sub	sp, #8
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
 80131a8:	460b      	mov	r3, r1
 80131aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80131ac:	78fb      	ldrb	r3, [r7, #3]
 80131ae:	461a      	mov	r2, r3
 80131b0:	2103      	movs	r1, #3
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f000 f814 	bl	80131e0 <icmp_send_response>
}
 80131b8:	bf00      	nop
 80131ba:	3708      	adds	r7, #8
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	460b      	mov	r3, r1
 80131ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80131cc:	78fb      	ldrb	r3, [r7, #3]
 80131ce:	461a      	mov	r2, r3
 80131d0:	210b      	movs	r1, #11
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f000 f804 	bl	80131e0 <icmp_send_response>
}
 80131d8:	bf00      	nop
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b08c      	sub	sp, #48	; 0x30
 80131e4:	af04      	add	r7, sp, #16
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	460b      	mov	r3, r1
 80131ea:	70fb      	strb	r3, [r7, #3]
 80131ec:	4613      	mov	r3, r2
 80131ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80131f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131f4:	2124      	movs	r1, #36	; 0x24
 80131f6:	2022      	movs	r0, #34	; 0x22
 80131f8:	f002 fa7a 	bl	80156f0 <pbuf_alloc>
 80131fc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d056      	beq.n	80132b2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	895b      	ldrh	r3, [r3, #10]
 8013208:	2b23      	cmp	r3, #35	; 0x23
 801320a:	d806      	bhi.n	801321a <icmp_send_response+0x3a>
 801320c:	4b2b      	ldr	r3, [pc, #172]	; (80132bc <icmp_send_response+0xdc>)
 801320e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013212:	492b      	ldr	r1, [pc, #172]	; (80132c0 <icmp_send_response+0xe0>)
 8013214:	482b      	ldr	r0, [pc, #172]	; (80132c4 <icmp_send_response+0xe4>)
 8013216:	f00b ff05 	bl	801f024 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013220:	69fb      	ldr	r3, [r7, #28]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	78fa      	ldrb	r2, [r7, #3]
 801322a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	78ba      	ldrb	r2, [r7, #2]
 8013230:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	2200      	movs	r2, #0
 8013236:	711a      	strb	r2, [r3, #4]
 8013238:	2200      	movs	r2, #0
 801323a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	2200      	movs	r2, #0
 8013240:	719a      	strb	r2, [r3, #6]
 8013242:	2200      	movs	r2, #0
 8013244:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	f103 0008 	add.w	r0, r3, #8
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	221c      	movs	r2, #28
 8013254:	4619      	mov	r1, r3
 8013256:	f00a ffc5 	bl	801e1e4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	68db      	ldr	r3, [r3, #12]
 801325e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013260:	f107 030c 	add.w	r3, r7, #12
 8013264:	4618      	mov	r0, r3
 8013266:	f000 f901 	bl	801346c <ip4_route>
 801326a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d01b      	beq.n	80132aa <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	2200      	movs	r2, #0
 8013276:	709a      	strb	r2, [r3, #2]
 8013278:	2200      	movs	r2, #0
 801327a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	895b      	ldrh	r3, [r3, #10]
 8013280:	4619      	mov	r1, r3
 8013282:	6978      	ldr	r0, [r7, #20]
 8013284:	f000 f87d 	bl	8013382 <inet_chksum>
 8013288:	4603      	mov	r3, r0
 801328a:	461a      	mov	r2, r3
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013290:	f107 020c 	add.w	r2, r7, #12
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	9302      	str	r3, [sp, #8]
 8013298:	2301      	movs	r3, #1
 801329a:	9301      	str	r3, [sp, #4]
 801329c:	2300      	movs	r3, #0
 801329e:	9300      	str	r3, [sp, #0]
 80132a0:	23ff      	movs	r3, #255	; 0xff
 80132a2:	2100      	movs	r1, #0
 80132a4:	69f8      	ldr	r0, [r7, #28]
 80132a6:	f000 fa9f 	bl	80137e8 <ip4_output_if>
  }
  pbuf_free(q);
 80132aa:	69f8      	ldr	r0, [r7, #28]
 80132ac:	f002 fd04 	bl	8015cb8 <pbuf_free>
 80132b0:	e000      	b.n	80132b4 <icmp_send_response+0xd4>
    return;
 80132b2:	bf00      	nop
}
 80132b4:	3720      	adds	r7, #32
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	08024358 	.word	0x08024358
 80132c0:	0802444c 	.word	0x0802444c
 80132c4:	080243f0 	.word	0x080243f0

080132c8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80132c8:	b480      	push	{r7}
 80132ca:	b089      	sub	sp, #36	; 0x24
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80132d6:	2300      	movs	r3, #0
 80132d8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80132da:	2300      	movs	r3, #0
 80132dc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	f003 0301 	and.w	r3, r3, #1
 80132e4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d00d      	beq.n	8013308 <lwip_standard_chksum+0x40>
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	dd0a      	ble.n	8013308 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80132f2:	69fa      	ldr	r2, [r7, #28]
 80132f4:	1c53      	adds	r3, r2, #1
 80132f6:	61fb      	str	r3, [r7, #28]
 80132f8:	f107 030e 	add.w	r3, r7, #14
 80132fc:	3301      	adds	r3, #1
 80132fe:	7812      	ldrb	r2, [r2, #0]
 8013300:	701a      	strb	r2, [r3, #0]
    len--;
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	3b01      	subs	r3, #1
 8013306:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 801330c:	e00a      	b.n	8013324 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801330e:	69bb      	ldr	r3, [r7, #24]
 8013310:	1c9a      	adds	r2, r3, #2
 8013312:	61ba      	str	r2, [r7, #24]
 8013314:	881b      	ldrh	r3, [r3, #0]
 8013316:	461a      	mov	r2, r3
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	4413      	add	r3, r2
 801331c:	617b      	str	r3, [r7, #20]
    len -= 2;
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	3b02      	subs	r3, #2
 8013322:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	2b01      	cmp	r3, #1
 8013328:	dcf1      	bgt.n	801330e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	dd04      	ble.n	801333a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013330:	f107 030e 	add.w	r3, r7, #14
 8013334:	69ba      	ldr	r2, [r7, #24]
 8013336:	7812      	ldrb	r2, [r2, #0]
 8013338:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801333a:	89fb      	ldrh	r3, [r7, #14]
 801333c:	461a      	mov	r2, r3
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	4413      	add	r3, r2
 8013342:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	0c1a      	lsrs	r2, r3, #16
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	b29b      	uxth	r3, r3
 801334c:	4413      	add	r3, r2
 801334e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	0c1a      	lsrs	r2, r3, #16
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	b29b      	uxth	r3, r3
 8013358:	4413      	add	r3, r2
 801335a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d007      	beq.n	8013372 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8013362:	697b      	ldr	r3, [r7, #20]
 8013364:	021b      	lsls	r3, r3, #8
 8013366:	b29a      	uxth	r2, r3
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	0a1b      	lsrs	r3, r3, #8
 801336c:	b2db      	uxtb	r3, r3
 801336e:	4313      	orrs	r3, r2
 8013370:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	b29b      	uxth	r3, r3
}
 8013376:	4618      	mov	r0, r3
 8013378:	3724      	adds	r7, #36	; 0x24
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr

08013382 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8013382:	b580      	push	{r7, lr}
 8013384:	b082      	sub	sp, #8
 8013386:	af00      	add	r7, sp, #0
 8013388:	6078      	str	r0, [r7, #4]
 801338a:	460b      	mov	r3, r1
 801338c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801338e:	887b      	ldrh	r3, [r7, #2]
 8013390:	4619      	mov	r1, r3
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7ff ff98 	bl	80132c8 <lwip_standard_chksum>
 8013398:	4603      	mov	r3, r0
 801339a:	43db      	mvns	r3, r3
 801339c:	b29b      	uxth	r3, r3
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3708      	adds	r7, #8
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b086      	sub	sp, #24
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80133ae:	2300      	movs	r3, #0
 80133b0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80133b2:	2300      	movs	r3, #0
 80133b4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	613b      	str	r3, [r7, #16]
 80133ba:	e02b      	b.n	8013414 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	685a      	ldr	r2, [r3, #4]
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	895b      	ldrh	r3, [r3, #10]
 80133c4:	4619      	mov	r1, r3
 80133c6:	4610      	mov	r0, r2
 80133c8:	f7ff ff7e 	bl	80132c8 <lwip_standard_chksum>
 80133cc:	4603      	mov	r3, r0
 80133ce:	461a      	mov	r2, r3
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	4413      	add	r3, r2
 80133d4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	0c1a      	lsrs	r2, r3, #16
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	b29b      	uxth	r3, r3
 80133de:	4413      	add	r3, r2
 80133e0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	895b      	ldrh	r3, [r3, #10]
 80133e6:	f003 0301 	and.w	r3, r3, #1
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d00e      	beq.n	801340e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	bf0c      	ite	eq
 80133f6:	2301      	moveq	r3, #1
 80133f8:	2300      	movne	r3, #0
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	021b      	lsls	r3, r3, #8
 8013402:	b29a      	uxth	r2, r3
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	0a1b      	lsrs	r3, r3, #8
 8013408:	b2db      	uxtb	r3, r3
 801340a:	4313      	orrs	r3, r2
 801340c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	613b      	str	r3, [r7, #16]
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d1d0      	bne.n	80133bc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d007      	beq.n	8013430 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	021b      	lsls	r3, r3, #8
 8013424:	b29a      	uxth	r2, r3
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	0a1b      	lsrs	r3, r3, #8
 801342a:	b2db      	uxtb	r3, r3
 801342c:	4313      	orrs	r3, r2
 801342e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	b29b      	uxth	r3, r3
 8013434:	43db      	mvns	r3, r3
 8013436:	b29b      	uxth	r3, r3
}
 8013438:	4618      	mov	r0, r3
 801343a:	3718      	adds	r7, #24
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b082      	sub	sp, #8
 8013444:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013446:	2300      	movs	r3, #0
 8013448:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801344a:	f001 f9e5 	bl	8014818 <mem_init>
  memp_init();
 801344e:	f001 fce7 	bl	8014e20 <memp_init>
  pbuf_init();
  netif_init();
 8013452:	f001 fde5 	bl	8015020 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013456:	f009 fa0f 	bl	801c878 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801345a:	f002 ff73 	bl	8016344 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801345e:	f009 f981 	bl	801c764 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013462:	bf00      	nop
 8013464:	3708      	adds	r7, #8
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
	...

0801346c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801346c:	b480      	push	{r7}
 801346e:	b085      	sub	sp, #20
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013474:	4b33      	ldr	r3, [pc, #204]	; (8013544 <ip4_route+0xd8>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	60fb      	str	r3, [r7, #12]
 801347a:	e036      	b.n	80134ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013482:	f003 0301 	and.w	r3, r3, #1
 8013486:	b2db      	uxtb	r3, r3
 8013488:	2b00      	cmp	r3, #0
 801348a:	d02b      	beq.n	80134e4 <ip4_route+0x78>
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013492:	089b      	lsrs	r3, r3, #2
 8013494:	f003 0301 	and.w	r3, r3, #1
 8013498:	b2db      	uxtb	r3, r3
 801349a:	2b00      	cmp	r3, #0
 801349c:	d022      	beq.n	80134e4 <ip4_route+0x78>
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	3304      	adds	r3, #4
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d01d      	beq.n	80134e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	3304      	adds	r3, #4
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	405a      	eors	r2, r3
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	3308      	adds	r3, #8
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	4013      	ands	r3, r2
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d101      	bne.n	80134c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	e038      	b.n	8013536 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134ca:	f003 0302 	and.w	r3, r3, #2
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d108      	bne.n	80134e4 <ip4_route+0x78>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681a      	ldr	r2, [r3, #0]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	330c      	adds	r3, #12
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	429a      	cmp	r2, r3
 80134de:	d101      	bne.n	80134e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	e028      	b.n	8013536 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	60fb      	str	r3, [r7, #12]
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d1c5      	bne.n	801347c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80134f0:	4b15      	ldr	r3, [pc, #84]	; (8013548 <ip4_route+0xdc>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d01a      	beq.n	801352e <ip4_route+0xc2>
 80134f8:	4b13      	ldr	r3, [pc, #76]	; (8013548 <ip4_route+0xdc>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013500:	f003 0301 	and.w	r3, r3, #1
 8013504:	2b00      	cmp	r3, #0
 8013506:	d012      	beq.n	801352e <ip4_route+0xc2>
 8013508:	4b0f      	ldr	r3, [pc, #60]	; (8013548 <ip4_route+0xdc>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013510:	f003 0304 	and.w	r3, r3, #4
 8013514:	2b00      	cmp	r3, #0
 8013516:	d00a      	beq.n	801352e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013518:	4b0b      	ldr	r3, [pc, #44]	; (8013548 <ip4_route+0xdc>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	3304      	adds	r3, #4
 801351e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013520:	2b00      	cmp	r3, #0
 8013522:	d004      	beq.n	801352e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	b2db      	uxtb	r3, r3
 801352a:	2b7f      	cmp	r3, #127	; 0x7f
 801352c:	d101      	bne.n	8013532 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801352e:	2300      	movs	r3, #0
 8013530:	e001      	b.n	8013536 <ip4_route+0xca>
  }

  return netif_default;
 8013532:	4b05      	ldr	r3, [pc, #20]	; (8013548 <ip4_route+0xdc>)
 8013534:	681b      	ldr	r3, [r3, #0]
}
 8013536:	4618      	mov	r0, r3
 8013538:	3714      	adds	r7, #20
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr
 8013542:	bf00      	nop
 8013544:	24008a14 	.word	0x24008a14
 8013548:	24008a18 	.word	0x24008a18

0801354c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801355a:	f003 0301 	and.w	r3, r3, #1
 801355e:	b2db      	uxtb	r3, r3
 8013560:	2b00      	cmp	r3, #0
 8013562:	d016      	beq.n	8013592 <ip4_input_accept+0x46>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	3304      	adds	r3, #4
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d011      	beq.n	8013592 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801356e:	4b0b      	ldr	r3, [pc, #44]	; (801359c <ip4_input_accept+0x50>)
 8013570:	695a      	ldr	r2, [r3, #20]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	3304      	adds	r3, #4
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	429a      	cmp	r2, r3
 801357a:	d008      	beq.n	801358e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801357c:	4b07      	ldr	r3, [pc, #28]	; (801359c <ip4_input_accept+0x50>)
 801357e:	695b      	ldr	r3, [r3, #20]
 8013580:	6879      	ldr	r1, [r7, #4]
 8013582:	4618      	mov	r0, r3
 8013584:	f000 fa08 	bl	8013998 <ip4_addr_isbroadcast_u32>
 8013588:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801358a:	2b00      	cmp	r3, #0
 801358c:	d001      	beq.n	8013592 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801358e:	2301      	movs	r3, #1
 8013590:	e000      	b.n	8013594 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013592:	2300      	movs	r3, #0
}
 8013594:	4618      	mov	r0, r3
 8013596:	3708      	adds	r7, #8
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}
 801359c:	24005b34 	.word	0x24005b34

080135a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b086      	sub	sp, #24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	091b      	lsrs	r3, r3, #4
 80135b6:	b2db      	uxtb	r3, r3
 80135b8:	2b04      	cmp	r3, #4
 80135ba:	d004      	beq.n	80135c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f002 fb7b 	bl	8015cb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80135c2:	2300      	movs	r3, #0
 80135c4:	e107      	b.n	80137d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	f003 030f 	and.w	r3, r3, #15
 80135ce:	b2db      	uxtb	r3, r3
 80135d0:	009b      	lsls	r3, r3, #2
 80135d2:	b2db      	uxtb	r3, r3
 80135d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	885b      	ldrh	r3, [r3, #2]
 80135da:	b29b      	uxth	r3, r3
 80135dc:	4618      	mov	r0, r3
 80135de:	f7fe fc6f 	bl	8011ec0 <lwip_htons>
 80135e2:	4603      	mov	r3, r0
 80135e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	891b      	ldrh	r3, [r3, #8]
 80135ea:	89ba      	ldrh	r2, [r7, #12]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d204      	bcs.n	80135fa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80135f0:	89bb      	ldrh	r3, [r7, #12]
 80135f2:	4619      	mov	r1, r3
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f002 f9d9 	bl	80159ac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	895b      	ldrh	r3, [r3, #10]
 80135fe:	89fa      	ldrh	r2, [r7, #14]
 8013600:	429a      	cmp	r2, r3
 8013602:	d807      	bhi.n	8013614 <ip4_input+0x74>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	891b      	ldrh	r3, [r3, #8]
 8013608:	89ba      	ldrh	r2, [r7, #12]
 801360a:	429a      	cmp	r2, r3
 801360c:	d802      	bhi.n	8013614 <ip4_input+0x74>
 801360e:	89fb      	ldrh	r3, [r7, #14]
 8013610:	2b13      	cmp	r3, #19
 8013612:	d804      	bhi.n	801361e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f002 fb4f 	bl	8015cb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801361a:	2300      	movs	r3, #0
 801361c:	e0db      	b.n	80137d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	691b      	ldr	r3, [r3, #16]
 8013622:	4a6f      	ldr	r2, [pc, #444]	; (80137e0 <ip4_input+0x240>)
 8013624:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	68db      	ldr	r3, [r3, #12]
 801362a:	4a6d      	ldr	r2, [pc, #436]	; (80137e0 <ip4_input+0x240>)
 801362c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801362e:	4b6c      	ldr	r3, [pc, #432]	; (80137e0 <ip4_input+0x240>)
 8013630:	695b      	ldr	r3, [r3, #20]
 8013632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013636:	2be0      	cmp	r3, #224	; 0xe0
 8013638:	d112      	bne.n	8013660 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013640:	f003 0301 	and.w	r3, r3, #1
 8013644:	b2db      	uxtb	r3, r3
 8013646:	2b00      	cmp	r3, #0
 8013648:	d007      	beq.n	801365a <ip4_input+0xba>
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	3304      	adds	r3, #4
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d002      	beq.n	801365a <ip4_input+0xba>
      netif = inp;
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	613b      	str	r3, [r7, #16]
 8013658:	e02a      	b.n	80136b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801365a:	2300      	movs	r3, #0
 801365c:	613b      	str	r3, [r7, #16]
 801365e:	e027      	b.n	80136b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013660:	6838      	ldr	r0, [r7, #0]
 8013662:	f7ff ff73 	bl	801354c <ip4_input_accept>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d002      	beq.n	8013672 <ip4_input+0xd2>
      netif = inp;
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	613b      	str	r3, [r7, #16]
 8013670:	e01e      	b.n	80136b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013672:	2300      	movs	r3, #0
 8013674:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013676:	4b5a      	ldr	r3, [pc, #360]	; (80137e0 <ip4_input+0x240>)
 8013678:	695b      	ldr	r3, [r3, #20]
 801367a:	b2db      	uxtb	r3, r3
 801367c:	2b7f      	cmp	r3, #127	; 0x7f
 801367e:	d017      	beq.n	80136b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013680:	4b58      	ldr	r3, [pc, #352]	; (80137e4 <ip4_input+0x244>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	613b      	str	r3, [r7, #16]
 8013686:	e00e      	b.n	80136a6 <ip4_input+0x106>
          if (netif == inp) {
 8013688:	693a      	ldr	r2, [r7, #16]
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	429a      	cmp	r2, r3
 801368e:	d006      	beq.n	801369e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013690:	6938      	ldr	r0, [r7, #16]
 8013692:	f7ff ff5b 	bl	801354c <ip4_input_accept>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d108      	bne.n	80136ae <ip4_input+0x10e>
 801369c:	e000      	b.n	80136a0 <ip4_input+0x100>
            continue;
 801369e:	bf00      	nop
        NETIF_FOREACH(netif) {
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	613b      	str	r3, [r7, #16]
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1ed      	bne.n	8013688 <ip4_input+0xe8>
 80136ac:	e000      	b.n	80136b0 <ip4_input+0x110>
            break;
 80136ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80136b0:	4b4b      	ldr	r3, [pc, #300]	; (80137e0 <ip4_input+0x240>)
 80136b2:	691b      	ldr	r3, [r3, #16]
 80136b4:	6839      	ldr	r1, [r7, #0]
 80136b6:	4618      	mov	r0, r3
 80136b8:	f000 f96e 	bl	8013998 <ip4_addr_isbroadcast_u32>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d105      	bne.n	80136ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80136c2:	4b47      	ldr	r3, [pc, #284]	; (80137e0 <ip4_input+0x240>)
 80136c4:	691b      	ldr	r3, [r3, #16]
 80136c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80136ca:	2be0      	cmp	r3, #224	; 0xe0
 80136cc:	d104      	bne.n	80136d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f002 faf2 	bl	8015cb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80136d4:	2300      	movs	r3, #0
 80136d6:	e07e      	b.n	80137d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80136d8:	693b      	ldr	r3, [r7, #16]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d104      	bne.n	80136e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f002 faea 	bl	8015cb8 <pbuf_free>
    return ERR_OK;
 80136e4:	2300      	movs	r3, #0
 80136e6:	e076      	b.n	80137d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	88db      	ldrh	r3, [r3, #6]
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	461a      	mov	r2, r3
 80136f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80136f4:	4013      	ands	r3, r2
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00b      	beq.n	8013712 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f000 fc92 	bl	8014024 <ip4_reass>
 8013700:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d101      	bne.n	801370c <ip4_input+0x16c>
      return ERR_OK;
 8013708:	2300      	movs	r3, #0
 801370a:	e064      	b.n	80137d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013712:	4a33      	ldr	r2, [pc, #204]	; (80137e0 <ip4_input+0x240>)
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013718:	4a31      	ldr	r2, [pc, #196]	; (80137e0 <ip4_input+0x240>)
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801371e:	4a30      	ldr	r2, [pc, #192]	; (80137e0 <ip4_input+0x240>)
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	781b      	ldrb	r3, [r3, #0]
 8013728:	f003 030f 	and.w	r3, r3, #15
 801372c:	b2db      	uxtb	r3, r3
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	b2db      	uxtb	r3, r3
 8013732:	b29a      	uxth	r2, r3
 8013734:	4b2a      	ldr	r3, [pc, #168]	; (80137e0 <ip4_input+0x240>)
 8013736:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013738:	89fb      	ldrh	r3, [r7, #14]
 801373a:	4619      	mov	r1, r3
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f002 fa35 	bl	8015bac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	7a5b      	ldrb	r3, [r3, #9]
 8013746:	2b11      	cmp	r3, #17
 8013748:	d006      	beq.n	8013758 <ip4_input+0x1b8>
 801374a:	2b11      	cmp	r3, #17
 801374c:	dc13      	bgt.n	8013776 <ip4_input+0x1d6>
 801374e:	2b01      	cmp	r3, #1
 8013750:	d00c      	beq.n	801376c <ip4_input+0x1cc>
 8013752:	2b06      	cmp	r3, #6
 8013754:	d005      	beq.n	8013762 <ip4_input+0x1c2>
 8013756:	e00e      	b.n	8013776 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013758:	6839      	ldr	r1, [r7, #0]
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f009 f93a 	bl	801c9d4 <udp_input>
        break;
 8013760:	e026      	b.n	80137b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013762:	6839      	ldr	r1, [r7, #0]
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f004 fd27 	bl	80181b8 <tcp_input>
        break;
 801376a:	e021      	b.n	80137b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801376c:	6839      	ldr	r1, [r7, #0]
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f7ff fbf6 	bl	8012f60 <icmp_input>
        break;
 8013774:	e01c      	b.n	80137b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013776:	4b1a      	ldr	r3, [pc, #104]	; (80137e0 <ip4_input+0x240>)
 8013778:	695b      	ldr	r3, [r3, #20]
 801377a:	6939      	ldr	r1, [r7, #16]
 801377c:	4618      	mov	r0, r3
 801377e:	f000 f90b 	bl	8013998 <ip4_addr_isbroadcast_u32>
 8013782:	4603      	mov	r3, r0
 8013784:	2b00      	cmp	r3, #0
 8013786:	d10f      	bne.n	80137a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013788:	4b15      	ldr	r3, [pc, #84]	; (80137e0 <ip4_input+0x240>)
 801378a:	695b      	ldr	r3, [r3, #20]
 801378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013790:	2be0      	cmp	r3, #224	; 0xe0
 8013792:	d009      	beq.n	80137a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013794:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013798:	4619      	mov	r1, r3
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f002 fa79 	bl	8015c92 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80137a0:	2102      	movs	r1, #2
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f7ff fcfc 	bl	80131a0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f002 fa85 	bl	8015cb8 <pbuf_free>
        break;
 80137ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80137b0:	4b0b      	ldr	r3, [pc, #44]	; (80137e0 <ip4_input+0x240>)
 80137b2:	2200      	movs	r2, #0
 80137b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80137b6:	4b0a      	ldr	r3, [pc, #40]	; (80137e0 <ip4_input+0x240>)
 80137b8:	2200      	movs	r2, #0
 80137ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80137bc:	4b08      	ldr	r3, [pc, #32]	; (80137e0 <ip4_input+0x240>)
 80137be:	2200      	movs	r2, #0
 80137c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80137c2:	4b07      	ldr	r3, [pc, #28]	; (80137e0 <ip4_input+0x240>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80137c8:	4b05      	ldr	r3, [pc, #20]	; (80137e0 <ip4_input+0x240>)
 80137ca:	2200      	movs	r2, #0
 80137cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80137ce:	4b04      	ldr	r3, [pc, #16]	; (80137e0 <ip4_input+0x240>)
 80137d0:	2200      	movs	r2, #0
 80137d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80137d4:	2300      	movs	r3, #0
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3718      	adds	r7, #24
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	24005b34 	.word	0x24005b34
 80137e4:	24008a14 	.word	0x24008a14

080137e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b08a      	sub	sp, #40	; 0x28
 80137ec:	af04      	add	r7, sp, #16
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
 80137f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d009      	beq.n	8013814 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d003      	beq.n	801380e <ip4_output_if+0x26>
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d102      	bne.n	8013814 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013810:	3304      	adds	r3, #4
 8013812:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013814:	78fa      	ldrb	r2, [r7, #3]
 8013816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013818:	9302      	str	r3, [sp, #8]
 801381a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801381e:	9301      	str	r3, [sp, #4]
 8013820:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013824:	9300      	str	r3, [sp, #0]
 8013826:	4613      	mov	r3, r2
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	6979      	ldr	r1, [r7, #20]
 801382c:	68f8      	ldr	r0, [r7, #12]
 801382e:	f000 f805 	bl	801383c <ip4_output_if_src>
 8013832:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013834:	4618      	mov	r0, r3
 8013836:	3718      	adds	r7, #24
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}

0801383c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b088      	sub	sp, #32
 8013840:	af00      	add	r7, sp, #0
 8013842:	60f8      	str	r0, [r7, #12]
 8013844:	60b9      	str	r1, [r7, #8]
 8013846:	607a      	str	r2, [r7, #4]
 8013848:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	7b9b      	ldrb	r3, [r3, #14]
 801384e:	2b01      	cmp	r3, #1
 8013850:	d006      	beq.n	8013860 <ip4_output_if_src+0x24>
 8013852:	4b4b      	ldr	r3, [pc, #300]	; (8013980 <ip4_output_if_src+0x144>)
 8013854:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013858:	494a      	ldr	r1, [pc, #296]	; (8013984 <ip4_output_if_src+0x148>)
 801385a:	484b      	ldr	r0, [pc, #300]	; (8013988 <ip4_output_if_src+0x14c>)
 801385c:	f00b fbe2 	bl	801f024 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d060      	beq.n	8013928 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013866:	2314      	movs	r3, #20
 8013868:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801386a:	2114      	movs	r1, #20
 801386c:	68f8      	ldr	r0, [r7, #12]
 801386e:	f002 f98d 	bl	8015b8c <pbuf_add_header>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d002      	beq.n	801387e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013878:	f06f 0301 	mvn.w	r3, #1
 801387c:	e07c      	b.n	8013978 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	895b      	ldrh	r3, [r3, #10]
 8013888:	2b13      	cmp	r3, #19
 801388a:	d806      	bhi.n	801389a <ip4_output_if_src+0x5e>
 801388c:	4b3c      	ldr	r3, [pc, #240]	; (8013980 <ip4_output_if_src+0x144>)
 801388e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013892:	493e      	ldr	r1, [pc, #248]	; (801398c <ip4_output_if_src+0x150>)
 8013894:	483c      	ldr	r0, [pc, #240]	; (8013988 <ip4_output_if_src+0x14c>)
 8013896:	f00b fbc5 	bl	801f024 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801389a:	69fb      	ldr	r3, [r7, #28]
 801389c:	78fa      	ldrb	r2, [r7, #3]
 801389e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80138a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80138b0:	8b7b      	ldrh	r3, [r7, #26]
 80138b2:	089b      	lsrs	r3, r3, #2
 80138b4:	b29b      	uxth	r3, r3
 80138b6:	b2db      	uxtb	r3, r3
 80138b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138bc:	b2da      	uxtb	r2, r3
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80138c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	891b      	ldrh	r3, [r3, #8]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7fe faf6 	bl	8011ec0 <lwip_htons>
 80138d4:	4603      	mov	r3, r0
 80138d6:	461a      	mov	r2, r3
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	2200      	movs	r2, #0
 80138e0:	719a      	strb	r2, [r3, #6]
 80138e2:	2200      	movs	r2, #0
 80138e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80138e6:	4b2a      	ldr	r3, [pc, #168]	; (8013990 <ip4_output_if_src+0x154>)
 80138e8:	881b      	ldrh	r3, [r3, #0]
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7fe fae8 	bl	8011ec0 <lwip_htons>
 80138f0:	4603      	mov	r3, r0
 80138f2:	461a      	mov	r2, r3
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80138f8:	4b25      	ldr	r3, [pc, #148]	; (8013990 <ip4_output_if_src+0x154>)
 80138fa:	881b      	ldrh	r3, [r3, #0]
 80138fc:	3301      	adds	r3, #1
 80138fe:	b29a      	uxth	r2, r3
 8013900:	4b23      	ldr	r3, [pc, #140]	; (8013990 <ip4_output_if_src+0x154>)
 8013902:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d104      	bne.n	8013914 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801390a:	4b22      	ldr	r3, [pc, #136]	; (8013994 <ip4_output_if_src+0x158>)
 801390c:	681a      	ldr	r2, [r3, #0]
 801390e:	69fb      	ldr	r3, [r7, #28]
 8013910:	60da      	str	r2, [r3, #12]
 8013912:	e003      	b.n	801391c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	69fb      	ldr	r3, [r7, #28]
 801391a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	2200      	movs	r2, #0
 8013920:	729a      	strb	r2, [r3, #10]
 8013922:	2200      	movs	r2, #0
 8013924:	72da      	strb	r2, [r3, #11]
 8013926:	e00f      	b.n	8013948 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	895b      	ldrh	r3, [r3, #10]
 801392c:	2b13      	cmp	r3, #19
 801392e:	d802      	bhi.n	8013936 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013930:	f06f 0301 	mvn.w	r3, #1
 8013934:	e020      	b.n	8013978 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	691b      	ldr	r3, [r3, #16]
 8013940:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013942:	f107 0314 	add.w	r3, r7, #20
 8013946:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00c      	beq.n	801396a <ip4_output_if_src+0x12e>
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	891a      	ldrh	r2, [r3, #8]
 8013954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013958:	429a      	cmp	r2, r3
 801395a:	d906      	bls.n	801396a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801395c:	687a      	ldr	r2, [r7, #4]
 801395e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013960:	68f8      	ldr	r0, [r7, #12]
 8013962:	f000 fd4d 	bl	8014400 <ip4_frag>
 8013966:	4603      	mov	r3, r0
 8013968:	e006      	b.n	8013978 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	695b      	ldr	r3, [r3, #20]
 801396e:	687a      	ldr	r2, [r7, #4]
 8013970:	68f9      	ldr	r1, [r7, #12]
 8013972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013974:	4798      	blx	r3
 8013976:	4603      	mov	r3, r0
}
 8013978:	4618      	mov	r0, r3
 801397a:	3720      	adds	r7, #32
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}
 8013980:	08024478 	.word	0x08024478
 8013984:	080244d8 	.word	0x080244d8
 8013988:	080244e4 	.word	0x080244e4
 801398c:	0802450c 	.word	0x0802450c
 8013990:	240051ea 	.word	0x240051ea
 8013994:	08027278 	.word	0x08027278

08013998 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013998:	b480      	push	{r7}
 801399a:	b085      	sub	sp, #20
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139ac:	d002      	beq.n	80139b4 <ip4_addr_isbroadcast_u32+0x1c>
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d101      	bne.n	80139b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80139b4:	2301      	movs	r3, #1
 80139b6:	e02a      	b.n	8013a0e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139be:	f003 0302 	and.w	r3, r3, #2
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d101      	bne.n	80139ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	e021      	b.n	8013a0e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	3304      	adds	r3, #4
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d101      	bne.n	80139da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80139d6:	2300      	movs	r3, #0
 80139d8:	e019      	b.n	8013a0e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	3304      	adds	r3, #4
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	405a      	eors	r2, r3
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	3308      	adds	r3, #8
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	4013      	ands	r3, r2
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d10d      	bne.n	8013a0c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	3308      	adds	r3, #8
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	43da      	mvns	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	3308      	adds	r3, #8
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d101      	bne.n	8013a0c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	e000      	b.n	8013a0e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013a0c:	2300      	movs	r3, #0
  }
}
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3714      	adds	r7, #20
 8013a12:	46bd      	mov	sp, r7
 8013a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a18:	4770      	bx	lr
	...

08013a1c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b084      	sub	sp, #16
 8013a20:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013a22:	2300      	movs	r3, #0
 8013a24:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013a26:	4b12      	ldr	r3, [pc, #72]	; (8013a70 <ip_reass_tmr+0x54>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013a2c:	e018      	b.n	8013a60 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	7fdb      	ldrb	r3, [r3, #31]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d00b      	beq.n	8013a4e <ip_reass_tmr+0x32>
      r->timer--;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	7fdb      	ldrb	r3, [r3, #31]
 8013a3a:	3b01      	subs	r3, #1
 8013a3c:	b2da      	uxtb	r2, r3
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	60fb      	str	r3, [r7, #12]
 8013a4c:	e008      	b.n	8013a60 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013a58:	68b9      	ldr	r1, [r7, #8]
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f000 f80a 	bl	8013a74 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d1e3      	bne.n	8013a2e <ip_reass_tmr+0x12>
    }
  }
}
 8013a66:	bf00      	nop
 8013a68:	bf00      	nop
 8013a6a:	3710      	adds	r7, #16
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	240051ec 	.word	0x240051ec

08013a74 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b088      	sub	sp, #32
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013a82:	683a      	ldr	r2, [r7, #0]
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d105      	bne.n	8013a96 <ip_reass_free_complete_datagram+0x22>
 8013a8a:	4b45      	ldr	r3, [pc, #276]	; (8013ba0 <ip_reass_free_complete_datagram+0x12c>)
 8013a8c:	22ab      	movs	r2, #171	; 0xab
 8013a8e:	4945      	ldr	r1, [pc, #276]	; (8013ba4 <ip_reass_free_complete_datagram+0x130>)
 8013a90:	4845      	ldr	r0, [pc, #276]	; (8013ba8 <ip_reass_free_complete_datagram+0x134>)
 8013a92:	f00b fac7 	bl	801f024 <iprintf>
  if (prev != NULL) {
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d00a      	beq.n	8013ab2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d005      	beq.n	8013ab2 <ip_reass_free_complete_datagram+0x3e>
 8013aa6:	4b3e      	ldr	r3, [pc, #248]	; (8013ba0 <ip_reass_free_complete_datagram+0x12c>)
 8013aa8:	22ad      	movs	r2, #173	; 0xad
 8013aaa:	4940      	ldr	r1, [pc, #256]	; (8013bac <ip_reass_free_complete_datagram+0x138>)
 8013aac:	483e      	ldr	r0, [pc, #248]	; (8013ba8 <ip_reass_free_complete_datagram+0x134>)
 8013aae:	f00b fab9 	bl	801f024 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	889b      	ldrh	r3, [r3, #4]
 8013abe:	b29b      	uxth	r3, r3
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d12a      	bne.n	8013b1a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013ad2:	69bb      	ldr	r3, [r7, #24]
 8013ad4:	6858      	ldr	r0, [r3, #4]
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	3308      	adds	r3, #8
 8013ada:	2214      	movs	r2, #20
 8013adc:	4619      	mov	r1, r3
 8013ade:	f00a fb81 	bl	801e1e4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013ae2:	2101      	movs	r1, #1
 8013ae4:	69b8      	ldr	r0, [r7, #24]
 8013ae6:	f7ff fb6b 	bl	80131c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013aea:	69b8      	ldr	r0, [r7, #24]
 8013aec:	f002 f96c 	bl	8015dc8 <pbuf_clen>
 8013af0:	4603      	mov	r3, r0
 8013af2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013af4:	8bfa      	ldrh	r2, [r7, #30]
 8013af6:	8a7b      	ldrh	r3, [r7, #18]
 8013af8:	4413      	add	r3, r2
 8013afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013afe:	db05      	blt.n	8013b0c <ip_reass_free_complete_datagram+0x98>
 8013b00:	4b27      	ldr	r3, [pc, #156]	; (8013ba0 <ip_reass_free_complete_datagram+0x12c>)
 8013b02:	22bc      	movs	r2, #188	; 0xbc
 8013b04:	492a      	ldr	r1, [pc, #168]	; (8013bb0 <ip_reass_free_complete_datagram+0x13c>)
 8013b06:	4828      	ldr	r0, [pc, #160]	; (8013ba8 <ip_reass_free_complete_datagram+0x134>)
 8013b08:	f00b fa8c 	bl	801f024 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013b0c:	8bfa      	ldrh	r2, [r7, #30]
 8013b0e:	8a7b      	ldrh	r3, [r7, #18]
 8013b10:	4413      	add	r3, r2
 8013b12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013b14:	69b8      	ldr	r0, [r7, #24]
 8013b16:	f002 f8cf 	bl	8015cb8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	685b      	ldr	r3, [r3, #4]
 8013b1e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013b20:	e01f      	b.n	8013b62 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013b28:	69bb      	ldr	r3, [r7, #24]
 8013b2a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013b32:	68f8      	ldr	r0, [r7, #12]
 8013b34:	f002 f948 	bl	8015dc8 <pbuf_clen>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013b3c:	8bfa      	ldrh	r2, [r7, #30]
 8013b3e:	8a7b      	ldrh	r3, [r7, #18]
 8013b40:	4413      	add	r3, r2
 8013b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b46:	db05      	blt.n	8013b54 <ip_reass_free_complete_datagram+0xe0>
 8013b48:	4b15      	ldr	r3, [pc, #84]	; (8013ba0 <ip_reass_free_complete_datagram+0x12c>)
 8013b4a:	22cc      	movs	r2, #204	; 0xcc
 8013b4c:	4918      	ldr	r1, [pc, #96]	; (8013bb0 <ip_reass_free_complete_datagram+0x13c>)
 8013b4e:	4816      	ldr	r0, [pc, #88]	; (8013ba8 <ip_reass_free_complete_datagram+0x134>)
 8013b50:	f00b fa68 	bl	801f024 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013b54:	8bfa      	ldrh	r2, [r7, #30]
 8013b56:	8a7b      	ldrh	r3, [r7, #18]
 8013b58:	4413      	add	r3, r2
 8013b5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013b5c:	68f8      	ldr	r0, [r7, #12]
 8013b5e:	f002 f8ab 	bl	8015cb8 <pbuf_free>
  while (p != NULL) {
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d1dc      	bne.n	8013b22 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013b68:	6839      	ldr	r1, [r7, #0]
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f000 f8c2 	bl	8013cf4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013b70:	4b10      	ldr	r3, [pc, #64]	; (8013bb4 <ip_reass_free_complete_datagram+0x140>)
 8013b72:	881b      	ldrh	r3, [r3, #0]
 8013b74:	8bfa      	ldrh	r2, [r7, #30]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d905      	bls.n	8013b86 <ip_reass_free_complete_datagram+0x112>
 8013b7a:	4b09      	ldr	r3, [pc, #36]	; (8013ba0 <ip_reass_free_complete_datagram+0x12c>)
 8013b7c:	22d2      	movs	r2, #210	; 0xd2
 8013b7e:	490e      	ldr	r1, [pc, #56]	; (8013bb8 <ip_reass_free_complete_datagram+0x144>)
 8013b80:	4809      	ldr	r0, [pc, #36]	; (8013ba8 <ip_reass_free_complete_datagram+0x134>)
 8013b82:	f00b fa4f 	bl	801f024 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013b86:	4b0b      	ldr	r3, [pc, #44]	; (8013bb4 <ip_reass_free_complete_datagram+0x140>)
 8013b88:	881a      	ldrh	r2, [r3, #0]
 8013b8a:	8bfb      	ldrh	r3, [r7, #30]
 8013b8c:	1ad3      	subs	r3, r2, r3
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	4b08      	ldr	r3, [pc, #32]	; (8013bb4 <ip_reass_free_complete_datagram+0x140>)
 8013b92:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013b94:	8bfb      	ldrh	r3, [r7, #30]
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3720      	adds	r7, #32
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	0802453c 	.word	0x0802453c
 8013ba4:	080245a0 	.word	0x080245a0
 8013ba8:	080245ac 	.word	0x080245ac
 8013bac:	080245d4 	.word	0x080245d4
 8013bb0:	080245e8 	.word	0x080245e8
 8013bb4:	240051f0 	.word	0x240051f0
 8013bb8:	08024608 	.word	0x08024608

08013bbc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b08a      	sub	sp, #40	; 0x28
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013bda:	4b28      	ldr	r3, [pc, #160]	; (8013c7c <ip_reass_remove_oldest_datagram+0xc0>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013be0:	e030      	b.n	8013c44 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be4:	695a      	ldr	r2, [r3, #20]
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	68db      	ldr	r3, [r3, #12]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d10c      	bne.n	8013c08 <ip_reass_remove_oldest_datagram+0x4c>
 8013bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf0:	699a      	ldr	r2, [r3, #24]
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	691b      	ldr	r3, [r3, #16]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d106      	bne.n	8013c08 <ip_reass_remove_oldest_datagram+0x4c>
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfc:	899a      	ldrh	r2, [r3, #12]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	889b      	ldrh	r3, [r3, #4]
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d014      	beq.n	8013c32 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013c0e:	6a3b      	ldr	r3, [r7, #32]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d104      	bne.n	8013c1e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c16:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	61bb      	str	r3, [r7, #24]
 8013c1c:	e009      	b.n	8013c32 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c20:	7fda      	ldrb	r2, [r3, #31]
 8013c22:	6a3b      	ldr	r3, [r7, #32]
 8013c24:	7fdb      	ldrb	r3, [r3, #31]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d803      	bhi.n	8013c32 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d001      	beq.n	8013c3e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c3c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d1cb      	bne.n	8013be2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013c4a:	6a3b      	ldr	r3, [r7, #32]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d008      	beq.n	8013c62 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013c50:	69b9      	ldr	r1, [r7, #24]
 8013c52:	6a38      	ldr	r0, [r7, #32]
 8013c54:	f7ff ff0e 	bl	8013a74 <ip_reass_free_complete_datagram>
 8013c58:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013c5a:	697a      	ldr	r2, [r7, #20]
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	4413      	add	r3, r2
 8013c60:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013c62:	697a      	ldr	r2, [r7, #20]
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	da02      	bge.n	8013c70 <ip_reass_remove_oldest_datagram+0xb4>
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	dcac      	bgt.n	8013bca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013c70:	697b      	ldr	r3, [r7, #20]
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3728      	adds	r7, #40	; 0x28
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	240051ec 	.word	0x240051ec

08013c80 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013c8a:	2004      	movs	r0, #4
 8013c8c:	f001 f92e 	bl	8014eec <memp_malloc>
 8013c90:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d110      	bne.n	8013cba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013c98:	6839      	ldr	r1, [r7, #0]
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f7ff ff8e 	bl	8013bbc <ip_reass_remove_oldest_datagram>
 8013ca0:	4602      	mov	r2, r0
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	4293      	cmp	r3, r2
 8013ca6:	dc03      	bgt.n	8013cb0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013ca8:	2004      	movs	r0, #4
 8013caa:	f001 f91f 	bl	8014eec <memp_malloc>
 8013cae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d101      	bne.n	8013cba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	e016      	b.n	8013ce8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013cba:	2220      	movs	r2, #32
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	68f8      	ldr	r0, [r7, #12]
 8013cc0:	f00a fab8 	bl	801e234 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	220f      	movs	r2, #15
 8013cc8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013cca:	4b09      	ldr	r3, [pc, #36]	; (8013cf0 <ip_reass_enqueue_new_datagram+0x70>)
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013cd2:	4a07      	ldr	r2, [pc, #28]	; (8013cf0 <ip_reass_enqueue_new_datagram+0x70>)
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	3308      	adds	r3, #8
 8013cdc:	2214      	movs	r2, #20
 8013cde:	6879      	ldr	r1, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f00a fa7f 	bl	801e1e4 <memcpy>
  return ipr;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3710      	adds	r7, #16
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}
 8013cf0:	240051ec 	.word	0x240051ec

08013cf4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b082      	sub	sp, #8
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013cfe:	4b10      	ldr	r3, [pc, #64]	; (8013d40 <ip_reass_dequeue_datagram+0x4c>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d104      	bne.n	8013d12 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	4a0c      	ldr	r2, [pc, #48]	; (8013d40 <ip_reass_dequeue_datagram+0x4c>)
 8013d0e:	6013      	str	r3, [r2, #0]
 8013d10:	e00d      	b.n	8013d2e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d106      	bne.n	8013d26 <ip_reass_dequeue_datagram+0x32>
 8013d18:	4b0a      	ldr	r3, [pc, #40]	; (8013d44 <ip_reass_dequeue_datagram+0x50>)
 8013d1a:	f240 1245 	movw	r2, #325	; 0x145
 8013d1e:	490a      	ldr	r1, [pc, #40]	; (8013d48 <ip_reass_dequeue_datagram+0x54>)
 8013d20:	480a      	ldr	r0, [pc, #40]	; (8013d4c <ip_reass_dequeue_datagram+0x58>)
 8013d22:	f00b f97f 	bl	801f024 <iprintf>
    prev->next = ipr->next;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013d2e:	6879      	ldr	r1, [r7, #4]
 8013d30:	2004      	movs	r0, #4
 8013d32:	f001 f94b 	bl	8014fcc <memp_free>
}
 8013d36:	bf00      	nop
 8013d38:	3708      	adds	r7, #8
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	bf00      	nop
 8013d40:	240051ec 	.word	0x240051ec
 8013d44:	0802453c 	.word	0x0802453c
 8013d48:	0802462c 	.word	0x0802462c
 8013d4c:	080245ac 	.word	0x080245ac

08013d50 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b08c      	sub	sp, #48	; 0x30
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013d60:	2301      	movs	r3, #1
 8013d62:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013d6a:	69fb      	ldr	r3, [r7, #28]
 8013d6c:	885b      	ldrh	r3, [r3, #2]
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7fe f8a5 	bl	8011ec0 <lwip_htons>
 8013d76:	4603      	mov	r3, r0
 8013d78:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	781b      	ldrb	r3, [r3, #0]
 8013d7e:	f003 030f 	and.w	r3, r3, #15
 8013d82:	b2db      	uxtb	r3, r3
 8013d84:	009b      	lsls	r3, r3, #2
 8013d86:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013d88:	7e7b      	ldrb	r3, [r7, #25]
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	8b7a      	ldrh	r2, [r7, #26]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d202      	bcs.n	8013d98 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d96:	e135      	b.n	8014004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013d98:	7e7b      	ldrb	r3, [r7, #25]
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	8b7a      	ldrh	r2, [r7, #26]
 8013d9e:	1ad3      	subs	r3, r2, r3
 8013da0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	88db      	ldrh	r3, [r3, #6]
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fe f889 	bl	8011ec0 <lwip_htons>
 8013dae:	4603      	mov	r3, r0
 8013db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013db4:	b29b      	uxth	r3, r3
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	701a      	strb	r2, [r3, #0]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	705a      	strb	r2, [r3, #1]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	709a      	strb	r2, [r3, #2]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dd4:	8afa      	ldrh	r2, [r7, #22]
 8013dd6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013dd8:	8afa      	ldrh	r2, [r7, #22]
 8013dda:	8b7b      	ldrh	r3, [r7, #26]
 8013ddc:	4413      	add	r3, r2
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de6:	88db      	ldrh	r3, [r3, #6]
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	8afa      	ldrh	r2, [r7, #22]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d902      	bls.n	8013df6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013df4:	e106      	b.n	8014004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8013dfc:	e068      	b.n	8013ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e06:	889b      	ldrh	r3, [r3, #4]
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	889b      	ldrh	r3, [r3, #4]
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d235      	bcs.n	8013e80 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e18:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d020      	beq.n	8013e62 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e22:	889b      	ldrh	r3, [r3, #4]
 8013e24:	b29a      	uxth	r2, r3
 8013e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e28:	88db      	ldrh	r3, [r3, #6]
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d307      	bcc.n	8013e40 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e32:	88db      	ldrh	r3, [r3, #6]
 8013e34:	b29a      	uxth	r2, r3
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	889b      	ldrh	r3, [r3, #4]
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d902      	bls.n	8013e46 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e44:	e0de      	b.n	8014004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e48:	68ba      	ldr	r2, [r7, #8]
 8013e4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4e:	88db      	ldrh	r3, [r3, #6]
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e54:	889b      	ldrh	r3, [r3, #4]
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d03d      	beq.n	8013ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013e60:	e03a      	b.n	8013ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e64:	88db      	ldrh	r3, [r3, #6]
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	889b      	ldrh	r3, [r3, #4]
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d902      	bls.n	8013e78 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e76:	e0c5      	b.n	8014004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	68ba      	ldr	r2, [r7, #8]
 8013e7c:	605a      	str	r2, [r3, #4]
      break;
 8013e7e:	e02b      	b.n	8013ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e82:	889b      	ldrh	r3, [r3, #4]
 8013e84:	b29a      	uxth	r2, r3
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	889b      	ldrh	r3, [r3, #4]
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d102      	bne.n	8013e96 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e94:	e0b6      	b.n	8014004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e98:	889b      	ldrh	r3, [r3, #4]
 8013e9a:	b29a      	uxth	r2, r3
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	88db      	ldrh	r3, [r3, #6]
 8013ea0:	b29b      	uxth	r3, r3
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d202      	bcs.n	8013eac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013eaa:	e0ab      	b.n	8014004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d009      	beq.n	8013ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb4:	88db      	ldrh	r3, [r3, #6]
 8013eb6:	b29a      	uxth	r2, r3
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	889b      	ldrh	r3, [r3, #4]
 8013ebc:	b29b      	uxth	r3, r3
 8013ebe:	429a      	cmp	r2, r3
 8013ec0:	d001      	beq.n	8013ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d193      	bne.n	8013dfe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013ed6:	e000      	b.n	8013eda <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013ed8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d12d      	bne.n	8013f3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d01c      	beq.n	8013f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee8:	88db      	ldrh	r3, [r3, #6]
 8013eea:	b29a      	uxth	r2, r3
 8013eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eee:	889b      	ldrh	r3, [r3, #4]
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d906      	bls.n	8013f04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013ef6:	4b45      	ldr	r3, [pc, #276]	; (801400c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013ef8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013efc:	4944      	ldr	r1, [pc, #272]	; (8014010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013efe:	4845      	ldr	r0, [pc, #276]	; (8014014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013f00:	f00b f890 	bl	801f024 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f06:	68ba      	ldr	r2, [r7, #8]
 8013f08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0c:	88db      	ldrh	r3, [r3, #6]
 8013f0e:	b29a      	uxth	r2, r3
 8013f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f12:	889b      	ldrh	r3, [r3, #4]
 8013f14:	b29b      	uxth	r3, r3
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d010      	beq.n	8013f3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	623b      	str	r3, [r7, #32]
 8013f1e:	e00d      	b.n	8013f3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d006      	beq.n	8013f36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013f28:	4b38      	ldr	r3, [pc, #224]	; (801400c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013f2a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013f2e:	493a      	ldr	r1, [pc, #232]	; (8014018 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013f30:	4838      	ldr	r0, [pc, #224]	; (8014014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013f32:	f00b f877 	bl	801f024 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	68ba      	ldr	r2, [r7, #8]
 8013f3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d105      	bne.n	8013f4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	7f9b      	ldrb	r3, [r3, #30]
 8013f46:	f003 0301 	and.w	r3, r3, #1
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d059      	beq.n	8014002 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013f4e:	6a3b      	ldr	r3, [r7, #32]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d04f      	beq.n	8013ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	685b      	ldr	r3, [r3, #4]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d006      	beq.n	8013f6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	685b      	ldr	r3, [r3, #4]
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	889b      	ldrh	r3, [r3, #4]
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d002      	beq.n	8013f70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	623b      	str	r3, [r7, #32]
 8013f6e:	e041      	b.n	8013ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f72:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013f7a:	e012      	b.n	8013fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7e:	685b      	ldr	r3, [r3, #4]
 8013f80:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f84:	88db      	ldrh	r3, [r3, #6]
 8013f86:	b29a      	uxth	r2, r3
 8013f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8a:	889b      	ldrh	r3, [r3, #4]
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d002      	beq.n	8013f98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013f92:	2300      	movs	r3, #0
 8013f94:	623b      	str	r3, [r7, #32]
            break;
 8013f96:	e007      	b.n	8013fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d1e9      	bne.n	8013f7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013fa8:	6a3b      	ldr	r3, [r7, #32]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d022      	beq.n	8013ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d106      	bne.n	8013fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013fb6:	4b15      	ldr	r3, [pc, #84]	; (801400c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013fb8:	f240 12df 	movw	r2, #479	; 0x1df
 8013fbc:	4917      	ldr	r1, [pc, #92]	; (801401c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013fbe:	4815      	ldr	r0, [pc, #84]	; (8014014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013fc0:	f00b f830 	bl	801f024 <iprintf>
          LWIP_ASSERT("sanity check",
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	685b      	ldr	r3, [r3, #4]
 8013fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d106      	bne.n	8013fde <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013fd0:	4b0e      	ldr	r3, [pc, #56]	; (801400c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013fd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013fd6:	4911      	ldr	r1, [pc, #68]	; (801401c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013fd8:	480e      	ldr	r0, [pc, #56]	; (8014014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013fda:	f00b f823 	bl	801f024 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d006      	beq.n	8013ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013fe6:	4b09      	ldr	r3, [pc, #36]	; (801400c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013fe8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013fec:	490c      	ldr	r1, [pc, #48]	; (8014020 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013fee:	4809      	ldr	r0, [pc, #36]	; (8014014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ff0:	f00b f818 	bl	801f024 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013ff4:	6a3b      	ldr	r3, [r7, #32]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	bf14      	ite	ne
 8013ffa:	2301      	movne	r3, #1
 8013ffc:	2300      	moveq	r3, #0
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	e000      	b.n	8014004 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014002:	2300      	movs	r3, #0
}
 8014004:	4618      	mov	r0, r3
 8014006:	3730      	adds	r7, #48	; 0x30
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}
 801400c:	0802453c 	.word	0x0802453c
 8014010:	08024648 	.word	0x08024648
 8014014:	080245ac 	.word	0x080245ac
 8014018:	08024668 	.word	0x08024668
 801401c:	080246a0 	.word	0x080246a0
 8014020:	080246b0 	.word	0x080246b0

08014024 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b08e      	sub	sp, #56	; 0x38
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	f003 030f 	and.w	r3, r3, #15
 801403a:	b2db      	uxtb	r3, r3
 801403c:	009b      	lsls	r3, r3, #2
 801403e:	b2db      	uxtb	r3, r3
 8014040:	2b14      	cmp	r3, #20
 8014042:	f040 8167 	bne.w	8014314 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014048:	88db      	ldrh	r3, [r3, #6]
 801404a:	b29b      	uxth	r3, r3
 801404c:	4618      	mov	r0, r3
 801404e:	f7fd ff37 	bl	8011ec0 <lwip_htons>
 8014052:	4603      	mov	r3, r0
 8014054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014058:	b29b      	uxth	r3, r3
 801405a:	00db      	lsls	r3, r3, #3
 801405c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014060:	885b      	ldrh	r3, [r3, #2]
 8014062:	b29b      	uxth	r3, r3
 8014064:	4618      	mov	r0, r3
 8014066:	f7fd ff2b 	bl	8011ec0 <lwip_htons>
 801406a:	4603      	mov	r3, r0
 801406c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	f003 030f 	and.w	r3, r3, #15
 8014076:	b2db      	uxtb	r3, r3
 8014078:	009b      	lsls	r3, r3, #2
 801407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801407e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014082:	b29b      	uxth	r3, r3
 8014084:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014086:	429a      	cmp	r2, r3
 8014088:	f0c0 8146 	bcc.w	8014318 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801408c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014090:	b29b      	uxth	r3, r3
 8014092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014094:	1ad3      	subs	r3, r2, r3
 8014096:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f001 fe95 	bl	8015dc8 <pbuf_clen>
 801409e:	4603      	mov	r3, r0
 80140a0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80140a2:	4b9f      	ldr	r3, [pc, #636]	; (8014320 <ip4_reass+0x2fc>)
 80140a4:	881b      	ldrh	r3, [r3, #0]
 80140a6:	461a      	mov	r2, r3
 80140a8:	8c3b      	ldrh	r3, [r7, #32]
 80140aa:	4413      	add	r3, r2
 80140ac:	2b0a      	cmp	r3, #10
 80140ae:	dd10      	ble.n	80140d2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80140b0:	8c3b      	ldrh	r3, [r7, #32]
 80140b2:	4619      	mov	r1, r3
 80140b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140b6:	f7ff fd81 	bl	8013bbc <ip_reass_remove_oldest_datagram>
 80140ba:	4603      	mov	r3, r0
 80140bc:	2b00      	cmp	r3, #0
 80140be:	f000 812d 	beq.w	801431c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80140c2:	4b97      	ldr	r3, [pc, #604]	; (8014320 <ip4_reass+0x2fc>)
 80140c4:	881b      	ldrh	r3, [r3, #0]
 80140c6:	461a      	mov	r2, r3
 80140c8:	8c3b      	ldrh	r3, [r7, #32]
 80140ca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80140cc:	2b0a      	cmp	r3, #10
 80140ce:	f300 8125 	bgt.w	801431c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80140d2:	4b94      	ldr	r3, [pc, #592]	; (8014324 <ip4_reass+0x300>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	633b      	str	r3, [r7, #48]	; 0x30
 80140d8:	e015      	b.n	8014106 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80140da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140dc:	695a      	ldr	r2, [r3, #20]
 80140de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e0:	68db      	ldr	r3, [r3, #12]
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d10c      	bne.n	8014100 <ip4_reass+0xdc>
 80140e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140e8:	699a      	ldr	r2, [r3, #24]
 80140ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ec:	691b      	ldr	r3, [r3, #16]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	d106      	bne.n	8014100 <ip4_reass+0xdc>
 80140f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f4:	899a      	ldrh	r2, [r3, #12]
 80140f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f8:	889b      	ldrh	r3, [r3, #4]
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d006      	beq.n	801410e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	633b      	str	r3, [r7, #48]	; 0x30
 8014106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014108:	2b00      	cmp	r3, #0
 801410a:	d1e6      	bne.n	80140da <ip4_reass+0xb6>
 801410c:	e000      	b.n	8014110 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801410e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014112:	2b00      	cmp	r3, #0
 8014114:	d109      	bne.n	801412a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014116:	8c3b      	ldrh	r3, [r7, #32]
 8014118:	4619      	mov	r1, r3
 801411a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801411c:	f7ff fdb0 	bl	8013c80 <ip_reass_enqueue_new_datagram>
 8014120:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014124:	2b00      	cmp	r3, #0
 8014126:	d11c      	bne.n	8014162 <ip4_reass+0x13e>
      goto nullreturn;
 8014128:	e109      	b.n	801433e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412c:	88db      	ldrh	r3, [r3, #6]
 801412e:	b29b      	uxth	r3, r3
 8014130:	4618      	mov	r0, r3
 8014132:	f7fd fec5 	bl	8011ec0 <lwip_htons>
 8014136:	4603      	mov	r3, r0
 8014138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801413c:	2b00      	cmp	r3, #0
 801413e:	d110      	bne.n	8014162 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014142:	89db      	ldrh	r3, [r3, #14]
 8014144:	4618      	mov	r0, r3
 8014146:	f7fd febb 	bl	8011ec0 <lwip_htons>
 801414a:	4603      	mov	r3, r0
 801414c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014150:	2b00      	cmp	r3, #0
 8014152:	d006      	beq.n	8014162 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014156:	3308      	adds	r3, #8
 8014158:	2214      	movs	r2, #20
 801415a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801415c:	4618      	mov	r0, r3
 801415e:	f00a f841 	bl	801e1e4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014164:	88db      	ldrh	r3, [r3, #6]
 8014166:	b29b      	uxth	r3, r3
 8014168:	f003 0320 	and.w	r3, r3, #32
 801416c:	2b00      	cmp	r3, #0
 801416e:	bf0c      	ite	eq
 8014170:	2301      	moveq	r3, #1
 8014172:	2300      	movne	r3, #0
 8014174:	b2db      	uxtb	r3, r3
 8014176:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014178:	69fb      	ldr	r3, [r7, #28]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d00e      	beq.n	801419c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801417e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014182:	4413      	add	r3, r2
 8014184:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014186:	8b7a      	ldrh	r2, [r7, #26]
 8014188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801418a:	429a      	cmp	r2, r3
 801418c:	f0c0 80a0 	bcc.w	80142d0 <ip4_reass+0x2ac>
 8014190:	8b7b      	ldrh	r3, [r7, #26]
 8014192:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014196:	4293      	cmp	r3, r2
 8014198:	f200 809a 	bhi.w	80142d0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801419c:	69fa      	ldr	r2, [r7, #28]
 801419e:	6879      	ldr	r1, [r7, #4]
 80141a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141a2:	f7ff fdd5 	bl	8013d50 <ip_reass_chain_frag_into_datagram_and_validate>
 80141a6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141ae:	f000 8091 	beq.w	80142d4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80141b2:	4b5b      	ldr	r3, [pc, #364]	; (8014320 <ip4_reass+0x2fc>)
 80141b4:	881a      	ldrh	r2, [r3, #0]
 80141b6:	8c3b      	ldrh	r3, [r7, #32]
 80141b8:	4413      	add	r3, r2
 80141ba:	b29a      	uxth	r2, r3
 80141bc:	4b58      	ldr	r3, [pc, #352]	; (8014320 <ip4_reass+0x2fc>)
 80141be:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80141c0:	69fb      	ldr	r3, [r7, #28]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d00d      	beq.n	80141e2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80141c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80141c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141ca:	4413      	add	r3, r2
 80141cc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80141ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d0:	8a7a      	ldrh	r2, [r7, #18]
 80141d2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80141d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d6:	7f9b      	ldrb	r3, [r3, #30]
 80141d8:	f043 0301 	orr.w	r3, r3, #1
 80141dc:	b2da      	uxtb	r2, r3
 80141de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d171      	bne.n	80142cc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80141e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ea:	8b9b      	ldrh	r3, [r3, #28]
 80141ec:	3314      	adds	r3, #20
 80141ee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80141f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80141fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	685b      	ldr	r3, [r3, #4]
 8014200:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014204:	3308      	adds	r3, #8
 8014206:	2214      	movs	r2, #20
 8014208:	4619      	mov	r1, r3
 801420a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801420c:	f009 ffea 	bl	801e1e4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014210:	8a3b      	ldrh	r3, [r7, #16]
 8014212:	4618      	mov	r0, r3
 8014214:	f7fd fe54 	bl	8011ec0 <lwip_htons>
 8014218:	4603      	mov	r3, r0
 801421a:	461a      	mov	r2, r3
 801421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014222:	2200      	movs	r2, #0
 8014224:	719a      	strb	r2, [r3, #6]
 8014226:	2200      	movs	r2, #0
 8014228:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801422c:	2200      	movs	r2, #0
 801422e:	729a      	strb	r2, [r3, #10]
 8014230:	2200      	movs	r2, #0
 8014232:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014236:	685b      	ldr	r3, [r3, #4]
 8014238:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801423a:	e00d      	b.n	8014258 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801423e:	685b      	ldr	r3, [r3, #4]
 8014240:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014242:	2114      	movs	r1, #20
 8014244:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014246:	f001 fcb1 	bl	8015bac <pbuf_remove_header>
      pbuf_cat(p, r);
 801424a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f001 fdf5 	bl	8015e3c <pbuf_cat>
      r = iprh->next_pbuf;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801425a:	2b00      	cmp	r3, #0
 801425c:	d1ee      	bne.n	801423c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801425e:	4b31      	ldr	r3, [pc, #196]	; (8014324 <ip4_reass+0x300>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014264:	429a      	cmp	r2, r3
 8014266:	d102      	bne.n	801426e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014268:	2300      	movs	r3, #0
 801426a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801426c:	e010      	b.n	8014290 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801426e:	4b2d      	ldr	r3, [pc, #180]	; (8014324 <ip4_reass+0x300>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014274:	e007      	b.n	8014286 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801427c:	429a      	cmp	r2, r3
 801427e:	d006      	beq.n	801428e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014288:	2b00      	cmp	r3, #0
 801428a:	d1f4      	bne.n	8014276 <ip4_reass+0x252>
 801428c:	e000      	b.n	8014290 <ip4_reass+0x26c>
          break;
 801428e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014294:	f7ff fd2e 	bl	8013cf4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f001 fd95 	bl	8015dc8 <pbuf_clen>
 801429e:	4603      	mov	r3, r0
 80142a0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80142a2:	4b1f      	ldr	r3, [pc, #124]	; (8014320 <ip4_reass+0x2fc>)
 80142a4:	881b      	ldrh	r3, [r3, #0]
 80142a6:	8c3a      	ldrh	r2, [r7, #32]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d906      	bls.n	80142ba <ip4_reass+0x296>
 80142ac:	4b1e      	ldr	r3, [pc, #120]	; (8014328 <ip4_reass+0x304>)
 80142ae:	f240 229b 	movw	r2, #667	; 0x29b
 80142b2:	491e      	ldr	r1, [pc, #120]	; (801432c <ip4_reass+0x308>)
 80142b4:	481e      	ldr	r0, [pc, #120]	; (8014330 <ip4_reass+0x30c>)
 80142b6:	f00a feb5 	bl	801f024 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80142ba:	4b19      	ldr	r3, [pc, #100]	; (8014320 <ip4_reass+0x2fc>)
 80142bc:	881a      	ldrh	r2, [r3, #0]
 80142be:	8c3b      	ldrh	r3, [r7, #32]
 80142c0:	1ad3      	subs	r3, r2, r3
 80142c2:	b29a      	uxth	r2, r3
 80142c4:	4b16      	ldr	r3, [pc, #88]	; (8014320 <ip4_reass+0x2fc>)
 80142c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	e03c      	b.n	8014346 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80142cc:	2300      	movs	r3, #0
 80142ce:	e03a      	b.n	8014346 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80142d0:	bf00      	nop
 80142d2:	e000      	b.n	80142d6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80142d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80142d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d106      	bne.n	80142ea <ip4_reass+0x2c6>
 80142dc:	4b12      	ldr	r3, [pc, #72]	; (8014328 <ip4_reass+0x304>)
 80142de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80142e2:	4914      	ldr	r1, [pc, #80]	; (8014334 <ip4_reass+0x310>)
 80142e4:	4812      	ldr	r0, [pc, #72]	; (8014330 <ip4_reass+0x30c>)
 80142e6:	f00a fe9d 	bl	801f024 <iprintf>
  if (ipr->p == NULL) {
 80142ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ec:	685b      	ldr	r3, [r3, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d124      	bne.n	801433c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80142f2:	4b0c      	ldr	r3, [pc, #48]	; (8014324 <ip4_reass+0x300>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d006      	beq.n	801430a <ip4_reass+0x2e6>
 80142fc:	4b0a      	ldr	r3, [pc, #40]	; (8014328 <ip4_reass+0x304>)
 80142fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014302:	490d      	ldr	r1, [pc, #52]	; (8014338 <ip4_reass+0x314>)
 8014304:	480a      	ldr	r0, [pc, #40]	; (8014330 <ip4_reass+0x30c>)
 8014306:	f00a fe8d 	bl	801f024 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801430a:	2100      	movs	r1, #0
 801430c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801430e:	f7ff fcf1 	bl	8013cf4 <ip_reass_dequeue_datagram>
 8014312:	e014      	b.n	801433e <ip4_reass+0x31a>
    goto nullreturn;
 8014314:	bf00      	nop
 8014316:	e012      	b.n	801433e <ip4_reass+0x31a>
    goto nullreturn;
 8014318:	bf00      	nop
 801431a:	e010      	b.n	801433e <ip4_reass+0x31a>
      goto nullreturn;
 801431c:	bf00      	nop
 801431e:	e00e      	b.n	801433e <ip4_reass+0x31a>
 8014320:	240051f0 	.word	0x240051f0
 8014324:	240051ec 	.word	0x240051ec
 8014328:	0802453c 	.word	0x0802453c
 801432c:	080246d4 	.word	0x080246d4
 8014330:	080245ac 	.word	0x080245ac
 8014334:	080246f0 	.word	0x080246f0
 8014338:	080246fc 	.word	0x080246fc
  }

nullreturn:
 801433c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f001 fcba 	bl	8015cb8 <pbuf_free>
  return NULL;
 8014344:	2300      	movs	r3, #0
}
 8014346:	4618      	mov	r0, r3
 8014348:	3738      	adds	r7, #56	; 0x38
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop

08014350 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014354:	2005      	movs	r0, #5
 8014356:	f000 fdc9 	bl	8014eec <memp_malloc>
 801435a:	4603      	mov	r3, r0
}
 801435c:	4618      	mov	r0, r3
 801435e:	bd80      	pop	{r7, pc}

08014360 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d106      	bne.n	801437c <ip_frag_free_pbuf_custom_ref+0x1c>
 801436e:	4b07      	ldr	r3, [pc, #28]	; (801438c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014370:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014374:	4906      	ldr	r1, [pc, #24]	; (8014390 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014376:	4807      	ldr	r0, [pc, #28]	; (8014394 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014378:	f00a fe54 	bl	801f024 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801437c:	6879      	ldr	r1, [r7, #4]
 801437e:	2005      	movs	r0, #5
 8014380:	f000 fe24 	bl	8014fcc <memp_free>
}
 8014384:	bf00      	nop
 8014386:	3708      	adds	r7, #8
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	0802453c 	.word	0x0802453c
 8014390:	0802471c 	.word	0x0802471c
 8014394:	080245ac 	.word	0x080245ac

08014398 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d106      	bne.n	80143b8 <ipfrag_free_pbuf_custom+0x20>
 80143aa:	4b11      	ldr	r3, [pc, #68]	; (80143f0 <ipfrag_free_pbuf_custom+0x58>)
 80143ac:	f240 22ce 	movw	r2, #718	; 0x2ce
 80143b0:	4910      	ldr	r1, [pc, #64]	; (80143f4 <ipfrag_free_pbuf_custom+0x5c>)
 80143b2:	4811      	ldr	r0, [pc, #68]	; (80143f8 <ipfrag_free_pbuf_custom+0x60>)
 80143b4:	f00a fe36 	bl	801f024 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80143b8:	68fa      	ldr	r2, [r7, #12]
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d006      	beq.n	80143ce <ipfrag_free_pbuf_custom+0x36>
 80143c0:	4b0b      	ldr	r3, [pc, #44]	; (80143f0 <ipfrag_free_pbuf_custom+0x58>)
 80143c2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80143c6:	490d      	ldr	r1, [pc, #52]	; (80143fc <ipfrag_free_pbuf_custom+0x64>)
 80143c8:	480b      	ldr	r0, [pc, #44]	; (80143f8 <ipfrag_free_pbuf_custom+0x60>)
 80143ca:	f00a fe2b 	bl	801f024 <iprintf>
  if (pcr->original != NULL) {
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	695b      	ldr	r3, [r3, #20]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d004      	beq.n	80143e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	695b      	ldr	r3, [r3, #20]
 80143da:	4618      	mov	r0, r3
 80143dc:	f001 fc6c 	bl	8015cb8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80143e0:	68f8      	ldr	r0, [r7, #12]
 80143e2:	f7ff ffbd 	bl	8014360 <ip_frag_free_pbuf_custom_ref>
}
 80143e6:	bf00      	nop
 80143e8:	3710      	adds	r7, #16
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	0802453c 	.word	0x0802453c
 80143f4:	08024728 	.word	0x08024728
 80143f8:	080245ac 	.word	0x080245ac
 80143fc:	08024734 	.word	0x08024734

08014400 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b094      	sub	sp, #80	; 0x50
 8014404:	af02      	add	r7, sp, #8
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801440c:	2300      	movs	r3, #0
 801440e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014416:	3b14      	subs	r3, #20
 8014418:	2b00      	cmp	r3, #0
 801441a:	da00      	bge.n	801441e <ip4_frag+0x1e>
 801441c:	3307      	adds	r3, #7
 801441e:	10db      	asrs	r3, r3, #3
 8014420:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014422:	2314      	movs	r3, #20
 8014424:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	685b      	ldr	r3, [r3, #4]
 801442a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801442e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	f003 030f 	and.w	r3, r3, #15
 8014438:	b2db      	uxtb	r3, r3
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	b2db      	uxtb	r3, r3
 801443e:	2b14      	cmp	r3, #20
 8014440:	d002      	beq.n	8014448 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014442:	f06f 0305 	mvn.w	r3, #5
 8014446:	e110      	b.n	801466a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	895b      	ldrh	r3, [r3, #10]
 801444c:	2b13      	cmp	r3, #19
 801444e:	d809      	bhi.n	8014464 <ip4_frag+0x64>
 8014450:	4b88      	ldr	r3, [pc, #544]	; (8014674 <ip4_frag+0x274>)
 8014452:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014456:	4988      	ldr	r1, [pc, #544]	; (8014678 <ip4_frag+0x278>)
 8014458:	4888      	ldr	r0, [pc, #544]	; (801467c <ip4_frag+0x27c>)
 801445a:	f00a fde3 	bl	801f024 <iprintf>
 801445e:	f06f 0305 	mvn.w	r3, #5
 8014462:	e102      	b.n	801466a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014466:	88db      	ldrh	r3, [r3, #6]
 8014468:	b29b      	uxth	r3, r3
 801446a:	4618      	mov	r0, r3
 801446c:	f7fd fd28 	bl	8011ec0 <lwip_htons>
 8014470:	4603      	mov	r3, r0
 8014472:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014474:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014476:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801447a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801447e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014484:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	891b      	ldrh	r3, [r3, #8]
 801448a:	3b14      	subs	r3, #20
 801448c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014490:	e0e1      	b.n	8014656 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014492:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014494:	00db      	lsls	r3, r3, #3
 8014496:	b29b      	uxth	r3, r3
 8014498:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801449c:	4293      	cmp	r3, r2
 801449e:	bf28      	it	cs
 80144a0:	4613      	movcs	r3, r2
 80144a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80144a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144a8:	2114      	movs	r1, #20
 80144aa:	200e      	movs	r0, #14
 80144ac:	f001 f920 	bl	80156f0 <pbuf_alloc>
 80144b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80144b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	f000 80d5 	beq.w	8014664 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80144ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144bc:	895b      	ldrh	r3, [r3, #10]
 80144be:	2b13      	cmp	r3, #19
 80144c0:	d806      	bhi.n	80144d0 <ip4_frag+0xd0>
 80144c2:	4b6c      	ldr	r3, [pc, #432]	; (8014674 <ip4_frag+0x274>)
 80144c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80144c8:	496d      	ldr	r1, [pc, #436]	; (8014680 <ip4_frag+0x280>)
 80144ca:	486c      	ldr	r0, [pc, #432]	; (801467c <ip4_frag+0x27c>)
 80144cc:	f00a fdaa 	bl	801f024 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80144d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	2214      	movs	r2, #20
 80144d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80144d8:	4618      	mov	r0, r3
 80144da:	f009 fe83 	bl	801e1e4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80144de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80144e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80144e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80144ea:	e064      	b.n	80145b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	895a      	ldrh	r2, [r3, #10]
 80144f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	895b      	ldrh	r3, [r3, #10]
 80144fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d906      	bls.n	801450e <ip4_frag+0x10e>
 8014500:	4b5c      	ldr	r3, [pc, #368]	; (8014674 <ip4_frag+0x274>)
 8014502:	f240 322d 	movw	r2, #813	; 0x32d
 8014506:	495f      	ldr	r1, [pc, #380]	; (8014684 <ip4_frag+0x284>)
 8014508:	485c      	ldr	r0, [pc, #368]	; (801467c <ip4_frag+0x27c>)
 801450a:	f00a fd8b 	bl	801f024 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801450e:	8bfa      	ldrh	r2, [r7, #30]
 8014510:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014514:	4293      	cmp	r3, r2
 8014516:	bf28      	it	cs
 8014518:	4613      	movcs	r3, r2
 801451a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801451e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014522:	2b00      	cmp	r3, #0
 8014524:	d105      	bne.n	8014532 <ip4_frag+0x132>
        poff = 0;
 8014526:	2300      	movs	r3, #0
 8014528:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	60fb      	str	r3, [r7, #12]
        continue;
 8014530:	e041      	b.n	80145b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014532:	f7ff ff0d 	bl	8014350 <ip_frag_alloc_pbuf_custom_ref>
 8014536:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014538:	69bb      	ldr	r3, [r7, #24]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d103      	bne.n	8014546 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801453e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014540:	f001 fbba 	bl	8015cb8 <pbuf_free>
        goto memerr;
 8014544:	e08f      	b.n	8014666 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014546:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801454c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801454e:	4413      	add	r3, r2
 8014550:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014554:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014558:	9201      	str	r2, [sp, #4]
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	4603      	mov	r3, r0
 801455e:	2241      	movs	r2, #65	; 0x41
 8014560:	2000      	movs	r0, #0
 8014562:	f001 f9ef 	bl	8015944 <pbuf_alloced_custom>
 8014566:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d106      	bne.n	801457c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801456e:	69b8      	ldr	r0, [r7, #24]
 8014570:	f7ff fef6 	bl	8014360 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014576:	f001 fb9f 	bl	8015cb8 <pbuf_free>
        goto memerr;
 801457a:	e074      	b.n	8014666 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801457c:	68f8      	ldr	r0, [r7, #12]
 801457e:	f001 fc3b 	bl	8015df8 <pbuf_ref>
      pcr->original = p;
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	68fa      	ldr	r2, [r7, #12]
 8014586:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	4a3f      	ldr	r2, [pc, #252]	; (8014688 <ip4_frag+0x288>)
 801458c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801458e:	6979      	ldr	r1, [r7, #20]
 8014590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014592:	f001 fc53 	bl	8015e3c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014596:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801459a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801459e:	1ad3      	subs	r3, r2, r3
 80145a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80145a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d004      	beq.n	80145b6 <ip4_frag+0x1b6>
        poff = 0;
 80145ac:	2300      	movs	r3, #0
 80145ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80145b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d196      	bne.n	80144ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80145be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80145c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80145c4:	4413      	add	r3, r2
 80145c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80145cc:	f1a3 0213 	sub.w	r2, r3, #19
 80145d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80145d4:	429a      	cmp	r2, r3
 80145d6:	bfcc      	ite	gt
 80145d8:	2301      	movgt	r3, #1
 80145da:	2300      	movle	r3, #0
 80145dc:	b2db      	uxtb	r3, r3
 80145de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80145e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80145e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80145ea:	6a3b      	ldr	r3, [r7, #32]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d002      	beq.n	80145f6 <ip4_frag+0x1f6>
 80145f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d003      	beq.n	80145fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80145f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80145fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80145fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014600:	4618      	mov	r0, r3
 8014602:	f7fd fc5d 	bl	8011ec0 <lwip_htons>
 8014606:	4603      	mov	r3, r0
 8014608:	461a      	mov	r2, r3
 801460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801460c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801460e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014610:	3314      	adds	r3, #20
 8014612:	b29b      	uxth	r3, r3
 8014614:	4618      	mov	r0, r3
 8014616:	f7fd fc53 	bl	8011ec0 <lwip_htons>
 801461a:	4603      	mov	r3, r0
 801461c:	461a      	mov	r2, r3
 801461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014620:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014624:	2200      	movs	r2, #0
 8014626:	729a      	strb	r2, [r3, #10]
 8014628:	2200      	movs	r2, #0
 801462a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	695b      	ldr	r3, [r3, #20]
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014634:	68b8      	ldr	r0, [r7, #8]
 8014636:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801463a:	f001 fb3d 	bl	8015cb8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801463e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014644:	1ad3      	subs	r3, r2, r3
 8014646:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801464a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801464e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014650:	4413      	add	r3, r2
 8014652:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014656:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801465a:	2b00      	cmp	r3, #0
 801465c:	f47f af19 	bne.w	8014492 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014660:	2300      	movs	r3, #0
 8014662:	e002      	b.n	801466a <ip4_frag+0x26a>
      goto memerr;
 8014664:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801466a:	4618      	mov	r0, r3
 801466c:	3748      	adds	r7, #72	; 0x48
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}
 8014672:	bf00      	nop
 8014674:	0802453c 	.word	0x0802453c
 8014678:	08024740 	.word	0x08024740
 801467c:	080245ac 	.word	0x080245ac
 8014680:	0802475c 	.word	0x0802475c
 8014684:	0802477c 	.word	0x0802477c
 8014688:	08014399 	.word	0x08014399

0801468c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801468c:	b480      	push	{r7}
 801468e:	b083      	sub	sp, #12
 8014690:	af00      	add	r7, sp, #0
 8014692:	4603      	mov	r3, r0
 8014694:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8014696:	4b05      	ldr	r3, [pc, #20]	; (80146ac <ptr_to_mem+0x20>)
 8014698:	681a      	ldr	r2, [r3, #0]
 801469a:	88fb      	ldrh	r3, [r7, #6]
 801469c:	4413      	add	r3, r2
}
 801469e:	4618      	mov	r0, r3
 80146a0:	370c      	adds	r7, #12
 80146a2:	46bd      	mov	sp, r7
 80146a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a8:	4770      	bx	lr
 80146aa:	bf00      	nop
 80146ac:	240051f4 	.word	0x240051f4

080146b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80146b8:	4b05      	ldr	r3, [pc, #20]	; (80146d0 <mem_to_ptr+0x20>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	b29b      	uxth	r3, r3
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	370c      	adds	r7, #12
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr
 80146ce:	bf00      	nop
 80146d0:	240051f4 	.word	0x240051f4

080146d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80146d4:	b590      	push	{r4, r7, lr}
 80146d6:	b085      	sub	sp, #20
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80146dc:	4b45      	ldr	r3, [pc, #276]	; (80147f4 <plug_holes+0x120>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d206      	bcs.n	80146f4 <plug_holes+0x20>
 80146e6:	4b44      	ldr	r3, [pc, #272]	; (80147f8 <plug_holes+0x124>)
 80146e8:	f240 12df 	movw	r2, #479	; 0x1df
 80146ec:	4943      	ldr	r1, [pc, #268]	; (80147fc <plug_holes+0x128>)
 80146ee:	4844      	ldr	r0, [pc, #272]	; (8014800 <plug_holes+0x12c>)
 80146f0:	f00a fc98 	bl	801f024 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80146f4:	4b43      	ldr	r3, [pc, #268]	; (8014804 <plug_holes+0x130>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	429a      	cmp	r2, r3
 80146fc:	d306      	bcc.n	801470c <plug_holes+0x38>
 80146fe:	4b3e      	ldr	r3, [pc, #248]	; (80147f8 <plug_holes+0x124>)
 8014700:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014704:	4940      	ldr	r1, [pc, #256]	; (8014808 <plug_holes+0x134>)
 8014706:	483e      	ldr	r0, [pc, #248]	; (8014800 <plug_holes+0x12c>)
 8014708:	f00a fc8c 	bl	801f024 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	791b      	ldrb	r3, [r3, #4]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d006      	beq.n	8014722 <plug_holes+0x4e>
 8014714:	4b38      	ldr	r3, [pc, #224]	; (80147f8 <plug_holes+0x124>)
 8014716:	f240 12e1 	movw	r2, #481	; 0x1e1
 801471a:	493c      	ldr	r1, [pc, #240]	; (801480c <plug_holes+0x138>)
 801471c:	4838      	ldr	r0, [pc, #224]	; (8014800 <plug_holes+0x12c>)
 801471e:	f00a fc81 	bl	801f024 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	881b      	ldrh	r3, [r3, #0]
 8014726:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801472a:	d906      	bls.n	801473a <plug_holes+0x66>
 801472c:	4b32      	ldr	r3, [pc, #200]	; (80147f8 <plug_holes+0x124>)
 801472e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8014732:	4937      	ldr	r1, [pc, #220]	; (8014810 <plug_holes+0x13c>)
 8014734:	4832      	ldr	r0, [pc, #200]	; (8014800 <plug_holes+0x12c>)
 8014736:	f00a fc75 	bl	801f024 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	881b      	ldrh	r3, [r3, #0]
 801473e:	4618      	mov	r0, r3
 8014740:	f7ff ffa4 	bl	801468c <ptr_to_mem>
 8014744:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	429a      	cmp	r2, r3
 801474c:	d024      	beq.n	8014798 <plug_holes+0xc4>
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	791b      	ldrb	r3, [r3, #4]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d120      	bne.n	8014798 <plug_holes+0xc4>
 8014756:	4b2b      	ldr	r3, [pc, #172]	; (8014804 <plug_holes+0x130>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	429a      	cmp	r2, r3
 801475e:	d01b      	beq.n	8014798 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8014760:	4b2c      	ldr	r3, [pc, #176]	; (8014814 <plug_holes+0x140>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	68fa      	ldr	r2, [r7, #12]
 8014766:	429a      	cmp	r2, r3
 8014768:	d102      	bne.n	8014770 <plug_holes+0x9c>
      lfree = mem;
 801476a:	4a2a      	ldr	r2, [pc, #168]	; (8014814 <plug_holes+0x140>)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	881a      	ldrh	r2, [r3, #0]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	881b      	ldrh	r3, [r3, #0]
 801477c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014780:	d00a      	beq.n	8014798 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	881b      	ldrh	r3, [r3, #0]
 8014786:	4618      	mov	r0, r3
 8014788:	f7ff ff80 	bl	801468c <ptr_to_mem>
 801478c:	4604      	mov	r4, r0
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f7ff ff8e 	bl	80146b0 <mem_to_ptr>
 8014794:	4603      	mov	r3, r0
 8014796:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	885b      	ldrh	r3, [r3, #2]
 801479c:	4618      	mov	r0, r3
 801479e:	f7ff ff75 	bl	801468c <ptr_to_mem>
 80147a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80147a4:	68ba      	ldr	r2, [r7, #8]
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d01f      	beq.n	80147ec <plug_holes+0x118>
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	791b      	ldrb	r3, [r3, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d11b      	bne.n	80147ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80147b4:	4b17      	ldr	r3, [pc, #92]	; (8014814 <plug_holes+0x140>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	687a      	ldr	r2, [r7, #4]
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d102      	bne.n	80147c4 <plug_holes+0xf0>
      lfree = pmem;
 80147be:	4a15      	ldr	r2, [pc, #84]	; (8014814 <plug_holes+0x140>)
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	881a      	ldrh	r2, [r3, #0]
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	881b      	ldrh	r3, [r3, #0]
 80147d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80147d4:	d00a      	beq.n	80147ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	881b      	ldrh	r3, [r3, #0]
 80147da:	4618      	mov	r0, r3
 80147dc:	f7ff ff56 	bl	801468c <ptr_to_mem>
 80147e0:	4604      	mov	r4, r0
 80147e2:	68b8      	ldr	r0, [r7, #8]
 80147e4:	f7ff ff64 	bl	80146b0 <mem_to_ptr>
 80147e8:	4603      	mov	r3, r0
 80147ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80147ec:	bf00      	nop
 80147ee:	3714      	adds	r7, #20
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd90      	pop	{r4, r7, pc}
 80147f4:	240051f4 	.word	0x240051f4
 80147f8:	0802478c 	.word	0x0802478c
 80147fc:	080247e8 	.word	0x080247e8
 8014800:	08024800 	.word	0x08024800
 8014804:	240051f8 	.word	0x240051f8
 8014808:	08024828 	.word	0x08024828
 801480c:	08024844 	.word	0x08024844
 8014810:	08024860 	.word	0x08024860
 8014814:	240051fc 	.word	0x240051fc

08014818 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801481e:	4b16      	ldr	r3, [pc, #88]	; (8014878 <mem_init+0x60>)
 8014820:	4a16      	ldr	r2, [pc, #88]	; (801487c <mem_init+0x64>)
 8014822:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014824:	4b14      	ldr	r3, [pc, #80]	; (8014878 <mem_init+0x60>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014830:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2200      	movs	r2, #0
 8014836:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2200      	movs	r2, #0
 801483c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801483e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8014842:	f7ff ff23 	bl	801468c <ptr_to_mem>
 8014846:	4603      	mov	r3, r0
 8014848:	4a0d      	ldr	r2, [pc, #52]	; (8014880 <mem_init+0x68>)
 801484a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801484c:	4b0c      	ldr	r3, [pc, #48]	; (8014880 <mem_init+0x68>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2201      	movs	r2, #1
 8014852:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014854:	4b0a      	ldr	r3, [pc, #40]	; (8014880 <mem_init+0x68>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801485c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801485e:	4b08      	ldr	r3, [pc, #32]	; (8014880 <mem_init+0x68>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8014866:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014868:	4b03      	ldr	r3, [pc, #12]	; (8014878 <mem_init+0x60>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	4a05      	ldr	r2, [pc, #20]	; (8014884 <mem_init+0x6c>)
 801486e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8014870:	bf00      	nop
 8014872:	3708      	adds	r7, #8
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	240051f4 	.word	0x240051f4
 801487c:	30044000 	.word	0x30044000
 8014880:	240051f8 	.word	0x240051f8
 8014884:	240051fc 	.word	0x240051fc

08014888 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f7ff ff0d 	bl	80146b0 <mem_to_ptr>
 8014896:	4603      	mov	r3, r0
 8014898:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	881b      	ldrh	r3, [r3, #0]
 801489e:	4618      	mov	r0, r3
 80148a0:	f7ff fef4 	bl	801468c <ptr_to_mem>
 80148a4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	885b      	ldrh	r3, [r3, #2]
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7ff feee 	bl	801468c <ptr_to_mem>
 80148b0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	881b      	ldrh	r3, [r3, #0]
 80148b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148ba:	d818      	bhi.n	80148ee <mem_link_valid+0x66>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	885b      	ldrh	r3, [r3, #2]
 80148c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80148c4:	d813      	bhi.n	80148ee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80148ca:	8afa      	ldrh	r2, [r7, #22]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d004      	beq.n	80148da <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	881b      	ldrh	r3, [r3, #0]
 80148d4:	8afa      	ldrh	r2, [r7, #22]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d109      	bne.n	80148ee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80148da:	4b08      	ldr	r3, [pc, #32]	; (80148fc <mem_link_valid+0x74>)
 80148dc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80148de:	693a      	ldr	r2, [r7, #16]
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d006      	beq.n	80148f2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	885b      	ldrh	r3, [r3, #2]
 80148e8:	8afa      	ldrh	r2, [r7, #22]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d001      	beq.n	80148f2 <mem_link_valid+0x6a>
    return 0;
 80148ee:	2300      	movs	r3, #0
 80148f0:	e000      	b.n	80148f4 <mem_link_valid+0x6c>
  }
  return 1;
 80148f2:	2301      	movs	r3, #1
}
 80148f4:	4618      	mov	r0, r3
 80148f6:	3718      	adds	r7, #24
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	240051f8 	.word	0x240051f8

08014900 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d04c      	beq.n	80149a8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f003 0303 	and.w	r3, r3, #3
 8014914:	2b00      	cmp	r3, #0
 8014916:	d007      	beq.n	8014928 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014918:	4b25      	ldr	r3, [pc, #148]	; (80149b0 <mem_free+0xb0>)
 801491a:	f240 2273 	movw	r2, #627	; 0x273
 801491e:	4925      	ldr	r1, [pc, #148]	; (80149b4 <mem_free+0xb4>)
 8014920:	4825      	ldr	r0, [pc, #148]	; (80149b8 <mem_free+0xb8>)
 8014922:	f00a fb7f 	bl	801f024 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8014926:	e040      	b.n	80149aa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	3b08      	subs	r3, #8
 801492c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801492e:	4b23      	ldr	r3, [pc, #140]	; (80149bc <mem_free+0xbc>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	68fa      	ldr	r2, [r7, #12]
 8014934:	429a      	cmp	r2, r3
 8014936:	d306      	bcc.n	8014946 <mem_free+0x46>
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f103 020c 	add.w	r2, r3, #12
 801493e:	4b20      	ldr	r3, [pc, #128]	; (80149c0 <mem_free+0xc0>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	429a      	cmp	r2, r3
 8014944:	d907      	bls.n	8014956 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014946:	4b1a      	ldr	r3, [pc, #104]	; (80149b0 <mem_free+0xb0>)
 8014948:	f240 227f 	movw	r2, #639	; 0x27f
 801494c:	491d      	ldr	r1, [pc, #116]	; (80149c4 <mem_free+0xc4>)
 801494e:	481a      	ldr	r0, [pc, #104]	; (80149b8 <mem_free+0xb8>)
 8014950:	f00a fb68 	bl	801f024 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8014954:	e029      	b.n	80149aa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	791b      	ldrb	r3, [r3, #4]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d107      	bne.n	801496e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801495e:	4b14      	ldr	r3, [pc, #80]	; (80149b0 <mem_free+0xb0>)
 8014960:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8014964:	4918      	ldr	r1, [pc, #96]	; (80149c8 <mem_free+0xc8>)
 8014966:	4814      	ldr	r0, [pc, #80]	; (80149b8 <mem_free+0xb8>)
 8014968:	f00a fb5c 	bl	801f024 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801496c:	e01d      	b.n	80149aa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801496e:	68f8      	ldr	r0, [r7, #12]
 8014970:	f7ff ff8a 	bl	8014888 <mem_link_valid>
 8014974:	4603      	mov	r3, r0
 8014976:	2b00      	cmp	r3, #0
 8014978:	d107      	bne.n	801498a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801497a:	4b0d      	ldr	r3, [pc, #52]	; (80149b0 <mem_free+0xb0>)
 801497c:	f240 2295 	movw	r2, #661	; 0x295
 8014980:	4912      	ldr	r1, [pc, #72]	; (80149cc <mem_free+0xcc>)
 8014982:	480d      	ldr	r0, [pc, #52]	; (80149b8 <mem_free+0xb8>)
 8014984:	f00a fb4e 	bl	801f024 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8014988:	e00f      	b.n	80149aa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	2200      	movs	r2, #0
 801498e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014990:	4b0f      	ldr	r3, [pc, #60]	; (80149d0 <mem_free+0xd0>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	429a      	cmp	r2, r3
 8014998:	d202      	bcs.n	80149a0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801499a:	4a0d      	ldr	r2, [pc, #52]	; (80149d0 <mem_free+0xd0>)
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f7ff fe97 	bl	80146d4 <plug_holes>
 80149a6:	e000      	b.n	80149aa <mem_free+0xaa>
    return;
 80149a8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80149aa:	3710      	adds	r7, #16
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	0802478c 	.word	0x0802478c
 80149b4:	0802488c 	.word	0x0802488c
 80149b8:	08024800 	.word	0x08024800
 80149bc:	240051f4 	.word	0x240051f4
 80149c0:	240051f8 	.word	0x240051f8
 80149c4:	080248b0 	.word	0x080248b0
 80149c8:	080248cc 	.word	0x080248cc
 80149cc:	080248f4 	.word	0x080248f4
 80149d0:	240051fc 	.word	0x240051fc

080149d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b088      	sub	sp, #32
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	460b      	mov	r3, r1
 80149de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80149e0:	887b      	ldrh	r3, [r7, #2]
 80149e2:	3303      	adds	r3, #3
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	f023 0303 	bic.w	r3, r3, #3
 80149ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80149ec:	8bfb      	ldrh	r3, [r7, #30]
 80149ee:	2b0b      	cmp	r3, #11
 80149f0:	d801      	bhi.n	80149f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80149f2:	230c      	movs	r3, #12
 80149f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80149f6:	8bfb      	ldrh	r3, [r7, #30]
 80149f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80149fc:	d803      	bhi.n	8014a06 <mem_trim+0x32>
 80149fe:	8bfa      	ldrh	r2, [r7, #30]
 8014a00:	887b      	ldrh	r3, [r7, #2]
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d201      	bcs.n	8014a0a <mem_trim+0x36>
    return NULL;
 8014a06:	2300      	movs	r3, #0
 8014a08:	e0cc      	b.n	8014ba4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014a0a:	4b68      	ldr	r3, [pc, #416]	; (8014bac <mem_trim+0x1d8>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	687a      	ldr	r2, [r7, #4]
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d304      	bcc.n	8014a1e <mem_trim+0x4a>
 8014a14:	4b66      	ldr	r3, [pc, #408]	; (8014bb0 <mem_trim+0x1dc>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d306      	bcc.n	8014a2c <mem_trim+0x58>
 8014a1e:	4b65      	ldr	r3, [pc, #404]	; (8014bb4 <mem_trim+0x1e0>)
 8014a20:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014a24:	4964      	ldr	r1, [pc, #400]	; (8014bb8 <mem_trim+0x1e4>)
 8014a26:	4865      	ldr	r0, [pc, #404]	; (8014bbc <mem_trim+0x1e8>)
 8014a28:	f00a fafc 	bl	801f024 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014a2c:	4b5f      	ldr	r3, [pc, #380]	; (8014bac <mem_trim+0x1d8>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d304      	bcc.n	8014a40 <mem_trim+0x6c>
 8014a36:	4b5e      	ldr	r3, [pc, #376]	; (8014bb0 <mem_trim+0x1dc>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	687a      	ldr	r2, [r7, #4]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d301      	bcc.n	8014a44 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	e0af      	b.n	8014ba4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	3b08      	subs	r3, #8
 8014a48:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014a4a:	69b8      	ldr	r0, [r7, #24]
 8014a4c:	f7ff fe30 	bl	80146b0 <mem_to_ptr>
 8014a50:	4603      	mov	r3, r0
 8014a52:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014a54:	69bb      	ldr	r3, [r7, #24]
 8014a56:	881a      	ldrh	r2, [r3, #0]
 8014a58:	8afb      	ldrh	r3, [r7, #22]
 8014a5a:	1ad3      	subs	r3, r2, r3
 8014a5c:	b29b      	uxth	r3, r3
 8014a5e:	3b08      	subs	r3, #8
 8014a60:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014a62:	8bfa      	ldrh	r2, [r7, #30]
 8014a64:	8abb      	ldrh	r3, [r7, #20]
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d906      	bls.n	8014a78 <mem_trim+0xa4>
 8014a6a:	4b52      	ldr	r3, [pc, #328]	; (8014bb4 <mem_trim+0x1e0>)
 8014a6c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8014a70:	4953      	ldr	r1, [pc, #332]	; (8014bc0 <mem_trim+0x1ec>)
 8014a72:	4852      	ldr	r0, [pc, #328]	; (8014bbc <mem_trim+0x1e8>)
 8014a74:	f00a fad6 	bl	801f024 <iprintf>
  if (newsize > size) {
 8014a78:	8bfa      	ldrh	r2, [r7, #30]
 8014a7a:	8abb      	ldrh	r3, [r7, #20]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d901      	bls.n	8014a84 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8014a80:	2300      	movs	r3, #0
 8014a82:	e08f      	b.n	8014ba4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8014a84:	8bfa      	ldrh	r2, [r7, #30]
 8014a86:	8abb      	ldrh	r3, [r7, #20]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d101      	bne.n	8014a90 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	e089      	b.n	8014ba4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8014a90:	69bb      	ldr	r3, [r7, #24]
 8014a92:	881b      	ldrh	r3, [r3, #0]
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7ff fdf9 	bl	801468c <ptr_to_mem>
 8014a9a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	791b      	ldrb	r3, [r3, #4]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d13f      	bne.n	8014b24 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	881b      	ldrh	r3, [r3, #0]
 8014aa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014aac:	d106      	bne.n	8014abc <mem_trim+0xe8>
 8014aae:	4b41      	ldr	r3, [pc, #260]	; (8014bb4 <mem_trim+0x1e0>)
 8014ab0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8014ab4:	4943      	ldr	r1, [pc, #268]	; (8014bc4 <mem_trim+0x1f0>)
 8014ab6:	4841      	ldr	r0, [pc, #260]	; (8014bbc <mem_trim+0x1e8>)
 8014ab8:	f00a fab4 	bl	801f024 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014abc:	693b      	ldr	r3, [r7, #16]
 8014abe:	881b      	ldrh	r3, [r3, #0]
 8014ac0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014ac2:	8afa      	ldrh	r2, [r7, #22]
 8014ac4:	8bfb      	ldrh	r3, [r7, #30]
 8014ac6:	4413      	add	r3, r2
 8014ac8:	b29b      	uxth	r3, r3
 8014aca:	3308      	adds	r3, #8
 8014acc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014ace:	4b3e      	ldr	r3, [pc, #248]	; (8014bc8 <mem_trim+0x1f4>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	693a      	ldr	r2, [r7, #16]
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d106      	bne.n	8014ae6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8014ad8:	89fb      	ldrh	r3, [r7, #14]
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7ff fdd6 	bl	801468c <ptr_to_mem>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	4a39      	ldr	r2, [pc, #228]	; (8014bc8 <mem_trim+0x1f4>)
 8014ae4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014ae6:	89fb      	ldrh	r3, [r7, #14]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7ff fdcf 	bl	801468c <ptr_to_mem>
 8014aee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014af0:	693b      	ldr	r3, [r7, #16]
 8014af2:	2200      	movs	r2, #0
 8014af4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014af6:	693b      	ldr	r3, [r7, #16]
 8014af8:	89ba      	ldrh	r2, [r7, #12]
 8014afa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014afc:	693b      	ldr	r3, [r7, #16]
 8014afe:	8afa      	ldrh	r2, [r7, #22]
 8014b00:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014b02:	69bb      	ldr	r3, [r7, #24]
 8014b04:	89fa      	ldrh	r2, [r7, #14]
 8014b06:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014b08:	693b      	ldr	r3, [r7, #16]
 8014b0a:	881b      	ldrh	r3, [r3, #0]
 8014b0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014b10:	d047      	beq.n	8014ba2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	881b      	ldrh	r3, [r3, #0]
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7ff fdb8 	bl	801468c <ptr_to_mem>
 8014b1c:	4602      	mov	r2, r0
 8014b1e:	89fb      	ldrh	r3, [r7, #14]
 8014b20:	8053      	strh	r3, [r2, #2]
 8014b22:	e03e      	b.n	8014ba2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014b24:	8bfb      	ldrh	r3, [r7, #30]
 8014b26:	f103 0214 	add.w	r2, r3, #20
 8014b2a:	8abb      	ldrh	r3, [r7, #20]
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d838      	bhi.n	8014ba2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014b30:	8afa      	ldrh	r2, [r7, #22]
 8014b32:	8bfb      	ldrh	r3, [r7, #30]
 8014b34:	4413      	add	r3, r2
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	3308      	adds	r3, #8
 8014b3a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014b3c:	69bb      	ldr	r3, [r7, #24]
 8014b3e:	881b      	ldrh	r3, [r3, #0]
 8014b40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014b44:	d106      	bne.n	8014b54 <mem_trim+0x180>
 8014b46:	4b1b      	ldr	r3, [pc, #108]	; (8014bb4 <mem_trim+0x1e0>)
 8014b48:	f240 3216 	movw	r2, #790	; 0x316
 8014b4c:	491d      	ldr	r1, [pc, #116]	; (8014bc4 <mem_trim+0x1f0>)
 8014b4e:	481b      	ldr	r0, [pc, #108]	; (8014bbc <mem_trim+0x1e8>)
 8014b50:	f00a fa68 	bl	801f024 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014b54:	89fb      	ldrh	r3, [r7, #14]
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7ff fd98 	bl	801468c <ptr_to_mem>
 8014b5c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014b5e:	4b1a      	ldr	r3, [pc, #104]	; (8014bc8 <mem_trim+0x1f4>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	693a      	ldr	r2, [r7, #16]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d202      	bcs.n	8014b6e <mem_trim+0x19a>
      lfree = mem2;
 8014b68:	4a17      	ldr	r2, [pc, #92]	; (8014bc8 <mem_trim+0x1f4>)
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	2200      	movs	r2, #0
 8014b72:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014b74:	69bb      	ldr	r3, [r7, #24]
 8014b76:	881a      	ldrh	r2, [r3, #0]
 8014b78:	693b      	ldr	r3, [r7, #16]
 8014b7a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	8afa      	ldrh	r2, [r7, #22]
 8014b80:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014b82:	69bb      	ldr	r3, [r7, #24]
 8014b84:	89fa      	ldrh	r2, [r7, #14]
 8014b86:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	881b      	ldrh	r3, [r3, #0]
 8014b8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014b90:	d007      	beq.n	8014ba2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	881b      	ldrh	r3, [r3, #0]
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7ff fd78 	bl	801468c <ptr_to_mem>
 8014b9c:	4602      	mov	r2, r0
 8014b9e:	89fb      	ldrh	r3, [r7, #14]
 8014ba0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8014ba2:	687b      	ldr	r3, [r7, #4]
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3720      	adds	r7, #32
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	240051f4 	.word	0x240051f4
 8014bb0:	240051f8 	.word	0x240051f8
 8014bb4:	0802478c 	.word	0x0802478c
 8014bb8:	08024928 	.word	0x08024928
 8014bbc:	08024800 	.word	0x08024800
 8014bc0:	08024940 	.word	0x08024940
 8014bc4:	08024960 	.word	0x08024960
 8014bc8:	240051fc 	.word	0x240051fc

08014bcc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b088      	sub	sp, #32
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014bd6:	88fb      	ldrh	r3, [r7, #6]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d101      	bne.n	8014be0 <mem_malloc+0x14>
    return NULL;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	e0d9      	b.n	8014d94 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014be0:	88fb      	ldrh	r3, [r7, #6]
 8014be2:	3303      	adds	r3, #3
 8014be4:	b29b      	uxth	r3, r3
 8014be6:	f023 0303 	bic.w	r3, r3, #3
 8014bea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014bec:	8bbb      	ldrh	r3, [r7, #28]
 8014bee:	2b0b      	cmp	r3, #11
 8014bf0:	d801      	bhi.n	8014bf6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014bf2:	230c      	movs	r3, #12
 8014bf4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014bf6:	8bbb      	ldrh	r3, [r7, #28]
 8014bf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014bfc:	d803      	bhi.n	8014c06 <mem_malloc+0x3a>
 8014bfe:	8bba      	ldrh	r2, [r7, #28]
 8014c00:	88fb      	ldrh	r3, [r7, #6]
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d201      	bcs.n	8014c0a <mem_malloc+0x3e>
    return NULL;
 8014c06:	2300      	movs	r3, #0
 8014c08:	e0c4      	b.n	8014d94 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014c0a:	4b64      	ldr	r3, [pc, #400]	; (8014d9c <mem_malloc+0x1d0>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7ff fd4e 	bl	80146b0 <mem_to_ptr>
 8014c14:	4603      	mov	r3, r0
 8014c16:	83fb      	strh	r3, [r7, #30]
 8014c18:	e0b4      	b.n	8014d84 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014c1a:	8bfb      	ldrh	r3, [r7, #30]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7ff fd35 	bl	801468c <ptr_to_mem>
 8014c22:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	791b      	ldrb	r3, [r3, #4]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	f040 80a4 	bne.w	8014d76 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	881b      	ldrh	r3, [r3, #0]
 8014c32:	461a      	mov	r2, r3
 8014c34:	8bfb      	ldrh	r3, [r7, #30]
 8014c36:	1ad3      	subs	r3, r2, r3
 8014c38:	f1a3 0208 	sub.w	r2, r3, #8
 8014c3c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014c3e:	429a      	cmp	r2, r3
 8014c40:	f0c0 8099 	bcc.w	8014d76 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	881b      	ldrh	r3, [r3, #0]
 8014c48:	461a      	mov	r2, r3
 8014c4a:	8bfb      	ldrh	r3, [r7, #30]
 8014c4c:	1ad3      	subs	r3, r2, r3
 8014c4e:	f1a3 0208 	sub.w	r2, r3, #8
 8014c52:	8bbb      	ldrh	r3, [r7, #28]
 8014c54:	3314      	adds	r3, #20
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d333      	bcc.n	8014cc2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014c5a:	8bfa      	ldrh	r2, [r7, #30]
 8014c5c:	8bbb      	ldrh	r3, [r7, #28]
 8014c5e:	4413      	add	r3, r2
 8014c60:	b29b      	uxth	r3, r3
 8014c62:	3308      	adds	r3, #8
 8014c64:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014c66:	8a7b      	ldrh	r3, [r7, #18]
 8014c68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014c6c:	d106      	bne.n	8014c7c <mem_malloc+0xb0>
 8014c6e:	4b4c      	ldr	r3, [pc, #304]	; (8014da0 <mem_malloc+0x1d4>)
 8014c70:	f240 3287 	movw	r2, #903	; 0x387
 8014c74:	494b      	ldr	r1, [pc, #300]	; (8014da4 <mem_malloc+0x1d8>)
 8014c76:	484c      	ldr	r0, [pc, #304]	; (8014da8 <mem_malloc+0x1dc>)
 8014c78:	f00a f9d4 	bl	801f024 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014c7c:	8a7b      	ldrh	r3, [r7, #18]
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7ff fd04 	bl	801468c <ptr_to_mem>
 8014c84:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	2200      	movs	r2, #0
 8014c8a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	881a      	ldrh	r2, [r3, #0]
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	8bfa      	ldrh	r2, [r7, #30]
 8014c98:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	8a7a      	ldrh	r2, [r7, #18]
 8014c9e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	881b      	ldrh	r3, [r3, #0]
 8014caa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8014cae:	d00b      	beq.n	8014cc8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	881b      	ldrh	r3, [r3, #0]
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	f7ff fce9 	bl	801468c <ptr_to_mem>
 8014cba:	4602      	mov	r2, r0
 8014cbc:	8a7b      	ldrh	r3, [r7, #18]
 8014cbe:	8053      	strh	r3, [r2, #2]
 8014cc0:	e002      	b.n	8014cc8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014cc8:	4b34      	ldr	r3, [pc, #208]	; (8014d9c <mem_malloc+0x1d0>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	697a      	ldr	r2, [r7, #20]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d127      	bne.n	8014d22 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8014cd2:	4b32      	ldr	r3, [pc, #200]	; (8014d9c <mem_malloc+0x1d0>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014cd8:	e005      	b.n	8014ce6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	881b      	ldrh	r3, [r3, #0]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7ff fcd4 	bl	801468c <ptr_to_mem>
 8014ce4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014ce6:	69bb      	ldr	r3, [r7, #24]
 8014ce8:	791b      	ldrb	r3, [r3, #4]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d004      	beq.n	8014cf8 <mem_malloc+0x12c>
 8014cee:	4b2f      	ldr	r3, [pc, #188]	; (8014dac <mem_malloc+0x1e0>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	69ba      	ldr	r2, [r7, #24]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d1f0      	bne.n	8014cda <mem_malloc+0x10e>
          }
          lfree = cur;
 8014cf8:	4a28      	ldr	r2, [pc, #160]	; (8014d9c <mem_malloc+0x1d0>)
 8014cfa:	69bb      	ldr	r3, [r7, #24]
 8014cfc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014cfe:	4b27      	ldr	r3, [pc, #156]	; (8014d9c <mem_malloc+0x1d0>)
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	4b2a      	ldr	r3, [pc, #168]	; (8014dac <mem_malloc+0x1e0>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d00b      	beq.n	8014d22 <mem_malloc+0x156>
 8014d0a:	4b24      	ldr	r3, [pc, #144]	; (8014d9c <mem_malloc+0x1d0>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	791b      	ldrb	r3, [r3, #4]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d006      	beq.n	8014d22 <mem_malloc+0x156>
 8014d14:	4b22      	ldr	r3, [pc, #136]	; (8014da0 <mem_malloc+0x1d4>)
 8014d16:	f240 32b5 	movw	r2, #949	; 0x3b5
 8014d1a:	4925      	ldr	r1, [pc, #148]	; (8014db0 <mem_malloc+0x1e4>)
 8014d1c:	4822      	ldr	r0, [pc, #136]	; (8014da8 <mem_malloc+0x1dc>)
 8014d1e:	f00a f981 	bl	801f024 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014d22:	8bba      	ldrh	r2, [r7, #28]
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	4413      	add	r3, r2
 8014d28:	3308      	adds	r3, #8
 8014d2a:	4a20      	ldr	r2, [pc, #128]	; (8014dac <mem_malloc+0x1e0>)
 8014d2c:	6812      	ldr	r2, [r2, #0]
 8014d2e:	4293      	cmp	r3, r2
 8014d30:	d906      	bls.n	8014d40 <mem_malloc+0x174>
 8014d32:	4b1b      	ldr	r3, [pc, #108]	; (8014da0 <mem_malloc+0x1d4>)
 8014d34:	f240 32b9 	movw	r2, #953	; 0x3b9
 8014d38:	491e      	ldr	r1, [pc, #120]	; (8014db4 <mem_malloc+0x1e8>)
 8014d3a:	481b      	ldr	r0, [pc, #108]	; (8014da8 <mem_malloc+0x1dc>)
 8014d3c:	f00a f972 	bl	801f024 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	f003 0303 	and.w	r3, r3, #3
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d006      	beq.n	8014d58 <mem_malloc+0x18c>
 8014d4a:	4b15      	ldr	r3, [pc, #84]	; (8014da0 <mem_malloc+0x1d4>)
 8014d4c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014d50:	4919      	ldr	r1, [pc, #100]	; (8014db8 <mem_malloc+0x1ec>)
 8014d52:	4815      	ldr	r0, [pc, #84]	; (8014da8 <mem_malloc+0x1dc>)
 8014d54:	f00a f966 	bl	801f024 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	f003 0303 	and.w	r3, r3, #3
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d006      	beq.n	8014d70 <mem_malloc+0x1a4>
 8014d62:	4b0f      	ldr	r3, [pc, #60]	; (8014da0 <mem_malloc+0x1d4>)
 8014d64:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014d68:	4914      	ldr	r1, [pc, #80]	; (8014dbc <mem_malloc+0x1f0>)
 8014d6a:	480f      	ldr	r0, [pc, #60]	; (8014da8 <mem_malloc+0x1dc>)
 8014d6c:	f00a f95a 	bl	801f024 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	3308      	adds	r3, #8
 8014d74:	e00e      	b.n	8014d94 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8014d76:	8bfb      	ldrh	r3, [r7, #30]
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7ff fc87 	bl	801468c <ptr_to_mem>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	881b      	ldrh	r3, [r3, #0]
 8014d82:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014d84:	8bfa      	ldrh	r2, [r7, #30]
 8014d86:	8bbb      	ldrh	r3, [r7, #28]
 8014d88:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014d8c:	429a      	cmp	r2, r3
 8014d8e:	f4ff af44 	bcc.w	8014c1a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3720      	adds	r7, #32
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	240051fc 	.word	0x240051fc
 8014da0:	0802478c 	.word	0x0802478c
 8014da4:	08024960 	.word	0x08024960
 8014da8:	08024800 	.word	0x08024800
 8014dac:	240051f8 	.word	0x240051f8
 8014db0:	08024974 	.word	0x08024974
 8014db4:	08024990 	.word	0x08024990
 8014db8:	080249c0 	.word	0x080249c0
 8014dbc:	080249f0 	.word	0x080249f0

08014dc0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b085      	sub	sp, #20
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	689b      	ldr	r3, [r3, #8]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	3303      	adds	r3, #3
 8014dd6:	f023 0303 	bic.w	r3, r3, #3
 8014dda:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014ddc:	2300      	movs	r3, #0
 8014dde:	60fb      	str	r3, [r7, #12]
 8014de0:	e011      	b.n	8014e06 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	689b      	ldr	r3, [r3, #8]
 8014de6:	681a      	ldr	r2, [r3, #0]
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	689b      	ldr	r3, [r3, #8]
 8014df0:	68ba      	ldr	r2, [r7, #8]
 8014df2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	881b      	ldrh	r3, [r3, #0]
 8014df8:	461a      	mov	r2, r3
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	4413      	add	r3, r2
 8014dfe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	3301      	adds	r3, #1
 8014e04:	60fb      	str	r3, [r7, #12]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	885b      	ldrh	r3, [r3, #2]
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	4293      	cmp	r3, r2
 8014e10:	dbe7      	blt.n	8014de2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014e12:	bf00      	nop
 8014e14:	bf00      	nop
 8014e16:	3714      	adds	r7, #20
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1e:	4770      	bx	lr

08014e20 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014e26:	2300      	movs	r3, #0
 8014e28:	80fb      	strh	r3, [r7, #6]
 8014e2a:	e009      	b.n	8014e40 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8014e2c:	88fb      	ldrh	r3, [r7, #6]
 8014e2e:	4a08      	ldr	r2, [pc, #32]	; (8014e50 <memp_init+0x30>)
 8014e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7ff ffc3 	bl	8014dc0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8014e3a:	88fb      	ldrh	r3, [r7, #6]
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	80fb      	strh	r3, [r7, #6]
 8014e40:	88fb      	ldrh	r3, [r7, #6]
 8014e42:	2b08      	cmp	r3, #8
 8014e44:	d9f2      	bls.n	8014e2c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8014e46:	bf00      	nop
 8014e48:	bf00      	nop
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}
 8014e50:	080272e8 	.word	0x080272e8

08014e54 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b084      	sub	sp, #16
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	689b      	ldr	r3, [r3, #8]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d012      	beq.n	8014e90 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	689b      	ldr	r3, [r3, #8]
 8014e6e:	68fa      	ldr	r2, [r7, #12]
 8014e70:	6812      	ldr	r2, [r2, #0]
 8014e72:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f003 0303 	and.w	r3, r3, #3
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d006      	beq.n	8014e8c <do_memp_malloc_pool+0x38>
 8014e7e:	4b07      	ldr	r3, [pc, #28]	; (8014e9c <do_memp_malloc_pool+0x48>)
 8014e80:	f44f 728c 	mov.w	r2, #280	; 0x118
 8014e84:	4906      	ldr	r1, [pc, #24]	; (8014ea0 <do_memp_malloc_pool+0x4c>)
 8014e86:	4807      	ldr	r0, [pc, #28]	; (8014ea4 <do_memp_malloc_pool+0x50>)
 8014e88:	f00a f8cc 	bl	801f024 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	e000      	b.n	8014e92 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014e90:	2300      	movs	r3, #0
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3710      	adds	r7, #16
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	08024a14 	.word	0x08024a14
 8014ea0:	08024a70 	.word	0x08024a70
 8014ea4:	08024a94 	.word	0x08024a94

08014ea8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b082      	sub	sp, #8
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d106      	bne.n	8014ec4 <memp_malloc_pool+0x1c>
 8014eb6:	4b0a      	ldr	r3, [pc, #40]	; (8014ee0 <memp_malloc_pool+0x38>)
 8014eb8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8014ebc:	4909      	ldr	r1, [pc, #36]	; (8014ee4 <memp_malloc_pool+0x3c>)
 8014ebe:	480a      	ldr	r0, [pc, #40]	; (8014ee8 <memp_malloc_pool+0x40>)
 8014ec0:	f00a f8b0 	bl	801f024 <iprintf>
  if (desc == NULL) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d101      	bne.n	8014ece <memp_malloc_pool+0x26>
    return NULL;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	e003      	b.n	8014ed6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f7ff ffc0 	bl	8014e54 <do_memp_malloc_pool>
 8014ed4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3708      	adds	r7, #8
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	08024a14 	.word	0x08024a14
 8014ee4:	08024abc 	.word	0x08024abc
 8014ee8:	08024a94 	.word	0x08024a94

08014eec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8014ef6:	79fb      	ldrb	r3, [r7, #7]
 8014ef8:	2b08      	cmp	r3, #8
 8014efa:	d908      	bls.n	8014f0e <memp_malloc+0x22>
 8014efc:	4b0a      	ldr	r3, [pc, #40]	; (8014f28 <memp_malloc+0x3c>)
 8014efe:	f240 1257 	movw	r2, #343	; 0x157
 8014f02:	490a      	ldr	r1, [pc, #40]	; (8014f2c <memp_malloc+0x40>)
 8014f04:	480a      	ldr	r0, [pc, #40]	; (8014f30 <memp_malloc+0x44>)
 8014f06:	f00a f88d 	bl	801f024 <iprintf>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	e008      	b.n	8014f20 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014f0e:	79fb      	ldrb	r3, [r7, #7]
 8014f10:	4a08      	ldr	r2, [pc, #32]	; (8014f34 <memp_malloc+0x48>)
 8014f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f7ff ff9c 	bl	8014e54 <do_memp_malloc_pool>
 8014f1c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3710      	adds	r7, #16
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}
 8014f28:	08024a14 	.word	0x08024a14
 8014f2c:	08024ad0 	.word	0x08024ad0
 8014f30:	08024a94 	.word	0x08024a94
 8014f34:	080272e8 	.word	0x080272e8

08014f38 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b084      	sub	sp, #16
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	f003 0303 	and.w	r3, r3, #3
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d006      	beq.n	8014f5a <do_memp_free_pool+0x22>
 8014f4c:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <do_memp_free_pool+0x40>)
 8014f4e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8014f52:	490a      	ldr	r1, [pc, #40]	; (8014f7c <do_memp_free_pool+0x44>)
 8014f54:	480a      	ldr	r0, [pc, #40]	; (8014f80 <do_memp_free_pool+0x48>)
 8014f56:	f00a f865 	bl	801f024 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	689b      	ldr	r3, [r3, #8]
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	689b      	ldr	r3, [r3, #8]
 8014f6c:	68fa      	ldr	r2, [r7, #12]
 8014f6e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8014f70:	bf00      	nop
 8014f72:	3710      	adds	r7, #16
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	08024a14 	.word	0x08024a14
 8014f7c:	08024af0 	.word	0x08024af0
 8014f80:	08024a94 	.word	0x08024a94

08014f84 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b082      	sub	sp, #8
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d106      	bne.n	8014fa2 <memp_free_pool+0x1e>
 8014f94:	4b0a      	ldr	r3, [pc, #40]	; (8014fc0 <memp_free_pool+0x3c>)
 8014f96:	f240 1295 	movw	r2, #405	; 0x195
 8014f9a:	490a      	ldr	r1, [pc, #40]	; (8014fc4 <memp_free_pool+0x40>)
 8014f9c:	480a      	ldr	r0, [pc, #40]	; (8014fc8 <memp_free_pool+0x44>)
 8014f9e:	f00a f841 	bl	801f024 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d007      	beq.n	8014fb8 <memp_free_pool+0x34>
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d004      	beq.n	8014fb8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8014fae:	6839      	ldr	r1, [r7, #0]
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7ff ffc1 	bl	8014f38 <do_memp_free_pool>
 8014fb6:	e000      	b.n	8014fba <memp_free_pool+0x36>
    return;
 8014fb8:	bf00      	nop
}
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	08024a14 	.word	0x08024a14
 8014fc4:	08024abc 	.word	0x08024abc
 8014fc8:	08024a94 	.word	0x08024a94

08014fcc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	6039      	str	r1, [r7, #0]
 8014fd6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8014fd8:	79fb      	ldrb	r3, [r7, #7]
 8014fda:	2b08      	cmp	r3, #8
 8014fdc:	d907      	bls.n	8014fee <memp_free+0x22>
 8014fde:	4b0c      	ldr	r3, [pc, #48]	; (8015010 <memp_free+0x44>)
 8014fe0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8014fe4:	490b      	ldr	r1, [pc, #44]	; (8015014 <memp_free+0x48>)
 8014fe6:	480c      	ldr	r0, [pc, #48]	; (8015018 <memp_free+0x4c>)
 8014fe8:	f00a f81c 	bl	801f024 <iprintf>
 8014fec:	e00c      	b.n	8015008 <memp_free+0x3c>

  if (mem == NULL) {
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d008      	beq.n	8015006 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014ff4:	79fb      	ldrb	r3, [r7, #7]
 8014ff6:	4a09      	ldr	r2, [pc, #36]	; (801501c <memp_free+0x50>)
 8014ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ffc:	6839      	ldr	r1, [r7, #0]
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7ff ff9a 	bl	8014f38 <do_memp_free_pool>
 8015004:	e000      	b.n	8015008 <memp_free+0x3c>
    return;
 8015006:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015008:	3708      	adds	r7, #8
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	08024a14 	.word	0x08024a14
 8015014:	08024b10 	.word	0x08024b10
 8015018:	08024a94 	.word	0x08024a94
 801501c:	080272e8 	.word	0x080272e8

08015020 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015020:	b480      	push	{r7}
 8015022:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015024:	bf00      	nop
 8015026:	46bd      	mov	sp, r7
 8015028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502c:	4770      	bx	lr
	...

08015030 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b086      	sub	sp, #24
 8015034:	af00      	add	r7, sp, #0
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	607a      	str	r2, [r7, #4]
 801503c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d108      	bne.n	8015056 <netif_add+0x26>
 8015044:	4b57      	ldr	r3, [pc, #348]	; (80151a4 <netif_add+0x174>)
 8015046:	f240 1227 	movw	r2, #295	; 0x127
 801504a:	4957      	ldr	r1, [pc, #348]	; (80151a8 <netif_add+0x178>)
 801504c:	4857      	ldr	r0, [pc, #348]	; (80151ac <netif_add+0x17c>)
 801504e:	f009 ffe9 	bl	801f024 <iprintf>
 8015052:	2300      	movs	r3, #0
 8015054:	e0a2      	b.n	801519c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015058:	2b00      	cmp	r3, #0
 801505a:	d108      	bne.n	801506e <netif_add+0x3e>
 801505c:	4b51      	ldr	r3, [pc, #324]	; (80151a4 <netif_add+0x174>)
 801505e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015062:	4953      	ldr	r1, [pc, #332]	; (80151b0 <netif_add+0x180>)
 8015064:	4851      	ldr	r0, [pc, #324]	; (80151ac <netif_add+0x17c>)
 8015066:	f009 ffdd 	bl	801f024 <iprintf>
 801506a:	2300      	movs	r3, #0
 801506c:	e096      	b.n	801519c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d101      	bne.n	8015078 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015074:	4b4f      	ldr	r3, [pc, #316]	; (80151b4 <netif_add+0x184>)
 8015076:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d101      	bne.n	8015082 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801507e:	4b4d      	ldr	r3, [pc, #308]	; (80151b4 <netif_add+0x184>)
 8015080:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d101      	bne.n	801508c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8015088:	4b4a      	ldr	r3, [pc, #296]	; (80151b4 <netif_add+0x184>)
 801508a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	2200      	movs	r2, #0
 8015090:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2200      	movs	r2, #0
 8015096:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2200      	movs	r2, #0
 801509c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	4a45      	ldr	r2, [pc, #276]	; (80151b8 <netif_add+0x188>)
 80150a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	2200      	movs	r2, #0
 80150a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	2200      	movs	r2, #0
 80150ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	2200      	movs	r2, #0
 80150b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	6a3a      	ldr	r2, [r7, #32]
 80150bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80150be:	4b3f      	ldr	r3, [pc, #252]	; (80151bc <netif_add+0x18c>)
 80150c0:	781a      	ldrb	r2, [r3, #0]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	687a      	ldr	r2, [r7, #4]
 80150d2:	68b9      	ldr	r1, [r7, #8]
 80150d4:	68f8      	ldr	r0, [r7, #12]
 80150d6:	f000 f913 	bl	8015300 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80150da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	4798      	blx	r3
 80150e0:	4603      	mov	r3, r0
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d001      	beq.n	80150ea <netif_add+0xba>
    return NULL;
 80150e6:	2300      	movs	r3, #0
 80150e8:	e058      	b.n	801519c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80150f0:	2bff      	cmp	r3, #255	; 0xff
 80150f2:	d103      	bne.n	80150fc <netif_add+0xcc>
        netif->num = 0;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2200      	movs	r2, #0
 80150f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80150fc:	2300      	movs	r3, #0
 80150fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015100:	4b2f      	ldr	r3, [pc, #188]	; (80151c0 <netif_add+0x190>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	617b      	str	r3, [r7, #20]
 8015106:	e02b      	b.n	8015160 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015108:	697a      	ldr	r2, [r7, #20]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	429a      	cmp	r2, r3
 801510e:	d106      	bne.n	801511e <netif_add+0xee>
 8015110:	4b24      	ldr	r3, [pc, #144]	; (80151a4 <netif_add+0x174>)
 8015112:	f240 128b 	movw	r2, #395	; 0x18b
 8015116:	492b      	ldr	r1, [pc, #172]	; (80151c4 <netif_add+0x194>)
 8015118:	4824      	ldr	r0, [pc, #144]	; (80151ac <netif_add+0x17c>)
 801511a:	f009 ff83 	bl	801f024 <iprintf>
        num_netifs++;
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	3301      	adds	r3, #1
 8015122:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	2bff      	cmp	r3, #255	; 0xff
 8015128:	dd06      	ble.n	8015138 <netif_add+0x108>
 801512a:	4b1e      	ldr	r3, [pc, #120]	; (80151a4 <netif_add+0x174>)
 801512c:	f240 128d 	movw	r2, #397	; 0x18d
 8015130:	4925      	ldr	r1, [pc, #148]	; (80151c8 <netif_add+0x198>)
 8015132:	481e      	ldr	r0, [pc, #120]	; (80151ac <netif_add+0x17c>)
 8015134:	f009 ff76 	bl	801f024 <iprintf>
        if (netif2->num == netif->num) {
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015144:	429a      	cmp	r2, r3
 8015146:	d108      	bne.n	801515a <netif_add+0x12a>
          netif->num++;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801514e:	3301      	adds	r3, #1
 8015150:	b2da      	uxtb	r2, r3
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8015158:	e005      	b.n	8015166 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	617b      	str	r3, [r7, #20]
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d1d0      	bne.n	8015108 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d1be      	bne.n	80150ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015172:	2bfe      	cmp	r3, #254	; 0xfe
 8015174:	d103      	bne.n	801517e <netif_add+0x14e>
    netif_num = 0;
 8015176:	4b11      	ldr	r3, [pc, #68]	; (80151bc <netif_add+0x18c>)
 8015178:	2200      	movs	r2, #0
 801517a:	701a      	strb	r2, [r3, #0]
 801517c:	e006      	b.n	801518c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015184:	3301      	adds	r3, #1
 8015186:	b2da      	uxtb	r2, r3
 8015188:	4b0c      	ldr	r3, [pc, #48]	; (80151bc <netif_add+0x18c>)
 801518a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801518c:	4b0c      	ldr	r3, [pc, #48]	; (80151c0 <netif_add+0x190>)
 801518e:	681a      	ldr	r2, [r3, #0]
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015194:	4a0a      	ldr	r2, [pc, #40]	; (80151c0 <netif_add+0x190>)
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801519a:	68fb      	ldr	r3, [r7, #12]
}
 801519c:	4618      	mov	r0, r3
 801519e:	3718      	adds	r7, #24
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}
 80151a4:	08024b2c 	.word	0x08024b2c
 80151a8:	08024be8 	.word	0x08024be8
 80151ac:	08024ba4 	.word	0x08024ba4
 80151b0:	08024c04 	.word	0x08024c04
 80151b4:	08027278 	.word	0x08027278
 80151b8:	080155db 	.word	0x080155db
 80151bc:	24005224 	.word	0x24005224
 80151c0:	24008a14 	.word	0x24008a14
 80151c4:	08024c28 	.word	0x08024c28
 80151c8:	08024c3c 	.word	0x08024c3c

080151cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80151d6:	6839      	ldr	r1, [r7, #0]
 80151d8:	6878      	ldr	r0, [r7, #4]
 80151da:	f002 ff9b 	bl	8018114 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80151de:	6839      	ldr	r1, [r7, #0]
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f007 fe19 	bl	801ce18 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80151e6:	bf00      	nop
 80151e8:	3708      	adds	r7, #8
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
	...

080151f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b086      	sub	sp, #24
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	60f8      	str	r0, [r7, #12]
 80151f8:	60b9      	str	r1, [r7, #8]
 80151fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d106      	bne.n	8015210 <netif_do_set_ipaddr+0x20>
 8015202:	4b1d      	ldr	r3, [pc, #116]	; (8015278 <netif_do_set_ipaddr+0x88>)
 8015204:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015208:	491c      	ldr	r1, [pc, #112]	; (801527c <netif_do_set_ipaddr+0x8c>)
 801520a:	481d      	ldr	r0, [pc, #116]	; (8015280 <netif_do_set_ipaddr+0x90>)
 801520c:	f009 ff0a 	bl	801f024 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d106      	bne.n	8015224 <netif_do_set_ipaddr+0x34>
 8015216:	4b18      	ldr	r3, [pc, #96]	; (8015278 <netif_do_set_ipaddr+0x88>)
 8015218:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801521c:	4917      	ldr	r1, [pc, #92]	; (801527c <netif_do_set_ipaddr+0x8c>)
 801521e:	4818      	ldr	r0, [pc, #96]	; (8015280 <netif_do_set_ipaddr+0x90>)
 8015220:	f009 ff00 	bl	801f024 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	681a      	ldr	r2, [r3, #0]
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	3304      	adds	r3, #4
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	429a      	cmp	r2, r3
 8015230:	d01c      	beq.n	801526c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015232:	68bb      	ldr	r3, [r7, #8]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	3304      	adds	r3, #4
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015242:	f107 0314 	add.w	r3, r7, #20
 8015246:	4619      	mov	r1, r3
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f7ff ffbf 	bl	80151cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d002      	beq.n	801525a <netif_do_set_ipaddr+0x6a>
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	e000      	b.n	801525c <netif_do_set_ipaddr+0x6c>
 801525a:	2300      	movs	r3, #0
 801525c:	68fa      	ldr	r2, [r7, #12]
 801525e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015260:	2101      	movs	r1, #1
 8015262:	68f8      	ldr	r0, [r7, #12]
 8015264:	f000 f8d2 	bl	801540c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8015268:	2301      	movs	r3, #1
 801526a:	e000      	b.n	801526e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801526c:	2300      	movs	r3, #0
}
 801526e:	4618      	mov	r0, r3
 8015270:	3718      	adds	r7, #24
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}
 8015276:	bf00      	nop
 8015278:	08024b2c 	.word	0x08024b2c
 801527c:	08024c6c 	.word	0x08024c6c
 8015280:	08024ba4 	.word	0x08024ba4

08015284 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015284:	b480      	push	{r7}
 8015286:	b085      	sub	sp, #20
 8015288:	af00      	add	r7, sp, #0
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	60b9      	str	r1, [r7, #8]
 801528e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	3308      	adds	r3, #8
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	429a      	cmp	r2, r3
 801529c:	d00a      	beq.n	80152b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d002      	beq.n	80152aa <netif_do_set_netmask+0x26>
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	e000      	b.n	80152ac <netif_do_set_netmask+0x28>
 80152aa:	2300      	movs	r3, #0
 80152ac:	68fa      	ldr	r2, [r7, #12]
 80152ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80152b0:	2301      	movs	r3, #1
 80152b2:	e000      	b.n	80152b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80152b4:	2300      	movs	r3, #0
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3714      	adds	r7, #20
 80152ba:	46bd      	mov	sp, r7
 80152bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c0:	4770      	bx	lr

080152c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80152c2:	b480      	push	{r7}
 80152c4:	b085      	sub	sp, #20
 80152c6:	af00      	add	r7, sp, #0
 80152c8:	60f8      	str	r0, [r7, #12]
 80152ca:	60b9      	str	r1, [r7, #8]
 80152cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80152ce:	68bb      	ldr	r3, [r7, #8]
 80152d0:	681a      	ldr	r2, [r3, #0]
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	330c      	adds	r3, #12
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	429a      	cmp	r2, r3
 80152da:	d00a      	beq.n	80152f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d002      	beq.n	80152e8 <netif_do_set_gw+0x26>
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	e000      	b.n	80152ea <netif_do_set_gw+0x28>
 80152e8:	2300      	movs	r3, #0
 80152ea:	68fa      	ldr	r2, [r7, #12]
 80152ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80152ee:	2301      	movs	r3, #1
 80152f0:	e000      	b.n	80152f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80152f2:	2300      	movs	r3, #0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	3714      	adds	r7, #20
 80152f8:	46bd      	mov	sp, r7
 80152fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fe:	4770      	bx	lr

08015300 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b088      	sub	sp, #32
 8015304:	af00      	add	r7, sp, #0
 8015306:	60f8      	str	r0, [r7, #12]
 8015308:	60b9      	str	r1, [r7, #8]
 801530a:	607a      	str	r2, [r7, #4]
 801530c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801530e:	2300      	movs	r3, #0
 8015310:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015312:	2300      	movs	r3, #0
 8015314:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d101      	bne.n	8015320 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801531c:	4b1c      	ldr	r3, [pc, #112]	; (8015390 <netif_set_addr+0x90>)
 801531e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d101      	bne.n	801532a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015326:	4b1a      	ldr	r3, [pc, #104]	; (8015390 <netif_set_addr+0x90>)
 8015328:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d101      	bne.n	8015334 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015330:	4b17      	ldr	r3, [pc, #92]	; (8015390 <netif_set_addr+0x90>)
 8015332:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d003      	beq.n	8015342 <netif_set_addr+0x42>
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d101      	bne.n	8015346 <netif_set_addr+0x46>
 8015342:	2301      	movs	r3, #1
 8015344:	e000      	b.n	8015348 <netif_set_addr+0x48>
 8015346:	2300      	movs	r3, #0
 8015348:	617b      	str	r3, [r7, #20]
  if (remove) {
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d006      	beq.n	801535e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015350:	f107 0310 	add.w	r3, r7, #16
 8015354:	461a      	mov	r2, r3
 8015356:	68b9      	ldr	r1, [r7, #8]
 8015358:	68f8      	ldr	r0, [r7, #12]
 801535a:	f7ff ff49 	bl	80151f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801535e:	69fa      	ldr	r2, [r7, #28]
 8015360:	6879      	ldr	r1, [r7, #4]
 8015362:	68f8      	ldr	r0, [r7, #12]
 8015364:	f7ff ff8e 	bl	8015284 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015368:	69ba      	ldr	r2, [r7, #24]
 801536a:	6839      	ldr	r1, [r7, #0]
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f7ff ffa8 	bl	80152c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d106      	bne.n	8015386 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015378:	f107 0310 	add.w	r3, r7, #16
 801537c:	461a      	mov	r2, r3
 801537e:	68b9      	ldr	r1, [r7, #8]
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f7ff ff35 	bl	80151f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8015386:	bf00      	nop
 8015388:	3720      	adds	r7, #32
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	08027278 	.word	0x08027278

08015394 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015394:	b480      	push	{r7}
 8015396:	b083      	sub	sp, #12
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801539c:	4a04      	ldr	r2, [pc, #16]	; (80153b0 <netif_set_default+0x1c>)
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80153a2:	bf00      	nop
 80153a4:	370c      	adds	r7, #12
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop
 80153b0:	24008a18 	.word	0x24008a18

080153b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d107      	bne.n	80153d2 <netif_set_up+0x1e>
 80153c2:	4b0f      	ldr	r3, [pc, #60]	; (8015400 <netif_set_up+0x4c>)
 80153c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80153c8:	490e      	ldr	r1, [pc, #56]	; (8015404 <netif_set_up+0x50>)
 80153ca:	480f      	ldr	r0, [pc, #60]	; (8015408 <netif_set_up+0x54>)
 80153cc:	f009 fe2a 	bl	801f024 <iprintf>
 80153d0:	e013      	b.n	80153fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153d8:	f003 0301 	and.w	r3, r3, #1
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d10c      	bne.n	80153fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153e6:	f043 0301 	orr.w	r3, r3, #1
 80153ea:	b2da      	uxtb	r2, r3
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80153f2:	2103      	movs	r1, #3
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f000 f809 	bl	801540c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	08024b2c 	.word	0x08024b2c
 8015404:	08024cdc 	.word	0x08024cdc
 8015408:	08024ba4 	.word	0x08024ba4

0801540c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
 8015414:	460b      	mov	r3, r1
 8015416:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d106      	bne.n	801542c <netif_issue_reports+0x20>
 801541e:	4b18      	ldr	r3, [pc, #96]	; (8015480 <netif_issue_reports+0x74>)
 8015420:	f240 326d 	movw	r2, #877	; 0x36d
 8015424:	4917      	ldr	r1, [pc, #92]	; (8015484 <netif_issue_reports+0x78>)
 8015426:	4818      	ldr	r0, [pc, #96]	; (8015488 <netif_issue_reports+0x7c>)
 8015428:	f009 fdfc 	bl	801f024 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015432:	f003 0304 	and.w	r3, r3, #4
 8015436:	2b00      	cmp	r3, #0
 8015438:	d01e      	beq.n	8015478 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015440:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015444:	2b00      	cmp	r3, #0
 8015446:	d017      	beq.n	8015478 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015448:	78fb      	ldrb	r3, [r7, #3]
 801544a:	f003 0301 	and.w	r3, r3, #1
 801544e:	2b00      	cmp	r3, #0
 8015450:	d013      	beq.n	801547a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	3304      	adds	r3, #4
 8015456:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015458:	2b00      	cmp	r3, #0
 801545a:	d00e      	beq.n	801547a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015462:	f003 0308 	and.w	r3, r3, #8
 8015466:	2b00      	cmp	r3, #0
 8015468:	d007      	beq.n	801547a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	3304      	adds	r3, #4
 801546e:	4619      	mov	r1, r3
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7fd fc8d 	bl	8012d90 <etharp_request>
 8015476:	e000      	b.n	801547a <netif_issue_reports+0x6e>
    return;
 8015478:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801547a:	3708      	adds	r7, #8
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}
 8015480:	08024b2c 	.word	0x08024b2c
 8015484:	08024cf8 	.word	0x08024cf8
 8015488:	08024ba4 	.word	0x08024ba4

0801548c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d107      	bne.n	80154aa <netif_set_down+0x1e>
 801549a:	4b12      	ldr	r3, [pc, #72]	; (80154e4 <netif_set_down+0x58>)
 801549c:	f240 329b 	movw	r2, #923	; 0x39b
 80154a0:	4911      	ldr	r1, [pc, #68]	; (80154e8 <netif_set_down+0x5c>)
 80154a2:	4812      	ldr	r0, [pc, #72]	; (80154ec <netif_set_down+0x60>)
 80154a4:	f009 fdbe 	bl	801f024 <iprintf>
 80154a8:	e019      	b.n	80154de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154b0:	f003 0301 	and.w	r3, r3, #1
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d012      	beq.n	80154de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154be:	f023 0301 	bic.w	r3, r3, #1
 80154c2:	b2da      	uxtb	r2, r3
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154d0:	f003 0308 	and.w	r3, r3, #8
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d002      	beq.n	80154de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f7fd f817 	bl	801250c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}
 80154e4:	08024b2c 	.word	0x08024b2c
 80154e8:	08024d1c 	.word	0x08024d1c
 80154ec:	08024ba4 	.word	0x08024ba4

080154f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b082      	sub	sp, #8
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d107      	bne.n	801550e <netif_set_link_up+0x1e>
 80154fe:	4b13      	ldr	r3, [pc, #76]	; (801554c <netif_set_link_up+0x5c>)
 8015500:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8015504:	4912      	ldr	r1, [pc, #72]	; (8015550 <netif_set_link_up+0x60>)
 8015506:	4813      	ldr	r0, [pc, #76]	; (8015554 <netif_set_link_up+0x64>)
 8015508:	f009 fd8c 	bl	801f024 <iprintf>
 801550c:	e01b      	b.n	8015546 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015514:	f003 0304 	and.w	r3, r3, #4
 8015518:	2b00      	cmp	r3, #0
 801551a:	d114      	bne.n	8015546 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015522:	f043 0304 	orr.w	r3, r3, #4
 8015526:	b2da      	uxtb	r2, r3
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801552e:	2103      	movs	r1, #3
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f7ff ff6b 	bl	801540c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	69db      	ldr	r3, [r3, #28]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d003      	beq.n	8015546 <netif_set_link_up+0x56>
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	69db      	ldr	r3, [r3, #28]
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8015546:	3708      	adds	r7, #8
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}
 801554c:	08024b2c 	.word	0x08024b2c
 8015550:	08024d3c 	.word	0x08024d3c
 8015554:	08024ba4 	.word	0x08024ba4

08015558 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d107      	bne.n	8015576 <netif_set_link_down+0x1e>
 8015566:	4b11      	ldr	r3, [pc, #68]	; (80155ac <netif_set_link_down+0x54>)
 8015568:	f240 4206 	movw	r2, #1030	; 0x406
 801556c:	4910      	ldr	r1, [pc, #64]	; (80155b0 <netif_set_link_down+0x58>)
 801556e:	4811      	ldr	r0, [pc, #68]	; (80155b4 <netif_set_link_down+0x5c>)
 8015570:	f009 fd58 	bl	801f024 <iprintf>
 8015574:	e017      	b.n	80155a6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801557c:	f003 0304 	and.w	r3, r3, #4
 8015580:	2b00      	cmp	r3, #0
 8015582:	d010      	beq.n	80155a6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801558a:	f023 0304 	bic.w	r3, r3, #4
 801558e:	b2da      	uxtb	r2, r3
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	69db      	ldr	r3, [r3, #28]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d003      	beq.n	80155a6 <netif_set_link_down+0x4e>
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	69db      	ldr	r3, [r3, #28]
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80155a6:	3708      	adds	r7, #8
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}
 80155ac:	08024b2c 	.word	0x08024b2c
 80155b0:	08024d60 	.word	0x08024d60
 80155b4:	08024ba4 	.word	0x08024ba4

080155b8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80155b8:	b480      	push	{r7}
 80155ba:	b083      	sub	sp, #12
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d002      	beq.n	80155ce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	683a      	ldr	r2, [r7, #0]
 80155cc:	61da      	str	r2, [r3, #28]
  }
}
 80155ce:	bf00      	nop
 80155d0:	370c      	adds	r7, #12
 80155d2:	46bd      	mov	sp, r7
 80155d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d8:	4770      	bx	lr

080155da <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80155da:	b480      	push	{r7}
 80155dc:	b085      	sub	sp, #20
 80155de:	af00      	add	r7, sp, #0
 80155e0:	60f8      	str	r0, [r7, #12]
 80155e2:	60b9      	str	r1, [r7, #8]
 80155e4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80155e6:	f06f 030b 	mvn.w	r3, #11
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3714      	adds	r7, #20
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr
	...

080155f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80155f8:	b480      	push	{r7}
 80155fa:	b085      	sub	sp, #20
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	4603      	mov	r3, r0
 8015600:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015602:	79fb      	ldrb	r3, [r7, #7]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d013      	beq.n	8015630 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015608:	4b0d      	ldr	r3, [pc, #52]	; (8015640 <netif_get_by_index+0x48>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	60fb      	str	r3, [r7, #12]
 801560e:	e00c      	b.n	801562a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015616:	3301      	adds	r3, #1
 8015618:	b2db      	uxtb	r3, r3
 801561a:	79fa      	ldrb	r2, [r7, #7]
 801561c:	429a      	cmp	r2, r3
 801561e:	d101      	bne.n	8015624 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	e006      	b.n	8015632 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	60fb      	str	r3, [r7, #12]
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d1ef      	bne.n	8015610 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8015630:	2300      	movs	r3, #0
}
 8015632:	4618      	mov	r0, r3
 8015634:	3714      	adds	r7, #20
 8015636:	46bd      	mov	sp, r7
 8015638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563c:	4770      	bx	lr
 801563e:	bf00      	nop
 8015640:	24008a14 	.word	0x24008a14

08015644 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801564a:	4b0c      	ldr	r3, [pc, #48]	; (801567c <pbuf_free_ooseq+0x38>)
 801564c:	2200      	movs	r2, #0
 801564e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015650:	4b0b      	ldr	r3, [pc, #44]	; (8015680 <pbuf_free_ooseq+0x3c>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	607b      	str	r3, [r7, #4]
 8015656:	e00a      	b.n	801566e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801565c:	2b00      	cmp	r3, #0
 801565e:	d003      	beq.n	8015668 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	f002 fd95 	bl	8018190 <tcp_free_ooseq>
      return;
 8015666:	e005      	b.n	8015674 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	68db      	ldr	r3, [r3, #12]
 801566c:	607b      	str	r3, [r7, #4]
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d1f1      	bne.n	8015658 <pbuf_free_ooseq+0x14>
    }
  }
}
 8015674:	3708      	adds	r7, #8
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
 801567a:	bf00      	nop
 801567c:	24008a1c 	.word	0x24008a1c
 8015680:	24008a24 	.word	0x24008a24

08015684 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015684:	b480      	push	{r7}
 8015686:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8015688:	4b03      	ldr	r3, [pc, #12]	; (8015698 <pbuf_pool_is_empty+0x14>)
 801568a:	2201      	movs	r2, #1
 801568c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801568e:	bf00      	nop
 8015690:	46bd      	mov	sp, r7
 8015692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015696:	4770      	bx	lr
 8015698:	24008a1c 	.word	0x24008a1c

0801569c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801569c:	b480      	push	{r7}
 801569e:	b085      	sub	sp, #20
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	60f8      	str	r0, [r7, #12]
 80156a4:	60b9      	str	r1, [r7, #8]
 80156a6:	4611      	mov	r1, r2
 80156a8:	461a      	mov	r2, r3
 80156aa:	460b      	mov	r3, r1
 80156ac:	80fb      	strh	r3, [r7, #6]
 80156ae:	4613      	mov	r3, r2
 80156b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	2200      	movs	r2, #0
 80156b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	68ba      	ldr	r2, [r7, #8]
 80156bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	88fa      	ldrh	r2, [r7, #6]
 80156c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	88ba      	ldrh	r2, [r7, #4]
 80156c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80156ca:	8b3b      	ldrh	r3, [r7, #24]
 80156cc:	b2da      	uxtb	r2, r3
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	7f3a      	ldrb	r2, [r7, #28]
 80156d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	2201      	movs	r2, #1
 80156dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	2200      	movs	r2, #0
 80156e2:	73da      	strb	r2, [r3, #15]
}
 80156e4:	bf00      	nop
 80156e6:	3714      	adds	r7, #20
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b08c      	sub	sp, #48	; 0x30
 80156f4:	af02      	add	r7, sp, #8
 80156f6:	4603      	mov	r3, r0
 80156f8:	71fb      	strb	r3, [r7, #7]
 80156fa:	460b      	mov	r3, r1
 80156fc:	80bb      	strh	r3, [r7, #4]
 80156fe:	4613      	mov	r3, r2
 8015700:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8015702:	79fb      	ldrb	r3, [r7, #7]
 8015704:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8015706:	887b      	ldrh	r3, [r7, #2]
 8015708:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801570c:	d07f      	beq.n	801580e <pbuf_alloc+0x11e>
 801570e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8015712:	f300 80c8 	bgt.w	80158a6 <pbuf_alloc+0x1b6>
 8015716:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801571a:	d010      	beq.n	801573e <pbuf_alloc+0x4e>
 801571c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8015720:	f300 80c1 	bgt.w	80158a6 <pbuf_alloc+0x1b6>
 8015724:	2b01      	cmp	r3, #1
 8015726:	d002      	beq.n	801572e <pbuf_alloc+0x3e>
 8015728:	2b41      	cmp	r3, #65	; 0x41
 801572a:	f040 80bc 	bne.w	80158a6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801572e:	887a      	ldrh	r2, [r7, #2]
 8015730:	88bb      	ldrh	r3, [r7, #4]
 8015732:	4619      	mov	r1, r3
 8015734:	2000      	movs	r0, #0
 8015736:	f000 f8d1 	bl	80158dc <pbuf_alloc_reference>
 801573a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801573c:	e0bd      	b.n	80158ba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801573e:	2300      	movs	r3, #0
 8015740:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8015742:	2300      	movs	r3, #0
 8015744:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8015746:	88bb      	ldrh	r3, [r7, #4]
 8015748:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801574a:	2008      	movs	r0, #8
 801574c:	f7ff fbce 	bl	8014eec <memp_malloc>
 8015750:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d109      	bne.n	801576c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8015758:	f7ff ff94 	bl	8015684 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801575e:	2b00      	cmp	r3, #0
 8015760:	d002      	beq.n	8015768 <pbuf_alloc+0x78>
            pbuf_free(p);
 8015762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015764:	f000 faa8 	bl	8015cb8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015768:	2300      	movs	r3, #0
 801576a:	e0a7      	b.n	80158bc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801576c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801576e:	3303      	adds	r3, #3
 8015770:	b29b      	uxth	r3, r3
 8015772:	f023 0303 	bic.w	r3, r3, #3
 8015776:	b29b      	uxth	r3, r3
 8015778:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801577c:	b29b      	uxth	r3, r3
 801577e:	8b7a      	ldrh	r2, [r7, #26]
 8015780:	4293      	cmp	r3, r2
 8015782:	bf28      	it	cs
 8015784:	4613      	movcs	r3, r2
 8015786:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015788:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801578a:	3310      	adds	r3, #16
 801578c:	693a      	ldr	r2, [r7, #16]
 801578e:	4413      	add	r3, r2
 8015790:	3303      	adds	r3, #3
 8015792:	f023 0303 	bic.w	r3, r3, #3
 8015796:	4618      	mov	r0, r3
 8015798:	89f9      	ldrh	r1, [r7, #14]
 801579a:	8b7a      	ldrh	r2, [r7, #26]
 801579c:	2300      	movs	r3, #0
 801579e:	9301      	str	r3, [sp, #4]
 80157a0:	887b      	ldrh	r3, [r7, #2]
 80157a2:	9300      	str	r3, [sp, #0]
 80157a4:	460b      	mov	r3, r1
 80157a6:	4601      	mov	r1, r0
 80157a8:	6938      	ldr	r0, [r7, #16]
 80157aa:	f7ff ff77 	bl	801569c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80157ae:	693b      	ldr	r3, [r7, #16]
 80157b0:	685b      	ldr	r3, [r3, #4]
 80157b2:	f003 0303 	and.w	r3, r3, #3
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d006      	beq.n	80157c8 <pbuf_alloc+0xd8>
 80157ba:	4b42      	ldr	r3, [pc, #264]	; (80158c4 <pbuf_alloc+0x1d4>)
 80157bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80157c0:	4941      	ldr	r1, [pc, #260]	; (80158c8 <pbuf_alloc+0x1d8>)
 80157c2:	4842      	ldr	r0, [pc, #264]	; (80158cc <pbuf_alloc+0x1dc>)
 80157c4:	f009 fc2e 	bl	801f024 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80157c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157ca:	3303      	adds	r3, #3
 80157cc:	f023 0303 	bic.w	r3, r3, #3
 80157d0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80157d4:	d106      	bne.n	80157e4 <pbuf_alloc+0xf4>
 80157d6:	4b3b      	ldr	r3, [pc, #236]	; (80158c4 <pbuf_alloc+0x1d4>)
 80157d8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80157dc:	493c      	ldr	r1, [pc, #240]	; (80158d0 <pbuf_alloc+0x1e0>)
 80157de:	483b      	ldr	r0, [pc, #236]	; (80158cc <pbuf_alloc+0x1dc>)
 80157e0:	f009 fc20 	bl	801f024 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80157e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d102      	bne.n	80157f0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	627b      	str	r3, [r7, #36]	; 0x24
 80157ee:	e002      	b.n	80157f6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80157f0:	69fb      	ldr	r3, [r7, #28]
 80157f2:	693a      	ldr	r2, [r7, #16]
 80157f4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80157fa:	8b7a      	ldrh	r2, [r7, #26]
 80157fc:	89fb      	ldrh	r3, [r7, #14]
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015802:	2300      	movs	r3, #0
 8015804:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8015806:	8b7b      	ldrh	r3, [r7, #26]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d19e      	bne.n	801574a <pbuf_alloc+0x5a>
      break;
 801580c:	e055      	b.n	80158ba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801580e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015810:	3303      	adds	r3, #3
 8015812:	b29b      	uxth	r3, r3
 8015814:	f023 0303 	bic.w	r3, r3, #3
 8015818:	b29a      	uxth	r2, r3
 801581a:	88bb      	ldrh	r3, [r7, #4]
 801581c:	3303      	adds	r3, #3
 801581e:	b29b      	uxth	r3, r3
 8015820:	f023 0303 	bic.w	r3, r3, #3
 8015824:	b29b      	uxth	r3, r3
 8015826:	4413      	add	r3, r2
 8015828:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801582a:	8b3b      	ldrh	r3, [r7, #24]
 801582c:	3310      	adds	r3, #16
 801582e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015830:	8b3a      	ldrh	r2, [r7, #24]
 8015832:	88bb      	ldrh	r3, [r7, #4]
 8015834:	3303      	adds	r3, #3
 8015836:	f023 0303 	bic.w	r3, r3, #3
 801583a:	429a      	cmp	r2, r3
 801583c:	d306      	bcc.n	801584c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801583e:	8afa      	ldrh	r2, [r7, #22]
 8015840:	88bb      	ldrh	r3, [r7, #4]
 8015842:	3303      	adds	r3, #3
 8015844:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015848:	429a      	cmp	r2, r3
 801584a:	d201      	bcs.n	8015850 <pbuf_alloc+0x160>
        return NULL;
 801584c:	2300      	movs	r3, #0
 801584e:	e035      	b.n	80158bc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015850:	8afb      	ldrh	r3, [r7, #22]
 8015852:	4618      	mov	r0, r3
 8015854:	f7ff f9ba 	bl	8014bcc <mem_malloc>
 8015858:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585c:	2b00      	cmp	r3, #0
 801585e:	d101      	bne.n	8015864 <pbuf_alloc+0x174>
        return NULL;
 8015860:	2300      	movs	r3, #0
 8015862:	e02b      	b.n	80158bc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015866:	3310      	adds	r3, #16
 8015868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801586a:	4413      	add	r3, r2
 801586c:	3303      	adds	r3, #3
 801586e:	f023 0303 	bic.w	r3, r3, #3
 8015872:	4618      	mov	r0, r3
 8015874:	88b9      	ldrh	r1, [r7, #4]
 8015876:	88ba      	ldrh	r2, [r7, #4]
 8015878:	2300      	movs	r3, #0
 801587a:	9301      	str	r3, [sp, #4]
 801587c:	887b      	ldrh	r3, [r7, #2]
 801587e:	9300      	str	r3, [sp, #0]
 8015880:	460b      	mov	r3, r1
 8015882:	4601      	mov	r1, r0
 8015884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015886:	f7ff ff09 	bl	801569c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588c:	685b      	ldr	r3, [r3, #4]
 801588e:	f003 0303 	and.w	r3, r3, #3
 8015892:	2b00      	cmp	r3, #0
 8015894:	d010      	beq.n	80158b8 <pbuf_alloc+0x1c8>
 8015896:	4b0b      	ldr	r3, [pc, #44]	; (80158c4 <pbuf_alloc+0x1d4>)
 8015898:	f44f 7291 	mov.w	r2, #290	; 0x122
 801589c:	490d      	ldr	r1, [pc, #52]	; (80158d4 <pbuf_alloc+0x1e4>)
 801589e:	480b      	ldr	r0, [pc, #44]	; (80158cc <pbuf_alloc+0x1dc>)
 80158a0:	f009 fbc0 	bl	801f024 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80158a4:	e008      	b.n	80158b8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80158a6:	4b07      	ldr	r3, [pc, #28]	; (80158c4 <pbuf_alloc+0x1d4>)
 80158a8:	f240 1227 	movw	r2, #295	; 0x127
 80158ac:	490a      	ldr	r1, [pc, #40]	; (80158d8 <pbuf_alloc+0x1e8>)
 80158ae:	4807      	ldr	r0, [pc, #28]	; (80158cc <pbuf_alloc+0x1dc>)
 80158b0:	f009 fbb8 	bl	801f024 <iprintf>
      return NULL;
 80158b4:	2300      	movs	r3, #0
 80158b6:	e001      	b.n	80158bc <pbuf_alloc+0x1cc>
      break;
 80158b8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80158ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3728      	adds	r7, #40	; 0x28
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	08024d84 	.word	0x08024d84
 80158c8:	08024de0 	.word	0x08024de0
 80158cc:	08024e10 	.word	0x08024e10
 80158d0:	08024e38 	.word	0x08024e38
 80158d4:	08024e6c 	.word	0x08024e6c
 80158d8:	08024e98 	.word	0x08024e98

080158dc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b086      	sub	sp, #24
 80158e0:	af02      	add	r7, sp, #8
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	460b      	mov	r3, r1
 80158e6:	807b      	strh	r3, [r7, #2]
 80158e8:	4613      	mov	r3, r2
 80158ea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80158ec:	883b      	ldrh	r3, [r7, #0]
 80158ee:	2b41      	cmp	r3, #65	; 0x41
 80158f0:	d009      	beq.n	8015906 <pbuf_alloc_reference+0x2a>
 80158f2:	883b      	ldrh	r3, [r7, #0]
 80158f4:	2b01      	cmp	r3, #1
 80158f6:	d006      	beq.n	8015906 <pbuf_alloc_reference+0x2a>
 80158f8:	4b0f      	ldr	r3, [pc, #60]	; (8015938 <pbuf_alloc_reference+0x5c>)
 80158fa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80158fe:	490f      	ldr	r1, [pc, #60]	; (801593c <pbuf_alloc_reference+0x60>)
 8015900:	480f      	ldr	r0, [pc, #60]	; (8015940 <pbuf_alloc_reference+0x64>)
 8015902:	f009 fb8f 	bl	801f024 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015906:	2007      	movs	r0, #7
 8015908:	f7ff faf0 	bl	8014eec <memp_malloc>
 801590c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d101      	bne.n	8015918 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015914:	2300      	movs	r3, #0
 8015916:	e00b      	b.n	8015930 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015918:	8879      	ldrh	r1, [r7, #2]
 801591a:	887a      	ldrh	r2, [r7, #2]
 801591c:	2300      	movs	r3, #0
 801591e:	9301      	str	r3, [sp, #4]
 8015920:	883b      	ldrh	r3, [r7, #0]
 8015922:	9300      	str	r3, [sp, #0]
 8015924:	460b      	mov	r3, r1
 8015926:	6879      	ldr	r1, [r7, #4]
 8015928:	68f8      	ldr	r0, [r7, #12]
 801592a:	f7ff feb7 	bl	801569c <pbuf_init_alloced_pbuf>
  return p;
 801592e:	68fb      	ldr	r3, [r7, #12]
}
 8015930:	4618      	mov	r0, r3
 8015932:	3710      	adds	r7, #16
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	08024d84 	.word	0x08024d84
 801593c:	08024eb4 	.word	0x08024eb4
 8015940:	08024e10 	.word	0x08024e10

08015944 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b088      	sub	sp, #32
 8015948:	af02      	add	r7, sp, #8
 801594a:	607b      	str	r3, [r7, #4]
 801594c:	4603      	mov	r3, r0
 801594e:	73fb      	strb	r3, [r7, #15]
 8015950:	460b      	mov	r3, r1
 8015952:	81bb      	strh	r3, [r7, #12]
 8015954:	4613      	mov	r3, r2
 8015956:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015958:	7bfb      	ldrb	r3, [r7, #15]
 801595a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801595c:	8a7b      	ldrh	r3, [r7, #18]
 801595e:	3303      	adds	r3, #3
 8015960:	f023 0203 	bic.w	r2, r3, #3
 8015964:	89bb      	ldrh	r3, [r7, #12]
 8015966:	441a      	add	r2, r3
 8015968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801596a:	429a      	cmp	r2, r3
 801596c:	d901      	bls.n	8015972 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801596e:	2300      	movs	r3, #0
 8015970:	e018      	b.n	80159a4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015972:	6a3b      	ldr	r3, [r7, #32]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d007      	beq.n	8015988 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015978:	8a7b      	ldrh	r3, [r7, #18]
 801597a:	3303      	adds	r3, #3
 801597c:	f023 0303 	bic.w	r3, r3, #3
 8015980:	6a3a      	ldr	r2, [r7, #32]
 8015982:	4413      	add	r3, r2
 8015984:	617b      	str	r3, [r7, #20]
 8015986:	e001      	b.n	801598c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015988:	2300      	movs	r3, #0
 801598a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801598c:	6878      	ldr	r0, [r7, #4]
 801598e:	89b9      	ldrh	r1, [r7, #12]
 8015990:	89ba      	ldrh	r2, [r7, #12]
 8015992:	2302      	movs	r3, #2
 8015994:	9301      	str	r3, [sp, #4]
 8015996:	897b      	ldrh	r3, [r7, #10]
 8015998:	9300      	str	r3, [sp, #0]
 801599a:	460b      	mov	r3, r1
 801599c:	6979      	ldr	r1, [r7, #20]
 801599e:	f7ff fe7d 	bl	801569c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80159a2:	687b      	ldr	r3, [r7, #4]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3718      	adds	r7, #24
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}

080159ac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b084      	sub	sp, #16
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	460b      	mov	r3, r1
 80159b6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d106      	bne.n	80159cc <pbuf_realloc+0x20>
 80159be:	4b3a      	ldr	r3, [pc, #232]	; (8015aa8 <pbuf_realloc+0xfc>)
 80159c0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80159c4:	4939      	ldr	r1, [pc, #228]	; (8015aac <pbuf_realloc+0x100>)
 80159c6:	483a      	ldr	r0, [pc, #232]	; (8015ab0 <pbuf_realloc+0x104>)
 80159c8:	f009 fb2c 	bl	801f024 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	891b      	ldrh	r3, [r3, #8]
 80159d0:	887a      	ldrh	r2, [r7, #2]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d263      	bcs.n	8015a9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	891a      	ldrh	r2, [r3, #8]
 80159da:	887b      	ldrh	r3, [r7, #2]
 80159dc:	1ad3      	subs	r3, r2, r3
 80159de:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80159e0:	887b      	ldrh	r3, [r7, #2]
 80159e2:	817b      	strh	r3, [r7, #10]
  q = p;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80159e8:	e018      	b.n	8015a1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	895b      	ldrh	r3, [r3, #10]
 80159ee:	897a      	ldrh	r2, [r7, #10]
 80159f0:	1ad3      	subs	r3, r2, r3
 80159f2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	891a      	ldrh	r2, [r3, #8]
 80159f8:	893b      	ldrh	r3, [r7, #8]
 80159fa:	1ad3      	subs	r3, r2, r3
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d106      	bne.n	8015a1c <pbuf_realloc+0x70>
 8015a0e:	4b26      	ldr	r3, [pc, #152]	; (8015aa8 <pbuf_realloc+0xfc>)
 8015a10:	f240 12af 	movw	r2, #431	; 0x1af
 8015a14:	4927      	ldr	r1, [pc, #156]	; (8015ab4 <pbuf_realloc+0x108>)
 8015a16:	4826      	ldr	r0, [pc, #152]	; (8015ab0 <pbuf_realloc+0x104>)
 8015a18:	f009 fb04 	bl	801f024 <iprintf>
  while (rem_len > q->len) {
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	895b      	ldrh	r3, [r3, #10]
 8015a20:	897a      	ldrh	r2, [r7, #10]
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d8e1      	bhi.n	80159ea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	7b1b      	ldrb	r3, [r3, #12]
 8015a2a:	f003 030f 	and.w	r3, r3, #15
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d121      	bne.n	8015a76 <pbuf_realloc+0xca>
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	895b      	ldrh	r3, [r3, #10]
 8015a36:	897a      	ldrh	r2, [r7, #10]
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	d01c      	beq.n	8015a76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	7b5b      	ldrb	r3, [r3, #13]
 8015a40:	f003 0302 	and.w	r3, r3, #2
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d116      	bne.n	8015a76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	685a      	ldr	r2, [r3, #4]
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	1ad3      	subs	r3, r2, r3
 8015a50:	b29a      	uxth	r2, r3
 8015a52:	897b      	ldrh	r3, [r7, #10]
 8015a54:	4413      	add	r3, r2
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	4619      	mov	r1, r3
 8015a5a:	68f8      	ldr	r0, [r7, #12]
 8015a5c:	f7fe ffba 	bl	80149d4 <mem_trim>
 8015a60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d106      	bne.n	8015a76 <pbuf_realloc+0xca>
 8015a68:	4b0f      	ldr	r3, [pc, #60]	; (8015aa8 <pbuf_realloc+0xfc>)
 8015a6a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8015a6e:	4912      	ldr	r1, [pc, #72]	; (8015ab8 <pbuf_realloc+0x10c>)
 8015a70:	480f      	ldr	r0, [pc, #60]	; (8015ab0 <pbuf_realloc+0x104>)
 8015a72:	f009 fad7 	bl	801f024 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	897a      	ldrh	r2, [r7, #10]
 8015a7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	895a      	ldrh	r2, [r3, #10]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d004      	beq.n	8015a96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	4618      	mov	r0, r3
 8015a92:	f000 f911 	bl	8015cb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	601a      	str	r2, [r3, #0]
 8015a9c:	e000      	b.n	8015aa0 <pbuf_realloc+0xf4>
    return;
 8015a9e:	bf00      	nop

}
 8015aa0:	3710      	adds	r7, #16
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	08024d84 	.word	0x08024d84
 8015aac:	08024ec8 	.word	0x08024ec8
 8015ab0:	08024e10 	.word	0x08024e10
 8015ab4:	08024ee0 	.word	0x08024ee0
 8015ab8:	08024ef8 	.word	0x08024ef8

08015abc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b086      	sub	sp, #24
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	60b9      	str	r1, [r7, #8]
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d106      	bne.n	8015ade <pbuf_add_header_impl+0x22>
 8015ad0:	4b2b      	ldr	r3, [pc, #172]	; (8015b80 <pbuf_add_header_impl+0xc4>)
 8015ad2:	f240 12df 	movw	r2, #479	; 0x1df
 8015ad6:	492b      	ldr	r1, [pc, #172]	; (8015b84 <pbuf_add_header_impl+0xc8>)
 8015ad8:	482b      	ldr	r0, [pc, #172]	; (8015b88 <pbuf_add_header_impl+0xcc>)
 8015ada:	f009 faa3 	bl	801f024 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d003      	beq.n	8015aec <pbuf_add_header_impl+0x30>
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015aea:	d301      	bcc.n	8015af0 <pbuf_add_header_impl+0x34>
    return 1;
 8015aec:	2301      	movs	r3, #1
 8015aee:	e043      	b.n	8015b78 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d101      	bne.n	8015afa <pbuf_add_header_impl+0x3e>
    return 0;
 8015af6:	2300      	movs	r3, #0
 8015af8:	e03e      	b.n	8015b78 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	891a      	ldrh	r2, [r3, #8]
 8015b02:	8a7b      	ldrh	r3, [r7, #18]
 8015b04:	4413      	add	r3, r2
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	8a7a      	ldrh	r2, [r7, #18]
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d901      	bls.n	8015b12 <pbuf_add_header_impl+0x56>
    return 1;
 8015b0e:	2301      	movs	r3, #1
 8015b10:	e032      	b.n	8015b78 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	7b1b      	ldrb	r3, [r3, #12]
 8015b16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015b18:	8a3b      	ldrh	r3, [r7, #16]
 8015b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d00c      	beq.n	8015b3c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	685a      	ldr	r2, [r3, #4]
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	425b      	negs	r3, r3
 8015b2a:	4413      	add	r3, r2
 8015b2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	3310      	adds	r3, #16
 8015b32:	697a      	ldr	r2, [r7, #20]
 8015b34:	429a      	cmp	r2, r3
 8015b36:	d20d      	bcs.n	8015b54 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015b38:	2301      	movs	r3, #1
 8015b3a:	e01d      	b.n	8015b78 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015b3c:	79fb      	ldrb	r3, [r7, #7]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d006      	beq.n	8015b50 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	685a      	ldr	r2, [r3, #4]
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	425b      	negs	r3, r3
 8015b4a:	4413      	add	r3, r2
 8015b4c:	617b      	str	r3, [r7, #20]
 8015b4e:	e001      	b.n	8015b54 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015b50:	2301      	movs	r3, #1
 8015b52:	e011      	b.n	8015b78 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	697a      	ldr	r2, [r7, #20]
 8015b58:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	895a      	ldrh	r2, [r3, #10]
 8015b5e:	8a7b      	ldrh	r3, [r7, #18]
 8015b60:	4413      	add	r3, r2
 8015b62:	b29a      	uxth	r2, r3
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	891a      	ldrh	r2, [r3, #8]
 8015b6c:	8a7b      	ldrh	r3, [r7, #18]
 8015b6e:	4413      	add	r3, r2
 8015b70:	b29a      	uxth	r2, r3
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	811a      	strh	r2, [r3, #8]


  return 0;
 8015b76:	2300      	movs	r3, #0
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3718      	adds	r7, #24
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	08024d84 	.word	0x08024d84
 8015b84:	08024f14 	.word	0x08024f14
 8015b88:	08024e10 	.word	0x08024e10

08015b8c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
 8015b94:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015b96:	2200      	movs	r2, #0
 8015b98:	6839      	ldr	r1, [r7, #0]
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	f7ff ff8e 	bl	8015abc <pbuf_add_header_impl>
 8015ba0:	4603      	mov	r3, r0
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3708      	adds	r7, #8
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}
	...

08015bac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b084      	sub	sp, #16
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d106      	bne.n	8015bca <pbuf_remove_header+0x1e>
 8015bbc:	4b20      	ldr	r3, [pc, #128]	; (8015c40 <pbuf_remove_header+0x94>)
 8015bbe:	f240 224b 	movw	r2, #587	; 0x24b
 8015bc2:	4920      	ldr	r1, [pc, #128]	; (8015c44 <pbuf_remove_header+0x98>)
 8015bc4:	4820      	ldr	r0, [pc, #128]	; (8015c48 <pbuf_remove_header+0x9c>)
 8015bc6:	f009 fa2d 	bl	801f024 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d003      	beq.n	8015bd8 <pbuf_remove_header+0x2c>
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015bd6:	d301      	bcc.n	8015bdc <pbuf_remove_header+0x30>
    return 1;
 8015bd8:	2301      	movs	r3, #1
 8015bda:	e02c      	b.n	8015c36 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d101      	bne.n	8015be6 <pbuf_remove_header+0x3a>
    return 0;
 8015be2:	2300      	movs	r3, #0
 8015be4:	e027      	b.n	8015c36 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	895b      	ldrh	r3, [r3, #10]
 8015bee:	89fa      	ldrh	r2, [r7, #14]
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d908      	bls.n	8015c06 <pbuf_remove_header+0x5a>
 8015bf4:	4b12      	ldr	r3, [pc, #72]	; (8015c40 <pbuf_remove_header+0x94>)
 8015bf6:	f240 2255 	movw	r2, #597	; 0x255
 8015bfa:	4914      	ldr	r1, [pc, #80]	; (8015c4c <pbuf_remove_header+0xa0>)
 8015bfc:	4812      	ldr	r0, [pc, #72]	; (8015c48 <pbuf_remove_header+0x9c>)
 8015bfe:	f009 fa11 	bl	801f024 <iprintf>
 8015c02:	2301      	movs	r3, #1
 8015c04:	e017      	b.n	8015c36 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	685b      	ldr	r3, [r3, #4]
 8015c0a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	685a      	ldr	r2, [r3, #4]
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	441a      	add	r2, r3
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	895a      	ldrh	r2, [r3, #10]
 8015c1c:	89fb      	ldrh	r3, [r7, #14]
 8015c1e:	1ad3      	subs	r3, r2, r3
 8015c20:	b29a      	uxth	r2, r3
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	891a      	ldrh	r2, [r3, #8]
 8015c2a:	89fb      	ldrh	r3, [r7, #14]
 8015c2c:	1ad3      	subs	r3, r2, r3
 8015c2e:	b29a      	uxth	r2, r3
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015c34:	2300      	movs	r3, #0
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3710      	adds	r7, #16
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	08024d84 	.word	0x08024d84
 8015c44:	08024f14 	.word	0x08024f14
 8015c48:	08024e10 	.word	0x08024e10
 8015c4c:	08024f20 	.word	0x08024f20

08015c50 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	807b      	strh	r3, [r7, #2]
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015c60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	da08      	bge.n	8015c7a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c6c:	425b      	negs	r3, r3
 8015c6e:	4619      	mov	r1, r3
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7ff ff9b 	bl	8015bac <pbuf_remove_header>
 8015c76:	4603      	mov	r3, r0
 8015c78:	e007      	b.n	8015c8a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015c7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c7e:	787a      	ldrb	r2, [r7, #1]
 8015c80:	4619      	mov	r1, r3
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f7ff ff1a 	bl	8015abc <pbuf_add_header_impl>
 8015c88:	4603      	mov	r3, r0
  }
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3708      	adds	r7, #8
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}

08015c92 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015c92:	b580      	push	{r7, lr}
 8015c94:	b082      	sub	sp, #8
 8015c96:	af00      	add	r7, sp, #0
 8015c98:	6078      	str	r0, [r7, #4]
 8015c9a:	460b      	mov	r3, r1
 8015c9c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015c9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f7ff ffd2 	bl	8015c50 <pbuf_header_impl>
 8015cac:	4603      	mov	r3, r0
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3708      	adds	r7, #8
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
	...

08015cb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b086      	sub	sp, #24
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d10b      	bne.n	8015cde <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d106      	bne.n	8015cda <pbuf_free+0x22>
 8015ccc:	4b38      	ldr	r3, [pc, #224]	; (8015db0 <pbuf_free+0xf8>)
 8015cce:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015cd2:	4938      	ldr	r1, [pc, #224]	; (8015db4 <pbuf_free+0xfc>)
 8015cd4:	4838      	ldr	r0, [pc, #224]	; (8015db8 <pbuf_free+0x100>)
 8015cd6:	f009 f9a5 	bl	801f024 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	e063      	b.n	8015da6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015ce2:	e05c      	b.n	8015d9e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	7b9b      	ldrb	r3, [r3, #14]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d106      	bne.n	8015cfa <pbuf_free+0x42>
 8015cec:	4b30      	ldr	r3, [pc, #192]	; (8015db0 <pbuf_free+0xf8>)
 8015cee:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015cf2:	4932      	ldr	r1, [pc, #200]	; (8015dbc <pbuf_free+0x104>)
 8015cf4:	4830      	ldr	r0, [pc, #192]	; (8015db8 <pbuf_free+0x100>)
 8015cf6:	f009 f995 	bl	801f024 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	7b9b      	ldrb	r3, [r3, #14]
 8015cfe:	3b01      	subs	r3, #1
 8015d00:	b2da      	uxtb	r2, r3
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	739a      	strb	r2, [r3, #14]
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	7b9b      	ldrb	r3, [r3, #14]
 8015d0a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015d0c:	7dbb      	ldrb	r3, [r7, #22]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d143      	bne.n	8015d9a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	7b1b      	ldrb	r3, [r3, #12]
 8015d1c:	f003 030f 	and.w	r3, r3, #15
 8015d20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	7b5b      	ldrb	r3, [r3, #13]
 8015d26:	f003 0302 	and.w	r3, r3, #2
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d011      	beq.n	8015d52 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	691b      	ldr	r3, [r3, #16]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d106      	bne.n	8015d48 <pbuf_free+0x90>
 8015d3a:	4b1d      	ldr	r3, [pc, #116]	; (8015db0 <pbuf_free+0xf8>)
 8015d3c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8015d40:	491f      	ldr	r1, [pc, #124]	; (8015dc0 <pbuf_free+0x108>)
 8015d42:	481d      	ldr	r0, [pc, #116]	; (8015db8 <pbuf_free+0x100>)
 8015d44:	f009 f96e 	bl	801f024 <iprintf>
        pc->custom_free_function(p);
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	691b      	ldr	r3, [r3, #16]
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	4798      	blx	r3
 8015d50:	e01d      	b.n	8015d8e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8015d52:	7bfb      	ldrb	r3, [r7, #15]
 8015d54:	2b02      	cmp	r3, #2
 8015d56:	d104      	bne.n	8015d62 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8015d58:	6879      	ldr	r1, [r7, #4]
 8015d5a:	2008      	movs	r0, #8
 8015d5c:	f7ff f936 	bl	8014fcc <memp_free>
 8015d60:	e015      	b.n	8015d8e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8015d62:	7bfb      	ldrb	r3, [r7, #15]
 8015d64:	2b01      	cmp	r3, #1
 8015d66:	d104      	bne.n	8015d72 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8015d68:	6879      	ldr	r1, [r7, #4]
 8015d6a:	2007      	movs	r0, #7
 8015d6c:	f7ff f92e 	bl	8014fcc <memp_free>
 8015d70:	e00d      	b.n	8015d8e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015d72:	7bfb      	ldrb	r3, [r7, #15]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d103      	bne.n	8015d80 <pbuf_free+0xc8>
          mem_free(p);
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f7fe fdc1 	bl	8014900 <mem_free>
 8015d7e:	e006      	b.n	8015d8e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015d80:	4b0b      	ldr	r3, [pc, #44]	; (8015db0 <pbuf_free+0xf8>)
 8015d82:	f240 320f 	movw	r2, #783	; 0x30f
 8015d86:	490f      	ldr	r1, [pc, #60]	; (8015dc4 <pbuf_free+0x10c>)
 8015d88:	480b      	ldr	r0, [pc, #44]	; (8015db8 <pbuf_free+0x100>)
 8015d8a:	f009 f94b 	bl	801f024 <iprintf>
        }
      }
      count++;
 8015d8e:	7dfb      	ldrb	r3, [r7, #23]
 8015d90:	3301      	adds	r3, #1
 8015d92:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	607b      	str	r3, [r7, #4]
 8015d98:	e001      	b.n	8015d9e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d19f      	bne.n	8015ce4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3718      	adds	r7, #24
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	08024d84 	.word	0x08024d84
 8015db4:	08024f14 	.word	0x08024f14
 8015db8:	08024e10 	.word	0x08024e10
 8015dbc:	08024f40 	.word	0x08024f40
 8015dc0:	08024f58 	.word	0x08024f58
 8015dc4:	08024f7c 	.word	0x08024f7c

08015dc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015dc8:	b480      	push	{r7}
 8015dca:	b085      	sub	sp, #20
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015dd4:	e005      	b.n	8015de2 <pbuf_clen+0x1a>
    ++len;
 8015dd6:	89fb      	ldrh	r3, [r7, #14]
 8015dd8:	3301      	adds	r3, #1
 8015dda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d1f6      	bne.n	8015dd6 <pbuf_clen+0xe>
  }
  return len;
 8015de8:	89fb      	ldrh	r3, [r7, #14]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	3714      	adds	r7, #20
 8015dee:	46bd      	mov	sp, r7
 8015df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df4:	4770      	bx	lr
	...

08015df8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d010      	beq.n	8015e28 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7b9b      	ldrb	r3, [r3, #14]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	b2da      	uxtb	r2, r3
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	7b9b      	ldrb	r3, [r3, #14]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d106      	bne.n	8015e28 <pbuf_ref+0x30>
 8015e1a:	4b05      	ldr	r3, [pc, #20]	; (8015e30 <pbuf_ref+0x38>)
 8015e1c:	f240 3242 	movw	r2, #834	; 0x342
 8015e20:	4904      	ldr	r1, [pc, #16]	; (8015e34 <pbuf_ref+0x3c>)
 8015e22:	4805      	ldr	r0, [pc, #20]	; (8015e38 <pbuf_ref+0x40>)
 8015e24:	f009 f8fe 	bl	801f024 <iprintf>
  }
}
 8015e28:	bf00      	nop
 8015e2a:	3708      	adds	r7, #8
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}
 8015e30:	08024d84 	.word	0x08024d84
 8015e34:	08024f90 	.word	0x08024f90
 8015e38:	08024e10 	.word	0x08024e10

08015e3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b084      	sub	sp, #16
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
 8015e44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d002      	beq.n	8015e52 <pbuf_cat+0x16>
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d107      	bne.n	8015e62 <pbuf_cat+0x26>
 8015e52:	4b20      	ldr	r3, [pc, #128]	; (8015ed4 <pbuf_cat+0x98>)
 8015e54:	f240 3259 	movw	r2, #857	; 0x359
 8015e58:	491f      	ldr	r1, [pc, #124]	; (8015ed8 <pbuf_cat+0x9c>)
 8015e5a:	4820      	ldr	r0, [pc, #128]	; (8015edc <pbuf_cat+0xa0>)
 8015e5c:	f009 f8e2 	bl	801f024 <iprintf>
 8015e60:	e034      	b.n	8015ecc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	60fb      	str	r3, [r7, #12]
 8015e66:	e00a      	b.n	8015e7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	891a      	ldrh	r2, [r3, #8]
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	891b      	ldrh	r3, [r3, #8]
 8015e70:	4413      	add	r3, r2
 8015e72:	b29a      	uxth	r2, r3
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	60fb      	str	r3, [r7, #12]
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d1f0      	bne.n	8015e68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	891a      	ldrh	r2, [r3, #8]
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	895b      	ldrh	r3, [r3, #10]
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d006      	beq.n	8015ea0 <pbuf_cat+0x64>
 8015e92:	4b10      	ldr	r3, [pc, #64]	; (8015ed4 <pbuf_cat+0x98>)
 8015e94:	f240 3262 	movw	r2, #866	; 0x362
 8015e98:	4911      	ldr	r1, [pc, #68]	; (8015ee0 <pbuf_cat+0xa4>)
 8015e9a:	4810      	ldr	r0, [pc, #64]	; (8015edc <pbuf_cat+0xa0>)
 8015e9c:	f009 f8c2 	bl	801f024 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d006      	beq.n	8015eb6 <pbuf_cat+0x7a>
 8015ea8:	4b0a      	ldr	r3, [pc, #40]	; (8015ed4 <pbuf_cat+0x98>)
 8015eaa:	f240 3263 	movw	r2, #867	; 0x363
 8015eae:	490d      	ldr	r1, [pc, #52]	; (8015ee4 <pbuf_cat+0xa8>)
 8015eb0:	480a      	ldr	r0, [pc, #40]	; (8015edc <pbuf_cat+0xa0>)
 8015eb2:	f009 f8b7 	bl	801f024 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	891a      	ldrh	r2, [r3, #8]
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	891b      	ldrh	r3, [r3, #8]
 8015ebe:	4413      	add	r3, r2
 8015ec0:	b29a      	uxth	r2, r3
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	683a      	ldr	r2, [r7, #0]
 8015eca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015ecc:	3710      	adds	r7, #16
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}
 8015ed2:	bf00      	nop
 8015ed4:	08024d84 	.word	0x08024d84
 8015ed8:	08024fa4 	.word	0x08024fa4
 8015edc:	08024e10 	.word	0x08024e10
 8015ee0:	08024fdc 	.word	0x08024fdc
 8015ee4:	0802500c 	.word	0x0802500c

08015ee8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b086      	sub	sp, #24
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
 8015ef0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	617b      	str	r3, [r7, #20]
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d008      	beq.n	8015f12 <pbuf_copy+0x2a>
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d005      	beq.n	8015f12 <pbuf_copy+0x2a>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	891a      	ldrh	r2, [r3, #8]
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	891b      	ldrh	r3, [r3, #8]
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d209      	bcs.n	8015f26 <pbuf_copy+0x3e>
 8015f12:	4b57      	ldr	r3, [pc, #348]	; (8016070 <pbuf_copy+0x188>)
 8015f14:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015f18:	4956      	ldr	r1, [pc, #344]	; (8016074 <pbuf_copy+0x18c>)
 8015f1a:	4857      	ldr	r0, [pc, #348]	; (8016078 <pbuf_copy+0x190>)
 8015f1c:	f009 f882 	bl	801f024 <iprintf>
 8015f20:	f06f 030f 	mvn.w	r3, #15
 8015f24:	e09f      	b.n	8016066 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	895b      	ldrh	r3, [r3, #10]
 8015f2a:	461a      	mov	r2, r3
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	1ad2      	subs	r2, r2, r3
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	895b      	ldrh	r3, [r3, #10]
 8015f34:	4619      	mov	r1, r3
 8015f36:	693b      	ldr	r3, [r7, #16]
 8015f38:	1acb      	subs	r3, r1, r3
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d306      	bcc.n	8015f4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	895b      	ldrh	r3, [r3, #10]
 8015f42:	461a      	mov	r2, r3
 8015f44:	693b      	ldr	r3, [r7, #16]
 8015f46:	1ad3      	subs	r3, r2, r3
 8015f48:	60fb      	str	r3, [r7, #12]
 8015f4a:	e005      	b.n	8015f58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	895b      	ldrh	r3, [r3, #10]
 8015f50:	461a      	mov	r2, r3
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	1ad3      	subs	r3, r2, r3
 8015f56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	685a      	ldr	r2, [r3, #4]
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	18d0      	adds	r0, r2, r3
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	685a      	ldr	r2, [r3, #4]
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	4413      	add	r3, r2
 8015f68:	68fa      	ldr	r2, [r7, #12]
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	f008 f93a 	bl	801e1e4 <memcpy>
    offset_to += len;
 8015f70:	697a      	ldr	r2, [r7, #20]
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	4413      	add	r3, r2
 8015f76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015f78:	693a      	ldr	r2, [r7, #16]
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	4413      	add	r3, r2
 8015f7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	895b      	ldrh	r3, [r3, #10]
 8015f84:	461a      	mov	r2, r3
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	d906      	bls.n	8015f9a <pbuf_copy+0xb2>
 8015f8c:	4b38      	ldr	r3, [pc, #224]	; (8016070 <pbuf_copy+0x188>)
 8015f8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8015f92:	493a      	ldr	r1, [pc, #232]	; (801607c <pbuf_copy+0x194>)
 8015f94:	4838      	ldr	r0, [pc, #224]	; (8016078 <pbuf_copy+0x190>)
 8015f96:	f009 f845 	bl	801f024 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	895b      	ldrh	r3, [r3, #10]
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	4293      	cmp	r3, r2
 8015fa4:	d906      	bls.n	8015fb4 <pbuf_copy+0xcc>
 8015fa6:	4b32      	ldr	r3, [pc, #200]	; (8016070 <pbuf_copy+0x188>)
 8015fa8:	f240 32da 	movw	r2, #986	; 0x3da
 8015fac:	4934      	ldr	r1, [pc, #208]	; (8016080 <pbuf_copy+0x198>)
 8015fae:	4832      	ldr	r0, [pc, #200]	; (8016078 <pbuf_copy+0x190>)
 8015fb0:	f009 f838 	bl	801f024 <iprintf>
    if (offset_from >= p_from->len) {
 8015fb4:	683b      	ldr	r3, [r7, #0]
 8015fb6:	895b      	ldrh	r3, [r3, #10]
 8015fb8:	461a      	mov	r2, r3
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	d304      	bcc.n	8015fca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	895b      	ldrh	r3, [r3, #10]
 8015fce:	461a      	mov	r2, r3
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	d114      	bne.n	8016000 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d10c      	bne.n	8016000 <pbuf_copy+0x118>
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d009      	beq.n	8016000 <pbuf_copy+0x118>
 8015fec:	4b20      	ldr	r3, [pc, #128]	; (8016070 <pbuf_copy+0x188>)
 8015fee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8015ff2:	4924      	ldr	r1, [pc, #144]	; (8016084 <pbuf_copy+0x19c>)
 8015ff4:	4820      	ldr	r0, [pc, #128]	; (8016078 <pbuf_copy+0x190>)
 8015ff6:	f009 f815 	bl	801f024 <iprintf>
 8015ffa:	f06f 030f 	mvn.w	r3, #15
 8015ffe:	e032      	b.n	8016066 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d013      	beq.n	801602e <pbuf_copy+0x146>
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	895a      	ldrh	r2, [r3, #10]
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	891b      	ldrh	r3, [r3, #8]
 801600e:	429a      	cmp	r2, r3
 8016010:	d10d      	bne.n	801602e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d009      	beq.n	801602e <pbuf_copy+0x146>
 801601a:	4b15      	ldr	r3, [pc, #84]	; (8016070 <pbuf_copy+0x188>)
 801601c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8016020:	4919      	ldr	r1, [pc, #100]	; (8016088 <pbuf_copy+0x1a0>)
 8016022:	4815      	ldr	r0, [pc, #84]	; (8016078 <pbuf_copy+0x190>)
 8016024:	f008 fffe 	bl	801f024 <iprintf>
 8016028:	f06f 0305 	mvn.w	r3, #5
 801602c:	e01b      	b.n	8016066 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d013      	beq.n	801605c <pbuf_copy+0x174>
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	895a      	ldrh	r2, [r3, #10]
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	891b      	ldrh	r3, [r3, #8]
 801603c:	429a      	cmp	r2, r3
 801603e:	d10d      	bne.n	801605c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d009      	beq.n	801605c <pbuf_copy+0x174>
 8016048:	4b09      	ldr	r3, [pc, #36]	; (8016070 <pbuf_copy+0x188>)
 801604a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801604e:	490e      	ldr	r1, [pc, #56]	; (8016088 <pbuf_copy+0x1a0>)
 8016050:	4809      	ldr	r0, [pc, #36]	; (8016078 <pbuf_copy+0x190>)
 8016052:	f008 ffe7 	bl	801f024 <iprintf>
 8016056:	f06f 0305 	mvn.w	r3, #5
 801605a:	e004      	b.n	8016066 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	2b00      	cmp	r3, #0
 8016060:	f47f af61 	bne.w	8015f26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016064:	2300      	movs	r3, #0
}
 8016066:	4618      	mov	r0, r3
 8016068:	3718      	adds	r7, #24
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}
 801606e:	bf00      	nop
 8016070:	08024d84 	.word	0x08024d84
 8016074:	08025058 	.word	0x08025058
 8016078:	08024e10 	.word	0x08024e10
 801607c:	08025088 	.word	0x08025088
 8016080:	080250a0 	.word	0x080250a0
 8016084:	080250bc 	.word	0x080250bc
 8016088:	080250cc 	.word	0x080250cc

0801608c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b088      	sub	sp, #32
 8016090:	af00      	add	r7, sp, #0
 8016092:	60f8      	str	r0, [r7, #12]
 8016094:	60b9      	str	r1, [r7, #8]
 8016096:	4611      	mov	r1, r2
 8016098:	461a      	mov	r2, r3
 801609a:	460b      	mov	r3, r1
 801609c:	80fb      	strh	r3, [r7, #6]
 801609e:	4613      	mov	r3, r2
 80160a0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80160a2:	2300      	movs	r3, #0
 80160a4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80160a6:	2300      	movs	r3, #0
 80160a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d108      	bne.n	80160c2 <pbuf_copy_partial+0x36>
 80160b0:	4b2b      	ldr	r3, [pc, #172]	; (8016160 <pbuf_copy_partial+0xd4>)
 80160b2:	f240 420a 	movw	r2, #1034	; 0x40a
 80160b6:	492b      	ldr	r1, [pc, #172]	; (8016164 <pbuf_copy_partial+0xd8>)
 80160b8:	482b      	ldr	r0, [pc, #172]	; (8016168 <pbuf_copy_partial+0xdc>)
 80160ba:	f008 ffb3 	bl	801f024 <iprintf>
 80160be:	2300      	movs	r3, #0
 80160c0:	e04a      	b.n	8016158 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d108      	bne.n	80160da <pbuf_copy_partial+0x4e>
 80160c8:	4b25      	ldr	r3, [pc, #148]	; (8016160 <pbuf_copy_partial+0xd4>)
 80160ca:	f240 420b 	movw	r2, #1035	; 0x40b
 80160ce:	4927      	ldr	r1, [pc, #156]	; (801616c <pbuf_copy_partial+0xe0>)
 80160d0:	4825      	ldr	r0, [pc, #148]	; (8016168 <pbuf_copy_partial+0xdc>)
 80160d2:	f008 ffa7 	bl	801f024 <iprintf>
 80160d6:	2300      	movs	r3, #0
 80160d8:	e03e      	b.n	8016158 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	61fb      	str	r3, [r7, #28]
 80160de:	e034      	b.n	801614a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80160e0:	88bb      	ldrh	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d00a      	beq.n	80160fc <pbuf_copy_partial+0x70>
 80160e6:	69fb      	ldr	r3, [r7, #28]
 80160e8:	895b      	ldrh	r3, [r3, #10]
 80160ea:	88ba      	ldrh	r2, [r7, #4]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d305      	bcc.n	80160fc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80160f0:	69fb      	ldr	r3, [r7, #28]
 80160f2:	895b      	ldrh	r3, [r3, #10]
 80160f4:	88ba      	ldrh	r2, [r7, #4]
 80160f6:	1ad3      	subs	r3, r2, r3
 80160f8:	80bb      	strh	r3, [r7, #4]
 80160fa:	e023      	b.n	8016144 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80160fc:	69fb      	ldr	r3, [r7, #28]
 80160fe:	895a      	ldrh	r2, [r3, #10]
 8016100:	88bb      	ldrh	r3, [r7, #4]
 8016102:	1ad3      	subs	r3, r2, r3
 8016104:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016106:	8b3a      	ldrh	r2, [r7, #24]
 8016108:	88fb      	ldrh	r3, [r7, #6]
 801610a:	429a      	cmp	r2, r3
 801610c:	d901      	bls.n	8016112 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801610e:	88fb      	ldrh	r3, [r7, #6]
 8016110:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016112:	8b7b      	ldrh	r3, [r7, #26]
 8016114:	68ba      	ldr	r2, [r7, #8]
 8016116:	18d0      	adds	r0, r2, r3
 8016118:	69fb      	ldr	r3, [r7, #28]
 801611a:	685a      	ldr	r2, [r3, #4]
 801611c:	88bb      	ldrh	r3, [r7, #4]
 801611e:	4413      	add	r3, r2
 8016120:	8b3a      	ldrh	r2, [r7, #24]
 8016122:	4619      	mov	r1, r3
 8016124:	f008 f85e 	bl	801e1e4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016128:	8afa      	ldrh	r2, [r7, #22]
 801612a:	8b3b      	ldrh	r3, [r7, #24]
 801612c:	4413      	add	r3, r2
 801612e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016130:	8b7a      	ldrh	r2, [r7, #26]
 8016132:	8b3b      	ldrh	r3, [r7, #24]
 8016134:	4413      	add	r3, r2
 8016136:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016138:	88fa      	ldrh	r2, [r7, #6]
 801613a:	8b3b      	ldrh	r3, [r7, #24]
 801613c:	1ad3      	subs	r3, r2, r3
 801613e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016140:	2300      	movs	r3, #0
 8016142:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016144:	69fb      	ldr	r3, [r7, #28]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	61fb      	str	r3, [r7, #28]
 801614a:	88fb      	ldrh	r3, [r7, #6]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d002      	beq.n	8016156 <pbuf_copy_partial+0xca>
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d1c4      	bne.n	80160e0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016156:	8afb      	ldrh	r3, [r7, #22]
}
 8016158:	4618      	mov	r0, r3
 801615a:	3720      	adds	r7, #32
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	08024d84 	.word	0x08024d84
 8016164:	080250f8 	.word	0x080250f8
 8016168:	08024e10 	.word	0x08024e10
 801616c:	08025118 	.word	0x08025118

08016170 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8016170:	b480      	push	{r7}
 8016172:	b087      	sub	sp, #28
 8016174:	af00      	add	r7, sp, #0
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	460b      	mov	r3, r1
 801617a:	607a      	str	r2, [r7, #4]
 801617c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801617e:	897b      	ldrh	r3, [r7, #10]
 8016180:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8016186:	e007      	b.n	8016198 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	895b      	ldrh	r3, [r3, #10]
 801618c:	8afa      	ldrh	r2, [r7, #22]
 801618e:	1ad3      	subs	r3, r2, r3
 8016190:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8016192:	693b      	ldr	r3, [r7, #16]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d004      	beq.n	80161a8 <pbuf_skip_const+0x38>
 801619e:	693b      	ldr	r3, [r7, #16]
 80161a0:	895b      	ldrh	r3, [r3, #10]
 80161a2:	8afa      	ldrh	r2, [r7, #22]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d2ef      	bcs.n	8016188 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d002      	beq.n	80161b4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	8afa      	ldrh	r2, [r7, #22]
 80161b2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80161b4:	693b      	ldr	r3, [r7, #16]
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	371c      	adds	r7, #28
 80161ba:	46bd      	mov	sp, r7
 80161bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c0:	4770      	bx	lr
	...

080161c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b084      	sub	sp, #16
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	4603      	mov	r3, r0
 80161cc:	603a      	str	r2, [r7, #0]
 80161ce:	71fb      	strb	r3, [r7, #7]
 80161d0:	460b      	mov	r3, r1
 80161d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80161d4:	683b      	ldr	r3, [r7, #0]
 80161d6:	8919      	ldrh	r1, [r3, #8]
 80161d8:	88ba      	ldrh	r2, [r7, #4]
 80161da:	79fb      	ldrb	r3, [r7, #7]
 80161dc:	4618      	mov	r0, r3
 80161de:	f7ff fa87 	bl	80156f0 <pbuf_alloc>
 80161e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d101      	bne.n	80161ee <pbuf_clone+0x2a>
    return NULL;
 80161ea:	2300      	movs	r3, #0
 80161ec:	e011      	b.n	8016212 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80161ee:	6839      	ldr	r1, [r7, #0]
 80161f0:	68f8      	ldr	r0, [r7, #12]
 80161f2:	f7ff fe79 	bl	8015ee8 <pbuf_copy>
 80161f6:	4603      	mov	r3, r0
 80161f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80161fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d006      	beq.n	8016210 <pbuf_clone+0x4c>
 8016202:	4b06      	ldr	r3, [pc, #24]	; (801621c <pbuf_clone+0x58>)
 8016204:	f240 5224 	movw	r2, #1316	; 0x524
 8016208:	4905      	ldr	r1, [pc, #20]	; (8016220 <pbuf_clone+0x5c>)
 801620a:	4806      	ldr	r0, [pc, #24]	; (8016224 <pbuf_clone+0x60>)
 801620c:	f008 ff0a 	bl	801f024 <iprintf>
  return q;
 8016210:	68fb      	ldr	r3, [r7, #12]
}
 8016212:	4618      	mov	r0, r3
 8016214:	3710      	adds	r7, #16
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}
 801621a:	bf00      	nop
 801621c:	08024d84 	.word	0x08024d84
 8016220:	08025224 	.word	0x08025224
 8016224:	08024e10 	.word	0x08024e10

08016228 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
 8016230:	460b      	mov	r3, r1
 8016232:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8016234:	887b      	ldrh	r3, [r7, #2]
 8016236:	4619      	mov	r1, r3
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f000 f80c 	bl	8016256 <pbuf_try_get_at>
 801623e:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2b00      	cmp	r3, #0
 8016244:	db02      	blt.n	801624c <pbuf_get_at+0x24>
    return (u8_t)ret;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	b2db      	uxtb	r3, r3
 801624a:	e000      	b.n	801624e <pbuf_get_at+0x26>
  }
  return 0;
 801624c:	2300      	movs	r3, #0
}
 801624e:	4618      	mov	r0, r3
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8016256:	b580      	push	{r7, lr}
 8016258:	b084      	sub	sp, #16
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
 801625e:	460b      	mov	r3, r1
 8016260:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8016262:	f107 020a 	add.w	r2, r7, #10
 8016266:	887b      	ldrh	r3, [r7, #2]
 8016268:	4619      	mov	r1, r3
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7ff ff80 	bl	8016170 <pbuf_skip_const>
 8016270:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d00a      	beq.n	801628e <pbuf_try_get_at+0x38>
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	895a      	ldrh	r2, [r3, #10]
 801627c:	897b      	ldrh	r3, [r7, #10]
 801627e:	429a      	cmp	r2, r3
 8016280:	d905      	bls.n	801628e <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	685b      	ldr	r3, [r3, #4]
 8016286:	897a      	ldrh	r2, [r7, #10]
 8016288:	4413      	add	r3, r2
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	e001      	b.n	8016292 <pbuf_try_get_at+0x3c>
  }
  return -1;
 801628e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016292:	4618      	mov	r0, r3
 8016294:	3710      	adds	r7, #16
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}

0801629a <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801629a:	b580      	push	{r7, lr}
 801629c:	b088      	sub	sp, #32
 801629e:	af00      	add	r7, sp, #0
 80162a0:	60f8      	str	r0, [r7, #12]
 80162a2:	607a      	str	r2, [r7, #4]
 80162a4:	461a      	mov	r2, r3
 80162a6:	460b      	mov	r3, r1
 80162a8:	817b      	strh	r3, [r7, #10]
 80162aa:	4613      	mov	r3, r2
 80162ac:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 80162ae:	897b      	ldrh	r3, [r7, #10]
 80162b0:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	891b      	ldrh	r3, [r3, #8]
 80162ba:	4619      	mov	r1, r3
 80162bc:	897a      	ldrh	r2, [r7, #10]
 80162be:	893b      	ldrh	r3, [r7, #8]
 80162c0:	4413      	add	r3, r2
 80162c2:	4299      	cmp	r1, r3
 80162c4:	da0a      	bge.n	80162dc <pbuf_memcmp+0x42>
    return 0xffff;
 80162c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162ca:	e037      	b.n	801633c <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 80162cc:	69bb      	ldr	r3, [r7, #24]
 80162ce:	895b      	ldrh	r3, [r3, #10]
 80162d0:	8bfa      	ldrh	r2, [r7, #30]
 80162d2:	1ad3      	subs	r3, r2, r3
 80162d4:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 80162d6:	69bb      	ldr	r3, [r7, #24]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 80162dc:	69bb      	ldr	r3, [r7, #24]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d004      	beq.n	80162ec <pbuf_memcmp+0x52>
 80162e2:	69bb      	ldr	r3, [r7, #24]
 80162e4:	895b      	ldrh	r3, [r3, #10]
 80162e6:	8bfa      	ldrh	r2, [r7, #30]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d2ef      	bcs.n	80162cc <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 80162ec:	2300      	movs	r3, #0
 80162ee:	82fb      	strh	r3, [r7, #22]
 80162f0:	e01f      	b.n	8016332 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 80162f2:	8bfa      	ldrh	r2, [r7, #30]
 80162f4:	8afb      	ldrh	r3, [r7, #22]
 80162f6:	4413      	add	r3, r2
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	4619      	mov	r1, r3
 80162fc:	69b8      	ldr	r0, [r7, #24]
 80162fe:	f7ff ff93 	bl	8016228 <pbuf_get_at>
 8016302:	4603      	mov	r3, r0
 8016304:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8016306:	8afb      	ldrh	r3, [r7, #22]
 8016308:	687a      	ldr	r2, [r7, #4]
 801630a:	4413      	add	r3, r2
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8016310:	7d7a      	ldrb	r2, [r7, #21]
 8016312:	7d3b      	ldrb	r3, [r7, #20]
 8016314:	429a      	cmp	r2, r3
 8016316:	d009      	beq.n	801632c <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8016318:	8afb      	ldrh	r3, [r7, #22]
 801631a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801631e:	4293      	cmp	r3, r2
 8016320:	bf28      	it	cs
 8016322:	4613      	movcs	r3, r2
 8016324:	b29b      	uxth	r3, r3
 8016326:	3301      	adds	r3, #1
 8016328:	b29b      	uxth	r3, r3
 801632a:	e007      	b.n	801633c <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 801632c:	8afb      	ldrh	r3, [r7, #22]
 801632e:	3301      	adds	r3, #1
 8016330:	82fb      	strh	r3, [r7, #22]
 8016332:	8afa      	ldrh	r2, [r7, #22]
 8016334:	893b      	ldrh	r3, [r7, #8]
 8016336:	429a      	cmp	r2, r3
 8016338:	d3db      	bcc.n	80162f2 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 801633a:	2300      	movs	r3, #0
}
 801633c:	4618      	mov	r0, r3
 801633e:	3720      	adds	r7, #32
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}

08016344 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016348:	f008 fefa 	bl	801f140 <rand>
 801634c:	4603      	mov	r3, r0
 801634e:	b29b      	uxth	r3, r3
 8016350:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016354:	b29b      	uxth	r3, r3
 8016356:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801635a:	b29a      	uxth	r2, r3
 801635c:	4b01      	ldr	r3, [pc, #4]	; (8016364 <tcp_init+0x20>)
 801635e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016360:	bf00      	nop
 8016362:	bd80      	pop	{r7, pc}
 8016364:	24000024 	.word	0x24000024

08016368 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	7d1b      	ldrb	r3, [r3, #20]
 8016374:	2b01      	cmp	r3, #1
 8016376:	d105      	bne.n	8016384 <tcp_free+0x1c>
 8016378:	4b06      	ldr	r3, [pc, #24]	; (8016394 <tcp_free+0x2c>)
 801637a:	22d4      	movs	r2, #212	; 0xd4
 801637c:	4906      	ldr	r1, [pc, #24]	; (8016398 <tcp_free+0x30>)
 801637e:	4807      	ldr	r0, [pc, #28]	; (801639c <tcp_free+0x34>)
 8016380:	f008 fe50 	bl	801f024 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016384:	6879      	ldr	r1, [r7, #4]
 8016386:	2001      	movs	r0, #1
 8016388:	f7fe fe20 	bl	8014fcc <memp_free>
}
 801638c:	bf00      	nop
 801638e:	3708      	adds	r7, #8
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	080252b0 	.word	0x080252b0
 8016398:	0802530c 	.word	0x0802530c
 801639c:	08025320 	.word	0x08025320

080163a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	7d1b      	ldrb	r3, [r3, #20]
 80163ac:	2b01      	cmp	r3, #1
 80163ae:	d105      	bne.n	80163bc <tcp_free_listen+0x1c>
 80163b0:	4b06      	ldr	r3, [pc, #24]	; (80163cc <tcp_free_listen+0x2c>)
 80163b2:	22df      	movs	r2, #223	; 0xdf
 80163b4:	4906      	ldr	r1, [pc, #24]	; (80163d0 <tcp_free_listen+0x30>)
 80163b6:	4807      	ldr	r0, [pc, #28]	; (80163d4 <tcp_free_listen+0x34>)
 80163b8:	f008 fe34 	bl	801f024 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80163bc:	6879      	ldr	r1, [r7, #4]
 80163be:	2002      	movs	r0, #2
 80163c0:	f7fe fe04 	bl	8014fcc <memp_free>
}
 80163c4:	bf00      	nop
 80163c6:	3708      	adds	r7, #8
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	080252b0 	.word	0x080252b0
 80163d0:	08025348 	.word	0x08025348
 80163d4:	08025320 	.word	0x08025320

080163d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80163dc:	f001 f974 	bl	80176c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80163e0:	4b07      	ldr	r3, [pc, #28]	; (8016400 <tcp_tmr+0x28>)
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	3301      	adds	r3, #1
 80163e6:	b2da      	uxtb	r2, r3
 80163e8:	4b05      	ldr	r3, [pc, #20]	; (8016400 <tcp_tmr+0x28>)
 80163ea:	701a      	strb	r2, [r3, #0]
 80163ec:	4b04      	ldr	r3, [pc, #16]	; (8016400 <tcp_tmr+0x28>)
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	f003 0301 	and.w	r3, r3, #1
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d001      	beq.n	80163fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80163f8:	f000 fe26 	bl	8017048 <tcp_slowtmr>
  }
}
 80163fc:	bf00      	nop
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	24005225 	.word	0x24005225

08016404 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b084      	sub	sp, #16
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d105      	bne.n	8016420 <tcp_remove_listener+0x1c>
 8016414:	4b0d      	ldr	r3, [pc, #52]	; (801644c <tcp_remove_listener+0x48>)
 8016416:	22ff      	movs	r2, #255	; 0xff
 8016418:	490d      	ldr	r1, [pc, #52]	; (8016450 <tcp_remove_listener+0x4c>)
 801641a:	480e      	ldr	r0, [pc, #56]	; (8016454 <tcp_remove_listener+0x50>)
 801641c:	f008 fe02 	bl	801f024 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	60fb      	str	r3, [r7, #12]
 8016424:	e00a      	b.n	801643c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801642a:	683a      	ldr	r2, [r7, #0]
 801642c:	429a      	cmp	r2, r3
 801642e:	d102      	bne.n	8016436 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2200      	movs	r2, #0
 8016434:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	68db      	ldr	r3, [r3, #12]
 801643a:	60fb      	str	r3, [r7, #12]
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d1f1      	bne.n	8016426 <tcp_remove_listener+0x22>
    }
  }
}
 8016442:	bf00      	nop
 8016444:	bf00      	nop
 8016446:	3710      	adds	r7, #16
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}
 801644c:	080252b0 	.word	0x080252b0
 8016450:	08025364 	.word	0x08025364
 8016454:	08025320 	.word	0x08025320

08016458 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b084      	sub	sp, #16
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d106      	bne.n	8016474 <tcp_listen_closed+0x1c>
 8016466:	4b14      	ldr	r3, [pc, #80]	; (80164b8 <tcp_listen_closed+0x60>)
 8016468:	f240 1211 	movw	r2, #273	; 0x111
 801646c:	4913      	ldr	r1, [pc, #76]	; (80164bc <tcp_listen_closed+0x64>)
 801646e:	4814      	ldr	r0, [pc, #80]	; (80164c0 <tcp_listen_closed+0x68>)
 8016470:	f008 fdd8 	bl	801f024 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	7d1b      	ldrb	r3, [r3, #20]
 8016478:	2b01      	cmp	r3, #1
 801647a:	d006      	beq.n	801648a <tcp_listen_closed+0x32>
 801647c:	4b0e      	ldr	r3, [pc, #56]	; (80164b8 <tcp_listen_closed+0x60>)
 801647e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016482:	4910      	ldr	r1, [pc, #64]	; (80164c4 <tcp_listen_closed+0x6c>)
 8016484:	480e      	ldr	r0, [pc, #56]	; (80164c0 <tcp_listen_closed+0x68>)
 8016486:	f008 fdcd 	bl	801f024 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801648a:	2301      	movs	r3, #1
 801648c:	60fb      	str	r3, [r7, #12]
 801648e:	e00b      	b.n	80164a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8016490:	4a0d      	ldr	r2, [pc, #52]	; (80164c8 <tcp_listen_closed+0x70>)
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	6879      	ldr	r1, [r7, #4]
 801649c:	4618      	mov	r0, r3
 801649e:	f7ff ffb1 	bl	8016404 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	3301      	adds	r3, #1
 80164a6:	60fb      	str	r3, [r7, #12]
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	2b03      	cmp	r3, #3
 80164ac:	d9f0      	bls.n	8016490 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80164ae:	bf00      	nop
 80164b0:	bf00      	nop
 80164b2:	3710      	adds	r7, #16
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	080252b0 	.word	0x080252b0
 80164bc:	0802538c 	.word	0x0802538c
 80164c0:	08025320 	.word	0x08025320
 80164c4:	08025398 	.word	0x08025398
 80164c8:	08027324 	.word	0x08027324

080164cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80164cc:	b5b0      	push	{r4, r5, r7, lr}
 80164ce:	b088      	sub	sp, #32
 80164d0:	af04      	add	r7, sp, #16
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	460b      	mov	r3, r1
 80164d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d106      	bne.n	80164ec <tcp_close_shutdown+0x20>
 80164de:	4b63      	ldr	r3, [pc, #396]	; (801666c <tcp_close_shutdown+0x1a0>)
 80164e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80164e4:	4962      	ldr	r1, [pc, #392]	; (8016670 <tcp_close_shutdown+0x1a4>)
 80164e6:	4863      	ldr	r0, [pc, #396]	; (8016674 <tcp_close_shutdown+0x1a8>)
 80164e8:	f008 fd9c 	bl	801f024 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80164ec:	78fb      	ldrb	r3, [r7, #3]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d066      	beq.n	80165c0 <tcp_close_shutdown+0xf4>
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	7d1b      	ldrb	r3, [r3, #20]
 80164f6:	2b04      	cmp	r3, #4
 80164f8:	d003      	beq.n	8016502 <tcp_close_shutdown+0x36>
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	7d1b      	ldrb	r3, [r3, #20]
 80164fe:	2b07      	cmp	r3, #7
 8016500:	d15e      	bne.n	80165c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016506:	2b00      	cmp	r3, #0
 8016508:	d104      	bne.n	8016514 <tcp_close_shutdown+0x48>
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801650e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016512:	d055      	beq.n	80165c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	8b5b      	ldrh	r3, [r3, #26]
 8016518:	f003 0310 	and.w	r3, r3, #16
 801651c:	2b00      	cmp	r3, #0
 801651e:	d106      	bne.n	801652e <tcp_close_shutdown+0x62>
 8016520:	4b52      	ldr	r3, [pc, #328]	; (801666c <tcp_close_shutdown+0x1a0>)
 8016522:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8016526:	4954      	ldr	r1, [pc, #336]	; (8016678 <tcp_close_shutdown+0x1ac>)
 8016528:	4852      	ldr	r0, [pc, #328]	; (8016674 <tcp_close_shutdown+0x1a8>)
 801652a:	f008 fd7b 	bl	801f024 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016536:	687d      	ldr	r5, [r7, #4]
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	3304      	adds	r3, #4
 801653c:	687a      	ldr	r2, [r7, #4]
 801653e:	8ad2      	ldrh	r2, [r2, #22]
 8016540:	6879      	ldr	r1, [r7, #4]
 8016542:	8b09      	ldrh	r1, [r1, #24]
 8016544:	9102      	str	r1, [sp, #8]
 8016546:	9201      	str	r2, [sp, #4]
 8016548:	9300      	str	r3, [sp, #0]
 801654a:	462b      	mov	r3, r5
 801654c:	4622      	mov	r2, r4
 801654e:	4601      	mov	r1, r0
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f005 fe85 	bl	801c260 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f001 fc66 	bl	8017e28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801655c:	4b47      	ldr	r3, [pc, #284]	; (801667c <tcp_close_shutdown+0x1b0>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	687a      	ldr	r2, [r7, #4]
 8016562:	429a      	cmp	r2, r3
 8016564:	d105      	bne.n	8016572 <tcp_close_shutdown+0xa6>
 8016566:	4b45      	ldr	r3, [pc, #276]	; (801667c <tcp_close_shutdown+0x1b0>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	68db      	ldr	r3, [r3, #12]
 801656c:	4a43      	ldr	r2, [pc, #268]	; (801667c <tcp_close_shutdown+0x1b0>)
 801656e:	6013      	str	r3, [r2, #0]
 8016570:	e013      	b.n	801659a <tcp_close_shutdown+0xce>
 8016572:	4b42      	ldr	r3, [pc, #264]	; (801667c <tcp_close_shutdown+0x1b0>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	60fb      	str	r3, [r7, #12]
 8016578:	e00c      	b.n	8016594 <tcp_close_shutdown+0xc8>
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	687a      	ldr	r2, [r7, #4]
 8016580:	429a      	cmp	r2, r3
 8016582:	d104      	bne.n	801658e <tcp_close_shutdown+0xc2>
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	68da      	ldr	r2, [r3, #12]
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	60da      	str	r2, [r3, #12]
 801658c:	e005      	b.n	801659a <tcp_close_shutdown+0xce>
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	68db      	ldr	r3, [r3, #12]
 8016592:	60fb      	str	r3, [r7, #12]
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d1ef      	bne.n	801657a <tcp_close_shutdown+0xae>
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	2200      	movs	r2, #0
 801659e:	60da      	str	r2, [r3, #12]
 80165a0:	4b37      	ldr	r3, [pc, #220]	; (8016680 <tcp_close_shutdown+0x1b4>)
 80165a2:	2201      	movs	r2, #1
 80165a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80165a6:	4b37      	ldr	r3, [pc, #220]	; (8016684 <tcp_close_shutdown+0x1b8>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d102      	bne.n	80165b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80165b0:	f004 f8fa 	bl	801a7a8 <tcp_trigger_input_pcb_close>
 80165b4:	e002      	b.n	80165bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80165b6:	6878      	ldr	r0, [r7, #4]
 80165b8:	f7ff fed6 	bl	8016368 <tcp_free>
      }
      return ERR_OK;
 80165bc:	2300      	movs	r3, #0
 80165be:	e050      	b.n	8016662 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	7d1b      	ldrb	r3, [r3, #20]
 80165c4:	2b02      	cmp	r3, #2
 80165c6:	d03b      	beq.n	8016640 <tcp_close_shutdown+0x174>
 80165c8:	2b02      	cmp	r3, #2
 80165ca:	dc44      	bgt.n	8016656 <tcp_close_shutdown+0x18a>
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d002      	beq.n	80165d6 <tcp_close_shutdown+0x10a>
 80165d0:	2b01      	cmp	r3, #1
 80165d2:	d02a      	beq.n	801662a <tcp_close_shutdown+0x15e>
 80165d4:	e03f      	b.n	8016656 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	8adb      	ldrh	r3, [r3, #22]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d021      	beq.n	8016622 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80165de:	4b2a      	ldr	r3, [pc, #168]	; (8016688 <tcp_close_shutdown+0x1bc>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	687a      	ldr	r2, [r7, #4]
 80165e4:	429a      	cmp	r2, r3
 80165e6:	d105      	bne.n	80165f4 <tcp_close_shutdown+0x128>
 80165e8:	4b27      	ldr	r3, [pc, #156]	; (8016688 <tcp_close_shutdown+0x1bc>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	68db      	ldr	r3, [r3, #12]
 80165ee:	4a26      	ldr	r2, [pc, #152]	; (8016688 <tcp_close_shutdown+0x1bc>)
 80165f0:	6013      	str	r3, [r2, #0]
 80165f2:	e013      	b.n	801661c <tcp_close_shutdown+0x150>
 80165f4:	4b24      	ldr	r3, [pc, #144]	; (8016688 <tcp_close_shutdown+0x1bc>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	60bb      	str	r3, [r7, #8]
 80165fa:	e00c      	b.n	8016616 <tcp_close_shutdown+0x14a>
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	687a      	ldr	r2, [r7, #4]
 8016602:	429a      	cmp	r2, r3
 8016604:	d104      	bne.n	8016610 <tcp_close_shutdown+0x144>
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	68da      	ldr	r2, [r3, #12]
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	60da      	str	r2, [r3, #12]
 801660e:	e005      	b.n	801661c <tcp_close_shutdown+0x150>
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	68db      	ldr	r3, [r3, #12]
 8016614:	60bb      	str	r3, [r7, #8]
 8016616:	68bb      	ldr	r3, [r7, #8]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d1ef      	bne.n	80165fc <tcp_close_shutdown+0x130>
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	2200      	movs	r2, #0
 8016620:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8016622:	6878      	ldr	r0, [r7, #4]
 8016624:	f7ff fea0 	bl	8016368 <tcp_free>
      break;
 8016628:	e01a      	b.n	8016660 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f7ff ff14 	bl	8016458 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016630:	6879      	ldr	r1, [r7, #4]
 8016632:	4816      	ldr	r0, [pc, #88]	; (801668c <tcp_close_shutdown+0x1c0>)
 8016634:	f001 fc48 	bl	8017ec8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8016638:	6878      	ldr	r0, [r7, #4]
 801663a:	f7ff feb1 	bl	80163a0 <tcp_free_listen>
      break;
 801663e:	e00f      	b.n	8016660 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016640:	6879      	ldr	r1, [r7, #4]
 8016642:	480e      	ldr	r0, [pc, #56]	; (801667c <tcp_close_shutdown+0x1b0>)
 8016644:	f001 fc40 	bl	8017ec8 <tcp_pcb_remove>
 8016648:	4b0d      	ldr	r3, [pc, #52]	; (8016680 <tcp_close_shutdown+0x1b4>)
 801664a:	2201      	movs	r2, #1
 801664c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f7ff fe8a 	bl	8016368 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016654:	e004      	b.n	8016660 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f000 f81a 	bl	8016690 <tcp_close_shutdown_fin>
 801665c:	4603      	mov	r3, r0
 801665e:	e000      	b.n	8016662 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8016660:	2300      	movs	r3, #0
}
 8016662:	4618      	mov	r0, r3
 8016664:	3710      	adds	r7, #16
 8016666:	46bd      	mov	sp, r7
 8016668:	bdb0      	pop	{r4, r5, r7, pc}
 801666a:	bf00      	nop
 801666c:	080252b0 	.word	0x080252b0
 8016670:	080253b0 	.word	0x080253b0
 8016674:	08025320 	.word	0x08025320
 8016678:	080253d0 	.word	0x080253d0
 801667c:	24008a24 	.word	0x24008a24
 8016680:	24008a20 	.word	0x24008a20
 8016684:	24008a38 	.word	0x24008a38
 8016688:	24008a30 	.word	0x24008a30
 801668c:	24008a2c 	.word	0x24008a2c

08016690 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b084      	sub	sp, #16
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d106      	bne.n	80166ac <tcp_close_shutdown_fin+0x1c>
 801669e:	4b2e      	ldr	r3, [pc, #184]	; (8016758 <tcp_close_shutdown_fin+0xc8>)
 80166a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80166a4:	492d      	ldr	r1, [pc, #180]	; (801675c <tcp_close_shutdown_fin+0xcc>)
 80166a6:	482e      	ldr	r0, [pc, #184]	; (8016760 <tcp_close_shutdown_fin+0xd0>)
 80166a8:	f008 fcbc 	bl	801f024 <iprintf>

  switch (pcb->state) {
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	7d1b      	ldrb	r3, [r3, #20]
 80166b0:	2b07      	cmp	r3, #7
 80166b2:	d020      	beq.n	80166f6 <tcp_close_shutdown_fin+0x66>
 80166b4:	2b07      	cmp	r3, #7
 80166b6:	dc2b      	bgt.n	8016710 <tcp_close_shutdown_fin+0x80>
 80166b8:	2b03      	cmp	r3, #3
 80166ba:	d002      	beq.n	80166c2 <tcp_close_shutdown_fin+0x32>
 80166bc:	2b04      	cmp	r3, #4
 80166be:	d00d      	beq.n	80166dc <tcp_close_shutdown_fin+0x4c>
 80166c0:	e026      	b.n	8016710 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f004 feda 	bl	801b47c <tcp_send_fin>
 80166c8:	4603      	mov	r3, r0
 80166ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80166cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d11f      	bne.n	8016714 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2205      	movs	r2, #5
 80166d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80166da:	e01b      	b.n	8016714 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f004 fecd 	bl	801b47c <tcp_send_fin>
 80166e2:	4603      	mov	r3, r0
 80166e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80166e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d114      	bne.n	8016718 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2205      	movs	r2, #5
 80166f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80166f4:	e010      	b.n	8016718 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f004 fec0 	bl	801b47c <tcp_send_fin>
 80166fc:	4603      	mov	r3, r0
 80166fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d109      	bne.n	801671c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2209      	movs	r2, #9
 801670c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801670e:	e005      	b.n	801671c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8016710:	2300      	movs	r3, #0
 8016712:	e01c      	b.n	801674e <tcp_close_shutdown_fin+0xbe>
      break;
 8016714:	bf00      	nop
 8016716:	e002      	b.n	801671e <tcp_close_shutdown_fin+0x8e>
      break;
 8016718:	bf00      	nop
 801671a:	e000      	b.n	801671e <tcp_close_shutdown_fin+0x8e>
      break;
 801671c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801671e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d103      	bne.n	801672e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f004 ffe6 	bl	801b6f8 <tcp_output>
 801672c:	e00d      	b.n	801674a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801672e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016736:	d108      	bne.n	801674a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	8b5b      	ldrh	r3, [r3, #26]
 801673c:	f043 0308 	orr.w	r3, r3, #8
 8016740:	b29a      	uxth	r2, r3
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016746:	2300      	movs	r3, #0
 8016748:	e001      	b.n	801674e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801674a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801674e:	4618      	mov	r0, r3
 8016750:	3710      	adds	r7, #16
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}
 8016756:	bf00      	nop
 8016758:	080252b0 	.word	0x080252b0
 801675c:	0802538c 	.word	0x0802538c
 8016760:	08025320 	.word	0x08025320

08016764 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d109      	bne.n	8016786 <tcp_close+0x22>
 8016772:	4b0f      	ldr	r3, [pc, #60]	; (80167b0 <tcp_close+0x4c>)
 8016774:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016778:	490e      	ldr	r1, [pc, #56]	; (80167b4 <tcp_close+0x50>)
 801677a:	480f      	ldr	r0, [pc, #60]	; (80167b8 <tcp_close+0x54>)
 801677c:	f008 fc52 	bl	801f024 <iprintf>
 8016780:	f06f 030f 	mvn.w	r3, #15
 8016784:	e00f      	b.n	80167a6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	7d1b      	ldrb	r3, [r3, #20]
 801678a:	2b01      	cmp	r3, #1
 801678c:	d006      	beq.n	801679c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	8b5b      	ldrh	r3, [r3, #26]
 8016792:	f043 0310 	orr.w	r3, r3, #16
 8016796:	b29a      	uxth	r2, r3
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801679c:	2101      	movs	r1, #1
 801679e:	6878      	ldr	r0, [r7, #4]
 80167a0:	f7ff fe94 	bl	80164cc <tcp_close_shutdown>
 80167a4:	4603      	mov	r3, r0
}
 80167a6:	4618      	mov	r0, r3
 80167a8:	3708      	adds	r7, #8
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}
 80167ae:	bf00      	nop
 80167b0:	080252b0 	.word	0x080252b0
 80167b4:	080253ec 	.word	0x080253ec
 80167b8:	08025320 	.word	0x08025320

080167bc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b08e      	sub	sp, #56	; 0x38
 80167c0:	af04      	add	r7, sp, #16
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d107      	bne.n	80167dc <tcp_abandon+0x20>
 80167cc:	4b52      	ldr	r3, [pc, #328]	; (8016918 <tcp_abandon+0x15c>)
 80167ce:	f240 223d 	movw	r2, #573	; 0x23d
 80167d2:	4952      	ldr	r1, [pc, #328]	; (801691c <tcp_abandon+0x160>)
 80167d4:	4852      	ldr	r0, [pc, #328]	; (8016920 <tcp_abandon+0x164>)
 80167d6:	f008 fc25 	bl	801f024 <iprintf>
 80167da:	e099      	b.n	8016910 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	7d1b      	ldrb	r3, [r3, #20]
 80167e0:	2b01      	cmp	r3, #1
 80167e2:	d106      	bne.n	80167f2 <tcp_abandon+0x36>
 80167e4:	4b4c      	ldr	r3, [pc, #304]	; (8016918 <tcp_abandon+0x15c>)
 80167e6:	f44f 7210 	mov.w	r2, #576	; 0x240
 80167ea:	494e      	ldr	r1, [pc, #312]	; (8016924 <tcp_abandon+0x168>)
 80167ec:	484c      	ldr	r0, [pc, #304]	; (8016920 <tcp_abandon+0x164>)
 80167ee:	f008 fc19 	bl	801f024 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	7d1b      	ldrb	r3, [r3, #20]
 80167f6:	2b0a      	cmp	r3, #10
 80167f8:	d107      	bne.n	801680a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80167fa:	6879      	ldr	r1, [r7, #4]
 80167fc:	484a      	ldr	r0, [pc, #296]	; (8016928 <tcp_abandon+0x16c>)
 80167fe:	f001 fb63 	bl	8017ec8 <tcp_pcb_remove>
    tcp_free(pcb);
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	f7ff fdb0 	bl	8016368 <tcp_free>
 8016808:	e082      	b.n	8016910 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801680a:	2300      	movs	r3, #0
 801680c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801680e:	2300      	movs	r3, #0
 8016810:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016816:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801681c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016824:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	691b      	ldr	r3, [r3, #16]
 801682a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	7d1b      	ldrb	r3, [r3, #20]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d126      	bne.n	8016882 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	8adb      	ldrh	r3, [r3, #22]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d02e      	beq.n	801689a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801683c:	4b3b      	ldr	r3, [pc, #236]	; (801692c <tcp_abandon+0x170>)
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	687a      	ldr	r2, [r7, #4]
 8016842:	429a      	cmp	r2, r3
 8016844:	d105      	bne.n	8016852 <tcp_abandon+0x96>
 8016846:	4b39      	ldr	r3, [pc, #228]	; (801692c <tcp_abandon+0x170>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	68db      	ldr	r3, [r3, #12]
 801684c:	4a37      	ldr	r2, [pc, #220]	; (801692c <tcp_abandon+0x170>)
 801684e:	6013      	str	r3, [r2, #0]
 8016850:	e013      	b.n	801687a <tcp_abandon+0xbe>
 8016852:	4b36      	ldr	r3, [pc, #216]	; (801692c <tcp_abandon+0x170>)
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	61fb      	str	r3, [r7, #28]
 8016858:	e00c      	b.n	8016874 <tcp_abandon+0xb8>
 801685a:	69fb      	ldr	r3, [r7, #28]
 801685c:	68db      	ldr	r3, [r3, #12]
 801685e:	687a      	ldr	r2, [r7, #4]
 8016860:	429a      	cmp	r2, r3
 8016862:	d104      	bne.n	801686e <tcp_abandon+0xb2>
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	68da      	ldr	r2, [r3, #12]
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	60da      	str	r2, [r3, #12]
 801686c:	e005      	b.n	801687a <tcp_abandon+0xbe>
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	68db      	ldr	r3, [r3, #12]
 8016872:	61fb      	str	r3, [r7, #28]
 8016874:	69fb      	ldr	r3, [r7, #28]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d1ef      	bne.n	801685a <tcp_abandon+0x9e>
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2200      	movs	r2, #0
 801687e:	60da      	str	r2, [r3, #12]
 8016880:	e00b      	b.n	801689a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	8adb      	ldrh	r3, [r3, #22]
 801688a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801688c:	6879      	ldr	r1, [r7, #4]
 801688e:	4828      	ldr	r0, [pc, #160]	; (8016930 <tcp_abandon+0x174>)
 8016890:	f001 fb1a 	bl	8017ec8 <tcp_pcb_remove>
 8016894:	4b27      	ldr	r3, [pc, #156]	; (8016934 <tcp_abandon+0x178>)
 8016896:	2201      	movs	r2, #1
 8016898:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d004      	beq.n	80168ac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168a6:	4618      	mov	r0, r3
 80168a8:	f000 ffee 	bl	8017888 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d004      	beq.n	80168be <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168b8:	4618      	mov	r0, r3
 80168ba:	f000 ffe5 	bl	8017888 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d004      	beq.n	80168d0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168ca:	4618      	mov	r0, r3
 80168cc:	f000 ffdc 	bl	8017888 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80168d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d00e      	beq.n	80168f4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80168d6:	6879      	ldr	r1, [r7, #4]
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	3304      	adds	r3, #4
 80168dc:	687a      	ldr	r2, [r7, #4]
 80168de:	8b12      	ldrh	r2, [r2, #24]
 80168e0:	9202      	str	r2, [sp, #8]
 80168e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80168e4:	9201      	str	r2, [sp, #4]
 80168e6:	9300      	str	r3, [sp, #0]
 80168e8:	460b      	mov	r3, r1
 80168ea:	697a      	ldr	r2, [r7, #20]
 80168ec:	69b9      	ldr	r1, [r7, #24]
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f005 fcb6 	bl	801c260 <tcp_rst>
    }
    last_state = pcb->state;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	7d1b      	ldrb	r3, [r3, #20]
 80168f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f7ff fd34 	bl	8016368 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016900:	693b      	ldr	r3, [r7, #16]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d004      	beq.n	8016910 <tcp_abandon+0x154>
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	f06f 010c 	mvn.w	r1, #12
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	4798      	blx	r3
  }
}
 8016910:	3728      	adds	r7, #40	; 0x28
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	080252b0 	.word	0x080252b0
 801691c:	08025420 	.word	0x08025420
 8016920:	08025320 	.word	0x08025320
 8016924:	0802543c 	.word	0x0802543c
 8016928:	24008a34 	.word	0x24008a34
 801692c:	24008a30 	.word	0x24008a30
 8016930:	24008a24 	.word	0x24008a24
 8016934:	24008a20 	.word	0x24008a20

08016938 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016940:	2101      	movs	r1, #1
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f7ff ff3a 	bl	80167bc <tcp_abandon>
}
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b088      	sub	sp, #32
 8016954:	af00      	add	r7, sp, #0
 8016956:	60f8      	str	r0, [r7, #12]
 8016958:	60b9      	str	r1, [r7, #8]
 801695a:	4613      	mov	r3, r2
 801695c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801695e:	2304      	movs	r3, #4
 8016960:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d101      	bne.n	801696c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016968:	4b3e      	ldr	r3, [pc, #248]	; (8016a64 <tcp_bind+0x114>)
 801696a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d109      	bne.n	8016986 <tcp_bind+0x36>
 8016972:	4b3d      	ldr	r3, [pc, #244]	; (8016a68 <tcp_bind+0x118>)
 8016974:	f240 22a9 	movw	r2, #681	; 0x2a9
 8016978:	493c      	ldr	r1, [pc, #240]	; (8016a6c <tcp_bind+0x11c>)
 801697a:	483d      	ldr	r0, [pc, #244]	; (8016a70 <tcp_bind+0x120>)
 801697c:	f008 fb52 	bl	801f024 <iprintf>
 8016980:	f06f 030f 	mvn.w	r3, #15
 8016984:	e06a      	b.n	8016a5c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	7d1b      	ldrb	r3, [r3, #20]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d009      	beq.n	80169a2 <tcp_bind+0x52>
 801698e:	4b36      	ldr	r3, [pc, #216]	; (8016a68 <tcp_bind+0x118>)
 8016990:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016994:	4937      	ldr	r1, [pc, #220]	; (8016a74 <tcp_bind+0x124>)
 8016996:	4836      	ldr	r0, [pc, #216]	; (8016a70 <tcp_bind+0x120>)
 8016998:	f008 fb44 	bl	801f024 <iprintf>
 801699c:	f06f 0305 	mvn.w	r3, #5
 80169a0:	e05c      	b.n	8016a5c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80169a2:	88fb      	ldrh	r3, [r7, #6]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d109      	bne.n	80169bc <tcp_bind+0x6c>
    port = tcp_new_port();
 80169a8:	f000 f9f0 	bl	8016d8c <tcp_new_port>
 80169ac:	4603      	mov	r3, r0
 80169ae:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80169b0:	88fb      	ldrh	r3, [r7, #6]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d135      	bne.n	8016a22 <tcp_bind+0xd2>
      return ERR_BUF;
 80169b6:	f06f 0301 	mvn.w	r3, #1
 80169ba:	e04f      	b.n	8016a5c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80169bc:	2300      	movs	r3, #0
 80169be:	61fb      	str	r3, [r7, #28]
 80169c0:	e02b      	b.n	8016a1a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80169c2:	4a2d      	ldr	r2, [pc, #180]	; (8016a78 <tcp_bind+0x128>)
 80169c4:	69fb      	ldr	r3, [r7, #28]
 80169c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	61bb      	str	r3, [r7, #24]
 80169ce:	e01e      	b.n	8016a0e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80169d0:	69bb      	ldr	r3, [r7, #24]
 80169d2:	8adb      	ldrh	r3, [r3, #22]
 80169d4:	88fa      	ldrh	r2, [r7, #6]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d116      	bne.n	8016a08 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80169da:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d010      	beq.n	8016a02 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80169e0:	69bb      	ldr	r3, [r7, #24]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d00c      	beq.n	8016a02 <tcp_bind+0xb2>
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d009      	beq.n	8016a02 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80169ee:	68bb      	ldr	r3, [r7, #8]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d005      	beq.n	8016a02 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80169f6:	69bb      	ldr	r3, [r7, #24]
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d102      	bne.n	8016a08 <tcp_bind+0xb8>
              return ERR_USE;
 8016a02:	f06f 0307 	mvn.w	r3, #7
 8016a06:	e029      	b.n	8016a5c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016a08:	69bb      	ldr	r3, [r7, #24]
 8016a0a:	68db      	ldr	r3, [r3, #12]
 8016a0c:	61bb      	str	r3, [r7, #24]
 8016a0e:	69bb      	ldr	r3, [r7, #24]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d1dd      	bne.n	80169d0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8016a14:	69fb      	ldr	r3, [r7, #28]
 8016a16:	3301      	adds	r3, #1
 8016a18:	61fb      	str	r3, [r7, #28]
 8016a1a:	69fa      	ldr	r2, [r7, #28]
 8016a1c:	697b      	ldr	r3, [r7, #20]
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	dbcf      	blt.n	80169c2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d00c      	beq.n	8016a42 <tcp_bind+0xf2>
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d008      	beq.n	8016a42 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d002      	beq.n	8016a3c <tcp_bind+0xec>
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	e000      	b.n	8016a3e <tcp_bind+0xee>
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	68fa      	ldr	r2, [r7, #12]
 8016a40:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	88fa      	ldrh	r2, [r7, #6]
 8016a46:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016a48:	4b0c      	ldr	r3, [pc, #48]	; (8016a7c <tcp_bind+0x12c>)
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	60da      	str	r2, [r3, #12]
 8016a50:	4a0a      	ldr	r2, [pc, #40]	; (8016a7c <tcp_bind+0x12c>)
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	6013      	str	r3, [r2, #0]
 8016a56:	f005 fdc5 	bl	801c5e4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016a5a:	2300      	movs	r3, #0
}
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3720      	adds	r7, #32
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}
 8016a64:	08027278 	.word	0x08027278
 8016a68:	080252b0 	.word	0x080252b0
 8016a6c:	08025470 	.word	0x08025470
 8016a70:	08025320 	.word	0x08025320
 8016a74:	08025488 	.word	0x08025488
 8016a78:	08027324 	.word	0x08027324
 8016a7c:	24008a30 	.word	0x24008a30

08016a80 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b084      	sub	sp, #16
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	60f8      	str	r0, [r7, #12]
 8016a88:	60b9      	str	r1, [r7, #8]
 8016a8a:	4613      	mov	r3, r2
 8016a8c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8016a8e:	68bb      	ldr	r3, [r7, #8]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d106      	bne.n	8016aa2 <tcp_accept_null+0x22>
 8016a94:	4b07      	ldr	r3, [pc, #28]	; (8016ab4 <tcp_accept_null+0x34>)
 8016a96:	f240 320f 	movw	r2, #783	; 0x30f
 8016a9a:	4907      	ldr	r1, [pc, #28]	; (8016ab8 <tcp_accept_null+0x38>)
 8016a9c:	4807      	ldr	r0, [pc, #28]	; (8016abc <tcp_accept_null+0x3c>)
 8016a9e:	f008 fac1 	bl	801f024 <iprintf>

  tcp_abort(pcb);
 8016aa2:	68b8      	ldr	r0, [r7, #8]
 8016aa4:	f7ff ff48 	bl	8016938 <tcp_abort>

  return ERR_ABRT;
 8016aa8:	f06f 030c 	mvn.w	r3, #12
}
 8016aac:	4618      	mov	r0, r3
 8016aae:	3710      	adds	r7, #16
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	bd80      	pop	{r7, pc}
 8016ab4:	080252b0 	.word	0x080252b0
 8016ab8:	080254b0 	.word	0x080254b0
 8016abc:	08025320 	.word	0x08025320

08016ac0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
 8016ac8:	460b      	mov	r3, r1
 8016aca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8016acc:	78fb      	ldrb	r3, [r7, #3]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f000 f806 	bl	8016ae4 <tcp_listen_with_backlog_and_err>
 8016ad8:	4603      	mov	r3, r0
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	3708      	adds	r7, #8
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
	...

08016ae4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b088      	sub	sp, #32
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	60f8      	str	r0, [r7, #12]
 8016aec:	460b      	mov	r3, r1
 8016aee:	607a      	str	r2, [r7, #4]
 8016af0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016af2:	2300      	movs	r3, #0
 8016af4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d109      	bne.n	8016b10 <tcp_listen_with_backlog_and_err+0x2c>
 8016afc:	4b47      	ldr	r3, [pc, #284]	; (8016c1c <tcp_listen_with_backlog_and_err+0x138>)
 8016afe:	f240 3259 	movw	r2, #857	; 0x359
 8016b02:	4947      	ldr	r1, [pc, #284]	; (8016c20 <tcp_listen_with_backlog_and_err+0x13c>)
 8016b04:	4847      	ldr	r0, [pc, #284]	; (8016c24 <tcp_listen_with_backlog_and_err+0x140>)
 8016b06:	f008 fa8d 	bl	801f024 <iprintf>
 8016b0a:	23f0      	movs	r3, #240	; 0xf0
 8016b0c:	76fb      	strb	r3, [r7, #27]
 8016b0e:	e079      	b.n	8016c04 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	7d1b      	ldrb	r3, [r3, #20]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d009      	beq.n	8016b2c <tcp_listen_with_backlog_and_err+0x48>
 8016b18:	4b40      	ldr	r3, [pc, #256]	; (8016c1c <tcp_listen_with_backlog_and_err+0x138>)
 8016b1a:	f240 325a 	movw	r2, #858	; 0x35a
 8016b1e:	4942      	ldr	r1, [pc, #264]	; (8016c28 <tcp_listen_with_backlog_and_err+0x144>)
 8016b20:	4840      	ldr	r0, [pc, #256]	; (8016c24 <tcp_listen_with_backlog_and_err+0x140>)
 8016b22:	f008 fa7f 	bl	801f024 <iprintf>
 8016b26:	23f1      	movs	r3, #241	; 0xf1
 8016b28:	76fb      	strb	r3, [r7, #27]
 8016b2a:	e06b      	b.n	8016c04 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	7d1b      	ldrb	r3, [r3, #20]
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	d104      	bne.n	8016b3e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016b38:	23f7      	movs	r3, #247	; 0xf7
 8016b3a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016b3c:	e062      	b.n	8016c04 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016b3e:	2002      	movs	r0, #2
 8016b40:	f7fe f9d4 	bl	8014eec <memp_malloc>
 8016b44:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8016b46:	69fb      	ldr	r3, [r7, #28]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d102      	bne.n	8016b52 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8016b4c:	23ff      	movs	r3, #255	; 0xff
 8016b4e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016b50:	e058      	b.n	8016c04 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	691a      	ldr	r2, [r3, #16]
 8016b56:	69fb      	ldr	r3, [r7, #28]
 8016b58:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	8ada      	ldrh	r2, [r3, #22]
 8016b5e:	69fb      	ldr	r3, [r7, #28]
 8016b60:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8016b62:	69fb      	ldr	r3, [r7, #28]
 8016b64:	2201      	movs	r2, #1
 8016b66:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	7d5a      	ldrb	r2, [r3, #21]
 8016b6c:	69fb      	ldr	r3, [r7, #28]
 8016b6e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	7a5a      	ldrb	r2, [r3, #9]
 8016b74:	69fb      	ldr	r3, [r7, #28]
 8016b76:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	7ada      	ldrb	r2, [r3, #11]
 8016b82:	69fb      	ldr	r3, [r7, #28]
 8016b84:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	7a9a      	ldrb	r2, [r3, #10]
 8016b8a:	69fb      	ldr	r3, [r7, #28]
 8016b8c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	681a      	ldr	r2, [r3, #0]
 8016b92:	69fb      	ldr	r3, [r7, #28]
 8016b94:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	8adb      	ldrh	r3, [r3, #22]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d021      	beq.n	8016be2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016b9e:	4b23      	ldr	r3, [pc, #140]	; (8016c2c <tcp_listen_with_backlog_and_err+0x148>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	68fa      	ldr	r2, [r7, #12]
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	d105      	bne.n	8016bb4 <tcp_listen_with_backlog_and_err+0xd0>
 8016ba8:	4b20      	ldr	r3, [pc, #128]	; (8016c2c <tcp_listen_with_backlog_and_err+0x148>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	4a1f      	ldr	r2, [pc, #124]	; (8016c2c <tcp_listen_with_backlog_and_err+0x148>)
 8016bb0:	6013      	str	r3, [r2, #0]
 8016bb2:	e013      	b.n	8016bdc <tcp_listen_with_backlog_and_err+0xf8>
 8016bb4:	4b1d      	ldr	r3, [pc, #116]	; (8016c2c <tcp_listen_with_backlog_and_err+0x148>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	617b      	str	r3, [r7, #20]
 8016bba:	e00c      	b.n	8016bd6 <tcp_listen_with_backlog_and_err+0xf2>
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	68db      	ldr	r3, [r3, #12]
 8016bc0:	68fa      	ldr	r2, [r7, #12]
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	d104      	bne.n	8016bd0 <tcp_listen_with_backlog_and_err+0xec>
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	68da      	ldr	r2, [r3, #12]
 8016bca:	697b      	ldr	r3, [r7, #20]
 8016bcc:	60da      	str	r2, [r3, #12]
 8016bce:	e005      	b.n	8016bdc <tcp_listen_with_backlog_and_err+0xf8>
 8016bd0:	697b      	ldr	r3, [r7, #20]
 8016bd2:	68db      	ldr	r3, [r3, #12]
 8016bd4:	617b      	str	r3, [r7, #20]
 8016bd6:	697b      	ldr	r3, [r7, #20]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d1ef      	bne.n	8016bbc <tcp_listen_with_backlog_and_err+0xd8>
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	2200      	movs	r2, #0
 8016be0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8016be2:	68f8      	ldr	r0, [r7, #12]
 8016be4:	f7ff fbc0 	bl	8016368 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016be8:	69fb      	ldr	r3, [r7, #28]
 8016bea:	4a11      	ldr	r2, [pc, #68]	; (8016c30 <tcp_listen_with_backlog_and_err+0x14c>)
 8016bec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016bee:	4b11      	ldr	r3, [pc, #68]	; (8016c34 <tcp_listen_with_backlog_and_err+0x150>)
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	60da      	str	r2, [r3, #12]
 8016bf6:	4a0f      	ldr	r2, [pc, #60]	; (8016c34 <tcp_listen_with_backlog_and_err+0x150>)
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	6013      	str	r3, [r2, #0]
 8016bfc:	f005 fcf2 	bl	801c5e4 <tcp_timer_needed>
  res = ERR_OK;
 8016c00:	2300      	movs	r3, #0
 8016c02:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d002      	beq.n	8016c10 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	7efa      	ldrb	r2, [r7, #27]
 8016c0e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016c10:	69fb      	ldr	r3, [r7, #28]
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3720      	adds	r7, #32
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	080252b0 	.word	0x080252b0
 8016c20:	080254d0 	.word	0x080254d0
 8016c24:	08025320 	.word	0x08025320
 8016c28:	08025500 	.word	0x08025500
 8016c2c:	24008a30 	.word	0x24008a30
 8016c30:	08016a81 	.word	0x08016a81
 8016c34:	24008a2c 	.word	0x24008a2c

08016c38 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b084      	sub	sp, #16
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d106      	bne.n	8016c54 <tcp_update_rcv_ann_wnd+0x1c>
 8016c46:	4b25      	ldr	r3, [pc, #148]	; (8016cdc <tcp_update_rcv_ann_wnd+0xa4>)
 8016c48:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016c4c:	4924      	ldr	r1, [pc, #144]	; (8016ce0 <tcp_update_rcv_ann_wnd+0xa8>)
 8016c4e:	4825      	ldr	r0, [pc, #148]	; (8016ce4 <tcp_update_rcv_ann_wnd+0xac>)
 8016c50:	f008 f9e8 	bl	801f024 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c58:	687a      	ldr	r2, [r7, #4]
 8016c5a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8016c5c:	4413      	add	r3, r2
 8016c5e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c64:	687a      	ldr	r2, [r7, #4]
 8016c66:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8016c68:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8016c6c:	bf28      	it	cs
 8016c6e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8016c72:	b292      	uxth	r2, r2
 8016c74:	4413      	add	r3, r2
 8016c76:	68fa      	ldr	r2, [r7, #12]
 8016c78:	1ad3      	subs	r3, r2, r3
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	db08      	blt.n	8016c90 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c8a:	68fa      	ldr	r2, [r7, #12]
 8016c8c:	1ad3      	subs	r3, r2, r3
 8016c8e:	e020      	b.n	8016cd2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c98:	1ad3      	subs	r3, r2, r3
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	dd03      	ble.n	8016ca6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016ca4:	e014      	b.n	8016cd0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cae:	1ad3      	subs	r3, r2, r3
 8016cb0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016cb8:	d306      	bcc.n	8016cc8 <tcp_update_rcv_ann_wnd+0x90>
 8016cba:	4b08      	ldr	r3, [pc, #32]	; (8016cdc <tcp_update_rcv_ann_wnd+0xa4>)
 8016cbc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8016cc0:	4909      	ldr	r1, [pc, #36]	; (8016ce8 <tcp_update_rcv_ann_wnd+0xb0>)
 8016cc2:	4808      	ldr	r0, [pc, #32]	; (8016ce4 <tcp_update_rcv_ann_wnd+0xac>)
 8016cc4:	f008 f9ae 	bl	801f024 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	b29a      	uxth	r2, r3
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8016cd0:	2300      	movs	r3, #0
  }
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3710      	adds	r7, #16
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}
 8016cda:	bf00      	nop
 8016cdc:	080252b0 	.word	0x080252b0
 8016ce0:	08025538 	.word	0x08025538
 8016ce4:	08025320 	.word	0x08025320
 8016ce8:	0802555c 	.word	0x0802555c

08016cec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b084      	sub	sp, #16
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
 8016cf4:	460b      	mov	r3, r1
 8016cf6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d107      	bne.n	8016d0e <tcp_recved+0x22>
 8016cfe:	4b1f      	ldr	r3, [pc, #124]	; (8016d7c <tcp_recved+0x90>)
 8016d00:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016d04:	491e      	ldr	r1, [pc, #120]	; (8016d80 <tcp_recved+0x94>)
 8016d06:	481f      	ldr	r0, [pc, #124]	; (8016d84 <tcp_recved+0x98>)
 8016d08:	f008 f98c 	bl	801f024 <iprintf>
 8016d0c:	e032      	b.n	8016d74 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	7d1b      	ldrb	r3, [r3, #20]
 8016d12:	2b01      	cmp	r3, #1
 8016d14:	d106      	bne.n	8016d24 <tcp_recved+0x38>
 8016d16:	4b19      	ldr	r3, [pc, #100]	; (8016d7c <tcp_recved+0x90>)
 8016d18:	f240 32d2 	movw	r2, #978	; 0x3d2
 8016d1c:	491a      	ldr	r1, [pc, #104]	; (8016d88 <tcp_recved+0x9c>)
 8016d1e:	4819      	ldr	r0, [pc, #100]	; (8016d84 <tcp_recved+0x98>)
 8016d20:	f008 f980 	bl	801f024 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d28:	887b      	ldrh	r3, [r7, #2]
 8016d2a:	4413      	add	r3, r2
 8016d2c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016d2e:	89fb      	ldrh	r3, [r7, #14]
 8016d30:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016d34:	d804      	bhi.n	8016d40 <tcp_recved+0x54>
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d3a:	89fa      	ldrh	r2, [r7, #14]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d204      	bcs.n	8016d4a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016d46:	851a      	strh	r2, [r3, #40]	; 0x28
 8016d48:	e002      	b.n	8016d50 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	89fa      	ldrh	r2, [r7, #14]
 8016d4e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016d50:	6878      	ldr	r0, [r7, #4]
 8016d52:	f7ff ff71 	bl	8016c38 <tcp_update_rcv_ann_wnd>
 8016d56:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016d5e:	d309      	bcc.n	8016d74 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	8b5b      	ldrh	r3, [r3, #26]
 8016d64:	f043 0302 	orr.w	r3, r3, #2
 8016d68:	b29a      	uxth	r2, r3
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f004 fcc2 	bl	801b6f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016d74:	3710      	adds	r7, #16
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	080252b0 	.word	0x080252b0
 8016d80:	08025578 	.word	0x08025578
 8016d84:	08025320 	.word	0x08025320
 8016d88:	08025590 	.word	0x08025590

08016d8c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016d8c:	b480      	push	{r7}
 8016d8e:	b083      	sub	sp, #12
 8016d90:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016d92:	2300      	movs	r3, #0
 8016d94:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016d96:	4b1e      	ldr	r3, [pc, #120]	; (8016e10 <tcp_new_port+0x84>)
 8016d98:	881b      	ldrh	r3, [r3, #0]
 8016d9a:	3301      	adds	r3, #1
 8016d9c:	b29a      	uxth	r2, r3
 8016d9e:	4b1c      	ldr	r3, [pc, #112]	; (8016e10 <tcp_new_port+0x84>)
 8016da0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8016da2:	4b1b      	ldr	r3, [pc, #108]	; (8016e10 <tcp_new_port+0x84>)
 8016da4:	881b      	ldrh	r3, [r3, #0]
 8016da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016daa:	4293      	cmp	r3, r2
 8016dac:	d103      	bne.n	8016db6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016dae:	4b18      	ldr	r3, [pc, #96]	; (8016e10 <tcp_new_port+0x84>)
 8016db0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016db4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016db6:	2300      	movs	r3, #0
 8016db8:	71fb      	strb	r3, [r7, #7]
 8016dba:	e01e      	b.n	8016dfa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016dbc:	79fb      	ldrb	r3, [r7, #7]
 8016dbe:	4a15      	ldr	r2, [pc, #84]	; (8016e14 <tcp_new_port+0x88>)
 8016dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	603b      	str	r3, [r7, #0]
 8016dc8:	e011      	b.n	8016dee <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	8ada      	ldrh	r2, [r3, #22]
 8016dce:	4b10      	ldr	r3, [pc, #64]	; (8016e10 <tcp_new_port+0x84>)
 8016dd0:	881b      	ldrh	r3, [r3, #0]
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d108      	bne.n	8016de8 <tcp_new_port+0x5c>
        n++;
 8016dd6:	88bb      	ldrh	r3, [r7, #4]
 8016dd8:	3301      	adds	r3, #1
 8016dda:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016ddc:	88bb      	ldrh	r3, [r7, #4]
 8016dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016de2:	d3d8      	bcc.n	8016d96 <tcp_new_port+0xa>
          return 0;
 8016de4:	2300      	movs	r3, #0
 8016de6:	e00d      	b.n	8016e04 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	68db      	ldr	r3, [r3, #12]
 8016dec:	603b      	str	r3, [r7, #0]
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d1ea      	bne.n	8016dca <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016df4:	79fb      	ldrb	r3, [r7, #7]
 8016df6:	3301      	adds	r3, #1
 8016df8:	71fb      	strb	r3, [r7, #7]
 8016dfa:	79fb      	ldrb	r3, [r7, #7]
 8016dfc:	2b03      	cmp	r3, #3
 8016dfe:	d9dd      	bls.n	8016dbc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016e00:	4b03      	ldr	r3, [pc, #12]	; (8016e10 <tcp_new_port+0x84>)
 8016e02:	881b      	ldrh	r3, [r3, #0]
}
 8016e04:	4618      	mov	r0, r3
 8016e06:	370c      	adds	r7, #12
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0e:	4770      	bx	lr
 8016e10:	24000024 	.word	0x24000024
 8016e14:	08027324 	.word	0x08027324

08016e18 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b08a      	sub	sp, #40	; 0x28
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	603b      	str	r3, [r7, #0]
 8016e24:	4613      	mov	r3, r2
 8016e26:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d109      	bne.n	8016e46 <tcp_connect+0x2e>
 8016e32:	4b7d      	ldr	r3, [pc, #500]	; (8017028 <tcp_connect+0x210>)
 8016e34:	f240 4235 	movw	r2, #1077	; 0x435
 8016e38:	497c      	ldr	r1, [pc, #496]	; (801702c <tcp_connect+0x214>)
 8016e3a:	487d      	ldr	r0, [pc, #500]	; (8017030 <tcp_connect+0x218>)
 8016e3c:	f008 f8f2 	bl	801f024 <iprintf>
 8016e40:	f06f 030f 	mvn.w	r3, #15
 8016e44:	e0ec      	b.n	8017020 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d109      	bne.n	8016e60 <tcp_connect+0x48>
 8016e4c:	4b76      	ldr	r3, [pc, #472]	; (8017028 <tcp_connect+0x210>)
 8016e4e:	f240 4236 	movw	r2, #1078	; 0x436
 8016e52:	4978      	ldr	r1, [pc, #480]	; (8017034 <tcp_connect+0x21c>)
 8016e54:	4876      	ldr	r0, [pc, #472]	; (8017030 <tcp_connect+0x218>)
 8016e56:	f008 f8e5 	bl	801f024 <iprintf>
 8016e5a:	f06f 030f 	mvn.w	r3, #15
 8016e5e:	e0df      	b.n	8017020 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	7d1b      	ldrb	r3, [r3, #20]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d009      	beq.n	8016e7c <tcp_connect+0x64>
 8016e68:	4b6f      	ldr	r3, [pc, #444]	; (8017028 <tcp_connect+0x210>)
 8016e6a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8016e6e:	4972      	ldr	r1, [pc, #456]	; (8017038 <tcp_connect+0x220>)
 8016e70:	486f      	ldr	r0, [pc, #444]	; (8017030 <tcp_connect+0x218>)
 8016e72:	f008 f8d7 	bl	801f024 <iprintf>
 8016e76:	f06f 0309 	mvn.w	r3, #9
 8016e7a:	e0d1      	b.n	8017020 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d002      	beq.n	8016e88 <tcp_connect+0x70>
 8016e82:	68bb      	ldr	r3, [r7, #8]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	e000      	b.n	8016e8a <tcp_connect+0x72>
 8016e88:	2300      	movs	r3, #0
 8016e8a:	68fa      	ldr	r2, [r7, #12]
 8016e8c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	88fa      	ldrh	r2, [r7, #6]
 8016e92:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	7a1b      	ldrb	r3, [r3, #8]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d006      	beq.n	8016eaa <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	7a1b      	ldrb	r3, [r3, #8]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7fe fba9 	bl	80155f8 <netif_get_by_index>
 8016ea6:	6278      	str	r0, [r7, #36]	; 0x24
 8016ea8:	e005      	b.n	8016eb6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	3304      	adds	r3, #4
 8016eae:	4618      	mov	r0, r3
 8016eb0:	f7fc fadc 	bl	801346c <ip4_route>
 8016eb4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8016eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d102      	bne.n	8016ec2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016ebc:	f06f 0303 	mvn.w	r3, #3
 8016ec0:	e0ae      	b.n	8017020 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d003      	beq.n	8016ed0 <tcp_connect+0xb8>
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d111      	bne.n	8016ef4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d002      	beq.n	8016edc <tcp_connect+0xc4>
 8016ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed8:	3304      	adds	r3, #4
 8016eda:	e000      	b.n	8016ede <tcp_connect+0xc6>
 8016edc:	2300      	movs	r3, #0
 8016ede:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8016ee0:	69fb      	ldr	r3, [r7, #28]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d102      	bne.n	8016eec <tcp_connect+0xd4>
      return ERR_RTE;
 8016ee6:	f06f 0303 	mvn.w	r3, #3
 8016eea:	e099      	b.n	8017020 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016eec:	69fb      	ldr	r3, [r7, #28]
 8016eee:	681a      	ldr	r2, [r3, #0]
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	8adb      	ldrh	r3, [r3, #22]
 8016ef8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	8adb      	ldrh	r3, [r3, #22]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d10c      	bne.n	8016f1c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8016f02:	f7ff ff43 	bl	8016d8c <tcp_new_port>
 8016f06:	4603      	mov	r3, r0
 8016f08:	461a      	mov	r2, r3
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	8adb      	ldrh	r3, [r3, #22]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d102      	bne.n	8016f1c <tcp_connect+0x104>
      return ERR_BUF;
 8016f16:	f06f 0301 	mvn.w	r3, #1
 8016f1a:	e081      	b.n	8017020 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8016f1c:	68f8      	ldr	r0, [r7, #12]
 8016f1e:	f001 f867 	bl	8017ff0 <tcp_next_iss>
 8016f22:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	2200      	movs	r2, #0
 8016f28:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	697a      	ldr	r2, [r7, #20]
 8016f2e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8016f30:	697b      	ldr	r3, [r7, #20]
 8016f32:	1e5a      	subs	r2, r3, #1
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8016f38:	697b      	ldr	r3, [r7, #20]
 8016f3a:	1e5a      	subs	r2, r3, #1
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	1e5a      	subs	r2, r3, #1
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016f66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016f70:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	3304      	adds	r3, #4
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f7e:	f001 f85d 	bl	801803c <tcp_eff_send_mss_netif>
 8016f82:	4603      	mov	r3, r0
 8016f84:	461a      	mov	r2, r3
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	2201      	movs	r2, #1
 8016f8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	683a      	ldr	r2, [r7, #0]
 8016f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8016f9a:	2102      	movs	r1, #2
 8016f9c:	68f8      	ldr	r0, [r7, #12]
 8016f9e:	f004 fabd 	bl	801b51c <tcp_enqueue_flags>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8016fa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d136      	bne.n	801701c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	2202      	movs	r2, #2
 8016fb2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8016fb4:	8b7b      	ldrh	r3, [r7, #26]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d021      	beq.n	8016ffe <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016fba:	4b20      	ldr	r3, [pc, #128]	; (801703c <tcp_connect+0x224>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	68fa      	ldr	r2, [r7, #12]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d105      	bne.n	8016fd0 <tcp_connect+0x1b8>
 8016fc4:	4b1d      	ldr	r3, [pc, #116]	; (801703c <tcp_connect+0x224>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	68db      	ldr	r3, [r3, #12]
 8016fca:	4a1c      	ldr	r2, [pc, #112]	; (801703c <tcp_connect+0x224>)
 8016fcc:	6013      	str	r3, [r2, #0]
 8016fce:	e013      	b.n	8016ff8 <tcp_connect+0x1e0>
 8016fd0:	4b1a      	ldr	r3, [pc, #104]	; (801703c <tcp_connect+0x224>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	623b      	str	r3, [r7, #32]
 8016fd6:	e00c      	b.n	8016ff2 <tcp_connect+0x1da>
 8016fd8:	6a3b      	ldr	r3, [r7, #32]
 8016fda:	68db      	ldr	r3, [r3, #12]
 8016fdc:	68fa      	ldr	r2, [r7, #12]
 8016fde:	429a      	cmp	r2, r3
 8016fe0:	d104      	bne.n	8016fec <tcp_connect+0x1d4>
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	68da      	ldr	r2, [r3, #12]
 8016fe6:	6a3b      	ldr	r3, [r7, #32]
 8016fe8:	60da      	str	r2, [r3, #12]
 8016fea:	e005      	b.n	8016ff8 <tcp_connect+0x1e0>
 8016fec:	6a3b      	ldr	r3, [r7, #32]
 8016fee:	68db      	ldr	r3, [r3, #12]
 8016ff0:	623b      	str	r3, [r7, #32]
 8016ff2:	6a3b      	ldr	r3, [r7, #32]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d1ef      	bne.n	8016fd8 <tcp_connect+0x1c0>
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8016ffe:	4b10      	ldr	r3, [pc, #64]	; (8017040 <tcp_connect+0x228>)
 8017000:	681a      	ldr	r2, [r3, #0]
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	60da      	str	r2, [r3, #12]
 8017006:	4a0e      	ldr	r2, [pc, #56]	; (8017040 <tcp_connect+0x228>)
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	6013      	str	r3, [r2, #0]
 801700c:	f005 faea 	bl	801c5e4 <tcp_timer_needed>
 8017010:	4b0c      	ldr	r3, [pc, #48]	; (8017044 <tcp_connect+0x22c>)
 8017012:	2201      	movs	r2, #1
 8017014:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	f004 fb6e 	bl	801b6f8 <tcp_output>
  }
  return ret;
 801701c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8017020:	4618      	mov	r0, r3
 8017022:	3728      	adds	r7, #40	; 0x28
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}
 8017028:	080252b0 	.word	0x080252b0
 801702c:	080255b8 	.word	0x080255b8
 8017030:	08025320 	.word	0x08025320
 8017034:	080255d4 	.word	0x080255d4
 8017038:	080255f0 	.word	0x080255f0
 801703c:	24008a30 	.word	0x24008a30
 8017040:	24008a24 	.word	0x24008a24
 8017044:	24008a20 	.word	0x24008a20

08017048 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017048:	b5b0      	push	{r4, r5, r7, lr}
 801704a:	b090      	sub	sp, #64	; 0x40
 801704c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801704e:	2300      	movs	r3, #0
 8017050:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8017054:	4b94      	ldr	r3, [pc, #592]	; (80172a8 <tcp_slowtmr+0x260>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	3301      	adds	r3, #1
 801705a:	4a93      	ldr	r2, [pc, #588]	; (80172a8 <tcp_slowtmr+0x260>)
 801705c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801705e:	4b93      	ldr	r3, [pc, #588]	; (80172ac <tcp_slowtmr+0x264>)
 8017060:	781b      	ldrb	r3, [r3, #0]
 8017062:	3301      	adds	r3, #1
 8017064:	b2da      	uxtb	r2, r3
 8017066:	4b91      	ldr	r3, [pc, #580]	; (80172ac <tcp_slowtmr+0x264>)
 8017068:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801706a:	2300      	movs	r3, #0
 801706c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801706e:	4b90      	ldr	r3, [pc, #576]	; (80172b0 <tcp_slowtmr+0x268>)
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8017074:	e29d      	b.n	80175b2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8017076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017078:	7d1b      	ldrb	r3, [r3, #20]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d106      	bne.n	801708c <tcp_slowtmr+0x44>
 801707e:	4b8d      	ldr	r3, [pc, #564]	; (80172b4 <tcp_slowtmr+0x26c>)
 8017080:	f240 42be 	movw	r2, #1214	; 0x4be
 8017084:	498c      	ldr	r1, [pc, #560]	; (80172b8 <tcp_slowtmr+0x270>)
 8017086:	488d      	ldr	r0, [pc, #564]	; (80172bc <tcp_slowtmr+0x274>)
 8017088:	f007 ffcc 	bl	801f024 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801708e:	7d1b      	ldrb	r3, [r3, #20]
 8017090:	2b01      	cmp	r3, #1
 8017092:	d106      	bne.n	80170a2 <tcp_slowtmr+0x5a>
 8017094:	4b87      	ldr	r3, [pc, #540]	; (80172b4 <tcp_slowtmr+0x26c>)
 8017096:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801709a:	4989      	ldr	r1, [pc, #548]	; (80172c0 <tcp_slowtmr+0x278>)
 801709c:	4887      	ldr	r0, [pc, #540]	; (80172bc <tcp_slowtmr+0x274>)
 801709e:	f007 ffc1 	bl	801f024 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80170a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a4:	7d1b      	ldrb	r3, [r3, #20]
 80170a6:	2b0a      	cmp	r3, #10
 80170a8:	d106      	bne.n	80170b8 <tcp_slowtmr+0x70>
 80170aa:	4b82      	ldr	r3, [pc, #520]	; (80172b4 <tcp_slowtmr+0x26c>)
 80170ac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80170b0:	4984      	ldr	r1, [pc, #528]	; (80172c4 <tcp_slowtmr+0x27c>)
 80170b2:	4882      	ldr	r0, [pc, #520]	; (80172bc <tcp_slowtmr+0x274>)
 80170b4:	f007 ffb6 	bl	801f024 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80170b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ba:	7f9a      	ldrb	r2, [r3, #30]
 80170bc:	4b7b      	ldr	r3, [pc, #492]	; (80172ac <tcp_slowtmr+0x264>)
 80170be:	781b      	ldrb	r3, [r3, #0]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d105      	bne.n	80170d0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80170c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80170c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ca:	68db      	ldr	r3, [r3, #12]
 80170cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80170ce:	e270      	b.n	80175b2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80170d0:	4b76      	ldr	r3, [pc, #472]	; (80172ac <tcp_slowtmr+0x264>)
 80170d2:	781a      	ldrb	r2, [r3, #0]
 80170d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170d6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80170d8:	2300      	movs	r3, #0
 80170da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80170de:	2300      	movs	r3, #0
 80170e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80170e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e6:	7d1b      	ldrb	r3, [r3, #20]
 80170e8:	2b02      	cmp	r3, #2
 80170ea:	d10a      	bne.n	8017102 <tcp_slowtmr+0xba>
 80170ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80170f2:	2b05      	cmp	r3, #5
 80170f4:	d905      	bls.n	8017102 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80170f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80170fa:	3301      	adds	r3, #1
 80170fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017100:	e11e      	b.n	8017340 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8017102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017104:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017108:	2b0b      	cmp	r3, #11
 801710a:	d905      	bls.n	8017118 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801710c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017110:	3301      	adds	r3, #1
 8017112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017116:	e113      	b.n	8017340 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801711e:	2b00      	cmp	r3, #0
 8017120:	d075      	beq.n	801720e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8017122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017126:	2b00      	cmp	r3, #0
 8017128:	d006      	beq.n	8017138 <tcp_slowtmr+0xf0>
 801712a:	4b62      	ldr	r3, [pc, #392]	; (80172b4 <tcp_slowtmr+0x26c>)
 801712c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017130:	4965      	ldr	r1, [pc, #404]	; (80172c8 <tcp_slowtmr+0x280>)
 8017132:	4862      	ldr	r0, [pc, #392]	; (80172bc <tcp_slowtmr+0x274>)
 8017134:	f007 ff76 	bl	801f024 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801713c:	2b00      	cmp	r3, #0
 801713e:	d106      	bne.n	801714e <tcp_slowtmr+0x106>
 8017140:	4b5c      	ldr	r3, [pc, #368]	; (80172b4 <tcp_slowtmr+0x26c>)
 8017142:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017146:	4961      	ldr	r1, [pc, #388]	; (80172cc <tcp_slowtmr+0x284>)
 8017148:	485c      	ldr	r0, [pc, #368]	; (80172bc <tcp_slowtmr+0x274>)
 801714a:	f007 ff6b 	bl	801f024 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017150:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017154:	2b0b      	cmp	r3, #11
 8017156:	d905      	bls.n	8017164 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801715c:	3301      	adds	r3, #1
 801715e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017162:	e0ed      	b.n	8017340 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017166:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801716a:	3b01      	subs	r3, #1
 801716c:	4a58      	ldr	r2, [pc, #352]	; (80172d0 <tcp_slowtmr+0x288>)
 801716e:	5cd3      	ldrb	r3, [r2, r3]
 8017170:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8017172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017174:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017178:	7c7a      	ldrb	r2, [r7, #17]
 801717a:	429a      	cmp	r2, r3
 801717c:	d907      	bls.n	801718e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017180:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017184:	3301      	adds	r3, #1
 8017186:	b2da      	uxtb	r2, r3
 8017188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801718a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017190:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017194:	7c7a      	ldrb	r2, [r7, #17]
 8017196:	429a      	cmp	r2, r3
 8017198:	f200 80d2 	bhi.w	8017340 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801719c:	2301      	movs	r3, #1
 801719e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80171a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d108      	bne.n	80171bc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80171aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171ac:	f005 f94c 	bl	801c448 <tcp_zero_window_probe>
 80171b0:	4603      	mov	r3, r0
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d014      	beq.n	80171e0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80171b6:	2300      	movs	r3, #0
 80171b8:	623b      	str	r3, [r7, #32]
 80171ba:	e011      	b.n	80171e0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80171bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80171c2:	4619      	mov	r1, r3
 80171c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171c6:	f004 f811 	bl	801b1ec <tcp_split_unsent_seg>
 80171ca:	4603      	mov	r3, r0
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d107      	bne.n	80171e0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80171d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80171d2:	f004 fa91 	bl	801b6f8 <tcp_output>
 80171d6:	4603      	mov	r3, r0
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d101      	bne.n	80171e0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80171dc:	2300      	movs	r3, #0
 80171de:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80171e0:	6a3b      	ldr	r3, [r7, #32]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	f000 80ac 	beq.w	8017340 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80171e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ea:	2200      	movs	r2, #0
 80171ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80171f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80171f6:	2b06      	cmp	r3, #6
 80171f8:	f200 80a2 	bhi.w	8017340 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80171fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017202:	3301      	adds	r3, #1
 8017204:	b2da      	uxtb	r2, r3
 8017206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017208:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801720c:	e098      	b.n	8017340 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017210:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017214:	2b00      	cmp	r3, #0
 8017216:	db0f      	blt.n	8017238 <tcp_slowtmr+0x1f0>
 8017218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801721e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017222:	4293      	cmp	r3, r2
 8017224:	d008      	beq.n	8017238 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017228:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801722c:	b29b      	uxth	r3, r3
 801722e:	3301      	adds	r3, #1
 8017230:	b29b      	uxth	r3, r3
 8017232:	b21a      	sxth	r2, r3
 8017234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017236:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801723a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017240:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017244:	429a      	cmp	r2, r3
 8017246:	db7b      	blt.n	8017340 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801724a:	f004 fd47 	bl	801bcdc <tcp_rexmit_rto_prepare>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d007      	beq.n	8017264 <tcp_slowtmr+0x21c>
 8017254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017258:	2b00      	cmp	r3, #0
 801725a:	d171      	bne.n	8017340 <tcp_slowtmr+0x2f8>
 801725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017260:	2b00      	cmp	r3, #0
 8017262:	d06d      	beq.n	8017340 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8017264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017266:	7d1b      	ldrb	r3, [r3, #20]
 8017268:	2b02      	cmp	r3, #2
 801726a:	d03a      	beq.n	80172e2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017272:	2b0c      	cmp	r3, #12
 8017274:	bf28      	it	cs
 8017276:	230c      	movcs	r3, #12
 8017278:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801727c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017280:	10db      	asrs	r3, r3, #3
 8017282:	b21b      	sxth	r3, r3
 8017284:	461a      	mov	r2, r3
 8017286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017288:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801728c:	4413      	add	r3, r2
 801728e:	7efa      	ldrb	r2, [r7, #27]
 8017290:	4910      	ldr	r1, [pc, #64]	; (80172d4 <tcp_slowtmr+0x28c>)
 8017292:	5c8a      	ldrb	r2, [r1, r2]
 8017294:	4093      	lsls	r3, r2
 8017296:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801729e:	4293      	cmp	r3, r2
 80172a0:	dc1a      	bgt.n	80172d8 <tcp_slowtmr+0x290>
 80172a2:	697b      	ldr	r3, [r7, #20]
 80172a4:	b21a      	sxth	r2, r3
 80172a6:	e019      	b.n	80172dc <tcp_slowtmr+0x294>
 80172a8:	24008a28 	.word	0x24008a28
 80172ac:	24005226 	.word	0x24005226
 80172b0:	24008a24 	.word	0x24008a24
 80172b4:	080252b0 	.word	0x080252b0
 80172b8:	08025620 	.word	0x08025620
 80172bc:	08025320 	.word	0x08025320
 80172c0:	0802564c 	.word	0x0802564c
 80172c4:	08025678 	.word	0x08025678
 80172c8:	080256a8 	.word	0x080256a8
 80172cc:	080256dc 	.word	0x080256dc
 80172d0:	0802731c 	.word	0x0802731c
 80172d4:	0802730c 	.word	0x0802730c
 80172d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80172dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80172e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e4:	2200      	movs	r2, #0
 80172e6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80172e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80172ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80172f4:	4293      	cmp	r3, r2
 80172f6:	bf28      	it	cs
 80172f8:	4613      	movcs	r3, r2
 80172fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80172fc:	8a7b      	ldrh	r3, [r7, #18]
 80172fe:	085b      	lsrs	r3, r3, #1
 8017300:	b29a      	uxth	r2, r3
 8017302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017304:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801730a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017312:	005b      	lsls	r3, r3, #1
 8017314:	b29b      	uxth	r3, r3
 8017316:	429a      	cmp	r2, r3
 8017318:	d206      	bcs.n	8017328 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801731e:	005b      	lsls	r3, r3, #1
 8017320:	b29a      	uxth	r2, r3
 8017322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017324:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801732a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801732e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8017332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017334:	2200      	movs	r2, #0
 8017336:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801733a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801733c:	f004 fd3e 	bl	801bdbc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017342:	7d1b      	ldrb	r3, [r3, #20]
 8017344:	2b06      	cmp	r3, #6
 8017346:	d111      	bne.n	801736c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801734a:	8b5b      	ldrh	r3, [r3, #26]
 801734c:	f003 0310 	and.w	r3, r3, #16
 8017350:	2b00      	cmp	r3, #0
 8017352:	d00b      	beq.n	801736c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017354:	4b9c      	ldr	r3, [pc, #624]	; (80175c8 <tcp_slowtmr+0x580>)
 8017356:	681a      	ldr	r2, [r3, #0]
 8017358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801735a:	6a1b      	ldr	r3, [r3, #32]
 801735c:	1ad3      	subs	r3, r2, r3
 801735e:	2b28      	cmp	r3, #40	; 0x28
 8017360:	d904      	bls.n	801736c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8017362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017366:	3301      	adds	r3, #1
 8017368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736e:	7a5b      	ldrb	r3, [r3, #9]
 8017370:	f003 0308 	and.w	r3, r3, #8
 8017374:	2b00      	cmp	r3, #0
 8017376:	d04a      	beq.n	801740e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8017378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801737a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801737c:	2b04      	cmp	r3, #4
 801737e:	d003      	beq.n	8017388 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017382:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8017384:	2b07      	cmp	r3, #7
 8017386:	d142      	bne.n	801740e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017388:	4b8f      	ldr	r3, [pc, #572]	; (80175c8 <tcp_slowtmr+0x580>)
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738e:	6a1b      	ldr	r3, [r3, #32]
 8017390:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017394:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017398:	4b8c      	ldr	r3, [pc, #560]	; (80175cc <tcp_slowtmr+0x584>)
 801739a:	440b      	add	r3, r1
 801739c:	498c      	ldr	r1, [pc, #560]	; (80175d0 <tcp_slowtmr+0x588>)
 801739e:	fba1 1303 	umull	r1, r3, r1, r3
 80173a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d90a      	bls.n	80173be <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80173a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173ac:	3301      	adds	r3, #1
 80173ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80173b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80173b6:	3301      	adds	r3, #1
 80173b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80173bc:	e027      	b.n	801740e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173be:	4b82      	ldr	r3, [pc, #520]	; (80175c8 <tcp_slowtmr+0x580>)
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c4:	6a1b      	ldr	r3, [r3, #32]
 80173c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80173c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80173ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80173d4:	4618      	mov	r0, r3
 80173d6:	4b7f      	ldr	r3, [pc, #508]	; (80175d4 <tcp_slowtmr+0x58c>)
 80173d8:	fb03 f300 	mul.w	r3, r3, r0
 80173dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80173de:	497c      	ldr	r1, [pc, #496]	; (80175d0 <tcp_slowtmr+0x588>)
 80173e0:	fba1 1303 	umull	r1, r3, r1, r3
 80173e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173e6:	429a      	cmp	r2, r3
 80173e8:	d911      	bls.n	801740e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80173ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173ec:	f004 ffec 	bl	801c3c8 <tcp_keepalive>
 80173f0:	4603      	mov	r3, r0
 80173f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80173f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d107      	bne.n	801740e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80173fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017400:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017404:	3301      	adds	r3, #1
 8017406:	b2da      	uxtb	r2, r3
 8017408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017412:	2b00      	cmp	r3, #0
 8017414:	d011      	beq.n	801743a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017416:	4b6c      	ldr	r3, [pc, #432]	; (80175c8 <tcp_slowtmr+0x580>)
 8017418:	681a      	ldr	r2, [r3, #0]
 801741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801741c:	6a1b      	ldr	r3, [r3, #32]
 801741e:	1ad2      	subs	r2, r2, r3
 8017420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017422:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017426:	4619      	mov	r1, r3
 8017428:	460b      	mov	r3, r1
 801742a:	005b      	lsls	r3, r3, #1
 801742c:	440b      	add	r3, r1
 801742e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017430:	429a      	cmp	r2, r3
 8017432:	d302      	bcc.n	801743a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8017434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017436:	f000 feab 	bl	8018190 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801743c:	7d1b      	ldrb	r3, [r3, #20]
 801743e:	2b03      	cmp	r3, #3
 8017440:	d10b      	bne.n	801745a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017442:	4b61      	ldr	r3, [pc, #388]	; (80175c8 <tcp_slowtmr+0x580>)
 8017444:	681a      	ldr	r2, [r3, #0]
 8017446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017448:	6a1b      	ldr	r3, [r3, #32]
 801744a:	1ad3      	subs	r3, r2, r3
 801744c:	2b28      	cmp	r3, #40	; 0x28
 801744e:	d904      	bls.n	801745a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017454:	3301      	adds	r3, #1
 8017456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745c:	7d1b      	ldrb	r3, [r3, #20]
 801745e:	2b09      	cmp	r3, #9
 8017460:	d10b      	bne.n	801747a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017462:	4b59      	ldr	r3, [pc, #356]	; (80175c8 <tcp_slowtmr+0x580>)
 8017464:	681a      	ldr	r2, [r3, #0]
 8017466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017468:	6a1b      	ldr	r3, [r3, #32]
 801746a:	1ad3      	subs	r3, r2, r3
 801746c:	2bf0      	cmp	r3, #240	; 0xf0
 801746e:	d904      	bls.n	801747a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017474:	3301      	adds	r3, #1
 8017476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801747a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801747e:	2b00      	cmp	r3, #0
 8017480:	d060      	beq.n	8017544 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8017482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017488:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801748a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801748c:	f000 fccc 	bl	8017e28 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017492:	2b00      	cmp	r3, #0
 8017494:	d010      	beq.n	80174b8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017496:	4b50      	ldr	r3, [pc, #320]	; (80175d8 <tcp_slowtmr+0x590>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801749c:	429a      	cmp	r2, r3
 801749e:	d106      	bne.n	80174ae <tcp_slowtmr+0x466>
 80174a0:	4b4e      	ldr	r3, [pc, #312]	; (80175dc <tcp_slowtmr+0x594>)
 80174a2:	f240 526d 	movw	r2, #1389	; 0x56d
 80174a6:	494e      	ldr	r1, [pc, #312]	; (80175e0 <tcp_slowtmr+0x598>)
 80174a8:	484e      	ldr	r0, [pc, #312]	; (80175e4 <tcp_slowtmr+0x59c>)
 80174aa:	f007 fdbb 	bl	801f024 <iprintf>
        prev->next = pcb->next;
 80174ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b0:	68da      	ldr	r2, [r3, #12]
 80174b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b4:	60da      	str	r2, [r3, #12]
 80174b6:	e00f      	b.n	80174d8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80174b8:	4b47      	ldr	r3, [pc, #284]	; (80175d8 <tcp_slowtmr+0x590>)
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174be:	429a      	cmp	r2, r3
 80174c0:	d006      	beq.n	80174d0 <tcp_slowtmr+0x488>
 80174c2:	4b46      	ldr	r3, [pc, #280]	; (80175dc <tcp_slowtmr+0x594>)
 80174c4:	f240 5271 	movw	r2, #1393	; 0x571
 80174c8:	4947      	ldr	r1, [pc, #284]	; (80175e8 <tcp_slowtmr+0x5a0>)
 80174ca:	4846      	ldr	r0, [pc, #280]	; (80175e4 <tcp_slowtmr+0x59c>)
 80174cc:	f007 fdaa 	bl	801f024 <iprintf>
        tcp_active_pcbs = pcb->next;
 80174d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d2:	68db      	ldr	r3, [r3, #12]
 80174d4:	4a40      	ldr	r2, [pc, #256]	; (80175d8 <tcp_slowtmr+0x590>)
 80174d6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80174d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d013      	beq.n	8017508 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80174e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80174e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80174e8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80174ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ec:	3304      	adds	r3, #4
 80174ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174f0:	8ad2      	ldrh	r2, [r2, #22]
 80174f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174f4:	8b09      	ldrh	r1, [r1, #24]
 80174f6:	9102      	str	r1, [sp, #8]
 80174f8:	9201      	str	r2, [sp, #4]
 80174fa:	9300      	str	r3, [sp, #0]
 80174fc:	462b      	mov	r3, r5
 80174fe:	4622      	mov	r2, r4
 8017500:	4601      	mov	r1, r0
 8017502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017504:	f004 feac 	bl	801c260 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750a:	691b      	ldr	r3, [r3, #16]
 801750c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017510:	7d1b      	ldrb	r3, [r3, #20]
 8017512:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017516:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751a:	68db      	ldr	r3, [r3, #12]
 801751c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801751e:	6838      	ldr	r0, [r7, #0]
 8017520:	f7fe ff22 	bl	8016368 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017524:	4b31      	ldr	r3, [pc, #196]	; (80175ec <tcp_slowtmr+0x5a4>)
 8017526:	2200      	movs	r2, #0
 8017528:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d004      	beq.n	801753a <tcp_slowtmr+0x4f2>
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	f06f 010c 	mvn.w	r1, #12
 8017536:	68b8      	ldr	r0, [r7, #8]
 8017538:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801753a:	4b2c      	ldr	r3, [pc, #176]	; (80175ec <tcp_slowtmr+0x5a4>)
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d037      	beq.n	80175b2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8017542:	e592      	b.n	801706a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8017544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017546:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801754a:	68db      	ldr	r3, [r3, #12]
 801754c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017550:	7f1b      	ldrb	r3, [r3, #28]
 8017552:	3301      	adds	r3, #1
 8017554:	b2da      	uxtb	r2, r3
 8017556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017558:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755c:	7f1a      	ldrb	r2, [r3, #28]
 801755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017560:	7f5b      	ldrb	r3, [r3, #29]
 8017562:	429a      	cmp	r2, r3
 8017564:	d325      	bcc.n	80175b2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8017566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017568:	2200      	movs	r2, #0
 801756a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801756c:	4b1f      	ldr	r3, [pc, #124]	; (80175ec <tcp_slowtmr+0x5a4>)
 801756e:	2200      	movs	r2, #0
 8017570:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017578:	2b00      	cmp	r3, #0
 801757a:	d00b      	beq.n	8017594 <tcp_slowtmr+0x54c>
 801757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017584:	6912      	ldr	r2, [r2, #16]
 8017586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017588:	4610      	mov	r0, r2
 801758a:	4798      	blx	r3
 801758c:	4603      	mov	r3, r0
 801758e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017592:	e002      	b.n	801759a <tcp_slowtmr+0x552>
 8017594:	2300      	movs	r3, #0
 8017596:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801759a:	4b14      	ldr	r3, [pc, #80]	; (80175ec <tcp_slowtmr+0x5a4>)
 801759c:	781b      	ldrb	r3, [r3, #0]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d000      	beq.n	80175a4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80175a2:	e562      	b.n	801706a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80175a4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d102      	bne.n	80175b2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80175ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175ae:	f004 f8a3 	bl	801b6f8 <tcp_output>
  while (pcb != NULL) {
 80175b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f47f ad5e 	bne.w	8017076 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80175ba:	2300      	movs	r3, #0
 80175bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80175be:	4b0c      	ldr	r3, [pc, #48]	; (80175f0 <tcp_slowtmr+0x5a8>)
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80175c4:	e069      	b.n	801769a <tcp_slowtmr+0x652>
 80175c6:	bf00      	nop
 80175c8:	24008a28 	.word	0x24008a28
 80175cc:	000a4cb8 	.word	0x000a4cb8
 80175d0:	10624dd3 	.word	0x10624dd3
 80175d4:	000124f8 	.word	0x000124f8
 80175d8:	24008a24 	.word	0x24008a24
 80175dc:	080252b0 	.word	0x080252b0
 80175e0:	08025714 	.word	0x08025714
 80175e4:	08025320 	.word	0x08025320
 80175e8:	08025740 	.word	0x08025740
 80175ec:	24008a20 	.word	0x24008a20
 80175f0:	24008a34 	.word	0x24008a34
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80175f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f6:	7d1b      	ldrb	r3, [r3, #20]
 80175f8:	2b0a      	cmp	r3, #10
 80175fa:	d006      	beq.n	801760a <tcp_slowtmr+0x5c2>
 80175fc:	4b2b      	ldr	r3, [pc, #172]	; (80176ac <tcp_slowtmr+0x664>)
 80175fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017602:	492b      	ldr	r1, [pc, #172]	; (80176b0 <tcp_slowtmr+0x668>)
 8017604:	482b      	ldr	r0, [pc, #172]	; (80176b4 <tcp_slowtmr+0x66c>)
 8017606:	f007 fd0d 	bl	801f024 <iprintf>
    pcb_remove = 0;
 801760a:	2300      	movs	r3, #0
 801760c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017610:	4b29      	ldr	r3, [pc, #164]	; (80176b8 <tcp_slowtmr+0x670>)
 8017612:	681a      	ldr	r2, [r3, #0]
 8017614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017616:	6a1b      	ldr	r3, [r3, #32]
 8017618:	1ad3      	subs	r3, r2, r3
 801761a:	2bf0      	cmp	r3, #240	; 0xf0
 801761c:	d904      	bls.n	8017628 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801761e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017622:	3301      	adds	r3, #1
 8017624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801762c:	2b00      	cmp	r3, #0
 801762e:	d02f      	beq.n	8017690 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017632:	f000 fbf9 	bl	8017e28 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017638:	2b00      	cmp	r3, #0
 801763a:	d010      	beq.n	801765e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801763c:	4b1f      	ldr	r3, [pc, #124]	; (80176bc <tcp_slowtmr+0x674>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017642:	429a      	cmp	r2, r3
 8017644:	d106      	bne.n	8017654 <tcp_slowtmr+0x60c>
 8017646:	4b19      	ldr	r3, [pc, #100]	; (80176ac <tcp_slowtmr+0x664>)
 8017648:	f240 52af 	movw	r2, #1455	; 0x5af
 801764c:	491c      	ldr	r1, [pc, #112]	; (80176c0 <tcp_slowtmr+0x678>)
 801764e:	4819      	ldr	r0, [pc, #100]	; (80176b4 <tcp_slowtmr+0x66c>)
 8017650:	f007 fce8 	bl	801f024 <iprintf>
        prev->next = pcb->next;
 8017654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017656:	68da      	ldr	r2, [r3, #12]
 8017658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801765a:	60da      	str	r2, [r3, #12]
 801765c:	e00f      	b.n	801767e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801765e:	4b17      	ldr	r3, [pc, #92]	; (80176bc <tcp_slowtmr+0x674>)
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017664:	429a      	cmp	r2, r3
 8017666:	d006      	beq.n	8017676 <tcp_slowtmr+0x62e>
 8017668:	4b10      	ldr	r3, [pc, #64]	; (80176ac <tcp_slowtmr+0x664>)
 801766a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801766e:	4915      	ldr	r1, [pc, #84]	; (80176c4 <tcp_slowtmr+0x67c>)
 8017670:	4810      	ldr	r0, [pc, #64]	; (80176b4 <tcp_slowtmr+0x66c>)
 8017672:	f007 fcd7 	bl	801f024 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017678:	68db      	ldr	r3, [r3, #12]
 801767a:	4a10      	ldr	r2, [pc, #64]	; (80176bc <tcp_slowtmr+0x674>)
 801767c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017680:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8017682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017684:	68db      	ldr	r3, [r3, #12]
 8017686:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017688:	69f8      	ldr	r0, [r7, #28]
 801768a:	f7fe fe6d 	bl	8016368 <tcp_free>
 801768e:	e004      	b.n	801769a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017692:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017696:	68db      	ldr	r3, [r3, #12]
 8017698:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801769c:	2b00      	cmp	r3, #0
 801769e:	d1a9      	bne.n	80175f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 80176a0:	bf00      	nop
 80176a2:	bf00      	nop
 80176a4:	3730      	adds	r7, #48	; 0x30
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bdb0      	pop	{r4, r5, r7, pc}
 80176aa:	bf00      	nop
 80176ac:	080252b0 	.word	0x080252b0
 80176b0:	0802576c 	.word	0x0802576c
 80176b4:	08025320 	.word	0x08025320
 80176b8:	24008a28 	.word	0x24008a28
 80176bc:	24008a34 	.word	0x24008a34
 80176c0:	0802579c 	.word	0x0802579c
 80176c4:	080257c4 	.word	0x080257c4

080176c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b082      	sub	sp, #8
 80176cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80176ce:	4b2d      	ldr	r3, [pc, #180]	; (8017784 <tcp_fasttmr+0xbc>)
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	3301      	adds	r3, #1
 80176d4:	b2da      	uxtb	r2, r3
 80176d6:	4b2b      	ldr	r3, [pc, #172]	; (8017784 <tcp_fasttmr+0xbc>)
 80176d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80176da:	4b2b      	ldr	r3, [pc, #172]	; (8017788 <tcp_fasttmr+0xc0>)
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80176e0:	e048      	b.n	8017774 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	7f9a      	ldrb	r2, [r3, #30]
 80176e6:	4b27      	ldr	r3, [pc, #156]	; (8017784 <tcp_fasttmr+0xbc>)
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	429a      	cmp	r2, r3
 80176ec:	d03f      	beq.n	801776e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80176ee:	4b25      	ldr	r3, [pc, #148]	; (8017784 <tcp_fasttmr+0xbc>)
 80176f0:	781a      	ldrb	r2, [r3, #0]
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	8b5b      	ldrh	r3, [r3, #26]
 80176fa:	f003 0301 	and.w	r3, r3, #1
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d010      	beq.n	8017724 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	8b5b      	ldrh	r3, [r3, #26]
 8017706:	f043 0302 	orr.w	r3, r3, #2
 801770a:	b29a      	uxth	r2, r3
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8017710:	6878      	ldr	r0, [r7, #4]
 8017712:	f003 fff1 	bl	801b6f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	8b5b      	ldrh	r3, [r3, #26]
 801771a:	f023 0303 	bic.w	r3, r3, #3
 801771e:	b29a      	uxth	r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	8b5b      	ldrh	r3, [r3, #26]
 8017728:	f003 0308 	and.w	r3, r3, #8
 801772c:	2b00      	cmp	r3, #0
 801772e:	d009      	beq.n	8017744 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	8b5b      	ldrh	r3, [r3, #26]
 8017734:	f023 0308 	bic.w	r3, r3, #8
 8017738:	b29a      	uxth	r2, r3
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f7fe ffa6 	bl	8016690 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	68db      	ldr	r3, [r3, #12]
 8017748:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801774e:	2b00      	cmp	r3, #0
 8017750:	d00a      	beq.n	8017768 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017752:	4b0e      	ldr	r3, [pc, #56]	; (801778c <tcp_fasttmr+0xc4>)
 8017754:	2200      	movs	r2, #0
 8017756:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017758:	6878      	ldr	r0, [r7, #4]
 801775a:	f000 f819 	bl	8017790 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801775e:	4b0b      	ldr	r3, [pc, #44]	; (801778c <tcp_fasttmr+0xc4>)
 8017760:	781b      	ldrb	r3, [r3, #0]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d000      	beq.n	8017768 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8017766:	e7b8      	b.n	80176da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	607b      	str	r3, [r7, #4]
 801776c:	e002      	b.n	8017774 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	68db      	ldr	r3, [r3, #12]
 8017772:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d1b3      	bne.n	80176e2 <tcp_fasttmr+0x1a>
    }
  }
}
 801777a:	bf00      	nop
 801777c:	bf00      	nop
 801777e:	3708      	adds	r7, #8
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}
 8017784:	24005226 	.word	0x24005226
 8017788:	24008a24 	.word	0x24008a24
 801778c:	24008a20 	.word	0x24008a20

08017790 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017790:	b590      	push	{r4, r7, lr}
 8017792:	b085      	sub	sp, #20
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d109      	bne.n	80177b2 <tcp_process_refused_data+0x22>
 801779e:	4b37      	ldr	r3, [pc, #220]	; (801787c <tcp_process_refused_data+0xec>)
 80177a0:	f240 6209 	movw	r2, #1545	; 0x609
 80177a4:	4936      	ldr	r1, [pc, #216]	; (8017880 <tcp_process_refused_data+0xf0>)
 80177a6:	4837      	ldr	r0, [pc, #220]	; (8017884 <tcp_process_refused_data+0xf4>)
 80177a8:	f007 fc3c 	bl	801f024 <iprintf>
 80177ac:	f06f 030f 	mvn.w	r3, #15
 80177b0:	e060      	b.n	8017874 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177b6:	7b5b      	ldrb	r3, [r3, #13]
 80177b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80177be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2200      	movs	r2, #0
 80177c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d00b      	beq.n	80177e8 <tcp_process_refused_data+0x58>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6918      	ldr	r0, [r3, #16]
 80177da:	2300      	movs	r3, #0
 80177dc:	68ba      	ldr	r2, [r7, #8]
 80177de:	6879      	ldr	r1, [r7, #4]
 80177e0:	47a0      	blx	r4
 80177e2:	4603      	mov	r3, r0
 80177e4:	73fb      	strb	r3, [r7, #15]
 80177e6:	e007      	b.n	80177f8 <tcp_process_refused_data+0x68>
 80177e8:	2300      	movs	r3, #0
 80177ea:	68ba      	ldr	r2, [r7, #8]
 80177ec:	6879      	ldr	r1, [r7, #4]
 80177ee:	2000      	movs	r0, #0
 80177f0:	f000 f8a4 	bl	801793c <tcp_recv_null>
 80177f4:	4603      	mov	r3, r0
 80177f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80177f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d12a      	bne.n	8017856 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8017800:	7bbb      	ldrb	r3, [r7, #14]
 8017802:	f003 0320 	and.w	r3, r3, #32
 8017806:	2b00      	cmp	r3, #0
 8017808:	d033      	beq.n	8017872 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801780e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017812:	d005      	beq.n	8017820 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017818:	3301      	adds	r3, #1
 801781a:	b29a      	uxth	r2, r3
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017826:	2b00      	cmp	r3, #0
 8017828:	d00b      	beq.n	8017842 <tcp_process_refused_data+0xb2>
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	6918      	ldr	r0, [r3, #16]
 8017834:	2300      	movs	r3, #0
 8017836:	2200      	movs	r2, #0
 8017838:	6879      	ldr	r1, [r7, #4]
 801783a:	47a0      	blx	r4
 801783c:	4603      	mov	r3, r0
 801783e:	73fb      	strb	r3, [r7, #15]
 8017840:	e001      	b.n	8017846 <tcp_process_refused_data+0xb6>
 8017842:	2300      	movs	r3, #0
 8017844:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801784a:	f113 0f0d 	cmn.w	r3, #13
 801784e:	d110      	bne.n	8017872 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8017850:	f06f 030c 	mvn.w	r3, #12
 8017854:	e00e      	b.n	8017874 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8017856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801785a:	f113 0f0d 	cmn.w	r3, #13
 801785e:	d102      	bne.n	8017866 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017860:	f06f 030c 	mvn.w	r3, #12
 8017864:	e006      	b.n	8017874 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	68ba      	ldr	r2, [r7, #8]
 801786a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801786c:	f06f 0304 	mvn.w	r3, #4
 8017870:	e000      	b.n	8017874 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017872:	2300      	movs	r3, #0
}
 8017874:	4618      	mov	r0, r3
 8017876:	3714      	adds	r7, #20
 8017878:	46bd      	mov	sp, r7
 801787a:	bd90      	pop	{r4, r7, pc}
 801787c:	080252b0 	.word	0x080252b0
 8017880:	080257ec 	.word	0x080257ec
 8017884:	08025320 	.word	0x08025320

08017888 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b084      	sub	sp, #16
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017890:	e007      	b.n	80178a2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f000 f80a 	bl	80178b2 <tcp_seg_free>
    seg = next;
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d1f4      	bne.n	8017892 <tcp_segs_free+0xa>
  }
}
 80178a8:	bf00      	nop
 80178aa:	bf00      	nop
 80178ac:	3710      	adds	r7, #16
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}

080178b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80178b2:	b580      	push	{r7, lr}
 80178b4:	b082      	sub	sp, #8
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d00c      	beq.n	80178da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	685b      	ldr	r3, [r3, #4]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d004      	beq.n	80178d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	685b      	ldr	r3, [r3, #4]
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7fe f9f3 	bl	8015cb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80178d2:	6879      	ldr	r1, [r7, #4]
 80178d4:	2003      	movs	r0, #3
 80178d6:	f7fd fb79 	bl	8014fcc <memp_free>
  }
}
 80178da:	bf00      	nop
 80178dc:	3708      	adds	r7, #8
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
	...

080178e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b084      	sub	sp, #16
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d106      	bne.n	8017900 <tcp_seg_copy+0x1c>
 80178f2:	4b0f      	ldr	r3, [pc, #60]	; (8017930 <tcp_seg_copy+0x4c>)
 80178f4:	f240 6282 	movw	r2, #1666	; 0x682
 80178f8:	490e      	ldr	r1, [pc, #56]	; (8017934 <tcp_seg_copy+0x50>)
 80178fa:	480f      	ldr	r0, [pc, #60]	; (8017938 <tcp_seg_copy+0x54>)
 80178fc:	f007 fb92 	bl	801f024 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017900:	2003      	movs	r0, #3
 8017902:	f7fd faf3 	bl	8014eec <memp_malloc>
 8017906:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d101      	bne.n	8017912 <tcp_seg_copy+0x2e>
    return NULL;
 801790e:	2300      	movs	r3, #0
 8017910:	e00a      	b.n	8017928 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017912:	2210      	movs	r2, #16
 8017914:	6879      	ldr	r1, [r7, #4]
 8017916:	68f8      	ldr	r0, [r7, #12]
 8017918:	f006 fc64 	bl	801e1e4 <memcpy>
  pbuf_ref(cseg->p);
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	4618      	mov	r0, r3
 8017922:	f7fe fa69 	bl	8015df8 <pbuf_ref>
  return cseg;
 8017926:	68fb      	ldr	r3, [r7, #12]
}
 8017928:	4618      	mov	r0, r3
 801792a:	3710      	adds	r7, #16
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}
 8017930:	080252b0 	.word	0x080252b0
 8017934:	08025830 	.word	0x08025830
 8017938:	08025320 	.word	0x08025320

0801793c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b084      	sub	sp, #16
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
 8017948:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801794a:	68bb      	ldr	r3, [r7, #8]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d109      	bne.n	8017964 <tcp_recv_null+0x28>
 8017950:	4b12      	ldr	r3, [pc, #72]	; (801799c <tcp_recv_null+0x60>)
 8017952:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017956:	4912      	ldr	r1, [pc, #72]	; (80179a0 <tcp_recv_null+0x64>)
 8017958:	4812      	ldr	r0, [pc, #72]	; (80179a4 <tcp_recv_null+0x68>)
 801795a:	f007 fb63 	bl	801f024 <iprintf>
 801795e:	f06f 030f 	mvn.w	r3, #15
 8017962:	e016      	b.n	8017992 <tcp_recv_null+0x56>

  if (p != NULL) {
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d009      	beq.n	801797e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	891b      	ldrh	r3, [r3, #8]
 801796e:	4619      	mov	r1, r3
 8017970:	68b8      	ldr	r0, [r7, #8]
 8017972:	f7ff f9bb 	bl	8016cec <tcp_recved>
    pbuf_free(p);
 8017976:	6878      	ldr	r0, [r7, #4]
 8017978:	f7fe f99e 	bl	8015cb8 <pbuf_free>
 801797c:	e008      	b.n	8017990 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801797e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d104      	bne.n	8017990 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017986:	68b8      	ldr	r0, [r7, #8]
 8017988:	f7fe feec 	bl	8016764 <tcp_close>
 801798c:	4603      	mov	r3, r0
 801798e:	e000      	b.n	8017992 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017990:	2300      	movs	r3, #0
}
 8017992:	4618      	mov	r0, r3
 8017994:	3710      	adds	r7, #16
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	080252b0 	.word	0x080252b0
 80179a0:	0802584c 	.word	0x0802584c
 80179a4:	08025320 	.word	0x08025320

080179a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b086      	sub	sp, #24
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	4603      	mov	r3, r0
 80179b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80179b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	db01      	blt.n	80179be <tcp_kill_prio+0x16>
 80179ba:	79fb      	ldrb	r3, [r7, #7]
 80179bc:	e000      	b.n	80179c0 <tcp_kill_prio+0x18>
 80179be:	237f      	movs	r3, #127	; 0x7f
 80179c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80179c2:	7afb      	ldrb	r3, [r7, #11]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d034      	beq.n	8017a32 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80179c8:	7afb      	ldrb	r3, [r7, #11]
 80179ca:	3b01      	subs	r3, #1
 80179cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80179ce:	2300      	movs	r3, #0
 80179d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80179d2:	2300      	movs	r3, #0
 80179d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80179d6:	4b19      	ldr	r3, [pc, #100]	; (8017a3c <tcp_kill_prio+0x94>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	617b      	str	r3, [r7, #20]
 80179dc:	e01f      	b.n	8017a1e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	7d5b      	ldrb	r3, [r3, #21]
 80179e2:	7afa      	ldrb	r2, [r7, #11]
 80179e4:	429a      	cmp	r2, r3
 80179e6:	d80c      	bhi.n	8017a02 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80179ec:	7afa      	ldrb	r2, [r7, #11]
 80179ee:	429a      	cmp	r2, r3
 80179f0:	d112      	bne.n	8017a18 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80179f2:	4b13      	ldr	r3, [pc, #76]	; (8017a40 <tcp_kill_prio+0x98>)
 80179f4:	681a      	ldr	r2, [r3, #0]
 80179f6:	697b      	ldr	r3, [r7, #20]
 80179f8:	6a1b      	ldr	r3, [r3, #32]
 80179fa:	1ad3      	subs	r3, r2, r3
 80179fc:	68fa      	ldr	r2, [r7, #12]
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d80a      	bhi.n	8017a18 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017a02:	4b0f      	ldr	r3, [pc, #60]	; (8017a40 <tcp_kill_prio+0x98>)
 8017a04:	681a      	ldr	r2, [r3, #0]
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	6a1b      	ldr	r3, [r3, #32]
 8017a0a:	1ad3      	subs	r3, r2, r3
 8017a0c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8017a12:	697b      	ldr	r3, [r7, #20]
 8017a14:	7d5b      	ldrb	r3, [r3, #21]
 8017a16:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a18:	697b      	ldr	r3, [r7, #20]
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	617b      	str	r3, [r7, #20]
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d1dc      	bne.n	80179de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017a24:	693b      	ldr	r3, [r7, #16]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d004      	beq.n	8017a34 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017a2a:	6938      	ldr	r0, [r7, #16]
 8017a2c:	f7fe ff84 	bl	8016938 <tcp_abort>
 8017a30:	e000      	b.n	8017a34 <tcp_kill_prio+0x8c>
    return;
 8017a32:	bf00      	nop
  }
}
 8017a34:	3718      	adds	r7, #24
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}
 8017a3a:	bf00      	nop
 8017a3c:	24008a24 	.word	0x24008a24
 8017a40:	24008a28 	.word	0x24008a28

08017a44 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b086      	sub	sp, #24
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017a4e:	79fb      	ldrb	r3, [r7, #7]
 8017a50:	2b08      	cmp	r3, #8
 8017a52:	d009      	beq.n	8017a68 <tcp_kill_state+0x24>
 8017a54:	79fb      	ldrb	r3, [r7, #7]
 8017a56:	2b09      	cmp	r3, #9
 8017a58:	d006      	beq.n	8017a68 <tcp_kill_state+0x24>
 8017a5a:	4b1a      	ldr	r3, [pc, #104]	; (8017ac4 <tcp_kill_state+0x80>)
 8017a5c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017a60:	4919      	ldr	r1, [pc, #100]	; (8017ac8 <tcp_kill_state+0x84>)
 8017a62:	481a      	ldr	r0, [pc, #104]	; (8017acc <tcp_kill_state+0x88>)
 8017a64:	f007 fade 	bl	801f024 <iprintf>

  inactivity = 0;
 8017a68:	2300      	movs	r3, #0
 8017a6a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a70:	4b17      	ldr	r3, [pc, #92]	; (8017ad0 <tcp_kill_state+0x8c>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	617b      	str	r3, [r7, #20]
 8017a76:	e017      	b.n	8017aa8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017a78:	697b      	ldr	r3, [r7, #20]
 8017a7a:	7d1b      	ldrb	r3, [r3, #20]
 8017a7c:	79fa      	ldrb	r2, [r7, #7]
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	d10f      	bne.n	8017aa2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017a82:	4b14      	ldr	r3, [pc, #80]	; (8017ad4 <tcp_kill_state+0x90>)
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	697b      	ldr	r3, [r7, #20]
 8017a88:	6a1b      	ldr	r3, [r3, #32]
 8017a8a:	1ad3      	subs	r3, r2, r3
 8017a8c:	68fa      	ldr	r2, [r7, #12]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d807      	bhi.n	8017aa2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017a92:	4b10      	ldr	r3, [pc, #64]	; (8017ad4 <tcp_kill_state+0x90>)
 8017a94:	681a      	ldr	r2, [r3, #0]
 8017a96:	697b      	ldr	r3, [r7, #20]
 8017a98:	6a1b      	ldr	r3, [r3, #32]
 8017a9a:	1ad3      	subs	r3, r2, r3
 8017a9c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017a9e:	697b      	ldr	r3, [r7, #20]
 8017aa0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017aa2:	697b      	ldr	r3, [r7, #20]
 8017aa4:	68db      	ldr	r3, [r3, #12]
 8017aa6:	617b      	str	r3, [r7, #20]
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d1e4      	bne.n	8017a78 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017aae:	693b      	ldr	r3, [r7, #16]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d003      	beq.n	8017abc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	6938      	ldr	r0, [r7, #16]
 8017ab8:	f7fe fe80 	bl	80167bc <tcp_abandon>
  }
}
 8017abc:	bf00      	nop
 8017abe:	3718      	adds	r7, #24
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	bd80      	pop	{r7, pc}
 8017ac4:	080252b0 	.word	0x080252b0
 8017ac8:	08025868 	.word	0x08025868
 8017acc:	08025320 	.word	0x08025320
 8017ad0:	24008a24 	.word	0x24008a24
 8017ad4:	24008a28 	.word	0x24008a28

08017ad8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b084      	sub	sp, #16
 8017adc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017ade:	2300      	movs	r3, #0
 8017ae0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ae6:	4b12      	ldr	r3, [pc, #72]	; (8017b30 <tcp_kill_timewait+0x58>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	60fb      	str	r3, [r7, #12]
 8017aec:	e012      	b.n	8017b14 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017aee:	4b11      	ldr	r3, [pc, #68]	; (8017b34 <tcp_kill_timewait+0x5c>)
 8017af0:	681a      	ldr	r2, [r3, #0]
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	6a1b      	ldr	r3, [r3, #32]
 8017af6:	1ad3      	subs	r3, r2, r3
 8017af8:	687a      	ldr	r2, [r7, #4]
 8017afa:	429a      	cmp	r2, r3
 8017afc:	d807      	bhi.n	8017b0e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017afe:	4b0d      	ldr	r3, [pc, #52]	; (8017b34 <tcp_kill_timewait+0x5c>)
 8017b00:	681a      	ldr	r2, [r3, #0]
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	6a1b      	ldr	r3, [r3, #32]
 8017b06:	1ad3      	subs	r3, r2, r3
 8017b08:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	68db      	ldr	r3, [r3, #12]
 8017b12:	60fb      	str	r3, [r7, #12]
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d1e9      	bne.n	8017aee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017b1a:	68bb      	ldr	r3, [r7, #8]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d002      	beq.n	8017b26 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017b20:	68b8      	ldr	r0, [r7, #8]
 8017b22:	f7fe ff09 	bl	8016938 <tcp_abort>
  }
}
 8017b26:	bf00      	nop
 8017b28:	3710      	adds	r7, #16
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	24008a34 	.word	0x24008a34
 8017b34:	24008a28 	.word	0x24008a28

08017b38 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b082      	sub	sp, #8
 8017b3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017b3e:	4b10      	ldr	r3, [pc, #64]	; (8017b80 <tcp_handle_closepend+0x48>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017b44:	e014      	b.n	8017b70 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	68db      	ldr	r3, [r3, #12]
 8017b4a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	8b5b      	ldrh	r3, [r3, #26]
 8017b50:	f003 0308 	and.w	r3, r3, #8
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d009      	beq.n	8017b6c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	8b5b      	ldrh	r3, [r3, #26]
 8017b5c:	f023 0308 	bic.w	r3, r3, #8
 8017b60:	b29a      	uxth	r2, r3
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7fe fd92 	bl	8016690 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d1e7      	bne.n	8017b46 <tcp_handle_closepend+0xe>
  }
}
 8017b76:	bf00      	nop
 8017b78:	bf00      	nop
 8017b7a:	3708      	adds	r7, #8
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}
 8017b80:	24008a24 	.word	0x24008a24

08017b84 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b084      	sub	sp, #16
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017b8e:	2001      	movs	r0, #1
 8017b90:	f7fd f9ac 	bl	8014eec <memp_malloc>
 8017b94:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d126      	bne.n	8017bea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017b9c:	f7ff ffcc 	bl	8017b38 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017ba0:	f7ff ff9a 	bl	8017ad8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017ba4:	2001      	movs	r0, #1
 8017ba6:	f7fd f9a1 	bl	8014eec <memp_malloc>
 8017baa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017bac:	68fb      	ldr	r3, [r7, #12]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d11b      	bne.n	8017bea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017bb2:	2009      	movs	r0, #9
 8017bb4:	f7ff ff46 	bl	8017a44 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bb8:	2001      	movs	r0, #1
 8017bba:	f7fd f997 	bl	8014eec <memp_malloc>
 8017bbe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d111      	bne.n	8017bea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017bc6:	2008      	movs	r0, #8
 8017bc8:	f7ff ff3c 	bl	8017a44 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bcc:	2001      	movs	r0, #1
 8017bce:	f7fd f98d 	bl	8014eec <memp_malloc>
 8017bd2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d107      	bne.n	8017bea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017bda:	79fb      	ldrb	r3, [r7, #7]
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f7ff fee3 	bl	80179a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017be2:	2001      	movs	r0, #1
 8017be4:	f7fd f982 	bl	8014eec <memp_malloc>
 8017be8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d03f      	beq.n	8017c70 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017bf0:	229c      	movs	r2, #156	; 0x9c
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	68f8      	ldr	r0, [r7, #12]
 8017bf6:	f006 fb1d 	bl	801e234 <memset>
    pcb->prio = prio;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	79fa      	ldrb	r2, [r7, #7]
 8017bfe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017c06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017c10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	22ff      	movs	r2, #255	; 0xff
 8017c1e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017c26:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	2206      	movs	r2, #6
 8017c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	2206      	movs	r2, #6
 8017c34:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c3c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	2201      	movs	r2, #1
 8017c42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017c46:	4b0d      	ldr	r3, [pc, #52]	; (8017c7c <tcp_alloc+0xf8>)
 8017c48:	681a      	ldr	r2, [r3, #0]
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017c4e:	4b0c      	ldr	r3, [pc, #48]	; (8017c80 <tcp_alloc+0xfc>)
 8017c50:	781a      	ldrb	r2, [r3, #0]
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017c5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	4a08      	ldr	r2, [pc, #32]	; (8017c84 <tcp_alloc+0x100>)
 8017c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	4a07      	ldr	r2, [pc, #28]	; (8017c88 <tcp_alloc+0x104>)
 8017c6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017c70:	68fb      	ldr	r3, [r7, #12]
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3710      	adds	r7, #16
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	bf00      	nop
 8017c7c:	24008a28 	.word	0x24008a28
 8017c80:	24005226 	.word	0x24005226
 8017c84:	0801793d 	.word	0x0801793d
 8017c88:	006ddd00 	.word	0x006ddd00

08017c8c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b084      	sub	sp, #16
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	4603      	mov	r3, r0
 8017c94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017c96:	2040      	movs	r0, #64	; 0x40
 8017c98:	f7ff ff74 	bl	8017b84 <tcp_alloc>
 8017c9c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017c9e:	68fb      	ldr	r3, [r7, #12]
}
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	3710      	adds	r7, #16
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}

08017ca8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017ca8:	b480      	push	{r7}
 8017caa:	b083      	sub	sp, #12
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
 8017cb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d002      	beq.n	8017cbe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	683a      	ldr	r2, [r7, #0]
 8017cbc:	611a      	str	r2, [r3, #16]
  }
}
 8017cbe:	bf00      	nop
 8017cc0:	370c      	adds	r7, #12
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc8:	4770      	bx	lr
	...

08017ccc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b082      	sub	sp, #8
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
 8017cd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d00e      	beq.n	8017cfa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	7d1b      	ldrb	r3, [r3, #20]
 8017ce0:	2b01      	cmp	r3, #1
 8017ce2:	d106      	bne.n	8017cf2 <tcp_recv+0x26>
 8017ce4:	4b07      	ldr	r3, [pc, #28]	; (8017d04 <tcp_recv+0x38>)
 8017ce6:	f240 72df 	movw	r2, #2015	; 0x7df
 8017cea:	4907      	ldr	r1, [pc, #28]	; (8017d08 <tcp_recv+0x3c>)
 8017cec:	4807      	ldr	r0, [pc, #28]	; (8017d0c <tcp_recv+0x40>)
 8017cee:	f007 f999 	bl	801f024 <iprintf>
    pcb->recv = recv;
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	683a      	ldr	r2, [r7, #0]
 8017cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8017cfa:	bf00      	nop
 8017cfc:	3708      	adds	r7, #8
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd80      	pop	{r7, pc}
 8017d02:	bf00      	nop
 8017d04:	080252b0 	.word	0x080252b0
 8017d08:	08025878 	.word	0x08025878
 8017d0c:	08025320 	.word	0x08025320

08017d10 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b082      	sub	sp, #8
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
 8017d18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d00e      	beq.n	8017d3e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	7d1b      	ldrb	r3, [r3, #20]
 8017d24:	2b01      	cmp	r3, #1
 8017d26:	d106      	bne.n	8017d36 <tcp_sent+0x26>
 8017d28:	4b07      	ldr	r3, [pc, #28]	; (8017d48 <tcp_sent+0x38>)
 8017d2a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8017d2e:	4907      	ldr	r1, [pc, #28]	; (8017d4c <tcp_sent+0x3c>)
 8017d30:	4807      	ldr	r0, [pc, #28]	; (8017d50 <tcp_sent+0x40>)
 8017d32:	f007 f977 	bl	801f024 <iprintf>
    pcb->sent = sent;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	683a      	ldr	r2, [r7, #0]
 8017d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8017d3e:	bf00      	nop
 8017d40:	3708      	adds	r7, #8
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bd80      	pop	{r7, pc}
 8017d46:	bf00      	nop
 8017d48:	080252b0 	.word	0x080252b0
 8017d4c:	080258a0 	.word	0x080258a0
 8017d50:	08025320 	.word	0x08025320

08017d54 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
 8017d5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d00e      	beq.n	8017d82 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	7d1b      	ldrb	r3, [r3, #20]
 8017d68:	2b01      	cmp	r3, #1
 8017d6a:	d106      	bne.n	8017d7a <tcp_err+0x26>
 8017d6c:	4b07      	ldr	r3, [pc, #28]	; (8017d8c <tcp_err+0x38>)
 8017d6e:	f640 020d 	movw	r2, #2061	; 0x80d
 8017d72:	4907      	ldr	r1, [pc, #28]	; (8017d90 <tcp_err+0x3c>)
 8017d74:	4807      	ldr	r0, [pc, #28]	; (8017d94 <tcp_err+0x40>)
 8017d76:	f007 f955 	bl	801f024 <iprintf>
    pcb->errf = err;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	683a      	ldr	r2, [r7, #0]
 8017d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8017d82:	bf00      	nop
 8017d84:	3708      	adds	r7, #8
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}
 8017d8a:	bf00      	nop
 8017d8c:	080252b0 	.word	0x080252b0
 8017d90:	080258c8 	.word	0x080258c8
 8017d94:	08025320 	.word	0x08025320

08017d98 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017d98:	b480      	push	{r7}
 8017d9a:	b085      	sub	sp, #20
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d008      	beq.n	8017dba <tcp_accept+0x22>
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	7d1b      	ldrb	r3, [r3, #20]
 8017dac:	2b01      	cmp	r3, #1
 8017dae:	d104      	bne.n	8017dba <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	683a      	ldr	r2, [r7, #0]
 8017db8:	619a      	str	r2, [r3, #24]
  }
}
 8017dba:	bf00      	nop
 8017dbc:	3714      	adds	r7, #20
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dc4:	4770      	bx	lr
	...

08017dc8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b084      	sub	sp, #16
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	60f8      	str	r0, [r7, #12]
 8017dd0:	60b9      	str	r1, [r7, #8]
 8017dd2:	4613      	mov	r3, r2
 8017dd4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d107      	bne.n	8017dec <tcp_poll+0x24>
 8017ddc:	4b0e      	ldr	r3, [pc, #56]	; (8017e18 <tcp_poll+0x50>)
 8017dde:	f640 023d 	movw	r2, #2109	; 0x83d
 8017de2:	490e      	ldr	r1, [pc, #56]	; (8017e1c <tcp_poll+0x54>)
 8017de4:	480e      	ldr	r0, [pc, #56]	; (8017e20 <tcp_poll+0x58>)
 8017de6:	f007 f91d 	bl	801f024 <iprintf>
 8017dea:	e011      	b.n	8017e10 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	7d1b      	ldrb	r3, [r3, #20]
 8017df0:	2b01      	cmp	r3, #1
 8017df2:	d106      	bne.n	8017e02 <tcp_poll+0x3a>
 8017df4:	4b08      	ldr	r3, [pc, #32]	; (8017e18 <tcp_poll+0x50>)
 8017df6:	f640 023e 	movw	r2, #2110	; 0x83e
 8017dfa:	490a      	ldr	r1, [pc, #40]	; (8017e24 <tcp_poll+0x5c>)
 8017dfc:	4808      	ldr	r0, [pc, #32]	; (8017e20 <tcp_poll+0x58>)
 8017dfe:	f007 f911 	bl	801f024 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	68ba      	ldr	r2, [r7, #8]
 8017e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	79fa      	ldrb	r2, [r7, #7]
 8017e0e:	775a      	strb	r2, [r3, #29]
}
 8017e10:	3710      	adds	r7, #16
 8017e12:	46bd      	mov	sp, r7
 8017e14:	bd80      	pop	{r7, pc}
 8017e16:	bf00      	nop
 8017e18:	080252b0 	.word	0x080252b0
 8017e1c:	080258f0 	.word	0x080258f0
 8017e20:	08025320 	.word	0x08025320
 8017e24:	08025908 	.word	0x08025908

08017e28 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b082      	sub	sp, #8
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d107      	bne.n	8017e46 <tcp_pcb_purge+0x1e>
 8017e36:	4b21      	ldr	r3, [pc, #132]	; (8017ebc <tcp_pcb_purge+0x94>)
 8017e38:	f640 0251 	movw	r2, #2129	; 0x851
 8017e3c:	4920      	ldr	r1, [pc, #128]	; (8017ec0 <tcp_pcb_purge+0x98>)
 8017e3e:	4821      	ldr	r0, [pc, #132]	; (8017ec4 <tcp_pcb_purge+0x9c>)
 8017e40:	f007 f8f0 	bl	801f024 <iprintf>
 8017e44:	e037      	b.n	8017eb6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	7d1b      	ldrb	r3, [r3, #20]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d033      	beq.n	8017eb6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017e52:	2b0a      	cmp	r3, #10
 8017e54:	d02f      	beq.n	8017eb6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017e5a:	2b01      	cmp	r3, #1
 8017e5c:	d02b      	beq.n	8017eb6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d007      	beq.n	8017e76 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7fd ff24 	bl	8015cb8 <pbuf_free>
      pcb->refused_data = NULL;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2200      	movs	r2, #0
 8017e74:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d002      	beq.n	8017e84 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017e7e:	6878      	ldr	r0, [r7, #4]
 8017e80:	f000 f986 	bl	8018190 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e8a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e90:	4618      	mov	r0, r3
 8017e92:	f7ff fcf9 	bl	8017888 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7ff fcf4 	bl	8017888 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	66da      	str	r2, [r3, #108]	; 0x6c
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017eb6:	3708      	adds	r7, #8
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd80      	pop	{r7, pc}
 8017ebc:	080252b0 	.word	0x080252b0
 8017ec0:	08025928 	.word	0x08025928
 8017ec4:	08025320 	.word	0x08025320

08017ec8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b084      	sub	sp, #16
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
 8017ed0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d106      	bne.n	8017ee6 <tcp_pcb_remove+0x1e>
 8017ed8:	4b3e      	ldr	r3, [pc, #248]	; (8017fd4 <tcp_pcb_remove+0x10c>)
 8017eda:	f640 0283 	movw	r2, #2179	; 0x883
 8017ede:	493e      	ldr	r1, [pc, #248]	; (8017fd8 <tcp_pcb_remove+0x110>)
 8017ee0:	483e      	ldr	r0, [pc, #248]	; (8017fdc <tcp_pcb_remove+0x114>)
 8017ee2:	f007 f89f 	bl	801f024 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d106      	bne.n	8017efa <tcp_pcb_remove+0x32>
 8017eec:	4b39      	ldr	r3, [pc, #228]	; (8017fd4 <tcp_pcb_remove+0x10c>)
 8017eee:	f640 0284 	movw	r2, #2180	; 0x884
 8017ef2:	493b      	ldr	r1, [pc, #236]	; (8017fe0 <tcp_pcb_remove+0x118>)
 8017ef4:	4839      	ldr	r0, [pc, #228]	; (8017fdc <tcp_pcb_remove+0x114>)
 8017ef6:	f007 f895 	bl	801f024 <iprintf>

  TCP_RMV(pcblist, pcb);
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	683a      	ldr	r2, [r7, #0]
 8017f00:	429a      	cmp	r2, r3
 8017f02:	d105      	bne.n	8017f10 <tcp_pcb_remove+0x48>
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	68da      	ldr	r2, [r3, #12]
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	601a      	str	r2, [r3, #0]
 8017f0e:	e013      	b.n	8017f38 <tcp_pcb_remove+0x70>
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	60fb      	str	r3, [r7, #12]
 8017f16:	e00c      	b.n	8017f32 <tcp_pcb_remove+0x6a>
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	68db      	ldr	r3, [r3, #12]
 8017f1c:	683a      	ldr	r2, [r7, #0]
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d104      	bne.n	8017f2c <tcp_pcb_remove+0x64>
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	68da      	ldr	r2, [r3, #12]
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	60da      	str	r2, [r3, #12]
 8017f2a:	e005      	b.n	8017f38 <tcp_pcb_remove+0x70>
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	68db      	ldr	r3, [r3, #12]
 8017f30:	60fb      	str	r3, [r7, #12]
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d1ef      	bne.n	8017f18 <tcp_pcb_remove+0x50>
 8017f38:	683b      	ldr	r3, [r7, #0]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017f3e:	6838      	ldr	r0, [r7, #0]
 8017f40:	f7ff ff72 	bl	8017e28 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	7d1b      	ldrb	r3, [r3, #20]
 8017f48:	2b0a      	cmp	r3, #10
 8017f4a:	d013      	beq.n	8017f74 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017f50:	2b01      	cmp	r3, #1
 8017f52:	d00f      	beq.n	8017f74 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017f54:	683b      	ldr	r3, [r7, #0]
 8017f56:	8b5b      	ldrh	r3, [r3, #26]
 8017f58:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d009      	beq.n	8017f74 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	8b5b      	ldrh	r3, [r3, #26]
 8017f64:	f043 0302 	orr.w	r3, r3, #2
 8017f68:	b29a      	uxth	r2, r3
 8017f6a:	683b      	ldr	r3, [r7, #0]
 8017f6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017f6e:	6838      	ldr	r0, [r7, #0]
 8017f70:	f003 fbc2 	bl	801b6f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	7d1b      	ldrb	r3, [r3, #20]
 8017f78:	2b01      	cmp	r3, #1
 8017f7a:	d020      	beq.n	8017fbe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d006      	beq.n	8017f92 <tcp_pcb_remove+0xca>
 8017f84:	4b13      	ldr	r3, [pc, #76]	; (8017fd4 <tcp_pcb_remove+0x10c>)
 8017f86:	f640 0293 	movw	r2, #2195	; 0x893
 8017f8a:	4916      	ldr	r1, [pc, #88]	; (8017fe4 <tcp_pcb_remove+0x11c>)
 8017f8c:	4813      	ldr	r0, [pc, #76]	; (8017fdc <tcp_pcb_remove+0x114>)
 8017f8e:	f007 f849 	bl	801f024 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017f92:	683b      	ldr	r3, [r7, #0]
 8017f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d006      	beq.n	8017fa8 <tcp_pcb_remove+0xe0>
 8017f9a:	4b0e      	ldr	r3, [pc, #56]	; (8017fd4 <tcp_pcb_remove+0x10c>)
 8017f9c:	f640 0294 	movw	r2, #2196	; 0x894
 8017fa0:	4911      	ldr	r1, [pc, #68]	; (8017fe8 <tcp_pcb_remove+0x120>)
 8017fa2:	480e      	ldr	r0, [pc, #56]	; (8017fdc <tcp_pcb_remove+0x114>)
 8017fa4:	f007 f83e 	bl	801f024 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017fa8:	683b      	ldr	r3, [r7, #0]
 8017faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d006      	beq.n	8017fbe <tcp_pcb_remove+0xf6>
 8017fb0:	4b08      	ldr	r3, [pc, #32]	; (8017fd4 <tcp_pcb_remove+0x10c>)
 8017fb2:	f640 0296 	movw	r2, #2198	; 0x896
 8017fb6:	490d      	ldr	r1, [pc, #52]	; (8017fec <tcp_pcb_remove+0x124>)
 8017fb8:	4808      	ldr	r0, [pc, #32]	; (8017fdc <tcp_pcb_remove+0x114>)
 8017fba:	f007 f833 	bl	801f024 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017fca:	bf00      	nop
 8017fcc:	3710      	adds	r7, #16
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}
 8017fd2:	bf00      	nop
 8017fd4:	080252b0 	.word	0x080252b0
 8017fd8:	08025944 	.word	0x08025944
 8017fdc:	08025320 	.word	0x08025320
 8017fe0:	08025960 	.word	0x08025960
 8017fe4:	08025980 	.word	0x08025980
 8017fe8:	08025998 	.word	0x08025998
 8017fec:	080259b4 	.word	0x080259b4

08017ff0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b082      	sub	sp, #8
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d106      	bne.n	801800c <tcp_next_iss+0x1c>
 8017ffe:	4b0a      	ldr	r3, [pc, #40]	; (8018028 <tcp_next_iss+0x38>)
 8018000:	f640 02af 	movw	r2, #2223	; 0x8af
 8018004:	4909      	ldr	r1, [pc, #36]	; (801802c <tcp_next_iss+0x3c>)
 8018006:	480a      	ldr	r0, [pc, #40]	; (8018030 <tcp_next_iss+0x40>)
 8018008:	f007 f80c 	bl	801f024 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801800c:	4b09      	ldr	r3, [pc, #36]	; (8018034 <tcp_next_iss+0x44>)
 801800e:	681a      	ldr	r2, [r3, #0]
 8018010:	4b09      	ldr	r3, [pc, #36]	; (8018038 <tcp_next_iss+0x48>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	4413      	add	r3, r2
 8018016:	4a07      	ldr	r2, [pc, #28]	; (8018034 <tcp_next_iss+0x44>)
 8018018:	6013      	str	r3, [r2, #0]
  return iss;
 801801a:	4b06      	ldr	r3, [pc, #24]	; (8018034 <tcp_next_iss+0x44>)
 801801c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801801e:	4618      	mov	r0, r3
 8018020:	3708      	adds	r7, #8
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}
 8018026:	bf00      	nop
 8018028:	080252b0 	.word	0x080252b0
 801802c:	080259cc 	.word	0x080259cc
 8018030:	08025320 	.word	0x08025320
 8018034:	24000028 	.word	0x24000028
 8018038:	24008a28 	.word	0x24008a28

0801803c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b086      	sub	sp, #24
 8018040:	af00      	add	r7, sp, #0
 8018042:	4603      	mov	r3, r0
 8018044:	60b9      	str	r1, [r7, #8]
 8018046:	607a      	str	r2, [r7, #4]
 8018048:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d106      	bne.n	801805e <tcp_eff_send_mss_netif+0x22>
 8018050:	4b14      	ldr	r3, [pc, #80]	; (80180a4 <tcp_eff_send_mss_netif+0x68>)
 8018052:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8018056:	4914      	ldr	r1, [pc, #80]	; (80180a8 <tcp_eff_send_mss_netif+0x6c>)
 8018058:	4814      	ldr	r0, [pc, #80]	; (80180ac <tcp_eff_send_mss_netif+0x70>)
 801805a:	f006 ffe3 	bl	801f024 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801805e:	68bb      	ldr	r3, [r7, #8]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d101      	bne.n	8018068 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8018064:	89fb      	ldrh	r3, [r7, #14]
 8018066:	e019      	b.n	801809c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801806c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801806e:	8afb      	ldrh	r3, [r7, #22]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d012      	beq.n	801809a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8018074:	2328      	movs	r3, #40	; 0x28
 8018076:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8018078:	8afa      	ldrh	r2, [r7, #22]
 801807a:	8abb      	ldrh	r3, [r7, #20]
 801807c:	429a      	cmp	r2, r3
 801807e:	d904      	bls.n	801808a <tcp_eff_send_mss_netif+0x4e>
 8018080:	8afa      	ldrh	r2, [r7, #22]
 8018082:	8abb      	ldrh	r3, [r7, #20]
 8018084:	1ad3      	subs	r3, r2, r3
 8018086:	b29b      	uxth	r3, r3
 8018088:	e000      	b.n	801808c <tcp_eff_send_mss_netif+0x50>
 801808a:	2300      	movs	r3, #0
 801808c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801808e:	8a7a      	ldrh	r2, [r7, #18]
 8018090:	89fb      	ldrh	r3, [r7, #14]
 8018092:	4293      	cmp	r3, r2
 8018094:	bf28      	it	cs
 8018096:	4613      	movcs	r3, r2
 8018098:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801809a:	89fb      	ldrh	r3, [r7, #14]
}
 801809c:	4618      	mov	r0, r3
 801809e:	3718      	adds	r7, #24
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}
 80180a4:	080252b0 	.word	0x080252b0
 80180a8:	080259e8 	.word	0x080259e8
 80180ac:	08025320 	.word	0x08025320

080180b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b084      	sub	sp, #16
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
 80180b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80180ba:	683b      	ldr	r3, [r7, #0]
 80180bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d119      	bne.n	80180f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80180c4:	4b10      	ldr	r3, [pc, #64]	; (8018108 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80180c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80180ca:	4910      	ldr	r1, [pc, #64]	; (801810c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80180cc:	4810      	ldr	r0, [pc, #64]	; (8018110 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80180ce:	f006 ffa9 	bl	801f024 <iprintf>

  while (pcb != NULL) {
 80180d2:	e011      	b.n	80180f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	681a      	ldr	r2, [r3, #0]
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	429a      	cmp	r2, r3
 80180de:	d108      	bne.n	80180f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	68db      	ldr	r3, [r3, #12]
 80180e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80180e6:	68f8      	ldr	r0, [r7, #12]
 80180e8:	f7fe fc26 	bl	8016938 <tcp_abort>
      pcb = next;
 80180ec:	68bb      	ldr	r3, [r7, #8]
 80180ee:	60fb      	str	r3, [r7, #12]
 80180f0:	e002      	b.n	80180f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	68db      	ldr	r3, [r3, #12]
 80180f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d1ea      	bne.n	80180d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80180fe:	bf00      	nop
 8018100:	bf00      	nop
 8018102:	3710      	adds	r7, #16
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}
 8018108:	080252b0 	.word	0x080252b0
 801810c:	08025a10 	.word	0x08025a10
 8018110:	08025320 	.word	0x08025320

08018114 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b084      	sub	sp, #16
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d02a      	beq.n	801817a <tcp_netif_ip_addr_changed+0x66>
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d026      	beq.n	801817a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801812c:	4b15      	ldr	r3, [pc, #84]	; (8018184 <tcp_netif_ip_addr_changed+0x70>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	4619      	mov	r1, r3
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f7ff ffbc 	bl	80180b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8018138:	4b13      	ldr	r3, [pc, #76]	; (8018188 <tcp_netif_ip_addr_changed+0x74>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	4619      	mov	r1, r3
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f7ff ffb6 	bl	80180b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d017      	beq.n	801817a <tcp_netif_ip_addr_changed+0x66>
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d013      	beq.n	801817a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018152:	4b0e      	ldr	r3, [pc, #56]	; (801818c <tcp_netif_ip_addr_changed+0x78>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	60fb      	str	r3, [r7, #12]
 8018158:	e00c      	b.n	8018174 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	681a      	ldr	r2, [r3, #0]
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	429a      	cmp	r2, r3
 8018164:	d103      	bne.n	801816e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8018166:	683b      	ldr	r3, [r7, #0]
 8018168:	681a      	ldr	r2, [r3, #0]
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	68db      	ldr	r3, [r3, #12]
 8018172:	60fb      	str	r3, [r7, #12]
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d1ef      	bne.n	801815a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801817a:	bf00      	nop
 801817c:	3710      	adds	r7, #16
 801817e:	46bd      	mov	sp, r7
 8018180:	bd80      	pop	{r7, pc}
 8018182:	bf00      	nop
 8018184:	24008a24 	.word	0x24008a24
 8018188:	24008a30 	.word	0x24008a30
 801818c:	24008a2c 	.word	0x24008a2c

08018190 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801819c:	2b00      	cmp	r3, #0
 801819e:	d007      	beq.n	80181b0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181a4:	4618      	mov	r0, r3
 80181a6:	f7ff fb6f 	bl	8017888 <tcp_segs_free>
    pcb->ooseq = NULL;
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	2200      	movs	r2, #0
 80181ae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80181b0:	bf00      	nop
 80181b2:	3708      	adds	r7, #8
 80181b4:	46bd      	mov	sp, r7
 80181b6:	bd80      	pop	{r7, pc}

080181b8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80181b8:	b590      	push	{r4, r7, lr}
 80181ba:	b08d      	sub	sp, #52	; 0x34
 80181bc:	af04      	add	r7, sp, #16
 80181be:	6078      	str	r0, [r7, #4]
 80181c0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d105      	bne.n	80181d4 <tcp_input+0x1c>
 80181c8:	4b9b      	ldr	r3, [pc, #620]	; (8018438 <tcp_input+0x280>)
 80181ca:	2283      	movs	r2, #131	; 0x83
 80181cc:	499b      	ldr	r1, [pc, #620]	; (801843c <tcp_input+0x284>)
 80181ce:	489c      	ldr	r0, [pc, #624]	; (8018440 <tcp_input+0x288>)
 80181d0:	f006 ff28 	bl	801f024 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	685b      	ldr	r3, [r3, #4]
 80181d8:	4a9a      	ldr	r2, [pc, #616]	; (8018444 <tcp_input+0x28c>)
 80181da:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	895b      	ldrh	r3, [r3, #10]
 80181e0:	2b13      	cmp	r3, #19
 80181e2:	f240 83c4 	bls.w	801896e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80181e6:	4b98      	ldr	r3, [pc, #608]	; (8018448 <tcp_input+0x290>)
 80181e8:	695b      	ldr	r3, [r3, #20]
 80181ea:	4a97      	ldr	r2, [pc, #604]	; (8018448 <tcp_input+0x290>)
 80181ec:	6812      	ldr	r2, [r2, #0]
 80181ee:	4611      	mov	r1, r2
 80181f0:	4618      	mov	r0, r3
 80181f2:	f7fb fbd1 	bl	8013998 <ip4_addr_isbroadcast_u32>
 80181f6:	4603      	mov	r3, r0
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	f040 83ba 	bne.w	8018972 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80181fe:	4b92      	ldr	r3, [pc, #584]	; (8018448 <tcp_input+0x290>)
 8018200:	695b      	ldr	r3, [r3, #20]
 8018202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018206:	2be0      	cmp	r3, #224	; 0xe0
 8018208:	f000 83b3 	beq.w	8018972 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801820c:	4b8d      	ldr	r3, [pc, #564]	; (8018444 <tcp_input+0x28c>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	899b      	ldrh	r3, [r3, #12]
 8018212:	b29b      	uxth	r3, r3
 8018214:	4618      	mov	r0, r3
 8018216:	f7f9 fe53 	bl	8011ec0 <lwip_htons>
 801821a:	4603      	mov	r3, r0
 801821c:	0b1b      	lsrs	r3, r3, #12
 801821e:	b29b      	uxth	r3, r3
 8018220:	b2db      	uxtb	r3, r3
 8018222:	009b      	lsls	r3, r3, #2
 8018224:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018226:	7cbb      	ldrb	r3, [r7, #18]
 8018228:	2b13      	cmp	r3, #19
 801822a:	f240 83a4 	bls.w	8018976 <tcp_input+0x7be>
 801822e:	7cbb      	ldrb	r3, [r7, #18]
 8018230:	b29a      	uxth	r2, r3
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	891b      	ldrh	r3, [r3, #8]
 8018236:	429a      	cmp	r2, r3
 8018238:	f200 839d 	bhi.w	8018976 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801823c:	7cbb      	ldrb	r3, [r7, #18]
 801823e:	b29b      	uxth	r3, r3
 8018240:	3b14      	subs	r3, #20
 8018242:	b29a      	uxth	r2, r3
 8018244:	4b81      	ldr	r3, [pc, #516]	; (801844c <tcp_input+0x294>)
 8018246:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018248:	4b81      	ldr	r3, [pc, #516]	; (8018450 <tcp_input+0x298>)
 801824a:	2200      	movs	r2, #0
 801824c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	895a      	ldrh	r2, [r3, #10]
 8018252:	7cbb      	ldrb	r3, [r7, #18]
 8018254:	b29b      	uxth	r3, r3
 8018256:	429a      	cmp	r2, r3
 8018258:	d309      	bcc.n	801826e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801825a:	4b7c      	ldr	r3, [pc, #496]	; (801844c <tcp_input+0x294>)
 801825c:	881a      	ldrh	r2, [r3, #0]
 801825e:	4b7d      	ldr	r3, [pc, #500]	; (8018454 <tcp_input+0x29c>)
 8018260:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8018262:	7cbb      	ldrb	r3, [r7, #18]
 8018264:	4619      	mov	r1, r3
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f7fd fca0 	bl	8015bac <pbuf_remove_header>
 801826c:	e04e      	b.n	801830c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d105      	bne.n	8018282 <tcp_input+0xca>
 8018276:	4b70      	ldr	r3, [pc, #448]	; (8018438 <tcp_input+0x280>)
 8018278:	22c2      	movs	r2, #194	; 0xc2
 801827a:	4977      	ldr	r1, [pc, #476]	; (8018458 <tcp_input+0x2a0>)
 801827c:	4870      	ldr	r0, [pc, #448]	; (8018440 <tcp_input+0x288>)
 801827e:	f006 fed1 	bl	801f024 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8018282:	2114      	movs	r1, #20
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f7fd fc91 	bl	8015bac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	895a      	ldrh	r2, [r3, #10]
 801828e:	4b71      	ldr	r3, [pc, #452]	; (8018454 <tcp_input+0x29c>)
 8018290:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018292:	4b6e      	ldr	r3, [pc, #440]	; (801844c <tcp_input+0x294>)
 8018294:	881a      	ldrh	r2, [r3, #0]
 8018296:	4b6f      	ldr	r3, [pc, #444]	; (8018454 <tcp_input+0x29c>)
 8018298:	881b      	ldrh	r3, [r3, #0]
 801829a:	1ad3      	subs	r3, r2, r3
 801829c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801829e:	4b6d      	ldr	r3, [pc, #436]	; (8018454 <tcp_input+0x29c>)
 80182a0:	881b      	ldrh	r3, [r3, #0]
 80182a2:	4619      	mov	r1, r3
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f7fd fc81 	bl	8015bac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	895b      	ldrh	r3, [r3, #10]
 80182b0:	8a3a      	ldrh	r2, [r7, #16]
 80182b2:	429a      	cmp	r2, r3
 80182b4:	f200 8361 	bhi.w	801897a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	685b      	ldr	r3, [r3, #4]
 80182be:	4a64      	ldr	r2, [pc, #400]	; (8018450 <tcp_input+0x298>)
 80182c0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	8a3a      	ldrh	r2, [r7, #16]
 80182c8:	4611      	mov	r1, r2
 80182ca:	4618      	mov	r0, r3
 80182cc:	f7fd fc6e 	bl	8015bac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	891a      	ldrh	r2, [r3, #8]
 80182d4:	8a3b      	ldrh	r3, [r7, #16]
 80182d6:	1ad3      	subs	r3, r2, r3
 80182d8:	b29a      	uxth	r2, r3
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	895b      	ldrh	r3, [r3, #10]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d005      	beq.n	80182f2 <tcp_input+0x13a>
 80182e6:	4b54      	ldr	r3, [pc, #336]	; (8018438 <tcp_input+0x280>)
 80182e8:	22df      	movs	r2, #223	; 0xdf
 80182ea:	495c      	ldr	r1, [pc, #368]	; (801845c <tcp_input+0x2a4>)
 80182ec:	4854      	ldr	r0, [pc, #336]	; (8018440 <tcp_input+0x288>)
 80182ee:	f006 fe99 	bl	801f024 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	891a      	ldrh	r2, [r3, #8]
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	891b      	ldrh	r3, [r3, #8]
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d005      	beq.n	801830c <tcp_input+0x154>
 8018300:	4b4d      	ldr	r3, [pc, #308]	; (8018438 <tcp_input+0x280>)
 8018302:	22e0      	movs	r2, #224	; 0xe0
 8018304:	4956      	ldr	r1, [pc, #344]	; (8018460 <tcp_input+0x2a8>)
 8018306:	484e      	ldr	r0, [pc, #312]	; (8018440 <tcp_input+0x288>)
 8018308:	f006 fe8c 	bl	801f024 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801830c:	4b4d      	ldr	r3, [pc, #308]	; (8018444 <tcp_input+0x28c>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	881b      	ldrh	r3, [r3, #0]
 8018312:	b29b      	uxth	r3, r3
 8018314:	4a4b      	ldr	r2, [pc, #300]	; (8018444 <tcp_input+0x28c>)
 8018316:	6814      	ldr	r4, [r2, #0]
 8018318:	4618      	mov	r0, r3
 801831a:	f7f9 fdd1 	bl	8011ec0 <lwip_htons>
 801831e:	4603      	mov	r3, r0
 8018320:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018322:	4b48      	ldr	r3, [pc, #288]	; (8018444 <tcp_input+0x28c>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	885b      	ldrh	r3, [r3, #2]
 8018328:	b29b      	uxth	r3, r3
 801832a:	4a46      	ldr	r2, [pc, #280]	; (8018444 <tcp_input+0x28c>)
 801832c:	6814      	ldr	r4, [r2, #0]
 801832e:	4618      	mov	r0, r3
 8018330:	f7f9 fdc6 	bl	8011ec0 <lwip_htons>
 8018334:	4603      	mov	r3, r0
 8018336:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018338:	4b42      	ldr	r3, [pc, #264]	; (8018444 <tcp_input+0x28c>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	685b      	ldr	r3, [r3, #4]
 801833e:	4a41      	ldr	r2, [pc, #260]	; (8018444 <tcp_input+0x28c>)
 8018340:	6814      	ldr	r4, [r2, #0]
 8018342:	4618      	mov	r0, r3
 8018344:	f7f9 fdd1 	bl	8011eea <lwip_htonl>
 8018348:	4603      	mov	r3, r0
 801834a:	6063      	str	r3, [r4, #4]
 801834c:	6863      	ldr	r3, [r4, #4]
 801834e:	4a45      	ldr	r2, [pc, #276]	; (8018464 <tcp_input+0x2ac>)
 8018350:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018352:	4b3c      	ldr	r3, [pc, #240]	; (8018444 <tcp_input+0x28c>)
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	689b      	ldr	r3, [r3, #8]
 8018358:	4a3a      	ldr	r2, [pc, #232]	; (8018444 <tcp_input+0x28c>)
 801835a:	6814      	ldr	r4, [r2, #0]
 801835c:	4618      	mov	r0, r3
 801835e:	f7f9 fdc4 	bl	8011eea <lwip_htonl>
 8018362:	4603      	mov	r3, r0
 8018364:	60a3      	str	r3, [r4, #8]
 8018366:	68a3      	ldr	r3, [r4, #8]
 8018368:	4a3f      	ldr	r2, [pc, #252]	; (8018468 <tcp_input+0x2b0>)
 801836a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801836c:	4b35      	ldr	r3, [pc, #212]	; (8018444 <tcp_input+0x28c>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	89db      	ldrh	r3, [r3, #14]
 8018372:	b29b      	uxth	r3, r3
 8018374:	4a33      	ldr	r2, [pc, #204]	; (8018444 <tcp_input+0x28c>)
 8018376:	6814      	ldr	r4, [r2, #0]
 8018378:	4618      	mov	r0, r3
 801837a:	f7f9 fda1 	bl	8011ec0 <lwip_htons>
 801837e:	4603      	mov	r3, r0
 8018380:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8018382:	4b30      	ldr	r3, [pc, #192]	; (8018444 <tcp_input+0x28c>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	899b      	ldrh	r3, [r3, #12]
 8018388:	b29b      	uxth	r3, r3
 801838a:	4618      	mov	r0, r3
 801838c:	f7f9 fd98 	bl	8011ec0 <lwip_htons>
 8018390:	4603      	mov	r3, r0
 8018392:	b2db      	uxtb	r3, r3
 8018394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018398:	b2da      	uxtb	r2, r3
 801839a:	4b34      	ldr	r3, [pc, #208]	; (801846c <tcp_input+0x2b4>)
 801839c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	891a      	ldrh	r2, [r3, #8]
 80183a2:	4b33      	ldr	r3, [pc, #204]	; (8018470 <tcp_input+0x2b8>)
 80183a4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80183a6:	4b31      	ldr	r3, [pc, #196]	; (801846c <tcp_input+0x2b4>)
 80183a8:	781b      	ldrb	r3, [r3, #0]
 80183aa:	f003 0303 	and.w	r3, r3, #3
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d00c      	beq.n	80183cc <tcp_input+0x214>
    tcplen++;
 80183b2:	4b2f      	ldr	r3, [pc, #188]	; (8018470 <tcp_input+0x2b8>)
 80183b4:	881b      	ldrh	r3, [r3, #0]
 80183b6:	3301      	adds	r3, #1
 80183b8:	b29a      	uxth	r2, r3
 80183ba:	4b2d      	ldr	r3, [pc, #180]	; (8018470 <tcp_input+0x2b8>)
 80183bc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	891a      	ldrh	r2, [r3, #8]
 80183c2:	4b2b      	ldr	r3, [pc, #172]	; (8018470 <tcp_input+0x2b8>)
 80183c4:	881b      	ldrh	r3, [r3, #0]
 80183c6:	429a      	cmp	r2, r3
 80183c8:	f200 82d9 	bhi.w	801897e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80183cc:	2300      	movs	r3, #0
 80183ce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80183d0:	4b28      	ldr	r3, [pc, #160]	; (8018474 <tcp_input+0x2bc>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	61fb      	str	r3, [r7, #28]
 80183d6:	e09d      	b.n	8018514 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80183d8:	69fb      	ldr	r3, [r7, #28]
 80183da:	7d1b      	ldrb	r3, [r3, #20]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d105      	bne.n	80183ec <tcp_input+0x234>
 80183e0:	4b15      	ldr	r3, [pc, #84]	; (8018438 <tcp_input+0x280>)
 80183e2:	22fb      	movs	r2, #251	; 0xfb
 80183e4:	4924      	ldr	r1, [pc, #144]	; (8018478 <tcp_input+0x2c0>)
 80183e6:	4816      	ldr	r0, [pc, #88]	; (8018440 <tcp_input+0x288>)
 80183e8:	f006 fe1c 	bl	801f024 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80183ec:	69fb      	ldr	r3, [r7, #28]
 80183ee:	7d1b      	ldrb	r3, [r3, #20]
 80183f0:	2b0a      	cmp	r3, #10
 80183f2:	d105      	bne.n	8018400 <tcp_input+0x248>
 80183f4:	4b10      	ldr	r3, [pc, #64]	; (8018438 <tcp_input+0x280>)
 80183f6:	22fc      	movs	r2, #252	; 0xfc
 80183f8:	4920      	ldr	r1, [pc, #128]	; (801847c <tcp_input+0x2c4>)
 80183fa:	4811      	ldr	r0, [pc, #68]	; (8018440 <tcp_input+0x288>)
 80183fc:	f006 fe12 	bl	801f024 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018400:	69fb      	ldr	r3, [r7, #28]
 8018402:	7d1b      	ldrb	r3, [r3, #20]
 8018404:	2b01      	cmp	r3, #1
 8018406:	d105      	bne.n	8018414 <tcp_input+0x25c>
 8018408:	4b0b      	ldr	r3, [pc, #44]	; (8018438 <tcp_input+0x280>)
 801840a:	22fd      	movs	r2, #253	; 0xfd
 801840c:	491c      	ldr	r1, [pc, #112]	; (8018480 <tcp_input+0x2c8>)
 801840e:	480c      	ldr	r0, [pc, #48]	; (8018440 <tcp_input+0x288>)
 8018410:	f006 fe08 	bl	801f024 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018414:	69fb      	ldr	r3, [r7, #28]
 8018416:	7a1b      	ldrb	r3, [r3, #8]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d033      	beq.n	8018484 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801841c:	69fb      	ldr	r3, [r7, #28]
 801841e:	7a1a      	ldrb	r2, [r3, #8]
 8018420:	4b09      	ldr	r3, [pc, #36]	; (8018448 <tcp_input+0x290>)
 8018422:	685b      	ldr	r3, [r3, #4]
 8018424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018428:	3301      	adds	r3, #1
 801842a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801842c:	429a      	cmp	r2, r3
 801842e:	d029      	beq.n	8018484 <tcp_input+0x2cc>
      prev = pcb;
 8018430:	69fb      	ldr	r3, [r7, #28]
 8018432:	61bb      	str	r3, [r7, #24]
      continue;
 8018434:	e06b      	b.n	801850e <tcp_input+0x356>
 8018436:	bf00      	nop
 8018438:	08025a44 	.word	0x08025a44
 801843c:	08025aa4 	.word	0x08025aa4
 8018440:	08025abc 	.word	0x08025abc
 8018444:	24005238 	.word	0x24005238
 8018448:	24005b34 	.word	0x24005b34
 801844c:	2400523c 	.word	0x2400523c
 8018450:	24005240 	.word	0x24005240
 8018454:	2400523e 	.word	0x2400523e
 8018458:	08025ae4 	.word	0x08025ae4
 801845c:	08025af4 	.word	0x08025af4
 8018460:	08025b00 	.word	0x08025b00
 8018464:	24005248 	.word	0x24005248
 8018468:	2400524c 	.word	0x2400524c
 801846c:	24005254 	.word	0x24005254
 8018470:	24005252 	.word	0x24005252
 8018474:	24008a24 	.word	0x24008a24
 8018478:	08025b20 	.word	0x08025b20
 801847c:	08025b48 	.word	0x08025b48
 8018480:	08025b74 	.word	0x08025b74
    }

    if (pcb->remote_port == tcphdr->src &&
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	8b1a      	ldrh	r2, [r3, #24]
 8018488:	4b94      	ldr	r3, [pc, #592]	; (80186dc <tcp_input+0x524>)
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	881b      	ldrh	r3, [r3, #0]
 801848e:	b29b      	uxth	r3, r3
 8018490:	429a      	cmp	r2, r3
 8018492:	d13a      	bne.n	801850a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8018494:	69fb      	ldr	r3, [r7, #28]
 8018496:	8ada      	ldrh	r2, [r3, #22]
 8018498:	4b90      	ldr	r3, [pc, #576]	; (80186dc <tcp_input+0x524>)
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	885b      	ldrh	r3, [r3, #2]
 801849e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d132      	bne.n	801850a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184a4:	69fb      	ldr	r3, [r7, #28]
 80184a6:	685a      	ldr	r2, [r3, #4]
 80184a8:	4b8d      	ldr	r3, [pc, #564]	; (80186e0 <tcp_input+0x528>)
 80184aa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d12c      	bne.n	801850a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80184b0:	69fb      	ldr	r3, [r7, #28]
 80184b2:	681a      	ldr	r2, [r3, #0]
 80184b4:	4b8a      	ldr	r3, [pc, #552]	; (80186e0 <tcp_input+0x528>)
 80184b6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184b8:	429a      	cmp	r2, r3
 80184ba:	d126      	bne.n	801850a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80184bc:	69fb      	ldr	r3, [r7, #28]
 80184be:	68db      	ldr	r3, [r3, #12]
 80184c0:	69fa      	ldr	r2, [r7, #28]
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d106      	bne.n	80184d4 <tcp_input+0x31c>
 80184c6:	4b87      	ldr	r3, [pc, #540]	; (80186e4 <tcp_input+0x52c>)
 80184c8:	f240 120d 	movw	r2, #269	; 0x10d
 80184cc:	4986      	ldr	r1, [pc, #536]	; (80186e8 <tcp_input+0x530>)
 80184ce:	4887      	ldr	r0, [pc, #540]	; (80186ec <tcp_input+0x534>)
 80184d0:	f006 fda8 	bl	801f024 <iprintf>
      if (prev != NULL) {
 80184d4:	69bb      	ldr	r3, [r7, #24]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d00a      	beq.n	80184f0 <tcp_input+0x338>
        prev->next = pcb->next;
 80184da:	69fb      	ldr	r3, [r7, #28]
 80184dc:	68da      	ldr	r2, [r3, #12]
 80184de:	69bb      	ldr	r3, [r7, #24]
 80184e0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80184e2:	4b83      	ldr	r3, [pc, #524]	; (80186f0 <tcp_input+0x538>)
 80184e4:	681a      	ldr	r2, [r3, #0]
 80184e6:	69fb      	ldr	r3, [r7, #28]
 80184e8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80184ea:	4a81      	ldr	r2, [pc, #516]	; (80186f0 <tcp_input+0x538>)
 80184ec:	69fb      	ldr	r3, [r7, #28]
 80184ee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80184f0:	69fb      	ldr	r3, [r7, #28]
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	69fa      	ldr	r2, [r7, #28]
 80184f6:	429a      	cmp	r2, r3
 80184f8:	d111      	bne.n	801851e <tcp_input+0x366>
 80184fa:	4b7a      	ldr	r3, [pc, #488]	; (80186e4 <tcp_input+0x52c>)
 80184fc:	f240 1215 	movw	r2, #277	; 0x115
 8018500:	497c      	ldr	r1, [pc, #496]	; (80186f4 <tcp_input+0x53c>)
 8018502:	487a      	ldr	r0, [pc, #488]	; (80186ec <tcp_input+0x534>)
 8018504:	f006 fd8e 	bl	801f024 <iprintf>
      break;
 8018508:	e009      	b.n	801851e <tcp_input+0x366>
    }
    prev = pcb;
 801850a:	69fb      	ldr	r3, [r7, #28]
 801850c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801850e:	69fb      	ldr	r3, [r7, #28]
 8018510:	68db      	ldr	r3, [r3, #12]
 8018512:	61fb      	str	r3, [r7, #28]
 8018514:	69fb      	ldr	r3, [r7, #28]
 8018516:	2b00      	cmp	r3, #0
 8018518:	f47f af5e 	bne.w	80183d8 <tcp_input+0x220>
 801851c:	e000      	b.n	8018520 <tcp_input+0x368>
      break;
 801851e:	bf00      	nop
  }

  if (pcb == NULL) {
 8018520:	69fb      	ldr	r3, [r7, #28]
 8018522:	2b00      	cmp	r3, #0
 8018524:	f040 8095 	bne.w	8018652 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018528:	4b73      	ldr	r3, [pc, #460]	; (80186f8 <tcp_input+0x540>)
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	61fb      	str	r3, [r7, #28]
 801852e:	e03f      	b.n	80185b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018530:	69fb      	ldr	r3, [r7, #28]
 8018532:	7d1b      	ldrb	r3, [r3, #20]
 8018534:	2b0a      	cmp	r3, #10
 8018536:	d006      	beq.n	8018546 <tcp_input+0x38e>
 8018538:	4b6a      	ldr	r3, [pc, #424]	; (80186e4 <tcp_input+0x52c>)
 801853a:	f240 121f 	movw	r2, #287	; 0x11f
 801853e:	496f      	ldr	r1, [pc, #444]	; (80186fc <tcp_input+0x544>)
 8018540:	486a      	ldr	r0, [pc, #424]	; (80186ec <tcp_input+0x534>)
 8018542:	f006 fd6f 	bl	801f024 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018546:	69fb      	ldr	r3, [r7, #28]
 8018548:	7a1b      	ldrb	r3, [r3, #8]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d009      	beq.n	8018562 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	7a1a      	ldrb	r2, [r3, #8]
 8018552:	4b63      	ldr	r3, [pc, #396]	; (80186e0 <tcp_input+0x528>)
 8018554:	685b      	ldr	r3, [r3, #4]
 8018556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801855a:	3301      	adds	r3, #1
 801855c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801855e:	429a      	cmp	r2, r3
 8018560:	d122      	bne.n	80185a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018562:	69fb      	ldr	r3, [r7, #28]
 8018564:	8b1a      	ldrh	r2, [r3, #24]
 8018566:	4b5d      	ldr	r3, [pc, #372]	; (80186dc <tcp_input+0x524>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	881b      	ldrh	r3, [r3, #0]
 801856c:	b29b      	uxth	r3, r3
 801856e:	429a      	cmp	r2, r3
 8018570:	d11b      	bne.n	80185aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8018572:	69fb      	ldr	r3, [r7, #28]
 8018574:	8ada      	ldrh	r2, [r3, #22]
 8018576:	4b59      	ldr	r3, [pc, #356]	; (80186dc <tcp_input+0x524>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	885b      	ldrh	r3, [r3, #2]
 801857c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801857e:	429a      	cmp	r2, r3
 8018580:	d113      	bne.n	80185aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018582:	69fb      	ldr	r3, [r7, #28]
 8018584:	685a      	ldr	r2, [r3, #4]
 8018586:	4b56      	ldr	r3, [pc, #344]	; (80186e0 <tcp_input+0x528>)
 8018588:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801858a:	429a      	cmp	r2, r3
 801858c:	d10d      	bne.n	80185aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	681a      	ldr	r2, [r3, #0]
 8018592:	4b53      	ldr	r3, [pc, #332]	; (80186e0 <tcp_input+0x528>)
 8018594:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018596:	429a      	cmp	r2, r3
 8018598:	d107      	bne.n	80185aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801859a:	69f8      	ldr	r0, [r7, #28]
 801859c:	f000 fb54 	bl	8018c48 <tcp_timewait_input>
        }
        pbuf_free(p);
 80185a0:	6878      	ldr	r0, [r7, #4]
 80185a2:	f7fd fb89 	bl	8015cb8 <pbuf_free>
        return;
 80185a6:	e1f0      	b.n	801898a <tcp_input+0x7d2>
        continue;
 80185a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80185aa:	69fb      	ldr	r3, [r7, #28]
 80185ac:	68db      	ldr	r3, [r3, #12]
 80185ae:	61fb      	str	r3, [r7, #28]
 80185b0:	69fb      	ldr	r3, [r7, #28]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d1bc      	bne.n	8018530 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80185b6:	2300      	movs	r3, #0
 80185b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80185ba:	4b51      	ldr	r3, [pc, #324]	; (8018700 <tcp_input+0x548>)
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	617b      	str	r3, [r7, #20]
 80185c0:	e02a      	b.n	8018618 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80185c2:	697b      	ldr	r3, [r7, #20]
 80185c4:	7a1b      	ldrb	r3, [r3, #8]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d00c      	beq.n	80185e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	7a1a      	ldrb	r2, [r3, #8]
 80185ce:	4b44      	ldr	r3, [pc, #272]	; (80186e0 <tcp_input+0x528>)
 80185d0:	685b      	ldr	r3, [r3, #4]
 80185d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80185d6:	3301      	adds	r3, #1
 80185d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80185da:	429a      	cmp	r2, r3
 80185dc:	d002      	beq.n	80185e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	61bb      	str	r3, [r7, #24]
        continue;
 80185e2:	e016      	b.n	8018612 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80185e4:	697b      	ldr	r3, [r7, #20]
 80185e6:	8ada      	ldrh	r2, [r3, #22]
 80185e8:	4b3c      	ldr	r3, [pc, #240]	; (80186dc <tcp_input+0x524>)
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	885b      	ldrh	r3, [r3, #2]
 80185ee:	b29b      	uxth	r3, r3
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d10c      	bne.n	801860e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	681a      	ldr	r2, [r3, #0]
 80185f8:	4b39      	ldr	r3, [pc, #228]	; (80186e0 <tcp_input+0x528>)
 80185fa:	695b      	ldr	r3, [r3, #20]
 80185fc:	429a      	cmp	r2, r3
 80185fe:	d00f      	beq.n	8018620 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d00d      	beq.n	8018622 <tcp_input+0x46a>
 8018606:	697b      	ldr	r3, [r7, #20]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d009      	beq.n	8018622 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801860e:	697b      	ldr	r3, [r7, #20]
 8018610:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018612:	697b      	ldr	r3, [r7, #20]
 8018614:	68db      	ldr	r3, [r3, #12]
 8018616:	617b      	str	r3, [r7, #20]
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d1d1      	bne.n	80185c2 <tcp_input+0x40a>
 801861e:	e000      	b.n	8018622 <tcp_input+0x46a>
            break;
 8018620:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018622:	697b      	ldr	r3, [r7, #20]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d014      	beq.n	8018652 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018628:	69bb      	ldr	r3, [r7, #24]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d00a      	beq.n	8018644 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801862e:	697b      	ldr	r3, [r7, #20]
 8018630:	68da      	ldr	r2, [r3, #12]
 8018632:	69bb      	ldr	r3, [r7, #24]
 8018634:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018636:	4b32      	ldr	r3, [pc, #200]	; (8018700 <tcp_input+0x548>)
 8018638:	681a      	ldr	r2, [r3, #0]
 801863a:	697b      	ldr	r3, [r7, #20]
 801863c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801863e:	4a30      	ldr	r2, [pc, #192]	; (8018700 <tcp_input+0x548>)
 8018640:	697b      	ldr	r3, [r7, #20]
 8018642:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018644:	6978      	ldr	r0, [r7, #20]
 8018646:	f000 fa01 	bl	8018a4c <tcp_listen_input>
      }
      pbuf_free(p);
 801864a:	6878      	ldr	r0, [r7, #4]
 801864c:	f7fd fb34 	bl	8015cb8 <pbuf_free>
      return;
 8018650:	e19b      	b.n	801898a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018652:	69fb      	ldr	r3, [r7, #28]
 8018654:	2b00      	cmp	r3, #0
 8018656:	f000 8160 	beq.w	801891a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801865a:	4b2a      	ldr	r3, [pc, #168]	; (8018704 <tcp_input+0x54c>)
 801865c:	2200      	movs	r2, #0
 801865e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	891a      	ldrh	r2, [r3, #8]
 8018664:	4b27      	ldr	r3, [pc, #156]	; (8018704 <tcp_input+0x54c>)
 8018666:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018668:	4a26      	ldr	r2, [pc, #152]	; (8018704 <tcp_input+0x54c>)
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801866e:	4b1b      	ldr	r3, [pc, #108]	; (80186dc <tcp_input+0x524>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	4a24      	ldr	r2, [pc, #144]	; (8018704 <tcp_input+0x54c>)
 8018674:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8018676:	4b24      	ldr	r3, [pc, #144]	; (8018708 <tcp_input+0x550>)
 8018678:	2200      	movs	r2, #0
 801867a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801867c:	4b23      	ldr	r3, [pc, #140]	; (801870c <tcp_input+0x554>)
 801867e:	2200      	movs	r2, #0
 8018680:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018682:	4b23      	ldr	r3, [pc, #140]	; (8018710 <tcp_input+0x558>)
 8018684:	2200      	movs	r2, #0
 8018686:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018688:	4b22      	ldr	r3, [pc, #136]	; (8018714 <tcp_input+0x55c>)
 801868a:	781b      	ldrb	r3, [r3, #0]
 801868c:	f003 0308 	and.w	r3, r3, #8
 8018690:	2b00      	cmp	r3, #0
 8018692:	d006      	beq.n	80186a2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	7b5b      	ldrb	r3, [r3, #13]
 8018698:	f043 0301 	orr.w	r3, r3, #1
 801869c:	b2da      	uxtb	r2, r3
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80186a2:	69fb      	ldr	r3, [r7, #28]
 80186a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d038      	beq.n	801871c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80186aa:	69f8      	ldr	r0, [r7, #28]
 80186ac:	f7ff f870 	bl	8017790 <tcp_process_refused_data>
 80186b0:	4603      	mov	r3, r0
 80186b2:	f113 0f0d 	cmn.w	r3, #13
 80186b6:	d007      	beq.n	80186c8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80186b8:	69fb      	ldr	r3, [r7, #28]
 80186ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d02d      	beq.n	801871c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80186c0:	4b15      	ldr	r3, [pc, #84]	; (8018718 <tcp_input+0x560>)
 80186c2:	881b      	ldrh	r3, [r3, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d029      	beq.n	801871c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80186c8:	69fb      	ldr	r3, [r7, #28]
 80186ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	f040 8104 	bne.w	80188da <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80186d2:	69f8      	ldr	r0, [r7, #28]
 80186d4:	f003 fe16 	bl	801c304 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80186d8:	e0ff      	b.n	80188da <tcp_input+0x722>
 80186da:	bf00      	nop
 80186dc:	24005238 	.word	0x24005238
 80186e0:	24005b34 	.word	0x24005b34
 80186e4:	08025a44 	.word	0x08025a44
 80186e8:	08025b9c 	.word	0x08025b9c
 80186ec:	08025abc 	.word	0x08025abc
 80186f0:	24008a24 	.word	0x24008a24
 80186f4:	08025bc8 	.word	0x08025bc8
 80186f8:	24008a34 	.word	0x24008a34
 80186fc:	08025bf4 	.word	0x08025bf4
 8018700:	24008a2c 	.word	0x24008a2c
 8018704:	24005228 	.word	0x24005228
 8018708:	24005258 	.word	0x24005258
 801870c:	24005255 	.word	0x24005255
 8018710:	24005250 	.word	0x24005250
 8018714:	24005254 	.word	0x24005254
 8018718:	24005252 	.word	0x24005252
      }
    }
    tcp_input_pcb = pcb;
 801871c:	4a9c      	ldr	r2, [pc, #624]	; (8018990 <tcp_input+0x7d8>)
 801871e:	69fb      	ldr	r3, [r7, #28]
 8018720:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018722:	69f8      	ldr	r0, [r7, #28]
 8018724:	f000 fb0a 	bl	8018d3c <tcp_process>
 8018728:	4603      	mov	r3, r0
 801872a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801872c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018730:	f113 0f0d 	cmn.w	r3, #13
 8018734:	f000 80d3 	beq.w	80188de <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8018738:	4b96      	ldr	r3, [pc, #600]	; (8018994 <tcp_input+0x7dc>)
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	f003 0308 	and.w	r3, r3, #8
 8018740:	2b00      	cmp	r3, #0
 8018742:	d015      	beq.n	8018770 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018744:	69fb      	ldr	r3, [r7, #28]
 8018746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801874a:	2b00      	cmp	r3, #0
 801874c:	d008      	beq.n	8018760 <tcp_input+0x5a8>
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018754:	69fa      	ldr	r2, [r7, #28]
 8018756:	6912      	ldr	r2, [r2, #16]
 8018758:	f06f 010d 	mvn.w	r1, #13
 801875c:	4610      	mov	r0, r2
 801875e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018760:	69f9      	ldr	r1, [r7, #28]
 8018762:	488d      	ldr	r0, [pc, #564]	; (8018998 <tcp_input+0x7e0>)
 8018764:	f7ff fbb0 	bl	8017ec8 <tcp_pcb_remove>
        tcp_free(pcb);
 8018768:	69f8      	ldr	r0, [r7, #28]
 801876a:	f7fd fdfd 	bl	8016368 <tcp_free>
 801876e:	e0c1      	b.n	80188f4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8018770:	2300      	movs	r3, #0
 8018772:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8018774:	4b89      	ldr	r3, [pc, #548]	; (801899c <tcp_input+0x7e4>)
 8018776:	881b      	ldrh	r3, [r3, #0]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d01d      	beq.n	80187b8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801877c:	4b87      	ldr	r3, [pc, #540]	; (801899c <tcp_input+0x7e4>)
 801877e:	881b      	ldrh	r3, [r3, #0]
 8018780:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8018782:	69fb      	ldr	r3, [r7, #28]
 8018784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018788:	2b00      	cmp	r3, #0
 801878a:	d00a      	beq.n	80187a2 <tcp_input+0x5ea>
 801878c:	69fb      	ldr	r3, [r7, #28]
 801878e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018792:	69fa      	ldr	r2, [r7, #28]
 8018794:	6910      	ldr	r0, [r2, #16]
 8018796:	89fa      	ldrh	r2, [r7, #14]
 8018798:	69f9      	ldr	r1, [r7, #28]
 801879a:	4798      	blx	r3
 801879c:	4603      	mov	r3, r0
 801879e:	74fb      	strb	r3, [r7, #19]
 80187a0:	e001      	b.n	80187a6 <tcp_input+0x5ee>
 80187a2:	2300      	movs	r3, #0
 80187a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80187a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187aa:	f113 0f0d 	cmn.w	r3, #13
 80187ae:	f000 8098 	beq.w	80188e2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80187b2:	4b7a      	ldr	r3, [pc, #488]	; (801899c <tcp_input+0x7e4>)
 80187b4:	2200      	movs	r2, #0
 80187b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80187b8:	69f8      	ldr	r0, [r7, #28]
 80187ba:	f000 f907 	bl	80189cc <tcp_input_delayed_close>
 80187be:	4603      	mov	r3, r0
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	f040 8090 	bne.w	80188e6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80187c6:	4b76      	ldr	r3, [pc, #472]	; (80189a0 <tcp_input+0x7e8>)
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d041      	beq.n	8018852 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80187ce:	69fb      	ldr	r3, [r7, #28]
 80187d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d006      	beq.n	80187e4 <tcp_input+0x62c>
 80187d6:	4b73      	ldr	r3, [pc, #460]	; (80189a4 <tcp_input+0x7ec>)
 80187d8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80187dc:	4972      	ldr	r1, [pc, #456]	; (80189a8 <tcp_input+0x7f0>)
 80187de:	4873      	ldr	r0, [pc, #460]	; (80189ac <tcp_input+0x7f4>)
 80187e0:	f006 fc20 	bl	801f024 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80187e4:	69fb      	ldr	r3, [r7, #28]
 80187e6:	8b5b      	ldrh	r3, [r3, #26]
 80187e8:	f003 0310 	and.w	r3, r3, #16
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d008      	beq.n	8018802 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80187f0:	4b6b      	ldr	r3, [pc, #428]	; (80189a0 <tcp_input+0x7e8>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7fd fa5f 	bl	8015cb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80187fa:	69f8      	ldr	r0, [r7, #28]
 80187fc:	f7fe f89c 	bl	8016938 <tcp_abort>
            goto aborted;
 8018800:	e078      	b.n	80188f4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018802:	69fb      	ldr	r3, [r7, #28]
 8018804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018808:	2b00      	cmp	r3, #0
 801880a:	d00c      	beq.n	8018826 <tcp_input+0x66e>
 801880c:	69fb      	ldr	r3, [r7, #28]
 801880e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018812:	69fb      	ldr	r3, [r7, #28]
 8018814:	6918      	ldr	r0, [r3, #16]
 8018816:	4b62      	ldr	r3, [pc, #392]	; (80189a0 <tcp_input+0x7e8>)
 8018818:	681a      	ldr	r2, [r3, #0]
 801881a:	2300      	movs	r3, #0
 801881c:	69f9      	ldr	r1, [r7, #28]
 801881e:	47a0      	blx	r4
 8018820:	4603      	mov	r3, r0
 8018822:	74fb      	strb	r3, [r7, #19]
 8018824:	e008      	b.n	8018838 <tcp_input+0x680>
 8018826:	4b5e      	ldr	r3, [pc, #376]	; (80189a0 <tcp_input+0x7e8>)
 8018828:	681a      	ldr	r2, [r3, #0]
 801882a:	2300      	movs	r3, #0
 801882c:	69f9      	ldr	r1, [r7, #28]
 801882e:	2000      	movs	r0, #0
 8018830:	f7ff f884 	bl	801793c <tcp_recv_null>
 8018834:	4603      	mov	r3, r0
 8018836:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018838:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801883c:	f113 0f0d 	cmn.w	r3, #13
 8018840:	d053      	beq.n	80188ea <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018842:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d003      	beq.n	8018852 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801884a:	4b55      	ldr	r3, [pc, #340]	; (80189a0 <tcp_input+0x7e8>)
 801884c:	681a      	ldr	r2, [r3, #0]
 801884e:	69fb      	ldr	r3, [r7, #28]
 8018850:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018852:	4b50      	ldr	r3, [pc, #320]	; (8018994 <tcp_input+0x7dc>)
 8018854:	781b      	ldrb	r3, [r3, #0]
 8018856:	f003 0320 	and.w	r3, r3, #32
 801885a:	2b00      	cmp	r3, #0
 801885c:	d030      	beq.n	80188c0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801885e:	69fb      	ldr	r3, [r7, #28]
 8018860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018862:	2b00      	cmp	r3, #0
 8018864:	d009      	beq.n	801887a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8018866:	69fb      	ldr	r3, [r7, #28]
 8018868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801886a:	7b5a      	ldrb	r2, [r3, #13]
 801886c:	69fb      	ldr	r3, [r7, #28]
 801886e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018870:	f042 0220 	orr.w	r2, r2, #32
 8018874:	b2d2      	uxtb	r2, r2
 8018876:	735a      	strb	r2, [r3, #13]
 8018878:	e022      	b.n	80188c0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801887a:	69fb      	ldr	r3, [r7, #28]
 801887c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801887e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018882:	d005      	beq.n	8018890 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8018884:	69fb      	ldr	r3, [r7, #28]
 8018886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018888:	3301      	adds	r3, #1
 801888a:	b29a      	uxth	r2, r3
 801888c:	69fb      	ldr	r3, [r7, #28]
 801888e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018890:	69fb      	ldr	r3, [r7, #28]
 8018892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018896:	2b00      	cmp	r3, #0
 8018898:	d00b      	beq.n	80188b2 <tcp_input+0x6fa>
 801889a:	69fb      	ldr	r3, [r7, #28]
 801889c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	6918      	ldr	r0, [r3, #16]
 80188a4:	2300      	movs	r3, #0
 80188a6:	2200      	movs	r2, #0
 80188a8:	69f9      	ldr	r1, [r7, #28]
 80188aa:	47a0      	blx	r4
 80188ac:	4603      	mov	r3, r0
 80188ae:	74fb      	strb	r3, [r7, #19]
 80188b0:	e001      	b.n	80188b6 <tcp_input+0x6fe>
 80188b2:	2300      	movs	r3, #0
 80188b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80188b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80188ba:	f113 0f0d 	cmn.w	r3, #13
 80188be:	d016      	beq.n	80188ee <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80188c0:	4b33      	ldr	r3, [pc, #204]	; (8018990 <tcp_input+0x7d8>)
 80188c2:	2200      	movs	r2, #0
 80188c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80188c6:	69f8      	ldr	r0, [r7, #28]
 80188c8:	f000 f880 	bl	80189cc <tcp_input_delayed_close>
 80188cc:	4603      	mov	r3, r0
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d10f      	bne.n	80188f2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80188d2:	69f8      	ldr	r0, [r7, #28]
 80188d4:	f002 ff10 	bl	801b6f8 <tcp_output>
 80188d8:	e00c      	b.n	80188f4 <tcp_input+0x73c>
        goto aborted;
 80188da:	bf00      	nop
 80188dc:	e00a      	b.n	80188f4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80188de:	bf00      	nop
 80188e0:	e008      	b.n	80188f4 <tcp_input+0x73c>
              goto aborted;
 80188e2:	bf00      	nop
 80188e4:	e006      	b.n	80188f4 <tcp_input+0x73c>
          goto aborted;
 80188e6:	bf00      	nop
 80188e8:	e004      	b.n	80188f4 <tcp_input+0x73c>
            goto aborted;
 80188ea:	bf00      	nop
 80188ec:	e002      	b.n	80188f4 <tcp_input+0x73c>
              goto aborted;
 80188ee:	bf00      	nop
 80188f0:	e000      	b.n	80188f4 <tcp_input+0x73c>
          goto aborted;
 80188f2:	bf00      	nop
    tcp_input_pcb = NULL;
 80188f4:	4b26      	ldr	r3, [pc, #152]	; (8018990 <tcp_input+0x7d8>)
 80188f6:	2200      	movs	r2, #0
 80188f8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80188fa:	4b29      	ldr	r3, [pc, #164]	; (80189a0 <tcp_input+0x7e8>)
 80188fc:	2200      	movs	r2, #0
 80188fe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018900:	4b2b      	ldr	r3, [pc, #172]	; (80189b0 <tcp_input+0x7f8>)
 8018902:	685b      	ldr	r3, [r3, #4]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d03f      	beq.n	8018988 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8018908:	4b29      	ldr	r3, [pc, #164]	; (80189b0 <tcp_input+0x7f8>)
 801890a:	685b      	ldr	r3, [r3, #4]
 801890c:	4618      	mov	r0, r3
 801890e:	f7fd f9d3 	bl	8015cb8 <pbuf_free>
      inseg.p = NULL;
 8018912:	4b27      	ldr	r3, [pc, #156]	; (80189b0 <tcp_input+0x7f8>)
 8018914:	2200      	movs	r2, #0
 8018916:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018918:	e036      	b.n	8018988 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801891a:	4b26      	ldr	r3, [pc, #152]	; (80189b4 <tcp_input+0x7fc>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	899b      	ldrh	r3, [r3, #12]
 8018920:	b29b      	uxth	r3, r3
 8018922:	4618      	mov	r0, r3
 8018924:	f7f9 facc 	bl	8011ec0 <lwip_htons>
 8018928:	4603      	mov	r3, r0
 801892a:	b2db      	uxtb	r3, r3
 801892c:	f003 0304 	and.w	r3, r3, #4
 8018930:	2b00      	cmp	r3, #0
 8018932:	d118      	bne.n	8018966 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018934:	4b20      	ldr	r3, [pc, #128]	; (80189b8 <tcp_input+0x800>)
 8018936:	6819      	ldr	r1, [r3, #0]
 8018938:	4b20      	ldr	r3, [pc, #128]	; (80189bc <tcp_input+0x804>)
 801893a:	881b      	ldrh	r3, [r3, #0]
 801893c:	461a      	mov	r2, r3
 801893e:	4b20      	ldr	r3, [pc, #128]	; (80189c0 <tcp_input+0x808>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018944:	4b1b      	ldr	r3, [pc, #108]	; (80189b4 <tcp_input+0x7fc>)
 8018946:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018948:	885b      	ldrh	r3, [r3, #2]
 801894a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801894c:	4a19      	ldr	r2, [pc, #100]	; (80189b4 <tcp_input+0x7fc>)
 801894e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018950:	8812      	ldrh	r2, [r2, #0]
 8018952:	b292      	uxth	r2, r2
 8018954:	9202      	str	r2, [sp, #8]
 8018956:	9301      	str	r3, [sp, #4]
 8018958:	4b1a      	ldr	r3, [pc, #104]	; (80189c4 <tcp_input+0x80c>)
 801895a:	9300      	str	r3, [sp, #0]
 801895c:	4b1a      	ldr	r3, [pc, #104]	; (80189c8 <tcp_input+0x810>)
 801895e:	4602      	mov	r2, r0
 8018960:	2000      	movs	r0, #0
 8018962:	f003 fc7d 	bl	801c260 <tcp_rst>
    pbuf_free(p);
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	f7fd f9a6 	bl	8015cb8 <pbuf_free>
  return;
 801896c:	e00c      	b.n	8018988 <tcp_input+0x7d0>
    goto dropped;
 801896e:	bf00      	nop
 8018970:	e006      	b.n	8018980 <tcp_input+0x7c8>
    goto dropped;
 8018972:	bf00      	nop
 8018974:	e004      	b.n	8018980 <tcp_input+0x7c8>
    goto dropped;
 8018976:	bf00      	nop
 8018978:	e002      	b.n	8018980 <tcp_input+0x7c8>
      goto dropped;
 801897a:	bf00      	nop
 801897c:	e000      	b.n	8018980 <tcp_input+0x7c8>
      goto dropped;
 801897e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018980:	6878      	ldr	r0, [r7, #4]
 8018982:	f7fd f999 	bl	8015cb8 <pbuf_free>
 8018986:	e000      	b.n	801898a <tcp_input+0x7d2>
  return;
 8018988:	bf00      	nop
}
 801898a:	3724      	adds	r7, #36	; 0x24
 801898c:	46bd      	mov	sp, r7
 801898e:	bd90      	pop	{r4, r7, pc}
 8018990:	24008a38 	.word	0x24008a38
 8018994:	24005255 	.word	0x24005255
 8018998:	24008a24 	.word	0x24008a24
 801899c:	24005250 	.word	0x24005250
 80189a0:	24005258 	.word	0x24005258
 80189a4:	08025a44 	.word	0x08025a44
 80189a8:	08025c24 	.word	0x08025c24
 80189ac:	08025abc 	.word	0x08025abc
 80189b0:	24005228 	.word	0x24005228
 80189b4:	24005238 	.word	0x24005238
 80189b8:	2400524c 	.word	0x2400524c
 80189bc:	24005252 	.word	0x24005252
 80189c0:	24005248 	.word	0x24005248
 80189c4:	24005b44 	.word	0x24005b44
 80189c8:	24005b48 	.word	0x24005b48

080189cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d106      	bne.n	80189e8 <tcp_input_delayed_close+0x1c>
 80189da:	4b17      	ldr	r3, [pc, #92]	; (8018a38 <tcp_input_delayed_close+0x6c>)
 80189dc:	f240 225a 	movw	r2, #602	; 0x25a
 80189e0:	4916      	ldr	r1, [pc, #88]	; (8018a3c <tcp_input_delayed_close+0x70>)
 80189e2:	4817      	ldr	r0, [pc, #92]	; (8018a40 <tcp_input_delayed_close+0x74>)
 80189e4:	f006 fb1e 	bl	801f024 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80189e8:	4b16      	ldr	r3, [pc, #88]	; (8018a44 <tcp_input_delayed_close+0x78>)
 80189ea:	781b      	ldrb	r3, [r3, #0]
 80189ec:	f003 0310 	and.w	r3, r3, #16
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d01c      	beq.n	8018a2e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	8b5b      	ldrh	r3, [r3, #26]
 80189f8:	f003 0310 	and.w	r3, r3, #16
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d10d      	bne.n	8018a1c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d008      	beq.n	8018a1c <tcp_input_delayed_close+0x50>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a10:	687a      	ldr	r2, [r7, #4]
 8018a12:	6912      	ldr	r2, [r2, #16]
 8018a14:	f06f 010e 	mvn.w	r1, #14
 8018a18:	4610      	mov	r0, r2
 8018a1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018a1c:	6879      	ldr	r1, [r7, #4]
 8018a1e:	480a      	ldr	r0, [pc, #40]	; (8018a48 <tcp_input_delayed_close+0x7c>)
 8018a20:	f7ff fa52 	bl	8017ec8 <tcp_pcb_remove>
    tcp_free(pcb);
 8018a24:	6878      	ldr	r0, [r7, #4]
 8018a26:	f7fd fc9f 	bl	8016368 <tcp_free>
    return 1;
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	e000      	b.n	8018a30 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018a2e:	2300      	movs	r3, #0
}
 8018a30:	4618      	mov	r0, r3
 8018a32:	3708      	adds	r7, #8
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	08025a44 	.word	0x08025a44
 8018a3c:	08025c40 	.word	0x08025c40
 8018a40:	08025abc 	.word	0x08025abc
 8018a44:	24005255 	.word	0x24005255
 8018a48:	24008a24 	.word	0x24008a24

08018a4c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018a4c:	b590      	push	{r4, r7, lr}
 8018a4e:	b08b      	sub	sp, #44	; 0x2c
 8018a50:	af04      	add	r7, sp, #16
 8018a52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018a54:	4b6f      	ldr	r3, [pc, #444]	; (8018c14 <tcp_listen_input+0x1c8>)
 8018a56:	781b      	ldrb	r3, [r3, #0]
 8018a58:	f003 0304 	and.w	r3, r3, #4
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	f040 80d2 	bne.w	8018c06 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d106      	bne.n	8018a76 <tcp_listen_input+0x2a>
 8018a68:	4b6b      	ldr	r3, [pc, #428]	; (8018c18 <tcp_listen_input+0x1cc>)
 8018a6a:	f240 2281 	movw	r2, #641	; 0x281
 8018a6e:	496b      	ldr	r1, [pc, #428]	; (8018c1c <tcp_listen_input+0x1d0>)
 8018a70:	486b      	ldr	r0, [pc, #428]	; (8018c20 <tcp_listen_input+0x1d4>)
 8018a72:	f006 fad7 	bl	801f024 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018a76:	4b67      	ldr	r3, [pc, #412]	; (8018c14 <tcp_listen_input+0x1c8>)
 8018a78:	781b      	ldrb	r3, [r3, #0]
 8018a7a:	f003 0310 	and.w	r3, r3, #16
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d019      	beq.n	8018ab6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a82:	4b68      	ldr	r3, [pc, #416]	; (8018c24 <tcp_listen_input+0x1d8>)
 8018a84:	6819      	ldr	r1, [r3, #0]
 8018a86:	4b68      	ldr	r3, [pc, #416]	; (8018c28 <tcp_listen_input+0x1dc>)
 8018a88:	881b      	ldrh	r3, [r3, #0]
 8018a8a:	461a      	mov	r2, r3
 8018a8c:	4b67      	ldr	r3, [pc, #412]	; (8018c2c <tcp_listen_input+0x1e0>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018a92:	4b67      	ldr	r3, [pc, #412]	; (8018c30 <tcp_listen_input+0x1e4>)
 8018a94:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a96:	885b      	ldrh	r3, [r3, #2]
 8018a98:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018a9a:	4a65      	ldr	r2, [pc, #404]	; (8018c30 <tcp_listen_input+0x1e4>)
 8018a9c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018a9e:	8812      	ldrh	r2, [r2, #0]
 8018aa0:	b292      	uxth	r2, r2
 8018aa2:	9202      	str	r2, [sp, #8]
 8018aa4:	9301      	str	r3, [sp, #4]
 8018aa6:	4b63      	ldr	r3, [pc, #396]	; (8018c34 <tcp_listen_input+0x1e8>)
 8018aa8:	9300      	str	r3, [sp, #0]
 8018aaa:	4b63      	ldr	r3, [pc, #396]	; (8018c38 <tcp_listen_input+0x1ec>)
 8018aac:	4602      	mov	r2, r0
 8018aae:	6878      	ldr	r0, [r7, #4]
 8018ab0:	f003 fbd6 	bl	801c260 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018ab4:	e0a9      	b.n	8018c0a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8018ab6:	4b57      	ldr	r3, [pc, #348]	; (8018c14 <tcp_listen_input+0x1c8>)
 8018ab8:	781b      	ldrb	r3, [r3, #0]
 8018aba:	f003 0302 	and.w	r3, r3, #2
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	f000 80a3 	beq.w	8018c0a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	7d5b      	ldrb	r3, [r3, #21]
 8018ac8:	4618      	mov	r0, r3
 8018aca:	f7ff f85b 	bl	8017b84 <tcp_alloc>
 8018ace:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018ad0:	697b      	ldr	r3, [r7, #20]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d111      	bne.n	8018afa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	699b      	ldr	r3, [r3, #24]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d00a      	beq.n	8018af4 <tcp_listen_input+0xa8>
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	699b      	ldr	r3, [r3, #24]
 8018ae2:	687a      	ldr	r2, [r7, #4]
 8018ae4:	6910      	ldr	r0, [r2, #16]
 8018ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018aea:	2100      	movs	r1, #0
 8018aec:	4798      	blx	r3
 8018aee:	4603      	mov	r3, r0
 8018af0:	73bb      	strb	r3, [r7, #14]
      return;
 8018af2:	e08b      	b.n	8018c0c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018af4:	23f0      	movs	r3, #240	; 0xf0
 8018af6:	73bb      	strb	r3, [r7, #14]
      return;
 8018af8:	e088      	b.n	8018c0c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018afa:	4b50      	ldr	r3, [pc, #320]	; (8018c3c <tcp_listen_input+0x1f0>)
 8018afc:	695a      	ldr	r2, [r3, #20]
 8018afe:	697b      	ldr	r3, [r7, #20]
 8018b00:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018b02:	4b4e      	ldr	r3, [pc, #312]	; (8018c3c <tcp_listen_input+0x1f0>)
 8018b04:	691a      	ldr	r2, [r3, #16]
 8018b06:	697b      	ldr	r3, [r7, #20]
 8018b08:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	8ada      	ldrh	r2, [r3, #22]
 8018b0e:	697b      	ldr	r3, [r7, #20]
 8018b10:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018b12:	4b47      	ldr	r3, [pc, #284]	; (8018c30 <tcp_listen_input+0x1e4>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	881b      	ldrh	r3, [r3, #0]
 8018b18:	b29a      	uxth	r2, r3
 8018b1a:	697b      	ldr	r3, [r7, #20]
 8018b1c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018b1e:	697b      	ldr	r3, [r7, #20]
 8018b20:	2203      	movs	r2, #3
 8018b22:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018b24:	4b41      	ldr	r3, [pc, #260]	; (8018c2c <tcp_listen_input+0x1e0>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	1c5a      	adds	r2, r3, #1
 8018b2a:	697b      	ldr	r3, [r7, #20]
 8018b2c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018b2e:	697b      	ldr	r3, [r7, #20]
 8018b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018b32:	697b      	ldr	r3, [r7, #20]
 8018b34:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018b36:	6978      	ldr	r0, [r7, #20]
 8018b38:	f7ff fa5a 	bl	8017ff0 <tcp_next_iss>
 8018b3c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	693a      	ldr	r2, [r7, #16]
 8018b42:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	693a      	ldr	r2, [r7, #16]
 8018b48:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8018b4a:	697b      	ldr	r3, [r7, #20]
 8018b4c:	693a      	ldr	r2, [r7, #16]
 8018b4e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018b50:	697b      	ldr	r3, [r7, #20]
 8018b52:	693a      	ldr	r2, [r7, #16]
 8018b54:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018b56:	4b35      	ldr	r3, [pc, #212]	; (8018c2c <tcp_listen_input+0x1e0>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	1e5a      	subs	r2, r3, #1
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	691a      	ldr	r2, [r3, #16]
 8018b64:	697b      	ldr	r3, [r7, #20]
 8018b66:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018b68:	697b      	ldr	r3, [r7, #20]
 8018b6a:	687a      	ldr	r2, [r7, #4]
 8018b6c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	7a5b      	ldrb	r3, [r3, #9]
 8018b72:	f003 030c 	and.w	r3, r3, #12
 8018b76:	b2da      	uxtb	r2, r3
 8018b78:	697b      	ldr	r3, [r7, #20]
 8018b7a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	7a1a      	ldrb	r2, [r3, #8]
 8018b80:	697b      	ldr	r3, [r7, #20]
 8018b82:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018b84:	4b2e      	ldr	r3, [pc, #184]	; (8018c40 <tcp_listen_input+0x1f4>)
 8018b86:	681a      	ldr	r2, [r3, #0]
 8018b88:	697b      	ldr	r3, [r7, #20]
 8018b8a:	60da      	str	r2, [r3, #12]
 8018b8c:	4a2c      	ldr	r2, [pc, #176]	; (8018c40 <tcp_listen_input+0x1f4>)
 8018b8e:	697b      	ldr	r3, [r7, #20]
 8018b90:	6013      	str	r3, [r2, #0]
 8018b92:	f003 fd27 	bl	801c5e4 <tcp_timer_needed>
 8018b96:	4b2b      	ldr	r3, [pc, #172]	; (8018c44 <tcp_listen_input+0x1f8>)
 8018b98:	2201      	movs	r2, #1
 8018b9a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018b9c:	6978      	ldr	r0, [r7, #20]
 8018b9e:	f001 fd8d 	bl	801a6bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018ba2:	4b23      	ldr	r3, [pc, #140]	; (8018c30 <tcp_listen_input+0x1e4>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	89db      	ldrh	r3, [r3, #14]
 8018ba8:	b29a      	uxth	r2, r3
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018bb0:	697b      	ldr	r3, [r7, #20]
 8018bb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018bb6:	697b      	ldr	r3, [r7, #20]
 8018bb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018bc0:	697b      	ldr	r3, [r7, #20]
 8018bc2:	3304      	adds	r3, #4
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f7fa fc51 	bl	801346c <ip4_route>
 8018bca:	4601      	mov	r1, r0
 8018bcc:	697b      	ldr	r3, [r7, #20]
 8018bce:	3304      	adds	r3, #4
 8018bd0:	461a      	mov	r2, r3
 8018bd2:	4620      	mov	r0, r4
 8018bd4:	f7ff fa32 	bl	801803c <tcp_eff_send_mss_netif>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	461a      	mov	r2, r3
 8018bdc:	697b      	ldr	r3, [r7, #20]
 8018bde:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018be0:	2112      	movs	r1, #18
 8018be2:	6978      	ldr	r0, [r7, #20]
 8018be4:	f002 fc9a 	bl	801b51c <tcp_enqueue_flags>
 8018be8:	4603      	mov	r3, r0
 8018bea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d004      	beq.n	8018bfe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018bf4:	2100      	movs	r1, #0
 8018bf6:	6978      	ldr	r0, [r7, #20]
 8018bf8:	f7fd fde0 	bl	80167bc <tcp_abandon>
      return;
 8018bfc:	e006      	b.n	8018c0c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018bfe:	6978      	ldr	r0, [r7, #20]
 8018c00:	f002 fd7a 	bl	801b6f8 <tcp_output>
  return;
 8018c04:	e001      	b.n	8018c0a <tcp_listen_input+0x1be>
    return;
 8018c06:	bf00      	nop
 8018c08:	e000      	b.n	8018c0c <tcp_listen_input+0x1c0>
  return;
 8018c0a:	bf00      	nop
}
 8018c0c:	371c      	adds	r7, #28
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	bd90      	pop	{r4, r7, pc}
 8018c12:	bf00      	nop
 8018c14:	24005254 	.word	0x24005254
 8018c18:	08025a44 	.word	0x08025a44
 8018c1c:	08025c68 	.word	0x08025c68
 8018c20:	08025abc 	.word	0x08025abc
 8018c24:	2400524c 	.word	0x2400524c
 8018c28:	24005252 	.word	0x24005252
 8018c2c:	24005248 	.word	0x24005248
 8018c30:	24005238 	.word	0x24005238
 8018c34:	24005b44 	.word	0x24005b44
 8018c38:	24005b48 	.word	0x24005b48
 8018c3c:	24005b34 	.word	0x24005b34
 8018c40:	24008a24 	.word	0x24008a24
 8018c44:	24008a20 	.word	0x24008a20

08018c48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b086      	sub	sp, #24
 8018c4c:	af04      	add	r7, sp, #16
 8018c4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018c50:	4b2f      	ldr	r3, [pc, #188]	; (8018d10 <tcp_timewait_input+0xc8>)
 8018c52:	781b      	ldrb	r3, [r3, #0]
 8018c54:	f003 0304 	and.w	r3, r3, #4
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d153      	bne.n	8018d04 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d106      	bne.n	8018c70 <tcp_timewait_input+0x28>
 8018c62:	4b2c      	ldr	r3, [pc, #176]	; (8018d14 <tcp_timewait_input+0xcc>)
 8018c64:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018c68:	492b      	ldr	r1, [pc, #172]	; (8018d18 <tcp_timewait_input+0xd0>)
 8018c6a:	482c      	ldr	r0, [pc, #176]	; (8018d1c <tcp_timewait_input+0xd4>)
 8018c6c:	f006 f9da 	bl	801f024 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018c70:	4b27      	ldr	r3, [pc, #156]	; (8018d10 <tcp_timewait_input+0xc8>)
 8018c72:	781b      	ldrb	r3, [r3, #0]
 8018c74:	f003 0302 	and.w	r3, r3, #2
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d02a      	beq.n	8018cd2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018c7c:	4b28      	ldr	r3, [pc, #160]	; (8018d20 <tcp_timewait_input+0xd8>)
 8018c7e:	681a      	ldr	r2, [r3, #0]
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c84:	1ad3      	subs	r3, r2, r3
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	db2d      	blt.n	8018ce6 <tcp_timewait_input+0x9e>
 8018c8a:	4b25      	ldr	r3, [pc, #148]	; (8018d20 <tcp_timewait_input+0xd8>)
 8018c8c:	681a      	ldr	r2, [r3, #0]
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c92:	6879      	ldr	r1, [r7, #4]
 8018c94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018c96:	440b      	add	r3, r1
 8018c98:	1ad3      	subs	r3, r2, r3
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	dc23      	bgt.n	8018ce6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c9e:	4b21      	ldr	r3, [pc, #132]	; (8018d24 <tcp_timewait_input+0xdc>)
 8018ca0:	6819      	ldr	r1, [r3, #0]
 8018ca2:	4b21      	ldr	r3, [pc, #132]	; (8018d28 <tcp_timewait_input+0xe0>)
 8018ca4:	881b      	ldrh	r3, [r3, #0]
 8018ca6:	461a      	mov	r2, r3
 8018ca8:	4b1d      	ldr	r3, [pc, #116]	; (8018d20 <tcp_timewait_input+0xd8>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cae:	4b1f      	ldr	r3, [pc, #124]	; (8018d2c <tcp_timewait_input+0xe4>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cb2:	885b      	ldrh	r3, [r3, #2]
 8018cb4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cb6:	4a1d      	ldr	r2, [pc, #116]	; (8018d2c <tcp_timewait_input+0xe4>)
 8018cb8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cba:	8812      	ldrh	r2, [r2, #0]
 8018cbc:	b292      	uxth	r2, r2
 8018cbe:	9202      	str	r2, [sp, #8]
 8018cc0:	9301      	str	r3, [sp, #4]
 8018cc2:	4b1b      	ldr	r3, [pc, #108]	; (8018d30 <tcp_timewait_input+0xe8>)
 8018cc4:	9300      	str	r3, [sp, #0]
 8018cc6:	4b1b      	ldr	r3, [pc, #108]	; (8018d34 <tcp_timewait_input+0xec>)
 8018cc8:	4602      	mov	r2, r0
 8018cca:	6878      	ldr	r0, [r7, #4]
 8018ccc:	f003 fac8 	bl	801c260 <tcp_rst>
      return;
 8018cd0:	e01b      	b.n	8018d0a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018cd2:	4b0f      	ldr	r3, [pc, #60]	; (8018d10 <tcp_timewait_input+0xc8>)
 8018cd4:	781b      	ldrb	r3, [r3, #0]
 8018cd6:	f003 0301 	and.w	r3, r3, #1
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d003      	beq.n	8018ce6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018cde:	4b16      	ldr	r3, [pc, #88]	; (8018d38 <tcp_timewait_input+0xf0>)
 8018ce0:	681a      	ldr	r2, [r3, #0]
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018ce6:	4b10      	ldr	r3, [pc, #64]	; (8018d28 <tcp_timewait_input+0xe0>)
 8018ce8:	881b      	ldrh	r3, [r3, #0]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d00c      	beq.n	8018d08 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	8b5b      	ldrh	r3, [r3, #26]
 8018cf2:	f043 0302 	orr.w	r3, r3, #2
 8018cf6:	b29a      	uxth	r2, r3
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018cfc:	6878      	ldr	r0, [r7, #4]
 8018cfe:	f002 fcfb 	bl	801b6f8 <tcp_output>
  }
  return;
 8018d02:	e001      	b.n	8018d08 <tcp_timewait_input+0xc0>
    return;
 8018d04:	bf00      	nop
 8018d06:	e000      	b.n	8018d0a <tcp_timewait_input+0xc2>
  return;
 8018d08:	bf00      	nop
}
 8018d0a:	3708      	adds	r7, #8
 8018d0c:	46bd      	mov	sp, r7
 8018d0e:	bd80      	pop	{r7, pc}
 8018d10:	24005254 	.word	0x24005254
 8018d14:	08025a44 	.word	0x08025a44
 8018d18:	08025c88 	.word	0x08025c88
 8018d1c:	08025abc 	.word	0x08025abc
 8018d20:	24005248 	.word	0x24005248
 8018d24:	2400524c 	.word	0x2400524c
 8018d28:	24005252 	.word	0x24005252
 8018d2c:	24005238 	.word	0x24005238
 8018d30:	24005b44 	.word	0x24005b44
 8018d34:	24005b48 	.word	0x24005b48
 8018d38:	24008a28 	.word	0x24008a28

08018d3c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018d3c:	b590      	push	{r4, r7, lr}
 8018d3e:	b08d      	sub	sp, #52	; 0x34
 8018d40:	af04      	add	r7, sp, #16
 8018d42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018d44:	2300      	movs	r3, #0
 8018d46:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018d48:	2300      	movs	r3, #0
 8018d4a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d106      	bne.n	8018d60 <tcp_process+0x24>
 8018d52:	4ba5      	ldr	r3, [pc, #660]	; (8018fe8 <tcp_process+0x2ac>)
 8018d54:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018d58:	49a4      	ldr	r1, [pc, #656]	; (8018fec <tcp_process+0x2b0>)
 8018d5a:	48a5      	ldr	r0, [pc, #660]	; (8018ff0 <tcp_process+0x2b4>)
 8018d5c:	f006 f962 	bl	801f024 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018d60:	4ba4      	ldr	r3, [pc, #656]	; (8018ff4 <tcp_process+0x2b8>)
 8018d62:	781b      	ldrb	r3, [r3, #0]
 8018d64:	f003 0304 	and.w	r3, r3, #4
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d04e      	beq.n	8018e0a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	7d1b      	ldrb	r3, [r3, #20]
 8018d70:	2b02      	cmp	r3, #2
 8018d72:	d108      	bne.n	8018d86 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d78:	4b9f      	ldr	r3, [pc, #636]	; (8018ff8 <tcp_process+0x2bc>)
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d123      	bne.n	8018dc8 <tcp_process+0x8c>
        acceptable = 1;
 8018d80:	2301      	movs	r3, #1
 8018d82:	76fb      	strb	r3, [r7, #27]
 8018d84:	e020      	b.n	8018dc8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d8a:	4b9c      	ldr	r3, [pc, #624]	; (8018ffc <tcp_process+0x2c0>)
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	429a      	cmp	r2, r3
 8018d90:	d102      	bne.n	8018d98 <tcp_process+0x5c>
        acceptable = 1;
 8018d92:	2301      	movs	r3, #1
 8018d94:	76fb      	strb	r3, [r7, #27]
 8018d96:	e017      	b.n	8018dc8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018d98:	4b98      	ldr	r3, [pc, #608]	; (8018ffc <tcp_process+0x2c0>)
 8018d9a:	681a      	ldr	r2, [r3, #0]
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018da0:	1ad3      	subs	r3, r2, r3
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	db10      	blt.n	8018dc8 <tcp_process+0x8c>
 8018da6:	4b95      	ldr	r3, [pc, #596]	; (8018ffc <tcp_process+0x2c0>)
 8018da8:	681a      	ldr	r2, [r3, #0]
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dae:	6879      	ldr	r1, [r7, #4]
 8018db0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018db2:	440b      	add	r3, r1
 8018db4:	1ad3      	subs	r3, r2, r3
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	dc06      	bgt.n	8018dc8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	8b5b      	ldrh	r3, [r3, #26]
 8018dbe:	f043 0302 	orr.w	r3, r3, #2
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018dc8:	7efb      	ldrb	r3, [r7, #27]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d01b      	beq.n	8018e06 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	7d1b      	ldrb	r3, [r3, #20]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d106      	bne.n	8018de4 <tcp_process+0xa8>
 8018dd6:	4b84      	ldr	r3, [pc, #528]	; (8018fe8 <tcp_process+0x2ac>)
 8018dd8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018ddc:	4988      	ldr	r1, [pc, #544]	; (8019000 <tcp_process+0x2c4>)
 8018dde:	4884      	ldr	r0, [pc, #528]	; (8018ff0 <tcp_process+0x2b4>)
 8018de0:	f006 f920 	bl	801f024 <iprintf>
      recv_flags |= TF_RESET;
 8018de4:	4b87      	ldr	r3, [pc, #540]	; (8019004 <tcp_process+0x2c8>)
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	f043 0308 	orr.w	r3, r3, #8
 8018dec:	b2da      	uxtb	r2, r3
 8018dee:	4b85      	ldr	r3, [pc, #532]	; (8019004 <tcp_process+0x2c8>)
 8018df0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	8b5b      	ldrh	r3, [r3, #26]
 8018df6:	f023 0301 	bic.w	r3, r3, #1
 8018dfa:	b29a      	uxth	r2, r3
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018e00:	f06f 030d 	mvn.w	r3, #13
 8018e04:	e37a      	b.n	80194fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018e06:	2300      	movs	r3, #0
 8018e08:	e378      	b.n	80194fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018e0a:	4b7a      	ldr	r3, [pc, #488]	; (8018ff4 <tcp_process+0x2b8>)
 8018e0c:	781b      	ldrb	r3, [r3, #0]
 8018e0e:	f003 0302 	and.w	r3, r3, #2
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d010      	beq.n	8018e38 <tcp_process+0xfc>
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	7d1b      	ldrb	r3, [r3, #20]
 8018e1a:	2b02      	cmp	r3, #2
 8018e1c:	d00c      	beq.n	8018e38 <tcp_process+0xfc>
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	7d1b      	ldrb	r3, [r3, #20]
 8018e22:	2b03      	cmp	r3, #3
 8018e24:	d008      	beq.n	8018e38 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	8b5b      	ldrh	r3, [r3, #26]
 8018e2a:	f043 0302 	orr.w	r3, r3, #2
 8018e2e:	b29a      	uxth	r2, r3
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018e34:	2300      	movs	r3, #0
 8018e36:	e361      	b.n	80194fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	8b5b      	ldrh	r3, [r3, #26]
 8018e3c:	f003 0310 	and.w	r3, r3, #16
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d103      	bne.n	8018e4c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018e44:	4b70      	ldr	r3, [pc, #448]	; (8019008 <tcp_process+0x2cc>)
 8018e46:	681a      	ldr	r2, [r3, #0]
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	2200      	movs	r2, #0
 8018e50:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	2200      	movs	r2, #0
 8018e58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018e5c:	6878      	ldr	r0, [r7, #4]
 8018e5e:	f001 fc2d 	bl	801a6bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	7d1b      	ldrb	r3, [r3, #20]
 8018e66:	3b02      	subs	r3, #2
 8018e68:	2b07      	cmp	r3, #7
 8018e6a:	f200 8337 	bhi.w	80194dc <tcp_process+0x7a0>
 8018e6e:	a201      	add	r2, pc, #4	; (adr r2, 8018e74 <tcp_process+0x138>)
 8018e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e74:	08018e95 	.word	0x08018e95
 8018e78:	080190c5 	.word	0x080190c5
 8018e7c:	0801923d 	.word	0x0801923d
 8018e80:	08019267 	.word	0x08019267
 8018e84:	0801938b 	.word	0x0801938b
 8018e88:	0801923d 	.word	0x0801923d
 8018e8c:	08019417 	.word	0x08019417
 8018e90:	080194a7 	.word	0x080194a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018e94:	4b57      	ldr	r3, [pc, #348]	; (8018ff4 <tcp_process+0x2b8>)
 8018e96:	781b      	ldrb	r3, [r3, #0]
 8018e98:	f003 0310 	and.w	r3, r3, #16
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	f000 80e4 	beq.w	801906a <tcp_process+0x32e>
 8018ea2:	4b54      	ldr	r3, [pc, #336]	; (8018ff4 <tcp_process+0x2b8>)
 8018ea4:	781b      	ldrb	r3, [r3, #0]
 8018ea6:	f003 0302 	and.w	r3, r3, #2
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	f000 80dd 	beq.w	801906a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018eb4:	1c5a      	adds	r2, r3, #1
 8018eb6:	4b50      	ldr	r3, [pc, #320]	; (8018ff8 <tcp_process+0x2bc>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	f040 80d5 	bne.w	801906a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018ec0:	4b4e      	ldr	r3, [pc, #312]	; (8018ffc <tcp_process+0x2c0>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	1c5a      	adds	r2, r3, #1
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018ed2:	4b49      	ldr	r3, [pc, #292]	; (8018ff8 <tcp_process+0x2bc>)
 8018ed4:	681a      	ldr	r2, [r3, #0]
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018eda:	4b4c      	ldr	r3, [pc, #304]	; (801900c <tcp_process+0x2d0>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	89db      	ldrh	r3, [r3, #14]
 8018ee0:	b29a      	uxth	r2, r3
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018ef4:	4b41      	ldr	r3, [pc, #260]	; (8018ffc <tcp_process+0x2c0>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	1e5a      	subs	r2, r3, #1
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	2204      	movs	r2, #4
 8018f02:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	3304      	adds	r3, #4
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	f7fa faad 	bl	801346c <ip4_route>
 8018f12:	4601      	mov	r1, r0
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	3304      	adds	r3, #4
 8018f18:	461a      	mov	r2, r3
 8018f1a:	4620      	mov	r0, r4
 8018f1c:	f7ff f88e 	bl	801803c <tcp_eff_send_mss_netif>
 8018f20:	4603      	mov	r3, r0
 8018f22:	461a      	mov	r2, r3
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f2c:	009a      	lsls	r2, r3, #2
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f32:	005b      	lsls	r3, r3, #1
 8018f34:	f241 111c 	movw	r1, #4380	; 0x111c
 8018f38:	428b      	cmp	r3, r1
 8018f3a:	bf38      	it	cc
 8018f3c:	460b      	movcc	r3, r1
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	d204      	bcs.n	8018f4c <tcp_process+0x210>
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f46:	009b      	lsls	r3, r3, #2
 8018f48:	b29b      	uxth	r3, r3
 8018f4a:	e00d      	b.n	8018f68 <tcp_process+0x22c>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f50:	005b      	lsls	r3, r3, #1
 8018f52:	f241 121c 	movw	r2, #4380	; 0x111c
 8018f56:	4293      	cmp	r3, r2
 8018f58:	d904      	bls.n	8018f64 <tcp_process+0x228>
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f5e:	005b      	lsls	r3, r3, #1
 8018f60:	b29b      	uxth	r3, r3
 8018f62:	e001      	b.n	8018f68 <tcp_process+0x22c>
 8018f64:	f241 131c 	movw	r3, #4380	; 0x111c
 8018f68:	687a      	ldr	r2, [r7, #4]
 8018f6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d106      	bne.n	8018f86 <tcp_process+0x24a>
 8018f78:	4b1b      	ldr	r3, [pc, #108]	; (8018fe8 <tcp_process+0x2ac>)
 8018f7a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018f7e:	4924      	ldr	r1, [pc, #144]	; (8019010 <tcp_process+0x2d4>)
 8018f80:	481b      	ldr	r0, [pc, #108]	; (8018ff0 <tcp_process+0x2b4>)
 8018f82:	f006 f84f 	bl	801f024 <iprintf>
        --pcb->snd_queuelen;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f8c:	3b01      	subs	r3, #1
 8018f8e:	b29a      	uxth	r2, r3
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f9a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018f9c:	69fb      	ldr	r3, [r7, #28]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d111      	bne.n	8018fc6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fa6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018fa8:	69fb      	ldr	r3, [r7, #28]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d106      	bne.n	8018fbc <tcp_process+0x280>
 8018fae:	4b0e      	ldr	r3, [pc, #56]	; (8018fe8 <tcp_process+0x2ac>)
 8018fb0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8018fb4:	4917      	ldr	r1, [pc, #92]	; (8019014 <tcp_process+0x2d8>)
 8018fb6:	480e      	ldr	r0, [pc, #56]	; (8018ff0 <tcp_process+0x2b4>)
 8018fb8:	f006 f834 	bl	801f024 <iprintf>
          pcb->unsent = rseg->next;
 8018fbc:	69fb      	ldr	r3, [r7, #28]
 8018fbe:	681a      	ldr	r2, [r3, #0]
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8018fc4:	e003      	b.n	8018fce <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8018fc6:	69fb      	ldr	r3, [r7, #28]
 8018fc8:	681a      	ldr	r2, [r3, #0]
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8018fce:	69f8      	ldr	r0, [r7, #28]
 8018fd0:	f7fe fc6f 	bl	80178b2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d11d      	bne.n	8019018 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018fe2:	861a      	strh	r2, [r3, #48]	; 0x30
 8018fe4:	e01f      	b.n	8019026 <tcp_process+0x2ea>
 8018fe6:	bf00      	nop
 8018fe8:	08025a44 	.word	0x08025a44
 8018fec:	08025ca8 	.word	0x08025ca8
 8018ff0:	08025abc 	.word	0x08025abc
 8018ff4:	24005254 	.word	0x24005254
 8018ff8:	2400524c 	.word	0x2400524c
 8018ffc:	24005248 	.word	0x24005248
 8019000:	08025cc4 	.word	0x08025cc4
 8019004:	24005255 	.word	0x24005255
 8019008:	24008a28 	.word	0x24008a28
 801900c:	24005238 	.word	0x24005238
 8019010:	08025ce4 	.word	0x08025ce4
 8019014:	08025cfc 	.word	0x08025cfc
        } else {
          pcb->rtime = 0;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	2200      	movs	r2, #0
 801901c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	2200      	movs	r2, #0
 8019022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801902c:	2b00      	cmp	r3, #0
 801902e:	d00a      	beq.n	8019046 <tcp_process+0x30a>
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019036:	687a      	ldr	r2, [r7, #4]
 8019038:	6910      	ldr	r0, [r2, #16]
 801903a:	2200      	movs	r2, #0
 801903c:	6879      	ldr	r1, [r7, #4]
 801903e:	4798      	blx	r3
 8019040:	4603      	mov	r3, r0
 8019042:	76bb      	strb	r3, [r7, #26]
 8019044:	e001      	b.n	801904a <tcp_process+0x30e>
 8019046:	2300      	movs	r3, #0
 8019048:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801904a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801904e:	f113 0f0d 	cmn.w	r3, #13
 8019052:	d102      	bne.n	801905a <tcp_process+0x31e>
          return ERR_ABRT;
 8019054:	f06f 030c 	mvn.w	r3, #12
 8019058:	e250      	b.n	80194fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	8b5b      	ldrh	r3, [r3, #26]
 801905e:	f043 0302 	orr.w	r3, r3, #2
 8019062:	b29a      	uxth	r2, r3
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8019068:	e23a      	b.n	80194e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801906a:	4b9d      	ldr	r3, [pc, #628]	; (80192e0 <tcp_process+0x5a4>)
 801906c:	781b      	ldrb	r3, [r3, #0]
 801906e:	f003 0310 	and.w	r3, r3, #16
 8019072:	2b00      	cmp	r3, #0
 8019074:	f000 8234 	beq.w	80194e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019078:	4b9a      	ldr	r3, [pc, #616]	; (80192e4 <tcp_process+0x5a8>)
 801907a:	6819      	ldr	r1, [r3, #0]
 801907c:	4b9a      	ldr	r3, [pc, #616]	; (80192e8 <tcp_process+0x5ac>)
 801907e:	881b      	ldrh	r3, [r3, #0]
 8019080:	461a      	mov	r2, r3
 8019082:	4b9a      	ldr	r3, [pc, #616]	; (80192ec <tcp_process+0x5b0>)
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019088:	4b99      	ldr	r3, [pc, #612]	; (80192f0 <tcp_process+0x5b4>)
 801908a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801908c:	885b      	ldrh	r3, [r3, #2]
 801908e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019090:	4a97      	ldr	r2, [pc, #604]	; (80192f0 <tcp_process+0x5b4>)
 8019092:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019094:	8812      	ldrh	r2, [r2, #0]
 8019096:	b292      	uxth	r2, r2
 8019098:	9202      	str	r2, [sp, #8]
 801909a:	9301      	str	r3, [sp, #4]
 801909c:	4b95      	ldr	r3, [pc, #596]	; (80192f4 <tcp_process+0x5b8>)
 801909e:	9300      	str	r3, [sp, #0]
 80190a0:	4b95      	ldr	r3, [pc, #596]	; (80192f8 <tcp_process+0x5bc>)
 80190a2:	4602      	mov	r2, r0
 80190a4:	6878      	ldr	r0, [r7, #4]
 80190a6:	f003 f8db 	bl	801c260 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80190b0:	2b05      	cmp	r3, #5
 80190b2:	f200 8215 	bhi.w	80194e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	2200      	movs	r2, #0
 80190ba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f002 fea5 	bl	801be0c <tcp_rexmit_rto>
      break;
 80190c2:	e20d      	b.n	80194e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80190c4:	4b86      	ldr	r3, [pc, #536]	; (80192e0 <tcp_process+0x5a4>)
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	f003 0310 	and.w	r3, r3, #16
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	f000 80a1 	beq.w	8019214 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80190d2:	4b84      	ldr	r3, [pc, #528]	; (80192e4 <tcp_process+0x5a8>)
 80190d4:	681a      	ldr	r2, [r3, #0]
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190da:	1ad3      	subs	r3, r2, r3
 80190dc:	3b01      	subs	r3, #1
 80190de:	2b00      	cmp	r3, #0
 80190e0:	db7e      	blt.n	80191e0 <tcp_process+0x4a4>
 80190e2:	4b80      	ldr	r3, [pc, #512]	; (80192e4 <tcp_process+0x5a8>)
 80190e4:	681a      	ldr	r2, [r3, #0]
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190ea:	1ad3      	subs	r3, r2, r3
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	dc77      	bgt.n	80191e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	2204      	movs	r2, #4
 80190f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d102      	bne.n	8019104 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80190fe:	23fa      	movs	r3, #250	; 0xfa
 8019100:	76bb      	strb	r3, [r7, #26]
 8019102:	e01d      	b.n	8019140 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019108:	699b      	ldr	r3, [r3, #24]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d106      	bne.n	801911c <tcp_process+0x3e0>
 801910e:	4b7b      	ldr	r3, [pc, #492]	; (80192fc <tcp_process+0x5c0>)
 8019110:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019114:	497a      	ldr	r1, [pc, #488]	; (8019300 <tcp_process+0x5c4>)
 8019116:	487b      	ldr	r0, [pc, #492]	; (8019304 <tcp_process+0x5c8>)
 8019118:	f005 ff84 	bl	801f024 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019120:	699b      	ldr	r3, [r3, #24]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d00a      	beq.n	801913c <tcp_process+0x400>
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801912a:	699b      	ldr	r3, [r3, #24]
 801912c:	687a      	ldr	r2, [r7, #4]
 801912e:	6910      	ldr	r0, [r2, #16]
 8019130:	2200      	movs	r2, #0
 8019132:	6879      	ldr	r1, [r7, #4]
 8019134:	4798      	blx	r3
 8019136:	4603      	mov	r3, r0
 8019138:	76bb      	strb	r3, [r7, #26]
 801913a:	e001      	b.n	8019140 <tcp_process+0x404>
 801913c:	23f0      	movs	r3, #240	; 0xf0
 801913e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019140:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d00a      	beq.n	801915e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8019148:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801914c:	f113 0f0d 	cmn.w	r3, #13
 8019150:	d002      	beq.n	8019158 <tcp_process+0x41c>
              tcp_abort(pcb);
 8019152:	6878      	ldr	r0, [r7, #4]
 8019154:	f7fd fbf0 	bl	8016938 <tcp_abort>
            }
            return ERR_ABRT;
 8019158:	f06f 030c 	mvn.w	r3, #12
 801915c:	e1ce      	b.n	80194fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801915e:	6878      	ldr	r0, [r7, #4]
 8019160:	f000 fae0 	bl	8019724 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8019164:	4b68      	ldr	r3, [pc, #416]	; (8019308 <tcp_process+0x5cc>)
 8019166:	881b      	ldrh	r3, [r3, #0]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d005      	beq.n	8019178 <tcp_process+0x43c>
            recv_acked--;
 801916c:	4b66      	ldr	r3, [pc, #408]	; (8019308 <tcp_process+0x5cc>)
 801916e:	881b      	ldrh	r3, [r3, #0]
 8019170:	3b01      	subs	r3, #1
 8019172:	b29a      	uxth	r2, r3
 8019174:	4b64      	ldr	r3, [pc, #400]	; (8019308 <tcp_process+0x5cc>)
 8019176:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801917c:	009a      	lsls	r2, r3, #2
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019182:	005b      	lsls	r3, r3, #1
 8019184:	f241 111c 	movw	r1, #4380	; 0x111c
 8019188:	428b      	cmp	r3, r1
 801918a:	bf38      	it	cc
 801918c:	460b      	movcc	r3, r1
 801918e:	429a      	cmp	r2, r3
 8019190:	d204      	bcs.n	801919c <tcp_process+0x460>
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019196:	009b      	lsls	r3, r3, #2
 8019198:	b29b      	uxth	r3, r3
 801919a:	e00d      	b.n	80191b8 <tcp_process+0x47c>
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191a0:	005b      	lsls	r3, r3, #1
 80191a2:	f241 121c 	movw	r2, #4380	; 0x111c
 80191a6:	4293      	cmp	r3, r2
 80191a8:	d904      	bls.n	80191b4 <tcp_process+0x478>
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191ae:	005b      	lsls	r3, r3, #1
 80191b0:	b29b      	uxth	r3, r3
 80191b2:	e001      	b.n	80191b8 <tcp_process+0x47c>
 80191b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80191b8:	687a      	ldr	r2, [r7, #4]
 80191ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80191be:	4b53      	ldr	r3, [pc, #332]	; (801930c <tcp_process+0x5d0>)
 80191c0:	781b      	ldrb	r3, [r3, #0]
 80191c2:	f003 0320 	and.w	r3, r3, #32
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d037      	beq.n	801923a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	8b5b      	ldrh	r3, [r3, #26]
 80191ce:	f043 0302 	orr.w	r3, r3, #2
 80191d2:	b29a      	uxth	r2, r3
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2207      	movs	r2, #7
 80191dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80191de:	e02c      	b.n	801923a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80191e0:	4b40      	ldr	r3, [pc, #256]	; (80192e4 <tcp_process+0x5a8>)
 80191e2:	6819      	ldr	r1, [r3, #0]
 80191e4:	4b40      	ldr	r3, [pc, #256]	; (80192e8 <tcp_process+0x5ac>)
 80191e6:	881b      	ldrh	r3, [r3, #0]
 80191e8:	461a      	mov	r2, r3
 80191ea:	4b40      	ldr	r3, [pc, #256]	; (80192ec <tcp_process+0x5b0>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80191f0:	4b3f      	ldr	r3, [pc, #252]	; (80192f0 <tcp_process+0x5b4>)
 80191f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80191f4:	885b      	ldrh	r3, [r3, #2]
 80191f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80191f8:	4a3d      	ldr	r2, [pc, #244]	; (80192f0 <tcp_process+0x5b4>)
 80191fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80191fc:	8812      	ldrh	r2, [r2, #0]
 80191fe:	b292      	uxth	r2, r2
 8019200:	9202      	str	r2, [sp, #8]
 8019202:	9301      	str	r3, [sp, #4]
 8019204:	4b3b      	ldr	r3, [pc, #236]	; (80192f4 <tcp_process+0x5b8>)
 8019206:	9300      	str	r3, [sp, #0]
 8019208:	4b3b      	ldr	r3, [pc, #236]	; (80192f8 <tcp_process+0x5bc>)
 801920a:	4602      	mov	r2, r0
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f003 f827 	bl	801c260 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019212:	e167      	b.n	80194e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019214:	4b32      	ldr	r3, [pc, #200]	; (80192e0 <tcp_process+0x5a4>)
 8019216:	781b      	ldrb	r3, [r3, #0]
 8019218:	f003 0302 	and.w	r3, r3, #2
 801921c:	2b00      	cmp	r3, #0
 801921e:	f000 8161 	beq.w	80194e4 <tcp_process+0x7a8>
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019226:	1e5a      	subs	r2, r3, #1
 8019228:	4b30      	ldr	r3, [pc, #192]	; (80192ec <tcp_process+0x5b0>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	429a      	cmp	r2, r3
 801922e:	f040 8159 	bne.w	80194e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8019232:	6878      	ldr	r0, [r7, #4]
 8019234:	f002 fe0c 	bl	801be50 <tcp_rexmit>
      break;
 8019238:	e154      	b.n	80194e4 <tcp_process+0x7a8>
 801923a:	e153      	b.n	80194e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801923c:	6878      	ldr	r0, [r7, #4]
 801923e:	f000 fa71 	bl	8019724 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019242:	4b32      	ldr	r3, [pc, #200]	; (801930c <tcp_process+0x5d0>)
 8019244:	781b      	ldrb	r3, [r3, #0]
 8019246:	f003 0320 	and.w	r3, r3, #32
 801924a:	2b00      	cmp	r3, #0
 801924c:	f000 814c 	beq.w	80194e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	8b5b      	ldrh	r3, [r3, #26]
 8019254:	f043 0302 	orr.w	r3, r3, #2
 8019258:	b29a      	uxth	r2, r3
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	2207      	movs	r2, #7
 8019262:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019264:	e140      	b.n	80194e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8019266:	6878      	ldr	r0, [r7, #4]
 8019268:	f000 fa5c 	bl	8019724 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801926c:	4b27      	ldr	r3, [pc, #156]	; (801930c <tcp_process+0x5d0>)
 801926e:	781b      	ldrb	r3, [r3, #0]
 8019270:	f003 0320 	and.w	r3, r3, #32
 8019274:	2b00      	cmp	r3, #0
 8019276:	d071      	beq.n	801935c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019278:	4b19      	ldr	r3, [pc, #100]	; (80192e0 <tcp_process+0x5a4>)
 801927a:	781b      	ldrb	r3, [r3, #0]
 801927c:	f003 0310 	and.w	r3, r3, #16
 8019280:	2b00      	cmp	r3, #0
 8019282:	d060      	beq.n	8019346 <tcp_process+0x60a>
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019288:	4b16      	ldr	r3, [pc, #88]	; (80192e4 <tcp_process+0x5a8>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	429a      	cmp	r2, r3
 801928e:	d15a      	bne.n	8019346 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019294:	2b00      	cmp	r3, #0
 8019296:	d156      	bne.n	8019346 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	8b5b      	ldrh	r3, [r3, #26]
 801929c:	f043 0302 	orr.w	r3, r3, #2
 80192a0:	b29a      	uxth	r2, r3
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80192a6:	6878      	ldr	r0, [r7, #4]
 80192a8:	f7fe fdbe 	bl	8017e28 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80192ac:	4b18      	ldr	r3, [pc, #96]	; (8019310 <tcp_process+0x5d4>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	687a      	ldr	r2, [r7, #4]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d105      	bne.n	80192c2 <tcp_process+0x586>
 80192b6:	4b16      	ldr	r3, [pc, #88]	; (8019310 <tcp_process+0x5d4>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	68db      	ldr	r3, [r3, #12]
 80192bc:	4a14      	ldr	r2, [pc, #80]	; (8019310 <tcp_process+0x5d4>)
 80192be:	6013      	str	r3, [r2, #0]
 80192c0:	e02e      	b.n	8019320 <tcp_process+0x5e4>
 80192c2:	4b13      	ldr	r3, [pc, #76]	; (8019310 <tcp_process+0x5d4>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	617b      	str	r3, [r7, #20]
 80192c8:	e027      	b.n	801931a <tcp_process+0x5de>
 80192ca:	697b      	ldr	r3, [r7, #20]
 80192cc:	68db      	ldr	r3, [r3, #12]
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d11f      	bne.n	8019314 <tcp_process+0x5d8>
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	68da      	ldr	r2, [r3, #12]
 80192d8:	697b      	ldr	r3, [r7, #20]
 80192da:	60da      	str	r2, [r3, #12]
 80192dc:	e020      	b.n	8019320 <tcp_process+0x5e4>
 80192de:	bf00      	nop
 80192e0:	24005254 	.word	0x24005254
 80192e4:	2400524c 	.word	0x2400524c
 80192e8:	24005252 	.word	0x24005252
 80192ec:	24005248 	.word	0x24005248
 80192f0:	24005238 	.word	0x24005238
 80192f4:	24005b44 	.word	0x24005b44
 80192f8:	24005b48 	.word	0x24005b48
 80192fc:	08025a44 	.word	0x08025a44
 8019300:	08025d10 	.word	0x08025d10
 8019304:	08025abc 	.word	0x08025abc
 8019308:	24005250 	.word	0x24005250
 801930c:	24005255 	.word	0x24005255
 8019310:	24008a24 	.word	0x24008a24
 8019314:	697b      	ldr	r3, [r7, #20]
 8019316:	68db      	ldr	r3, [r3, #12]
 8019318:	617b      	str	r3, [r7, #20]
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d1d4      	bne.n	80192ca <tcp_process+0x58e>
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	2200      	movs	r2, #0
 8019324:	60da      	str	r2, [r3, #12]
 8019326:	4b77      	ldr	r3, [pc, #476]	; (8019504 <tcp_process+0x7c8>)
 8019328:	2201      	movs	r2, #1
 801932a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	220a      	movs	r2, #10
 8019330:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019332:	4b75      	ldr	r3, [pc, #468]	; (8019508 <tcp_process+0x7cc>)
 8019334:	681a      	ldr	r2, [r3, #0]
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	60da      	str	r2, [r3, #12]
 801933a:	4a73      	ldr	r2, [pc, #460]	; (8019508 <tcp_process+0x7cc>)
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	6013      	str	r3, [r2, #0]
 8019340:	f003 f950 	bl	801c5e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019344:	e0d2      	b.n	80194ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	8b5b      	ldrh	r3, [r3, #26]
 801934a:	f043 0302 	orr.w	r3, r3, #2
 801934e:	b29a      	uxth	r2, r3
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	2208      	movs	r2, #8
 8019358:	751a      	strb	r2, [r3, #20]
      break;
 801935a:	e0c7      	b.n	80194ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801935c:	4b6b      	ldr	r3, [pc, #428]	; (801950c <tcp_process+0x7d0>)
 801935e:	781b      	ldrb	r3, [r3, #0]
 8019360:	f003 0310 	and.w	r3, r3, #16
 8019364:	2b00      	cmp	r3, #0
 8019366:	f000 80c1 	beq.w	80194ec <tcp_process+0x7b0>
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801936e:	4b68      	ldr	r3, [pc, #416]	; (8019510 <tcp_process+0x7d4>)
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	429a      	cmp	r2, r3
 8019374:	f040 80ba 	bne.w	80194ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801937c:	2b00      	cmp	r3, #0
 801937e:	f040 80b5 	bne.w	80194ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2206      	movs	r2, #6
 8019386:	751a      	strb	r2, [r3, #20]
      break;
 8019388:	e0b0      	b.n	80194ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f000 f9ca 	bl	8019724 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019390:	4b60      	ldr	r3, [pc, #384]	; (8019514 <tcp_process+0x7d8>)
 8019392:	781b      	ldrb	r3, [r3, #0]
 8019394:	f003 0320 	and.w	r3, r3, #32
 8019398:	2b00      	cmp	r3, #0
 801939a:	f000 80a9 	beq.w	80194f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	8b5b      	ldrh	r3, [r3, #26]
 80193a2:	f043 0302 	orr.w	r3, r3, #2
 80193a6:	b29a      	uxth	r2, r3
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80193ac:	6878      	ldr	r0, [r7, #4]
 80193ae:	f7fe fd3b 	bl	8017e28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80193b2:	4b59      	ldr	r3, [pc, #356]	; (8019518 <tcp_process+0x7dc>)
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	687a      	ldr	r2, [r7, #4]
 80193b8:	429a      	cmp	r2, r3
 80193ba:	d105      	bne.n	80193c8 <tcp_process+0x68c>
 80193bc:	4b56      	ldr	r3, [pc, #344]	; (8019518 <tcp_process+0x7dc>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	68db      	ldr	r3, [r3, #12]
 80193c2:	4a55      	ldr	r2, [pc, #340]	; (8019518 <tcp_process+0x7dc>)
 80193c4:	6013      	str	r3, [r2, #0]
 80193c6:	e013      	b.n	80193f0 <tcp_process+0x6b4>
 80193c8:	4b53      	ldr	r3, [pc, #332]	; (8019518 <tcp_process+0x7dc>)
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	613b      	str	r3, [r7, #16]
 80193ce:	e00c      	b.n	80193ea <tcp_process+0x6ae>
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	68db      	ldr	r3, [r3, #12]
 80193d4:	687a      	ldr	r2, [r7, #4]
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d104      	bne.n	80193e4 <tcp_process+0x6a8>
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	68da      	ldr	r2, [r3, #12]
 80193de:	693b      	ldr	r3, [r7, #16]
 80193e0:	60da      	str	r2, [r3, #12]
 80193e2:	e005      	b.n	80193f0 <tcp_process+0x6b4>
 80193e4:	693b      	ldr	r3, [r7, #16]
 80193e6:	68db      	ldr	r3, [r3, #12]
 80193e8:	613b      	str	r3, [r7, #16]
 80193ea:	693b      	ldr	r3, [r7, #16]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d1ef      	bne.n	80193d0 <tcp_process+0x694>
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2200      	movs	r2, #0
 80193f4:	60da      	str	r2, [r3, #12]
 80193f6:	4b43      	ldr	r3, [pc, #268]	; (8019504 <tcp_process+0x7c8>)
 80193f8:	2201      	movs	r2, #1
 80193fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	220a      	movs	r2, #10
 8019400:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019402:	4b41      	ldr	r3, [pc, #260]	; (8019508 <tcp_process+0x7cc>)
 8019404:	681a      	ldr	r2, [r3, #0]
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	60da      	str	r2, [r3, #12]
 801940a:	4a3f      	ldr	r2, [pc, #252]	; (8019508 <tcp_process+0x7cc>)
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	6013      	str	r3, [r2, #0]
 8019410:	f003 f8e8 	bl	801c5e4 <tcp_timer_needed>
      }
      break;
 8019414:	e06c      	b.n	80194f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8019416:	6878      	ldr	r0, [r7, #4]
 8019418:	f000 f984 	bl	8019724 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801941c:	4b3b      	ldr	r3, [pc, #236]	; (801950c <tcp_process+0x7d0>)
 801941e:	781b      	ldrb	r3, [r3, #0]
 8019420:	f003 0310 	and.w	r3, r3, #16
 8019424:	2b00      	cmp	r3, #0
 8019426:	d065      	beq.n	80194f4 <tcp_process+0x7b8>
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801942c:	4b38      	ldr	r3, [pc, #224]	; (8019510 <tcp_process+0x7d4>)
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	429a      	cmp	r2, r3
 8019432:	d15f      	bne.n	80194f4 <tcp_process+0x7b8>
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019438:	2b00      	cmp	r3, #0
 801943a:	d15b      	bne.n	80194f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801943c:	6878      	ldr	r0, [r7, #4]
 801943e:	f7fe fcf3 	bl	8017e28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019442:	4b35      	ldr	r3, [pc, #212]	; (8019518 <tcp_process+0x7dc>)
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	687a      	ldr	r2, [r7, #4]
 8019448:	429a      	cmp	r2, r3
 801944a:	d105      	bne.n	8019458 <tcp_process+0x71c>
 801944c:	4b32      	ldr	r3, [pc, #200]	; (8019518 <tcp_process+0x7dc>)
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	68db      	ldr	r3, [r3, #12]
 8019452:	4a31      	ldr	r2, [pc, #196]	; (8019518 <tcp_process+0x7dc>)
 8019454:	6013      	str	r3, [r2, #0]
 8019456:	e013      	b.n	8019480 <tcp_process+0x744>
 8019458:	4b2f      	ldr	r3, [pc, #188]	; (8019518 <tcp_process+0x7dc>)
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	60fb      	str	r3, [r7, #12]
 801945e:	e00c      	b.n	801947a <tcp_process+0x73e>
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	68db      	ldr	r3, [r3, #12]
 8019464:	687a      	ldr	r2, [r7, #4]
 8019466:	429a      	cmp	r2, r3
 8019468:	d104      	bne.n	8019474 <tcp_process+0x738>
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	68da      	ldr	r2, [r3, #12]
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	60da      	str	r2, [r3, #12]
 8019472:	e005      	b.n	8019480 <tcp_process+0x744>
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	68db      	ldr	r3, [r3, #12]
 8019478:	60fb      	str	r3, [r7, #12]
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d1ef      	bne.n	8019460 <tcp_process+0x724>
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	2200      	movs	r2, #0
 8019484:	60da      	str	r2, [r3, #12]
 8019486:	4b1f      	ldr	r3, [pc, #124]	; (8019504 <tcp_process+0x7c8>)
 8019488:	2201      	movs	r2, #1
 801948a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	220a      	movs	r2, #10
 8019490:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019492:	4b1d      	ldr	r3, [pc, #116]	; (8019508 <tcp_process+0x7cc>)
 8019494:	681a      	ldr	r2, [r3, #0]
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	60da      	str	r2, [r3, #12]
 801949a:	4a1b      	ldr	r2, [pc, #108]	; (8019508 <tcp_process+0x7cc>)
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	6013      	str	r3, [r2, #0]
 80194a0:	f003 f8a0 	bl	801c5e4 <tcp_timer_needed>
      }
      break;
 80194a4:	e026      	b.n	80194f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80194a6:	6878      	ldr	r0, [r7, #4]
 80194a8:	f000 f93c 	bl	8019724 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80194ac:	4b17      	ldr	r3, [pc, #92]	; (801950c <tcp_process+0x7d0>)
 80194ae:	781b      	ldrb	r3, [r3, #0]
 80194b0:	f003 0310 	and.w	r3, r3, #16
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d01f      	beq.n	80194f8 <tcp_process+0x7bc>
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80194bc:	4b14      	ldr	r3, [pc, #80]	; (8019510 <tcp_process+0x7d4>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	429a      	cmp	r2, r3
 80194c2:	d119      	bne.n	80194f8 <tcp_process+0x7bc>
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d115      	bne.n	80194f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80194cc:	4b11      	ldr	r3, [pc, #68]	; (8019514 <tcp_process+0x7d8>)
 80194ce:	781b      	ldrb	r3, [r3, #0]
 80194d0:	f043 0310 	orr.w	r3, r3, #16
 80194d4:	b2da      	uxtb	r2, r3
 80194d6:	4b0f      	ldr	r3, [pc, #60]	; (8019514 <tcp_process+0x7d8>)
 80194d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80194da:	e00d      	b.n	80194f8 <tcp_process+0x7bc>
    default:
      break;
 80194dc:	bf00      	nop
 80194de:	e00c      	b.n	80194fa <tcp_process+0x7be>
      break;
 80194e0:	bf00      	nop
 80194e2:	e00a      	b.n	80194fa <tcp_process+0x7be>
      break;
 80194e4:	bf00      	nop
 80194e6:	e008      	b.n	80194fa <tcp_process+0x7be>
      break;
 80194e8:	bf00      	nop
 80194ea:	e006      	b.n	80194fa <tcp_process+0x7be>
      break;
 80194ec:	bf00      	nop
 80194ee:	e004      	b.n	80194fa <tcp_process+0x7be>
      break;
 80194f0:	bf00      	nop
 80194f2:	e002      	b.n	80194fa <tcp_process+0x7be>
      break;
 80194f4:	bf00      	nop
 80194f6:	e000      	b.n	80194fa <tcp_process+0x7be>
      break;
 80194f8:	bf00      	nop
  }
  return ERR_OK;
 80194fa:	2300      	movs	r3, #0
}
 80194fc:	4618      	mov	r0, r3
 80194fe:	3724      	adds	r7, #36	; 0x24
 8019500:	46bd      	mov	sp, r7
 8019502:	bd90      	pop	{r4, r7, pc}
 8019504:	24008a20 	.word	0x24008a20
 8019508:	24008a34 	.word	0x24008a34
 801950c:	24005254 	.word	0x24005254
 8019510:	2400524c 	.word	0x2400524c
 8019514:	24005255 	.word	0x24005255
 8019518:	24008a24 	.word	0x24008a24

0801951c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801951c:	b590      	push	{r4, r7, lr}
 801951e:	b085      	sub	sp, #20
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d106      	bne.n	801953a <tcp_oos_insert_segment+0x1e>
 801952c:	4b3b      	ldr	r3, [pc, #236]	; (801961c <tcp_oos_insert_segment+0x100>)
 801952e:	f240 421f 	movw	r2, #1055	; 0x41f
 8019532:	493b      	ldr	r1, [pc, #236]	; (8019620 <tcp_oos_insert_segment+0x104>)
 8019534:	483b      	ldr	r0, [pc, #236]	; (8019624 <tcp_oos_insert_segment+0x108>)
 8019536:	f005 fd75 	bl	801f024 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	68db      	ldr	r3, [r3, #12]
 801953e:	899b      	ldrh	r3, [r3, #12]
 8019540:	b29b      	uxth	r3, r3
 8019542:	4618      	mov	r0, r3
 8019544:	f7f8 fcbc 	bl	8011ec0 <lwip_htons>
 8019548:	4603      	mov	r3, r0
 801954a:	b2db      	uxtb	r3, r3
 801954c:	f003 0301 	and.w	r3, r3, #1
 8019550:	2b00      	cmp	r3, #0
 8019552:	d028      	beq.n	80195a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019554:	6838      	ldr	r0, [r7, #0]
 8019556:	f7fe f997 	bl	8017888 <tcp_segs_free>
    next = NULL;
 801955a:	2300      	movs	r3, #0
 801955c:	603b      	str	r3, [r7, #0]
 801955e:	e056      	b.n	801960e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019560:	683b      	ldr	r3, [r7, #0]
 8019562:	68db      	ldr	r3, [r3, #12]
 8019564:	899b      	ldrh	r3, [r3, #12]
 8019566:	b29b      	uxth	r3, r3
 8019568:	4618      	mov	r0, r3
 801956a:	f7f8 fca9 	bl	8011ec0 <lwip_htons>
 801956e:	4603      	mov	r3, r0
 8019570:	b2db      	uxtb	r3, r3
 8019572:	f003 0301 	and.w	r3, r3, #1
 8019576:	2b00      	cmp	r3, #0
 8019578:	d00d      	beq.n	8019596 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	68db      	ldr	r3, [r3, #12]
 801957e:	899b      	ldrh	r3, [r3, #12]
 8019580:	b29c      	uxth	r4, r3
 8019582:	2001      	movs	r0, #1
 8019584:	f7f8 fc9c 	bl	8011ec0 <lwip_htons>
 8019588:	4603      	mov	r3, r0
 801958a:	461a      	mov	r2, r3
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	68db      	ldr	r3, [r3, #12]
 8019590:	4322      	orrs	r2, r4
 8019592:	b292      	uxth	r2, r2
 8019594:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801959a:	683b      	ldr	r3, [r7, #0]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80195a0:	68f8      	ldr	r0, [r7, #12]
 80195a2:	f7fe f986 	bl	80178b2 <tcp_seg_free>
    while (next &&
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d00e      	beq.n	80195ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	891b      	ldrh	r3, [r3, #8]
 80195b0:	461a      	mov	r2, r3
 80195b2:	4b1d      	ldr	r3, [pc, #116]	; (8019628 <tcp_oos_insert_segment+0x10c>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	441a      	add	r2, r3
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	68db      	ldr	r3, [r3, #12]
 80195bc:	685b      	ldr	r3, [r3, #4]
 80195be:	6839      	ldr	r1, [r7, #0]
 80195c0:	8909      	ldrh	r1, [r1, #8]
 80195c2:	440b      	add	r3, r1
 80195c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	daca      	bge.n	8019560 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d01e      	beq.n	801960e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	891b      	ldrh	r3, [r3, #8]
 80195d4:	461a      	mov	r2, r3
 80195d6:	4b14      	ldr	r3, [pc, #80]	; (8019628 <tcp_oos_insert_segment+0x10c>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	441a      	add	r2, r3
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	68db      	ldr	r3, [r3, #12]
 80195e0:	685b      	ldr	r3, [r3, #4]
 80195e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	dd12      	ble.n	801960e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80195e8:	683b      	ldr	r3, [r7, #0]
 80195ea:	68db      	ldr	r3, [r3, #12]
 80195ec:	685b      	ldr	r3, [r3, #4]
 80195ee:	b29a      	uxth	r2, r3
 80195f0:	4b0d      	ldr	r3, [pc, #52]	; (8019628 <tcp_oos_insert_segment+0x10c>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	b29b      	uxth	r3, r3
 80195f6:	1ad3      	subs	r3, r2, r3
 80195f8:	b29a      	uxth	r2, r3
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	685a      	ldr	r2, [r3, #4]
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	891b      	ldrh	r3, [r3, #8]
 8019606:	4619      	mov	r1, r3
 8019608:	4610      	mov	r0, r2
 801960a:	f7fc f9cf 	bl	80159ac <pbuf_realloc>
    }
  }
  cseg->next = next;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	683a      	ldr	r2, [r7, #0]
 8019612:	601a      	str	r2, [r3, #0]
}
 8019614:	bf00      	nop
 8019616:	3714      	adds	r7, #20
 8019618:	46bd      	mov	sp, r7
 801961a:	bd90      	pop	{r4, r7, pc}
 801961c:	08025a44 	.word	0x08025a44
 8019620:	08025d30 	.word	0x08025d30
 8019624:	08025abc 	.word	0x08025abc
 8019628:	24005248 	.word	0x24005248

0801962c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801962c:	b5b0      	push	{r4, r5, r7, lr}
 801962e:	b086      	sub	sp, #24
 8019630:	af00      	add	r7, sp, #0
 8019632:	60f8      	str	r0, [r7, #12]
 8019634:	60b9      	str	r1, [r7, #8]
 8019636:	607a      	str	r2, [r7, #4]
 8019638:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801963a:	e03e      	b.n	80196ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801963c:	68bb      	ldr	r3, [r7, #8]
 801963e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019640:	68bb      	ldr	r3, [r7, #8]
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	685b      	ldr	r3, [r3, #4]
 801964a:	4618      	mov	r0, r3
 801964c:	f7fc fbbc 	bl	8015dc8 <pbuf_clen>
 8019650:	4603      	mov	r3, r0
 8019652:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801965a:	8a7a      	ldrh	r2, [r7, #18]
 801965c:	429a      	cmp	r2, r3
 801965e:	d906      	bls.n	801966e <tcp_free_acked_segments+0x42>
 8019660:	4b2a      	ldr	r3, [pc, #168]	; (801970c <tcp_free_acked_segments+0xe0>)
 8019662:	f240 4257 	movw	r2, #1111	; 0x457
 8019666:	492a      	ldr	r1, [pc, #168]	; (8019710 <tcp_free_acked_segments+0xe4>)
 8019668:	482a      	ldr	r0, [pc, #168]	; (8019714 <tcp_free_acked_segments+0xe8>)
 801966a:	f005 fcdb 	bl	801f024 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019674:	8a7b      	ldrh	r3, [r7, #18]
 8019676:	1ad3      	subs	r3, r2, r3
 8019678:	b29a      	uxth	r2, r3
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019680:	697b      	ldr	r3, [r7, #20]
 8019682:	891a      	ldrh	r2, [r3, #8]
 8019684:	4b24      	ldr	r3, [pc, #144]	; (8019718 <tcp_free_acked_segments+0xec>)
 8019686:	881b      	ldrh	r3, [r3, #0]
 8019688:	4413      	add	r3, r2
 801968a:	b29a      	uxth	r2, r3
 801968c:	4b22      	ldr	r3, [pc, #136]	; (8019718 <tcp_free_acked_segments+0xec>)
 801968e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019690:	6978      	ldr	r0, [r7, #20]
 8019692:	f7fe f90e 	bl	80178b2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801969c:	2b00      	cmp	r3, #0
 801969e:	d00c      	beq.n	80196ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80196a0:	68bb      	ldr	r3, [r7, #8]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d109      	bne.n	80196ba <tcp_free_acked_segments+0x8e>
 80196a6:	683b      	ldr	r3, [r7, #0]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d106      	bne.n	80196ba <tcp_free_acked_segments+0x8e>
 80196ac:	4b17      	ldr	r3, [pc, #92]	; (801970c <tcp_free_acked_segments+0xe0>)
 80196ae:	f240 4261 	movw	r2, #1121	; 0x461
 80196b2:	491a      	ldr	r1, [pc, #104]	; (801971c <tcp_free_acked_segments+0xf0>)
 80196b4:	4817      	ldr	r0, [pc, #92]	; (8019714 <tcp_free_acked_segments+0xe8>)
 80196b6:	f005 fcb5 	bl	801f024 <iprintf>
  while (seg_list != NULL &&
 80196ba:	68bb      	ldr	r3, [r7, #8]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d020      	beq.n	8019702 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80196c0:	68bb      	ldr	r3, [r7, #8]
 80196c2:	68db      	ldr	r3, [r3, #12]
 80196c4:	685b      	ldr	r3, [r3, #4]
 80196c6:	4618      	mov	r0, r3
 80196c8:	f7f8 fc0f 	bl	8011eea <lwip_htonl>
 80196cc:	4604      	mov	r4, r0
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	891b      	ldrh	r3, [r3, #8]
 80196d2:	461d      	mov	r5, r3
 80196d4:	68bb      	ldr	r3, [r7, #8]
 80196d6:	68db      	ldr	r3, [r3, #12]
 80196d8:	899b      	ldrh	r3, [r3, #12]
 80196da:	b29b      	uxth	r3, r3
 80196dc:	4618      	mov	r0, r3
 80196de:	f7f8 fbef 	bl	8011ec0 <lwip_htons>
 80196e2:	4603      	mov	r3, r0
 80196e4:	b2db      	uxtb	r3, r3
 80196e6:	f003 0303 	and.w	r3, r3, #3
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d001      	beq.n	80196f2 <tcp_free_acked_segments+0xc6>
 80196ee:	2301      	movs	r3, #1
 80196f0:	e000      	b.n	80196f4 <tcp_free_acked_segments+0xc8>
 80196f2:	2300      	movs	r3, #0
 80196f4:	442b      	add	r3, r5
 80196f6:	18e2      	adds	r2, r4, r3
 80196f8:	4b09      	ldr	r3, [pc, #36]	; (8019720 <tcp_free_acked_segments+0xf4>)
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80196fe:	2b00      	cmp	r3, #0
 8019700:	dd9c      	ble.n	801963c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019702:	68bb      	ldr	r3, [r7, #8]
}
 8019704:	4618      	mov	r0, r3
 8019706:	3718      	adds	r7, #24
 8019708:	46bd      	mov	sp, r7
 801970a:	bdb0      	pop	{r4, r5, r7, pc}
 801970c:	08025a44 	.word	0x08025a44
 8019710:	08025d58 	.word	0x08025d58
 8019714:	08025abc 	.word	0x08025abc
 8019718:	24005250 	.word	0x24005250
 801971c:	08025d80 	.word	0x08025d80
 8019720:	2400524c 	.word	0x2400524c

08019724 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019724:	b5b0      	push	{r4, r5, r7, lr}
 8019726:	b094      	sub	sp, #80	; 0x50
 8019728:	af00      	add	r7, sp, #0
 801972a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801972c:	2300      	movs	r3, #0
 801972e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d106      	bne.n	8019744 <tcp_receive+0x20>
 8019736:	4ba6      	ldr	r3, [pc, #664]	; (80199d0 <tcp_receive+0x2ac>)
 8019738:	f240 427b 	movw	r2, #1147	; 0x47b
 801973c:	49a5      	ldr	r1, [pc, #660]	; (80199d4 <tcp_receive+0x2b0>)
 801973e:	48a6      	ldr	r0, [pc, #664]	; (80199d8 <tcp_receive+0x2b4>)
 8019740:	f005 fc70 	bl	801f024 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	7d1b      	ldrb	r3, [r3, #20]
 8019748:	2b03      	cmp	r3, #3
 801974a:	d806      	bhi.n	801975a <tcp_receive+0x36>
 801974c:	4ba0      	ldr	r3, [pc, #640]	; (80199d0 <tcp_receive+0x2ac>)
 801974e:	f240 427c 	movw	r2, #1148	; 0x47c
 8019752:	49a2      	ldr	r1, [pc, #648]	; (80199dc <tcp_receive+0x2b8>)
 8019754:	48a0      	ldr	r0, [pc, #640]	; (80199d8 <tcp_receive+0x2b4>)
 8019756:	f005 fc65 	bl	801f024 <iprintf>

  if (flags & TCP_ACK) {
 801975a:	4ba1      	ldr	r3, [pc, #644]	; (80199e0 <tcp_receive+0x2bc>)
 801975c:	781b      	ldrb	r3, [r3, #0]
 801975e:	f003 0310 	and.w	r3, r3, #16
 8019762:	2b00      	cmp	r3, #0
 8019764:	f000 8263 	beq.w	8019c2e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801976e:	461a      	mov	r2, r3
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019774:	4413      	add	r3, r2
 8019776:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801977c:	4b99      	ldr	r3, [pc, #612]	; (80199e4 <tcp_receive+0x2c0>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	1ad3      	subs	r3, r2, r3
 8019782:	2b00      	cmp	r3, #0
 8019784:	db1b      	blt.n	80197be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801978a:	4b96      	ldr	r3, [pc, #600]	; (80199e4 <tcp_receive+0x2c0>)
 801978c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801978e:	429a      	cmp	r2, r3
 8019790:	d106      	bne.n	80197a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019796:	4b94      	ldr	r3, [pc, #592]	; (80199e8 <tcp_receive+0x2c4>)
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	1ad3      	subs	r3, r2, r3
 801979c:	2b00      	cmp	r3, #0
 801979e:	db0e      	blt.n	80197be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197a4:	4b90      	ldr	r3, [pc, #576]	; (80199e8 <tcp_receive+0x2c4>)
 80197a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197a8:	429a      	cmp	r2, r3
 80197aa:	d125      	bne.n	80197f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197ac:	4b8f      	ldr	r3, [pc, #572]	; (80199ec <tcp_receive+0x2c8>)
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	89db      	ldrh	r3, [r3, #14]
 80197b2:	b29a      	uxth	r2, r3
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80197ba:	429a      	cmp	r2, r3
 80197bc:	d91c      	bls.n	80197f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80197be:	4b8b      	ldr	r3, [pc, #556]	; (80199ec <tcp_receive+0x2c8>)
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	89db      	ldrh	r3, [r3, #14]
 80197c4:	b29a      	uxth	r2, r3
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80197d8:	429a      	cmp	r2, r3
 80197da:	d205      	bcs.n	80197e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80197e8:	4b7e      	ldr	r3, [pc, #504]	; (80199e4 <tcp_receive+0x2c0>)
 80197ea:	681a      	ldr	r2, [r3, #0]
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80197f0:	4b7d      	ldr	r3, [pc, #500]	; (80199e8 <tcp_receive+0x2c4>)
 80197f2:	681a      	ldr	r2, [r3, #0]
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80197f8:	4b7b      	ldr	r3, [pc, #492]	; (80199e8 <tcp_receive+0x2c4>)
 80197fa:	681a      	ldr	r2, [r3, #0]
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019800:	1ad3      	subs	r3, r2, r3
 8019802:	2b00      	cmp	r3, #0
 8019804:	dc58      	bgt.n	80198b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8019806:	4b7a      	ldr	r3, [pc, #488]	; (80199f0 <tcp_receive+0x2cc>)
 8019808:	881b      	ldrh	r3, [r3, #0]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d14b      	bne.n	80198a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019812:	687a      	ldr	r2, [r7, #4]
 8019814:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8019818:	4413      	add	r3, r2
 801981a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801981c:	429a      	cmp	r2, r3
 801981e:	d142      	bne.n	80198a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019826:	2b00      	cmp	r3, #0
 8019828:	db3d      	blt.n	80198a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801982e:	4b6e      	ldr	r3, [pc, #440]	; (80199e8 <tcp_receive+0x2c4>)
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	429a      	cmp	r2, r3
 8019834:	d137      	bne.n	80198a6 <tcp_receive+0x182>
              found_dupack = 1;
 8019836:	2301      	movs	r3, #1
 8019838:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019840:	2bff      	cmp	r3, #255	; 0xff
 8019842:	d007      	beq.n	8019854 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801984a:	3301      	adds	r3, #1
 801984c:	b2da      	uxtb	r2, r3
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801985a:	2b03      	cmp	r3, #3
 801985c:	d91b      	bls.n	8019896 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019868:	4413      	add	r3, r2
 801986a:	b29a      	uxth	r2, r3
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019872:	429a      	cmp	r2, r3
 8019874:	d30a      	bcc.n	801988c <tcp_receive+0x168>
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019880:	4413      	add	r3, r2
 8019882:	b29a      	uxth	r2, r3
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801988a:	e004      	b.n	8019896 <tcp_receive+0x172>
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801989c:	2b02      	cmp	r3, #2
 801989e:	d902      	bls.n	80198a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80198a0:	6878      	ldr	r0, [r7, #4]
 80198a2:	f002 fb41 	bl	801bf28 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80198a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	f040 8160 	bne.w	8019b6e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	2200      	movs	r2, #0
 80198b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80198b6:	e15a      	b.n	8019b6e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80198b8:	4b4b      	ldr	r3, [pc, #300]	; (80199e8 <tcp_receive+0x2c4>)
 80198ba:	681a      	ldr	r2, [r3, #0]
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198c0:	1ad3      	subs	r3, r2, r3
 80198c2:	3b01      	subs	r3, #1
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	f2c0 814d 	blt.w	8019b64 <tcp_receive+0x440>
 80198ca:	4b47      	ldr	r3, [pc, #284]	; (80199e8 <tcp_receive+0x2c4>)
 80198cc:	681a      	ldr	r2, [r3, #0]
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198d2:	1ad3      	subs	r3, r2, r3
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	f300 8145 	bgt.w	8019b64 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	8b5b      	ldrh	r3, [r3, #26]
 80198de:	f003 0304 	and.w	r3, r3, #4
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d010      	beq.n	8019908 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	8b5b      	ldrh	r3, [r3, #26]
 80198ea:	f023 0304 	bic.w	r3, r3, #4
 80198ee:	b29a      	uxth	r2, r3
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2200      	movs	r2, #0
 8019904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2200      	movs	r2, #0
 801990c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019916:	10db      	asrs	r3, r3, #3
 8019918:	b21b      	sxth	r3, r3
 801991a:	b29a      	uxth	r2, r3
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019922:	b29b      	uxth	r3, r3
 8019924:	4413      	add	r3, r2
 8019926:	b29b      	uxth	r3, r3
 8019928:	b21a      	sxth	r2, r3
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019930:	4b2d      	ldr	r3, [pc, #180]	; (80199e8 <tcp_receive+0x2c4>)
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	b29a      	uxth	r2, r3
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801993a:	b29b      	uxth	r3, r3
 801993c:	1ad3      	subs	r3, r2, r3
 801993e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	2200      	movs	r2, #0
 8019944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8019948:	4b27      	ldr	r3, [pc, #156]	; (80199e8 <tcp_receive+0x2c4>)
 801994a:	681a      	ldr	r2, [r3, #0]
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	7d1b      	ldrb	r3, [r3, #20]
 8019954:	2b03      	cmp	r3, #3
 8019956:	f240 8096 	bls.w	8019a86 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019966:	429a      	cmp	r2, r3
 8019968:	d244      	bcs.n	80199f4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	8b5b      	ldrh	r3, [r3, #26]
 801996e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019972:	2b00      	cmp	r3, #0
 8019974:	d001      	beq.n	801997a <tcp_receive+0x256>
 8019976:	2301      	movs	r3, #1
 8019978:	e000      	b.n	801997c <tcp_receive+0x258>
 801997a:	2302      	movs	r3, #2
 801997c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019980:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019984:	b29a      	uxth	r2, r3
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801998a:	fb12 f303 	smulbb	r3, r2, r3
 801998e:	b29b      	uxth	r3, r3
 8019990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019992:	4293      	cmp	r3, r2
 8019994:	bf28      	it	cs
 8019996:	4613      	movcs	r3, r2
 8019998:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80199a2:	4413      	add	r3, r2
 80199a4:	b29a      	uxth	r2, r3
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80199ac:	429a      	cmp	r2, r3
 80199ae:	d309      	bcc.n	80199c4 <tcp_receive+0x2a0>
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80199b8:	4413      	add	r3, r2
 80199ba:	b29a      	uxth	r2, r3
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80199c2:	e060      	b.n	8019a86 <tcp_receive+0x362>
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80199ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80199ce:	e05a      	b.n	8019a86 <tcp_receive+0x362>
 80199d0:	08025a44 	.word	0x08025a44
 80199d4:	08025da0 	.word	0x08025da0
 80199d8:	08025abc 	.word	0x08025abc
 80199dc:	08025dbc 	.word	0x08025dbc
 80199e0:	24005254 	.word	0x24005254
 80199e4:	24005248 	.word	0x24005248
 80199e8:	2400524c 	.word	0x2400524c
 80199ec:	24005238 	.word	0x24005238
 80199f0:	24005252 	.word	0x24005252
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80199fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80199fc:	4413      	add	r3, r2
 80199fe:	b29a      	uxth	r2, r3
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019a06:	429a      	cmp	r2, r3
 8019a08:	d309      	bcc.n	8019a1e <tcp_receive+0x2fa>
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019a12:	4413      	add	r3, r2
 8019a14:	b29a      	uxth	r2, r3
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019a1c:	e004      	b.n	8019a28 <tcp_receive+0x304>
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d326      	bcc.n	8019a86 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a44:	1ad3      	subs	r3, r2, r3
 8019a46:	b29a      	uxth	r2, r3
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019a58:	4413      	add	r3, r2
 8019a5a:	b29a      	uxth	r2, r3
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a62:	429a      	cmp	r2, r3
 8019a64:	d30a      	bcc.n	8019a7c <tcp_receive+0x358>
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019a70:	4413      	add	r3, r2
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019a7a:	e004      	b.n	8019a86 <tcp_receive+0x362>
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a8e:	4a98      	ldr	r2, [pc, #608]	; (8019cf0 <tcp_receive+0x5cc>)
 8019a90:	6878      	ldr	r0, [r7, #4]
 8019a92:	f7ff fdcb 	bl	801962c <tcp_free_acked_segments>
 8019a96:	4602      	mov	r2, r0
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019aa4:	4a93      	ldr	r2, [pc, #588]	; (8019cf4 <tcp_receive+0x5d0>)
 8019aa6:	6878      	ldr	r0, [r7, #4]
 8019aa8:	f7ff fdc0 	bl	801962c <tcp_free_acked_segments>
 8019aac:	4602      	mov	r2, r0
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d104      	bne.n	8019ac4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ac0:	861a      	strh	r2, [r3, #48]	; 0x30
 8019ac2:	e002      	b.n	8019aca <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	2200      	movs	r2, #0
 8019ac8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	2200      	movs	r2, #0
 8019ace:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d103      	bne.n	8019ae0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	2200      	movs	r2, #0
 8019adc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019ae6:	4b84      	ldr	r3, [pc, #528]	; (8019cf8 <tcp_receive+0x5d4>)
 8019ae8:	881b      	ldrh	r3, [r3, #0]
 8019aea:	4413      	add	r3, r2
 8019aec:	b29a      	uxth	r2, r3
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	8b5b      	ldrh	r3, [r3, #26]
 8019af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d035      	beq.n	8019b6c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d118      	bne.n	8019b3a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d00c      	beq.n	8019b2a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b18:	68db      	ldr	r3, [r3, #12]
 8019b1a:	685b      	ldr	r3, [r3, #4]
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7f8 f9e4 	bl	8011eea <lwip_htonl>
 8019b22:	4603      	mov	r3, r0
 8019b24:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	dc20      	bgt.n	8019b6c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	8b5b      	ldrh	r3, [r3, #26]
 8019b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b32:	b29a      	uxth	r2, r3
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b38:	e018      	b.n	8019b6c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b42:	68db      	ldr	r3, [r3, #12]
 8019b44:	685b      	ldr	r3, [r3, #4]
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7f8 f9cf 	bl	8011eea <lwip_htonl>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	1ae3      	subs	r3, r4, r3
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	dc0b      	bgt.n	8019b6c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	8b5b      	ldrh	r3, [r3, #26]
 8019b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b5c:	b29a      	uxth	r2, r3
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b62:	e003      	b.n	8019b6c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019b64:	6878      	ldr	r0, [r7, #4]
 8019b66:	f002 fbcd 	bl	801c304 <tcp_send_empty_ack>
 8019b6a:	e000      	b.n	8019b6e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b6c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d05b      	beq.n	8019c2e <tcp_receive+0x50a>
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019b7a:	4b60      	ldr	r3, [pc, #384]	; (8019cfc <tcp_receive+0x5d8>)
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	1ad3      	subs	r3, r2, r3
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	da54      	bge.n	8019c2e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019b84:	4b5e      	ldr	r3, [pc, #376]	; (8019d00 <tcp_receive+0x5dc>)
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	b29a      	uxth	r2, r3
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b8e:	b29b      	uxth	r3, r3
 8019b90:	1ad3      	subs	r3, r2, r3
 8019b92:	b29b      	uxth	r3, r3
 8019b94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019b98:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019ba2:	10db      	asrs	r3, r3, #3
 8019ba4:	b21b      	sxth	r3, r3
 8019ba6:	b29b      	uxth	r3, r3
 8019ba8:	1ad3      	subs	r3, r2, r3
 8019baa:	b29b      	uxth	r3, r3
 8019bac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019bb6:	b29a      	uxth	r2, r3
 8019bb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019bbc:	4413      	add	r3, r2
 8019bbe:	b29b      	uxth	r3, r3
 8019bc0:	b21a      	sxth	r2, r3
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8019bc6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	da05      	bge.n	8019bda <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019bce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019bd2:	425b      	negs	r3, r3
 8019bd4:	b29b      	uxth	r3, r3
 8019bd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019bda:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019be4:	109b      	asrs	r3, r3, #2
 8019be6:	b21b      	sxth	r3, r3
 8019be8:	b29b      	uxth	r3, r3
 8019bea:	1ad3      	subs	r3, r2, r3
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019bf8:	b29a      	uxth	r2, r3
 8019bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019bfe:	4413      	add	r3, r2
 8019c00:	b29b      	uxth	r3, r3
 8019c02:	b21a      	sxth	r2, r3
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019c0e:	10db      	asrs	r3, r3, #3
 8019c10:	b21b      	sxth	r3, r3
 8019c12:	b29a      	uxth	r2, r3
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c1a:	b29b      	uxth	r3, r3
 8019c1c:	4413      	add	r3, r2
 8019c1e:	b29b      	uxth	r3, r3
 8019c20:	b21a      	sxth	r2, r3
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019c2e:	4b35      	ldr	r3, [pc, #212]	; (8019d04 <tcp_receive+0x5e0>)
 8019c30:	881b      	ldrh	r3, [r3, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	f000 84e1 	beq.w	801a5fa <tcp_receive+0xed6>
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	7d1b      	ldrb	r3, [r3, #20]
 8019c3c:	2b06      	cmp	r3, #6
 8019c3e:	f200 84dc 	bhi.w	801a5fa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c46:	4b30      	ldr	r3, [pc, #192]	; (8019d08 <tcp_receive+0x5e4>)
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	1ad3      	subs	r3, r2, r3
 8019c4c:	3b01      	subs	r3, #1
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	f2c0 808e 	blt.w	8019d70 <tcp_receive+0x64c>
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c58:	4b2a      	ldr	r3, [pc, #168]	; (8019d04 <tcp_receive+0x5e0>)
 8019c5a:	881b      	ldrh	r3, [r3, #0]
 8019c5c:	4619      	mov	r1, r3
 8019c5e:	4b2a      	ldr	r3, [pc, #168]	; (8019d08 <tcp_receive+0x5e4>)
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	440b      	add	r3, r1
 8019c64:	1ad3      	subs	r3, r2, r3
 8019c66:	3301      	adds	r3, #1
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	f300 8081 	bgt.w	8019d70 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019c6e:	4b27      	ldr	r3, [pc, #156]	; (8019d0c <tcp_receive+0x5e8>)
 8019c70:	685b      	ldr	r3, [r3, #4]
 8019c72:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c78:	4b23      	ldr	r3, [pc, #140]	; (8019d08 <tcp_receive+0x5e4>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	1ad3      	subs	r3, r2, r3
 8019c7e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019c80:	4b22      	ldr	r3, [pc, #136]	; (8019d0c <tcp_receive+0x5e8>)
 8019c82:	685b      	ldr	r3, [r3, #4]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d106      	bne.n	8019c96 <tcp_receive+0x572>
 8019c88:	4b21      	ldr	r3, [pc, #132]	; (8019d10 <tcp_receive+0x5ec>)
 8019c8a:	f240 5294 	movw	r2, #1428	; 0x594
 8019c8e:	4921      	ldr	r1, [pc, #132]	; (8019d14 <tcp_receive+0x5f0>)
 8019c90:	4821      	ldr	r0, [pc, #132]	; (8019d18 <tcp_receive+0x5f4>)
 8019c92:	f005 f9c7 	bl	801f024 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019c9c:	4293      	cmp	r3, r2
 8019c9e:	d906      	bls.n	8019cae <tcp_receive+0x58a>
 8019ca0:	4b1b      	ldr	r3, [pc, #108]	; (8019d10 <tcp_receive+0x5ec>)
 8019ca2:	f240 5295 	movw	r2, #1429	; 0x595
 8019ca6:	491d      	ldr	r1, [pc, #116]	; (8019d1c <tcp_receive+0x5f8>)
 8019ca8:	481b      	ldr	r0, [pc, #108]	; (8019d18 <tcp_receive+0x5f4>)
 8019caa:	f005 f9bb 	bl	801f024 <iprintf>
      off = (u16_t)off32;
 8019cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019cb4:	4b15      	ldr	r3, [pc, #84]	; (8019d0c <tcp_receive+0x5e8>)
 8019cb6:	685b      	ldr	r3, [r3, #4]
 8019cb8:	891b      	ldrh	r3, [r3, #8]
 8019cba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019cbe:	429a      	cmp	r2, r3
 8019cc0:	d906      	bls.n	8019cd0 <tcp_receive+0x5ac>
 8019cc2:	4b13      	ldr	r3, [pc, #76]	; (8019d10 <tcp_receive+0x5ec>)
 8019cc4:	f240 5297 	movw	r2, #1431	; 0x597
 8019cc8:	4915      	ldr	r1, [pc, #84]	; (8019d20 <tcp_receive+0x5fc>)
 8019cca:	4813      	ldr	r0, [pc, #76]	; (8019d18 <tcp_receive+0x5f4>)
 8019ccc:	f005 f9aa 	bl	801f024 <iprintf>
      inseg.len -= off;
 8019cd0:	4b0e      	ldr	r3, [pc, #56]	; (8019d0c <tcp_receive+0x5e8>)
 8019cd2:	891a      	ldrh	r2, [r3, #8]
 8019cd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019cd8:	1ad3      	subs	r3, r2, r3
 8019cda:	b29a      	uxth	r2, r3
 8019cdc:	4b0b      	ldr	r3, [pc, #44]	; (8019d0c <tcp_receive+0x5e8>)
 8019cde:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019ce0:	4b0a      	ldr	r3, [pc, #40]	; (8019d0c <tcp_receive+0x5e8>)
 8019ce2:	685b      	ldr	r3, [r3, #4]
 8019ce4:	891a      	ldrh	r2, [r3, #8]
 8019ce6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019cea:	1ad3      	subs	r3, r2, r3
 8019cec:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019cee:	e029      	b.n	8019d44 <tcp_receive+0x620>
 8019cf0:	08025dd8 	.word	0x08025dd8
 8019cf4:	08025de0 	.word	0x08025de0
 8019cf8:	24005250 	.word	0x24005250
 8019cfc:	2400524c 	.word	0x2400524c
 8019d00:	24008a28 	.word	0x24008a28
 8019d04:	24005252 	.word	0x24005252
 8019d08:	24005248 	.word	0x24005248
 8019d0c:	24005228 	.word	0x24005228
 8019d10:	08025a44 	.word	0x08025a44
 8019d14:	08025de8 	.word	0x08025de8
 8019d18:	08025abc 	.word	0x08025abc
 8019d1c:	08025df8 	.word	0x08025df8
 8019d20:	08025e08 	.word	0x08025e08
        off -= p->len;
 8019d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d26:	895b      	ldrh	r3, [r3, #10]
 8019d28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d2c:	1ad3      	subs	r3, r2, r3
 8019d2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019d36:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d46:	895b      	ldrh	r3, [r3, #10]
 8019d48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d4c:	429a      	cmp	r2, r3
 8019d4e:	d8e9      	bhi.n	8019d24 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d54:	4619      	mov	r1, r3
 8019d56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019d58:	f7fb ff28 	bl	8015bac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d60:	4a91      	ldr	r2, [pc, #580]	; (8019fa8 <tcp_receive+0x884>)
 8019d62:	6013      	str	r3, [r2, #0]
 8019d64:	4b91      	ldr	r3, [pc, #580]	; (8019fac <tcp_receive+0x888>)
 8019d66:	68db      	ldr	r3, [r3, #12]
 8019d68:	4a8f      	ldr	r2, [pc, #572]	; (8019fa8 <tcp_receive+0x884>)
 8019d6a:	6812      	ldr	r2, [r2, #0]
 8019d6c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019d6e:	e00d      	b.n	8019d8c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019d70:	4b8d      	ldr	r3, [pc, #564]	; (8019fa8 <tcp_receive+0x884>)
 8019d72:	681a      	ldr	r2, [r3, #0]
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d78:	1ad3      	subs	r3, r2, r3
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	da06      	bge.n	8019d8c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	8b5b      	ldrh	r3, [r3, #26]
 8019d82:	f043 0302 	orr.w	r3, r3, #2
 8019d86:	b29a      	uxth	r2, r3
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019d8c:	4b86      	ldr	r3, [pc, #536]	; (8019fa8 <tcp_receive+0x884>)
 8019d8e:	681a      	ldr	r2, [r3, #0]
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d94:	1ad3      	subs	r3, r2, r3
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	f2c0 842a 	blt.w	801a5f0 <tcp_receive+0xecc>
 8019d9c:	4b82      	ldr	r3, [pc, #520]	; (8019fa8 <tcp_receive+0x884>)
 8019d9e:	681a      	ldr	r2, [r3, #0]
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da4:	6879      	ldr	r1, [r7, #4]
 8019da6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019da8:	440b      	add	r3, r1
 8019daa:	1ad3      	subs	r3, r2, r3
 8019dac:	3301      	adds	r3, #1
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	f300 841e 	bgt.w	801a5f0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019db8:	4b7b      	ldr	r3, [pc, #492]	; (8019fa8 <tcp_receive+0x884>)
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	429a      	cmp	r2, r3
 8019dbe:	f040 829a 	bne.w	801a2f6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019dc2:	4b7a      	ldr	r3, [pc, #488]	; (8019fac <tcp_receive+0x888>)
 8019dc4:	891c      	ldrh	r4, [r3, #8]
 8019dc6:	4b79      	ldr	r3, [pc, #484]	; (8019fac <tcp_receive+0x888>)
 8019dc8:	68db      	ldr	r3, [r3, #12]
 8019dca:	899b      	ldrh	r3, [r3, #12]
 8019dcc:	b29b      	uxth	r3, r3
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7f8 f876 	bl	8011ec0 <lwip_htons>
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	b2db      	uxtb	r3, r3
 8019dd8:	f003 0303 	and.w	r3, r3, #3
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d001      	beq.n	8019de4 <tcp_receive+0x6c0>
 8019de0:	2301      	movs	r3, #1
 8019de2:	e000      	b.n	8019de6 <tcp_receive+0x6c2>
 8019de4:	2300      	movs	r3, #0
 8019de6:	4423      	add	r3, r4
 8019de8:	b29a      	uxth	r2, r3
 8019dea:	4b71      	ldr	r3, [pc, #452]	; (8019fb0 <tcp_receive+0x88c>)
 8019dec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019df2:	4b6f      	ldr	r3, [pc, #444]	; (8019fb0 <tcp_receive+0x88c>)
 8019df4:	881b      	ldrh	r3, [r3, #0]
 8019df6:	429a      	cmp	r2, r3
 8019df8:	d275      	bcs.n	8019ee6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019dfa:	4b6c      	ldr	r3, [pc, #432]	; (8019fac <tcp_receive+0x888>)
 8019dfc:	68db      	ldr	r3, [r3, #12]
 8019dfe:	899b      	ldrh	r3, [r3, #12]
 8019e00:	b29b      	uxth	r3, r3
 8019e02:	4618      	mov	r0, r3
 8019e04:	f7f8 f85c 	bl	8011ec0 <lwip_htons>
 8019e08:	4603      	mov	r3, r0
 8019e0a:	b2db      	uxtb	r3, r3
 8019e0c:	f003 0301 	and.w	r3, r3, #1
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d01f      	beq.n	8019e54 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019e14:	4b65      	ldr	r3, [pc, #404]	; (8019fac <tcp_receive+0x888>)
 8019e16:	68db      	ldr	r3, [r3, #12]
 8019e18:	899b      	ldrh	r3, [r3, #12]
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	b21b      	sxth	r3, r3
 8019e1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019e22:	b21c      	sxth	r4, r3
 8019e24:	4b61      	ldr	r3, [pc, #388]	; (8019fac <tcp_receive+0x888>)
 8019e26:	68db      	ldr	r3, [r3, #12]
 8019e28:	899b      	ldrh	r3, [r3, #12]
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7f8 f847 	bl	8011ec0 <lwip_htons>
 8019e32:	4603      	mov	r3, r0
 8019e34:	b2db      	uxtb	r3, r3
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7f8 f83e 	bl	8011ec0 <lwip_htons>
 8019e44:	4603      	mov	r3, r0
 8019e46:	b21b      	sxth	r3, r3
 8019e48:	4323      	orrs	r3, r4
 8019e4a:	b21a      	sxth	r2, r3
 8019e4c:	4b57      	ldr	r3, [pc, #348]	; (8019fac <tcp_receive+0x888>)
 8019e4e:	68db      	ldr	r3, [r3, #12]
 8019e50:	b292      	uxth	r2, r2
 8019e52:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019e58:	4b54      	ldr	r3, [pc, #336]	; (8019fac <tcp_receive+0x888>)
 8019e5a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019e5c:	4b53      	ldr	r3, [pc, #332]	; (8019fac <tcp_receive+0x888>)
 8019e5e:	68db      	ldr	r3, [r3, #12]
 8019e60:	899b      	ldrh	r3, [r3, #12]
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7f8 f82b 	bl	8011ec0 <lwip_htons>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	b2db      	uxtb	r3, r3
 8019e6e:	f003 0302 	and.w	r3, r3, #2
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d005      	beq.n	8019e82 <tcp_receive+0x75e>
            inseg.len -= 1;
 8019e76:	4b4d      	ldr	r3, [pc, #308]	; (8019fac <tcp_receive+0x888>)
 8019e78:	891b      	ldrh	r3, [r3, #8]
 8019e7a:	3b01      	subs	r3, #1
 8019e7c:	b29a      	uxth	r2, r3
 8019e7e:	4b4b      	ldr	r3, [pc, #300]	; (8019fac <tcp_receive+0x888>)
 8019e80:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019e82:	4b4a      	ldr	r3, [pc, #296]	; (8019fac <tcp_receive+0x888>)
 8019e84:	685b      	ldr	r3, [r3, #4]
 8019e86:	4a49      	ldr	r2, [pc, #292]	; (8019fac <tcp_receive+0x888>)
 8019e88:	8912      	ldrh	r2, [r2, #8]
 8019e8a:	4611      	mov	r1, r2
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f7fb fd8d 	bl	80159ac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019e92:	4b46      	ldr	r3, [pc, #280]	; (8019fac <tcp_receive+0x888>)
 8019e94:	891c      	ldrh	r4, [r3, #8]
 8019e96:	4b45      	ldr	r3, [pc, #276]	; (8019fac <tcp_receive+0x888>)
 8019e98:	68db      	ldr	r3, [r3, #12]
 8019e9a:	899b      	ldrh	r3, [r3, #12]
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f7f8 f80e 	bl	8011ec0 <lwip_htons>
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	b2db      	uxtb	r3, r3
 8019ea8:	f003 0303 	and.w	r3, r3, #3
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d001      	beq.n	8019eb4 <tcp_receive+0x790>
 8019eb0:	2301      	movs	r3, #1
 8019eb2:	e000      	b.n	8019eb6 <tcp_receive+0x792>
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	4423      	add	r3, r4
 8019eb8:	b29a      	uxth	r2, r3
 8019eba:	4b3d      	ldr	r3, [pc, #244]	; (8019fb0 <tcp_receive+0x88c>)
 8019ebc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019ebe:	4b3c      	ldr	r3, [pc, #240]	; (8019fb0 <tcp_receive+0x88c>)
 8019ec0:	881b      	ldrh	r3, [r3, #0]
 8019ec2:	461a      	mov	r2, r3
 8019ec4:	4b38      	ldr	r3, [pc, #224]	; (8019fa8 <tcp_receive+0x884>)
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	441a      	add	r2, r3
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ece:	6879      	ldr	r1, [r7, #4]
 8019ed0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019ed2:	440b      	add	r3, r1
 8019ed4:	429a      	cmp	r2, r3
 8019ed6:	d006      	beq.n	8019ee6 <tcp_receive+0x7c2>
 8019ed8:	4b36      	ldr	r3, [pc, #216]	; (8019fb4 <tcp_receive+0x890>)
 8019eda:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019ede:	4936      	ldr	r1, [pc, #216]	; (8019fb8 <tcp_receive+0x894>)
 8019ee0:	4836      	ldr	r0, [pc, #216]	; (8019fbc <tcp_receive+0x898>)
 8019ee2:	f005 f89f 	bl	801f024 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f000 80e7 	beq.w	801a0be <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019ef0:	4b2e      	ldr	r3, [pc, #184]	; (8019fac <tcp_receive+0x888>)
 8019ef2:	68db      	ldr	r3, [r3, #12]
 8019ef4:	899b      	ldrh	r3, [r3, #12]
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	4618      	mov	r0, r3
 8019efa:	f7f7 ffe1 	bl	8011ec0 <lwip_htons>
 8019efe:	4603      	mov	r3, r0
 8019f00:	b2db      	uxtb	r3, r3
 8019f02:	f003 0301 	and.w	r3, r3, #1
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d010      	beq.n	8019f2c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019f0a:	e00a      	b.n	8019f22 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f10:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f16:	681a      	ldr	r2, [r3, #0]
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019f1c:	68f8      	ldr	r0, [r7, #12]
 8019f1e:	f7fd fcc8 	bl	80178b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d1f0      	bne.n	8019f0c <tcp_receive+0x7e8>
 8019f2a:	e0c8      	b.n	801a0be <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f30:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019f32:	e052      	b.n	8019fda <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f36:	68db      	ldr	r3, [r3, #12]
 8019f38:	899b      	ldrh	r3, [r3, #12]
 8019f3a:	b29b      	uxth	r3, r3
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	f7f7 ffbf 	bl	8011ec0 <lwip_htons>
 8019f42:	4603      	mov	r3, r0
 8019f44:	b2db      	uxtb	r3, r3
 8019f46:	f003 0301 	and.w	r3, r3, #1
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d03d      	beq.n	8019fca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019f4e:	4b17      	ldr	r3, [pc, #92]	; (8019fac <tcp_receive+0x888>)
 8019f50:	68db      	ldr	r3, [r3, #12]
 8019f52:	899b      	ldrh	r3, [r3, #12]
 8019f54:	b29b      	uxth	r3, r3
 8019f56:	4618      	mov	r0, r3
 8019f58:	f7f7 ffb2 	bl	8011ec0 <lwip_htons>
 8019f5c:	4603      	mov	r3, r0
 8019f5e:	b2db      	uxtb	r3, r3
 8019f60:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d130      	bne.n	8019fca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019f68:	4b10      	ldr	r3, [pc, #64]	; (8019fac <tcp_receive+0x888>)
 8019f6a:	68db      	ldr	r3, [r3, #12]
 8019f6c:	899b      	ldrh	r3, [r3, #12]
 8019f6e:	b29c      	uxth	r4, r3
 8019f70:	2001      	movs	r0, #1
 8019f72:	f7f7 ffa5 	bl	8011ec0 <lwip_htons>
 8019f76:	4603      	mov	r3, r0
 8019f78:	461a      	mov	r2, r3
 8019f7a:	4b0c      	ldr	r3, [pc, #48]	; (8019fac <tcp_receive+0x888>)
 8019f7c:	68db      	ldr	r3, [r3, #12]
 8019f7e:	4322      	orrs	r2, r4
 8019f80:	b292      	uxth	r2, r2
 8019f82:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019f84:	4b09      	ldr	r3, [pc, #36]	; (8019fac <tcp_receive+0x888>)
 8019f86:	891c      	ldrh	r4, [r3, #8]
 8019f88:	4b08      	ldr	r3, [pc, #32]	; (8019fac <tcp_receive+0x888>)
 8019f8a:	68db      	ldr	r3, [r3, #12]
 8019f8c:	899b      	ldrh	r3, [r3, #12]
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	4618      	mov	r0, r3
 8019f92:	f7f7 ff95 	bl	8011ec0 <lwip_htons>
 8019f96:	4603      	mov	r3, r0
 8019f98:	b2db      	uxtb	r3, r3
 8019f9a:	f003 0303 	and.w	r3, r3, #3
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d00e      	beq.n	8019fc0 <tcp_receive+0x89c>
 8019fa2:	2301      	movs	r3, #1
 8019fa4:	e00d      	b.n	8019fc2 <tcp_receive+0x89e>
 8019fa6:	bf00      	nop
 8019fa8:	24005248 	.word	0x24005248
 8019fac:	24005228 	.word	0x24005228
 8019fb0:	24005252 	.word	0x24005252
 8019fb4:	08025a44 	.word	0x08025a44
 8019fb8:	08025e18 	.word	0x08025e18
 8019fbc:	08025abc 	.word	0x08025abc
 8019fc0:	2300      	movs	r3, #0
 8019fc2:	4423      	add	r3, r4
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	4b98      	ldr	r3, [pc, #608]	; (801a228 <tcp_receive+0xb04>)
 8019fc8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8019fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fcc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8019fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8019fd4:	6938      	ldr	r0, [r7, #16]
 8019fd6:	f7fd fc6c 	bl	80178b2 <tcp_seg_free>
            while (next &&
 8019fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d00e      	beq.n	8019ffe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019fe0:	4b91      	ldr	r3, [pc, #580]	; (801a228 <tcp_receive+0xb04>)
 8019fe2:	881b      	ldrh	r3, [r3, #0]
 8019fe4:	461a      	mov	r2, r3
 8019fe6:	4b91      	ldr	r3, [pc, #580]	; (801a22c <tcp_receive+0xb08>)
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	441a      	add	r2, r3
 8019fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fee:	68db      	ldr	r3, [r3, #12]
 8019ff0:	685b      	ldr	r3, [r3, #4]
 8019ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8019ff4:	8909      	ldrh	r1, [r1, #8]
 8019ff6:	440b      	add	r3, r1
 8019ff8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	da9a      	bge.n	8019f34 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a000:	2b00      	cmp	r3, #0
 801a002:	d059      	beq.n	801a0b8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801a004:	4b88      	ldr	r3, [pc, #544]	; (801a228 <tcp_receive+0xb04>)
 801a006:	881b      	ldrh	r3, [r3, #0]
 801a008:	461a      	mov	r2, r3
 801a00a:	4b88      	ldr	r3, [pc, #544]	; (801a22c <tcp_receive+0xb08>)
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	441a      	add	r2, r3
 801a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a012:	68db      	ldr	r3, [r3, #12]
 801a014:	685b      	ldr	r3, [r3, #4]
 801a016:	1ad3      	subs	r3, r2, r3
            if (next &&
 801a018:	2b00      	cmp	r3, #0
 801a01a:	dd4d      	ble.n	801a0b8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a01e:	68db      	ldr	r3, [r3, #12]
 801a020:	685b      	ldr	r3, [r3, #4]
 801a022:	b29a      	uxth	r2, r3
 801a024:	4b81      	ldr	r3, [pc, #516]	; (801a22c <tcp_receive+0xb08>)
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	b29b      	uxth	r3, r3
 801a02a:	1ad3      	subs	r3, r2, r3
 801a02c:	b29a      	uxth	r2, r3
 801a02e:	4b80      	ldr	r3, [pc, #512]	; (801a230 <tcp_receive+0xb0c>)
 801a030:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a032:	4b7f      	ldr	r3, [pc, #508]	; (801a230 <tcp_receive+0xb0c>)
 801a034:	68db      	ldr	r3, [r3, #12]
 801a036:	899b      	ldrh	r3, [r3, #12]
 801a038:	b29b      	uxth	r3, r3
 801a03a:	4618      	mov	r0, r3
 801a03c:	f7f7 ff40 	bl	8011ec0 <lwip_htons>
 801a040:	4603      	mov	r3, r0
 801a042:	b2db      	uxtb	r3, r3
 801a044:	f003 0302 	and.w	r3, r3, #2
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d005      	beq.n	801a058 <tcp_receive+0x934>
                inseg.len -= 1;
 801a04c:	4b78      	ldr	r3, [pc, #480]	; (801a230 <tcp_receive+0xb0c>)
 801a04e:	891b      	ldrh	r3, [r3, #8]
 801a050:	3b01      	subs	r3, #1
 801a052:	b29a      	uxth	r2, r3
 801a054:	4b76      	ldr	r3, [pc, #472]	; (801a230 <tcp_receive+0xb0c>)
 801a056:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a058:	4b75      	ldr	r3, [pc, #468]	; (801a230 <tcp_receive+0xb0c>)
 801a05a:	685b      	ldr	r3, [r3, #4]
 801a05c:	4a74      	ldr	r2, [pc, #464]	; (801a230 <tcp_receive+0xb0c>)
 801a05e:	8912      	ldrh	r2, [r2, #8]
 801a060:	4611      	mov	r1, r2
 801a062:	4618      	mov	r0, r3
 801a064:	f7fb fca2 	bl	80159ac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a068:	4b71      	ldr	r3, [pc, #452]	; (801a230 <tcp_receive+0xb0c>)
 801a06a:	891c      	ldrh	r4, [r3, #8]
 801a06c:	4b70      	ldr	r3, [pc, #448]	; (801a230 <tcp_receive+0xb0c>)
 801a06e:	68db      	ldr	r3, [r3, #12]
 801a070:	899b      	ldrh	r3, [r3, #12]
 801a072:	b29b      	uxth	r3, r3
 801a074:	4618      	mov	r0, r3
 801a076:	f7f7 ff23 	bl	8011ec0 <lwip_htons>
 801a07a:	4603      	mov	r3, r0
 801a07c:	b2db      	uxtb	r3, r3
 801a07e:	f003 0303 	and.w	r3, r3, #3
 801a082:	2b00      	cmp	r3, #0
 801a084:	d001      	beq.n	801a08a <tcp_receive+0x966>
 801a086:	2301      	movs	r3, #1
 801a088:	e000      	b.n	801a08c <tcp_receive+0x968>
 801a08a:	2300      	movs	r3, #0
 801a08c:	4423      	add	r3, r4
 801a08e:	b29a      	uxth	r2, r3
 801a090:	4b65      	ldr	r3, [pc, #404]	; (801a228 <tcp_receive+0xb04>)
 801a092:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a094:	4b64      	ldr	r3, [pc, #400]	; (801a228 <tcp_receive+0xb04>)
 801a096:	881b      	ldrh	r3, [r3, #0]
 801a098:	461a      	mov	r2, r3
 801a09a:	4b64      	ldr	r3, [pc, #400]	; (801a22c <tcp_receive+0xb08>)
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	441a      	add	r2, r3
 801a0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0a2:	68db      	ldr	r3, [r3, #12]
 801a0a4:	685b      	ldr	r3, [r3, #4]
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	d006      	beq.n	801a0b8 <tcp_receive+0x994>
 801a0aa:	4b62      	ldr	r3, [pc, #392]	; (801a234 <tcp_receive+0xb10>)
 801a0ac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801a0b0:	4961      	ldr	r1, [pc, #388]	; (801a238 <tcp_receive+0xb14>)
 801a0b2:	4862      	ldr	r0, [pc, #392]	; (801a23c <tcp_receive+0xb18>)
 801a0b4:	f004 ffb6 	bl	801f024 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a0bc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a0be:	4b5a      	ldr	r3, [pc, #360]	; (801a228 <tcp_receive+0xb04>)
 801a0c0:	881b      	ldrh	r3, [r3, #0]
 801a0c2:	461a      	mov	r2, r3
 801a0c4:	4b59      	ldr	r3, [pc, #356]	; (801a22c <tcp_receive+0xb08>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	441a      	add	r2, r3
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a0d2:	4b55      	ldr	r3, [pc, #340]	; (801a228 <tcp_receive+0xb04>)
 801a0d4:	881b      	ldrh	r3, [r3, #0]
 801a0d6:	429a      	cmp	r2, r3
 801a0d8:	d206      	bcs.n	801a0e8 <tcp_receive+0x9c4>
 801a0da:	4b56      	ldr	r3, [pc, #344]	; (801a234 <tcp_receive+0xb10>)
 801a0dc:	f240 6207 	movw	r2, #1543	; 0x607
 801a0e0:	4957      	ldr	r1, [pc, #348]	; (801a240 <tcp_receive+0xb1c>)
 801a0e2:	4856      	ldr	r0, [pc, #344]	; (801a23c <tcp_receive+0xb18>)
 801a0e4:	f004 ff9e 	bl	801f024 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a0ec:	4b4e      	ldr	r3, [pc, #312]	; (801a228 <tcp_receive+0xb04>)
 801a0ee:	881b      	ldrh	r3, [r3, #0]
 801a0f0:	1ad3      	subs	r3, r2, r3
 801a0f2:	b29a      	uxth	r2, r3
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f7fc fd9d 	bl	8016c38 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a0fe:	4b4c      	ldr	r3, [pc, #304]	; (801a230 <tcp_receive+0xb0c>)
 801a100:	685b      	ldr	r3, [r3, #4]
 801a102:	891b      	ldrh	r3, [r3, #8]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d006      	beq.n	801a116 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801a108:	4b49      	ldr	r3, [pc, #292]	; (801a230 <tcp_receive+0xb0c>)
 801a10a:	685b      	ldr	r3, [r3, #4]
 801a10c:	4a4d      	ldr	r2, [pc, #308]	; (801a244 <tcp_receive+0xb20>)
 801a10e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a110:	4b47      	ldr	r3, [pc, #284]	; (801a230 <tcp_receive+0xb0c>)
 801a112:	2200      	movs	r2, #0
 801a114:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a116:	4b46      	ldr	r3, [pc, #280]	; (801a230 <tcp_receive+0xb0c>)
 801a118:	68db      	ldr	r3, [r3, #12]
 801a11a:	899b      	ldrh	r3, [r3, #12]
 801a11c:	b29b      	uxth	r3, r3
 801a11e:	4618      	mov	r0, r3
 801a120:	f7f7 fece 	bl	8011ec0 <lwip_htons>
 801a124:	4603      	mov	r3, r0
 801a126:	b2db      	uxtb	r3, r3
 801a128:	f003 0301 	and.w	r3, r3, #1
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	f000 80b8 	beq.w	801a2a2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a132:	4b45      	ldr	r3, [pc, #276]	; (801a248 <tcp_receive+0xb24>)
 801a134:	781b      	ldrb	r3, [r3, #0]
 801a136:	f043 0320 	orr.w	r3, r3, #32
 801a13a:	b2da      	uxtb	r2, r3
 801a13c:	4b42      	ldr	r3, [pc, #264]	; (801a248 <tcp_receive+0xb24>)
 801a13e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a140:	e0af      	b.n	801a2a2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a146:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a14c:	68db      	ldr	r3, [r3, #12]
 801a14e:	685b      	ldr	r3, [r3, #4]
 801a150:	4a36      	ldr	r2, [pc, #216]	; (801a22c <tcp_receive+0xb08>)
 801a152:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a154:	68bb      	ldr	r3, [r7, #8]
 801a156:	891b      	ldrh	r3, [r3, #8]
 801a158:	461c      	mov	r4, r3
 801a15a:	68bb      	ldr	r3, [r7, #8]
 801a15c:	68db      	ldr	r3, [r3, #12]
 801a15e:	899b      	ldrh	r3, [r3, #12]
 801a160:	b29b      	uxth	r3, r3
 801a162:	4618      	mov	r0, r3
 801a164:	f7f7 feac 	bl	8011ec0 <lwip_htons>
 801a168:	4603      	mov	r3, r0
 801a16a:	b2db      	uxtb	r3, r3
 801a16c:	f003 0303 	and.w	r3, r3, #3
 801a170:	2b00      	cmp	r3, #0
 801a172:	d001      	beq.n	801a178 <tcp_receive+0xa54>
 801a174:	2301      	movs	r3, #1
 801a176:	e000      	b.n	801a17a <tcp_receive+0xa56>
 801a178:	2300      	movs	r3, #0
 801a17a:	191a      	adds	r2, r3, r4
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a180:	441a      	add	r2, r3
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a18a:	461c      	mov	r4, r3
 801a18c:	68bb      	ldr	r3, [r7, #8]
 801a18e:	891b      	ldrh	r3, [r3, #8]
 801a190:	461d      	mov	r5, r3
 801a192:	68bb      	ldr	r3, [r7, #8]
 801a194:	68db      	ldr	r3, [r3, #12]
 801a196:	899b      	ldrh	r3, [r3, #12]
 801a198:	b29b      	uxth	r3, r3
 801a19a:	4618      	mov	r0, r3
 801a19c:	f7f7 fe90 	bl	8011ec0 <lwip_htons>
 801a1a0:	4603      	mov	r3, r0
 801a1a2:	b2db      	uxtb	r3, r3
 801a1a4:	f003 0303 	and.w	r3, r3, #3
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d001      	beq.n	801a1b0 <tcp_receive+0xa8c>
 801a1ac:	2301      	movs	r3, #1
 801a1ae:	e000      	b.n	801a1b2 <tcp_receive+0xa8e>
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	442b      	add	r3, r5
 801a1b4:	429c      	cmp	r4, r3
 801a1b6:	d206      	bcs.n	801a1c6 <tcp_receive+0xaa2>
 801a1b8:	4b1e      	ldr	r3, [pc, #120]	; (801a234 <tcp_receive+0xb10>)
 801a1ba:	f240 622b 	movw	r2, #1579	; 0x62b
 801a1be:	4923      	ldr	r1, [pc, #140]	; (801a24c <tcp_receive+0xb28>)
 801a1c0:	481e      	ldr	r0, [pc, #120]	; (801a23c <tcp_receive+0xb18>)
 801a1c2:	f004 ff2f 	bl	801f024 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a1c6:	68bb      	ldr	r3, [r7, #8]
 801a1c8:	891b      	ldrh	r3, [r3, #8]
 801a1ca:	461c      	mov	r4, r3
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	68db      	ldr	r3, [r3, #12]
 801a1d0:	899b      	ldrh	r3, [r3, #12]
 801a1d2:	b29b      	uxth	r3, r3
 801a1d4:	4618      	mov	r0, r3
 801a1d6:	f7f7 fe73 	bl	8011ec0 <lwip_htons>
 801a1da:	4603      	mov	r3, r0
 801a1dc:	b2db      	uxtb	r3, r3
 801a1de:	f003 0303 	and.w	r3, r3, #3
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d001      	beq.n	801a1ea <tcp_receive+0xac6>
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	e000      	b.n	801a1ec <tcp_receive+0xac8>
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	1919      	adds	r1, r3, r4
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a1f2:	b28b      	uxth	r3, r1
 801a1f4:	1ad3      	subs	r3, r2, r3
 801a1f6:	b29a      	uxth	r2, r3
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a1fc:	6878      	ldr	r0, [r7, #4]
 801a1fe:	f7fc fd1b 	bl	8016c38 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a202:	68bb      	ldr	r3, [r7, #8]
 801a204:	685b      	ldr	r3, [r3, #4]
 801a206:	891b      	ldrh	r3, [r3, #8]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d028      	beq.n	801a25e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a20c:	4b0d      	ldr	r3, [pc, #52]	; (801a244 <tcp_receive+0xb20>)
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d01d      	beq.n	801a250 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801a214:	4b0b      	ldr	r3, [pc, #44]	; (801a244 <tcp_receive+0xb20>)
 801a216:	681a      	ldr	r2, [r3, #0]
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	685b      	ldr	r3, [r3, #4]
 801a21c:	4619      	mov	r1, r3
 801a21e:	4610      	mov	r0, r2
 801a220:	f7fb fe0c 	bl	8015e3c <pbuf_cat>
 801a224:	e018      	b.n	801a258 <tcp_receive+0xb34>
 801a226:	bf00      	nop
 801a228:	24005252 	.word	0x24005252
 801a22c:	24005248 	.word	0x24005248
 801a230:	24005228 	.word	0x24005228
 801a234:	08025a44 	.word	0x08025a44
 801a238:	08025e50 	.word	0x08025e50
 801a23c:	08025abc 	.word	0x08025abc
 801a240:	08025e8c 	.word	0x08025e8c
 801a244:	24005258 	.word	0x24005258
 801a248:	24005255 	.word	0x24005255
 801a24c:	08025eac 	.word	0x08025eac
            } else {
              recv_data = cseg->p;
 801a250:	68bb      	ldr	r3, [r7, #8]
 801a252:	685b      	ldr	r3, [r3, #4]
 801a254:	4a70      	ldr	r2, [pc, #448]	; (801a418 <tcp_receive+0xcf4>)
 801a256:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	2200      	movs	r2, #0
 801a25c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a25e:	68bb      	ldr	r3, [r7, #8]
 801a260:	68db      	ldr	r3, [r3, #12]
 801a262:	899b      	ldrh	r3, [r3, #12]
 801a264:	b29b      	uxth	r3, r3
 801a266:	4618      	mov	r0, r3
 801a268:	f7f7 fe2a 	bl	8011ec0 <lwip_htons>
 801a26c:	4603      	mov	r3, r0
 801a26e:	b2db      	uxtb	r3, r3
 801a270:	f003 0301 	and.w	r3, r3, #1
 801a274:	2b00      	cmp	r3, #0
 801a276:	d00d      	beq.n	801a294 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a278:	4b68      	ldr	r3, [pc, #416]	; (801a41c <tcp_receive+0xcf8>)
 801a27a:	781b      	ldrb	r3, [r3, #0]
 801a27c:	f043 0320 	orr.w	r3, r3, #32
 801a280:	b2da      	uxtb	r2, r3
 801a282:	4b66      	ldr	r3, [pc, #408]	; (801a41c <tcp_receive+0xcf8>)
 801a284:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	7d1b      	ldrb	r3, [r3, #20]
 801a28a:	2b04      	cmp	r3, #4
 801a28c:	d102      	bne.n	801a294 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	2207      	movs	r2, #7
 801a292:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a294:	68bb      	ldr	r3, [r7, #8]
 801a296:	681a      	ldr	r2, [r3, #0]
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a29c:	68b8      	ldr	r0, [r7, #8]
 801a29e:	f7fd fb08 	bl	80178b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d008      	beq.n	801a2bc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2ae:	68db      	ldr	r3, [r3, #12]
 801a2b0:	685a      	ldr	r2, [r3, #4]
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	f43f af43 	beq.w	801a142 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	8b5b      	ldrh	r3, [r3, #26]
 801a2c0:	f003 0301 	and.w	r3, r3, #1
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d00e      	beq.n	801a2e6 <tcp_receive+0xbc2>
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	8b5b      	ldrh	r3, [r3, #26]
 801a2cc:	f023 0301 	bic.w	r3, r3, #1
 801a2d0:	b29a      	uxth	r2, r3
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	835a      	strh	r2, [r3, #26]
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	8b5b      	ldrh	r3, [r3, #26]
 801a2da:	f043 0302 	orr.w	r3, r3, #2
 801a2de:	b29a      	uxth	r2, r3
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a2e4:	e188      	b.n	801a5f8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	8b5b      	ldrh	r3, [r3, #26]
 801a2ea:	f043 0301 	orr.w	r3, r3, #1
 801a2ee:	b29a      	uxth	r2, r3
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a2f4:	e180      	b.n	801a5f8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d106      	bne.n	801a30c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a2fe:	4848      	ldr	r0, [pc, #288]	; (801a420 <tcp_receive+0xcfc>)
 801a300:	f7fd faf0 	bl	80178e4 <tcp_seg_copy>
 801a304:	4602      	mov	r2, r0
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	675a      	str	r2, [r3, #116]	; 0x74
 801a30a:	e16d      	b.n	801a5e8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a30c:	2300      	movs	r3, #0
 801a30e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a314:	63bb      	str	r3, [r7, #56]	; 0x38
 801a316:	e157      	b.n	801a5c8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a31a:	68db      	ldr	r3, [r3, #12]
 801a31c:	685a      	ldr	r2, [r3, #4]
 801a31e:	4b41      	ldr	r3, [pc, #260]	; (801a424 <tcp_receive+0xd00>)
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	429a      	cmp	r2, r3
 801a324:	d11d      	bne.n	801a362 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a326:	4b3e      	ldr	r3, [pc, #248]	; (801a420 <tcp_receive+0xcfc>)
 801a328:	891a      	ldrh	r2, [r3, #8]
 801a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a32c:	891b      	ldrh	r3, [r3, #8]
 801a32e:	429a      	cmp	r2, r3
 801a330:	f240 814f 	bls.w	801a5d2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a334:	483a      	ldr	r0, [pc, #232]	; (801a420 <tcp_receive+0xcfc>)
 801a336:	f7fd fad5 	bl	80178e4 <tcp_seg_copy>
 801a33a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a33c:	697b      	ldr	r3, [r7, #20]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	f000 8149 	beq.w	801a5d6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801a344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a346:	2b00      	cmp	r3, #0
 801a348:	d003      	beq.n	801a352 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a34c:	697a      	ldr	r2, [r7, #20]
 801a34e:	601a      	str	r2, [r3, #0]
 801a350:	e002      	b.n	801a358 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	697a      	ldr	r2, [r7, #20]
 801a356:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a358:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a35a:	6978      	ldr	r0, [r7, #20]
 801a35c:	f7ff f8de 	bl	801951c <tcp_oos_insert_segment>
                }
                break;
 801a360:	e139      	b.n	801a5d6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a364:	2b00      	cmp	r3, #0
 801a366:	d117      	bne.n	801a398 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a368:	4b2e      	ldr	r3, [pc, #184]	; (801a424 <tcp_receive+0xd00>)
 801a36a:	681a      	ldr	r2, [r3, #0]
 801a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a36e:	68db      	ldr	r3, [r3, #12]
 801a370:	685b      	ldr	r3, [r3, #4]
 801a372:	1ad3      	subs	r3, r2, r3
 801a374:	2b00      	cmp	r3, #0
 801a376:	da57      	bge.n	801a428 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a378:	4829      	ldr	r0, [pc, #164]	; (801a420 <tcp_receive+0xcfc>)
 801a37a:	f7fd fab3 	bl	80178e4 <tcp_seg_copy>
 801a37e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a380:	69bb      	ldr	r3, [r7, #24]
 801a382:	2b00      	cmp	r3, #0
 801a384:	f000 8129 	beq.w	801a5da <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	69ba      	ldr	r2, [r7, #24]
 801a38c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a38e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a390:	69b8      	ldr	r0, [r7, #24]
 801a392:	f7ff f8c3 	bl	801951c <tcp_oos_insert_segment>
                  }
                  break;
 801a396:	e120      	b.n	801a5da <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a398:	4b22      	ldr	r3, [pc, #136]	; (801a424 <tcp_receive+0xd00>)
 801a39a:	681a      	ldr	r2, [r3, #0]
 801a39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a39e:	68db      	ldr	r3, [r3, #12]
 801a3a0:	685b      	ldr	r3, [r3, #4]
 801a3a2:	1ad3      	subs	r3, r2, r3
 801a3a4:	3b01      	subs	r3, #1
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	db3e      	blt.n	801a428 <tcp_receive+0xd04>
 801a3aa:	4b1e      	ldr	r3, [pc, #120]	; (801a424 <tcp_receive+0xd00>)
 801a3ac:	681a      	ldr	r2, [r3, #0]
 801a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3b0:	68db      	ldr	r3, [r3, #12]
 801a3b2:	685b      	ldr	r3, [r3, #4]
 801a3b4:	1ad3      	subs	r3, r2, r3
 801a3b6:	3301      	adds	r3, #1
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	dc35      	bgt.n	801a428 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a3bc:	4818      	ldr	r0, [pc, #96]	; (801a420 <tcp_receive+0xcfc>)
 801a3be:	f7fd fa91 	bl	80178e4 <tcp_seg_copy>
 801a3c2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a3c4:	69fb      	ldr	r3, [r7, #28]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	f000 8109 	beq.w	801a5de <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3ce:	68db      	ldr	r3, [r3, #12]
 801a3d0:	685b      	ldr	r3, [r3, #4]
 801a3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a3d4:	8912      	ldrh	r2, [r2, #8]
 801a3d6:	441a      	add	r2, r3
 801a3d8:	4b12      	ldr	r3, [pc, #72]	; (801a424 <tcp_receive+0xd00>)
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	1ad3      	subs	r3, r2, r3
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	dd12      	ble.n	801a408 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a3e2:	4b10      	ldr	r3, [pc, #64]	; (801a424 <tcp_receive+0xd00>)
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	b29a      	uxth	r2, r3
 801a3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3ea:	68db      	ldr	r3, [r3, #12]
 801a3ec:	685b      	ldr	r3, [r3, #4]
 801a3ee:	b29b      	uxth	r3, r3
 801a3f0:	1ad3      	subs	r3, r2, r3
 801a3f2:	b29a      	uxth	r2, r3
 801a3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3fa:	685a      	ldr	r2, [r3, #4]
 801a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3fe:	891b      	ldrh	r3, [r3, #8]
 801a400:	4619      	mov	r1, r3
 801a402:	4610      	mov	r0, r2
 801a404:	f7fb fad2 	bl	80159ac <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a40a:	69fa      	ldr	r2, [r7, #28]
 801a40c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a40e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a410:	69f8      	ldr	r0, [r7, #28]
 801a412:	f7ff f883 	bl	801951c <tcp_oos_insert_segment>
                  }
                  break;
 801a416:	e0e2      	b.n	801a5de <tcp_receive+0xeba>
 801a418:	24005258 	.word	0x24005258
 801a41c:	24005255 	.word	0x24005255
 801a420:	24005228 	.word	0x24005228
 801a424:	24005248 	.word	0x24005248
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a42a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	2b00      	cmp	r3, #0
 801a432:	f040 80c6 	bne.w	801a5c2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a436:	4b80      	ldr	r3, [pc, #512]	; (801a638 <tcp_receive+0xf14>)
 801a438:	681a      	ldr	r2, [r3, #0]
 801a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a43c:	68db      	ldr	r3, [r3, #12]
 801a43e:	685b      	ldr	r3, [r3, #4]
 801a440:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a442:	2b00      	cmp	r3, #0
 801a444:	f340 80bd 	ble.w	801a5c2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a44a:	68db      	ldr	r3, [r3, #12]
 801a44c:	899b      	ldrh	r3, [r3, #12]
 801a44e:	b29b      	uxth	r3, r3
 801a450:	4618      	mov	r0, r3
 801a452:	f7f7 fd35 	bl	8011ec0 <lwip_htons>
 801a456:	4603      	mov	r3, r0
 801a458:	b2db      	uxtb	r3, r3
 801a45a:	f003 0301 	and.w	r3, r3, #1
 801a45e:	2b00      	cmp	r3, #0
 801a460:	f040 80bf 	bne.w	801a5e2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a464:	4875      	ldr	r0, [pc, #468]	; (801a63c <tcp_receive+0xf18>)
 801a466:	f7fd fa3d 	bl	80178e4 <tcp_seg_copy>
 801a46a:	4602      	mov	r2, r0
 801a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a46e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	2b00      	cmp	r3, #0
 801a476:	f000 80b6 	beq.w	801a5e6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a47c:	68db      	ldr	r3, [r3, #12]
 801a47e:	685b      	ldr	r3, [r3, #4]
 801a480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a482:	8912      	ldrh	r2, [r2, #8]
 801a484:	441a      	add	r2, r3
 801a486:	4b6c      	ldr	r3, [pc, #432]	; (801a638 <tcp_receive+0xf14>)
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	dd12      	ble.n	801a4b6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a490:	4b69      	ldr	r3, [pc, #420]	; (801a638 <tcp_receive+0xf14>)
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	b29a      	uxth	r2, r3
 801a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a498:	68db      	ldr	r3, [r3, #12]
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	b29b      	uxth	r3, r3
 801a49e:	1ad3      	subs	r3, r2, r3
 801a4a0:	b29a      	uxth	r2, r3
 801a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4a8:	685a      	ldr	r2, [r3, #4]
 801a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4ac:	891b      	ldrh	r3, [r3, #8]
 801a4ae:	4619      	mov	r1, r3
 801a4b0:	4610      	mov	r0, r2
 801a4b2:	f7fb fa7b 	bl	80159ac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a4b6:	4b62      	ldr	r3, [pc, #392]	; (801a640 <tcp_receive+0xf1c>)
 801a4b8:	881b      	ldrh	r3, [r3, #0]
 801a4ba:	461a      	mov	r2, r3
 801a4bc:	4b5e      	ldr	r3, [pc, #376]	; (801a638 <tcp_receive+0xf14>)
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	441a      	add	r2, r3
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4c6:	6879      	ldr	r1, [r7, #4]
 801a4c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a4ca:	440b      	add	r3, r1
 801a4cc:	1ad3      	subs	r3, r2, r3
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	f340 8089 	ble.w	801a5e6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	68db      	ldr	r3, [r3, #12]
 801a4da:	899b      	ldrh	r3, [r3, #12]
 801a4dc:	b29b      	uxth	r3, r3
 801a4de:	4618      	mov	r0, r3
 801a4e0:	f7f7 fcee 	bl	8011ec0 <lwip_htons>
 801a4e4:	4603      	mov	r3, r0
 801a4e6:	b2db      	uxtb	r3, r3
 801a4e8:	f003 0301 	and.w	r3, r3, #1
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d022      	beq.n	801a536 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	68db      	ldr	r3, [r3, #12]
 801a4f6:	899b      	ldrh	r3, [r3, #12]
 801a4f8:	b29b      	uxth	r3, r3
 801a4fa:	b21b      	sxth	r3, r3
 801a4fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a500:	b21c      	sxth	r4, r3
 801a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	68db      	ldr	r3, [r3, #12]
 801a508:	899b      	ldrh	r3, [r3, #12]
 801a50a:	b29b      	uxth	r3, r3
 801a50c:	4618      	mov	r0, r3
 801a50e:	f7f7 fcd7 	bl	8011ec0 <lwip_htons>
 801a512:	4603      	mov	r3, r0
 801a514:	b2db      	uxtb	r3, r3
 801a516:	b29b      	uxth	r3, r3
 801a518:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a51c:	b29b      	uxth	r3, r3
 801a51e:	4618      	mov	r0, r3
 801a520:	f7f7 fcce 	bl	8011ec0 <lwip_htons>
 801a524:	4603      	mov	r3, r0
 801a526:	b21b      	sxth	r3, r3
 801a528:	4323      	orrs	r3, r4
 801a52a:	b21a      	sxth	r2, r3
 801a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	68db      	ldr	r3, [r3, #12]
 801a532:	b292      	uxth	r2, r2
 801a534:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a53a:	b29a      	uxth	r2, r3
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a540:	4413      	add	r3, r2
 801a542:	b299      	uxth	r1, r3
 801a544:	4b3c      	ldr	r3, [pc, #240]	; (801a638 <tcp_receive+0xf14>)
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	b29a      	uxth	r2, r3
 801a54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	1a8a      	subs	r2, r1, r2
 801a550:	b292      	uxth	r2, r2
 801a552:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	685a      	ldr	r2, [r3, #4]
 801a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	891b      	ldrh	r3, [r3, #8]
 801a560:	4619      	mov	r1, r3
 801a562:	4610      	mov	r0, r2
 801a564:	f7fb fa22 	bl	80159ac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	891c      	ldrh	r4, [r3, #8]
 801a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	68db      	ldr	r3, [r3, #12]
 801a574:	899b      	ldrh	r3, [r3, #12]
 801a576:	b29b      	uxth	r3, r3
 801a578:	4618      	mov	r0, r3
 801a57a:	f7f7 fca1 	bl	8011ec0 <lwip_htons>
 801a57e:	4603      	mov	r3, r0
 801a580:	b2db      	uxtb	r3, r3
 801a582:	f003 0303 	and.w	r3, r3, #3
 801a586:	2b00      	cmp	r3, #0
 801a588:	d001      	beq.n	801a58e <tcp_receive+0xe6a>
 801a58a:	2301      	movs	r3, #1
 801a58c:	e000      	b.n	801a590 <tcp_receive+0xe6c>
 801a58e:	2300      	movs	r3, #0
 801a590:	4423      	add	r3, r4
 801a592:	b29a      	uxth	r2, r3
 801a594:	4b2a      	ldr	r3, [pc, #168]	; (801a640 <tcp_receive+0xf1c>)
 801a596:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a598:	4b29      	ldr	r3, [pc, #164]	; (801a640 <tcp_receive+0xf1c>)
 801a59a:	881b      	ldrh	r3, [r3, #0]
 801a59c:	461a      	mov	r2, r3
 801a59e:	4b26      	ldr	r3, [pc, #152]	; (801a638 <tcp_receive+0xf14>)
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	441a      	add	r2, r3
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5a8:	6879      	ldr	r1, [r7, #4]
 801a5aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a5ac:	440b      	add	r3, r1
 801a5ae:	429a      	cmp	r2, r3
 801a5b0:	d019      	beq.n	801a5e6 <tcp_receive+0xec2>
 801a5b2:	4b24      	ldr	r3, [pc, #144]	; (801a644 <tcp_receive+0xf20>)
 801a5b4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801a5b8:	4923      	ldr	r1, [pc, #140]	; (801a648 <tcp_receive+0xf24>)
 801a5ba:	4824      	ldr	r0, [pc, #144]	; (801a64c <tcp_receive+0xf28>)
 801a5bc:	f004 fd32 	bl	801f024 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a5c0:	e011      	b.n	801a5e6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	63bb      	str	r3, [r7, #56]	; 0x38
 801a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	f47f aea4 	bne.w	801a318 <tcp_receive+0xbf4>
 801a5d0:	e00a      	b.n	801a5e8 <tcp_receive+0xec4>
                break;
 801a5d2:	bf00      	nop
 801a5d4:	e008      	b.n	801a5e8 <tcp_receive+0xec4>
                break;
 801a5d6:	bf00      	nop
 801a5d8:	e006      	b.n	801a5e8 <tcp_receive+0xec4>
                  break;
 801a5da:	bf00      	nop
 801a5dc:	e004      	b.n	801a5e8 <tcp_receive+0xec4>
                  break;
 801a5de:	bf00      	nop
 801a5e0:	e002      	b.n	801a5e8 <tcp_receive+0xec4>
                  break;
 801a5e2:	bf00      	nop
 801a5e4:	e000      	b.n	801a5e8 <tcp_receive+0xec4>
                break;
 801a5e6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a5e8:	6878      	ldr	r0, [r7, #4]
 801a5ea:	f001 fe8b 	bl	801c304 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a5ee:	e003      	b.n	801a5f8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a5f0:	6878      	ldr	r0, [r7, #4]
 801a5f2:	f001 fe87 	bl	801c304 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a5f6:	e01a      	b.n	801a62e <tcp_receive+0xf0a>
 801a5f8:	e019      	b.n	801a62e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a5fa:	4b0f      	ldr	r3, [pc, #60]	; (801a638 <tcp_receive+0xf14>)
 801a5fc:	681a      	ldr	r2, [r3, #0]
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a602:	1ad3      	subs	r3, r2, r3
 801a604:	2b00      	cmp	r3, #0
 801a606:	db0a      	blt.n	801a61e <tcp_receive+0xefa>
 801a608:	4b0b      	ldr	r3, [pc, #44]	; (801a638 <tcp_receive+0xf14>)
 801a60a:	681a      	ldr	r2, [r3, #0]
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a610:	6879      	ldr	r1, [r7, #4]
 801a612:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a614:	440b      	add	r3, r1
 801a616:	1ad3      	subs	r3, r2, r3
 801a618:	3301      	adds	r3, #1
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	dd07      	ble.n	801a62e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	8b5b      	ldrh	r3, [r3, #26]
 801a622:	f043 0302 	orr.w	r3, r3, #2
 801a626:	b29a      	uxth	r2, r3
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a62c:	e7ff      	b.n	801a62e <tcp_receive+0xf0a>
 801a62e:	bf00      	nop
 801a630:	3750      	adds	r7, #80	; 0x50
 801a632:	46bd      	mov	sp, r7
 801a634:	bdb0      	pop	{r4, r5, r7, pc}
 801a636:	bf00      	nop
 801a638:	24005248 	.word	0x24005248
 801a63c:	24005228 	.word	0x24005228
 801a640:	24005252 	.word	0x24005252
 801a644:	08025a44 	.word	0x08025a44
 801a648:	08025e18 	.word	0x08025e18
 801a64c:	08025abc 	.word	0x08025abc

0801a650 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a650:	b480      	push	{r7}
 801a652:	b083      	sub	sp, #12
 801a654:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a656:	4b15      	ldr	r3, [pc, #84]	; (801a6ac <tcp_get_next_optbyte+0x5c>)
 801a658:	881b      	ldrh	r3, [r3, #0]
 801a65a:	1c5a      	adds	r2, r3, #1
 801a65c:	b291      	uxth	r1, r2
 801a65e:	4a13      	ldr	r2, [pc, #76]	; (801a6ac <tcp_get_next_optbyte+0x5c>)
 801a660:	8011      	strh	r1, [r2, #0]
 801a662:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a664:	4b12      	ldr	r3, [pc, #72]	; (801a6b0 <tcp_get_next_optbyte+0x60>)
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d004      	beq.n	801a676 <tcp_get_next_optbyte+0x26>
 801a66c:	4b11      	ldr	r3, [pc, #68]	; (801a6b4 <tcp_get_next_optbyte+0x64>)
 801a66e:	881b      	ldrh	r3, [r3, #0]
 801a670:	88fa      	ldrh	r2, [r7, #6]
 801a672:	429a      	cmp	r2, r3
 801a674:	d208      	bcs.n	801a688 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a676:	4b10      	ldr	r3, [pc, #64]	; (801a6b8 <tcp_get_next_optbyte+0x68>)
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	3314      	adds	r3, #20
 801a67c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a67e:	88fb      	ldrh	r3, [r7, #6]
 801a680:	683a      	ldr	r2, [r7, #0]
 801a682:	4413      	add	r3, r2
 801a684:	781b      	ldrb	r3, [r3, #0]
 801a686:	e00b      	b.n	801a6a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a688:	88fb      	ldrh	r3, [r7, #6]
 801a68a:	b2da      	uxtb	r2, r3
 801a68c:	4b09      	ldr	r3, [pc, #36]	; (801a6b4 <tcp_get_next_optbyte+0x64>)
 801a68e:	881b      	ldrh	r3, [r3, #0]
 801a690:	b2db      	uxtb	r3, r3
 801a692:	1ad3      	subs	r3, r2, r3
 801a694:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a696:	4b06      	ldr	r3, [pc, #24]	; (801a6b0 <tcp_get_next_optbyte+0x60>)
 801a698:	681a      	ldr	r2, [r3, #0]
 801a69a:	797b      	ldrb	r3, [r7, #5]
 801a69c:	4413      	add	r3, r2
 801a69e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	370c      	adds	r7, #12
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6aa:	4770      	bx	lr
 801a6ac:	24005244 	.word	0x24005244
 801a6b0:	24005240 	.word	0x24005240
 801a6b4:	2400523e 	.word	0x2400523e
 801a6b8:	24005238 	.word	0x24005238

0801a6bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b084      	sub	sp, #16
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d106      	bne.n	801a6d8 <tcp_parseopt+0x1c>
 801a6ca:	4b32      	ldr	r3, [pc, #200]	; (801a794 <tcp_parseopt+0xd8>)
 801a6cc:	f240 727d 	movw	r2, #1917	; 0x77d
 801a6d0:	4931      	ldr	r1, [pc, #196]	; (801a798 <tcp_parseopt+0xdc>)
 801a6d2:	4832      	ldr	r0, [pc, #200]	; (801a79c <tcp_parseopt+0xe0>)
 801a6d4:	f004 fca6 	bl	801f024 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a6d8:	4b31      	ldr	r3, [pc, #196]	; (801a7a0 <tcp_parseopt+0xe4>)
 801a6da:	881b      	ldrh	r3, [r3, #0]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d055      	beq.n	801a78c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a6e0:	4b30      	ldr	r3, [pc, #192]	; (801a7a4 <tcp_parseopt+0xe8>)
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	801a      	strh	r2, [r3, #0]
 801a6e6:	e045      	b.n	801a774 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801a6e8:	f7ff ffb2 	bl	801a650 <tcp_get_next_optbyte>
 801a6ec:	4603      	mov	r3, r0
 801a6ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a6f0:	7bfb      	ldrb	r3, [r7, #15]
 801a6f2:	2b02      	cmp	r3, #2
 801a6f4:	d006      	beq.n	801a704 <tcp_parseopt+0x48>
 801a6f6:	2b02      	cmp	r3, #2
 801a6f8:	dc2b      	bgt.n	801a752 <tcp_parseopt+0x96>
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d041      	beq.n	801a782 <tcp_parseopt+0xc6>
 801a6fe:	2b01      	cmp	r3, #1
 801a700:	d127      	bne.n	801a752 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801a702:	e037      	b.n	801a774 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a704:	f7ff ffa4 	bl	801a650 <tcp_get_next_optbyte>
 801a708:	4603      	mov	r3, r0
 801a70a:	2b04      	cmp	r3, #4
 801a70c:	d13b      	bne.n	801a786 <tcp_parseopt+0xca>
 801a70e:	4b25      	ldr	r3, [pc, #148]	; (801a7a4 <tcp_parseopt+0xe8>)
 801a710:	881b      	ldrh	r3, [r3, #0]
 801a712:	3301      	adds	r3, #1
 801a714:	4a22      	ldr	r2, [pc, #136]	; (801a7a0 <tcp_parseopt+0xe4>)
 801a716:	8812      	ldrh	r2, [r2, #0]
 801a718:	4293      	cmp	r3, r2
 801a71a:	da34      	bge.n	801a786 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a71c:	f7ff ff98 	bl	801a650 <tcp_get_next_optbyte>
 801a720:	4603      	mov	r3, r0
 801a722:	b29b      	uxth	r3, r3
 801a724:	021b      	lsls	r3, r3, #8
 801a726:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a728:	f7ff ff92 	bl	801a650 <tcp_get_next_optbyte>
 801a72c:	4603      	mov	r3, r0
 801a72e:	b29a      	uxth	r2, r3
 801a730:	89bb      	ldrh	r3, [r7, #12]
 801a732:	4313      	orrs	r3, r2
 801a734:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a736:	89bb      	ldrh	r3, [r7, #12]
 801a738:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a73c:	d804      	bhi.n	801a748 <tcp_parseopt+0x8c>
 801a73e:	89bb      	ldrh	r3, [r7, #12]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d001      	beq.n	801a748 <tcp_parseopt+0x8c>
 801a744:	89ba      	ldrh	r2, [r7, #12]
 801a746:	e001      	b.n	801a74c <tcp_parseopt+0x90>
 801a748:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a750:	e010      	b.n	801a774 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a752:	f7ff ff7d 	bl	801a650 <tcp_get_next_optbyte>
 801a756:	4603      	mov	r3, r0
 801a758:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a75a:	7afb      	ldrb	r3, [r7, #11]
 801a75c:	2b01      	cmp	r3, #1
 801a75e:	d914      	bls.n	801a78a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a760:	7afb      	ldrb	r3, [r7, #11]
 801a762:	b29a      	uxth	r2, r3
 801a764:	4b0f      	ldr	r3, [pc, #60]	; (801a7a4 <tcp_parseopt+0xe8>)
 801a766:	881b      	ldrh	r3, [r3, #0]
 801a768:	4413      	add	r3, r2
 801a76a:	b29b      	uxth	r3, r3
 801a76c:	3b02      	subs	r3, #2
 801a76e:	b29a      	uxth	r2, r3
 801a770:	4b0c      	ldr	r3, [pc, #48]	; (801a7a4 <tcp_parseopt+0xe8>)
 801a772:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a774:	4b0b      	ldr	r3, [pc, #44]	; (801a7a4 <tcp_parseopt+0xe8>)
 801a776:	881a      	ldrh	r2, [r3, #0]
 801a778:	4b09      	ldr	r3, [pc, #36]	; (801a7a0 <tcp_parseopt+0xe4>)
 801a77a:	881b      	ldrh	r3, [r3, #0]
 801a77c:	429a      	cmp	r2, r3
 801a77e:	d3b3      	bcc.n	801a6e8 <tcp_parseopt+0x2c>
 801a780:	e004      	b.n	801a78c <tcp_parseopt+0xd0>
          return;
 801a782:	bf00      	nop
 801a784:	e002      	b.n	801a78c <tcp_parseopt+0xd0>
            return;
 801a786:	bf00      	nop
 801a788:	e000      	b.n	801a78c <tcp_parseopt+0xd0>
            return;
 801a78a:	bf00      	nop
      }
    }
  }
}
 801a78c:	3710      	adds	r7, #16
 801a78e:	46bd      	mov	sp, r7
 801a790:	bd80      	pop	{r7, pc}
 801a792:	bf00      	nop
 801a794:	08025a44 	.word	0x08025a44
 801a798:	08025ed4 	.word	0x08025ed4
 801a79c:	08025abc 	.word	0x08025abc
 801a7a0:	2400523c 	.word	0x2400523c
 801a7a4:	24005244 	.word	0x24005244

0801a7a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a7a8:	b480      	push	{r7}
 801a7aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a7ac:	4b05      	ldr	r3, [pc, #20]	; (801a7c4 <tcp_trigger_input_pcb_close+0x1c>)
 801a7ae:	781b      	ldrb	r3, [r3, #0]
 801a7b0:	f043 0310 	orr.w	r3, r3, #16
 801a7b4:	b2da      	uxtb	r2, r3
 801a7b6:	4b03      	ldr	r3, [pc, #12]	; (801a7c4 <tcp_trigger_input_pcb_close+0x1c>)
 801a7b8:	701a      	strb	r2, [r3, #0]
}
 801a7ba:	bf00      	nop
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c2:	4770      	bx	lr
 801a7c4:	24005255 	.word	0x24005255

0801a7c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	b084      	sub	sp, #16
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	60f8      	str	r0, [r7, #12]
 801a7d0:	60b9      	str	r1, [r7, #8]
 801a7d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d00a      	beq.n	801a7f0 <tcp_route+0x28>
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	7a1b      	ldrb	r3, [r3, #8]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d006      	beq.n	801a7f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	7a1b      	ldrb	r3, [r3, #8]
 801a7e6:	4618      	mov	r0, r3
 801a7e8:	f7fa ff06 	bl	80155f8 <netif_get_by_index>
 801a7ec:	4603      	mov	r3, r0
 801a7ee:	e003      	b.n	801a7f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a7f0:	6878      	ldr	r0, [r7, #4]
 801a7f2:	f7f8 fe3b 	bl	801346c <ip4_route>
 801a7f6:	4603      	mov	r3, r0
  }
}
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	3710      	adds	r7, #16
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	bd80      	pop	{r7, pc}

0801a800 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a800:	b590      	push	{r4, r7, lr}
 801a802:	b087      	sub	sp, #28
 801a804:	af00      	add	r7, sp, #0
 801a806:	60f8      	str	r0, [r7, #12]
 801a808:	60b9      	str	r1, [r7, #8]
 801a80a:	603b      	str	r3, [r7, #0]
 801a80c:	4613      	mov	r3, r2
 801a80e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	2b00      	cmp	r3, #0
 801a814:	d105      	bne.n	801a822 <tcp_create_segment+0x22>
 801a816:	4b44      	ldr	r3, [pc, #272]	; (801a928 <tcp_create_segment+0x128>)
 801a818:	22a3      	movs	r2, #163	; 0xa3
 801a81a:	4944      	ldr	r1, [pc, #272]	; (801a92c <tcp_create_segment+0x12c>)
 801a81c:	4844      	ldr	r0, [pc, #272]	; (801a930 <tcp_create_segment+0x130>)
 801a81e:	f004 fc01 	bl	801f024 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a822:	68bb      	ldr	r3, [r7, #8]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d105      	bne.n	801a834 <tcp_create_segment+0x34>
 801a828:	4b3f      	ldr	r3, [pc, #252]	; (801a928 <tcp_create_segment+0x128>)
 801a82a:	22a4      	movs	r2, #164	; 0xa4
 801a82c:	4941      	ldr	r1, [pc, #260]	; (801a934 <tcp_create_segment+0x134>)
 801a82e:	4840      	ldr	r0, [pc, #256]	; (801a930 <tcp_create_segment+0x130>)
 801a830:	f004 fbf8 	bl	801f024 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a834:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a838:	009b      	lsls	r3, r3, #2
 801a83a:	b2db      	uxtb	r3, r3
 801a83c:	f003 0304 	and.w	r3, r3, #4
 801a840:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a842:	2003      	movs	r0, #3
 801a844:	f7fa fb52 	bl	8014eec <memp_malloc>
 801a848:	6138      	str	r0, [r7, #16]
 801a84a:	693b      	ldr	r3, [r7, #16]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d104      	bne.n	801a85a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a850:	68b8      	ldr	r0, [r7, #8]
 801a852:	f7fb fa31 	bl	8015cb8 <pbuf_free>
    return NULL;
 801a856:	2300      	movs	r3, #0
 801a858:	e061      	b.n	801a91e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a85a:	693b      	ldr	r3, [r7, #16]
 801a85c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a860:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a862:	693b      	ldr	r3, [r7, #16]
 801a864:	2200      	movs	r2, #0
 801a866:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a868:	693b      	ldr	r3, [r7, #16]
 801a86a:	68ba      	ldr	r2, [r7, #8]
 801a86c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a86e:	68bb      	ldr	r3, [r7, #8]
 801a870:	891a      	ldrh	r2, [r3, #8]
 801a872:	7dfb      	ldrb	r3, [r7, #23]
 801a874:	b29b      	uxth	r3, r3
 801a876:	429a      	cmp	r2, r3
 801a878:	d205      	bcs.n	801a886 <tcp_create_segment+0x86>
 801a87a:	4b2b      	ldr	r3, [pc, #172]	; (801a928 <tcp_create_segment+0x128>)
 801a87c:	22b0      	movs	r2, #176	; 0xb0
 801a87e:	492e      	ldr	r1, [pc, #184]	; (801a938 <tcp_create_segment+0x138>)
 801a880:	482b      	ldr	r0, [pc, #172]	; (801a930 <tcp_create_segment+0x130>)
 801a882:	f004 fbcf 	bl	801f024 <iprintf>
  seg->len = p->tot_len - optlen;
 801a886:	68bb      	ldr	r3, [r7, #8]
 801a888:	891a      	ldrh	r2, [r3, #8]
 801a88a:	7dfb      	ldrb	r3, [r7, #23]
 801a88c:	b29b      	uxth	r3, r3
 801a88e:	1ad3      	subs	r3, r2, r3
 801a890:	b29a      	uxth	r2, r3
 801a892:	693b      	ldr	r3, [r7, #16]
 801a894:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a896:	2114      	movs	r1, #20
 801a898:	68b8      	ldr	r0, [r7, #8]
 801a89a:	f7fb f977 	bl	8015b8c <pbuf_add_header>
 801a89e:	4603      	mov	r3, r0
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d004      	beq.n	801a8ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a8a4:	6938      	ldr	r0, [r7, #16]
 801a8a6:	f7fd f804 	bl	80178b2 <tcp_seg_free>
    return NULL;
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	e037      	b.n	801a91e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a8ae:	693b      	ldr	r3, [r7, #16]
 801a8b0:	685b      	ldr	r3, [r3, #4]
 801a8b2:	685a      	ldr	r2, [r3, #4]
 801a8b4:	693b      	ldr	r3, [r7, #16]
 801a8b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	8ada      	ldrh	r2, [r3, #22]
 801a8bc:	693b      	ldr	r3, [r7, #16]
 801a8be:	68dc      	ldr	r4, [r3, #12]
 801a8c0:	4610      	mov	r0, r2
 801a8c2:	f7f7 fafd 	bl	8011ec0 <lwip_htons>
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	8b1a      	ldrh	r2, [r3, #24]
 801a8ce:	693b      	ldr	r3, [r7, #16]
 801a8d0:	68dc      	ldr	r4, [r3, #12]
 801a8d2:	4610      	mov	r0, r2
 801a8d4:	f7f7 faf4 	bl	8011ec0 <lwip_htons>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a8dc:	693b      	ldr	r3, [r7, #16]
 801a8de:	68dc      	ldr	r4, [r3, #12]
 801a8e0:	6838      	ldr	r0, [r7, #0]
 801a8e2:	f7f7 fb02 	bl	8011eea <lwip_htonl>
 801a8e6:	4603      	mov	r3, r0
 801a8e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a8ea:	7dfb      	ldrb	r3, [r7, #23]
 801a8ec:	089b      	lsrs	r3, r3, #2
 801a8ee:	b2db      	uxtb	r3, r3
 801a8f0:	b29b      	uxth	r3, r3
 801a8f2:	3305      	adds	r3, #5
 801a8f4:	b29b      	uxth	r3, r3
 801a8f6:	031b      	lsls	r3, r3, #12
 801a8f8:	b29a      	uxth	r2, r3
 801a8fa:	79fb      	ldrb	r3, [r7, #7]
 801a8fc:	b29b      	uxth	r3, r3
 801a8fe:	4313      	orrs	r3, r2
 801a900:	b29a      	uxth	r2, r3
 801a902:	693b      	ldr	r3, [r7, #16]
 801a904:	68dc      	ldr	r4, [r3, #12]
 801a906:	4610      	mov	r0, r2
 801a908:	f7f7 fada 	bl	8011ec0 <lwip_htons>
 801a90c:	4603      	mov	r3, r0
 801a90e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a910:	693b      	ldr	r3, [r7, #16]
 801a912:	68db      	ldr	r3, [r3, #12]
 801a914:	2200      	movs	r2, #0
 801a916:	749a      	strb	r2, [r3, #18]
 801a918:	2200      	movs	r2, #0
 801a91a:	74da      	strb	r2, [r3, #19]
  return seg;
 801a91c:	693b      	ldr	r3, [r7, #16]
}
 801a91e:	4618      	mov	r0, r3
 801a920:	371c      	adds	r7, #28
 801a922:	46bd      	mov	sp, r7
 801a924:	bd90      	pop	{r4, r7, pc}
 801a926:	bf00      	nop
 801a928:	08025ef0 	.word	0x08025ef0
 801a92c:	08025f50 	.word	0x08025f50
 801a930:	08025f70 	.word	0x08025f70
 801a934:	08025f98 	.word	0x08025f98
 801a938:	08025fbc 	.word	0x08025fbc

0801a93c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b086      	sub	sp, #24
 801a940:	af00      	add	r7, sp, #0
 801a942:	607b      	str	r3, [r7, #4]
 801a944:	4603      	mov	r3, r0
 801a946:	73fb      	strb	r3, [r7, #15]
 801a948:	460b      	mov	r3, r1
 801a94a:	81bb      	strh	r3, [r7, #12]
 801a94c:	4613      	mov	r3, r2
 801a94e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a950:	89bb      	ldrh	r3, [r7, #12]
 801a952:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d105      	bne.n	801a966 <tcp_pbuf_prealloc+0x2a>
 801a95a:	4b30      	ldr	r3, [pc, #192]	; (801aa1c <tcp_pbuf_prealloc+0xe0>)
 801a95c:	22e8      	movs	r2, #232	; 0xe8
 801a95e:	4930      	ldr	r1, [pc, #192]	; (801aa20 <tcp_pbuf_prealloc+0xe4>)
 801a960:	4830      	ldr	r0, [pc, #192]	; (801aa24 <tcp_pbuf_prealloc+0xe8>)
 801a962:	f004 fb5f 	bl	801f024 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a966:	6a3b      	ldr	r3, [r7, #32]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d105      	bne.n	801a978 <tcp_pbuf_prealloc+0x3c>
 801a96c:	4b2b      	ldr	r3, [pc, #172]	; (801aa1c <tcp_pbuf_prealloc+0xe0>)
 801a96e:	22e9      	movs	r2, #233	; 0xe9
 801a970:	492d      	ldr	r1, [pc, #180]	; (801aa28 <tcp_pbuf_prealloc+0xec>)
 801a972:	482c      	ldr	r0, [pc, #176]	; (801aa24 <tcp_pbuf_prealloc+0xe8>)
 801a974:	f004 fb56 	bl	801f024 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a978:	89ba      	ldrh	r2, [r7, #12]
 801a97a:	897b      	ldrh	r3, [r7, #10]
 801a97c:	429a      	cmp	r2, r3
 801a97e:	d221      	bcs.n	801a9c4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a980:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a984:	f003 0302 	and.w	r3, r3, #2
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d111      	bne.n	801a9b0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a98c:	6a3b      	ldr	r3, [r7, #32]
 801a98e:	8b5b      	ldrh	r3, [r3, #26]
 801a990:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a994:	2b00      	cmp	r3, #0
 801a996:	d115      	bne.n	801a9c4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a998:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d007      	beq.n	801a9b0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a9a0:	6a3b      	ldr	r3, [r7, #32]
 801a9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d103      	bne.n	801a9b0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a9a8:	6a3b      	ldr	r3, [r7, #32]
 801a9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d009      	beq.n	801a9c4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a9b0:	89bb      	ldrh	r3, [r7, #12]
 801a9b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801a9b6:	f023 0203 	bic.w	r2, r3, #3
 801a9ba:	897b      	ldrh	r3, [r7, #10]
 801a9bc:	4293      	cmp	r3, r2
 801a9be:	bf28      	it	cs
 801a9c0:	4613      	movcs	r3, r2
 801a9c2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a9c4:	8af9      	ldrh	r1, [r7, #22]
 801a9c6:	7bfb      	ldrb	r3, [r7, #15]
 801a9c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f7fa fe8f 	bl	80156f0 <pbuf_alloc>
 801a9d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a9d4:	693b      	ldr	r3, [r7, #16]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d101      	bne.n	801a9de <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801a9da:	2300      	movs	r3, #0
 801a9dc:	e019      	b.n	801aa12 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a9de:	693b      	ldr	r3, [r7, #16]
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d006      	beq.n	801a9f4 <tcp_pbuf_prealloc+0xb8>
 801a9e6:	4b0d      	ldr	r3, [pc, #52]	; (801aa1c <tcp_pbuf_prealloc+0xe0>)
 801a9e8:	f240 120b 	movw	r2, #267	; 0x10b
 801a9ec:	490f      	ldr	r1, [pc, #60]	; (801aa2c <tcp_pbuf_prealloc+0xf0>)
 801a9ee:	480d      	ldr	r0, [pc, #52]	; (801aa24 <tcp_pbuf_prealloc+0xe8>)
 801a9f0:	f004 fb18 	bl	801f024 <iprintf>
  *oversize = p->len - length;
 801a9f4:	693b      	ldr	r3, [r7, #16]
 801a9f6:	895a      	ldrh	r2, [r3, #10]
 801a9f8:	89bb      	ldrh	r3, [r7, #12]
 801a9fa:	1ad3      	subs	r3, r2, r3
 801a9fc:	b29a      	uxth	r2, r3
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801aa02:	693b      	ldr	r3, [r7, #16]
 801aa04:	89ba      	ldrh	r2, [r7, #12]
 801aa06:	811a      	strh	r2, [r3, #8]
 801aa08:	693b      	ldr	r3, [r7, #16]
 801aa0a:	891a      	ldrh	r2, [r3, #8]
 801aa0c:	693b      	ldr	r3, [r7, #16]
 801aa0e:	815a      	strh	r2, [r3, #10]
  return p;
 801aa10:	693b      	ldr	r3, [r7, #16]
}
 801aa12:	4618      	mov	r0, r3
 801aa14:	3718      	adds	r7, #24
 801aa16:	46bd      	mov	sp, r7
 801aa18:	bd80      	pop	{r7, pc}
 801aa1a:	bf00      	nop
 801aa1c:	08025ef0 	.word	0x08025ef0
 801aa20:	08025fd4 	.word	0x08025fd4
 801aa24:	08025f70 	.word	0x08025f70
 801aa28:	08025ff8 	.word	0x08025ff8
 801aa2c:	08026018 	.word	0x08026018

0801aa30 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b082      	sub	sp, #8
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
 801aa38:	460b      	mov	r3, r1
 801aa3a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d106      	bne.n	801aa50 <tcp_write_checks+0x20>
 801aa42:	4b33      	ldr	r3, [pc, #204]	; (801ab10 <tcp_write_checks+0xe0>)
 801aa44:	f240 1233 	movw	r2, #307	; 0x133
 801aa48:	4932      	ldr	r1, [pc, #200]	; (801ab14 <tcp_write_checks+0xe4>)
 801aa4a:	4833      	ldr	r0, [pc, #204]	; (801ab18 <tcp_write_checks+0xe8>)
 801aa4c:	f004 faea 	bl	801f024 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	7d1b      	ldrb	r3, [r3, #20]
 801aa54:	2b04      	cmp	r3, #4
 801aa56:	d00e      	beq.n	801aa76 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801aa5c:	2b07      	cmp	r3, #7
 801aa5e:	d00a      	beq.n	801aa76 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801aa64:	2b02      	cmp	r3, #2
 801aa66:	d006      	beq.n	801aa76 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801aa6c:	2b03      	cmp	r3, #3
 801aa6e:	d002      	beq.n	801aa76 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801aa70:	f06f 030a 	mvn.w	r3, #10
 801aa74:	e048      	b.n	801ab08 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801aa76:	887b      	ldrh	r3, [r7, #2]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d101      	bne.n	801aa80 <tcp_write_checks+0x50>
    return ERR_OK;
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	e043      	b.n	801ab08 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801aa86:	887a      	ldrh	r2, [r7, #2]
 801aa88:	429a      	cmp	r2, r3
 801aa8a:	d909      	bls.n	801aaa0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	8b5b      	ldrh	r3, [r3, #26]
 801aa90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa94:	b29a      	uxth	r2, r3
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801aa9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa9e:	e033      	b.n	801ab08 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aaa6:	2b08      	cmp	r3, #8
 801aaa8:	d909      	bls.n	801aabe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	8b5b      	ldrh	r3, [r3, #26]
 801aaae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aab2:	b29a      	uxth	r2, r3
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801aab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aabc:	e024      	b.n	801ab08 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d00f      	beq.n	801aae8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d11a      	bne.n	801ab06 <tcp_write_checks+0xd6>
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d116      	bne.n	801ab06 <tcp_write_checks+0xd6>
 801aad8:	4b0d      	ldr	r3, [pc, #52]	; (801ab10 <tcp_write_checks+0xe0>)
 801aada:	f240 1255 	movw	r2, #341	; 0x155
 801aade:	490f      	ldr	r1, [pc, #60]	; (801ab1c <tcp_write_checks+0xec>)
 801aae0:	480d      	ldr	r0, [pc, #52]	; (801ab18 <tcp_write_checks+0xe8>)
 801aae2:	f004 fa9f 	bl	801f024 <iprintf>
 801aae6:	e00e      	b.n	801ab06 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d103      	bne.n	801aaf8 <tcp_write_checks+0xc8>
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d006      	beq.n	801ab06 <tcp_write_checks+0xd6>
 801aaf8:	4b05      	ldr	r3, [pc, #20]	; (801ab10 <tcp_write_checks+0xe0>)
 801aafa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801aafe:	4908      	ldr	r1, [pc, #32]	; (801ab20 <tcp_write_checks+0xf0>)
 801ab00:	4805      	ldr	r0, [pc, #20]	; (801ab18 <tcp_write_checks+0xe8>)
 801ab02:	f004 fa8f 	bl	801f024 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ab06:	2300      	movs	r3, #0
}
 801ab08:	4618      	mov	r0, r3
 801ab0a:	3708      	adds	r7, #8
 801ab0c:	46bd      	mov	sp, r7
 801ab0e:	bd80      	pop	{r7, pc}
 801ab10:	08025ef0 	.word	0x08025ef0
 801ab14:	0802602c 	.word	0x0802602c
 801ab18:	08025f70 	.word	0x08025f70
 801ab1c:	0802604c 	.word	0x0802604c
 801ab20:	08026088 	.word	0x08026088

0801ab24 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801ab24:	b590      	push	{r4, r7, lr}
 801ab26:	b09b      	sub	sp, #108	; 0x6c
 801ab28:	af04      	add	r7, sp, #16
 801ab2a:	60f8      	str	r0, [r7, #12]
 801ab2c:	60b9      	str	r1, [r7, #8]
 801ab2e:	4611      	mov	r1, r2
 801ab30:	461a      	mov	r2, r3
 801ab32:	460b      	mov	r3, r1
 801ab34:	80fb      	strh	r3, [r7, #6]
 801ab36:	4613      	mov	r3, r2
 801ab38:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ab3e:	2300      	movs	r3, #0
 801ab40:	653b      	str	r3, [r7, #80]	; 0x50
 801ab42:	2300      	movs	r3, #0
 801ab44:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ab46:	2300      	movs	r3, #0
 801ab48:	64bb      	str	r3, [r7, #72]	; 0x48
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801ab4e:	2300      	movs	r3, #0
 801ab50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801ab54:	2300      	movs	r3, #0
 801ab56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801ab5e:	2300      	movs	r3, #0
 801ab60:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801ab62:	2300      	movs	r3, #0
 801ab64:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d109      	bne.n	801ab80 <tcp_write+0x5c>
 801ab6c:	4ba4      	ldr	r3, [pc, #656]	; (801ae00 <tcp_write+0x2dc>)
 801ab6e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801ab72:	49a4      	ldr	r1, [pc, #656]	; (801ae04 <tcp_write+0x2e0>)
 801ab74:	48a4      	ldr	r0, [pc, #656]	; (801ae08 <tcp_write+0x2e4>)
 801ab76:	f004 fa55 	bl	801f024 <iprintf>
 801ab7a:	f06f 030f 	mvn.w	r3, #15
 801ab7e:	e32a      	b.n	801b1d6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ab86:	085b      	lsrs	r3, r3, #1
 801ab88:	b29a      	uxth	r2, r3
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ab8e:	4293      	cmp	r3, r2
 801ab90:	bf28      	it	cs
 801ab92:	4613      	movcs	r3, r2
 801ab94:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801ab96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d102      	bne.n	801aba2 <tcp_write+0x7e>
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aba0:	e000      	b.n	801aba4 <tcp_write+0x80>
 801aba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aba4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801aba6:	68bb      	ldr	r3, [r7, #8]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d109      	bne.n	801abc0 <tcp_write+0x9c>
 801abac:	4b94      	ldr	r3, [pc, #592]	; (801ae00 <tcp_write+0x2dc>)
 801abae:	f240 12ad 	movw	r2, #429	; 0x1ad
 801abb2:	4996      	ldr	r1, [pc, #600]	; (801ae0c <tcp_write+0x2e8>)
 801abb4:	4894      	ldr	r0, [pc, #592]	; (801ae08 <tcp_write+0x2e4>)
 801abb6:	f004 fa35 	bl	801f024 <iprintf>
 801abba:	f06f 030f 	mvn.w	r3, #15
 801abbe:	e30a      	b.n	801b1d6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801abc0:	88fb      	ldrh	r3, [r7, #6]
 801abc2:	4619      	mov	r1, r3
 801abc4:	68f8      	ldr	r0, [r7, #12]
 801abc6:	f7ff ff33 	bl	801aa30 <tcp_write_checks>
 801abca:	4603      	mov	r3, r0
 801abcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801abd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d002      	beq.n	801abde <tcp_write+0xba>
    return err;
 801abd8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801abdc:	e2fb      	b.n	801b1d6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801abe4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801abe8:	2300      	movs	r3, #0
 801abea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	f000 80f6 	beq.w	801ade4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801abfc:	653b      	str	r3, [r7, #80]	; 0x50
 801abfe:	e002      	b.n	801ac06 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801ac00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d1f8      	bne.n	801ac00 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801ac0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac10:	7a9b      	ldrb	r3, [r3, #10]
 801ac12:	009b      	lsls	r3, r3, #2
 801ac14:	b29b      	uxth	r3, r3
 801ac16:	f003 0304 	and.w	r3, r3, #4
 801ac1a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ac1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac20:	891b      	ldrh	r3, [r3, #8]
 801ac22:	4619      	mov	r1, r3
 801ac24:	8c3b      	ldrh	r3, [r7, #32]
 801ac26:	440b      	add	r3, r1
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	da06      	bge.n	801ac3a <tcp_write+0x116>
 801ac2c:	4b74      	ldr	r3, [pc, #464]	; (801ae00 <tcp_write+0x2dc>)
 801ac2e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ac32:	4977      	ldr	r1, [pc, #476]	; (801ae10 <tcp_write+0x2ec>)
 801ac34:	4874      	ldr	r0, [pc, #464]	; (801ae08 <tcp_write+0x2e4>)
 801ac36:	f004 f9f5 	bl	801f024 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ac3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac3c:	891a      	ldrh	r2, [r3, #8]
 801ac3e:	8c3b      	ldrh	r3, [r7, #32]
 801ac40:	4413      	add	r3, r2
 801ac42:	b29b      	uxth	r3, r3
 801ac44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ac46:	1ad3      	subs	r3, r2, r3
 801ac48:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ac50:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801ac52:	8a7b      	ldrh	r3, [r7, #18]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d026      	beq.n	801aca6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ac58:	8a7b      	ldrh	r3, [r7, #18]
 801ac5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	d206      	bcs.n	801ac6e <tcp_write+0x14a>
 801ac60:	4b67      	ldr	r3, [pc, #412]	; (801ae00 <tcp_write+0x2dc>)
 801ac62:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ac66:	496b      	ldr	r1, [pc, #428]	; (801ae14 <tcp_write+0x2f0>)
 801ac68:	4867      	ldr	r0, [pc, #412]	; (801ae08 <tcp_write+0x2e4>)
 801ac6a:	f004 f9db 	bl	801f024 <iprintf>
      seg = last_unsent;
 801ac6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ac70:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ac72:	8a7b      	ldrh	r3, [r7, #18]
 801ac74:	88fa      	ldrh	r2, [r7, #6]
 801ac76:	4293      	cmp	r3, r2
 801ac78:	bf28      	it	cs
 801ac7a:	4613      	movcs	r3, r2
 801ac7c:	b29b      	uxth	r3, r3
 801ac7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ac80:	4293      	cmp	r3, r2
 801ac82:	bf28      	it	cs
 801ac84:	4613      	movcs	r3, r2
 801ac86:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801ac88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ac8e:	4413      	add	r3, r2
 801ac90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801ac94:	8a7a      	ldrh	r2, [r7, #18]
 801ac96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ac98:	1ad3      	subs	r3, r2, r3
 801ac9a:	b29b      	uxth	r3, r3
 801ac9c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ac9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801aca0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aca2:	1ad3      	subs	r3, r2, r3
 801aca4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801aca6:	8a7b      	ldrh	r3, [r7, #18]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d00b      	beq.n	801acc4 <tcp_write+0x1a0>
 801acac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801acb0:	88fb      	ldrh	r3, [r7, #6]
 801acb2:	429a      	cmp	r2, r3
 801acb4:	d006      	beq.n	801acc4 <tcp_write+0x1a0>
 801acb6:	4b52      	ldr	r3, [pc, #328]	; (801ae00 <tcp_write+0x2dc>)
 801acb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801acbc:	4956      	ldr	r1, [pc, #344]	; (801ae18 <tcp_write+0x2f4>)
 801acbe:	4852      	ldr	r0, [pc, #328]	; (801ae08 <tcp_write+0x2e4>)
 801acc0:	f004 f9b0 	bl	801f024 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801acc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801acc8:	88fb      	ldrh	r3, [r7, #6]
 801acca:	429a      	cmp	r2, r3
 801accc:	f080 8167 	bcs.w	801af9e <tcp_write+0x47a>
 801acd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	f000 8163 	beq.w	801af9e <tcp_write+0x47a>
 801acd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801acda:	891b      	ldrh	r3, [r3, #8]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	f000 815e 	beq.w	801af9e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ace2:	88fa      	ldrh	r2, [r7, #6]
 801ace4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ace8:	1ad2      	subs	r2, r2, r3
 801acea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801acec:	4293      	cmp	r3, r2
 801acee:	bfa8      	it	ge
 801acf0:	4613      	movge	r3, r2
 801acf2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801acf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801acf6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801acf8:	797b      	ldrb	r3, [r7, #5]
 801acfa:	f003 0301 	and.w	r3, r3, #1
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d027      	beq.n	801ad52 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ad02:	f107 0012 	add.w	r0, r7, #18
 801ad06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ad08:	8bf9      	ldrh	r1, [r7, #30]
 801ad0a:	2301      	movs	r3, #1
 801ad0c:	9302      	str	r3, [sp, #8]
 801ad0e:	797b      	ldrb	r3, [r7, #5]
 801ad10:	9301      	str	r3, [sp, #4]
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	9300      	str	r3, [sp, #0]
 801ad16:	4603      	mov	r3, r0
 801ad18:	2000      	movs	r0, #0
 801ad1a:	f7ff fe0f 	bl	801a93c <tcp_pbuf_prealloc>
 801ad1e:	6578      	str	r0, [r7, #84]	; 0x54
 801ad20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	f000 8225 	beq.w	801b172 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ad28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ad2a:	6858      	ldr	r0, [r3, #4]
 801ad2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad30:	68ba      	ldr	r2, [r7, #8]
 801ad32:	4413      	add	r3, r2
 801ad34:	8bfa      	ldrh	r2, [r7, #30]
 801ad36:	4619      	mov	r1, r3
 801ad38:	f003 fa54 	bl	801e1e4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801ad3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ad3e:	f7fb f843 	bl	8015dc8 <pbuf_clen>
 801ad42:	4603      	mov	r3, r0
 801ad44:	461a      	mov	r2, r3
 801ad46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ad4a:	4413      	add	r3, r2
 801ad4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801ad50:	e041      	b.n	801add6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ad52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ad54:	685b      	ldr	r3, [r3, #4]
 801ad56:	637b      	str	r3, [r7, #52]	; 0x34
 801ad58:	e002      	b.n	801ad60 <tcp_write+0x23c>
 801ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	637b      	str	r3, [r7, #52]	; 0x34
 801ad60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d1f8      	bne.n	801ad5a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ad68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad6a:	7b1b      	ldrb	r3, [r3, #12]
 801ad6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d115      	bne.n	801ada0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ad74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad76:	685b      	ldr	r3, [r3, #4]
 801ad78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ad7a:	8952      	ldrh	r2, [r2, #10]
 801ad7c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ad7e:	68ba      	ldr	r2, [r7, #8]
 801ad80:	429a      	cmp	r2, r3
 801ad82:	d10d      	bne.n	801ada0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ad84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d006      	beq.n	801ad9a <tcp_write+0x276>
 801ad8c:	4b1c      	ldr	r3, [pc, #112]	; (801ae00 <tcp_write+0x2dc>)
 801ad8e:	f240 2231 	movw	r2, #561	; 0x231
 801ad92:	4922      	ldr	r1, [pc, #136]	; (801ae1c <tcp_write+0x2f8>)
 801ad94:	481c      	ldr	r0, [pc, #112]	; (801ae08 <tcp_write+0x2e4>)
 801ad96:	f004 f945 	bl	801f024 <iprintf>
          extendlen = seglen;
 801ad9a:	8bfb      	ldrh	r3, [r7, #30]
 801ad9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801ad9e:	e01a      	b.n	801add6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ada0:	8bfb      	ldrh	r3, [r7, #30]
 801ada2:	2201      	movs	r2, #1
 801ada4:	4619      	mov	r1, r3
 801ada6:	2000      	movs	r0, #0
 801ada8:	f7fa fca2 	bl	80156f0 <pbuf_alloc>
 801adac:	6578      	str	r0, [r7, #84]	; 0x54
 801adae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	f000 81e0 	beq.w	801b176 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801adb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801adba:	68ba      	ldr	r2, [r7, #8]
 801adbc:	441a      	add	r2, r3
 801adbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801adc0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801adc2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801adc4:	f7fb f800 	bl	8015dc8 <pbuf_clen>
 801adc8:	4603      	mov	r3, r0
 801adca:	461a      	mov	r2, r3
 801adcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801add0:	4413      	add	r3, r2
 801add2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801add6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801adda:	8bfb      	ldrh	r3, [r7, #30]
 801addc:	4413      	add	r3, r2
 801adde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801ade2:	e0dc      	b.n	801af9e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801adea:	2b00      	cmp	r3, #0
 801adec:	f000 80d7 	beq.w	801af9e <tcp_write+0x47a>
 801adf0:	4b03      	ldr	r3, [pc, #12]	; (801ae00 <tcp_write+0x2dc>)
 801adf2:	f240 224a 	movw	r2, #586	; 0x24a
 801adf6:	490a      	ldr	r1, [pc, #40]	; (801ae20 <tcp_write+0x2fc>)
 801adf8:	4803      	ldr	r0, [pc, #12]	; (801ae08 <tcp_write+0x2e4>)
 801adfa:	f004 f913 	bl	801f024 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801adfe:	e0ce      	b.n	801af9e <tcp_write+0x47a>
 801ae00:	08025ef0 	.word	0x08025ef0
 801ae04:	080260bc 	.word	0x080260bc
 801ae08:	08025f70 	.word	0x08025f70
 801ae0c:	080260d4 	.word	0x080260d4
 801ae10:	08026108 	.word	0x08026108
 801ae14:	08026120 	.word	0x08026120
 801ae18:	08026140 	.word	0x08026140
 801ae1c:	08026160 	.word	0x08026160
 801ae20:	0802618c 	.word	0x0802618c
    struct pbuf *p;
    u16_t left = len - pos;
 801ae24:	88fa      	ldrh	r2, [r7, #6]
 801ae26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ae2a:	1ad3      	subs	r3, r2, r3
 801ae2c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801ae2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ae36:	1ad3      	subs	r3, r2, r3
 801ae38:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801ae3a:	8b7a      	ldrh	r2, [r7, #26]
 801ae3c:	8bbb      	ldrh	r3, [r7, #28]
 801ae3e:	4293      	cmp	r3, r2
 801ae40:	bf28      	it	cs
 801ae42:	4613      	movcs	r3, r2
 801ae44:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ae46:	797b      	ldrb	r3, [r7, #5]
 801ae48:	f003 0301 	and.w	r3, r3, #1
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d036      	beq.n	801aebe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801ae50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ae54:	b29a      	uxth	r2, r3
 801ae56:	8b3b      	ldrh	r3, [r7, #24]
 801ae58:	4413      	add	r3, r2
 801ae5a:	b299      	uxth	r1, r3
 801ae5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	bf0c      	ite	eq
 801ae62:	2301      	moveq	r3, #1
 801ae64:	2300      	movne	r3, #0
 801ae66:	b2db      	uxtb	r3, r3
 801ae68:	f107 0012 	add.w	r0, r7, #18
 801ae6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ae6e:	9302      	str	r3, [sp, #8]
 801ae70:	797b      	ldrb	r3, [r7, #5]
 801ae72:	9301      	str	r3, [sp, #4]
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	9300      	str	r3, [sp, #0]
 801ae78:	4603      	mov	r3, r0
 801ae7a:	2036      	movs	r0, #54	; 0x36
 801ae7c:	f7ff fd5e 	bl	801a93c <tcp_pbuf_prealloc>
 801ae80:	6338      	str	r0, [r7, #48]	; 0x30
 801ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	f000 8178 	beq.w	801b17a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae8c:	895b      	ldrh	r3, [r3, #10]
 801ae8e:	8b3a      	ldrh	r2, [r7, #24]
 801ae90:	429a      	cmp	r2, r3
 801ae92:	d906      	bls.n	801aea2 <tcp_write+0x37e>
 801ae94:	4b8c      	ldr	r3, [pc, #560]	; (801b0c8 <tcp_write+0x5a4>)
 801ae96:	f240 2266 	movw	r2, #614	; 0x266
 801ae9a:	498c      	ldr	r1, [pc, #560]	; (801b0cc <tcp_write+0x5a8>)
 801ae9c:	488c      	ldr	r0, [pc, #560]	; (801b0d0 <tcp_write+0x5ac>)
 801ae9e:	f004 f8c1 	bl	801f024 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea4:	685a      	ldr	r2, [r3, #4]
 801aea6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aeaa:	18d0      	adds	r0, r2, r3
 801aeac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801aeb0:	68ba      	ldr	r2, [r7, #8]
 801aeb2:	4413      	add	r3, r2
 801aeb4:	8b3a      	ldrh	r2, [r7, #24]
 801aeb6:	4619      	mov	r1, r3
 801aeb8:	f003 f994 	bl	801e1e4 <memcpy>
 801aebc:	e02f      	b.n	801af1e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801aebe:	8a7b      	ldrh	r3, [r7, #18]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d006      	beq.n	801aed2 <tcp_write+0x3ae>
 801aec4:	4b80      	ldr	r3, [pc, #512]	; (801b0c8 <tcp_write+0x5a4>)
 801aec6:	f240 2271 	movw	r2, #625	; 0x271
 801aeca:	4982      	ldr	r1, [pc, #520]	; (801b0d4 <tcp_write+0x5b0>)
 801aecc:	4880      	ldr	r0, [pc, #512]	; (801b0d0 <tcp_write+0x5ac>)
 801aece:	f004 f8a9 	bl	801f024 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801aed2:	8b3b      	ldrh	r3, [r7, #24]
 801aed4:	2201      	movs	r2, #1
 801aed6:	4619      	mov	r1, r3
 801aed8:	2036      	movs	r0, #54	; 0x36
 801aeda:	f7fa fc09 	bl	80156f0 <pbuf_alloc>
 801aede:	6178      	str	r0, [r7, #20]
 801aee0:	697b      	ldr	r3, [r7, #20]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	f000 814b 	beq.w	801b17e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801aee8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801aeec:	68ba      	ldr	r2, [r7, #8]
 801aeee:	441a      	add	r2, r3
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801aef4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801aef8:	b29b      	uxth	r3, r3
 801aefa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aefe:	4619      	mov	r1, r3
 801af00:	2036      	movs	r0, #54	; 0x36
 801af02:	f7fa fbf5 	bl	80156f0 <pbuf_alloc>
 801af06:	6338      	str	r0, [r7, #48]	; 0x30
 801af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d103      	bne.n	801af16 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801af0e:	6978      	ldr	r0, [r7, #20]
 801af10:	f7fa fed2 	bl	8015cb8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801af14:	e136      	b.n	801b184 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801af16:	6979      	ldr	r1, [r7, #20]
 801af18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af1a:	f7fa ff8f 	bl	8015e3c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801af1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af20:	f7fa ff52 	bl	8015dc8 <pbuf_clen>
 801af24:	4603      	mov	r3, r0
 801af26:	461a      	mov	r2, r3
 801af28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801af2c:	4413      	add	r3, r2
 801af2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801af32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801af36:	2b09      	cmp	r3, #9
 801af38:	d903      	bls.n	801af42 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801af3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801af3c:	f7fa febc 	bl	8015cb8 <pbuf_free>
      goto memerr;
 801af40:	e120      	b.n	801b184 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801af46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801af4a:	441a      	add	r2, r3
 801af4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af50:	9300      	str	r3, [sp, #0]
 801af52:	4613      	mov	r3, r2
 801af54:	2200      	movs	r2, #0
 801af56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801af58:	68f8      	ldr	r0, [r7, #12]
 801af5a:	f7ff fc51 	bl	801a800 <tcp_create_segment>
 801af5e:	64f8      	str	r0, [r7, #76]	; 0x4c
 801af60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af62:	2b00      	cmp	r3, #0
 801af64:	f000 810d 	beq.w	801b182 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801af68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d102      	bne.n	801af74 <tcp_write+0x450>
      queue = seg;
 801af6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af70:	647b      	str	r3, [r7, #68]	; 0x44
 801af72:	e00c      	b.n	801af8e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801af74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801af76:	2b00      	cmp	r3, #0
 801af78:	d106      	bne.n	801af88 <tcp_write+0x464>
 801af7a:	4b53      	ldr	r3, [pc, #332]	; (801b0c8 <tcp_write+0x5a4>)
 801af7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 801af80:	4955      	ldr	r1, [pc, #340]	; (801b0d8 <tcp_write+0x5b4>)
 801af82:	4853      	ldr	r0, [pc, #332]	; (801b0d0 <tcp_write+0x5ac>)
 801af84:	f004 f84e 	bl	801f024 <iprintf>
      prev_seg->next = seg;
 801af88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801af8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801af8c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801af8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af90:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801af92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801af96:	8b3b      	ldrh	r3, [r7, #24]
 801af98:	4413      	add	r3, r2
 801af9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801af9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801afa2:	88fb      	ldrh	r3, [r7, #6]
 801afa4:	429a      	cmp	r2, r3
 801afa6:	f4ff af3d 	bcc.w	801ae24 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801afaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801afac:	2b00      	cmp	r3, #0
 801afae:	d02c      	beq.n	801b00a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801afb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801afb2:	685b      	ldr	r3, [r3, #4]
 801afb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801afb6:	e01e      	b.n	801aff6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afba:	891a      	ldrh	r2, [r3, #8]
 801afbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801afbe:	4413      	add	r3, r2
 801afc0:	b29a      	uxth	r2, r3
 801afc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afc4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801afc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d110      	bne.n	801aff0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afd0:	685b      	ldr	r3, [r3, #4]
 801afd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801afd4:	8952      	ldrh	r2, [r2, #10]
 801afd6:	4413      	add	r3, r2
 801afd8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801afda:	68b9      	ldr	r1, [r7, #8]
 801afdc:	4618      	mov	r0, r3
 801afde:	f003 f901 	bl	801e1e4 <memcpy>
        p->len += oversize_used;
 801afe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afe4:	895a      	ldrh	r2, [r3, #10]
 801afe6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801afe8:	4413      	add	r3, r2
 801afea:	b29a      	uxth	r2, r3
 801afec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801aff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d1dd      	bne.n	801afb8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801affc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801affe:	891a      	ldrh	r2, [r3, #8]
 801b000:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b002:	4413      	add	r3, r2
 801b004:	b29a      	uxth	r2, r3
 801b006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b008:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801b00a:	8a7a      	ldrh	r2, [r7, #18]
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801b012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b014:	2b00      	cmp	r3, #0
 801b016:	d018      	beq.n	801b04a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d106      	bne.n	801b02c <tcp_write+0x508>
 801b01e:	4b2a      	ldr	r3, [pc, #168]	; (801b0c8 <tcp_write+0x5a4>)
 801b020:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801b024:	492d      	ldr	r1, [pc, #180]	; (801b0dc <tcp_write+0x5b8>)
 801b026:	482a      	ldr	r0, [pc, #168]	; (801b0d0 <tcp_write+0x5ac>)
 801b028:	f003 fffc 	bl	801f024 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801b02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b02e:	685b      	ldr	r3, [r3, #4]
 801b030:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b032:	4618      	mov	r0, r3
 801b034:	f7fa ff02 	bl	8015e3c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b03a:	891a      	ldrh	r2, [r3, #8]
 801b03c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b03e:	891b      	ldrh	r3, [r3, #8]
 801b040:	4413      	add	r3, r2
 801b042:	b29a      	uxth	r2, r3
 801b044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b046:	811a      	strh	r2, [r3, #8]
 801b048:	e037      	b.n	801b0ba <tcp_write+0x596>
  } else if (extendlen > 0) {
 801b04a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d034      	beq.n	801b0ba <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b052:	2b00      	cmp	r3, #0
 801b054:	d003      	beq.n	801b05e <tcp_write+0x53a>
 801b056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b058:	685b      	ldr	r3, [r3, #4]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d106      	bne.n	801b06c <tcp_write+0x548>
 801b05e:	4b1a      	ldr	r3, [pc, #104]	; (801b0c8 <tcp_write+0x5a4>)
 801b060:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b064:	491e      	ldr	r1, [pc, #120]	; (801b0e0 <tcp_write+0x5bc>)
 801b066:	481a      	ldr	r0, [pc, #104]	; (801b0d0 <tcp_write+0x5ac>)
 801b068:	f003 ffdc 	bl	801f024 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b06c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b06e:	685b      	ldr	r3, [r3, #4]
 801b070:	62bb      	str	r3, [r7, #40]	; 0x28
 801b072:	e009      	b.n	801b088 <tcp_write+0x564>
      p->tot_len += extendlen;
 801b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b076:	891a      	ldrh	r2, [r3, #8]
 801b078:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b07a:	4413      	add	r3, r2
 801b07c:	b29a      	uxth	r2, r3
 801b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b080:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	62bb      	str	r3, [r7, #40]	; 0x28
 801b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d1f1      	bne.n	801b074 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b092:	891a      	ldrh	r2, [r3, #8]
 801b094:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b096:	4413      	add	r3, r2
 801b098:	b29a      	uxth	r2, r3
 801b09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b09c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0a0:	895a      	ldrh	r2, [r3, #10]
 801b0a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0a4:	4413      	add	r3, r2
 801b0a6:	b29a      	uxth	r2, r3
 801b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0aa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b0ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0ae:	891a      	ldrh	r2, [r3, #8]
 801b0b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b0b2:	4413      	add	r3, r2
 801b0b4:	b29a      	uxth	r2, r3
 801b0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0b8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801b0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d111      	bne.n	801b0e4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b0c4:	66da      	str	r2, [r3, #108]	; 0x6c
 801b0c6:	e010      	b.n	801b0ea <tcp_write+0x5c6>
 801b0c8:	08025ef0 	.word	0x08025ef0
 801b0cc:	080261bc 	.word	0x080261bc
 801b0d0:	08025f70 	.word	0x08025f70
 801b0d4:	080261fc 	.word	0x080261fc
 801b0d8:	0802620c 	.word	0x0802620c
 801b0dc:	08026220 	.word	0x08026220
 801b0e0:	08026258 	.word	0x08026258
  } else {
    last_unsent->next = queue;
 801b0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b0e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b0e8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801b0ee:	88fb      	ldrh	r3, [r7, #6]
 801b0f0:	441a      	add	r2, r3
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b0fc:	88fb      	ldrh	r3, [r7, #6]
 801b0fe:	1ad3      	subs	r3, r2, r3
 801b100:	b29a      	uxth	r2, r3
 801b102:	68fb      	ldr	r3, [r7, #12]
 801b104:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b10e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d00e      	beq.n	801b13a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b120:	2b00      	cmp	r3, #0
 801b122:	d10a      	bne.n	801b13a <tcp_write+0x616>
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d106      	bne.n	801b13a <tcp_write+0x616>
 801b12c:	4b2c      	ldr	r3, [pc, #176]	; (801b1e0 <tcp_write+0x6bc>)
 801b12e:	f240 3212 	movw	r2, #786	; 0x312
 801b132:	492c      	ldr	r1, [pc, #176]	; (801b1e4 <tcp_write+0x6c0>)
 801b134:	482c      	ldr	r0, [pc, #176]	; (801b1e8 <tcp_write+0x6c4>)
 801b136:	f003 ff75 	bl	801f024 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801b13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d016      	beq.n	801b16e <tcp_write+0x64a>
 801b140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b142:	68db      	ldr	r3, [r3, #12]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d012      	beq.n	801b16e <tcp_write+0x64a>
 801b148:	797b      	ldrb	r3, [r7, #5]
 801b14a:	f003 0302 	and.w	r3, r3, #2
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d10d      	bne.n	801b16e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b154:	68db      	ldr	r3, [r3, #12]
 801b156:	899b      	ldrh	r3, [r3, #12]
 801b158:	b29c      	uxth	r4, r3
 801b15a:	2008      	movs	r0, #8
 801b15c:	f7f6 feb0 	bl	8011ec0 <lwip_htons>
 801b160:	4603      	mov	r3, r0
 801b162:	461a      	mov	r2, r3
 801b164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b166:	68db      	ldr	r3, [r3, #12]
 801b168:	4322      	orrs	r2, r4
 801b16a:	b292      	uxth	r2, r2
 801b16c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b16e:	2300      	movs	r3, #0
 801b170:	e031      	b.n	801b1d6 <tcp_write+0x6b2>
          goto memerr;
 801b172:	bf00      	nop
 801b174:	e006      	b.n	801b184 <tcp_write+0x660>
            goto memerr;
 801b176:	bf00      	nop
 801b178:	e004      	b.n	801b184 <tcp_write+0x660>
        goto memerr;
 801b17a:	bf00      	nop
 801b17c:	e002      	b.n	801b184 <tcp_write+0x660>
        goto memerr;
 801b17e:	bf00      	nop
 801b180:	e000      	b.n	801b184 <tcp_write+0x660>
      goto memerr;
 801b182:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	8b5b      	ldrh	r3, [r3, #26]
 801b188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b18c:	b29a      	uxth	r2, r3
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801b192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b194:	2b00      	cmp	r3, #0
 801b196:	d002      	beq.n	801b19e <tcp_write+0x67a>
    pbuf_free(concat_p);
 801b198:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801b19a:	f7fa fd8d 	bl	8015cb8 <pbuf_free>
  }
  if (queue != NULL) {
 801b19e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d002      	beq.n	801b1aa <tcp_write+0x686>
    tcp_segs_free(queue);
 801b1a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b1a6:	f7fc fb6f 	bl	8017888 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d00e      	beq.n	801b1d2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d10a      	bne.n	801b1d2 <tcp_write+0x6ae>
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d106      	bne.n	801b1d2 <tcp_write+0x6ae>
 801b1c4:	4b06      	ldr	r3, [pc, #24]	; (801b1e0 <tcp_write+0x6bc>)
 801b1c6:	f240 3227 	movw	r2, #807	; 0x327
 801b1ca:	4906      	ldr	r1, [pc, #24]	; (801b1e4 <tcp_write+0x6c0>)
 801b1cc:	4806      	ldr	r0, [pc, #24]	; (801b1e8 <tcp_write+0x6c4>)
 801b1ce:	f003 ff29 	bl	801f024 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b1d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	375c      	adds	r7, #92	; 0x5c
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	bd90      	pop	{r4, r7, pc}
 801b1de:	bf00      	nop
 801b1e0:	08025ef0 	.word	0x08025ef0
 801b1e4:	08026290 	.word	0x08026290
 801b1e8:	08025f70 	.word	0x08025f70

0801b1ec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801b1ec:	b590      	push	{r4, r7, lr}
 801b1ee:	b08b      	sub	sp, #44	; 0x2c
 801b1f0:	af02      	add	r7, sp, #8
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	460b      	mov	r3, r1
 801b1f6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801b1f8:	2300      	movs	r3, #0
 801b1fa:	61fb      	str	r3, [r7, #28]
 801b1fc:	2300      	movs	r3, #0
 801b1fe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801b200:	2300      	movs	r3, #0
 801b202:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	2b00      	cmp	r3, #0
 801b208:	d106      	bne.n	801b218 <tcp_split_unsent_seg+0x2c>
 801b20a:	4b95      	ldr	r3, [pc, #596]	; (801b460 <tcp_split_unsent_seg+0x274>)
 801b20c:	f240 324b 	movw	r2, #843	; 0x34b
 801b210:	4994      	ldr	r1, [pc, #592]	; (801b464 <tcp_split_unsent_seg+0x278>)
 801b212:	4895      	ldr	r0, [pc, #596]	; (801b468 <tcp_split_unsent_seg+0x27c>)
 801b214:	f003 ff06 	bl	801f024 <iprintf>

  useg = pcb->unsent;
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b21c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801b21e:	697b      	ldr	r3, [r7, #20]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d102      	bne.n	801b22a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801b224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b228:	e116      	b.n	801b458 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801b22a:	887b      	ldrh	r3, [r7, #2]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d109      	bne.n	801b244 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b230:	4b8b      	ldr	r3, [pc, #556]	; (801b460 <tcp_split_unsent_seg+0x274>)
 801b232:	f240 3253 	movw	r2, #851	; 0x353
 801b236:	498d      	ldr	r1, [pc, #564]	; (801b46c <tcp_split_unsent_seg+0x280>)
 801b238:	488b      	ldr	r0, [pc, #556]	; (801b468 <tcp_split_unsent_seg+0x27c>)
 801b23a:	f003 fef3 	bl	801f024 <iprintf>
    return ERR_VAL;
 801b23e:	f06f 0305 	mvn.w	r3, #5
 801b242:	e109      	b.n	801b458 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801b244:	697b      	ldr	r3, [r7, #20]
 801b246:	891b      	ldrh	r3, [r3, #8]
 801b248:	887a      	ldrh	r2, [r7, #2]
 801b24a:	429a      	cmp	r2, r3
 801b24c:	d301      	bcc.n	801b252 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801b24e:	2300      	movs	r3, #0
 801b250:	e102      	b.n	801b458 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b256:	887a      	ldrh	r2, [r7, #2]
 801b258:	429a      	cmp	r2, r3
 801b25a:	d906      	bls.n	801b26a <tcp_split_unsent_seg+0x7e>
 801b25c:	4b80      	ldr	r3, [pc, #512]	; (801b460 <tcp_split_unsent_seg+0x274>)
 801b25e:	f240 325b 	movw	r2, #859	; 0x35b
 801b262:	4983      	ldr	r1, [pc, #524]	; (801b470 <tcp_split_unsent_seg+0x284>)
 801b264:	4880      	ldr	r0, [pc, #512]	; (801b468 <tcp_split_unsent_seg+0x27c>)
 801b266:	f003 fedd 	bl	801f024 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b26a:	697b      	ldr	r3, [r7, #20]
 801b26c:	891b      	ldrh	r3, [r3, #8]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d106      	bne.n	801b280 <tcp_split_unsent_seg+0x94>
 801b272:	4b7b      	ldr	r3, [pc, #492]	; (801b460 <tcp_split_unsent_seg+0x274>)
 801b274:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801b278:	497e      	ldr	r1, [pc, #504]	; (801b474 <tcp_split_unsent_seg+0x288>)
 801b27a:	487b      	ldr	r0, [pc, #492]	; (801b468 <tcp_split_unsent_seg+0x27c>)
 801b27c:	f003 fed2 	bl	801f024 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801b280:	697b      	ldr	r3, [r7, #20]
 801b282:	7a9b      	ldrb	r3, [r3, #10]
 801b284:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b286:	7bfb      	ldrb	r3, [r7, #15]
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	b2db      	uxtb	r3, r3
 801b28c:	f003 0304 	and.w	r3, r3, #4
 801b290:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801b292:	697b      	ldr	r3, [r7, #20]
 801b294:	891a      	ldrh	r2, [r3, #8]
 801b296:	887b      	ldrh	r3, [r7, #2]
 801b298:	1ad3      	subs	r3, r2, r3
 801b29a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b29c:	7bbb      	ldrb	r3, [r7, #14]
 801b29e:	b29a      	uxth	r2, r3
 801b2a0:	89bb      	ldrh	r3, [r7, #12]
 801b2a2:	4413      	add	r3, r2
 801b2a4:	b29b      	uxth	r3, r3
 801b2a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b2aa:	4619      	mov	r1, r3
 801b2ac:	2036      	movs	r0, #54	; 0x36
 801b2ae:	f7fa fa1f 	bl	80156f0 <pbuf_alloc>
 801b2b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b2b4:	693b      	ldr	r3, [r7, #16]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	f000 80b7 	beq.w	801b42a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801b2bc:	697b      	ldr	r3, [r7, #20]
 801b2be:	685b      	ldr	r3, [r3, #4]
 801b2c0:	891a      	ldrh	r2, [r3, #8]
 801b2c2:	697b      	ldr	r3, [r7, #20]
 801b2c4:	891b      	ldrh	r3, [r3, #8]
 801b2c6:	1ad3      	subs	r3, r2, r3
 801b2c8:	b29a      	uxth	r2, r3
 801b2ca:	887b      	ldrh	r3, [r7, #2]
 801b2cc:	4413      	add	r3, r2
 801b2ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b2d0:	697b      	ldr	r3, [r7, #20]
 801b2d2:	6858      	ldr	r0, [r3, #4]
 801b2d4:	693b      	ldr	r3, [r7, #16]
 801b2d6:	685a      	ldr	r2, [r3, #4]
 801b2d8:	7bbb      	ldrb	r3, [r7, #14]
 801b2da:	18d1      	adds	r1, r2, r3
 801b2dc:	897b      	ldrh	r3, [r7, #10]
 801b2de:	89ba      	ldrh	r2, [r7, #12]
 801b2e0:	f7fa fed4 	bl	801608c <pbuf_copy_partial>
 801b2e4:	4603      	mov	r3, r0
 801b2e6:	461a      	mov	r2, r3
 801b2e8:	89bb      	ldrh	r3, [r7, #12]
 801b2ea:	4293      	cmp	r3, r2
 801b2ec:	f040 809f 	bne.w	801b42e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b2f0:	697b      	ldr	r3, [r7, #20]
 801b2f2:	68db      	ldr	r3, [r3, #12]
 801b2f4:	899b      	ldrh	r3, [r3, #12]
 801b2f6:	b29b      	uxth	r3, r3
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	f7f6 fde1 	bl	8011ec0 <lwip_htons>
 801b2fe:	4603      	mov	r3, r0
 801b300:	b2db      	uxtb	r3, r3
 801b302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b306:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801b308:	2300      	movs	r3, #0
 801b30a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801b30c:	7efb      	ldrb	r3, [r7, #27]
 801b30e:	f003 0308 	and.w	r3, r3, #8
 801b312:	2b00      	cmp	r3, #0
 801b314:	d007      	beq.n	801b326 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801b316:	7efb      	ldrb	r3, [r7, #27]
 801b318:	f023 0308 	bic.w	r3, r3, #8
 801b31c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801b31e:	7ebb      	ldrb	r3, [r7, #26]
 801b320:	f043 0308 	orr.w	r3, r3, #8
 801b324:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801b326:	7efb      	ldrb	r3, [r7, #27]
 801b328:	f003 0301 	and.w	r3, r3, #1
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	d007      	beq.n	801b340 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801b330:	7efb      	ldrb	r3, [r7, #27]
 801b332:	f023 0301 	bic.w	r3, r3, #1
 801b336:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b338:	7ebb      	ldrb	r3, [r7, #26]
 801b33a:	f043 0301 	orr.w	r3, r3, #1
 801b33e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b340:	697b      	ldr	r3, [r7, #20]
 801b342:	68db      	ldr	r3, [r3, #12]
 801b344:	685b      	ldr	r3, [r3, #4]
 801b346:	4618      	mov	r0, r3
 801b348:	f7f6 fdcf 	bl	8011eea <lwip_htonl>
 801b34c:	4602      	mov	r2, r0
 801b34e:	887b      	ldrh	r3, [r7, #2]
 801b350:	18d1      	adds	r1, r2, r3
 801b352:	7eba      	ldrb	r2, [r7, #26]
 801b354:	7bfb      	ldrb	r3, [r7, #15]
 801b356:	9300      	str	r3, [sp, #0]
 801b358:	460b      	mov	r3, r1
 801b35a:	6939      	ldr	r1, [r7, #16]
 801b35c:	6878      	ldr	r0, [r7, #4]
 801b35e:	f7ff fa4f 	bl	801a800 <tcp_create_segment>
 801b362:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b364:	69fb      	ldr	r3, [r7, #28]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d063      	beq.n	801b432 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b36a:	697b      	ldr	r3, [r7, #20]
 801b36c:	685b      	ldr	r3, [r3, #4]
 801b36e:	4618      	mov	r0, r3
 801b370:	f7fa fd2a 	bl	8015dc8 <pbuf_clen>
 801b374:	4603      	mov	r3, r0
 801b376:	461a      	mov	r2, r3
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b37e:	1a9b      	subs	r3, r3, r2
 801b380:	b29a      	uxth	r2, r3
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b388:	697b      	ldr	r3, [r7, #20]
 801b38a:	6858      	ldr	r0, [r3, #4]
 801b38c:	697b      	ldr	r3, [r7, #20]
 801b38e:	685b      	ldr	r3, [r3, #4]
 801b390:	891a      	ldrh	r2, [r3, #8]
 801b392:	89bb      	ldrh	r3, [r7, #12]
 801b394:	1ad3      	subs	r3, r2, r3
 801b396:	b29b      	uxth	r3, r3
 801b398:	4619      	mov	r1, r3
 801b39a:	f7fa fb07 	bl	80159ac <pbuf_realloc>
  useg->len -= remainder;
 801b39e:	697b      	ldr	r3, [r7, #20]
 801b3a0:	891a      	ldrh	r2, [r3, #8]
 801b3a2:	89bb      	ldrh	r3, [r7, #12]
 801b3a4:	1ad3      	subs	r3, r2, r3
 801b3a6:	b29a      	uxth	r2, r3
 801b3a8:	697b      	ldr	r3, [r7, #20]
 801b3aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b3ac:	697b      	ldr	r3, [r7, #20]
 801b3ae:	68db      	ldr	r3, [r3, #12]
 801b3b0:	899b      	ldrh	r3, [r3, #12]
 801b3b2:	b29c      	uxth	r4, r3
 801b3b4:	7efb      	ldrb	r3, [r7, #27]
 801b3b6:	b29b      	uxth	r3, r3
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7f6 fd81 	bl	8011ec0 <lwip_htons>
 801b3be:	4603      	mov	r3, r0
 801b3c0:	461a      	mov	r2, r3
 801b3c2:	697b      	ldr	r3, [r7, #20]
 801b3c4:	68db      	ldr	r3, [r3, #12]
 801b3c6:	4322      	orrs	r2, r4
 801b3c8:	b292      	uxth	r2, r2
 801b3ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b3cc:	697b      	ldr	r3, [r7, #20]
 801b3ce:	685b      	ldr	r3, [r3, #4]
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	f7fa fcf9 	bl	8015dc8 <pbuf_clen>
 801b3d6:	4603      	mov	r3, r0
 801b3d8:	461a      	mov	r2, r3
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b3e0:	4413      	add	r3, r2
 801b3e2:	b29a      	uxth	r2, r3
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b3ea:	69fb      	ldr	r3, [r7, #28]
 801b3ec:	685b      	ldr	r3, [r3, #4]
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	f7fa fcea 	bl	8015dc8 <pbuf_clen>
 801b3f4:	4603      	mov	r3, r0
 801b3f6:	461a      	mov	r2, r3
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b3fe:	4413      	add	r3, r2
 801b400:	b29a      	uxth	r2, r3
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b408:	697b      	ldr	r3, [r7, #20]
 801b40a:	681a      	ldr	r2, [r3, #0]
 801b40c:	69fb      	ldr	r3, [r7, #28]
 801b40e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b410:	697b      	ldr	r3, [r7, #20]
 801b412:	69fa      	ldr	r2, [r7, #28]
 801b414:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b416:	69fb      	ldr	r3, [r7, #28]
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d103      	bne.n	801b426 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	2200      	movs	r2, #0
 801b422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b426:	2300      	movs	r3, #0
 801b428:	e016      	b.n	801b458 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b42a:	bf00      	nop
 801b42c:	e002      	b.n	801b434 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b42e:	bf00      	nop
 801b430:	e000      	b.n	801b434 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b432:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b434:	69fb      	ldr	r3, [r7, #28]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d006      	beq.n	801b448 <tcp_split_unsent_seg+0x25c>
 801b43a:	4b09      	ldr	r3, [pc, #36]	; (801b460 <tcp_split_unsent_seg+0x274>)
 801b43c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801b440:	490d      	ldr	r1, [pc, #52]	; (801b478 <tcp_split_unsent_seg+0x28c>)
 801b442:	4809      	ldr	r0, [pc, #36]	; (801b468 <tcp_split_unsent_seg+0x27c>)
 801b444:	f003 fdee 	bl	801f024 <iprintf>
  if (p != NULL) {
 801b448:	693b      	ldr	r3, [r7, #16]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d002      	beq.n	801b454 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b44e:	6938      	ldr	r0, [r7, #16]
 801b450:	f7fa fc32 	bl	8015cb8 <pbuf_free>
  }

  return ERR_MEM;
 801b454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b458:	4618      	mov	r0, r3
 801b45a:	3724      	adds	r7, #36	; 0x24
 801b45c:	46bd      	mov	sp, r7
 801b45e:	bd90      	pop	{r4, r7, pc}
 801b460:	08025ef0 	.word	0x08025ef0
 801b464:	080262b0 	.word	0x080262b0
 801b468:	08025f70 	.word	0x08025f70
 801b46c:	080262d4 	.word	0x080262d4
 801b470:	080262f8 	.word	0x080262f8
 801b474:	08026308 	.word	0x08026308
 801b478:	08026318 	.word	0x08026318

0801b47c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b47c:	b590      	push	{r4, r7, lr}
 801b47e:	b085      	sub	sp, #20
 801b480:	af00      	add	r7, sp, #0
 801b482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d106      	bne.n	801b498 <tcp_send_fin+0x1c>
 801b48a:	4b21      	ldr	r3, [pc, #132]	; (801b510 <tcp_send_fin+0x94>)
 801b48c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801b490:	4920      	ldr	r1, [pc, #128]	; (801b514 <tcp_send_fin+0x98>)
 801b492:	4821      	ldr	r0, [pc, #132]	; (801b518 <tcp_send_fin+0x9c>)
 801b494:	f003 fdc6 	bl	801f024 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d02e      	beq.n	801b4fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4a4:	60fb      	str	r3, [r7, #12]
 801b4a6:	e002      	b.n	801b4ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d1f8      	bne.n	801b4a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	68db      	ldr	r3, [r3, #12]
 801b4ba:	899b      	ldrh	r3, [r3, #12]
 801b4bc:	b29b      	uxth	r3, r3
 801b4be:	4618      	mov	r0, r3
 801b4c0:	f7f6 fcfe 	bl	8011ec0 <lwip_htons>
 801b4c4:	4603      	mov	r3, r0
 801b4c6:	b2db      	uxtb	r3, r3
 801b4c8:	f003 0307 	and.w	r3, r3, #7
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d116      	bne.n	801b4fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	68db      	ldr	r3, [r3, #12]
 801b4d4:	899b      	ldrh	r3, [r3, #12]
 801b4d6:	b29c      	uxth	r4, r3
 801b4d8:	2001      	movs	r0, #1
 801b4da:	f7f6 fcf1 	bl	8011ec0 <lwip_htons>
 801b4de:	4603      	mov	r3, r0
 801b4e0:	461a      	mov	r2, r3
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	68db      	ldr	r3, [r3, #12]
 801b4e6:	4322      	orrs	r2, r4
 801b4e8:	b292      	uxth	r2, r2
 801b4ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	8b5b      	ldrh	r3, [r3, #26]
 801b4f0:	f043 0320 	orr.w	r3, r3, #32
 801b4f4:	b29a      	uxth	r2, r3
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	e004      	b.n	801b508 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b4fe:	2101      	movs	r1, #1
 801b500:	6878      	ldr	r0, [r7, #4]
 801b502:	f000 f80b 	bl	801b51c <tcp_enqueue_flags>
 801b506:	4603      	mov	r3, r0
}
 801b508:	4618      	mov	r0, r3
 801b50a:	3714      	adds	r7, #20
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bd90      	pop	{r4, r7, pc}
 801b510:	08025ef0 	.word	0x08025ef0
 801b514:	08026324 	.word	0x08026324
 801b518:	08025f70 	.word	0x08025f70

0801b51c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b51c:	b580      	push	{r7, lr}
 801b51e:	b08a      	sub	sp, #40	; 0x28
 801b520:	af02      	add	r7, sp, #8
 801b522:	6078      	str	r0, [r7, #4]
 801b524:	460b      	mov	r3, r1
 801b526:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b528:	2300      	movs	r3, #0
 801b52a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b52c:	2300      	movs	r3, #0
 801b52e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b530:	78fb      	ldrb	r3, [r7, #3]
 801b532:	f003 0303 	and.w	r3, r3, #3
 801b536:	2b00      	cmp	r3, #0
 801b538:	d106      	bne.n	801b548 <tcp_enqueue_flags+0x2c>
 801b53a:	4b67      	ldr	r3, [pc, #412]	; (801b6d8 <tcp_enqueue_flags+0x1bc>)
 801b53c:	f240 4211 	movw	r2, #1041	; 0x411
 801b540:	4966      	ldr	r1, [pc, #408]	; (801b6dc <tcp_enqueue_flags+0x1c0>)
 801b542:	4867      	ldr	r0, [pc, #412]	; (801b6e0 <tcp_enqueue_flags+0x1c4>)
 801b544:	f003 fd6e 	bl	801f024 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d106      	bne.n	801b55c <tcp_enqueue_flags+0x40>
 801b54e:	4b62      	ldr	r3, [pc, #392]	; (801b6d8 <tcp_enqueue_flags+0x1bc>)
 801b550:	f240 4213 	movw	r2, #1043	; 0x413
 801b554:	4963      	ldr	r1, [pc, #396]	; (801b6e4 <tcp_enqueue_flags+0x1c8>)
 801b556:	4862      	ldr	r0, [pc, #392]	; (801b6e0 <tcp_enqueue_flags+0x1c4>)
 801b558:	f003 fd64 	bl	801f024 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b55c:	78fb      	ldrb	r3, [r7, #3]
 801b55e:	f003 0302 	and.w	r3, r3, #2
 801b562:	2b00      	cmp	r3, #0
 801b564:	d001      	beq.n	801b56a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b566:	2301      	movs	r3, #1
 801b568:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b56a:	7ffb      	ldrb	r3, [r7, #31]
 801b56c:	009b      	lsls	r3, r3, #2
 801b56e:	b2db      	uxtb	r3, r3
 801b570:	f003 0304 	and.w	r3, r3, #4
 801b574:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b576:	7dfb      	ldrb	r3, [r7, #23]
 801b578:	b29b      	uxth	r3, r3
 801b57a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b57e:	4619      	mov	r1, r3
 801b580:	2036      	movs	r0, #54	; 0x36
 801b582:	f7fa f8b5 	bl	80156f0 <pbuf_alloc>
 801b586:	6138      	str	r0, [r7, #16]
 801b588:	693b      	ldr	r3, [r7, #16]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d109      	bne.n	801b5a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	8b5b      	ldrh	r3, [r3, #26]
 801b592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b596:	b29a      	uxth	r2, r3
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5a0:	e095      	b.n	801b6ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b5a2:	693b      	ldr	r3, [r7, #16]
 801b5a4:	895a      	ldrh	r2, [r3, #10]
 801b5a6:	7dfb      	ldrb	r3, [r7, #23]
 801b5a8:	b29b      	uxth	r3, r3
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	d206      	bcs.n	801b5bc <tcp_enqueue_flags+0xa0>
 801b5ae:	4b4a      	ldr	r3, [pc, #296]	; (801b6d8 <tcp_enqueue_flags+0x1bc>)
 801b5b0:	f240 4239 	movw	r2, #1081	; 0x439
 801b5b4:	494c      	ldr	r1, [pc, #304]	; (801b6e8 <tcp_enqueue_flags+0x1cc>)
 801b5b6:	484a      	ldr	r0, [pc, #296]	; (801b6e0 <tcp_enqueue_flags+0x1c4>)
 801b5b8:	f003 fd34 	bl	801f024 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b5c0:	78fa      	ldrb	r2, [r7, #3]
 801b5c2:	7ffb      	ldrb	r3, [r7, #31]
 801b5c4:	9300      	str	r3, [sp, #0]
 801b5c6:	460b      	mov	r3, r1
 801b5c8:	6939      	ldr	r1, [r7, #16]
 801b5ca:	6878      	ldr	r0, [r7, #4]
 801b5cc:	f7ff f918 	bl	801a800 <tcp_create_segment>
 801b5d0:	60f8      	str	r0, [r7, #12]
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d109      	bne.n	801b5ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	8b5b      	ldrh	r3, [r3, #26]
 801b5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5e0:	b29a      	uxth	r2, r3
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b5e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5ea:	e070      	b.n	801b6ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b5ec:	68fb      	ldr	r3, [r7, #12]
 801b5ee:	68db      	ldr	r3, [r3, #12]
 801b5f0:	f003 0303 	and.w	r3, r3, #3
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d006      	beq.n	801b606 <tcp_enqueue_flags+0xea>
 801b5f8:	4b37      	ldr	r3, [pc, #220]	; (801b6d8 <tcp_enqueue_flags+0x1bc>)
 801b5fa:	f240 4242 	movw	r2, #1090	; 0x442
 801b5fe:	493b      	ldr	r1, [pc, #236]	; (801b6ec <tcp_enqueue_flags+0x1d0>)
 801b600:	4837      	ldr	r0, [pc, #220]	; (801b6e0 <tcp_enqueue_flags+0x1c4>)
 801b602:	f003 fd0f 	bl	801f024 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	891b      	ldrh	r3, [r3, #8]
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d006      	beq.n	801b61c <tcp_enqueue_flags+0x100>
 801b60e:	4b32      	ldr	r3, [pc, #200]	; (801b6d8 <tcp_enqueue_flags+0x1bc>)
 801b610:	f240 4243 	movw	r2, #1091	; 0x443
 801b614:	4936      	ldr	r1, [pc, #216]	; (801b6f0 <tcp_enqueue_flags+0x1d4>)
 801b616:	4832      	ldr	r0, [pc, #200]	; (801b6e0 <tcp_enqueue_flags+0x1c4>)
 801b618:	f003 fd04 	bl	801f024 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b620:	2b00      	cmp	r3, #0
 801b622:	d103      	bne.n	801b62c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	68fa      	ldr	r2, [r7, #12]
 801b628:	66da      	str	r2, [r3, #108]	; 0x6c
 801b62a:	e00d      	b.n	801b648 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b630:	61bb      	str	r3, [r7, #24]
 801b632:	e002      	b.n	801b63a <tcp_enqueue_flags+0x11e>
 801b634:	69bb      	ldr	r3, [r7, #24]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	61bb      	str	r3, [r7, #24]
 801b63a:	69bb      	ldr	r3, [r7, #24]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d1f8      	bne.n	801b634 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b642:	69bb      	ldr	r3, [r7, #24]
 801b644:	68fa      	ldr	r2, [r7, #12]
 801b646:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	2200      	movs	r2, #0
 801b64c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b650:	78fb      	ldrb	r3, [r7, #3]
 801b652:	f003 0302 	and.w	r3, r3, #2
 801b656:	2b00      	cmp	r3, #0
 801b658:	d104      	bne.n	801b664 <tcp_enqueue_flags+0x148>
 801b65a:	78fb      	ldrb	r3, [r7, #3]
 801b65c:	f003 0301 	and.w	r3, r3, #1
 801b660:	2b00      	cmp	r3, #0
 801b662:	d004      	beq.n	801b66e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b668:	1c5a      	adds	r2, r3, #1
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b66e:	78fb      	ldrb	r3, [r7, #3]
 801b670:	f003 0301 	and.w	r3, r3, #1
 801b674:	2b00      	cmp	r3, #0
 801b676:	d006      	beq.n	801b686 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	8b5b      	ldrh	r3, [r3, #26]
 801b67c:	f043 0320 	orr.w	r3, r3, #32
 801b680:	b29a      	uxth	r2, r3
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	685b      	ldr	r3, [r3, #4]
 801b68a:	4618      	mov	r0, r3
 801b68c:	f7fa fb9c 	bl	8015dc8 <pbuf_clen>
 801b690:	4603      	mov	r3, r0
 801b692:	461a      	mov	r2, r3
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b69a:	4413      	add	r3, r2
 801b69c:	b29a      	uxth	r2, r3
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d00e      	beq.n	801b6cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d10a      	bne.n	801b6cc <tcp_enqueue_flags+0x1b0>
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d106      	bne.n	801b6cc <tcp_enqueue_flags+0x1b0>
 801b6be:	4b06      	ldr	r3, [pc, #24]	; (801b6d8 <tcp_enqueue_flags+0x1bc>)
 801b6c0:	f240 4265 	movw	r2, #1125	; 0x465
 801b6c4:	490b      	ldr	r1, [pc, #44]	; (801b6f4 <tcp_enqueue_flags+0x1d8>)
 801b6c6:	4806      	ldr	r0, [pc, #24]	; (801b6e0 <tcp_enqueue_flags+0x1c4>)
 801b6c8:	f003 fcac 	bl	801f024 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b6cc:	2300      	movs	r3, #0
}
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	3720      	adds	r7, #32
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	bd80      	pop	{r7, pc}
 801b6d6:	bf00      	nop
 801b6d8:	08025ef0 	.word	0x08025ef0
 801b6dc:	08026340 	.word	0x08026340
 801b6e0:	08025f70 	.word	0x08025f70
 801b6e4:	08026398 	.word	0x08026398
 801b6e8:	080263b8 	.word	0x080263b8
 801b6ec:	080263f4 	.word	0x080263f4
 801b6f0:	0802640c 	.word	0x0802640c
 801b6f4:	08026438 	.word	0x08026438

0801b6f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b6f8:	b5b0      	push	{r4, r5, r7, lr}
 801b6fa:	b08a      	sub	sp, #40	; 0x28
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d106      	bne.n	801b714 <tcp_output+0x1c>
 801b706:	4b9e      	ldr	r3, [pc, #632]	; (801b980 <tcp_output+0x288>)
 801b708:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b70c:	499d      	ldr	r1, [pc, #628]	; (801b984 <tcp_output+0x28c>)
 801b70e:	489e      	ldr	r0, [pc, #632]	; (801b988 <tcp_output+0x290>)
 801b710:	f003 fc88 	bl	801f024 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	7d1b      	ldrb	r3, [r3, #20]
 801b718:	2b01      	cmp	r3, #1
 801b71a:	d106      	bne.n	801b72a <tcp_output+0x32>
 801b71c:	4b98      	ldr	r3, [pc, #608]	; (801b980 <tcp_output+0x288>)
 801b71e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b722:	499a      	ldr	r1, [pc, #616]	; (801b98c <tcp_output+0x294>)
 801b724:	4898      	ldr	r0, [pc, #608]	; (801b988 <tcp_output+0x290>)
 801b726:	f003 fc7d 	bl	801f024 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b72a:	4b99      	ldr	r3, [pc, #612]	; (801b990 <tcp_output+0x298>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	687a      	ldr	r2, [r7, #4]
 801b730:	429a      	cmp	r2, r3
 801b732:	d101      	bne.n	801b738 <tcp_output+0x40>
    return ERR_OK;
 801b734:	2300      	movs	r3, #0
 801b736:	e1ce      	b.n	801bad6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b744:	4293      	cmp	r3, r2
 801b746:	bf28      	it	cs
 801b748:	4613      	movcs	r3, r2
 801b74a:	b29b      	uxth	r3, r3
 801b74c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b752:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b756:	2b00      	cmp	r3, #0
 801b758:	d10b      	bne.n	801b772 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	8b5b      	ldrh	r3, [r3, #26]
 801b75e:	f003 0302 	and.w	r3, r3, #2
 801b762:	2b00      	cmp	r3, #0
 801b764:	f000 81aa 	beq.w	801babc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b768:	6878      	ldr	r0, [r7, #4]
 801b76a:	f000 fdcb 	bl	801c304 <tcp_send_empty_ack>
 801b76e:	4603      	mov	r3, r0
 801b770:	e1b1      	b.n	801bad6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b772:	6879      	ldr	r1, [r7, #4]
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	3304      	adds	r3, #4
 801b778:	461a      	mov	r2, r3
 801b77a:	6878      	ldr	r0, [r7, #4]
 801b77c:	f7ff f824 	bl	801a7c8 <tcp_route>
 801b780:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b782:	697b      	ldr	r3, [r7, #20]
 801b784:	2b00      	cmp	r3, #0
 801b786:	d102      	bne.n	801b78e <tcp_output+0x96>
    return ERR_RTE;
 801b788:	f06f 0303 	mvn.w	r3, #3
 801b78c:	e1a3      	b.n	801bad6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d003      	beq.n	801b79c <tcp_output+0xa4>
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d111      	bne.n	801b7c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b79c:	697b      	ldr	r3, [r7, #20]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d002      	beq.n	801b7a8 <tcp_output+0xb0>
 801b7a2:	697b      	ldr	r3, [r7, #20]
 801b7a4:	3304      	adds	r3, #4
 801b7a6:	e000      	b.n	801b7aa <tcp_output+0xb2>
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b7ac:	693b      	ldr	r3, [r7, #16]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d102      	bne.n	801b7b8 <tcp_output+0xc0>
      return ERR_RTE;
 801b7b2:	f06f 0303 	mvn.w	r3, #3
 801b7b6:	e18e      	b.n	801bad6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b7b8:	693b      	ldr	r3, [r7, #16]
 801b7ba:	681a      	ldr	r2, [r3, #0]
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7c2:	68db      	ldr	r3, [r3, #12]
 801b7c4:	685b      	ldr	r3, [r3, #4]
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7f6 fb8f 	bl	8011eea <lwip_htonl>
 801b7cc:	4602      	mov	r2, r0
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7d2:	1ad3      	subs	r3, r2, r3
 801b7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b7d6:	8912      	ldrh	r2, [r2, #8]
 801b7d8:	4413      	add	r3, r2
 801b7da:	69ba      	ldr	r2, [r7, #24]
 801b7dc:	429a      	cmp	r2, r3
 801b7de:	d227      	bcs.n	801b830 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b7e6:	461a      	mov	r2, r3
 801b7e8:	69bb      	ldr	r3, [r7, #24]
 801b7ea:	4293      	cmp	r3, r2
 801b7ec:	d114      	bne.n	801b818 <tcp_output+0x120>
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d110      	bne.n	801b818 <tcp_output+0x120>
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d10b      	bne.n	801b818 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	2200      	movs	r2, #0
 801b804:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	2201      	movs	r2, #1
 801b80c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	2200      	movs	r2, #0
 801b814:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	8b5b      	ldrh	r3, [r3, #26]
 801b81c:	f003 0302 	and.w	r3, r3, #2
 801b820:	2b00      	cmp	r3, #0
 801b822:	f000 814d 	beq.w	801bac0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b826:	6878      	ldr	r0, [r7, #4]
 801b828:	f000 fd6c 	bl	801c304 <tcp_send_empty_ack>
 801b82c:	4603      	mov	r3, r0
 801b82e:	e152      	b.n	801bad6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	2200      	movs	r2, #0
 801b834:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b83c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b83e:	6a3b      	ldr	r3, [r7, #32]
 801b840:	2b00      	cmp	r3, #0
 801b842:	f000 811c 	beq.w	801ba7e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b846:	e002      	b.n	801b84e <tcp_output+0x156>
 801b848:	6a3b      	ldr	r3, [r7, #32]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	623b      	str	r3, [r7, #32]
 801b84e:	6a3b      	ldr	r3, [r7, #32]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d1f8      	bne.n	801b848 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b856:	e112      	b.n	801ba7e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b85a:	68db      	ldr	r3, [r3, #12]
 801b85c:	899b      	ldrh	r3, [r3, #12]
 801b85e:	b29b      	uxth	r3, r3
 801b860:	4618      	mov	r0, r3
 801b862:	f7f6 fb2d 	bl	8011ec0 <lwip_htons>
 801b866:	4603      	mov	r3, r0
 801b868:	b2db      	uxtb	r3, r3
 801b86a:	f003 0304 	and.w	r3, r3, #4
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d006      	beq.n	801b880 <tcp_output+0x188>
 801b872:	4b43      	ldr	r3, [pc, #268]	; (801b980 <tcp_output+0x288>)
 801b874:	f240 5236 	movw	r2, #1334	; 0x536
 801b878:	4946      	ldr	r1, [pc, #280]	; (801b994 <tcp_output+0x29c>)
 801b87a:	4843      	ldr	r0, [pc, #268]	; (801b988 <tcp_output+0x290>)
 801b87c:	f003 fbd2 	bl	801f024 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b884:	2b00      	cmp	r3, #0
 801b886:	d01f      	beq.n	801b8c8 <tcp_output+0x1d0>
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	8b5b      	ldrh	r3, [r3, #26]
 801b88c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b890:	2b00      	cmp	r3, #0
 801b892:	d119      	bne.n	801b8c8 <tcp_output+0x1d0>
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d00b      	beq.n	801b8b4 <tcp_output+0x1bc>
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d110      	bne.n	801b8c8 <tcp_output+0x1d0>
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8aa:	891a      	ldrh	r2, [r3, #8]
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b8b0:	429a      	cmp	r2, r3
 801b8b2:	d209      	bcs.n	801b8c8 <tcp_output+0x1d0>
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d004      	beq.n	801b8c8 <tcp_output+0x1d0>
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b8c4:	2b08      	cmp	r3, #8
 801b8c6:	d901      	bls.n	801b8cc <tcp_output+0x1d4>
 801b8c8:	2301      	movs	r3, #1
 801b8ca:	e000      	b.n	801b8ce <tcp_output+0x1d6>
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d106      	bne.n	801b8e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	8b5b      	ldrh	r3, [r3, #26]
 801b8d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	f000 80e4 	beq.w	801baa8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	7d1b      	ldrb	r3, [r3, #20]
 801b8e4:	2b02      	cmp	r3, #2
 801b8e6:	d00d      	beq.n	801b904 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8ea:	68db      	ldr	r3, [r3, #12]
 801b8ec:	899b      	ldrh	r3, [r3, #12]
 801b8ee:	b29c      	uxth	r4, r3
 801b8f0:	2010      	movs	r0, #16
 801b8f2:	f7f6 fae5 	bl	8011ec0 <lwip_htons>
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	461a      	mov	r2, r3
 801b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8fc:	68db      	ldr	r3, [r3, #12]
 801b8fe:	4322      	orrs	r2, r4
 801b900:	b292      	uxth	r2, r2
 801b902:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b904:	697a      	ldr	r2, [r7, #20]
 801b906:	6879      	ldr	r1, [r7, #4]
 801b908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b90a:	f000 f909 	bl	801bb20 <tcp_output_segment>
 801b90e:	4603      	mov	r3, r0
 801b910:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b916:	2b00      	cmp	r3, #0
 801b918:	d009      	beq.n	801b92e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	8b5b      	ldrh	r3, [r3, #26]
 801b91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b922:	b29a      	uxth	r2, r3
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	835a      	strh	r2, [r3, #26]
      return err;
 801b928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b92c:	e0d3      	b.n	801bad6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b930:	681a      	ldr	r2, [r3, #0]
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	7d1b      	ldrb	r3, [r3, #20]
 801b93a:	2b02      	cmp	r3, #2
 801b93c:	d006      	beq.n	801b94c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	8b5b      	ldrh	r3, [r3, #26]
 801b942:	f023 0303 	bic.w	r3, r3, #3
 801b946:	b29a      	uxth	r2, r3
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b94e:	68db      	ldr	r3, [r3, #12]
 801b950:	685b      	ldr	r3, [r3, #4]
 801b952:	4618      	mov	r0, r3
 801b954:	f7f6 fac9 	bl	8011eea <lwip_htonl>
 801b958:	4604      	mov	r4, r0
 801b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b95c:	891b      	ldrh	r3, [r3, #8]
 801b95e:	461d      	mov	r5, r3
 801b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b962:	68db      	ldr	r3, [r3, #12]
 801b964:	899b      	ldrh	r3, [r3, #12]
 801b966:	b29b      	uxth	r3, r3
 801b968:	4618      	mov	r0, r3
 801b96a:	f7f6 faa9 	bl	8011ec0 <lwip_htons>
 801b96e:	4603      	mov	r3, r0
 801b970:	b2db      	uxtb	r3, r3
 801b972:	f003 0303 	and.w	r3, r3, #3
 801b976:	2b00      	cmp	r3, #0
 801b978:	d00e      	beq.n	801b998 <tcp_output+0x2a0>
 801b97a:	2301      	movs	r3, #1
 801b97c:	e00d      	b.n	801b99a <tcp_output+0x2a2>
 801b97e:	bf00      	nop
 801b980:	08025ef0 	.word	0x08025ef0
 801b984:	08026460 	.word	0x08026460
 801b988:	08025f70 	.word	0x08025f70
 801b98c:	08026478 	.word	0x08026478
 801b990:	24008a38 	.word	0x24008a38
 801b994:	080264a0 	.word	0x080264a0
 801b998:	2300      	movs	r3, #0
 801b99a:	442b      	add	r3, r5
 801b99c:	4423      	add	r3, r4
 801b99e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b9a4:	68bb      	ldr	r3, [r7, #8]
 801b9a6:	1ad3      	subs	r3, r2, r3
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	da02      	bge.n	801b9b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	68ba      	ldr	r2, [r7, #8]
 801b9b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9b4:	891b      	ldrh	r3, [r3, #8]
 801b9b6:	461c      	mov	r4, r3
 801b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9ba:	68db      	ldr	r3, [r3, #12]
 801b9bc:	899b      	ldrh	r3, [r3, #12]
 801b9be:	b29b      	uxth	r3, r3
 801b9c0:	4618      	mov	r0, r3
 801b9c2:	f7f6 fa7d 	bl	8011ec0 <lwip_htons>
 801b9c6:	4603      	mov	r3, r0
 801b9c8:	b2db      	uxtb	r3, r3
 801b9ca:	f003 0303 	and.w	r3, r3, #3
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d001      	beq.n	801b9d6 <tcp_output+0x2de>
 801b9d2:	2301      	movs	r3, #1
 801b9d4:	e000      	b.n	801b9d8 <tcp_output+0x2e0>
 801b9d6:	2300      	movs	r3, #0
 801b9d8:	4423      	add	r3, r4
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d049      	beq.n	801ba72 <tcp_output+0x37a>
      seg->next = NULL;
 801b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9e0:	2200      	movs	r2, #0
 801b9e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d105      	bne.n	801b9f8 <tcp_output+0x300>
        pcb->unacked = seg;
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b9f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9f4:	623b      	str	r3, [r7, #32]
 801b9f6:	e03f      	b.n	801ba78 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9fa:	68db      	ldr	r3, [r3, #12]
 801b9fc:	685b      	ldr	r3, [r3, #4]
 801b9fe:	4618      	mov	r0, r3
 801ba00:	f7f6 fa73 	bl	8011eea <lwip_htonl>
 801ba04:	4604      	mov	r4, r0
 801ba06:	6a3b      	ldr	r3, [r7, #32]
 801ba08:	68db      	ldr	r3, [r3, #12]
 801ba0a:	685b      	ldr	r3, [r3, #4]
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	f7f6 fa6c 	bl	8011eea <lwip_htonl>
 801ba12:	4603      	mov	r3, r0
 801ba14:	1ae3      	subs	r3, r4, r3
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	da24      	bge.n	801ba64 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	3370      	adds	r3, #112	; 0x70
 801ba1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ba20:	e002      	b.n	801ba28 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ba22:	69fb      	ldr	r3, [r7, #28]
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ba28:	69fb      	ldr	r3, [r7, #28]
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d011      	beq.n	801ba54 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ba30:	69fb      	ldr	r3, [r7, #28]
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	68db      	ldr	r3, [r3, #12]
 801ba36:	685b      	ldr	r3, [r3, #4]
 801ba38:	4618      	mov	r0, r3
 801ba3a:	f7f6 fa56 	bl	8011eea <lwip_htonl>
 801ba3e:	4604      	mov	r4, r0
 801ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba42:	68db      	ldr	r3, [r3, #12]
 801ba44:	685b      	ldr	r3, [r3, #4]
 801ba46:	4618      	mov	r0, r3
 801ba48:	f7f6 fa4f 	bl	8011eea <lwip_htonl>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	dbe6      	blt.n	801ba22 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ba54:	69fb      	ldr	r3, [r7, #28]
 801ba56:	681a      	ldr	r2, [r3, #0]
 801ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba5a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ba5c:	69fb      	ldr	r3, [r7, #28]
 801ba5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba60:	601a      	str	r2, [r3, #0]
 801ba62:	e009      	b.n	801ba78 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ba64:	6a3b      	ldr	r3, [r7, #32]
 801ba66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba68:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ba6a:	6a3b      	ldr	r3, [r7, #32]
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	623b      	str	r3, [r7, #32]
 801ba70:	e002      	b.n	801ba78 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ba72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ba74:	f7fb ff1d 	bl	80178b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d012      	beq.n	801baaa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba86:	68db      	ldr	r3, [r3, #12]
 801ba88:	685b      	ldr	r3, [r3, #4]
 801ba8a:	4618      	mov	r0, r3
 801ba8c:	f7f6 fa2d 	bl	8011eea <lwip_htonl>
 801ba90:	4602      	mov	r2, r0
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba96:	1ad3      	subs	r3, r2, r3
 801ba98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ba9a:	8912      	ldrh	r2, [r2, #8]
 801ba9c:	4413      	add	r3, r2
  while (seg != NULL &&
 801ba9e:	69ba      	ldr	r2, [r7, #24]
 801baa0:	429a      	cmp	r2, r3
 801baa2:	f4bf aed9 	bcs.w	801b858 <tcp_output+0x160>
 801baa6:	e000      	b.n	801baaa <tcp_output+0x3b2>
      break;
 801baa8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d108      	bne.n	801bac4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	2200      	movs	r2, #0
 801bab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801baba:	e004      	b.n	801bac6 <tcp_output+0x3ce>
    goto output_done;
 801babc:	bf00      	nop
 801babe:	e002      	b.n	801bac6 <tcp_output+0x3ce>
    goto output_done;
 801bac0:	bf00      	nop
 801bac2:	e000      	b.n	801bac6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801bac4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	8b5b      	ldrh	r3, [r3, #26]
 801baca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bace:	b29a      	uxth	r2, r3
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801bad4:	2300      	movs	r3, #0
}
 801bad6:	4618      	mov	r0, r3
 801bad8:	3728      	adds	r7, #40	; 0x28
 801bada:	46bd      	mov	sp, r7
 801badc:	bdb0      	pop	{r4, r5, r7, pc}
 801bade:	bf00      	nop

0801bae0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801bae0:	b580      	push	{r7, lr}
 801bae2:	b082      	sub	sp, #8
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d106      	bne.n	801bafc <tcp_output_segment_busy+0x1c>
 801baee:	4b09      	ldr	r3, [pc, #36]	; (801bb14 <tcp_output_segment_busy+0x34>)
 801baf0:	f240 529a 	movw	r2, #1434	; 0x59a
 801baf4:	4908      	ldr	r1, [pc, #32]	; (801bb18 <tcp_output_segment_busy+0x38>)
 801baf6:	4809      	ldr	r0, [pc, #36]	; (801bb1c <tcp_output_segment_busy+0x3c>)
 801baf8:	f003 fa94 	bl	801f024 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	685b      	ldr	r3, [r3, #4]
 801bb00:	7b9b      	ldrb	r3, [r3, #14]
 801bb02:	2b01      	cmp	r3, #1
 801bb04:	d001      	beq.n	801bb0a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801bb06:	2301      	movs	r3, #1
 801bb08:	e000      	b.n	801bb0c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801bb0a:	2300      	movs	r3, #0
}
 801bb0c:	4618      	mov	r0, r3
 801bb0e:	3708      	adds	r7, #8
 801bb10:	46bd      	mov	sp, r7
 801bb12:	bd80      	pop	{r7, pc}
 801bb14:	08025ef0 	.word	0x08025ef0
 801bb18:	080264b8 	.word	0x080264b8
 801bb1c:	08025f70 	.word	0x08025f70

0801bb20 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801bb20:	b5b0      	push	{r4, r5, r7, lr}
 801bb22:	b08c      	sub	sp, #48	; 0x30
 801bb24:	af04      	add	r7, sp, #16
 801bb26:	60f8      	str	r0, [r7, #12]
 801bb28:	60b9      	str	r1, [r7, #8]
 801bb2a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d106      	bne.n	801bb40 <tcp_output_segment+0x20>
 801bb32:	4b63      	ldr	r3, [pc, #396]	; (801bcc0 <tcp_output_segment+0x1a0>)
 801bb34:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801bb38:	4962      	ldr	r1, [pc, #392]	; (801bcc4 <tcp_output_segment+0x1a4>)
 801bb3a:	4863      	ldr	r0, [pc, #396]	; (801bcc8 <tcp_output_segment+0x1a8>)
 801bb3c:	f003 fa72 	bl	801f024 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801bb40:	68bb      	ldr	r3, [r7, #8]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d106      	bne.n	801bb54 <tcp_output_segment+0x34>
 801bb46:	4b5e      	ldr	r3, [pc, #376]	; (801bcc0 <tcp_output_segment+0x1a0>)
 801bb48:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801bb4c:	495f      	ldr	r1, [pc, #380]	; (801bccc <tcp_output_segment+0x1ac>)
 801bb4e:	485e      	ldr	r0, [pc, #376]	; (801bcc8 <tcp_output_segment+0x1a8>)
 801bb50:	f003 fa68 	bl	801f024 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d106      	bne.n	801bb68 <tcp_output_segment+0x48>
 801bb5a:	4b59      	ldr	r3, [pc, #356]	; (801bcc0 <tcp_output_segment+0x1a0>)
 801bb5c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801bb60:	495b      	ldr	r1, [pc, #364]	; (801bcd0 <tcp_output_segment+0x1b0>)
 801bb62:	4859      	ldr	r0, [pc, #356]	; (801bcc8 <tcp_output_segment+0x1a8>)
 801bb64:	f003 fa5e 	bl	801f024 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801bb68:	68f8      	ldr	r0, [r7, #12]
 801bb6a:	f7ff ffb9 	bl	801bae0 <tcp_output_segment_busy>
 801bb6e:	4603      	mov	r3, r0
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d001      	beq.n	801bb78 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801bb74:	2300      	movs	r3, #0
 801bb76:	e09f      	b.n	801bcb8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801bb78:	68bb      	ldr	r3, [r7, #8]
 801bb7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bb7c:	68fb      	ldr	r3, [r7, #12]
 801bb7e:	68dc      	ldr	r4, [r3, #12]
 801bb80:	4610      	mov	r0, r2
 801bb82:	f7f6 f9b2 	bl	8011eea <lwip_htonl>
 801bb86:	4603      	mov	r3, r0
 801bb88:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801bb8a:	68bb      	ldr	r3, [r7, #8]
 801bb8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	68dc      	ldr	r4, [r3, #12]
 801bb92:	4610      	mov	r0, r2
 801bb94:	f7f6 f994 	bl	8011ec0 <lwip_htons>
 801bb98:	4603      	mov	r3, r0
 801bb9a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bba0:	68ba      	ldr	r2, [r7, #8]
 801bba2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bba4:	441a      	add	r2, r3
 801bba6:	68bb      	ldr	r3, [r7, #8]
 801bba8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	68db      	ldr	r3, [r3, #12]
 801bbae:	3314      	adds	r3, #20
 801bbb0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	7a9b      	ldrb	r3, [r3, #10]
 801bbb6:	f003 0301 	and.w	r3, r3, #1
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d015      	beq.n	801bbea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801bbbe:	68bb      	ldr	r3, [r7, #8]
 801bbc0:	3304      	adds	r3, #4
 801bbc2:	461a      	mov	r2, r3
 801bbc4:	6879      	ldr	r1, [r7, #4]
 801bbc6:	f44f 7006 	mov.w	r0, #536	; 0x218
 801bbca:	f7fc fa37 	bl	801803c <tcp_eff_send_mss_netif>
 801bbce:	4603      	mov	r3, r0
 801bbd0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801bbd2:	8b7b      	ldrh	r3, [r7, #26]
 801bbd4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801bbd8:	4618      	mov	r0, r3
 801bbda:	f7f6 f986 	bl	8011eea <lwip_htonl>
 801bbde:	4602      	mov	r2, r0
 801bbe0:	69fb      	ldr	r3, [r7, #28]
 801bbe2:	601a      	str	r2, [r3, #0]
    opts += 1;
 801bbe4:	69fb      	ldr	r3, [r7, #28]
 801bbe6:	3304      	adds	r3, #4
 801bbe8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801bbea:	68bb      	ldr	r3, [r7, #8]
 801bbec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	da02      	bge.n	801bbfa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801bbfa:	68bb      	ldr	r3, [r7, #8]
 801bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d10c      	bne.n	801bc1c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801bc02:	4b34      	ldr	r3, [pc, #208]	; (801bcd4 <tcp_output_segment+0x1b4>)
 801bc04:	681a      	ldr	r2, [r3, #0]
 801bc06:	68bb      	ldr	r3, [r7, #8]
 801bc08:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	68db      	ldr	r3, [r3, #12]
 801bc0e:	685b      	ldr	r3, [r3, #4]
 801bc10:	4618      	mov	r0, r3
 801bc12:	f7f6 f96a 	bl	8011eea <lwip_htonl>
 801bc16:	4602      	mov	r2, r0
 801bc18:	68bb      	ldr	r3, [r7, #8]
 801bc1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	68da      	ldr	r2, [r3, #12]
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	685b      	ldr	r3, [r3, #4]
 801bc24:	685b      	ldr	r3, [r3, #4]
 801bc26:	1ad3      	subs	r3, r2, r3
 801bc28:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	685b      	ldr	r3, [r3, #4]
 801bc2e:	8959      	ldrh	r1, [r3, #10]
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	685b      	ldr	r3, [r3, #4]
 801bc34:	8b3a      	ldrh	r2, [r7, #24]
 801bc36:	1a8a      	subs	r2, r1, r2
 801bc38:	b292      	uxth	r2, r2
 801bc3a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	685b      	ldr	r3, [r3, #4]
 801bc40:	8919      	ldrh	r1, [r3, #8]
 801bc42:	68fb      	ldr	r3, [r7, #12]
 801bc44:	685b      	ldr	r3, [r3, #4]
 801bc46:	8b3a      	ldrh	r2, [r7, #24]
 801bc48:	1a8a      	subs	r2, r1, r2
 801bc4a:	b292      	uxth	r2, r2
 801bc4c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	685b      	ldr	r3, [r3, #4]
 801bc52:	68fa      	ldr	r2, [r7, #12]
 801bc54:	68d2      	ldr	r2, [r2, #12]
 801bc56:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	68db      	ldr	r3, [r3, #12]
 801bc5c:	2200      	movs	r2, #0
 801bc5e:	741a      	strb	r2, [r3, #16]
 801bc60:	2200      	movs	r2, #0
 801bc62:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	68db      	ldr	r3, [r3, #12]
 801bc68:	f103 0214 	add.w	r2, r3, #20
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	7a9b      	ldrb	r3, [r3, #10]
 801bc70:	009b      	lsls	r3, r3, #2
 801bc72:	f003 0304 	and.w	r3, r3, #4
 801bc76:	4413      	add	r3, r2
 801bc78:	69fa      	ldr	r2, [r7, #28]
 801bc7a:	429a      	cmp	r2, r3
 801bc7c:	d006      	beq.n	801bc8c <tcp_output_segment+0x16c>
 801bc7e:	4b10      	ldr	r3, [pc, #64]	; (801bcc0 <tcp_output_segment+0x1a0>)
 801bc80:	f240 621c 	movw	r2, #1564	; 0x61c
 801bc84:	4914      	ldr	r1, [pc, #80]	; (801bcd8 <tcp_output_segment+0x1b8>)
 801bc86:	4810      	ldr	r0, [pc, #64]	; (801bcc8 <tcp_output_segment+0x1a8>)
 801bc88:	f003 f9cc 	bl	801f024 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	6858      	ldr	r0, [r3, #4]
 801bc90:	68b9      	ldr	r1, [r7, #8]
 801bc92:	68bb      	ldr	r3, [r7, #8]
 801bc94:	1d1c      	adds	r4, r3, #4
 801bc96:	68bb      	ldr	r3, [r7, #8]
 801bc98:	7add      	ldrb	r5, [r3, #11]
 801bc9a:	68bb      	ldr	r3, [r7, #8]
 801bc9c:	7a9b      	ldrb	r3, [r3, #10]
 801bc9e:	687a      	ldr	r2, [r7, #4]
 801bca0:	9202      	str	r2, [sp, #8]
 801bca2:	2206      	movs	r2, #6
 801bca4:	9201      	str	r2, [sp, #4]
 801bca6:	9300      	str	r3, [sp, #0]
 801bca8:	462b      	mov	r3, r5
 801bcaa:	4622      	mov	r2, r4
 801bcac:	f7f7 fd9c 	bl	80137e8 <ip4_output_if>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801bcb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bcb8:	4618      	mov	r0, r3
 801bcba:	3720      	adds	r7, #32
 801bcbc:	46bd      	mov	sp, r7
 801bcbe:	bdb0      	pop	{r4, r5, r7, pc}
 801bcc0:	08025ef0 	.word	0x08025ef0
 801bcc4:	080264e0 	.word	0x080264e0
 801bcc8:	08025f70 	.word	0x08025f70
 801bccc:	08026500 	.word	0x08026500
 801bcd0:	08026520 	.word	0x08026520
 801bcd4:	24008a28 	.word	0x24008a28
 801bcd8:	08026544 	.word	0x08026544

0801bcdc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801bcdc:	b5b0      	push	{r4, r5, r7, lr}
 801bcde:	b084      	sub	sp, #16
 801bce0:	af00      	add	r7, sp, #0
 801bce2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d106      	bne.n	801bcf8 <tcp_rexmit_rto_prepare+0x1c>
 801bcea:	4b31      	ldr	r3, [pc, #196]	; (801bdb0 <tcp_rexmit_rto_prepare+0xd4>)
 801bcec:	f240 6263 	movw	r2, #1635	; 0x663
 801bcf0:	4930      	ldr	r1, [pc, #192]	; (801bdb4 <tcp_rexmit_rto_prepare+0xd8>)
 801bcf2:	4831      	ldr	r0, [pc, #196]	; (801bdb8 <tcp_rexmit_rto_prepare+0xdc>)
 801bcf4:	f003 f996 	bl	801f024 <iprintf>

  if (pcb->unacked == NULL) {
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d102      	bne.n	801bd06 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801bd00:	f06f 0305 	mvn.w	r3, #5
 801bd04:	e050      	b.n	801bda8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd0a:	60fb      	str	r3, [r7, #12]
 801bd0c:	e00b      	b.n	801bd26 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801bd0e:	68f8      	ldr	r0, [r7, #12]
 801bd10:	f7ff fee6 	bl	801bae0 <tcp_output_segment_busy>
 801bd14:	4603      	mov	r3, r0
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d002      	beq.n	801bd20 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801bd1a:	f06f 0305 	mvn.w	r3, #5
 801bd1e:	e043      	b.n	801bda8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	60fb      	str	r3, [r7, #12]
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d1ef      	bne.n	801bd0e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801bd2e:	68f8      	ldr	r0, [r7, #12]
 801bd30:	f7ff fed6 	bl	801bae0 <tcp_output_segment_busy>
 801bd34:	4603      	mov	r3, r0
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d002      	beq.n	801bd40 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801bd3a:	f06f 0305 	mvn.w	r3, #5
 801bd3e:	e033      	b.n	801bda8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	2200      	movs	r2, #0
 801bd54:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	8b5b      	ldrh	r3, [r3, #26]
 801bd5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bd5e:	b29a      	uxth	r2, r3
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	68db      	ldr	r3, [r3, #12]
 801bd68:	685b      	ldr	r3, [r3, #4]
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	f7f6 f8bd 	bl	8011eea <lwip_htonl>
 801bd70:	4604      	mov	r4, r0
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	891b      	ldrh	r3, [r3, #8]
 801bd76:	461d      	mov	r5, r3
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	68db      	ldr	r3, [r3, #12]
 801bd7c:	899b      	ldrh	r3, [r3, #12]
 801bd7e:	b29b      	uxth	r3, r3
 801bd80:	4618      	mov	r0, r3
 801bd82:	f7f6 f89d 	bl	8011ec0 <lwip_htons>
 801bd86:	4603      	mov	r3, r0
 801bd88:	b2db      	uxtb	r3, r3
 801bd8a:	f003 0303 	and.w	r3, r3, #3
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d001      	beq.n	801bd96 <tcp_rexmit_rto_prepare+0xba>
 801bd92:	2301      	movs	r3, #1
 801bd94:	e000      	b.n	801bd98 <tcp_rexmit_rto_prepare+0xbc>
 801bd96:	2300      	movs	r3, #0
 801bd98:	442b      	add	r3, r5
 801bd9a:	18e2      	adds	r2, r4, r3
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	2200      	movs	r2, #0
 801bda4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801bda6:	2300      	movs	r3, #0
}
 801bda8:	4618      	mov	r0, r3
 801bdaa:	3710      	adds	r7, #16
 801bdac:	46bd      	mov	sp, r7
 801bdae:	bdb0      	pop	{r4, r5, r7, pc}
 801bdb0:	08025ef0 	.word	0x08025ef0
 801bdb4:	08026558 	.word	0x08026558
 801bdb8:	08025f70 	.word	0x08025f70

0801bdbc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801bdbc:	b580      	push	{r7, lr}
 801bdbe:	b082      	sub	sp, #8
 801bdc0:	af00      	add	r7, sp, #0
 801bdc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d106      	bne.n	801bdd8 <tcp_rexmit_rto_commit+0x1c>
 801bdca:	4b0d      	ldr	r3, [pc, #52]	; (801be00 <tcp_rexmit_rto_commit+0x44>)
 801bdcc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801bdd0:	490c      	ldr	r1, [pc, #48]	; (801be04 <tcp_rexmit_rto_commit+0x48>)
 801bdd2:	480d      	ldr	r0, [pc, #52]	; (801be08 <tcp_rexmit_rto_commit+0x4c>)
 801bdd4:	f003 f926 	bl	801f024 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bdde:	2bff      	cmp	r3, #255	; 0xff
 801bde0:	d007      	beq.n	801bdf2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bde8:	3301      	adds	r3, #1
 801bdea:	b2da      	uxtb	r2, r3
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801bdf2:	6878      	ldr	r0, [r7, #4]
 801bdf4:	f7ff fc80 	bl	801b6f8 <tcp_output>
}
 801bdf8:	bf00      	nop
 801bdfa:	3708      	adds	r7, #8
 801bdfc:	46bd      	mov	sp, r7
 801bdfe:	bd80      	pop	{r7, pc}
 801be00:	08025ef0 	.word	0x08025ef0
 801be04:	0802657c 	.word	0x0802657c
 801be08:	08025f70 	.word	0x08025f70

0801be0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	b082      	sub	sp, #8
 801be10:	af00      	add	r7, sp, #0
 801be12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	2b00      	cmp	r3, #0
 801be18:	d106      	bne.n	801be28 <tcp_rexmit_rto+0x1c>
 801be1a:	4b0a      	ldr	r3, [pc, #40]	; (801be44 <tcp_rexmit_rto+0x38>)
 801be1c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801be20:	4909      	ldr	r1, [pc, #36]	; (801be48 <tcp_rexmit_rto+0x3c>)
 801be22:	480a      	ldr	r0, [pc, #40]	; (801be4c <tcp_rexmit_rto+0x40>)
 801be24:	f003 f8fe 	bl	801f024 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801be28:	6878      	ldr	r0, [r7, #4]
 801be2a:	f7ff ff57 	bl	801bcdc <tcp_rexmit_rto_prepare>
 801be2e:	4603      	mov	r3, r0
 801be30:	2b00      	cmp	r3, #0
 801be32:	d102      	bne.n	801be3a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801be34:	6878      	ldr	r0, [r7, #4]
 801be36:	f7ff ffc1 	bl	801bdbc <tcp_rexmit_rto_commit>
  }
}
 801be3a:	bf00      	nop
 801be3c:	3708      	adds	r7, #8
 801be3e:	46bd      	mov	sp, r7
 801be40:	bd80      	pop	{r7, pc}
 801be42:	bf00      	nop
 801be44:	08025ef0 	.word	0x08025ef0
 801be48:	080265a0 	.word	0x080265a0
 801be4c:	08025f70 	.word	0x08025f70

0801be50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801be50:	b590      	push	{r4, r7, lr}
 801be52:	b085      	sub	sp, #20
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d106      	bne.n	801be6c <tcp_rexmit+0x1c>
 801be5e:	4b2f      	ldr	r3, [pc, #188]	; (801bf1c <tcp_rexmit+0xcc>)
 801be60:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801be64:	492e      	ldr	r1, [pc, #184]	; (801bf20 <tcp_rexmit+0xd0>)
 801be66:	482f      	ldr	r0, [pc, #188]	; (801bf24 <tcp_rexmit+0xd4>)
 801be68:	f003 f8dc 	bl	801f024 <iprintf>

  if (pcb->unacked == NULL) {
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be70:	2b00      	cmp	r3, #0
 801be72:	d102      	bne.n	801be7a <tcp_rexmit+0x2a>
    return ERR_VAL;
 801be74:	f06f 0305 	mvn.w	r3, #5
 801be78:	e04c      	b.n	801bf14 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801be7e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801be80:	68b8      	ldr	r0, [r7, #8]
 801be82:	f7ff fe2d 	bl	801bae0 <tcp_output_segment_busy>
 801be86:	4603      	mov	r3, r0
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d002      	beq.n	801be92 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801be8c:	f06f 0305 	mvn.w	r3, #5
 801be90:	e040      	b.n	801bf14 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801be92:	68bb      	ldr	r3, [r7, #8]
 801be94:	681a      	ldr	r2, [r3, #0]
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	336c      	adds	r3, #108	; 0x6c
 801be9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bea0:	e002      	b.n	801bea8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d011      	beq.n	801bed4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	68db      	ldr	r3, [r3, #12]
 801beb6:	685b      	ldr	r3, [r3, #4]
 801beb8:	4618      	mov	r0, r3
 801beba:	f7f6 f816 	bl	8011eea <lwip_htonl>
 801bebe:	4604      	mov	r4, r0
 801bec0:	68bb      	ldr	r3, [r7, #8]
 801bec2:	68db      	ldr	r3, [r3, #12]
 801bec4:	685b      	ldr	r3, [r3, #4]
 801bec6:	4618      	mov	r0, r3
 801bec8:	f7f6 f80f 	bl	8011eea <lwip_htonl>
 801becc:	4603      	mov	r3, r0
 801bece:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	dbe6      	blt.n	801bea2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	681a      	ldr	r2, [r3, #0]
 801bed8:	68bb      	ldr	r3, [r7, #8]
 801beda:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	68ba      	ldr	r2, [r7, #8]
 801bee0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bee2:	68bb      	ldr	r3, [r7, #8]
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d103      	bne.n	801bef2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	2200      	movs	r2, #0
 801beee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bef8:	2bff      	cmp	r3, #255	; 0xff
 801befa:	d007      	beq.n	801bf0c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bf02:	3301      	adds	r3, #1
 801bf04:	b2da      	uxtb	r2, r3
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	2200      	movs	r2, #0
 801bf10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801bf12:	2300      	movs	r3, #0
}
 801bf14:	4618      	mov	r0, r3
 801bf16:	3714      	adds	r7, #20
 801bf18:	46bd      	mov	sp, r7
 801bf1a:	bd90      	pop	{r4, r7, pc}
 801bf1c:	08025ef0 	.word	0x08025ef0
 801bf20:	080265bc 	.word	0x080265bc
 801bf24:	08025f70 	.word	0x08025f70

0801bf28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b082      	sub	sp, #8
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bf30:	687b      	ldr	r3, [r7, #4]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d106      	bne.n	801bf44 <tcp_rexmit_fast+0x1c>
 801bf36:	4b2a      	ldr	r3, [pc, #168]	; (801bfe0 <tcp_rexmit_fast+0xb8>)
 801bf38:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801bf3c:	4929      	ldr	r1, [pc, #164]	; (801bfe4 <tcp_rexmit_fast+0xbc>)
 801bf3e:	482a      	ldr	r0, [pc, #168]	; (801bfe8 <tcp_rexmit_fast+0xc0>)
 801bf40:	f003 f870 	bl	801f024 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d045      	beq.n	801bfd8 <tcp_rexmit_fast+0xb0>
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	8b5b      	ldrh	r3, [r3, #26]
 801bf50:	f003 0304 	and.w	r3, r3, #4
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d13f      	bne.n	801bfd8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801bf58:	6878      	ldr	r0, [r7, #4]
 801bf5a:	f7ff ff79 	bl	801be50 <tcp_rexmit>
 801bf5e:	4603      	mov	r3, r0
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d139      	bne.n	801bfd8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bf70:	4293      	cmp	r3, r2
 801bf72:	bf28      	it	cs
 801bf74:	4613      	movcs	r3, r2
 801bf76:	b29b      	uxth	r3, r3
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	da00      	bge.n	801bf7e <tcp_rexmit_fast+0x56>
 801bf7c:	3301      	adds	r3, #1
 801bf7e:	105b      	asrs	r3, r3, #1
 801bf80:	b29a      	uxth	r2, r3
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801bf8e:	461a      	mov	r2, r3
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bf94:	005b      	lsls	r3, r3, #1
 801bf96:	429a      	cmp	r2, r3
 801bf98:	d206      	bcs.n	801bfa8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bf9e:	005b      	lsls	r3, r3, #1
 801bfa0:	b29a      	uxth	r2, r3
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bfb2:	4619      	mov	r1, r3
 801bfb4:	0049      	lsls	r1, r1, #1
 801bfb6:	440b      	add	r3, r1
 801bfb8:	b29b      	uxth	r3, r3
 801bfba:	4413      	add	r3, r2
 801bfbc:	b29a      	uxth	r2, r3
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	8b5b      	ldrh	r3, [r3, #26]
 801bfc8:	f043 0304 	orr.w	r3, r3, #4
 801bfcc:	b29a      	uxth	r2, r3
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	2200      	movs	r2, #0
 801bfd6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801bfd8:	bf00      	nop
 801bfda:	3708      	adds	r7, #8
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}
 801bfe0:	08025ef0 	.word	0x08025ef0
 801bfe4:	080265d4 	.word	0x080265d4
 801bfe8:	08025f70 	.word	0x08025f70

0801bfec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801bfec:	b580      	push	{r7, lr}
 801bfee:	b086      	sub	sp, #24
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	60f8      	str	r0, [r7, #12]
 801bff4:	607b      	str	r3, [r7, #4]
 801bff6:	460b      	mov	r3, r1
 801bff8:	817b      	strh	r3, [r7, #10]
 801bffa:	4613      	mov	r3, r2
 801bffc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bffe:	897a      	ldrh	r2, [r7, #10]
 801c000:	893b      	ldrh	r3, [r7, #8]
 801c002:	4413      	add	r3, r2
 801c004:	b29b      	uxth	r3, r3
 801c006:	3314      	adds	r3, #20
 801c008:	b29b      	uxth	r3, r3
 801c00a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c00e:	4619      	mov	r1, r3
 801c010:	2022      	movs	r0, #34	; 0x22
 801c012:	f7f9 fb6d 	bl	80156f0 <pbuf_alloc>
 801c016:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801c018:	697b      	ldr	r3, [r7, #20]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d04d      	beq.n	801c0ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c01e:	897b      	ldrh	r3, [r7, #10]
 801c020:	3313      	adds	r3, #19
 801c022:	697a      	ldr	r2, [r7, #20]
 801c024:	8952      	ldrh	r2, [r2, #10]
 801c026:	4293      	cmp	r3, r2
 801c028:	db06      	blt.n	801c038 <tcp_output_alloc_header_common+0x4c>
 801c02a:	4b26      	ldr	r3, [pc, #152]	; (801c0c4 <tcp_output_alloc_header_common+0xd8>)
 801c02c:	f240 7223 	movw	r2, #1827	; 0x723
 801c030:	4925      	ldr	r1, [pc, #148]	; (801c0c8 <tcp_output_alloc_header_common+0xdc>)
 801c032:	4826      	ldr	r0, [pc, #152]	; (801c0cc <tcp_output_alloc_header_common+0xe0>)
 801c034:	f002 fff6 	bl	801f024 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801c038:	697b      	ldr	r3, [r7, #20]
 801c03a:	685b      	ldr	r3, [r3, #4]
 801c03c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801c03e:	8c3b      	ldrh	r3, [r7, #32]
 801c040:	4618      	mov	r0, r3
 801c042:	f7f5 ff3d 	bl	8011ec0 <lwip_htons>
 801c046:	4603      	mov	r3, r0
 801c048:	461a      	mov	r2, r3
 801c04a:	693b      	ldr	r3, [r7, #16]
 801c04c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801c04e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c050:	4618      	mov	r0, r3
 801c052:	f7f5 ff35 	bl	8011ec0 <lwip_htons>
 801c056:	4603      	mov	r3, r0
 801c058:	461a      	mov	r2, r3
 801c05a:	693b      	ldr	r3, [r7, #16]
 801c05c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801c05e:	693b      	ldr	r3, [r7, #16]
 801c060:	687a      	ldr	r2, [r7, #4]
 801c062:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801c064:	68f8      	ldr	r0, [r7, #12]
 801c066:	f7f5 ff40 	bl	8011eea <lwip_htonl>
 801c06a:	4602      	mov	r2, r0
 801c06c:	693b      	ldr	r3, [r7, #16]
 801c06e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c070:	897b      	ldrh	r3, [r7, #10]
 801c072:	089b      	lsrs	r3, r3, #2
 801c074:	b29b      	uxth	r3, r3
 801c076:	3305      	adds	r3, #5
 801c078:	b29b      	uxth	r3, r3
 801c07a:	031b      	lsls	r3, r3, #12
 801c07c:	b29a      	uxth	r2, r3
 801c07e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c082:	b29b      	uxth	r3, r3
 801c084:	4313      	orrs	r3, r2
 801c086:	b29b      	uxth	r3, r3
 801c088:	4618      	mov	r0, r3
 801c08a:	f7f5 ff19 	bl	8011ec0 <lwip_htons>
 801c08e:	4603      	mov	r3, r0
 801c090:	461a      	mov	r2, r3
 801c092:	693b      	ldr	r3, [r7, #16]
 801c094:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801c096:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c098:	4618      	mov	r0, r3
 801c09a:	f7f5 ff11 	bl	8011ec0 <lwip_htons>
 801c09e:	4603      	mov	r3, r0
 801c0a0:	461a      	mov	r2, r3
 801c0a2:	693b      	ldr	r3, [r7, #16]
 801c0a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801c0a6:	693b      	ldr	r3, [r7, #16]
 801c0a8:	2200      	movs	r2, #0
 801c0aa:	741a      	strb	r2, [r3, #16]
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801c0b0:	693b      	ldr	r3, [r7, #16]
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	749a      	strb	r2, [r3, #18]
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801c0ba:	697b      	ldr	r3, [r7, #20]
}
 801c0bc:	4618      	mov	r0, r3
 801c0be:	3718      	adds	r7, #24
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bd80      	pop	{r7, pc}
 801c0c4:	08025ef0 	.word	0x08025ef0
 801c0c8:	080265f4 	.word	0x080265f4
 801c0cc:	08025f70 	.word	0x08025f70

0801c0d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801c0d0:	b5b0      	push	{r4, r5, r7, lr}
 801c0d2:	b08a      	sub	sp, #40	; 0x28
 801c0d4:	af04      	add	r7, sp, #16
 801c0d6:	60f8      	str	r0, [r7, #12]
 801c0d8:	607b      	str	r3, [r7, #4]
 801c0da:	460b      	mov	r3, r1
 801c0dc:	817b      	strh	r3, [r7, #10]
 801c0de:	4613      	mov	r3, r2
 801c0e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801c0e2:	68fb      	ldr	r3, [r7, #12]
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	d106      	bne.n	801c0f6 <tcp_output_alloc_header+0x26>
 801c0e8:	4b15      	ldr	r3, [pc, #84]	; (801c140 <tcp_output_alloc_header+0x70>)
 801c0ea:	f240 7242 	movw	r2, #1858	; 0x742
 801c0ee:	4915      	ldr	r1, [pc, #84]	; (801c144 <tcp_output_alloc_header+0x74>)
 801c0f0:	4815      	ldr	r0, [pc, #84]	; (801c148 <tcp_output_alloc_header+0x78>)
 801c0f2:	f002 ff97 	bl	801f024 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801c0f6:	68fb      	ldr	r3, [r7, #12]
 801c0f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	8adb      	ldrh	r3, [r3, #22]
 801c0fe:	68fa      	ldr	r2, [r7, #12]
 801c100:	8b12      	ldrh	r2, [r2, #24]
 801c102:	68f9      	ldr	r1, [r7, #12]
 801c104:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801c106:	893d      	ldrh	r5, [r7, #8]
 801c108:	897c      	ldrh	r4, [r7, #10]
 801c10a:	9103      	str	r1, [sp, #12]
 801c10c:	2110      	movs	r1, #16
 801c10e:	9102      	str	r1, [sp, #8]
 801c110:	9201      	str	r2, [sp, #4]
 801c112:	9300      	str	r3, [sp, #0]
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	462a      	mov	r2, r5
 801c118:	4621      	mov	r1, r4
 801c11a:	f7ff ff67 	bl	801bfec <tcp_output_alloc_header_common>
 801c11e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801c120:	697b      	ldr	r3, [r7, #20]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d006      	beq.n	801c134 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c12a:	68fa      	ldr	r2, [r7, #12]
 801c12c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801c12e:	441a      	add	r2, r3
 801c130:	68fb      	ldr	r3, [r7, #12]
 801c132:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801c134:	697b      	ldr	r3, [r7, #20]
}
 801c136:	4618      	mov	r0, r3
 801c138:	3718      	adds	r7, #24
 801c13a:	46bd      	mov	sp, r7
 801c13c:	bdb0      	pop	{r4, r5, r7, pc}
 801c13e:	bf00      	nop
 801c140:	08025ef0 	.word	0x08025ef0
 801c144:	08026624 	.word	0x08026624
 801c148:	08025f70 	.word	0x08025f70

0801c14c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b088      	sub	sp, #32
 801c150:	af00      	add	r7, sp, #0
 801c152:	60f8      	str	r0, [r7, #12]
 801c154:	60b9      	str	r1, [r7, #8]
 801c156:	4611      	mov	r1, r2
 801c158:	461a      	mov	r2, r3
 801c15a:	460b      	mov	r3, r1
 801c15c:	71fb      	strb	r3, [r7, #7]
 801c15e:	4613      	mov	r3, r2
 801c160:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801c162:	2300      	movs	r3, #0
 801c164:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c166:	68bb      	ldr	r3, [r7, #8]
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d106      	bne.n	801c17a <tcp_output_fill_options+0x2e>
 801c16c:	4b13      	ldr	r3, [pc, #76]	; (801c1bc <tcp_output_fill_options+0x70>)
 801c16e:	f240 7256 	movw	r2, #1878	; 0x756
 801c172:	4913      	ldr	r1, [pc, #76]	; (801c1c0 <tcp_output_fill_options+0x74>)
 801c174:	4813      	ldr	r0, [pc, #76]	; (801c1c4 <tcp_output_fill_options+0x78>)
 801c176:	f002 ff55 	bl	801f024 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801c17a:	68bb      	ldr	r3, [r7, #8]
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801c180:	69bb      	ldr	r3, [r7, #24]
 801c182:	3314      	adds	r3, #20
 801c184:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801c186:	69bb      	ldr	r3, [r7, #24]
 801c188:	f103 0214 	add.w	r2, r3, #20
 801c18c:	8bfb      	ldrh	r3, [r7, #30]
 801c18e:	009b      	lsls	r3, r3, #2
 801c190:	4619      	mov	r1, r3
 801c192:	79fb      	ldrb	r3, [r7, #7]
 801c194:	009b      	lsls	r3, r3, #2
 801c196:	f003 0304 	and.w	r3, r3, #4
 801c19a:	440b      	add	r3, r1
 801c19c:	4413      	add	r3, r2
 801c19e:	697a      	ldr	r2, [r7, #20]
 801c1a0:	429a      	cmp	r2, r3
 801c1a2:	d006      	beq.n	801c1b2 <tcp_output_fill_options+0x66>
 801c1a4:	4b05      	ldr	r3, [pc, #20]	; (801c1bc <tcp_output_fill_options+0x70>)
 801c1a6:	f240 7275 	movw	r2, #1909	; 0x775
 801c1aa:	4907      	ldr	r1, [pc, #28]	; (801c1c8 <tcp_output_fill_options+0x7c>)
 801c1ac:	4805      	ldr	r0, [pc, #20]	; (801c1c4 <tcp_output_fill_options+0x78>)
 801c1ae:	f002 ff39 	bl	801f024 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c1b2:	bf00      	nop
 801c1b4:	3720      	adds	r7, #32
 801c1b6:	46bd      	mov	sp, r7
 801c1b8:	bd80      	pop	{r7, pc}
 801c1ba:	bf00      	nop
 801c1bc:	08025ef0 	.word	0x08025ef0
 801c1c0:	0802664c 	.word	0x0802664c
 801c1c4:	08025f70 	.word	0x08025f70
 801c1c8:	08026544 	.word	0x08026544

0801c1cc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c1cc:	b580      	push	{r7, lr}
 801c1ce:	b08a      	sub	sp, #40	; 0x28
 801c1d0:	af04      	add	r7, sp, #16
 801c1d2:	60f8      	str	r0, [r7, #12]
 801c1d4:	60b9      	str	r1, [r7, #8]
 801c1d6:	607a      	str	r2, [r7, #4]
 801c1d8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c1da:	68bb      	ldr	r3, [r7, #8]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d106      	bne.n	801c1ee <tcp_output_control_segment+0x22>
 801c1e0:	4b1c      	ldr	r3, [pc, #112]	; (801c254 <tcp_output_control_segment+0x88>)
 801c1e2:	f240 7287 	movw	r2, #1927	; 0x787
 801c1e6:	491c      	ldr	r1, [pc, #112]	; (801c258 <tcp_output_control_segment+0x8c>)
 801c1e8:	481c      	ldr	r0, [pc, #112]	; (801c25c <tcp_output_control_segment+0x90>)
 801c1ea:	f002 ff1b 	bl	801f024 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801c1ee:	683a      	ldr	r2, [r7, #0]
 801c1f0:	6879      	ldr	r1, [r7, #4]
 801c1f2:	68f8      	ldr	r0, [r7, #12]
 801c1f4:	f7fe fae8 	bl	801a7c8 <tcp_route>
 801c1f8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801c1fa:	693b      	ldr	r3, [r7, #16]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d102      	bne.n	801c206 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801c200:	23fc      	movs	r3, #252	; 0xfc
 801c202:	75fb      	strb	r3, [r7, #23]
 801c204:	e01c      	b.n	801c240 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d006      	beq.n	801c21a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	7adb      	ldrb	r3, [r3, #11]
 801c210:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	7a9b      	ldrb	r3, [r3, #10]
 801c216:	757b      	strb	r3, [r7, #21]
 801c218:	e003      	b.n	801c222 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801c21a:	23ff      	movs	r3, #255	; 0xff
 801c21c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801c21e:	2300      	movs	r3, #0
 801c220:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c222:	7dba      	ldrb	r2, [r7, #22]
 801c224:	693b      	ldr	r3, [r7, #16]
 801c226:	9302      	str	r3, [sp, #8]
 801c228:	2306      	movs	r3, #6
 801c22a:	9301      	str	r3, [sp, #4]
 801c22c:	7d7b      	ldrb	r3, [r7, #21]
 801c22e:	9300      	str	r3, [sp, #0]
 801c230:	4613      	mov	r3, r2
 801c232:	683a      	ldr	r2, [r7, #0]
 801c234:	6879      	ldr	r1, [r7, #4]
 801c236:	68b8      	ldr	r0, [r7, #8]
 801c238:	f7f7 fad6 	bl	80137e8 <ip4_output_if>
 801c23c:	4603      	mov	r3, r0
 801c23e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c240:	68b8      	ldr	r0, [r7, #8]
 801c242:	f7f9 fd39 	bl	8015cb8 <pbuf_free>
  return err;
 801c246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c24a:	4618      	mov	r0, r3
 801c24c:	3718      	adds	r7, #24
 801c24e:	46bd      	mov	sp, r7
 801c250:	bd80      	pop	{r7, pc}
 801c252:	bf00      	nop
 801c254:	08025ef0 	.word	0x08025ef0
 801c258:	08026674 	.word	0x08026674
 801c25c:	08025f70 	.word	0x08025f70

0801c260 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c260:	b590      	push	{r4, r7, lr}
 801c262:	b08b      	sub	sp, #44	; 0x2c
 801c264:	af04      	add	r7, sp, #16
 801c266:	60f8      	str	r0, [r7, #12]
 801c268:	60b9      	str	r1, [r7, #8]
 801c26a:	607a      	str	r2, [r7, #4]
 801c26c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c26e:	683b      	ldr	r3, [r7, #0]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d106      	bne.n	801c282 <tcp_rst+0x22>
 801c274:	4b1f      	ldr	r3, [pc, #124]	; (801c2f4 <tcp_rst+0x94>)
 801c276:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801c27a:	491f      	ldr	r1, [pc, #124]	; (801c2f8 <tcp_rst+0x98>)
 801c27c:	481f      	ldr	r0, [pc, #124]	; (801c2fc <tcp_rst+0x9c>)
 801c27e:	f002 fed1 	bl	801f024 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c284:	2b00      	cmp	r3, #0
 801c286:	d106      	bne.n	801c296 <tcp_rst+0x36>
 801c288:	4b1a      	ldr	r3, [pc, #104]	; (801c2f4 <tcp_rst+0x94>)
 801c28a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801c28e:	491c      	ldr	r1, [pc, #112]	; (801c300 <tcp_rst+0xa0>)
 801c290:	481a      	ldr	r0, [pc, #104]	; (801c2fc <tcp_rst+0x9c>)
 801c292:	f002 fec7 	bl	801f024 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c296:	2300      	movs	r3, #0
 801c298:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801c29a:	f246 0308 	movw	r3, #24584	; 0x6008
 801c29e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c2a0:	7dfb      	ldrb	r3, [r7, #23]
 801c2a2:	b29c      	uxth	r4, r3
 801c2a4:	68b8      	ldr	r0, [r7, #8]
 801c2a6:	f7f5 fe20 	bl	8011eea <lwip_htonl>
 801c2aa:	4602      	mov	r2, r0
 801c2ac:	8abb      	ldrh	r3, [r7, #20]
 801c2ae:	9303      	str	r3, [sp, #12]
 801c2b0:	2314      	movs	r3, #20
 801c2b2:	9302      	str	r3, [sp, #8]
 801c2b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801c2b6:	9301      	str	r3, [sp, #4]
 801c2b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c2ba:	9300      	str	r3, [sp, #0]
 801c2bc:	4613      	mov	r3, r2
 801c2be:	2200      	movs	r2, #0
 801c2c0:	4621      	mov	r1, r4
 801c2c2:	6878      	ldr	r0, [r7, #4]
 801c2c4:	f7ff fe92 	bl	801bfec <tcp_output_alloc_header_common>
 801c2c8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c2ca:	693b      	ldr	r3, [r7, #16]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d00c      	beq.n	801c2ea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c2d0:	7dfb      	ldrb	r3, [r7, #23]
 801c2d2:	2200      	movs	r2, #0
 801c2d4:	6939      	ldr	r1, [r7, #16]
 801c2d6:	68f8      	ldr	r0, [r7, #12]
 801c2d8:	f7ff ff38 	bl	801c14c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2de:	683a      	ldr	r2, [r7, #0]
 801c2e0:	6939      	ldr	r1, [r7, #16]
 801c2e2:	68f8      	ldr	r0, [r7, #12]
 801c2e4:	f7ff ff72 	bl	801c1cc <tcp_output_control_segment>
 801c2e8:	e000      	b.n	801c2ec <tcp_rst+0x8c>
    return;
 801c2ea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c2ec:	371c      	adds	r7, #28
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	bd90      	pop	{r4, r7, pc}
 801c2f2:	bf00      	nop
 801c2f4:	08025ef0 	.word	0x08025ef0
 801c2f8:	080266a0 	.word	0x080266a0
 801c2fc:	08025f70 	.word	0x08025f70
 801c300:	080266bc 	.word	0x080266bc

0801c304 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c304:	b590      	push	{r4, r7, lr}
 801c306:	b087      	sub	sp, #28
 801c308:	af00      	add	r7, sp, #0
 801c30a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801c30c:	2300      	movs	r3, #0
 801c30e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801c310:	2300      	movs	r3, #0
 801c312:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d106      	bne.n	801c328 <tcp_send_empty_ack+0x24>
 801c31a:	4b28      	ldr	r3, [pc, #160]	; (801c3bc <tcp_send_empty_ack+0xb8>)
 801c31c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801c320:	4927      	ldr	r1, [pc, #156]	; (801c3c0 <tcp_send_empty_ack+0xbc>)
 801c322:	4828      	ldr	r0, [pc, #160]	; (801c3c4 <tcp_send_empty_ack+0xc0>)
 801c324:	f002 fe7e 	bl	801f024 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c328:	7dfb      	ldrb	r3, [r7, #23]
 801c32a:	009b      	lsls	r3, r3, #2
 801c32c:	b2db      	uxtb	r3, r3
 801c32e:	f003 0304 	and.w	r3, r3, #4
 801c332:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c334:	7d7b      	ldrb	r3, [r7, #21]
 801c336:	b29c      	uxth	r4, r3
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c33c:	4618      	mov	r0, r3
 801c33e:	f7f5 fdd4 	bl	8011eea <lwip_htonl>
 801c342:	4603      	mov	r3, r0
 801c344:	2200      	movs	r2, #0
 801c346:	4621      	mov	r1, r4
 801c348:	6878      	ldr	r0, [r7, #4]
 801c34a:	f7ff fec1 	bl	801c0d0 <tcp_output_alloc_header>
 801c34e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c350:	693b      	ldr	r3, [r7, #16]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d109      	bne.n	801c36a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	8b5b      	ldrh	r3, [r3, #26]
 801c35a:	f043 0303 	orr.w	r3, r3, #3
 801c35e:	b29a      	uxth	r2, r3
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c364:	f06f 0301 	mvn.w	r3, #1
 801c368:	e023      	b.n	801c3b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c36a:	7dbb      	ldrb	r3, [r7, #22]
 801c36c:	7dfa      	ldrb	r2, [r7, #23]
 801c36e:	6939      	ldr	r1, [r7, #16]
 801c370:	6878      	ldr	r0, [r7, #4]
 801c372:	f7ff feeb 	bl	801c14c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c376:	687a      	ldr	r2, [r7, #4]
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	3304      	adds	r3, #4
 801c37c:	6939      	ldr	r1, [r7, #16]
 801c37e:	6878      	ldr	r0, [r7, #4]
 801c380:	f7ff ff24 	bl	801c1cc <tcp_output_control_segment>
 801c384:	4603      	mov	r3, r0
 801c386:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d007      	beq.n	801c3a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	8b5b      	ldrh	r3, [r3, #26]
 801c394:	f043 0303 	orr.w	r3, r3, #3
 801c398:	b29a      	uxth	r2, r3
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	835a      	strh	r2, [r3, #26]
 801c39e:	e006      	b.n	801c3ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	8b5b      	ldrh	r3, [r3, #26]
 801c3a4:	f023 0303 	bic.w	r3, r3, #3
 801c3a8:	b29a      	uxth	r2, r3
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	371c      	adds	r7, #28
 801c3b6:	46bd      	mov	sp, r7
 801c3b8:	bd90      	pop	{r4, r7, pc}
 801c3ba:	bf00      	nop
 801c3bc:	08025ef0 	.word	0x08025ef0
 801c3c0:	080266d8 	.word	0x080266d8
 801c3c4:	08025f70 	.word	0x08025f70

0801c3c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c3c8:	b590      	push	{r4, r7, lr}
 801c3ca:	b087      	sub	sp, #28
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d106      	bne.n	801c3e8 <tcp_keepalive+0x20>
 801c3da:	4b18      	ldr	r3, [pc, #96]	; (801c43c <tcp_keepalive+0x74>)
 801c3dc:	f640 0224 	movw	r2, #2084	; 0x824
 801c3e0:	4917      	ldr	r1, [pc, #92]	; (801c440 <tcp_keepalive+0x78>)
 801c3e2:	4818      	ldr	r0, [pc, #96]	; (801c444 <tcp_keepalive+0x7c>)
 801c3e4:	f002 fe1e 	bl	801f024 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c3e8:	7dfb      	ldrb	r3, [r7, #23]
 801c3ea:	b29c      	uxth	r4, r3
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c3f0:	3b01      	subs	r3, #1
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	f7f5 fd79 	bl	8011eea <lwip_htonl>
 801c3f8:	4603      	mov	r3, r0
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	4621      	mov	r1, r4
 801c3fe:	6878      	ldr	r0, [r7, #4]
 801c400:	f7ff fe66 	bl	801c0d0 <tcp_output_alloc_header>
 801c404:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c406:	693b      	ldr	r3, [r7, #16]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d102      	bne.n	801c412 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c40c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c410:	e010      	b.n	801c434 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c412:	7dfb      	ldrb	r3, [r7, #23]
 801c414:	2200      	movs	r2, #0
 801c416:	6939      	ldr	r1, [r7, #16]
 801c418:	6878      	ldr	r0, [r7, #4]
 801c41a:	f7ff fe97 	bl	801c14c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c41e:	687a      	ldr	r2, [r7, #4]
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	3304      	adds	r3, #4
 801c424:	6939      	ldr	r1, [r7, #16]
 801c426:	6878      	ldr	r0, [r7, #4]
 801c428:	f7ff fed0 	bl	801c1cc <tcp_output_control_segment>
 801c42c:	4603      	mov	r3, r0
 801c42e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c430:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c434:	4618      	mov	r0, r3
 801c436:	371c      	adds	r7, #28
 801c438:	46bd      	mov	sp, r7
 801c43a:	bd90      	pop	{r4, r7, pc}
 801c43c:	08025ef0 	.word	0x08025ef0
 801c440:	080266f8 	.word	0x080266f8
 801c444:	08025f70 	.word	0x08025f70

0801c448 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c448:	b590      	push	{r4, r7, lr}
 801c44a:	b08b      	sub	sp, #44	; 0x2c
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c450:	2300      	movs	r3, #0
 801c452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d106      	bne.n	801c46a <tcp_zero_window_probe+0x22>
 801c45c:	4b4c      	ldr	r3, [pc, #304]	; (801c590 <tcp_zero_window_probe+0x148>)
 801c45e:	f640 024f 	movw	r2, #2127	; 0x84f
 801c462:	494c      	ldr	r1, [pc, #304]	; (801c594 <tcp_zero_window_probe+0x14c>)
 801c464:	484c      	ldr	r0, [pc, #304]	; (801c598 <tcp_zero_window_probe+0x150>)
 801c466:	f002 fddd 	bl	801f024 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c46e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801c470:	6a3b      	ldr	r3, [r7, #32]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d101      	bne.n	801c47a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c476:	2300      	movs	r3, #0
 801c478:	e086      	b.n	801c588 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c480:	2bff      	cmp	r3, #255	; 0xff
 801c482:	d007      	beq.n	801c494 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c48a:	3301      	adds	r3, #1
 801c48c:	b2da      	uxtb	r2, r3
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c494:	6a3b      	ldr	r3, [r7, #32]
 801c496:	68db      	ldr	r3, [r3, #12]
 801c498:	899b      	ldrh	r3, [r3, #12]
 801c49a:	b29b      	uxth	r3, r3
 801c49c:	4618      	mov	r0, r3
 801c49e:	f7f5 fd0f 	bl	8011ec0 <lwip_htons>
 801c4a2:	4603      	mov	r3, r0
 801c4a4:	b2db      	uxtb	r3, r3
 801c4a6:	f003 0301 	and.w	r3, r3, #1
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d005      	beq.n	801c4ba <tcp_zero_window_probe+0x72>
 801c4ae:	6a3b      	ldr	r3, [r7, #32]
 801c4b0:	891b      	ldrh	r3, [r3, #8]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d101      	bne.n	801c4ba <tcp_zero_window_probe+0x72>
 801c4b6:	2301      	movs	r3, #1
 801c4b8:	e000      	b.n	801c4bc <tcp_zero_window_probe+0x74>
 801c4ba:	2300      	movs	r3, #0
 801c4bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c4be:	7ffb      	ldrb	r3, [r7, #31]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	bf0c      	ite	eq
 801c4c4:	2301      	moveq	r3, #1
 801c4c6:	2300      	movne	r3, #0
 801c4c8:	b2db      	uxtb	r3, r3
 801c4ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c4d0:	b299      	uxth	r1, r3
 801c4d2:	6a3b      	ldr	r3, [r7, #32]
 801c4d4:	68db      	ldr	r3, [r3, #12]
 801c4d6:	685b      	ldr	r3, [r3, #4]
 801c4d8:	8bba      	ldrh	r2, [r7, #28]
 801c4da:	6878      	ldr	r0, [r7, #4]
 801c4dc:	f7ff fdf8 	bl	801c0d0 <tcp_output_alloc_header>
 801c4e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801c4e2:	69bb      	ldr	r3, [r7, #24]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d102      	bne.n	801c4ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c4e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c4ec:	e04c      	b.n	801c588 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c4ee:	69bb      	ldr	r3, [r7, #24]
 801c4f0:	685b      	ldr	r3, [r3, #4]
 801c4f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c4f4:	7ffb      	ldrb	r3, [r7, #31]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d011      	beq.n	801c51e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c4fa:	697b      	ldr	r3, [r7, #20]
 801c4fc:	899b      	ldrh	r3, [r3, #12]
 801c4fe:	b29b      	uxth	r3, r3
 801c500:	b21b      	sxth	r3, r3
 801c502:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c506:	b21c      	sxth	r4, r3
 801c508:	2011      	movs	r0, #17
 801c50a:	f7f5 fcd9 	bl	8011ec0 <lwip_htons>
 801c50e:	4603      	mov	r3, r0
 801c510:	b21b      	sxth	r3, r3
 801c512:	4323      	orrs	r3, r4
 801c514:	b21b      	sxth	r3, r3
 801c516:	b29a      	uxth	r2, r3
 801c518:	697b      	ldr	r3, [r7, #20]
 801c51a:	819a      	strh	r2, [r3, #12]
 801c51c:	e010      	b.n	801c540 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	685b      	ldr	r3, [r3, #4]
 801c522:	3314      	adds	r3, #20
 801c524:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c526:	6a3b      	ldr	r3, [r7, #32]
 801c528:	6858      	ldr	r0, [r3, #4]
 801c52a:	6a3b      	ldr	r3, [r7, #32]
 801c52c:	685b      	ldr	r3, [r3, #4]
 801c52e:	891a      	ldrh	r2, [r3, #8]
 801c530:	6a3b      	ldr	r3, [r7, #32]
 801c532:	891b      	ldrh	r3, [r3, #8]
 801c534:	1ad3      	subs	r3, r2, r3
 801c536:	b29b      	uxth	r3, r3
 801c538:	2201      	movs	r2, #1
 801c53a:	6939      	ldr	r1, [r7, #16]
 801c53c:	f7f9 fda6 	bl	801608c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c540:	6a3b      	ldr	r3, [r7, #32]
 801c542:	68db      	ldr	r3, [r3, #12]
 801c544:	685b      	ldr	r3, [r3, #4]
 801c546:	4618      	mov	r0, r3
 801c548:	f7f5 fccf 	bl	8011eea <lwip_htonl>
 801c54c:	4603      	mov	r3, r0
 801c54e:	3301      	adds	r3, #1
 801c550:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	1ad3      	subs	r3, r2, r3
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	da02      	bge.n	801c564 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	68fa      	ldr	r2, [r7, #12]
 801c562:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c568:	2200      	movs	r2, #0
 801c56a:	69b9      	ldr	r1, [r7, #24]
 801c56c:	6878      	ldr	r0, [r7, #4]
 801c56e:	f7ff fded 	bl	801c14c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c572:	687a      	ldr	r2, [r7, #4]
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	3304      	adds	r3, #4
 801c578:	69b9      	ldr	r1, [r7, #24]
 801c57a:	6878      	ldr	r0, [r7, #4]
 801c57c:	f7ff fe26 	bl	801c1cc <tcp_output_control_segment>
 801c580:	4603      	mov	r3, r0
 801c582:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c584:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c588:	4618      	mov	r0, r3
 801c58a:	372c      	adds	r7, #44	; 0x2c
 801c58c:	46bd      	mov	sp, r7
 801c58e:	bd90      	pop	{r4, r7, pc}
 801c590:	08025ef0 	.word	0x08025ef0
 801c594:	08026714 	.word	0x08026714
 801c598:	08025f70 	.word	0x08025f70

0801c59c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c59c:	b580      	push	{r7, lr}
 801c59e:	b082      	sub	sp, #8
 801c5a0:	af00      	add	r7, sp, #0
 801c5a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c5a4:	f7f9 ff18 	bl	80163d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c5a8:	4b0a      	ldr	r3, [pc, #40]	; (801c5d4 <tcpip_tcp_timer+0x38>)
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d103      	bne.n	801c5b8 <tcpip_tcp_timer+0x1c>
 801c5b0:	4b09      	ldr	r3, [pc, #36]	; (801c5d8 <tcpip_tcp_timer+0x3c>)
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d005      	beq.n	801c5c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	4908      	ldr	r1, [pc, #32]	; (801c5dc <tcpip_tcp_timer+0x40>)
 801c5bc:	20fa      	movs	r0, #250	; 0xfa
 801c5be:	f000 f8f3 	bl	801c7a8 <sys_timeout>
 801c5c2:	e003      	b.n	801c5cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c5c4:	4b06      	ldr	r3, [pc, #24]	; (801c5e0 <tcpip_tcp_timer+0x44>)
 801c5c6:	2200      	movs	r2, #0
 801c5c8:	601a      	str	r2, [r3, #0]
  }
}
 801c5ca:	bf00      	nop
 801c5cc:	bf00      	nop
 801c5ce:	3708      	adds	r7, #8
 801c5d0:	46bd      	mov	sp, r7
 801c5d2:	bd80      	pop	{r7, pc}
 801c5d4:	24008a24 	.word	0x24008a24
 801c5d8:	24008a34 	.word	0x24008a34
 801c5dc:	0801c59d 	.word	0x0801c59d
 801c5e0:	24005264 	.word	0x24005264

0801c5e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c5e4:	b580      	push	{r7, lr}
 801c5e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c5e8:	4b0a      	ldr	r3, [pc, #40]	; (801c614 <tcp_timer_needed+0x30>)
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d10f      	bne.n	801c610 <tcp_timer_needed+0x2c>
 801c5f0:	4b09      	ldr	r3, [pc, #36]	; (801c618 <tcp_timer_needed+0x34>)
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d103      	bne.n	801c600 <tcp_timer_needed+0x1c>
 801c5f8:	4b08      	ldr	r3, [pc, #32]	; (801c61c <tcp_timer_needed+0x38>)
 801c5fa:	681b      	ldr	r3, [r3, #0]
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d007      	beq.n	801c610 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c600:	4b04      	ldr	r3, [pc, #16]	; (801c614 <tcp_timer_needed+0x30>)
 801c602:	2201      	movs	r2, #1
 801c604:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c606:	2200      	movs	r2, #0
 801c608:	4905      	ldr	r1, [pc, #20]	; (801c620 <tcp_timer_needed+0x3c>)
 801c60a:	20fa      	movs	r0, #250	; 0xfa
 801c60c:	f000 f8cc 	bl	801c7a8 <sys_timeout>
  }
}
 801c610:	bf00      	nop
 801c612:	bd80      	pop	{r7, pc}
 801c614:	24005264 	.word	0x24005264
 801c618:	24008a24 	.word	0x24008a24
 801c61c:	24008a34 	.word	0x24008a34
 801c620:	0801c59d 	.word	0x0801c59d

0801c624 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c624:	b580      	push	{r7, lr}
 801c626:	b086      	sub	sp, #24
 801c628:	af00      	add	r7, sp, #0
 801c62a:	60f8      	str	r0, [r7, #12]
 801c62c:	60b9      	str	r1, [r7, #8]
 801c62e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c630:	2006      	movs	r0, #6
 801c632:	f7f8 fc5b 	bl	8014eec <memp_malloc>
 801c636:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c638:	693b      	ldr	r3, [r7, #16]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d109      	bne.n	801c652 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c63e:	693b      	ldr	r3, [r7, #16]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d151      	bne.n	801c6e8 <sys_timeout_abs+0xc4>
 801c644:	4b2a      	ldr	r3, [pc, #168]	; (801c6f0 <sys_timeout_abs+0xcc>)
 801c646:	22be      	movs	r2, #190	; 0xbe
 801c648:	492a      	ldr	r1, [pc, #168]	; (801c6f4 <sys_timeout_abs+0xd0>)
 801c64a:	482b      	ldr	r0, [pc, #172]	; (801c6f8 <sys_timeout_abs+0xd4>)
 801c64c:	f002 fcea 	bl	801f024 <iprintf>
    return;
 801c650:	e04a      	b.n	801c6e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c652:	693b      	ldr	r3, [r7, #16]
 801c654:	2200      	movs	r2, #0
 801c656:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c658:	693b      	ldr	r3, [r7, #16]
 801c65a:	68ba      	ldr	r2, [r7, #8]
 801c65c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c65e:	693b      	ldr	r3, [r7, #16]
 801c660:	687a      	ldr	r2, [r7, #4]
 801c662:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c664:	693b      	ldr	r3, [r7, #16]
 801c666:	68fa      	ldr	r2, [r7, #12]
 801c668:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c66a:	4b24      	ldr	r3, [pc, #144]	; (801c6fc <sys_timeout_abs+0xd8>)
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d103      	bne.n	801c67a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c672:	4a22      	ldr	r2, [pc, #136]	; (801c6fc <sys_timeout_abs+0xd8>)
 801c674:	693b      	ldr	r3, [r7, #16]
 801c676:	6013      	str	r3, [r2, #0]
    return;
 801c678:	e037      	b.n	801c6ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c67a:	693b      	ldr	r3, [r7, #16]
 801c67c:	685a      	ldr	r2, [r3, #4]
 801c67e:	4b1f      	ldr	r3, [pc, #124]	; (801c6fc <sys_timeout_abs+0xd8>)
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	685b      	ldr	r3, [r3, #4]
 801c684:	1ad3      	subs	r3, r2, r3
 801c686:	0fdb      	lsrs	r3, r3, #31
 801c688:	f003 0301 	and.w	r3, r3, #1
 801c68c:	b2db      	uxtb	r3, r3
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d007      	beq.n	801c6a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c692:	4b1a      	ldr	r3, [pc, #104]	; (801c6fc <sys_timeout_abs+0xd8>)
 801c694:	681a      	ldr	r2, [r3, #0]
 801c696:	693b      	ldr	r3, [r7, #16]
 801c698:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c69a:	4a18      	ldr	r2, [pc, #96]	; (801c6fc <sys_timeout_abs+0xd8>)
 801c69c:	693b      	ldr	r3, [r7, #16]
 801c69e:	6013      	str	r3, [r2, #0]
 801c6a0:	e023      	b.n	801c6ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c6a2:	4b16      	ldr	r3, [pc, #88]	; (801c6fc <sys_timeout_abs+0xd8>)
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	617b      	str	r3, [r7, #20]
 801c6a8:	e01a      	b.n	801c6e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c6aa:	697b      	ldr	r3, [r7, #20]
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d00b      	beq.n	801c6ca <sys_timeout_abs+0xa6>
 801c6b2:	693b      	ldr	r3, [r7, #16]
 801c6b4:	685a      	ldr	r2, [r3, #4]
 801c6b6:	697b      	ldr	r3, [r7, #20]
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	685b      	ldr	r3, [r3, #4]
 801c6bc:	1ad3      	subs	r3, r2, r3
 801c6be:	0fdb      	lsrs	r3, r3, #31
 801c6c0:	f003 0301 	and.w	r3, r3, #1
 801c6c4:	b2db      	uxtb	r3, r3
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d007      	beq.n	801c6da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c6ca:	697b      	ldr	r3, [r7, #20]
 801c6cc:	681a      	ldr	r2, [r3, #0]
 801c6ce:	693b      	ldr	r3, [r7, #16]
 801c6d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c6d2:	697b      	ldr	r3, [r7, #20]
 801c6d4:	693a      	ldr	r2, [r7, #16]
 801c6d6:	601a      	str	r2, [r3, #0]
        break;
 801c6d8:	e007      	b.n	801c6ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c6da:	697b      	ldr	r3, [r7, #20]
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	617b      	str	r3, [r7, #20]
 801c6e0:	697b      	ldr	r3, [r7, #20]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d1e1      	bne.n	801c6aa <sys_timeout_abs+0x86>
 801c6e6:	e000      	b.n	801c6ea <sys_timeout_abs+0xc6>
    return;
 801c6e8:	bf00      	nop
      }
    }
  }
}
 801c6ea:	3718      	adds	r7, #24
 801c6ec:	46bd      	mov	sp, r7
 801c6ee:	bd80      	pop	{r7, pc}
 801c6f0:	08026738 	.word	0x08026738
 801c6f4:	08026798 	.word	0x08026798
 801c6f8:	080267d8 	.word	0x080267d8
 801c6fc:	2400525c 	.word	0x2400525c

0801c700 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c700:	b580      	push	{r7, lr}
 801c702:	b086      	sub	sp, #24
 801c704:	af00      	add	r7, sp, #0
 801c706:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c70c:	697b      	ldr	r3, [r7, #20]
 801c70e:	685b      	ldr	r3, [r3, #4]
 801c710:	4798      	blx	r3

  now = sys_now();
 801c712:	f7f4 fe0d 	bl	8011330 <sys_now>
 801c716:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c718:	697b      	ldr	r3, [r7, #20]
 801c71a:	681a      	ldr	r2, [r3, #0]
 801c71c:	4b0f      	ldr	r3, [pc, #60]	; (801c75c <lwip_cyclic_timer+0x5c>)
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	4413      	add	r3, r2
 801c722:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c724:	68fa      	ldr	r2, [r7, #12]
 801c726:	693b      	ldr	r3, [r7, #16]
 801c728:	1ad3      	subs	r3, r2, r3
 801c72a:	0fdb      	lsrs	r3, r3, #31
 801c72c:	f003 0301 	and.w	r3, r3, #1
 801c730:	b2db      	uxtb	r3, r3
 801c732:	2b00      	cmp	r3, #0
 801c734:	d009      	beq.n	801c74a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c736:	697b      	ldr	r3, [r7, #20]
 801c738:	681a      	ldr	r2, [r3, #0]
 801c73a:	693b      	ldr	r3, [r7, #16]
 801c73c:	4413      	add	r3, r2
 801c73e:	687a      	ldr	r2, [r7, #4]
 801c740:	4907      	ldr	r1, [pc, #28]	; (801c760 <lwip_cyclic_timer+0x60>)
 801c742:	4618      	mov	r0, r3
 801c744:	f7ff ff6e 	bl	801c624 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c748:	e004      	b.n	801c754 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c74a:	687a      	ldr	r2, [r7, #4]
 801c74c:	4904      	ldr	r1, [pc, #16]	; (801c760 <lwip_cyclic_timer+0x60>)
 801c74e:	68f8      	ldr	r0, [r7, #12]
 801c750:	f7ff ff68 	bl	801c624 <sys_timeout_abs>
}
 801c754:	bf00      	nop
 801c756:	3718      	adds	r7, #24
 801c758:	46bd      	mov	sp, r7
 801c75a:	bd80      	pop	{r7, pc}
 801c75c:	24005260 	.word	0x24005260
 801c760:	0801c701 	.word	0x0801c701

0801c764 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c764:	b580      	push	{r7, lr}
 801c766:	b082      	sub	sp, #8
 801c768:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c76a:	2301      	movs	r3, #1
 801c76c:	607b      	str	r3, [r7, #4]
 801c76e:	e00e      	b.n	801c78e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c770:	4a0b      	ldr	r2, [pc, #44]	; (801c7a0 <sys_timeouts_init+0x3c>)
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	00db      	lsls	r3, r3, #3
 801c77c:	4a08      	ldr	r2, [pc, #32]	; (801c7a0 <sys_timeouts_init+0x3c>)
 801c77e:	4413      	add	r3, r2
 801c780:	461a      	mov	r2, r3
 801c782:	4908      	ldr	r1, [pc, #32]	; (801c7a4 <sys_timeouts_init+0x40>)
 801c784:	f000 f810 	bl	801c7a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	3301      	adds	r3, #1
 801c78c:	607b      	str	r3, [r7, #4]
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	2b02      	cmp	r3, #2
 801c792:	d9ed      	bls.n	801c770 <sys_timeouts_init+0xc>
  }
}
 801c794:	bf00      	nop
 801c796:	bf00      	nop
 801c798:	3708      	adds	r7, #8
 801c79a:	46bd      	mov	sp, r7
 801c79c:	bd80      	pop	{r7, pc}
 801c79e:	bf00      	nop
 801c7a0:	08027334 	.word	0x08027334
 801c7a4:	0801c701 	.word	0x0801c701

0801c7a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c7a8:	b580      	push	{r7, lr}
 801c7aa:	b086      	sub	sp, #24
 801c7ac:	af00      	add	r7, sp, #0
 801c7ae:	60f8      	str	r0, [r7, #12]
 801c7b0:	60b9      	str	r1, [r7, #8]
 801c7b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c7ba:	d306      	bcc.n	801c7ca <sys_timeout+0x22>
 801c7bc:	4b0a      	ldr	r3, [pc, #40]	; (801c7e8 <sys_timeout+0x40>)
 801c7be:	f240 1229 	movw	r2, #297	; 0x129
 801c7c2:	490a      	ldr	r1, [pc, #40]	; (801c7ec <sys_timeout+0x44>)
 801c7c4:	480a      	ldr	r0, [pc, #40]	; (801c7f0 <sys_timeout+0x48>)
 801c7c6:	f002 fc2d 	bl	801f024 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c7ca:	f7f4 fdb1 	bl	8011330 <sys_now>
 801c7ce:	4602      	mov	r2, r0
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	4413      	add	r3, r2
 801c7d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c7d6:	687a      	ldr	r2, [r7, #4]
 801c7d8:	68b9      	ldr	r1, [r7, #8]
 801c7da:	6978      	ldr	r0, [r7, #20]
 801c7dc:	f7ff ff22 	bl	801c624 <sys_timeout_abs>
#endif
}
 801c7e0:	bf00      	nop
 801c7e2:	3718      	adds	r7, #24
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	bd80      	pop	{r7, pc}
 801c7e8:	08026738 	.word	0x08026738
 801c7ec:	08026800 	.word	0x08026800
 801c7f0:	080267d8 	.word	0x080267d8

0801c7f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c7f4:	b580      	push	{r7, lr}
 801c7f6:	b084      	sub	sp, #16
 801c7f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c7fa:	f7f4 fd99 	bl	8011330 <sys_now>
 801c7fe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801c800:	4b1a      	ldr	r3, [pc, #104]	; (801c86c <sys_check_timeouts+0x78>)
 801c802:	781b      	ldrb	r3, [r3, #0]
 801c804:	b2db      	uxtb	r3, r3
 801c806:	2b00      	cmp	r3, #0
 801c808:	d001      	beq.n	801c80e <sys_check_timeouts+0x1a>
 801c80a:	f7f8 ff1b 	bl	8015644 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801c80e:	4b18      	ldr	r3, [pc, #96]	; (801c870 <sys_check_timeouts+0x7c>)
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c814:	68bb      	ldr	r3, [r7, #8]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d022      	beq.n	801c860 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c81a:	68bb      	ldr	r3, [r7, #8]
 801c81c:	685b      	ldr	r3, [r3, #4]
 801c81e:	68fa      	ldr	r2, [r7, #12]
 801c820:	1ad3      	subs	r3, r2, r3
 801c822:	0fdb      	lsrs	r3, r3, #31
 801c824:	f003 0301 	and.w	r3, r3, #1
 801c828:	b2db      	uxtb	r3, r3
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d11a      	bne.n	801c864 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c82e:	68bb      	ldr	r3, [r7, #8]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	4a0f      	ldr	r2, [pc, #60]	; (801c870 <sys_check_timeouts+0x7c>)
 801c834:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c836:	68bb      	ldr	r3, [r7, #8]
 801c838:	689b      	ldr	r3, [r3, #8]
 801c83a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c83c:	68bb      	ldr	r3, [r7, #8]
 801c83e:	68db      	ldr	r3, [r3, #12]
 801c840:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c842:	68bb      	ldr	r3, [r7, #8]
 801c844:	685b      	ldr	r3, [r3, #4]
 801c846:	4a0b      	ldr	r2, [pc, #44]	; (801c874 <sys_check_timeouts+0x80>)
 801c848:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c84a:	68b9      	ldr	r1, [r7, #8]
 801c84c:	2006      	movs	r0, #6
 801c84e:	f7f8 fbbd 	bl	8014fcc <memp_free>
    if (handler != NULL) {
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	2b00      	cmp	r3, #0
 801c856:	d0d3      	beq.n	801c800 <sys_check_timeouts+0xc>
      handler(arg);
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	6838      	ldr	r0, [r7, #0]
 801c85c:	4798      	blx	r3
  do {
 801c85e:	e7cf      	b.n	801c800 <sys_check_timeouts+0xc>
      return;
 801c860:	bf00      	nop
 801c862:	e000      	b.n	801c866 <sys_check_timeouts+0x72>
      return;
 801c864:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c866:	3710      	adds	r7, #16
 801c868:	46bd      	mov	sp, r7
 801c86a:	bd80      	pop	{r7, pc}
 801c86c:	24008a1c 	.word	0x24008a1c
 801c870:	2400525c 	.word	0x2400525c
 801c874:	24005260 	.word	0x24005260

0801c878 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c878:	b580      	push	{r7, lr}
 801c87a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c87c:	f002 fc60 	bl	801f140 <rand>
 801c880:	4603      	mov	r3, r0
 801c882:	b29b      	uxth	r3, r3
 801c884:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c888:	b29b      	uxth	r3, r3
 801c88a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c88e:	b29a      	uxth	r2, r3
 801c890:	4b01      	ldr	r3, [pc, #4]	; (801c898 <udp_init+0x20>)
 801c892:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c894:	bf00      	nop
 801c896:	bd80      	pop	{r7, pc}
 801c898:	2400002c 	.word	0x2400002c

0801c89c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c89c:	b480      	push	{r7}
 801c89e:	b083      	sub	sp, #12
 801c8a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c8a6:	4b17      	ldr	r3, [pc, #92]	; (801c904 <udp_new_port+0x68>)
 801c8a8:	881b      	ldrh	r3, [r3, #0]
 801c8aa:	1c5a      	adds	r2, r3, #1
 801c8ac:	b291      	uxth	r1, r2
 801c8ae:	4a15      	ldr	r2, [pc, #84]	; (801c904 <udp_new_port+0x68>)
 801c8b0:	8011      	strh	r1, [r2, #0]
 801c8b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c8b6:	4293      	cmp	r3, r2
 801c8b8:	d103      	bne.n	801c8c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c8ba:	4b12      	ldr	r3, [pc, #72]	; (801c904 <udp_new_port+0x68>)
 801c8bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c8c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8c2:	4b11      	ldr	r3, [pc, #68]	; (801c908 <udp_new_port+0x6c>)
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	603b      	str	r3, [r7, #0]
 801c8c8:	e011      	b.n	801c8ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c8ca:	683b      	ldr	r3, [r7, #0]
 801c8cc:	8a5a      	ldrh	r2, [r3, #18]
 801c8ce:	4b0d      	ldr	r3, [pc, #52]	; (801c904 <udp_new_port+0x68>)
 801c8d0:	881b      	ldrh	r3, [r3, #0]
 801c8d2:	429a      	cmp	r2, r3
 801c8d4:	d108      	bne.n	801c8e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c8d6:	88fb      	ldrh	r3, [r7, #6]
 801c8d8:	3301      	adds	r3, #1
 801c8da:	80fb      	strh	r3, [r7, #6]
 801c8dc:	88fb      	ldrh	r3, [r7, #6]
 801c8de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c8e2:	d3e0      	bcc.n	801c8a6 <udp_new_port+0xa>
        return 0;
 801c8e4:	2300      	movs	r3, #0
 801c8e6:	e007      	b.n	801c8f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8e8:	683b      	ldr	r3, [r7, #0]
 801c8ea:	68db      	ldr	r3, [r3, #12]
 801c8ec:	603b      	str	r3, [r7, #0]
 801c8ee:	683b      	ldr	r3, [r7, #0]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d1ea      	bne.n	801c8ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c8f4:	4b03      	ldr	r3, [pc, #12]	; (801c904 <udp_new_port+0x68>)
 801c8f6:	881b      	ldrh	r3, [r3, #0]
}
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	370c      	adds	r7, #12
 801c8fc:	46bd      	mov	sp, r7
 801c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c902:	4770      	bx	lr
 801c904:	2400002c 	.word	0x2400002c
 801c908:	24008a3c 	.word	0x24008a3c

0801c90c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b084      	sub	sp, #16
 801c910:	af00      	add	r7, sp, #0
 801c912:	60f8      	str	r0, [r7, #12]
 801c914:	60b9      	str	r1, [r7, #8]
 801c916:	4613      	mov	r3, r2
 801c918:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d105      	bne.n	801c92c <udp_input_local_match+0x20>
 801c920:	4b27      	ldr	r3, [pc, #156]	; (801c9c0 <udp_input_local_match+0xb4>)
 801c922:	2287      	movs	r2, #135	; 0x87
 801c924:	4927      	ldr	r1, [pc, #156]	; (801c9c4 <udp_input_local_match+0xb8>)
 801c926:	4828      	ldr	r0, [pc, #160]	; (801c9c8 <udp_input_local_match+0xbc>)
 801c928:	f002 fb7c 	bl	801f024 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c92c:	68bb      	ldr	r3, [r7, #8]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d105      	bne.n	801c93e <udp_input_local_match+0x32>
 801c932:	4b23      	ldr	r3, [pc, #140]	; (801c9c0 <udp_input_local_match+0xb4>)
 801c934:	2288      	movs	r2, #136	; 0x88
 801c936:	4925      	ldr	r1, [pc, #148]	; (801c9cc <udp_input_local_match+0xc0>)
 801c938:	4823      	ldr	r0, [pc, #140]	; (801c9c8 <udp_input_local_match+0xbc>)
 801c93a:	f002 fb73 	bl	801f024 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	7a1b      	ldrb	r3, [r3, #8]
 801c942:	2b00      	cmp	r3, #0
 801c944:	d00b      	beq.n	801c95e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	7a1a      	ldrb	r2, [r3, #8]
 801c94a:	4b21      	ldr	r3, [pc, #132]	; (801c9d0 <udp_input_local_match+0xc4>)
 801c94c:	685b      	ldr	r3, [r3, #4]
 801c94e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c952:	3301      	adds	r3, #1
 801c954:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c956:	429a      	cmp	r2, r3
 801c958:	d001      	beq.n	801c95e <udp_input_local_match+0x52>
    return 0;
 801c95a:	2300      	movs	r3, #0
 801c95c:	e02b      	b.n	801c9b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c95e:	79fb      	ldrb	r3, [r7, #7]
 801c960:	2b00      	cmp	r3, #0
 801c962:	d018      	beq.n	801c996 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	2b00      	cmp	r3, #0
 801c968:	d013      	beq.n	801c992 <udp_input_local_match+0x86>
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d00f      	beq.n	801c992 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c972:	4b17      	ldr	r3, [pc, #92]	; (801c9d0 <udp_input_local_match+0xc4>)
 801c974:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c97a:	d00a      	beq.n	801c992 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	681a      	ldr	r2, [r3, #0]
 801c980:	4b13      	ldr	r3, [pc, #76]	; (801c9d0 <udp_input_local_match+0xc4>)
 801c982:	695b      	ldr	r3, [r3, #20]
 801c984:	405a      	eors	r2, r3
 801c986:	68bb      	ldr	r3, [r7, #8]
 801c988:	3308      	adds	r3, #8
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d110      	bne.n	801c9b4 <udp_input_local_match+0xa8>
          return 1;
 801c992:	2301      	movs	r3, #1
 801c994:	e00f      	b.n	801c9b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d009      	beq.n	801c9b0 <udp_input_local_match+0xa4>
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d005      	beq.n	801c9b0 <udp_input_local_match+0xa4>
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	681a      	ldr	r2, [r3, #0]
 801c9a8:	4b09      	ldr	r3, [pc, #36]	; (801c9d0 <udp_input_local_match+0xc4>)
 801c9aa:	695b      	ldr	r3, [r3, #20]
 801c9ac:	429a      	cmp	r2, r3
 801c9ae:	d101      	bne.n	801c9b4 <udp_input_local_match+0xa8>
        return 1;
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	e000      	b.n	801c9b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c9b4:	2300      	movs	r3, #0
}
 801c9b6:	4618      	mov	r0, r3
 801c9b8:	3710      	adds	r7, #16
 801c9ba:	46bd      	mov	sp, r7
 801c9bc:	bd80      	pop	{r7, pc}
 801c9be:	bf00      	nop
 801c9c0:	0802684c 	.word	0x0802684c
 801c9c4:	080268a8 	.word	0x080268a8
 801c9c8:	080268cc 	.word	0x080268cc
 801c9cc:	080268f4 	.word	0x080268f4
 801c9d0:	24005b34 	.word	0x24005b34

0801c9d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c9d4:	b590      	push	{r4, r7, lr}
 801c9d6:	b08d      	sub	sp, #52	; 0x34
 801c9d8:	af02      	add	r7, sp, #8
 801c9da:	6078      	str	r0, [r7, #4]
 801c9dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c9de:	2300      	movs	r3, #0
 801c9e0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d105      	bne.n	801c9f4 <udp_input+0x20>
 801c9e8:	4b7c      	ldr	r3, [pc, #496]	; (801cbdc <udp_input+0x208>)
 801c9ea:	22cf      	movs	r2, #207	; 0xcf
 801c9ec:	497c      	ldr	r1, [pc, #496]	; (801cbe0 <udp_input+0x20c>)
 801c9ee:	487d      	ldr	r0, [pc, #500]	; (801cbe4 <udp_input+0x210>)
 801c9f0:	f002 fb18 	bl	801f024 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c9f4:	683b      	ldr	r3, [r7, #0]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d105      	bne.n	801ca06 <udp_input+0x32>
 801c9fa:	4b78      	ldr	r3, [pc, #480]	; (801cbdc <udp_input+0x208>)
 801c9fc:	22d0      	movs	r2, #208	; 0xd0
 801c9fe:	497a      	ldr	r1, [pc, #488]	; (801cbe8 <udp_input+0x214>)
 801ca00:	4878      	ldr	r0, [pc, #480]	; (801cbe4 <udp_input+0x210>)
 801ca02:	f002 fb0f 	bl	801f024 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	895b      	ldrh	r3, [r3, #10]
 801ca0a:	2b07      	cmp	r3, #7
 801ca0c:	d803      	bhi.n	801ca16 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801ca0e:	6878      	ldr	r0, [r7, #4]
 801ca10:	f7f9 f952 	bl	8015cb8 <pbuf_free>
    goto end;
 801ca14:	e0de      	b.n	801cbd4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	685b      	ldr	r3, [r3, #4]
 801ca1a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ca1c:	4b73      	ldr	r3, [pc, #460]	; (801cbec <udp_input+0x218>)
 801ca1e:	695b      	ldr	r3, [r3, #20]
 801ca20:	4a72      	ldr	r2, [pc, #456]	; (801cbec <udp_input+0x218>)
 801ca22:	6812      	ldr	r2, [r2, #0]
 801ca24:	4611      	mov	r1, r2
 801ca26:	4618      	mov	r0, r3
 801ca28:	f7f6 ffb6 	bl	8013998 <ip4_addr_isbroadcast_u32>
 801ca2c:	4603      	mov	r3, r0
 801ca2e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801ca30:	697b      	ldr	r3, [r7, #20]
 801ca32:	881b      	ldrh	r3, [r3, #0]
 801ca34:	b29b      	uxth	r3, r3
 801ca36:	4618      	mov	r0, r3
 801ca38:	f7f5 fa42 	bl	8011ec0 <lwip_htons>
 801ca3c:	4603      	mov	r3, r0
 801ca3e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801ca40:	697b      	ldr	r3, [r7, #20]
 801ca42:	885b      	ldrh	r3, [r3, #2]
 801ca44:	b29b      	uxth	r3, r3
 801ca46:	4618      	mov	r0, r3
 801ca48:	f7f5 fa3a 	bl	8011ec0 <lwip_htons>
 801ca4c:	4603      	mov	r3, r0
 801ca4e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801ca50:	2300      	movs	r3, #0
 801ca52:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801ca54:	2300      	movs	r3, #0
 801ca56:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ca58:	2300      	movs	r3, #0
 801ca5a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ca5c:	4b64      	ldr	r3, [pc, #400]	; (801cbf0 <udp_input+0x21c>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	627b      	str	r3, [r7, #36]	; 0x24
 801ca62:	e054      	b.n	801cb0e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca66:	8a5b      	ldrh	r3, [r3, #18]
 801ca68:	89fa      	ldrh	r2, [r7, #14]
 801ca6a:	429a      	cmp	r2, r3
 801ca6c:	d14a      	bne.n	801cb04 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ca6e:	7cfb      	ldrb	r3, [r7, #19]
 801ca70:	461a      	mov	r2, r3
 801ca72:	6839      	ldr	r1, [r7, #0]
 801ca74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ca76:	f7ff ff49 	bl	801c90c <udp_input_local_match>
 801ca7a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d041      	beq.n	801cb04 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca82:	7c1b      	ldrb	r3, [r3, #16]
 801ca84:	f003 0304 	and.w	r3, r3, #4
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d11d      	bne.n	801cac8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801ca8c:	69fb      	ldr	r3, [r7, #28]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d102      	bne.n	801ca98 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca94:	61fb      	str	r3, [r7, #28]
 801ca96:	e017      	b.n	801cac8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ca98:	7cfb      	ldrb	r3, [r7, #19]
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d014      	beq.n	801cac8 <udp_input+0xf4>
 801ca9e:	4b53      	ldr	r3, [pc, #332]	; (801cbec <udp_input+0x218>)
 801caa0:	695b      	ldr	r3, [r3, #20]
 801caa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801caa6:	d10f      	bne.n	801cac8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801caa8:	69fb      	ldr	r3, [r7, #28]
 801caaa:	681a      	ldr	r2, [r3, #0]
 801caac:	683b      	ldr	r3, [r7, #0]
 801caae:	3304      	adds	r3, #4
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	429a      	cmp	r2, r3
 801cab4:	d008      	beq.n	801cac8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cab8:	681a      	ldr	r2, [r3, #0]
 801caba:	683b      	ldr	r3, [r7, #0]
 801cabc:	3304      	adds	r3, #4
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d101      	bne.n	801cac8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cac6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caca:	8a9b      	ldrh	r3, [r3, #20]
 801cacc:	8a3a      	ldrh	r2, [r7, #16]
 801cace:	429a      	cmp	r2, r3
 801cad0:	d118      	bne.n	801cb04 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cad4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d005      	beq.n	801cae6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cadc:	685a      	ldr	r2, [r3, #4]
 801cade:	4b43      	ldr	r3, [pc, #268]	; (801cbec <udp_input+0x218>)
 801cae0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801cae2:	429a      	cmp	r2, r3
 801cae4:	d10e      	bne.n	801cb04 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801cae6:	6a3b      	ldr	r3, [r7, #32]
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d014      	beq.n	801cb16 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caee:	68da      	ldr	r2, [r3, #12]
 801caf0:	6a3b      	ldr	r3, [r7, #32]
 801caf2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801caf4:	4b3e      	ldr	r3, [pc, #248]	; (801cbf0 <udp_input+0x21c>)
 801caf6:	681a      	ldr	r2, [r3, #0]
 801caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cafa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801cafc:	4a3c      	ldr	r2, [pc, #240]	; (801cbf0 <udp_input+0x21c>)
 801cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb00:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801cb02:	e008      	b.n	801cb16 <udp_input+0x142>
      }
    }

    prev = pcb;
 801cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb06:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb0a:	68db      	ldr	r3, [r3, #12]
 801cb0c:	627b      	str	r3, [r7, #36]	; 0x24
 801cb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d1a7      	bne.n	801ca64 <udp_input+0x90>
 801cb14:	e000      	b.n	801cb18 <udp_input+0x144>
        break;
 801cb16:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d101      	bne.n	801cb22 <udp_input+0x14e>
    pcb = uncon_pcb;
 801cb1e:	69fb      	ldr	r3, [r7, #28]
 801cb20:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d002      	beq.n	801cb2e <udp_input+0x15a>
    for_us = 1;
 801cb28:	2301      	movs	r3, #1
 801cb2a:	76fb      	strb	r3, [r7, #27]
 801cb2c:	e00a      	b.n	801cb44 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801cb2e:	683b      	ldr	r3, [r7, #0]
 801cb30:	3304      	adds	r3, #4
 801cb32:	681a      	ldr	r2, [r3, #0]
 801cb34:	4b2d      	ldr	r3, [pc, #180]	; (801cbec <udp_input+0x218>)
 801cb36:	695b      	ldr	r3, [r3, #20]
 801cb38:	429a      	cmp	r2, r3
 801cb3a:	bf0c      	ite	eq
 801cb3c:	2301      	moveq	r3, #1
 801cb3e:	2300      	movne	r3, #0
 801cb40:	b2db      	uxtb	r3, r3
 801cb42:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801cb44:	7efb      	ldrb	r3, [r7, #27]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d041      	beq.n	801cbce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801cb4a:	2108      	movs	r1, #8
 801cb4c:	6878      	ldr	r0, [r7, #4]
 801cb4e:	f7f9 f82d 	bl	8015bac <pbuf_remove_header>
 801cb52:	4603      	mov	r3, r0
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d00a      	beq.n	801cb6e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801cb58:	4b20      	ldr	r3, [pc, #128]	; (801cbdc <udp_input+0x208>)
 801cb5a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801cb5e:	4925      	ldr	r1, [pc, #148]	; (801cbf4 <udp_input+0x220>)
 801cb60:	4820      	ldr	r0, [pc, #128]	; (801cbe4 <udp_input+0x210>)
 801cb62:	f002 fa5f 	bl	801f024 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801cb66:	6878      	ldr	r0, [r7, #4]
 801cb68:	f7f9 f8a6 	bl	8015cb8 <pbuf_free>
      goto end;
 801cb6c:	e032      	b.n	801cbd4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d012      	beq.n	801cb9a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb76:	699b      	ldr	r3, [r3, #24]
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d00a      	beq.n	801cb92 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb7e:	699c      	ldr	r4, [r3, #24]
 801cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb82:	69d8      	ldr	r0, [r3, #28]
 801cb84:	8a3b      	ldrh	r3, [r7, #16]
 801cb86:	9300      	str	r3, [sp, #0]
 801cb88:	4b1b      	ldr	r3, [pc, #108]	; (801cbf8 <udp_input+0x224>)
 801cb8a:	687a      	ldr	r2, [r7, #4]
 801cb8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cb8e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801cb90:	e021      	b.n	801cbd6 <udp_input+0x202>
        pbuf_free(p);
 801cb92:	6878      	ldr	r0, [r7, #4]
 801cb94:	f7f9 f890 	bl	8015cb8 <pbuf_free>
        goto end;
 801cb98:	e01c      	b.n	801cbd4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801cb9a:	7cfb      	ldrb	r3, [r7, #19]
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d112      	bne.n	801cbc6 <udp_input+0x1f2>
 801cba0:	4b12      	ldr	r3, [pc, #72]	; (801cbec <udp_input+0x218>)
 801cba2:	695b      	ldr	r3, [r3, #20]
 801cba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cba8:	2be0      	cmp	r3, #224	; 0xe0
 801cbaa:	d00c      	beq.n	801cbc6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801cbac:	4b0f      	ldr	r3, [pc, #60]	; (801cbec <udp_input+0x218>)
 801cbae:	899b      	ldrh	r3, [r3, #12]
 801cbb0:	3308      	adds	r3, #8
 801cbb2:	b29b      	uxth	r3, r3
 801cbb4:	b21b      	sxth	r3, r3
 801cbb6:	4619      	mov	r1, r3
 801cbb8:	6878      	ldr	r0, [r7, #4]
 801cbba:	f7f9 f86a 	bl	8015c92 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801cbbe:	2103      	movs	r1, #3
 801cbc0:	6878      	ldr	r0, [r7, #4]
 801cbc2:	f7f6 faed 	bl	80131a0 <icmp_dest_unreach>
      pbuf_free(p);
 801cbc6:	6878      	ldr	r0, [r7, #4]
 801cbc8:	f7f9 f876 	bl	8015cb8 <pbuf_free>
  return;
 801cbcc:	e003      	b.n	801cbd6 <udp_input+0x202>
    pbuf_free(p);
 801cbce:	6878      	ldr	r0, [r7, #4]
 801cbd0:	f7f9 f872 	bl	8015cb8 <pbuf_free>
  return;
 801cbd4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801cbd6:	372c      	adds	r7, #44	; 0x2c
 801cbd8:	46bd      	mov	sp, r7
 801cbda:	bd90      	pop	{r4, r7, pc}
 801cbdc:	0802684c 	.word	0x0802684c
 801cbe0:	0802691c 	.word	0x0802691c
 801cbe4:	080268cc 	.word	0x080268cc
 801cbe8:	08026934 	.word	0x08026934
 801cbec:	24005b34 	.word	0x24005b34
 801cbf0:	24008a3c 	.word	0x24008a3c
 801cbf4:	08026950 	.word	0x08026950
 801cbf8:	24005b44 	.word	0x24005b44

0801cbfc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b086      	sub	sp, #24
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	60f8      	str	r0, [r7, #12]
 801cc04:	60b9      	str	r1, [r7, #8]
 801cc06:	4613      	mov	r3, r2
 801cc08:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801cc0a:	68bb      	ldr	r3, [r7, #8]
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d101      	bne.n	801cc14 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801cc10:	4b39      	ldr	r3, [pc, #228]	; (801ccf8 <udp_bind+0xfc>)
 801cc12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d109      	bne.n	801cc2e <udp_bind+0x32>
 801cc1a:	4b38      	ldr	r3, [pc, #224]	; (801ccfc <udp_bind+0x100>)
 801cc1c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801cc20:	4937      	ldr	r1, [pc, #220]	; (801cd00 <udp_bind+0x104>)
 801cc22:	4838      	ldr	r0, [pc, #224]	; (801cd04 <udp_bind+0x108>)
 801cc24:	f002 f9fe 	bl	801f024 <iprintf>
 801cc28:	f06f 030f 	mvn.w	r3, #15
 801cc2c:	e060      	b.n	801ccf0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801cc2e:	2300      	movs	r3, #0
 801cc30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc32:	4b35      	ldr	r3, [pc, #212]	; (801cd08 <udp_bind+0x10c>)
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	617b      	str	r3, [r7, #20]
 801cc38:	e009      	b.n	801cc4e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801cc3a:	68fa      	ldr	r2, [r7, #12]
 801cc3c:	697b      	ldr	r3, [r7, #20]
 801cc3e:	429a      	cmp	r2, r3
 801cc40:	d102      	bne.n	801cc48 <udp_bind+0x4c>
      rebind = 1;
 801cc42:	2301      	movs	r3, #1
 801cc44:	74fb      	strb	r3, [r7, #19]
      break;
 801cc46:	e005      	b.n	801cc54 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc48:	697b      	ldr	r3, [r7, #20]
 801cc4a:	68db      	ldr	r3, [r3, #12]
 801cc4c:	617b      	str	r3, [r7, #20]
 801cc4e:	697b      	ldr	r3, [r7, #20]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d1f2      	bne.n	801cc3a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801cc54:	88fb      	ldrh	r3, [r7, #6]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d109      	bne.n	801cc6e <udp_bind+0x72>
    port = udp_new_port();
 801cc5a:	f7ff fe1f 	bl	801c89c <udp_new_port>
 801cc5e:	4603      	mov	r3, r0
 801cc60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801cc62:	88fb      	ldrh	r3, [r7, #6]
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d12c      	bne.n	801ccc2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801cc68:	f06f 0307 	mvn.w	r3, #7
 801cc6c:	e040      	b.n	801ccf0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cc6e:	4b26      	ldr	r3, [pc, #152]	; (801cd08 <udp_bind+0x10c>)
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	617b      	str	r3, [r7, #20]
 801cc74:	e022      	b.n	801ccbc <udp_bind+0xc0>
      if (pcb != ipcb) {
 801cc76:	68fa      	ldr	r2, [r7, #12]
 801cc78:	697b      	ldr	r3, [r7, #20]
 801cc7a:	429a      	cmp	r2, r3
 801cc7c:	d01b      	beq.n	801ccb6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801cc7e:	697b      	ldr	r3, [r7, #20]
 801cc80:	8a5b      	ldrh	r3, [r3, #18]
 801cc82:	88fa      	ldrh	r2, [r7, #6]
 801cc84:	429a      	cmp	r2, r3
 801cc86:	d116      	bne.n	801ccb6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cc88:	697b      	ldr	r3, [r7, #20]
 801cc8a:	681a      	ldr	r2, [r3, #0]
 801cc8c:	68bb      	ldr	r3, [r7, #8]
 801cc8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801cc90:	429a      	cmp	r2, r3
 801cc92:	d00d      	beq.n	801ccb0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cc94:	68bb      	ldr	r3, [r7, #8]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d00a      	beq.n	801ccb0 <udp_bind+0xb4>
 801cc9a:	68bb      	ldr	r3, [r7, #8]
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d006      	beq.n	801ccb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801cca2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d003      	beq.n	801ccb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801cca8:	697b      	ldr	r3, [r7, #20]
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d102      	bne.n	801ccb6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ccb0:	f06f 0307 	mvn.w	r3, #7
 801ccb4:	e01c      	b.n	801ccf0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ccb6:	697b      	ldr	r3, [r7, #20]
 801ccb8:	68db      	ldr	r3, [r3, #12]
 801ccba:	617b      	str	r3, [r7, #20]
 801ccbc:	697b      	ldr	r3, [r7, #20]
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d1d9      	bne.n	801cc76 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ccc2:	68bb      	ldr	r3, [r7, #8]
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d002      	beq.n	801ccce <udp_bind+0xd2>
 801ccc8:	68bb      	ldr	r3, [r7, #8]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	e000      	b.n	801ccd0 <udp_bind+0xd4>
 801ccce:	2300      	movs	r3, #0
 801ccd0:	68fa      	ldr	r2, [r7, #12]
 801ccd2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	88fa      	ldrh	r2, [r7, #6]
 801ccd8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801ccda:	7cfb      	ldrb	r3, [r7, #19]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d106      	bne.n	801ccee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801cce0:	4b09      	ldr	r3, [pc, #36]	; (801cd08 <udp_bind+0x10c>)
 801cce2:	681a      	ldr	r2, [r3, #0]
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801cce8:	4a07      	ldr	r2, [pc, #28]	; (801cd08 <udp_bind+0x10c>)
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801ccee:	2300      	movs	r3, #0
}
 801ccf0:	4618      	mov	r0, r3
 801ccf2:	3718      	adds	r7, #24
 801ccf4:	46bd      	mov	sp, r7
 801ccf6:	bd80      	pop	{r7, pc}
 801ccf8:	08027278 	.word	0x08027278
 801ccfc:	0802684c 	.word	0x0802684c
 801cd00:	08026b40 	.word	0x08026b40
 801cd04:	080268cc 	.word	0x080268cc
 801cd08:	24008a3c 	.word	0x24008a3c

0801cd0c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b086      	sub	sp, #24
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	60f8      	str	r0, [r7, #12]
 801cd14:	60b9      	str	r1, [r7, #8]
 801cd16:	4613      	mov	r3, r2
 801cd18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cd1a:	68fb      	ldr	r3, [r7, #12]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d109      	bne.n	801cd34 <udp_connect+0x28>
 801cd20:	4b2c      	ldr	r3, [pc, #176]	; (801cdd4 <udp_connect+0xc8>)
 801cd22:	f240 4235 	movw	r2, #1077	; 0x435
 801cd26:	492c      	ldr	r1, [pc, #176]	; (801cdd8 <udp_connect+0xcc>)
 801cd28:	482c      	ldr	r0, [pc, #176]	; (801cddc <udp_connect+0xd0>)
 801cd2a:	f002 f97b 	bl	801f024 <iprintf>
 801cd2e:	f06f 030f 	mvn.w	r3, #15
 801cd32:	e04b      	b.n	801cdcc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cd34:	68bb      	ldr	r3, [r7, #8]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d109      	bne.n	801cd4e <udp_connect+0x42>
 801cd3a:	4b26      	ldr	r3, [pc, #152]	; (801cdd4 <udp_connect+0xc8>)
 801cd3c:	f240 4236 	movw	r2, #1078	; 0x436
 801cd40:	4927      	ldr	r1, [pc, #156]	; (801cde0 <udp_connect+0xd4>)
 801cd42:	4826      	ldr	r0, [pc, #152]	; (801cddc <udp_connect+0xd0>)
 801cd44:	f002 f96e 	bl	801f024 <iprintf>
 801cd48:	f06f 030f 	mvn.w	r3, #15
 801cd4c:	e03e      	b.n	801cdcc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801cd4e:	68fb      	ldr	r3, [r7, #12]
 801cd50:	8a5b      	ldrh	r3, [r3, #18]
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d10f      	bne.n	801cd76 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cd56:	68f9      	ldr	r1, [r7, #12]
 801cd58:	68fb      	ldr	r3, [r7, #12]
 801cd5a:	8a5b      	ldrh	r3, [r3, #18]
 801cd5c:	461a      	mov	r2, r3
 801cd5e:	68f8      	ldr	r0, [r7, #12]
 801cd60:	f7ff ff4c 	bl	801cbfc <udp_bind>
 801cd64:	4603      	mov	r3, r0
 801cd66:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801cd68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d002      	beq.n	801cd76 <udp_connect+0x6a>
      return err;
 801cd70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cd74:	e02a      	b.n	801cdcc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801cd76:	68bb      	ldr	r3, [r7, #8]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d002      	beq.n	801cd82 <udp_connect+0x76>
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	e000      	b.n	801cd84 <udp_connect+0x78>
 801cd82:	2300      	movs	r3, #0
 801cd84:	68fa      	ldr	r2, [r7, #12]
 801cd86:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	88fa      	ldrh	r2, [r7, #6]
 801cd8c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cd8e:	68fb      	ldr	r3, [r7, #12]
 801cd90:	7c1b      	ldrb	r3, [r3, #16]
 801cd92:	f043 0304 	orr.w	r3, r3, #4
 801cd96:	b2da      	uxtb	r2, r3
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cd9c:	4b11      	ldr	r3, [pc, #68]	; (801cde4 <udp_connect+0xd8>)
 801cd9e:	681b      	ldr	r3, [r3, #0]
 801cda0:	617b      	str	r3, [r7, #20]
 801cda2:	e008      	b.n	801cdb6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801cda4:	68fa      	ldr	r2, [r7, #12]
 801cda6:	697b      	ldr	r3, [r7, #20]
 801cda8:	429a      	cmp	r2, r3
 801cdaa:	d101      	bne.n	801cdb0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801cdac:	2300      	movs	r3, #0
 801cdae:	e00d      	b.n	801cdcc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cdb0:	697b      	ldr	r3, [r7, #20]
 801cdb2:	68db      	ldr	r3, [r3, #12]
 801cdb4:	617b      	str	r3, [r7, #20]
 801cdb6:	697b      	ldr	r3, [r7, #20]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d1f3      	bne.n	801cda4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801cdbc:	4b09      	ldr	r3, [pc, #36]	; (801cde4 <udp_connect+0xd8>)
 801cdbe:	681a      	ldr	r2, [r3, #0]
 801cdc0:	68fb      	ldr	r3, [r7, #12]
 801cdc2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801cdc4:	4a07      	ldr	r2, [pc, #28]	; (801cde4 <udp_connect+0xd8>)
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801cdca:	2300      	movs	r3, #0
}
 801cdcc:	4618      	mov	r0, r3
 801cdce:	3718      	adds	r7, #24
 801cdd0:	46bd      	mov	sp, r7
 801cdd2:	bd80      	pop	{r7, pc}
 801cdd4:	0802684c 	.word	0x0802684c
 801cdd8:	08026b58 	.word	0x08026b58
 801cddc:	080268cc 	.word	0x080268cc
 801cde0:	08026b74 	.word	0x08026b74
 801cde4:	24008a3c 	.word	0x24008a3c

0801cde8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801cde8:	b580      	push	{r7, lr}
 801cdea:	b082      	sub	sp, #8
 801cdec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801cdee:	2000      	movs	r0, #0
 801cdf0:	f7f8 f87c 	bl	8014eec <memp_malloc>
 801cdf4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d007      	beq.n	801ce0c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801cdfc:	2220      	movs	r2, #32
 801cdfe:	2100      	movs	r1, #0
 801ce00:	6878      	ldr	r0, [r7, #4]
 801ce02:	f001 fa17 	bl	801e234 <memset>
    pcb->ttl = UDP_TTL;
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	22ff      	movs	r2, #255	; 0xff
 801ce0a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ce0c:	687b      	ldr	r3, [r7, #4]
}
 801ce0e:	4618      	mov	r0, r3
 801ce10:	3708      	adds	r7, #8
 801ce12:	46bd      	mov	sp, r7
 801ce14:	bd80      	pop	{r7, pc}
	...

0801ce18 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ce18:	b480      	push	{r7}
 801ce1a:	b085      	sub	sp, #20
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	6078      	str	r0, [r7, #4]
 801ce20:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d01e      	beq.n	801ce66 <udp_netif_ip_addr_changed+0x4e>
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d01a      	beq.n	801ce66 <udp_netif_ip_addr_changed+0x4e>
 801ce30:	683b      	ldr	r3, [r7, #0]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d017      	beq.n	801ce66 <udp_netif_ip_addr_changed+0x4e>
 801ce36:	683b      	ldr	r3, [r7, #0]
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d013      	beq.n	801ce66 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ce3e:	4b0d      	ldr	r3, [pc, #52]	; (801ce74 <udp_netif_ip_addr_changed+0x5c>)
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	60fb      	str	r3, [r7, #12]
 801ce44:	e00c      	b.n	801ce60 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	681a      	ldr	r2, [r3, #0]
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	429a      	cmp	r2, r3
 801ce50:	d103      	bne.n	801ce5a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ce52:	683b      	ldr	r3, [r7, #0]
 801ce54:	681a      	ldr	r2, [r3, #0]
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	68db      	ldr	r3, [r3, #12]
 801ce5e:	60fb      	str	r3, [r7, #12]
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d1ef      	bne.n	801ce46 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ce66:	bf00      	nop
 801ce68:	3714      	adds	r7, #20
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce70:	4770      	bx	lr
 801ce72:	bf00      	nop
 801ce74:	24008a3c 	.word	0x24008a3c

0801ce78 <cis_Init>:
 * @brief  CIS init
 * @param  Void
 * @retval None
 */
void cis_Init(synthModeTypeDef mode)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b082      	sub	sp, #8
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	4603      	mov	r3, r0
 801ce80:	71fb      	strb	r3, [r7, #7]
	if (mode == IFFT_MODE)
 801ce82:	79fb      	ldrb	r3, [r7, #7]
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d10f      	bne.n	801cea8 <cis_Init+0x30>
	{
		CIS_EFFECTIVE_PIXELS_NB			=	(CIS_PIXEL_AERA_STOP - CIS_PIXEL_AERA_START) / CIS_IFFT_OVERSAMPLING_RATIO;	//5530 / CIS_OVERSAMPLING_RATIO active pixels
 801ce88:	4b2b      	ldr	r3, [pc, #172]	; (801cf38 <cis_Init+0xc0>)
 801ce8a:	f44f 7290 	mov.w	r2, #288	; 0x120
 801ce8e:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_START	=	CIS_PIXEL_AERA_START / (CIS_IFFT_OVERSAMPLING_RATIO);
 801ce90:	4b2a      	ldr	r3, [pc, #168]	; (801cf3c <cis_Init+0xc4>)
 801ce92:	2213      	movs	r2, #19
 801ce94:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_STOP	=	CIS_PIXEL_AERA_STOP / (CIS_IFFT_OVERSAMPLING_RATIO);
 801ce96:	4b2a      	ldr	r3, [pc, #168]	; (801cf40 <cis_Init+0xc8>)
 801ce98:	f240 1233 	movw	r2, #307	; 0x133
 801ce9c:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / (CIS_IFFT_OVERSAMPLING_RATIO);
 801ce9e:	4b29      	ldr	r3, [pc, #164]	; (801cf44 <cis_Init+0xcc>)
 801cea0:	f240 123d 	movw	r2, #317	; 0x13d
 801cea4:	801a      	strh	r2, [r3, #0]
 801cea6:	e00b      	b.n	801cec0 <cis_Init+0x48>
	}
	else
	{
		CIS_EFFECTIVE_PIXELS_NB			=	(CIS_PIXEL_AERA_STOP - CIS_PIXEL_AERA_START) / CIS_IMGPLY_OVERSAMPLING_RATIO;	//5530 / CIS_OVERSAMPLING_RATIO active pixels
 801cea8:	4b23      	ldr	r3, [pc, #140]	; (801cf38 <cis_Init+0xc0>)
 801ceaa:	2212      	movs	r2, #18
 801ceac:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_START	=	CIS_PIXEL_AERA_START / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801ceae:	4b23      	ldr	r3, [pc, #140]	; (801cf3c <cis_Init+0xc4>)
 801ceb0:	2201      	movs	r2, #1
 801ceb2:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_PIXEL_AERA_STOP	=	CIS_PIXEL_AERA_STOP / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801ceb4:	4b22      	ldr	r3, [pc, #136]	; (801cf40 <cis_Init+0xc8>)
 801ceb6:	2213      	movs	r2, #19
 801ceb8:	801a      	strh	r2, [r3, #0]
		CIS_ADC_BUFF_END_CAPTURE 		=	CIS_END_CAPTURE / CIS_IMGPLY_OVERSAMPLING_RATIO;
 801ceba:	4b22      	ldr	r3, [pc, #136]	; (801cf44 <cis_Init+0xcc>)
 801cebc:	2213      	movs	r2, #19
 801cebe:	801a      	strh	r2, [r3, #0]
	}

	ADC_CONVERTED_DATA_BUFFER_SIZE 	=	CIS_ADC_BUFF_END_CAPTURE * 2;
 801cec0:	4b20      	ldr	r3, [pc, #128]	; (801cf44 <cis_Init+0xcc>)
 801cec2:	881b      	ldrh	r3, [r3, #0]
 801cec4:	005b      	lsls	r3, r3, #1
 801cec6:	b29a      	uxth	r2, r3
 801cec8:	4b1f      	ldr	r3, [pc, #124]	; (801cf48 <cis_Init+0xd0>)
 801ceca:	801a      	strh	r2, [r3, #0]

	//allocate the contiguous memory area for storage cis data
	cisData = malloc(CIS_ADC_BUFF_END_CAPTURE * 2 * sizeof(uint16_t*));
 801cecc:	4b1d      	ldr	r3, [pc, #116]	; (801cf44 <cis_Init+0xcc>)
 801cece:	881b      	ldrh	r3, [r3, #0]
 801ced0:	00db      	lsls	r3, r3, #3
 801ced2:	4618      	mov	r0, r3
 801ced4:	f001 f970 	bl	801e1b8 <malloc>
 801ced8:	4603      	mov	r3, r0
 801ceda:	461a      	mov	r2, r3
 801cedc:	4b1b      	ldr	r3, [pc, #108]	; (801cf4c <cis_Init+0xd4>)
 801cede:	601a      	str	r2, [r3, #0]
	if (cisData == NULL)
 801cee0:	4b1a      	ldr	r3, [pc, #104]	; (801cf4c <cis_Init+0xd4>)
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d101      	bne.n	801ceec <cis_Init+0x74>
	{
		Error_Handler();
 801cee8:	f7e5 fc9c 	bl	8002824 <Error_Handler>
	}

	memset(cisData, 0, CIS_ADC_BUFF_END_CAPTURE * 2 * sizeof(uint16_t*)); //clear image
 801ceec:	4b17      	ldr	r3, [pc, #92]	; (801cf4c <cis_Init+0xd4>)
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	4a14      	ldr	r2, [pc, #80]	; (801cf44 <cis_Init+0xcc>)
 801cef2:	8812      	ldrh	r2, [r2, #0]
 801cef4:	00d2      	lsls	r2, r2, #3
 801cef6:	2100      	movs	r1, #0
 801cef8:	4618      	mov	r0, r3
 801cefa:	f001 f99b 	bl	801e234 <memset>

	HAL_GPIO_WritePin(CIS_RS_GPIO_Port, CIS_RS_Pin, GPIO_PIN_SET); //SET : 200DPI   RESET : 400DPI
 801cefe:	2201      	movs	r2, #1
 801cf00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801cf04:	4812      	ldr	r0, [pc, #72]	; (801cf50 <cis_Init+0xd8>)
 801cf06:	f7eb feaf 	bl	8008c68 <HAL_GPIO_WritePin>

	//	cis_ADC_Init(mode);
	cis_TIM_SP_Init();
 801cf0a:	f000 f951 	bl	801d1b0 <cis_TIM_SP_Init>
	cis_TIM_LED_R_Init();
 801cf0e:	f000 f973 	bl	801d1f8 <cis_TIM_LED_R_Init>
	cis_TIM_LED_G_Init();
 801cf12:	f000 f983 	bl	801d21c <cis_TIM_LED_G_Init>
	cis_TIM_LED_B_Init();
 801cf16:	f000 f95d 	bl	801d1d4 <cis_TIM_LED_B_Init>
	cis_TIM_CLK_Init();
 801cf1a:	f000 f92f 	bl	801d17c <cis_TIM_CLK_Init>
	//	{
	//		Error_Handler();
	//	}

	//Reset CLK counter
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 801cf1e:	4b0d      	ldr	r3, [pc, #52]	; (801cf54 <cis_Init+0xdc>)
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	2200      	movs	r2, #0
 801cf24:	625a      	str	r2, [r3, #36]	; 0x24

	//Reset SP counter
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 801cf26:	4b0c      	ldr	r3, [pc, #48]	; (801cf58 <cis_Init+0xe0>)
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	2200      	movs	r2, #0
 801cf2c:	625a      	str	r2, [r3, #36]	; 0x24
//	//Set RGB phase shift
//	__HAL_TIM_SET_COUNTER(&htim5, (CIS_END_CAPTURE * 2) - CIS_LED_ON);		//B
//	__HAL_TIM_SET_COUNTER(&htim4, (CIS_END_CAPTURE * 3) - CIS_LED_ON);		//G
//	__HAL_TIM_SET_COUNTER(&htim3, (CIS_END_CAPTURE) - CIS_LED_ON);			//R
//#endif
}
 801cf2e:	bf00      	nop
 801cf30:	3708      	adds	r7, #8
 801cf32:	46bd      	mov	sp, r7
 801cf34:	bd80      	pop	{r7, pc}
 801cf36:	bf00      	nop
 801cf38:	2400002e 	.word	0x2400002e
 801cf3c:	24000030 	.word	0x24000030
 801cf40:	24000032 	.word	0x24000032
 801cf44:	24000034 	.word	0x24000034
 801cf48:	24000036 	.word	0x24000036
 801cf4c:	24005268 	.word	0x24005268
 801cf50:	58020000 	.word	0x58020000
 801cf54:	24005858 	.word	0x24005858
 801cf58:	24005728 	.word	0x24005728

0801cf5c <cis_GetEffectivePixelNb>:
 * @brief  GetEffectivePixelNb
 * @param  Void
 * @retval Nuber of effective pixels
 */
__inline uint16_t cis_GetEffectivePixelNb(void)
{
 801cf5c:	b480      	push	{r7}
 801cf5e:	af00      	add	r7, sp, #0
	return CIS_EFFECTIVE_PIXELS_NB;
 801cf60:	4b03      	ldr	r3, [pc, #12]	; (801cf70 <cis_GetEffectivePixelNb+0x14>)
 801cf62:	881b      	ldrh	r3, [r3, #0]
}
 801cf64:	4618      	mov	r0, r3
 801cf66:	46bd      	mov	sp, r7
 801cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf6c:	4770      	bx	lr
 801cf6e:	bf00      	nop
 801cf70:	2400002e 	.word	0x2400002e

0801cf74 <cis_GetBuffData>:
 * @brief  Return buffer data
 * @param  index
 * @retval value
 */
uint16_t cis_GetBuffData(uint32_t index)
{
 801cf74:	b480      	push	{r7}
 801cf76:	b083      	sub	sp, #12
 801cf78:	af00      	add	r7, sp, #0
 801cf7a:	6078      	str	r0, [r7, #4]
	//	if (index >= ADC_CONVERTED_DATA_BUFFER_SIZE)
	//		Error_Handler();
	return cisData[index + CIS_ADC_BUFF_PIXEL_AERA_START];
 801cf7c:	4b07      	ldr	r3, [pc, #28]	; (801cf9c <cis_GetBuffData+0x28>)
 801cf7e:	681a      	ldr	r2, [r3, #0]
 801cf80:	4b07      	ldr	r3, [pc, #28]	; (801cfa0 <cis_GetBuffData+0x2c>)
 801cf82:	881b      	ldrh	r3, [r3, #0]
 801cf84:	4619      	mov	r1, r3
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	440b      	add	r3, r1
 801cf8a:	005b      	lsls	r3, r3, #1
 801cf8c:	4413      	add	r3, r2
 801cf8e:	881b      	ldrh	r3, [r3, #0]
}
 801cf90:	4618      	mov	r0, r3
 801cf92:	370c      	adds	r7, #12
 801cf94:	46bd      	mov	sp, r7
 801cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf9a:	4770      	bx	lr
 801cf9c:	24005268 	.word	0x24005268
 801cfa0:	24000030 	.word	0x24000030

0801cfa4 <cis_ImageProcessBW>:
 * @brief  Manages Image process.
 * @param  None
 * @retval Image error
 */
void cis_ImageProcessBW(uint16_t *cis_buff)
{
 801cfa4:	b580      	push	{r7, lr}
 801cfa6:	b08a      	sub	sp, #40	; 0x28
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	6078      	str	r0, [r7, #4]
	/* 1st half buffer played; so fill it and continue playing from bottom*/
	if(cisBufferState == CIS_BUFFER_OFFSET_HALF)
 801cfac:	4b42      	ldr	r3, [pc, #264]	; (801d0b8 <cis_ImageProcessBW+0x114>)
 801cfae:	781b      	ldrb	r3, [r3, #0]
 801cfb0:	2b01      	cmp	r3, #1
 801cfb2:	d139      	bne.n	801d028 <cis_ImageProcessBW+0x84>
	{
		cisBufferState = CIS_BUFFER_OFFSET_NONE;
 801cfb4:	4b40      	ldr	r3, [pc, #256]	; (801d0b8 <cis_ImageProcessBW+0x114>)
 801cfb6:	2200      	movs	r2, #0
 801cfb8:	701a      	strb	r2, [r3, #0]
		/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer */
		SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[0], CIS_END_CAPTURE / 2);
 801cfba:	4b40      	ldr	r3, [pc, #256]	; (801d0bc <cis_ImageProcessBW+0x118>)
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	627b      	str	r3, [r7, #36]	; 0x24
 801cfc0:	f240 133d 	movw	r3, #317	; 0x13d
 801cfc4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 801cfc6:	6a3b      	ldr	r3, [r7, #32]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	dd1d      	ble.n	801d008 <cis_ImageProcessBW+0x64>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfce:	f003 021f 	and.w	r2, r3, #31
 801cfd2:	6a3b      	ldr	r3, [r7, #32]
 801cfd4:	4413      	add	r3, r2
 801cfd6:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 801cfdc:	f3bf 8f4f 	dsb	sy
}
 801cfe0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801cfe2:	4a37      	ldr	r2, [pc, #220]	; (801d0c0 <cis_ImageProcessBW+0x11c>)
 801cfe4:	69bb      	ldr	r3, [r7, #24]
 801cfe6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801cfea:	69bb      	ldr	r3, [r7, #24]
 801cfec:	3320      	adds	r3, #32
 801cfee:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801cff0:	69fb      	ldr	r3, [r7, #28]
 801cff2:	3b20      	subs	r3, #32
 801cff4:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 801cff6:	69fb      	ldr	r3, [r7, #28]
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	dcf2      	bgt.n	801cfe2 <cis_ImageProcessBW+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801cffc:	f3bf 8f4f 	dsb	sy
}
 801d000:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d002:	f3bf 8f6f 	isb	sy
}
 801d006:	bf00      	nop
}
 801d008:	bf00      	nop
		arm_copy_q15((int16_t*)&cisData[CIS_ADC_BUFF_PIXEL_AERA_START], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_NB);
 801d00a:	4b2c      	ldr	r3, [pc, #176]	; (801d0bc <cis_ImageProcessBW+0x118>)
 801d00c:	681a      	ldr	r2, [r3, #0]
 801d00e:	4b2d      	ldr	r3, [pc, #180]	; (801d0c4 <cis_ImageProcessBW+0x120>)
 801d010:	881b      	ldrh	r3, [r3, #0]
 801d012:	005b      	lsls	r3, r3, #1
 801d014:	4413      	add	r3, r2
 801d016:	4a2c      	ldr	r2, [pc, #176]	; (801d0c8 <cis_ImageProcessBW+0x124>)
 801d018:	8812      	ldrh	r2, [r2, #0]
 801d01a:	6879      	ldr	r1, [r7, #4]
 801d01c:	4618      	mov	r0, r3
 801d01e:	f7e6 fd16 	bl	8003a4e <arm_copy_q15>

		cis_ImageFilterBW(cis_buff);
 801d022:	6878      	ldr	r0, [r7, #4]
 801d024:	f000 f854 	bl	801d0d0 <cis_ImageFilterBW>
	}

	/* 2nd half buffer played; so fill it and continue playing from top */
	if(cisBufferState == CIS_BUFFER_OFFSET_FULL)
 801d028:	4b23      	ldr	r3, [pc, #140]	; (801d0b8 <cis_ImageProcessBW+0x114>)
 801d02a:	781b      	ldrb	r3, [r3, #0]
 801d02c:	2b02      	cmp	r3, #2
 801d02e:	d13f      	bne.n	801d0b0 <cis_ImageProcessBW+0x10c>
	{
		cisBufferState = CIS_BUFFER_OFFSET_NONE;
 801d030:	4b21      	ldr	r3, [pc, #132]	; (801d0b8 <cis_ImageProcessBW+0x114>)
 801d032:	2200      	movs	r2, #0
 801d034:	701a      	strb	r2, [r3, #0]
		/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer */
		SCB_InvalidateDCache_by_Addr((uint32_t *) &cisData[CIS_END_CAPTURE / 4], CIS_END_CAPTURE / 2);
 801d036:	4b21      	ldr	r3, [pc, #132]	; (801d0bc <cis_ImageProcessBW+0x118>)
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801d03e:	617b      	str	r3, [r7, #20]
 801d040:	f240 133d 	movw	r3, #317	; 0x13d
 801d044:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 801d046:	693b      	ldr	r3, [r7, #16]
 801d048:	2b00      	cmp	r3, #0
 801d04a:	dd1d      	ble.n	801d088 <cis_ImageProcessBW+0xe4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801d04c:	697b      	ldr	r3, [r7, #20]
 801d04e:	f003 021f 	and.w	r2, r3, #31
 801d052:	693b      	ldr	r3, [r7, #16]
 801d054:	4413      	add	r3, r2
 801d056:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801d058:	697b      	ldr	r3, [r7, #20]
 801d05a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 801d05c:	f3bf 8f4f 	dsb	sy
}
 801d060:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801d062:	4a17      	ldr	r2, [pc, #92]	; (801d0c0 <cis_ImageProcessBW+0x11c>)
 801d064:	68bb      	ldr	r3, [r7, #8]
 801d066:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801d06a:	68bb      	ldr	r3, [r7, #8]
 801d06c:	3320      	adds	r3, #32
 801d06e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	3b20      	subs	r3, #32
 801d074:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	2b00      	cmp	r3, #0
 801d07a:	dcf2      	bgt.n	801d062 <cis_ImageProcessBW+0xbe>
  __ASM volatile ("dsb 0xF":::"memory");
 801d07c:	f3bf 8f4f 	dsb	sy
}
 801d080:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d082:	f3bf 8f6f 	isb	sy
}
 801d086:	bf00      	nop
}
 801d088:	bf00      	nop
		arm_copy_q15((int16_t*)&cisData[CIS_ADC_BUFF_END_CAPTURE + CIS_ADC_BUFF_PIXEL_AERA_START], (int16_t*)cis_buff, CIS_EFFECTIVE_PIXELS_NB);
 801d08a:	4b0c      	ldr	r3, [pc, #48]	; (801d0bc <cis_ImageProcessBW+0x118>)
 801d08c:	681a      	ldr	r2, [r3, #0]
 801d08e:	4b0f      	ldr	r3, [pc, #60]	; (801d0cc <cis_ImageProcessBW+0x128>)
 801d090:	881b      	ldrh	r3, [r3, #0]
 801d092:	4619      	mov	r1, r3
 801d094:	4b0b      	ldr	r3, [pc, #44]	; (801d0c4 <cis_ImageProcessBW+0x120>)
 801d096:	881b      	ldrh	r3, [r3, #0]
 801d098:	440b      	add	r3, r1
 801d09a:	005b      	lsls	r3, r3, #1
 801d09c:	4413      	add	r3, r2
 801d09e:	4a0a      	ldr	r2, [pc, #40]	; (801d0c8 <cis_ImageProcessBW+0x124>)
 801d0a0:	8812      	ldrh	r2, [r2, #0]
 801d0a2:	6879      	ldr	r1, [r7, #4]
 801d0a4:	4618      	mov	r0, r3
 801d0a6:	f7e6 fcd2 	bl	8003a4e <arm_copy_q15>

		cis_ImageFilterBW(cis_buff);
 801d0aa:	6878      	ldr	r0, [r7, #4]
 801d0ac:	f000 f810 	bl	801d0d0 <cis_ImageFilterBW>
	}
}
 801d0b0:	bf00      	nop
 801d0b2:	3728      	adds	r7, #40	; 0x28
 801d0b4:	46bd      	mov	sp, r7
 801d0b6:	bd80      	pop	{r7, pc}
 801d0b8:	2400526c 	.word	0x2400526c
 801d0bc:	24005268 	.word	0x24005268
 801d0c0:	e000ed00 	.word	0xe000ed00
 801d0c4:	24000030 	.word	0x24000030
 801d0c8:	2400002e 	.word	0x2400002e
 801d0cc:	24000034 	.word	0x24000034

0801d0d0 <cis_ImageFilterBW>:
 * @brief  Image filtering
 * @param  Audio buffer
 * @retval None
 */
void cis_ImageFilterBW(uint16_t *cis_buff)
{
 801d0d0:	b580      	push	{r7, lr}
 801d0d2:	ed2d 8b02 	vpush	{d8}
 801d0d6:	b084      	sub	sp, #16
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < CIS_EFFECTIVE_PIXELS_NB; i++)
 801d0dc:	2300      	movs	r3, #0
 801d0de:	60fb      	str	r3, [r7, #12]
 801d0e0:	e038      	b.n	801d154 <cis_ImageFilterBW+0x84>
	{
#ifdef CIS_INVERT_COLOR
		cis_buff[i] = (double)(65535 - cis_buff[i]) * (pow(10.00, ((double)(65535 - cis_buff[i]) / 65535.00)) / 10.00); //sensibility filer generate some glitchs
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	005b      	lsls	r3, r3, #1
 801d0e6:	687a      	ldr	r2, [r7, #4]
 801d0e8:	4413      	add	r3, r2
 801d0ea:	881b      	ldrh	r3, [r3, #0]
 801d0ec:	461a      	mov	r2, r3
 801d0ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d0f2:	1a9b      	subs	r3, r3, r2
 801d0f4:	ee07 3a90 	vmov	s15, r3
 801d0f8:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	005b      	lsls	r3, r3, #1
 801d100:	687a      	ldr	r2, [r7, #4]
 801d102:	4413      	add	r3, r2
 801d104:	881b      	ldrh	r3, [r3, #0]
 801d106:	461a      	mov	r2, r3
 801d108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d10c:	1a9b      	subs	r3, r3, r2
 801d10e:	ee07 3a90 	vmov	s15, r3
 801d112:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d116:	ed9f 5b16 	vldr	d5, [pc, #88]	; 801d170 <cis_ImageFilterBW+0xa0>
 801d11a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801d11e:	eeb0 1b46 	vmov.f64	d1, d6
 801d122:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 801d126:	f005 fcb7 	bl	8022a98 <pow>
 801d12a:	eeb0 6b40 	vmov.f64	d6, d0
 801d12e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 801d132:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801d136:	ee28 7b07 	vmul.f64	d7, d8, d7
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	005b      	lsls	r3, r3, #1
 801d13e:	687a      	ldr	r2, [r7, #4]
 801d140:	4413      	add	r3, r2
 801d142:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801d146:	ee17 2a90 	vmov	r2, s15
 801d14a:	b292      	uxth	r2, r2
 801d14c:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < CIS_EFFECTIVE_PIXELS_NB; i++)
 801d14e:	68fb      	ldr	r3, [r7, #12]
 801d150:	3301      	adds	r3, #1
 801d152:	60fb      	str	r3, [r7, #12]
 801d154:	4b08      	ldr	r3, [pc, #32]	; (801d178 <cis_ImageFilterBW+0xa8>)
 801d156:	881b      	ldrh	r3, [r3, #0]
 801d158:	461a      	mov	r2, r3
 801d15a:	68fb      	ldr	r3, [r7, #12]
 801d15c:	4293      	cmp	r3, r2
 801d15e:	d3c0      	bcc.n	801d0e2 <cis_ImageFilterBW+0x12>

#else
		cis_buff[i] = (double)(cis_buff[i]) * (pow(10.00, ((double)(cis_buff[i]) / 65535.00)) / 10.00);
#endif
	}
}
 801d160:	bf00      	nop
 801d162:	bf00      	nop
 801d164:	3710      	adds	r7, #16
 801d166:	46bd      	mov	sp, r7
 801d168:	ecbd 8b02 	vpop	{d8}
 801d16c:	bd80      	pop	{r7, pc}
 801d16e:	bf00      	nop
 801d170:	00000000 	.word	0x00000000
 801d174:	40efffe0 	.word	0x40efffe0
 801d178:	2400002e 	.word	0x2400002e

0801d17c <cis_TIM_CLK_Init>:
 * @brief  Init CIS clock Frequency
 * @param  sampling_frequency
 * @retval None
 */
void cis_TIM_CLK_Init()
{
 801d17c:	b580      	push	{r7, lr}
 801d17e:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 801d180:	f7e5 ff1a 	bl	8002fb8 <MX_TIM1_Init>

	/* Start ADC Timer #######################################*/
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 801d184:	2100      	movs	r1, #0
 801d186:	4809      	ldr	r0, [pc, #36]	; (801d1ac <cis_TIM_CLK_Init+0x30>)
 801d188:	f7f1 f936 	bl	800e3f8 <HAL_TIM_PWM_Start>
 801d18c:	4603      	mov	r3, r0
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d001      	beq.n	801d196 <cis_TIM_CLK_Init+0x1a>
	{
		Error_Handler();
 801d192:	f7e5 fb47 	bl	8002824 <Error_Handler>
	}

	/* Start CLK generation ##################################*/
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 801d196:	2104      	movs	r1, #4
 801d198:	4804      	ldr	r0, [pc, #16]	; (801d1ac <cis_TIM_CLK_Init+0x30>)
 801d19a:	f7f1 f92d 	bl	800e3f8 <HAL_TIM_PWM_Start>
 801d19e:	4603      	mov	r3, r0
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d001      	beq.n	801d1a8 <cis_TIM_CLK_Init+0x2c>
	{
		Error_Handler();
 801d1a4:	f7e5 fb3e 	bl	8002824 <Error_Handler>
	}
}
 801d1a8:	bf00      	nop
 801d1aa:	bd80      	pop	{r7, pc}
 801d1ac:	24005858 	.word	0x24005858

0801d1b0 <cis_TIM_SP_Init>:
 * @brief  CIS start pulse timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_SP_Init()
{
 801d1b0:	b580      	push	{r7, lr}
 801d1b2:	af00      	add	r7, sp, #0
	MX_TIM8_Init();
 801d1b4:	f7e6 f92a 	bl	800340c <MX_TIM8_Init>

	/* Start SP generation ##################################*/
	if(HAL_TIM_OC_Start(&htim8, TIM_CHANNEL_3) != HAL_OK)
 801d1b8:	2108      	movs	r1, #8
 801d1ba:	4805      	ldr	r0, [pc, #20]	; (801d1d0 <cis_TIM_SP_Init+0x20>)
 801d1bc:	f7f0 ffbc 	bl	800e138 <HAL_TIM_OC_Start>
 801d1c0:	4603      	mov	r3, r0
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d001      	beq.n	801d1ca <cis_TIM_SP_Init+0x1a>
	{
		Error_Handler();
 801d1c6:	f7e5 fb2d 	bl	8002824 <Error_Handler>
	}
}
 801d1ca:	bf00      	nop
 801d1cc:	bd80      	pop	{r7, pc}
 801d1ce:	bf00      	nop
 801d1d0:	24005728 	.word	0x24005728

0801d1d4 <cis_TIM_LED_B_Init>:
 * @brief  CIS red led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_B_Init()
{
 801d1d4:	b580      	push	{r7, lr}
 801d1d6:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 801d1d8:	f7e5 ff9e 	bl	8003118 <MX_TIM3_Init>

	/* Start LED R generation ###############################*/
	if(HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 801d1dc:	2100      	movs	r1, #0
 801d1de:	4805      	ldr	r0, [pc, #20]	; (801d1f4 <cis_TIM_LED_B_Init+0x20>)
 801d1e0:	f7f0 ffaa 	bl	800e138 <HAL_TIM_OC_Start>
 801d1e4:	4603      	mov	r3, r0
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d001      	beq.n	801d1ee <cis_TIM_LED_B_Init+0x1a>
	{
		Error_Handler();
 801d1ea:	f7e5 fb1b 	bl	8002824 <Error_Handler>
	}
}
 801d1ee:	bf00      	nop
 801d1f0:	bd80      	pop	{r7, pc}
 801d1f2:	bf00      	nop
 801d1f4:	2400580c 	.word	0x2400580c

0801d1f8 <cis_TIM_LED_R_Init>:
 * @brief  CIS green led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_R_Init()
{
 801d1f8:	b580      	push	{r7, lr}
 801d1fa:	af00      	add	r7, sp, #0
	MX_TIM4_Init();
 801d1fc:	f7e6 f80a 	bl	8003214 <MX_TIM4_Init>

	/* Start LED G generation ###############################*/
	if(HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_2) != HAL_OK)
 801d200:	2104      	movs	r1, #4
 801d202:	4805      	ldr	r0, [pc, #20]	; (801d218 <cis_TIM_LED_R_Init+0x20>)
 801d204:	f7f0 ff98 	bl	800e138 <HAL_TIM_OC_Start>
 801d208:	4603      	mov	r3, r0
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d001      	beq.n	801d212 <cis_TIM_LED_R_Init+0x1a>
	{
		Error_Handler();
 801d20e:	f7e5 fb09 	bl	8002824 <Error_Handler>
	}
}
 801d212:	bf00      	nop
 801d214:	bd80      	pop	{r7, pc}
 801d216:	bf00      	nop
 801d218:	24005774 	.word	0x24005774

0801d21c <cis_TIM_LED_G_Init>:
 * @brief  CIS blue led timer init
 * @param  Void
 * @retval None
 */
void cis_TIM_LED_G_Init()
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	af00      	add	r7, sp, #0
	MX_TIM5_Init();
 801d220:	f7e6 f876 	bl	8003310 <MX_TIM5_Init>

	/* Start LED B generation ###############################*/
	if(HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_3) != HAL_OK)
 801d224:	2108      	movs	r1, #8
 801d226:	4805      	ldr	r0, [pc, #20]	; (801d23c <cis_TIM_LED_G_Init+0x20>)
 801d228:	f7f0 ff86 	bl	800e138 <HAL_TIM_OC_Start>
 801d22c:	4603      	mov	r3, r0
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d001      	beq.n	801d236 <cis_TIM_LED_G_Init+0x1a>
	{
		Error_Handler();
 801d232:	f7e5 faf7 	bl	8002824 <Error_Handler>
	}
}
 801d236:	bf00      	nop
 801d238:	bd80      	pop	{r7, pc}
 801d23a:	bf00      	nop
 801d23c:	240057c0 	.word	0x240057c0

0801d240 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801d240:	b480      	push	{r7}
 801d242:	b083      	sub	sp, #12
 801d244:	af00      	add	r7, sp, #0
 801d246:	6078      	str	r0, [r7, #4]
	cisBufferState = CIS_BUFFER_OFFSET_FULL;
 801d248:	4b04      	ldr	r3, [pc, #16]	; (801d25c <HAL_ADC_ConvCpltCallback+0x1c>)
 801d24a:	2202      	movs	r2, #2
 801d24c:	701a      	strb	r2, [r3, #0]
}
 801d24e:	bf00      	nop
 801d250:	370c      	adds	r7, #12
 801d252:	46bd      	mov	sp, r7
 801d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d258:	4770      	bx	lr
 801d25a:	bf00      	nop
 801d25c:	2400526c 	.word	0x2400526c

0801d260 <icm20602_write>:

/* Private user code ---------------------------------------------------------*/

//Writes a register byte to the driver
uint8_t icm20602_write(uint8_t reg, uint8_t *data, uint16_t len)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b084      	sub	sp, #16
 801d264:	af00      	add	r7, sp, #0
 801d266:	4603      	mov	r3, r0
 801d268:	6039      	str	r1, [r7, #0]
 801d26a:	71fb      	strb	r3, [r7, #7]
 801d26c:	4613      	mov	r3, r2
 801d26e:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801d270:	2300      	movs	r3, #0
 801d272:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801d274:	2200      	movs	r2, #0
 801d276:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d27a:	4819      	ldr	r0, [pc, #100]	; (801d2e0 <icm20602_write+0x80>)
 801d27c:	f7eb fcf4 	bl	8008c68 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d280:	bf00      	nop
 801d282:	4818      	ldr	r0, [pc, #96]	; (801d2e4 <icm20602_write+0x84>)
 801d284:	f7f0 fd14 	bl	800dcb0 <HAL_SPI_GetState>
 801d288:	4603      	mov	r3, r0
 801d28a:	2b01      	cmp	r3, #1
 801d28c:	d1f9      	bne.n	801d282 <icm20602_write+0x22>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801d28e:	1df9      	adds	r1, r7, #7
 801d290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d294:	2201      	movs	r2, #1
 801d296:	4813      	ldr	r0, [pc, #76]	; (801d2e4 <icm20602_write+0x84>)
 801d298:	f7ef fe3a 	bl	800cf10 <HAL_SPI_Transmit>
 801d29c:	4603      	mov	r3, r0
 801d29e:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d2a0:	bf00      	nop
 801d2a2:	4810      	ldr	r0, [pc, #64]	; (801d2e4 <icm20602_write+0x84>)
 801d2a4:	f7f0 fd04 	bl	800dcb0 <HAL_SPI_GetState>
 801d2a8:	4603      	mov	r3, r0
 801d2aa:	2b01      	cmp	r3, #1
 801d2ac:	d1f9      	bne.n	801d2a2 <icm20602_write+0x42>
	rv += HAL_SPI_Transmit(&hspi2, data, len, 1000);
 801d2ae:	88ba      	ldrh	r2, [r7, #4]
 801d2b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d2b4:	6839      	ldr	r1, [r7, #0]
 801d2b6:	480b      	ldr	r0, [pc, #44]	; (801d2e4 <icm20602_write+0x84>)
 801d2b8:	f7ef fe2a 	bl	800cf10 <HAL_SPI_Transmit>
 801d2bc:	4603      	mov	r3, r0
 801d2be:	461a      	mov	r2, r3
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	4413      	add	r3, r2
 801d2c4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801d2c6:	2201      	movs	r2, #1
 801d2c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d2cc:	4804      	ldr	r0, [pc, #16]	; (801d2e0 <icm20602_write+0x80>)
 801d2ce:	f7eb fccb 	bl	8008c68 <HAL_GPIO_WritePin>
	return rv;
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	b2db      	uxtb	r3, r3
}
 801d2d6:	4618      	mov	r0, r3
 801d2d8:	3710      	adds	r7, #16
 801d2da:	46bd      	mov	sp, r7
 801d2dc:	bd80      	pop	{r7, pc}
 801d2de:	bf00      	nop
 801d2e0:	58020400 	.word	0x58020400
 801d2e4:	240056a0 	.word	0x240056a0

0801d2e8 <icm20602_read>:

//Read a register byte to the driver
uint8_t icm20602_read(uint8_t reg, uint8_t *data, uint16_t len)
{
 801d2e8:	b580      	push	{r7, lr}
 801d2ea:	b084      	sub	sp, #16
 801d2ec:	af00      	add	r7, sp, #0
 801d2ee:	4603      	mov	r3, r0
 801d2f0:	6039      	str	r1, [r7, #0]
 801d2f2:	71fb      	strb	r3, [r7, #7]
 801d2f4:	4613      	mov	r3, r2
 801d2f6:	80bb      	strh	r3, [r7, #4]
	int rv = 0;
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	60fb      	str	r3, [r7, #12]
	reg |= 0b10000000;
 801d2fc:	79fb      	ldrb	r3, [r7, #7]
 801d2fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d302:	b2db      	uxtb	r3, r3
 801d304:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 801d306:	2200      	movs	r2, #0
 801d308:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d30c:	4818      	ldr	r0, [pc, #96]	; (801d370 <icm20602_read+0x88>)
 801d30e:	f7eb fcab 	bl	8008c68 <HAL_GPIO_WritePin>
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d312:	bf00      	nop
 801d314:	4817      	ldr	r0, [pc, #92]	; (801d374 <icm20602_read+0x8c>)
 801d316:	f7f0 fccb 	bl	800dcb0 <HAL_SPI_GetState>
 801d31a:	4603      	mov	r3, r0
 801d31c:	2b01      	cmp	r3, #1
 801d31e:	d1f9      	bne.n	801d314 <icm20602_read+0x2c>
	rv = HAL_SPI_Transmit(&hspi2, &reg, 1, 1000);
 801d320:	1df9      	adds	r1, r7, #7
 801d322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d326:	2201      	movs	r2, #1
 801d328:	4812      	ldr	r0, [pc, #72]	; (801d374 <icm20602_read+0x8c>)
 801d32a:	f7ef fdf1 	bl	800cf10 <HAL_SPI_Transmit>
 801d32e:	4603      	mov	r3, r0
 801d330:	60fb      	str	r3, [r7, #12]
	while(HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 801d332:	bf00      	nop
 801d334:	480f      	ldr	r0, [pc, #60]	; (801d374 <icm20602_read+0x8c>)
 801d336:	f7f0 fcbb 	bl	800dcb0 <HAL_SPI_GetState>
 801d33a:	4603      	mov	r3, r0
 801d33c:	2b01      	cmp	r3, #1
 801d33e:	d1f9      	bne.n	801d334 <icm20602_read+0x4c>
	rv += HAL_SPI_Receive(&hspi2, data, len, 1000);
 801d340:	88ba      	ldrh	r2, [r7, #4]
 801d342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d346:	6839      	ldr	r1, [r7, #0]
 801d348:	480a      	ldr	r0, [pc, #40]	; (801d374 <icm20602_read+0x8c>)
 801d34a:	f7ef ffd3 	bl	800d2f4 <HAL_SPI_Receive>
 801d34e:	4603      	mov	r3, r0
 801d350:	461a      	mov	r2, r3
 801d352:	68fb      	ldr	r3, [r7, #12]
 801d354:	4413      	add	r3, r2
 801d356:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_SET);
 801d358:	2201      	movs	r2, #1
 801d35a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d35e:	4804      	ldr	r0, [pc, #16]	; (801d370 <icm20602_read+0x88>)
 801d360:	f7eb fc82 	bl	8008c68 <HAL_GPIO_WritePin>
	return rv;
 801d364:	68fb      	ldr	r3, [r7, #12]
 801d366:	b2db      	uxtb	r3, r3
}
 801d368:	4618      	mov	r0, r3
 801d36a:	3710      	adds	r7, #16
 801d36c:	46bd      	mov	sp, r7
 801d36e:	bd80      	pop	{r7, pc}
 801d370:	58020400 	.word	0x58020400
 801d374:	240056a0 	.word	0x240056a0

0801d378 <icm20602_init>:
}

/***** Global Functions *****/

int8_t icm20602_init(void)
{
 801d378:	b580      	push	{r7, lr}
 801d37a:	b082      	sub	sp, #8
 801d37c:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 801d37e:	2300      	movs	r3, #0
 801d380:	71bb      	strb	r3, [r7, #6]
	int8_t r = 0;
 801d382:	2300      	movs	r3, #0
 801d384:	71fb      	strb	r3, [r7, #7]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = 0x80;
 801d386:	2380      	movs	r3, #128	; 0x80
 801d388:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801d38a:	1dbb      	adds	r3, r7, #6
 801d38c:	2201      	movs	r2, #1
 801d38e:	4619      	mov	r1, r3
 801d390:	206b      	movs	r0, #107	; 0x6b
 801d392:	f7ff ff65 	bl	801d260 <icm20602_write>
 801d396:	4603      	mov	r3, r0
 801d398:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	f040 818e 	bne.w	801d6c0 <icm20602_init+0x348>

	HAL_Delay(1000);
 801d3a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d3a8:	f7e6 fd88 	bl	8003ebc <HAL_Delay>

	// verify we are able to read from the chip
	r = icm20602_read(REG_WHO_AM_I, &tmp, 1);
 801d3ac:	1dbb      	adds	r3, r7, #6
 801d3ae:	2201      	movs	r2, #1
 801d3b0:	4619      	mov	r1, r3
 801d3b2:	2075      	movs	r0, #117	; 0x75
 801d3b4:	f7ff ff98 	bl	801d2e8 <icm20602_read>
 801d3b8:	4603      	mov	r3, r0
 801d3ba:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d3bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	f040 817f 	bne.w	801d6c4 <icm20602_init+0x34c>
	if (REG_WHO_AM_I_CONST != tmp) {
 801d3c6:	79bb      	ldrb	r3, [r7, #6]
 801d3c8:	2b12      	cmp	r3, #18
 801d3ca:	d006      	beq.n	801d3da <icm20602_init+0x62>
		r = -1;
 801d3cc:	23ff      	movs	r3, #255	; 0xff
 801d3ce:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801d3d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	f040 8177 	bne.w	801d6c8 <icm20602_init+0x350>
	}

	/*Reset path*/
	tmp = 0x03;
 801d3da:	2303      	movs	r3, #3
 801d3dc:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_SIGNAL_PATH_RESET, &tmp, 1);
 801d3de:	1dbb      	adds	r3, r7, #6
 801d3e0:	2201      	movs	r2, #1
 801d3e2:	4619      	mov	r1, r3
 801d3e4:	2068      	movs	r0, #104	; 0x68
 801d3e6:	f7ff ff3b 	bl	801d260 <icm20602_write>
 801d3ea:	4603      	mov	r3, r0
 801d3ec:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d3ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	f040 816a 	bne.w	801d6cc <icm20602_init+0x354>

	// set clock to internal PLL
	tmp = 0x01;
 801d3f8:	2301      	movs	r3, #1
 801d3fa:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_1, &tmp, 1);
 801d3fc:	1dbb      	adds	r3, r7, #6
 801d3fe:	2201      	movs	r2, #1
 801d400:	4619      	mov	r1, r3
 801d402:	206b      	movs	r0, #107	; 0x6b
 801d404:	f7ff ff2c 	bl	801d260 <icm20602_write>
 801d408:	4603      	mov	r3, r0
 801d40a:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d40c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d410:	2b00      	cmp	r3, #0
 801d412:	f040 815d 	bne.w	801d6d0 <icm20602_init+0x358>

	// place accel and gyro on standby
	tmp = 0x3F;
 801d416:	233f      	movs	r3, #63	; 0x3f
 801d418:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801d41a:	1dbb      	adds	r3, r7, #6
 801d41c:	2201      	movs	r2, #1
 801d41e:	4619      	mov	r1, r3
 801d420:	206c      	movs	r0, #108	; 0x6c
 801d422:	f7ff ff1d 	bl	801d260 <icm20602_write>
 801d426:	4603      	mov	r3, r0
 801d428:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	f040 8150 	bne.w	801d6d4 <icm20602_init+0x35c>

	// disable fifo
	tmp = 0x01;
 801d434:	2301      	movs	r3, #1
 801d436:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_USER_CTRL, &tmp, 1);
 801d438:	1dbb      	adds	r3, r7, #6
 801d43a:	2201      	movs	r2, #1
 801d43c:	4619      	mov	r1, r3
 801d43e:	206a      	movs	r0, #106	; 0x6a
 801d440:	f7ff ff0e 	bl	801d260 <icm20602_write>
 801d444:	4603      	mov	r3, r0
 801d446:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	f040 8143 	bne.w	801d6d8 <icm20602_init+0x360>

	// disable chip I2C communications
	tmp = 0x40;
 801d452:	2340      	movs	r3, #64	; 0x40
 801d454:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_I2C_IF, &tmp, 1);
 801d456:	1dbb      	adds	r3, r7, #6
 801d458:	2201      	movs	r2, #1
 801d45a:	4619      	mov	r1, r3
 801d45c:	2070      	movs	r0, #112	; 0x70
 801d45e:	f7ff feff 	bl	801d260 <icm20602_write>
 801d462:	4603      	mov	r3, r0
 801d464:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	f040 8136 	bne.w	801d6dc <icm20602_init+0x364>

	if (dev.use_accel) {
 801d470:	4ba7      	ldr	r3, [pc, #668]	; (801d710 <icm20602_init+0x398>)
 801d472:	781b      	ldrb	r3, [r3, #0]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d034      	beq.n	801d4e2 <icm20602_init+0x16a>
		if (ICM20602_ACCEL_DLPF_BYPASS_1046_HZ == dev.accel_dlpf) {
 801d478:	4ba5      	ldr	r3, [pc, #660]	; (801d710 <icm20602_init+0x398>)
 801d47a:	789b      	ldrb	r3, [r3, #2]
 801d47c:	2b08      	cmp	r3, #8
 801d47e:	d10e      	bne.n	801d49e <icm20602_init+0x126>
			tmp = (1 << 3);
 801d480:	2308      	movs	r3, #8
 801d482:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801d484:	1dbb      	adds	r3, r7, #6
 801d486:	2201      	movs	r2, #1
 801d488:	4619      	mov	r1, r3
 801d48a:	201d      	movs	r0, #29
 801d48c:	f7ff fee8 	bl	801d260 <icm20602_write>
 801d490:	4603      	mov	r3, r0
 801d492:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d010      	beq.n	801d4be <icm20602_init+0x146>
 801d49c:	e131      	b.n	801d702 <icm20602_init+0x38a>
		}
		else {
			tmp = dev.accel_dlpf;
 801d49e:	4b9c      	ldr	r3, [pc, #624]	; (801d710 <icm20602_init+0x398>)
 801d4a0:	789b      	ldrb	r3, [r3, #2]
 801d4a2:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_ACCEL_CONFIG_2, &tmp, 1);
 801d4a4:	1dbb      	adds	r3, r7, #6
 801d4a6:	2201      	movs	r2, #1
 801d4a8:	4619      	mov	r1, r3
 801d4aa:	201d      	movs	r0, #29
 801d4ac:	f7ff fed8 	bl	801d260 <icm20602_write>
 801d4b0:	4603      	mov	r3, r0
 801d4b2:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d4b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	f040 8111 	bne.w	801d6e0 <icm20602_init+0x368>
		}

		tmp = (dev.accel_g) << 2;
 801d4be:	4b94      	ldr	r3, [pc, #592]	; (801d710 <icm20602_init+0x398>)
 801d4c0:	78db      	ldrb	r3, [r3, #3]
 801d4c2:	009b      	lsls	r3, r3, #2
 801d4c4:	b2db      	uxtb	r3, r3
 801d4c6:	71bb      	strb	r3, [r7, #6]
		r =  icm20602_write(REG_ACCEL_CONFIG, &tmp, 1);
 801d4c8:	1dbb      	adds	r3, r7, #6
 801d4ca:	2201      	movs	r2, #1
 801d4cc:	4619      	mov	r1, r3
 801d4ce:	201c      	movs	r0, #28
 801d4d0:	f7ff fec6 	bl	801d260 <icm20602_write>
 801d4d4:	4603      	mov	r3, r0
 801d4d6:	71fb      	strb	r3, [r7, #7]
		ON_ERROR_GOTO((0 == r), return_err);
 801d4d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	f040 8101 	bne.w	801d6e4 <icm20602_init+0x36c>
	}

	if (dev.use_gyro) {
 801d4e2:	4b8b      	ldr	r3, [pc, #556]	; (801d710 <icm20602_init+0x398>)
 801d4e4:	791b      	ldrb	r3, [r3, #4]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d073      	beq.n	801d5d2 <icm20602_init+0x25a>
		if (ICM20602_GYRO_DLPF_BYPASS_3281_HZ == dev.gyro_dlpf) {
 801d4ea:	4b89      	ldr	r3, [pc, #548]	; (801d710 <icm20602_init+0x398>)
 801d4ec:	799b      	ldrb	r3, [r3, #6]
 801d4ee:	2b08      	cmp	r3, #8
 801d4f0:	d124      	bne.n	801d53c <icm20602_init+0x1c4>
			// bypass dpf and set dps
			tmp = 0x00;
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d4f6:	1dbb      	adds	r3, r7, #6
 801d4f8:	2201      	movs	r2, #1
 801d4fa:	4619      	mov	r1, r3
 801d4fc:	201a      	movs	r0, #26
 801d4fe:	f7ff feaf 	bl	801d260 <icm20602_write>
 801d502:	4603      	mov	r3, r0
 801d504:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	f040 80ec 	bne.w	801d6e8 <icm20602_init+0x370>

			tmp = (dev.gyro_dps << 3) | 0x02; // see table page 37 of datasheet
 801d510:	4b7f      	ldr	r3, [pc, #508]	; (801d710 <icm20602_init+0x398>)
 801d512:	79db      	ldrb	r3, [r3, #7]
 801d514:	00db      	lsls	r3, r3, #3
 801d516:	b25b      	sxtb	r3, r3
 801d518:	f043 0302 	orr.w	r3, r3, #2
 801d51c:	b25b      	sxtb	r3, r3
 801d51e:	b2db      	uxtb	r3, r3
 801d520:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d522:	1dbb      	adds	r3, r7, #6
 801d524:	2201      	movs	r2, #1
 801d526:	4619      	mov	r1, r3
 801d528:	201b      	movs	r0, #27
 801d52a:	f7ff fe99 	bl	801d260 <icm20602_write>
 801d52e:	4603      	mov	r3, r0
 801d530:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d536:	2b00      	cmp	r3, #0
 801d538:	d04b      	beq.n	801d5d2 <icm20602_init+0x25a>
 801d53a:	e0e2      	b.n	801d702 <icm20602_init+0x38a>
		}
		else if (ICM20602_GYRO_DLPF_BYPASS_8173_HZ == dev.gyro_dlpf) {
 801d53c:	4b74      	ldr	r3, [pc, #464]	; (801d710 <icm20602_init+0x398>)
 801d53e:	799b      	ldrb	r3, [r3, #6]
 801d540:	2b09      	cmp	r3, #9
 801d542:	d124      	bne.n	801d58e <icm20602_init+0x216>
			// bypass dpf and set dps
			tmp = 0x00;
 801d544:	2300      	movs	r3, #0
 801d546:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d548:	1dbb      	adds	r3, r7, #6
 801d54a:	2201      	movs	r2, #1
 801d54c:	4619      	mov	r1, r3
 801d54e:	201a      	movs	r0, #26
 801d550:	f7ff fe86 	bl	801d260 <icm20602_write>
 801d554:	4603      	mov	r3, r0
 801d556:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	f040 80c5 	bne.w	801d6ec <icm20602_init+0x374>

			tmp = (dev.gyro_dps << 3) | 0x01; // see table page 37 of datasheet
 801d562:	4b6b      	ldr	r3, [pc, #428]	; (801d710 <icm20602_init+0x398>)
 801d564:	79db      	ldrb	r3, [r3, #7]
 801d566:	00db      	lsls	r3, r3, #3
 801d568:	b25b      	sxtb	r3, r3
 801d56a:	f043 0301 	orr.w	r3, r3, #1
 801d56e:	b25b      	sxtb	r3, r3
 801d570:	b2db      	uxtb	r3, r3
 801d572:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d574:	1dbb      	adds	r3, r7, #6
 801d576:	2201      	movs	r2, #1
 801d578:	4619      	mov	r1, r3
 801d57a:	201b      	movs	r0, #27
 801d57c:	f7ff fe70 	bl	801d260 <icm20602_write>
 801d580:	4603      	mov	r3, r0
 801d582:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d022      	beq.n	801d5d2 <icm20602_init+0x25a>
 801d58c:	e0b9      	b.n	801d702 <icm20602_init+0x38a>
		}
		else {
			// configure dpf and set dps
			tmp = dev.gyro_dlpf;
 801d58e:	4b60      	ldr	r3, [pc, #384]	; (801d710 <icm20602_init+0x398>)
 801d590:	799b      	ldrb	r3, [r3, #6]
 801d592:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_CONFIG, &tmp, 1);
 801d594:	1dbb      	adds	r3, r7, #6
 801d596:	2201      	movs	r2, #1
 801d598:	4619      	mov	r1, r3
 801d59a:	201a      	movs	r0, #26
 801d59c:	f7ff fe60 	bl	801d260 <icm20602_write>
 801d5a0:	4603      	mov	r3, r0
 801d5a2:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d5a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	f040 80a1 	bne.w	801d6f0 <icm20602_init+0x378>

			tmp = dev.gyro_dps << 3;
 801d5ae:	4b58      	ldr	r3, [pc, #352]	; (801d710 <icm20602_init+0x398>)
 801d5b0:	79db      	ldrb	r3, [r3, #7]
 801d5b2:	00db      	lsls	r3, r3, #3
 801d5b4:	b2db      	uxtb	r3, r3
 801d5b6:	71bb      	strb	r3, [r7, #6]
			r =  icm20602_write(REG_GYRO_CONFIG, &tmp, 1);
 801d5b8:	1dbb      	adds	r3, r7, #6
 801d5ba:	2201      	movs	r2, #1
 801d5bc:	4619      	mov	r1, r3
 801d5be:	201b      	movs	r0, #27
 801d5c0:	f7ff fe4e 	bl	801d260 <icm20602_write>
 801d5c4:	4603      	mov	r3, r0
 801d5c6:	71fb      	strb	r3, [r7, #7]
			ON_ERROR_GOTO((0 == r), return_err);
 801d5c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	f040 8091 	bne.w	801d6f4 <icm20602_init+0x37c>
		}
	}

	/*Disale low power mode*/
	tmp = 0x00;
 801d5d2:	2300      	movs	r3, #0
 801d5d4:	71bb      	strb	r3, [r7, #6]
	r = icm20602_write(REG_LP_MODE_CFG, &tmp, 1);
 801d5d6:	1dbb      	adds	r3, r7, #6
 801d5d8:	2201      	movs	r2, #1
 801d5da:	4619      	mov	r1, r3
 801d5dc:	201e      	movs	r0, #30
 801d5de:	f7ff fe3f 	bl	801d260 <icm20602_write>
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d5e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	f040 8084 	bne.w	801d6f8 <icm20602_init+0x380>

	// enable FIFO if requested
	tmp = ((dev.use_accel) && (dev.accel_fifo)) ? 0x08 : 0x00;
 801d5f0:	4b47      	ldr	r3, [pc, #284]	; (801d710 <icm20602_init+0x398>)
 801d5f2:	781b      	ldrb	r3, [r3, #0]
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d005      	beq.n	801d604 <icm20602_init+0x28c>
 801d5f8:	4b45      	ldr	r3, [pc, #276]	; (801d710 <icm20602_init+0x398>)
 801d5fa:	785b      	ldrb	r3, [r3, #1]
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d001      	beq.n	801d604 <icm20602_init+0x28c>
 801d600:	2308      	movs	r3, #8
 801d602:	e000      	b.n	801d606 <icm20602_init+0x28e>
 801d604:	2300      	movs	r3, #0
 801d606:	71bb      	strb	r3, [r7, #6]
	tmp |= ((dev.use_gyro) && (dev.gyro_fifo)) ? 0x10 : 0x00;
 801d608:	4b41      	ldr	r3, [pc, #260]	; (801d710 <icm20602_init+0x398>)
 801d60a:	791b      	ldrb	r3, [r3, #4]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d005      	beq.n	801d61c <icm20602_init+0x2a4>
 801d610:	4b3f      	ldr	r3, [pc, #252]	; (801d710 <icm20602_init+0x398>)
 801d612:	795b      	ldrb	r3, [r3, #5]
 801d614:	2b00      	cmp	r3, #0
 801d616:	d001      	beq.n	801d61c <icm20602_init+0x2a4>
 801d618:	2210      	movs	r2, #16
 801d61a:	e000      	b.n	801d61e <icm20602_init+0x2a6>
 801d61c:	2200      	movs	r2, #0
 801d61e:	79bb      	ldrb	r3, [r7, #6]
 801d620:	b25b      	sxtb	r3, r3
 801d622:	4313      	orrs	r3, r2
 801d624:	b25b      	sxtb	r3, r3
 801d626:	b2db      	uxtb	r3, r3
 801d628:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_FIFO_EN, &tmp, 1);
 801d62a:	1dbb      	adds	r3, r7, #6
 801d62c:	2201      	movs	r2, #1
 801d62e:	4619      	mov	r1, r3
 801d630:	2023      	movs	r0, #35	; 0x23
 801d632:	f7ff fe15 	bl	801d260 <icm20602_write>
 801d636:	4603      	mov	r3, r0
 801d638:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d63a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d15c      	bne.n	801d6fc <icm20602_init+0x384>

	// configure sample rate divider (TODO: is this gyro only?)
	// note: SAMPLE_RATE = INTERNAL_SAMPLE_RATE / (1 + SMPLRT_DIV)
	tmp = (0 != dev.sample_rate_div) ? dev.sample_rate_div - 1 : 1;
 801d642:	4b33      	ldr	r3, [pc, #204]	; (801d710 <icm20602_init+0x398>)
 801d644:	7a1b      	ldrb	r3, [r3, #8]
 801d646:	2b00      	cmp	r3, #0
 801d648:	d004      	beq.n	801d654 <icm20602_init+0x2dc>
 801d64a:	4b31      	ldr	r3, [pc, #196]	; (801d710 <icm20602_init+0x398>)
 801d64c:	7a1b      	ldrb	r3, [r3, #8]
 801d64e:	3b01      	subs	r3, #1
 801d650:	b2db      	uxtb	r3, r3
 801d652:	e000      	b.n	801d656 <icm20602_init+0x2de>
 801d654:	2301      	movs	r3, #1
 801d656:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_SMPLRT_DIV, &tmp, 1);
 801d658:	1dbb      	adds	r3, r7, #6
 801d65a:	2201      	movs	r2, #1
 801d65c:	4619      	mov	r1, r3
 801d65e:	2019      	movs	r0, #25
 801d660:	f7ff fdfe 	bl	801d260 <icm20602_write>
 801d664:	4603      	mov	r3, r0
 801d666:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d147      	bne.n	801d700 <icm20602_init+0x388>

	tmp = 0;
 801d670:	2300      	movs	r3, #0
 801d672:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_gyro) ? 0 : 0x07; // 0 - on, 1 - disabled
 801d674:	4b26      	ldr	r3, [pc, #152]	; (801d710 <icm20602_init+0x398>)
 801d676:	791b      	ldrb	r3, [r3, #4]
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d001      	beq.n	801d680 <icm20602_init+0x308>
 801d67c:	2200      	movs	r2, #0
 801d67e:	e000      	b.n	801d682 <icm20602_init+0x30a>
 801d680:	2207      	movs	r2, #7
 801d682:	79bb      	ldrb	r3, [r7, #6]
 801d684:	b25b      	sxtb	r3, r3
 801d686:	4313      	orrs	r3, r2
 801d688:	b25b      	sxtb	r3, r3
 801d68a:	b2db      	uxtb	r3, r3
 801d68c:	71bb      	strb	r3, [r7, #6]
	tmp |= (dev.use_accel) ? 0 : 0x38; // 0 - on, 1 - disabled
 801d68e:	4b20      	ldr	r3, [pc, #128]	; (801d710 <icm20602_init+0x398>)
 801d690:	781b      	ldrb	r3, [r3, #0]
 801d692:	2b00      	cmp	r3, #0
 801d694:	d001      	beq.n	801d69a <icm20602_init+0x322>
 801d696:	2200      	movs	r2, #0
 801d698:	e000      	b.n	801d69c <icm20602_init+0x324>
 801d69a:	2238      	movs	r2, #56	; 0x38
 801d69c:	79bb      	ldrb	r3, [r7, #6]
 801d69e:	b25b      	sxtb	r3, r3
 801d6a0:	4313      	orrs	r3, r2
 801d6a2:	b25b      	sxtb	r3, r3
 801d6a4:	b2db      	uxtb	r3, r3
 801d6a6:	71bb      	strb	r3, [r7, #6]
	r =  icm20602_write(REG_PWR_MGMT_2, &tmp, 1);
 801d6a8:	1dbb      	adds	r3, r7, #6
 801d6aa:	2201      	movs	r2, #1
 801d6ac:	4619      	mov	r1, r3
 801d6ae:	206c      	movs	r0, #108	; 0x6c
 801d6b0:	f7ff fdd6 	bl	801d260 <icm20602_write>
 801d6b4:	4603      	mov	r3, r0
 801d6b6:	71fb      	strb	r3, [r7, #7]
	ON_ERROR_GOTO((0 == r), return_err);
 801d6b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d6bc:	2b00      	cmp	r3, #0

	return_err:
 801d6be:	e020      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6c0:	bf00      	nop
 801d6c2:	e01e      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6c4:	bf00      	nop
 801d6c6:	e01c      	b.n	801d702 <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801d6c8:	bf00      	nop
 801d6ca:	e01a      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6cc:	bf00      	nop
 801d6ce:	e018      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6d0:	bf00      	nop
 801d6d2:	e016      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6d4:	bf00      	nop
 801d6d6:	e014      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6d8:	bf00      	nop
 801d6da:	e012      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6dc:	bf00      	nop
 801d6de:	e010      	b.n	801d702 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d6e0:	bf00      	nop
 801d6e2:	e00e      	b.n	801d702 <icm20602_init+0x38a>
		ON_ERROR_GOTO((0 == r), return_err);
 801d6e4:	bf00      	nop
 801d6e6:	e00c      	b.n	801d702 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d6e8:	bf00      	nop
 801d6ea:	e00a      	b.n	801d702 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d6ec:	bf00      	nop
 801d6ee:	e008      	b.n	801d702 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d6f0:	bf00      	nop
 801d6f2:	e006      	b.n	801d702 <icm20602_init+0x38a>
			ON_ERROR_GOTO((0 == r), return_err);
 801d6f4:	bf00      	nop
 801d6f6:	e004      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6f8:	bf00      	nop
 801d6fa:	e002      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d6fc:	bf00      	nop
 801d6fe:	e000      	b.n	801d702 <icm20602_init+0x38a>
	ON_ERROR_GOTO((0 == r), return_err);
 801d700:	bf00      	nop

	return r;
 801d702:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801d706:	4618      	mov	r0, r3
 801d708:	3708      	adds	r7, #8
 801d70a:	46bd      	mov	sp, r7
 801d70c:	bd80      	pop	{r7, pc}
 801d70e:	bf00      	nop
 801d710:	24000038 	.word	0x24000038

0801d714 <icm20602_read_data_raw>:
}

int8_t icm20602_read_data_raw(int16_t * p_ax,
		int16_t * p_ay, int16_t * p_az, int16_t * p_gx, int16_t * p_gy,
		int16_t * p_gz, int16_t * p_t)
{
 801d714:	b580      	push	{r7, lr}
 801d716:	b088      	sub	sp, #32
 801d718:	af00      	add	r7, sp, #0
 801d71a:	60f8      	str	r0, [r7, #12]
 801d71c:	60b9      	str	r1, [r7, #8]
 801d71e:	607a      	str	r2, [r7, #4]
 801d720:	603b      	str	r3, [r7, #0]
	uint8_t buf[14] = {0};
 801d722:	2300      	movs	r3, #0
 801d724:	613b      	str	r3, [r7, #16]
 801d726:	f107 0314 	add.w	r3, r7, #20
 801d72a:	2200      	movs	r2, #0
 801d72c:	601a      	str	r2, [r3, #0]
 801d72e:	605a      	str	r2, [r3, #4]
 801d730:	811a      	strh	r2, [r3, #8]
	int8_t r = 0;
 801d732:	2300      	movs	r3, #0
 801d734:	77fb      	strb	r3, [r7, #31]

	r = icm20602_read(REG_ACCEL_XOUT_H, buf, 14);
 801d736:	f107 0310 	add.w	r3, r7, #16
 801d73a:	220e      	movs	r2, #14
 801d73c:	4619      	mov	r1, r3
 801d73e:	203b      	movs	r0, #59	; 0x3b
 801d740:	f7ff fdd2 	bl	801d2e8 <icm20602_read>
 801d744:	4603      	mov	r3, r0
 801d746:	77fb      	strb	r3, [r7, #31]
	if (0 == r) {
 801d748:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	f040 808c 	bne.w	801d86a <icm20602_read_data_raw+0x156>
		UINT8_TO_INT16(*p_ax, buf[0], buf[1]);
 801d752:	7c3b      	ldrb	r3, [r7, #16]
 801d754:	b21a      	sxth	r2, r3
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	801a      	strh	r2, [r3, #0]
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d760:	021b      	lsls	r3, r3, #8
 801d762:	b21a      	sxth	r2, r3
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	801a      	strh	r2, [r3, #0]
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d76e:	7c7b      	ldrb	r3, [r7, #17]
 801d770:	b21b      	sxth	r3, r3
 801d772:	4313      	orrs	r3, r2
 801d774:	b21a      	sxth	r2, r3
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_ay, buf[2], buf[3]);
 801d77a:	7cbb      	ldrb	r3, [r7, #18]
 801d77c:	b21a      	sxth	r2, r3
 801d77e:	68bb      	ldr	r3, [r7, #8]
 801d780:	801a      	strh	r2, [r3, #0]
 801d782:	68bb      	ldr	r3, [r7, #8]
 801d784:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d788:	021b      	lsls	r3, r3, #8
 801d78a:	b21a      	sxth	r2, r3
 801d78c:	68bb      	ldr	r3, [r7, #8]
 801d78e:	801a      	strh	r2, [r3, #0]
 801d790:	68bb      	ldr	r3, [r7, #8]
 801d792:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d796:	7cfb      	ldrb	r3, [r7, #19]
 801d798:	b21b      	sxth	r3, r3
 801d79a:	4313      	orrs	r3, r2
 801d79c:	b21a      	sxth	r2, r3
 801d79e:	68bb      	ldr	r3, [r7, #8]
 801d7a0:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_az, buf[4], buf[5]);
 801d7a2:	7d3b      	ldrb	r3, [r7, #20]
 801d7a4:	b21a      	sxth	r2, r3
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	801a      	strh	r2, [r3, #0]
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d7b0:	021b      	lsls	r3, r3, #8
 801d7b2:	b21a      	sxth	r2, r3
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	801a      	strh	r2, [r3, #0]
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d7be:	7d7b      	ldrb	r3, [r7, #21]
 801d7c0:	b21b      	sxth	r3, r3
 801d7c2:	4313      	orrs	r3, r2
 801d7c4:	b21a      	sxth	r2, r3
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_t, buf[6], buf[7]);
 801d7ca:	7dbb      	ldrb	r3, [r7, #22]
 801d7cc:	b21a      	sxth	r2, r3
 801d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7d0:	801a      	strh	r2, [r3, #0]
 801d7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d7d8:	021b      	lsls	r3, r3, #8
 801d7da:	b21a      	sxth	r2, r3
 801d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7de:	801a      	strh	r2, [r3, #0]
 801d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d7e6:	7dfb      	ldrb	r3, [r7, #23]
 801d7e8:	b21b      	sxth	r3, r3
 801d7ea:	4313      	orrs	r3, r2
 801d7ec:	b21a      	sxth	r2, r3
 801d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7f0:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gx, buf[8], buf[9]);
 801d7f2:	7e3b      	ldrb	r3, [r7, #24]
 801d7f4:	b21a      	sxth	r2, r3
 801d7f6:	683b      	ldr	r3, [r7, #0]
 801d7f8:	801a      	strh	r2, [r3, #0]
 801d7fa:	683b      	ldr	r3, [r7, #0]
 801d7fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d800:	021b      	lsls	r3, r3, #8
 801d802:	b21a      	sxth	r2, r3
 801d804:	683b      	ldr	r3, [r7, #0]
 801d806:	801a      	strh	r2, [r3, #0]
 801d808:	683b      	ldr	r3, [r7, #0]
 801d80a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d80e:	7e7b      	ldrb	r3, [r7, #25]
 801d810:	b21b      	sxth	r3, r3
 801d812:	4313      	orrs	r3, r2
 801d814:	b21a      	sxth	r2, r3
 801d816:	683b      	ldr	r3, [r7, #0]
 801d818:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gy, buf[10], buf[11]);
 801d81a:	7ebb      	ldrb	r3, [r7, #26]
 801d81c:	b21a      	sxth	r2, r3
 801d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d820:	801a      	strh	r2, [r3, #0]
 801d822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d824:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d828:	021b      	lsls	r3, r3, #8
 801d82a:	b21a      	sxth	r2, r3
 801d82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d82e:	801a      	strh	r2, [r3, #0]
 801d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d832:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d836:	7efb      	ldrb	r3, [r7, #27]
 801d838:	b21b      	sxth	r3, r3
 801d83a:	4313      	orrs	r3, r2
 801d83c:	b21a      	sxth	r2, r3
 801d83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d840:	801a      	strh	r2, [r3, #0]
		UINT8_TO_INT16(*p_gz, buf[12], buf[13]);
 801d842:	7f3b      	ldrb	r3, [r7, #28]
 801d844:	b21a      	sxth	r2, r3
 801d846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d848:	801a      	strh	r2, [r3, #0]
 801d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d84c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d850:	021b      	lsls	r3, r3, #8
 801d852:	b21a      	sxth	r2, r3
 801d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d856:	801a      	strh	r2, [r3, #0]
 801d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d85a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d85e:	7f7b      	ldrb	r3, [r7, #29]
 801d860:	b21b      	sxth	r3, r3
 801d862:	4313      	orrs	r3, r2
 801d864:	b21a      	sxth	r2, r3
 801d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d868:	801a      	strh	r2, [r3, #0]
	}

	return r;
 801d86a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d86e:	4618      	mov	r0, r3
 801d870:	3720      	adds	r7, #32
 801d872:	46bd      	mov	sp, r7
 801d874:	bd80      	pop	{r7, pc}
	...

0801d878 <pcm5102_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/

void pcm5102_Init(void)
{
 801d878:	b580      	push	{r7, lr}
 801d87a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DAC_FLT_GPIO_Port, DAC_FLT_Pin, GPIO_PIN_SET); //Filterselect: Normallatency(Low) / Lowlatency(High)
 801d87c:	2201      	movs	r2, #1
 801d87e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d882:	480a      	ldr	r0, [pc, #40]	; (801d8ac <pcm5102_Init+0x34>)
 801d884:	f7eb f9f0 	bl	8008c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_DEMP_GPIO_Port, DAC_DEMP_Pin, GPIO_PIN_RESET); //De-emphasiscontrol for 44.1kHz sampling rate: Off(Low) / On(High)
 801d888:	2200      	movs	r2, #0
 801d88a:	2108      	movs	r1, #8
 801d88c:	4808      	ldr	r0, [pc, #32]	; (801d8b0 <pcm5102_Init+0x38>)
 801d88e:	f7eb f9eb 	bl	8008c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_XSMT_GPIO_Port, DAC_XSMT_Pin, GPIO_PIN_SET); //Soft mute control: Softmute(Low) / soft un-mute(High)
 801d892:	2201      	movs	r2, #1
 801d894:	2104      	movs	r1, #4
 801d896:	4805      	ldr	r0, [pc, #20]	; (801d8ac <pcm5102_Init+0x34>)
 801d898:	f7eb f9e6 	bl	8008c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DAC_FMT_GPIO_Port, DAC_FMT_Pin, GPIO_PIN_RESET); //Audio format selection: I2S(Low)/ Left justified(High)
 801d89c:	2200      	movs	r2, #0
 801d89e:	2140      	movs	r1, #64	; 0x40
 801d8a0:	4804      	ldr	r0, [pc, #16]	; (801d8b4 <pcm5102_Init+0x3c>)
 801d8a2:	f7eb f9e1 	bl	8008c68 <HAL_GPIO_WritePin>
}
 801d8a6:	bf00      	nop
 801d8a8:	bd80      	pop	{r7, pc}
 801d8aa:	bf00      	nop
 801d8ac:	58020800 	.word	0x58020800
 801d8b0:	58021c00 	.word	0x58021c00
 801d8b4:	58021400 	.word	0x58021400

0801d8b8 <Audio_Player_Play>:

void Audio_Player_Play(uint8_t* pBuffer, uint32_t Size)
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b082      	sub	sp, #8
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	6078      	str	r0, [r7, #4]
 801d8c0:	6039      	str	r1, [r7, #0]
	if(Size > 0xFFFF) {
 801d8c2:	683b      	ldr	r3, [r7, #0]
 801d8c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d8c8:	d306      	bcc.n	801d8d8 <Audio_Player_Play+0x20>
		Size = 0xFFFF;
 801d8ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d8ce:	603b      	str	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 801d8d0:	2140      	movs	r1, #64	; 0x40
 801d8d2:	4807      	ldr	r0, [pc, #28]	; (801d8f0 <Audio_Player_Play+0x38>)
 801d8d4:	f7eb f9e1 	bl	8008c9a <HAL_GPIO_TogglePin>
	}
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, Size);
 801d8d8:	683b      	ldr	r3, [r7, #0]
 801d8da:	b29b      	uxth	r3, r3
 801d8dc:	461a      	mov	r2, r3
 801d8de:	6879      	ldr	r1, [r7, #4]
 801d8e0:	4804      	ldr	r0, [pc, #16]	; (801d8f4 <Audio_Player_Play+0x3c>)
 801d8e2:	f7ee ff3f 	bl	800c764 <HAL_SAI_Transmit_DMA>

//	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)pBuffer, DMA_MAX(Size/AUDIODATA_SIZE));
}
 801d8e6:	bf00      	nop
 801d8e8:	3708      	adds	r7, #8
 801d8ea:	46bd      	mov	sp, r7
 801d8ec:	bd80      	pop	{r7, pc}
 801d8ee:	bf00      	nop
 801d8f0:	58021c00 	.word	0x58021c00
 801d8f4:	24005608 	.word	0x24005608

0801d8f8 <ssd1362_Reset>:
void ssd1362_writeCmd(uint8_t reg);
void ssd1362_writeData(uint8_t data);

/* Private user code ---------------------------------------------------------*/

void ssd1362_Reset(void) {
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	af00      	add	r7, sp, #0
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_RESET);
 801d8fc:	2200      	movs	r2, #0
 801d8fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d902:	4808      	ldr	r0, [pc, #32]	; (801d924 <ssd1362_Reset+0x2c>)
 801d904:	f7eb f9b0 	bl	8008c68 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801d908:	200a      	movs	r0, #10
 801d90a:	f7e6 fad7 	bl	8003ebc <HAL_Delay>
    HAL_GPIO_WritePin(SSD1362_Reset_Port, SSD1362_Reset_Pin, GPIO_PIN_SET);
 801d90e:	2201      	movs	r2, #1
 801d910:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d914:	4803      	ldr	r0, [pc, #12]	; (801d924 <ssd1362_Reset+0x2c>)
 801d916:	f7eb f9a7 	bl	8008c68 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 801d91a:	200a      	movs	r0, #10
 801d91c:	f7e6 face 	bl	8003ebc <HAL_Delay>
}
 801d920:	bf00      	nop
 801d922:	bd80      	pop	{r7, pc}
 801d924:	58020400 	.word	0x58020400

0801d928 <ssd1362_writeCmd>:

//Writes a command byte to the driver
void ssd1362_writeCmd(uint8_t reg)
{
 801d928:	b580      	push	{r7, lr}
 801d92a:	b082      	sub	sp, #8
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	4603      	mov	r3, r0
 801d930:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_REG, (uint8_t *)&reg, 1);
 801d932:	1dfa      	adds	r2, r7, #7
 801d934:	2301      	movs	r3, #1
 801d936:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 801d93a:	4803      	ldr	r0, [pc, #12]	; (801d948 <ssd1362_writeCmd+0x20>)
 801d93c:	f7f0 fb00 	bl	800df40 <HAL_SRAM_Write_8b>
}
 801d940:	bf00      	nop
 801d942:	3708      	adds	r7, #8
 801d944:	46bd      	mov	sp, r7
 801d946:	bd80      	pop	{r7, pc}
 801d948:	24005530 	.word	0x24005530

0801d94c <ssd1362_writeData>:

//Writes 1 byte to the display's memory
void ssd1362_writeData(uint8_t data)
{
 801d94c:	b580      	push	{r7, lr}
 801d94e:	b082      	sub	sp, #8
 801d950:	af00      	add	r7, sp, #0
 801d952:	4603      	mov	r3, r0
 801d954:	71fb      	strb	r3, [r7, #7]
	HAL_SRAM_Write_8b(&hsram1, (uint32_t *)LCD_RAM, (uint8_t *)&data, 1);
 801d956:	1dfa      	adds	r2, r7, #7
 801d958:	2301      	movs	r3, #1
 801d95a:	4904      	ldr	r1, [pc, #16]	; (801d96c <ssd1362_writeData+0x20>)
 801d95c:	4804      	ldr	r0, [pc, #16]	; (801d970 <ssd1362_writeData+0x24>)
 801d95e:	f7f0 faef 	bl	800df40 <HAL_SRAM_Write_8b>
}
 801d962:	bf00      	nop
 801d964:	3708      	adds	r7, #8
 801d966:	46bd      	mov	sp, r7
 801d968:	bd80      	pop	{r7, pc}
 801d96a:	bf00      	nop
 801d96c:	c0000001 	.word	0xc0000001
 801d970:	24005530 	.word	0x24005530

0801d974 <bitWrite>:

void bitWrite(uint8_t *x, uint8_t n, uint8_t value) {
 801d974:	b480      	push	{r7}
 801d976:	b083      	sub	sp, #12
 801d978:	af00      	add	r7, sp, #0
 801d97a:	6078      	str	r0, [r7, #4]
 801d97c:	460b      	mov	r3, r1
 801d97e:	70fb      	strb	r3, [r7, #3]
 801d980:	4613      	mov	r3, r2
 801d982:	70bb      	strb	r3, [r7, #2]
   if (value)
 801d984:	78bb      	ldrb	r3, [r7, #2]
 801d986:	2b00      	cmp	r3, #0
 801d988:	d00d      	beq.n	801d9a6 <bitWrite+0x32>
      *x |= (1 << n);
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	781b      	ldrb	r3, [r3, #0]
 801d98e:	b25a      	sxtb	r2, r3
 801d990:	78fb      	ldrb	r3, [r7, #3]
 801d992:	2101      	movs	r1, #1
 801d994:	fa01 f303 	lsl.w	r3, r1, r3
 801d998:	b25b      	sxtb	r3, r3
 801d99a:	4313      	orrs	r3, r2
 801d99c:	b25b      	sxtb	r3, r3
 801d99e:	b2da      	uxtb	r2, r3
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	701a      	strb	r2, [r3, #0]
   else
      *x &= ~(1 << n);
}
 801d9a4:	e00e      	b.n	801d9c4 <bitWrite+0x50>
      *x &= ~(1 << n);
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	781b      	ldrb	r3, [r3, #0]
 801d9aa:	b25a      	sxtb	r2, r3
 801d9ac:	78fb      	ldrb	r3, [r7, #3]
 801d9ae:	2101      	movs	r1, #1
 801d9b0:	fa01 f303 	lsl.w	r3, r1, r3
 801d9b4:	b25b      	sxtb	r3, r3
 801d9b6:	43db      	mvns	r3, r3
 801d9b8:	b25b      	sxtb	r3, r3
 801d9ba:	4013      	ands	r3, r2
 801d9bc:	b25b      	sxtb	r3, r3
 801d9be:	b2da      	uxtb	r2, r3
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	701a      	strb	r2, [r3, #0]
}
 801d9c4:	bf00      	nop
 801d9c6:	370c      	adds	r7, #12
 801d9c8:	46bd      	mov	sp, r7
 801d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9ce:	4770      	bx	lr

0801d9d0 <bitRead>:

char bitRead(uint8_t *x, uint8_t n) {
 801d9d0:	b480      	push	{r7}
 801d9d2:	b083      	sub	sp, #12
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	6078      	str	r0, [r7, #4]
 801d9d8:	460b      	mov	r3, r1
 801d9da:	70fb      	strb	r3, [r7, #3]
   return (*x & (1 << n)) ? 1 : 0;
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	781b      	ldrb	r3, [r3, #0]
 801d9e0:	461a      	mov	r2, r3
 801d9e2:	78fb      	ldrb	r3, [r7, #3]
 801d9e4:	fa42 f303 	asr.w	r3, r2, r3
 801d9e8:	b2db      	uxtb	r3, r3
 801d9ea:	f003 0301 	and.w	r3, r3, #1
 801d9ee:	b2db      	uxtb	r3, r3
}
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	370c      	adds	r7, #12
 801d9f4:	46bd      	mov	sp, r7
 801d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9fa:	4770      	bx	lr

0801d9fc <ssd1362_setWriteZone>:

//defines a rectangular area of memory which the driver will itterate through. This function takes memory locations, meaning a 64x256 space
void ssd1362_setWriteZone(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 801d9fc:	b590      	push	{r4, r7, lr}
 801d9fe:	b083      	sub	sp, #12
 801da00:	af00      	add	r7, sp, #0
 801da02:	4604      	mov	r4, r0
 801da04:	4608      	mov	r0, r1
 801da06:	4611      	mov	r1, r2
 801da08:	461a      	mov	r2, r3
 801da0a:	4623      	mov	r3, r4
 801da0c:	80fb      	strh	r3, [r7, #6]
 801da0e:	4603      	mov	r3, r0
 801da10:	80bb      	strh	r3, [r7, #4]
 801da12:	460b      	mov	r3, r1
 801da14:	807b      	strh	r3, [r7, #2]
 801da16:	4613      	mov	r3, r2
 801da18:	803b      	strh	r3, [r7, #0]
	ssd1362_writeCmd(0x15); //Set Column Address
 801da1a:	2015      	movs	r0, #21
 801da1c:	f7ff ff84 	bl	801d928 <ssd1362_writeCmd>
	ssd1362_writeCmd(x1); //Beginning. Note that you must divide the column by 2, since 1 byte in memory is 2 pixels
 801da20:	88fb      	ldrh	r3, [r7, #6]
 801da22:	b2db      	uxtb	r3, r3
 801da24:	4618      	mov	r0, r3
 801da26:	f7ff ff7f 	bl	801d928 <ssd1362_writeCmd>
	ssd1362_writeCmd(x2); //End
 801da2a:	887b      	ldrh	r3, [r7, #2]
 801da2c:	b2db      	uxtb	r3, r3
 801da2e:	4618      	mov	r0, r3
 801da30:	f7ff ff7a 	bl	801d928 <ssd1362_writeCmd>

	ssd1362_writeCmd(0x75); //Set Row Address
 801da34:	2075      	movs	r0, #117	; 0x75
 801da36:	f7ff ff77 	bl	801d928 <ssd1362_writeCmd>
	ssd1362_writeCmd(y1); //Beginning
 801da3a:	88bb      	ldrh	r3, [r7, #4]
 801da3c:	b2db      	uxtb	r3, r3
 801da3e:	4618      	mov	r0, r3
 801da40:	f7ff ff72 	bl	801d928 <ssd1362_writeCmd>
	ssd1362_writeCmd(y2); //End
 801da44:	883b      	ldrh	r3, [r7, #0]
 801da46:	b2db      	uxtb	r3, r3
 801da48:	4618      	mov	r0, r3
 801da4a:	f7ff ff6d 	bl	801d928 <ssd1362_writeCmd>
}
 801da4e:	bf00      	nop
 801da50:	370c      	adds	r7, #12
 801da52:	46bd      	mov	sp, r7
 801da54:	bd90      	pop	{r4, r7, pc}

0801da56 <ssd1362_coordsToAddress>:

//Converts a pixel location to a linear memory address
uint16_t ssd1362_coordsToAddress(uint16_t x, uint16_t y)
{
 801da56:	b480      	push	{r7}
 801da58:	b083      	sub	sp, #12
 801da5a:	af00      	add	r7, sp, #0
 801da5c:	4603      	mov	r3, r0
 801da5e:	460a      	mov	r2, r1
 801da60:	80fb      	strh	r3, [r7, #6]
 801da62:	4613      	mov	r3, r2
 801da64:	80bb      	strh	r3, [r7, #4]
	return (x/2)+(y*128);
 801da66:	88fb      	ldrh	r3, [r7, #6]
 801da68:	085b      	lsrs	r3, r3, #1
 801da6a:	b29a      	uxth	r2, r3
 801da6c:	88bb      	ldrh	r3, [r7, #4]
 801da6e:	01db      	lsls	r3, r3, #7
 801da70:	b29b      	uxth	r3, r3
 801da72:	4413      	add	r3, r2
 801da74:	b29b      	uxth	r3, r3
}
 801da76:	4618      	mov	r0, r3
 801da78:	370c      	adds	r7, #12
 801da7a:	46bd      	mov	sp, r7
 801da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da80:	4770      	bx	lr
	...

0801da84 <ssd1362_setPixelChanged>:

void ssd1362_setPixelChanged(uint16_t x, uint16_t y, bool changed)
{
 801da84:	b590      	push	{r4, r7, lr}
 801da86:	b085      	sub	sp, #20
 801da88:	af00      	add	r7, sp, #0
 801da8a:	4603      	mov	r3, r0
 801da8c:	80fb      	strh	r3, [r7, #6]
 801da8e:	460b      	mov	r3, r1
 801da90:	80bb      	strh	r3, [r7, #4]
 801da92:	4613      	mov	r3, r2
 801da94:	70fb      	strb	r3, [r7, #3]
	uint16_t targetByte = ssd1362_coordsToAddress(x, y)/8;
 801da96:	88ba      	ldrh	r2, [r7, #4]
 801da98:	88fb      	ldrh	r3, [r7, #6]
 801da9a:	4611      	mov	r1, r2
 801da9c:	4618      	mov	r0, r3
 801da9e:	f7ff ffda 	bl	801da56 <ssd1362_coordsToAddress>
 801daa2:	4603      	mov	r3, r0
 801daa4:	08db      	lsrs	r3, r3, #3
 801daa6:	81fb      	strh	r3, [r7, #14]
	bitWrite(&changedPixels[targetByte], ssd1362_coordsToAddress(x, y) % 8, changed);
 801daa8:	89fb      	ldrh	r3, [r7, #14]
 801daaa:	4a0b      	ldr	r2, [pc, #44]	; (801dad8 <ssd1362_setPixelChanged+0x54>)
 801daac:	189c      	adds	r4, r3, r2
 801daae:	88ba      	ldrh	r2, [r7, #4]
 801dab0:	88fb      	ldrh	r3, [r7, #6]
 801dab2:	4611      	mov	r1, r2
 801dab4:	4618      	mov	r0, r3
 801dab6:	f7ff ffce 	bl	801da56 <ssd1362_coordsToAddress>
 801daba:	4603      	mov	r3, r0
 801dabc:	b2db      	uxtb	r3, r3
 801dabe:	f003 0307 	and.w	r3, r3, #7
 801dac2:	b2db      	uxtb	r3, r3
 801dac4:	78fa      	ldrb	r2, [r7, #3]
 801dac6:	4619      	mov	r1, r3
 801dac8:	4620      	mov	r0, r4
 801daca:	f7ff ff53 	bl	801d974 <bitWrite>
}
 801dace:	bf00      	nop
 801dad0:	3714      	adds	r7, #20
 801dad2:	46bd      	mov	sp, r7
 801dad4:	bd90      	pop	{r4, r7, pc}
 801dad6:	bf00      	nop
 801dad8:	24008a40 	.word	0x24008a40

0801dadc <ssd1362_drawPixel>:

//pixel xy coordinates 0-255, color 0-15, and whether to immediately output it to the display or buffer it
void ssd1362_drawPixel(uint16_t x, uint16_t y, uint8_t color, bool display)
{
 801dadc:	b590      	push	{r4, r7, lr}
 801dade:	b085      	sub	sp, #20
 801dae0:	af00      	add	r7, sp, #0
 801dae2:	4604      	mov	r4, r0
 801dae4:	4608      	mov	r0, r1
 801dae6:	4611      	mov	r1, r2
 801dae8:	461a      	mov	r2, r3
 801daea:	4623      	mov	r3, r4
 801daec:	80fb      	strh	r3, [r7, #6]
 801daee:	4603      	mov	r3, r0
 801daf0:	80bb      	strh	r3, [r7, #4]
 801daf2:	460b      	mov	r3, r1
 801daf4:	70fb      	strb	r3, [r7, #3]
 801daf6:	4613      	mov	r3, r2
 801daf8:	70bb      	strb	r3, [r7, #2]
	uint32_t address = ssd1362_coordsToAddress(x,y);
 801dafa:	88ba      	ldrh	r2, [r7, #4]
 801dafc:	88fb      	ldrh	r3, [r7, #6]
 801dafe:	4611      	mov	r1, r2
 801db00:	4618      	mov	r0, r3
 801db02:	f7ff ffa8 	bl	801da56 <ssd1362_coordsToAddress>
 801db06:	4603      	mov	r3, r0
 801db08:	60fb      	str	r3, [r7, #12]
	if((x%2) == 0)
 801db0a:	88fb      	ldrh	r3, [r7, #6]
 801db0c:	f003 0301 	and.w	r3, r3, #1
 801db10:	b29b      	uxth	r3, r3
 801db12:	2b00      	cmp	r3, #0
 801db14:	d113      	bne.n	801db3e <ssd1362_drawPixel+0x62>
	{//If this is an even pixel, and therefore needs shifting to the more significant nibble
		frameBuffer[address] = (frameBuffer[address] & 0x0f) | (color<<4);
 801db16:	4a25      	ldr	r2, [pc, #148]	; (801dbac <ssd1362_drawPixel+0xd0>)
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	4413      	add	r3, r2
 801db1c:	781b      	ldrb	r3, [r3, #0]
 801db1e:	b25b      	sxtb	r3, r3
 801db20:	f003 030f 	and.w	r3, r3, #15
 801db24:	b25a      	sxtb	r2, r3
 801db26:	78fb      	ldrb	r3, [r7, #3]
 801db28:	011b      	lsls	r3, r3, #4
 801db2a:	b25b      	sxtb	r3, r3
 801db2c:	4313      	orrs	r3, r2
 801db2e:	b25b      	sxtb	r3, r3
 801db30:	b2d9      	uxtb	r1, r3
 801db32:	4a1e      	ldr	r2, [pc, #120]	; (801dbac <ssd1362_drawPixel+0xd0>)
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	4413      	add	r3, r2
 801db38:	460a      	mov	r2, r1
 801db3a:	701a      	strb	r2, [r3, #0]
 801db3c:	e011      	b.n	801db62 <ssd1362_drawPixel+0x86>
	} else {
		frameBuffer[address] = (frameBuffer[address] & 0xf0) | (color);
 801db3e:	4a1b      	ldr	r2, [pc, #108]	; (801dbac <ssd1362_drawPixel+0xd0>)
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	4413      	add	r3, r2
 801db44:	781b      	ldrb	r3, [r3, #0]
 801db46:	b25b      	sxtb	r3, r3
 801db48:	f023 030f 	bic.w	r3, r3, #15
 801db4c:	b25a      	sxtb	r2, r3
 801db4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801db52:	4313      	orrs	r3, r2
 801db54:	b25b      	sxtb	r3, r3
 801db56:	b2d9      	uxtb	r1, r3
 801db58:	4a14      	ldr	r2, [pc, #80]	; (801dbac <ssd1362_drawPixel+0xd0>)
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	4413      	add	r3, r2
 801db5e:	460a      	mov	r2, r1
 801db60:	701a      	strb	r2, [r3, #0]
	}

	if(display)
 801db62:	78bb      	ldrb	r3, [r7, #2]
 801db64:	2b00      	cmp	r3, #0
 801db66:	d017      	beq.n	801db98 <ssd1362_drawPixel+0xbc>
	{
		ssd1362_setWriteZone(x/2,y,x/2,y);
 801db68:	88fb      	ldrh	r3, [r7, #6]
 801db6a:	085b      	lsrs	r3, r3, #1
 801db6c:	b298      	uxth	r0, r3
 801db6e:	88fb      	ldrh	r3, [r7, #6]
 801db70:	085b      	lsrs	r3, r3, #1
 801db72:	b29a      	uxth	r2, r3
 801db74:	88bb      	ldrh	r3, [r7, #4]
 801db76:	88b9      	ldrh	r1, [r7, #4]
 801db78:	f7ff ff40 	bl	801d9fc <ssd1362_setWriteZone>
		ssd1362_writeData(frameBuffer[address]);
 801db7c:	4a0b      	ldr	r2, [pc, #44]	; (801dbac <ssd1362_drawPixel+0xd0>)
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	4413      	add	r3, r2
 801db82:	781b      	ldrb	r3, [r3, #0]
 801db84:	4618      	mov	r0, r3
 801db86:	f7ff fee1 	bl	801d94c <ssd1362_writeData>
		ssd1362_setPixelChanged(x, y, false); // We've now synced the display with this byte of the buffer, no need to write it again
 801db8a:	88b9      	ldrh	r1, [r7, #4]
 801db8c:	88fb      	ldrh	r3, [r7, #6]
 801db8e:	2200      	movs	r2, #0
 801db90:	4618      	mov	r0, r3
 801db92:	f7ff ff77 	bl	801da84 <ssd1362_setPixelChanged>
	} else {
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
	}
}
 801db96:	e005      	b.n	801dba4 <ssd1362_drawPixel+0xc8>
		ssd1362_setPixelChanged(x, y, true); // This pixel is due for an update next refresh
 801db98:	88b9      	ldrh	r1, [r7, #4]
 801db9a:	88fb      	ldrh	r3, [r7, #6]
 801db9c:	2201      	movs	r2, #1
 801db9e:	4618      	mov	r0, r3
 801dba0:	f7ff ff70 	bl	801da84 <ssd1362_setPixelChanged>
}
 801dba4:	bf00      	nop
 801dba6:	3714      	adds	r7, #20
 801dba8:	46bd      	mov	sp, r7
 801dbaa:	bd90      	pop	{r4, r7, pc}
 801dbac:	24009240 	.word	0x24009240

0801dbb0 <ssd1362_drawRect>:

//Draws a rectangle from x1,y1 to x2,y2.
void ssd1362_drawRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t color, bool display)
{
 801dbb0:	b590      	push	{r4, r7, lr}
 801dbb2:	b087      	sub	sp, #28
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	4604      	mov	r4, r0
 801dbb8:	4608      	mov	r0, r1
 801dbba:	4611      	mov	r1, r2
 801dbbc:	461a      	mov	r2, r3
 801dbbe:	4623      	mov	r3, r4
 801dbc0:	80fb      	strh	r3, [r7, #6]
 801dbc2:	4603      	mov	r3, r0
 801dbc4:	80bb      	strh	r3, [r7, #4]
 801dbc6:	460b      	mov	r3, r1
 801dbc8:	807b      	strh	r3, [r7, #2]
 801dbca:	4613      	mov	r3, r2
 801dbcc:	803b      	strh	r3, [r7, #0]
	uint16_t xMin = MIN(x1, x2); // TODO: double performance by writing whole bytes at a time
 801dbce:	887a      	ldrh	r2, [r7, #2]
 801dbd0:	88fb      	ldrh	r3, [r7, #6]
 801dbd2:	4293      	cmp	r3, r2
 801dbd4:	bf28      	it	cs
 801dbd6:	4613      	movcs	r3, r2
 801dbd8:	827b      	strh	r3, [r7, #18]
	uint16_t xMax = MAX(x1, x2);
 801dbda:	887a      	ldrh	r2, [r7, #2]
 801dbdc:	88fb      	ldrh	r3, [r7, #6]
 801dbde:	4293      	cmp	r3, r2
 801dbe0:	bf38      	it	cc
 801dbe2:	4613      	movcc	r3, r2
 801dbe4:	823b      	strh	r3, [r7, #16]
	uint16_t yMin = MIN(y1, y2);
 801dbe6:	883a      	ldrh	r2, [r7, #0]
 801dbe8:	88bb      	ldrh	r3, [r7, #4]
 801dbea:	4293      	cmp	r3, r2
 801dbec:	bf28      	it	cs
 801dbee:	4613      	movcs	r3, r2
 801dbf0:	81fb      	strh	r3, [r7, #14]
	uint16_t yMax = MAX(y1, y2);
 801dbf2:	883a      	ldrh	r2, [r7, #0]
 801dbf4:	88bb      	ldrh	r3, [r7, #4]
 801dbf6:	4293      	cmp	r3, r2
 801dbf8:	bf38      	it	cc
 801dbfa:	4613      	movcc	r3, r2
 801dbfc:	81bb      	strh	r3, [r7, #12]
	for (uint16_t x = xMin; x < xMax; x++)
 801dbfe:	8a7b      	ldrh	r3, [r7, #18]
 801dc00:	82fb      	strh	r3, [r7, #22]
 801dc02:	e014      	b.n	801dc2e <ssd1362_drawRect+0x7e>
	{
		for (uint16_t y = yMin; y < yMax; y++)
 801dc04:	89fb      	ldrh	r3, [r7, #14]
 801dc06:	82bb      	strh	r3, [r7, #20]
 801dc08:	e00a      	b.n	801dc20 <ssd1362_drawRect+0x70>
		{
			ssd1362_drawPixel(x, y, color, display);
 801dc0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801dc0e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801dc12:	8ab9      	ldrh	r1, [r7, #20]
 801dc14:	8af8      	ldrh	r0, [r7, #22]
 801dc16:	f7ff ff61 	bl	801dadc <ssd1362_drawPixel>
		for (uint16_t y = yMin; y < yMax; y++)
 801dc1a:	8abb      	ldrh	r3, [r7, #20]
 801dc1c:	3301      	adds	r3, #1
 801dc1e:	82bb      	strh	r3, [r7, #20]
 801dc20:	8aba      	ldrh	r2, [r7, #20]
 801dc22:	89bb      	ldrh	r3, [r7, #12]
 801dc24:	429a      	cmp	r2, r3
 801dc26:	d3f0      	bcc.n	801dc0a <ssd1362_drawRect+0x5a>
	for (uint16_t x = xMin; x < xMax; x++)
 801dc28:	8afb      	ldrh	r3, [r7, #22]
 801dc2a:	3301      	adds	r3, #1
 801dc2c:	82fb      	strh	r3, [r7, #22]
 801dc2e:	8afa      	ldrh	r2, [r7, #22]
 801dc30:	8a3b      	ldrh	r3, [r7, #16]
 801dc32:	429a      	cmp	r2, r3
 801dc34:	d3e6      	bcc.n	801dc04 <ssd1362_drawRect+0x54>
		}
	}
}
 801dc36:	bf00      	nop
 801dc38:	bf00      	nop
 801dc3a:	371c      	adds	r7, #28
 801dc3c:	46bd      	mov	sp, r7
 801dc3e:	bd90      	pop	{r4, r7, pc}

0801dc40 <ssd1362_drawHLine>:

void ssd1362_drawHLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
	{
 801dc40:	b590      	push	{r4, r7, lr}
 801dc42:	b085      	sub	sp, #20
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	4604      	mov	r4, r0
 801dc48:	4608      	mov	r0, r1
 801dc4a:	4611      	mov	r1, r2
 801dc4c:	461a      	mov	r2, r3
 801dc4e:	4623      	mov	r3, r4
 801dc50:	80fb      	strh	r3, [r7, #6]
 801dc52:	4603      	mov	r3, r0
 801dc54:	80bb      	strh	r3, [r7, #4]
 801dc56:	460b      	mov	r3, r1
 801dc58:	807b      	strh	r3, [r7, #2]
 801dc5a:	4613      	mov	r3, r2
 801dc5c:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = x; i < x+length; i++)
 801dc5e:	88fb      	ldrh	r3, [r7, #6]
 801dc60:	60fb      	str	r3, [r7, #12]
 801dc62:	e00a      	b.n	801dc7a <ssd1362_drawHLine+0x3a>
	{
		ssd1362_drawPixel(i, y, color, display);
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	b298      	uxth	r0, r3
 801dc68:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dc6c:	787a      	ldrb	r2, [r7, #1]
 801dc6e:	88b9      	ldrh	r1, [r7, #4]
 801dc70:	f7ff ff34 	bl	801dadc <ssd1362_drawPixel>
	for (uint32_t i = x; i < x+length; i++)
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	3301      	adds	r3, #1
 801dc78:	60fb      	str	r3, [r7, #12]
 801dc7a:	88fa      	ldrh	r2, [r7, #6]
 801dc7c:	887b      	ldrh	r3, [r7, #2]
 801dc7e:	4413      	add	r3, r2
 801dc80:	461a      	mov	r2, r3
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	4293      	cmp	r3, r2
 801dc86:	d3ed      	bcc.n	801dc64 <ssd1362_drawHLine+0x24>
	}
}
 801dc88:	bf00      	nop
 801dc8a:	bf00      	nop
 801dc8c:	3714      	adds	r7, #20
 801dc8e:	46bd      	mov	sp, r7
 801dc90:	bd90      	pop	{r4, r7, pc}

0801dc92 <ssd1362_drawVLine>:

void ssd1362_drawVLine(uint16_t x, uint16_t y, uint16_t length, uint8_t color, bool display)
{
 801dc92:	b590      	push	{r4, r7, lr}
 801dc94:	b085      	sub	sp, #20
 801dc96:	af00      	add	r7, sp, #0
 801dc98:	4604      	mov	r4, r0
 801dc9a:	4608      	mov	r0, r1
 801dc9c:	4611      	mov	r1, r2
 801dc9e:	461a      	mov	r2, r3
 801dca0:	4623      	mov	r3, r4
 801dca2:	80fb      	strh	r3, [r7, #6]
 801dca4:	4603      	mov	r3, r0
 801dca6:	80bb      	strh	r3, [r7, #4]
 801dca8:	460b      	mov	r3, r1
 801dcaa:	807b      	strh	r3, [r7, #2]
 801dcac:	4613      	mov	r3, r2
 801dcae:	707b      	strb	r3, [r7, #1]
	for (uint32_t i = y; i < y+length; i++)
 801dcb0:	88bb      	ldrh	r3, [r7, #4]
 801dcb2:	60fb      	str	r3, [r7, #12]
 801dcb4:	e00a      	b.n	801dccc <ssd1362_drawVLine+0x3a>
	{
		ssd1362_drawPixel(x, i, color, display);
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	b299      	uxth	r1, r3
 801dcba:	f897 3020 	ldrb.w	r3, [r7, #32]
 801dcbe:	787a      	ldrb	r2, [r7, #1]
 801dcc0:	88f8      	ldrh	r0, [r7, #6]
 801dcc2:	f7ff ff0b 	bl	801dadc <ssd1362_drawPixel>
	for (uint32_t i = y; i < y+length; i++)
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	3301      	adds	r3, #1
 801dcca:	60fb      	str	r3, [r7, #12]
 801dccc:	88ba      	ldrh	r2, [r7, #4]
 801dcce:	887b      	ldrh	r3, [r7, #2]
 801dcd0:	4413      	add	r3, r2
 801dcd2:	461a      	mov	r2, r3
 801dcd4:	68fb      	ldr	r3, [r7, #12]
 801dcd6:	4293      	cmp	r3, r2
 801dcd8:	d3ed      	bcc.n	801dcb6 <ssd1362_drawVLine+0x24>
	}
}
 801dcda:	bf00      	nop
 801dcdc:	bf00      	nop
 801dcde:	3714      	adds	r7, #20
 801dce0:	46bd      	mov	sp, r7
 801dce2:	bd90      	pop	{r4, r7, pc}

0801dce4 <ssd1362_drawByteAsRow>:
	}
}

//Draws a byte as an 8 pixel row
void ssd1362_drawByteAsRow(uint16_t x, uint16_t y, uint8_t byte, uint8_t color)
{
 801dce4:	b590      	push	{r4, r7, lr}
 801dce6:	b085      	sub	sp, #20
 801dce8:	af00      	add	r7, sp, #0
 801dcea:	4604      	mov	r4, r0
 801dcec:	4608      	mov	r0, r1
 801dcee:	4611      	mov	r1, r2
 801dcf0:	461a      	mov	r2, r3
 801dcf2:	4623      	mov	r3, r4
 801dcf4:	80fb      	strh	r3, [r7, #6]
 801dcf6:	4603      	mov	r3, r0
 801dcf8:	80bb      	strh	r3, [r7, #4]
 801dcfa:	460b      	mov	r3, r1
 801dcfc:	70fb      	strb	r3, [r7, #3]
 801dcfe:	4613      	mov	r3, r2
 801dd00:	70bb      	strb	r3, [r7, #2]
	for (uint32_t i = 0; i < 8; i++)
 801dd02:	2300      	movs	r3, #0
 801dd04:	60fb      	str	r3, [r7, #12]
 801dd06:	e016      	b.n	801dd36 <ssd1362_drawByteAsRow+0x52>
	{
		if(bitRead(&byte, i))
 801dd08:	68fb      	ldr	r3, [r7, #12]
 801dd0a:	b2da      	uxtb	r2, r3
 801dd0c:	1cfb      	adds	r3, r7, #3
 801dd0e:	4611      	mov	r1, r2
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7ff fe5d 	bl	801d9d0 <bitRead>
 801dd16:	4603      	mov	r3, r0
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	d009      	beq.n	801dd30 <ssd1362_drawByteAsRow+0x4c>
	{
			ssd1362_drawPixel(x+i, y, color, false);
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	b29a      	uxth	r2, r3
 801dd20:	88fb      	ldrh	r3, [r7, #6]
 801dd22:	4413      	add	r3, r2
 801dd24:	b298      	uxth	r0, r3
 801dd26:	78ba      	ldrb	r2, [r7, #2]
 801dd28:	88b9      	ldrh	r1, [r7, #4]
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	f7ff fed6 	bl	801dadc <ssd1362_drawPixel>
	for (uint32_t i = 0; i < 8; i++)
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	3301      	adds	r3, #1
 801dd34:	60fb      	str	r3, [r7, #12]
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	2b07      	cmp	r3, #7
 801dd3a:	d9e5      	bls.n	801dd08 <ssd1362_drawByteAsRow+0x24>
		}
	}
}
 801dd3c:	bf00      	nop
 801dd3e:	bf00      	nop
 801dd40:	3714      	adds	r7, #20
 801dd42:	46bd      	mov	sp, r7
 801dd44:	bd90      	pop	{r4, r7, pc}
	...

0801dd48 <ssd1362_drawChar>:

void ssd1362_drawChar(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801dd48:	b590      	push	{r4, r7, lr}
 801dd4a:	b085      	sub	sp, #20
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	4604      	mov	r4, r0
 801dd50:	4608      	mov	r0, r1
 801dd52:	4611      	mov	r1, r2
 801dd54:	461a      	mov	r2, r3
 801dd56:	4623      	mov	r3, r4
 801dd58:	80fb      	strh	r3, [r7, #6]
 801dd5a:	4603      	mov	r3, r0
 801dd5c:	80bb      	strh	r3, [r7, #4]
 801dd5e:	460b      	mov	r3, r1
 801dd60:	70fb      	strb	r3, [r7, #3]
 801dd62:	4613      	mov	r3, r2
 801dd64:	70bb      	strb	r3, [r7, #2]
	for (size_t i = 0; i < 8; i++)
 801dd66:	2300      	movs	r3, #0
 801dd68:	60fb      	str	r3, [r7, #12]
 801dd6a:	e012      	b.n	801dd92 <ssd1362_drawChar+0x4a>
	{
		ssd1362_drawByteAsRow(x, y+i, font8x8_basic[(unsigned char)thisChar][i], color);
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	b29a      	uxth	r2, r3
 801dd70:	88bb      	ldrh	r3, [r7, #4]
 801dd72:	4413      	add	r3, r2
 801dd74:	b299      	uxth	r1, r3
 801dd76:	78fb      	ldrb	r3, [r7, #3]
 801dd78:	4a0a      	ldr	r2, [pc, #40]	; (801dda4 <ssd1362_drawChar+0x5c>)
 801dd7a:	00db      	lsls	r3, r3, #3
 801dd7c:	441a      	add	r2, r3
 801dd7e:	68fb      	ldr	r3, [r7, #12]
 801dd80:	4413      	add	r3, r2
 801dd82:	781a      	ldrb	r2, [r3, #0]
 801dd84:	78bb      	ldrb	r3, [r7, #2]
 801dd86:	88f8      	ldrh	r0, [r7, #6]
 801dd88:	f7ff ffac 	bl	801dce4 <ssd1362_drawByteAsRow>
	for (size_t i = 0; i < 8; i++)
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	3301      	adds	r3, #1
 801dd90:	60fb      	str	r3, [r7, #12]
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	2b07      	cmp	r3, #7
 801dd96:	d9e9      	bls.n	801dd6c <ssd1362_drawChar+0x24>
	}
}
 801dd98:	bf00      	nop
 801dd9a:	bf00      	nop
 801dd9c:	3714      	adds	r7, #20
 801dd9e:	46bd      	mov	sp, r7
 801dda0:	bd90      	pop	{r4, r7, pc}
 801dda2:	bf00      	nop
 801dda4:	24003044 	.word	0x24003044

0801dda8 <ssd1362_drawCharArray>:

void ssd1362_drawCharArray(uint16_t x, uint16_t y, int8_t text[], uint8_t color, uint32_t size)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b086      	sub	sp, #24
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	60ba      	str	r2, [r7, #8]
 801ddb0:	461a      	mov	r2, r3
 801ddb2:	4603      	mov	r3, r0
 801ddb4:	81fb      	strh	r3, [r7, #14]
 801ddb6:	460b      	mov	r3, r1
 801ddb8:	81bb      	strh	r3, [r7, #12]
 801ddba:	4613      	mov	r3, r2
 801ddbc:	71fb      	strb	r3, [r7, #7]
	const int8_t* thisChar;
	uint16_t xOffset = 0;
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	827b      	strh	r3, [r7, #18]
	if(size==16)
 801ddc2:	6a3b      	ldr	r3, [r7, #32]
 801ddc4:	2b10      	cmp	r3, #16
 801ddc6:	d11a      	bne.n	801ddfe <ssd1362_drawCharArray+0x56>
	{
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ddc8:	68bb      	ldr	r3, [r7, #8]
 801ddca:	617b      	str	r3, [r7, #20]
 801ddcc:	e011      	b.n	801ddf2 <ssd1362_drawCharArray+0x4a>
		{
			ssd1362_drawChar16(x+xOffset, y, *thisChar, color);
 801ddce:	89fa      	ldrh	r2, [r7, #14]
 801ddd0:	8a7b      	ldrh	r3, [r7, #18]
 801ddd2:	4413      	add	r3, r2
 801ddd4:	b298      	uxth	r0, r3
 801ddd6:	697b      	ldr	r3, [r7, #20]
 801ddd8:	f993 3000 	ldrsb.w	r3, [r3]
 801dddc:	b2da      	uxtb	r2, r3
 801ddde:	79fb      	ldrb	r3, [r7, #7]
 801dde0:	89b9      	ldrh	r1, [r7, #12]
 801dde2:	f000 f861 	bl	801dea8 <ssd1362_drawChar16>
			xOffset += 8;
 801dde6:	8a7b      	ldrh	r3, [r7, #18]
 801dde8:	3308      	adds	r3, #8
 801ddea:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801ddec:	697b      	ldr	r3, [r7, #20]
 801ddee:	3301      	adds	r3, #1
 801ddf0:	617b      	str	r3, [r7, #20]
 801ddf2:	697b      	ldr	r3, [r7, #20]
 801ddf4:	f993 3000 	ldrsb.w	r3, [r3]
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	d1e8      	bne.n	801ddce <ssd1362_drawCharArray+0x26>
		{
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
			xOffset += 8;
		}
	}
}
 801ddfc:	e037      	b.n	801de6e <ssd1362_drawCharArray+0xc6>
	} else if(size==32)
 801ddfe:	6a3b      	ldr	r3, [r7, #32]
 801de00:	2b20      	cmp	r3, #32
 801de02:	d11a      	bne.n	801de3a <ssd1362_drawCharArray+0x92>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801de04:	68bb      	ldr	r3, [r7, #8]
 801de06:	617b      	str	r3, [r7, #20]
 801de08:	e011      	b.n	801de2e <ssd1362_drawCharArray+0x86>
			ssd1362_drawChar32(x+xOffset, y, *thisChar, color);
 801de0a:	89fa      	ldrh	r2, [r7, #14]
 801de0c:	8a7b      	ldrh	r3, [r7, #18]
 801de0e:	4413      	add	r3, r2
 801de10:	b298      	uxth	r0, r3
 801de12:	697b      	ldr	r3, [r7, #20]
 801de14:	f993 3000 	ldrsb.w	r3, [r3]
 801de18:	b2da      	uxtb	r2, r3
 801de1a:	79fb      	ldrb	r3, [r7, #7]
 801de1c:	89b9      	ldrh	r1, [r7, #12]
 801de1e:	f000 f887 	bl	801df30 <ssd1362_drawChar32>
			xOffset += 16;
 801de22:	8a7b      	ldrh	r3, [r7, #18]
 801de24:	3310      	adds	r3, #16
 801de26:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801de28:	697b      	ldr	r3, [r7, #20]
 801de2a:	3301      	adds	r3, #1
 801de2c:	617b      	str	r3, [r7, #20]
 801de2e:	697b      	ldr	r3, [r7, #20]
 801de30:	f993 3000 	ldrsb.w	r3, [r3]
 801de34:	2b00      	cmp	r3, #0
 801de36:	d1e8      	bne.n	801de0a <ssd1362_drawCharArray+0x62>
}
 801de38:	e019      	b.n	801de6e <ssd1362_drawCharArray+0xc6>
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801de3a:	68bb      	ldr	r3, [r7, #8]
 801de3c:	617b      	str	r3, [r7, #20]
 801de3e:	e011      	b.n	801de64 <ssd1362_drawCharArray+0xbc>
			ssd1362_drawChar(x+xOffset, y, *thisChar, color);
 801de40:	89fa      	ldrh	r2, [r7, #14]
 801de42:	8a7b      	ldrh	r3, [r7, #18]
 801de44:	4413      	add	r3, r2
 801de46:	b298      	uxth	r0, r3
 801de48:	697b      	ldr	r3, [r7, #20]
 801de4a:	f993 3000 	ldrsb.w	r3, [r3]
 801de4e:	b2da      	uxtb	r2, r3
 801de50:	79fb      	ldrb	r3, [r7, #7]
 801de52:	89b9      	ldrh	r1, [r7, #12]
 801de54:	f7ff ff78 	bl	801dd48 <ssd1362_drawChar>
			xOffset += 8;
 801de58:	8a7b      	ldrh	r3, [r7, #18]
 801de5a:	3308      	adds	r3, #8
 801de5c:	827b      	strh	r3, [r7, #18]
		for (thisChar = text; *thisChar != '\0'; thisChar++)
 801de5e:	697b      	ldr	r3, [r7, #20]
 801de60:	3301      	adds	r3, #1
 801de62:	617b      	str	r3, [r7, #20]
 801de64:	697b      	ldr	r3, [r7, #20]
 801de66:	f993 3000 	ldrsb.w	r3, [r3]
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d1e8      	bne.n	801de40 <ssd1362_drawCharArray+0x98>
}
 801de6e:	bf00      	nop
 801de70:	3718      	adds	r7, #24
 801de72:	46bd      	mov	sp, r7
 801de74:	bd80      	pop	{r7, pc}

0801de76 <ssd1362_drawString>:

void ssd1362_drawString(uint16_t x, uint16_t y, int8_t textString[], uint8_t color, uint32_t size)
{
 801de76:	b580      	push	{r7, lr}
 801de78:	b086      	sub	sp, #24
 801de7a:	af02      	add	r7, sp, #8
 801de7c:	60ba      	str	r2, [r7, #8]
 801de7e:	461a      	mov	r2, r3
 801de80:	4603      	mov	r3, r0
 801de82:	81fb      	strh	r3, [r7, #14]
 801de84:	460b      	mov	r3, r1
 801de86:	81bb      	strh	r3, [r7, #12]
 801de88:	4613      	mov	r3, r2
 801de8a:	71fb      	strb	r3, [r7, #7]
//	uint8_t text[64];
//	textString.toCharArray(text, 64);
	ssd1362_drawCharArray(x,y, textString, color, size);
 801de8c:	79fa      	ldrb	r2, [r7, #7]
 801de8e:	89b9      	ldrh	r1, [r7, #12]
 801de90:	89f8      	ldrh	r0, [r7, #14]
 801de92:	69bb      	ldr	r3, [r7, #24]
 801de94:	9300      	str	r3, [sp, #0]
 801de96:	4613      	mov	r3, r2
 801de98:	68ba      	ldr	r2, [r7, #8]
 801de9a:	f7ff ff85 	bl	801dda8 <ssd1362_drawCharArray>
}
 801de9e:	bf00      	nop
 801dea0:	3710      	adds	r7, #16
 801dea2:	46bd      	mov	sp, r7
 801dea4:	bd80      	pop	{r7, pc}
	...

0801dea8 <ssd1362_drawChar16>:

void ssd1362_drawChar16(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801dea8:	b590      	push	{r4, r7, lr}
 801deaa:	b085      	sub	sp, #20
 801deac:	af00      	add	r7, sp, #0
 801deae:	4604      	mov	r4, r0
 801deb0:	4608      	mov	r0, r1
 801deb2:	4611      	mov	r1, r2
 801deb4:	461a      	mov	r2, r3
 801deb6:	4623      	mov	r3, r4
 801deb8:	80fb      	strh	r3, [r7, #6]
 801deba:	4603      	mov	r3, r0
 801debc:	80bb      	strh	r3, [r7, #4]
 801debe:	460b      	mov	r3, r1
 801dec0:	70fb      	strb	r3, [r7, #3]
 801dec2:	4613      	mov	r3, r2
 801dec4:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 16; row++) {
 801dec6:	2300      	movs	r3, #0
 801dec8:	60fb      	str	r3, [r7, #12]
 801deca:	e027      	b.n	801df1c <ssd1362_drawChar16+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x16[(unsigned char)thisChar][row*2], color);
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	b29a      	uxth	r2, r3
 801ded0:	88bb      	ldrh	r3, [r7, #4]
 801ded2:	4413      	add	r3, r2
 801ded4:	b299      	uxth	r1, r3
 801ded6:	78fa      	ldrb	r2, [r7, #3]
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	005b      	lsls	r3, r3, #1
 801dedc:	4813      	ldr	r0, [pc, #76]	; (801df2c <ssd1362_drawChar16+0x84>)
 801dede:	0152      	lsls	r2, r2, #5
 801dee0:	4402      	add	r2, r0
 801dee2:	4413      	add	r3, r2
 801dee4:	781a      	ldrb	r2, [r3, #0]
 801dee6:	78bb      	ldrb	r3, [r7, #2]
 801dee8:	88f8      	ldrh	r0, [r7, #6]
 801deea:	f7ff fefb 	bl	801dce4 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x16[(unsigned char)thisChar][(row*2)+1], color);
 801deee:	88fb      	ldrh	r3, [r7, #6]
 801def0:	3308      	adds	r3, #8
 801def2:	b298      	uxth	r0, r3
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	b29a      	uxth	r2, r3
 801def8:	88bb      	ldrh	r3, [r7, #4]
 801defa:	4413      	add	r3, r2
 801defc:	b299      	uxth	r1, r3
 801defe:	78fa      	ldrb	r2, [r7, #3]
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	005b      	lsls	r3, r3, #1
 801df04:	3301      	adds	r3, #1
 801df06:	4c09      	ldr	r4, [pc, #36]	; (801df2c <ssd1362_drawChar16+0x84>)
 801df08:	0152      	lsls	r2, r2, #5
 801df0a:	4422      	add	r2, r4
 801df0c:	4413      	add	r3, r2
 801df0e:	781a      	ldrb	r2, [r3, #0]
 801df10:	78bb      	ldrb	r3, [r7, #2]
 801df12:	f7ff fee7 	bl	801dce4 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 16; row++) {
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	3301      	adds	r3, #1
 801df1a:	60fb      	str	r3, [r7, #12]
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	2b0f      	cmp	r3, #15
 801df20:	d9d4      	bls.n	801decc <ssd1362_drawChar16+0x24>
	}
}
 801df22:	bf00      	nop
 801df24:	bf00      	nop
 801df26:	3714      	adds	r7, #20
 801df28:	46bd      	mov	sp, r7
 801df2a:	bd90      	pop	{r4, r7, pc}
 801df2c:	24000044 	.word	0x24000044

0801df30 <ssd1362_drawChar32>:

void ssd1362_drawChar32(uint16_t x, uint16_t y, uint8_t thisChar, uint8_t color)
{
 801df30:	b590      	push	{r4, r7, lr}
 801df32:	b085      	sub	sp, #20
 801df34:	af00      	add	r7, sp, #0
 801df36:	4604      	mov	r4, r0
 801df38:	4608      	mov	r0, r1
 801df3a:	4611      	mov	r1, r2
 801df3c:	461a      	mov	r2, r3
 801df3e:	4623      	mov	r3, r4
 801df40:	80fb      	strh	r3, [r7, #6]
 801df42:	4603      	mov	r3, r0
 801df44:	80bb      	strh	r3, [r7, #4]
 801df46:	460b      	mov	r3, r1
 801df48:	70fb      	strb	r3, [r7, #3]
 801df4a:	4613      	mov	r3, r2
 801df4c:	70bb      	strb	r3, [r7, #2]
	for (size_t row = 0; row < 32; row++) {
 801df4e:	2300      	movs	r3, #0
 801df50:	60fb      	str	r3, [r7, #12]
 801df52:	e027      	b.n	801dfa4 <ssd1362_drawChar32+0x74>
		ssd1362_drawByteAsRow(x, y+row, font16x32[(unsigned char)thisChar][row*2], color);
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	b29a      	uxth	r2, r3
 801df58:	88bb      	ldrh	r3, [r7, #4]
 801df5a:	4413      	add	r3, r2
 801df5c:	b299      	uxth	r1, r3
 801df5e:	78fa      	ldrb	r2, [r7, #3]
 801df60:	68fb      	ldr	r3, [r7, #12]
 801df62:	005b      	lsls	r3, r3, #1
 801df64:	4813      	ldr	r0, [pc, #76]	; (801dfb4 <ssd1362_drawChar32+0x84>)
 801df66:	0192      	lsls	r2, r2, #6
 801df68:	4402      	add	r2, r0
 801df6a:	4413      	add	r3, r2
 801df6c:	781a      	ldrb	r2, [r3, #0]
 801df6e:	78bb      	ldrb	r3, [r7, #2]
 801df70:	88f8      	ldrh	r0, [r7, #6]
 801df72:	f7ff feb7 	bl	801dce4 <ssd1362_drawByteAsRow>
		ssd1362_drawByteAsRow(x+8, y+row, font16x32[(unsigned char)thisChar][(row*2)+1], color);
 801df76:	88fb      	ldrh	r3, [r7, #6]
 801df78:	3308      	adds	r3, #8
 801df7a:	b298      	uxth	r0, r3
 801df7c:	68fb      	ldr	r3, [r7, #12]
 801df7e:	b29a      	uxth	r2, r3
 801df80:	88bb      	ldrh	r3, [r7, #4]
 801df82:	4413      	add	r3, r2
 801df84:	b299      	uxth	r1, r3
 801df86:	78fa      	ldrb	r2, [r7, #3]
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	005b      	lsls	r3, r3, #1
 801df8c:	3301      	adds	r3, #1
 801df8e:	4c09      	ldr	r4, [pc, #36]	; (801dfb4 <ssd1362_drawChar32+0x84>)
 801df90:	0192      	lsls	r2, r2, #6
 801df92:	4422      	add	r2, r4
 801df94:	4413      	add	r3, r2
 801df96:	781a      	ldrb	r2, [r3, #0]
 801df98:	78bb      	ldrb	r3, [r7, #2]
 801df9a:	f7ff fea3 	bl	801dce4 <ssd1362_drawByteAsRow>
	for (size_t row = 0; row < 32; row++) {
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	3301      	adds	r3, #1
 801dfa2:	60fb      	str	r3, [r7, #12]
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	2b1f      	cmp	r3, #31
 801dfa8:	d9d4      	bls.n	801df54 <ssd1362_drawChar32+0x24>
	}
}
 801dfaa:	bf00      	nop
 801dfac:	bf00      	nop
 801dfae:	3714      	adds	r7, #20
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	bd90      	pop	{r4, r7, pc}
 801dfb4:	24001044 	.word	0x24001044

0801dfb8 <ssd1362_clearBuffer>:
	HAL_Delay(15);
	ssd1362_stopScrolling();
}

void ssd1362_clearBuffer()
{
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b082      	sub	sp, #8
 801dfbc:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801dfbe:	2300      	movs	r3, #0
 801dfc0:	607b      	str	r3, [r7, #4]
 801dfc2:	e01a      	b.n	801dffa <ssd1362_clearBuffer+0x42>
	{
		// If there is a non-zero (non-black) byte here, make sure it gets updated
		if (frameBuffer[i])
 801dfc4:	4a11      	ldr	r2, [pc, #68]	; (801e00c <ssd1362_clearBuffer+0x54>)
 801dfc6:	687b      	ldr	r3, [r7, #4]
 801dfc8:	4413      	add	r3, r2
 801dfca:	781b      	ldrb	r3, [r3, #0]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	d011      	beq.n	801dff4 <ssd1362_clearBuffer+0x3c>
		{
			frameBuffer[i] = 0;
 801dfd0:	4a0e      	ldr	r2, [pc, #56]	; (801e00c <ssd1362_clearBuffer+0x54>)
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	4413      	add	r3, r2
 801dfd6:	2200      	movs	r2, #0
 801dfd8:	701a      	strb	r2, [r3, #0]
			bitWrite(&changedPixels[i/8], i%8, 1); // Mark this pixel as needing an update
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	08db      	lsrs	r3, r3, #3
 801dfde:	4a0c      	ldr	r2, [pc, #48]	; (801e010 <ssd1362_clearBuffer+0x58>)
 801dfe0:	1898      	adds	r0, r3, r2
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	b2db      	uxtb	r3, r3
 801dfe6:	f003 0307 	and.w	r3, r3, #7
 801dfea:	b2db      	uxtb	r3, r3
 801dfec:	2201      	movs	r2, #1
 801dfee:	4619      	mov	r1, r3
 801dff0:	f7ff fcc0 	bl	801d974 <bitWrite>
	for (uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	3301      	adds	r3, #1
 801dff8:	607b      	str	r3, [r7, #4]
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e000:	d3e0      	bcc.n	801dfc4 <ssd1362_clearBuffer+0xc>
		}
	}
}
 801e002:	bf00      	nop
 801e004:	bf00      	nop
 801e006:	3708      	adds	r7, #8
 801e008:	46bd      	mov	sp, r7
 801e00a:	bd80      	pop	{r7, pc}
 801e00c:	24009240 	.word	0x24009240
 801e010:	24008a40 	.word	0x24008a40

0801e014 <ssd1362_writeFullBuffer>:

//Outputs the full framebuffer to the display
void ssd1362_writeFullBuffer()
{
 801e014:	b580      	push	{r7, lr}
 801e016:	b082      	sub	sp, #8
 801e018:	af00      	add	r7, sp, #0
	ssd1362_setWriteZone(0, 0, (SSD1362_WIDTH / 2) - 1, SSD1362_HEIGHT - 1); //Full display
 801e01a:	233f      	movs	r3, #63	; 0x3f
 801e01c:	227f      	movs	r2, #127	; 0x7f
 801e01e:	2100      	movs	r1, #0
 801e020:	2000      	movs	r0, #0
 801e022:	f7ff fceb 	bl	801d9fc <ssd1362_setWriteZone>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801e026:	2300      	movs	r3, #0
 801e028:	607b      	str	r3, [r7, #4]
 801e02a:	e009      	b.n	801e040 <ssd1362_writeFullBuffer+0x2c>
	{
		ssd1362_writeData(frameBuffer[i]);
 801e02c:	4a10      	ldr	r2, [pc, #64]	; (801e070 <ssd1362_writeFullBuffer+0x5c>)
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	4413      	add	r3, r2
 801e032:	781b      	ldrb	r3, [r3, #0]
 801e034:	4618      	mov	r0, r3
 801e036:	f7ff fc89 	bl	801d94c <ssd1362_writeData>
	for(uint32_t i = 0; i < ((SSD1362_HEIGHT * SSD1362_WIDTH) / 2); i++)
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	3301      	adds	r3, #1
 801e03e:	607b      	str	r3, [r7, #4]
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e046:	d3f1      	bcc.n	801e02c <ssd1362_writeFullBuffer+0x18>
	}
	for (uint32_t i = 0; i < 1024; i++)
 801e048:	2300      	movs	r3, #0
 801e04a:	603b      	str	r3, [r7, #0]
 801e04c:	e007      	b.n	801e05e <ssd1362_writeFullBuffer+0x4a>
	{
		changedPixels[i] = 0; // Set all pixels as up to date.
 801e04e:	4a09      	ldr	r2, [pc, #36]	; (801e074 <ssd1362_writeFullBuffer+0x60>)
 801e050:	683b      	ldr	r3, [r7, #0]
 801e052:	4413      	add	r3, r2
 801e054:	2200      	movs	r2, #0
 801e056:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < 1024; i++)
 801e058:	683b      	ldr	r3, [r7, #0]
 801e05a:	3301      	adds	r3, #1
 801e05c:	603b      	str	r3, [r7, #0]
 801e05e:	683b      	ldr	r3, [r7, #0]
 801e060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e064:	d3f3      	bcc.n	801e04e <ssd1362_writeFullBuffer+0x3a>
	}
}
 801e066:	bf00      	nop
 801e068:	bf00      	nop
 801e06a:	3708      	adds	r7, #8
 801e06c:	46bd      	mov	sp, r7
 801e06e:	bd80      	pop	{r7, pc}
 801e070:	24009240 	.word	0x24009240
 801e074:	24008a40 	.word	0x24008a40

0801e078 <ssd1362_init>:
	ssd1362_writeCmd(contrast);  //Contrast byte
}

//Sends all the boilerplate startup and config commands to the driver
void ssd1362_init()
{
 801e078:	b580      	push	{r7, lr}
 801e07a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1362_Reset();
 801e07c:	f7ff fc3c 	bl	801d8f8 <ssd1362_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 801e080:	2064      	movs	r0, #100	; 0x64
 801e082:	f7e5 ff1b 	bl	8003ebc <HAL_Delay>

    // Init OLED
    ssd1362_writeCmd(0XFD); //Set Command Lock
 801e086:	20fd      	movs	r0, #253	; 0xfd
 801e088:	f7ff fc4e 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X12); //(12H=Unlock,16H=Lock)
 801e08c:	2012      	movs	r0, #18
 801e08e:	f7ff fc4b 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAE); //Display OFF(Sleep Mode)
 801e092:	20ae      	movs	r0, #174	; 0xae
 801e094:	f7ff fc48 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X15); //Set column Address
 801e098:	2015      	movs	r0, #21
 801e09a:	f7ff fc45 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start column Address
 801e09e:	2000      	movs	r0, #0
 801e0a0:	f7ff fc42 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X7F); //End column Address
 801e0a4:	207f      	movs	r0, #127	; 0x7f
 801e0a6:	f7ff fc3f 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X75); //Set Row Address
 801e0aa:	2075      	movs	r0, #117	; 0x75
 801e0ac:	f7ff fc3c 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00); //Start Row Address
 801e0b0:	2000      	movs	r0, #0
 801e0b2:	f7ff fc39 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F); //End Row Address
 801e0b6:	203f      	movs	r0, #63	; 0x3f
 801e0b8:	f7ff fc36 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0X81); //Set contrast
 801e0bc:	2081      	movs	r0, #129	; 0x81
 801e0be:	f7ff fc33 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0x2f);
 801e0c2:	202f      	movs	r0, #47	; 0x2f
 801e0c4:	f7ff fc30 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA0); //Set Remap
 801e0c8:	20a0      	movs	r0, #160	; 0xa0
 801e0ca:	f7ff fc2d 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XC3);
 801e0ce:	20c3      	movs	r0, #195	; 0xc3
 801e0d0:	f7ff fc2a 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA1); //Set Display Start Line
 801e0d4:	20a1      	movs	r0, #161	; 0xa1
 801e0d6:	f7ff fc27 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801e0da:	2000      	movs	r0, #0
 801e0dc:	f7ff fc24 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA2); //Set Display Offset
 801e0e0:	20a2      	movs	r0, #162	; 0xa2
 801e0e2:	f7ff fc21 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X00);
 801e0e6:	2000      	movs	r0, #0
 801e0e8:	f7ff fc1e 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA4); //Normal Display
 801e0ec:	20a4      	movs	r0, #164	; 0xa4
 801e0ee:	f7ff fc1b 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XA8); //Set Multiplex Ratio
 801e0f2:	20a8      	movs	r0, #168	; 0xa8
 801e0f4:	f7ff fc18 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X3F);
 801e0f8:	203f      	movs	r0, #63	; 0x3f
 801e0fa:	f7ff fc15 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAB); //Set VDD regulator
 801e0fe:	20ab      	movs	r0, #171	; 0xab
 801e100:	f7ff fc12 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01); //Regulator Enable
 801e104:	2001      	movs	r0, #1
 801e106:	f7ff fc0f 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAD); //External /Internal IREF Selection
 801e10a:	20ad      	movs	r0, #173	; 0xad
 801e10c:	f7ff fc0c 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X8E);
 801e110:	208e      	movs	r0, #142	; 0x8e
 801e112:	f7ff fc09 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB1); //Set Phase Length
 801e116:	20b1      	movs	r0, #177	; 0xb1
 801e118:	f7ff fc06 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X22);
 801e11c:	2022      	movs	r0, #34	; 0x22
 801e11e:	f7ff fc03 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB3); //Display clock Divider
 801e122:	20b3      	movs	r0, #179	; 0xb3
 801e124:	f7ff fc00 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0XA0);
 801e128:	20a0      	movs	r0, #160	; 0xa0
 801e12a:	f7ff fbfd 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB6); //Set Second pre-charge Period
 801e12e:	20b6      	movs	r0, #182	; 0xb6
 801e130:	f7ff fbfa 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X04);
 801e134:	2004      	movs	r0, #4
 801e136:	f7ff fbf7 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XB9); //Set Linear LUT
 801e13a:	20b9      	movs	r0, #185	; 0xb9
 801e13c:	f7ff fbf4 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBc); //Set pre-charge voltage level
 801e140:	20bc      	movs	r0, #188	; 0xbc
 801e142:	f7ff fbf1 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X10); //0.5*Vcc
 801e146:	2010      	movs	r0, #16
 801e148:	f7ff fbee 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBD); //Pre-charge voltage capacitor Selection
 801e14c:	20bd      	movs	r0, #189	; 0xbd
 801e14e:	f7ff fbeb 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X01);
 801e152:	2001      	movs	r0, #1
 801e154:	f7ff fbe8 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XBE); //Set COM deselect voltage level
 801e158:	20be      	movs	r0, #190	; 0xbe
 801e15a:	f7ff fbe5 	bl	801d928 <ssd1362_writeCmd>
    ssd1362_writeCmd(0X07); //0.82*Vcc
 801e15e:	2007      	movs	r0, #7
 801e160:	f7ff fbe2 	bl	801d928 <ssd1362_writeCmd>

    ssd1362_writeCmd(0XAF); //Display ON
 801e164:	20af      	movs	r0, #175	; 0xaf
 801e166:	f7ff fbdf 	bl	801d928 <ssd1362_writeCmd>
}
 801e16a:	bf00      	nop
 801e16c:	bd80      	pop	{r7, pc}
	...

0801e170 <__libc_init_array>:
 801e170:	b570      	push	{r4, r5, r6, lr}
 801e172:	4d0d      	ldr	r5, [pc, #52]	; (801e1a8 <__libc_init_array+0x38>)
 801e174:	4c0d      	ldr	r4, [pc, #52]	; (801e1ac <__libc_init_array+0x3c>)
 801e176:	1b64      	subs	r4, r4, r5
 801e178:	10a4      	asrs	r4, r4, #2
 801e17a:	2600      	movs	r6, #0
 801e17c:	42a6      	cmp	r6, r4
 801e17e:	d109      	bne.n	801e194 <__libc_init_array+0x24>
 801e180:	4d0b      	ldr	r5, [pc, #44]	; (801e1b0 <__libc_init_array+0x40>)
 801e182:	4c0c      	ldr	r4, [pc, #48]	; (801e1b4 <__libc_init_array+0x44>)
 801e184:	f005 fdca 	bl	8023d1c <_init>
 801e188:	1b64      	subs	r4, r4, r5
 801e18a:	10a4      	asrs	r4, r4, #2
 801e18c:	2600      	movs	r6, #0
 801e18e:	42a6      	cmp	r6, r4
 801e190:	d105      	bne.n	801e19e <__libc_init_array+0x2e>
 801e192:	bd70      	pop	{r4, r5, r6, pc}
 801e194:	f855 3b04 	ldr.w	r3, [r5], #4
 801e198:	4798      	blx	r3
 801e19a:	3601      	adds	r6, #1
 801e19c:	e7ee      	b.n	801e17c <__libc_init_array+0xc>
 801e19e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e1a2:	4798      	blx	r3
 801e1a4:	3601      	adds	r6, #1
 801e1a6:	e7f2      	b.n	801e18e <__libc_init_array+0x1e>
 801e1a8:	08029300 	.word	0x08029300
 801e1ac:	08029300 	.word	0x08029300
 801e1b0:	08029300 	.word	0x08029300
 801e1b4:	08029304 	.word	0x08029304

0801e1b8 <malloc>:
 801e1b8:	4b02      	ldr	r3, [pc, #8]	; (801e1c4 <malloc+0xc>)
 801e1ba:	4601      	mov	r1, r0
 801e1bc:	6818      	ldr	r0, [r3, #0]
 801e1be:	f000 b891 	b.w	801e2e4 <_malloc_r>
 801e1c2:	bf00      	nop
 801e1c4:	24003444 	.word	0x24003444

0801e1c8 <memcmp>:
 801e1c8:	b530      	push	{r4, r5, lr}
 801e1ca:	3901      	subs	r1, #1
 801e1cc:	2400      	movs	r4, #0
 801e1ce:	42a2      	cmp	r2, r4
 801e1d0:	d101      	bne.n	801e1d6 <memcmp+0xe>
 801e1d2:	2000      	movs	r0, #0
 801e1d4:	e005      	b.n	801e1e2 <memcmp+0x1a>
 801e1d6:	5d03      	ldrb	r3, [r0, r4]
 801e1d8:	3401      	adds	r4, #1
 801e1da:	5d0d      	ldrb	r5, [r1, r4]
 801e1dc:	42ab      	cmp	r3, r5
 801e1de:	d0f6      	beq.n	801e1ce <memcmp+0x6>
 801e1e0:	1b58      	subs	r0, r3, r5
 801e1e2:	bd30      	pop	{r4, r5, pc}

0801e1e4 <memcpy>:
 801e1e4:	440a      	add	r2, r1
 801e1e6:	4291      	cmp	r1, r2
 801e1e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801e1ec:	d100      	bne.n	801e1f0 <memcpy+0xc>
 801e1ee:	4770      	bx	lr
 801e1f0:	b510      	push	{r4, lr}
 801e1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e1fa:	4291      	cmp	r1, r2
 801e1fc:	d1f9      	bne.n	801e1f2 <memcpy+0xe>
 801e1fe:	bd10      	pop	{r4, pc}

0801e200 <memmove>:
 801e200:	4288      	cmp	r0, r1
 801e202:	b510      	push	{r4, lr}
 801e204:	eb01 0402 	add.w	r4, r1, r2
 801e208:	d902      	bls.n	801e210 <memmove+0x10>
 801e20a:	4284      	cmp	r4, r0
 801e20c:	4623      	mov	r3, r4
 801e20e:	d807      	bhi.n	801e220 <memmove+0x20>
 801e210:	1e43      	subs	r3, r0, #1
 801e212:	42a1      	cmp	r1, r4
 801e214:	d008      	beq.n	801e228 <memmove+0x28>
 801e216:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e21e:	e7f8      	b.n	801e212 <memmove+0x12>
 801e220:	4402      	add	r2, r0
 801e222:	4601      	mov	r1, r0
 801e224:	428a      	cmp	r2, r1
 801e226:	d100      	bne.n	801e22a <memmove+0x2a>
 801e228:	bd10      	pop	{r4, pc}
 801e22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e232:	e7f7      	b.n	801e224 <memmove+0x24>

0801e234 <memset>:
 801e234:	4402      	add	r2, r0
 801e236:	4603      	mov	r3, r0
 801e238:	4293      	cmp	r3, r2
 801e23a:	d100      	bne.n	801e23e <memset+0xa>
 801e23c:	4770      	bx	lr
 801e23e:	f803 1b01 	strb.w	r1, [r3], #1
 801e242:	e7f9      	b.n	801e238 <memset+0x4>

0801e244 <_free_r>:
 801e244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e246:	2900      	cmp	r1, #0
 801e248:	d048      	beq.n	801e2dc <_free_r+0x98>
 801e24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e24e:	9001      	str	r0, [sp, #4]
 801e250:	2b00      	cmp	r3, #0
 801e252:	f1a1 0404 	sub.w	r4, r1, #4
 801e256:	bfb8      	it	lt
 801e258:	18e4      	addlt	r4, r4, r3
 801e25a:	f003 fb1f 	bl	802189c <__malloc_lock>
 801e25e:	4a20      	ldr	r2, [pc, #128]	; (801e2e0 <_free_r+0x9c>)
 801e260:	9801      	ldr	r0, [sp, #4]
 801e262:	6813      	ldr	r3, [r2, #0]
 801e264:	4615      	mov	r5, r2
 801e266:	b933      	cbnz	r3, 801e276 <_free_r+0x32>
 801e268:	6063      	str	r3, [r4, #4]
 801e26a:	6014      	str	r4, [r2, #0]
 801e26c:	b003      	add	sp, #12
 801e26e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e272:	f003 bb19 	b.w	80218a8 <__malloc_unlock>
 801e276:	42a3      	cmp	r3, r4
 801e278:	d90b      	bls.n	801e292 <_free_r+0x4e>
 801e27a:	6821      	ldr	r1, [r4, #0]
 801e27c:	1862      	adds	r2, r4, r1
 801e27e:	4293      	cmp	r3, r2
 801e280:	bf04      	itt	eq
 801e282:	681a      	ldreq	r2, [r3, #0]
 801e284:	685b      	ldreq	r3, [r3, #4]
 801e286:	6063      	str	r3, [r4, #4]
 801e288:	bf04      	itt	eq
 801e28a:	1852      	addeq	r2, r2, r1
 801e28c:	6022      	streq	r2, [r4, #0]
 801e28e:	602c      	str	r4, [r5, #0]
 801e290:	e7ec      	b.n	801e26c <_free_r+0x28>
 801e292:	461a      	mov	r2, r3
 801e294:	685b      	ldr	r3, [r3, #4]
 801e296:	b10b      	cbz	r3, 801e29c <_free_r+0x58>
 801e298:	42a3      	cmp	r3, r4
 801e29a:	d9fa      	bls.n	801e292 <_free_r+0x4e>
 801e29c:	6811      	ldr	r1, [r2, #0]
 801e29e:	1855      	adds	r5, r2, r1
 801e2a0:	42a5      	cmp	r5, r4
 801e2a2:	d10b      	bne.n	801e2bc <_free_r+0x78>
 801e2a4:	6824      	ldr	r4, [r4, #0]
 801e2a6:	4421      	add	r1, r4
 801e2a8:	1854      	adds	r4, r2, r1
 801e2aa:	42a3      	cmp	r3, r4
 801e2ac:	6011      	str	r1, [r2, #0]
 801e2ae:	d1dd      	bne.n	801e26c <_free_r+0x28>
 801e2b0:	681c      	ldr	r4, [r3, #0]
 801e2b2:	685b      	ldr	r3, [r3, #4]
 801e2b4:	6053      	str	r3, [r2, #4]
 801e2b6:	4421      	add	r1, r4
 801e2b8:	6011      	str	r1, [r2, #0]
 801e2ba:	e7d7      	b.n	801e26c <_free_r+0x28>
 801e2bc:	d902      	bls.n	801e2c4 <_free_r+0x80>
 801e2be:	230c      	movs	r3, #12
 801e2c0:	6003      	str	r3, [r0, #0]
 801e2c2:	e7d3      	b.n	801e26c <_free_r+0x28>
 801e2c4:	6825      	ldr	r5, [r4, #0]
 801e2c6:	1961      	adds	r1, r4, r5
 801e2c8:	428b      	cmp	r3, r1
 801e2ca:	bf04      	itt	eq
 801e2cc:	6819      	ldreq	r1, [r3, #0]
 801e2ce:	685b      	ldreq	r3, [r3, #4]
 801e2d0:	6063      	str	r3, [r4, #4]
 801e2d2:	bf04      	itt	eq
 801e2d4:	1949      	addeq	r1, r1, r5
 801e2d6:	6021      	streq	r1, [r4, #0]
 801e2d8:	6054      	str	r4, [r2, #4]
 801e2da:	e7c7      	b.n	801e26c <_free_r+0x28>
 801e2dc:	b003      	add	sp, #12
 801e2de:	bd30      	pop	{r4, r5, pc}
 801e2e0:	24005270 	.word	0x24005270

0801e2e4 <_malloc_r>:
 801e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2e6:	1ccd      	adds	r5, r1, #3
 801e2e8:	f025 0503 	bic.w	r5, r5, #3
 801e2ec:	3508      	adds	r5, #8
 801e2ee:	2d0c      	cmp	r5, #12
 801e2f0:	bf38      	it	cc
 801e2f2:	250c      	movcc	r5, #12
 801e2f4:	2d00      	cmp	r5, #0
 801e2f6:	4606      	mov	r6, r0
 801e2f8:	db01      	blt.n	801e2fe <_malloc_r+0x1a>
 801e2fa:	42a9      	cmp	r1, r5
 801e2fc:	d903      	bls.n	801e306 <_malloc_r+0x22>
 801e2fe:	230c      	movs	r3, #12
 801e300:	6033      	str	r3, [r6, #0]
 801e302:	2000      	movs	r0, #0
 801e304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e306:	f003 fac9 	bl	802189c <__malloc_lock>
 801e30a:	4921      	ldr	r1, [pc, #132]	; (801e390 <_malloc_r+0xac>)
 801e30c:	680a      	ldr	r2, [r1, #0]
 801e30e:	4614      	mov	r4, r2
 801e310:	b99c      	cbnz	r4, 801e33a <_malloc_r+0x56>
 801e312:	4f20      	ldr	r7, [pc, #128]	; (801e394 <_malloc_r+0xb0>)
 801e314:	683b      	ldr	r3, [r7, #0]
 801e316:	b923      	cbnz	r3, 801e322 <_malloc_r+0x3e>
 801e318:	4621      	mov	r1, r4
 801e31a:	4630      	mov	r0, r6
 801e31c:	f000 ff50 	bl	801f1c0 <_sbrk_r>
 801e320:	6038      	str	r0, [r7, #0]
 801e322:	4629      	mov	r1, r5
 801e324:	4630      	mov	r0, r6
 801e326:	f000 ff4b 	bl	801f1c0 <_sbrk_r>
 801e32a:	1c43      	adds	r3, r0, #1
 801e32c:	d123      	bne.n	801e376 <_malloc_r+0x92>
 801e32e:	230c      	movs	r3, #12
 801e330:	6033      	str	r3, [r6, #0]
 801e332:	4630      	mov	r0, r6
 801e334:	f003 fab8 	bl	80218a8 <__malloc_unlock>
 801e338:	e7e3      	b.n	801e302 <_malloc_r+0x1e>
 801e33a:	6823      	ldr	r3, [r4, #0]
 801e33c:	1b5b      	subs	r3, r3, r5
 801e33e:	d417      	bmi.n	801e370 <_malloc_r+0x8c>
 801e340:	2b0b      	cmp	r3, #11
 801e342:	d903      	bls.n	801e34c <_malloc_r+0x68>
 801e344:	6023      	str	r3, [r4, #0]
 801e346:	441c      	add	r4, r3
 801e348:	6025      	str	r5, [r4, #0]
 801e34a:	e004      	b.n	801e356 <_malloc_r+0x72>
 801e34c:	6863      	ldr	r3, [r4, #4]
 801e34e:	42a2      	cmp	r2, r4
 801e350:	bf0c      	ite	eq
 801e352:	600b      	streq	r3, [r1, #0]
 801e354:	6053      	strne	r3, [r2, #4]
 801e356:	4630      	mov	r0, r6
 801e358:	f003 faa6 	bl	80218a8 <__malloc_unlock>
 801e35c:	f104 000b 	add.w	r0, r4, #11
 801e360:	1d23      	adds	r3, r4, #4
 801e362:	f020 0007 	bic.w	r0, r0, #7
 801e366:	1ac2      	subs	r2, r0, r3
 801e368:	d0cc      	beq.n	801e304 <_malloc_r+0x20>
 801e36a:	1a1b      	subs	r3, r3, r0
 801e36c:	50a3      	str	r3, [r4, r2]
 801e36e:	e7c9      	b.n	801e304 <_malloc_r+0x20>
 801e370:	4622      	mov	r2, r4
 801e372:	6864      	ldr	r4, [r4, #4]
 801e374:	e7cc      	b.n	801e310 <_malloc_r+0x2c>
 801e376:	1cc4      	adds	r4, r0, #3
 801e378:	f024 0403 	bic.w	r4, r4, #3
 801e37c:	42a0      	cmp	r0, r4
 801e37e:	d0e3      	beq.n	801e348 <_malloc_r+0x64>
 801e380:	1a21      	subs	r1, r4, r0
 801e382:	4630      	mov	r0, r6
 801e384:	f000 ff1c 	bl	801f1c0 <_sbrk_r>
 801e388:	3001      	adds	r0, #1
 801e38a:	d1dd      	bne.n	801e348 <_malloc_r+0x64>
 801e38c:	e7cf      	b.n	801e32e <_malloc_r+0x4a>
 801e38e:	bf00      	nop
 801e390:	24005270 	.word	0x24005270
 801e394:	24005274 	.word	0x24005274

0801e398 <__cvt>:
 801e398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e39a:	ed2d 8b02 	vpush	{d8}
 801e39e:	eeb0 8b40 	vmov.f64	d8, d0
 801e3a2:	b085      	sub	sp, #20
 801e3a4:	4617      	mov	r7, r2
 801e3a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e3a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e3aa:	ee18 2a90 	vmov	r2, s17
 801e3ae:	f025 0520 	bic.w	r5, r5, #32
 801e3b2:	2a00      	cmp	r2, #0
 801e3b4:	bfb6      	itet	lt
 801e3b6:	222d      	movlt	r2, #45	; 0x2d
 801e3b8:	2200      	movge	r2, #0
 801e3ba:	eeb1 8b40 	vneglt.f64	d8, d0
 801e3be:	2d46      	cmp	r5, #70	; 0x46
 801e3c0:	460c      	mov	r4, r1
 801e3c2:	701a      	strb	r2, [r3, #0]
 801e3c4:	d004      	beq.n	801e3d0 <__cvt+0x38>
 801e3c6:	2d45      	cmp	r5, #69	; 0x45
 801e3c8:	d100      	bne.n	801e3cc <__cvt+0x34>
 801e3ca:	3401      	adds	r4, #1
 801e3cc:	2102      	movs	r1, #2
 801e3ce:	e000      	b.n	801e3d2 <__cvt+0x3a>
 801e3d0:	2103      	movs	r1, #3
 801e3d2:	ab03      	add	r3, sp, #12
 801e3d4:	9301      	str	r3, [sp, #4]
 801e3d6:	ab02      	add	r3, sp, #8
 801e3d8:	9300      	str	r3, [sp, #0]
 801e3da:	4622      	mov	r2, r4
 801e3dc:	4633      	mov	r3, r6
 801e3de:	eeb0 0b48 	vmov.f64	d0, d8
 801e3e2:	f001 ff1d 	bl	8020220 <_dtoa_r>
 801e3e6:	2d47      	cmp	r5, #71	; 0x47
 801e3e8:	d109      	bne.n	801e3fe <__cvt+0x66>
 801e3ea:	07fb      	lsls	r3, r7, #31
 801e3ec:	d407      	bmi.n	801e3fe <__cvt+0x66>
 801e3ee:	9b03      	ldr	r3, [sp, #12]
 801e3f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e3f2:	1a1b      	subs	r3, r3, r0
 801e3f4:	6013      	str	r3, [r2, #0]
 801e3f6:	b005      	add	sp, #20
 801e3f8:	ecbd 8b02 	vpop	{d8}
 801e3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3fe:	2d46      	cmp	r5, #70	; 0x46
 801e400:	eb00 0204 	add.w	r2, r0, r4
 801e404:	d10c      	bne.n	801e420 <__cvt+0x88>
 801e406:	7803      	ldrb	r3, [r0, #0]
 801e408:	2b30      	cmp	r3, #48	; 0x30
 801e40a:	d107      	bne.n	801e41c <__cvt+0x84>
 801e40c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e414:	bf1c      	itt	ne
 801e416:	f1c4 0401 	rsbne	r4, r4, #1
 801e41a:	6034      	strne	r4, [r6, #0]
 801e41c:	6833      	ldr	r3, [r6, #0]
 801e41e:	441a      	add	r2, r3
 801e420:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e428:	bf08      	it	eq
 801e42a:	9203      	streq	r2, [sp, #12]
 801e42c:	2130      	movs	r1, #48	; 0x30
 801e42e:	9b03      	ldr	r3, [sp, #12]
 801e430:	4293      	cmp	r3, r2
 801e432:	d2dc      	bcs.n	801e3ee <__cvt+0x56>
 801e434:	1c5c      	adds	r4, r3, #1
 801e436:	9403      	str	r4, [sp, #12]
 801e438:	7019      	strb	r1, [r3, #0]
 801e43a:	e7f8      	b.n	801e42e <__cvt+0x96>

0801e43c <__exponent>:
 801e43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e43e:	4603      	mov	r3, r0
 801e440:	2900      	cmp	r1, #0
 801e442:	bfb8      	it	lt
 801e444:	4249      	neglt	r1, r1
 801e446:	f803 2b02 	strb.w	r2, [r3], #2
 801e44a:	bfb4      	ite	lt
 801e44c:	222d      	movlt	r2, #45	; 0x2d
 801e44e:	222b      	movge	r2, #43	; 0x2b
 801e450:	2909      	cmp	r1, #9
 801e452:	7042      	strb	r2, [r0, #1]
 801e454:	dd2a      	ble.n	801e4ac <__exponent+0x70>
 801e456:	f10d 0407 	add.w	r4, sp, #7
 801e45a:	46a4      	mov	ip, r4
 801e45c:	270a      	movs	r7, #10
 801e45e:	46a6      	mov	lr, r4
 801e460:	460a      	mov	r2, r1
 801e462:	fb91 f6f7 	sdiv	r6, r1, r7
 801e466:	fb07 1516 	mls	r5, r7, r6, r1
 801e46a:	3530      	adds	r5, #48	; 0x30
 801e46c:	2a63      	cmp	r2, #99	; 0x63
 801e46e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801e472:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e476:	4631      	mov	r1, r6
 801e478:	dcf1      	bgt.n	801e45e <__exponent+0x22>
 801e47a:	3130      	adds	r1, #48	; 0x30
 801e47c:	f1ae 0502 	sub.w	r5, lr, #2
 801e480:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e484:	1c44      	adds	r4, r0, #1
 801e486:	4629      	mov	r1, r5
 801e488:	4561      	cmp	r1, ip
 801e48a:	d30a      	bcc.n	801e4a2 <__exponent+0x66>
 801e48c:	f10d 0209 	add.w	r2, sp, #9
 801e490:	eba2 020e 	sub.w	r2, r2, lr
 801e494:	4565      	cmp	r5, ip
 801e496:	bf88      	it	hi
 801e498:	2200      	movhi	r2, #0
 801e49a:	4413      	add	r3, r2
 801e49c:	1a18      	subs	r0, r3, r0
 801e49e:	b003      	add	sp, #12
 801e4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e4a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e4aa:	e7ed      	b.n	801e488 <__exponent+0x4c>
 801e4ac:	2330      	movs	r3, #48	; 0x30
 801e4ae:	3130      	adds	r1, #48	; 0x30
 801e4b0:	7083      	strb	r3, [r0, #2]
 801e4b2:	70c1      	strb	r1, [r0, #3]
 801e4b4:	1d03      	adds	r3, r0, #4
 801e4b6:	e7f1      	b.n	801e49c <__exponent+0x60>

0801e4b8 <_printf_float>:
 801e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4bc:	b08b      	sub	sp, #44	; 0x2c
 801e4be:	460c      	mov	r4, r1
 801e4c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801e4c4:	4616      	mov	r6, r2
 801e4c6:	461f      	mov	r7, r3
 801e4c8:	4605      	mov	r5, r0
 801e4ca:	f003 f969 	bl	80217a0 <_localeconv_r>
 801e4ce:	f8d0 b000 	ldr.w	fp, [r0]
 801e4d2:	4658      	mov	r0, fp
 801e4d4:	f7e1 ff04 	bl	80002e0 <strlen>
 801e4d8:	2300      	movs	r3, #0
 801e4da:	9308      	str	r3, [sp, #32]
 801e4dc:	f8d8 3000 	ldr.w	r3, [r8]
 801e4e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801e4e4:	6822      	ldr	r2, [r4, #0]
 801e4e6:	3307      	adds	r3, #7
 801e4e8:	f023 0307 	bic.w	r3, r3, #7
 801e4ec:	f103 0108 	add.w	r1, r3, #8
 801e4f0:	f8c8 1000 	str.w	r1, [r8]
 801e4f4:	4682      	mov	sl, r0
 801e4f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e4fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801e4fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801e760 <_printf_float+0x2a8>
 801e502:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801e506:	eeb0 6bc0 	vabs.f64	d6, d0
 801e50a:	eeb4 6b47 	vcmp.f64	d6, d7
 801e50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e512:	dd24      	ble.n	801e55e <_printf_float+0xa6>
 801e514:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e51c:	d502      	bpl.n	801e524 <_printf_float+0x6c>
 801e51e:	232d      	movs	r3, #45	; 0x2d
 801e520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e524:	4b90      	ldr	r3, [pc, #576]	; (801e768 <_printf_float+0x2b0>)
 801e526:	4891      	ldr	r0, [pc, #580]	; (801e76c <_printf_float+0x2b4>)
 801e528:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801e52c:	bf94      	ite	ls
 801e52e:	4698      	movls	r8, r3
 801e530:	4680      	movhi	r8, r0
 801e532:	2303      	movs	r3, #3
 801e534:	6123      	str	r3, [r4, #16]
 801e536:	f022 0204 	bic.w	r2, r2, #4
 801e53a:	2300      	movs	r3, #0
 801e53c:	6022      	str	r2, [r4, #0]
 801e53e:	9304      	str	r3, [sp, #16]
 801e540:	9700      	str	r7, [sp, #0]
 801e542:	4633      	mov	r3, r6
 801e544:	aa09      	add	r2, sp, #36	; 0x24
 801e546:	4621      	mov	r1, r4
 801e548:	4628      	mov	r0, r5
 801e54a:	f000 f9d3 	bl	801e8f4 <_printf_common>
 801e54e:	3001      	adds	r0, #1
 801e550:	f040 808a 	bne.w	801e668 <_printf_float+0x1b0>
 801e554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e558:	b00b      	add	sp, #44	; 0x2c
 801e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e55e:	eeb4 0b40 	vcmp.f64	d0, d0
 801e562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e566:	d709      	bvc.n	801e57c <_printf_float+0xc4>
 801e568:	ee10 3a90 	vmov	r3, s1
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	bfbc      	itt	lt
 801e570:	232d      	movlt	r3, #45	; 0x2d
 801e572:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e576:	487e      	ldr	r0, [pc, #504]	; (801e770 <_printf_float+0x2b8>)
 801e578:	4b7e      	ldr	r3, [pc, #504]	; (801e774 <_printf_float+0x2bc>)
 801e57a:	e7d5      	b.n	801e528 <_printf_float+0x70>
 801e57c:	6863      	ldr	r3, [r4, #4]
 801e57e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801e582:	9104      	str	r1, [sp, #16]
 801e584:	1c59      	adds	r1, r3, #1
 801e586:	d13c      	bne.n	801e602 <_printf_float+0x14a>
 801e588:	2306      	movs	r3, #6
 801e58a:	6063      	str	r3, [r4, #4]
 801e58c:	2300      	movs	r3, #0
 801e58e:	9303      	str	r3, [sp, #12]
 801e590:	ab08      	add	r3, sp, #32
 801e592:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801e596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801e59a:	ab07      	add	r3, sp, #28
 801e59c:	6861      	ldr	r1, [r4, #4]
 801e59e:	9300      	str	r3, [sp, #0]
 801e5a0:	6022      	str	r2, [r4, #0]
 801e5a2:	f10d 031b 	add.w	r3, sp, #27
 801e5a6:	4628      	mov	r0, r5
 801e5a8:	f7ff fef6 	bl	801e398 <__cvt>
 801e5ac:	9b04      	ldr	r3, [sp, #16]
 801e5ae:	9907      	ldr	r1, [sp, #28]
 801e5b0:	2b47      	cmp	r3, #71	; 0x47
 801e5b2:	4680      	mov	r8, r0
 801e5b4:	d108      	bne.n	801e5c8 <_printf_float+0x110>
 801e5b6:	1cc8      	adds	r0, r1, #3
 801e5b8:	db02      	blt.n	801e5c0 <_printf_float+0x108>
 801e5ba:	6863      	ldr	r3, [r4, #4]
 801e5bc:	4299      	cmp	r1, r3
 801e5be:	dd41      	ble.n	801e644 <_printf_float+0x18c>
 801e5c0:	f1a9 0902 	sub.w	r9, r9, #2
 801e5c4:	fa5f f989 	uxtb.w	r9, r9
 801e5c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e5cc:	d820      	bhi.n	801e610 <_printf_float+0x158>
 801e5ce:	3901      	subs	r1, #1
 801e5d0:	464a      	mov	r2, r9
 801e5d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e5d6:	9107      	str	r1, [sp, #28]
 801e5d8:	f7ff ff30 	bl	801e43c <__exponent>
 801e5dc:	9a08      	ldr	r2, [sp, #32]
 801e5de:	9004      	str	r0, [sp, #16]
 801e5e0:	1813      	adds	r3, r2, r0
 801e5e2:	2a01      	cmp	r2, #1
 801e5e4:	6123      	str	r3, [r4, #16]
 801e5e6:	dc02      	bgt.n	801e5ee <_printf_float+0x136>
 801e5e8:	6822      	ldr	r2, [r4, #0]
 801e5ea:	07d2      	lsls	r2, r2, #31
 801e5ec:	d501      	bpl.n	801e5f2 <_printf_float+0x13a>
 801e5ee:	3301      	adds	r3, #1
 801e5f0:	6123      	str	r3, [r4, #16]
 801e5f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d0a2      	beq.n	801e540 <_printf_float+0x88>
 801e5fa:	232d      	movs	r3, #45	; 0x2d
 801e5fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e600:	e79e      	b.n	801e540 <_printf_float+0x88>
 801e602:	9904      	ldr	r1, [sp, #16]
 801e604:	2947      	cmp	r1, #71	; 0x47
 801e606:	d1c1      	bne.n	801e58c <_printf_float+0xd4>
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d1bf      	bne.n	801e58c <_printf_float+0xd4>
 801e60c:	2301      	movs	r3, #1
 801e60e:	e7bc      	b.n	801e58a <_printf_float+0xd2>
 801e610:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801e614:	d118      	bne.n	801e648 <_printf_float+0x190>
 801e616:	2900      	cmp	r1, #0
 801e618:	6863      	ldr	r3, [r4, #4]
 801e61a:	dd0b      	ble.n	801e634 <_printf_float+0x17c>
 801e61c:	6121      	str	r1, [r4, #16]
 801e61e:	b913      	cbnz	r3, 801e626 <_printf_float+0x16e>
 801e620:	6822      	ldr	r2, [r4, #0]
 801e622:	07d0      	lsls	r0, r2, #31
 801e624:	d502      	bpl.n	801e62c <_printf_float+0x174>
 801e626:	3301      	adds	r3, #1
 801e628:	440b      	add	r3, r1
 801e62a:	6123      	str	r3, [r4, #16]
 801e62c:	2300      	movs	r3, #0
 801e62e:	65a1      	str	r1, [r4, #88]	; 0x58
 801e630:	9304      	str	r3, [sp, #16]
 801e632:	e7de      	b.n	801e5f2 <_printf_float+0x13a>
 801e634:	b913      	cbnz	r3, 801e63c <_printf_float+0x184>
 801e636:	6822      	ldr	r2, [r4, #0]
 801e638:	07d2      	lsls	r2, r2, #31
 801e63a:	d501      	bpl.n	801e640 <_printf_float+0x188>
 801e63c:	3302      	adds	r3, #2
 801e63e:	e7f4      	b.n	801e62a <_printf_float+0x172>
 801e640:	2301      	movs	r3, #1
 801e642:	e7f2      	b.n	801e62a <_printf_float+0x172>
 801e644:	f04f 0967 	mov.w	r9, #103	; 0x67
 801e648:	9b08      	ldr	r3, [sp, #32]
 801e64a:	4299      	cmp	r1, r3
 801e64c:	db05      	blt.n	801e65a <_printf_float+0x1a2>
 801e64e:	6823      	ldr	r3, [r4, #0]
 801e650:	6121      	str	r1, [r4, #16]
 801e652:	07d8      	lsls	r0, r3, #31
 801e654:	d5ea      	bpl.n	801e62c <_printf_float+0x174>
 801e656:	1c4b      	adds	r3, r1, #1
 801e658:	e7e7      	b.n	801e62a <_printf_float+0x172>
 801e65a:	2900      	cmp	r1, #0
 801e65c:	bfd4      	ite	le
 801e65e:	f1c1 0202 	rsble	r2, r1, #2
 801e662:	2201      	movgt	r2, #1
 801e664:	4413      	add	r3, r2
 801e666:	e7e0      	b.n	801e62a <_printf_float+0x172>
 801e668:	6823      	ldr	r3, [r4, #0]
 801e66a:	055a      	lsls	r2, r3, #21
 801e66c:	d407      	bmi.n	801e67e <_printf_float+0x1c6>
 801e66e:	6923      	ldr	r3, [r4, #16]
 801e670:	4642      	mov	r2, r8
 801e672:	4631      	mov	r1, r6
 801e674:	4628      	mov	r0, r5
 801e676:	47b8      	blx	r7
 801e678:	3001      	adds	r0, #1
 801e67a:	d12a      	bne.n	801e6d2 <_printf_float+0x21a>
 801e67c:	e76a      	b.n	801e554 <_printf_float+0x9c>
 801e67e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801e682:	f240 80e2 	bls.w	801e84a <_printf_float+0x392>
 801e686:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e68a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e692:	d133      	bne.n	801e6fc <_printf_float+0x244>
 801e694:	4a38      	ldr	r2, [pc, #224]	; (801e778 <_printf_float+0x2c0>)
 801e696:	2301      	movs	r3, #1
 801e698:	4631      	mov	r1, r6
 801e69a:	4628      	mov	r0, r5
 801e69c:	47b8      	blx	r7
 801e69e:	3001      	adds	r0, #1
 801e6a0:	f43f af58 	beq.w	801e554 <_printf_float+0x9c>
 801e6a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e6a8:	429a      	cmp	r2, r3
 801e6aa:	db02      	blt.n	801e6b2 <_printf_float+0x1fa>
 801e6ac:	6823      	ldr	r3, [r4, #0]
 801e6ae:	07d8      	lsls	r0, r3, #31
 801e6b0:	d50f      	bpl.n	801e6d2 <_printf_float+0x21a>
 801e6b2:	4653      	mov	r3, sl
 801e6b4:	465a      	mov	r2, fp
 801e6b6:	4631      	mov	r1, r6
 801e6b8:	4628      	mov	r0, r5
 801e6ba:	47b8      	blx	r7
 801e6bc:	3001      	adds	r0, #1
 801e6be:	f43f af49 	beq.w	801e554 <_printf_float+0x9c>
 801e6c2:	f04f 0800 	mov.w	r8, #0
 801e6c6:	f104 091a 	add.w	r9, r4, #26
 801e6ca:	9b08      	ldr	r3, [sp, #32]
 801e6cc:	3b01      	subs	r3, #1
 801e6ce:	4543      	cmp	r3, r8
 801e6d0:	dc09      	bgt.n	801e6e6 <_printf_float+0x22e>
 801e6d2:	6823      	ldr	r3, [r4, #0]
 801e6d4:	079b      	lsls	r3, r3, #30
 801e6d6:	f100 8108 	bmi.w	801e8ea <_printf_float+0x432>
 801e6da:	68e0      	ldr	r0, [r4, #12]
 801e6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e6de:	4298      	cmp	r0, r3
 801e6e0:	bfb8      	it	lt
 801e6e2:	4618      	movlt	r0, r3
 801e6e4:	e738      	b.n	801e558 <_printf_float+0xa0>
 801e6e6:	2301      	movs	r3, #1
 801e6e8:	464a      	mov	r2, r9
 801e6ea:	4631      	mov	r1, r6
 801e6ec:	4628      	mov	r0, r5
 801e6ee:	47b8      	blx	r7
 801e6f0:	3001      	adds	r0, #1
 801e6f2:	f43f af2f 	beq.w	801e554 <_printf_float+0x9c>
 801e6f6:	f108 0801 	add.w	r8, r8, #1
 801e6fa:	e7e6      	b.n	801e6ca <_printf_float+0x212>
 801e6fc:	9b07      	ldr	r3, [sp, #28]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	dc3c      	bgt.n	801e77c <_printf_float+0x2c4>
 801e702:	4a1d      	ldr	r2, [pc, #116]	; (801e778 <_printf_float+0x2c0>)
 801e704:	2301      	movs	r3, #1
 801e706:	4631      	mov	r1, r6
 801e708:	4628      	mov	r0, r5
 801e70a:	47b8      	blx	r7
 801e70c:	3001      	adds	r0, #1
 801e70e:	f43f af21 	beq.w	801e554 <_printf_float+0x9c>
 801e712:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e716:	4313      	orrs	r3, r2
 801e718:	d102      	bne.n	801e720 <_printf_float+0x268>
 801e71a:	6823      	ldr	r3, [r4, #0]
 801e71c:	07d9      	lsls	r1, r3, #31
 801e71e:	d5d8      	bpl.n	801e6d2 <_printf_float+0x21a>
 801e720:	4653      	mov	r3, sl
 801e722:	465a      	mov	r2, fp
 801e724:	4631      	mov	r1, r6
 801e726:	4628      	mov	r0, r5
 801e728:	47b8      	blx	r7
 801e72a:	3001      	adds	r0, #1
 801e72c:	f43f af12 	beq.w	801e554 <_printf_float+0x9c>
 801e730:	f04f 0900 	mov.w	r9, #0
 801e734:	f104 0a1a 	add.w	sl, r4, #26
 801e738:	9b07      	ldr	r3, [sp, #28]
 801e73a:	425b      	negs	r3, r3
 801e73c:	454b      	cmp	r3, r9
 801e73e:	dc01      	bgt.n	801e744 <_printf_float+0x28c>
 801e740:	9b08      	ldr	r3, [sp, #32]
 801e742:	e795      	b.n	801e670 <_printf_float+0x1b8>
 801e744:	2301      	movs	r3, #1
 801e746:	4652      	mov	r2, sl
 801e748:	4631      	mov	r1, r6
 801e74a:	4628      	mov	r0, r5
 801e74c:	47b8      	blx	r7
 801e74e:	3001      	adds	r0, #1
 801e750:	f43f af00 	beq.w	801e554 <_printf_float+0x9c>
 801e754:	f109 0901 	add.w	r9, r9, #1
 801e758:	e7ee      	b.n	801e738 <_printf_float+0x280>
 801e75a:	bf00      	nop
 801e75c:	f3af 8000 	nop.w
 801e760:	ffffffff 	.word	0xffffffff
 801e764:	7fefffff 	.word	0x7fefffff
 801e768:	08027454 	.word	0x08027454
 801e76c:	08027458 	.word	0x08027458
 801e770:	08027460 	.word	0x08027460
 801e774:	0802745c 	.word	0x0802745c
 801e778:	08027464 	.word	0x08027464
 801e77c:	9a08      	ldr	r2, [sp, #32]
 801e77e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e780:	429a      	cmp	r2, r3
 801e782:	bfa8      	it	ge
 801e784:	461a      	movge	r2, r3
 801e786:	2a00      	cmp	r2, #0
 801e788:	4691      	mov	r9, r2
 801e78a:	dc38      	bgt.n	801e7fe <_printf_float+0x346>
 801e78c:	2300      	movs	r3, #0
 801e78e:	9305      	str	r3, [sp, #20]
 801e790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e794:	f104 021a 	add.w	r2, r4, #26
 801e798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e79a:	9905      	ldr	r1, [sp, #20]
 801e79c:	9304      	str	r3, [sp, #16]
 801e79e:	eba3 0309 	sub.w	r3, r3, r9
 801e7a2:	428b      	cmp	r3, r1
 801e7a4:	dc33      	bgt.n	801e80e <_printf_float+0x356>
 801e7a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e7aa:	429a      	cmp	r2, r3
 801e7ac:	db3c      	blt.n	801e828 <_printf_float+0x370>
 801e7ae:	6823      	ldr	r3, [r4, #0]
 801e7b0:	07da      	lsls	r2, r3, #31
 801e7b2:	d439      	bmi.n	801e828 <_printf_float+0x370>
 801e7b4:	9a08      	ldr	r2, [sp, #32]
 801e7b6:	9b04      	ldr	r3, [sp, #16]
 801e7b8:	9907      	ldr	r1, [sp, #28]
 801e7ba:	1ad3      	subs	r3, r2, r3
 801e7bc:	eba2 0901 	sub.w	r9, r2, r1
 801e7c0:	4599      	cmp	r9, r3
 801e7c2:	bfa8      	it	ge
 801e7c4:	4699      	movge	r9, r3
 801e7c6:	f1b9 0f00 	cmp.w	r9, #0
 801e7ca:	dc35      	bgt.n	801e838 <_printf_float+0x380>
 801e7cc:	f04f 0800 	mov.w	r8, #0
 801e7d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e7d4:	f104 0a1a 	add.w	sl, r4, #26
 801e7d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e7dc:	1a9b      	subs	r3, r3, r2
 801e7de:	eba3 0309 	sub.w	r3, r3, r9
 801e7e2:	4543      	cmp	r3, r8
 801e7e4:	f77f af75 	ble.w	801e6d2 <_printf_float+0x21a>
 801e7e8:	2301      	movs	r3, #1
 801e7ea:	4652      	mov	r2, sl
 801e7ec:	4631      	mov	r1, r6
 801e7ee:	4628      	mov	r0, r5
 801e7f0:	47b8      	blx	r7
 801e7f2:	3001      	adds	r0, #1
 801e7f4:	f43f aeae 	beq.w	801e554 <_printf_float+0x9c>
 801e7f8:	f108 0801 	add.w	r8, r8, #1
 801e7fc:	e7ec      	b.n	801e7d8 <_printf_float+0x320>
 801e7fe:	4613      	mov	r3, r2
 801e800:	4631      	mov	r1, r6
 801e802:	4642      	mov	r2, r8
 801e804:	4628      	mov	r0, r5
 801e806:	47b8      	blx	r7
 801e808:	3001      	adds	r0, #1
 801e80a:	d1bf      	bne.n	801e78c <_printf_float+0x2d4>
 801e80c:	e6a2      	b.n	801e554 <_printf_float+0x9c>
 801e80e:	2301      	movs	r3, #1
 801e810:	4631      	mov	r1, r6
 801e812:	4628      	mov	r0, r5
 801e814:	9204      	str	r2, [sp, #16]
 801e816:	47b8      	blx	r7
 801e818:	3001      	adds	r0, #1
 801e81a:	f43f ae9b 	beq.w	801e554 <_printf_float+0x9c>
 801e81e:	9b05      	ldr	r3, [sp, #20]
 801e820:	9a04      	ldr	r2, [sp, #16]
 801e822:	3301      	adds	r3, #1
 801e824:	9305      	str	r3, [sp, #20]
 801e826:	e7b7      	b.n	801e798 <_printf_float+0x2e0>
 801e828:	4653      	mov	r3, sl
 801e82a:	465a      	mov	r2, fp
 801e82c:	4631      	mov	r1, r6
 801e82e:	4628      	mov	r0, r5
 801e830:	47b8      	blx	r7
 801e832:	3001      	adds	r0, #1
 801e834:	d1be      	bne.n	801e7b4 <_printf_float+0x2fc>
 801e836:	e68d      	b.n	801e554 <_printf_float+0x9c>
 801e838:	9a04      	ldr	r2, [sp, #16]
 801e83a:	464b      	mov	r3, r9
 801e83c:	4442      	add	r2, r8
 801e83e:	4631      	mov	r1, r6
 801e840:	4628      	mov	r0, r5
 801e842:	47b8      	blx	r7
 801e844:	3001      	adds	r0, #1
 801e846:	d1c1      	bne.n	801e7cc <_printf_float+0x314>
 801e848:	e684      	b.n	801e554 <_printf_float+0x9c>
 801e84a:	9a08      	ldr	r2, [sp, #32]
 801e84c:	2a01      	cmp	r2, #1
 801e84e:	dc01      	bgt.n	801e854 <_printf_float+0x39c>
 801e850:	07db      	lsls	r3, r3, #31
 801e852:	d537      	bpl.n	801e8c4 <_printf_float+0x40c>
 801e854:	2301      	movs	r3, #1
 801e856:	4642      	mov	r2, r8
 801e858:	4631      	mov	r1, r6
 801e85a:	4628      	mov	r0, r5
 801e85c:	47b8      	blx	r7
 801e85e:	3001      	adds	r0, #1
 801e860:	f43f ae78 	beq.w	801e554 <_printf_float+0x9c>
 801e864:	4653      	mov	r3, sl
 801e866:	465a      	mov	r2, fp
 801e868:	4631      	mov	r1, r6
 801e86a:	4628      	mov	r0, r5
 801e86c:	47b8      	blx	r7
 801e86e:	3001      	adds	r0, #1
 801e870:	f43f ae70 	beq.w	801e554 <_printf_float+0x9c>
 801e874:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e878:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e880:	d01b      	beq.n	801e8ba <_printf_float+0x402>
 801e882:	9b08      	ldr	r3, [sp, #32]
 801e884:	f108 0201 	add.w	r2, r8, #1
 801e888:	3b01      	subs	r3, #1
 801e88a:	4631      	mov	r1, r6
 801e88c:	4628      	mov	r0, r5
 801e88e:	47b8      	blx	r7
 801e890:	3001      	adds	r0, #1
 801e892:	d10e      	bne.n	801e8b2 <_printf_float+0x3fa>
 801e894:	e65e      	b.n	801e554 <_printf_float+0x9c>
 801e896:	2301      	movs	r3, #1
 801e898:	464a      	mov	r2, r9
 801e89a:	4631      	mov	r1, r6
 801e89c:	4628      	mov	r0, r5
 801e89e:	47b8      	blx	r7
 801e8a0:	3001      	adds	r0, #1
 801e8a2:	f43f ae57 	beq.w	801e554 <_printf_float+0x9c>
 801e8a6:	f108 0801 	add.w	r8, r8, #1
 801e8aa:	9b08      	ldr	r3, [sp, #32]
 801e8ac:	3b01      	subs	r3, #1
 801e8ae:	4543      	cmp	r3, r8
 801e8b0:	dcf1      	bgt.n	801e896 <_printf_float+0x3de>
 801e8b2:	9b04      	ldr	r3, [sp, #16]
 801e8b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e8b8:	e6db      	b.n	801e672 <_printf_float+0x1ba>
 801e8ba:	f04f 0800 	mov.w	r8, #0
 801e8be:	f104 091a 	add.w	r9, r4, #26
 801e8c2:	e7f2      	b.n	801e8aa <_printf_float+0x3f2>
 801e8c4:	2301      	movs	r3, #1
 801e8c6:	4642      	mov	r2, r8
 801e8c8:	e7df      	b.n	801e88a <_printf_float+0x3d2>
 801e8ca:	2301      	movs	r3, #1
 801e8cc:	464a      	mov	r2, r9
 801e8ce:	4631      	mov	r1, r6
 801e8d0:	4628      	mov	r0, r5
 801e8d2:	47b8      	blx	r7
 801e8d4:	3001      	adds	r0, #1
 801e8d6:	f43f ae3d 	beq.w	801e554 <_printf_float+0x9c>
 801e8da:	f108 0801 	add.w	r8, r8, #1
 801e8de:	68e3      	ldr	r3, [r4, #12]
 801e8e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e8e2:	1a5b      	subs	r3, r3, r1
 801e8e4:	4543      	cmp	r3, r8
 801e8e6:	dcf0      	bgt.n	801e8ca <_printf_float+0x412>
 801e8e8:	e6f7      	b.n	801e6da <_printf_float+0x222>
 801e8ea:	f04f 0800 	mov.w	r8, #0
 801e8ee:	f104 0919 	add.w	r9, r4, #25
 801e8f2:	e7f4      	b.n	801e8de <_printf_float+0x426>

0801e8f4 <_printf_common>:
 801e8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8f8:	4616      	mov	r6, r2
 801e8fa:	4699      	mov	r9, r3
 801e8fc:	688a      	ldr	r2, [r1, #8]
 801e8fe:	690b      	ldr	r3, [r1, #16]
 801e900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e904:	4293      	cmp	r3, r2
 801e906:	bfb8      	it	lt
 801e908:	4613      	movlt	r3, r2
 801e90a:	6033      	str	r3, [r6, #0]
 801e90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e910:	4607      	mov	r7, r0
 801e912:	460c      	mov	r4, r1
 801e914:	b10a      	cbz	r2, 801e91a <_printf_common+0x26>
 801e916:	3301      	adds	r3, #1
 801e918:	6033      	str	r3, [r6, #0]
 801e91a:	6823      	ldr	r3, [r4, #0]
 801e91c:	0699      	lsls	r1, r3, #26
 801e91e:	bf42      	ittt	mi
 801e920:	6833      	ldrmi	r3, [r6, #0]
 801e922:	3302      	addmi	r3, #2
 801e924:	6033      	strmi	r3, [r6, #0]
 801e926:	6825      	ldr	r5, [r4, #0]
 801e928:	f015 0506 	ands.w	r5, r5, #6
 801e92c:	d106      	bne.n	801e93c <_printf_common+0x48>
 801e92e:	f104 0a19 	add.w	sl, r4, #25
 801e932:	68e3      	ldr	r3, [r4, #12]
 801e934:	6832      	ldr	r2, [r6, #0]
 801e936:	1a9b      	subs	r3, r3, r2
 801e938:	42ab      	cmp	r3, r5
 801e93a:	dc26      	bgt.n	801e98a <_printf_common+0x96>
 801e93c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e940:	1e13      	subs	r3, r2, #0
 801e942:	6822      	ldr	r2, [r4, #0]
 801e944:	bf18      	it	ne
 801e946:	2301      	movne	r3, #1
 801e948:	0692      	lsls	r2, r2, #26
 801e94a:	d42b      	bmi.n	801e9a4 <_printf_common+0xb0>
 801e94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e950:	4649      	mov	r1, r9
 801e952:	4638      	mov	r0, r7
 801e954:	47c0      	blx	r8
 801e956:	3001      	adds	r0, #1
 801e958:	d01e      	beq.n	801e998 <_printf_common+0xa4>
 801e95a:	6823      	ldr	r3, [r4, #0]
 801e95c:	68e5      	ldr	r5, [r4, #12]
 801e95e:	6832      	ldr	r2, [r6, #0]
 801e960:	f003 0306 	and.w	r3, r3, #6
 801e964:	2b04      	cmp	r3, #4
 801e966:	bf08      	it	eq
 801e968:	1aad      	subeq	r5, r5, r2
 801e96a:	68a3      	ldr	r3, [r4, #8]
 801e96c:	6922      	ldr	r2, [r4, #16]
 801e96e:	bf0c      	ite	eq
 801e970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e974:	2500      	movne	r5, #0
 801e976:	4293      	cmp	r3, r2
 801e978:	bfc4      	itt	gt
 801e97a:	1a9b      	subgt	r3, r3, r2
 801e97c:	18ed      	addgt	r5, r5, r3
 801e97e:	2600      	movs	r6, #0
 801e980:	341a      	adds	r4, #26
 801e982:	42b5      	cmp	r5, r6
 801e984:	d11a      	bne.n	801e9bc <_printf_common+0xc8>
 801e986:	2000      	movs	r0, #0
 801e988:	e008      	b.n	801e99c <_printf_common+0xa8>
 801e98a:	2301      	movs	r3, #1
 801e98c:	4652      	mov	r2, sl
 801e98e:	4649      	mov	r1, r9
 801e990:	4638      	mov	r0, r7
 801e992:	47c0      	blx	r8
 801e994:	3001      	adds	r0, #1
 801e996:	d103      	bne.n	801e9a0 <_printf_common+0xac>
 801e998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9a0:	3501      	adds	r5, #1
 801e9a2:	e7c6      	b.n	801e932 <_printf_common+0x3e>
 801e9a4:	18e1      	adds	r1, r4, r3
 801e9a6:	1c5a      	adds	r2, r3, #1
 801e9a8:	2030      	movs	r0, #48	; 0x30
 801e9aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e9ae:	4422      	add	r2, r4
 801e9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e9b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e9b8:	3302      	adds	r3, #2
 801e9ba:	e7c7      	b.n	801e94c <_printf_common+0x58>
 801e9bc:	2301      	movs	r3, #1
 801e9be:	4622      	mov	r2, r4
 801e9c0:	4649      	mov	r1, r9
 801e9c2:	4638      	mov	r0, r7
 801e9c4:	47c0      	blx	r8
 801e9c6:	3001      	adds	r0, #1
 801e9c8:	d0e6      	beq.n	801e998 <_printf_common+0xa4>
 801e9ca:	3601      	adds	r6, #1
 801e9cc:	e7d9      	b.n	801e982 <_printf_common+0x8e>
	...

0801e9d0 <_printf_i>:
 801e9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e9d4:	460c      	mov	r4, r1
 801e9d6:	4691      	mov	r9, r2
 801e9d8:	7e27      	ldrb	r7, [r4, #24]
 801e9da:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e9dc:	2f78      	cmp	r7, #120	; 0x78
 801e9de:	4680      	mov	r8, r0
 801e9e0:	469a      	mov	sl, r3
 801e9e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e9e6:	d807      	bhi.n	801e9f8 <_printf_i+0x28>
 801e9e8:	2f62      	cmp	r7, #98	; 0x62
 801e9ea:	d80a      	bhi.n	801ea02 <_printf_i+0x32>
 801e9ec:	2f00      	cmp	r7, #0
 801e9ee:	f000 80d8 	beq.w	801eba2 <_printf_i+0x1d2>
 801e9f2:	2f58      	cmp	r7, #88	; 0x58
 801e9f4:	f000 80a3 	beq.w	801eb3e <_printf_i+0x16e>
 801e9f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801e9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ea00:	e03a      	b.n	801ea78 <_printf_i+0xa8>
 801ea02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ea06:	2b15      	cmp	r3, #21
 801ea08:	d8f6      	bhi.n	801e9f8 <_printf_i+0x28>
 801ea0a:	a001      	add	r0, pc, #4	; (adr r0, 801ea10 <_printf_i+0x40>)
 801ea0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ea10:	0801ea69 	.word	0x0801ea69
 801ea14:	0801ea7d 	.word	0x0801ea7d
 801ea18:	0801e9f9 	.word	0x0801e9f9
 801ea1c:	0801e9f9 	.word	0x0801e9f9
 801ea20:	0801e9f9 	.word	0x0801e9f9
 801ea24:	0801e9f9 	.word	0x0801e9f9
 801ea28:	0801ea7d 	.word	0x0801ea7d
 801ea2c:	0801e9f9 	.word	0x0801e9f9
 801ea30:	0801e9f9 	.word	0x0801e9f9
 801ea34:	0801e9f9 	.word	0x0801e9f9
 801ea38:	0801e9f9 	.word	0x0801e9f9
 801ea3c:	0801eb89 	.word	0x0801eb89
 801ea40:	0801eaad 	.word	0x0801eaad
 801ea44:	0801eb6b 	.word	0x0801eb6b
 801ea48:	0801e9f9 	.word	0x0801e9f9
 801ea4c:	0801e9f9 	.word	0x0801e9f9
 801ea50:	0801ebab 	.word	0x0801ebab
 801ea54:	0801e9f9 	.word	0x0801e9f9
 801ea58:	0801eaad 	.word	0x0801eaad
 801ea5c:	0801e9f9 	.word	0x0801e9f9
 801ea60:	0801e9f9 	.word	0x0801e9f9
 801ea64:	0801eb73 	.word	0x0801eb73
 801ea68:	680b      	ldr	r3, [r1, #0]
 801ea6a:	1d1a      	adds	r2, r3, #4
 801ea6c:	681b      	ldr	r3, [r3, #0]
 801ea6e:	600a      	str	r2, [r1, #0]
 801ea70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ea74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ea78:	2301      	movs	r3, #1
 801ea7a:	e0a3      	b.n	801ebc4 <_printf_i+0x1f4>
 801ea7c:	6825      	ldr	r5, [r4, #0]
 801ea7e:	6808      	ldr	r0, [r1, #0]
 801ea80:	062e      	lsls	r6, r5, #24
 801ea82:	f100 0304 	add.w	r3, r0, #4
 801ea86:	d50a      	bpl.n	801ea9e <_printf_i+0xce>
 801ea88:	6805      	ldr	r5, [r0, #0]
 801ea8a:	600b      	str	r3, [r1, #0]
 801ea8c:	2d00      	cmp	r5, #0
 801ea8e:	da03      	bge.n	801ea98 <_printf_i+0xc8>
 801ea90:	232d      	movs	r3, #45	; 0x2d
 801ea92:	426d      	negs	r5, r5
 801ea94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ea98:	485e      	ldr	r0, [pc, #376]	; (801ec14 <_printf_i+0x244>)
 801ea9a:	230a      	movs	r3, #10
 801ea9c:	e019      	b.n	801ead2 <_printf_i+0x102>
 801ea9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801eaa2:	6805      	ldr	r5, [r0, #0]
 801eaa4:	600b      	str	r3, [r1, #0]
 801eaa6:	bf18      	it	ne
 801eaa8:	b22d      	sxthne	r5, r5
 801eaaa:	e7ef      	b.n	801ea8c <_printf_i+0xbc>
 801eaac:	680b      	ldr	r3, [r1, #0]
 801eaae:	6825      	ldr	r5, [r4, #0]
 801eab0:	1d18      	adds	r0, r3, #4
 801eab2:	6008      	str	r0, [r1, #0]
 801eab4:	0628      	lsls	r0, r5, #24
 801eab6:	d501      	bpl.n	801eabc <_printf_i+0xec>
 801eab8:	681d      	ldr	r5, [r3, #0]
 801eaba:	e002      	b.n	801eac2 <_printf_i+0xf2>
 801eabc:	0669      	lsls	r1, r5, #25
 801eabe:	d5fb      	bpl.n	801eab8 <_printf_i+0xe8>
 801eac0:	881d      	ldrh	r5, [r3, #0]
 801eac2:	4854      	ldr	r0, [pc, #336]	; (801ec14 <_printf_i+0x244>)
 801eac4:	2f6f      	cmp	r7, #111	; 0x6f
 801eac6:	bf0c      	ite	eq
 801eac8:	2308      	moveq	r3, #8
 801eaca:	230a      	movne	r3, #10
 801eacc:	2100      	movs	r1, #0
 801eace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ead2:	6866      	ldr	r6, [r4, #4]
 801ead4:	60a6      	str	r6, [r4, #8]
 801ead6:	2e00      	cmp	r6, #0
 801ead8:	bfa2      	ittt	ge
 801eada:	6821      	ldrge	r1, [r4, #0]
 801eadc:	f021 0104 	bicge.w	r1, r1, #4
 801eae0:	6021      	strge	r1, [r4, #0]
 801eae2:	b90d      	cbnz	r5, 801eae8 <_printf_i+0x118>
 801eae4:	2e00      	cmp	r6, #0
 801eae6:	d04d      	beq.n	801eb84 <_printf_i+0x1b4>
 801eae8:	4616      	mov	r6, r2
 801eaea:	fbb5 f1f3 	udiv	r1, r5, r3
 801eaee:	fb03 5711 	mls	r7, r3, r1, r5
 801eaf2:	5dc7      	ldrb	r7, [r0, r7]
 801eaf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801eaf8:	462f      	mov	r7, r5
 801eafa:	42bb      	cmp	r3, r7
 801eafc:	460d      	mov	r5, r1
 801eafe:	d9f4      	bls.n	801eaea <_printf_i+0x11a>
 801eb00:	2b08      	cmp	r3, #8
 801eb02:	d10b      	bne.n	801eb1c <_printf_i+0x14c>
 801eb04:	6823      	ldr	r3, [r4, #0]
 801eb06:	07df      	lsls	r7, r3, #31
 801eb08:	d508      	bpl.n	801eb1c <_printf_i+0x14c>
 801eb0a:	6923      	ldr	r3, [r4, #16]
 801eb0c:	6861      	ldr	r1, [r4, #4]
 801eb0e:	4299      	cmp	r1, r3
 801eb10:	bfde      	ittt	le
 801eb12:	2330      	movle	r3, #48	; 0x30
 801eb14:	f806 3c01 	strble.w	r3, [r6, #-1]
 801eb18:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801eb1c:	1b92      	subs	r2, r2, r6
 801eb1e:	6122      	str	r2, [r4, #16]
 801eb20:	f8cd a000 	str.w	sl, [sp]
 801eb24:	464b      	mov	r3, r9
 801eb26:	aa03      	add	r2, sp, #12
 801eb28:	4621      	mov	r1, r4
 801eb2a:	4640      	mov	r0, r8
 801eb2c:	f7ff fee2 	bl	801e8f4 <_printf_common>
 801eb30:	3001      	adds	r0, #1
 801eb32:	d14c      	bne.n	801ebce <_printf_i+0x1fe>
 801eb34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801eb38:	b004      	add	sp, #16
 801eb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb3e:	4835      	ldr	r0, [pc, #212]	; (801ec14 <_printf_i+0x244>)
 801eb40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801eb44:	6823      	ldr	r3, [r4, #0]
 801eb46:	680e      	ldr	r6, [r1, #0]
 801eb48:	061f      	lsls	r7, r3, #24
 801eb4a:	f856 5b04 	ldr.w	r5, [r6], #4
 801eb4e:	600e      	str	r6, [r1, #0]
 801eb50:	d514      	bpl.n	801eb7c <_printf_i+0x1ac>
 801eb52:	07d9      	lsls	r1, r3, #31
 801eb54:	bf44      	itt	mi
 801eb56:	f043 0320 	orrmi.w	r3, r3, #32
 801eb5a:	6023      	strmi	r3, [r4, #0]
 801eb5c:	b91d      	cbnz	r5, 801eb66 <_printf_i+0x196>
 801eb5e:	6823      	ldr	r3, [r4, #0]
 801eb60:	f023 0320 	bic.w	r3, r3, #32
 801eb64:	6023      	str	r3, [r4, #0]
 801eb66:	2310      	movs	r3, #16
 801eb68:	e7b0      	b.n	801eacc <_printf_i+0xfc>
 801eb6a:	6823      	ldr	r3, [r4, #0]
 801eb6c:	f043 0320 	orr.w	r3, r3, #32
 801eb70:	6023      	str	r3, [r4, #0]
 801eb72:	2378      	movs	r3, #120	; 0x78
 801eb74:	4828      	ldr	r0, [pc, #160]	; (801ec18 <_printf_i+0x248>)
 801eb76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801eb7a:	e7e3      	b.n	801eb44 <_printf_i+0x174>
 801eb7c:	065e      	lsls	r6, r3, #25
 801eb7e:	bf48      	it	mi
 801eb80:	b2ad      	uxthmi	r5, r5
 801eb82:	e7e6      	b.n	801eb52 <_printf_i+0x182>
 801eb84:	4616      	mov	r6, r2
 801eb86:	e7bb      	b.n	801eb00 <_printf_i+0x130>
 801eb88:	680b      	ldr	r3, [r1, #0]
 801eb8a:	6826      	ldr	r6, [r4, #0]
 801eb8c:	6960      	ldr	r0, [r4, #20]
 801eb8e:	1d1d      	adds	r5, r3, #4
 801eb90:	600d      	str	r5, [r1, #0]
 801eb92:	0635      	lsls	r5, r6, #24
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	d501      	bpl.n	801eb9c <_printf_i+0x1cc>
 801eb98:	6018      	str	r0, [r3, #0]
 801eb9a:	e002      	b.n	801eba2 <_printf_i+0x1d2>
 801eb9c:	0671      	lsls	r1, r6, #25
 801eb9e:	d5fb      	bpl.n	801eb98 <_printf_i+0x1c8>
 801eba0:	8018      	strh	r0, [r3, #0]
 801eba2:	2300      	movs	r3, #0
 801eba4:	6123      	str	r3, [r4, #16]
 801eba6:	4616      	mov	r6, r2
 801eba8:	e7ba      	b.n	801eb20 <_printf_i+0x150>
 801ebaa:	680b      	ldr	r3, [r1, #0]
 801ebac:	1d1a      	adds	r2, r3, #4
 801ebae:	600a      	str	r2, [r1, #0]
 801ebb0:	681e      	ldr	r6, [r3, #0]
 801ebb2:	6862      	ldr	r2, [r4, #4]
 801ebb4:	2100      	movs	r1, #0
 801ebb6:	4630      	mov	r0, r6
 801ebb8:	f7e1 fb9a 	bl	80002f0 <memchr>
 801ebbc:	b108      	cbz	r0, 801ebc2 <_printf_i+0x1f2>
 801ebbe:	1b80      	subs	r0, r0, r6
 801ebc0:	6060      	str	r0, [r4, #4]
 801ebc2:	6863      	ldr	r3, [r4, #4]
 801ebc4:	6123      	str	r3, [r4, #16]
 801ebc6:	2300      	movs	r3, #0
 801ebc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ebcc:	e7a8      	b.n	801eb20 <_printf_i+0x150>
 801ebce:	6923      	ldr	r3, [r4, #16]
 801ebd0:	4632      	mov	r2, r6
 801ebd2:	4649      	mov	r1, r9
 801ebd4:	4640      	mov	r0, r8
 801ebd6:	47d0      	blx	sl
 801ebd8:	3001      	adds	r0, #1
 801ebda:	d0ab      	beq.n	801eb34 <_printf_i+0x164>
 801ebdc:	6823      	ldr	r3, [r4, #0]
 801ebde:	079b      	lsls	r3, r3, #30
 801ebe0:	d413      	bmi.n	801ec0a <_printf_i+0x23a>
 801ebe2:	68e0      	ldr	r0, [r4, #12]
 801ebe4:	9b03      	ldr	r3, [sp, #12]
 801ebe6:	4298      	cmp	r0, r3
 801ebe8:	bfb8      	it	lt
 801ebea:	4618      	movlt	r0, r3
 801ebec:	e7a4      	b.n	801eb38 <_printf_i+0x168>
 801ebee:	2301      	movs	r3, #1
 801ebf0:	4632      	mov	r2, r6
 801ebf2:	4649      	mov	r1, r9
 801ebf4:	4640      	mov	r0, r8
 801ebf6:	47d0      	blx	sl
 801ebf8:	3001      	adds	r0, #1
 801ebfa:	d09b      	beq.n	801eb34 <_printf_i+0x164>
 801ebfc:	3501      	adds	r5, #1
 801ebfe:	68e3      	ldr	r3, [r4, #12]
 801ec00:	9903      	ldr	r1, [sp, #12]
 801ec02:	1a5b      	subs	r3, r3, r1
 801ec04:	42ab      	cmp	r3, r5
 801ec06:	dcf2      	bgt.n	801ebee <_printf_i+0x21e>
 801ec08:	e7eb      	b.n	801ebe2 <_printf_i+0x212>
 801ec0a:	2500      	movs	r5, #0
 801ec0c:	f104 0619 	add.w	r6, r4, #25
 801ec10:	e7f5      	b.n	801ebfe <_printf_i+0x22e>
 801ec12:	bf00      	nop
 801ec14:	08027466 	.word	0x08027466
 801ec18:	08027477 	.word	0x08027477

0801ec1c <_scanf_float>:
 801ec1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec20:	b087      	sub	sp, #28
 801ec22:	4617      	mov	r7, r2
 801ec24:	9303      	str	r3, [sp, #12]
 801ec26:	688b      	ldr	r3, [r1, #8]
 801ec28:	1e5a      	subs	r2, r3, #1
 801ec2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ec2e:	bf83      	ittte	hi
 801ec30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ec34:	195b      	addhi	r3, r3, r5
 801ec36:	9302      	strhi	r3, [sp, #8]
 801ec38:	2300      	movls	r3, #0
 801ec3a:	bf86      	itte	hi
 801ec3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ec40:	608b      	strhi	r3, [r1, #8]
 801ec42:	9302      	strls	r3, [sp, #8]
 801ec44:	680b      	ldr	r3, [r1, #0]
 801ec46:	468b      	mov	fp, r1
 801ec48:	2500      	movs	r5, #0
 801ec4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801ec4e:	f84b 3b1c 	str.w	r3, [fp], #28
 801ec52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ec56:	4680      	mov	r8, r0
 801ec58:	460c      	mov	r4, r1
 801ec5a:	465e      	mov	r6, fp
 801ec5c:	46aa      	mov	sl, r5
 801ec5e:	46a9      	mov	r9, r5
 801ec60:	9501      	str	r5, [sp, #4]
 801ec62:	68a2      	ldr	r2, [r4, #8]
 801ec64:	b152      	cbz	r2, 801ec7c <_scanf_float+0x60>
 801ec66:	683b      	ldr	r3, [r7, #0]
 801ec68:	781b      	ldrb	r3, [r3, #0]
 801ec6a:	2b4e      	cmp	r3, #78	; 0x4e
 801ec6c:	d864      	bhi.n	801ed38 <_scanf_float+0x11c>
 801ec6e:	2b40      	cmp	r3, #64	; 0x40
 801ec70:	d83c      	bhi.n	801ecec <_scanf_float+0xd0>
 801ec72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ec76:	b2c8      	uxtb	r0, r1
 801ec78:	280e      	cmp	r0, #14
 801ec7a:	d93a      	bls.n	801ecf2 <_scanf_float+0xd6>
 801ec7c:	f1b9 0f00 	cmp.w	r9, #0
 801ec80:	d003      	beq.n	801ec8a <_scanf_float+0x6e>
 801ec82:	6823      	ldr	r3, [r4, #0]
 801ec84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ec88:	6023      	str	r3, [r4, #0]
 801ec8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ec8e:	f1ba 0f01 	cmp.w	sl, #1
 801ec92:	f200 8113 	bhi.w	801eebc <_scanf_float+0x2a0>
 801ec96:	455e      	cmp	r6, fp
 801ec98:	f200 8105 	bhi.w	801eea6 <_scanf_float+0x28a>
 801ec9c:	2501      	movs	r5, #1
 801ec9e:	4628      	mov	r0, r5
 801eca0:	b007      	add	sp, #28
 801eca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eca6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ecaa:	2a0d      	cmp	r2, #13
 801ecac:	d8e6      	bhi.n	801ec7c <_scanf_float+0x60>
 801ecae:	a101      	add	r1, pc, #4	; (adr r1, 801ecb4 <_scanf_float+0x98>)
 801ecb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ecb4:	0801edf3 	.word	0x0801edf3
 801ecb8:	0801ec7d 	.word	0x0801ec7d
 801ecbc:	0801ec7d 	.word	0x0801ec7d
 801ecc0:	0801ec7d 	.word	0x0801ec7d
 801ecc4:	0801ee53 	.word	0x0801ee53
 801ecc8:	0801ee2b 	.word	0x0801ee2b
 801eccc:	0801ec7d 	.word	0x0801ec7d
 801ecd0:	0801ec7d 	.word	0x0801ec7d
 801ecd4:	0801ee01 	.word	0x0801ee01
 801ecd8:	0801ec7d 	.word	0x0801ec7d
 801ecdc:	0801ec7d 	.word	0x0801ec7d
 801ece0:	0801ec7d 	.word	0x0801ec7d
 801ece4:	0801ec7d 	.word	0x0801ec7d
 801ece8:	0801edb9 	.word	0x0801edb9
 801ecec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ecf0:	e7db      	b.n	801ecaa <_scanf_float+0x8e>
 801ecf2:	290e      	cmp	r1, #14
 801ecf4:	d8c2      	bhi.n	801ec7c <_scanf_float+0x60>
 801ecf6:	a001      	add	r0, pc, #4	; (adr r0, 801ecfc <_scanf_float+0xe0>)
 801ecf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ecfc:	0801edab 	.word	0x0801edab
 801ed00:	0801ec7d 	.word	0x0801ec7d
 801ed04:	0801edab 	.word	0x0801edab
 801ed08:	0801ee3f 	.word	0x0801ee3f
 801ed0c:	0801ec7d 	.word	0x0801ec7d
 801ed10:	0801ed59 	.word	0x0801ed59
 801ed14:	0801ed95 	.word	0x0801ed95
 801ed18:	0801ed95 	.word	0x0801ed95
 801ed1c:	0801ed95 	.word	0x0801ed95
 801ed20:	0801ed95 	.word	0x0801ed95
 801ed24:	0801ed95 	.word	0x0801ed95
 801ed28:	0801ed95 	.word	0x0801ed95
 801ed2c:	0801ed95 	.word	0x0801ed95
 801ed30:	0801ed95 	.word	0x0801ed95
 801ed34:	0801ed95 	.word	0x0801ed95
 801ed38:	2b6e      	cmp	r3, #110	; 0x6e
 801ed3a:	d809      	bhi.n	801ed50 <_scanf_float+0x134>
 801ed3c:	2b60      	cmp	r3, #96	; 0x60
 801ed3e:	d8b2      	bhi.n	801eca6 <_scanf_float+0x8a>
 801ed40:	2b54      	cmp	r3, #84	; 0x54
 801ed42:	d077      	beq.n	801ee34 <_scanf_float+0x218>
 801ed44:	2b59      	cmp	r3, #89	; 0x59
 801ed46:	d199      	bne.n	801ec7c <_scanf_float+0x60>
 801ed48:	2d07      	cmp	r5, #7
 801ed4a:	d197      	bne.n	801ec7c <_scanf_float+0x60>
 801ed4c:	2508      	movs	r5, #8
 801ed4e:	e029      	b.n	801eda4 <_scanf_float+0x188>
 801ed50:	2b74      	cmp	r3, #116	; 0x74
 801ed52:	d06f      	beq.n	801ee34 <_scanf_float+0x218>
 801ed54:	2b79      	cmp	r3, #121	; 0x79
 801ed56:	e7f6      	b.n	801ed46 <_scanf_float+0x12a>
 801ed58:	6821      	ldr	r1, [r4, #0]
 801ed5a:	05c8      	lsls	r0, r1, #23
 801ed5c:	d51a      	bpl.n	801ed94 <_scanf_float+0x178>
 801ed5e:	9b02      	ldr	r3, [sp, #8]
 801ed60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ed64:	6021      	str	r1, [r4, #0]
 801ed66:	f109 0901 	add.w	r9, r9, #1
 801ed6a:	b11b      	cbz	r3, 801ed74 <_scanf_float+0x158>
 801ed6c:	3b01      	subs	r3, #1
 801ed6e:	3201      	adds	r2, #1
 801ed70:	9302      	str	r3, [sp, #8]
 801ed72:	60a2      	str	r2, [r4, #8]
 801ed74:	68a3      	ldr	r3, [r4, #8]
 801ed76:	3b01      	subs	r3, #1
 801ed78:	60a3      	str	r3, [r4, #8]
 801ed7a:	6923      	ldr	r3, [r4, #16]
 801ed7c:	3301      	adds	r3, #1
 801ed7e:	6123      	str	r3, [r4, #16]
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	3b01      	subs	r3, #1
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	607b      	str	r3, [r7, #4]
 801ed88:	f340 8084 	ble.w	801ee94 <_scanf_float+0x278>
 801ed8c:	683b      	ldr	r3, [r7, #0]
 801ed8e:	3301      	adds	r3, #1
 801ed90:	603b      	str	r3, [r7, #0]
 801ed92:	e766      	b.n	801ec62 <_scanf_float+0x46>
 801ed94:	eb1a 0f05 	cmn.w	sl, r5
 801ed98:	f47f af70 	bne.w	801ec7c <_scanf_float+0x60>
 801ed9c:	6822      	ldr	r2, [r4, #0]
 801ed9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801eda2:	6022      	str	r2, [r4, #0]
 801eda4:	f806 3b01 	strb.w	r3, [r6], #1
 801eda8:	e7e4      	b.n	801ed74 <_scanf_float+0x158>
 801edaa:	6822      	ldr	r2, [r4, #0]
 801edac:	0610      	lsls	r0, r2, #24
 801edae:	f57f af65 	bpl.w	801ec7c <_scanf_float+0x60>
 801edb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801edb6:	e7f4      	b.n	801eda2 <_scanf_float+0x186>
 801edb8:	f1ba 0f00 	cmp.w	sl, #0
 801edbc:	d10e      	bne.n	801eddc <_scanf_float+0x1c0>
 801edbe:	f1b9 0f00 	cmp.w	r9, #0
 801edc2:	d10e      	bne.n	801ede2 <_scanf_float+0x1c6>
 801edc4:	6822      	ldr	r2, [r4, #0]
 801edc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801edca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801edce:	d108      	bne.n	801ede2 <_scanf_float+0x1c6>
 801edd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801edd4:	6022      	str	r2, [r4, #0]
 801edd6:	f04f 0a01 	mov.w	sl, #1
 801edda:	e7e3      	b.n	801eda4 <_scanf_float+0x188>
 801eddc:	f1ba 0f02 	cmp.w	sl, #2
 801ede0:	d055      	beq.n	801ee8e <_scanf_float+0x272>
 801ede2:	2d01      	cmp	r5, #1
 801ede4:	d002      	beq.n	801edec <_scanf_float+0x1d0>
 801ede6:	2d04      	cmp	r5, #4
 801ede8:	f47f af48 	bne.w	801ec7c <_scanf_float+0x60>
 801edec:	3501      	adds	r5, #1
 801edee:	b2ed      	uxtb	r5, r5
 801edf0:	e7d8      	b.n	801eda4 <_scanf_float+0x188>
 801edf2:	f1ba 0f01 	cmp.w	sl, #1
 801edf6:	f47f af41 	bne.w	801ec7c <_scanf_float+0x60>
 801edfa:	f04f 0a02 	mov.w	sl, #2
 801edfe:	e7d1      	b.n	801eda4 <_scanf_float+0x188>
 801ee00:	b97d      	cbnz	r5, 801ee22 <_scanf_float+0x206>
 801ee02:	f1b9 0f00 	cmp.w	r9, #0
 801ee06:	f47f af3c 	bne.w	801ec82 <_scanf_float+0x66>
 801ee0a:	6822      	ldr	r2, [r4, #0]
 801ee0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ee10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ee14:	f47f af39 	bne.w	801ec8a <_scanf_float+0x6e>
 801ee18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ee1c:	6022      	str	r2, [r4, #0]
 801ee1e:	2501      	movs	r5, #1
 801ee20:	e7c0      	b.n	801eda4 <_scanf_float+0x188>
 801ee22:	2d03      	cmp	r5, #3
 801ee24:	d0e2      	beq.n	801edec <_scanf_float+0x1d0>
 801ee26:	2d05      	cmp	r5, #5
 801ee28:	e7de      	b.n	801ede8 <_scanf_float+0x1cc>
 801ee2a:	2d02      	cmp	r5, #2
 801ee2c:	f47f af26 	bne.w	801ec7c <_scanf_float+0x60>
 801ee30:	2503      	movs	r5, #3
 801ee32:	e7b7      	b.n	801eda4 <_scanf_float+0x188>
 801ee34:	2d06      	cmp	r5, #6
 801ee36:	f47f af21 	bne.w	801ec7c <_scanf_float+0x60>
 801ee3a:	2507      	movs	r5, #7
 801ee3c:	e7b2      	b.n	801eda4 <_scanf_float+0x188>
 801ee3e:	6822      	ldr	r2, [r4, #0]
 801ee40:	0591      	lsls	r1, r2, #22
 801ee42:	f57f af1b 	bpl.w	801ec7c <_scanf_float+0x60>
 801ee46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801ee4a:	6022      	str	r2, [r4, #0]
 801ee4c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ee50:	e7a8      	b.n	801eda4 <_scanf_float+0x188>
 801ee52:	6822      	ldr	r2, [r4, #0]
 801ee54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801ee58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801ee5c:	d006      	beq.n	801ee6c <_scanf_float+0x250>
 801ee5e:	0550      	lsls	r0, r2, #21
 801ee60:	f57f af0c 	bpl.w	801ec7c <_scanf_float+0x60>
 801ee64:	f1b9 0f00 	cmp.w	r9, #0
 801ee68:	f43f af0f 	beq.w	801ec8a <_scanf_float+0x6e>
 801ee6c:	0591      	lsls	r1, r2, #22
 801ee6e:	bf58      	it	pl
 801ee70:	9901      	ldrpl	r1, [sp, #4]
 801ee72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ee76:	bf58      	it	pl
 801ee78:	eba9 0101 	subpl.w	r1, r9, r1
 801ee7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801ee80:	bf58      	it	pl
 801ee82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ee86:	6022      	str	r2, [r4, #0]
 801ee88:	f04f 0900 	mov.w	r9, #0
 801ee8c:	e78a      	b.n	801eda4 <_scanf_float+0x188>
 801ee8e:	f04f 0a03 	mov.w	sl, #3
 801ee92:	e787      	b.n	801eda4 <_scanf_float+0x188>
 801ee94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ee98:	4639      	mov	r1, r7
 801ee9a:	4640      	mov	r0, r8
 801ee9c:	4798      	blx	r3
 801ee9e:	2800      	cmp	r0, #0
 801eea0:	f43f aedf 	beq.w	801ec62 <_scanf_float+0x46>
 801eea4:	e6ea      	b.n	801ec7c <_scanf_float+0x60>
 801eea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801eeaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801eeae:	463a      	mov	r2, r7
 801eeb0:	4640      	mov	r0, r8
 801eeb2:	4798      	blx	r3
 801eeb4:	6923      	ldr	r3, [r4, #16]
 801eeb6:	3b01      	subs	r3, #1
 801eeb8:	6123      	str	r3, [r4, #16]
 801eeba:	e6ec      	b.n	801ec96 <_scanf_float+0x7a>
 801eebc:	1e6b      	subs	r3, r5, #1
 801eebe:	2b06      	cmp	r3, #6
 801eec0:	d825      	bhi.n	801ef0e <_scanf_float+0x2f2>
 801eec2:	2d02      	cmp	r5, #2
 801eec4:	d836      	bhi.n	801ef34 <_scanf_float+0x318>
 801eec6:	455e      	cmp	r6, fp
 801eec8:	f67f aee8 	bls.w	801ec9c <_scanf_float+0x80>
 801eecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801eed0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801eed4:	463a      	mov	r2, r7
 801eed6:	4640      	mov	r0, r8
 801eed8:	4798      	blx	r3
 801eeda:	6923      	ldr	r3, [r4, #16]
 801eedc:	3b01      	subs	r3, #1
 801eede:	6123      	str	r3, [r4, #16]
 801eee0:	e7f1      	b.n	801eec6 <_scanf_float+0x2aa>
 801eee2:	9802      	ldr	r0, [sp, #8]
 801eee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801eee8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801eeec:	9002      	str	r0, [sp, #8]
 801eeee:	463a      	mov	r2, r7
 801eef0:	4640      	mov	r0, r8
 801eef2:	4798      	blx	r3
 801eef4:	6923      	ldr	r3, [r4, #16]
 801eef6:	3b01      	subs	r3, #1
 801eef8:	6123      	str	r3, [r4, #16]
 801eefa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801eefe:	fa5f fa8a 	uxtb.w	sl, sl
 801ef02:	f1ba 0f02 	cmp.w	sl, #2
 801ef06:	d1ec      	bne.n	801eee2 <_scanf_float+0x2c6>
 801ef08:	3d03      	subs	r5, #3
 801ef0a:	b2ed      	uxtb	r5, r5
 801ef0c:	1b76      	subs	r6, r6, r5
 801ef0e:	6823      	ldr	r3, [r4, #0]
 801ef10:	05da      	lsls	r2, r3, #23
 801ef12:	d52f      	bpl.n	801ef74 <_scanf_float+0x358>
 801ef14:	055b      	lsls	r3, r3, #21
 801ef16:	d510      	bpl.n	801ef3a <_scanf_float+0x31e>
 801ef18:	455e      	cmp	r6, fp
 801ef1a:	f67f aebf 	bls.w	801ec9c <_scanf_float+0x80>
 801ef1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ef22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ef26:	463a      	mov	r2, r7
 801ef28:	4640      	mov	r0, r8
 801ef2a:	4798      	blx	r3
 801ef2c:	6923      	ldr	r3, [r4, #16]
 801ef2e:	3b01      	subs	r3, #1
 801ef30:	6123      	str	r3, [r4, #16]
 801ef32:	e7f1      	b.n	801ef18 <_scanf_float+0x2fc>
 801ef34:	46aa      	mov	sl, r5
 801ef36:	9602      	str	r6, [sp, #8]
 801ef38:	e7df      	b.n	801eefa <_scanf_float+0x2de>
 801ef3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ef3e:	6923      	ldr	r3, [r4, #16]
 801ef40:	2965      	cmp	r1, #101	; 0x65
 801ef42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801ef46:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801ef4a:	6123      	str	r3, [r4, #16]
 801ef4c:	d00c      	beq.n	801ef68 <_scanf_float+0x34c>
 801ef4e:	2945      	cmp	r1, #69	; 0x45
 801ef50:	d00a      	beq.n	801ef68 <_scanf_float+0x34c>
 801ef52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ef56:	463a      	mov	r2, r7
 801ef58:	4640      	mov	r0, r8
 801ef5a:	4798      	blx	r3
 801ef5c:	6923      	ldr	r3, [r4, #16]
 801ef5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ef62:	3b01      	subs	r3, #1
 801ef64:	1eb5      	subs	r5, r6, #2
 801ef66:	6123      	str	r3, [r4, #16]
 801ef68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ef6c:	463a      	mov	r2, r7
 801ef6e:	4640      	mov	r0, r8
 801ef70:	4798      	blx	r3
 801ef72:	462e      	mov	r6, r5
 801ef74:	6825      	ldr	r5, [r4, #0]
 801ef76:	f015 0510 	ands.w	r5, r5, #16
 801ef7a:	d14d      	bne.n	801f018 <_scanf_float+0x3fc>
 801ef7c:	7035      	strb	r5, [r6, #0]
 801ef7e:	6823      	ldr	r3, [r4, #0]
 801ef80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ef84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ef88:	d11a      	bne.n	801efc0 <_scanf_float+0x3a4>
 801ef8a:	9b01      	ldr	r3, [sp, #4]
 801ef8c:	454b      	cmp	r3, r9
 801ef8e:	eba3 0209 	sub.w	r2, r3, r9
 801ef92:	d122      	bne.n	801efda <_scanf_float+0x3be>
 801ef94:	2200      	movs	r2, #0
 801ef96:	4659      	mov	r1, fp
 801ef98:	4640      	mov	r0, r8
 801ef9a:	f000 ff4b 	bl	801fe34 <_strtod_r>
 801ef9e:	9b03      	ldr	r3, [sp, #12]
 801efa0:	6821      	ldr	r1, [r4, #0]
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	f011 0f02 	tst.w	r1, #2
 801efa8:	f103 0204 	add.w	r2, r3, #4
 801efac:	d020      	beq.n	801eff0 <_scanf_float+0x3d4>
 801efae:	9903      	ldr	r1, [sp, #12]
 801efb0:	600a      	str	r2, [r1, #0]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	ed83 0b00 	vstr	d0, [r3]
 801efb8:	68e3      	ldr	r3, [r4, #12]
 801efba:	3301      	adds	r3, #1
 801efbc:	60e3      	str	r3, [r4, #12]
 801efbe:	e66e      	b.n	801ec9e <_scanf_float+0x82>
 801efc0:	9b04      	ldr	r3, [sp, #16]
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d0e6      	beq.n	801ef94 <_scanf_float+0x378>
 801efc6:	9905      	ldr	r1, [sp, #20]
 801efc8:	230a      	movs	r3, #10
 801efca:	462a      	mov	r2, r5
 801efcc:	3101      	adds	r1, #1
 801efce:	4640      	mov	r0, r8
 801efd0:	f000 ffba 	bl	801ff48 <_strtol_r>
 801efd4:	9b04      	ldr	r3, [sp, #16]
 801efd6:	9e05      	ldr	r6, [sp, #20]
 801efd8:	1ac2      	subs	r2, r0, r3
 801efda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801efde:	429e      	cmp	r6, r3
 801efe0:	bf28      	it	cs
 801efe2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801efe6:	490d      	ldr	r1, [pc, #52]	; (801f01c <_scanf_float+0x400>)
 801efe8:	4630      	mov	r0, r6
 801efea:	f000 f8ff 	bl	801f1ec <siprintf>
 801efee:	e7d1      	b.n	801ef94 <_scanf_float+0x378>
 801eff0:	f011 0f04 	tst.w	r1, #4
 801eff4:	9903      	ldr	r1, [sp, #12]
 801eff6:	600a      	str	r2, [r1, #0]
 801eff8:	d1db      	bne.n	801efb2 <_scanf_float+0x396>
 801effa:	eeb4 0b40 	vcmp.f64	d0, d0
 801effe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f002:	681e      	ldr	r6, [r3, #0]
 801f004:	d705      	bvc.n	801f012 <_scanf_float+0x3f6>
 801f006:	4806      	ldr	r0, [pc, #24]	; (801f020 <_scanf_float+0x404>)
 801f008:	f000 f8ea 	bl	801f1e0 <nanf>
 801f00c:	ed86 0a00 	vstr	s0, [r6]
 801f010:	e7d2      	b.n	801efb8 <_scanf_float+0x39c>
 801f012:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801f016:	e7f9      	b.n	801f00c <_scanf_float+0x3f0>
 801f018:	2500      	movs	r5, #0
 801f01a:	e640      	b.n	801ec9e <_scanf_float+0x82>
 801f01c:	08027488 	.word	0x08027488
 801f020:	08027593 	.word	0x08027593

0801f024 <iprintf>:
 801f024:	b40f      	push	{r0, r1, r2, r3}
 801f026:	4b0a      	ldr	r3, [pc, #40]	; (801f050 <iprintf+0x2c>)
 801f028:	b513      	push	{r0, r1, r4, lr}
 801f02a:	681c      	ldr	r4, [r3, #0]
 801f02c:	b124      	cbz	r4, 801f038 <iprintf+0x14>
 801f02e:	69a3      	ldr	r3, [r4, #24]
 801f030:	b913      	cbnz	r3, 801f038 <iprintf+0x14>
 801f032:	4620      	mov	r0, r4
 801f034:	f001 ff96 	bl	8020f64 <__sinit>
 801f038:	ab05      	add	r3, sp, #20
 801f03a:	9a04      	ldr	r2, [sp, #16]
 801f03c:	68a1      	ldr	r1, [r4, #8]
 801f03e:	9301      	str	r3, [sp, #4]
 801f040:	4620      	mov	r0, r4
 801f042:	f003 fa87 	bl	8022554 <_vfiprintf_r>
 801f046:	b002      	add	sp, #8
 801f048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f04c:	b004      	add	sp, #16
 801f04e:	4770      	bx	lr
 801f050:	24003444 	.word	0x24003444

0801f054 <_puts_r>:
 801f054:	b570      	push	{r4, r5, r6, lr}
 801f056:	460e      	mov	r6, r1
 801f058:	4605      	mov	r5, r0
 801f05a:	b118      	cbz	r0, 801f064 <_puts_r+0x10>
 801f05c:	6983      	ldr	r3, [r0, #24]
 801f05e:	b90b      	cbnz	r3, 801f064 <_puts_r+0x10>
 801f060:	f001 ff80 	bl	8020f64 <__sinit>
 801f064:	69ab      	ldr	r3, [r5, #24]
 801f066:	68ac      	ldr	r4, [r5, #8]
 801f068:	b913      	cbnz	r3, 801f070 <_puts_r+0x1c>
 801f06a:	4628      	mov	r0, r5
 801f06c:	f001 ff7a 	bl	8020f64 <__sinit>
 801f070:	4b2c      	ldr	r3, [pc, #176]	; (801f124 <_puts_r+0xd0>)
 801f072:	429c      	cmp	r4, r3
 801f074:	d120      	bne.n	801f0b8 <_puts_r+0x64>
 801f076:	686c      	ldr	r4, [r5, #4]
 801f078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f07a:	07db      	lsls	r3, r3, #31
 801f07c:	d405      	bmi.n	801f08a <_puts_r+0x36>
 801f07e:	89a3      	ldrh	r3, [r4, #12]
 801f080:	0598      	lsls	r0, r3, #22
 801f082:	d402      	bmi.n	801f08a <_puts_r+0x36>
 801f084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f086:	f002 fb90 	bl	80217aa <__retarget_lock_acquire_recursive>
 801f08a:	89a3      	ldrh	r3, [r4, #12]
 801f08c:	0719      	lsls	r1, r3, #28
 801f08e:	d51d      	bpl.n	801f0cc <_puts_r+0x78>
 801f090:	6923      	ldr	r3, [r4, #16]
 801f092:	b1db      	cbz	r3, 801f0cc <_puts_r+0x78>
 801f094:	3e01      	subs	r6, #1
 801f096:	68a3      	ldr	r3, [r4, #8]
 801f098:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f09c:	3b01      	subs	r3, #1
 801f09e:	60a3      	str	r3, [r4, #8]
 801f0a0:	bb39      	cbnz	r1, 801f0f2 <_puts_r+0x9e>
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	da38      	bge.n	801f118 <_puts_r+0xc4>
 801f0a6:	4622      	mov	r2, r4
 801f0a8:	210a      	movs	r1, #10
 801f0aa:	4628      	mov	r0, r5
 801f0ac:	f000 ff4e 	bl	801ff4c <__swbuf_r>
 801f0b0:	3001      	adds	r0, #1
 801f0b2:	d011      	beq.n	801f0d8 <_puts_r+0x84>
 801f0b4:	250a      	movs	r5, #10
 801f0b6:	e011      	b.n	801f0dc <_puts_r+0x88>
 801f0b8:	4b1b      	ldr	r3, [pc, #108]	; (801f128 <_puts_r+0xd4>)
 801f0ba:	429c      	cmp	r4, r3
 801f0bc:	d101      	bne.n	801f0c2 <_puts_r+0x6e>
 801f0be:	68ac      	ldr	r4, [r5, #8]
 801f0c0:	e7da      	b.n	801f078 <_puts_r+0x24>
 801f0c2:	4b1a      	ldr	r3, [pc, #104]	; (801f12c <_puts_r+0xd8>)
 801f0c4:	429c      	cmp	r4, r3
 801f0c6:	bf08      	it	eq
 801f0c8:	68ec      	ldreq	r4, [r5, #12]
 801f0ca:	e7d5      	b.n	801f078 <_puts_r+0x24>
 801f0cc:	4621      	mov	r1, r4
 801f0ce:	4628      	mov	r0, r5
 801f0d0:	f000 ff8e 	bl	801fff0 <__swsetup_r>
 801f0d4:	2800      	cmp	r0, #0
 801f0d6:	d0dd      	beq.n	801f094 <_puts_r+0x40>
 801f0d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f0dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f0de:	07da      	lsls	r2, r3, #31
 801f0e0:	d405      	bmi.n	801f0ee <_puts_r+0x9a>
 801f0e2:	89a3      	ldrh	r3, [r4, #12]
 801f0e4:	059b      	lsls	r3, r3, #22
 801f0e6:	d402      	bmi.n	801f0ee <_puts_r+0x9a>
 801f0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f0ea:	f002 fb5f 	bl	80217ac <__retarget_lock_release_recursive>
 801f0ee:	4628      	mov	r0, r5
 801f0f0:	bd70      	pop	{r4, r5, r6, pc}
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	da04      	bge.n	801f100 <_puts_r+0xac>
 801f0f6:	69a2      	ldr	r2, [r4, #24]
 801f0f8:	429a      	cmp	r2, r3
 801f0fa:	dc06      	bgt.n	801f10a <_puts_r+0xb6>
 801f0fc:	290a      	cmp	r1, #10
 801f0fe:	d004      	beq.n	801f10a <_puts_r+0xb6>
 801f100:	6823      	ldr	r3, [r4, #0]
 801f102:	1c5a      	adds	r2, r3, #1
 801f104:	6022      	str	r2, [r4, #0]
 801f106:	7019      	strb	r1, [r3, #0]
 801f108:	e7c5      	b.n	801f096 <_puts_r+0x42>
 801f10a:	4622      	mov	r2, r4
 801f10c:	4628      	mov	r0, r5
 801f10e:	f000 ff1d 	bl	801ff4c <__swbuf_r>
 801f112:	3001      	adds	r0, #1
 801f114:	d1bf      	bne.n	801f096 <_puts_r+0x42>
 801f116:	e7df      	b.n	801f0d8 <_puts_r+0x84>
 801f118:	6823      	ldr	r3, [r4, #0]
 801f11a:	250a      	movs	r5, #10
 801f11c:	1c5a      	adds	r2, r3, #1
 801f11e:	6022      	str	r2, [r4, #0]
 801f120:	701d      	strb	r5, [r3, #0]
 801f122:	e7db      	b.n	801f0dc <_puts_r+0x88>
 801f124:	08027634 	.word	0x08027634
 801f128:	08027654 	.word	0x08027654
 801f12c:	08027614 	.word	0x08027614

0801f130 <puts>:
 801f130:	4b02      	ldr	r3, [pc, #8]	; (801f13c <puts+0xc>)
 801f132:	4601      	mov	r1, r0
 801f134:	6818      	ldr	r0, [r3, #0]
 801f136:	f7ff bf8d 	b.w	801f054 <_puts_r>
 801f13a:	bf00      	nop
 801f13c:	24003444 	.word	0x24003444

0801f140 <rand>:
 801f140:	4b17      	ldr	r3, [pc, #92]	; (801f1a0 <rand+0x60>)
 801f142:	b510      	push	{r4, lr}
 801f144:	681c      	ldr	r4, [r3, #0]
 801f146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f148:	b9b3      	cbnz	r3, 801f178 <rand+0x38>
 801f14a:	2018      	movs	r0, #24
 801f14c:	f7ff f834 	bl	801e1b8 <malloc>
 801f150:	63a0      	str	r0, [r4, #56]	; 0x38
 801f152:	b928      	cbnz	r0, 801f160 <rand+0x20>
 801f154:	4602      	mov	r2, r0
 801f156:	4b13      	ldr	r3, [pc, #76]	; (801f1a4 <rand+0x64>)
 801f158:	4813      	ldr	r0, [pc, #76]	; (801f1a8 <rand+0x68>)
 801f15a:	214e      	movs	r1, #78	; 0x4e
 801f15c:	f000 ffb6 	bl	80200cc <__assert_func>
 801f160:	4a12      	ldr	r2, [pc, #72]	; (801f1ac <rand+0x6c>)
 801f162:	4b13      	ldr	r3, [pc, #76]	; (801f1b0 <rand+0x70>)
 801f164:	e9c0 2300 	strd	r2, r3, [r0]
 801f168:	4b12      	ldr	r3, [pc, #72]	; (801f1b4 <rand+0x74>)
 801f16a:	6083      	str	r3, [r0, #8]
 801f16c:	230b      	movs	r3, #11
 801f16e:	8183      	strh	r3, [r0, #12]
 801f170:	2201      	movs	r2, #1
 801f172:	2300      	movs	r3, #0
 801f174:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f178:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f17a:	480f      	ldr	r0, [pc, #60]	; (801f1b8 <rand+0x78>)
 801f17c:	690a      	ldr	r2, [r1, #16]
 801f17e:	694b      	ldr	r3, [r1, #20]
 801f180:	4c0e      	ldr	r4, [pc, #56]	; (801f1bc <rand+0x7c>)
 801f182:	4350      	muls	r0, r2
 801f184:	fb04 0003 	mla	r0, r4, r3, r0
 801f188:	fba2 3404 	umull	r3, r4, r2, r4
 801f18c:	1c5a      	adds	r2, r3, #1
 801f18e:	4404      	add	r4, r0
 801f190:	f144 0000 	adc.w	r0, r4, #0
 801f194:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f198:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f19c:	bd10      	pop	{r4, pc}
 801f19e:	bf00      	nop
 801f1a0:	24003444 	.word	0x24003444
 801f1a4:	0802748d 	.word	0x0802748d
 801f1a8:	080274a4 	.word	0x080274a4
 801f1ac:	abcd330e 	.word	0xabcd330e
 801f1b0:	e66d1234 	.word	0xe66d1234
 801f1b4:	0005deec 	.word	0x0005deec
 801f1b8:	5851f42d 	.word	0x5851f42d
 801f1bc:	4c957f2d 	.word	0x4c957f2d

0801f1c0 <_sbrk_r>:
 801f1c0:	b538      	push	{r3, r4, r5, lr}
 801f1c2:	4d06      	ldr	r5, [pc, #24]	; (801f1dc <_sbrk_r+0x1c>)
 801f1c4:	2300      	movs	r3, #0
 801f1c6:	4604      	mov	r4, r0
 801f1c8:	4608      	mov	r0, r1
 801f1ca:	602b      	str	r3, [r5, #0]
 801f1cc:	f7e3 febc 	bl	8002f48 <_sbrk>
 801f1d0:	1c43      	adds	r3, r0, #1
 801f1d2:	d102      	bne.n	801f1da <_sbrk_r+0x1a>
 801f1d4:	682b      	ldr	r3, [r5, #0]
 801f1d6:	b103      	cbz	r3, 801f1da <_sbrk_r+0x1a>
 801f1d8:	6023      	str	r3, [r4, #0]
 801f1da:	bd38      	pop	{r3, r4, r5, pc}
 801f1dc:	2400b240 	.word	0x2400b240

0801f1e0 <nanf>:
 801f1e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f1e8 <nanf+0x8>
 801f1e4:	4770      	bx	lr
 801f1e6:	bf00      	nop
 801f1e8:	7fc00000 	.word	0x7fc00000

0801f1ec <siprintf>:
 801f1ec:	b40e      	push	{r1, r2, r3}
 801f1ee:	b500      	push	{lr}
 801f1f0:	b09c      	sub	sp, #112	; 0x70
 801f1f2:	ab1d      	add	r3, sp, #116	; 0x74
 801f1f4:	9002      	str	r0, [sp, #8]
 801f1f6:	9006      	str	r0, [sp, #24]
 801f1f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f1fc:	4809      	ldr	r0, [pc, #36]	; (801f224 <siprintf+0x38>)
 801f1fe:	9107      	str	r1, [sp, #28]
 801f200:	9104      	str	r1, [sp, #16]
 801f202:	4909      	ldr	r1, [pc, #36]	; (801f228 <siprintf+0x3c>)
 801f204:	f853 2b04 	ldr.w	r2, [r3], #4
 801f208:	9105      	str	r1, [sp, #20]
 801f20a:	6800      	ldr	r0, [r0, #0]
 801f20c:	9301      	str	r3, [sp, #4]
 801f20e:	a902      	add	r1, sp, #8
 801f210:	f003 f876 	bl	8022300 <_svfiprintf_r>
 801f214:	9b02      	ldr	r3, [sp, #8]
 801f216:	2200      	movs	r2, #0
 801f218:	701a      	strb	r2, [r3, #0]
 801f21a:	b01c      	add	sp, #112	; 0x70
 801f21c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f220:	b003      	add	sp, #12
 801f222:	4770      	bx	lr
 801f224:	24003444 	.word	0x24003444
 801f228:	ffff0208 	.word	0xffff0208

0801f22c <strncmp>:
 801f22c:	b510      	push	{r4, lr}
 801f22e:	b16a      	cbz	r2, 801f24c <strncmp+0x20>
 801f230:	3901      	subs	r1, #1
 801f232:	1884      	adds	r4, r0, r2
 801f234:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f238:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f23c:	4293      	cmp	r3, r2
 801f23e:	d103      	bne.n	801f248 <strncmp+0x1c>
 801f240:	42a0      	cmp	r0, r4
 801f242:	d001      	beq.n	801f248 <strncmp+0x1c>
 801f244:	2b00      	cmp	r3, #0
 801f246:	d1f5      	bne.n	801f234 <strncmp+0x8>
 801f248:	1a98      	subs	r0, r3, r2
 801f24a:	bd10      	pop	{r4, pc}
 801f24c:	4610      	mov	r0, r2
 801f24e:	e7fc      	b.n	801f24a <strncmp+0x1e>

0801f250 <sulp>:
 801f250:	b570      	push	{r4, r5, r6, lr}
 801f252:	4604      	mov	r4, r0
 801f254:	460d      	mov	r5, r1
 801f256:	4616      	mov	r6, r2
 801f258:	ec45 4b10 	vmov	d0, r4, r5
 801f25c:	f002 fe96 	bl	8021f8c <__ulp>
 801f260:	b17e      	cbz	r6, 801f282 <sulp+0x32>
 801f262:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f266:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	dd09      	ble.n	801f282 <sulp+0x32>
 801f26e:	051b      	lsls	r3, r3, #20
 801f270:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801f274:	2000      	movs	r0, #0
 801f276:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801f27a:	ec41 0b17 	vmov	d7, r0, r1
 801f27e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f282:	bd70      	pop	{r4, r5, r6, pc}
 801f284:	0000      	movs	r0, r0
	...

0801f288 <_strtod_l>:
 801f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f28c:	ed2d 8b0c 	vpush	{d8-d13}
 801f290:	b09d      	sub	sp, #116	; 0x74
 801f292:	461f      	mov	r7, r3
 801f294:	2300      	movs	r3, #0
 801f296:	9318      	str	r3, [sp, #96]	; 0x60
 801f298:	4ba6      	ldr	r3, [pc, #664]	; (801f534 <_strtod_l+0x2ac>)
 801f29a:	9213      	str	r2, [sp, #76]	; 0x4c
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	9308      	str	r3, [sp, #32]
 801f2a0:	4604      	mov	r4, r0
 801f2a2:	4618      	mov	r0, r3
 801f2a4:	468a      	mov	sl, r1
 801f2a6:	f7e1 f81b 	bl	80002e0 <strlen>
 801f2aa:	f04f 0800 	mov.w	r8, #0
 801f2ae:	4605      	mov	r5, r0
 801f2b0:	f04f 0900 	mov.w	r9, #0
 801f2b4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801f2b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f2ba:	781a      	ldrb	r2, [r3, #0]
 801f2bc:	2a2b      	cmp	r2, #43	; 0x2b
 801f2be:	d04d      	beq.n	801f35c <_strtod_l+0xd4>
 801f2c0:	d83a      	bhi.n	801f338 <_strtod_l+0xb0>
 801f2c2:	2a0d      	cmp	r2, #13
 801f2c4:	d833      	bhi.n	801f32e <_strtod_l+0xa6>
 801f2c6:	2a08      	cmp	r2, #8
 801f2c8:	d833      	bhi.n	801f332 <_strtod_l+0xaa>
 801f2ca:	2a00      	cmp	r2, #0
 801f2cc:	d03d      	beq.n	801f34a <_strtod_l+0xc2>
 801f2ce:	2300      	movs	r3, #0
 801f2d0:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801f2d4:	7833      	ldrb	r3, [r6, #0]
 801f2d6:	2b30      	cmp	r3, #48	; 0x30
 801f2d8:	f040 80b6 	bne.w	801f448 <_strtod_l+0x1c0>
 801f2dc:	7873      	ldrb	r3, [r6, #1]
 801f2de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f2e2:	2b58      	cmp	r3, #88	; 0x58
 801f2e4:	d16d      	bne.n	801f3c2 <_strtod_l+0x13a>
 801f2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f2e8:	9301      	str	r3, [sp, #4]
 801f2ea:	ab18      	add	r3, sp, #96	; 0x60
 801f2ec:	9702      	str	r7, [sp, #8]
 801f2ee:	9300      	str	r3, [sp, #0]
 801f2f0:	4a91      	ldr	r2, [pc, #580]	; (801f538 <_strtod_l+0x2b0>)
 801f2f2:	ab19      	add	r3, sp, #100	; 0x64
 801f2f4:	a917      	add	r1, sp, #92	; 0x5c
 801f2f6:	4620      	mov	r0, r4
 801f2f8:	f001 ff4a 	bl	8021190 <__gethex>
 801f2fc:	f010 0507 	ands.w	r5, r0, #7
 801f300:	4607      	mov	r7, r0
 801f302:	d005      	beq.n	801f310 <_strtod_l+0x88>
 801f304:	2d06      	cmp	r5, #6
 801f306:	d12b      	bne.n	801f360 <_strtod_l+0xd8>
 801f308:	3601      	adds	r6, #1
 801f30a:	2300      	movs	r3, #0
 801f30c:	9617      	str	r6, [sp, #92]	; 0x5c
 801f30e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f312:	2b00      	cmp	r3, #0
 801f314:	f040 856e 	bne.w	801fdf4 <_strtod_l+0xb6c>
 801f318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f31a:	b1e3      	cbz	r3, 801f356 <_strtod_l+0xce>
 801f31c:	ec49 8b17 	vmov	d7, r8, r9
 801f320:	eeb1 0b47 	vneg.f64	d0, d7
 801f324:	b01d      	add	sp, #116	; 0x74
 801f326:	ecbd 8b0c 	vpop	{d8-d13}
 801f32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f32e:	2a20      	cmp	r2, #32
 801f330:	d1cd      	bne.n	801f2ce <_strtod_l+0x46>
 801f332:	3301      	adds	r3, #1
 801f334:	9317      	str	r3, [sp, #92]	; 0x5c
 801f336:	e7bf      	b.n	801f2b8 <_strtod_l+0x30>
 801f338:	2a2d      	cmp	r2, #45	; 0x2d
 801f33a:	d1c8      	bne.n	801f2ce <_strtod_l+0x46>
 801f33c:	2201      	movs	r2, #1
 801f33e:	920b      	str	r2, [sp, #44]	; 0x2c
 801f340:	1c5a      	adds	r2, r3, #1
 801f342:	9217      	str	r2, [sp, #92]	; 0x5c
 801f344:	785b      	ldrb	r3, [r3, #1]
 801f346:	2b00      	cmp	r3, #0
 801f348:	d1c3      	bne.n	801f2d2 <_strtod_l+0x4a>
 801f34a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f34c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801f350:	2b00      	cmp	r3, #0
 801f352:	f040 854d 	bne.w	801fdf0 <_strtod_l+0xb68>
 801f356:	ec49 8b10 	vmov	d0, r8, r9
 801f35a:	e7e3      	b.n	801f324 <_strtod_l+0x9c>
 801f35c:	2200      	movs	r2, #0
 801f35e:	e7ee      	b.n	801f33e <_strtod_l+0xb6>
 801f360:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f362:	b13a      	cbz	r2, 801f374 <_strtod_l+0xec>
 801f364:	2135      	movs	r1, #53	; 0x35
 801f366:	a81a      	add	r0, sp, #104	; 0x68
 801f368:	f002 ff1c 	bl	80221a4 <__copybits>
 801f36c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f36e:	4620      	mov	r0, r4
 801f370:	f002 fae0 	bl	8021934 <_Bfree>
 801f374:	3d01      	subs	r5, #1
 801f376:	2d05      	cmp	r5, #5
 801f378:	d807      	bhi.n	801f38a <_strtod_l+0x102>
 801f37a:	e8df f005 	tbb	[pc, r5]
 801f37e:	0b0e      	.short	0x0b0e
 801f380:	030e1d18 	.word	0x030e1d18
 801f384:	f04f 0900 	mov.w	r9, #0
 801f388:	46c8      	mov	r8, r9
 801f38a:	073b      	lsls	r3, r7, #28
 801f38c:	d5c0      	bpl.n	801f310 <_strtod_l+0x88>
 801f38e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801f392:	e7bd      	b.n	801f310 <_strtod_l+0x88>
 801f394:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801f398:	e7f7      	b.n	801f38a <_strtod_l+0x102>
 801f39a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801f39e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f3a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f3a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f3a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801f3ac:	e7ed      	b.n	801f38a <_strtod_l+0x102>
 801f3ae:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801f53c <_strtod_l+0x2b4>
 801f3b2:	f04f 0800 	mov.w	r8, #0
 801f3b6:	e7e8      	b.n	801f38a <_strtod_l+0x102>
 801f3b8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801f3bc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801f3c0:	e7e3      	b.n	801f38a <_strtod_l+0x102>
 801f3c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f3c4:	1c5a      	adds	r2, r3, #1
 801f3c6:	9217      	str	r2, [sp, #92]	; 0x5c
 801f3c8:	785b      	ldrb	r3, [r3, #1]
 801f3ca:	2b30      	cmp	r3, #48	; 0x30
 801f3cc:	d0f9      	beq.n	801f3c2 <_strtod_l+0x13a>
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d09e      	beq.n	801f310 <_strtod_l+0x88>
 801f3d2:	2301      	movs	r3, #1
 801f3d4:	9306      	str	r3, [sp, #24]
 801f3d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f3d8:	930c      	str	r3, [sp, #48]	; 0x30
 801f3da:	2300      	movs	r3, #0
 801f3dc:	9304      	str	r3, [sp, #16]
 801f3de:	930a      	str	r3, [sp, #40]	; 0x28
 801f3e0:	461e      	mov	r6, r3
 801f3e2:	220a      	movs	r2, #10
 801f3e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f3e6:	f890 b000 	ldrb.w	fp, [r0]
 801f3ea:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801f3ee:	b2d9      	uxtb	r1, r3
 801f3f0:	2909      	cmp	r1, #9
 801f3f2:	d92b      	bls.n	801f44c <_strtod_l+0x1c4>
 801f3f4:	9908      	ldr	r1, [sp, #32]
 801f3f6:	462a      	mov	r2, r5
 801f3f8:	f7ff ff18 	bl	801f22c <strncmp>
 801f3fc:	2800      	cmp	r0, #0
 801f3fe:	d035      	beq.n	801f46c <_strtod_l+0x1e4>
 801f400:	2000      	movs	r0, #0
 801f402:	465a      	mov	r2, fp
 801f404:	4633      	mov	r3, r6
 801f406:	4683      	mov	fp, r0
 801f408:	4601      	mov	r1, r0
 801f40a:	2a65      	cmp	r2, #101	; 0x65
 801f40c:	d001      	beq.n	801f412 <_strtod_l+0x18a>
 801f40e:	2a45      	cmp	r2, #69	; 0x45
 801f410:	d118      	bne.n	801f444 <_strtod_l+0x1bc>
 801f412:	b91b      	cbnz	r3, 801f41c <_strtod_l+0x194>
 801f414:	9b06      	ldr	r3, [sp, #24]
 801f416:	4303      	orrs	r3, r0
 801f418:	d097      	beq.n	801f34a <_strtod_l+0xc2>
 801f41a:	2300      	movs	r3, #0
 801f41c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801f420:	f10a 0201 	add.w	r2, sl, #1
 801f424:	9217      	str	r2, [sp, #92]	; 0x5c
 801f426:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801f42a:	2a2b      	cmp	r2, #43	; 0x2b
 801f42c:	d077      	beq.n	801f51e <_strtod_l+0x296>
 801f42e:	2a2d      	cmp	r2, #45	; 0x2d
 801f430:	d07d      	beq.n	801f52e <_strtod_l+0x2a6>
 801f432:	f04f 0e00 	mov.w	lr, #0
 801f436:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801f43a:	2d09      	cmp	r5, #9
 801f43c:	f240 8084 	bls.w	801f548 <_strtod_l+0x2c0>
 801f440:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801f444:	2500      	movs	r5, #0
 801f446:	e09f      	b.n	801f588 <_strtod_l+0x300>
 801f448:	2300      	movs	r3, #0
 801f44a:	e7c3      	b.n	801f3d4 <_strtod_l+0x14c>
 801f44c:	2e08      	cmp	r6, #8
 801f44e:	bfd5      	itete	le
 801f450:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801f452:	9904      	ldrgt	r1, [sp, #16]
 801f454:	fb02 3301 	mlale	r3, r2, r1, r3
 801f458:	fb02 3301 	mlagt	r3, r2, r1, r3
 801f45c:	f100 0001 	add.w	r0, r0, #1
 801f460:	bfd4      	ite	le
 801f462:	930a      	strle	r3, [sp, #40]	; 0x28
 801f464:	9304      	strgt	r3, [sp, #16]
 801f466:	3601      	adds	r6, #1
 801f468:	9017      	str	r0, [sp, #92]	; 0x5c
 801f46a:	e7bb      	b.n	801f3e4 <_strtod_l+0x15c>
 801f46c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f46e:	195a      	adds	r2, r3, r5
 801f470:	9217      	str	r2, [sp, #92]	; 0x5c
 801f472:	5d5a      	ldrb	r2, [r3, r5]
 801f474:	b3ae      	cbz	r6, 801f4e2 <_strtod_l+0x25a>
 801f476:	4683      	mov	fp, r0
 801f478:	4633      	mov	r3, r6
 801f47a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801f47e:	2909      	cmp	r1, #9
 801f480:	d912      	bls.n	801f4a8 <_strtod_l+0x220>
 801f482:	2101      	movs	r1, #1
 801f484:	e7c1      	b.n	801f40a <_strtod_l+0x182>
 801f486:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f488:	1c5a      	adds	r2, r3, #1
 801f48a:	9217      	str	r2, [sp, #92]	; 0x5c
 801f48c:	785a      	ldrb	r2, [r3, #1]
 801f48e:	3001      	adds	r0, #1
 801f490:	2a30      	cmp	r2, #48	; 0x30
 801f492:	d0f8      	beq.n	801f486 <_strtod_l+0x1fe>
 801f494:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801f498:	2b08      	cmp	r3, #8
 801f49a:	f200 84b0 	bhi.w	801fdfe <_strtod_l+0xb76>
 801f49e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f4a0:	930c      	str	r3, [sp, #48]	; 0x30
 801f4a2:	4683      	mov	fp, r0
 801f4a4:	2000      	movs	r0, #0
 801f4a6:	4603      	mov	r3, r0
 801f4a8:	3a30      	subs	r2, #48	; 0x30
 801f4aa:	f100 0101 	add.w	r1, r0, #1
 801f4ae:	d012      	beq.n	801f4d6 <_strtod_l+0x24e>
 801f4b0:	448b      	add	fp, r1
 801f4b2:	eb00 0c03 	add.w	ip, r0, r3
 801f4b6:	4619      	mov	r1, r3
 801f4b8:	250a      	movs	r5, #10
 801f4ba:	4561      	cmp	r1, ip
 801f4bc:	d113      	bne.n	801f4e6 <_strtod_l+0x25e>
 801f4be:	1819      	adds	r1, r3, r0
 801f4c0:	2908      	cmp	r1, #8
 801f4c2:	f103 0301 	add.w	r3, r3, #1
 801f4c6:	4403      	add	r3, r0
 801f4c8:	dc1d      	bgt.n	801f506 <_strtod_l+0x27e>
 801f4ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f4cc:	210a      	movs	r1, #10
 801f4ce:	fb01 2200 	mla	r2, r1, r0, r2
 801f4d2:	920a      	str	r2, [sp, #40]	; 0x28
 801f4d4:	2100      	movs	r1, #0
 801f4d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f4d8:	1c50      	adds	r0, r2, #1
 801f4da:	9017      	str	r0, [sp, #92]	; 0x5c
 801f4dc:	7852      	ldrb	r2, [r2, #1]
 801f4de:	4608      	mov	r0, r1
 801f4e0:	e7cb      	b.n	801f47a <_strtod_l+0x1f2>
 801f4e2:	4630      	mov	r0, r6
 801f4e4:	e7d4      	b.n	801f490 <_strtod_l+0x208>
 801f4e6:	2908      	cmp	r1, #8
 801f4e8:	dc04      	bgt.n	801f4f4 <_strtod_l+0x26c>
 801f4ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f4ec:	436f      	muls	r7, r5
 801f4ee:	970a      	str	r7, [sp, #40]	; 0x28
 801f4f0:	3101      	adds	r1, #1
 801f4f2:	e7e2      	b.n	801f4ba <_strtod_l+0x232>
 801f4f4:	f101 0e01 	add.w	lr, r1, #1
 801f4f8:	f1be 0f10 	cmp.w	lr, #16
 801f4fc:	bfde      	ittt	le
 801f4fe:	9f04      	ldrle	r7, [sp, #16]
 801f500:	436f      	mulle	r7, r5
 801f502:	9704      	strle	r7, [sp, #16]
 801f504:	e7f4      	b.n	801f4f0 <_strtod_l+0x268>
 801f506:	2b10      	cmp	r3, #16
 801f508:	bfdf      	itttt	le
 801f50a:	9804      	ldrle	r0, [sp, #16]
 801f50c:	210a      	movle	r1, #10
 801f50e:	fb01 2200 	mlale	r2, r1, r0, r2
 801f512:	9204      	strle	r2, [sp, #16]
 801f514:	e7de      	b.n	801f4d4 <_strtod_l+0x24c>
 801f516:	f04f 0b00 	mov.w	fp, #0
 801f51a:	2101      	movs	r1, #1
 801f51c:	e77a      	b.n	801f414 <_strtod_l+0x18c>
 801f51e:	f04f 0e00 	mov.w	lr, #0
 801f522:	f10a 0202 	add.w	r2, sl, #2
 801f526:	9217      	str	r2, [sp, #92]	; 0x5c
 801f528:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801f52c:	e783      	b.n	801f436 <_strtod_l+0x1ae>
 801f52e:	f04f 0e01 	mov.w	lr, #1
 801f532:	e7f6      	b.n	801f522 <_strtod_l+0x29a>
 801f534:	080276e0 	.word	0x080276e0
 801f538:	08027504 	.word	0x08027504
 801f53c:	7ff00000 	.word	0x7ff00000
 801f540:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f542:	1c55      	adds	r5, r2, #1
 801f544:	9517      	str	r5, [sp, #92]	; 0x5c
 801f546:	7852      	ldrb	r2, [r2, #1]
 801f548:	2a30      	cmp	r2, #48	; 0x30
 801f54a:	d0f9      	beq.n	801f540 <_strtod_l+0x2b8>
 801f54c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801f550:	2d08      	cmp	r5, #8
 801f552:	f63f af77 	bhi.w	801f444 <_strtod_l+0x1bc>
 801f556:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801f55a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f55c:	9208      	str	r2, [sp, #32]
 801f55e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f560:	1c55      	adds	r5, r2, #1
 801f562:	9517      	str	r5, [sp, #92]	; 0x5c
 801f564:	7852      	ldrb	r2, [r2, #1]
 801f566:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801f56a:	2f09      	cmp	r7, #9
 801f56c:	d937      	bls.n	801f5de <_strtod_l+0x356>
 801f56e:	9f08      	ldr	r7, [sp, #32]
 801f570:	1bed      	subs	r5, r5, r7
 801f572:	2d08      	cmp	r5, #8
 801f574:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801f578:	dc02      	bgt.n	801f580 <_strtod_l+0x2f8>
 801f57a:	4565      	cmp	r5, ip
 801f57c:	bfa8      	it	ge
 801f57e:	4665      	movge	r5, ip
 801f580:	f1be 0f00 	cmp.w	lr, #0
 801f584:	d000      	beq.n	801f588 <_strtod_l+0x300>
 801f586:	426d      	negs	r5, r5
 801f588:	2b00      	cmp	r3, #0
 801f58a:	d14f      	bne.n	801f62c <_strtod_l+0x3a4>
 801f58c:	9b06      	ldr	r3, [sp, #24]
 801f58e:	4303      	orrs	r3, r0
 801f590:	f47f aebe 	bne.w	801f310 <_strtod_l+0x88>
 801f594:	2900      	cmp	r1, #0
 801f596:	f47f aed8 	bne.w	801f34a <_strtod_l+0xc2>
 801f59a:	2a69      	cmp	r2, #105	; 0x69
 801f59c:	d027      	beq.n	801f5ee <_strtod_l+0x366>
 801f59e:	dc24      	bgt.n	801f5ea <_strtod_l+0x362>
 801f5a0:	2a49      	cmp	r2, #73	; 0x49
 801f5a2:	d024      	beq.n	801f5ee <_strtod_l+0x366>
 801f5a4:	2a4e      	cmp	r2, #78	; 0x4e
 801f5a6:	f47f aed0 	bne.w	801f34a <_strtod_l+0xc2>
 801f5aa:	499b      	ldr	r1, [pc, #620]	; (801f818 <_strtod_l+0x590>)
 801f5ac:	a817      	add	r0, sp, #92	; 0x5c
 801f5ae:	f002 f847 	bl	8021640 <__match>
 801f5b2:	2800      	cmp	r0, #0
 801f5b4:	f43f aec9 	beq.w	801f34a <_strtod_l+0xc2>
 801f5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f5ba:	781b      	ldrb	r3, [r3, #0]
 801f5bc:	2b28      	cmp	r3, #40	; 0x28
 801f5be:	d12d      	bne.n	801f61c <_strtod_l+0x394>
 801f5c0:	4996      	ldr	r1, [pc, #600]	; (801f81c <_strtod_l+0x594>)
 801f5c2:	aa1a      	add	r2, sp, #104	; 0x68
 801f5c4:	a817      	add	r0, sp, #92	; 0x5c
 801f5c6:	f002 f84f 	bl	8021668 <__hexnan>
 801f5ca:	2805      	cmp	r0, #5
 801f5cc:	d126      	bne.n	801f61c <_strtod_l+0x394>
 801f5ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f5d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801f5d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801f5d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801f5dc:	e698      	b.n	801f310 <_strtod_l+0x88>
 801f5de:	250a      	movs	r5, #10
 801f5e0:	fb05 250c 	mla	r5, r5, ip, r2
 801f5e4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801f5e8:	e7b9      	b.n	801f55e <_strtod_l+0x2d6>
 801f5ea:	2a6e      	cmp	r2, #110	; 0x6e
 801f5ec:	e7db      	b.n	801f5a6 <_strtod_l+0x31e>
 801f5ee:	498c      	ldr	r1, [pc, #560]	; (801f820 <_strtod_l+0x598>)
 801f5f0:	a817      	add	r0, sp, #92	; 0x5c
 801f5f2:	f002 f825 	bl	8021640 <__match>
 801f5f6:	2800      	cmp	r0, #0
 801f5f8:	f43f aea7 	beq.w	801f34a <_strtod_l+0xc2>
 801f5fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f5fe:	4989      	ldr	r1, [pc, #548]	; (801f824 <_strtod_l+0x59c>)
 801f600:	3b01      	subs	r3, #1
 801f602:	a817      	add	r0, sp, #92	; 0x5c
 801f604:	9317      	str	r3, [sp, #92]	; 0x5c
 801f606:	f002 f81b 	bl	8021640 <__match>
 801f60a:	b910      	cbnz	r0, 801f612 <_strtod_l+0x38a>
 801f60c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f60e:	3301      	adds	r3, #1
 801f610:	9317      	str	r3, [sp, #92]	; 0x5c
 801f612:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801f838 <_strtod_l+0x5b0>
 801f616:	f04f 0800 	mov.w	r8, #0
 801f61a:	e679      	b.n	801f310 <_strtod_l+0x88>
 801f61c:	4882      	ldr	r0, [pc, #520]	; (801f828 <_strtod_l+0x5a0>)
 801f61e:	f003 f8cb 	bl	80227b8 <nan>
 801f622:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f626:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801f62a:	e671      	b.n	801f310 <_strtod_l+0x88>
 801f62c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801f630:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801f634:	eba5 020b 	sub.w	r2, r5, fp
 801f638:	2e00      	cmp	r6, #0
 801f63a:	bf08      	it	eq
 801f63c:	461e      	moveq	r6, r3
 801f63e:	2b10      	cmp	r3, #16
 801f640:	ed8d 7b08 	vstr	d7, [sp, #32]
 801f644:	9206      	str	r2, [sp, #24]
 801f646:	461a      	mov	r2, r3
 801f648:	bfa8      	it	ge
 801f64a:	2210      	movge	r2, #16
 801f64c:	2b09      	cmp	r3, #9
 801f64e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801f652:	dd0e      	ble.n	801f672 <_strtod_l+0x3ea>
 801f654:	4975      	ldr	r1, [pc, #468]	; (801f82c <_strtod_l+0x5a4>)
 801f656:	eddd 7a04 	vldr	s15, [sp, #16]
 801f65a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801f65e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801f662:	ed9d 5b08 	vldr	d5, [sp, #32]
 801f666:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801f66a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f66e:	ec59 8b17 	vmov	r8, r9, d7
 801f672:	2b0f      	cmp	r3, #15
 801f674:	dc37      	bgt.n	801f6e6 <_strtod_l+0x45e>
 801f676:	9906      	ldr	r1, [sp, #24]
 801f678:	2900      	cmp	r1, #0
 801f67a:	f43f ae49 	beq.w	801f310 <_strtod_l+0x88>
 801f67e:	dd23      	ble.n	801f6c8 <_strtod_l+0x440>
 801f680:	2916      	cmp	r1, #22
 801f682:	dc0b      	bgt.n	801f69c <_strtod_l+0x414>
 801f684:	4b69      	ldr	r3, [pc, #420]	; (801f82c <_strtod_l+0x5a4>)
 801f686:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801f68a:	ed93 7b00 	vldr	d7, [r3]
 801f68e:	ec49 8b16 	vmov	d6, r8, r9
 801f692:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f696:	ec59 8b17 	vmov	r8, r9, d7
 801f69a:	e639      	b.n	801f310 <_strtod_l+0x88>
 801f69c:	9806      	ldr	r0, [sp, #24]
 801f69e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801f6a2:	4281      	cmp	r1, r0
 801f6a4:	db1f      	blt.n	801f6e6 <_strtod_l+0x45e>
 801f6a6:	4a61      	ldr	r2, [pc, #388]	; (801f82c <_strtod_l+0x5a4>)
 801f6a8:	f1c3 030f 	rsb	r3, r3, #15
 801f6ac:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801f6b0:	ed91 7b00 	vldr	d7, [r1]
 801f6b4:	ec49 8b16 	vmov	d6, r8, r9
 801f6b8:	1ac3      	subs	r3, r0, r3
 801f6ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801f6be:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f6c2:	ed92 6b00 	vldr	d6, [r2]
 801f6c6:	e7e4      	b.n	801f692 <_strtod_l+0x40a>
 801f6c8:	9906      	ldr	r1, [sp, #24]
 801f6ca:	3116      	adds	r1, #22
 801f6cc:	db0b      	blt.n	801f6e6 <_strtod_l+0x45e>
 801f6ce:	4b57      	ldr	r3, [pc, #348]	; (801f82c <_strtod_l+0x5a4>)
 801f6d0:	ebab 0505 	sub.w	r5, fp, r5
 801f6d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801f6d8:	ed95 7b00 	vldr	d7, [r5]
 801f6dc:	ec49 8b16 	vmov	d6, r8, r9
 801f6e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801f6e4:	e7d7      	b.n	801f696 <_strtod_l+0x40e>
 801f6e6:	9906      	ldr	r1, [sp, #24]
 801f6e8:	1a9a      	subs	r2, r3, r2
 801f6ea:	440a      	add	r2, r1
 801f6ec:	2a00      	cmp	r2, #0
 801f6ee:	dd74      	ble.n	801f7da <_strtod_l+0x552>
 801f6f0:	f012 000f 	ands.w	r0, r2, #15
 801f6f4:	d00a      	beq.n	801f70c <_strtod_l+0x484>
 801f6f6:	494d      	ldr	r1, [pc, #308]	; (801f82c <_strtod_l+0x5a4>)
 801f6f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801f6fc:	ed91 7b00 	vldr	d7, [r1]
 801f700:	ec49 8b16 	vmov	d6, r8, r9
 801f704:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f708:	ec59 8b17 	vmov	r8, r9, d7
 801f70c:	f032 020f 	bics.w	r2, r2, #15
 801f710:	d04f      	beq.n	801f7b2 <_strtod_l+0x52a>
 801f712:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801f716:	dd22      	ble.n	801f75e <_strtod_l+0x4d6>
 801f718:	2500      	movs	r5, #0
 801f71a:	462e      	mov	r6, r5
 801f71c:	950a      	str	r5, [sp, #40]	; 0x28
 801f71e:	462f      	mov	r7, r5
 801f720:	2322      	movs	r3, #34	; 0x22
 801f722:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801f838 <_strtod_l+0x5b0>
 801f726:	6023      	str	r3, [r4, #0]
 801f728:	f04f 0800 	mov.w	r8, #0
 801f72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f72e:	2b00      	cmp	r3, #0
 801f730:	f43f adee 	beq.w	801f310 <_strtod_l+0x88>
 801f734:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f736:	4620      	mov	r0, r4
 801f738:	f002 f8fc 	bl	8021934 <_Bfree>
 801f73c:	4639      	mov	r1, r7
 801f73e:	4620      	mov	r0, r4
 801f740:	f002 f8f8 	bl	8021934 <_Bfree>
 801f744:	4631      	mov	r1, r6
 801f746:	4620      	mov	r0, r4
 801f748:	f002 f8f4 	bl	8021934 <_Bfree>
 801f74c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f74e:	4620      	mov	r0, r4
 801f750:	f002 f8f0 	bl	8021934 <_Bfree>
 801f754:	4629      	mov	r1, r5
 801f756:	4620      	mov	r0, r4
 801f758:	f002 f8ec 	bl	8021934 <_Bfree>
 801f75c:	e5d8      	b.n	801f310 <_strtod_l+0x88>
 801f75e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801f762:	2000      	movs	r0, #0
 801f764:	4f32      	ldr	r7, [pc, #200]	; (801f830 <_strtod_l+0x5a8>)
 801f766:	1112      	asrs	r2, r2, #4
 801f768:	4601      	mov	r1, r0
 801f76a:	2a01      	cmp	r2, #1
 801f76c:	dc24      	bgt.n	801f7b8 <_strtod_l+0x530>
 801f76e:	b108      	cbz	r0, 801f774 <_strtod_l+0x4ec>
 801f770:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801f774:	4a2e      	ldr	r2, [pc, #184]	; (801f830 <_strtod_l+0x5a8>)
 801f776:	482f      	ldr	r0, [pc, #188]	; (801f834 <_strtod_l+0x5ac>)
 801f778:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801f77c:	ed91 7b00 	vldr	d7, [r1]
 801f780:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801f784:	ec49 8b16 	vmov	d6, r8, r9
 801f788:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f78c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f790:	9905      	ldr	r1, [sp, #20]
 801f792:	4a29      	ldr	r2, [pc, #164]	; (801f838 <_strtod_l+0x5b0>)
 801f794:	400a      	ands	r2, r1
 801f796:	4282      	cmp	r2, r0
 801f798:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801f79c:	d8bc      	bhi.n	801f718 <_strtod_l+0x490>
 801f79e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801f7a2:	4282      	cmp	r2, r0
 801f7a4:	bf86      	itte	hi
 801f7a6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801f83c <_strtod_l+0x5b4>
 801f7aa:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801f7ae:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801f7b2:	2200      	movs	r2, #0
 801f7b4:	9204      	str	r2, [sp, #16]
 801f7b6:	e07f      	b.n	801f8b8 <_strtod_l+0x630>
 801f7b8:	f012 0f01 	tst.w	r2, #1
 801f7bc:	d00a      	beq.n	801f7d4 <_strtod_l+0x54c>
 801f7be:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801f7c2:	ed90 7b00 	vldr	d7, [r0]
 801f7c6:	ed9d 6b04 	vldr	d6, [sp, #16]
 801f7ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f7ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f7d2:	2001      	movs	r0, #1
 801f7d4:	3101      	adds	r1, #1
 801f7d6:	1052      	asrs	r2, r2, #1
 801f7d8:	e7c7      	b.n	801f76a <_strtod_l+0x4e2>
 801f7da:	d0ea      	beq.n	801f7b2 <_strtod_l+0x52a>
 801f7dc:	4252      	negs	r2, r2
 801f7de:	f012 000f 	ands.w	r0, r2, #15
 801f7e2:	d00a      	beq.n	801f7fa <_strtod_l+0x572>
 801f7e4:	4911      	ldr	r1, [pc, #68]	; (801f82c <_strtod_l+0x5a4>)
 801f7e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801f7ea:	ed91 7b00 	vldr	d7, [r1]
 801f7ee:	ec49 8b16 	vmov	d6, r8, r9
 801f7f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801f7f6:	ec59 8b17 	vmov	r8, r9, d7
 801f7fa:	1112      	asrs	r2, r2, #4
 801f7fc:	d0d9      	beq.n	801f7b2 <_strtod_l+0x52a>
 801f7fe:	2a1f      	cmp	r2, #31
 801f800:	dd1e      	ble.n	801f840 <_strtod_l+0x5b8>
 801f802:	2500      	movs	r5, #0
 801f804:	462e      	mov	r6, r5
 801f806:	950a      	str	r5, [sp, #40]	; 0x28
 801f808:	462f      	mov	r7, r5
 801f80a:	2322      	movs	r3, #34	; 0x22
 801f80c:	f04f 0800 	mov.w	r8, #0
 801f810:	f04f 0900 	mov.w	r9, #0
 801f814:	6023      	str	r3, [r4, #0]
 801f816:	e789      	b.n	801f72c <_strtod_l+0x4a4>
 801f818:	08027461 	.word	0x08027461
 801f81c:	08027518 	.word	0x08027518
 801f820:	08027459 	.word	0x08027459
 801f824:	08027597 	.word	0x08027597
 801f828:	08027593 	.word	0x08027593
 801f82c:	08027780 	.word	0x08027780
 801f830:	08027758 	.word	0x08027758
 801f834:	7ca00000 	.word	0x7ca00000
 801f838:	7ff00000 	.word	0x7ff00000
 801f83c:	7fefffff 	.word	0x7fefffff
 801f840:	f012 0110 	ands.w	r1, r2, #16
 801f844:	bf18      	it	ne
 801f846:	216a      	movne	r1, #106	; 0x6a
 801f848:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801f84c:	9104      	str	r1, [sp, #16]
 801f84e:	49c0      	ldr	r1, [pc, #768]	; (801fb50 <_strtod_l+0x8c8>)
 801f850:	2000      	movs	r0, #0
 801f852:	07d7      	lsls	r7, r2, #31
 801f854:	d508      	bpl.n	801f868 <_strtod_l+0x5e0>
 801f856:	ed9d 6b08 	vldr	d6, [sp, #32]
 801f85a:	ed91 7b00 	vldr	d7, [r1]
 801f85e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f862:	ed8d 7b08 	vstr	d7, [sp, #32]
 801f866:	2001      	movs	r0, #1
 801f868:	1052      	asrs	r2, r2, #1
 801f86a:	f101 0108 	add.w	r1, r1, #8
 801f86e:	d1f0      	bne.n	801f852 <_strtod_l+0x5ca>
 801f870:	b108      	cbz	r0, 801f876 <_strtod_l+0x5ee>
 801f872:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801f876:	9a04      	ldr	r2, [sp, #16]
 801f878:	b1ba      	cbz	r2, 801f8aa <_strtod_l+0x622>
 801f87a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801f87e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801f882:	2a00      	cmp	r2, #0
 801f884:	4649      	mov	r1, r9
 801f886:	dd10      	ble.n	801f8aa <_strtod_l+0x622>
 801f888:	2a1f      	cmp	r2, #31
 801f88a:	f340 8132 	ble.w	801faf2 <_strtod_l+0x86a>
 801f88e:	2a34      	cmp	r2, #52	; 0x34
 801f890:	bfde      	ittt	le
 801f892:	3a20      	suble	r2, #32
 801f894:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 801f898:	fa00 f202 	lslle.w	r2, r0, r2
 801f89c:	f04f 0800 	mov.w	r8, #0
 801f8a0:	bfcc      	ite	gt
 801f8a2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801f8a6:	ea02 0901 	andle.w	r9, r2, r1
 801f8aa:	ec49 8b17 	vmov	d7, r8, r9
 801f8ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8b6:	d0a4      	beq.n	801f802 <_strtod_l+0x57a>
 801f8b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f8ba:	9200      	str	r2, [sp, #0]
 801f8bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f8be:	4632      	mov	r2, r6
 801f8c0:	4620      	mov	r0, r4
 801f8c2:	f002 f8a3 	bl	8021a0c <__s2b>
 801f8c6:	900a      	str	r0, [sp, #40]	; 0x28
 801f8c8:	2800      	cmp	r0, #0
 801f8ca:	f43f af25 	beq.w	801f718 <_strtod_l+0x490>
 801f8ce:	9b06      	ldr	r3, [sp, #24]
 801f8d0:	ebab 0505 	sub.w	r5, fp, r5
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	bfb4      	ite	lt
 801f8d8:	462b      	movlt	r3, r5
 801f8da:	2300      	movge	r3, #0
 801f8dc:	930c      	str	r3, [sp, #48]	; 0x30
 801f8de:	9b06      	ldr	r3, [sp, #24]
 801f8e0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801fb38 <_strtod_l+0x8b0>
 801f8e4:	ed9f ab96 	vldr	d10, [pc, #600]	; 801fb40 <_strtod_l+0x8b8>
 801f8e8:	ed9f bb97 	vldr	d11, [pc, #604]	; 801fb48 <_strtod_l+0x8c0>
 801f8ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8f0:	2500      	movs	r5, #0
 801f8f2:	9312      	str	r3, [sp, #72]	; 0x48
 801f8f4:	462e      	mov	r6, r5
 801f8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8f8:	4620      	mov	r0, r4
 801f8fa:	6859      	ldr	r1, [r3, #4]
 801f8fc:	f001 ffda 	bl	80218b4 <_Balloc>
 801f900:	4607      	mov	r7, r0
 801f902:	2800      	cmp	r0, #0
 801f904:	f43f af0c 	beq.w	801f720 <_strtod_l+0x498>
 801f908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f90a:	691a      	ldr	r2, [r3, #16]
 801f90c:	3202      	adds	r2, #2
 801f90e:	f103 010c 	add.w	r1, r3, #12
 801f912:	0092      	lsls	r2, r2, #2
 801f914:	300c      	adds	r0, #12
 801f916:	f7fe fc65 	bl	801e1e4 <memcpy>
 801f91a:	ec49 8b10 	vmov	d0, r8, r9
 801f91e:	aa1a      	add	r2, sp, #104	; 0x68
 801f920:	a919      	add	r1, sp, #100	; 0x64
 801f922:	4620      	mov	r0, r4
 801f924:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801f928:	f002 fbac 	bl	8022084 <__d2b>
 801f92c:	9018      	str	r0, [sp, #96]	; 0x60
 801f92e:	2800      	cmp	r0, #0
 801f930:	f43f aef6 	beq.w	801f720 <_strtod_l+0x498>
 801f934:	2101      	movs	r1, #1
 801f936:	4620      	mov	r0, r4
 801f938:	f002 f902 	bl	8021b40 <__i2b>
 801f93c:	4606      	mov	r6, r0
 801f93e:	2800      	cmp	r0, #0
 801f940:	f43f aeee 	beq.w	801f720 <_strtod_l+0x498>
 801f944:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f946:	991a      	ldr	r1, [sp, #104]	; 0x68
 801f948:	2b00      	cmp	r3, #0
 801f94a:	bfab      	itete	ge
 801f94c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801f94e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801f950:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 801f954:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 801f958:	bfac      	ite	ge
 801f95a:	eb03 0b02 	addge.w	fp, r3, r2
 801f95e:	eba2 0a03 	sublt.w	sl, r2, r3
 801f962:	9a04      	ldr	r2, [sp, #16]
 801f964:	1a9b      	subs	r3, r3, r2
 801f966:	440b      	add	r3, r1
 801f968:	4a7a      	ldr	r2, [pc, #488]	; (801fb54 <_strtod_l+0x8cc>)
 801f96a:	3b01      	subs	r3, #1
 801f96c:	4293      	cmp	r3, r2
 801f96e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801f972:	f280 80d1 	bge.w	801fb18 <_strtod_l+0x890>
 801f976:	1ad2      	subs	r2, r2, r3
 801f978:	2a1f      	cmp	r2, #31
 801f97a:	eba1 0102 	sub.w	r1, r1, r2
 801f97e:	f04f 0001 	mov.w	r0, #1
 801f982:	f300 80bd 	bgt.w	801fb00 <_strtod_l+0x878>
 801f986:	fa00 f302 	lsl.w	r3, r0, r2
 801f98a:	930e      	str	r3, [sp, #56]	; 0x38
 801f98c:	2300      	movs	r3, #0
 801f98e:	930d      	str	r3, [sp, #52]	; 0x34
 801f990:	eb0b 0301 	add.w	r3, fp, r1
 801f994:	9a04      	ldr	r2, [sp, #16]
 801f996:	459b      	cmp	fp, r3
 801f998:	448a      	add	sl, r1
 801f99a:	4492      	add	sl, r2
 801f99c:	465a      	mov	r2, fp
 801f99e:	bfa8      	it	ge
 801f9a0:	461a      	movge	r2, r3
 801f9a2:	4552      	cmp	r2, sl
 801f9a4:	bfa8      	it	ge
 801f9a6:	4652      	movge	r2, sl
 801f9a8:	2a00      	cmp	r2, #0
 801f9aa:	bfc2      	ittt	gt
 801f9ac:	1a9b      	subgt	r3, r3, r2
 801f9ae:	ebaa 0a02 	subgt.w	sl, sl, r2
 801f9b2:	ebab 0b02 	subgt.w	fp, fp, r2
 801f9b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f9b8:	2a00      	cmp	r2, #0
 801f9ba:	dd18      	ble.n	801f9ee <_strtod_l+0x766>
 801f9bc:	4631      	mov	r1, r6
 801f9be:	4620      	mov	r0, r4
 801f9c0:	9315      	str	r3, [sp, #84]	; 0x54
 801f9c2:	f002 f979 	bl	8021cb8 <__pow5mult>
 801f9c6:	4606      	mov	r6, r0
 801f9c8:	2800      	cmp	r0, #0
 801f9ca:	f43f aea9 	beq.w	801f720 <_strtod_l+0x498>
 801f9ce:	4601      	mov	r1, r0
 801f9d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f9d2:	4620      	mov	r0, r4
 801f9d4:	f002 f8ca 	bl	8021b6c <__multiply>
 801f9d8:	9014      	str	r0, [sp, #80]	; 0x50
 801f9da:	2800      	cmp	r0, #0
 801f9dc:	f43f aea0 	beq.w	801f720 <_strtod_l+0x498>
 801f9e0:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	f001 ffa6 	bl	8021934 <_Bfree>
 801f9e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f9ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f9ec:	9218      	str	r2, [sp, #96]	; 0x60
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	f300 8097 	bgt.w	801fb22 <_strtod_l+0x89a>
 801f9f4:	9b06      	ldr	r3, [sp, #24]
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	dd08      	ble.n	801fa0c <_strtod_l+0x784>
 801f9fa:	4639      	mov	r1, r7
 801f9fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f9fe:	4620      	mov	r0, r4
 801fa00:	f002 f95a 	bl	8021cb8 <__pow5mult>
 801fa04:	4607      	mov	r7, r0
 801fa06:	2800      	cmp	r0, #0
 801fa08:	f43f ae8a 	beq.w	801f720 <_strtod_l+0x498>
 801fa0c:	f1ba 0f00 	cmp.w	sl, #0
 801fa10:	dd08      	ble.n	801fa24 <_strtod_l+0x79c>
 801fa12:	4639      	mov	r1, r7
 801fa14:	4652      	mov	r2, sl
 801fa16:	4620      	mov	r0, r4
 801fa18:	f002 f9a8 	bl	8021d6c <__lshift>
 801fa1c:	4607      	mov	r7, r0
 801fa1e:	2800      	cmp	r0, #0
 801fa20:	f43f ae7e 	beq.w	801f720 <_strtod_l+0x498>
 801fa24:	f1bb 0f00 	cmp.w	fp, #0
 801fa28:	dd08      	ble.n	801fa3c <_strtod_l+0x7b4>
 801fa2a:	4631      	mov	r1, r6
 801fa2c:	465a      	mov	r2, fp
 801fa2e:	4620      	mov	r0, r4
 801fa30:	f002 f99c 	bl	8021d6c <__lshift>
 801fa34:	4606      	mov	r6, r0
 801fa36:	2800      	cmp	r0, #0
 801fa38:	f43f ae72 	beq.w	801f720 <_strtod_l+0x498>
 801fa3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fa3e:	463a      	mov	r2, r7
 801fa40:	4620      	mov	r0, r4
 801fa42:	f002 fa1b 	bl	8021e7c <__mdiff>
 801fa46:	4605      	mov	r5, r0
 801fa48:	2800      	cmp	r0, #0
 801fa4a:	f43f ae69 	beq.w	801f720 <_strtod_l+0x498>
 801fa4e:	2300      	movs	r3, #0
 801fa50:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801fa54:	60c3      	str	r3, [r0, #12]
 801fa56:	4631      	mov	r1, r6
 801fa58:	f002 f9f4 	bl	8021e44 <__mcmp>
 801fa5c:	2800      	cmp	r0, #0
 801fa5e:	da7f      	bge.n	801fb60 <_strtod_l+0x8d8>
 801fa60:	ea5a 0308 	orrs.w	r3, sl, r8
 801fa64:	f040 80a5 	bne.w	801fbb2 <_strtod_l+0x92a>
 801fa68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	f040 80a0 	bne.w	801fbb2 <_strtod_l+0x92a>
 801fa72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801fa76:	0d1b      	lsrs	r3, r3, #20
 801fa78:	051b      	lsls	r3, r3, #20
 801fa7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801fa7e:	f240 8098 	bls.w	801fbb2 <_strtod_l+0x92a>
 801fa82:	696b      	ldr	r3, [r5, #20]
 801fa84:	b91b      	cbnz	r3, 801fa8e <_strtod_l+0x806>
 801fa86:	692b      	ldr	r3, [r5, #16]
 801fa88:	2b01      	cmp	r3, #1
 801fa8a:	f340 8092 	ble.w	801fbb2 <_strtod_l+0x92a>
 801fa8e:	4629      	mov	r1, r5
 801fa90:	2201      	movs	r2, #1
 801fa92:	4620      	mov	r0, r4
 801fa94:	f002 f96a 	bl	8021d6c <__lshift>
 801fa98:	4631      	mov	r1, r6
 801fa9a:	4605      	mov	r5, r0
 801fa9c:	f002 f9d2 	bl	8021e44 <__mcmp>
 801faa0:	2800      	cmp	r0, #0
 801faa2:	f340 8086 	ble.w	801fbb2 <_strtod_l+0x92a>
 801faa6:	9904      	ldr	r1, [sp, #16]
 801faa8:	4a2b      	ldr	r2, [pc, #172]	; (801fb58 <_strtod_l+0x8d0>)
 801faaa:	464b      	mov	r3, r9
 801faac:	2900      	cmp	r1, #0
 801faae:	f000 80a1 	beq.w	801fbf4 <_strtod_l+0x96c>
 801fab2:	ea02 0109 	and.w	r1, r2, r9
 801fab6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801faba:	f300 809b 	bgt.w	801fbf4 <_strtod_l+0x96c>
 801fabe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801fac2:	f77f aea2 	ble.w	801f80a <_strtod_l+0x582>
 801fac6:	4a25      	ldr	r2, [pc, #148]	; (801fb5c <_strtod_l+0x8d4>)
 801fac8:	2300      	movs	r3, #0
 801faca:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801face:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801fad2:	ec49 8b17 	vmov	d7, r8, r9
 801fad6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fada:	ed8d 7b04 	vstr	d7, [sp, #16]
 801fade:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801fae2:	4313      	orrs	r3, r2
 801fae4:	bf08      	it	eq
 801fae6:	2322      	moveq	r3, #34	; 0x22
 801fae8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801faec:	bf08      	it	eq
 801faee:	6023      	streq	r3, [r4, #0]
 801faf0:	e620      	b.n	801f734 <_strtod_l+0x4ac>
 801faf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801faf6:	fa01 f202 	lsl.w	r2, r1, r2
 801fafa:	ea02 0808 	and.w	r8, r2, r8
 801fafe:	e6d4      	b.n	801f8aa <_strtod_l+0x622>
 801fb00:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801fb04:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801fb08:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801fb0c:	33e2      	adds	r3, #226	; 0xe2
 801fb0e:	fa00 f303 	lsl.w	r3, r0, r3
 801fb12:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801fb16:	e73b      	b.n	801f990 <_strtod_l+0x708>
 801fb18:	2000      	movs	r0, #0
 801fb1a:	2301      	movs	r3, #1
 801fb1c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 801fb20:	e736      	b.n	801f990 <_strtod_l+0x708>
 801fb22:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fb24:	461a      	mov	r2, r3
 801fb26:	4620      	mov	r0, r4
 801fb28:	f002 f920 	bl	8021d6c <__lshift>
 801fb2c:	9018      	str	r0, [sp, #96]	; 0x60
 801fb2e:	2800      	cmp	r0, #0
 801fb30:	f47f af60 	bne.w	801f9f4 <_strtod_l+0x76c>
 801fb34:	e5f4      	b.n	801f720 <_strtod_l+0x498>
 801fb36:	bf00      	nop
 801fb38:	94a03595 	.word	0x94a03595
 801fb3c:	3fcfffff 	.word	0x3fcfffff
 801fb40:	94a03595 	.word	0x94a03595
 801fb44:	3fdfffff 	.word	0x3fdfffff
 801fb48:	35afe535 	.word	0x35afe535
 801fb4c:	3fe00000 	.word	0x3fe00000
 801fb50:	08027530 	.word	0x08027530
 801fb54:	fffffc02 	.word	0xfffffc02
 801fb58:	7ff00000 	.word	0x7ff00000
 801fb5c:	39500000 	.word	0x39500000
 801fb60:	46cb      	mov	fp, r9
 801fb62:	d165      	bne.n	801fc30 <_strtod_l+0x9a8>
 801fb64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fb68:	f1ba 0f00 	cmp.w	sl, #0
 801fb6c:	d02a      	beq.n	801fbc4 <_strtod_l+0x93c>
 801fb6e:	4aaa      	ldr	r2, [pc, #680]	; (801fe18 <_strtod_l+0xb90>)
 801fb70:	4293      	cmp	r3, r2
 801fb72:	d12b      	bne.n	801fbcc <_strtod_l+0x944>
 801fb74:	9b04      	ldr	r3, [sp, #16]
 801fb76:	4641      	mov	r1, r8
 801fb78:	b1fb      	cbz	r3, 801fbba <_strtod_l+0x932>
 801fb7a:	4aa8      	ldr	r2, [pc, #672]	; (801fe1c <_strtod_l+0xb94>)
 801fb7c:	ea09 0202 	and.w	r2, r9, r2
 801fb80:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801fb84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb88:	d81a      	bhi.n	801fbc0 <_strtod_l+0x938>
 801fb8a:	0d12      	lsrs	r2, r2, #20
 801fb8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801fb90:	fa00 f303 	lsl.w	r3, r0, r3
 801fb94:	4299      	cmp	r1, r3
 801fb96:	d119      	bne.n	801fbcc <_strtod_l+0x944>
 801fb98:	4ba1      	ldr	r3, [pc, #644]	; (801fe20 <_strtod_l+0xb98>)
 801fb9a:	459b      	cmp	fp, r3
 801fb9c:	d102      	bne.n	801fba4 <_strtod_l+0x91c>
 801fb9e:	3101      	adds	r1, #1
 801fba0:	f43f adbe 	beq.w	801f720 <_strtod_l+0x498>
 801fba4:	4b9d      	ldr	r3, [pc, #628]	; (801fe1c <_strtod_l+0xb94>)
 801fba6:	ea0b 0303 	and.w	r3, fp, r3
 801fbaa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801fbae:	f04f 0800 	mov.w	r8, #0
 801fbb2:	9b04      	ldr	r3, [sp, #16]
 801fbb4:	2b00      	cmp	r3, #0
 801fbb6:	d186      	bne.n	801fac6 <_strtod_l+0x83e>
 801fbb8:	e5bc      	b.n	801f734 <_strtod_l+0x4ac>
 801fbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fbbe:	e7e9      	b.n	801fb94 <_strtod_l+0x90c>
 801fbc0:	4603      	mov	r3, r0
 801fbc2:	e7e7      	b.n	801fb94 <_strtod_l+0x90c>
 801fbc4:	ea53 0308 	orrs.w	r3, r3, r8
 801fbc8:	f43f af6d 	beq.w	801faa6 <_strtod_l+0x81e>
 801fbcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbce:	b1db      	cbz	r3, 801fc08 <_strtod_l+0x980>
 801fbd0:	ea13 0f0b 	tst.w	r3, fp
 801fbd4:	d0ed      	beq.n	801fbb2 <_strtod_l+0x92a>
 801fbd6:	9a04      	ldr	r2, [sp, #16]
 801fbd8:	4640      	mov	r0, r8
 801fbda:	4649      	mov	r1, r9
 801fbdc:	f1ba 0f00 	cmp.w	sl, #0
 801fbe0:	d016      	beq.n	801fc10 <_strtod_l+0x988>
 801fbe2:	f7ff fb35 	bl	801f250 <sulp>
 801fbe6:	ed9d 7b08 	vldr	d7, [sp, #32]
 801fbea:	ee37 7b00 	vadd.f64	d7, d7, d0
 801fbee:	ec59 8b17 	vmov	r8, r9, d7
 801fbf2:	e7de      	b.n	801fbb2 <_strtod_l+0x92a>
 801fbf4:	4013      	ands	r3, r2
 801fbf6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801fbfa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801fbfe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801fc02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801fc06:	e7d4      	b.n	801fbb2 <_strtod_l+0x92a>
 801fc08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc0a:	ea13 0f08 	tst.w	r3, r8
 801fc0e:	e7e1      	b.n	801fbd4 <_strtod_l+0x94c>
 801fc10:	f7ff fb1e 	bl	801f250 <sulp>
 801fc14:	ed9d 7b08 	vldr	d7, [sp, #32]
 801fc18:	ee37 7b40 	vsub.f64	d7, d7, d0
 801fc1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801fc20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801fc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc28:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801fc2c:	d1c1      	bne.n	801fbb2 <_strtod_l+0x92a>
 801fc2e:	e5ec      	b.n	801f80a <_strtod_l+0x582>
 801fc30:	4631      	mov	r1, r6
 801fc32:	4628      	mov	r0, r5
 801fc34:	f002 fa82 	bl	802213c <__ratio>
 801fc38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801fc3c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801fc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc44:	d867      	bhi.n	801fd16 <_strtod_l+0xa8e>
 801fc46:	f1ba 0f00 	cmp.w	sl, #0
 801fc4a:	d044      	beq.n	801fcd6 <_strtod_l+0xa4e>
 801fc4c:	4b75      	ldr	r3, [pc, #468]	; (801fe24 <_strtod_l+0xb9c>)
 801fc4e:	2200      	movs	r2, #0
 801fc50:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801fc54:	4971      	ldr	r1, [pc, #452]	; (801fe1c <_strtod_l+0xb94>)
 801fc56:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801fe30 <_strtod_l+0xba8>
 801fc5a:	ea0b 0001 	and.w	r0, fp, r1
 801fc5e:	4560      	cmp	r0, ip
 801fc60:	900d      	str	r0, [sp, #52]	; 0x34
 801fc62:	f040 808b 	bne.w	801fd7c <_strtod_l+0xaf4>
 801fc66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801fc6a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801fc6e:	ec49 8b10 	vmov	d0, r8, r9
 801fc72:	ec43 2b1c 	vmov	d12, r2, r3
 801fc76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801fc7a:	f002 f987 	bl	8021f8c <__ulp>
 801fc7e:	ec49 8b1d 	vmov	d13, r8, r9
 801fc82:	eeac db00 	vfma.f64	d13, d12, d0
 801fc86:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801fc8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc8c:	4963      	ldr	r1, [pc, #396]	; (801fe1c <_strtod_l+0xb94>)
 801fc8e:	4a66      	ldr	r2, [pc, #408]	; (801fe28 <_strtod_l+0xba0>)
 801fc90:	4019      	ands	r1, r3
 801fc92:	4291      	cmp	r1, r2
 801fc94:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 801fc98:	d947      	bls.n	801fd2a <_strtod_l+0xaa2>
 801fc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801fca0:	4293      	cmp	r3, r2
 801fca2:	d103      	bne.n	801fcac <_strtod_l+0xa24>
 801fca4:	9b08      	ldr	r3, [sp, #32]
 801fca6:	3301      	adds	r3, #1
 801fca8:	f43f ad3a 	beq.w	801f720 <_strtod_l+0x498>
 801fcac:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801fe20 <_strtod_l+0xb98>
 801fcb0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801fcb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fcb6:	4620      	mov	r0, r4
 801fcb8:	f001 fe3c 	bl	8021934 <_Bfree>
 801fcbc:	4639      	mov	r1, r7
 801fcbe:	4620      	mov	r0, r4
 801fcc0:	f001 fe38 	bl	8021934 <_Bfree>
 801fcc4:	4631      	mov	r1, r6
 801fcc6:	4620      	mov	r0, r4
 801fcc8:	f001 fe34 	bl	8021934 <_Bfree>
 801fccc:	4629      	mov	r1, r5
 801fcce:	4620      	mov	r0, r4
 801fcd0:	f001 fe30 	bl	8021934 <_Bfree>
 801fcd4:	e60f      	b.n	801f8f6 <_strtod_l+0x66e>
 801fcd6:	f1b8 0f00 	cmp.w	r8, #0
 801fcda:	d112      	bne.n	801fd02 <_strtod_l+0xa7a>
 801fcdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fce0:	b9b3      	cbnz	r3, 801fd10 <_strtod_l+0xa88>
 801fce2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801fce6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801fcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcee:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801fcf2:	d401      	bmi.n	801fcf8 <_strtod_l+0xa70>
 801fcf4:	ee20 8b08 	vmul.f64	d8, d0, d8
 801fcf8:	eeb1 7b48 	vneg.f64	d7, d8
 801fcfc:	ec53 2b17 	vmov	r2, r3, d7
 801fd00:	e7a8      	b.n	801fc54 <_strtod_l+0x9cc>
 801fd02:	f1b8 0f01 	cmp.w	r8, #1
 801fd06:	d103      	bne.n	801fd10 <_strtod_l+0xa88>
 801fd08:	f1b9 0f00 	cmp.w	r9, #0
 801fd0c:	f43f ad7d 	beq.w	801f80a <_strtod_l+0x582>
 801fd10:	4b46      	ldr	r3, [pc, #280]	; (801fe2c <_strtod_l+0xba4>)
 801fd12:	2200      	movs	r2, #0
 801fd14:	e79c      	b.n	801fc50 <_strtod_l+0x9c8>
 801fd16:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801fd1a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801fd1e:	f1ba 0f00 	cmp.w	sl, #0
 801fd22:	d0e9      	beq.n	801fcf8 <_strtod_l+0xa70>
 801fd24:	ec53 2b18 	vmov	r2, r3, d8
 801fd28:	e794      	b.n	801fc54 <_strtod_l+0x9cc>
 801fd2a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801fd2e:	9b04      	ldr	r3, [sp, #16]
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	d1bf      	bne.n	801fcb4 <_strtod_l+0xa2c>
 801fd34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801fd38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fd3a:	0d1b      	lsrs	r3, r3, #20
 801fd3c:	051b      	lsls	r3, r3, #20
 801fd3e:	429a      	cmp	r2, r3
 801fd40:	d1b8      	bne.n	801fcb4 <_strtod_l+0xa2c>
 801fd42:	ec51 0b18 	vmov	r0, r1, d8
 801fd46:	f7e0 fcf7 	bl	8000738 <__aeabi_d2lz>
 801fd4a:	f7e0 fcaf 	bl	80006ac <__aeabi_l2d>
 801fd4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fd52:	ec41 0b17 	vmov	d7, r0, r1
 801fd56:	ea43 0308 	orr.w	r3, r3, r8
 801fd5a:	ea53 030a 	orrs.w	r3, r3, sl
 801fd5e:	ee38 8b47 	vsub.f64	d8, d8, d7
 801fd62:	d03e      	beq.n	801fde2 <_strtod_l+0xb5a>
 801fd64:	eeb4 8bca 	vcmpe.f64	d8, d10
 801fd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd6c:	f53f ace2 	bmi.w	801f734 <_strtod_l+0x4ac>
 801fd70:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801fd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd78:	dd9c      	ble.n	801fcb4 <_strtod_l+0xa2c>
 801fd7a:	e4db      	b.n	801f734 <_strtod_l+0x4ac>
 801fd7c:	9904      	ldr	r1, [sp, #16]
 801fd7e:	b301      	cbz	r1, 801fdc2 <_strtod_l+0xb3a>
 801fd80:	990d      	ldr	r1, [sp, #52]	; 0x34
 801fd82:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801fd86:	d81c      	bhi.n	801fdc2 <_strtod_l+0xb3a>
 801fd88:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801fe10 <_strtod_l+0xb88>
 801fd8c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801fd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd94:	d811      	bhi.n	801fdba <_strtod_l+0xb32>
 801fd96:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801fd9a:	ee18 3a10 	vmov	r3, s16
 801fd9e:	2b01      	cmp	r3, #1
 801fda0:	bf38      	it	cc
 801fda2:	2301      	movcc	r3, #1
 801fda4:	ee08 3a10 	vmov	s16, r3
 801fda8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801fdac:	f1ba 0f00 	cmp.w	sl, #0
 801fdb0:	d114      	bne.n	801fddc <_strtod_l+0xb54>
 801fdb2:	eeb1 7b48 	vneg.f64	d7, d8
 801fdb6:	ec53 2b17 	vmov	r2, r3, d7
 801fdba:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fdbc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801fdc0:	1a0b      	subs	r3, r1, r0
 801fdc2:	ed9d 0b08 	vldr	d0, [sp, #32]
 801fdc6:	ec43 2b1c 	vmov	d12, r2, r3
 801fdca:	f002 f8df 	bl	8021f8c <__ulp>
 801fdce:	ed9d 7b08 	vldr	d7, [sp, #32]
 801fdd2:	eeac 7b00 	vfma.f64	d7, d12, d0
 801fdd6:	ec59 8b17 	vmov	r8, r9, d7
 801fdda:	e7a8      	b.n	801fd2e <_strtod_l+0xaa6>
 801fddc:	ec53 2b18 	vmov	r2, r3, d8
 801fde0:	e7eb      	b.n	801fdba <_strtod_l+0xb32>
 801fde2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801fde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdea:	f57f af63 	bpl.w	801fcb4 <_strtod_l+0xa2c>
 801fdee:	e4a1      	b.n	801f734 <_strtod_l+0x4ac>
 801fdf0:	2300      	movs	r3, #0
 801fdf2:	930b      	str	r3, [sp, #44]	; 0x2c
 801fdf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fdf6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fdf8:	6013      	str	r3, [r2, #0]
 801fdfa:	f7ff ba8d 	b.w	801f318 <_strtod_l+0x90>
 801fdfe:	2a65      	cmp	r2, #101	; 0x65
 801fe00:	f43f ab89 	beq.w	801f516 <_strtod_l+0x28e>
 801fe04:	2a45      	cmp	r2, #69	; 0x45
 801fe06:	f43f ab86 	beq.w	801f516 <_strtod_l+0x28e>
 801fe0a:	2101      	movs	r1, #1
 801fe0c:	f7ff bbbe 	b.w	801f58c <_strtod_l+0x304>
 801fe10:	ffc00000 	.word	0xffc00000
 801fe14:	41dfffff 	.word	0x41dfffff
 801fe18:	000fffff 	.word	0x000fffff
 801fe1c:	7ff00000 	.word	0x7ff00000
 801fe20:	7fefffff 	.word	0x7fefffff
 801fe24:	3ff00000 	.word	0x3ff00000
 801fe28:	7c9fffff 	.word	0x7c9fffff
 801fe2c:	bff00000 	.word	0xbff00000
 801fe30:	7fe00000 	.word	0x7fe00000

0801fe34 <_strtod_r>:
 801fe34:	4b01      	ldr	r3, [pc, #4]	; (801fe3c <_strtod_r+0x8>)
 801fe36:	f7ff ba27 	b.w	801f288 <_strtod_l>
 801fe3a:	bf00      	nop
 801fe3c:	240034ac 	.word	0x240034ac

0801fe40 <_strtol_l.isra.0>:
 801fe40:	2b01      	cmp	r3, #1
 801fe42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe46:	d001      	beq.n	801fe4c <_strtol_l.isra.0+0xc>
 801fe48:	2b24      	cmp	r3, #36	; 0x24
 801fe4a:	d906      	bls.n	801fe5a <_strtol_l.isra.0+0x1a>
 801fe4c:	f000 ff6a 	bl	8020d24 <__errno>
 801fe50:	2316      	movs	r3, #22
 801fe52:	6003      	str	r3, [r0, #0]
 801fe54:	2000      	movs	r0, #0
 801fe56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe5a:	4f3a      	ldr	r7, [pc, #232]	; (801ff44 <_strtol_l.isra.0+0x104>)
 801fe5c:	468e      	mov	lr, r1
 801fe5e:	4676      	mov	r6, lr
 801fe60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801fe64:	5de5      	ldrb	r5, [r4, r7]
 801fe66:	f015 0508 	ands.w	r5, r5, #8
 801fe6a:	d1f8      	bne.n	801fe5e <_strtol_l.isra.0+0x1e>
 801fe6c:	2c2d      	cmp	r4, #45	; 0x2d
 801fe6e:	d134      	bne.n	801feda <_strtol_l.isra.0+0x9a>
 801fe70:	f89e 4000 	ldrb.w	r4, [lr]
 801fe74:	f04f 0801 	mov.w	r8, #1
 801fe78:	f106 0e02 	add.w	lr, r6, #2
 801fe7c:	2b00      	cmp	r3, #0
 801fe7e:	d05c      	beq.n	801ff3a <_strtol_l.isra.0+0xfa>
 801fe80:	2b10      	cmp	r3, #16
 801fe82:	d10c      	bne.n	801fe9e <_strtol_l.isra.0+0x5e>
 801fe84:	2c30      	cmp	r4, #48	; 0x30
 801fe86:	d10a      	bne.n	801fe9e <_strtol_l.isra.0+0x5e>
 801fe88:	f89e 4000 	ldrb.w	r4, [lr]
 801fe8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801fe90:	2c58      	cmp	r4, #88	; 0x58
 801fe92:	d14d      	bne.n	801ff30 <_strtol_l.isra.0+0xf0>
 801fe94:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801fe98:	2310      	movs	r3, #16
 801fe9a:	f10e 0e02 	add.w	lr, lr, #2
 801fe9e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801fea2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801fea6:	2600      	movs	r6, #0
 801fea8:	fbbc f9f3 	udiv	r9, ip, r3
 801feac:	4635      	mov	r5, r6
 801feae:	fb03 ca19 	mls	sl, r3, r9, ip
 801feb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801feb6:	2f09      	cmp	r7, #9
 801feb8:	d818      	bhi.n	801feec <_strtol_l.isra.0+0xac>
 801feba:	463c      	mov	r4, r7
 801febc:	42a3      	cmp	r3, r4
 801febe:	dd24      	ble.n	801ff0a <_strtol_l.isra.0+0xca>
 801fec0:	2e00      	cmp	r6, #0
 801fec2:	db1f      	blt.n	801ff04 <_strtol_l.isra.0+0xc4>
 801fec4:	45a9      	cmp	r9, r5
 801fec6:	d31d      	bcc.n	801ff04 <_strtol_l.isra.0+0xc4>
 801fec8:	d101      	bne.n	801fece <_strtol_l.isra.0+0x8e>
 801feca:	45a2      	cmp	sl, r4
 801fecc:	db1a      	blt.n	801ff04 <_strtol_l.isra.0+0xc4>
 801fece:	fb05 4503 	mla	r5, r5, r3, r4
 801fed2:	2601      	movs	r6, #1
 801fed4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801fed8:	e7eb      	b.n	801feb2 <_strtol_l.isra.0+0x72>
 801feda:	2c2b      	cmp	r4, #43	; 0x2b
 801fedc:	bf08      	it	eq
 801fede:	f89e 4000 	ldrbeq.w	r4, [lr]
 801fee2:	46a8      	mov	r8, r5
 801fee4:	bf08      	it	eq
 801fee6:	f106 0e02 	addeq.w	lr, r6, #2
 801feea:	e7c7      	b.n	801fe7c <_strtol_l.isra.0+0x3c>
 801feec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801fef0:	2f19      	cmp	r7, #25
 801fef2:	d801      	bhi.n	801fef8 <_strtol_l.isra.0+0xb8>
 801fef4:	3c37      	subs	r4, #55	; 0x37
 801fef6:	e7e1      	b.n	801febc <_strtol_l.isra.0+0x7c>
 801fef8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801fefc:	2f19      	cmp	r7, #25
 801fefe:	d804      	bhi.n	801ff0a <_strtol_l.isra.0+0xca>
 801ff00:	3c57      	subs	r4, #87	; 0x57
 801ff02:	e7db      	b.n	801febc <_strtol_l.isra.0+0x7c>
 801ff04:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801ff08:	e7e4      	b.n	801fed4 <_strtol_l.isra.0+0x94>
 801ff0a:	2e00      	cmp	r6, #0
 801ff0c:	da05      	bge.n	801ff1a <_strtol_l.isra.0+0xda>
 801ff0e:	2322      	movs	r3, #34	; 0x22
 801ff10:	6003      	str	r3, [r0, #0]
 801ff12:	4665      	mov	r5, ip
 801ff14:	b942      	cbnz	r2, 801ff28 <_strtol_l.isra.0+0xe8>
 801ff16:	4628      	mov	r0, r5
 801ff18:	e79d      	b.n	801fe56 <_strtol_l.isra.0+0x16>
 801ff1a:	f1b8 0f00 	cmp.w	r8, #0
 801ff1e:	d000      	beq.n	801ff22 <_strtol_l.isra.0+0xe2>
 801ff20:	426d      	negs	r5, r5
 801ff22:	2a00      	cmp	r2, #0
 801ff24:	d0f7      	beq.n	801ff16 <_strtol_l.isra.0+0xd6>
 801ff26:	b10e      	cbz	r6, 801ff2c <_strtol_l.isra.0+0xec>
 801ff28:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801ff2c:	6011      	str	r1, [r2, #0]
 801ff2e:	e7f2      	b.n	801ff16 <_strtol_l.isra.0+0xd6>
 801ff30:	2430      	movs	r4, #48	; 0x30
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d1b3      	bne.n	801fe9e <_strtol_l.isra.0+0x5e>
 801ff36:	2308      	movs	r3, #8
 801ff38:	e7b1      	b.n	801fe9e <_strtol_l.isra.0+0x5e>
 801ff3a:	2c30      	cmp	r4, #48	; 0x30
 801ff3c:	d0a4      	beq.n	801fe88 <_strtol_l.isra.0+0x48>
 801ff3e:	230a      	movs	r3, #10
 801ff40:	e7ad      	b.n	801fe9e <_strtol_l.isra.0+0x5e>
 801ff42:	bf00      	nop
 801ff44:	0802734d 	.word	0x0802734d

0801ff48 <_strtol_r>:
 801ff48:	f7ff bf7a 	b.w	801fe40 <_strtol_l.isra.0>

0801ff4c <__swbuf_r>:
 801ff4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff4e:	460e      	mov	r6, r1
 801ff50:	4614      	mov	r4, r2
 801ff52:	4605      	mov	r5, r0
 801ff54:	b118      	cbz	r0, 801ff5e <__swbuf_r+0x12>
 801ff56:	6983      	ldr	r3, [r0, #24]
 801ff58:	b90b      	cbnz	r3, 801ff5e <__swbuf_r+0x12>
 801ff5a:	f001 f803 	bl	8020f64 <__sinit>
 801ff5e:	4b21      	ldr	r3, [pc, #132]	; (801ffe4 <__swbuf_r+0x98>)
 801ff60:	429c      	cmp	r4, r3
 801ff62:	d12b      	bne.n	801ffbc <__swbuf_r+0x70>
 801ff64:	686c      	ldr	r4, [r5, #4]
 801ff66:	69a3      	ldr	r3, [r4, #24]
 801ff68:	60a3      	str	r3, [r4, #8]
 801ff6a:	89a3      	ldrh	r3, [r4, #12]
 801ff6c:	071a      	lsls	r2, r3, #28
 801ff6e:	d52f      	bpl.n	801ffd0 <__swbuf_r+0x84>
 801ff70:	6923      	ldr	r3, [r4, #16]
 801ff72:	b36b      	cbz	r3, 801ffd0 <__swbuf_r+0x84>
 801ff74:	6923      	ldr	r3, [r4, #16]
 801ff76:	6820      	ldr	r0, [r4, #0]
 801ff78:	1ac0      	subs	r0, r0, r3
 801ff7a:	6963      	ldr	r3, [r4, #20]
 801ff7c:	b2f6      	uxtb	r6, r6
 801ff7e:	4283      	cmp	r3, r0
 801ff80:	4637      	mov	r7, r6
 801ff82:	dc04      	bgt.n	801ff8e <__swbuf_r+0x42>
 801ff84:	4621      	mov	r1, r4
 801ff86:	4628      	mov	r0, r5
 801ff88:	f000 ff58 	bl	8020e3c <_fflush_r>
 801ff8c:	bb30      	cbnz	r0, 801ffdc <__swbuf_r+0x90>
 801ff8e:	68a3      	ldr	r3, [r4, #8]
 801ff90:	3b01      	subs	r3, #1
 801ff92:	60a3      	str	r3, [r4, #8]
 801ff94:	6823      	ldr	r3, [r4, #0]
 801ff96:	1c5a      	adds	r2, r3, #1
 801ff98:	6022      	str	r2, [r4, #0]
 801ff9a:	701e      	strb	r6, [r3, #0]
 801ff9c:	6963      	ldr	r3, [r4, #20]
 801ff9e:	3001      	adds	r0, #1
 801ffa0:	4283      	cmp	r3, r0
 801ffa2:	d004      	beq.n	801ffae <__swbuf_r+0x62>
 801ffa4:	89a3      	ldrh	r3, [r4, #12]
 801ffa6:	07db      	lsls	r3, r3, #31
 801ffa8:	d506      	bpl.n	801ffb8 <__swbuf_r+0x6c>
 801ffaa:	2e0a      	cmp	r6, #10
 801ffac:	d104      	bne.n	801ffb8 <__swbuf_r+0x6c>
 801ffae:	4621      	mov	r1, r4
 801ffb0:	4628      	mov	r0, r5
 801ffb2:	f000 ff43 	bl	8020e3c <_fflush_r>
 801ffb6:	b988      	cbnz	r0, 801ffdc <__swbuf_r+0x90>
 801ffb8:	4638      	mov	r0, r7
 801ffba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffbc:	4b0a      	ldr	r3, [pc, #40]	; (801ffe8 <__swbuf_r+0x9c>)
 801ffbe:	429c      	cmp	r4, r3
 801ffc0:	d101      	bne.n	801ffc6 <__swbuf_r+0x7a>
 801ffc2:	68ac      	ldr	r4, [r5, #8]
 801ffc4:	e7cf      	b.n	801ff66 <__swbuf_r+0x1a>
 801ffc6:	4b09      	ldr	r3, [pc, #36]	; (801ffec <__swbuf_r+0xa0>)
 801ffc8:	429c      	cmp	r4, r3
 801ffca:	bf08      	it	eq
 801ffcc:	68ec      	ldreq	r4, [r5, #12]
 801ffce:	e7ca      	b.n	801ff66 <__swbuf_r+0x1a>
 801ffd0:	4621      	mov	r1, r4
 801ffd2:	4628      	mov	r0, r5
 801ffd4:	f000 f80c 	bl	801fff0 <__swsetup_r>
 801ffd8:	2800      	cmp	r0, #0
 801ffda:	d0cb      	beq.n	801ff74 <__swbuf_r+0x28>
 801ffdc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ffe0:	e7ea      	b.n	801ffb8 <__swbuf_r+0x6c>
 801ffe2:	bf00      	nop
 801ffe4:	08027634 	.word	0x08027634
 801ffe8:	08027654 	.word	0x08027654
 801ffec:	08027614 	.word	0x08027614

0801fff0 <__swsetup_r>:
 801fff0:	4b32      	ldr	r3, [pc, #200]	; (80200bc <__swsetup_r+0xcc>)
 801fff2:	b570      	push	{r4, r5, r6, lr}
 801fff4:	681d      	ldr	r5, [r3, #0]
 801fff6:	4606      	mov	r6, r0
 801fff8:	460c      	mov	r4, r1
 801fffa:	b125      	cbz	r5, 8020006 <__swsetup_r+0x16>
 801fffc:	69ab      	ldr	r3, [r5, #24]
 801fffe:	b913      	cbnz	r3, 8020006 <__swsetup_r+0x16>
 8020000:	4628      	mov	r0, r5
 8020002:	f000 ffaf 	bl	8020f64 <__sinit>
 8020006:	4b2e      	ldr	r3, [pc, #184]	; (80200c0 <__swsetup_r+0xd0>)
 8020008:	429c      	cmp	r4, r3
 802000a:	d10f      	bne.n	802002c <__swsetup_r+0x3c>
 802000c:	686c      	ldr	r4, [r5, #4]
 802000e:	89a3      	ldrh	r3, [r4, #12]
 8020010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020014:	0719      	lsls	r1, r3, #28
 8020016:	d42c      	bmi.n	8020072 <__swsetup_r+0x82>
 8020018:	06dd      	lsls	r5, r3, #27
 802001a:	d411      	bmi.n	8020040 <__swsetup_r+0x50>
 802001c:	2309      	movs	r3, #9
 802001e:	6033      	str	r3, [r6, #0]
 8020020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020024:	81a3      	strh	r3, [r4, #12]
 8020026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802002a:	e03e      	b.n	80200aa <__swsetup_r+0xba>
 802002c:	4b25      	ldr	r3, [pc, #148]	; (80200c4 <__swsetup_r+0xd4>)
 802002e:	429c      	cmp	r4, r3
 8020030:	d101      	bne.n	8020036 <__swsetup_r+0x46>
 8020032:	68ac      	ldr	r4, [r5, #8]
 8020034:	e7eb      	b.n	802000e <__swsetup_r+0x1e>
 8020036:	4b24      	ldr	r3, [pc, #144]	; (80200c8 <__swsetup_r+0xd8>)
 8020038:	429c      	cmp	r4, r3
 802003a:	bf08      	it	eq
 802003c:	68ec      	ldreq	r4, [r5, #12]
 802003e:	e7e6      	b.n	802000e <__swsetup_r+0x1e>
 8020040:	0758      	lsls	r0, r3, #29
 8020042:	d512      	bpl.n	802006a <__swsetup_r+0x7a>
 8020044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020046:	b141      	cbz	r1, 802005a <__swsetup_r+0x6a>
 8020048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802004c:	4299      	cmp	r1, r3
 802004e:	d002      	beq.n	8020056 <__swsetup_r+0x66>
 8020050:	4630      	mov	r0, r6
 8020052:	f7fe f8f7 	bl	801e244 <_free_r>
 8020056:	2300      	movs	r3, #0
 8020058:	6363      	str	r3, [r4, #52]	; 0x34
 802005a:	89a3      	ldrh	r3, [r4, #12]
 802005c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020060:	81a3      	strh	r3, [r4, #12]
 8020062:	2300      	movs	r3, #0
 8020064:	6063      	str	r3, [r4, #4]
 8020066:	6923      	ldr	r3, [r4, #16]
 8020068:	6023      	str	r3, [r4, #0]
 802006a:	89a3      	ldrh	r3, [r4, #12]
 802006c:	f043 0308 	orr.w	r3, r3, #8
 8020070:	81a3      	strh	r3, [r4, #12]
 8020072:	6923      	ldr	r3, [r4, #16]
 8020074:	b94b      	cbnz	r3, 802008a <__swsetup_r+0x9a>
 8020076:	89a3      	ldrh	r3, [r4, #12]
 8020078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802007c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020080:	d003      	beq.n	802008a <__swsetup_r+0x9a>
 8020082:	4621      	mov	r1, r4
 8020084:	4630      	mov	r0, r6
 8020086:	f001 fbb7 	bl	80217f8 <__smakebuf_r>
 802008a:	89a0      	ldrh	r0, [r4, #12]
 802008c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020090:	f010 0301 	ands.w	r3, r0, #1
 8020094:	d00a      	beq.n	80200ac <__swsetup_r+0xbc>
 8020096:	2300      	movs	r3, #0
 8020098:	60a3      	str	r3, [r4, #8]
 802009a:	6963      	ldr	r3, [r4, #20]
 802009c:	425b      	negs	r3, r3
 802009e:	61a3      	str	r3, [r4, #24]
 80200a0:	6923      	ldr	r3, [r4, #16]
 80200a2:	b943      	cbnz	r3, 80200b6 <__swsetup_r+0xc6>
 80200a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80200a8:	d1ba      	bne.n	8020020 <__swsetup_r+0x30>
 80200aa:	bd70      	pop	{r4, r5, r6, pc}
 80200ac:	0781      	lsls	r1, r0, #30
 80200ae:	bf58      	it	pl
 80200b0:	6963      	ldrpl	r3, [r4, #20]
 80200b2:	60a3      	str	r3, [r4, #8]
 80200b4:	e7f4      	b.n	80200a0 <__swsetup_r+0xb0>
 80200b6:	2000      	movs	r0, #0
 80200b8:	e7f7      	b.n	80200aa <__swsetup_r+0xba>
 80200ba:	bf00      	nop
 80200bc:	24003444 	.word	0x24003444
 80200c0:	08027634 	.word	0x08027634
 80200c4:	08027654 	.word	0x08027654
 80200c8:	08027614 	.word	0x08027614

080200cc <__assert_func>:
 80200cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80200ce:	4614      	mov	r4, r2
 80200d0:	461a      	mov	r2, r3
 80200d2:	4b09      	ldr	r3, [pc, #36]	; (80200f8 <__assert_func+0x2c>)
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	4605      	mov	r5, r0
 80200d8:	68d8      	ldr	r0, [r3, #12]
 80200da:	b14c      	cbz	r4, 80200f0 <__assert_func+0x24>
 80200dc:	4b07      	ldr	r3, [pc, #28]	; (80200fc <__assert_func+0x30>)
 80200de:	9100      	str	r1, [sp, #0]
 80200e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80200e4:	4906      	ldr	r1, [pc, #24]	; (8020100 <__assert_func+0x34>)
 80200e6:	462b      	mov	r3, r5
 80200e8:	f000 ffba 	bl	8021060 <fiprintf>
 80200ec:	f002 fbce 	bl	802288c <abort>
 80200f0:	4b04      	ldr	r3, [pc, #16]	; (8020104 <__assert_func+0x38>)
 80200f2:	461c      	mov	r4, r3
 80200f4:	e7f3      	b.n	80200de <__assert_func+0x12>
 80200f6:	bf00      	nop
 80200f8:	24003444 	.word	0x24003444
 80200fc:	08027558 	.word	0x08027558
 8020100:	08027565 	.word	0x08027565
 8020104:	08027593 	.word	0x08027593

08020108 <quorem>:
 8020108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802010c:	6903      	ldr	r3, [r0, #16]
 802010e:	690c      	ldr	r4, [r1, #16]
 8020110:	42a3      	cmp	r3, r4
 8020112:	4607      	mov	r7, r0
 8020114:	f2c0 8081 	blt.w	802021a <quorem+0x112>
 8020118:	3c01      	subs	r4, #1
 802011a:	f101 0814 	add.w	r8, r1, #20
 802011e:	f100 0514 	add.w	r5, r0, #20
 8020122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020126:	9301      	str	r3, [sp, #4]
 8020128:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802012c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020130:	3301      	adds	r3, #1
 8020132:	429a      	cmp	r2, r3
 8020134:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020138:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802013c:	fbb2 f6f3 	udiv	r6, r2, r3
 8020140:	d331      	bcc.n	80201a6 <quorem+0x9e>
 8020142:	f04f 0e00 	mov.w	lr, #0
 8020146:	4640      	mov	r0, r8
 8020148:	46ac      	mov	ip, r5
 802014a:	46f2      	mov	sl, lr
 802014c:	f850 2b04 	ldr.w	r2, [r0], #4
 8020150:	b293      	uxth	r3, r2
 8020152:	fb06 e303 	mla	r3, r6, r3, lr
 8020156:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802015a:	b29b      	uxth	r3, r3
 802015c:	ebaa 0303 	sub.w	r3, sl, r3
 8020160:	0c12      	lsrs	r2, r2, #16
 8020162:	f8dc a000 	ldr.w	sl, [ip]
 8020166:	fb06 e202 	mla	r2, r6, r2, lr
 802016a:	fa13 f38a 	uxtah	r3, r3, sl
 802016e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020172:	fa1f fa82 	uxth.w	sl, r2
 8020176:	f8dc 2000 	ldr.w	r2, [ip]
 802017a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 802017e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020182:	b29b      	uxth	r3, r3
 8020184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020188:	4581      	cmp	r9, r0
 802018a:	f84c 3b04 	str.w	r3, [ip], #4
 802018e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020192:	d2db      	bcs.n	802014c <quorem+0x44>
 8020194:	f855 300b 	ldr.w	r3, [r5, fp]
 8020198:	b92b      	cbnz	r3, 80201a6 <quorem+0x9e>
 802019a:	9b01      	ldr	r3, [sp, #4]
 802019c:	3b04      	subs	r3, #4
 802019e:	429d      	cmp	r5, r3
 80201a0:	461a      	mov	r2, r3
 80201a2:	d32e      	bcc.n	8020202 <quorem+0xfa>
 80201a4:	613c      	str	r4, [r7, #16]
 80201a6:	4638      	mov	r0, r7
 80201a8:	f001 fe4c 	bl	8021e44 <__mcmp>
 80201ac:	2800      	cmp	r0, #0
 80201ae:	db24      	blt.n	80201fa <quorem+0xf2>
 80201b0:	3601      	adds	r6, #1
 80201b2:	4628      	mov	r0, r5
 80201b4:	f04f 0c00 	mov.w	ip, #0
 80201b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80201bc:	f8d0 e000 	ldr.w	lr, [r0]
 80201c0:	b293      	uxth	r3, r2
 80201c2:	ebac 0303 	sub.w	r3, ip, r3
 80201c6:	0c12      	lsrs	r2, r2, #16
 80201c8:	fa13 f38e 	uxtah	r3, r3, lr
 80201cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80201d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80201d4:	b29b      	uxth	r3, r3
 80201d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80201da:	45c1      	cmp	r9, r8
 80201dc:	f840 3b04 	str.w	r3, [r0], #4
 80201e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80201e4:	d2e8      	bcs.n	80201b8 <quorem+0xb0>
 80201e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80201ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80201ee:	b922      	cbnz	r2, 80201fa <quorem+0xf2>
 80201f0:	3b04      	subs	r3, #4
 80201f2:	429d      	cmp	r5, r3
 80201f4:	461a      	mov	r2, r3
 80201f6:	d30a      	bcc.n	802020e <quorem+0x106>
 80201f8:	613c      	str	r4, [r7, #16]
 80201fa:	4630      	mov	r0, r6
 80201fc:	b003      	add	sp, #12
 80201fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020202:	6812      	ldr	r2, [r2, #0]
 8020204:	3b04      	subs	r3, #4
 8020206:	2a00      	cmp	r2, #0
 8020208:	d1cc      	bne.n	80201a4 <quorem+0x9c>
 802020a:	3c01      	subs	r4, #1
 802020c:	e7c7      	b.n	802019e <quorem+0x96>
 802020e:	6812      	ldr	r2, [r2, #0]
 8020210:	3b04      	subs	r3, #4
 8020212:	2a00      	cmp	r2, #0
 8020214:	d1f0      	bne.n	80201f8 <quorem+0xf0>
 8020216:	3c01      	subs	r4, #1
 8020218:	e7eb      	b.n	80201f2 <quorem+0xea>
 802021a:	2000      	movs	r0, #0
 802021c:	e7ee      	b.n	80201fc <quorem+0xf4>
	...

08020220 <_dtoa_r>:
 8020220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020224:	ec59 8b10 	vmov	r8, r9, d0
 8020228:	b095      	sub	sp, #84	; 0x54
 802022a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802022c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802022e:	9107      	str	r1, [sp, #28]
 8020230:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8020234:	4606      	mov	r6, r0
 8020236:	9209      	str	r2, [sp, #36]	; 0x24
 8020238:	9310      	str	r3, [sp, #64]	; 0x40
 802023a:	b975      	cbnz	r5, 802025a <_dtoa_r+0x3a>
 802023c:	2010      	movs	r0, #16
 802023e:	f7fd ffbb 	bl	801e1b8 <malloc>
 8020242:	4602      	mov	r2, r0
 8020244:	6270      	str	r0, [r6, #36]	; 0x24
 8020246:	b920      	cbnz	r0, 8020252 <_dtoa_r+0x32>
 8020248:	4bab      	ldr	r3, [pc, #684]	; (80204f8 <_dtoa_r+0x2d8>)
 802024a:	21ea      	movs	r1, #234	; 0xea
 802024c:	48ab      	ldr	r0, [pc, #684]	; (80204fc <_dtoa_r+0x2dc>)
 802024e:	f7ff ff3d 	bl	80200cc <__assert_func>
 8020252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020256:	6005      	str	r5, [r0, #0]
 8020258:	60c5      	str	r5, [r0, #12]
 802025a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802025c:	6819      	ldr	r1, [r3, #0]
 802025e:	b151      	cbz	r1, 8020276 <_dtoa_r+0x56>
 8020260:	685a      	ldr	r2, [r3, #4]
 8020262:	604a      	str	r2, [r1, #4]
 8020264:	2301      	movs	r3, #1
 8020266:	4093      	lsls	r3, r2
 8020268:	608b      	str	r3, [r1, #8]
 802026a:	4630      	mov	r0, r6
 802026c:	f001 fb62 	bl	8021934 <_Bfree>
 8020270:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8020272:	2200      	movs	r2, #0
 8020274:	601a      	str	r2, [r3, #0]
 8020276:	f1b9 0300 	subs.w	r3, r9, #0
 802027a:	bfbb      	ittet	lt
 802027c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8020280:	9303      	strlt	r3, [sp, #12]
 8020282:	2300      	movge	r3, #0
 8020284:	2201      	movlt	r2, #1
 8020286:	bfac      	ite	ge
 8020288:	6023      	strge	r3, [r4, #0]
 802028a:	6022      	strlt	r2, [r4, #0]
 802028c:	4b9c      	ldr	r3, [pc, #624]	; (8020500 <_dtoa_r+0x2e0>)
 802028e:	9c03      	ldr	r4, [sp, #12]
 8020290:	43a3      	bics	r3, r4
 8020292:	d11a      	bne.n	80202ca <_dtoa_r+0xaa>
 8020294:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020296:	f242 730f 	movw	r3, #9999	; 0x270f
 802029a:	6013      	str	r3, [r2, #0]
 802029c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80202a0:	ea53 0308 	orrs.w	r3, r3, r8
 80202a4:	f000 8512 	beq.w	8020ccc <_dtoa_r+0xaac>
 80202a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80202aa:	b953      	cbnz	r3, 80202c2 <_dtoa_r+0xa2>
 80202ac:	4b95      	ldr	r3, [pc, #596]	; (8020504 <_dtoa_r+0x2e4>)
 80202ae:	e01f      	b.n	80202f0 <_dtoa_r+0xd0>
 80202b0:	4b95      	ldr	r3, [pc, #596]	; (8020508 <_dtoa_r+0x2e8>)
 80202b2:	9300      	str	r3, [sp, #0]
 80202b4:	3308      	adds	r3, #8
 80202b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80202b8:	6013      	str	r3, [r2, #0]
 80202ba:	9800      	ldr	r0, [sp, #0]
 80202bc:	b015      	add	sp, #84	; 0x54
 80202be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202c2:	4b90      	ldr	r3, [pc, #576]	; (8020504 <_dtoa_r+0x2e4>)
 80202c4:	9300      	str	r3, [sp, #0]
 80202c6:	3303      	adds	r3, #3
 80202c8:	e7f5      	b.n	80202b6 <_dtoa_r+0x96>
 80202ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80202ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80202d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202d6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80202da:	d10b      	bne.n	80202f4 <_dtoa_r+0xd4>
 80202dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80202de:	2301      	movs	r3, #1
 80202e0:	6013      	str	r3, [r2, #0]
 80202e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	f000 84ee 	beq.w	8020cc6 <_dtoa_r+0xaa6>
 80202ea:	4888      	ldr	r0, [pc, #544]	; (802050c <_dtoa_r+0x2ec>)
 80202ec:	6018      	str	r0, [r3, #0]
 80202ee:	1e43      	subs	r3, r0, #1
 80202f0:	9300      	str	r3, [sp, #0]
 80202f2:	e7e2      	b.n	80202ba <_dtoa_r+0x9a>
 80202f4:	a913      	add	r1, sp, #76	; 0x4c
 80202f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80202fa:	aa12      	add	r2, sp, #72	; 0x48
 80202fc:	4630      	mov	r0, r6
 80202fe:	f001 fec1 	bl	8022084 <__d2b>
 8020302:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8020306:	4605      	mov	r5, r0
 8020308:	9812      	ldr	r0, [sp, #72]	; 0x48
 802030a:	2900      	cmp	r1, #0
 802030c:	d047      	beq.n	802039e <_dtoa_r+0x17e>
 802030e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020310:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020318:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 802031c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020320:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8020324:	2400      	movs	r4, #0
 8020326:	ec43 2b16 	vmov	d6, r2, r3
 802032a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 802032e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80204e0 <_dtoa_r+0x2c0>
 8020332:	ee36 7b47 	vsub.f64	d7, d6, d7
 8020336:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80204e8 <_dtoa_r+0x2c8>
 802033a:	eea7 6b05 	vfma.f64	d6, d7, d5
 802033e:	eeb0 7b46 	vmov.f64	d7, d6
 8020342:	ee06 1a90 	vmov	s13, r1
 8020346:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 802034a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80204f0 <_dtoa_r+0x2d0>
 802034e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8020352:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8020356:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 802035a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802035e:	ee16 ba90 	vmov	fp, s13
 8020362:	9411      	str	r4, [sp, #68]	; 0x44
 8020364:	d508      	bpl.n	8020378 <_dtoa_r+0x158>
 8020366:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 802036a:	eeb4 6b47 	vcmp.f64	d6, d7
 802036e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020372:	bf18      	it	ne
 8020374:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8020378:	f1bb 0f16 	cmp.w	fp, #22
 802037c:	d832      	bhi.n	80203e4 <_dtoa_r+0x1c4>
 802037e:	4b64      	ldr	r3, [pc, #400]	; (8020510 <_dtoa_r+0x2f0>)
 8020380:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8020384:	ed93 7b00 	vldr	d7, [r3]
 8020388:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802038c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020394:	d501      	bpl.n	802039a <_dtoa_r+0x17a>
 8020396:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802039a:	2300      	movs	r3, #0
 802039c:	e023      	b.n	80203e6 <_dtoa_r+0x1c6>
 802039e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80203a0:	4401      	add	r1, r0
 80203a2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80203a6:	2b20      	cmp	r3, #32
 80203a8:	bfc3      	ittte	gt
 80203aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80203ae:	fa04 f303 	lslgt.w	r3, r4, r3
 80203b2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80203b6:	f1c3 0320 	rsble	r3, r3, #32
 80203ba:	bfc6      	itte	gt
 80203bc:	fa28 f804 	lsrgt.w	r8, r8, r4
 80203c0:	ea43 0308 	orrgt.w	r3, r3, r8
 80203c4:	fa08 f303 	lslle.w	r3, r8, r3
 80203c8:	ee07 3a90 	vmov	s15, r3
 80203cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80203d0:	3901      	subs	r1, #1
 80203d2:	ed8d 7b00 	vstr	d7, [sp]
 80203d6:	9c01      	ldr	r4, [sp, #4]
 80203d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80203dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80203e0:	2401      	movs	r4, #1
 80203e2:	e7a0      	b.n	8020326 <_dtoa_r+0x106>
 80203e4:	2301      	movs	r3, #1
 80203e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80203e8:	1a43      	subs	r3, r0, r1
 80203ea:	1e5a      	subs	r2, r3, #1
 80203ec:	bf45      	ittet	mi
 80203ee:	f1c3 0301 	rsbmi	r3, r3, #1
 80203f2:	9305      	strmi	r3, [sp, #20]
 80203f4:	2300      	movpl	r3, #0
 80203f6:	2300      	movmi	r3, #0
 80203f8:	9206      	str	r2, [sp, #24]
 80203fa:	bf54      	ite	pl
 80203fc:	9305      	strpl	r3, [sp, #20]
 80203fe:	9306      	strmi	r3, [sp, #24]
 8020400:	f1bb 0f00 	cmp.w	fp, #0
 8020404:	db18      	blt.n	8020438 <_dtoa_r+0x218>
 8020406:	9b06      	ldr	r3, [sp, #24]
 8020408:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 802040c:	445b      	add	r3, fp
 802040e:	9306      	str	r3, [sp, #24]
 8020410:	2300      	movs	r3, #0
 8020412:	9a07      	ldr	r2, [sp, #28]
 8020414:	2a09      	cmp	r2, #9
 8020416:	d849      	bhi.n	80204ac <_dtoa_r+0x28c>
 8020418:	2a05      	cmp	r2, #5
 802041a:	bfc4      	itt	gt
 802041c:	3a04      	subgt	r2, #4
 802041e:	9207      	strgt	r2, [sp, #28]
 8020420:	9a07      	ldr	r2, [sp, #28]
 8020422:	f1a2 0202 	sub.w	r2, r2, #2
 8020426:	bfcc      	ite	gt
 8020428:	2400      	movgt	r4, #0
 802042a:	2401      	movle	r4, #1
 802042c:	2a03      	cmp	r2, #3
 802042e:	d848      	bhi.n	80204c2 <_dtoa_r+0x2a2>
 8020430:	e8df f002 	tbb	[pc, r2]
 8020434:	3a2c2e0b 	.word	0x3a2c2e0b
 8020438:	9b05      	ldr	r3, [sp, #20]
 802043a:	2200      	movs	r2, #0
 802043c:	eba3 030b 	sub.w	r3, r3, fp
 8020440:	9305      	str	r3, [sp, #20]
 8020442:	920e      	str	r2, [sp, #56]	; 0x38
 8020444:	f1cb 0300 	rsb	r3, fp, #0
 8020448:	e7e3      	b.n	8020412 <_dtoa_r+0x1f2>
 802044a:	2200      	movs	r2, #0
 802044c:	9208      	str	r2, [sp, #32]
 802044e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020450:	2a00      	cmp	r2, #0
 8020452:	dc39      	bgt.n	80204c8 <_dtoa_r+0x2a8>
 8020454:	f04f 0a01 	mov.w	sl, #1
 8020458:	46d1      	mov	r9, sl
 802045a:	4652      	mov	r2, sl
 802045c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8020460:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8020462:	2100      	movs	r1, #0
 8020464:	6079      	str	r1, [r7, #4]
 8020466:	2004      	movs	r0, #4
 8020468:	f100 0c14 	add.w	ip, r0, #20
 802046c:	4594      	cmp	ip, r2
 802046e:	6879      	ldr	r1, [r7, #4]
 8020470:	d92f      	bls.n	80204d2 <_dtoa_r+0x2b2>
 8020472:	4630      	mov	r0, r6
 8020474:	930c      	str	r3, [sp, #48]	; 0x30
 8020476:	f001 fa1d 	bl	80218b4 <_Balloc>
 802047a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802047c:	9000      	str	r0, [sp, #0]
 802047e:	4602      	mov	r2, r0
 8020480:	2800      	cmp	r0, #0
 8020482:	d149      	bne.n	8020518 <_dtoa_r+0x2f8>
 8020484:	4b23      	ldr	r3, [pc, #140]	; (8020514 <_dtoa_r+0x2f4>)
 8020486:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802048a:	e6df      	b.n	802024c <_dtoa_r+0x2c>
 802048c:	2201      	movs	r2, #1
 802048e:	e7dd      	b.n	802044c <_dtoa_r+0x22c>
 8020490:	2200      	movs	r2, #0
 8020492:	9208      	str	r2, [sp, #32]
 8020494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020496:	eb0b 0a02 	add.w	sl, fp, r2
 802049a:	f10a 0901 	add.w	r9, sl, #1
 802049e:	464a      	mov	r2, r9
 80204a0:	2a01      	cmp	r2, #1
 80204a2:	bfb8      	it	lt
 80204a4:	2201      	movlt	r2, #1
 80204a6:	e7db      	b.n	8020460 <_dtoa_r+0x240>
 80204a8:	2201      	movs	r2, #1
 80204aa:	e7f2      	b.n	8020492 <_dtoa_r+0x272>
 80204ac:	2401      	movs	r4, #1
 80204ae:	2200      	movs	r2, #0
 80204b0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80204b4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80204b8:	2100      	movs	r1, #0
 80204ba:	46d1      	mov	r9, sl
 80204bc:	2212      	movs	r2, #18
 80204be:	9109      	str	r1, [sp, #36]	; 0x24
 80204c0:	e7ce      	b.n	8020460 <_dtoa_r+0x240>
 80204c2:	2201      	movs	r2, #1
 80204c4:	9208      	str	r2, [sp, #32]
 80204c6:	e7f5      	b.n	80204b4 <_dtoa_r+0x294>
 80204c8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80204cc:	46d1      	mov	r9, sl
 80204ce:	4652      	mov	r2, sl
 80204d0:	e7c6      	b.n	8020460 <_dtoa_r+0x240>
 80204d2:	3101      	adds	r1, #1
 80204d4:	6079      	str	r1, [r7, #4]
 80204d6:	0040      	lsls	r0, r0, #1
 80204d8:	e7c6      	b.n	8020468 <_dtoa_r+0x248>
 80204da:	bf00      	nop
 80204dc:	f3af 8000 	nop.w
 80204e0:	636f4361 	.word	0x636f4361
 80204e4:	3fd287a7 	.word	0x3fd287a7
 80204e8:	8b60c8b3 	.word	0x8b60c8b3
 80204ec:	3fc68a28 	.word	0x3fc68a28
 80204f0:	509f79fb 	.word	0x509f79fb
 80204f4:	3fd34413 	.word	0x3fd34413
 80204f8:	0802748d 	.word	0x0802748d
 80204fc:	080275a1 	.word	0x080275a1
 8020500:	7ff00000 	.word	0x7ff00000
 8020504:	0802759d 	.word	0x0802759d
 8020508:	08027594 	.word	0x08027594
 802050c:	08027465 	.word	0x08027465
 8020510:	08027780 	.word	0x08027780
 8020514:	08027600 	.word	0x08027600
 8020518:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802051a:	9900      	ldr	r1, [sp, #0]
 802051c:	6011      	str	r1, [r2, #0]
 802051e:	f1b9 0f0e 	cmp.w	r9, #14
 8020522:	d872      	bhi.n	802060a <_dtoa_r+0x3ea>
 8020524:	2c00      	cmp	r4, #0
 8020526:	d070      	beq.n	802060a <_dtoa_r+0x3ea>
 8020528:	f1bb 0f00 	cmp.w	fp, #0
 802052c:	f340 80a6 	ble.w	802067c <_dtoa_r+0x45c>
 8020530:	49ca      	ldr	r1, [pc, #808]	; (802085c <_dtoa_r+0x63c>)
 8020532:	f00b 020f 	and.w	r2, fp, #15
 8020536:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 802053a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802053e:	ed92 7b00 	vldr	d7, [r2]
 8020542:	ea4f 112b 	mov.w	r1, fp, asr #4
 8020546:	f000 808d 	beq.w	8020664 <_dtoa_r+0x444>
 802054a:	4ac5      	ldr	r2, [pc, #788]	; (8020860 <_dtoa_r+0x640>)
 802054c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8020550:	ed92 6b08 	vldr	d6, [r2, #32]
 8020554:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8020558:	ed8d 6b02 	vstr	d6, [sp, #8]
 802055c:	f001 010f 	and.w	r1, r1, #15
 8020560:	2203      	movs	r2, #3
 8020562:	48bf      	ldr	r0, [pc, #764]	; (8020860 <_dtoa_r+0x640>)
 8020564:	2900      	cmp	r1, #0
 8020566:	d17f      	bne.n	8020668 <_dtoa_r+0x448>
 8020568:	ed9d 6b02 	vldr	d6, [sp, #8]
 802056c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8020570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8020574:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8020576:	2900      	cmp	r1, #0
 8020578:	f000 80b2 	beq.w	80206e0 <_dtoa_r+0x4c0>
 802057c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8020580:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020584:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8020588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802058c:	f140 80a8 	bpl.w	80206e0 <_dtoa_r+0x4c0>
 8020590:	f1b9 0f00 	cmp.w	r9, #0
 8020594:	f000 80a4 	beq.w	80206e0 <_dtoa_r+0x4c0>
 8020598:	f1ba 0f00 	cmp.w	sl, #0
 802059c:	dd31      	ble.n	8020602 <_dtoa_r+0x3e2>
 802059e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80205a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80205a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80205aa:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80205ae:	3201      	adds	r2, #1
 80205b0:	4650      	mov	r0, sl
 80205b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80205b6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80205ba:	ee07 2a90 	vmov	s15, r2
 80205be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80205c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80205c6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80205ca:	9c03      	ldr	r4, [sp, #12]
 80205cc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80205d0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80205d4:	2800      	cmp	r0, #0
 80205d6:	f040 8086 	bne.w	80206e6 <_dtoa_r+0x4c6>
 80205da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80205de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80205e2:	ec42 1b17 	vmov	d7, r1, r2
 80205e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80205ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205ee:	f300 8272 	bgt.w	8020ad6 <_dtoa_r+0x8b6>
 80205f2:	eeb1 7b47 	vneg.f64	d7, d7
 80205f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80205fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205fe:	f100 8267 	bmi.w	8020ad0 <_dtoa_r+0x8b0>
 8020602:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8020606:	e9cd 1202 	strd	r1, r2, [sp, #8]
 802060a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802060c:	2a00      	cmp	r2, #0
 802060e:	f2c0 8129 	blt.w	8020864 <_dtoa_r+0x644>
 8020612:	f1bb 0f0e 	cmp.w	fp, #14
 8020616:	f300 8125 	bgt.w	8020864 <_dtoa_r+0x644>
 802061a:	4b90      	ldr	r3, [pc, #576]	; (802085c <_dtoa_r+0x63c>)
 802061c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8020620:	ed93 6b00 	vldr	d6, [r3]
 8020624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020626:	2b00      	cmp	r3, #0
 8020628:	f280 80c3 	bge.w	80207b2 <_dtoa_r+0x592>
 802062c:	f1b9 0f00 	cmp.w	r9, #0
 8020630:	f300 80bf 	bgt.w	80207b2 <_dtoa_r+0x592>
 8020634:	f040 824c 	bne.w	8020ad0 <_dtoa_r+0x8b0>
 8020638:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802063c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8020640:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020644:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802064c:	464c      	mov	r4, r9
 802064e:	464f      	mov	r7, r9
 8020650:	f280 8222 	bge.w	8020a98 <_dtoa_r+0x878>
 8020654:	f8dd 8000 	ldr.w	r8, [sp]
 8020658:	2331      	movs	r3, #49	; 0x31
 802065a:	f808 3b01 	strb.w	r3, [r8], #1
 802065e:	f10b 0b01 	add.w	fp, fp, #1
 8020662:	e21e      	b.n	8020aa2 <_dtoa_r+0x882>
 8020664:	2202      	movs	r2, #2
 8020666:	e77c      	b.n	8020562 <_dtoa_r+0x342>
 8020668:	07cc      	lsls	r4, r1, #31
 802066a:	d504      	bpl.n	8020676 <_dtoa_r+0x456>
 802066c:	ed90 6b00 	vldr	d6, [r0]
 8020670:	3201      	adds	r2, #1
 8020672:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020676:	1049      	asrs	r1, r1, #1
 8020678:	3008      	adds	r0, #8
 802067a:	e773      	b.n	8020564 <_dtoa_r+0x344>
 802067c:	d02e      	beq.n	80206dc <_dtoa_r+0x4bc>
 802067e:	f1cb 0100 	rsb	r1, fp, #0
 8020682:	4a76      	ldr	r2, [pc, #472]	; (802085c <_dtoa_r+0x63c>)
 8020684:	f001 000f 	and.w	r0, r1, #15
 8020688:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802068c:	ed92 7b00 	vldr	d7, [r2]
 8020690:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8020694:	ee26 7b07 	vmul.f64	d7, d6, d7
 8020698:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802069c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80206a0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80206a4:	486e      	ldr	r0, [pc, #440]	; (8020860 <_dtoa_r+0x640>)
 80206a6:	1109      	asrs	r1, r1, #4
 80206a8:	2400      	movs	r4, #0
 80206aa:	2202      	movs	r2, #2
 80206ac:	b939      	cbnz	r1, 80206be <_dtoa_r+0x49e>
 80206ae:	2c00      	cmp	r4, #0
 80206b0:	f43f af60 	beq.w	8020574 <_dtoa_r+0x354>
 80206b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80206b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80206bc:	e75a      	b.n	8020574 <_dtoa_r+0x354>
 80206be:	07cf      	lsls	r7, r1, #31
 80206c0:	d509      	bpl.n	80206d6 <_dtoa_r+0x4b6>
 80206c2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80206c6:	ed90 7b00 	vldr	d7, [r0]
 80206ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80206ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80206d2:	3201      	adds	r2, #1
 80206d4:	2401      	movs	r4, #1
 80206d6:	1049      	asrs	r1, r1, #1
 80206d8:	3008      	adds	r0, #8
 80206da:	e7e7      	b.n	80206ac <_dtoa_r+0x48c>
 80206dc:	2202      	movs	r2, #2
 80206de:	e749      	b.n	8020574 <_dtoa_r+0x354>
 80206e0:	465f      	mov	r7, fp
 80206e2:	4648      	mov	r0, r9
 80206e4:	e765      	b.n	80205b2 <_dtoa_r+0x392>
 80206e6:	ec42 1b17 	vmov	d7, r1, r2
 80206ea:	4a5c      	ldr	r2, [pc, #368]	; (802085c <_dtoa_r+0x63c>)
 80206ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80206f0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80206f4:	9a00      	ldr	r2, [sp, #0]
 80206f6:	1814      	adds	r4, r2, r0
 80206f8:	9a08      	ldr	r2, [sp, #32]
 80206fa:	b352      	cbz	r2, 8020752 <_dtoa_r+0x532>
 80206fc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8020700:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8020704:	f8dd 8000 	ldr.w	r8, [sp]
 8020708:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802070c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020710:	ee35 7b47 	vsub.f64	d7, d5, d7
 8020714:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8020718:	ee14 2a90 	vmov	r2, s9
 802071c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020720:	3230      	adds	r2, #48	; 0x30
 8020722:	ee36 6b45 	vsub.f64	d6, d6, d5
 8020726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802072a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802072e:	f808 2b01 	strb.w	r2, [r8], #1
 8020732:	d439      	bmi.n	80207a8 <_dtoa_r+0x588>
 8020734:	ee32 5b46 	vsub.f64	d5, d2, d6
 8020738:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020740:	d472      	bmi.n	8020828 <_dtoa_r+0x608>
 8020742:	45a0      	cmp	r8, r4
 8020744:	f43f af5d 	beq.w	8020602 <_dtoa_r+0x3e2>
 8020748:	ee27 7b03 	vmul.f64	d7, d7, d3
 802074c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8020750:	e7e0      	b.n	8020714 <_dtoa_r+0x4f4>
 8020752:	f8dd 8000 	ldr.w	r8, [sp]
 8020756:	ee27 7b04 	vmul.f64	d7, d7, d4
 802075a:	4621      	mov	r1, r4
 802075c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8020760:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8020764:	ee14 2a90 	vmov	r2, s9
 8020768:	3230      	adds	r2, #48	; 0x30
 802076a:	f808 2b01 	strb.w	r2, [r8], #1
 802076e:	45a0      	cmp	r8, r4
 8020770:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8020774:	ee36 6b45 	vsub.f64	d6, d6, d5
 8020778:	d118      	bne.n	80207ac <_dtoa_r+0x58c>
 802077a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802077e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8020782:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8020786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802078a:	dc4d      	bgt.n	8020828 <_dtoa_r+0x608>
 802078c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8020790:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8020794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020798:	f57f af33 	bpl.w	8020602 <_dtoa_r+0x3e2>
 802079c:	4688      	mov	r8, r1
 802079e:	3901      	subs	r1, #1
 80207a0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80207a4:	2b30      	cmp	r3, #48	; 0x30
 80207a6:	d0f9      	beq.n	802079c <_dtoa_r+0x57c>
 80207a8:	46bb      	mov	fp, r7
 80207aa:	e02a      	b.n	8020802 <_dtoa_r+0x5e2>
 80207ac:	ee26 6b03 	vmul.f64	d6, d6, d3
 80207b0:	e7d6      	b.n	8020760 <_dtoa_r+0x540>
 80207b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80207b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80207ba:	f8dd 8000 	ldr.w	r8, [sp]
 80207be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80207c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80207c6:	ee15 3a10 	vmov	r3, s10
 80207ca:	3330      	adds	r3, #48	; 0x30
 80207cc:	f808 3b01 	strb.w	r3, [r8], #1
 80207d0:	9b00      	ldr	r3, [sp, #0]
 80207d2:	eba8 0303 	sub.w	r3, r8, r3
 80207d6:	4599      	cmp	r9, r3
 80207d8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80207dc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80207e0:	d133      	bne.n	802084a <_dtoa_r+0x62a>
 80207e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80207e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80207ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207ee:	dc1a      	bgt.n	8020826 <_dtoa_r+0x606>
 80207f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80207f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207f8:	d103      	bne.n	8020802 <_dtoa_r+0x5e2>
 80207fa:	ee15 3a10 	vmov	r3, s10
 80207fe:	07d9      	lsls	r1, r3, #31
 8020800:	d411      	bmi.n	8020826 <_dtoa_r+0x606>
 8020802:	4629      	mov	r1, r5
 8020804:	4630      	mov	r0, r6
 8020806:	f001 f895 	bl	8021934 <_Bfree>
 802080a:	2300      	movs	r3, #0
 802080c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802080e:	f888 3000 	strb.w	r3, [r8]
 8020812:	f10b 0301 	add.w	r3, fp, #1
 8020816:	6013      	str	r3, [r2, #0]
 8020818:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802081a:	2b00      	cmp	r3, #0
 802081c:	f43f ad4d 	beq.w	80202ba <_dtoa_r+0x9a>
 8020820:	f8c3 8000 	str.w	r8, [r3]
 8020824:	e549      	b.n	80202ba <_dtoa_r+0x9a>
 8020826:	465f      	mov	r7, fp
 8020828:	4643      	mov	r3, r8
 802082a:	4698      	mov	r8, r3
 802082c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020830:	2a39      	cmp	r2, #57	; 0x39
 8020832:	d106      	bne.n	8020842 <_dtoa_r+0x622>
 8020834:	9a00      	ldr	r2, [sp, #0]
 8020836:	429a      	cmp	r2, r3
 8020838:	d1f7      	bne.n	802082a <_dtoa_r+0x60a>
 802083a:	9900      	ldr	r1, [sp, #0]
 802083c:	2230      	movs	r2, #48	; 0x30
 802083e:	3701      	adds	r7, #1
 8020840:	700a      	strb	r2, [r1, #0]
 8020842:	781a      	ldrb	r2, [r3, #0]
 8020844:	3201      	adds	r2, #1
 8020846:	701a      	strb	r2, [r3, #0]
 8020848:	e7ae      	b.n	80207a8 <_dtoa_r+0x588>
 802084a:	ee27 7b04 	vmul.f64	d7, d7, d4
 802084e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020856:	d1b2      	bne.n	80207be <_dtoa_r+0x59e>
 8020858:	e7d3      	b.n	8020802 <_dtoa_r+0x5e2>
 802085a:	bf00      	nop
 802085c:	08027780 	.word	0x08027780
 8020860:	08027758 	.word	0x08027758
 8020864:	9908      	ldr	r1, [sp, #32]
 8020866:	2900      	cmp	r1, #0
 8020868:	f000 80d1 	beq.w	8020a0e <_dtoa_r+0x7ee>
 802086c:	9907      	ldr	r1, [sp, #28]
 802086e:	2901      	cmp	r1, #1
 8020870:	f300 80b4 	bgt.w	80209dc <_dtoa_r+0x7bc>
 8020874:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020876:	2900      	cmp	r1, #0
 8020878:	f000 80ac 	beq.w	80209d4 <_dtoa_r+0x7b4>
 802087c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8020880:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020884:	461c      	mov	r4, r3
 8020886:	930a      	str	r3, [sp, #40]	; 0x28
 8020888:	9b05      	ldr	r3, [sp, #20]
 802088a:	4413      	add	r3, r2
 802088c:	9305      	str	r3, [sp, #20]
 802088e:	9b06      	ldr	r3, [sp, #24]
 8020890:	2101      	movs	r1, #1
 8020892:	4413      	add	r3, r2
 8020894:	4630      	mov	r0, r6
 8020896:	9306      	str	r3, [sp, #24]
 8020898:	f001 f952 	bl	8021b40 <__i2b>
 802089c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802089e:	4607      	mov	r7, r0
 80208a0:	f1b8 0f00 	cmp.w	r8, #0
 80208a4:	dd0d      	ble.n	80208c2 <_dtoa_r+0x6a2>
 80208a6:	9a06      	ldr	r2, [sp, #24]
 80208a8:	2a00      	cmp	r2, #0
 80208aa:	dd0a      	ble.n	80208c2 <_dtoa_r+0x6a2>
 80208ac:	4542      	cmp	r2, r8
 80208ae:	9905      	ldr	r1, [sp, #20]
 80208b0:	bfa8      	it	ge
 80208b2:	4642      	movge	r2, r8
 80208b4:	1a89      	subs	r1, r1, r2
 80208b6:	9105      	str	r1, [sp, #20]
 80208b8:	9906      	ldr	r1, [sp, #24]
 80208ba:	eba8 0802 	sub.w	r8, r8, r2
 80208be:	1a8a      	subs	r2, r1, r2
 80208c0:	9206      	str	r2, [sp, #24]
 80208c2:	b303      	cbz	r3, 8020906 <_dtoa_r+0x6e6>
 80208c4:	9a08      	ldr	r2, [sp, #32]
 80208c6:	2a00      	cmp	r2, #0
 80208c8:	f000 80a6 	beq.w	8020a18 <_dtoa_r+0x7f8>
 80208cc:	2c00      	cmp	r4, #0
 80208ce:	dd13      	ble.n	80208f8 <_dtoa_r+0x6d8>
 80208d0:	4639      	mov	r1, r7
 80208d2:	4622      	mov	r2, r4
 80208d4:	4630      	mov	r0, r6
 80208d6:	930c      	str	r3, [sp, #48]	; 0x30
 80208d8:	f001 f9ee 	bl	8021cb8 <__pow5mult>
 80208dc:	462a      	mov	r2, r5
 80208de:	4601      	mov	r1, r0
 80208e0:	4607      	mov	r7, r0
 80208e2:	4630      	mov	r0, r6
 80208e4:	f001 f942 	bl	8021b6c <__multiply>
 80208e8:	4629      	mov	r1, r5
 80208ea:	900a      	str	r0, [sp, #40]	; 0x28
 80208ec:	4630      	mov	r0, r6
 80208ee:	f001 f821 	bl	8021934 <_Bfree>
 80208f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80208f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208f6:	4615      	mov	r5, r2
 80208f8:	1b1a      	subs	r2, r3, r4
 80208fa:	d004      	beq.n	8020906 <_dtoa_r+0x6e6>
 80208fc:	4629      	mov	r1, r5
 80208fe:	4630      	mov	r0, r6
 8020900:	f001 f9da 	bl	8021cb8 <__pow5mult>
 8020904:	4605      	mov	r5, r0
 8020906:	2101      	movs	r1, #1
 8020908:	4630      	mov	r0, r6
 802090a:	f001 f919 	bl	8021b40 <__i2b>
 802090e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020910:	2b00      	cmp	r3, #0
 8020912:	4604      	mov	r4, r0
 8020914:	f340 8082 	ble.w	8020a1c <_dtoa_r+0x7fc>
 8020918:	461a      	mov	r2, r3
 802091a:	4601      	mov	r1, r0
 802091c:	4630      	mov	r0, r6
 802091e:	f001 f9cb 	bl	8021cb8 <__pow5mult>
 8020922:	9b07      	ldr	r3, [sp, #28]
 8020924:	2b01      	cmp	r3, #1
 8020926:	4604      	mov	r4, r0
 8020928:	dd7b      	ble.n	8020a22 <_dtoa_r+0x802>
 802092a:	2300      	movs	r3, #0
 802092c:	930a      	str	r3, [sp, #40]	; 0x28
 802092e:	6922      	ldr	r2, [r4, #16]
 8020930:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020934:	6910      	ldr	r0, [r2, #16]
 8020936:	f001 f8b3 	bl	8021aa0 <__hi0bits>
 802093a:	f1c0 0020 	rsb	r0, r0, #32
 802093e:	9b06      	ldr	r3, [sp, #24]
 8020940:	4418      	add	r0, r3
 8020942:	f010 001f 	ands.w	r0, r0, #31
 8020946:	f000 808d 	beq.w	8020a64 <_dtoa_r+0x844>
 802094a:	f1c0 0220 	rsb	r2, r0, #32
 802094e:	2a04      	cmp	r2, #4
 8020950:	f340 8086 	ble.w	8020a60 <_dtoa_r+0x840>
 8020954:	f1c0 001c 	rsb	r0, r0, #28
 8020958:	9b05      	ldr	r3, [sp, #20]
 802095a:	4403      	add	r3, r0
 802095c:	9305      	str	r3, [sp, #20]
 802095e:	9b06      	ldr	r3, [sp, #24]
 8020960:	4403      	add	r3, r0
 8020962:	4480      	add	r8, r0
 8020964:	9306      	str	r3, [sp, #24]
 8020966:	9b05      	ldr	r3, [sp, #20]
 8020968:	2b00      	cmp	r3, #0
 802096a:	dd05      	ble.n	8020978 <_dtoa_r+0x758>
 802096c:	4629      	mov	r1, r5
 802096e:	461a      	mov	r2, r3
 8020970:	4630      	mov	r0, r6
 8020972:	f001 f9fb 	bl	8021d6c <__lshift>
 8020976:	4605      	mov	r5, r0
 8020978:	9b06      	ldr	r3, [sp, #24]
 802097a:	2b00      	cmp	r3, #0
 802097c:	dd05      	ble.n	802098a <_dtoa_r+0x76a>
 802097e:	4621      	mov	r1, r4
 8020980:	461a      	mov	r2, r3
 8020982:	4630      	mov	r0, r6
 8020984:	f001 f9f2 	bl	8021d6c <__lshift>
 8020988:	4604      	mov	r4, r0
 802098a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802098c:	2b00      	cmp	r3, #0
 802098e:	d06b      	beq.n	8020a68 <_dtoa_r+0x848>
 8020990:	4621      	mov	r1, r4
 8020992:	4628      	mov	r0, r5
 8020994:	f001 fa56 	bl	8021e44 <__mcmp>
 8020998:	2800      	cmp	r0, #0
 802099a:	da65      	bge.n	8020a68 <_dtoa_r+0x848>
 802099c:	2300      	movs	r3, #0
 802099e:	4629      	mov	r1, r5
 80209a0:	220a      	movs	r2, #10
 80209a2:	4630      	mov	r0, r6
 80209a4:	f000 ffe8 	bl	8021978 <__multadd>
 80209a8:	9b08      	ldr	r3, [sp, #32]
 80209aa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80209ae:	4605      	mov	r5, r0
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	f000 8192 	beq.w	8020cda <_dtoa_r+0xaba>
 80209b6:	4639      	mov	r1, r7
 80209b8:	2300      	movs	r3, #0
 80209ba:	220a      	movs	r2, #10
 80209bc:	4630      	mov	r0, r6
 80209be:	f000 ffdb 	bl	8021978 <__multadd>
 80209c2:	f1ba 0f00 	cmp.w	sl, #0
 80209c6:	4607      	mov	r7, r0
 80209c8:	f300 808e 	bgt.w	8020ae8 <_dtoa_r+0x8c8>
 80209cc:	9b07      	ldr	r3, [sp, #28]
 80209ce:	2b02      	cmp	r3, #2
 80209d0:	dc51      	bgt.n	8020a76 <_dtoa_r+0x856>
 80209d2:	e089      	b.n	8020ae8 <_dtoa_r+0x8c8>
 80209d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80209d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80209da:	e751      	b.n	8020880 <_dtoa_r+0x660>
 80209dc:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80209e0:	42a3      	cmp	r3, r4
 80209e2:	bfbf      	itttt	lt
 80209e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80209e6:	1ae3      	sublt	r3, r4, r3
 80209e8:	18d2      	addlt	r2, r2, r3
 80209ea:	4613      	movlt	r3, r2
 80209ec:	bfb7      	itett	lt
 80209ee:	930e      	strlt	r3, [sp, #56]	; 0x38
 80209f0:	1b1c      	subge	r4, r3, r4
 80209f2:	4623      	movlt	r3, r4
 80209f4:	2400      	movlt	r4, #0
 80209f6:	f1b9 0f00 	cmp.w	r9, #0
 80209fa:	bfb5      	itete	lt
 80209fc:	9a05      	ldrlt	r2, [sp, #20]
 80209fe:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8020a02:	eba2 0809 	sublt.w	r8, r2, r9
 8020a06:	464a      	movge	r2, r9
 8020a08:	bfb8      	it	lt
 8020a0a:	2200      	movlt	r2, #0
 8020a0c:	e73b      	b.n	8020886 <_dtoa_r+0x666>
 8020a0e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020a12:	9f08      	ldr	r7, [sp, #32]
 8020a14:	461c      	mov	r4, r3
 8020a16:	e743      	b.n	80208a0 <_dtoa_r+0x680>
 8020a18:	461a      	mov	r2, r3
 8020a1a:	e76f      	b.n	80208fc <_dtoa_r+0x6dc>
 8020a1c:	9b07      	ldr	r3, [sp, #28]
 8020a1e:	2b01      	cmp	r3, #1
 8020a20:	dc18      	bgt.n	8020a54 <_dtoa_r+0x834>
 8020a22:	9b02      	ldr	r3, [sp, #8]
 8020a24:	b9b3      	cbnz	r3, 8020a54 <_dtoa_r+0x834>
 8020a26:	9b03      	ldr	r3, [sp, #12]
 8020a28:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8020a2c:	b9a2      	cbnz	r2, 8020a58 <_dtoa_r+0x838>
 8020a2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8020a32:	0d12      	lsrs	r2, r2, #20
 8020a34:	0512      	lsls	r2, r2, #20
 8020a36:	b18a      	cbz	r2, 8020a5c <_dtoa_r+0x83c>
 8020a38:	9b05      	ldr	r3, [sp, #20]
 8020a3a:	3301      	adds	r3, #1
 8020a3c:	9305      	str	r3, [sp, #20]
 8020a3e:	9b06      	ldr	r3, [sp, #24]
 8020a40:	3301      	adds	r3, #1
 8020a42:	9306      	str	r3, [sp, #24]
 8020a44:	2301      	movs	r3, #1
 8020a46:	930a      	str	r3, [sp, #40]	; 0x28
 8020a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a4a:	2b00      	cmp	r3, #0
 8020a4c:	f47f af6f 	bne.w	802092e <_dtoa_r+0x70e>
 8020a50:	2001      	movs	r0, #1
 8020a52:	e774      	b.n	802093e <_dtoa_r+0x71e>
 8020a54:	2300      	movs	r3, #0
 8020a56:	e7f6      	b.n	8020a46 <_dtoa_r+0x826>
 8020a58:	9b02      	ldr	r3, [sp, #8]
 8020a5a:	e7f4      	b.n	8020a46 <_dtoa_r+0x826>
 8020a5c:	920a      	str	r2, [sp, #40]	; 0x28
 8020a5e:	e7f3      	b.n	8020a48 <_dtoa_r+0x828>
 8020a60:	d081      	beq.n	8020966 <_dtoa_r+0x746>
 8020a62:	4610      	mov	r0, r2
 8020a64:	301c      	adds	r0, #28
 8020a66:	e777      	b.n	8020958 <_dtoa_r+0x738>
 8020a68:	f1b9 0f00 	cmp.w	r9, #0
 8020a6c:	dc37      	bgt.n	8020ade <_dtoa_r+0x8be>
 8020a6e:	9b07      	ldr	r3, [sp, #28]
 8020a70:	2b02      	cmp	r3, #2
 8020a72:	dd34      	ble.n	8020ade <_dtoa_r+0x8be>
 8020a74:	46ca      	mov	sl, r9
 8020a76:	f1ba 0f00 	cmp.w	sl, #0
 8020a7a:	d10d      	bne.n	8020a98 <_dtoa_r+0x878>
 8020a7c:	4621      	mov	r1, r4
 8020a7e:	4653      	mov	r3, sl
 8020a80:	2205      	movs	r2, #5
 8020a82:	4630      	mov	r0, r6
 8020a84:	f000 ff78 	bl	8021978 <__multadd>
 8020a88:	4601      	mov	r1, r0
 8020a8a:	4604      	mov	r4, r0
 8020a8c:	4628      	mov	r0, r5
 8020a8e:	f001 f9d9 	bl	8021e44 <__mcmp>
 8020a92:	2800      	cmp	r0, #0
 8020a94:	f73f adde 	bgt.w	8020654 <_dtoa_r+0x434>
 8020a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a9a:	f8dd 8000 	ldr.w	r8, [sp]
 8020a9e:	ea6f 0b03 	mvn.w	fp, r3
 8020aa2:	f04f 0900 	mov.w	r9, #0
 8020aa6:	4621      	mov	r1, r4
 8020aa8:	4630      	mov	r0, r6
 8020aaa:	f000 ff43 	bl	8021934 <_Bfree>
 8020aae:	2f00      	cmp	r7, #0
 8020ab0:	f43f aea7 	beq.w	8020802 <_dtoa_r+0x5e2>
 8020ab4:	f1b9 0f00 	cmp.w	r9, #0
 8020ab8:	d005      	beq.n	8020ac6 <_dtoa_r+0x8a6>
 8020aba:	45b9      	cmp	r9, r7
 8020abc:	d003      	beq.n	8020ac6 <_dtoa_r+0x8a6>
 8020abe:	4649      	mov	r1, r9
 8020ac0:	4630      	mov	r0, r6
 8020ac2:	f000 ff37 	bl	8021934 <_Bfree>
 8020ac6:	4639      	mov	r1, r7
 8020ac8:	4630      	mov	r0, r6
 8020aca:	f000 ff33 	bl	8021934 <_Bfree>
 8020ace:	e698      	b.n	8020802 <_dtoa_r+0x5e2>
 8020ad0:	2400      	movs	r4, #0
 8020ad2:	4627      	mov	r7, r4
 8020ad4:	e7e0      	b.n	8020a98 <_dtoa_r+0x878>
 8020ad6:	46bb      	mov	fp, r7
 8020ad8:	4604      	mov	r4, r0
 8020ada:	4607      	mov	r7, r0
 8020adc:	e5ba      	b.n	8020654 <_dtoa_r+0x434>
 8020ade:	9b08      	ldr	r3, [sp, #32]
 8020ae0:	46ca      	mov	sl, r9
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	f000 8100 	beq.w	8020ce8 <_dtoa_r+0xac8>
 8020ae8:	f1b8 0f00 	cmp.w	r8, #0
 8020aec:	dd05      	ble.n	8020afa <_dtoa_r+0x8da>
 8020aee:	4639      	mov	r1, r7
 8020af0:	4642      	mov	r2, r8
 8020af2:	4630      	mov	r0, r6
 8020af4:	f001 f93a 	bl	8021d6c <__lshift>
 8020af8:	4607      	mov	r7, r0
 8020afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d05d      	beq.n	8020bbc <_dtoa_r+0x99c>
 8020b00:	6879      	ldr	r1, [r7, #4]
 8020b02:	4630      	mov	r0, r6
 8020b04:	f000 fed6 	bl	80218b4 <_Balloc>
 8020b08:	4680      	mov	r8, r0
 8020b0a:	b928      	cbnz	r0, 8020b18 <_dtoa_r+0x8f8>
 8020b0c:	4b82      	ldr	r3, [pc, #520]	; (8020d18 <_dtoa_r+0xaf8>)
 8020b0e:	4602      	mov	r2, r0
 8020b10:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020b14:	f7ff bb9a 	b.w	802024c <_dtoa_r+0x2c>
 8020b18:	693a      	ldr	r2, [r7, #16]
 8020b1a:	3202      	adds	r2, #2
 8020b1c:	0092      	lsls	r2, r2, #2
 8020b1e:	f107 010c 	add.w	r1, r7, #12
 8020b22:	300c      	adds	r0, #12
 8020b24:	f7fd fb5e 	bl	801e1e4 <memcpy>
 8020b28:	2201      	movs	r2, #1
 8020b2a:	4641      	mov	r1, r8
 8020b2c:	4630      	mov	r0, r6
 8020b2e:	f001 f91d 	bl	8021d6c <__lshift>
 8020b32:	9b00      	ldr	r3, [sp, #0]
 8020b34:	3301      	adds	r3, #1
 8020b36:	9305      	str	r3, [sp, #20]
 8020b38:	9b00      	ldr	r3, [sp, #0]
 8020b3a:	4453      	add	r3, sl
 8020b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8020b3e:	9b02      	ldr	r3, [sp, #8]
 8020b40:	f003 0301 	and.w	r3, r3, #1
 8020b44:	46b9      	mov	r9, r7
 8020b46:	9308      	str	r3, [sp, #32]
 8020b48:	4607      	mov	r7, r0
 8020b4a:	9b05      	ldr	r3, [sp, #20]
 8020b4c:	4621      	mov	r1, r4
 8020b4e:	3b01      	subs	r3, #1
 8020b50:	4628      	mov	r0, r5
 8020b52:	9302      	str	r3, [sp, #8]
 8020b54:	f7ff fad8 	bl	8020108 <quorem>
 8020b58:	4603      	mov	r3, r0
 8020b5a:	3330      	adds	r3, #48	; 0x30
 8020b5c:	9006      	str	r0, [sp, #24]
 8020b5e:	4649      	mov	r1, r9
 8020b60:	4628      	mov	r0, r5
 8020b62:	930a      	str	r3, [sp, #40]	; 0x28
 8020b64:	f001 f96e 	bl	8021e44 <__mcmp>
 8020b68:	463a      	mov	r2, r7
 8020b6a:	4682      	mov	sl, r0
 8020b6c:	4621      	mov	r1, r4
 8020b6e:	4630      	mov	r0, r6
 8020b70:	f001 f984 	bl	8021e7c <__mdiff>
 8020b74:	68c2      	ldr	r2, [r0, #12]
 8020b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b78:	4680      	mov	r8, r0
 8020b7a:	bb0a      	cbnz	r2, 8020bc0 <_dtoa_r+0x9a0>
 8020b7c:	4601      	mov	r1, r0
 8020b7e:	4628      	mov	r0, r5
 8020b80:	f001 f960 	bl	8021e44 <__mcmp>
 8020b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b86:	4602      	mov	r2, r0
 8020b88:	4641      	mov	r1, r8
 8020b8a:	4630      	mov	r0, r6
 8020b8c:	920e      	str	r2, [sp, #56]	; 0x38
 8020b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8020b90:	f000 fed0 	bl	8021934 <_Bfree>
 8020b94:	9b07      	ldr	r3, [sp, #28]
 8020b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020b98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8020b9c:	ea43 0102 	orr.w	r1, r3, r2
 8020ba0:	9b08      	ldr	r3, [sp, #32]
 8020ba2:	430b      	orrs	r3, r1
 8020ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ba6:	d10d      	bne.n	8020bc4 <_dtoa_r+0x9a4>
 8020ba8:	2b39      	cmp	r3, #57	; 0x39
 8020baa:	d029      	beq.n	8020c00 <_dtoa_r+0x9e0>
 8020bac:	f1ba 0f00 	cmp.w	sl, #0
 8020bb0:	dd01      	ble.n	8020bb6 <_dtoa_r+0x996>
 8020bb2:	9b06      	ldr	r3, [sp, #24]
 8020bb4:	3331      	adds	r3, #49	; 0x31
 8020bb6:	9a02      	ldr	r2, [sp, #8]
 8020bb8:	7013      	strb	r3, [r2, #0]
 8020bba:	e774      	b.n	8020aa6 <_dtoa_r+0x886>
 8020bbc:	4638      	mov	r0, r7
 8020bbe:	e7b8      	b.n	8020b32 <_dtoa_r+0x912>
 8020bc0:	2201      	movs	r2, #1
 8020bc2:	e7e1      	b.n	8020b88 <_dtoa_r+0x968>
 8020bc4:	f1ba 0f00 	cmp.w	sl, #0
 8020bc8:	db06      	blt.n	8020bd8 <_dtoa_r+0x9b8>
 8020bca:	9907      	ldr	r1, [sp, #28]
 8020bcc:	ea41 0a0a 	orr.w	sl, r1, sl
 8020bd0:	9908      	ldr	r1, [sp, #32]
 8020bd2:	ea5a 0101 	orrs.w	r1, sl, r1
 8020bd6:	d120      	bne.n	8020c1a <_dtoa_r+0x9fa>
 8020bd8:	2a00      	cmp	r2, #0
 8020bda:	ddec      	ble.n	8020bb6 <_dtoa_r+0x996>
 8020bdc:	4629      	mov	r1, r5
 8020bde:	2201      	movs	r2, #1
 8020be0:	4630      	mov	r0, r6
 8020be2:	9305      	str	r3, [sp, #20]
 8020be4:	f001 f8c2 	bl	8021d6c <__lshift>
 8020be8:	4621      	mov	r1, r4
 8020bea:	4605      	mov	r5, r0
 8020bec:	f001 f92a 	bl	8021e44 <__mcmp>
 8020bf0:	2800      	cmp	r0, #0
 8020bf2:	9b05      	ldr	r3, [sp, #20]
 8020bf4:	dc02      	bgt.n	8020bfc <_dtoa_r+0x9dc>
 8020bf6:	d1de      	bne.n	8020bb6 <_dtoa_r+0x996>
 8020bf8:	07da      	lsls	r2, r3, #31
 8020bfa:	d5dc      	bpl.n	8020bb6 <_dtoa_r+0x996>
 8020bfc:	2b39      	cmp	r3, #57	; 0x39
 8020bfe:	d1d8      	bne.n	8020bb2 <_dtoa_r+0x992>
 8020c00:	9a02      	ldr	r2, [sp, #8]
 8020c02:	2339      	movs	r3, #57	; 0x39
 8020c04:	7013      	strb	r3, [r2, #0]
 8020c06:	4643      	mov	r3, r8
 8020c08:	4698      	mov	r8, r3
 8020c0a:	3b01      	subs	r3, #1
 8020c0c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8020c10:	2a39      	cmp	r2, #57	; 0x39
 8020c12:	d051      	beq.n	8020cb8 <_dtoa_r+0xa98>
 8020c14:	3201      	adds	r2, #1
 8020c16:	701a      	strb	r2, [r3, #0]
 8020c18:	e745      	b.n	8020aa6 <_dtoa_r+0x886>
 8020c1a:	2a00      	cmp	r2, #0
 8020c1c:	dd03      	ble.n	8020c26 <_dtoa_r+0xa06>
 8020c1e:	2b39      	cmp	r3, #57	; 0x39
 8020c20:	d0ee      	beq.n	8020c00 <_dtoa_r+0x9e0>
 8020c22:	3301      	adds	r3, #1
 8020c24:	e7c7      	b.n	8020bb6 <_dtoa_r+0x996>
 8020c26:	9a05      	ldr	r2, [sp, #20]
 8020c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020c2a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020c2e:	428a      	cmp	r2, r1
 8020c30:	d02b      	beq.n	8020c8a <_dtoa_r+0xa6a>
 8020c32:	4629      	mov	r1, r5
 8020c34:	2300      	movs	r3, #0
 8020c36:	220a      	movs	r2, #10
 8020c38:	4630      	mov	r0, r6
 8020c3a:	f000 fe9d 	bl	8021978 <__multadd>
 8020c3e:	45b9      	cmp	r9, r7
 8020c40:	4605      	mov	r5, r0
 8020c42:	f04f 0300 	mov.w	r3, #0
 8020c46:	f04f 020a 	mov.w	r2, #10
 8020c4a:	4649      	mov	r1, r9
 8020c4c:	4630      	mov	r0, r6
 8020c4e:	d107      	bne.n	8020c60 <_dtoa_r+0xa40>
 8020c50:	f000 fe92 	bl	8021978 <__multadd>
 8020c54:	4681      	mov	r9, r0
 8020c56:	4607      	mov	r7, r0
 8020c58:	9b05      	ldr	r3, [sp, #20]
 8020c5a:	3301      	adds	r3, #1
 8020c5c:	9305      	str	r3, [sp, #20]
 8020c5e:	e774      	b.n	8020b4a <_dtoa_r+0x92a>
 8020c60:	f000 fe8a 	bl	8021978 <__multadd>
 8020c64:	4639      	mov	r1, r7
 8020c66:	4681      	mov	r9, r0
 8020c68:	2300      	movs	r3, #0
 8020c6a:	220a      	movs	r2, #10
 8020c6c:	4630      	mov	r0, r6
 8020c6e:	f000 fe83 	bl	8021978 <__multadd>
 8020c72:	4607      	mov	r7, r0
 8020c74:	e7f0      	b.n	8020c58 <_dtoa_r+0xa38>
 8020c76:	f1ba 0f00 	cmp.w	sl, #0
 8020c7a:	9a00      	ldr	r2, [sp, #0]
 8020c7c:	bfcc      	ite	gt
 8020c7e:	46d0      	movgt	r8, sl
 8020c80:	f04f 0801 	movle.w	r8, #1
 8020c84:	4490      	add	r8, r2
 8020c86:	f04f 0900 	mov.w	r9, #0
 8020c8a:	4629      	mov	r1, r5
 8020c8c:	2201      	movs	r2, #1
 8020c8e:	4630      	mov	r0, r6
 8020c90:	9302      	str	r3, [sp, #8]
 8020c92:	f001 f86b 	bl	8021d6c <__lshift>
 8020c96:	4621      	mov	r1, r4
 8020c98:	4605      	mov	r5, r0
 8020c9a:	f001 f8d3 	bl	8021e44 <__mcmp>
 8020c9e:	2800      	cmp	r0, #0
 8020ca0:	dcb1      	bgt.n	8020c06 <_dtoa_r+0x9e6>
 8020ca2:	d102      	bne.n	8020caa <_dtoa_r+0xa8a>
 8020ca4:	9b02      	ldr	r3, [sp, #8]
 8020ca6:	07db      	lsls	r3, r3, #31
 8020ca8:	d4ad      	bmi.n	8020c06 <_dtoa_r+0x9e6>
 8020caa:	4643      	mov	r3, r8
 8020cac:	4698      	mov	r8, r3
 8020cae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020cb2:	2a30      	cmp	r2, #48	; 0x30
 8020cb4:	d0fa      	beq.n	8020cac <_dtoa_r+0xa8c>
 8020cb6:	e6f6      	b.n	8020aa6 <_dtoa_r+0x886>
 8020cb8:	9a00      	ldr	r2, [sp, #0]
 8020cba:	429a      	cmp	r2, r3
 8020cbc:	d1a4      	bne.n	8020c08 <_dtoa_r+0x9e8>
 8020cbe:	f10b 0b01 	add.w	fp, fp, #1
 8020cc2:	2331      	movs	r3, #49	; 0x31
 8020cc4:	e778      	b.n	8020bb8 <_dtoa_r+0x998>
 8020cc6:	4b15      	ldr	r3, [pc, #84]	; (8020d1c <_dtoa_r+0xafc>)
 8020cc8:	f7ff bb12 	b.w	80202f0 <_dtoa_r+0xd0>
 8020ccc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	f47f aaee 	bne.w	80202b0 <_dtoa_r+0x90>
 8020cd4:	4b12      	ldr	r3, [pc, #72]	; (8020d20 <_dtoa_r+0xb00>)
 8020cd6:	f7ff bb0b 	b.w	80202f0 <_dtoa_r+0xd0>
 8020cda:	f1ba 0f00 	cmp.w	sl, #0
 8020cde:	dc03      	bgt.n	8020ce8 <_dtoa_r+0xac8>
 8020ce0:	9b07      	ldr	r3, [sp, #28]
 8020ce2:	2b02      	cmp	r3, #2
 8020ce4:	f73f aec7 	bgt.w	8020a76 <_dtoa_r+0x856>
 8020ce8:	f8dd 8000 	ldr.w	r8, [sp]
 8020cec:	4621      	mov	r1, r4
 8020cee:	4628      	mov	r0, r5
 8020cf0:	f7ff fa0a 	bl	8020108 <quorem>
 8020cf4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8020cf8:	f808 3b01 	strb.w	r3, [r8], #1
 8020cfc:	9a00      	ldr	r2, [sp, #0]
 8020cfe:	eba8 0202 	sub.w	r2, r8, r2
 8020d02:	4592      	cmp	sl, r2
 8020d04:	ddb7      	ble.n	8020c76 <_dtoa_r+0xa56>
 8020d06:	4629      	mov	r1, r5
 8020d08:	2300      	movs	r3, #0
 8020d0a:	220a      	movs	r2, #10
 8020d0c:	4630      	mov	r0, r6
 8020d0e:	f000 fe33 	bl	8021978 <__multadd>
 8020d12:	4605      	mov	r5, r0
 8020d14:	e7ea      	b.n	8020cec <_dtoa_r+0xacc>
 8020d16:	bf00      	nop
 8020d18:	08027600 	.word	0x08027600
 8020d1c:	08027464 	.word	0x08027464
 8020d20:	08027594 	.word	0x08027594

08020d24 <__errno>:
 8020d24:	4b01      	ldr	r3, [pc, #4]	; (8020d2c <__errno+0x8>)
 8020d26:	6818      	ldr	r0, [r3, #0]
 8020d28:	4770      	bx	lr
 8020d2a:	bf00      	nop
 8020d2c:	24003444 	.word	0x24003444

08020d30 <__sflush_r>:
 8020d30:	898a      	ldrh	r2, [r1, #12]
 8020d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d36:	4605      	mov	r5, r0
 8020d38:	0710      	lsls	r0, r2, #28
 8020d3a:	460c      	mov	r4, r1
 8020d3c:	d458      	bmi.n	8020df0 <__sflush_r+0xc0>
 8020d3e:	684b      	ldr	r3, [r1, #4]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	dc05      	bgt.n	8020d50 <__sflush_r+0x20>
 8020d44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020d46:	2b00      	cmp	r3, #0
 8020d48:	dc02      	bgt.n	8020d50 <__sflush_r+0x20>
 8020d4a:	2000      	movs	r0, #0
 8020d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020d52:	2e00      	cmp	r6, #0
 8020d54:	d0f9      	beq.n	8020d4a <__sflush_r+0x1a>
 8020d56:	2300      	movs	r3, #0
 8020d58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020d5c:	682f      	ldr	r7, [r5, #0]
 8020d5e:	602b      	str	r3, [r5, #0]
 8020d60:	d032      	beq.n	8020dc8 <__sflush_r+0x98>
 8020d62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020d64:	89a3      	ldrh	r3, [r4, #12]
 8020d66:	075a      	lsls	r2, r3, #29
 8020d68:	d505      	bpl.n	8020d76 <__sflush_r+0x46>
 8020d6a:	6863      	ldr	r3, [r4, #4]
 8020d6c:	1ac0      	subs	r0, r0, r3
 8020d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020d70:	b10b      	cbz	r3, 8020d76 <__sflush_r+0x46>
 8020d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020d74:	1ac0      	subs	r0, r0, r3
 8020d76:	2300      	movs	r3, #0
 8020d78:	4602      	mov	r2, r0
 8020d7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020d7c:	6a21      	ldr	r1, [r4, #32]
 8020d7e:	4628      	mov	r0, r5
 8020d80:	47b0      	blx	r6
 8020d82:	1c43      	adds	r3, r0, #1
 8020d84:	89a3      	ldrh	r3, [r4, #12]
 8020d86:	d106      	bne.n	8020d96 <__sflush_r+0x66>
 8020d88:	6829      	ldr	r1, [r5, #0]
 8020d8a:	291d      	cmp	r1, #29
 8020d8c:	d82c      	bhi.n	8020de8 <__sflush_r+0xb8>
 8020d8e:	4a2a      	ldr	r2, [pc, #168]	; (8020e38 <__sflush_r+0x108>)
 8020d90:	40ca      	lsrs	r2, r1
 8020d92:	07d6      	lsls	r6, r2, #31
 8020d94:	d528      	bpl.n	8020de8 <__sflush_r+0xb8>
 8020d96:	2200      	movs	r2, #0
 8020d98:	6062      	str	r2, [r4, #4]
 8020d9a:	04d9      	lsls	r1, r3, #19
 8020d9c:	6922      	ldr	r2, [r4, #16]
 8020d9e:	6022      	str	r2, [r4, #0]
 8020da0:	d504      	bpl.n	8020dac <__sflush_r+0x7c>
 8020da2:	1c42      	adds	r2, r0, #1
 8020da4:	d101      	bne.n	8020daa <__sflush_r+0x7a>
 8020da6:	682b      	ldr	r3, [r5, #0]
 8020da8:	b903      	cbnz	r3, 8020dac <__sflush_r+0x7c>
 8020daa:	6560      	str	r0, [r4, #84]	; 0x54
 8020dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020dae:	602f      	str	r7, [r5, #0]
 8020db0:	2900      	cmp	r1, #0
 8020db2:	d0ca      	beq.n	8020d4a <__sflush_r+0x1a>
 8020db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020db8:	4299      	cmp	r1, r3
 8020dba:	d002      	beq.n	8020dc2 <__sflush_r+0x92>
 8020dbc:	4628      	mov	r0, r5
 8020dbe:	f7fd fa41 	bl	801e244 <_free_r>
 8020dc2:	2000      	movs	r0, #0
 8020dc4:	6360      	str	r0, [r4, #52]	; 0x34
 8020dc6:	e7c1      	b.n	8020d4c <__sflush_r+0x1c>
 8020dc8:	6a21      	ldr	r1, [r4, #32]
 8020dca:	2301      	movs	r3, #1
 8020dcc:	4628      	mov	r0, r5
 8020dce:	47b0      	blx	r6
 8020dd0:	1c41      	adds	r1, r0, #1
 8020dd2:	d1c7      	bne.n	8020d64 <__sflush_r+0x34>
 8020dd4:	682b      	ldr	r3, [r5, #0]
 8020dd6:	2b00      	cmp	r3, #0
 8020dd8:	d0c4      	beq.n	8020d64 <__sflush_r+0x34>
 8020dda:	2b1d      	cmp	r3, #29
 8020ddc:	d001      	beq.n	8020de2 <__sflush_r+0xb2>
 8020dde:	2b16      	cmp	r3, #22
 8020de0:	d101      	bne.n	8020de6 <__sflush_r+0xb6>
 8020de2:	602f      	str	r7, [r5, #0]
 8020de4:	e7b1      	b.n	8020d4a <__sflush_r+0x1a>
 8020de6:	89a3      	ldrh	r3, [r4, #12]
 8020de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020dec:	81a3      	strh	r3, [r4, #12]
 8020dee:	e7ad      	b.n	8020d4c <__sflush_r+0x1c>
 8020df0:	690f      	ldr	r7, [r1, #16]
 8020df2:	2f00      	cmp	r7, #0
 8020df4:	d0a9      	beq.n	8020d4a <__sflush_r+0x1a>
 8020df6:	0793      	lsls	r3, r2, #30
 8020df8:	680e      	ldr	r6, [r1, #0]
 8020dfa:	bf08      	it	eq
 8020dfc:	694b      	ldreq	r3, [r1, #20]
 8020dfe:	600f      	str	r7, [r1, #0]
 8020e00:	bf18      	it	ne
 8020e02:	2300      	movne	r3, #0
 8020e04:	eba6 0807 	sub.w	r8, r6, r7
 8020e08:	608b      	str	r3, [r1, #8]
 8020e0a:	f1b8 0f00 	cmp.w	r8, #0
 8020e0e:	dd9c      	ble.n	8020d4a <__sflush_r+0x1a>
 8020e10:	6a21      	ldr	r1, [r4, #32]
 8020e12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020e14:	4643      	mov	r3, r8
 8020e16:	463a      	mov	r2, r7
 8020e18:	4628      	mov	r0, r5
 8020e1a:	47b0      	blx	r6
 8020e1c:	2800      	cmp	r0, #0
 8020e1e:	dc06      	bgt.n	8020e2e <__sflush_r+0xfe>
 8020e20:	89a3      	ldrh	r3, [r4, #12]
 8020e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020e26:	81a3      	strh	r3, [r4, #12]
 8020e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020e2c:	e78e      	b.n	8020d4c <__sflush_r+0x1c>
 8020e2e:	4407      	add	r7, r0
 8020e30:	eba8 0800 	sub.w	r8, r8, r0
 8020e34:	e7e9      	b.n	8020e0a <__sflush_r+0xda>
 8020e36:	bf00      	nop
 8020e38:	20400001 	.word	0x20400001

08020e3c <_fflush_r>:
 8020e3c:	b538      	push	{r3, r4, r5, lr}
 8020e3e:	690b      	ldr	r3, [r1, #16]
 8020e40:	4605      	mov	r5, r0
 8020e42:	460c      	mov	r4, r1
 8020e44:	b913      	cbnz	r3, 8020e4c <_fflush_r+0x10>
 8020e46:	2500      	movs	r5, #0
 8020e48:	4628      	mov	r0, r5
 8020e4a:	bd38      	pop	{r3, r4, r5, pc}
 8020e4c:	b118      	cbz	r0, 8020e56 <_fflush_r+0x1a>
 8020e4e:	6983      	ldr	r3, [r0, #24]
 8020e50:	b90b      	cbnz	r3, 8020e56 <_fflush_r+0x1a>
 8020e52:	f000 f887 	bl	8020f64 <__sinit>
 8020e56:	4b14      	ldr	r3, [pc, #80]	; (8020ea8 <_fflush_r+0x6c>)
 8020e58:	429c      	cmp	r4, r3
 8020e5a:	d11b      	bne.n	8020e94 <_fflush_r+0x58>
 8020e5c:	686c      	ldr	r4, [r5, #4]
 8020e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	d0ef      	beq.n	8020e46 <_fflush_r+0xa>
 8020e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020e68:	07d0      	lsls	r0, r2, #31
 8020e6a:	d404      	bmi.n	8020e76 <_fflush_r+0x3a>
 8020e6c:	0599      	lsls	r1, r3, #22
 8020e6e:	d402      	bmi.n	8020e76 <_fflush_r+0x3a>
 8020e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020e72:	f000 fc9a 	bl	80217aa <__retarget_lock_acquire_recursive>
 8020e76:	4628      	mov	r0, r5
 8020e78:	4621      	mov	r1, r4
 8020e7a:	f7ff ff59 	bl	8020d30 <__sflush_r>
 8020e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020e80:	07da      	lsls	r2, r3, #31
 8020e82:	4605      	mov	r5, r0
 8020e84:	d4e0      	bmi.n	8020e48 <_fflush_r+0xc>
 8020e86:	89a3      	ldrh	r3, [r4, #12]
 8020e88:	059b      	lsls	r3, r3, #22
 8020e8a:	d4dd      	bmi.n	8020e48 <_fflush_r+0xc>
 8020e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020e8e:	f000 fc8d 	bl	80217ac <__retarget_lock_release_recursive>
 8020e92:	e7d9      	b.n	8020e48 <_fflush_r+0xc>
 8020e94:	4b05      	ldr	r3, [pc, #20]	; (8020eac <_fflush_r+0x70>)
 8020e96:	429c      	cmp	r4, r3
 8020e98:	d101      	bne.n	8020e9e <_fflush_r+0x62>
 8020e9a:	68ac      	ldr	r4, [r5, #8]
 8020e9c:	e7df      	b.n	8020e5e <_fflush_r+0x22>
 8020e9e:	4b04      	ldr	r3, [pc, #16]	; (8020eb0 <_fflush_r+0x74>)
 8020ea0:	429c      	cmp	r4, r3
 8020ea2:	bf08      	it	eq
 8020ea4:	68ec      	ldreq	r4, [r5, #12]
 8020ea6:	e7da      	b.n	8020e5e <_fflush_r+0x22>
 8020ea8:	08027634 	.word	0x08027634
 8020eac:	08027654 	.word	0x08027654
 8020eb0:	08027614 	.word	0x08027614

08020eb4 <std>:
 8020eb4:	2300      	movs	r3, #0
 8020eb6:	b510      	push	{r4, lr}
 8020eb8:	4604      	mov	r4, r0
 8020eba:	e9c0 3300 	strd	r3, r3, [r0]
 8020ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020ec2:	6083      	str	r3, [r0, #8]
 8020ec4:	8181      	strh	r1, [r0, #12]
 8020ec6:	6643      	str	r3, [r0, #100]	; 0x64
 8020ec8:	81c2      	strh	r2, [r0, #14]
 8020eca:	6183      	str	r3, [r0, #24]
 8020ecc:	4619      	mov	r1, r3
 8020ece:	2208      	movs	r2, #8
 8020ed0:	305c      	adds	r0, #92	; 0x5c
 8020ed2:	f7fd f9af 	bl	801e234 <memset>
 8020ed6:	4b05      	ldr	r3, [pc, #20]	; (8020eec <std+0x38>)
 8020ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8020eda:	4b05      	ldr	r3, [pc, #20]	; (8020ef0 <std+0x3c>)
 8020edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8020ede:	4b05      	ldr	r3, [pc, #20]	; (8020ef4 <std+0x40>)
 8020ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020ee2:	4b05      	ldr	r3, [pc, #20]	; (8020ef8 <std+0x44>)
 8020ee4:	6224      	str	r4, [r4, #32]
 8020ee6:	6323      	str	r3, [r4, #48]	; 0x30
 8020ee8:	bd10      	pop	{r4, pc}
 8020eea:	bf00      	nop
 8020eec:	080227c9 	.word	0x080227c9
 8020ef0:	080227eb 	.word	0x080227eb
 8020ef4:	08022823 	.word	0x08022823
 8020ef8:	08022847 	.word	0x08022847

08020efc <_cleanup_r>:
 8020efc:	4901      	ldr	r1, [pc, #4]	; (8020f04 <_cleanup_r+0x8>)
 8020efe:	f000 b8c1 	b.w	8021084 <_fwalk_reent>
 8020f02:	bf00      	nop
 8020f04:	08020e3d 	.word	0x08020e3d

08020f08 <__sfmoreglue>:
 8020f08:	b570      	push	{r4, r5, r6, lr}
 8020f0a:	1e4a      	subs	r2, r1, #1
 8020f0c:	2568      	movs	r5, #104	; 0x68
 8020f0e:	4355      	muls	r5, r2
 8020f10:	460e      	mov	r6, r1
 8020f12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020f16:	f7fd f9e5 	bl	801e2e4 <_malloc_r>
 8020f1a:	4604      	mov	r4, r0
 8020f1c:	b140      	cbz	r0, 8020f30 <__sfmoreglue+0x28>
 8020f1e:	2100      	movs	r1, #0
 8020f20:	e9c0 1600 	strd	r1, r6, [r0]
 8020f24:	300c      	adds	r0, #12
 8020f26:	60a0      	str	r0, [r4, #8]
 8020f28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020f2c:	f7fd f982 	bl	801e234 <memset>
 8020f30:	4620      	mov	r0, r4
 8020f32:	bd70      	pop	{r4, r5, r6, pc}

08020f34 <__sfp_lock_acquire>:
 8020f34:	4801      	ldr	r0, [pc, #4]	; (8020f3c <__sfp_lock_acquire+0x8>)
 8020f36:	f000 bc38 	b.w	80217aa <__retarget_lock_acquire_recursive>
 8020f3a:	bf00      	nop
 8020f3c:	2400b24c 	.word	0x2400b24c

08020f40 <__sfp_lock_release>:
 8020f40:	4801      	ldr	r0, [pc, #4]	; (8020f48 <__sfp_lock_release+0x8>)
 8020f42:	f000 bc33 	b.w	80217ac <__retarget_lock_release_recursive>
 8020f46:	bf00      	nop
 8020f48:	2400b24c 	.word	0x2400b24c

08020f4c <__sinit_lock_acquire>:
 8020f4c:	4801      	ldr	r0, [pc, #4]	; (8020f54 <__sinit_lock_acquire+0x8>)
 8020f4e:	f000 bc2c 	b.w	80217aa <__retarget_lock_acquire_recursive>
 8020f52:	bf00      	nop
 8020f54:	2400b247 	.word	0x2400b247

08020f58 <__sinit_lock_release>:
 8020f58:	4801      	ldr	r0, [pc, #4]	; (8020f60 <__sinit_lock_release+0x8>)
 8020f5a:	f000 bc27 	b.w	80217ac <__retarget_lock_release_recursive>
 8020f5e:	bf00      	nop
 8020f60:	2400b247 	.word	0x2400b247

08020f64 <__sinit>:
 8020f64:	b510      	push	{r4, lr}
 8020f66:	4604      	mov	r4, r0
 8020f68:	f7ff fff0 	bl	8020f4c <__sinit_lock_acquire>
 8020f6c:	69a3      	ldr	r3, [r4, #24]
 8020f6e:	b11b      	cbz	r3, 8020f78 <__sinit+0x14>
 8020f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f74:	f7ff bff0 	b.w	8020f58 <__sinit_lock_release>
 8020f78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020f7c:	6523      	str	r3, [r4, #80]	; 0x50
 8020f7e:	4b13      	ldr	r3, [pc, #76]	; (8020fcc <__sinit+0x68>)
 8020f80:	4a13      	ldr	r2, [pc, #76]	; (8020fd0 <__sinit+0x6c>)
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	62a2      	str	r2, [r4, #40]	; 0x28
 8020f86:	42a3      	cmp	r3, r4
 8020f88:	bf04      	itt	eq
 8020f8a:	2301      	moveq	r3, #1
 8020f8c:	61a3      	streq	r3, [r4, #24]
 8020f8e:	4620      	mov	r0, r4
 8020f90:	f000 f820 	bl	8020fd4 <__sfp>
 8020f94:	6060      	str	r0, [r4, #4]
 8020f96:	4620      	mov	r0, r4
 8020f98:	f000 f81c 	bl	8020fd4 <__sfp>
 8020f9c:	60a0      	str	r0, [r4, #8]
 8020f9e:	4620      	mov	r0, r4
 8020fa0:	f000 f818 	bl	8020fd4 <__sfp>
 8020fa4:	2200      	movs	r2, #0
 8020fa6:	60e0      	str	r0, [r4, #12]
 8020fa8:	2104      	movs	r1, #4
 8020faa:	6860      	ldr	r0, [r4, #4]
 8020fac:	f7ff ff82 	bl	8020eb4 <std>
 8020fb0:	68a0      	ldr	r0, [r4, #8]
 8020fb2:	2201      	movs	r2, #1
 8020fb4:	2109      	movs	r1, #9
 8020fb6:	f7ff ff7d 	bl	8020eb4 <std>
 8020fba:	68e0      	ldr	r0, [r4, #12]
 8020fbc:	2202      	movs	r2, #2
 8020fbe:	2112      	movs	r1, #18
 8020fc0:	f7ff ff78 	bl	8020eb4 <std>
 8020fc4:	2301      	movs	r3, #1
 8020fc6:	61a3      	str	r3, [r4, #24]
 8020fc8:	e7d2      	b.n	8020f70 <__sinit+0xc>
 8020fca:	bf00      	nop
 8020fcc:	08027450 	.word	0x08027450
 8020fd0:	08020efd 	.word	0x08020efd

08020fd4 <__sfp>:
 8020fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fd6:	4607      	mov	r7, r0
 8020fd8:	f7ff ffac 	bl	8020f34 <__sfp_lock_acquire>
 8020fdc:	4b1e      	ldr	r3, [pc, #120]	; (8021058 <__sfp+0x84>)
 8020fde:	681e      	ldr	r6, [r3, #0]
 8020fe0:	69b3      	ldr	r3, [r6, #24]
 8020fe2:	b913      	cbnz	r3, 8020fea <__sfp+0x16>
 8020fe4:	4630      	mov	r0, r6
 8020fe6:	f7ff ffbd 	bl	8020f64 <__sinit>
 8020fea:	3648      	adds	r6, #72	; 0x48
 8020fec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020ff0:	3b01      	subs	r3, #1
 8020ff2:	d503      	bpl.n	8020ffc <__sfp+0x28>
 8020ff4:	6833      	ldr	r3, [r6, #0]
 8020ff6:	b30b      	cbz	r3, 802103c <__sfp+0x68>
 8020ff8:	6836      	ldr	r6, [r6, #0]
 8020ffa:	e7f7      	b.n	8020fec <__sfp+0x18>
 8020ffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021000:	b9d5      	cbnz	r5, 8021038 <__sfp+0x64>
 8021002:	4b16      	ldr	r3, [pc, #88]	; (802105c <__sfp+0x88>)
 8021004:	60e3      	str	r3, [r4, #12]
 8021006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802100a:	6665      	str	r5, [r4, #100]	; 0x64
 802100c:	f000 fbcc 	bl	80217a8 <__retarget_lock_init_recursive>
 8021010:	f7ff ff96 	bl	8020f40 <__sfp_lock_release>
 8021014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802101c:	6025      	str	r5, [r4, #0]
 802101e:	61a5      	str	r5, [r4, #24]
 8021020:	2208      	movs	r2, #8
 8021022:	4629      	mov	r1, r5
 8021024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021028:	f7fd f904 	bl	801e234 <memset>
 802102c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021034:	4620      	mov	r0, r4
 8021036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021038:	3468      	adds	r4, #104	; 0x68
 802103a:	e7d9      	b.n	8020ff0 <__sfp+0x1c>
 802103c:	2104      	movs	r1, #4
 802103e:	4638      	mov	r0, r7
 8021040:	f7ff ff62 	bl	8020f08 <__sfmoreglue>
 8021044:	4604      	mov	r4, r0
 8021046:	6030      	str	r0, [r6, #0]
 8021048:	2800      	cmp	r0, #0
 802104a:	d1d5      	bne.n	8020ff8 <__sfp+0x24>
 802104c:	f7ff ff78 	bl	8020f40 <__sfp_lock_release>
 8021050:	230c      	movs	r3, #12
 8021052:	603b      	str	r3, [r7, #0]
 8021054:	e7ee      	b.n	8021034 <__sfp+0x60>
 8021056:	bf00      	nop
 8021058:	08027450 	.word	0x08027450
 802105c:	ffff0001 	.word	0xffff0001

08021060 <fiprintf>:
 8021060:	b40e      	push	{r1, r2, r3}
 8021062:	b503      	push	{r0, r1, lr}
 8021064:	4601      	mov	r1, r0
 8021066:	ab03      	add	r3, sp, #12
 8021068:	4805      	ldr	r0, [pc, #20]	; (8021080 <fiprintf+0x20>)
 802106a:	f853 2b04 	ldr.w	r2, [r3], #4
 802106e:	6800      	ldr	r0, [r0, #0]
 8021070:	9301      	str	r3, [sp, #4]
 8021072:	f001 fa6f 	bl	8022554 <_vfiprintf_r>
 8021076:	b002      	add	sp, #8
 8021078:	f85d eb04 	ldr.w	lr, [sp], #4
 802107c:	b003      	add	sp, #12
 802107e:	4770      	bx	lr
 8021080:	24003444 	.word	0x24003444

08021084 <_fwalk_reent>:
 8021084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021088:	4606      	mov	r6, r0
 802108a:	4688      	mov	r8, r1
 802108c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021090:	2700      	movs	r7, #0
 8021092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021096:	f1b9 0901 	subs.w	r9, r9, #1
 802109a:	d505      	bpl.n	80210a8 <_fwalk_reent+0x24>
 802109c:	6824      	ldr	r4, [r4, #0]
 802109e:	2c00      	cmp	r4, #0
 80210a0:	d1f7      	bne.n	8021092 <_fwalk_reent+0xe>
 80210a2:	4638      	mov	r0, r7
 80210a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80210a8:	89ab      	ldrh	r3, [r5, #12]
 80210aa:	2b01      	cmp	r3, #1
 80210ac:	d907      	bls.n	80210be <_fwalk_reent+0x3a>
 80210ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80210b2:	3301      	adds	r3, #1
 80210b4:	d003      	beq.n	80210be <_fwalk_reent+0x3a>
 80210b6:	4629      	mov	r1, r5
 80210b8:	4630      	mov	r0, r6
 80210ba:	47c0      	blx	r8
 80210bc:	4307      	orrs	r7, r0
 80210be:	3568      	adds	r5, #104	; 0x68
 80210c0:	e7e9      	b.n	8021096 <_fwalk_reent+0x12>

080210c2 <rshift>:
 80210c2:	6903      	ldr	r3, [r0, #16]
 80210c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80210c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80210cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80210d0:	f100 0414 	add.w	r4, r0, #20
 80210d4:	dd45      	ble.n	8021162 <rshift+0xa0>
 80210d6:	f011 011f 	ands.w	r1, r1, #31
 80210da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80210de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80210e2:	d10c      	bne.n	80210fe <rshift+0x3c>
 80210e4:	f100 0710 	add.w	r7, r0, #16
 80210e8:	4629      	mov	r1, r5
 80210ea:	42b1      	cmp	r1, r6
 80210ec:	d334      	bcc.n	8021158 <rshift+0x96>
 80210ee:	1a9b      	subs	r3, r3, r2
 80210f0:	009b      	lsls	r3, r3, #2
 80210f2:	1eea      	subs	r2, r5, #3
 80210f4:	4296      	cmp	r6, r2
 80210f6:	bf38      	it	cc
 80210f8:	2300      	movcc	r3, #0
 80210fa:	4423      	add	r3, r4
 80210fc:	e015      	b.n	802112a <rshift+0x68>
 80210fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021102:	f1c1 0820 	rsb	r8, r1, #32
 8021106:	40cf      	lsrs	r7, r1
 8021108:	f105 0e04 	add.w	lr, r5, #4
 802110c:	46a1      	mov	r9, r4
 802110e:	4576      	cmp	r6, lr
 8021110:	46f4      	mov	ip, lr
 8021112:	d815      	bhi.n	8021140 <rshift+0x7e>
 8021114:	1a9b      	subs	r3, r3, r2
 8021116:	009a      	lsls	r2, r3, #2
 8021118:	3a04      	subs	r2, #4
 802111a:	3501      	adds	r5, #1
 802111c:	42ae      	cmp	r6, r5
 802111e:	bf38      	it	cc
 8021120:	2200      	movcc	r2, #0
 8021122:	18a3      	adds	r3, r4, r2
 8021124:	50a7      	str	r7, [r4, r2]
 8021126:	b107      	cbz	r7, 802112a <rshift+0x68>
 8021128:	3304      	adds	r3, #4
 802112a:	1b1a      	subs	r2, r3, r4
 802112c:	42a3      	cmp	r3, r4
 802112e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021132:	bf08      	it	eq
 8021134:	2300      	moveq	r3, #0
 8021136:	6102      	str	r2, [r0, #16]
 8021138:	bf08      	it	eq
 802113a:	6143      	streq	r3, [r0, #20]
 802113c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021140:	f8dc c000 	ldr.w	ip, [ip]
 8021144:	fa0c fc08 	lsl.w	ip, ip, r8
 8021148:	ea4c 0707 	orr.w	r7, ip, r7
 802114c:	f849 7b04 	str.w	r7, [r9], #4
 8021150:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021154:	40cf      	lsrs	r7, r1
 8021156:	e7da      	b.n	802110e <rshift+0x4c>
 8021158:	f851 cb04 	ldr.w	ip, [r1], #4
 802115c:	f847 cf04 	str.w	ip, [r7, #4]!
 8021160:	e7c3      	b.n	80210ea <rshift+0x28>
 8021162:	4623      	mov	r3, r4
 8021164:	e7e1      	b.n	802112a <rshift+0x68>

08021166 <__hexdig_fun>:
 8021166:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802116a:	2b09      	cmp	r3, #9
 802116c:	d802      	bhi.n	8021174 <__hexdig_fun+0xe>
 802116e:	3820      	subs	r0, #32
 8021170:	b2c0      	uxtb	r0, r0
 8021172:	4770      	bx	lr
 8021174:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021178:	2b05      	cmp	r3, #5
 802117a:	d801      	bhi.n	8021180 <__hexdig_fun+0x1a>
 802117c:	3847      	subs	r0, #71	; 0x47
 802117e:	e7f7      	b.n	8021170 <__hexdig_fun+0xa>
 8021180:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021184:	2b05      	cmp	r3, #5
 8021186:	d801      	bhi.n	802118c <__hexdig_fun+0x26>
 8021188:	3827      	subs	r0, #39	; 0x27
 802118a:	e7f1      	b.n	8021170 <__hexdig_fun+0xa>
 802118c:	2000      	movs	r0, #0
 802118e:	4770      	bx	lr

08021190 <__gethex>:
 8021190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021194:	ed2d 8b02 	vpush	{d8}
 8021198:	b089      	sub	sp, #36	; 0x24
 802119a:	ee08 0a10 	vmov	s16, r0
 802119e:	9304      	str	r3, [sp, #16]
 80211a0:	4bbc      	ldr	r3, [pc, #752]	; (8021494 <__gethex+0x304>)
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	9301      	str	r3, [sp, #4]
 80211a6:	4618      	mov	r0, r3
 80211a8:	468b      	mov	fp, r1
 80211aa:	4690      	mov	r8, r2
 80211ac:	f7df f898 	bl	80002e0 <strlen>
 80211b0:	9b01      	ldr	r3, [sp, #4]
 80211b2:	f8db 2000 	ldr.w	r2, [fp]
 80211b6:	4403      	add	r3, r0
 80211b8:	4682      	mov	sl, r0
 80211ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80211be:	9305      	str	r3, [sp, #20]
 80211c0:	1c93      	adds	r3, r2, #2
 80211c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80211c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80211ca:	32fe      	adds	r2, #254	; 0xfe
 80211cc:	18d1      	adds	r1, r2, r3
 80211ce:	461f      	mov	r7, r3
 80211d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80211d4:	9100      	str	r1, [sp, #0]
 80211d6:	2830      	cmp	r0, #48	; 0x30
 80211d8:	d0f8      	beq.n	80211cc <__gethex+0x3c>
 80211da:	f7ff ffc4 	bl	8021166 <__hexdig_fun>
 80211de:	4604      	mov	r4, r0
 80211e0:	2800      	cmp	r0, #0
 80211e2:	d13a      	bne.n	802125a <__gethex+0xca>
 80211e4:	9901      	ldr	r1, [sp, #4]
 80211e6:	4652      	mov	r2, sl
 80211e8:	4638      	mov	r0, r7
 80211ea:	f7fe f81f 	bl	801f22c <strncmp>
 80211ee:	4605      	mov	r5, r0
 80211f0:	2800      	cmp	r0, #0
 80211f2:	d168      	bne.n	80212c6 <__gethex+0x136>
 80211f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80211f8:	eb07 060a 	add.w	r6, r7, sl
 80211fc:	f7ff ffb3 	bl	8021166 <__hexdig_fun>
 8021200:	2800      	cmp	r0, #0
 8021202:	d062      	beq.n	80212ca <__gethex+0x13a>
 8021204:	4633      	mov	r3, r6
 8021206:	7818      	ldrb	r0, [r3, #0]
 8021208:	2830      	cmp	r0, #48	; 0x30
 802120a:	461f      	mov	r7, r3
 802120c:	f103 0301 	add.w	r3, r3, #1
 8021210:	d0f9      	beq.n	8021206 <__gethex+0x76>
 8021212:	f7ff ffa8 	bl	8021166 <__hexdig_fun>
 8021216:	2301      	movs	r3, #1
 8021218:	fab0 f480 	clz	r4, r0
 802121c:	0964      	lsrs	r4, r4, #5
 802121e:	4635      	mov	r5, r6
 8021220:	9300      	str	r3, [sp, #0]
 8021222:	463a      	mov	r2, r7
 8021224:	4616      	mov	r6, r2
 8021226:	3201      	adds	r2, #1
 8021228:	7830      	ldrb	r0, [r6, #0]
 802122a:	f7ff ff9c 	bl	8021166 <__hexdig_fun>
 802122e:	2800      	cmp	r0, #0
 8021230:	d1f8      	bne.n	8021224 <__gethex+0x94>
 8021232:	9901      	ldr	r1, [sp, #4]
 8021234:	4652      	mov	r2, sl
 8021236:	4630      	mov	r0, r6
 8021238:	f7fd fff8 	bl	801f22c <strncmp>
 802123c:	b980      	cbnz	r0, 8021260 <__gethex+0xd0>
 802123e:	b94d      	cbnz	r5, 8021254 <__gethex+0xc4>
 8021240:	eb06 050a 	add.w	r5, r6, sl
 8021244:	462a      	mov	r2, r5
 8021246:	4616      	mov	r6, r2
 8021248:	3201      	adds	r2, #1
 802124a:	7830      	ldrb	r0, [r6, #0]
 802124c:	f7ff ff8b 	bl	8021166 <__hexdig_fun>
 8021250:	2800      	cmp	r0, #0
 8021252:	d1f8      	bne.n	8021246 <__gethex+0xb6>
 8021254:	1bad      	subs	r5, r5, r6
 8021256:	00ad      	lsls	r5, r5, #2
 8021258:	e004      	b.n	8021264 <__gethex+0xd4>
 802125a:	2400      	movs	r4, #0
 802125c:	4625      	mov	r5, r4
 802125e:	e7e0      	b.n	8021222 <__gethex+0x92>
 8021260:	2d00      	cmp	r5, #0
 8021262:	d1f7      	bne.n	8021254 <__gethex+0xc4>
 8021264:	7833      	ldrb	r3, [r6, #0]
 8021266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802126a:	2b50      	cmp	r3, #80	; 0x50
 802126c:	d13b      	bne.n	80212e6 <__gethex+0x156>
 802126e:	7873      	ldrb	r3, [r6, #1]
 8021270:	2b2b      	cmp	r3, #43	; 0x2b
 8021272:	d02c      	beq.n	80212ce <__gethex+0x13e>
 8021274:	2b2d      	cmp	r3, #45	; 0x2d
 8021276:	d02e      	beq.n	80212d6 <__gethex+0x146>
 8021278:	1c71      	adds	r1, r6, #1
 802127a:	f04f 0900 	mov.w	r9, #0
 802127e:	7808      	ldrb	r0, [r1, #0]
 8021280:	f7ff ff71 	bl	8021166 <__hexdig_fun>
 8021284:	1e43      	subs	r3, r0, #1
 8021286:	b2db      	uxtb	r3, r3
 8021288:	2b18      	cmp	r3, #24
 802128a:	d82c      	bhi.n	80212e6 <__gethex+0x156>
 802128c:	f1a0 0210 	sub.w	r2, r0, #16
 8021290:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021294:	f7ff ff67 	bl	8021166 <__hexdig_fun>
 8021298:	1e43      	subs	r3, r0, #1
 802129a:	b2db      	uxtb	r3, r3
 802129c:	2b18      	cmp	r3, #24
 802129e:	d91d      	bls.n	80212dc <__gethex+0x14c>
 80212a0:	f1b9 0f00 	cmp.w	r9, #0
 80212a4:	d000      	beq.n	80212a8 <__gethex+0x118>
 80212a6:	4252      	negs	r2, r2
 80212a8:	4415      	add	r5, r2
 80212aa:	f8cb 1000 	str.w	r1, [fp]
 80212ae:	b1e4      	cbz	r4, 80212ea <__gethex+0x15a>
 80212b0:	9b00      	ldr	r3, [sp, #0]
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	bf14      	ite	ne
 80212b6:	2700      	movne	r7, #0
 80212b8:	2706      	moveq	r7, #6
 80212ba:	4638      	mov	r0, r7
 80212bc:	b009      	add	sp, #36	; 0x24
 80212be:	ecbd 8b02 	vpop	{d8}
 80212c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212c6:	463e      	mov	r6, r7
 80212c8:	4625      	mov	r5, r4
 80212ca:	2401      	movs	r4, #1
 80212cc:	e7ca      	b.n	8021264 <__gethex+0xd4>
 80212ce:	f04f 0900 	mov.w	r9, #0
 80212d2:	1cb1      	adds	r1, r6, #2
 80212d4:	e7d3      	b.n	802127e <__gethex+0xee>
 80212d6:	f04f 0901 	mov.w	r9, #1
 80212da:	e7fa      	b.n	80212d2 <__gethex+0x142>
 80212dc:	230a      	movs	r3, #10
 80212de:	fb03 0202 	mla	r2, r3, r2, r0
 80212e2:	3a10      	subs	r2, #16
 80212e4:	e7d4      	b.n	8021290 <__gethex+0x100>
 80212e6:	4631      	mov	r1, r6
 80212e8:	e7df      	b.n	80212aa <__gethex+0x11a>
 80212ea:	1bf3      	subs	r3, r6, r7
 80212ec:	3b01      	subs	r3, #1
 80212ee:	4621      	mov	r1, r4
 80212f0:	2b07      	cmp	r3, #7
 80212f2:	dc0b      	bgt.n	802130c <__gethex+0x17c>
 80212f4:	ee18 0a10 	vmov	r0, s16
 80212f8:	f000 fadc 	bl	80218b4 <_Balloc>
 80212fc:	4604      	mov	r4, r0
 80212fe:	b940      	cbnz	r0, 8021312 <__gethex+0x182>
 8021300:	4b65      	ldr	r3, [pc, #404]	; (8021498 <__gethex+0x308>)
 8021302:	4602      	mov	r2, r0
 8021304:	21de      	movs	r1, #222	; 0xde
 8021306:	4865      	ldr	r0, [pc, #404]	; (802149c <__gethex+0x30c>)
 8021308:	f7fe fee0 	bl	80200cc <__assert_func>
 802130c:	3101      	adds	r1, #1
 802130e:	105b      	asrs	r3, r3, #1
 8021310:	e7ee      	b.n	80212f0 <__gethex+0x160>
 8021312:	f100 0914 	add.w	r9, r0, #20
 8021316:	f04f 0b00 	mov.w	fp, #0
 802131a:	f1ca 0301 	rsb	r3, sl, #1
 802131e:	f8cd 9008 	str.w	r9, [sp, #8]
 8021322:	f8cd b000 	str.w	fp, [sp]
 8021326:	9306      	str	r3, [sp, #24]
 8021328:	42b7      	cmp	r7, r6
 802132a:	d340      	bcc.n	80213ae <__gethex+0x21e>
 802132c:	9802      	ldr	r0, [sp, #8]
 802132e:	9b00      	ldr	r3, [sp, #0]
 8021330:	f840 3b04 	str.w	r3, [r0], #4
 8021334:	eba0 0009 	sub.w	r0, r0, r9
 8021338:	1080      	asrs	r0, r0, #2
 802133a:	0146      	lsls	r6, r0, #5
 802133c:	6120      	str	r0, [r4, #16]
 802133e:	4618      	mov	r0, r3
 8021340:	f000 fbae 	bl	8021aa0 <__hi0bits>
 8021344:	1a30      	subs	r0, r6, r0
 8021346:	f8d8 6000 	ldr.w	r6, [r8]
 802134a:	42b0      	cmp	r0, r6
 802134c:	dd63      	ble.n	8021416 <__gethex+0x286>
 802134e:	1b87      	subs	r7, r0, r6
 8021350:	4639      	mov	r1, r7
 8021352:	4620      	mov	r0, r4
 8021354:	f000 ff49 	bl	80221ea <__any_on>
 8021358:	4682      	mov	sl, r0
 802135a:	b1a8      	cbz	r0, 8021388 <__gethex+0x1f8>
 802135c:	1e7b      	subs	r3, r7, #1
 802135e:	1159      	asrs	r1, r3, #5
 8021360:	f003 021f 	and.w	r2, r3, #31
 8021364:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8021368:	f04f 0a01 	mov.w	sl, #1
 802136c:	fa0a f202 	lsl.w	r2, sl, r2
 8021370:	420a      	tst	r2, r1
 8021372:	d009      	beq.n	8021388 <__gethex+0x1f8>
 8021374:	4553      	cmp	r3, sl
 8021376:	dd05      	ble.n	8021384 <__gethex+0x1f4>
 8021378:	1eb9      	subs	r1, r7, #2
 802137a:	4620      	mov	r0, r4
 802137c:	f000 ff35 	bl	80221ea <__any_on>
 8021380:	2800      	cmp	r0, #0
 8021382:	d145      	bne.n	8021410 <__gethex+0x280>
 8021384:	f04f 0a02 	mov.w	sl, #2
 8021388:	4639      	mov	r1, r7
 802138a:	4620      	mov	r0, r4
 802138c:	f7ff fe99 	bl	80210c2 <rshift>
 8021390:	443d      	add	r5, r7
 8021392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021396:	42ab      	cmp	r3, r5
 8021398:	da4c      	bge.n	8021434 <__gethex+0x2a4>
 802139a:	ee18 0a10 	vmov	r0, s16
 802139e:	4621      	mov	r1, r4
 80213a0:	f000 fac8 	bl	8021934 <_Bfree>
 80213a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80213a6:	2300      	movs	r3, #0
 80213a8:	6013      	str	r3, [r2, #0]
 80213aa:	27a3      	movs	r7, #163	; 0xa3
 80213ac:	e785      	b.n	80212ba <__gethex+0x12a>
 80213ae:	1e73      	subs	r3, r6, #1
 80213b0:	9a05      	ldr	r2, [sp, #20]
 80213b2:	9303      	str	r3, [sp, #12]
 80213b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80213b8:	4293      	cmp	r3, r2
 80213ba:	d019      	beq.n	80213f0 <__gethex+0x260>
 80213bc:	f1bb 0f20 	cmp.w	fp, #32
 80213c0:	d107      	bne.n	80213d2 <__gethex+0x242>
 80213c2:	9b02      	ldr	r3, [sp, #8]
 80213c4:	9a00      	ldr	r2, [sp, #0]
 80213c6:	f843 2b04 	str.w	r2, [r3], #4
 80213ca:	9302      	str	r3, [sp, #8]
 80213cc:	2300      	movs	r3, #0
 80213ce:	9300      	str	r3, [sp, #0]
 80213d0:	469b      	mov	fp, r3
 80213d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80213d6:	f7ff fec6 	bl	8021166 <__hexdig_fun>
 80213da:	9b00      	ldr	r3, [sp, #0]
 80213dc:	f000 000f 	and.w	r0, r0, #15
 80213e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80213e4:	4303      	orrs	r3, r0
 80213e6:	9300      	str	r3, [sp, #0]
 80213e8:	f10b 0b04 	add.w	fp, fp, #4
 80213ec:	9b03      	ldr	r3, [sp, #12]
 80213ee:	e00d      	b.n	802140c <__gethex+0x27c>
 80213f0:	9b03      	ldr	r3, [sp, #12]
 80213f2:	9a06      	ldr	r2, [sp, #24]
 80213f4:	4413      	add	r3, r2
 80213f6:	42bb      	cmp	r3, r7
 80213f8:	d3e0      	bcc.n	80213bc <__gethex+0x22c>
 80213fa:	4618      	mov	r0, r3
 80213fc:	9901      	ldr	r1, [sp, #4]
 80213fe:	9307      	str	r3, [sp, #28]
 8021400:	4652      	mov	r2, sl
 8021402:	f7fd ff13 	bl	801f22c <strncmp>
 8021406:	9b07      	ldr	r3, [sp, #28]
 8021408:	2800      	cmp	r0, #0
 802140a:	d1d7      	bne.n	80213bc <__gethex+0x22c>
 802140c:	461e      	mov	r6, r3
 802140e:	e78b      	b.n	8021328 <__gethex+0x198>
 8021410:	f04f 0a03 	mov.w	sl, #3
 8021414:	e7b8      	b.n	8021388 <__gethex+0x1f8>
 8021416:	da0a      	bge.n	802142e <__gethex+0x29e>
 8021418:	1a37      	subs	r7, r6, r0
 802141a:	4621      	mov	r1, r4
 802141c:	ee18 0a10 	vmov	r0, s16
 8021420:	463a      	mov	r2, r7
 8021422:	f000 fca3 	bl	8021d6c <__lshift>
 8021426:	1bed      	subs	r5, r5, r7
 8021428:	4604      	mov	r4, r0
 802142a:	f100 0914 	add.w	r9, r0, #20
 802142e:	f04f 0a00 	mov.w	sl, #0
 8021432:	e7ae      	b.n	8021392 <__gethex+0x202>
 8021434:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021438:	42a8      	cmp	r0, r5
 802143a:	dd72      	ble.n	8021522 <__gethex+0x392>
 802143c:	1b45      	subs	r5, r0, r5
 802143e:	42ae      	cmp	r6, r5
 8021440:	dc36      	bgt.n	80214b0 <__gethex+0x320>
 8021442:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021446:	2b02      	cmp	r3, #2
 8021448:	d02a      	beq.n	80214a0 <__gethex+0x310>
 802144a:	2b03      	cmp	r3, #3
 802144c:	d02c      	beq.n	80214a8 <__gethex+0x318>
 802144e:	2b01      	cmp	r3, #1
 8021450:	d115      	bne.n	802147e <__gethex+0x2ee>
 8021452:	42ae      	cmp	r6, r5
 8021454:	d113      	bne.n	802147e <__gethex+0x2ee>
 8021456:	2e01      	cmp	r6, #1
 8021458:	d10b      	bne.n	8021472 <__gethex+0x2e2>
 802145a:	9a04      	ldr	r2, [sp, #16]
 802145c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021460:	6013      	str	r3, [r2, #0]
 8021462:	2301      	movs	r3, #1
 8021464:	6123      	str	r3, [r4, #16]
 8021466:	f8c9 3000 	str.w	r3, [r9]
 802146a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802146c:	2762      	movs	r7, #98	; 0x62
 802146e:	601c      	str	r4, [r3, #0]
 8021470:	e723      	b.n	80212ba <__gethex+0x12a>
 8021472:	1e71      	subs	r1, r6, #1
 8021474:	4620      	mov	r0, r4
 8021476:	f000 feb8 	bl	80221ea <__any_on>
 802147a:	2800      	cmp	r0, #0
 802147c:	d1ed      	bne.n	802145a <__gethex+0x2ca>
 802147e:	ee18 0a10 	vmov	r0, s16
 8021482:	4621      	mov	r1, r4
 8021484:	f000 fa56 	bl	8021934 <_Bfree>
 8021488:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802148a:	2300      	movs	r3, #0
 802148c:	6013      	str	r3, [r2, #0]
 802148e:	2750      	movs	r7, #80	; 0x50
 8021490:	e713      	b.n	80212ba <__gethex+0x12a>
 8021492:	bf00      	nop
 8021494:	080276e0 	.word	0x080276e0
 8021498:	08027600 	.word	0x08027600
 802149c:	08027674 	.word	0x08027674
 80214a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80214a2:	2b00      	cmp	r3, #0
 80214a4:	d1eb      	bne.n	802147e <__gethex+0x2ee>
 80214a6:	e7d8      	b.n	802145a <__gethex+0x2ca>
 80214a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d1d5      	bne.n	802145a <__gethex+0x2ca>
 80214ae:	e7e6      	b.n	802147e <__gethex+0x2ee>
 80214b0:	1e6f      	subs	r7, r5, #1
 80214b2:	f1ba 0f00 	cmp.w	sl, #0
 80214b6:	d131      	bne.n	802151c <__gethex+0x38c>
 80214b8:	b127      	cbz	r7, 80214c4 <__gethex+0x334>
 80214ba:	4639      	mov	r1, r7
 80214bc:	4620      	mov	r0, r4
 80214be:	f000 fe94 	bl	80221ea <__any_on>
 80214c2:	4682      	mov	sl, r0
 80214c4:	117b      	asrs	r3, r7, #5
 80214c6:	2101      	movs	r1, #1
 80214c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80214cc:	f007 071f 	and.w	r7, r7, #31
 80214d0:	fa01 f707 	lsl.w	r7, r1, r7
 80214d4:	421f      	tst	r7, r3
 80214d6:	4629      	mov	r1, r5
 80214d8:	4620      	mov	r0, r4
 80214da:	bf18      	it	ne
 80214dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80214e0:	1b76      	subs	r6, r6, r5
 80214e2:	f7ff fdee 	bl	80210c2 <rshift>
 80214e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80214ea:	2702      	movs	r7, #2
 80214ec:	f1ba 0f00 	cmp.w	sl, #0
 80214f0:	d048      	beq.n	8021584 <__gethex+0x3f4>
 80214f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80214f6:	2b02      	cmp	r3, #2
 80214f8:	d015      	beq.n	8021526 <__gethex+0x396>
 80214fa:	2b03      	cmp	r3, #3
 80214fc:	d017      	beq.n	802152e <__gethex+0x39e>
 80214fe:	2b01      	cmp	r3, #1
 8021500:	d109      	bne.n	8021516 <__gethex+0x386>
 8021502:	f01a 0f02 	tst.w	sl, #2
 8021506:	d006      	beq.n	8021516 <__gethex+0x386>
 8021508:	f8d9 0000 	ldr.w	r0, [r9]
 802150c:	ea4a 0a00 	orr.w	sl, sl, r0
 8021510:	f01a 0f01 	tst.w	sl, #1
 8021514:	d10e      	bne.n	8021534 <__gethex+0x3a4>
 8021516:	f047 0710 	orr.w	r7, r7, #16
 802151a:	e033      	b.n	8021584 <__gethex+0x3f4>
 802151c:	f04f 0a01 	mov.w	sl, #1
 8021520:	e7d0      	b.n	80214c4 <__gethex+0x334>
 8021522:	2701      	movs	r7, #1
 8021524:	e7e2      	b.n	80214ec <__gethex+0x35c>
 8021526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021528:	f1c3 0301 	rsb	r3, r3, #1
 802152c:	9315      	str	r3, [sp, #84]	; 0x54
 802152e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021530:	2b00      	cmp	r3, #0
 8021532:	d0f0      	beq.n	8021516 <__gethex+0x386>
 8021534:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021538:	f104 0314 	add.w	r3, r4, #20
 802153c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021540:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021544:	f04f 0c00 	mov.w	ip, #0
 8021548:	4618      	mov	r0, r3
 802154a:	f853 2b04 	ldr.w	r2, [r3], #4
 802154e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8021552:	d01c      	beq.n	802158e <__gethex+0x3fe>
 8021554:	3201      	adds	r2, #1
 8021556:	6002      	str	r2, [r0, #0]
 8021558:	2f02      	cmp	r7, #2
 802155a:	f104 0314 	add.w	r3, r4, #20
 802155e:	d13f      	bne.n	80215e0 <__gethex+0x450>
 8021560:	f8d8 2000 	ldr.w	r2, [r8]
 8021564:	3a01      	subs	r2, #1
 8021566:	42b2      	cmp	r2, r6
 8021568:	d10a      	bne.n	8021580 <__gethex+0x3f0>
 802156a:	1171      	asrs	r1, r6, #5
 802156c:	2201      	movs	r2, #1
 802156e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021572:	f006 061f 	and.w	r6, r6, #31
 8021576:	fa02 f606 	lsl.w	r6, r2, r6
 802157a:	421e      	tst	r6, r3
 802157c:	bf18      	it	ne
 802157e:	4617      	movne	r7, r2
 8021580:	f047 0720 	orr.w	r7, r7, #32
 8021584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021586:	601c      	str	r4, [r3, #0]
 8021588:	9b04      	ldr	r3, [sp, #16]
 802158a:	601d      	str	r5, [r3, #0]
 802158c:	e695      	b.n	80212ba <__gethex+0x12a>
 802158e:	4299      	cmp	r1, r3
 8021590:	f843 cc04 	str.w	ip, [r3, #-4]
 8021594:	d8d8      	bhi.n	8021548 <__gethex+0x3b8>
 8021596:	68a3      	ldr	r3, [r4, #8]
 8021598:	459b      	cmp	fp, r3
 802159a:	db19      	blt.n	80215d0 <__gethex+0x440>
 802159c:	6861      	ldr	r1, [r4, #4]
 802159e:	ee18 0a10 	vmov	r0, s16
 80215a2:	3101      	adds	r1, #1
 80215a4:	f000 f986 	bl	80218b4 <_Balloc>
 80215a8:	4681      	mov	r9, r0
 80215aa:	b918      	cbnz	r0, 80215b4 <__gethex+0x424>
 80215ac:	4b1a      	ldr	r3, [pc, #104]	; (8021618 <__gethex+0x488>)
 80215ae:	4602      	mov	r2, r0
 80215b0:	2184      	movs	r1, #132	; 0x84
 80215b2:	e6a8      	b.n	8021306 <__gethex+0x176>
 80215b4:	6922      	ldr	r2, [r4, #16]
 80215b6:	3202      	adds	r2, #2
 80215b8:	f104 010c 	add.w	r1, r4, #12
 80215bc:	0092      	lsls	r2, r2, #2
 80215be:	300c      	adds	r0, #12
 80215c0:	f7fc fe10 	bl	801e1e4 <memcpy>
 80215c4:	4621      	mov	r1, r4
 80215c6:	ee18 0a10 	vmov	r0, s16
 80215ca:	f000 f9b3 	bl	8021934 <_Bfree>
 80215ce:	464c      	mov	r4, r9
 80215d0:	6923      	ldr	r3, [r4, #16]
 80215d2:	1c5a      	adds	r2, r3, #1
 80215d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80215d8:	6122      	str	r2, [r4, #16]
 80215da:	2201      	movs	r2, #1
 80215dc:	615a      	str	r2, [r3, #20]
 80215de:	e7bb      	b.n	8021558 <__gethex+0x3c8>
 80215e0:	6922      	ldr	r2, [r4, #16]
 80215e2:	455a      	cmp	r2, fp
 80215e4:	dd0b      	ble.n	80215fe <__gethex+0x46e>
 80215e6:	2101      	movs	r1, #1
 80215e8:	4620      	mov	r0, r4
 80215ea:	f7ff fd6a 	bl	80210c2 <rshift>
 80215ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80215f2:	3501      	adds	r5, #1
 80215f4:	42ab      	cmp	r3, r5
 80215f6:	f6ff aed0 	blt.w	802139a <__gethex+0x20a>
 80215fa:	2701      	movs	r7, #1
 80215fc:	e7c0      	b.n	8021580 <__gethex+0x3f0>
 80215fe:	f016 061f 	ands.w	r6, r6, #31
 8021602:	d0fa      	beq.n	80215fa <__gethex+0x46a>
 8021604:	449a      	add	sl, r3
 8021606:	f1c6 0620 	rsb	r6, r6, #32
 802160a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802160e:	f000 fa47 	bl	8021aa0 <__hi0bits>
 8021612:	42b0      	cmp	r0, r6
 8021614:	dbe7      	blt.n	80215e6 <__gethex+0x456>
 8021616:	e7f0      	b.n	80215fa <__gethex+0x46a>
 8021618:	08027600 	.word	0x08027600

0802161c <L_shift>:
 802161c:	f1c2 0208 	rsb	r2, r2, #8
 8021620:	0092      	lsls	r2, r2, #2
 8021622:	b570      	push	{r4, r5, r6, lr}
 8021624:	f1c2 0620 	rsb	r6, r2, #32
 8021628:	6843      	ldr	r3, [r0, #4]
 802162a:	6804      	ldr	r4, [r0, #0]
 802162c:	fa03 f506 	lsl.w	r5, r3, r6
 8021630:	432c      	orrs	r4, r5
 8021632:	40d3      	lsrs	r3, r2
 8021634:	6004      	str	r4, [r0, #0]
 8021636:	f840 3f04 	str.w	r3, [r0, #4]!
 802163a:	4288      	cmp	r0, r1
 802163c:	d3f4      	bcc.n	8021628 <L_shift+0xc>
 802163e:	bd70      	pop	{r4, r5, r6, pc}

08021640 <__match>:
 8021640:	b530      	push	{r4, r5, lr}
 8021642:	6803      	ldr	r3, [r0, #0]
 8021644:	3301      	adds	r3, #1
 8021646:	f811 4b01 	ldrb.w	r4, [r1], #1
 802164a:	b914      	cbnz	r4, 8021652 <__match+0x12>
 802164c:	6003      	str	r3, [r0, #0]
 802164e:	2001      	movs	r0, #1
 8021650:	bd30      	pop	{r4, r5, pc}
 8021652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021656:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802165a:	2d19      	cmp	r5, #25
 802165c:	bf98      	it	ls
 802165e:	3220      	addls	r2, #32
 8021660:	42a2      	cmp	r2, r4
 8021662:	d0f0      	beq.n	8021646 <__match+0x6>
 8021664:	2000      	movs	r0, #0
 8021666:	e7f3      	b.n	8021650 <__match+0x10>

08021668 <__hexnan>:
 8021668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802166c:	680b      	ldr	r3, [r1, #0]
 802166e:	6801      	ldr	r1, [r0, #0]
 8021670:	115e      	asrs	r6, r3, #5
 8021672:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021676:	f013 031f 	ands.w	r3, r3, #31
 802167a:	b087      	sub	sp, #28
 802167c:	bf18      	it	ne
 802167e:	3604      	addne	r6, #4
 8021680:	2500      	movs	r5, #0
 8021682:	1f37      	subs	r7, r6, #4
 8021684:	4682      	mov	sl, r0
 8021686:	4690      	mov	r8, r2
 8021688:	9301      	str	r3, [sp, #4]
 802168a:	f846 5c04 	str.w	r5, [r6, #-4]
 802168e:	46b9      	mov	r9, r7
 8021690:	463c      	mov	r4, r7
 8021692:	9502      	str	r5, [sp, #8]
 8021694:	46ab      	mov	fp, r5
 8021696:	784a      	ldrb	r2, [r1, #1]
 8021698:	1c4b      	adds	r3, r1, #1
 802169a:	9303      	str	r3, [sp, #12]
 802169c:	b342      	cbz	r2, 80216f0 <__hexnan+0x88>
 802169e:	4610      	mov	r0, r2
 80216a0:	9105      	str	r1, [sp, #20]
 80216a2:	9204      	str	r2, [sp, #16]
 80216a4:	f7ff fd5f 	bl	8021166 <__hexdig_fun>
 80216a8:	2800      	cmp	r0, #0
 80216aa:	d14f      	bne.n	802174c <__hexnan+0xe4>
 80216ac:	9a04      	ldr	r2, [sp, #16]
 80216ae:	9905      	ldr	r1, [sp, #20]
 80216b0:	2a20      	cmp	r2, #32
 80216b2:	d818      	bhi.n	80216e6 <__hexnan+0x7e>
 80216b4:	9b02      	ldr	r3, [sp, #8]
 80216b6:	459b      	cmp	fp, r3
 80216b8:	dd13      	ble.n	80216e2 <__hexnan+0x7a>
 80216ba:	454c      	cmp	r4, r9
 80216bc:	d206      	bcs.n	80216cc <__hexnan+0x64>
 80216be:	2d07      	cmp	r5, #7
 80216c0:	dc04      	bgt.n	80216cc <__hexnan+0x64>
 80216c2:	462a      	mov	r2, r5
 80216c4:	4649      	mov	r1, r9
 80216c6:	4620      	mov	r0, r4
 80216c8:	f7ff ffa8 	bl	802161c <L_shift>
 80216cc:	4544      	cmp	r4, r8
 80216ce:	d950      	bls.n	8021772 <__hexnan+0x10a>
 80216d0:	2300      	movs	r3, #0
 80216d2:	f1a4 0904 	sub.w	r9, r4, #4
 80216d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80216da:	f8cd b008 	str.w	fp, [sp, #8]
 80216de:	464c      	mov	r4, r9
 80216e0:	461d      	mov	r5, r3
 80216e2:	9903      	ldr	r1, [sp, #12]
 80216e4:	e7d7      	b.n	8021696 <__hexnan+0x2e>
 80216e6:	2a29      	cmp	r2, #41	; 0x29
 80216e8:	d156      	bne.n	8021798 <__hexnan+0x130>
 80216ea:	3102      	adds	r1, #2
 80216ec:	f8ca 1000 	str.w	r1, [sl]
 80216f0:	f1bb 0f00 	cmp.w	fp, #0
 80216f4:	d050      	beq.n	8021798 <__hexnan+0x130>
 80216f6:	454c      	cmp	r4, r9
 80216f8:	d206      	bcs.n	8021708 <__hexnan+0xa0>
 80216fa:	2d07      	cmp	r5, #7
 80216fc:	dc04      	bgt.n	8021708 <__hexnan+0xa0>
 80216fe:	462a      	mov	r2, r5
 8021700:	4649      	mov	r1, r9
 8021702:	4620      	mov	r0, r4
 8021704:	f7ff ff8a 	bl	802161c <L_shift>
 8021708:	4544      	cmp	r4, r8
 802170a:	d934      	bls.n	8021776 <__hexnan+0x10e>
 802170c:	f1a8 0204 	sub.w	r2, r8, #4
 8021710:	4623      	mov	r3, r4
 8021712:	f853 1b04 	ldr.w	r1, [r3], #4
 8021716:	f842 1f04 	str.w	r1, [r2, #4]!
 802171a:	429f      	cmp	r7, r3
 802171c:	d2f9      	bcs.n	8021712 <__hexnan+0xaa>
 802171e:	1b3b      	subs	r3, r7, r4
 8021720:	f023 0303 	bic.w	r3, r3, #3
 8021724:	3304      	adds	r3, #4
 8021726:	3401      	adds	r4, #1
 8021728:	3e03      	subs	r6, #3
 802172a:	42b4      	cmp	r4, r6
 802172c:	bf88      	it	hi
 802172e:	2304      	movhi	r3, #4
 8021730:	4443      	add	r3, r8
 8021732:	2200      	movs	r2, #0
 8021734:	f843 2b04 	str.w	r2, [r3], #4
 8021738:	429f      	cmp	r7, r3
 802173a:	d2fb      	bcs.n	8021734 <__hexnan+0xcc>
 802173c:	683b      	ldr	r3, [r7, #0]
 802173e:	b91b      	cbnz	r3, 8021748 <__hexnan+0xe0>
 8021740:	4547      	cmp	r7, r8
 8021742:	d127      	bne.n	8021794 <__hexnan+0x12c>
 8021744:	2301      	movs	r3, #1
 8021746:	603b      	str	r3, [r7, #0]
 8021748:	2005      	movs	r0, #5
 802174a:	e026      	b.n	802179a <__hexnan+0x132>
 802174c:	3501      	adds	r5, #1
 802174e:	2d08      	cmp	r5, #8
 8021750:	f10b 0b01 	add.w	fp, fp, #1
 8021754:	dd06      	ble.n	8021764 <__hexnan+0xfc>
 8021756:	4544      	cmp	r4, r8
 8021758:	d9c3      	bls.n	80216e2 <__hexnan+0x7a>
 802175a:	2300      	movs	r3, #0
 802175c:	f844 3c04 	str.w	r3, [r4, #-4]
 8021760:	2501      	movs	r5, #1
 8021762:	3c04      	subs	r4, #4
 8021764:	6822      	ldr	r2, [r4, #0]
 8021766:	f000 000f 	and.w	r0, r0, #15
 802176a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802176e:	6022      	str	r2, [r4, #0]
 8021770:	e7b7      	b.n	80216e2 <__hexnan+0x7a>
 8021772:	2508      	movs	r5, #8
 8021774:	e7b5      	b.n	80216e2 <__hexnan+0x7a>
 8021776:	9b01      	ldr	r3, [sp, #4]
 8021778:	2b00      	cmp	r3, #0
 802177a:	d0df      	beq.n	802173c <__hexnan+0xd4>
 802177c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021780:	f1c3 0320 	rsb	r3, r3, #32
 8021784:	fa22 f303 	lsr.w	r3, r2, r3
 8021788:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802178c:	401a      	ands	r2, r3
 802178e:	f846 2c04 	str.w	r2, [r6, #-4]
 8021792:	e7d3      	b.n	802173c <__hexnan+0xd4>
 8021794:	3f04      	subs	r7, #4
 8021796:	e7d1      	b.n	802173c <__hexnan+0xd4>
 8021798:	2004      	movs	r0, #4
 802179a:	b007      	add	sp, #28
 802179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217a0 <_localeconv_r>:
 80217a0:	4800      	ldr	r0, [pc, #0]	; (80217a4 <_localeconv_r+0x4>)
 80217a2:	4770      	bx	lr
 80217a4:	2400359c 	.word	0x2400359c

080217a8 <__retarget_lock_init_recursive>:
 80217a8:	4770      	bx	lr

080217aa <__retarget_lock_acquire_recursive>:
 80217aa:	4770      	bx	lr

080217ac <__retarget_lock_release_recursive>:
 80217ac:	4770      	bx	lr

080217ae <__swhatbuf_r>:
 80217ae:	b570      	push	{r4, r5, r6, lr}
 80217b0:	460e      	mov	r6, r1
 80217b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80217b6:	2900      	cmp	r1, #0
 80217b8:	b096      	sub	sp, #88	; 0x58
 80217ba:	4614      	mov	r4, r2
 80217bc:	461d      	mov	r5, r3
 80217be:	da07      	bge.n	80217d0 <__swhatbuf_r+0x22>
 80217c0:	2300      	movs	r3, #0
 80217c2:	602b      	str	r3, [r5, #0]
 80217c4:	89b3      	ldrh	r3, [r6, #12]
 80217c6:	061a      	lsls	r2, r3, #24
 80217c8:	d410      	bmi.n	80217ec <__swhatbuf_r+0x3e>
 80217ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80217ce:	e00e      	b.n	80217ee <__swhatbuf_r+0x40>
 80217d0:	466a      	mov	r2, sp
 80217d2:	f001 f873 	bl	80228bc <_fstat_r>
 80217d6:	2800      	cmp	r0, #0
 80217d8:	dbf2      	blt.n	80217c0 <__swhatbuf_r+0x12>
 80217da:	9a01      	ldr	r2, [sp, #4]
 80217dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80217e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80217e4:	425a      	negs	r2, r3
 80217e6:	415a      	adcs	r2, r3
 80217e8:	602a      	str	r2, [r5, #0]
 80217ea:	e7ee      	b.n	80217ca <__swhatbuf_r+0x1c>
 80217ec:	2340      	movs	r3, #64	; 0x40
 80217ee:	2000      	movs	r0, #0
 80217f0:	6023      	str	r3, [r4, #0]
 80217f2:	b016      	add	sp, #88	; 0x58
 80217f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080217f8 <__smakebuf_r>:
 80217f8:	898b      	ldrh	r3, [r1, #12]
 80217fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80217fc:	079d      	lsls	r5, r3, #30
 80217fe:	4606      	mov	r6, r0
 8021800:	460c      	mov	r4, r1
 8021802:	d507      	bpl.n	8021814 <__smakebuf_r+0x1c>
 8021804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021808:	6023      	str	r3, [r4, #0]
 802180a:	6123      	str	r3, [r4, #16]
 802180c:	2301      	movs	r3, #1
 802180e:	6163      	str	r3, [r4, #20]
 8021810:	b002      	add	sp, #8
 8021812:	bd70      	pop	{r4, r5, r6, pc}
 8021814:	ab01      	add	r3, sp, #4
 8021816:	466a      	mov	r2, sp
 8021818:	f7ff ffc9 	bl	80217ae <__swhatbuf_r>
 802181c:	9900      	ldr	r1, [sp, #0]
 802181e:	4605      	mov	r5, r0
 8021820:	4630      	mov	r0, r6
 8021822:	f7fc fd5f 	bl	801e2e4 <_malloc_r>
 8021826:	b948      	cbnz	r0, 802183c <__smakebuf_r+0x44>
 8021828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802182c:	059a      	lsls	r2, r3, #22
 802182e:	d4ef      	bmi.n	8021810 <__smakebuf_r+0x18>
 8021830:	f023 0303 	bic.w	r3, r3, #3
 8021834:	f043 0302 	orr.w	r3, r3, #2
 8021838:	81a3      	strh	r3, [r4, #12]
 802183a:	e7e3      	b.n	8021804 <__smakebuf_r+0xc>
 802183c:	4b0d      	ldr	r3, [pc, #52]	; (8021874 <__smakebuf_r+0x7c>)
 802183e:	62b3      	str	r3, [r6, #40]	; 0x28
 8021840:	89a3      	ldrh	r3, [r4, #12]
 8021842:	6020      	str	r0, [r4, #0]
 8021844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021848:	81a3      	strh	r3, [r4, #12]
 802184a:	9b00      	ldr	r3, [sp, #0]
 802184c:	6163      	str	r3, [r4, #20]
 802184e:	9b01      	ldr	r3, [sp, #4]
 8021850:	6120      	str	r0, [r4, #16]
 8021852:	b15b      	cbz	r3, 802186c <__smakebuf_r+0x74>
 8021854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021858:	4630      	mov	r0, r6
 802185a:	f001 f841 	bl	80228e0 <_isatty_r>
 802185e:	b128      	cbz	r0, 802186c <__smakebuf_r+0x74>
 8021860:	89a3      	ldrh	r3, [r4, #12]
 8021862:	f023 0303 	bic.w	r3, r3, #3
 8021866:	f043 0301 	orr.w	r3, r3, #1
 802186a:	81a3      	strh	r3, [r4, #12]
 802186c:	89a0      	ldrh	r0, [r4, #12]
 802186e:	4305      	orrs	r5, r0
 8021870:	81a5      	strh	r5, [r4, #12]
 8021872:	e7cd      	b.n	8021810 <__smakebuf_r+0x18>
 8021874:	08020efd 	.word	0x08020efd

08021878 <__ascii_mbtowc>:
 8021878:	b082      	sub	sp, #8
 802187a:	b901      	cbnz	r1, 802187e <__ascii_mbtowc+0x6>
 802187c:	a901      	add	r1, sp, #4
 802187e:	b142      	cbz	r2, 8021892 <__ascii_mbtowc+0x1a>
 8021880:	b14b      	cbz	r3, 8021896 <__ascii_mbtowc+0x1e>
 8021882:	7813      	ldrb	r3, [r2, #0]
 8021884:	600b      	str	r3, [r1, #0]
 8021886:	7812      	ldrb	r2, [r2, #0]
 8021888:	1e10      	subs	r0, r2, #0
 802188a:	bf18      	it	ne
 802188c:	2001      	movne	r0, #1
 802188e:	b002      	add	sp, #8
 8021890:	4770      	bx	lr
 8021892:	4610      	mov	r0, r2
 8021894:	e7fb      	b.n	802188e <__ascii_mbtowc+0x16>
 8021896:	f06f 0001 	mvn.w	r0, #1
 802189a:	e7f8      	b.n	802188e <__ascii_mbtowc+0x16>

0802189c <__malloc_lock>:
 802189c:	4801      	ldr	r0, [pc, #4]	; (80218a4 <__malloc_lock+0x8>)
 802189e:	f7ff bf84 	b.w	80217aa <__retarget_lock_acquire_recursive>
 80218a2:	bf00      	nop
 80218a4:	2400b248 	.word	0x2400b248

080218a8 <__malloc_unlock>:
 80218a8:	4801      	ldr	r0, [pc, #4]	; (80218b0 <__malloc_unlock+0x8>)
 80218aa:	f7ff bf7f 	b.w	80217ac <__retarget_lock_release_recursive>
 80218ae:	bf00      	nop
 80218b0:	2400b248 	.word	0x2400b248

080218b4 <_Balloc>:
 80218b4:	b570      	push	{r4, r5, r6, lr}
 80218b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80218b8:	4604      	mov	r4, r0
 80218ba:	460d      	mov	r5, r1
 80218bc:	b976      	cbnz	r6, 80218dc <_Balloc+0x28>
 80218be:	2010      	movs	r0, #16
 80218c0:	f7fc fc7a 	bl	801e1b8 <malloc>
 80218c4:	4602      	mov	r2, r0
 80218c6:	6260      	str	r0, [r4, #36]	; 0x24
 80218c8:	b920      	cbnz	r0, 80218d4 <_Balloc+0x20>
 80218ca:	4b18      	ldr	r3, [pc, #96]	; (802192c <_Balloc+0x78>)
 80218cc:	4818      	ldr	r0, [pc, #96]	; (8021930 <_Balloc+0x7c>)
 80218ce:	2166      	movs	r1, #102	; 0x66
 80218d0:	f7fe fbfc 	bl	80200cc <__assert_func>
 80218d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80218d8:	6006      	str	r6, [r0, #0]
 80218da:	60c6      	str	r6, [r0, #12]
 80218dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80218de:	68f3      	ldr	r3, [r6, #12]
 80218e0:	b183      	cbz	r3, 8021904 <_Balloc+0x50>
 80218e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80218e4:	68db      	ldr	r3, [r3, #12]
 80218e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80218ea:	b9b8      	cbnz	r0, 802191c <_Balloc+0x68>
 80218ec:	2101      	movs	r1, #1
 80218ee:	fa01 f605 	lsl.w	r6, r1, r5
 80218f2:	1d72      	adds	r2, r6, #5
 80218f4:	0092      	lsls	r2, r2, #2
 80218f6:	4620      	mov	r0, r4
 80218f8:	f000 fc98 	bl	802222c <_calloc_r>
 80218fc:	b160      	cbz	r0, 8021918 <_Balloc+0x64>
 80218fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021902:	e00e      	b.n	8021922 <_Balloc+0x6e>
 8021904:	2221      	movs	r2, #33	; 0x21
 8021906:	2104      	movs	r1, #4
 8021908:	4620      	mov	r0, r4
 802190a:	f000 fc8f 	bl	802222c <_calloc_r>
 802190e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021910:	60f0      	str	r0, [r6, #12]
 8021912:	68db      	ldr	r3, [r3, #12]
 8021914:	2b00      	cmp	r3, #0
 8021916:	d1e4      	bne.n	80218e2 <_Balloc+0x2e>
 8021918:	2000      	movs	r0, #0
 802191a:	bd70      	pop	{r4, r5, r6, pc}
 802191c:	6802      	ldr	r2, [r0, #0]
 802191e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021922:	2300      	movs	r3, #0
 8021924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021928:	e7f7      	b.n	802191a <_Balloc+0x66>
 802192a:	bf00      	nop
 802192c:	0802748d 	.word	0x0802748d
 8021930:	080276f4 	.word	0x080276f4

08021934 <_Bfree>:
 8021934:	b570      	push	{r4, r5, r6, lr}
 8021936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021938:	4605      	mov	r5, r0
 802193a:	460c      	mov	r4, r1
 802193c:	b976      	cbnz	r6, 802195c <_Bfree+0x28>
 802193e:	2010      	movs	r0, #16
 8021940:	f7fc fc3a 	bl	801e1b8 <malloc>
 8021944:	4602      	mov	r2, r0
 8021946:	6268      	str	r0, [r5, #36]	; 0x24
 8021948:	b920      	cbnz	r0, 8021954 <_Bfree+0x20>
 802194a:	4b09      	ldr	r3, [pc, #36]	; (8021970 <_Bfree+0x3c>)
 802194c:	4809      	ldr	r0, [pc, #36]	; (8021974 <_Bfree+0x40>)
 802194e:	218a      	movs	r1, #138	; 0x8a
 8021950:	f7fe fbbc 	bl	80200cc <__assert_func>
 8021954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021958:	6006      	str	r6, [r0, #0]
 802195a:	60c6      	str	r6, [r0, #12]
 802195c:	b13c      	cbz	r4, 802196e <_Bfree+0x3a>
 802195e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021960:	6862      	ldr	r2, [r4, #4]
 8021962:	68db      	ldr	r3, [r3, #12]
 8021964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021968:	6021      	str	r1, [r4, #0]
 802196a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802196e:	bd70      	pop	{r4, r5, r6, pc}
 8021970:	0802748d 	.word	0x0802748d
 8021974:	080276f4 	.word	0x080276f4

08021978 <__multadd>:
 8021978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802197c:	690e      	ldr	r6, [r1, #16]
 802197e:	4607      	mov	r7, r0
 8021980:	4698      	mov	r8, r3
 8021982:	460c      	mov	r4, r1
 8021984:	f101 0014 	add.w	r0, r1, #20
 8021988:	2300      	movs	r3, #0
 802198a:	6805      	ldr	r5, [r0, #0]
 802198c:	b2a9      	uxth	r1, r5
 802198e:	fb02 8101 	mla	r1, r2, r1, r8
 8021992:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8021996:	0c2d      	lsrs	r5, r5, #16
 8021998:	fb02 c505 	mla	r5, r2, r5, ip
 802199c:	b289      	uxth	r1, r1
 802199e:	3301      	adds	r3, #1
 80219a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80219a4:	429e      	cmp	r6, r3
 80219a6:	f840 1b04 	str.w	r1, [r0], #4
 80219aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80219ae:	dcec      	bgt.n	802198a <__multadd+0x12>
 80219b0:	f1b8 0f00 	cmp.w	r8, #0
 80219b4:	d022      	beq.n	80219fc <__multadd+0x84>
 80219b6:	68a3      	ldr	r3, [r4, #8]
 80219b8:	42b3      	cmp	r3, r6
 80219ba:	dc19      	bgt.n	80219f0 <__multadd+0x78>
 80219bc:	6861      	ldr	r1, [r4, #4]
 80219be:	4638      	mov	r0, r7
 80219c0:	3101      	adds	r1, #1
 80219c2:	f7ff ff77 	bl	80218b4 <_Balloc>
 80219c6:	4605      	mov	r5, r0
 80219c8:	b928      	cbnz	r0, 80219d6 <__multadd+0x5e>
 80219ca:	4602      	mov	r2, r0
 80219cc:	4b0d      	ldr	r3, [pc, #52]	; (8021a04 <__multadd+0x8c>)
 80219ce:	480e      	ldr	r0, [pc, #56]	; (8021a08 <__multadd+0x90>)
 80219d0:	21b5      	movs	r1, #181	; 0xb5
 80219d2:	f7fe fb7b 	bl	80200cc <__assert_func>
 80219d6:	6922      	ldr	r2, [r4, #16]
 80219d8:	3202      	adds	r2, #2
 80219da:	f104 010c 	add.w	r1, r4, #12
 80219de:	0092      	lsls	r2, r2, #2
 80219e0:	300c      	adds	r0, #12
 80219e2:	f7fc fbff 	bl	801e1e4 <memcpy>
 80219e6:	4621      	mov	r1, r4
 80219e8:	4638      	mov	r0, r7
 80219ea:	f7ff ffa3 	bl	8021934 <_Bfree>
 80219ee:	462c      	mov	r4, r5
 80219f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80219f4:	3601      	adds	r6, #1
 80219f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80219fa:	6126      	str	r6, [r4, #16]
 80219fc:	4620      	mov	r0, r4
 80219fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a02:	bf00      	nop
 8021a04:	08027600 	.word	0x08027600
 8021a08:	080276f4 	.word	0x080276f4

08021a0c <__s2b>:
 8021a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a10:	460c      	mov	r4, r1
 8021a12:	4615      	mov	r5, r2
 8021a14:	461f      	mov	r7, r3
 8021a16:	2209      	movs	r2, #9
 8021a18:	3308      	adds	r3, #8
 8021a1a:	4606      	mov	r6, r0
 8021a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8021a20:	2100      	movs	r1, #0
 8021a22:	2201      	movs	r2, #1
 8021a24:	429a      	cmp	r2, r3
 8021a26:	db09      	blt.n	8021a3c <__s2b+0x30>
 8021a28:	4630      	mov	r0, r6
 8021a2a:	f7ff ff43 	bl	80218b4 <_Balloc>
 8021a2e:	b940      	cbnz	r0, 8021a42 <__s2b+0x36>
 8021a30:	4602      	mov	r2, r0
 8021a32:	4b19      	ldr	r3, [pc, #100]	; (8021a98 <__s2b+0x8c>)
 8021a34:	4819      	ldr	r0, [pc, #100]	; (8021a9c <__s2b+0x90>)
 8021a36:	21ce      	movs	r1, #206	; 0xce
 8021a38:	f7fe fb48 	bl	80200cc <__assert_func>
 8021a3c:	0052      	lsls	r2, r2, #1
 8021a3e:	3101      	adds	r1, #1
 8021a40:	e7f0      	b.n	8021a24 <__s2b+0x18>
 8021a42:	9b08      	ldr	r3, [sp, #32]
 8021a44:	6143      	str	r3, [r0, #20]
 8021a46:	2d09      	cmp	r5, #9
 8021a48:	f04f 0301 	mov.w	r3, #1
 8021a4c:	6103      	str	r3, [r0, #16]
 8021a4e:	dd16      	ble.n	8021a7e <__s2b+0x72>
 8021a50:	f104 0909 	add.w	r9, r4, #9
 8021a54:	46c8      	mov	r8, r9
 8021a56:	442c      	add	r4, r5
 8021a58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021a5c:	4601      	mov	r1, r0
 8021a5e:	3b30      	subs	r3, #48	; 0x30
 8021a60:	220a      	movs	r2, #10
 8021a62:	4630      	mov	r0, r6
 8021a64:	f7ff ff88 	bl	8021978 <__multadd>
 8021a68:	45a0      	cmp	r8, r4
 8021a6a:	d1f5      	bne.n	8021a58 <__s2b+0x4c>
 8021a6c:	f1a5 0408 	sub.w	r4, r5, #8
 8021a70:	444c      	add	r4, r9
 8021a72:	1b2d      	subs	r5, r5, r4
 8021a74:	1963      	adds	r3, r4, r5
 8021a76:	42bb      	cmp	r3, r7
 8021a78:	db04      	blt.n	8021a84 <__s2b+0x78>
 8021a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a7e:	340a      	adds	r4, #10
 8021a80:	2509      	movs	r5, #9
 8021a82:	e7f6      	b.n	8021a72 <__s2b+0x66>
 8021a84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021a88:	4601      	mov	r1, r0
 8021a8a:	3b30      	subs	r3, #48	; 0x30
 8021a8c:	220a      	movs	r2, #10
 8021a8e:	4630      	mov	r0, r6
 8021a90:	f7ff ff72 	bl	8021978 <__multadd>
 8021a94:	e7ee      	b.n	8021a74 <__s2b+0x68>
 8021a96:	bf00      	nop
 8021a98:	08027600 	.word	0x08027600
 8021a9c:	080276f4 	.word	0x080276f4

08021aa0 <__hi0bits>:
 8021aa0:	0c03      	lsrs	r3, r0, #16
 8021aa2:	041b      	lsls	r3, r3, #16
 8021aa4:	b9d3      	cbnz	r3, 8021adc <__hi0bits+0x3c>
 8021aa6:	0400      	lsls	r0, r0, #16
 8021aa8:	2310      	movs	r3, #16
 8021aaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021aae:	bf04      	itt	eq
 8021ab0:	0200      	lsleq	r0, r0, #8
 8021ab2:	3308      	addeq	r3, #8
 8021ab4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021ab8:	bf04      	itt	eq
 8021aba:	0100      	lsleq	r0, r0, #4
 8021abc:	3304      	addeq	r3, #4
 8021abe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021ac2:	bf04      	itt	eq
 8021ac4:	0080      	lsleq	r0, r0, #2
 8021ac6:	3302      	addeq	r3, #2
 8021ac8:	2800      	cmp	r0, #0
 8021aca:	db05      	blt.n	8021ad8 <__hi0bits+0x38>
 8021acc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021ad0:	f103 0301 	add.w	r3, r3, #1
 8021ad4:	bf08      	it	eq
 8021ad6:	2320      	moveq	r3, #32
 8021ad8:	4618      	mov	r0, r3
 8021ada:	4770      	bx	lr
 8021adc:	2300      	movs	r3, #0
 8021ade:	e7e4      	b.n	8021aaa <__hi0bits+0xa>

08021ae0 <__lo0bits>:
 8021ae0:	6803      	ldr	r3, [r0, #0]
 8021ae2:	f013 0207 	ands.w	r2, r3, #7
 8021ae6:	4601      	mov	r1, r0
 8021ae8:	d00b      	beq.n	8021b02 <__lo0bits+0x22>
 8021aea:	07da      	lsls	r2, r3, #31
 8021aec:	d424      	bmi.n	8021b38 <__lo0bits+0x58>
 8021aee:	0798      	lsls	r0, r3, #30
 8021af0:	bf49      	itett	mi
 8021af2:	085b      	lsrmi	r3, r3, #1
 8021af4:	089b      	lsrpl	r3, r3, #2
 8021af6:	2001      	movmi	r0, #1
 8021af8:	600b      	strmi	r3, [r1, #0]
 8021afa:	bf5c      	itt	pl
 8021afc:	600b      	strpl	r3, [r1, #0]
 8021afe:	2002      	movpl	r0, #2
 8021b00:	4770      	bx	lr
 8021b02:	b298      	uxth	r0, r3
 8021b04:	b9b0      	cbnz	r0, 8021b34 <__lo0bits+0x54>
 8021b06:	0c1b      	lsrs	r3, r3, #16
 8021b08:	2010      	movs	r0, #16
 8021b0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021b0e:	bf04      	itt	eq
 8021b10:	0a1b      	lsreq	r3, r3, #8
 8021b12:	3008      	addeq	r0, #8
 8021b14:	071a      	lsls	r2, r3, #28
 8021b16:	bf04      	itt	eq
 8021b18:	091b      	lsreq	r3, r3, #4
 8021b1a:	3004      	addeq	r0, #4
 8021b1c:	079a      	lsls	r2, r3, #30
 8021b1e:	bf04      	itt	eq
 8021b20:	089b      	lsreq	r3, r3, #2
 8021b22:	3002      	addeq	r0, #2
 8021b24:	07da      	lsls	r2, r3, #31
 8021b26:	d403      	bmi.n	8021b30 <__lo0bits+0x50>
 8021b28:	085b      	lsrs	r3, r3, #1
 8021b2a:	f100 0001 	add.w	r0, r0, #1
 8021b2e:	d005      	beq.n	8021b3c <__lo0bits+0x5c>
 8021b30:	600b      	str	r3, [r1, #0]
 8021b32:	4770      	bx	lr
 8021b34:	4610      	mov	r0, r2
 8021b36:	e7e8      	b.n	8021b0a <__lo0bits+0x2a>
 8021b38:	2000      	movs	r0, #0
 8021b3a:	4770      	bx	lr
 8021b3c:	2020      	movs	r0, #32
 8021b3e:	4770      	bx	lr

08021b40 <__i2b>:
 8021b40:	b510      	push	{r4, lr}
 8021b42:	460c      	mov	r4, r1
 8021b44:	2101      	movs	r1, #1
 8021b46:	f7ff feb5 	bl	80218b4 <_Balloc>
 8021b4a:	4602      	mov	r2, r0
 8021b4c:	b928      	cbnz	r0, 8021b5a <__i2b+0x1a>
 8021b4e:	4b05      	ldr	r3, [pc, #20]	; (8021b64 <__i2b+0x24>)
 8021b50:	4805      	ldr	r0, [pc, #20]	; (8021b68 <__i2b+0x28>)
 8021b52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021b56:	f7fe fab9 	bl	80200cc <__assert_func>
 8021b5a:	2301      	movs	r3, #1
 8021b5c:	6144      	str	r4, [r0, #20]
 8021b5e:	6103      	str	r3, [r0, #16]
 8021b60:	bd10      	pop	{r4, pc}
 8021b62:	bf00      	nop
 8021b64:	08027600 	.word	0x08027600
 8021b68:	080276f4 	.word	0x080276f4

08021b6c <__multiply>:
 8021b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b70:	4614      	mov	r4, r2
 8021b72:	690a      	ldr	r2, [r1, #16]
 8021b74:	6923      	ldr	r3, [r4, #16]
 8021b76:	429a      	cmp	r2, r3
 8021b78:	bfb8      	it	lt
 8021b7a:	460b      	movlt	r3, r1
 8021b7c:	460d      	mov	r5, r1
 8021b7e:	bfbc      	itt	lt
 8021b80:	4625      	movlt	r5, r4
 8021b82:	461c      	movlt	r4, r3
 8021b84:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021b88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021b8c:	68ab      	ldr	r3, [r5, #8]
 8021b8e:	6869      	ldr	r1, [r5, #4]
 8021b90:	eb0a 0709 	add.w	r7, sl, r9
 8021b94:	42bb      	cmp	r3, r7
 8021b96:	b085      	sub	sp, #20
 8021b98:	bfb8      	it	lt
 8021b9a:	3101      	addlt	r1, #1
 8021b9c:	f7ff fe8a 	bl	80218b4 <_Balloc>
 8021ba0:	b930      	cbnz	r0, 8021bb0 <__multiply+0x44>
 8021ba2:	4602      	mov	r2, r0
 8021ba4:	4b42      	ldr	r3, [pc, #264]	; (8021cb0 <__multiply+0x144>)
 8021ba6:	4843      	ldr	r0, [pc, #268]	; (8021cb4 <__multiply+0x148>)
 8021ba8:	f240 115d 	movw	r1, #349	; 0x15d
 8021bac:	f7fe fa8e 	bl	80200cc <__assert_func>
 8021bb0:	f100 0614 	add.w	r6, r0, #20
 8021bb4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8021bb8:	4633      	mov	r3, r6
 8021bba:	2200      	movs	r2, #0
 8021bbc:	4543      	cmp	r3, r8
 8021bbe:	d31e      	bcc.n	8021bfe <__multiply+0x92>
 8021bc0:	f105 0c14 	add.w	ip, r5, #20
 8021bc4:	f104 0314 	add.w	r3, r4, #20
 8021bc8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8021bcc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8021bd0:	9202      	str	r2, [sp, #8]
 8021bd2:	ebac 0205 	sub.w	r2, ip, r5
 8021bd6:	3a15      	subs	r2, #21
 8021bd8:	f022 0203 	bic.w	r2, r2, #3
 8021bdc:	3204      	adds	r2, #4
 8021bde:	f105 0115 	add.w	r1, r5, #21
 8021be2:	458c      	cmp	ip, r1
 8021be4:	bf38      	it	cc
 8021be6:	2204      	movcc	r2, #4
 8021be8:	9201      	str	r2, [sp, #4]
 8021bea:	9a02      	ldr	r2, [sp, #8]
 8021bec:	9303      	str	r3, [sp, #12]
 8021bee:	429a      	cmp	r2, r3
 8021bf0:	d808      	bhi.n	8021c04 <__multiply+0x98>
 8021bf2:	2f00      	cmp	r7, #0
 8021bf4:	dc55      	bgt.n	8021ca2 <__multiply+0x136>
 8021bf6:	6107      	str	r7, [r0, #16]
 8021bf8:	b005      	add	sp, #20
 8021bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bfe:	f843 2b04 	str.w	r2, [r3], #4
 8021c02:	e7db      	b.n	8021bbc <__multiply+0x50>
 8021c04:	f8b3 a000 	ldrh.w	sl, [r3]
 8021c08:	f1ba 0f00 	cmp.w	sl, #0
 8021c0c:	d020      	beq.n	8021c50 <__multiply+0xe4>
 8021c0e:	f105 0e14 	add.w	lr, r5, #20
 8021c12:	46b1      	mov	r9, r6
 8021c14:	2200      	movs	r2, #0
 8021c16:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021c1a:	f8d9 b000 	ldr.w	fp, [r9]
 8021c1e:	b2a1      	uxth	r1, r4
 8021c20:	fa1f fb8b 	uxth.w	fp, fp
 8021c24:	fb0a b101 	mla	r1, sl, r1, fp
 8021c28:	4411      	add	r1, r2
 8021c2a:	f8d9 2000 	ldr.w	r2, [r9]
 8021c2e:	0c24      	lsrs	r4, r4, #16
 8021c30:	0c12      	lsrs	r2, r2, #16
 8021c32:	fb0a 2404 	mla	r4, sl, r4, r2
 8021c36:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021c3a:	b289      	uxth	r1, r1
 8021c3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021c40:	45f4      	cmp	ip, lr
 8021c42:	f849 1b04 	str.w	r1, [r9], #4
 8021c46:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021c4a:	d8e4      	bhi.n	8021c16 <__multiply+0xaa>
 8021c4c:	9901      	ldr	r1, [sp, #4]
 8021c4e:	5072      	str	r2, [r6, r1]
 8021c50:	9a03      	ldr	r2, [sp, #12]
 8021c52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021c56:	3304      	adds	r3, #4
 8021c58:	f1b9 0f00 	cmp.w	r9, #0
 8021c5c:	d01f      	beq.n	8021c9e <__multiply+0x132>
 8021c5e:	6834      	ldr	r4, [r6, #0]
 8021c60:	f105 0114 	add.w	r1, r5, #20
 8021c64:	46b6      	mov	lr, r6
 8021c66:	f04f 0a00 	mov.w	sl, #0
 8021c6a:	880a      	ldrh	r2, [r1, #0]
 8021c6c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021c70:	fb09 b202 	mla	r2, r9, r2, fp
 8021c74:	4492      	add	sl, r2
 8021c76:	b2a4      	uxth	r4, r4
 8021c78:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021c7c:	f84e 4b04 	str.w	r4, [lr], #4
 8021c80:	f851 4b04 	ldr.w	r4, [r1], #4
 8021c84:	f8be 2000 	ldrh.w	r2, [lr]
 8021c88:	0c24      	lsrs	r4, r4, #16
 8021c8a:	fb09 2404 	mla	r4, r9, r4, r2
 8021c8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8021c92:	458c      	cmp	ip, r1
 8021c94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021c98:	d8e7      	bhi.n	8021c6a <__multiply+0xfe>
 8021c9a:	9a01      	ldr	r2, [sp, #4]
 8021c9c:	50b4      	str	r4, [r6, r2]
 8021c9e:	3604      	adds	r6, #4
 8021ca0:	e7a3      	b.n	8021bea <__multiply+0x7e>
 8021ca2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	d1a5      	bne.n	8021bf6 <__multiply+0x8a>
 8021caa:	3f01      	subs	r7, #1
 8021cac:	e7a1      	b.n	8021bf2 <__multiply+0x86>
 8021cae:	bf00      	nop
 8021cb0:	08027600 	.word	0x08027600
 8021cb4:	080276f4 	.word	0x080276f4

08021cb8 <__pow5mult>:
 8021cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021cbc:	4615      	mov	r5, r2
 8021cbe:	f012 0203 	ands.w	r2, r2, #3
 8021cc2:	4606      	mov	r6, r0
 8021cc4:	460f      	mov	r7, r1
 8021cc6:	d007      	beq.n	8021cd8 <__pow5mult+0x20>
 8021cc8:	4c25      	ldr	r4, [pc, #148]	; (8021d60 <__pow5mult+0xa8>)
 8021cca:	3a01      	subs	r2, #1
 8021ccc:	2300      	movs	r3, #0
 8021cce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021cd2:	f7ff fe51 	bl	8021978 <__multadd>
 8021cd6:	4607      	mov	r7, r0
 8021cd8:	10ad      	asrs	r5, r5, #2
 8021cda:	d03d      	beq.n	8021d58 <__pow5mult+0xa0>
 8021cdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021cde:	b97c      	cbnz	r4, 8021d00 <__pow5mult+0x48>
 8021ce0:	2010      	movs	r0, #16
 8021ce2:	f7fc fa69 	bl	801e1b8 <malloc>
 8021ce6:	4602      	mov	r2, r0
 8021ce8:	6270      	str	r0, [r6, #36]	; 0x24
 8021cea:	b928      	cbnz	r0, 8021cf8 <__pow5mult+0x40>
 8021cec:	4b1d      	ldr	r3, [pc, #116]	; (8021d64 <__pow5mult+0xac>)
 8021cee:	481e      	ldr	r0, [pc, #120]	; (8021d68 <__pow5mult+0xb0>)
 8021cf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021cf4:	f7fe f9ea 	bl	80200cc <__assert_func>
 8021cf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021cfc:	6004      	str	r4, [r0, #0]
 8021cfe:	60c4      	str	r4, [r0, #12]
 8021d00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021d04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021d08:	b94c      	cbnz	r4, 8021d1e <__pow5mult+0x66>
 8021d0a:	f240 2171 	movw	r1, #625	; 0x271
 8021d0e:	4630      	mov	r0, r6
 8021d10:	f7ff ff16 	bl	8021b40 <__i2b>
 8021d14:	2300      	movs	r3, #0
 8021d16:	f8c8 0008 	str.w	r0, [r8, #8]
 8021d1a:	4604      	mov	r4, r0
 8021d1c:	6003      	str	r3, [r0, #0]
 8021d1e:	f04f 0900 	mov.w	r9, #0
 8021d22:	07eb      	lsls	r3, r5, #31
 8021d24:	d50a      	bpl.n	8021d3c <__pow5mult+0x84>
 8021d26:	4639      	mov	r1, r7
 8021d28:	4622      	mov	r2, r4
 8021d2a:	4630      	mov	r0, r6
 8021d2c:	f7ff ff1e 	bl	8021b6c <__multiply>
 8021d30:	4639      	mov	r1, r7
 8021d32:	4680      	mov	r8, r0
 8021d34:	4630      	mov	r0, r6
 8021d36:	f7ff fdfd 	bl	8021934 <_Bfree>
 8021d3a:	4647      	mov	r7, r8
 8021d3c:	106d      	asrs	r5, r5, #1
 8021d3e:	d00b      	beq.n	8021d58 <__pow5mult+0xa0>
 8021d40:	6820      	ldr	r0, [r4, #0]
 8021d42:	b938      	cbnz	r0, 8021d54 <__pow5mult+0x9c>
 8021d44:	4622      	mov	r2, r4
 8021d46:	4621      	mov	r1, r4
 8021d48:	4630      	mov	r0, r6
 8021d4a:	f7ff ff0f 	bl	8021b6c <__multiply>
 8021d4e:	6020      	str	r0, [r4, #0]
 8021d50:	f8c0 9000 	str.w	r9, [r0]
 8021d54:	4604      	mov	r4, r0
 8021d56:	e7e4      	b.n	8021d22 <__pow5mult+0x6a>
 8021d58:	4638      	mov	r0, r7
 8021d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d5e:	bf00      	nop
 8021d60:	08027848 	.word	0x08027848
 8021d64:	0802748d 	.word	0x0802748d
 8021d68:	080276f4 	.word	0x080276f4

08021d6c <__lshift>:
 8021d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d70:	460c      	mov	r4, r1
 8021d72:	6849      	ldr	r1, [r1, #4]
 8021d74:	6923      	ldr	r3, [r4, #16]
 8021d76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021d7a:	68a3      	ldr	r3, [r4, #8]
 8021d7c:	4607      	mov	r7, r0
 8021d7e:	4691      	mov	r9, r2
 8021d80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021d84:	f108 0601 	add.w	r6, r8, #1
 8021d88:	42b3      	cmp	r3, r6
 8021d8a:	db0b      	blt.n	8021da4 <__lshift+0x38>
 8021d8c:	4638      	mov	r0, r7
 8021d8e:	f7ff fd91 	bl	80218b4 <_Balloc>
 8021d92:	4605      	mov	r5, r0
 8021d94:	b948      	cbnz	r0, 8021daa <__lshift+0x3e>
 8021d96:	4602      	mov	r2, r0
 8021d98:	4b28      	ldr	r3, [pc, #160]	; (8021e3c <__lshift+0xd0>)
 8021d9a:	4829      	ldr	r0, [pc, #164]	; (8021e40 <__lshift+0xd4>)
 8021d9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021da0:	f7fe f994 	bl	80200cc <__assert_func>
 8021da4:	3101      	adds	r1, #1
 8021da6:	005b      	lsls	r3, r3, #1
 8021da8:	e7ee      	b.n	8021d88 <__lshift+0x1c>
 8021daa:	2300      	movs	r3, #0
 8021dac:	f100 0114 	add.w	r1, r0, #20
 8021db0:	f100 0210 	add.w	r2, r0, #16
 8021db4:	4618      	mov	r0, r3
 8021db6:	4553      	cmp	r3, sl
 8021db8:	db33      	blt.n	8021e22 <__lshift+0xb6>
 8021dba:	6920      	ldr	r0, [r4, #16]
 8021dbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021dc0:	f104 0314 	add.w	r3, r4, #20
 8021dc4:	f019 091f 	ands.w	r9, r9, #31
 8021dc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021dcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021dd0:	d02b      	beq.n	8021e2a <__lshift+0xbe>
 8021dd2:	f1c9 0e20 	rsb	lr, r9, #32
 8021dd6:	468a      	mov	sl, r1
 8021dd8:	2200      	movs	r2, #0
 8021dda:	6818      	ldr	r0, [r3, #0]
 8021ddc:	fa00 f009 	lsl.w	r0, r0, r9
 8021de0:	4302      	orrs	r2, r0
 8021de2:	f84a 2b04 	str.w	r2, [sl], #4
 8021de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8021dea:	459c      	cmp	ip, r3
 8021dec:	fa22 f20e 	lsr.w	r2, r2, lr
 8021df0:	d8f3      	bhi.n	8021dda <__lshift+0x6e>
 8021df2:	ebac 0304 	sub.w	r3, ip, r4
 8021df6:	3b15      	subs	r3, #21
 8021df8:	f023 0303 	bic.w	r3, r3, #3
 8021dfc:	3304      	adds	r3, #4
 8021dfe:	f104 0015 	add.w	r0, r4, #21
 8021e02:	4584      	cmp	ip, r0
 8021e04:	bf38      	it	cc
 8021e06:	2304      	movcc	r3, #4
 8021e08:	50ca      	str	r2, [r1, r3]
 8021e0a:	b10a      	cbz	r2, 8021e10 <__lshift+0xa4>
 8021e0c:	f108 0602 	add.w	r6, r8, #2
 8021e10:	3e01      	subs	r6, #1
 8021e12:	4638      	mov	r0, r7
 8021e14:	612e      	str	r6, [r5, #16]
 8021e16:	4621      	mov	r1, r4
 8021e18:	f7ff fd8c 	bl	8021934 <_Bfree>
 8021e1c:	4628      	mov	r0, r5
 8021e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e22:	f842 0f04 	str.w	r0, [r2, #4]!
 8021e26:	3301      	adds	r3, #1
 8021e28:	e7c5      	b.n	8021db6 <__lshift+0x4a>
 8021e2a:	3904      	subs	r1, #4
 8021e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e30:	f841 2f04 	str.w	r2, [r1, #4]!
 8021e34:	459c      	cmp	ip, r3
 8021e36:	d8f9      	bhi.n	8021e2c <__lshift+0xc0>
 8021e38:	e7ea      	b.n	8021e10 <__lshift+0xa4>
 8021e3a:	bf00      	nop
 8021e3c:	08027600 	.word	0x08027600
 8021e40:	080276f4 	.word	0x080276f4

08021e44 <__mcmp>:
 8021e44:	b530      	push	{r4, r5, lr}
 8021e46:	6902      	ldr	r2, [r0, #16]
 8021e48:	690c      	ldr	r4, [r1, #16]
 8021e4a:	1b12      	subs	r2, r2, r4
 8021e4c:	d10e      	bne.n	8021e6c <__mcmp+0x28>
 8021e4e:	f100 0314 	add.w	r3, r0, #20
 8021e52:	3114      	adds	r1, #20
 8021e54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021e58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021e5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021e60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021e64:	42a5      	cmp	r5, r4
 8021e66:	d003      	beq.n	8021e70 <__mcmp+0x2c>
 8021e68:	d305      	bcc.n	8021e76 <__mcmp+0x32>
 8021e6a:	2201      	movs	r2, #1
 8021e6c:	4610      	mov	r0, r2
 8021e6e:	bd30      	pop	{r4, r5, pc}
 8021e70:	4283      	cmp	r3, r0
 8021e72:	d3f3      	bcc.n	8021e5c <__mcmp+0x18>
 8021e74:	e7fa      	b.n	8021e6c <__mcmp+0x28>
 8021e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021e7a:	e7f7      	b.n	8021e6c <__mcmp+0x28>

08021e7c <__mdiff>:
 8021e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e80:	460c      	mov	r4, r1
 8021e82:	4606      	mov	r6, r0
 8021e84:	4611      	mov	r1, r2
 8021e86:	4620      	mov	r0, r4
 8021e88:	4617      	mov	r7, r2
 8021e8a:	f7ff ffdb 	bl	8021e44 <__mcmp>
 8021e8e:	1e05      	subs	r5, r0, #0
 8021e90:	d110      	bne.n	8021eb4 <__mdiff+0x38>
 8021e92:	4629      	mov	r1, r5
 8021e94:	4630      	mov	r0, r6
 8021e96:	f7ff fd0d 	bl	80218b4 <_Balloc>
 8021e9a:	b930      	cbnz	r0, 8021eaa <__mdiff+0x2e>
 8021e9c:	4b39      	ldr	r3, [pc, #228]	; (8021f84 <__mdiff+0x108>)
 8021e9e:	4602      	mov	r2, r0
 8021ea0:	f240 2132 	movw	r1, #562	; 0x232
 8021ea4:	4838      	ldr	r0, [pc, #224]	; (8021f88 <__mdiff+0x10c>)
 8021ea6:	f7fe f911 	bl	80200cc <__assert_func>
 8021eaa:	2301      	movs	r3, #1
 8021eac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eb4:	bfa4      	itt	ge
 8021eb6:	463b      	movge	r3, r7
 8021eb8:	4627      	movge	r7, r4
 8021eba:	4630      	mov	r0, r6
 8021ebc:	6879      	ldr	r1, [r7, #4]
 8021ebe:	bfa6      	itte	ge
 8021ec0:	461c      	movge	r4, r3
 8021ec2:	2500      	movge	r5, #0
 8021ec4:	2501      	movlt	r5, #1
 8021ec6:	f7ff fcf5 	bl	80218b4 <_Balloc>
 8021eca:	b920      	cbnz	r0, 8021ed6 <__mdiff+0x5a>
 8021ecc:	4b2d      	ldr	r3, [pc, #180]	; (8021f84 <__mdiff+0x108>)
 8021ece:	4602      	mov	r2, r0
 8021ed0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021ed4:	e7e6      	b.n	8021ea4 <__mdiff+0x28>
 8021ed6:	693e      	ldr	r6, [r7, #16]
 8021ed8:	60c5      	str	r5, [r0, #12]
 8021eda:	6925      	ldr	r5, [r4, #16]
 8021edc:	f107 0114 	add.w	r1, r7, #20
 8021ee0:	f104 0914 	add.w	r9, r4, #20
 8021ee4:	f100 0e14 	add.w	lr, r0, #20
 8021ee8:	f107 0210 	add.w	r2, r7, #16
 8021eec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8021ef0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8021ef4:	46f2      	mov	sl, lr
 8021ef6:	2700      	movs	r7, #0
 8021ef8:	f859 3b04 	ldr.w	r3, [r9], #4
 8021efc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021f00:	fa1f f883 	uxth.w	r8, r3
 8021f04:	fa17 f78b 	uxtah	r7, r7, fp
 8021f08:	0c1b      	lsrs	r3, r3, #16
 8021f0a:	eba7 0808 	sub.w	r8, r7, r8
 8021f0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021f12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021f16:	fa1f f888 	uxth.w	r8, r8
 8021f1a:	141f      	asrs	r7, r3, #16
 8021f1c:	454d      	cmp	r5, r9
 8021f1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021f22:	f84a 3b04 	str.w	r3, [sl], #4
 8021f26:	d8e7      	bhi.n	8021ef8 <__mdiff+0x7c>
 8021f28:	1b2b      	subs	r3, r5, r4
 8021f2a:	3b15      	subs	r3, #21
 8021f2c:	f023 0303 	bic.w	r3, r3, #3
 8021f30:	3304      	adds	r3, #4
 8021f32:	3415      	adds	r4, #21
 8021f34:	42a5      	cmp	r5, r4
 8021f36:	bf38      	it	cc
 8021f38:	2304      	movcc	r3, #4
 8021f3a:	4419      	add	r1, r3
 8021f3c:	4473      	add	r3, lr
 8021f3e:	469e      	mov	lr, r3
 8021f40:	460d      	mov	r5, r1
 8021f42:	4565      	cmp	r5, ip
 8021f44:	d30e      	bcc.n	8021f64 <__mdiff+0xe8>
 8021f46:	f10c 0203 	add.w	r2, ip, #3
 8021f4a:	1a52      	subs	r2, r2, r1
 8021f4c:	f022 0203 	bic.w	r2, r2, #3
 8021f50:	3903      	subs	r1, #3
 8021f52:	458c      	cmp	ip, r1
 8021f54:	bf38      	it	cc
 8021f56:	2200      	movcc	r2, #0
 8021f58:	441a      	add	r2, r3
 8021f5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021f5e:	b17b      	cbz	r3, 8021f80 <__mdiff+0x104>
 8021f60:	6106      	str	r6, [r0, #16]
 8021f62:	e7a5      	b.n	8021eb0 <__mdiff+0x34>
 8021f64:	f855 8b04 	ldr.w	r8, [r5], #4
 8021f68:	fa17 f488 	uxtah	r4, r7, r8
 8021f6c:	1422      	asrs	r2, r4, #16
 8021f6e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8021f72:	b2a4      	uxth	r4, r4
 8021f74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8021f78:	f84e 4b04 	str.w	r4, [lr], #4
 8021f7c:	1417      	asrs	r7, r2, #16
 8021f7e:	e7e0      	b.n	8021f42 <__mdiff+0xc6>
 8021f80:	3e01      	subs	r6, #1
 8021f82:	e7ea      	b.n	8021f5a <__mdiff+0xde>
 8021f84:	08027600 	.word	0x08027600
 8021f88:	080276f4 	.word	0x080276f4

08021f8c <__ulp>:
 8021f8c:	b082      	sub	sp, #8
 8021f8e:	ed8d 0b00 	vstr	d0, [sp]
 8021f92:	9b01      	ldr	r3, [sp, #4]
 8021f94:	4912      	ldr	r1, [pc, #72]	; (8021fe0 <__ulp+0x54>)
 8021f96:	4019      	ands	r1, r3
 8021f98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8021f9c:	2900      	cmp	r1, #0
 8021f9e:	dd05      	ble.n	8021fac <__ulp+0x20>
 8021fa0:	2200      	movs	r2, #0
 8021fa2:	460b      	mov	r3, r1
 8021fa4:	ec43 2b10 	vmov	d0, r2, r3
 8021fa8:	b002      	add	sp, #8
 8021faa:	4770      	bx	lr
 8021fac:	4249      	negs	r1, r1
 8021fae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8021fb2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8021fb6:	f04f 0200 	mov.w	r2, #0
 8021fba:	f04f 0300 	mov.w	r3, #0
 8021fbe:	da04      	bge.n	8021fca <__ulp+0x3e>
 8021fc0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8021fc4:	fa41 f300 	asr.w	r3, r1, r0
 8021fc8:	e7ec      	b.n	8021fa4 <__ulp+0x18>
 8021fca:	f1a0 0114 	sub.w	r1, r0, #20
 8021fce:	291e      	cmp	r1, #30
 8021fd0:	bfda      	itte	le
 8021fd2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8021fd6:	fa20 f101 	lsrle.w	r1, r0, r1
 8021fda:	2101      	movgt	r1, #1
 8021fdc:	460a      	mov	r2, r1
 8021fde:	e7e1      	b.n	8021fa4 <__ulp+0x18>
 8021fe0:	7ff00000 	.word	0x7ff00000

08021fe4 <__b2d>:
 8021fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fe6:	6905      	ldr	r5, [r0, #16]
 8021fe8:	f100 0714 	add.w	r7, r0, #20
 8021fec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8021ff0:	1f2e      	subs	r6, r5, #4
 8021ff2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8021ff6:	4620      	mov	r0, r4
 8021ff8:	f7ff fd52 	bl	8021aa0 <__hi0bits>
 8021ffc:	f1c0 0320 	rsb	r3, r0, #32
 8022000:	280a      	cmp	r0, #10
 8022002:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022080 <__b2d+0x9c>
 8022006:	600b      	str	r3, [r1, #0]
 8022008:	dc14      	bgt.n	8022034 <__b2d+0x50>
 802200a:	f1c0 0e0b 	rsb	lr, r0, #11
 802200e:	fa24 f10e 	lsr.w	r1, r4, lr
 8022012:	42b7      	cmp	r7, r6
 8022014:	ea41 030c 	orr.w	r3, r1, ip
 8022018:	bf34      	ite	cc
 802201a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802201e:	2100      	movcs	r1, #0
 8022020:	3015      	adds	r0, #21
 8022022:	fa04 f000 	lsl.w	r0, r4, r0
 8022026:	fa21 f10e 	lsr.w	r1, r1, lr
 802202a:	ea40 0201 	orr.w	r2, r0, r1
 802202e:	ec43 2b10 	vmov	d0, r2, r3
 8022032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022034:	42b7      	cmp	r7, r6
 8022036:	bf3a      	itte	cc
 8022038:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 802203c:	f1a5 0608 	subcc.w	r6, r5, #8
 8022040:	2100      	movcs	r1, #0
 8022042:	380b      	subs	r0, #11
 8022044:	d017      	beq.n	8022076 <__b2d+0x92>
 8022046:	f1c0 0c20 	rsb	ip, r0, #32
 802204a:	fa04 f500 	lsl.w	r5, r4, r0
 802204e:	42be      	cmp	r6, r7
 8022050:	fa21 f40c 	lsr.w	r4, r1, ip
 8022054:	ea45 0504 	orr.w	r5, r5, r4
 8022058:	bf8c      	ite	hi
 802205a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802205e:	2400      	movls	r4, #0
 8022060:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022064:	fa01 f000 	lsl.w	r0, r1, r0
 8022068:	fa24 f40c 	lsr.w	r4, r4, ip
 802206c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022070:	ea40 0204 	orr.w	r2, r0, r4
 8022074:	e7db      	b.n	802202e <__b2d+0x4a>
 8022076:	ea44 030c 	orr.w	r3, r4, ip
 802207a:	460a      	mov	r2, r1
 802207c:	e7d7      	b.n	802202e <__b2d+0x4a>
 802207e:	bf00      	nop
 8022080:	3ff00000 	.word	0x3ff00000

08022084 <__d2b>:
 8022084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022088:	4689      	mov	r9, r1
 802208a:	2101      	movs	r1, #1
 802208c:	ec57 6b10 	vmov	r6, r7, d0
 8022090:	4690      	mov	r8, r2
 8022092:	f7ff fc0f 	bl	80218b4 <_Balloc>
 8022096:	4604      	mov	r4, r0
 8022098:	b930      	cbnz	r0, 80220a8 <__d2b+0x24>
 802209a:	4602      	mov	r2, r0
 802209c:	4b25      	ldr	r3, [pc, #148]	; (8022134 <__d2b+0xb0>)
 802209e:	4826      	ldr	r0, [pc, #152]	; (8022138 <__d2b+0xb4>)
 80220a0:	f240 310a 	movw	r1, #778	; 0x30a
 80220a4:	f7fe f812 	bl	80200cc <__assert_func>
 80220a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80220ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80220b0:	bb35      	cbnz	r5, 8022100 <__d2b+0x7c>
 80220b2:	2e00      	cmp	r6, #0
 80220b4:	9301      	str	r3, [sp, #4]
 80220b6:	d028      	beq.n	802210a <__d2b+0x86>
 80220b8:	4668      	mov	r0, sp
 80220ba:	9600      	str	r6, [sp, #0]
 80220bc:	f7ff fd10 	bl	8021ae0 <__lo0bits>
 80220c0:	9900      	ldr	r1, [sp, #0]
 80220c2:	b300      	cbz	r0, 8022106 <__d2b+0x82>
 80220c4:	9a01      	ldr	r2, [sp, #4]
 80220c6:	f1c0 0320 	rsb	r3, r0, #32
 80220ca:	fa02 f303 	lsl.w	r3, r2, r3
 80220ce:	430b      	orrs	r3, r1
 80220d0:	40c2      	lsrs	r2, r0
 80220d2:	6163      	str	r3, [r4, #20]
 80220d4:	9201      	str	r2, [sp, #4]
 80220d6:	9b01      	ldr	r3, [sp, #4]
 80220d8:	61a3      	str	r3, [r4, #24]
 80220da:	2b00      	cmp	r3, #0
 80220dc:	bf14      	ite	ne
 80220de:	2202      	movne	r2, #2
 80220e0:	2201      	moveq	r2, #1
 80220e2:	6122      	str	r2, [r4, #16]
 80220e4:	b1d5      	cbz	r5, 802211c <__d2b+0x98>
 80220e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80220ea:	4405      	add	r5, r0
 80220ec:	f8c9 5000 	str.w	r5, [r9]
 80220f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80220f4:	f8c8 0000 	str.w	r0, [r8]
 80220f8:	4620      	mov	r0, r4
 80220fa:	b003      	add	sp, #12
 80220fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022104:	e7d5      	b.n	80220b2 <__d2b+0x2e>
 8022106:	6161      	str	r1, [r4, #20]
 8022108:	e7e5      	b.n	80220d6 <__d2b+0x52>
 802210a:	a801      	add	r0, sp, #4
 802210c:	f7ff fce8 	bl	8021ae0 <__lo0bits>
 8022110:	9b01      	ldr	r3, [sp, #4]
 8022112:	6163      	str	r3, [r4, #20]
 8022114:	2201      	movs	r2, #1
 8022116:	6122      	str	r2, [r4, #16]
 8022118:	3020      	adds	r0, #32
 802211a:	e7e3      	b.n	80220e4 <__d2b+0x60>
 802211c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022124:	f8c9 0000 	str.w	r0, [r9]
 8022128:	6918      	ldr	r0, [r3, #16]
 802212a:	f7ff fcb9 	bl	8021aa0 <__hi0bits>
 802212e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022132:	e7df      	b.n	80220f4 <__d2b+0x70>
 8022134:	08027600 	.word	0x08027600
 8022138:	080276f4 	.word	0x080276f4

0802213c <__ratio>:
 802213c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022140:	468a      	mov	sl, r1
 8022142:	4669      	mov	r1, sp
 8022144:	4683      	mov	fp, r0
 8022146:	f7ff ff4d 	bl	8021fe4 <__b2d>
 802214a:	a901      	add	r1, sp, #4
 802214c:	4650      	mov	r0, sl
 802214e:	ec59 8b10 	vmov	r8, r9, d0
 8022152:	ee10 6a10 	vmov	r6, s0
 8022156:	f7ff ff45 	bl	8021fe4 <__b2d>
 802215a:	f8db 3010 	ldr.w	r3, [fp, #16]
 802215e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8022162:	eba3 0c02 	sub.w	ip, r3, r2
 8022166:	e9dd 3200 	ldrd	r3, r2, [sp]
 802216a:	1a9b      	subs	r3, r3, r2
 802216c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022170:	ec55 4b10 	vmov	r4, r5, d0
 8022174:	2b00      	cmp	r3, #0
 8022176:	ee10 0a10 	vmov	r0, s0
 802217a:	bfce      	itee	gt
 802217c:	464a      	movgt	r2, r9
 802217e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022182:	462a      	movle	r2, r5
 8022184:	464f      	mov	r7, r9
 8022186:	4629      	mov	r1, r5
 8022188:	bfcc      	ite	gt
 802218a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802218e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8022192:	ec47 6b17 	vmov	d7, r6, r7
 8022196:	ec41 0b16 	vmov	d6, r0, r1
 802219a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 802219e:	b003      	add	sp, #12
 80221a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080221a4 <__copybits>:
 80221a4:	3901      	subs	r1, #1
 80221a6:	b570      	push	{r4, r5, r6, lr}
 80221a8:	1149      	asrs	r1, r1, #5
 80221aa:	6914      	ldr	r4, [r2, #16]
 80221ac:	3101      	adds	r1, #1
 80221ae:	f102 0314 	add.w	r3, r2, #20
 80221b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80221b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80221ba:	1f05      	subs	r5, r0, #4
 80221bc:	42a3      	cmp	r3, r4
 80221be:	d30c      	bcc.n	80221da <__copybits+0x36>
 80221c0:	1aa3      	subs	r3, r4, r2
 80221c2:	3b11      	subs	r3, #17
 80221c4:	f023 0303 	bic.w	r3, r3, #3
 80221c8:	3211      	adds	r2, #17
 80221ca:	42a2      	cmp	r2, r4
 80221cc:	bf88      	it	hi
 80221ce:	2300      	movhi	r3, #0
 80221d0:	4418      	add	r0, r3
 80221d2:	2300      	movs	r3, #0
 80221d4:	4288      	cmp	r0, r1
 80221d6:	d305      	bcc.n	80221e4 <__copybits+0x40>
 80221d8:	bd70      	pop	{r4, r5, r6, pc}
 80221da:	f853 6b04 	ldr.w	r6, [r3], #4
 80221de:	f845 6f04 	str.w	r6, [r5, #4]!
 80221e2:	e7eb      	b.n	80221bc <__copybits+0x18>
 80221e4:	f840 3b04 	str.w	r3, [r0], #4
 80221e8:	e7f4      	b.n	80221d4 <__copybits+0x30>

080221ea <__any_on>:
 80221ea:	f100 0214 	add.w	r2, r0, #20
 80221ee:	6900      	ldr	r0, [r0, #16]
 80221f0:	114b      	asrs	r3, r1, #5
 80221f2:	4298      	cmp	r0, r3
 80221f4:	b510      	push	{r4, lr}
 80221f6:	db11      	blt.n	802221c <__any_on+0x32>
 80221f8:	dd0a      	ble.n	8022210 <__any_on+0x26>
 80221fa:	f011 011f 	ands.w	r1, r1, #31
 80221fe:	d007      	beq.n	8022210 <__any_on+0x26>
 8022200:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022204:	fa24 f001 	lsr.w	r0, r4, r1
 8022208:	fa00 f101 	lsl.w	r1, r0, r1
 802220c:	428c      	cmp	r4, r1
 802220e:	d10b      	bne.n	8022228 <__any_on+0x3e>
 8022210:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022214:	4293      	cmp	r3, r2
 8022216:	d803      	bhi.n	8022220 <__any_on+0x36>
 8022218:	2000      	movs	r0, #0
 802221a:	bd10      	pop	{r4, pc}
 802221c:	4603      	mov	r3, r0
 802221e:	e7f7      	b.n	8022210 <__any_on+0x26>
 8022220:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022224:	2900      	cmp	r1, #0
 8022226:	d0f5      	beq.n	8022214 <__any_on+0x2a>
 8022228:	2001      	movs	r0, #1
 802222a:	e7f6      	b.n	802221a <__any_on+0x30>

0802222c <_calloc_r>:
 802222c:	b513      	push	{r0, r1, r4, lr}
 802222e:	434a      	muls	r2, r1
 8022230:	4611      	mov	r1, r2
 8022232:	9201      	str	r2, [sp, #4]
 8022234:	f7fc f856 	bl	801e2e4 <_malloc_r>
 8022238:	4604      	mov	r4, r0
 802223a:	b118      	cbz	r0, 8022244 <_calloc_r+0x18>
 802223c:	9a01      	ldr	r2, [sp, #4]
 802223e:	2100      	movs	r1, #0
 8022240:	f7fb fff8 	bl	801e234 <memset>
 8022244:	4620      	mov	r0, r4
 8022246:	b002      	add	sp, #8
 8022248:	bd10      	pop	{r4, pc}

0802224a <__ssputs_r>:
 802224a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802224e:	688e      	ldr	r6, [r1, #8]
 8022250:	429e      	cmp	r6, r3
 8022252:	4682      	mov	sl, r0
 8022254:	460c      	mov	r4, r1
 8022256:	4690      	mov	r8, r2
 8022258:	461f      	mov	r7, r3
 802225a:	d838      	bhi.n	80222ce <__ssputs_r+0x84>
 802225c:	898a      	ldrh	r2, [r1, #12]
 802225e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022262:	d032      	beq.n	80222ca <__ssputs_r+0x80>
 8022264:	6825      	ldr	r5, [r4, #0]
 8022266:	6909      	ldr	r1, [r1, #16]
 8022268:	eba5 0901 	sub.w	r9, r5, r1
 802226c:	6965      	ldr	r5, [r4, #20]
 802226e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022272:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022276:	3301      	adds	r3, #1
 8022278:	444b      	add	r3, r9
 802227a:	106d      	asrs	r5, r5, #1
 802227c:	429d      	cmp	r5, r3
 802227e:	bf38      	it	cc
 8022280:	461d      	movcc	r5, r3
 8022282:	0553      	lsls	r3, r2, #21
 8022284:	d531      	bpl.n	80222ea <__ssputs_r+0xa0>
 8022286:	4629      	mov	r1, r5
 8022288:	f7fc f82c 	bl	801e2e4 <_malloc_r>
 802228c:	4606      	mov	r6, r0
 802228e:	b950      	cbnz	r0, 80222a6 <__ssputs_r+0x5c>
 8022290:	230c      	movs	r3, #12
 8022292:	f8ca 3000 	str.w	r3, [sl]
 8022296:	89a3      	ldrh	r3, [r4, #12]
 8022298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802229c:	81a3      	strh	r3, [r4, #12]
 802229e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80222a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80222a6:	6921      	ldr	r1, [r4, #16]
 80222a8:	464a      	mov	r2, r9
 80222aa:	f7fb ff9b 	bl	801e1e4 <memcpy>
 80222ae:	89a3      	ldrh	r3, [r4, #12]
 80222b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80222b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80222b8:	81a3      	strh	r3, [r4, #12]
 80222ba:	6126      	str	r6, [r4, #16]
 80222bc:	6165      	str	r5, [r4, #20]
 80222be:	444e      	add	r6, r9
 80222c0:	eba5 0509 	sub.w	r5, r5, r9
 80222c4:	6026      	str	r6, [r4, #0]
 80222c6:	60a5      	str	r5, [r4, #8]
 80222c8:	463e      	mov	r6, r7
 80222ca:	42be      	cmp	r6, r7
 80222cc:	d900      	bls.n	80222d0 <__ssputs_r+0x86>
 80222ce:	463e      	mov	r6, r7
 80222d0:	4632      	mov	r2, r6
 80222d2:	6820      	ldr	r0, [r4, #0]
 80222d4:	4641      	mov	r1, r8
 80222d6:	f7fb ff93 	bl	801e200 <memmove>
 80222da:	68a3      	ldr	r3, [r4, #8]
 80222dc:	6822      	ldr	r2, [r4, #0]
 80222de:	1b9b      	subs	r3, r3, r6
 80222e0:	4432      	add	r2, r6
 80222e2:	60a3      	str	r3, [r4, #8]
 80222e4:	6022      	str	r2, [r4, #0]
 80222e6:	2000      	movs	r0, #0
 80222e8:	e7db      	b.n	80222a2 <__ssputs_r+0x58>
 80222ea:	462a      	mov	r2, r5
 80222ec:	f000 fb1a 	bl	8022924 <_realloc_r>
 80222f0:	4606      	mov	r6, r0
 80222f2:	2800      	cmp	r0, #0
 80222f4:	d1e1      	bne.n	80222ba <__ssputs_r+0x70>
 80222f6:	6921      	ldr	r1, [r4, #16]
 80222f8:	4650      	mov	r0, sl
 80222fa:	f7fb ffa3 	bl	801e244 <_free_r>
 80222fe:	e7c7      	b.n	8022290 <__ssputs_r+0x46>

08022300 <_svfiprintf_r>:
 8022300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022304:	4698      	mov	r8, r3
 8022306:	898b      	ldrh	r3, [r1, #12]
 8022308:	061b      	lsls	r3, r3, #24
 802230a:	b09d      	sub	sp, #116	; 0x74
 802230c:	4607      	mov	r7, r0
 802230e:	460d      	mov	r5, r1
 8022310:	4614      	mov	r4, r2
 8022312:	d50e      	bpl.n	8022332 <_svfiprintf_r+0x32>
 8022314:	690b      	ldr	r3, [r1, #16]
 8022316:	b963      	cbnz	r3, 8022332 <_svfiprintf_r+0x32>
 8022318:	2140      	movs	r1, #64	; 0x40
 802231a:	f7fb ffe3 	bl	801e2e4 <_malloc_r>
 802231e:	6028      	str	r0, [r5, #0]
 8022320:	6128      	str	r0, [r5, #16]
 8022322:	b920      	cbnz	r0, 802232e <_svfiprintf_r+0x2e>
 8022324:	230c      	movs	r3, #12
 8022326:	603b      	str	r3, [r7, #0]
 8022328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802232c:	e0d1      	b.n	80224d2 <_svfiprintf_r+0x1d2>
 802232e:	2340      	movs	r3, #64	; 0x40
 8022330:	616b      	str	r3, [r5, #20]
 8022332:	2300      	movs	r3, #0
 8022334:	9309      	str	r3, [sp, #36]	; 0x24
 8022336:	2320      	movs	r3, #32
 8022338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802233c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022340:	2330      	movs	r3, #48	; 0x30
 8022342:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80224ec <_svfiprintf_r+0x1ec>
 8022346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802234a:	f04f 0901 	mov.w	r9, #1
 802234e:	4623      	mov	r3, r4
 8022350:	469a      	mov	sl, r3
 8022352:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022356:	b10a      	cbz	r2, 802235c <_svfiprintf_r+0x5c>
 8022358:	2a25      	cmp	r2, #37	; 0x25
 802235a:	d1f9      	bne.n	8022350 <_svfiprintf_r+0x50>
 802235c:	ebba 0b04 	subs.w	fp, sl, r4
 8022360:	d00b      	beq.n	802237a <_svfiprintf_r+0x7a>
 8022362:	465b      	mov	r3, fp
 8022364:	4622      	mov	r2, r4
 8022366:	4629      	mov	r1, r5
 8022368:	4638      	mov	r0, r7
 802236a:	f7ff ff6e 	bl	802224a <__ssputs_r>
 802236e:	3001      	adds	r0, #1
 8022370:	f000 80aa 	beq.w	80224c8 <_svfiprintf_r+0x1c8>
 8022374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022376:	445a      	add	r2, fp
 8022378:	9209      	str	r2, [sp, #36]	; 0x24
 802237a:	f89a 3000 	ldrb.w	r3, [sl]
 802237e:	2b00      	cmp	r3, #0
 8022380:	f000 80a2 	beq.w	80224c8 <_svfiprintf_r+0x1c8>
 8022384:	2300      	movs	r3, #0
 8022386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802238a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802238e:	f10a 0a01 	add.w	sl, sl, #1
 8022392:	9304      	str	r3, [sp, #16]
 8022394:	9307      	str	r3, [sp, #28]
 8022396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802239a:	931a      	str	r3, [sp, #104]	; 0x68
 802239c:	4654      	mov	r4, sl
 802239e:	2205      	movs	r2, #5
 80223a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80223a4:	4851      	ldr	r0, [pc, #324]	; (80224ec <_svfiprintf_r+0x1ec>)
 80223a6:	f7dd ffa3 	bl	80002f0 <memchr>
 80223aa:	9a04      	ldr	r2, [sp, #16]
 80223ac:	b9d8      	cbnz	r0, 80223e6 <_svfiprintf_r+0xe6>
 80223ae:	06d0      	lsls	r0, r2, #27
 80223b0:	bf44      	itt	mi
 80223b2:	2320      	movmi	r3, #32
 80223b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80223b8:	0711      	lsls	r1, r2, #28
 80223ba:	bf44      	itt	mi
 80223bc:	232b      	movmi	r3, #43	; 0x2b
 80223be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80223c2:	f89a 3000 	ldrb.w	r3, [sl]
 80223c6:	2b2a      	cmp	r3, #42	; 0x2a
 80223c8:	d015      	beq.n	80223f6 <_svfiprintf_r+0xf6>
 80223ca:	9a07      	ldr	r2, [sp, #28]
 80223cc:	4654      	mov	r4, sl
 80223ce:	2000      	movs	r0, #0
 80223d0:	f04f 0c0a 	mov.w	ip, #10
 80223d4:	4621      	mov	r1, r4
 80223d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80223da:	3b30      	subs	r3, #48	; 0x30
 80223dc:	2b09      	cmp	r3, #9
 80223de:	d94e      	bls.n	802247e <_svfiprintf_r+0x17e>
 80223e0:	b1b0      	cbz	r0, 8022410 <_svfiprintf_r+0x110>
 80223e2:	9207      	str	r2, [sp, #28]
 80223e4:	e014      	b.n	8022410 <_svfiprintf_r+0x110>
 80223e6:	eba0 0308 	sub.w	r3, r0, r8
 80223ea:	fa09 f303 	lsl.w	r3, r9, r3
 80223ee:	4313      	orrs	r3, r2
 80223f0:	9304      	str	r3, [sp, #16]
 80223f2:	46a2      	mov	sl, r4
 80223f4:	e7d2      	b.n	802239c <_svfiprintf_r+0x9c>
 80223f6:	9b03      	ldr	r3, [sp, #12]
 80223f8:	1d19      	adds	r1, r3, #4
 80223fa:	681b      	ldr	r3, [r3, #0]
 80223fc:	9103      	str	r1, [sp, #12]
 80223fe:	2b00      	cmp	r3, #0
 8022400:	bfbb      	ittet	lt
 8022402:	425b      	neglt	r3, r3
 8022404:	f042 0202 	orrlt.w	r2, r2, #2
 8022408:	9307      	strge	r3, [sp, #28]
 802240a:	9307      	strlt	r3, [sp, #28]
 802240c:	bfb8      	it	lt
 802240e:	9204      	strlt	r2, [sp, #16]
 8022410:	7823      	ldrb	r3, [r4, #0]
 8022412:	2b2e      	cmp	r3, #46	; 0x2e
 8022414:	d10c      	bne.n	8022430 <_svfiprintf_r+0x130>
 8022416:	7863      	ldrb	r3, [r4, #1]
 8022418:	2b2a      	cmp	r3, #42	; 0x2a
 802241a:	d135      	bne.n	8022488 <_svfiprintf_r+0x188>
 802241c:	9b03      	ldr	r3, [sp, #12]
 802241e:	1d1a      	adds	r2, r3, #4
 8022420:	681b      	ldr	r3, [r3, #0]
 8022422:	9203      	str	r2, [sp, #12]
 8022424:	2b00      	cmp	r3, #0
 8022426:	bfb8      	it	lt
 8022428:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802242c:	3402      	adds	r4, #2
 802242e:	9305      	str	r3, [sp, #20]
 8022430:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80224fc <_svfiprintf_r+0x1fc>
 8022434:	7821      	ldrb	r1, [r4, #0]
 8022436:	2203      	movs	r2, #3
 8022438:	4650      	mov	r0, sl
 802243a:	f7dd ff59 	bl	80002f0 <memchr>
 802243e:	b140      	cbz	r0, 8022452 <_svfiprintf_r+0x152>
 8022440:	2340      	movs	r3, #64	; 0x40
 8022442:	eba0 000a 	sub.w	r0, r0, sl
 8022446:	fa03 f000 	lsl.w	r0, r3, r0
 802244a:	9b04      	ldr	r3, [sp, #16]
 802244c:	4303      	orrs	r3, r0
 802244e:	3401      	adds	r4, #1
 8022450:	9304      	str	r3, [sp, #16]
 8022452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022456:	4826      	ldr	r0, [pc, #152]	; (80224f0 <_svfiprintf_r+0x1f0>)
 8022458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802245c:	2206      	movs	r2, #6
 802245e:	f7dd ff47 	bl	80002f0 <memchr>
 8022462:	2800      	cmp	r0, #0
 8022464:	d038      	beq.n	80224d8 <_svfiprintf_r+0x1d8>
 8022466:	4b23      	ldr	r3, [pc, #140]	; (80224f4 <_svfiprintf_r+0x1f4>)
 8022468:	bb1b      	cbnz	r3, 80224b2 <_svfiprintf_r+0x1b2>
 802246a:	9b03      	ldr	r3, [sp, #12]
 802246c:	3307      	adds	r3, #7
 802246e:	f023 0307 	bic.w	r3, r3, #7
 8022472:	3308      	adds	r3, #8
 8022474:	9303      	str	r3, [sp, #12]
 8022476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022478:	4433      	add	r3, r6
 802247a:	9309      	str	r3, [sp, #36]	; 0x24
 802247c:	e767      	b.n	802234e <_svfiprintf_r+0x4e>
 802247e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022482:	460c      	mov	r4, r1
 8022484:	2001      	movs	r0, #1
 8022486:	e7a5      	b.n	80223d4 <_svfiprintf_r+0xd4>
 8022488:	2300      	movs	r3, #0
 802248a:	3401      	adds	r4, #1
 802248c:	9305      	str	r3, [sp, #20]
 802248e:	4619      	mov	r1, r3
 8022490:	f04f 0c0a 	mov.w	ip, #10
 8022494:	4620      	mov	r0, r4
 8022496:	f810 2b01 	ldrb.w	r2, [r0], #1
 802249a:	3a30      	subs	r2, #48	; 0x30
 802249c:	2a09      	cmp	r2, #9
 802249e:	d903      	bls.n	80224a8 <_svfiprintf_r+0x1a8>
 80224a0:	2b00      	cmp	r3, #0
 80224a2:	d0c5      	beq.n	8022430 <_svfiprintf_r+0x130>
 80224a4:	9105      	str	r1, [sp, #20]
 80224a6:	e7c3      	b.n	8022430 <_svfiprintf_r+0x130>
 80224a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80224ac:	4604      	mov	r4, r0
 80224ae:	2301      	movs	r3, #1
 80224b0:	e7f0      	b.n	8022494 <_svfiprintf_r+0x194>
 80224b2:	ab03      	add	r3, sp, #12
 80224b4:	9300      	str	r3, [sp, #0]
 80224b6:	462a      	mov	r2, r5
 80224b8:	4b0f      	ldr	r3, [pc, #60]	; (80224f8 <_svfiprintf_r+0x1f8>)
 80224ba:	a904      	add	r1, sp, #16
 80224bc:	4638      	mov	r0, r7
 80224be:	f7fb fffb 	bl	801e4b8 <_printf_float>
 80224c2:	1c42      	adds	r2, r0, #1
 80224c4:	4606      	mov	r6, r0
 80224c6:	d1d6      	bne.n	8022476 <_svfiprintf_r+0x176>
 80224c8:	89ab      	ldrh	r3, [r5, #12]
 80224ca:	065b      	lsls	r3, r3, #25
 80224cc:	f53f af2c 	bmi.w	8022328 <_svfiprintf_r+0x28>
 80224d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80224d2:	b01d      	add	sp, #116	; 0x74
 80224d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224d8:	ab03      	add	r3, sp, #12
 80224da:	9300      	str	r3, [sp, #0]
 80224dc:	462a      	mov	r2, r5
 80224de:	4b06      	ldr	r3, [pc, #24]	; (80224f8 <_svfiprintf_r+0x1f8>)
 80224e0:	a904      	add	r1, sp, #16
 80224e2:	4638      	mov	r0, r7
 80224e4:	f7fc fa74 	bl	801e9d0 <_printf_i>
 80224e8:	e7eb      	b.n	80224c2 <_svfiprintf_r+0x1c2>
 80224ea:	bf00      	nop
 80224ec:	08027854 	.word	0x08027854
 80224f0:	0802785e 	.word	0x0802785e
 80224f4:	0801e4b9 	.word	0x0801e4b9
 80224f8:	0802224b 	.word	0x0802224b
 80224fc:	0802785a 	.word	0x0802785a

08022500 <__sfputc_r>:
 8022500:	6893      	ldr	r3, [r2, #8]
 8022502:	3b01      	subs	r3, #1
 8022504:	2b00      	cmp	r3, #0
 8022506:	b410      	push	{r4}
 8022508:	6093      	str	r3, [r2, #8]
 802250a:	da08      	bge.n	802251e <__sfputc_r+0x1e>
 802250c:	6994      	ldr	r4, [r2, #24]
 802250e:	42a3      	cmp	r3, r4
 8022510:	db01      	blt.n	8022516 <__sfputc_r+0x16>
 8022512:	290a      	cmp	r1, #10
 8022514:	d103      	bne.n	802251e <__sfputc_r+0x1e>
 8022516:	f85d 4b04 	ldr.w	r4, [sp], #4
 802251a:	f7fd bd17 	b.w	801ff4c <__swbuf_r>
 802251e:	6813      	ldr	r3, [r2, #0]
 8022520:	1c58      	adds	r0, r3, #1
 8022522:	6010      	str	r0, [r2, #0]
 8022524:	7019      	strb	r1, [r3, #0]
 8022526:	4608      	mov	r0, r1
 8022528:	f85d 4b04 	ldr.w	r4, [sp], #4
 802252c:	4770      	bx	lr

0802252e <__sfputs_r>:
 802252e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022530:	4606      	mov	r6, r0
 8022532:	460f      	mov	r7, r1
 8022534:	4614      	mov	r4, r2
 8022536:	18d5      	adds	r5, r2, r3
 8022538:	42ac      	cmp	r4, r5
 802253a:	d101      	bne.n	8022540 <__sfputs_r+0x12>
 802253c:	2000      	movs	r0, #0
 802253e:	e007      	b.n	8022550 <__sfputs_r+0x22>
 8022540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022544:	463a      	mov	r2, r7
 8022546:	4630      	mov	r0, r6
 8022548:	f7ff ffda 	bl	8022500 <__sfputc_r>
 802254c:	1c43      	adds	r3, r0, #1
 802254e:	d1f3      	bne.n	8022538 <__sfputs_r+0xa>
 8022550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022554 <_vfiprintf_r>:
 8022554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022558:	460d      	mov	r5, r1
 802255a:	b09d      	sub	sp, #116	; 0x74
 802255c:	4614      	mov	r4, r2
 802255e:	4698      	mov	r8, r3
 8022560:	4606      	mov	r6, r0
 8022562:	b118      	cbz	r0, 802256c <_vfiprintf_r+0x18>
 8022564:	6983      	ldr	r3, [r0, #24]
 8022566:	b90b      	cbnz	r3, 802256c <_vfiprintf_r+0x18>
 8022568:	f7fe fcfc 	bl	8020f64 <__sinit>
 802256c:	4b89      	ldr	r3, [pc, #548]	; (8022794 <_vfiprintf_r+0x240>)
 802256e:	429d      	cmp	r5, r3
 8022570:	d11b      	bne.n	80225aa <_vfiprintf_r+0x56>
 8022572:	6875      	ldr	r5, [r6, #4]
 8022574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022576:	07d9      	lsls	r1, r3, #31
 8022578:	d405      	bmi.n	8022586 <_vfiprintf_r+0x32>
 802257a:	89ab      	ldrh	r3, [r5, #12]
 802257c:	059a      	lsls	r2, r3, #22
 802257e:	d402      	bmi.n	8022586 <_vfiprintf_r+0x32>
 8022580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022582:	f7ff f912 	bl	80217aa <__retarget_lock_acquire_recursive>
 8022586:	89ab      	ldrh	r3, [r5, #12]
 8022588:	071b      	lsls	r3, r3, #28
 802258a:	d501      	bpl.n	8022590 <_vfiprintf_r+0x3c>
 802258c:	692b      	ldr	r3, [r5, #16]
 802258e:	b9eb      	cbnz	r3, 80225cc <_vfiprintf_r+0x78>
 8022590:	4629      	mov	r1, r5
 8022592:	4630      	mov	r0, r6
 8022594:	f7fd fd2c 	bl	801fff0 <__swsetup_r>
 8022598:	b1c0      	cbz	r0, 80225cc <_vfiprintf_r+0x78>
 802259a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802259c:	07dc      	lsls	r4, r3, #31
 802259e:	d50e      	bpl.n	80225be <_vfiprintf_r+0x6a>
 80225a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80225a4:	b01d      	add	sp, #116	; 0x74
 80225a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225aa:	4b7b      	ldr	r3, [pc, #492]	; (8022798 <_vfiprintf_r+0x244>)
 80225ac:	429d      	cmp	r5, r3
 80225ae:	d101      	bne.n	80225b4 <_vfiprintf_r+0x60>
 80225b0:	68b5      	ldr	r5, [r6, #8]
 80225b2:	e7df      	b.n	8022574 <_vfiprintf_r+0x20>
 80225b4:	4b79      	ldr	r3, [pc, #484]	; (802279c <_vfiprintf_r+0x248>)
 80225b6:	429d      	cmp	r5, r3
 80225b8:	bf08      	it	eq
 80225ba:	68f5      	ldreq	r5, [r6, #12]
 80225bc:	e7da      	b.n	8022574 <_vfiprintf_r+0x20>
 80225be:	89ab      	ldrh	r3, [r5, #12]
 80225c0:	0598      	lsls	r0, r3, #22
 80225c2:	d4ed      	bmi.n	80225a0 <_vfiprintf_r+0x4c>
 80225c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80225c6:	f7ff f8f1 	bl	80217ac <__retarget_lock_release_recursive>
 80225ca:	e7e9      	b.n	80225a0 <_vfiprintf_r+0x4c>
 80225cc:	2300      	movs	r3, #0
 80225ce:	9309      	str	r3, [sp, #36]	; 0x24
 80225d0:	2320      	movs	r3, #32
 80225d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80225d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80225da:	2330      	movs	r3, #48	; 0x30
 80225dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80227a0 <_vfiprintf_r+0x24c>
 80225e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80225e4:	f04f 0901 	mov.w	r9, #1
 80225e8:	4623      	mov	r3, r4
 80225ea:	469a      	mov	sl, r3
 80225ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80225f0:	b10a      	cbz	r2, 80225f6 <_vfiprintf_r+0xa2>
 80225f2:	2a25      	cmp	r2, #37	; 0x25
 80225f4:	d1f9      	bne.n	80225ea <_vfiprintf_r+0x96>
 80225f6:	ebba 0b04 	subs.w	fp, sl, r4
 80225fa:	d00b      	beq.n	8022614 <_vfiprintf_r+0xc0>
 80225fc:	465b      	mov	r3, fp
 80225fe:	4622      	mov	r2, r4
 8022600:	4629      	mov	r1, r5
 8022602:	4630      	mov	r0, r6
 8022604:	f7ff ff93 	bl	802252e <__sfputs_r>
 8022608:	3001      	adds	r0, #1
 802260a:	f000 80aa 	beq.w	8022762 <_vfiprintf_r+0x20e>
 802260e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022610:	445a      	add	r2, fp
 8022612:	9209      	str	r2, [sp, #36]	; 0x24
 8022614:	f89a 3000 	ldrb.w	r3, [sl]
 8022618:	2b00      	cmp	r3, #0
 802261a:	f000 80a2 	beq.w	8022762 <_vfiprintf_r+0x20e>
 802261e:	2300      	movs	r3, #0
 8022620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022628:	f10a 0a01 	add.w	sl, sl, #1
 802262c:	9304      	str	r3, [sp, #16]
 802262e:	9307      	str	r3, [sp, #28]
 8022630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022634:	931a      	str	r3, [sp, #104]	; 0x68
 8022636:	4654      	mov	r4, sl
 8022638:	2205      	movs	r2, #5
 802263a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802263e:	4858      	ldr	r0, [pc, #352]	; (80227a0 <_vfiprintf_r+0x24c>)
 8022640:	f7dd fe56 	bl	80002f0 <memchr>
 8022644:	9a04      	ldr	r2, [sp, #16]
 8022646:	b9d8      	cbnz	r0, 8022680 <_vfiprintf_r+0x12c>
 8022648:	06d1      	lsls	r1, r2, #27
 802264a:	bf44      	itt	mi
 802264c:	2320      	movmi	r3, #32
 802264e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022652:	0713      	lsls	r3, r2, #28
 8022654:	bf44      	itt	mi
 8022656:	232b      	movmi	r3, #43	; 0x2b
 8022658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802265c:	f89a 3000 	ldrb.w	r3, [sl]
 8022660:	2b2a      	cmp	r3, #42	; 0x2a
 8022662:	d015      	beq.n	8022690 <_vfiprintf_r+0x13c>
 8022664:	9a07      	ldr	r2, [sp, #28]
 8022666:	4654      	mov	r4, sl
 8022668:	2000      	movs	r0, #0
 802266a:	f04f 0c0a 	mov.w	ip, #10
 802266e:	4621      	mov	r1, r4
 8022670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022674:	3b30      	subs	r3, #48	; 0x30
 8022676:	2b09      	cmp	r3, #9
 8022678:	d94e      	bls.n	8022718 <_vfiprintf_r+0x1c4>
 802267a:	b1b0      	cbz	r0, 80226aa <_vfiprintf_r+0x156>
 802267c:	9207      	str	r2, [sp, #28]
 802267e:	e014      	b.n	80226aa <_vfiprintf_r+0x156>
 8022680:	eba0 0308 	sub.w	r3, r0, r8
 8022684:	fa09 f303 	lsl.w	r3, r9, r3
 8022688:	4313      	orrs	r3, r2
 802268a:	9304      	str	r3, [sp, #16]
 802268c:	46a2      	mov	sl, r4
 802268e:	e7d2      	b.n	8022636 <_vfiprintf_r+0xe2>
 8022690:	9b03      	ldr	r3, [sp, #12]
 8022692:	1d19      	adds	r1, r3, #4
 8022694:	681b      	ldr	r3, [r3, #0]
 8022696:	9103      	str	r1, [sp, #12]
 8022698:	2b00      	cmp	r3, #0
 802269a:	bfbb      	ittet	lt
 802269c:	425b      	neglt	r3, r3
 802269e:	f042 0202 	orrlt.w	r2, r2, #2
 80226a2:	9307      	strge	r3, [sp, #28]
 80226a4:	9307      	strlt	r3, [sp, #28]
 80226a6:	bfb8      	it	lt
 80226a8:	9204      	strlt	r2, [sp, #16]
 80226aa:	7823      	ldrb	r3, [r4, #0]
 80226ac:	2b2e      	cmp	r3, #46	; 0x2e
 80226ae:	d10c      	bne.n	80226ca <_vfiprintf_r+0x176>
 80226b0:	7863      	ldrb	r3, [r4, #1]
 80226b2:	2b2a      	cmp	r3, #42	; 0x2a
 80226b4:	d135      	bne.n	8022722 <_vfiprintf_r+0x1ce>
 80226b6:	9b03      	ldr	r3, [sp, #12]
 80226b8:	1d1a      	adds	r2, r3, #4
 80226ba:	681b      	ldr	r3, [r3, #0]
 80226bc:	9203      	str	r2, [sp, #12]
 80226be:	2b00      	cmp	r3, #0
 80226c0:	bfb8      	it	lt
 80226c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80226c6:	3402      	adds	r4, #2
 80226c8:	9305      	str	r3, [sp, #20]
 80226ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80227b0 <_vfiprintf_r+0x25c>
 80226ce:	7821      	ldrb	r1, [r4, #0]
 80226d0:	2203      	movs	r2, #3
 80226d2:	4650      	mov	r0, sl
 80226d4:	f7dd fe0c 	bl	80002f0 <memchr>
 80226d8:	b140      	cbz	r0, 80226ec <_vfiprintf_r+0x198>
 80226da:	2340      	movs	r3, #64	; 0x40
 80226dc:	eba0 000a 	sub.w	r0, r0, sl
 80226e0:	fa03 f000 	lsl.w	r0, r3, r0
 80226e4:	9b04      	ldr	r3, [sp, #16]
 80226e6:	4303      	orrs	r3, r0
 80226e8:	3401      	adds	r4, #1
 80226ea:	9304      	str	r3, [sp, #16]
 80226ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226f0:	482c      	ldr	r0, [pc, #176]	; (80227a4 <_vfiprintf_r+0x250>)
 80226f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80226f6:	2206      	movs	r2, #6
 80226f8:	f7dd fdfa 	bl	80002f0 <memchr>
 80226fc:	2800      	cmp	r0, #0
 80226fe:	d03f      	beq.n	8022780 <_vfiprintf_r+0x22c>
 8022700:	4b29      	ldr	r3, [pc, #164]	; (80227a8 <_vfiprintf_r+0x254>)
 8022702:	bb1b      	cbnz	r3, 802274c <_vfiprintf_r+0x1f8>
 8022704:	9b03      	ldr	r3, [sp, #12]
 8022706:	3307      	adds	r3, #7
 8022708:	f023 0307 	bic.w	r3, r3, #7
 802270c:	3308      	adds	r3, #8
 802270e:	9303      	str	r3, [sp, #12]
 8022710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022712:	443b      	add	r3, r7
 8022714:	9309      	str	r3, [sp, #36]	; 0x24
 8022716:	e767      	b.n	80225e8 <_vfiprintf_r+0x94>
 8022718:	fb0c 3202 	mla	r2, ip, r2, r3
 802271c:	460c      	mov	r4, r1
 802271e:	2001      	movs	r0, #1
 8022720:	e7a5      	b.n	802266e <_vfiprintf_r+0x11a>
 8022722:	2300      	movs	r3, #0
 8022724:	3401      	adds	r4, #1
 8022726:	9305      	str	r3, [sp, #20]
 8022728:	4619      	mov	r1, r3
 802272a:	f04f 0c0a 	mov.w	ip, #10
 802272e:	4620      	mov	r0, r4
 8022730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022734:	3a30      	subs	r2, #48	; 0x30
 8022736:	2a09      	cmp	r2, #9
 8022738:	d903      	bls.n	8022742 <_vfiprintf_r+0x1ee>
 802273a:	2b00      	cmp	r3, #0
 802273c:	d0c5      	beq.n	80226ca <_vfiprintf_r+0x176>
 802273e:	9105      	str	r1, [sp, #20]
 8022740:	e7c3      	b.n	80226ca <_vfiprintf_r+0x176>
 8022742:	fb0c 2101 	mla	r1, ip, r1, r2
 8022746:	4604      	mov	r4, r0
 8022748:	2301      	movs	r3, #1
 802274a:	e7f0      	b.n	802272e <_vfiprintf_r+0x1da>
 802274c:	ab03      	add	r3, sp, #12
 802274e:	9300      	str	r3, [sp, #0]
 8022750:	462a      	mov	r2, r5
 8022752:	4b16      	ldr	r3, [pc, #88]	; (80227ac <_vfiprintf_r+0x258>)
 8022754:	a904      	add	r1, sp, #16
 8022756:	4630      	mov	r0, r6
 8022758:	f7fb feae 	bl	801e4b8 <_printf_float>
 802275c:	4607      	mov	r7, r0
 802275e:	1c78      	adds	r0, r7, #1
 8022760:	d1d6      	bne.n	8022710 <_vfiprintf_r+0x1bc>
 8022762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022764:	07d9      	lsls	r1, r3, #31
 8022766:	d405      	bmi.n	8022774 <_vfiprintf_r+0x220>
 8022768:	89ab      	ldrh	r3, [r5, #12]
 802276a:	059a      	lsls	r2, r3, #22
 802276c:	d402      	bmi.n	8022774 <_vfiprintf_r+0x220>
 802276e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022770:	f7ff f81c 	bl	80217ac <__retarget_lock_release_recursive>
 8022774:	89ab      	ldrh	r3, [r5, #12]
 8022776:	065b      	lsls	r3, r3, #25
 8022778:	f53f af12 	bmi.w	80225a0 <_vfiprintf_r+0x4c>
 802277c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802277e:	e711      	b.n	80225a4 <_vfiprintf_r+0x50>
 8022780:	ab03      	add	r3, sp, #12
 8022782:	9300      	str	r3, [sp, #0]
 8022784:	462a      	mov	r2, r5
 8022786:	4b09      	ldr	r3, [pc, #36]	; (80227ac <_vfiprintf_r+0x258>)
 8022788:	a904      	add	r1, sp, #16
 802278a:	4630      	mov	r0, r6
 802278c:	f7fc f920 	bl	801e9d0 <_printf_i>
 8022790:	e7e4      	b.n	802275c <_vfiprintf_r+0x208>
 8022792:	bf00      	nop
 8022794:	08027634 	.word	0x08027634
 8022798:	08027654 	.word	0x08027654
 802279c:	08027614 	.word	0x08027614
 80227a0:	08027854 	.word	0x08027854
 80227a4:	0802785e 	.word	0x0802785e
 80227a8:	0801e4b9 	.word	0x0801e4b9
 80227ac:	0802252f 	.word	0x0802252f
 80227b0:	0802785a 	.word	0x0802785a
 80227b4:	00000000 	.word	0x00000000

080227b8 <nan>:
 80227b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80227c0 <nan+0x8>
 80227bc:	4770      	bx	lr
 80227be:	bf00      	nop
 80227c0:	00000000 	.word	0x00000000
 80227c4:	7ff80000 	.word	0x7ff80000

080227c8 <__sread>:
 80227c8:	b510      	push	{r4, lr}
 80227ca:	460c      	mov	r4, r1
 80227cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227d0:	f000 f8ce 	bl	8022970 <_read_r>
 80227d4:	2800      	cmp	r0, #0
 80227d6:	bfab      	itete	ge
 80227d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80227da:	89a3      	ldrhlt	r3, [r4, #12]
 80227dc:	181b      	addge	r3, r3, r0
 80227de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80227e2:	bfac      	ite	ge
 80227e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80227e6:	81a3      	strhlt	r3, [r4, #12]
 80227e8:	bd10      	pop	{r4, pc}

080227ea <__swrite>:
 80227ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227ee:	461f      	mov	r7, r3
 80227f0:	898b      	ldrh	r3, [r1, #12]
 80227f2:	05db      	lsls	r3, r3, #23
 80227f4:	4605      	mov	r5, r0
 80227f6:	460c      	mov	r4, r1
 80227f8:	4616      	mov	r6, r2
 80227fa:	d505      	bpl.n	8022808 <__swrite+0x1e>
 80227fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022800:	2302      	movs	r3, #2
 8022802:	2200      	movs	r2, #0
 8022804:	f000 f87c 	bl	8022900 <_lseek_r>
 8022808:	89a3      	ldrh	r3, [r4, #12]
 802280a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802280e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022812:	81a3      	strh	r3, [r4, #12]
 8022814:	4632      	mov	r2, r6
 8022816:	463b      	mov	r3, r7
 8022818:	4628      	mov	r0, r5
 802281a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802281e:	f000 b823 	b.w	8022868 <_write_r>

08022822 <__sseek>:
 8022822:	b510      	push	{r4, lr}
 8022824:	460c      	mov	r4, r1
 8022826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802282a:	f000 f869 	bl	8022900 <_lseek_r>
 802282e:	1c43      	adds	r3, r0, #1
 8022830:	89a3      	ldrh	r3, [r4, #12]
 8022832:	bf15      	itete	ne
 8022834:	6560      	strne	r0, [r4, #84]	; 0x54
 8022836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802283a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802283e:	81a3      	strheq	r3, [r4, #12]
 8022840:	bf18      	it	ne
 8022842:	81a3      	strhne	r3, [r4, #12]
 8022844:	bd10      	pop	{r4, pc}

08022846 <__sclose>:
 8022846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802284a:	f000 b827 	b.w	802289c <_close_r>

0802284e <__ascii_wctomb>:
 802284e:	b149      	cbz	r1, 8022864 <__ascii_wctomb+0x16>
 8022850:	2aff      	cmp	r2, #255	; 0xff
 8022852:	bf85      	ittet	hi
 8022854:	238a      	movhi	r3, #138	; 0x8a
 8022856:	6003      	strhi	r3, [r0, #0]
 8022858:	700a      	strbls	r2, [r1, #0]
 802285a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 802285e:	bf98      	it	ls
 8022860:	2001      	movls	r0, #1
 8022862:	4770      	bx	lr
 8022864:	4608      	mov	r0, r1
 8022866:	4770      	bx	lr

08022868 <_write_r>:
 8022868:	b538      	push	{r3, r4, r5, lr}
 802286a:	4d07      	ldr	r5, [pc, #28]	; (8022888 <_write_r+0x20>)
 802286c:	4604      	mov	r4, r0
 802286e:	4608      	mov	r0, r1
 8022870:	4611      	mov	r1, r2
 8022872:	2200      	movs	r2, #0
 8022874:	602a      	str	r2, [r5, #0]
 8022876:	461a      	mov	r2, r3
 8022878:	f7e0 fb15 	bl	8002ea6 <_write>
 802287c:	1c43      	adds	r3, r0, #1
 802287e:	d102      	bne.n	8022886 <_write_r+0x1e>
 8022880:	682b      	ldr	r3, [r5, #0]
 8022882:	b103      	cbz	r3, 8022886 <_write_r+0x1e>
 8022884:	6023      	str	r3, [r4, #0]
 8022886:	bd38      	pop	{r3, r4, r5, pc}
 8022888:	2400b240 	.word	0x2400b240

0802288c <abort>:
 802288c:	b508      	push	{r3, lr}
 802288e:	2006      	movs	r0, #6
 8022890:	f000 f8a8 	bl	80229e4 <raise>
 8022894:	2001      	movs	r0, #1
 8022896:	f7e0 fadf 	bl	8002e58 <_exit>
	...

0802289c <_close_r>:
 802289c:	b538      	push	{r3, r4, r5, lr}
 802289e:	4d06      	ldr	r5, [pc, #24]	; (80228b8 <_close_r+0x1c>)
 80228a0:	2300      	movs	r3, #0
 80228a2:	4604      	mov	r4, r0
 80228a4:	4608      	mov	r0, r1
 80228a6:	602b      	str	r3, [r5, #0]
 80228a8:	f7e0 fb19 	bl	8002ede <_close>
 80228ac:	1c43      	adds	r3, r0, #1
 80228ae:	d102      	bne.n	80228b6 <_close_r+0x1a>
 80228b0:	682b      	ldr	r3, [r5, #0]
 80228b2:	b103      	cbz	r3, 80228b6 <_close_r+0x1a>
 80228b4:	6023      	str	r3, [r4, #0]
 80228b6:	bd38      	pop	{r3, r4, r5, pc}
 80228b8:	2400b240 	.word	0x2400b240

080228bc <_fstat_r>:
 80228bc:	b538      	push	{r3, r4, r5, lr}
 80228be:	4d07      	ldr	r5, [pc, #28]	; (80228dc <_fstat_r+0x20>)
 80228c0:	2300      	movs	r3, #0
 80228c2:	4604      	mov	r4, r0
 80228c4:	4608      	mov	r0, r1
 80228c6:	4611      	mov	r1, r2
 80228c8:	602b      	str	r3, [r5, #0]
 80228ca:	f7e0 fb14 	bl	8002ef6 <_fstat>
 80228ce:	1c43      	adds	r3, r0, #1
 80228d0:	d102      	bne.n	80228d8 <_fstat_r+0x1c>
 80228d2:	682b      	ldr	r3, [r5, #0]
 80228d4:	b103      	cbz	r3, 80228d8 <_fstat_r+0x1c>
 80228d6:	6023      	str	r3, [r4, #0]
 80228d8:	bd38      	pop	{r3, r4, r5, pc}
 80228da:	bf00      	nop
 80228dc:	2400b240 	.word	0x2400b240

080228e0 <_isatty_r>:
 80228e0:	b538      	push	{r3, r4, r5, lr}
 80228e2:	4d06      	ldr	r5, [pc, #24]	; (80228fc <_isatty_r+0x1c>)
 80228e4:	2300      	movs	r3, #0
 80228e6:	4604      	mov	r4, r0
 80228e8:	4608      	mov	r0, r1
 80228ea:	602b      	str	r3, [r5, #0]
 80228ec:	f7e0 fb13 	bl	8002f16 <_isatty>
 80228f0:	1c43      	adds	r3, r0, #1
 80228f2:	d102      	bne.n	80228fa <_isatty_r+0x1a>
 80228f4:	682b      	ldr	r3, [r5, #0]
 80228f6:	b103      	cbz	r3, 80228fa <_isatty_r+0x1a>
 80228f8:	6023      	str	r3, [r4, #0]
 80228fa:	bd38      	pop	{r3, r4, r5, pc}
 80228fc:	2400b240 	.word	0x2400b240

08022900 <_lseek_r>:
 8022900:	b538      	push	{r3, r4, r5, lr}
 8022902:	4d07      	ldr	r5, [pc, #28]	; (8022920 <_lseek_r+0x20>)
 8022904:	4604      	mov	r4, r0
 8022906:	4608      	mov	r0, r1
 8022908:	4611      	mov	r1, r2
 802290a:	2200      	movs	r2, #0
 802290c:	602a      	str	r2, [r5, #0]
 802290e:	461a      	mov	r2, r3
 8022910:	f7e0 fb0c 	bl	8002f2c <_lseek>
 8022914:	1c43      	adds	r3, r0, #1
 8022916:	d102      	bne.n	802291e <_lseek_r+0x1e>
 8022918:	682b      	ldr	r3, [r5, #0]
 802291a:	b103      	cbz	r3, 802291e <_lseek_r+0x1e>
 802291c:	6023      	str	r3, [r4, #0]
 802291e:	bd38      	pop	{r3, r4, r5, pc}
 8022920:	2400b240 	.word	0x2400b240

08022924 <_realloc_r>:
 8022924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022926:	4607      	mov	r7, r0
 8022928:	4614      	mov	r4, r2
 802292a:	460e      	mov	r6, r1
 802292c:	b921      	cbnz	r1, 8022938 <_realloc_r+0x14>
 802292e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022932:	4611      	mov	r1, r2
 8022934:	f7fb bcd6 	b.w	801e2e4 <_malloc_r>
 8022938:	b922      	cbnz	r2, 8022944 <_realloc_r+0x20>
 802293a:	f7fb fc83 	bl	801e244 <_free_r>
 802293e:	4625      	mov	r5, r4
 8022940:	4628      	mov	r0, r5
 8022942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022944:	f000 f86a 	bl	8022a1c <_malloc_usable_size_r>
 8022948:	42a0      	cmp	r0, r4
 802294a:	d20f      	bcs.n	802296c <_realloc_r+0x48>
 802294c:	4621      	mov	r1, r4
 802294e:	4638      	mov	r0, r7
 8022950:	f7fb fcc8 	bl	801e2e4 <_malloc_r>
 8022954:	4605      	mov	r5, r0
 8022956:	2800      	cmp	r0, #0
 8022958:	d0f2      	beq.n	8022940 <_realloc_r+0x1c>
 802295a:	4631      	mov	r1, r6
 802295c:	4622      	mov	r2, r4
 802295e:	f7fb fc41 	bl	801e1e4 <memcpy>
 8022962:	4631      	mov	r1, r6
 8022964:	4638      	mov	r0, r7
 8022966:	f7fb fc6d 	bl	801e244 <_free_r>
 802296a:	e7e9      	b.n	8022940 <_realloc_r+0x1c>
 802296c:	4635      	mov	r5, r6
 802296e:	e7e7      	b.n	8022940 <_realloc_r+0x1c>

08022970 <_read_r>:
 8022970:	b538      	push	{r3, r4, r5, lr}
 8022972:	4d07      	ldr	r5, [pc, #28]	; (8022990 <_read_r+0x20>)
 8022974:	4604      	mov	r4, r0
 8022976:	4608      	mov	r0, r1
 8022978:	4611      	mov	r1, r2
 802297a:	2200      	movs	r2, #0
 802297c:	602a      	str	r2, [r5, #0]
 802297e:	461a      	mov	r2, r3
 8022980:	f7e0 fa74 	bl	8002e6c <_read>
 8022984:	1c43      	adds	r3, r0, #1
 8022986:	d102      	bne.n	802298e <_read_r+0x1e>
 8022988:	682b      	ldr	r3, [r5, #0]
 802298a:	b103      	cbz	r3, 802298e <_read_r+0x1e>
 802298c:	6023      	str	r3, [r4, #0]
 802298e:	bd38      	pop	{r3, r4, r5, pc}
 8022990:	2400b240 	.word	0x2400b240

08022994 <_raise_r>:
 8022994:	291f      	cmp	r1, #31
 8022996:	b538      	push	{r3, r4, r5, lr}
 8022998:	4604      	mov	r4, r0
 802299a:	460d      	mov	r5, r1
 802299c:	d904      	bls.n	80229a8 <_raise_r+0x14>
 802299e:	2316      	movs	r3, #22
 80229a0:	6003      	str	r3, [r0, #0]
 80229a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80229a6:	bd38      	pop	{r3, r4, r5, pc}
 80229a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80229aa:	b112      	cbz	r2, 80229b2 <_raise_r+0x1e>
 80229ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80229b0:	b94b      	cbnz	r3, 80229c6 <_raise_r+0x32>
 80229b2:	4620      	mov	r0, r4
 80229b4:	f000 f830 	bl	8022a18 <_getpid_r>
 80229b8:	462a      	mov	r2, r5
 80229ba:	4601      	mov	r1, r0
 80229bc:	4620      	mov	r0, r4
 80229be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80229c2:	f000 b817 	b.w	80229f4 <_kill_r>
 80229c6:	2b01      	cmp	r3, #1
 80229c8:	d00a      	beq.n	80229e0 <_raise_r+0x4c>
 80229ca:	1c59      	adds	r1, r3, #1
 80229cc:	d103      	bne.n	80229d6 <_raise_r+0x42>
 80229ce:	2316      	movs	r3, #22
 80229d0:	6003      	str	r3, [r0, #0]
 80229d2:	2001      	movs	r0, #1
 80229d4:	e7e7      	b.n	80229a6 <_raise_r+0x12>
 80229d6:	2400      	movs	r4, #0
 80229d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80229dc:	4628      	mov	r0, r5
 80229de:	4798      	blx	r3
 80229e0:	2000      	movs	r0, #0
 80229e2:	e7e0      	b.n	80229a6 <_raise_r+0x12>

080229e4 <raise>:
 80229e4:	4b02      	ldr	r3, [pc, #8]	; (80229f0 <raise+0xc>)
 80229e6:	4601      	mov	r1, r0
 80229e8:	6818      	ldr	r0, [r3, #0]
 80229ea:	f7ff bfd3 	b.w	8022994 <_raise_r>
 80229ee:	bf00      	nop
 80229f0:	24003444 	.word	0x24003444

080229f4 <_kill_r>:
 80229f4:	b538      	push	{r3, r4, r5, lr}
 80229f6:	4d07      	ldr	r5, [pc, #28]	; (8022a14 <_kill_r+0x20>)
 80229f8:	2300      	movs	r3, #0
 80229fa:	4604      	mov	r4, r0
 80229fc:	4608      	mov	r0, r1
 80229fe:	4611      	mov	r1, r2
 8022a00:	602b      	str	r3, [r5, #0]
 8022a02:	f7e0 fa17 	bl	8002e34 <_kill>
 8022a06:	1c43      	adds	r3, r0, #1
 8022a08:	d102      	bne.n	8022a10 <_kill_r+0x1c>
 8022a0a:	682b      	ldr	r3, [r5, #0]
 8022a0c:	b103      	cbz	r3, 8022a10 <_kill_r+0x1c>
 8022a0e:	6023      	str	r3, [r4, #0]
 8022a10:	bd38      	pop	{r3, r4, r5, pc}
 8022a12:	bf00      	nop
 8022a14:	2400b240 	.word	0x2400b240

08022a18 <_getpid_r>:
 8022a18:	f7e0 ba04 	b.w	8002e24 <_getpid>

08022a1c <_malloc_usable_size_r>:
 8022a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022a20:	1f18      	subs	r0, r3, #4
 8022a22:	2b00      	cmp	r3, #0
 8022a24:	bfbc      	itt	lt
 8022a26:	580b      	ldrlt	r3, [r1, r0]
 8022a28:	18c0      	addlt	r0, r0, r3
 8022a2a:	4770      	bx	lr

08022a2c <checkint>:
 8022a2c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8022a30:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8022a34:	429a      	cmp	r2, r3
 8022a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a38:	dd2b      	ble.n	8022a92 <checkint+0x66>
 8022a3a:	f240 4333 	movw	r3, #1075	; 0x433
 8022a3e:	429a      	cmp	r2, r3
 8022a40:	dc25      	bgt.n	8022a8e <checkint+0x62>
 8022a42:	1a9b      	subs	r3, r3, r2
 8022a44:	f1a3 0620 	sub.w	r6, r3, #32
 8022a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022a4c:	fa02 f606 	lsl.w	r6, r2, r6
 8022a50:	fa02 f403 	lsl.w	r4, r2, r3
 8022a54:	f1c3 0520 	rsb	r5, r3, #32
 8022a58:	4334      	orrs	r4, r6
 8022a5a:	fa22 f505 	lsr.w	r5, r2, r5
 8022a5e:	432c      	orrs	r4, r5
 8022a60:	409a      	lsls	r2, r3
 8022a62:	ea20 0602 	bic.w	r6, r0, r2
 8022a66:	ea21 0704 	bic.w	r7, r1, r4
 8022a6a:	ea56 0207 	orrs.w	r2, r6, r7
 8022a6e:	f1a3 0420 	sub.w	r4, r3, #32
 8022a72:	f1c3 0220 	rsb	r2, r3, #32
 8022a76:	d10c      	bne.n	8022a92 <checkint+0x66>
 8022a78:	40d8      	lsrs	r0, r3
 8022a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8022a7e:	4318      	orrs	r0, r3
 8022a80:	40e1      	lsrs	r1, r4
 8022a82:	4308      	orrs	r0, r1
 8022a84:	f000 0301 	and.w	r3, r0, #1
 8022a88:	f1c3 0002 	rsb	r0, r3, #2
 8022a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a8e:	2002      	movs	r0, #2
 8022a90:	e7fc      	b.n	8022a8c <checkint+0x60>
 8022a92:	2000      	movs	r0, #0
 8022a94:	e7fa      	b.n	8022a8c <checkint+0x60>
	...

08022a98 <pow>:
 8022a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a9c:	ed2d 8b0a 	vpush	{d8-d12}
 8022aa0:	b09b      	sub	sp, #108	; 0x6c
 8022aa2:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022aa6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8022aaa:	ed8d 1b00 	vstr	d1, [sp]
 8022aae:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8022ab2:	e9dd 6700 	ldrd	r6, r7, [sp]
 8022ab6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8022aba:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8022abe:	4288      	cmp	r0, r1
 8022ac0:	46cc      	mov	ip, r9
 8022ac2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8022ac6:	d806      	bhi.n	8022ad6 <pow+0x3e>
 8022ac8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8022acc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8022ad0:	297f      	cmp	r1, #127	; 0x7f
 8022ad2:	f240 81ab 	bls.w	8022e2c <pow+0x394>
 8022ad6:	19b1      	adds	r1, r6, r6
 8022ad8:	9104      	str	r1, [sp, #16]
 8022ada:	eb47 0107 	adc.w	r1, r7, r7
 8022ade:	9105      	str	r1, [sp, #20]
 8022ae0:	9904      	ldr	r1, [sp, #16]
 8022ae2:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
 8022ae6:	460a      	mov	r2, r1
 8022ae8:	9905      	ldr	r1, [sp, #20]
 8022aea:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8022aee:	460b      	mov	r3, r1
 8022af0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8022af4:	f06f 0001 	mvn.w	r0, #1
 8022af8:	4299      	cmp	r1, r3
 8022afa:	bf08      	it	eq
 8022afc:	4290      	cmpeq	r0, r2
 8022afe:	d260      	bcs.n	8022bc2 <pow+0x12a>
 8022b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022b04:	4313      	orrs	r3, r2
 8022b06:	d11a      	bne.n	8022b3e <pow+0xa6>
 8022b08:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8022b0c:	1923      	adds	r3, r4, r4
 8022b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8022b10:	eb42 0302 	adc.w	r3, r2, r2
 8022b14:	930d      	str	r3, [sp, #52]	; 0x34
 8022b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8022b1a:	4bcf      	ldr	r3, [pc, #828]	; (8022e58 <pow+0x3c0>)
 8022b1c:	2200      	movs	r2, #0
 8022b1e:	428b      	cmp	r3, r1
 8022b20:	bf08      	it	eq
 8022b22:	4282      	cmpeq	r2, r0
 8022b24:	f080 8265 	bcs.w	8022ff2 <pow+0x55a>
 8022b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022b2c:	ed9d 6b00 	vldr	d6, [sp]
 8022b30:	ee37 0b06 	vadd.f64	d0, d7, d6
 8022b34:	b01b      	add	sp, #108	; 0x6c
 8022b36:	ecbd 8b0a 	vpop	{d8-d12}
 8022b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b3e:	49c7      	ldr	r1, [pc, #796]	; (8022e5c <pow+0x3c4>)
 8022b40:	2000      	movs	r0, #0
 8022b42:	428d      	cmp	r5, r1
 8022b44:	bf08      	it	eq
 8022b46:	4284      	cmpeq	r4, r0
 8022b48:	d10b      	bne.n	8022b62 <pow+0xca>
 8022b4a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8022b4e:	19b3      	adds	r3, r6, r6
 8022b50:	930e      	str	r3, [sp, #56]	; 0x38
 8022b52:	eb42 0302 	adc.w	r3, r2, r2
 8022b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8022b58:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8022b5c:	4bbe      	ldr	r3, [pc, #760]	; (8022e58 <pow+0x3c0>)
 8022b5e:	2200      	movs	r2, #0
 8022b60:	e7dd      	b.n	8022b1e <pow+0x86>
 8022b62:	1921      	adds	r1, r4, r4
 8022b64:	9106      	str	r1, [sp, #24]
 8022b66:	eb45 0105 	adc.w	r1, r5, r5
 8022b6a:	9107      	str	r1, [sp, #28]
 8022b6c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8022b70:	49bb      	ldr	r1, [pc, #748]	; (8022e60 <pow+0x3c8>)
 8022b72:	2000      	movs	r0, #0
 8022b74:	42a1      	cmp	r1, r4
 8022b76:	bf08      	it	eq
 8022b78:	4298      	cmpeq	r0, r3
 8022b7a:	d3d5      	bcc.n	8022b28 <pow+0x90>
 8022b7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8022b80:	428c      	cmp	r4, r1
 8022b82:	bf08      	it	eq
 8022b84:	4283      	cmpeq	r3, r0
 8022b86:	d1cf      	bne.n	8022b28 <pow+0x90>
 8022b88:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8022b8c:	49b5      	ldr	r1, [pc, #724]	; (8022e64 <pow+0x3cc>)
 8022b8e:	2000      	movs	r0, #0
 8022b90:	428c      	cmp	r4, r1
 8022b92:	bf08      	it	eq
 8022b94:	4283      	cmpeq	r3, r0
 8022b96:	f000 822c 	beq.w	8022ff2 <pow+0x55a>
 8022b9a:	49b3      	ldr	r1, [pc, #716]	; (8022e68 <pow+0x3d0>)
 8022b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ba0:	42a1      	cmp	r1, r4
 8022ba2:	bf08      	it	eq
 8022ba4:	4298      	cmpeq	r0, r3
 8022ba6:	ea6f 0307 	mvn.w	r3, r7
 8022baa:	bf34      	ite	cc
 8022bac:	2201      	movcc	r2, #1
 8022bae:	2200      	movcs	r2, #0
 8022bb0:	0fdb      	lsrs	r3, r3, #31
 8022bb2:	429a      	cmp	r2, r3
 8022bb4:	f040 821a 	bne.w	8022fec <pow+0x554>
 8022bb8:	ed9d 7b00 	vldr	d7, [sp]
 8022bbc:	ee27 0b07 	vmul.f64	d0, d7, d7
 8022bc0:	e7b8      	b.n	8022b34 <pow+0x9c>
 8022bc2:	1923      	adds	r3, r4, r4
 8022bc4:	9308      	str	r3, [sp, #32]
 8022bc6:	eb45 0305 	adc.w	r3, r5, r5
 8022bca:	9309      	str	r3, [sp, #36]	; 0x24
 8022bcc:	9b08      	ldr	r3, [sp, #32]
 8022bce:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8022bd2:	9310      	str	r3, [sp, #64]	; 0x40
 8022bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bd6:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8022bda:	9311      	str	r3, [sp, #68]	; 0x44
 8022bdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8022be0:	4299      	cmp	r1, r3
 8022be2:	bf08      	it	eq
 8022be4:	4290      	cmpeq	r0, r2
 8022be6:	d22d      	bcs.n	8022c44 <pow+0x1ac>
 8022be8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022bec:	2c00      	cmp	r4, #0
 8022bee:	f175 0300 	sbcs.w	r3, r5, #0
 8022bf2:	ee27 0b07 	vmul.f64	d0, d7, d7
 8022bf6:	da16      	bge.n	8022c26 <pow+0x18e>
 8022bf8:	4630      	mov	r0, r6
 8022bfa:	4639      	mov	r1, r7
 8022bfc:	f7ff ff16 	bl	8022a2c <checkint>
 8022c00:	2801      	cmp	r0, #1
 8022c02:	d110      	bne.n	8022c26 <pow+0x18e>
 8022c04:	eeb1 0b40 	vneg.f64	d0, d0
 8022c08:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8022c0c:	4323      	orrs	r3, r4
 8022c0e:	d10c      	bne.n	8022c2a <pow+0x192>
 8022c10:	2e00      	cmp	r6, #0
 8022c12:	f177 0300 	sbcs.w	r3, r7, #0
 8022c16:	da8d      	bge.n	8022b34 <pow+0x9c>
 8022c18:	b01b      	add	sp, #108	; 0x6c
 8022c1a:	ecbd 8b0a 	vpop	{d8-d12}
 8022c1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c22:	f000 bf25 	b.w	8023a70 <__math_divzero>
 8022c26:	2000      	movs	r0, #0
 8022c28:	e7ee      	b.n	8022c08 <pow+0x170>
 8022c2a:	2e00      	cmp	r6, #0
 8022c2c:	f177 0300 	sbcs.w	r3, r7, #0
 8022c30:	da80      	bge.n	8022b34 <pow+0x9c>
 8022c32:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8022c36:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8022c3a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8022c3e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8022c42:	e777      	b.n	8022b34 <pow+0x9c>
 8022c44:	2c00      	cmp	r4, #0
 8022c46:	f175 0300 	sbcs.w	r3, r5, #0
 8022c4a:	da35      	bge.n	8022cb8 <pow+0x220>
 8022c4c:	4630      	mov	r0, r6
 8022c4e:	4639      	mov	r1, r7
 8022c50:	f7ff feec 	bl	8022a2c <checkint>
 8022c54:	b940      	cbnz	r0, 8022c68 <pow+0x1d0>
 8022c56:	ed9d 0b02 	vldr	d0, [sp, #8]
 8022c5a:	b01b      	add	sp, #108	; 0x6c
 8022c5c:	ecbd 8b0a 	vpop	{d8-d12}
 8022c60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c64:	f000 bf1c 	b.w	8023aa0 <__math_invalid>
 8022c68:	2801      	cmp	r0, #1
 8022c6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022c6e:	bf14      	ite	ne
 8022c70:	2000      	movne	r0, #0
 8022c72:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8022c76:	461d      	mov	r5, r3
 8022c78:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8022c7c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8022c80:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8022c84:	2a7f      	cmp	r2, #127	; 0x7f
 8022c86:	d933      	bls.n	8022cf0 <pow+0x258>
 8022c88:	4974      	ldr	r1, [pc, #464]	; (8022e5c <pow+0x3c4>)
 8022c8a:	2000      	movs	r0, #0
 8022c8c:	428d      	cmp	r5, r1
 8022c8e:	bf08      	it	eq
 8022c90:	4284      	cmpeq	r4, r0
 8022c92:	f000 81ae 	beq.w	8022ff2 <pow+0x55a>
 8022c96:	f240 32bd 	movw	r2, #957	; 0x3bd
 8022c9a:	4293      	cmp	r3, r2
 8022c9c:	d80e      	bhi.n	8022cbc <pow+0x224>
 8022c9e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8022ca2:	ed9d 7b00 	vldr	d7, [sp]
 8022ca6:	42a9      	cmp	r1, r5
 8022ca8:	bf08      	it	eq
 8022caa:	42a0      	cmpeq	r0, r4
 8022cac:	bf34      	ite	cc
 8022cae:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8022cb2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8022cb6:	e73d      	b.n	8022b34 <pow+0x9c>
 8022cb8:	2000      	movs	r0, #0
 8022cba:	e7df      	b.n	8022c7c <pow+0x1e4>
 8022cbc:	42a9      	cmp	r1, r5
 8022cbe:	bf08      	it	eq
 8022cc0:	42a0      	cmpeq	r0, r4
 8022cc2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8022cc6:	bf2c      	ite	cs
 8022cc8:	2301      	movcs	r3, #1
 8022cca:	2300      	movcc	r3, #0
 8022ccc:	4590      	cmp	r8, r2
 8022cce:	bf8c      	ite	hi
 8022cd0:	f04f 0800 	movhi.w	r8, #0
 8022cd4:	f04f 0801 	movls.w	r8, #1
 8022cd8:	4543      	cmp	r3, r8
 8022cda:	f04f 0000 	mov.w	r0, #0
 8022cde:	f000 80af 	beq.w	8022e40 <pow+0x3a8>
 8022ce2:	b01b      	add	sp, #108	; 0x6c
 8022ce4:	ecbd 8b0a 	vpop	{d8-d12}
 8022ce8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cec:	f000 beb8 	b.w	8023a60 <__math_oflow>
 8022cf0:	f1bc 0f00 	cmp.w	ip, #0
 8022cf4:	d10e      	bne.n	8022d14 <pow+0x27c>
 8022cf6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8022e50 <pow+0x3b8>
 8022cfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8022cfe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022d02:	ec57 6b17 	vmov	r6, r7, d7
 8022d06:	4b59      	ldr	r3, [pc, #356]	; (8022e6c <pow+0x3d4>)
 8022d08:	2100      	movs	r1, #0
 8022d0a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8022d0e:	1874      	adds	r4, r6, r1
 8022d10:	eb42 0503 	adc.w	r5, r2, r3
 8022d14:	2300      	movs	r3, #0
 8022d16:	18e3      	adds	r3, r4, r3
 8022d18:	4b55      	ldr	r3, [pc, #340]	; (8022e70 <pow+0x3d8>)
 8022d1a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8022d1e:	eb45 0303 	adc.w	r3, r5, r3
 8022d22:	1519      	asrs	r1, r3, #20
 8022d24:	ee03 1a10 	vmov	s6, r1
 8022d28:	0d1e      	lsrs	r6, r3, #20
 8022d2a:	2100      	movs	r1, #0
 8022d2c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8022d30:	0536      	lsls	r6, r6, #20
 8022d32:	1a63      	subs	r3, r4, r1
 8022d34:	9312      	str	r3, [sp, #72]	; 0x48
 8022d36:	eb65 0306 	sbc.w	r3, r5, r6
 8022d3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8022d3c:	4b4d      	ldr	r3, [pc, #308]	; (8022e74 <pow+0x3dc>)
 8022d3e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8022d42:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022d46:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8022d4a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8022d4e:	ed93 7b00 	vldr	d7, [r3]
 8022d52:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8022d56:	ed93 4b02 	vldr	d4, [r3, #8]
 8022d5a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8022d5e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8022d62:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8022d66:	ee36 9b05 	vadd.f64	d9, d6, d5
 8022d6a:	ee35 5b49 	vsub.f64	d5, d5, d9
 8022d6e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8022d72:	ed93 4b04 	vldr	d4, [r3, #16]
 8022d76:	ee35 5b06 	vadd.f64	d5, d5, d6
 8022d7a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8022d7e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8022d82:	ed93 3b08 	vldr	d3, [r3, #32]
 8022d86:	ee26 0b04 	vmul.f64	d0, d6, d4
 8022d8a:	eeb0 8b40 	vmov.f64	d8, d0
 8022d8e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8022d92:	ed93 4b06 	vldr	d4, [r3, #24]
 8022d96:	ee26 ab00 	vmul.f64	d10, d6, d0
 8022d9a:	ee39 1b00 	vadd.f64	d1, d9, d0
 8022d9e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8022da2:	eea6 4b03 	vfma.f64	d4, d6, d3
 8022da6:	ee39 9b41 	vsub.f64	d9, d9, d1
 8022daa:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8022dae:	ee37 8b08 	vadd.f64	d8, d7, d8
 8022db2:	ee39 9b00 	vadd.f64	d9, d9, d0
 8022db6:	eea6 3b02 	vfma.f64	d3, d6, d2
 8022dba:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8022dbe:	ee38 9b09 	vadd.f64	d9, d8, d9
 8022dc2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8022dc6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8022dca:	ed9d 6b00 	vldr	d6, [sp]
 8022dce:	eea0 3b02 	vfma.f64	d3, d0, d2
 8022dd2:	eea0 4b03 	vfma.f64	d4, d0, d3
 8022dd6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8022dda:	ee31 7b09 	vadd.f64	d7, d1, d9
 8022dde:	ee26 6b07 	vmul.f64	d6, d6, d7
 8022de2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8022de6:	eeb0 3b46 	vmov.f64	d3, d6
 8022dea:	ee31 1b47 	vsub.f64	d1, d1, d7
 8022dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022df2:	ee31 9b09 	vadd.f64	d9, d1, d9
 8022df6:	ed9d 6b00 	vldr	d6, [sp]
 8022dfa:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8022dfe:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8022e02:	193c      	adds	r4, r7, r4
 8022e04:	2c3e      	cmp	r4, #62	; 0x3e
 8022e06:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8022e0a:	eea6 3b09 	vfma.f64	d3, d6, d9
 8022e0e:	d934      	bls.n	8022e7a <pow+0x3e2>
 8022e10:	428c      	cmp	r4, r1
 8022e12:	da0d      	bge.n	8022e30 <pow+0x398>
 8022e14:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8022e18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8022e1c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8022e20:	2800      	cmp	r0, #0
 8022e22:	f43f ae87 	beq.w	8022b34 <pow+0x9c>
 8022e26:	eeb1 0b40 	vneg.f64	d0, d0
 8022e2a:	e683      	b.n	8022b34 <pow+0x9c>
 8022e2c:	2000      	movs	r0, #0
 8022e2e:	e771      	b.n	8022d14 <pow+0x27c>
 8022e30:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8022e34:	d920      	bls.n	8022e78 <pow+0x3e0>
 8022e36:	2a00      	cmp	r2, #0
 8022e38:	f173 0300 	sbcs.w	r3, r3, #0
 8022e3c:	f6bf af51 	bge.w	8022ce2 <pow+0x24a>
 8022e40:	b01b      	add	sp, #108	; 0x6c
 8022e42:	ecbd 8b0a 	vpop	{d8-d12}
 8022e46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e4a:	f000 be01 	b.w	8023a50 <__math_uflow>
 8022e4e:	bf00      	nop
 8022e50:	00000000 	.word	0x00000000
 8022e54:	43300000 	.word	0x43300000
 8022e58:	fff00000 	.word	0xfff00000
 8022e5c:	3ff00000 	.word	0x3ff00000
 8022e60:	ffe00000 	.word	0xffe00000
 8022e64:	7fe00000 	.word	0x7fe00000
 8022e68:	7fdfffff 	.word	0x7fdfffff
 8022e6c:	fcc00000 	.word	0xfcc00000
 8022e70:	c0196aab 	.word	0xc0196aab
 8022e74:	08027868 	.word	0x08027868
 8022e78:	460f      	mov	r7, r1
 8022e7a:	4e65      	ldr	r6, [pc, #404]	; (8023010 <pow+0x578>)
 8022e7c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8022e80:	ed96 6b02 	vldr	d6, [r6, #8]
 8022e84:	ed96 7b00 	vldr	d7, [r6]
 8022e88:	eeb0 5b46 	vmov.f64	d5, d6
 8022e8c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8022e90:	ed8d 5b00 	vstr	d5, [sp]
 8022e94:	ee35 6b46 	vsub.f64	d6, d5, d6
 8022e98:	eeb0 5b44 	vmov.f64	d5, d4
 8022e9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ea0:	ed96 7b04 	vldr	d7, [r6, #16]
 8022ea4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8022ea8:	eea6 5b07 	vfma.f64	d5, d6, d7
 8022eac:	eeb0 7b45 	vmov.f64	d7, d5
 8022eb0:	ed96 5b06 	vldr	d5, [r6, #24]
 8022eb4:	1849      	adds	r1, r1, r1
 8022eb6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8022eba:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8022ebe:	eea6 7b05 	vfma.f64	d7, d6, d5
 8022ec2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8022ec6:	ee33 3b07 	vadd.f64	d3, d3, d7
 8022eca:	ee23 6b03 	vmul.f64	d6, d3, d3
 8022ece:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8022ed2:	ed96 5b08 	vldr	d5, [r6, #32]
 8022ed6:	ee33 7b07 	vadd.f64	d7, d3, d7
 8022eda:	1814      	adds	r4, r2, r0
 8022edc:	0365      	lsls	r5, r4, #13
 8022ede:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8022ee2:	eea3 5b04 	vfma.f64	d5, d3, d4
 8022ee6:	eea6 7b05 	vfma.f64	d7, d6, d5
 8022eea:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8022eee:	ee26 6b06 	vmul.f64	d6, d6, d6
 8022ef2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8022ef6:	2000      	movs	r0, #0
 8022ef8:	eb10 0a04 	adds.w	sl, r0, r4
 8022efc:	eea3 5b04 	vfma.f64	d5, d3, d4
 8022f00:	eb45 0b0c 	adc.w	fp, r5, ip
 8022f04:	eea6 7b05 	vfma.f64	d7, d6, d5
 8022f08:	2f00      	cmp	r7, #0
 8022f0a:	d16a      	bne.n	8022fe2 <pow+0x54a>
 8022f0c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8022f10:	4639      	mov	r1, r7
 8022f12:	ea50 0301 	orrs.w	r3, r0, r1
 8022f16:	f04f 0300 	mov.w	r3, #0
 8022f1a:	d115      	bne.n	8022f48 <pow+0x4b0>
 8022f1c:	eb1a 0303 	adds.w	r3, sl, r3
 8022f20:	ee0b 3a10 	vmov	s22, r3
 8022f24:	4b3b      	ldr	r3, [pc, #236]	; (8023014 <pow+0x57c>)
 8022f26:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8022ff8 <pow+0x560>
 8022f2a:	eb4b 0303 	adc.w	r3, fp, r3
 8022f2e:	ee0b 3a90 	vmov	s23, r3
 8022f32:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8022f36:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8022f3a:	b01b      	add	sp, #108	; 0x6c
 8022f3c:	ecbd 8b0a 	vpop	{d8-d12}
 8022f40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f44:	f000 bdc4 	b.w	8023ad0 <__math_check_oflow>
 8022f48:	eb1a 0303 	adds.w	r3, sl, r3
 8022f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8022f4e:	4b32      	ldr	r3, [pc, #200]	; (8023018 <pow+0x580>)
 8022f50:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8022f54:	eb4b 0303 	adc.w	r3, fp, r3
 8022f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8022f5a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8022f5e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8022f62:	ee35 7b06 	vadd.f64	d7, d5, d6
 8022f66:	eeb0 3bc7 	vabs.f64	d3, d7
 8022f6a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8022f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f72:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8023000 <pow+0x568>
 8022f76:	d52b      	bpl.n	8022fd0 <pow+0x538>
 8022f78:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8022f7c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8022f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022f84:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8022f88:	ee35 6b06 	vadd.f64	d6, d5, d6
 8022f8c:	bf48      	it	mi
 8022f8e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8022f92:	ee37 3b04 	vadd.f64	d3, d7, d4
 8022f96:	ee34 5b43 	vsub.f64	d5, d4, d3
 8022f9a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8022f9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022fa2:	ee37 7b03 	vadd.f64	d7, d7, d3
 8022fa6:	ee37 7b44 	vsub.f64	d7, d7, d4
 8022faa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fb2:	d105      	bne.n	8022fc0 <pow+0x528>
 8022fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022fb6:	463a      	mov	r2, r7
 8022fb8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8022fbc:	ec43 2b17 	vmov	d7, r2, r3
 8022fc0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8022fc4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8022fc8:	ee26 6b00 	vmul.f64	d6, d6, d0
 8022fcc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8022fd0:	ee27 0b00 	vmul.f64	d0, d7, d0
 8022fd4:	b01b      	add	sp, #108	; 0x6c
 8022fd6:	ecbd 8b0a 	vpop	{d8-d12}
 8022fda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fde:	f000 bd6e 	b.w	8023abe <__math_check_uflow>
 8022fe2:	ec4b ab10 	vmov	d0, sl, fp
 8022fe6:	eea7 0b00 	vfma.f64	d0, d7, d0
 8022fea:	e5a3      	b.n	8022b34 <pow+0x9c>
 8022fec:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8023008 <pow+0x570>
 8022ff0:	e5a0      	b.n	8022b34 <pow+0x9c>
 8022ff2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8022ff6:	e59d      	b.n	8022b34 <pow+0x9c>
 8022ff8:	00000000 	.word	0x00000000
 8022ffc:	7f000000 	.word	0x7f000000
 8023000:	00000000 	.word	0x00000000
 8023004:	00100000 	.word	0x00100000
	...
 8023010:	08028a38 	.word	0x08028a38
 8023014:	c0f00000 	.word	0xc0f00000
 8023018:	3fe00000 	.word	0x3fe00000
 802301c:	00000000 	.word	0x00000000

08023020 <sin>:
 8023020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023022:	eeb0 7b40 	vmov.f64	d7, d0
 8023026:	ee17 3a90 	vmov	r3, s15
 802302a:	4a1f      	ldr	r2, [pc, #124]	; (80230a8 <sin+0x88>)
 802302c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023030:	4293      	cmp	r3, r2
 8023032:	dc05      	bgt.n	8023040 <sin+0x20>
 8023034:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80230a0 <sin+0x80>
 8023038:	2000      	movs	r0, #0
 802303a:	f000 fc95 	bl	8023968 <__kernel_sin>
 802303e:	e004      	b.n	802304a <sin+0x2a>
 8023040:	4a1a      	ldr	r2, [pc, #104]	; (80230ac <sin+0x8c>)
 8023042:	4293      	cmp	r3, r2
 8023044:	dd04      	ble.n	8023050 <sin+0x30>
 8023046:	ee30 0b40 	vsub.f64	d0, d0, d0
 802304a:	b005      	add	sp, #20
 802304c:	f85d fb04 	ldr.w	pc, [sp], #4
 8023050:	4668      	mov	r0, sp
 8023052:	f000 f859 	bl	8023108 <__ieee754_rem_pio2>
 8023056:	f000 0003 	and.w	r0, r0, #3
 802305a:	2801      	cmp	r0, #1
 802305c:	d008      	beq.n	8023070 <sin+0x50>
 802305e:	2802      	cmp	r0, #2
 8023060:	d00d      	beq.n	802307e <sin+0x5e>
 8023062:	b9b0      	cbnz	r0, 8023092 <sin+0x72>
 8023064:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023068:	ed9d 0b00 	vldr	d0, [sp]
 802306c:	2001      	movs	r0, #1
 802306e:	e7e4      	b.n	802303a <sin+0x1a>
 8023070:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023074:	ed9d 0b00 	vldr	d0, [sp]
 8023078:	f000 f98a 	bl	8023390 <__kernel_cos>
 802307c:	e7e5      	b.n	802304a <sin+0x2a>
 802307e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023082:	ed9d 0b00 	vldr	d0, [sp]
 8023086:	2001      	movs	r0, #1
 8023088:	f000 fc6e 	bl	8023968 <__kernel_sin>
 802308c:	eeb1 0b40 	vneg.f64	d0, d0
 8023090:	e7db      	b.n	802304a <sin+0x2a>
 8023092:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023096:	ed9d 0b00 	vldr	d0, [sp]
 802309a:	f000 f979 	bl	8023390 <__kernel_cos>
 802309e:	e7f5      	b.n	802308c <sin+0x6c>
	...
 80230a8:	3fe921fb 	.word	0x3fe921fb
 80230ac:	7fefffff 	.word	0x7fefffff

080230b0 <sqrt>:
 80230b0:	b508      	push	{r3, lr}
 80230b2:	ed2d 8b04 	vpush	{d8-d9}
 80230b6:	eeb0 8b40 	vmov.f64	d8, d0
 80230ba:	f000 f965 	bl	8023388 <__ieee754_sqrt>
 80230be:	4b10      	ldr	r3, [pc, #64]	; (8023100 <sqrt+0x50>)
 80230c0:	f993 3000 	ldrsb.w	r3, [r3]
 80230c4:	3301      	adds	r3, #1
 80230c6:	d011      	beq.n	80230ec <sqrt+0x3c>
 80230c8:	eeb4 8b48 	vcmp.f64	d8, d8
 80230cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230d0:	d60c      	bvs.n	80230ec <sqrt+0x3c>
 80230d2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80230f8 <sqrt+0x48>
 80230d6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80230da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80230de:	d505      	bpl.n	80230ec <sqrt+0x3c>
 80230e0:	f7fd fe20 	bl	8020d24 <__errno>
 80230e4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80230e8:	2321      	movs	r3, #33	; 0x21
 80230ea:	6003      	str	r3, [r0, #0]
 80230ec:	ecbd 8b04 	vpop	{d8-d9}
 80230f0:	bd08      	pop	{r3, pc}
 80230f2:	bf00      	nop
 80230f4:	f3af 8000 	nop.w
	...
 8023100:	24003618 	.word	0x24003618
 8023104:	00000000 	.word	0x00000000

08023108 <__ieee754_rem_pio2>:
 8023108:	b570      	push	{r4, r5, r6, lr}
 802310a:	eeb0 7b40 	vmov.f64	d7, d0
 802310e:	ee17 5a90 	vmov	r5, s15
 8023112:	4b97      	ldr	r3, [pc, #604]	; (8023370 <__ieee754_rem_pio2+0x268>)
 8023114:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023118:	429e      	cmp	r6, r3
 802311a:	b088      	sub	sp, #32
 802311c:	4604      	mov	r4, r0
 802311e:	dc07      	bgt.n	8023130 <__ieee754_rem_pio2+0x28>
 8023120:	2200      	movs	r2, #0
 8023122:	2300      	movs	r3, #0
 8023124:	ed84 0b00 	vstr	d0, [r4]
 8023128:	e9c0 2302 	strd	r2, r3, [r0, #8]
 802312c:	2000      	movs	r0, #0
 802312e:	e01b      	b.n	8023168 <__ieee754_rem_pio2+0x60>
 8023130:	4b90      	ldr	r3, [pc, #576]	; (8023374 <__ieee754_rem_pio2+0x26c>)
 8023132:	429e      	cmp	r6, r3
 8023134:	dc3b      	bgt.n	80231ae <__ieee754_rem_pio2+0xa6>
 8023136:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 802313a:	2d00      	cmp	r5, #0
 802313c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8023330 <__ieee754_rem_pio2+0x228>
 8023140:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8023144:	dd19      	ble.n	802317a <__ieee754_rem_pio2+0x72>
 8023146:	ee30 7b46 	vsub.f64	d7, d0, d6
 802314a:	429e      	cmp	r6, r3
 802314c:	d00e      	beq.n	802316c <__ieee754_rem_pio2+0x64>
 802314e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8023338 <__ieee754_rem_pio2+0x230>
 8023152:	ee37 5b46 	vsub.f64	d5, d7, d6
 8023156:	ee37 7b45 	vsub.f64	d7, d7, d5
 802315a:	ed84 5b00 	vstr	d5, [r4]
 802315e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023162:	ed84 7b02 	vstr	d7, [r4, #8]
 8023166:	2001      	movs	r0, #1
 8023168:	b008      	add	sp, #32
 802316a:	bd70      	pop	{r4, r5, r6, pc}
 802316c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8023340 <__ieee754_rem_pio2+0x238>
 8023170:	ee37 7b46 	vsub.f64	d7, d7, d6
 8023174:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8023348 <__ieee754_rem_pio2+0x240>
 8023178:	e7eb      	b.n	8023152 <__ieee754_rem_pio2+0x4a>
 802317a:	429e      	cmp	r6, r3
 802317c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8023180:	d00e      	beq.n	80231a0 <__ieee754_rem_pio2+0x98>
 8023182:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8023338 <__ieee754_rem_pio2+0x230>
 8023186:	ee37 5b06 	vadd.f64	d5, d7, d6
 802318a:	ee37 7b45 	vsub.f64	d7, d7, d5
 802318e:	ed84 5b00 	vstr	d5, [r4]
 8023192:	ee37 7b06 	vadd.f64	d7, d7, d6
 8023196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802319a:	ed84 7b02 	vstr	d7, [r4, #8]
 802319e:	e7e3      	b.n	8023168 <__ieee754_rem_pio2+0x60>
 80231a0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8023340 <__ieee754_rem_pio2+0x238>
 80231a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80231a8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8023348 <__ieee754_rem_pio2+0x240>
 80231ac:	e7eb      	b.n	8023186 <__ieee754_rem_pio2+0x7e>
 80231ae:	4b72      	ldr	r3, [pc, #456]	; (8023378 <__ieee754_rem_pio2+0x270>)
 80231b0:	429e      	cmp	r6, r3
 80231b2:	dc6e      	bgt.n	8023292 <__ieee754_rem_pio2+0x18a>
 80231b4:	f000 fca0 	bl	8023af8 <fabs>
 80231b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80231bc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8023350 <__ieee754_rem_pio2+0x248>
 80231c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80231c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80231c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80231cc:	ee17 0a90 	vmov	r0, s15
 80231d0:	eeb1 4b45 	vneg.f64	d4, d5
 80231d4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8023330 <__ieee754_rem_pio2+0x228>
 80231d8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80231dc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8023338 <__ieee754_rem_pio2+0x230>
 80231e0:	281f      	cmp	r0, #31
 80231e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80231e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80231ea:	dc08      	bgt.n	80231fe <__ieee754_rem_pio2+0xf6>
 80231ec:	4b63      	ldr	r3, [pc, #396]	; (802337c <__ieee754_rem_pio2+0x274>)
 80231ee:	1e42      	subs	r2, r0, #1
 80231f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80231f4:	42b3      	cmp	r3, r6
 80231f6:	d002      	beq.n	80231fe <__ieee754_rem_pio2+0xf6>
 80231f8:	ed84 6b00 	vstr	d6, [r4]
 80231fc:	e024      	b.n	8023248 <__ieee754_rem_pio2+0x140>
 80231fe:	ee16 3a90 	vmov	r3, s13
 8023202:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8023206:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 802320a:	2b10      	cmp	r3, #16
 802320c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8023210:	ddf2      	ble.n	80231f8 <__ieee754_rem_pio2+0xf0>
 8023212:	eeb0 6b40 	vmov.f64	d6, d0
 8023216:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8023340 <__ieee754_rem_pio2+0x238>
 802321a:	eea4 6b03 	vfma.f64	d6, d4, d3
 802321e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8023222:	eea4 7b03 	vfma.f64	d7, d4, d3
 8023226:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8023348 <__ieee754_rem_pio2+0x240>
 802322a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 802322e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8023232:	ee13 3a90 	vmov	r3, s7
 8023236:	f3c3 530a 	ubfx	r3, r3, #20, #11
 802323a:	1ad3      	subs	r3, r2, r3
 802323c:	2b31      	cmp	r3, #49	; 0x31
 802323e:	dc17      	bgt.n	8023270 <__ieee754_rem_pio2+0x168>
 8023240:	eeb0 0b46 	vmov.f64	d0, d6
 8023244:	ed84 3b00 	vstr	d3, [r4]
 8023248:	ed94 6b00 	vldr	d6, [r4]
 802324c:	2d00      	cmp	r5, #0
 802324e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8023252:	ee30 7b47 	vsub.f64	d7, d0, d7
 8023256:	ed84 7b02 	vstr	d7, [r4, #8]
 802325a:	da85      	bge.n	8023168 <__ieee754_rem_pio2+0x60>
 802325c:	eeb1 6b46 	vneg.f64	d6, d6
 8023260:	ed84 6b00 	vstr	d6, [r4]
 8023264:	eeb1 7b47 	vneg.f64	d7, d7
 8023268:	4240      	negs	r0, r0
 802326a:	ed84 7b02 	vstr	d7, [r4, #8]
 802326e:	e77b      	b.n	8023168 <__ieee754_rem_pio2+0x60>
 8023270:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8023358 <__ieee754_rem_pio2+0x250>
 8023274:	eeb0 0b46 	vmov.f64	d0, d6
 8023278:	eea4 0b03 	vfma.f64	d0, d4, d3
 802327c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8023280:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8023360 <__ieee754_rem_pio2+0x258>
 8023284:	eea4 7b03 	vfma.f64	d7, d4, d3
 8023288:	ee95 7b06 	vfnms.f64	d7, d5, d6
 802328c:	ee30 6b47 	vsub.f64	d6, d0, d7
 8023290:	e7b2      	b.n	80231f8 <__ieee754_rem_pio2+0xf0>
 8023292:	4b3b      	ldr	r3, [pc, #236]	; (8023380 <__ieee754_rem_pio2+0x278>)
 8023294:	429e      	cmp	r6, r3
 8023296:	dd06      	ble.n	80232a6 <__ieee754_rem_pio2+0x19e>
 8023298:	ee30 7b40 	vsub.f64	d7, d0, d0
 802329c:	ed80 7b02 	vstr	d7, [r0, #8]
 80232a0:	ed80 7b00 	vstr	d7, [r0]
 80232a4:	e742      	b.n	802312c <__ieee754_rem_pio2+0x24>
 80232a6:	1532      	asrs	r2, r6, #20
 80232a8:	ee10 0a10 	vmov	r0, s0
 80232ac:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80232b0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80232b4:	ec41 0b17 	vmov	d7, r0, r1
 80232b8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80232bc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8023368 <__ieee754_rem_pio2+0x260>
 80232c0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80232c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80232c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80232cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80232d0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80232d4:	a902      	add	r1, sp, #8
 80232d6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80232da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80232de:	ed8d 6b04 	vstr	d6, [sp, #16]
 80232e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80232e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80232ea:	2603      	movs	r6, #3
 80232ec:	4608      	mov	r0, r1
 80232ee:	ed91 7b04 	vldr	d7, [r1, #16]
 80232f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80232f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232fa:	4633      	mov	r3, r6
 80232fc:	f1a1 0108 	sub.w	r1, r1, #8
 8023300:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8023304:	d0f3      	beq.n	80232ee <__ieee754_rem_pio2+0x1e6>
 8023306:	491f      	ldr	r1, [pc, #124]	; (8023384 <__ieee754_rem_pio2+0x27c>)
 8023308:	9101      	str	r1, [sp, #4]
 802330a:	2102      	movs	r1, #2
 802330c:	9100      	str	r1, [sp, #0]
 802330e:	4621      	mov	r1, r4
 8023310:	f000 f8aa 	bl	8023468 <__kernel_rem_pio2>
 8023314:	2d00      	cmp	r5, #0
 8023316:	f6bf af27 	bge.w	8023168 <__ieee754_rem_pio2+0x60>
 802331a:	ed94 7b00 	vldr	d7, [r4]
 802331e:	eeb1 7b47 	vneg.f64	d7, d7
 8023322:	ed84 7b00 	vstr	d7, [r4]
 8023326:	ed94 7b02 	vldr	d7, [r4, #8]
 802332a:	e79b      	b.n	8023264 <__ieee754_rem_pio2+0x15c>
 802332c:	f3af 8000 	nop.w
 8023330:	54400000 	.word	0x54400000
 8023334:	3ff921fb 	.word	0x3ff921fb
 8023338:	1a626331 	.word	0x1a626331
 802333c:	3dd0b461 	.word	0x3dd0b461
 8023340:	1a600000 	.word	0x1a600000
 8023344:	3dd0b461 	.word	0x3dd0b461
 8023348:	2e037073 	.word	0x2e037073
 802334c:	3ba3198a 	.word	0x3ba3198a
 8023350:	6dc9c883 	.word	0x6dc9c883
 8023354:	3fe45f30 	.word	0x3fe45f30
 8023358:	2e000000 	.word	0x2e000000
 802335c:	3ba3198a 	.word	0x3ba3198a
 8023360:	252049c1 	.word	0x252049c1
 8023364:	397b839a 	.word	0x397b839a
 8023368:	00000000 	.word	0x00000000
 802336c:	41700000 	.word	0x41700000
 8023370:	3fe921fb 	.word	0x3fe921fb
 8023374:	4002d97b 	.word	0x4002d97b
 8023378:	413921fb 	.word	0x413921fb
 802337c:	080288b0 	.word	0x080288b0
 8023380:	7fefffff 	.word	0x7fefffff
 8023384:	08028930 	.word	0x08028930

08023388 <__ieee754_sqrt>:
 8023388:	eeb1 0bc0 	vsqrt.f64	d0, d0
 802338c:	4770      	bx	lr
	...

08023390 <__kernel_cos>:
 8023390:	ee10 1a90 	vmov	r1, s1
 8023394:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8023398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802339c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80233a0:	da05      	bge.n	80233ae <__kernel_cos+0x1e>
 80233a2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80233a6:	ee17 3a90 	vmov	r3, s15
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	d03d      	beq.n	802342a <__kernel_cos+0x9a>
 80233ae:	ee20 3b00 	vmul.f64	d3, d0, d0
 80233b2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8023430 <__kernel_cos+0xa0>
 80233b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8023438 <__kernel_cos+0xa8>
 80233ba:	eea3 6b07 	vfma.f64	d6, d3, d7
 80233be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8023440 <__kernel_cos+0xb0>
 80233c2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80233c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8023448 <__kernel_cos+0xb8>
 80233ca:	eea7 6b03 	vfma.f64	d6, d7, d3
 80233ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8023450 <__kernel_cos+0xc0>
 80233d2:	4b23      	ldr	r3, [pc, #140]	; (8023460 <__kernel_cos+0xd0>)
 80233d4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80233d8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8023458 <__kernel_cos+0xc8>
 80233dc:	4299      	cmp	r1, r3
 80233de:	eea7 6b03 	vfma.f64	d6, d7, d3
 80233e2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80233e6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80233ea:	ee23 7b07 	vmul.f64	d7, d3, d7
 80233ee:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80233f2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80233f6:	dc04      	bgt.n	8023402 <__kernel_cos+0x72>
 80233f8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80233fc:	ee34 0b46 	vsub.f64	d0, d4, d6
 8023400:	4770      	bx	lr
 8023402:	4b18      	ldr	r3, [pc, #96]	; (8023464 <__kernel_cos+0xd4>)
 8023404:	4299      	cmp	r1, r3
 8023406:	dc0d      	bgt.n	8023424 <__kernel_cos+0x94>
 8023408:	2200      	movs	r2, #0
 802340a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 802340e:	ec43 2b15 	vmov	d5, r2, r3
 8023412:	ee34 0b45 	vsub.f64	d0, d4, d5
 8023416:	ee37 7b45 	vsub.f64	d7, d7, d5
 802341a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802341e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8023422:	4770      	bx	lr
 8023424:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8023428:	e7f3      	b.n	8023412 <__kernel_cos+0x82>
 802342a:	eeb0 0b44 	vmov.f64	d0, d4
 802342e:	4770      	bx	lr
 8023430:	be8838d4 	.word	0xbe8838d4
 8023434:	bda8fae9 	.word	0xbda8fae9
 8023438:	bdb4b1c4 	.word	0xbdb4b1c4
 802343c:	3e21ee9e 	.word	0x3e21ee9e
 8023440:	809c52ad 	.word	0x809c52ad
 8023444:	be927e4f 	.word	0xbe927e4f
 8023448:	19cb1590 	.word	0x19cb1590
 802344c:	3efa01a0 	.word	0x3efa01a0
 8023450:	16c15177 	.word	0x16c15177
 8023454:	bf56c16c 	.word	0xbf56c16c
 8023458:	5555554c 	.word	0x5555554c
 802345c:	3fa55555 	.word	0x3fa55555
 8023460:	3fd33332 	.word	0x3fd33332
 8023464:	3fe90000 	.word	0x3fe90000

08023468 <__kernel_rem_pio2>:
 8023468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802346c:	ed2d 8b06 	vpush	{d8-d10}
 8023470:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8023474:	469b      	mov	fp, r3
 8023476:	460f      	mov	r7, r1
 8023478:	4bcf      	ldr	r3, [pc, #828]	; (80237b8 <__kernel_rem_pio2+0x350>)
 802347a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 802347c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8023480:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8023484:	9000      	str	r0, [sp, #0]
 8023486:	f112 0f14 	cmn.w	r2, #20
 802348a:	bfa8      	it	ge
 802348c:	2318      	movge	r3, #24
 802348e:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8023492:	bfb8      	it	lt
 8023494:	2300      	movlt	r3, #0
 8023496:	f06f 0417 	mvn.w	r4, #23
 802349a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80237a0 <__kernel_rem_pio2+0x338>
 802349e:	bfa4      	itt	ge
 80234a0:	f1a2 0a03 	subge.w	sl, r2, #3
 80234a4:	fb9a f3f3 	sdivge	r3, sl, r3
 80234a8:	fb03 4404 	mla	r4, r3, r4, r4
 80234ac:	1a5d      	subs	r5, r3, r1
 80234ae:	4414      	add	r4, r2
 80234b0:	eb09 0601 	add.w	r6, r9, r1
 80234b4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80234b8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80234bc:	2200      	movs	r2, #0
 80234be:	42b2      	cmp	r2, r6
 80234c0:	dd12      	ble.n	80234e8 <__kernel_rem_pio2+0x80>
 80234c2:	aa18      	add	r2, sp, #96	; 0x60
 80234c4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80234c8:	460e      	mov	r6, r1
 80234ca:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80234ce:	f1cb 0a01 	rsb	sl, fp, #1
 80234d2:	eb0a 0006 	add.w	r0, sl, r6
 80234d6:	4581      	cmp	r9, r0
 80234d8:	db25      	blt.n	8023526 <__kernel_rem_pio2+0xbe>
 80234da:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 80237a0 <__kernel_rem_pio2+0x338>
 80234de:	f8dd e000 	ldr.w	lr, [sp]
 80234e2:	4615      	mov	r5, r2
 80234e4:	2000      	movs	r0, #0
 80234e6:	e015      	b.n	8023514 <__kernel_rem_pio2+0xac>
 80234e8:	42d5      	cmn	r5, r2
 80234ea:	d409      	bmi.n	8023500 <__kernel_rem_pio2+0x98>
 80234ec:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80234f0:	ee07 0a90 	vmov	s15, r0
 80234f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80234f8:	eca8 7b02 	vstmia	r8!, {d7}
 80234fc:	3201      	adds	r2, #1
 80234fe:	e7de      	b.n	80234be <__kernel_rem_pio2+0x56>
 8023500:	eeb0 7b46 	vmov.f64	d7, d6
 8023504:	e7f8      	b.n	80234f8 <__kernel_rem_pio2+0x90>
 8023506:	ecbe 5b02 	vldmia	lr!, {d5}
 802350a:	ed95 6b00 	vldr	d6, [r5]
 802350e:	3001      	adds	r0, #1
 8023510:	eea5 7b06 	vfma.f64	d7, d5, d6
 8023514:	4288      	cmp	r0, r1
 8023516:	f1a5 0508 	sub.w	r5, r5, #8
 802351a:	ddf4      	ble.n	8023506 <__kernel_rem_pio2+0x9e>
 802351c:	eca8 7b02 	vstmia	r8!, {d7}
 8023520:	3208      	adds	r2, #8
 8023522:	3601      	adds	r6, #1
 8023524:	e7d5      	b.n	80234d2 <__kernel_rem_pio2+0x6a>
 8023526:	aa04      	add	r2, sp, #16
 8023528:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 80237a8 <__kernel_rem_pio2+0x340>
 802352c:	ed9f aba0 	vldr	d10, [pc, #640]	; 80237b0 <__kernel_rem_pio2+0x348>
 8023530:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8023534:	9201      	str	r2, [sp, #4]
 8023536:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 802353a:	464e      	mov	r6, r9
 802353c:	ab90      	add	r3, sp, #576	; 0x240
 802353e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023542:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8023546:	ab04      	add	r3, sp, #16
 8023548:	4618      	mov	r0, r3
 802354a:	4632      	mov	r2, r6
 802354c:	2a00      	cmp	r2, #0
 802354e:	dc4e      	bgt.n	80235ee <__kernel_rem_pio2+0x186>
 8023550:	4620      	mov	r0, r4
 8023552:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8023556:	f000 fb4f 	bl	8023bf8 <scalbn>
 802355a:	eeb0 8b40 	vmov.f64	d8, d0
 802355e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8023562:	ee28 0b00 	vmul.f64	d0, d8, d0
 8023566:	f000 fad3 	bl	8023b10 <floor>
 802356a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 802356e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8023572:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8023576:	2c00      	cmp	r4, #0
 8023578:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 802357c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8023580:	ee38 8b40 	vsub.f64	d8, d8, d0
 8023584:	ee17 8a90 	vmov	r8, s15
 8023588:	dd46      	ble.n	8023618 <__kernel_rem_pio2+0x1b0>
 802358a:	1e70      	subs	r0, r6, #1
 802358c:	aa04      	add	r2, sp, #16
 802358e:	f1c4 0c18 	rsb	ip, r4, #24
 8023592:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8023596:	fa45 f20c 	asr.w	r2, r5, ip
 802359a:	4490      	add	r8, r2
 802359c:	fa02 f20c 	lsl.w	r2, r2, ip
 80235a0:	1aad      	subs	r5, r5, r2
 80235a2:	aa04      	add	r2, sp, #16
 80235a4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80235a8:	f1c4 0217 	rsb	r2, r4, #23
 80235ac:	4115      	asrs	r5, r2
 80235ae:	2d00      	cmp	r5, #0
 80235b0:	dd41      	ble.n	8023636 <__kernel_rem_pio2+0x1ce>
 80235b2:	f04f 0c00 	mov.w	ip, #0
 80235b6:	f108 0801 	add.w	r8, r8, #1
 80235ba:	4660      	mov	r0, ip
 80235bc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80235c0:	4566      	cmp	r6, ip
 80235c2:	dc69      	bgt.n	8023698 <__kernel_rem_pio2+0x230>
 80235c4:	2c00      	cmp	r4, #0
 80235c6:	dd03      	ble.n	80235d0 <__kernel_rem_pio2+0x168>
 80235c8:	2c01      	cmp	r4, #1
 80235ca:	d076      	beq.n	80236ba <__kernel_rem_pio2+0x252>
 80235cc:	2c02      	cmp	r4, #2
 80235ce:	d07f      	beq.n	80236d0 <__kernel_rem_pio2+0x268>
 80235d0:	2d02      	cmp	r5, #2
 80235d2:	d130      	bne.n	8023636 <__kernel_rem_pio2+0x1ce>
 80235d4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80235d8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80235dc:	b358      	cbz	r0, 8023636 <__kernel_rem_pio2+0x1ce>
 80235de:	4620      	mov	r0, r4
 80235e0:	9102      	str	r1, [sp, #8]
 80235e2:	f000 fb09 	bl	8023bf8 <scalbn>
 80235e6:	9902      	ldr	r1, [sp, #8]
 80235e8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80235ec:	e023      	b.n	8023636 <__kernel_rem_pio2+0x1ce>
 80235ee:	ee20 7b09 	vmul.f64	d7, d0, d9
 80235f2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80235f6:	3a01      	subs	r2, #1
 80235f8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80235fc:	ad68      	add	r5, sp, #416	; 0x1a0
 80235fe:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8023602:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8023606:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 802360a:	eca0 0a01 	vstmia	r0!, {s0}
 802360e:	ed95 0b00 	vldr	d0, [r5]
 8023612:	ee37 0b00 	vadd.f64	d0, d7, d0
 8023616:	e799      	b.n	802354c <__kernel_rem_pio2+0xe4>
 8023618:	d105      	bne.n	8023626 <__kernel_rem_pio2+0x1be>
 802361a:	1e72      	subs	r2, r6, #1
 802361c:	a804      	add	r0, sp, #16
 802361e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8023622:	15ed      	asrs	r5, r5, #23
 8023624:	e7c3      	b.n	80235ae <__kernel_rem_pio2+0x146>
 8023626:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 802362a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023632:	da2f      	bge.n	8023694 <__kernel_rem_pio2+0x22c>
 8023634:	2500      	movs	r5, #0
 8023636:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802363a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802363e:	f040 8087 	bne.w	8023750 <__kernel_rem_pio2+0x2e8>
 8023642:	1e73      	subs	r3, r6, #1
 8023644:	4618      	mov	r0, r3
 8023646:	f04f 0c00 	mov.w	ip, #0
 802364a:	4548      	cmp	r0, r9
 802364c:	da47      	bge.n	80236de <__kernel_rem_pio2+0x276>
 802364e:	f1bc 0f00 	cmp.w	ip, #0
 8023652:	d070      	beq.n	8023736 <__kernel_rem_pio2+0x2ce>
 8023654:	aa04      	add	r2, sp, #16
 8023656:	3c18      	subs	r4, #24
 8023658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802365c:	2a00      	cmp	r2, #0
 802365e:	d075      	beq.n	802374c <__kernel_rem_pio2+0x2e4>
 8023660:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8023664:	4620      	mov	r0, r4
 8023666:	9300      	str	r3, [sp, #0]
 8023668:	f000 fac6 	bl	8023bf8 <scalbn>
 802366c:	9b00      	ldr	r3, [sp, #0]
 802366e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80237a8 <__kernel_rem_pio2+0x340>
 8023672:	461a      	mov	r2, r3
 8023674:	2a00      	cmp	r2, #0
 8023676:	f280 80ac 	bge.w	80237d2 <__kernel_rem_pio2+0x36a>
 802367a:	4619      	mov	r1, r3
 802367c:	2000      	movs	r0, #0
 802367e:	2900      	cmp	r1, #0
 8023680:	f2c0 80cd 	blt.w	802381e <__kernel_rem_pio2+0x3b6>
 8023684:	aa68      	add	r2, sp, #416	; 0x1a0
 8023686:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 802368a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 80237a0 <__kernel_rem_pio2+0x338>
 802368e:	4e4b      	ldr	r6, [pc, #300]	; (80237bc <__kernel_rem_pio2+0x354>)
 8023690:	2200      	movs	r2, #0
 8023692:	e0b8      	b.n	8023806 <__kernel_rem_pio2+0x39e>
 8023694:	2502      	movs	r5, #2
 8023696:	e78c      	b.n	80235b2 <__kernel_rem_pio2+0x14a>
 8023698:	681a      	ldr	r2, [r3, #0]
 802369a:	b948      	cbnz	r0, 80236b0 <__kernel_rem_pio2+0x248>
 802369c:	b11a      	cbz	r2, 80236a6 <__kernel_rem_pio2+0x23e>
 802369e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80236a2:	601a      	str	r2, [r3, #0]
 80236a4:	2201      	movs	r2, #1
 80236a6:	f10c 0c01 	add.w	ip, ip, #1
 80236aa:	3304      	adds	r3, #4
 80236ac:	4610      	mov	r0, r2
 80236ae:	e787      	b.n	80235c0 <__kernel_rem_pio2+0x158>
 80236b0:	ebae 0202 	sub.w	r2, lr, r2
 80236b4:	601a      	str	r2, [r3, #0]
 80236b6:	4602      	mov	r2, r0
 80236b8:	e7f5      	b.n	80236a6 <__kernel_rem_pio2+0x23e>
 80236ba:	1e72      	subs	r2, r6, #1
 80236bc:	ab04      	add	r3, sp, #16
 80236be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80236c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80236c6:	f10d 0c10 	add.w	ip, sp, #16
 80236ca:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80236ce:	e77f      	b.n	80235d0 <__kernel_rem_pio2+0x168>
 80236d0:	1e72      	subs	r2, r6, #1
 80236d2:	ab04      	add	r3, sp, #16
 80236d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80236d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80236dc:	e7f3      	b.n	80236c6 <__kernel_rem_pio2+0x25e>
 80236de:	aa04      	add	r2, sp, #16
 80236e0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80236e4:	3801      	subs	r0, #1
 80236e6:	ea4c 0c02 	orr.w	ip, ip, r2
 80236ea:	e7ae      	b.n	802364a <__kernel_rem_pio2+0x1e2>
 80236ec:	3001      	adds	r0, #1
 80236ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80236f2:	2a00      	cmp	r2, #0
 80236f4:	d0fa      	beq.n	80236ec <__kernel_rem_pio2+0x284>
 80236f6:	eb06 020b 	add.w	r2, r6, fp
 80236fa:	ad18      	add	r5, sp, #96	; 0x60
 80236fc:	1c73      	adds	r3, r6, #1
 80236fe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8023702:	4406      	add	r6, r0
 8023704:	429e      	cmp	r6, r3
 8023706:	f6ff af19 	blt.w	802353c <__kernel_rem_pio2+0xd4>
 802370a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 802370e:	9d00      	ldr	r5, [sp, #0]
 8023710:	ee07 0a90 	vmov	s15, r0
 8023714:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8023718:	2000      	movs	r0, #0
 802371a:	eca2 7b02 	vstmia	r2!, {d7}
 802371e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80237a0 <__kernel_rem_pio2+0x338>
 8023722:	4694      	mov	ip, r2
 8023724:	4288      	cmp	r0, r1
 8023726:	dd09      	ble.n	802373c <__kernel_rem_pio2+0x2d4>
 8023728:	a868      	add	r0, sp, #416	; 0x1a0
 802372a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 802372e:	ed80 7b00 	vstr	d7, [r0]
 8023732:	3301      	adds	r3, #1
 8023734:	e7e6      	b.n	8023704 <__kernel_rem_pio2+0x29c>
 8023736:	9b01      	ldr	r3, [sp, #4]
 8023738:	2001      	movs	r0, #1
 802373a:	e7d8      	b.n	80236ee <__kernel_rem_pio2+0x286>
 802373c:	ecb5 5b02 	vldmia	r5!, {d5}
 8023740:	ed3c 6b02 	vldmdb	ip!, {d6}
 8023744:	3001      	adds	r0, #1
 8023746:	eea5 7b06 	vfma.f64	d7, d5, d6
 802374a:	e7eb      	b.n	8023724 <__kernel_rem_pio2+0x2bc>
 802374c:	3b01      	subs	r3, #1
 802374e:	e781      	b.n	8023654 <__kernel_rem_pio2+0x1ec>
 8023750:	4260      	negs	r0, r4
 8023752:	eeb0 0b48 	vmov.f64	d0, d8
 8023756:	f000 fa4f 	bl	8023bf8 <scalbn>
 802375a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80237b0 <__kernel_rem_pio2+0x348>
 802375e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8023762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023766:	db2b      	blt.n	80237c0 <__kernel_rem_pio2+0x358>
 8023768:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80237a8 <__kernel_rem_pio2+0x340>
 802376c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8023770:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8023774:	aa04      	add	r2, sp, #16
 8023776:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 802377a:	eea5 0b46 	vfms.f64	d0, d5, d6
 802377e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8023782:	a904      	add	r1, sp, #16
 8023784:	ee10 3a10 	vmov	r3, s0
 8023788:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 802378c:	ee17 2a10 	vmov	r2, s14
 8023790:	1c73      	adds	r3, r6, #1
 8023792:	3418      	adds	r4, #24
 8023794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8023798:	e762      	b.n	8023660 <__kernel_rem_pio2+0x1f8>
 802379a:	bf00      	nop
 802379c:	f3af 8000 	nop.w
	...
 80237ac:	3e700000 	.word	0x3e700000
 80237b0:	00000000 	.word	0x00000000
 80237b4:	41700000 	.word	0x41700000
 80237b8:	080292e8 	.word	0x080292e8
 80237bc:	080292a8 	.word	0x080292a8
 80237c0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80237c4:	aa04      	add	r2, sp, #16
 80237c6:	ee10 3a10 	vmov	r3, s0
 80237ca:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80237ce:	4633      	mov	r3, r6
 80237d0:	e746      	b.n	8023660 <__kernel_rem_pio2+0x1f8>
 80237d2:	a804      	add	r0, sp, #16
 80237d4:	a968      	add	r1, sp, #416	; 0x1a0
 80237d6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80237da:	9000      	str	r0, [sp, #0]
 80237dc:	ee07 0a90 	vmov	s15, r0
 80237e0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80237e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80237e8:	3a01      	subs	r2, #1
 80237ea:	ee27 7b00 	vmul.f64	d7, d7, d0
 80237ee:	ee20 0b06 	vmul.f64	d0, d0, d6
 80237f2:	ed81 7b00 	vstr	d7, [r1]
 80237f6:	e73d      	b.n	8023674 <__kernel_rem_pio2+0x20c>
 80237f8:	ecb6 5b02 	vldmia	r6!, {d5}
 80237fc:	ecb4 6b02 	vldmia	r4!, {d6}
 8023800:	3201      	adds	r2, #1
 8023802:	eea5 7b06 	vfma.f64	d7, d5, d6
 8023806:	454a      	cmp	r2, r9
 8023808:	dc01      	bgt.n	802380e <__kernel_rem_pio2+0x3a6>
 802380a:	4290      	cmp	r0, r2
 802380c:	daf4      	bge.n	80237f8 <__kernel_rem_pio2+0x390>
 802380e:	aa40      	add	r2, sp, #256	; 0x100
 8023810:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8023814:	ed82 7b00 	vstr	d7, [r2]
 8023818:	3901      	subs	r1, #1
 802381a:	3001      	adds	r0, #1
 802381c:	e72f      	b.n	802367e <__kernel_rem_pio2+0x216>
 802381e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8023820:	2a02      	cmp	r2, #2
 8023822:	dc0a      	bgt.n	802383a <__kernel_rem_pio2+0x3d2>
 8023824:	2a00      	cmp	r2, #0
 8023826:	dc5a      	bgt.n	80238de <__kernel_rem_pio2+0x476>
 8023828:	d039      	beq.n	802389e <__kernel_rem_pio2+0x436>
 802382a:	f008 0007 	and.w	r0, r8, #7
 802382e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8023832:	ecbd 8b06 	vpop	{d8-d10}
 8023836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802383a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 802383c:	2a03      	cmp	r2, #3
 802383e:	d1f4      	bne.n	802382a <__kernel_rem_pio2+0x3c2>
 8023840:	aa40      	add	r2, sp, #256	; 0x100
 8023842:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8023846:	4611      	mov	r1, r2
 8023848:	4618      	mov	r0, r3
 802384a:	2800      	cmp	r0, #0
 802384c:	f1a1 0108 	sub.w	r1, r1, #8
 8023850:	dc52      	bgt.n	80238f8 <__kernel_rem_pio2+0x490>
 8023852:	4619      	mov	r1, r3
 8023854:	2901      	cmp	r1, #1
 8023856:	f1a2 0208 	sub.w	r2, r2, #8
 802385a:	dc5d      	bgt.n	8023918 <__kernel_rem_pio2+0x4b0>
 802385c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8023960 <__kernel_rem_pio2+0x4f8>
 8023860:	2b01      	cmp	r3, #1
 8023862:	dc69      	bgt.n	8023938 <__kernel_rem_pio2+0x4d0>
 8023864:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8023868:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 802386c:	2d00      	cmp	r5, #0
 802386e:	d16c      	bne.n	802394a <__kernel_rem_pio2+0x4e2>
 8023870:	ed87 5b00 	vstr	d5, [r7]
 8023874:	ed87 6b02 	vstr	d6, [r7, #8]
 8023878:	ed87 7b04 	vstr	d7, [r7, #16]
 802387c:	e7d5      	b.n	802382a <__kernel_rem_pio2+0x3c2>
 802387e:	aa40      	add	r2, sp, #256	; 0x100
 8023880:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8023884:	ed92 6b00 	vldr	d6, [r2]
 8023888:	3b01      	subs	r3, #1
 802388a:	ee37 7b06 	vadd.f64	d7, d7, d6
 802388e:	2b00      	cmp	r3, #0
 8023890:	daf5      	bge.n	802387e <__kernel_rem_pio2+0x416>
 8023892:	b10d      	cbz	r5, 8023898 <__kernel_rem_pio2+0x430>
 8023894:	eeb1 7b47 	vneg.f64	d7, d7
 8023898:	ed87 7b00 	vstr	d7, [r7]
 802389c:	e7c5      	b.n	802382a <__kernel_rem_pio2+0x3c2>
 802389e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8023960 <__kernel_rem_pio2+0x4f8>
 80238a2:	e7f4      	b.n	802388e <__kernel_rem_pio2+0x426>
 80238a4:	a940      	add	r1, sp, #256	; 0x100
 80238a6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80238aa:	ed91 7b00 	vldr	d7, [r1]
 80238ae:	3a01      	subs	r2, #1
 80238b0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80238b4:	2a00      	cmp	r2, #0
 80238b6:	daf5      	bge.n	80238a4 <__kernel_rem_pio2+0x43c>
 80238b8:	b1ad      	cbz	r5, 80238e6 <__kernel_rem_pio2+0x47e>
 80238ba:	eeb1 7b46 	vneg.f64	d7, d6
 80238be:	ed87 7b00 	vstr	d7, [r7]
 80238c2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 80238c6:	a942      	add	r1, sp, #264	; 0x108
 80238c8:	2201      	movs	r2, #1
 80238ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80238ce:	4293      	cmp	r3, r2
 80238d0:	da0c      	bge.n	80238ec <__kernel_rem_pio2+0x484>
 80238d2:	b10d      	cbz	r5, 80238d8 <__kernel_rem_pio2+0x470>
 80238d4:	eeb1 7b47 	vneg.f64	d7, d7
 80238d8:	ed87 7b02 	vstr	d7, [r7, #8]
 80238dc:	e7a5      	b.n	802382a <__kernel_rem_pio2+0x3c2>
 80238de:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8023960 <__kernel_rem_pio2+0x4f8>
 80238e2:	461a      	mov	r2, r3
 80238e4:	e7e6      	b.n	80238b4 <__kernel_rem_pio2+0x44c>
 80238e6:	eeb0 7b46 	vmov.f64	d7, d6
 80238ea:	e7e8      	b.n	80238be <__kernel_rem_pio2+0x456>
 80238ec:	ecb1 6b02 	vldmia	r1!, {d6}
 80238f0:	3201      	adds	r2, #1
 80238f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80238f6:	e7ea      	b.n	80238ce <__kernel_rem_pio2+0x466>
 80238f8:	ed91 7b00 	vldr	d7, [r1]
 80238fc:	ed91 5b02 	vldr	d5, [r1, #8]
 8023900:	3801      	subs	r0, #1
 8023902:	ee37 6b05 	vadd.f64	d6, d7, d5
 8023906:	ee37 7b46 	vsub.f64	d7, d7, d6
 802390a:	ed81 6b00 	vstr	d6, [r1]
 802390e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8023912:	ed81 7b02 	vstr	d7, [r1, #8]
 8023916:	e798      	b.n	802384a <__kernel_rem_pio2+0x3e2>
 8023918:	ed92 7b00 	vldr	d7, [r2]
 802391c:	ed92 5b02 	vldr	d5, [r2, #8]
 8023920:	3901      	subs	r1, #1
 8023922:	ee37 6b05 	vadd.f64	d6, d7, d5
 8023926:	ee37 7b46 	vsub.f64	d7, d7, d6
 802392a:	ed82 6b00 	vstr	d6, [r2]
 802392e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8023932:	ed82 7b02 	vstr	d7, [r2, #8]
 8023936:	e78d      	b.n	8023854 <__kernel_rem_pio2+0x3ec>
 8023938:	aa40      	add	r2, sp, #256	; 0x100
 802393a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 802393e:	ed92 6b00 	vldr	d6, [r2]
 8023942:	3b01      	subs	r3, #1
 8023944:	ee37 7b06 	vadd.f64	d7, d7, d6
 8023948:	e78a      	b.n	8023860 <__kernel_rem_pio2+0x3f8>
 802394a:	eeb1 5b45 	vneg.f64	d5, d5
 802394e:	eeb1 6b46 	vneg.f64	d6, d6
 8023952:	ed87 5b00 	vstr	d5, [r7]
 8023956:	eeb1 7b47 	vneg.f64	d7, d7
 802395a:	ed87 6b02 	vstr	d6, [r7, #8]
 802395e:	e78b      	b.n	8023878 <__kernel_rem_pio2+0x410>
	...

08023968 <__kernel_sin>:
 8023968:	ee10 3a90 	vmov	r3, s1
 802396c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023970:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8023974:	da04      	bge.n	8023980 <__kernel_sin+0x18>
 8023976:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 802397a:	ee17 3a90 	vmov	r3, s15
 802397e:	b35b      	cbz	r3, 80239d8 <__kernel_sin+0x70>
 8023980:	ee20 6b00 	vmul.f64	d6, d0, d0
 8023984:	ee20 5b06 	vmul.f64	d5, d0, d6
 8023988:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80239e0 <__kernel_sin+0x78>
 802398c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80239e8 <__kernel_sin+0x80>
 8023990:	eea6 4b07 	vfma.f64	d4, d6, d7
 8023994:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80239f0 <__kernel_sin+0x88>
 8023998:	eea4 7b06 	vfma.f64	d7, d4, d6
 802399c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80239f8 <__kernel_sin+0x90>
 80239a0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80239a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8023a00 <__kernel_sin+0x98>
 80239a8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80239ac:	b930      	cbnz	r0, 80239bc <__kernel_sin+0x54>
 80239ae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8023a08 <__kernel_sin+0xa0>
 80239b2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80239b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80239ba:	4770      	bx	lr
 80239bc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80239c0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80239c4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80239c8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80239cc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8023a10 <__kernel_sin+0xa8>
 80239d0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80239d4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80239d8:	4770      	bx	lr
 80239da:	bf00      	nop
 80239dc:	f3af 8000 	nop.w
 80239e0:	5acfd57c 	.word	0x5acfd57c
 80239e4:	3de5d93a 	.word	0x3de5d93a
 80239e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80239ec:	be5ae5e6 	.word	0xbe5ae5e6
 80239f0:	57b1fe7d 	.word	0x57b1fe7d
 80239f4:	3ec71de3 	.word	0x3ec71de3
 80239f8:	19c161d5 	.word	0x19c161d5
 80239fc:	bf2a01a0 	.word	0xbf2a01a0
 8023a00:	1110f8a6 	.word	0x1110f8a6
 8023a04:	3f811111 	.word	0x3f811111
 8023a08:	55555549 	.word	0x55555549
 8023a0c:	bfc55555 	.word	0xbfc55555
 8023a10:	55555549 	.word	0x55555549
 8023a14:	3fc55555 	.word	0x3fc55555

08023a18 <with_errno>:
 8023a18:	b513      	push	{r0, r1, r4, lr}
 8023a1a:	4604      	mov	r4, r0
 8023a1c:	ed8d 0b00 	vstr	d0, [sp]
 8023a20:	f7fd f980 	bl	8020d24 <__errno>
 8023a24:	ed9d 0b00 	vldr	d0, [sp]
 8023a28:	6004      	str	r4, [r0, #0]
 8023a2a:	b002      	add	sp, #8
 8023a2c:	bd10      	pop	{r4, pc}

08023a2e <xflow>:
 8023a2e:	b082      	sub	sp, #8
 8023a30:	b158      	cbz	r0, 8023a4a <xflow+0x1c>
 8023a32:	eeb1 7b40 	vneg.f64	d7, d0
 8023a36:	ed8d 7b00 	vstr	d7, [sp]
 8023a3a:	ed9d 7b00 	vldr	d7, [sp]
 8023a3e:	2022      	movs	r0, #34	; 0x22
 8023a40:	ee20 0b07 	vmul.f64	d0, d0, d7
 8023a44:	b002      	add	sp, #8
 8023a46:	f7ff bfe7 	b.w	8023a18 <with_errno>
 8023a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8023a4e:	e7f2      	b.n	8023a36 <xflow+0x8>

08023a50 <__math_uflow>:
 8023a50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023a58 <__math_uflow+0x8>
 8023a54:	f7ff bfeb 	b.w	8023a2e <xflow>
 8023a58:	00000000 	.word	0x00000000
 8023a5c:	10000000 	.word	0x10000000

08023a60 <__math_oflow>:
 8023a60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023a68 <__math_oflow+0x8>
 8023a64:	f7ff bfe3 	b.w	8023a2e <xflow>
 8023a68:	00000000 	.word	0x00000000
 8023a6c:	70000000 	.word	0x70000000

08023a70 <__math_divzero>:
 8023a70:	b082      	sub	sp, #8
 8023a72:	2800      	cmp	r0, #0
 8023a74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8023a78:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8023a7c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8023a80:	ed8d 7b00 	vstr	d7, [sp]
 8023a84:	ed9d 0b00 	vldr	d0, [sp]
 8023a88:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8023a98 <__math_divzero+0x28>
 8023a8c:	2022      	movs	r0, #34	; 0x22
 8023a8e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8023a92:	b002      	add	sp, #8
 8023a94:	f7ff bfc0 	b.w	8023a18 <with_errno>
	...

08023aa0 <__math_invalid>:
 8023aa0:	eeb0 7b40 	vmov.f64	d7, d0
 8023aa4:	eeb4 7b47 	vcmp.f64	d7, d7
 8023aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023aac:	ee30 6b40 	vsub.f64	d6, d0, d0
 8023ab0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8023ab4:	d602      	bvs.n	8023abc <__math_invalid+0x1c>
 8023ab6:	2021      	movs	r0, #33	; 0x21
 8023ab8:	f7ff bfae 	b.w	8023a18 <with_errno>
 8023abc:	4770      	bx	lr

08023abe <__math_check_uflow>:
 8023abe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8023ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ac6:	d102      	bne.n	8023ace <__math_check_uflow+0x10>
 8023ac8:	2022      	movs	r0, #34	; 0x22
 8023aca:	f7ff bfa5 	b.w	8023a18 <with_errno>
 8023ace:	4770      	bx	lr

08023ad0 <__math_check_oflow>:
 8023ad0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8023af0 <__math_check_oflow+0x20>
 8023ad4:	eeb0 7bc0 	vabs.f64	d7, d0
 8023ad8:	eeb4 7b46 	vcmp.f64	d7, d6
 8023adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ae0:	dd02      	ble.n	8023ae8 <__math_check_oflow+0x18>
 8023ae2:	2022      	movs	r0, #34	; 0x22
 8023ae4:	f7ff bf98 	b.w	8023a18 <with_errno>
 8023ae8:	4770      	bx	lr
 8023aea:	bf00      	nop
 8023aec:	f3af 8000 	nop.w
 8023af0:	ffffffff 	.word	0xffffffff
 8023af4:	7fefffff 	.word	0x7fefffff

08023af8 <fabs>:
 8023af8:	ec51 0b10 	vmov	r0, r1, d0
 8023afc:	ee10 2a10 	vmov	r2, s0
 8023b00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023b04:	ec43 2b10 	vmov	d0, r2, r3
 8023b08:	4770      	bx	lr
 8023b0a:	0000      	movs	r0, r0
 8023b0c:	0000      	movs	r0, r0
	...

08023b10 <floor>:
 8023b10:	ee10 1a90 	vmov	r1, s1
 8023b14:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023b18:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8023b1c:	2b13      	cmp	r3, #19
 8023b1e:	b530      	push	{r4, r5, lr}
 8023b20:	ee10 0a10 	vmov	r0, s0
 8023b24:	ee10 5a10 	vmov	r5, s0
 8023b28:	dc31      	bgt.n	8023b8e <floor+0x7e>
 8023b2a:	2b00      	cmp	r3, #0
 8023b2c:	da15      	bge.n	8023b5a <floor+0x4a>
 8023b2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8023be8 <floor+0xd8>
 8023b32:	ee30 0b07 	vadd.f64	d0, d0, d7
 8023b36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8023b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b3e:	dd07      	ble.n	8023b50 <floor+0x40>
 8023b40:	2900      	cmp	r1, #0
 8023b42:	da4e      	bge.n	8023be2 <floor+0xd2>
 8023b44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023b48:	4318      	orrs	r0, r3
 8023b4a:	d001      	beq.n	8023b50 <floor+0x40>
 8023b4c:	4928      	ldr	r1, [pc, #160]	; (8023bf0 <floor+0xe0>)
 8023b4e:	2000      	movs	r0, #0
 8023b50:	460b      	mov	r3, r1
 8023b52:	4602      	mov	r2, r0
 8023b54:	ec43 2b10 	vmov	d0, r2, r3
 8023b58:	e020      	b.n	8023b9c <floor+0x8c>
 8023b5a:	4a26      	ldr	r2, [pc, #152]	; (8023bf4 <floor+0xe4>)
 8023b5c:	411a      	asrs	r2, r3
 8023b5e:	ea01 0402 	and.w	r4, r1, r2
 8023b62:	4304      	orrs	r4, r0
 8023b64:	d01a      	beq.n	8023b9c <floor+0x8c>
 8023b66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8023be8 <floor+0xd8>
 8023b6a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8023b6e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8023b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b76:	ddeb      	ble.n	8023b50 <floor+0x40>
 8023b78:	2900      	cmp	r1, #0
 8023b7a:	bfbe      	ittt	lt
 8023b7c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8023b80:	fa40 f303 	asrlt.w	r3, r0, r3
 8023b84:	18c9      	addlt	r1, r1, r3
 8023b86:	ea21 0102 	bic.w	r1, r1, r2
 8023b8a:	2000      	movs	r0, #0
 8023b8c:	e7e0      	b.n	8023b50 <floor+0x40>
 8023b8e:	2b33      	cmp	r3, #51	; 0x33
 8023b90:	dd05      	ble.n	8023b9e <floor+0x8e>
 8023b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8023b96:	d101      	bne.n	8023b9c <floor+0x8c>
 8023b98:	ee30 0b00 	vadd.f64	d0, d0, d0
 8023b9c:	bd30      	pop	{r4, r5, pc}
 8023b9e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8023ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023ba6:	40e2      	lsrs	r2, r4
 8023ba8:	4202      	tst	r2, r0
 8023baa:	d0f7      	beq.n	8023b9c <floor+0x8c>
 8023bac:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8023be8 <floor+0xd8>
 8023bb0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8023bb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8023bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bbc:	ddc8      	ble.n	8023b50 <floor+0x40>
 8023bbe:	2900      	cmp	r1, #0
 8023bc0:	da02      	bge.n	8023bc8 <floor+0xb8>
 8023bc2:	2b14      	cmp	r3, #20
 8023bc4:	d103      	bne.n	8023bce <floor+0xbe>
 8023bc6:	3101      	adds	r1, #1
 8023bc8:	ea20 0002 	bic.w	r0, r0, r2
 8023bcc:	e7c0      	b.n	8023b50 <floor+0x40>
 8023bce:	2401      	movs	r4, #1
 8023bd0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8023bd4:	fa04 f303 	lsl.w	r3, r4, r3
 8023bd8:	4418      	add	r0, r3
 8023bda:	42a8      	cmp	r0, r5
 8023bdc:	bf38      	it	cc
 8023bde:	1909      	addcc	r1, r1, r4
 8023be0:	e7f2      	b.n	8023bc8 <floor+0xb8>
 8023be2:	2000      	movs	r0, #0
 8023be4:	4601      	mov	r1, r0
 8023be6:	e7b3      	b.n	8023b50 <floor+0x40>
 8023be8:	8800759c 	.word	0x8800759c
 8023bec:	7e37e43c 	.word	0x7e37e43c
 8023bf0:	bff00000 	.word	0xbff00000
 8023bf4:	000fffff 	.word	0x000fffff

08023bf8 <scalbn>:
 8023bf8:	b082      	sub	sp, #8
 8023bfa:	ed8d 0b00 	vstr	d0, [sp]
 8023bfe:	9b01      	ldr	r3, [sp, #4]
 8023c00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023c04:	b9a2      	cbnz	r2, 8023c30 <scalbn+0x38>
 8023c06:	9a00      	ldr	r2, [sp, #0]
 8023c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023c0c:	4313      	orrs	r3, r2
 8023c0e:	d03a      	beq.n	8023c86 <scalbn+0x8e>
 8023c10:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8023ce8 <scalbn+0xf0>
 8023c14:	4b40      	ldr	r3, [pc, #256]	; (8023d18 <scalbn+0x120>)
 8023c16:	ee20 7b07 	vmul.f64	d7, d0, d7
 8023c1a:	4298      	cmp	r0, r3
 8023c1c:	ed8d 7b00 	vstr	d7, [sp]
 8023c20:	da11      	bge.n	8023c46 <scalbn+0x4e>
 8023c22:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8023cf0 <scalbn+0xf8>
 8023c26:	ed9d 6b00 	vldr	d6, [sp]
 8023c2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023c2e:	e007      	b.n	8023c40 <scalbn+0x48>
 8023c30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8023c34:	428a      	cmp	r2, r1
 8023c36:	d10a      	bne.n	8023c4e <scalbn+0x56>
 8023c38:	ed9d 7b00 	vldr	d7, [sp]
 8023c3c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8023c40:	ed8d 7b00 	vstr	d7, [sp]
 8023c44:	e01f      	b.n	8023c86 <scalbn+0x8e>
 8023c46:	9b01      	ldr	r3, [sp, #4]
 8023c48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023c4c:	3a36      	subs	r2, #54	; 0x36
 8023c4e:	4402      	add	r2, r0
 8023c50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8023c54:	428a      	cmp	r2, r1
 8023c56:	dd0a      	ble.n	8023c6e <scalbn+0x76>
 8023c58:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8023cf8 <scalbn+0x100>
 8023c5c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8023d00 <scalbn+0x108>
 8023c60:	eeb0 6b47 	vmov.f64	d6, d7
 8023c64:	9b01      	ldr	r3, [sp, #4]
 8023c66:	2b00      	cmp	r3, #0
 8023c68:	fe27 7b05 	vselge.f64	d7, d7, d5
 8023c6c:	e7dd      	b.n	8023c2a <scalbn+0x32>
 8023c6e:	2a00      	cmp	r2, #0
 8023c70:	dd0d      	ble.n	8023c8e <scalbn+0x96>
 8023c72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023c76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023c7a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023c7e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8023c82:	e9cd 0100 	strd	r0, r1, [sp]
 8023c86:	ed9d 0b00 	vldr	d0, [sp]
 8023c8a:	b002      	add	sp, #8
 8023c8c:	4770      	bx	lr
 8023c8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023c92:	da18      	bge.n	8023cc6 <scalbn+0xce>
 8023c94:	f24c 3350 	movw	r3, #50000	; 0xc350
 8023c98:	4298      	cmp	r0, r3
 8023c9a:	9b01      	ldr	r3, [sp, #4]
 8023c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8023ca0:	dd09      	ble.n	8023cb6 <scalbn+0xbe>
 8023ca2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8023cf8 <scalbn+0x100>
 8023ca6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8023d00 <scalbn+0x108>
 8023caa:	eeb0 6b47 	vmov.f64	d6, d7
 8023cae:	2b00      	cmp	r3, #0
 8023cb0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8023cb4:	e7b9      	b.n	8023c2a <scalbn+0x32>
 8023cb6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8023cf0 <scalbn+0xf8>
 8023cba:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8023d08 <scalbn+0x110>
 8023cbe:	eeb0 6b47 	vmov.f64	d6, d7
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	e7f4      	b.n	8023cb0 <scalbn+0xb8>
 8023cc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023cca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023cce:	3236      	adds	r2, #54	; 0x36
 8023cd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023cd4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8023cd8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8023d10 <scalbn+0x118>
 8023cdc:	ec41 0b17 	vmov	d7, r0, r1
 8023ce0:	e7a3      	b.n	8023c2a <scalbn+0x32>
 8023ce2:	bf00      	nop
 8023ce4:	f3af 8000 	nop.w
 8023ce8:	00000000 	.word	0x00000000
 8023cec:	43500000 	.word	0x43500000
 8023cf0:	c2f8f359 	.word	0xc2f8f359
 8023cf4:	01a56e1f 	.word	0x01a56e1f
 8023cf8:	8800759c 	.word	0x8800759c
 8023cfc:	7e37e43c 	.word	0x7e37e43c
 8023d00:	8800759c 	.word	0x8800759c
 8023d04:	fe37e43c 	.word	0xfe37e43c
 8023d08:	c2f8f359 	.word	0xc2f8f359
 8023d0c:	81a56e1f 	.word	0x81a56e1f
 8023d10:	00000000 	.word	0x00000000
 8023d14:	3c900000 	.word	0x3c900000
 8023d18:	ffff3cb0 	.word	0xffff3cb0

08023d1c <_init>:
 8023d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d1e:	bf00      	nop
 8023d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023d22:	bc08      	pop	{r3}
 8023d24:	469e      	mov	lr, r3
 8023d26:	4770      	bx	lr

08023d28 <_fini>:
 8023d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d2a:	bf00      	nop
 8023d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023d2e:	bc08      	pop	{r3}
 8023d30:	469e      	mov	lr, r3
 8023d32:	4770      	bx	lr
